cscope 15 $HOME/devel/xfsprogs-dev/db               0000660262
	@addr.c

19 
	~"libxfs.h
"

20 
	~"addr.h
"

21 
	~"comm™d.h
"

22 
	~"ty≥.h
"

23 
	~"Áddr.h
"

24 
	~"Âröt.h
"

25 
	~"fõld.h
"

26 
	~"io.h
"

27 
	~"Êi°.h
"

28 
	~"öode.h
"

29 
	~"ouçut.h
"

31 
addr_f
(
¨gc
, **
¨gv
);

32 
addr_hñp
();

34 c⁄° 
cmdöfo_t
 
	gaddr_cmd
 =

35 { "addr", "a", 
addr_f
, 0, 1, 1, 
N_
("[field-expression]"),

36 
N_
("£àcuºíàaddªss"), 
addr_hñp
 };

39 
	$addr_hñp
()

41 
	`db¥ötf
(
	`_
(

53 
	}
}

56 
	$addr_f
(

57 
¨gc
,

58 **
¨gv
)

60 
ad‚c_t
 
adf
;

61 c⁄° 
·©å_t
 *
Á
;

62 
Êi°_t
 *
Ê
;

63 c⁄° 
fõld_t
 *
Êd
;

64 
ty≤m_t
 
√xt
;

65 
Êi°_t
 *
tÊ
;

67 i‡(
¨gc
 == 1) {

68 
	`¥öt_iocur
("cuºít", 
iocur_t›
);

71 i‡(
cur_typ
 =
NULL
) {

72 
	`db¥ötf
(
	`_
("no currentÅype\n"));

75 
Êd
 = 
cur_typ
->
fõlds
;

76 i‡(
Êd
 !
NULL
 && fld->
«me
[0] == '\0') {

77 
Á
 = &
·©åèb
[
Êd
->
·yp
];

78 
	`ASSERT
(
Á
->
·yp
 =
Êd
->ftyp);

79 
Êd
 = 
Á
->
subÊd
;

81 i‡(
Êd
 =
NULL
) {

82 
	`db¥ötf
(
	`_
("nÿfõld†f‹Åy≥ %s\n"), 
cur_typ
->
«me
);

85 
Ê
 = 
	`Êi°_sˇn
(
¨gv
[1]);

86 i‡(
Ê
 =
NULL
)

88 i‡(!
	`Êi°_∑r£
(
Êd
, 
Ê
, 
iocur_t›
->
d©a
, 0))

89 
out
;

91 
	`Êi°_¥öt
(
Ê
);

92 
tÊ
 = 
Ê
;ÅÊ->
chûd
 !
NULL
;Åfl =Åfl->child) {

93 i‡((
tÊ
->
Êags
 & 
FL_OKLOW
Ë&&ÅÊ->
low
 <ÅÊ->
high
) {

94 
	`db¥ötf
(
	`_
("arrayÇotállowed foráddr command\n"));

95 
out
;

98 
Êd
 = 
tÊ
->fld;

99 
√xt
 = 
Êd
->next;

100 i‡(
√xt
 =
TYP_INODATA
)

101 
√xt
 = 
	`öode_√xt_ty≥
();

102 i‡(
√xt
 =
TYP_NONE
) {

103 
	`db¥ötf
(
	`_
("nÿ√xàty≥ f‹ fõld %s\n"), 
Êd
->
«me
);

104 
out
;

106 
Á
 = &
·©åèb
[
Êd
->
·yp
];

107 
	`ASSERT
(
Á
->
·yp
 =
Êd
->ftyp);

108 
adf
 = 
Á
->
adfunc
;

109 i‡(
adf
 =
NULL
) {

110 
	`db¥ötf
(
	`_
("noáddr function for field %s (type %s)\n"),

111 
Êd
->
«me
, 
Á
->name);

112 
out
;

114 (*
adf
)(
iocur_t›
->
d©a
, 
tÊ
->
off£t
, 
√xt
);

115 
out
:

116 
	`Êi°_‰ì
(
Ê
);

118 
	}
}

121 
	$addr_öô
()

123 
	`add_comm™d
(&
addr_cmd
);

124 
	}
}

	@addr.h

19 
addr_öô
();

	@agf.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"io.h
"

26 
	~"bô.h
"

27 
	~"ouçut.h
"

28 
	~"öô.h
"

29 
	~"agf.h
"

31 
agf_f
(
¨gc
, **
¨gv
);

32 
agf_hñp
();

34 c⁄° 
cmdöfo_t
 
	gagf_cmd
 =

35 { "agf", 
NULL
, 
agf_f
, 0, 1, 1, 
N_
("[agno]"),

36 
N_
("£àaddªs†tÿag‡hódî"), 
agf_hñp
 };

38 c⁄° 
fõld_t
 
	gagf_hÊd
[] = {

39 { "", 
FLDT_AGF
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

40 { 
NULL
 }

43 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_agf_t
, 
agf_
 ## f))

	)

44 
	#SZ
(
f
Ë
	`bôszof
(
xfs_agf_t
, 
agf_
 ## f)

	)

45 c⁄° 
fõld_t
 
	gagf_Êds
[] = {

46 { "magi˙um", 
FLDT_UINT32X
, 
OI
(
OFF
(
magi˙um
)), 
C1
, 0, 
TYP_NONE
 },

47 { "vîsi⁄num", 
FLDT_UINT32D
, 
OI
(
OFF
(
vîsi⁄num
)), 
C1
, 0, 
TYP_NONE
 },

48 { "£qno", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
£qno
)), 
C1
, 0, 
TYP_NONE
 },

49 { "Àngth", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
Àngth
)), 
C1
, 0, 
TYP_NONE
 },

50 { "roŸs", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
roŸs
)), 
CI
(
XFS_BTNUM_AGF
),

51 
FLD_ARRAY
|
FLD_SKIPALL
, 
TYP_NONE
 },

52 { "bn‹oŸ", 
FLDT_AGBLOCK
,

53 
OI
(
OFF
(
roŸs
Ë+ 
XFS_BTNUM_BNO
 * 
SZ
‘oŸs[XFS_BTNUM_BNO])), 
C1
, 0,

54 
TYP_BNOBT
 },

55 { "˙åoŸ", 
FLDT_AGBLOCK
,

56 
OI
(
OFF
(
roŸs
Ë+ 
XFS_BTNUM_CNT
 * 
SZ
‘oŸs[XFS_BTNUM_CNT])), 
C1
, 0,

57 
TYP_CNTBT
 },

58 { "rm≠roŸ", 
FLDT_AGBLOCKNZ
,

59 
OI
(
OFF
(
roŸs
Ë+ 
XFS_BTNUM_RMAP
 * 
SZ
‘oŸs[XFS_BTNUM_RMAP])), 
C1
, 0,

60 
TYP_RMAPBT
 },

61 { "ªf˙åoŸ", 
FLDT_AGBLOCKNZ
,

62 
OI
(
OFF
(
ªfcou¡_roŸ
)), 
C1
, 0,

63 
TYP_REFCBT
 },

64 { "Àvñs", 
FLDT_UINT32D
, 
OI
(
OFF
(
Àvñs
)), 
CI
(
XFS_BTNUM_AGF
),

65 
FLD_ARRAY
|
FLD_SKIPALL
, 
TYP_NONE
 },

66 { "bnﬁevñ", 
FLDT_UINT32D
,

67 
OI
(
OFF
(
Àvñs
Ë+ 
XFS_BTNUM_BNO
 * 
SZ
÷evñs[XFS_BTNUM_BNO])), 
C1
, 0,

68 
TYP_NONE
 },

69 { "˙éevñ", 
FLDT_UINT32D
,

70 
OI
(
OFF
(
Àvñs
Ë+ 
XFS_BTNUM_CNT
 * 
SZ
÷evñs[XFS_BTNUM_CNT])), 
C1
, 0,

71 
TYP_NONE
 },

72 { "rm≠Àvñ", 
FLDT_UINT32D
,

73 
OI
(
OFF
(
Àvñs
Ë+ 
XFS_BTNUM_RMAP
 * 
SZ
÷evñs[XFS_BTNUM_RMAP])), 
C1
, 0,

74 
TYP_NONE
 },

75 { "ªf˙éevñ", 
FLDT_UINT32D
,

76 
OI
(
OFF
(
ªfcou¡_Àvñ
)), 
C1
, 0,

77 
TYP_NONE
 },

78 { "rm≠blocks", 
FLDT_UINT32D
,

79 
OI
(
OFF
(
rm≠_blocks
)), 
C1
, 0,

80 
TYP_NONE
 },

81 { "ªf˙tblocks", 
FLDT_UINT32D
,

82 
OI
(
OFF
(
ªfcou¡_blocks
)), 
C1
, 0,

83 
TYP_NONE
 },

84 { "Êfú°", 
FLDT_UINT32D
, 
OI
(
OFF
(
Êfú°
)), 
C1
, 0, 
TYP_NONE
 },

85 { "Êœ°", 
FLDT_UINT32D
, 
OI
(
OFF
(
Êœ°
)), 
C1
, 0, 
TYP_NONE
 },

86 { "Êcou¡", 
FLDT_UINT32D
, 
OI
(
OFF
(
Êcou¡
)), 
C1
, 0, 
TYP_NONE
 },

87 { "‰ìblks", 
FLDT_EXTLEN
, 
OI
(
OFF
(
‰ìblks
)), 
C1
, 0, 
TYP_NONE
 },

88 { "l⁄ge°", 
FLDT_EXTLEN
, 
OI
(
OFF
(
l⁄ge°
)), 
C1
, 0, 
TYP_NONE
 },

89 { "båìblks", 
FLDT_UINT32D
, 
OI
(
OFF
(
båìblks
)), 
C1
, 0, 
TYP_NONE
 },

90 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

91 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

92 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

93 { 
NULL
 }

97 
	$agf_hñp
()

99 
	`db¥ötf
(
	`_
(

112 
	}
}

115 
	$agf_f
(

116 
¨gc
,

117 **
¨gv
)

119 
xfs_agnumbî_t
 
agno
;

120 *
p
;

122 i‡(
¨gc
 > 1) {

123 
agno
 = (
xfs_agnumbî_t
)
	`°πoul
(
¨gv
[1], &
p
, 0);

124 i‡(*
p
 !'\0' || 
agno
 >
mp
->
m_sb
.
sb_agcou¡
) {

125 
	`db¥ötf
(
	`_
("badáŒoˇti⁄ grou∞numbî %s\n"), 
¨gv
[1]);

128 
cur_agno
 = 
agno
;

129 } i‡(
cur_agno
 =
NULLAGNUMBER
)

130 
cur_agno
 = 0;

131 
	`ASSERT
(
ty±ab
[
TYP_AGF
].
ty≤m
 == TYP_AGF);

132 
	`£t_cur
(&
ty±ab
[
TYP_AGF
],

133 
	`XFS_AG_DADDR
(
mp
, 
cur_agno
, 
	`XFS_AGF_DADDR
(mp)),

134 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_ADD
, 
NULL
);

136 
	}
}

139 
	$agf_öô
()

141 
	`add_comm™d
(&
agf_cmd
);

142 
	}
}

145 
	$agf_size
(

146 *
obj
,

147 
°¨toff
,

148 
idx
)

150  
	`bôize
(
mp
->
m_sb
.
sb_£˘size
);

151 
	}
}

	@agf.h

19 c⁄° 
fõld
 
agf_Êds
[];

20 c⁄° 
fõld
 
agf_hÊd
[];

22 
agf_öô
();

23 
agf_size
(*
obj
, 
°¨toff
, 
idx
);

	@agfl.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"io.h
"

26 
	~"bô.h
"

27 
	~"ouçut.h
"

28 
	~"öô.h
"

29 
	~"agÊ.h
"

31 
agÊ_bno_size
(*
obj
, 
°¨toff
);

32 
agÊ_f
(
¨gc
, **
¨gv
);

33 
agÊ_hñp
();

35 c⁄° 
cmdöfo_t
 
	gagÊ_cmd
 =

36 { "agÊ", 
NULL
, 
agÊ_f
, 0, 1, 1, 
N_
("[agno]"),

37 
N_
("£àaddªs†tÿagÊ block"), 
agÊ_hñp
 };

39 c⁄° 
fõld_t
 
	gagÊ_hÊd
[] = { {

40 "", 
FLDT_AGFL
, 
OI
(0), 
C1
, 0, 
TYP_NONE
, },

41 { 
NULL
 }

44 c⁄° 
fõld_t
 
	gagÊ_¸c_hÊd
[] = { {

45 "", 
FLDT_AGFL_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
, },

46 { 
NULL
 }

49 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_agÊ_t
, 
agÊ_
 ## f))

	)

50 c⁄° 
fõld_t
 
	gagÊ_Êds
[] = {

51 { "bno", 
FLDT_AGBLOCKNZ
, 
OI
(
OFF
(
magi˙um
)), 
agÊ_bno_size
,

52 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_DATA
 },

53 { 
NULL
 }

56 c⁄° 
fõld_t
 
	gagÊ_¸c_Êds
[] = {

57 { "magi˙um", 
FLDT_UINT32X
, 
OI
(
OFF
(
magi˙um
)), 
C1
, 0, 
TYP_NONE
 },

58 { "£qno", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
£qno
)), 
C1
, 0, 
TYP_NONE
 },

59 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

60 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

61 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

62 { "bno", 
FLDT_AGBLOCKNZ
, 
OI
(
OFF
(
bno
)), 
agÊ_bno_size
,

63 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_DATA
 },

64 { 
NULL
 }

68 
	$agÊ_bno_size
(

69 *
obj
,

70 
°¨toff
)

72  
	`XFS_AGFL_SIZE
(
mp
);

73 
	}
}

76 
	$agÊ_hñp
()

78 
	`db¥ötf
(
	`_
(

93 
	}
}

96 
	$agÊ_f
(

97 
¨gc
,

98 **
¨gv
)

100 
xfs_agnumbî_t
 
agno
;

101 *
p
;

103 i‡(
¨gc
 > 1) {

104 
agno
 = (
xfs_agnumbî_t
)
	`°πoul
(
¨gv
[1], &
p
, 0);

105 i‡(*
p
 !'\0' || 
agno
 >
mp
->
m_sb
.
sb_agcou¡
) {

106 
	`db¥ötf
(
	`_
("badáŒoˇti⁄ grou∞numbî %s\n"), 
¨gv
[1]);

109 
cur_agno
 = 
agno
;

110 } i‡(
cur_agno
 =
NULLAGNUMBER
)

111 
cur_agno
 = 0;

112 
	`ASSERT
(
ty±ab
[
TYP_AGFL
].
ty≤m
 == TYP_AGFL);

113 
	`£t_cur
(&
ty±ab
[
TYP_AGFL
],

114 
	`XFS_AG_DADDR
(
mp
, 
cur_agno
, 
	`XFS_AGFL_DADDR
(mp)),

115 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_ADD
, 
NULL
);

117 
	}
}

120 
	$agÊ_öô
()

122 
	`add_comm™d
(&
agÊ_cmd
);

123 
	}
}

127 
	$agÊ_size
(

128 *
obj
,

129 
°¨toff
,

130 
idx
)

132  
	`bôize
(
mp
->
m_sb
.
sb_£˘size
);

133 
	}
}

	@agfl.h

19 c⁄° 
fõld
 
agÊ_Êds
[];

20 c⁄° 
fõld
 
agÊ_hÊd
[];

21 c⁄° 
fõld
 
agÊ_¸c_Êds
[];

22 c⁄° 
fõld
 
agÊ_¸c_hÊd
[];

24 
agÊ_öô
();

25 
agÊ_size
(*
obj
, 
°¨toff
, 
idx
);

	@agi.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"io.h
"

26 
	~"bô.h
"

27 
	~"ouçut.h
"

28 
	~"öô.h
"

29 
	~"agi.h
"

31 
agi_f
(
¨gc
, **
¨gv
);

32 
agi_hñp
();

34 c⁄° 
cmdöfo_t
 
	gagi_cmd
 =

35 { "agi", 
NULL
, 
agi_f
, 0, 1, 1, 
N_
("[agno]"),

36 
N_
("£àaddªs†tÿagòhódî"), 
agi_hñp
 };

38 c⁄° 
fõld_t
 
	gagi_hÊd
[] = {

39 { "", 
FLDT_AGI
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

40 { 
NULL
 }

43 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_agi_t
, 
agi_
 ## f))

	)

44 c⁄° 
fõld_t
 
	gagi_Êds
[] = {

45 { "magi˙um", 
FLDT_UINT32X
, 
OI
(
OFF
(
magi˙um
)), 
C1
, 0, 
TYP_NONE
 },

46 { "vîsi⁄num", 
FLDT_UINT32D
, 
OI
(
OFF
(
vîsi⁄num
)), 
C1
, 0, 
TYP_NONE
 },

47 { "£qno", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
£qno
)), 
C1
, 0, 
TYP_NONE
 },

48 { "Àngth", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
Àngth
)), 
C1
, 0, 
TYP_NONE
 },

49 { "cou¡", 
FLDT_AGINO
, 
OI
(
OFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

50 { "roŸ", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
roŸ
)), 
C1
, 0, 
TYP_INOBT
 },

51 { "Àvñ", 
FLDT_UINT32D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

52 { "‰ìcou¡", 
FLDT_AGINO
, 
OI
(
OFF
(
‰ìcou¡
)), 
C1
, 0, 
TYP_NONE
 },

53 { "√wöo", 
FLDT_AGINO
, 
OI
(
OFF
(
√wöo
)), 
C1
, 0, 
TYP_INODE
 },

54 { "dúöo", 
FLDT_AGINO
, 
OI
(
OFF
(
dúöo
)), 
C1
, 0, 
TYP_INODE
 },

55 { "u∆öked", 
FLDT_AGINONN
, 
OI
(
OFF
(
u∆öked
)),

56 
CI
(
XFS_AGI_UNLINKED_BUCKETS
), 
FLD_ARRAY
, 
TYP_NONE
 },

57 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

58 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

59 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

60 { "‰ì_roŸ", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
‰ì_roŸ
)), 
C1
, 0, 
TYP_INOBT
 },

61 { "‰ì_Àvñ", 
FLDT_UINT32D
, 
OI
(
OFF
(
‰ì_Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

62 { 
NULL
 }

66 
	$agi_hñp
()

68 
	`db¥ötf
(
	`_
(

81 
	}
}

84 
	$agi_f
(

85 
¨gc
,

86 **
¨gv
)

88 
xfs_agnumbî_t
 
agno
;

89 *
p
;

91 i‡(
¨gc
 > 1) {

92 
agno
 = (
xfs_agnumbî_t
)
	`°πoul
(
¨gv
[1], &
p
, 0);

93 i‡(*
p
 !'\0' || 
agno
 >
mp
->
m_sb
.
sb_agcou¡
) {

94 
	`db¥ötf
(
	`_
("badáŒoˇti⁄ grou∞numbî %s\n"), 
¨gv
[1]);

97 
cur_agno
 = 
agno
;

98 } i‡(
cur_agno
 =
NULLAGNUMBER
)

99 
cur_agno
 = 0;

100 
	`ASSERT
(
ty±ab
[
TYP_AGI
].
ty≤m
 == TYP_AGI);

101 
	`£t_cur
(&
ty±ab
[
TYP_AGI
],

102 
	`XFS_AG_DADDR
(
mp
, 
cur_agno
, 
	`XFS_AGI_DADDR
(mp)),

103 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_ADD
, 
NULL
);

105 
	}
}

108 
	$agi_öô
()

110 
	`add_comm™d
(&
agi_cmd
);

111 
	}
}

115 
	$agi_size
(

116 *
obj
,

117 
°¨toff
,

118 
idx
)

120  
	`bôize
(
mp
->
m_sb
.
sb_£˘size
);

121 
	}
}

	@agi.h

19 c⁄° 
fõld
 
agi_Êds
[];

20 c⁄° 
fõld
 
agi_hÊd
[];

22 
agi_öô
();

23 
agi_size
(*
obj
, 
°¨toff
, 
idx
);

	@attr.c

19 
	~"libxfs.h
"

20 
	~"bô.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"©å.h
"

26 
	~"io.h
"

27 
	~"öô.h
"

28 
	~"ouçut.h
"

30 
©å_Àaf_íåõs_cou¡
(*
obj
, 
°¨toff
);

31 
©å_Àaf_hdr_cou¡
(*
obj
, 
°¨toff
);

32 
©å_Àaf_«me_loˇl_cou¡
(*
obj
, 
°¨toff
);

33 
©å_Àaf_«me_loˇl_«me_cou¡
(*
obj
, 
°¨toff
);

34 
©å_Àaf_«me_loˇl_vÆue_cou¡
(*
obj
, 
°¨toff
);

35 
©å_Àaf_«me_loˇl_vÆue_off£t
(*
obj
, 
°¨toff
,

36 
idx
);

37 
©å_Àaf_«me_ªmŸe_cou¡
(*
obj
, 
°¨toff
);

38 
©å_Àaf_«me_ªmŸe_«me_cou¡
(*
obj
, 
°¨toff
);

39 
©å_Àaf_nvli°_cou¡
(*
obj
, 
°¨toff
);

40 
©å_Àaf_nvli°_off£t
(*
obj
, 
°¨toff
, 
idx
);

41 
©å_node_båì_cou¡
(*
obj
, 
°¨toff
);

42 
©å_node_hdr_cou¡
(*
obj
, 
°¨toff
);

44 c⁄° 
fõld_t
 
	g©å_hÊd
[] = {

45 { "", 
FLDT_ATTR
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

46 { 
NULL
 }

49 
	#LOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àafblock_t
, f))

	)

50 
	#NOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_öäode_t
, f))

	)

51 c⁄° 
fõld_t
 
	g©å_Êds
[] = {

52 { "hdr", 
FLDT_ATTR_LEAF_HDR
, 
OI
(
LOFF
(
hdr
)), 
©å_Àaf_hdr_cou¡
,

53 
FLD_COUNT
, 
TYP_NONE
 },

54 { "hdr", 
FLDT_ATTR_NODE_HDR
, 
OI
(
NOFF
(
hdr
)), 
©å_node_hdr_cou¡
,

55 
FLD_COUNT
, 
TYP_NONE
 },

56 { "íåõs", 
FLDT_ATTR_LEAF_ENTRY
, 
OI
(
LOFF
(
íåõs
)),

57 
©å_Àaf_íåõs_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

58 { "båì", 
FLDT_ATTR_NODE_ENTRY
, 
OI
(
NOFF
(
__båì
)), 
©å_node_båì_cou¡
,

59 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

60 { "nvli°", 
FLDT_ATTR_LEAF_NAME
, 
©å_Àaf_nvli°_off£t
,

61 
©å_Àaf_nvli°_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

62 { 
NULL
 }

65 
	#BOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_blköfo_t
, f))

	)

66 c⁄° 
fõld_t
 
	g©å_blköfo_Êds
[] = {

67 { "f‹w", 
FLDT_ATTRBLOCK
, 
OI
(
BOFF
(
f‹w
)), 
C1
, 0, 
TYP_ATTR
 },

68 { "back", 
FLDT_ATTRBLOCK
, 
OI
(
BOFF
(
back
)), 
C1
, 0, 
TYP_ATTR
 },

69 { "magic", 
FLDT_UINT16X
, 
OI
(
BOFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

70 { "∑d", 
FLDT_UINT16X
, 
OI
(
BOFF
(
∑d
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

71 { 
NULL
 }

74 
	#LEOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àaf_íåy_t
, f))

	)

75 c⁄° 
fõld_t
 
	g©å_Àaf_íåy_Êds
[] = {

76 { "hashvÆ", 
FLDT_UINT32X
, 
OI
(
LEOFF
(
hashvÆ
)), 
C1
, 0, 
TYP_NONE
 },

77 { "«meidx", 
FLDT_UINT16D
, 
OI
(
LEOFF
(
«meidx
)), 
C1
, 0, 
TYP_NONE
 },

78 { "Êags", 
FLDT_UINT8X
, 
OI
(
LEOFF
(
Êags
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

79 { "öcom∂ëe", 
FLDT_UINT1
,

80 
OI
(
LEOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_INCOMPLETE_BIT
 - 1), 
C1
,

81 0, 
TYP_NONE
 },

82 { "roŸ", 
FLDT_UINT1
,

83 
OI
(
LEOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_ROOT_BIT
 - 1), 
C1
, 0,

84 
TYP_NONE
 },

85 { "£cuª", 
FLDT_UINT1
,

86 
OI
(
LEOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_SECURE_BIT
 - 1), 
C1
, 0,

87 
TYP_NONE
 },

88 { "loˇl", 
FLDT_UINT1
,

89 
OI
(
LEOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_LOCAL_BIT
 - 1), 
C1
, 0,

90 
TYP_NONE
 },

91 { "∑d2", 
FLDT_UINT8X
, 
OI
(
LEOFF
(
∑d2
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

92 { 
NULL
 }

95 
	#LHOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àaf_hdr_t
, f))

	)

96 c⁄° 
fõld_t
 
	g©å_Àaf_hdr_Êds
[] = {

97 { "öfo", 
FLDT_ATTR_BLKINFO
, 
OI
(
LHOFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

98 { "cou¡", 
FLDT_UINT16D
, 
OI
(
LHOFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

99 { "u£dbyãs", 
FLDT_UINT16D
, 
OI
(
LHOFF
(
u£dbyãs
)), 
C1
, 0, 
TYP_NONE
 },

100 { "fú°u£d", 
FLDT_UINT16D
, 
OI
(
LHOFF
(
fú°u£d
)), 
C1
, 0, 
TYP_NONE
 },

101 { "hﬁes", 
FLDT_UINT8D
, 
OI
(
LHOFF
(
hﬁes
)), 
C1
, 0, 
TYP_NONE
 },

102 { "∑d1", 
FLDT_UINT8X
, 
OI
(
LHOFF
(
∑d1
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

103 { "‰ìm≠", 
FLDT_ATTR_LEAF_MAP
, 
OI
(
LHOFF
(
‰ìm≠
)),

104 
CI
(
XFS_ATTR_LEAF_MAPSIZE
), 
FLD_ARRAY
, 
TYP_NONE
 },

105 { 
NULL
 }

108 
	#LMOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àaf_m≠_t
, f))

	)

109 c⁄° 
fõld_t
 
	g©å_Àaf_m≠_Êds
[] = {

110 { "ba£", 
FLDT_UINT16D
, 
OI
(
LMOFF
(
ba£
)), 
C1
, 0, 
TYP_NONE
 },

111 { "size", 
FLDT_UINT16D
, 
OI
(
LMOFF
(
size
)), 
C1
, 0, 
TYP_NONE
 },

112 { 
NULL
 }

115 
	#LNOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àaf_«me_loˇl_t
, f))

	)

116 
	#LVOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àaf_«me_ªmŸe_t
, f))

	)

117 c⁄° 
fõld_t
 
	g©å_Àaf_«me_Êds
[] = {

118 { "vÆuñí", 
FLDT_UINT16D
, 
OI
(
LNOFF
(
vÆuñí
)),

119 
©å_Àaf_«me_loˇl_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

120 { "«mñí", 
FLDT_UINT8D
, 
OI
(
LNOFF
(
«mñí
)),

121 
©å_Àaf_«me_loˇl_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

122 { "«me", 
FLDT_CHARNS
, 
OI
(
LNOFF
(
«mevÆ
)),

123 
©å_Àaf_«me_loˇl_«me_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

124 { "vÆue", 
FLDT_CHARNS
, 
©å_Àaf_«me_loˇl_vÆue_off£t
,

125 
©å_Àaf_«me_loˇl_vÆue_cou¡
, 
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

126 { "vÆueblk", 
FLDT_UINT32X
, 
OI
(
LVOFF
(
vÆueblk
)),

127 
©å_Àaf_«me_ªmŸe_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

128 { "vÆuñí", 
FLDT_UINT32D
, 
OI
(
LVOFF
(
vÆuñí
)),

129 
©å_Àaf_«me_ªmŸe_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

130 { "«mñí", 
FLDT_UINT8D
, 
OI
(
LVOFF
(
«mñí
)),

131 
©å_Àaf_«me_ªmŸe_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

132 { "«me", 
FLDT_CHARNS
, 
OI
(
LVOFF
(
«me
)),

133 
©å_Àaf_«me_ªmŸe_«me_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

134 { 
NULL
 }

137 
	#EOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_node_íåy_t
, f))

	)

138 c⁄° 
fõld_t
 
	g©å_node_íåy_Êds
[] = {

139 { "hashvÆ", 
FLDT_UINT32X
, 
OI
(
EOFF
(
hashvÆ
)), 
C1
, 0, 
TYP_NONE
 },

140 { "bef‹e", 
FLDT_ATTRBLOCK
, 
OI
(
EOFF
(
bef‹e
)), 
C1
, 0, 
TYP_ATTR
 },

141 { 
NULL
 }

144 
	#HOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_node_hdr_t
, f))

	)

145 c⁄° 
fõld_t
 
	g©å_node_hdr_Êds
[] = {

146 { "öfo", 
FLDT_ATTR_BLKINFO
, 
OI
(
HOFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

147 { "cou¡", 
FLDT_UINT16D
, 
OI
(
HOFF
(
__cou¡
)), 
C1
, 0, 
TYP_NONE
 },

148 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
HOFF
(
__Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

149 { 
NULL
 }

153 
	$©å_Àaf_íåõs_cou¡
(

154 *
obj
,

155 
°¨toff
)

157 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

159 
	`ASSERT
(
°¨toff
 == 0);

160 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR_LEAF_MAGIC
)

162  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

163 
	}
}

166 
	$©å3_Àaf_íåõs_cou¡
(

167 *
obj
,

168 
°¨toff
)

170 
xfs_©å3_Àafblock
 *
Àaf
 = 
obj
;

172 
	`ASSERT
(
°¨toff
 == 0);

173 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_ATTR3_LEAF_MAGIC
)

175  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

176 
	}
}

179 
	$©å_Àaf_hdr_cou¡
(

180 *
obj
,

181 
°¨toff
)

183 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

185 
	`ASSERT
(
°¨toff
 == 0);

186  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_ATTR_LEAF_MAGIC
;

187 
	}
}

190 
	$©å3_Àaf_hdr_cou¡
(

191 *
obj
,

192 
°¨toff
)

194 
xfs_©å3_Àafblock
 *
Àaf
 = 
obj
;

196 
	`ASSERT
(
°¨toff
 == 0);

197  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_ATTR3_LEAF_MAGIC
;

198 
	}
}

200 (*
	t©å_Àaf_íåy_wÆk_f
)(
	txfs_©å_Àafblock
 *,

201 
	txfs_©å_Àaf_íåy
 *, );

203 
	$©å_Àaf_íåy_wÆk
(

204 *
obj
,

205 
°¨toff
,

206 
©å_Àaf_íåy_wÆk_f
 
func
)

208 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

209 
xfs_©å3_i˛óf_hdr
 
Àafhdr
;

210 
xfs_©å_Àaf_íåy
 *
íåõs
;

211 
xfs_©å_Àaf_íåy
 *
e
;

212 
i
;

213 
off
;

215 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

216 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR_LEAF_MAGIC
 &&

217 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR3_LEAF_MAGIC
)

220 
off
 = 
	`byãize
(
°¨toff
);

221 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
Àafhdr
, 
Àaf
);

222 
íåõs
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

224 
i
 = 0; i < 
Àafhdr
.
cou¡
; i++) {

225 
e
 = &
íåõs
[
i
];

226 i‡(
	`be16_to_˝u
(
e
->
«meidx
Ë=
off
)

227  
	`func
(
Àaf
, 
e
, 
i
);

230 
	}
}

233 
	$__©å_Àaf_«me_loˇl_cou¡
(

234 
xfs_©å_Àafblock
 *
Àaf
,

235 
xfs_©å_Àaf_íåy
 *
e
,

236 
i
)

238  (
e
->
Êags
 & 
XFS_ATTR_LOCAL
) != 0;

239 
	}
}

242 
	$©å_Àaf_«me_loˇl_cou¡
(

243 *
obj
,

244 
°¨toff
)

246  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

247 
__©å_Àaf_«me_loˇl_cou¡
);

248 
	}
}

251 
	$__©å_Àaf_«me_loˇl_«me_cou¡
(

252 
xfs_©å_Àafblock
 *
Àaf
,

253 
xfs_©å_Àaf_íåy
 *
e
,

254 
i
)

256 
xfs_©å_Àaf_«me_loˇl
 *
l
;

258 i‡(!(
e
->
Êags
 & 
XFS_ATTR_LOCAL
))

261 
l
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
i
);

262  
l
->
«mñí
;

263 
	}
}

266 
	$©å_Àaf_«me_loˇl_«me_cou¡
(

267 *
obj
,

268 
°¨toff
)

270  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

271 
__©å_Àaf_«me_loˇl_«me_cou¡
);

272 
	}
}

275 
	$__©å_Àaf_«me_loˇl_vÆue_cou¡
(

276 
xfs_©å_Àafblock
 *
Àaf
,

277 
xfs_©å_Àaf_íåy
 *
e
,

278 
i
)

280 
xfs_©å_Àaf_«me_loˇl
 *
l
;

282 i‡(!(
e
->
Êags
 & 
XFS_ATTR_LOCAL
))

285 
l
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
i
);

286  
	`be16_to_˝u
(
l
->
vÆuñí
);

287 
	}
}

290 
	$©å_Àaf_«me_loˇl_vÆue_cou¡
(

291 *
obj
,

292 
°¨toff
)

294  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

295 
__©å_Àaf_«me_loˇl_vÆue_cou¡
);

296 
	}
}

299 
	$__©å_Àaf_«me_loˇl_vÆue_off£t
(

300 
xfs_©å_Àafblock
 *
Àaf
,

301 
xfs_©å_Àaf_íåy
 *
e
,

302 
i
)

304 
xfs_©å_Àaf_«me_loˇl
 *
l
;

305 *
vp
;

307 
l
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
i
);

308 
vp
 = (*)&
l
->
«mevÆ
[l->
«mñí
];

310  ()
	`bôize
(
vp
 - (*)
l
);

311 
	}
}

314 
	$©å_Àaf_«me_loˇl_vÆue_off£t
(

315 *
obj
,

316 
°¨toff
,

317 
idx
)

319  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

320 
__©å_Àaf_«me_loˇl_vÆue_off£t
);

321 
	}
}

324 
	$__©å_Àaf_«me_ªmŸe_cou¡
(

325 
xfs_©å_Àafblock
 *
Àaf
,

326 
xfs_©å_Àaf_íåy
 *
e
,

327 
i
)

329  (
e
->
Êags
 & 
XFS_ATTR_LOCAL
) == 0;

330 
	}
}

333 
	$©å_Àaf_«me_ªmŸe_cou¡
(

334 *
obj
,

335 
°¨toff
)

337  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

338 
__©å_Àaf_«me_ªmŸe_cou¡
);

339 
	}
}

342 
	$__©å_Àaf_«me_ªmŸe_«me_cou¡
(

343 
xfs_©å_Àafblock
 *
Àaf
,

344 
xfs_©å_Àaf_íåy
 *
e
,

345 
i
)

347 
xfs_©å_Àaf_«me_ªmŸe
 *
r
;

349 i‡(
e
->
Êags
 & 
XFS_ATTR_LOCAL
)

352 
r
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
i
);

353  
r
->
«mñí
;

354 
	}
}

357 
	$©å_Àaf_«me_ªmŸe_«me_cou¡
(

358 *
obj
,

359 
°¨toff
)

361  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

362 
__©å_Àaf_«me_ªmŸe_«me_cou¡
);

363 
	}
}

366 
	$©å_Àaf_«me_size
(

367 *
obj
,

368 
°¨toff
,

369 
idx
)

371 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

372 
xfs_©å_Àaf_íåy
 *
e
;

373 
xfs_©å_Àaf_«me_loˇl
 *
l
;

374 
xfs_©å_Àaf_«me_ªmŸe
 *
r
;

376 
	`ASSERT
(
°¨toff
 == 0);

377 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR_LEAF_MAGIC
 &&

378 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR3_LEAF_MAGIC
)

380 
e
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf
)[
idx
];

381 i‡(
e
->
Êags
 & 
XFS_ATTR_LOCAL
) {

382 
l
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
idx
);

383  ()
	`bôize
(
	`xfs_©å_Àaf_ítsize_loˇl
(
l
->
«mñí
,

384 
	`be16_to_˝u
(
l
->
vÆuñí
)));

386 
r
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
idx
);

387  ()
	`bôize
(
	`xfs_©å_Àaf_ítsize_ªmŸe
(
r
->
«mñí
));

389 
	}
}

392 
	$©å_Àaf_nvli°_cou¡
(

393 *
obj
,

394 
°¨toff
)

396 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

398 
	`ASSERT
(
°¨toff
 == 0);

399 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR_LEAF_MAGIC
)

401  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

402 
	}
}

405 
	$©å3_Àaf_nvli°_cou¡
(

406 *
obj
,

407 
°¨toff
)

409 
xfs_©å3_Àafblock
 *
Àaf
 = 
obj
;

411 
	`ASSERT
(
°¨toff
 == 0);

412 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_ATTR3_LEAF_MAGIC
)

414  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

415 
	}
}

418 
	$©å_Àaf_nvli°_off£t
(

419 *
obj
,

420 
°¨toff
,

421 
idx
)

423 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

424 
xfs_©å_Àaf_íåy
 *
e
;

426 
	`ASSERT
(
°¨toff
 == 0);

427 
e
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf
)[
idx
];

428  
	`bôize
(
	`be16_to_˝u
(
e
->
«meidx
));

429 
	}
}

432 
	$©å_node_båì_cou¡
(

433 *
obj
,

434 
°¨toff
)

436 
xfs_da_öäode
 *
node
 = 
obj
;

438 
	`ASSERT
(
°¨toff
 == 0);

439 i‡(
	`be16_to_˝u
(
node
->
hdr
.
öfo
.
magic
Ë!
XFS_DA_NODE_MAGIC
)

441  
	`be16_to_˝u
(
node
->
hdr
.
__cou¡
);

442 
	}
}

445 
	$©å3_node_båì_cou¡
(

446 *
obj
,

447 
°¨toff
)

449 
xfs_da3_öäode
 *
node
 = 
obj
;

451 
	`ASSERT
(
°¨toff
 == 0);

452 i‡(
	`be16_to_˝u
(
node
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_DA3_NODE_MAGIC
)

454  
	`be16_to_˝u
(
node
->
hdr
.
__cou¡
);

455 
	}
}

459 
	$©å_node_hdr_cou¡
(

460 *
obj
,

461 
°¨toff
)

463 
xfs_da_öäode
 *
node
 = 
obj
;

465 
	`ASSERT
(
°¨toff
 == 0);

466  
	`be16_to_˝u
(
node
->
hdr
.
öfo
.
magic
Ë=
XFS_DA_NODE_MAGIC
;

467 
	}
}

470 
	$©å3_node_hdr_cou¡
(

471 *
obj
,

472 
°¨toff
)

474 
xfs_da3_öäode
 *
node
 = 
obj
;

476 
	`ASSERT
(
°¨toff
 == 0);

477  
	`be16_to_˝u
(
node
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_DA3_NODE_MAGIC
;

478 
	}
}

481 
	$©å_size
(

482 *
obj
,

483 
°¨toff
,

484 
idx
)

486  
	`bôize
(
mp
->
m_sb
.
sb_blocksize
);

487 
	}
}

492 c⁄° 
fõld_t
 
	g©å3_hÊd
[] = {

493 { "", 
FLDT_ATTR3
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

494 { 
NULL
 }

497 
	#L3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å3_Àafblock
, f))

	)

498 
	#N3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da3_öäode
, f))

	)

499 c⁄° 
fõld_t
 
	g©å3_Êds
[] = {

500 { "hdr", 
FLDT_ATTR3_LEAF_HDR
, 
OI
(
L3OFF
(
hdr
)), 
©å3_Àaf_hdr_cou¡
,

501 
FLD_COUNT
, 
TYP_NONE
 },

502 { "hdr", 
FLDT_DA3_NODE_HDR
, 
OI
(
N3OFF
(
hdr
)), 
©å3_node_hdr_cou¡
,

503 
FLD_COUNT
, 
TYP_NONE
 },

504 { "íåõs", 
FLDT_ATTR_LEAF_ENTRY
, 
OI
(
L3OFF
(
íåõs
)),

505 
©å3_Àaf_íåõs_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

506 { "båì", 
FLDT_ATTR_NODE_ENTRY
, 
OI
(
N3OFF
(
__båì
)),

507 
©å3_node_båì_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

508 { "nvli°", 
FLDT_ATTR_LEAF_NAME
, 
©å_Àaf_nvli°_off£t
,

509 
©å3_Àaf_nvli°_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

510 { 
NULL
 }

513 
	#LH3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å3_Àaf_hdr
, f))

	)

514 c⁄° 
fõld_t
 
	g©å3_Àaf_hdr_Êds
[] = {

515 { "öfo", 
FLDT_DA3_BLKINFO
, 
OI
(
LH3OFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

516 { "cou¡", 
FLDT_UINT16D
, 
OI
(
LH3OFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

517 { "u£dbyãs", 
FLDT_UINT16D
, 
OI
(
LH3OFF
(
u£dbyãs
)), 
C1
, 0, 
TYP_NONE
 },

518 { "fú°u£d", 
FLDT_UINT16D
, 
OI
(
LH3OFF
(
fú°u£d
)), 
C1
, 0, 
TYP_NONE
 },

519 { "hﬁes", 
FLDT_UINT8D
, 
OI
(
LH3OFF
(
hﬁes
)), 
C1
, 0, 
TYP_NONE
 },

520 { "∑d1", 
FLDT_UINT8X
, 
OI
(
LH3OFF
(
∑d1
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

521 { "‰ìm≠", 
FLDT_ATTR_LEAF_MAP
, 
OI
(
LH3OFF
(
‰ìm≠
)),

522 
CI
(
XFS_ATTR_LEAF_MAPSIZE
), 
FLD_ARRAY
, 
TYP_NONE
 },

523 { 
NULL
 }

531 
	$xfs_©å3_db_ªad_vîify
(

532 
xfs_buf
 *
bp
)

534 
__be32
 
magic32
;

535 
__be16
 
magic16
;

537 
magic32
 = *(
__be32
 *)
bp
->
b_addr
;

538 
magic16
 = ((
xfs_da_blköfo
 *)
bp
->
b_addr
)->
magic
;

540 
magic16
) {

541 
	`˝u_to_be16
(
XFS_ATTR3_LEAF_MAGIC
):

542 
bp
->
b_›s
 = &
xfs_©å3_Àaf_buf_›s
;

543 
vîify
;

544 
	`˝u_to_be16
(
XFS_DA3_NODE_MAGIC
):

545 
bp
->
b_›s
 = &
xfs_da3_node_buf_›s
;

546 
vîify
;

551 
magic32
) {

552 
	`˝u_to_be32
(
XFS_ATTR3_RMT_MAGIC
):

553 
bp
->
b_›s
 = &
xfs_©å3_rmt_buf_›s
;

556 
	`db¥ötf
(
	`_
("Unknownáttribute bufferÅype!\n"));

557 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

560 
vîify
:

561 
bp
->
b_›s
->
	`vîify_ªad
(bp);

562 
	}
}

565 
	$xfs_©å3_db_wrôe_vîify
(

566 
xfs_buf
 *
bp
)

568 
	`db¥ötf
(
	`_
("Writing unknownáttribute bufferÅype!\n"));

569 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

570 
	}
}

572 c⁄° 
xfs_buf_›s
 
	gxfs_©å3_db_buf_›s
 = {

573 .
«me
 = "xfs_attr3",

574 .
	gvîify_ªad
 = 
xfs_©å3_db_ªad_vîify
,

575 .
	gvîify_wrôe
 = 
xfs_©å3_db_wrôe_vîify
,

	@attr.h

19 c⁄° 
fõld_t
 
©å_Êds
[];

20 c⁄° 
fõld_t
 
©å_hÊd
[];

21 c⁄° 
fõld_t
 
©å_blköfo_Êds
[];

22 c⁄° 
fõld_t
 
©å_Àaf_íåy_Êds
[];

23 c⁄° 
fõld_t
 
©å_Àaf_hdr_Êds
[];

24 c⁄° 
fõld_t
 
©å_Àaf_m≠_Êds
[];

25 c⁄° 
fõld_t
 
©å_Àaf_«me_Êds
[];

26 c⁄° 
fõld_t
 
©å_node_íåy_Êds
[];

27 c⁄° 
fõld_t
 
©å_node_hdr_Êds
[];

29 c⁄° 
fõld_t
 
©å3_Êds
[];

30 c⁄° 
fõld_t
 
©å3_hÊd
[];

31 c⁄° 
fõld_t
 
©å3_Àaf_hdr_Êds
[];

32 c⁄° 
fõld_t
 
©å3_node_hdr_Êds
[];

34 
©å_Àaf_«me_size
(*
obj
, 
°¨toff
, 
idx
);

35 
©å_size
(*
obj
, 
°¨toff
, 
idx
);

37 c⁄° 
xfs_buf_›s
 
xfs_©å3_db_buf_›s
;

	@attrset.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"©å£t.h
"

22 
	~"io.h
"

23 
	~"ouçut.h
"

24 
	~"ty≥.h
"

25 
	~"öô.h
"

26 
	~"Âröt.h
"

27 
	~"Áddr.h
"

28 
	~"fõld.h
"

29 
	~"öode.h
"

30 
	~"mÆloc.h
"

32 
©å_£t_f
(
¨gc
, **
¨gv
);

33 
©å_ªmove_f
(
¨gc
, **
¨gv
);

34 
©å£t_hñp
();

36 c⁄° 
cmdöfo_t
 
	g©å_£t_cmd
 =

37 { "©å_£t", "a£t", 
©å_£t_f
, 1, -1, 0,

38 
N_
("[-r|-s|-p|-u] [-n] [-R|-C] [-vÇ]Çame"),

39 
N_
("£àthê«medáâribuã o¿thêcuºíàöode"), 
©å£t_hñp
 };

40 c⁄° 
cmdöfo_t
 
	g©å_ªmove_cmd
 =

41 { "©å_ªmove", "¨emove", 
©å_ªmove_f
, 1, -1, 0,

42 
N_
("[-r|-s|-p|-u] [-n]Çame"),

43 
N_
("ªmovêthê«medáâribuã fromÅhêcuºíàöode"), 
©å£t_hñp
 };

46 
	$©å£t_hñp
()

48 
	`db¥ötf
(
	`_
(

64 
	}
}

67 
	$©å£t_öô
()

69 i‡(!
ex≥π_mode
)

72 
	`add_comm™d
(&
©å_£t_cmd
);

73 
	`add_comm™d
(&
©å_ªmove_cmd
);

74 
	}
}

77 
	$©å_£t_f
(

78 
¨gc
,

79 **
¨gv
)

81 
xfs_öode_t
 *
ù
 = 
NULL
;

82 *
«me
, *
vÆue
, *
•
;

83 
c
, 
vÆuñí
 = 0, 
Êags
 = 0;

85 i‡(
cur_typ
 =
NULL
) {

86 
	`db¥ötf
(
	`_
("no currentÅype\n"));

89 i‡(
cur_typ
->
ty≤m
 !
TYP_INODE
) {

90 
	`db¥ötf
(
	`_
("currentÅype isÇot inode\n"));

94 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "rusCRnv:")Ë!
EOF
) {

95 
c
) {

98 
Êags
 |
LIBXFS_ATTR_ROOT
;

99 
Êags
 &~
LIBXFS_ATTR_SECURE
;

102 
Êags
 &~(
LIBXFS_ATTR_ROOT
 | 
LIBXFS_ATTR_SECURE
);

105 
Êags
 |
LIBXFS_ATTR_SECURE
;

106 
Êags
 &~
LIBXFS_ATTR_ROOT
;

111 
Êags
 |
LIBXFS_ATTR_CREATE
;

114 
Êags
 |
LIBXFS_ATTR_REPLACE
;

118 
mp
->
m_Êags
 |
LIBXFS_MOUNT_COMPAT_ATTR
;

123 
vÆuñí
 = ()
	`°πﬁ
(
›èrg
, &
•
, 0);

124 i‡(*
•
 !'\0' || 
vÆuñí
 < 0 || valuelen > 64*1024) {

125 
	`db¥ötf
(
	`_
("badáâr_£àvÆuñí %s\n"), 
›èrg
);

131 
	`db¥ötf
(
	`_
("bad option foráttr_set command\n"));

136 i‡(
›töd
 !
¨gc
 - 1) {

137 
	`db¥ötf
(
	`_
("too few options foráttr_set (noÇame given)\n"));

141 
«me
 = 
¨gv
[
›töd
];

143 i‡(
vÆuñí
) {

144 
vÆue
 = (*)
	`memÆign
(
	`gë∑gesize
(), 
vÆuñí
);

145 i‡(!
vÆue
) {

146 
	`db¥ötf
(
	`_
("ˇ¬ŸáŒoˇã buf„∏(%d)\n"), 
vÆuñí
);

147 
out
;

149 
	`mem£t
(
vÆue
, 'v', 
vÆuñí
);

151 
vÆue
 = 
NULL
;

154 i‡(
	`libxfs_igë
(
mp
, 
NULL
, 
iocur_t›
->
öo
, 0, &
ù
)) {

155 
	`db¥ötf
(
	`_
("failedÅo iget inode %llu\n"),

156 ()
iocur_t›
->
öo
);

157 
out
;

160 i‡(
	`libxfs_©å_£t
(
ù
, (*)
«me
,

161 (*)
vÆue
, 
vÆuñí
, 
Êags
)) {

162 
	`db¥ötf
(
	`_
("failedÅo setáttr %s on inode %llu\n"),

163 
«me
, ()
iocur_t›
->
öo
);

164 
out
;

168 
	`£t_cur_öode
(
iocur_t›
->
öo
);

170 
out
:

171 
mp
->
m_Êags
 &~
LIBXFS_MOUNT_COMPAT_ATTR
;

172 i‡(
ù
)

173 
	`IRELE
(
ù
);

174 i‡(
vÆue
)

175 
	`‰ì
(
vÆue
);

177 
	}
}

180 
	$©å_ªmove_f
(

181 
¨gc
,

182 **
¨gv
)

184 
xfs_öode_t
 *
ù
 = 
NULL
;

185 *
«me
;

186 
c
, 
Êags
 = 0;

188 i‡(
cur_typ
 =
NULL
) {

189 
	`db¥ötf
(
	`_
("no currentÅype\n"));

192 i‡(
cur_typ
->
ty≤m
 !
TYP_INODE
) {

193 
	`db¥ötf
(
	`_
("currentÅype isÇot inode\n"));

197 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "ru¢")Ë!
EOF
) {

198 
c
) {

201 
Êags
 |
LIBXFS_ATTR_ROOT
;

202 
Êags
 &~
LIBXFS_ATTR_SECURE
;

205 
Êags
 &~(
LIBXFS_ATTR_ROOT
 | 
LIBXFS_ATTR_SECURE
);

208 
Êags
 |
LIBXFS_ATTR_SECURE
;

209 
Êags
 &~
LIBXFS_ATTR_ROOT
;

213 
mp
->
m_Êags
 |
LIBXFS_MOUNT_COMPAT_ATTR
;

217 
	`db¥ötf
(
	`_
("bad option foráttr_remove command\n"));

222 i‡(
›töd
 !
¨gc
 - 1) {

223 
	`db¥ötf
(
	`_
("too few options foráttr_remove (noÇame given)\n"));

227 
«me
 = 
¨gv
[
›töd
];

229 i‡(
	`libxfs_igë
(
mp
, 
NULL
, 
iocur_t›
->
öo
, 0, &
ù
)) {

230 
	`db¥ötf
(
	`_
("failedÅo iget inode %llu\n"),

231 ()
iocur_t›
->
öo
);

232 
out
;

235 i‡(
	`libxfs_©å_ªmove
(
ù
, (*)
«me
, 
Êags
)) {

236 
	`db¥ötf
(
	`_
("failedÅoÑemoveáttr %s from inode %llu\n"),

237 
«me
, ()
iocur_t›
->
öo
);

238 
out
;

242 
	`£t_cur_öode
(
iocur_t›
->
öo
);

244 
out
:

245 
mp
->
m_Êags
 &~
LIBXFS_MOUNT_COMPAT_ATTR
;

246 i‡(
ù
)

247 
	`IRELE
(
ù
);

249 
	}
}

	@attrset.h

19 
©å£t_öô
();

	@attrshort.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"bô.h
"

25 
	~"©åsh‹t.h
"

27 
©å_sf_íåy_«me_cou¡
(*
obj
, 
°¨toff
);

28 
©å_sf_íåy_vÆue_cou¡
(*
obj
, 
°¨toff
);

29 
©å_sf_íåy_vÆue_off£t
(*
obj
, 
°¨toff
, 
idx
);

30 
©å_sh‹tf‹m_li°_cou¡
(*
obj
, 
°¨toff
);

31 
©å_sh‹tf‹m_li°_off£t
(*
obj
, 
°¨toff
, 
idx
);

33 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_sh‹tf‹m_t
, f))

	)

34 c⁄° 
fõld_t
 
	g©å_sh‹tf‹m_Êds
[] = {

35 { "hdr", 
FLDT_ATTR_SF_HDR
, 
OI
(
OFF
(
hdr
)), 
C1
, 0, 
TYP_NONE
 },

36 { "li°", 
FLDT_ATTR_SF_ENTRY
, 
©å_sh‹tf‹m_li°_off£t
,

37 
©å_sh‹tf‹m_li°_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

38 { 
NULL
 }

41 
	#HOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_sf_hdr_t
, f))

	)

42 c⁄° 
fõld_t
 
	g©å_sf_hdr_Êds
[] = {

43 { "tŸsize", 
FLDT_UINT16D
, 
OI
(
HOFF
(
tŸsize
)), 
C1
, 0, 
TYP_NONE
 },

44 { "cou¡", 
FLDT_UINT8D
, 
OI
(
HOFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

45 { 
NULL
 }

48 
	#EOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_sf_íåy_t
, f))

	)

49 c⁄° 
fõld_t
 
	g©å_sf_íåy_Êds
[] = {

50 { "«mñí", 
FLDT_UINT8D
, 
OI
(
EOFF
(
«mñí
)), 
C1
, 0, 
TYP_NONE
 },

51 { "vÆuñí", 
FLDT_UINT8D
, 
OI
(
EOFF
(
vÆuñí
)), 
C1
, 0, 
TYP_NONE
 },

52 { "Êags", 
FLDT_UINT8X
, 
OI
(
EOFF
(
Êags
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

53 { "roŸ", 
FLDT_UINT1
,

54 
OI
(
EOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_ROOT_BIT
 - 1), 
C1
, 0,

55 
TYP_NONE
 },

56 { "£cuª", 
FLDT_UINT1
,

57 
OI
(
EOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_SECURE_BIT
 - 1), 
C1
, 0,

58 
TYP_NONE
 },

59 { "«me", 
FLDT_CHARNS
, 
OI
(
EOFF
(
«mevÆ
)), 
©å_sf_íåy_«me_cou¡
,

60 
FLD_COUNT
, 
TYP_NONE
 },

61 { "vÆue", 
FLDT_CHARNS
, 
©å_sf_íåy_vÆue_off£t
,

62 
©å_sf_íåy_vÆue_cou¡
, 
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

63 { 
NULL
 }

67 
	$©å_sf_íåy_«me_cou¡
(

68 *
obj
,

69 
°¨toff
)

71 
xfs_©å_sf_íåy_t
 *
e
;

73 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

74 
e
 = (
xfs_©å_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

75  
e
->
«mñí
;

76 
	}
}

79 
	$©å_sf_íåy_size
(

80 *
obj
,

81 
°¨toff
,

82 
idx
)

84 
xfs_©å_sf_íåy_t
 *
e
;

85 
i
;

86 
xfs_©å_sh‹tf‹m_t
 *
sf
;

88 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

89 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

90 
e
 = &
sf
->
li°
[0];

91 
i
 = 0; i < 
idx
; i++)

92 
e
 = 
	`XFS_ATTR_SF_NEXTENTRY
(e);

93  
	`bôize
(()
	`XFS_ATTR_SF_ENTSIZE
(
e
));

94 
	}
}

97 
	$©å_sf_íåy_vÆue_cou¡
(

98 *
obj
,

99 
°¨toff
)

101 
xfs_©å_sf_íåy_t
 *
e
;

103 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

104 
e
 = (
xfs_©å_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

105  
e
->
vÆuñí
;

106 
	}
}

110 
	$©å_sf_íåy_vÆue_off£t
(

111 *
obj
,

112 
°¨toff
,

113 
idx
)

115 
xfs_©å_sf_íåy_t
 *
e
;

117 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

118 
	`ASSERT
(
idx
 == 0);

119 
e
 = (
xfs_©å_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

120  
	`bôize
(()((*)&
e
->
«mevÆ
[e->
«mñí
] - (*)e));

121 
	}
}

124 
	$©å_sh‹tf‹m_li°_cou¡
(

125 *
obj
,

126 
°¨toff
)

128 
xfs_©å_sh‹tf‹m_t
 *
sf
;

130 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

131 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

132  
sf
->
hdr
.
cou¡
;

133 
	}
}

136 
	$©å_sh‹tf‹m_li°_off£t
(

137 *
obj
,

138 
°¨toff
,

139 
idx
)

141 
xfs_©å_sf_íåy_t
 *
e
;

142 
i
;

143 
xfs_©å_sh‹tf‹m_t
 *
sf
;

145 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

146 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

147 
e
 = &
sf
->
li°
[0];

148 
i
 = 0; i < 
idx
; i++)

149 
e
 = 
	`XFS_ATTR_SF_NEXTENTRY
(e);

150  
	`bôize
(()((*)
e
 - (*)
sf
));

151 
	}
}

155 
	$©åsh‹t_size
(

156 *
obj
,

157 
°¨toff
,

158 
idx
)

160 
xfs_©å_sf_íåy_t
 *
e
;

161 
i
;

162 
xfs_©å_sh‹tf‹m_t
 *
sf
;

164 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

165 
	`ASSERT
(
idx
 == 0);

166 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

167 
e
 = &
sf
->
li°
[0];

168 
i
 = 0; i < 
sf
->
hdr
.
cou¡
; i++)

169 
e
 = 
	`XFS_ATTR_SF_NEXTENTRY
(e);

170  
	`bôize
(()((*)
e
 - (*)
sf
));

171 
	}
}

	@attrshort.h

19 c⁄° 
fõld_t
 
©å_sf_íåy_Êds
[];

20 c⁄° 
fõld_t
 
©å_sf_hdr_Êds
[];

21 c⁄° 
fõld_t
 
©å_sh‹tf‹m_Êds
[];

22 c⁄° 
fõld_t
 
©åsh‹t_hÊd
[];

24 
©å_sf_íåy_size
(*
obj
, 
°¨toff
, 
idx
);

25 
©åsh‹t_size
(*
obj
, 
°¨toff
, 
idx
);

	@bit.c

19 
	~"libxfs.h
"

20 
	~"bô.h
"

22 #unde‡
£tbô


24 
gëbô
(*
±r
, 
bô
);

25 
£tbô
(*
±r
, 
bô
, 
vÆ
);

28 
	$gëbô
(

29 *
±r
,

30 
bô
)

32 
mask
;

33 
shi·
;

35 
±r
 +
	`byãize
(
bô
);

36 
bô
 = 
	`bôoffs
(bit);

37 
shi·
 = 7 - 
bô
;

38 
mask
 = 1 << 
shi·
;

39  (*
±r
 & 
mask
Ë>> 
shi·
;

40 
	}
}

43 
	$£tbô
(

44 *
±r
,

45 
bô
,

46 
vÆ
)

48 
mask
;

49 
shi·
;

51 
±r
 +
	`byãize
(
bô
);

52 
bô
 = 
	`bôoffs
(bit);

53 
shi·
 = 7 - 
bô
;

54 
mask
 = (1 << 
shi·
);

55 i‡(
vÆ
) {

56 *
±r
 |
mask
;

58 
mask
 = ~mask;

59 *
±r
 &
mask
;

61 
	}
}

63 
__öt64_t


64 
	$gëbôvÆ
(

65 *
obj
,

66 
bôoff
,

67 
nbôs
,

68 
Êags
)

70 
bô
;

71 
i
;

72 *
p
;

73 
__öt64_t
 
rvÆ
;

74 
sig√xt
;

75 
z1
, 
z2
, 
z3
, 
z4
;

77 
	`ASSERT
(
nbôs
<=64);

79 
p
 = (*)
obj
 + 
	`byãize
(
bôoff
);

80 
bô
 = 
	`bôoffs
(
bôoff
);

81 
sig√xt
 = (
Êags
 & 
BVSIGNED
) != 0;

82 
z4
 = ((
öçå_t
)
p
 & 0xfË=0 && 
bô
 == 0;

83 i‡(
nbôs
 =64 && 
z4
)

84  
	`be64_to_˝u
(*(
__be64
 *)
p
);

85 
z3
 = ((
öçå_t
)
p
 & 0x7Ë=0 && 
bô
 == 0;

86 i‡(
nbôs
 =32 && 
z3
) {

87 i‡(
sig√xt
)

88  (
__s32
)
	`be32_to_˝u
(*(
__be32
 *)
p
);

90  (
__u32
)
	`be32_to_˝u
(*(
__be32
 *)
p
);

92 
z2
 = ((
öçå_t
)
p
 & 0x3Ë=0 && 
bô
 == 0;

93 i‡(
nbôs
 =16 && 
z2
) {

94 i‡(
sig√xt
)

95  (
__s16
)
	`be16_to_˝u
(*(
__be16
 *)
p
);

97  (
__u16
)
	`be16_to_˝u
(*(
__be16
 *)
p
);

99 
z1
 = ((
öçå_t
)
p
 & 0x1Ë=0 && 
bô
 == 0;

100 i‡(
nbôs
 =8 && 
z1
) {

101 i‡(
sig√xt
)

102  *(
__s8
 *)
p
;

104  *(
__u8
 *)
p
;

108 
i
 = 0, 
rvÆ
 = 0LL; i < 
nbôs
; i++) {

109 i‡(
	`gëbô
(
p
, 
bô
 + 
i
)) {

117 #i‡
__BYTE_ORDER
 =
LITTLE_ENDIAN


118 i‡(
i
 =0 && 
sig√xt
 && 
nbôs
 < 64)

119 
rvÆ
 = -1LL << 
nbôs
;

120 
rvÆ
 |1LL << (
nbôs
 - 
i
 - 1);

122 i‡((
i
 =(
nbôs
 - 1)Ë&& 
sig√xt
 &&Çbits < 64)

123 
rvÆ
 |(-1LL << 
nbôs
);

124 
rvÆ
 |1LL << (
nbôs
 - 
i
 - 1);

128  
rvÆ
;

129 
	}
}

153 
	$£tbôvÆ
(

154 *
obuf
,

155 
bôoff
,

156 
nbôs
,

157 *
ibuf
)

159 *
ö
 = 
ibuf
;

160 *
out
 = 
obuf
;

161 
bô
;

163 i‡(
bôoff
 % 
NBBY
 || 
nbôs
 % NBBY) {

164 
bô
 = 0; bô < 
nbôs
; bit++)

165 
	`£tbô
(
out
, 
bô
 + 
bôoff
, 
	`gëbô
(
ö
, bit));

167 
	`mem˝y
(
out
 + 
	`byãize
(
bôoff
), 
ö
, byãize(
nbôs
));

168 
	}
}

	@bit.h

19 
	#bôize
(
s
Ë((sË* 
NBBY
)

	)

20 
	#bôsz
(
t
Ë
	`bôize
(—))

	)

21 
	#bôszof
(
x
,
y
Ë
	`bôize
(
	`szof
(x,y))

	)

22 
	#byãize
(
s
Ë((sË/ 
NBBY
)

	)

23 
	#bôoffs
(
s
Ë((sË% 
NBBY
)

	)

25 
	#BVUNSIGNED
 0

	)

26 
	#BVSIGNED
 1

	)

28 
__öt64_t
 
gëbôvÆ
(*
obj
, 
bôoff
, 
nbôs
, 
Êags
);

29 
£tbôvÆ
(*
obuf
, 
bôoff
, 
nbôs
, *
ibuf
);

	@block.c

19 
	~"libxfs.h
"

20 
	~"block.h
"

21 
	~"bm≠.h
"

22 
	~"comm™d.h
"

23 
	~"ty≥.h
"

24 
	~"Áddr.h
"

25 
	~"Âröt.h
"

26 
	~"fõld.h
"

27 
	~"öode.h
"

28 
	~"io.h
"

29 
	~"ouçut.h
"

30 
	~"öô.h
"

32 
ablock_f
(
¨gc
, **
¨gv
);

33 
ablock_hñp
();

34 
daddr_f
(
¨gc
, **
¨gv
);

35 
daddr_hñp
();

36 
dblock_f
(
¨gc
, **
¨gv
);

37 
dblock_hñp
();

38 
fsblock_f
(
¨gc
, **
¨gv
);

39 
fsblock_hñp
();

40 
¥öt_øwd©a
(*
d©a
, 
Àn
);

42 c⁄° 
cmdöfo_t
 
	gablock_cmd
 =

43 { "ablock", 
NULL
, 
ablock_f
, 1, 1, 1, 
N_
("filoff"),

44 
N_
("£àaddªs†tÿfûêoff£à◊â∏f‹k)"), 
ablock_hñp
 };

45 c⁄° 
cmdöfo_t
 
	gdaddr_cmd
 =

46 { "daddr", 
NULL
, 
daddr_f
, 0, 1, 1, 
N_
("[d]"),

47 
N_
("£àaddªs†tÿdadd∏vÆue"), 
daddr_hñp
 };

48 c⁄° 
cmdöfo_t
 
	gdblock_cmd
 =

49 { "dblock", 
NULL
, 
dblock_f
, 1, 1, 1, 
N_
("filoff"),

50 
N_
("£àaddªs†tÿfûêoff£à(d©®f‹k)"), 
dblock_hñp
 };

51 c⁄° 
cmdöfo_t
 
	gfsblock_cmd
 =

52 { "fsblock", "fsb", 
fsblock_f
, 0, 1, 1, 
N_
("[fsb]"),

53 
N_
("£àaddªs†tÿfsblock vÆue"), 
fsblock_hñp
 };

56 
	$ablock_hñp
()

58 
	`db¥ötf
(
	`_
(

65 
	}
}

69 
	$ablock_f
(

70 
¨gc
,

71 **
¨gv
)

73 
bm≠_ext_t
 
bm
;

74 
xfs_fûeoff_t
 
bno
;

75 
xfs_fsblock_t
 
dfsbno
;

76 
havóâr
;

77 
√x
;

78 *
p
;

80 
bno
 = (
xfs_fûeoff_t
)
	`°πouŒ
(
¨gv
[1], &
p
, 0);

81 i‡(*
p
 != '\0') {

82 
	`db¥ötf
(
	`_
("bad blockÇumbî %s\n"), 
¨gv
[1]);

85 
	`push_cur
();

86 
	`£t_cur_öode
(
iocur_t›
->
öo
);

87 
havóâr
 = 
	`XFS_DFORK_Q
((
xfs_döode_t
 *)
iocur_t›
->
d©a
);

88 
	`p›_cur
();

89 i‡(!
havóâr
) {

90 
	`db¥ötf
(
	`_
("noáttribute data for file\n"));

93 
√x
 = 1;

94 
	`bm≠
(
bno
, 1, 
XFS_ATTR_FORK
, &
√x
, &
bm
);

95 i‡(
√x
 == 0) {

96 
	`db¥ötf
(
	`_
("fileáttr block is unmapped\n"));

99 
dfsbno
 = 
bm
.
°¨tblock
 + (
bno
 - bm.
°¨toff
);

100 
	`ASSERT
(
ty±ab
[
TYP_ATTR
].
ty≤m
 == TYP_ATTR);

101 
	`£t_cur
(&
ty±ab
[
TYP_ATTR
], (
__öt64_t
)
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
),

102 
blkbb
, 
DB_RING_ADD
, 
NULL
);

104 
	}
}

107 
	$block_öô
()

109 
	`add_comm™d
(&
ablock_cmd
);

110 
	`add_comm™d
(&
daddr_cmd
);

111 
	`add_comm™d
(&
dblock_cmd
);

112 
	`add_comm™d
(&
fsblock_cmd
);

113 
	}
}

116 
	$daddr_hñp
()

118 
	`db¥ötf
(
	`_
(

124 
	}
}

127 
	$daddr_f
(

128 
¨gc
,

129 **
¨gv
)

131 
__öt64_t
 
d
;

132 *
p
;

134 i‡(
¨gc
 == 1) {

135 
	`db¥ötf
(
	`_
("cuºíàdadd∏i†%Œd\n"), 
iocur_t›
->
off
 >> 
BBSHIFT
);

138 
d
 = (
__öt64_t
)
	`°πouŒ
(
¨gv
[1], &
p
, 0);

139 i‡(*
p
 != '\0' ||

140 
d
 >
mp
->
m_sb
.
sb_dblocks
 << (mp->m_sb.
sb_blocklog
 - 
BBSHIFT
)) {

141 
	`db¥ötf
(
	`_
("bad dadd∏%s\n"), 
¨gv
[1]);

144 
	`ASSERT
(
ty±ab
[
TYP_DATA
].
ty≤m
 == TYP_DATA);

145 
	`£t_cur
(&
ty±ab
[
TYP_DATA
], 
d
, 1, 
DB_RING_ADD
, 
NULL
);

147 
	}
}

150 
	$dblock_hñp
()

152 
	`db¥ötf
(
	`_
(

159 
	}
}

162 
	$dblock_f
(

163 
¨gc
,

164 **
¨gv
)

166 
bbm≠_t
 
bbm≠
;

167 
bm≠_ext_t
 *
bmp
;

168 
xfs_fûeoff_t
 
bno
;

169 
xfs_fsblock_t
 
dfsbno
;

170 
nb
;

171 
√x
;

172 *
p
;

173 
ty≤m_t
 
ty≥
;

175 
bno
 = (
xfs_fûeoff_t
)
	`°πouŒ
(
¨gv
[1], &
p
, 0);

176 i‡(*
p
 != '\0') {

177 
	`db¥ötf
(
	`_
("bad blockÇumbî %s\n"), 
¨gv
[1]);

180 
	`push_cur
();

181 
	`£t_cur_öode
(
iocur_t›
->
öo
);

182 
ty≥
 = 
	`öode_√xt_ty≥
();

183 
	`p›_cur
();

184 i‡(
ty≥
 =
TYP_NONE
) {

185 
	`db¥ötf
(
	`_
("noÅype for file data\n"));

188 
√x
 = 
nb
 = 
ty≥
 =
TYP_DIR2
 ? 
mp
->
m_dú_geo
->
fsbcou¡
 : 1;

189 
bmp
 = 
	`mÆloc
(
nb
 * (*bmp));

190 
	`bm≠
(
bno
, 
nb
, 
XFS_DATA_FORK
, &
√x
, 
bmp
);

191 i‡(
√x
 == 0) {

192 
	`db¥ötf
(
	`_
("file data block is unmapped\n"));

193 
	`‰ì
(
bmp
);

196 
dfsbno
 = 
bmp
->
°¨tblock
 + (
bno
 - bmp->
°¨toff
);

197 
	`ASSERT
(
ty±ab
[
ty≥
].
ty≤m
 ==Åype);

198 i‡(
√x
 > 1)

199 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

200 
	`£t_cur
(&
ty±ab
[
ty≥
], (
__öt64_t
)
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
),

201 
nb
 * 
blkbb
, 
DB_RING_ADD
, 
√x
 > 1 ? &
bbm≠
 : 
NULL
);

202 
	`‰ì
(
bmp
);

204 
	}
}

207 
	$fsblock_hñp
()

209 
	`db¥ötf
(
	`_
(

216 
	}
}

219 
	$fsblock_f
(

220 
¨gc
,

221 **
¨gv
)

223 
xfs_agblock_t
 
agbno
;

224 
xfs_agnumbî_t
 
agno
;

225 
xfs_fsblock_t
 
d
;

226 *
p
;

228 i‡(
¨gc
 == 1) {

229 
	`db¥ötf
(
	`_
("current fsblock is %lld\n"),

230 
	`XFS_DADDR_TO_FSB
(
mp
, 
iocur_t›
->
off
 >> 
BBSHIFT
));

233 
d
 = 
	`°πouŒ
(
¨gv
[1], &
p
, 0);

234 i‡(*
p
 != '\0') {

235 
	`db¥ötf
(
	`_
("bad fsblock %s\n"), 
¨gv
[1]);

238 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
d
);

239 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
d
);

240 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 || 
agbno
 >mp->m_sb.
sb_agblocks
) {

241 
	`db¥ötf
(
	`_
("bad fsblock %s\n"), 
¨gv
[1]);

244 
	`ASSERT
(
ty±ab
[
TYP_DATA
].
ty≤m
 == TYP_DATA);

245 
	`£t_cur
(&
ty±ab
[
TYP_DATA
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

246 
blkbb
, 
DB_RING_ADD
, 
NULL
);

248 
	}
}

251 
	$¥öt_block
(

252 c⁄° 
fõld_t
 *
fõlds
,

253 
¨gc
,

254 **
¨gv
)

256 
	`¥öt_øwd©a
(
iocur_t›
->
d©a
, iocur_t›->
Àn
);

257 
	}
}

260 
	$¥öt_øwd©a
(

261 *
d©a
,

262 
Àn
)

264 
i
;

265 
j
;

266 
œ°addr
;

267 
offch¨s
;

268 *
p
;

270 
œ°addr
 = (
Àn
 - 1) & ~(32 - 1);

271 i‡(
œ°addr
 < 0x10)

272 
offch¨s
 = 1;

273 i‡(
œ°addr
 < 0x100)

274 
offch¨s
 = 2;

275 i‡(
œ°addr
 < 0x1000)

276 
offch¨s
 = 3;

278 
offch¨s
 = 4;

279 
i
 = 0, 
p
 = 
d©a
; i < 
Àn
; i += 32) {

280 
	`db¥ötf
("%-0*.*x:", 
offch¨s
, offch¨s, 
i
);

281 
j
 = 0; j < 32 && 
i
 + j < 
Àn
; j++, 
p
++) {

282 i‡((
j
 & 3) == 0)

283 
	`db¥ötf
(" ");

284 
	`db¥ötf
("%02x", *
p
);

286 
	`db¥ötf
("\n");

288 
	}
}

	@block.h

19 
	gfõld
;

21 
block_öô
();

22 
¥öt_block
(c⁄° 
fõld
 *
fõlds
, 
¨gc
, **
¨gv
);

	@bmap.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Âröt.h
"

23 
	~"Áddr.h
"

24 
	~"fõld.h
"

25 
	~"bm≠.h
"

26 
	~"io.h
"

27 
	~"öode.h
"

28 
	~"ouçut.h
"

29 
	~"öô.h
"

31 
bm≠_f
(
¨gc
, **
¨gv
);

32 
bm≠_⁄e_exã¡
(
xfs_bmbt_ªc_t
 *
ï
,

33 
xfs_fûeoff_t
 *
ofÂ
, xfs_fûeoff_à
eoff
,

34 *
idxp
, 
bm≠_ext_t
 *
bï
);

35 
xfs_fsblock_t
 
£À˘_chûd
(
xfs_fûeoff_t
 
off
, 
xfs_bmbt_key_t
 *
kp
,

36 
xfs_bmbt_±r_t
 *
µ
, 
ƒecs
);

38 c⁄° 
cmdöfo_t
 
	gbm≠_cmd
 =

39 { "bm≠", 
NULL
, 
bm≠_f
, 0, 3, 0, 
N_
("[-ad] [block [len]]"),

40 
N_
("show block m≠ f‹ cuºíàfûe"), 
NULL
 };

43 
	$bm≠
(

44 
xfs_fûeoff_t
 
off£t
,

45 
xfs_fûblks_t
 
Àn
,

46 
whichf‹k
,

47 *
√xp
,

48 
bm≠_ext_t
 *
bï
)

50 
xfs_båì_block
 *
block
;

51 
xfs_fsblock_t
 
bno
;

52 
xfs_fûeoff_t
 
curoff£t
;

53 
xfs_döode_t
 *
dù
;

54 
xfs_fûeoff_t
 
eoff£t
;

55 
xfs_bmbt_ªc_t
 *
ï
;

56 
xfs_döode_fmt_t
 
fmt
;

57 
fsize
;

58 
xfs_bmbt_key_t
 *
kp
;

59 
n
;

60 
√x
;

61 
xfs_fsblock_t
 
√xtbno
;

62 
√xã¡s
;

63 
xfs_bmbt_±r_t
 *
µ
;

64 
xfs_bmdr_block_t
 *
rblock
;

65 
ty≤m_t
 
typ
;

66 
xfs_bmbt_ªc_t
 *
xp
;

68 
	`push_cur
();

69 
	`£t_cur_öode
(
iocur_t›
->
öo
);

70 
√x
 = *
√xp
;

71 *
√xp
 = 0;

72 
	`ASSERT
(
√x
 > 0);

73 
dù
 = 
iocur_t›
->
d©a
;

74 
n
 = 0;

75 
eoff£t
 = 
off£t
 + 
Àn
 - 1;

76 
curoff£t
 = 
off£t
;

77 
fmt
 = (
xfs_döode_fmt_t
)
	`XFS_DFORK_FORMAT
(
dù
, 
whichf‹k
);

78 
typ
 = 
whichf‹k
 =
XFS_DATA_FORK
 ? 
TYP_BMAPBTD
 : 
TYP_BMAPBTA
;

79 
	`ASSERT
(
ty±ab
[
typ
].
ty≤m
 ==Åyp);

80 
	`ASSERT
(
fmt
 =
XFS_DINODE_FMT_LOCAL
 || fmà=
XFS_DINODE_FMT_EXTENTS
 ||

81 
fmt
 =
XFS_DINODE_FMT_BTREE
);

82 i‡(
fmt
 =
XFS_DINODE_FMT_EXTENTS
) {

83 
√xã¡s
 = 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
);

84 
xp
 = (
xfs_bmbt_ªc_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

85 
ï
 = 
xp
;É∞< &xp[
√xã¡s
] && 
n
 < 
√x
;Ép++) {

86 i‡(!
	`bm≠_⁄e_exã¡
(
ï
, &
curoff£t
, 
eoff£t
, &
n
, 
bï
))

89 } i‡(
fmt
 =
XFS_DINODE_FMT_BTREE
) {

90 
	`push_cur
();

91 
rblock
 = (
xfs_bmdr_block_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

92 
fsize
 = 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
);

93 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
rblock
, 1, 
	`libxfs_bmdr_maxªcs
(
fsize
, 0));

94 
kp
 = 
	`XFS_BMDR_KEY_ADDR
(
rblock
, 1);

95 
bno
 = 
	`£À˘_chûd
(
curoff£t
, 
kp
, 
µ
,

96 
	`be16_to_˝u
(
rblock
->
bb_numªcs
));

98 
	`£t_cur
(&
ty±ab
[
typ
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
),

99 
blkbb
, 
DB_RING_IGN
, 
NULL
);

100 
block
 = (
xfs_båì_block
 *)
iocur_t›
->
d©a
;

101 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
) == 0)

103 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1,

104 
	`libxfs_bmbt_maxªcs
(
mp
, mp->
m_sb
.
sb_blocksize
, 0));

105 
kp
 = 
	`XFS_BMBT_KEY_ADDR
(
mp
, 
block
, 1);

106 
bno
 = 
	`£À˘_chûd
(
curoff£t
, 
kp
, 
µ
,

107 
	`be16_to_˝u
(
block
->
bb_numªcs
));

110 
√xtbno
 = 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_rightsib
);

111 
√xã¡s
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

112 
xp
 = (
xfs_bmbt_ªc_t
 *)

113 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1);

114 
ï
 = 
xp
;É∞< &xp[
√xã¡s
] && 
n
 < 
√x
;Ép++) {

115 i‡(!
	`bm≠_⁄e_exã¡
(
ï
, &
curoff£t
, 
eoff£t
,

116 &
n
, 
bï
)) {

117 
√xtbno
 = 
NULLFSBLOCK
;

121 
bno
 = 
√xtbno
;

122 i‡(
bno
 =
NULLFSBLOCK
)

124 
	`£t_cur
(&
ty±ab
[
typ
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
),

125 
blkbb
, 
DB_RING_IGN
, 
NULL
);

126 
block
 = (
xfs_båì_block
 *)
iocur_t›
->
d©a
;

128 
	`p›_cur
();

130 
	`p›_cur
();

131 *
√xp
 = 
n
;

132 
	}
}

135 
	$bm≠_f
(

136 
¨gc
,

137 **
¨gv
)

139 
af‹k
 = 0;

140 
bm≠_ext_t
 
be
;

141 
c
;

142 
xfs_fûeoff_t
 
co
, 
coßve
;

143 
df‹k
 = 0;

144 
xfs_döode_t
 *
dù
;

145 
xfs_fûeoff_t
 
eo
;

146 
xfs_fûblks_t
 
Àn
;

147 
√x
;

148 *
p
;

149 
whichf‹k
;

151 i‡(
iocur_t›
->
öo
 =
NULLFSINO
) {

152 
	`db¥ötf
(
	`_
("no current inode\n"));

155 
›töd
 = 0;

156 i‡(
¨gc
Ë(
c
 = 
	`gë›t
◊rgc, 
¨gv
, "ad")Ë!
EOF
) {

157 
c
) {

159 
af‹k
 = 1;

162 
df‹k
 = 1;

165 
	`db¥ötf
(
	`_
("bad option for bmap command\n"));

169 i‡(
af‹k
 + 
df‹k
 == 0) {

170 
	`push_cur
();

171 
	`£t_cur_öode
(
iocur_t›
->
öo
);

172 
dù
 = 
iocur_t›
->
d©a
;

173 i‡(
	`be32_to_˝u
(
dù
->
di_√xã¡s
))

174 
df‹k
 = 1;

175 i‡(
	`be16_to_˝u
(
dù
->
di_™exã¡s
))

176 
af‹k
 = 1;

177 
	`p›_cur
();

179 i‡(
›töd
 < 
¨gc
) {

180 
co
 = (
xfs_fûeoff_t
)
	`°πouŒ
(
¨gv
[
›töd
], &
p
, 0);

181 i‡(*
p
 != '\0') {

182 
	`db¥ötf
(
	`_
("bad blockÇumber for bmap %s\n"),

183 
¨gv
[
›töd
]);

186 
›töd
++;

187 i‡(
›töd
 < 
¨gc
) {

188 
Àn
 = (
xfs_fûblks_t
)
	`°πouŒ
(
¨gv
[
›töd
], &
p
, 0);

189 i‡(*
p
 != '\0') {

190 
	`db¥ötf
(
	`_
("badÜí f‹ bm≠ %s\n"), 
¨gv
[
›töd
]);

193 
eo
 = 
co
 + 
Àn
 - 1;

195 
eo
 = 
co
;

197 
co
 = 0;

198 
eo
 = -1;

200 
coßve
 = 
co
;

201 
whichf‹k
 = 
XFS_DATA_FORK
;

202 
whichf‹k
 <
XFS_ATTR_FORK
;

203 
whichf‹k
++) {

204 i‡(
whichf‹k
 =
XFS_DATA_FORK
 && !
df‹k
)

206 i‡(
whichf‹k
 =
XFS_ATTR_FORK
 && !
af‹k
)

209 
√x
 = 1;

210 
	`bm≠
(
co
, 
eo
 - cÿ+ 1, 
whichf‹k
, &
√x
, &
be
);

211 i‡(
√x
 == 0)

213 
	`db¥ötf
(
	`_
("%s offset %lld startblock %llu (%u/%u) count "

215 
whichf‹k
 =
XFS_DATA_FORK
 ? 
	`_
("data") : _("attr"),

216 
be
.
°¨toff
, be.
°¨tblock
,

217 
	`XFS_FSB_TO_AGNO
(
mp
, 
be
.
°¨tblock
),

218 
	`XFS_FSB_TO_AGBNO
(
mp
, 
be
.
°¨tblock
),

219 
be
.
blockcou¡
, be.
Êag
);

220 
co
 = 
be
.
°¨toff
 + be.
blockcou¡
;

222 
co
 = 
coßve
;

225 
	}
}

228 
	$bm≠_öô
()

230 
	`add_comm™d
(&
bm≠_cmd
);

231 
	}
}

234 
	$bm≠_⁄e_exã¡
(

235 
xfs_bmbt_ªc_t
 *
ï
,

236 
xfs_fûeoff_t
 *
ofÂ
,

237 
xfs_fûeoff_t
 
eoff
,

238 *
idxp
,

239 
bm≠_ext_t
 *
bï
)

241 
xfs_fûblks_t
 
c
;

242 
xfs_fûeoff_t
 
curoff£t
;

243 
f
;

244 
idx
;

245 
xfs_fûeoff_t
 
o
;

246 
xfs_fsblock_t
 
s
;

248 
	`c⁄vît_exã¡
(
ï
, &
o
, &
s
, &
c
, &
f
);

249 
curoff£t
 = *
ofÂ
;

250 
idx
 = *
idxp
;

251 i‡(
o
 + 
c
 <
curoff£t
)

253 i‡(
o
 > 
eoff
)

255 i‡(
o
 < 
curoff£t
) {

256 
c
 -
curoff£t
 - 
o
;

257 
s
 +
curoff£t
 - 
o
;

258 
o
 = 
curoff£t
;

260 i‡(
o
 + 
c
 - 1 > 
eoff
)

261 
c
 -(
o
 + c - 1Ë- 
eoff
;

262 
bï
[
idx
].
°¨toff
 = 
o
;

263 
bï
[
idx
].
°¨tblock
 = 
s
;

264 
bï
[
idx
].
blockcou¡
 = 
c
;

265 
bï
[
idx
].
Êag
 = 
f
;

266 *
idxp
 = 
idx
 + 1;

267 *
ofÂ
 = 
o
 + 
c
;

269 
	}
}

272 
	$c⁄vît_exã¡
(

273 
xfs_bmbt_ªc_t
 *
Ω
,

274 
xfs_fûeoff_t
 *
›
,

275 
xfs_fsblock_t
 *
•
,

276 
xfs_fûblks_t
 *
˝
,

277 *
Â
)

279 
xfs_bmbt_úec
 
úec
;

281 
	`libxfs_bmbt_disk_gë_Æl
(
Ω
, &
úec
);

282 *
Â
 = 
úec
.
br_°©e
 =
XFS_EXT_UNWRITTEN
;

283 *
›
 = 
úec
.
br_°¨toff
;

284 *
•
 = 
úec
.
br_°¨tblock
;

285 *
˝
 = 
úec
.
br_blockcou¡
;

286 
	}
}

289 
	$make_bbm≠
(

290 
bbm≠_t
 *
bbm≠
,

291 
√x
,

292 
bm≠_ext_t
 *
bmp
)

294 
i
;

296 
i
 = 0; i < 
√x
; i++) {

297 
bbm≠
->
b
[
i
].
bm_bn
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
bmp
[i].
°¨tblock
);

298 
bbm≠
->
b
[
i
].
bm_Àn
 = 
	`XFS_FSB_TO_BB
(
mp
, 
bmp
[i].
blockcou¡
);

300 
bbm≠
->
nm≠s
 = 
√x
;

301 
	}
}

303 
xfs_fsblock_t


304 
	$£À˘_chûd
(

305 
xfs_fûeoff_t
 
off
,

306 
xfs_bmbt_key_t
 *
kp
,

307 
xfs_bmbt_±r_t
 *
µ
,

308 
ƒecs
)

310 
i
;

312 
i
 = 0; i < 
ƒecs
; i++) {

313 i‡(
	`be64_to_˝u
(
kp
[
i
].
br_°¨toff
Ë=
off
)

314  
	`be64_to_˝u
(
µ
[
i
]);

315 i‡(
	`be64_to_˝u
(
kp
[
i
].
br_°¨toff
Ë> 
off
) {

316 i‡(
i
 == 0)

317  
	`be64_to_˝u
(
µ
[
i
]);

319  
	`be64_to_˝u
(
µ
[
i
 - 1]);

322  
	`be64_to_˝u
(
µ
[
ƒecs
 - 1]);

323 
	}
}

	@bmap.h

19 
	gbbm≠
;

20 
	gxfs_bmbt_ªc
;

22 
	sbm≠_ext
 {

23 
xfs_fûeoff_t
 
	m°¨toff
;

24 
xfs_fsblock_t
 
	m°¨tblock
;

25 
xfs_fûblks_t
 
	mblockcou¡
;

26 
	mÊag
;

27 } 
	tbm≠_ext_t
;

29 
bm≠
(
xfs_fûeoff_t
 
off£t
, 
xfs_fûblks_t
 
Àn
, 
whichf‹k
,

30 *
√xp
, 
bm≠_ext_t
 *
bï
);

31 
bm≠_öô
();

32 
c⁄vît_exã¡
(
xfs_bmbt_ªc
 *
Ω
, 
xfs_fûeoff_t
 *
›
,

33 
xfs_fsblock_t
 *
•
, 
xfs_fûblks_t
 *
˝
, *
Â
);

34 
make_bbm≠
(
bbm≠
 *bbm≠, 
√x
, 
bm≠_ext_t
 *
bmp
);

	@bmroot.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"bmroŸ.h
"

25 
	~"io.h
"

26 
	~"¥öt.h
"

27 
	~"bô.h
"

28 
	~"öô.h
"

30 
bmroŸa_key_cou¡
(*
obj
, 
°¨toff
);

31 
bmroŸa_key_off£t
(*
obj
, 
°¨toff
, 
idx
);

32 
bmroŸa_±r_cou¡
(*
obj
, 
°¨toff
);

33 
bmroŸa_±r_off£t
(*
obj
, 
°¨toff
, 
idx
);

34 
bmroŸd_key_cou¡
(*
obj
, 
°¨toff
);

35 
bmroŸd_key_off£t
(*
obj
, 
°¨toff
, 
idx
);

36 
bmroŸd_±r_cou¡
(*
obj
, 
°¨toff
);

37 
bmroŸd_±r_off£t
(*
obj
, 
°¨toff
, 
idx
);

39 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_bmdr_block_t
, 
bb_
 ## f))

	)

40 c⁄° 
fõld_t
 
	gbmroŸa_Êds
[] = {

41 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

42 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

43 { "keys", 
FLDT_BMROOTAKEY
, 
bmroŸa_key_off£t
, 
bmroŸa_key_cou¡
,

44 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

45 { "±rs", 
FLDT_BMROOTAPTR
, 
bmroŸa_±r_off£t
, 
bmroŸa_±r_cou¡
,

46 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTA
 },

47 { 
NULL
 }

49 c⁄° 
fõld_t
 
	gbmroŸd_Êds
[] = {

50 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

51 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

52 { "keys", 
FLDT_BMROOTDKEY
, 
bmroŸd_key_off£t
, 
bmroŸd_key_cou¡
,

53 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

54 { "±rs", 
FLDT_BMROOTDPTR
, 
bmroŸd_±r_off£t
, 
bmroŸd_±r_cou¡
,

55 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTD
 },

56 { 
NULL
 }

59 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_bmdr_key_t
, 
br_
 ## f))

	)

60 c⁄° 
fõld_t
 
	gbmroŸa_key_Êds
[] = {

61 { "°¨toff", 
FLDT_DFILOFFA
, 
OI
(
KOFF
(
°¨toff
)), 
C1
, 0, 
TYP_NONE
 },

62 { 
NULL
 }

64 c⁄° 
fõld_t
 
	gbmroŸd_key_Êds
[] = {

65 { "°¨toff", 
FLDT_DFILOFFD
, 
OI
(
KOFF
(
°¨toff
)), 
C1
, 0, 
TYP_NONE
 },

66 { 
NULL
 }

70 
	$bmroŸa_key_cou¡
(

71 *
obj
,

72 
°¨toff
)

74 
xfs_bmdr_block_t
 *
block
;

75 #ifde‡
DEBUG


76 
xfs_döode_t
 *
dù
 = 
obj
;

79 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

80 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

81 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

82 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
Ë&& (*)
block
 =
	`XFS_DFORK_APTR
(dip));

83 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

84  
	`be16_to_˝u
(
block
->
bb_numªcs
);

85 
	}
}

88 
	$bmroŸa_key_off£t
(

89 *
obj
,

90 
°¨toff
,

91 
idx
)

93 
xfs_bmdr_block_t
 *
block
;

94 #ifde‡
DEBUG


95 
xfs_döode_t
 *
dù
 = 
obj
;

97 
xfs_bmdr_key_t
 *
kp
;

99 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

100 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

101 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

102 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
Ë&& (*)
block
 =
	`XFS_DFORK_APTR
(dip));

103 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

104 
kp
 = 
	`XFS_BMDR_KEY_ADDR
(
block
, 
idx
);

105  
	`bôize
(()((*)
kp
 - (*)
block
));

106 
	}
}

109 
	$bmroŸa_±r_cou¡
(

110 *
obj
,

111 
°¨toff
)

113 
xfs_bmdr_block_t
 *
block
;

114 #ifde‡
DEBUG


115 
xfs_döode_t
 *
dù
 = 
obj
;

118 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

119 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

120 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

121 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
Ë&& (*)
block
 =
	`XFS_DFORK_APTR
(dip));

122 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

123  
	`be16_to_˝u
(
block
->
bb_numªcs
);

124 
	}
}

127 
	$bmroŸa_±r_off£t
(

128 *
obj
,

129 
°¨toff
,

130 
idx
)

132 
xfs_bmdr_block_t
 *
block
;

133 
xfs_döode_t
 *
dù
;

134 
xfs_bmdr_±r_t
 *
µ
;

136 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

137 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

138 
dù
 = 
obj
;

139 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

140 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
Ë&& (*)
block
 =
	`XFS_DFORK_APTR
(dip));

141 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

142 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
block
, 
idx
,

143 
	`libxfs_bmdr_maxªcs
(
	`XFS_DFORK_ASIZE
(
dù
, 
mp
), 0));

144  
	`bôize
(()((*)
µ
 - (*)
block
));

145 
	}
}

148 
	$bmroŸa_size
(

149 *
obj
,

150 
°¨toff
,

151 
idx
)

153 
xfs_döode_t
 *
dù
;

154 #ifde‡
DEBUG


155 
xfs_bmdr_block_t
 *
block
;

158 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

159 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

160 
	`ASSERT
(
idx
 == 0);

161 
dù
 = 
obj
;

162 #ifde‡
DEBUG


163 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

164 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
Ë&& (*)
block
 =
	`XFS_DFORK_APTR
(dip));

166  
	`bôize
(()
	`XFS_DFORK_ASIZE
(
dù
, 
mp
));

167 
	}
}

170 
	$bmroŸd_key_cou¡
(

171 *
obj
,

172 
°¨toff
)

174 
xfs_bmdr_block_t
 *
block
;

175 #ifde‡
DEBUG


176 
xfs_döode_t
 *
dù
 = 
obj
;

179 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

180 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

181 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

182 
	`ASSERT
((*)
block
 =
	`XFS_DFORK_DPTR
(
dù
));

183 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

184  
	`be16_to_˝u
(
block
->
bb_numªcs
);

185 
	}
}

188 
	$bmroŸd_key_off£t
(

189 *
obj
,

190 
°¨toff
,

191 
idx
)

193 
xfs_bmdr_block_t
 *
block
;

194 
xfs_bmdr_key_t
 *
kp
;

196 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

197 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

198 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

199 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

200 
kp
 = 
	`XFS_BMDR_KEY_ADDR
(
block
, 
idx
);

201  
	`bôize
(()((*)
kp
 - (*)
block
));

202 
	}
}

205 
	$bmroŸd_±r_cou¡
(

206 *
obj
,

207 
°¨toff
)

209 
xfs_bmdr_block_t
 *
block
;

210 #ifde‡
DEBUG


211 
xfs_döode_t
 *
dù
 = 
obj
;

214 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

215 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

216 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

217 
	`ASSERT
((*)
block
 =
	`XFS_DFORK_DPTR
(
dù
));

218 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

219  
	`be16_to_˝u
(
block
->
bb_numªcs
);

220 
	}
}

223 
	$bmroŸd_±r_off£t
(

224 *
obj
,

225 
°¨toff
,

226 
idx
)

228 
xfs_bmdr_block_t
 *
block
;

229 
xfs_bmdr_±r_t
 *
µ
;

230 
xfs_döode_t
 *
dù
;

232 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

233 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

234 
dù
 = 
obj
;

235 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

236 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

237 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
block
, 
idx
,

238 
	`libxfs_bmdr_maxªcs
(
	`XFS_DFORK_DSIZE
(
dù
, 
mp
), 0));

239  
	`bôize
(()((*)
µ
 - (*)
block
));

240 
	}
}

243 
	$bmroŸd_size
(

244 *
obj
,

245 
°¨toff
,

246 
idx
)

248 
xfs_döode_t
 *
dù
;

250 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

251 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

252 
	`ASSERT
(
idx
 == 0);

253 
dù
 = 
obj
;

254  
	`bôize
(()
	`XFS_DFORK_DSIZE
(
dù
, 
mp
));

255 
	}
}

	@bmroot.h

19 c⁄° 
fõld
 
bmroŸa_Êds
[];

20 c⁄° 
fõld
 
bmroŸa_key_Êds
[];

21 c⁄° 
fõld
 
bmroŸd_Êds
[];

22 c⁄° 
fõld
 
bmroŸd_key_Êds
[];

24 
bmroŸa_size
(*
obj
, 
°¨toff
, 
idx
);

25 
bmroŸd_size
(*
obj
, 
°¨toff
, 
idx
);

	@btblock.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"btblock.h
"

25 
	~"¥öt.h
"

26 
	~"bô.h
"

27 
	~"öô.h
"

32 
	sxfs_db_båì
 {

33 
uöt32_t
 
	mmagic
;

34 
size_t
 
	mblock_Àn
;

35 
size_t
 
	mkey_Àn
;

36 
size_t
 
	mªc_Àn
;

37 
size_t
 
	m±r_Àn
;

38 } 
	gbåìs
[] = {

39 { 
XFS_BMAP_MAGIC
,

40 
XFS_BTREE_LBLOCK_LEN
,

41 (
xfs_bmbt_key_t
),

42 (
xfs_bmbt_ªc_t
),

43 (
__be64
),

45 { 
XFS_ABTB_MAGIC
,

46 
XFS_BTREE_SBLOCK_LEN
,

47 (
xfs_Æloc_key_t
),

48 (
xfs_Æloc_ªc_t
),

49 (
__be32
),

51 { 
XFS_ABTC_MAGIC
,

52 
XFS_BTREE_SBLOCK_LEN
,

53 (
xfs_Æloc_key_t
),

54 (
xfs_Æloc_ªc_t
),

55 (
__be32
),

57 { 
XFS_IBT_MAGIC
,

58 
XFS_BTREE_SBLOCK_LEN
,

59 (
xfs_öobt_key_t
),

60 (
xfs_öobt_ªc_t
),

61 (
__be32
),

63 { 
XFS_FIBT_MAGIC
,

64 
XFS_BTREE_SBLOCK_LEN
,

65 (
xfs_öobt_key_t
),

66 (
xfs_öobt_ªc_t
),

67 (
__be32
),

69 { 
XFS_BMAP_CRC_MAGIC
,

70 
XFS_BTREE_LBLOCK_CRC_LEN
,

71 (
xfs_bmbt_key_t
),

72 (
xfs_bmbt_ªc_t
),

73 (
__be64
),

75 { 
XFS_ABTB_CRC_MAGIC
,

76 
XFS_BTREE_SBLOCK_CRC_LEN
,

77 (
xfs_Æloc_key_t
),

78 (
xfs_Æloc_ªc_t
),

79 (
__be32
),

81 { 
XFS_ABTC_CRC_MAGIC
,

82 
XFS_BTREE_SBLOCK_CRC_LEN
,

83 (
xfs_Æloc_key_t
),

84 (
xfs_Æloc_ªc_t
),

85 (
__be32
),

87 { 
XFS_IBT_CRC_MAGIC
,

88 
XFS_BTREE_SBLOCK_CRC_LEN
,

89 (
xfs_öobt_key_t
),

90 (
xfs_öobt_ªc_t
),

91 (
__be32
),

93 { 
XFS_FIBT_CRC_MAGIC
,

94 
XFS_BTREE_SBLOCK_CRC_LEN
,

95 (
xfs_öobt_key_t
),

96 (
xfs_öobt_ªc_t
),

97 (
__be32
),

99 { 
XFS_RMAP_CRC_MAGIC
,

100 
XFS_BTREE_SBLOCK_CRC_LEN
,

101 2 * (
xfs_rm≠_key
),

102 (
xfs_rm≠_ªc
),

103 (
__be32
),

105 { 
XFS_REFC_CRC_MAGIC
,

106 
XFS_BTREE_SBLOCK_CRC_LEN
,

107 (
xfs_ªfcou¡_key
),

108 (
xfs_ªfcou¡_ªc
),

109 (
__be32
),

121 
xfs_db_båì
 *

122 
	$block_to_bt
(

123 
xfs_båì_block
 *
bb
)

125 
xfs_db_båì
 *
bç
 = &
båìs
[0];

128 i‡(
	`be32_to_˝u
((
bb
)->
bb_magic
Ë=
bç
->
magic
)

129  
bç
;

130 
bç
++;

131 } 
bç
->
magic
 != 0);

133  
NULL
;

134 
	}
}

138 
	$btblock_maxªcs
(
xfs_db_båì
 *
bt
, 
blocksize
)

140 
blocksize
 -
bt
->
block_Àn
;

142  
blocksize
 / (
bt
->
key_Àn
 + bt->
±r_Àn
);

143 
	}
}

152 
	$btblock_key_cou¡
(

153 *
obj
,

154 
°¨toff
)

156 
xfs_båì_block
 *
block
 = 
obj
;

158 
	`ASSERT
(
°¨toff
 == 0);

160 i‡(
block
->
bb_Àvñ
 == 0)

162  
	`be16_to_˝u
(
block
->
bb_numªcs
);

163 
	}
}

169 
	$btblock_ªc_cou¡
(

170 *
obj
,

171 
°¨toff
)

173 
xfs_båì_block
 *
block
 = 
obj
;

175 
	`ASSERT
(
°¨toff
 == 0);

177 i‡(
block
->
bb_Àvñ
 != 0)

179  
	`be16_to_˝u
(
block
->
bb_numªcs
);

180 
	}
}

186 
	$btblock_key_off£t
(

187 *
obj
,

188 
°¨toff
,

189 
idx
)

191 
xfs_båì_block
 *
block
 = 
obj
;

192 
xfs_db_båì
 *
bt
 = 
	`block_to_bt
(
block
);

193 
off£t
;

195 
	`ASSERT
(
°¨toff
 == 0);

196 
	`ASSERT
(
block
->
bb_Àvñ
 != 0);

198 
off£t
 = 
bt
->
block_Àn
 + (
idx
 - 1Ë* bt->
key_Àn
;

199  
	`bôize
(
off£t
);

200 
	}
}

206 
	$btblock_±r_off£t
(

207 *
obj
,

208 
°¨toff
,

209 
idx
)

211 
xfs_båì_block
 *
block
 = 
obj
;

212 
xfs_db_båì
 *
bt
 = 
	`block_to_bt
(
block
);

213 
off£t
;

214 
maxªcs
;

216 
	`ASSERT
(
°¨toff
 == 0);

217 
	`ASSERT
(
block
->
bb_Àvñ
 != 0);

219 
maxªcs
 = 
	`btblock_maxªcs
(
bt
, 
mp
->
m_sb
.
sb_blocksize
);

220 
off£t
 = 
bt
->
block_Àn
 +

221 
maxªcs
 * 
bt
->
key_Àn
 +

222 (
idx
 - 1Ë* 
bt
->
±r_Àn
;

224  
	`bôize
(
off£t
);

225 
	}
}

231 
	$btblock_ªc_off£t
(

232 *
obj
,

233 
°¨toff
,

234 
idx
)

236 
xfs_båì_block
 *
block
 = 
obj
;

237 
xfs_db_båì
 *
bt
 = 
	`block_to_bt
(
block
);

238 
off£t
;

240 
	`ASSERT
(
°¨toff
 == 0);

241 
	`ASSERT
(
block
->
bb_Àvñ
 == 0);

243 
off£t
 = 
bt
->
block_Àn
 + (
idx
 - 1Ë* bt->
ªc_Àn
;

244  
	`bôize
(
off£t
);

245 
	}
}

251 
	$btblock_size
(

252 *
obj
,

253 
°¨toff
,

254 
idx
)

256  
	`bôize
(
mp
->
m_sb
.
sb_blocksize
);

257 
	}
}

264 c⁄° 
fõld_t
 
	gbm≠bè_hÊd
[] = {

265 { "", 
FLDT_BMAPBTA
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

266 { 
NULL
 }

268 c⁄° 
fõld_t
 
	gbm≠btd_hÊd
[] = {

269 { "", 
FLDT_BMAPBTD
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

270 { 
NULL
 }

273 c⁄° 
fõld_t
 
	gbm≠bè_¸c_hÊd
[] = {

274 { "", 
FLDT_BMAPBTA_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

275 { 
NULL
 }

277 c⁄° 
fõld_t
 
	gbm≠btd_¸c_hÊd
[] = {

278 { "", 
FLDT_BMAPBTD_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

279 { 
NULL
 }

282 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

283 c⁄° 
fõld_t
 
	gbm≠bè_Êds
[] = {

284 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

285 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

286 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

287 { "À·sib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_À·sib
)), 
C1
, 0, 
TYP_BMAPBTA
 },

288 { "rightsib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_rightsib
)), 
C1
, 0, 
TYP_BMAPBTA
 },

289 { "ªcs", 
FLDT_BMAPBTAREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

290 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

291 { "keys", 
FLDT_BMAPBTAKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

292 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

293 { "±rs", 
FLDT_BMAPBTAPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

294 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTA
 },

295 { 
NULL
 }

297 c⁄° 
fõld_t
 
	gbm≠btd_Êds
[] = {

298 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

299 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

300 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

301 { "À·sib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_À·sib
)), 
C1
, 0, 
TYP_BMAPBTD
 },

302 { "rightsib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_rightsib
)), 
C1
, 0, 
TYP_BMAPBTD
 },

303 { "ªcs", 
FLDT_BMAPBTDREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

304 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

305 { "keys", 
FLDT_BMAPBTDKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

306 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

307 { "±rs", 
FLDT_BMAPBTDPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

308 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTD
 },

309 { 
NULL
 }

312 c⁄° 
fõld_t
 
	gbm≠bè_¸c_Êds
[] = {

313 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

314 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

315 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

316 { "À·sib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_À·sib
)), 
C1
, 0, 
TYP_BMAPBTA
 },

317 { "rightsib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_rightsib
)), 
C1
, 0, 
TYP_BMAPBTA
 },

318 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_blkno
)), 
C1
, 0, 
TYP_BMAPBTD
 },

319 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
l
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

320 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
l
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

321 { "ow√r", 
FLDT_INO
, 
OI
(
OFF
(
u
.
l
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

322 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
l
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

323 { "ªcs", 
FLDT_BMAPBTAREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

324 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

325 { "keys", 
FLDT_BMAPBTAKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

326 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

327 { "±rs", 
FLDT_BMAPBTAPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

328 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTA
 },

329 { 
NULL
 }

331 c⁄° 
fõld_t
 
	gbm≠btd_¸c_Êds
[] = {

332 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

333 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

334 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

335 { "À·sib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_À·sib
)), 
C1
, 0, 
TYP_BMAPBTD
 },

336 { "rightsib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_rightsib
)), 
C1
, 0, 
TYP_BMAPBTD
 },

337 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_blkno
)), 
C1
, 0, 
TYP_BMAPBTD
 },

338 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
l
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

339 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
l
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

340 { "ow√r", 
FLDT_INO
, 
OI
(
OFF
(
u
.
l
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

341 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
l
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

342 { "ªcs", 
FLDT_BMAPBTDREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

343 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

344 { "keys", 
FLDT_BMAPBTDKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

345 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

346 { "±rs", 
FLDT_BMAPBTDPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

347 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTD
 },

348 { 
NULL
 }

350 #unde‡
OFF


352 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_bmbt_key_t
, 
br_
 ## f))

	)

353 c⁄° 
fõld_t
 
	gbm≠bè_key_Êds
[] = {

354 { "°¨toff", 
FLDT_DFILOFFA
, 
OI
(
KOFF
(
°¨toff
)), 
C1
, 0, 
TYP_ATTR
 },

355 { 
NULL
 }

357 c⁄° 
fõld_t
 
	gbm≠btd_key_Êds
[] = {

358 { "°¨toff", 
FLDT_DFILOFFD
, 
OI
(
KOFF
(
°¨toff
)), 
C1
, 0, 
TYP_INODATA
 },

359 { 
NULL
 }

361 #unde‡
KOFF


363 
	#BMBT_EXNTFLAG_BITOFF
 0

	)

364 
	#BMBT_STARTOFF_BITOFF
 (
BMBT_EXNTFLAG_BITOFF
 + 
BMBT_EXNTFLAG_BITLEN
)

	)

365 
	#BMBT_STARTBLOCK_BITOFF
 (
BMBT_STARTOFF_BITOFF
 + 
BMBT_STARTOFF_BITLEN
)

	)

366 
	#BMBT_BLOCKCOUNT_BITOFF
 \

367 (
BMBT_STARTBLOCK_BITOFF
 + 
BMBT_STARTBLOCK_BITLEN
)

	)

369 c⁄° 
fõld_t
 
	gbm≠bè_ªc_Êds
[] = {

370 { "°¨toff", 
FLDT_CFILEOFFA
, 
OI
(
BMBT_STARTOFF_BITOFF
), 
C1
, 0,

371 
TYP_ATTR
 },

372 { "°¨tblock", 
FLDT_CFSBLOCK
, 
OI
(
BMBT_STARTBLOCK_BITOFF
), 
C1
, 0,

373 
TYP_ATTR
 },

374 { "blockcou¡", 
FLDT_CEXTLEN
, 
OI
(
BMBT_BLOCKCOUNT_BITOFF
), 
C1
, 0,

375 
TYP_NONE
 },

376 { "exã¡Êag", 
FLDT_CEXTFLG
, 
OI
(
BMBT_EXNTFLAG_BITOFF
), 
C1
, 0,

377 
TYP_NONE
 },

378 { 
NULL
 }

380 c⁄° 
fõld_t
 
	gbm≠btd_ªc_Êds
[] = {

381 { "°¨toff", 
FLDT_CFILEOFFD
, 
OI
(
BMBT_STARTOFF_BITOFF
), 
C1
, 0,

382 
TYP_INODATA
 },

383 { "°¨tblock", 
FLDT_CFSBLOCK
, 
OI
(
BMBT_STARTBLOCK_BITOFF
), 
C1
, 0,

384 
TYP_INODATA
 },

385 { "blockcou¡", 
FLDT_CEXTLEN
, 
OI
(
BMBT_BLOCKCOUNT_BITOFF
), 
C1
, 0,

386 
TYP_NONE
 },

387 { "exã¡Êag", 
FLDT_CEXTFLG
, 
OI
(
BMBT_EXNTFLAG_BITOFF
), 
C1
, 0,

388 
TYP_NONE
 },

389 { 
NULL
 }

397 c⁄° 
fõld_t
 
	göobt_hÊd
[] = {

398 { "", 
FLDT_INOBT
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

399 { 
NULL
 }

402 c⁄° 
fõld_t
 
	göobt_¸c_hÊd
[] = {

403 { "", 
FLDT_INOBT_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

404 { 
NULL
 }

407 c⁄° 
fõld_t
 
	göobt_•¸c_hÊd
[] = {

408 { "", 
FLDT_INOBT_SPCRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

409 { 
NULL
 }

412 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

413 c⁄° 
fõld_t
 
	göobt_Êds
[] = {

414 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

415 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

416 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

417 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_INOBT
 },

418 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_INOBT
 },

419 { "ªcs", 
FLDT_INOBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

420 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

421 { "keys", 
FLDT_INOBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

422 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

423 { "±rs", 
FLDT_INOBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

424 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_INOBT
 },

425 { 
NULL
 }

427 c⁄° 
fõld_t
 
	göobt_¸c_Êds
[] = {

428 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

429 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

430 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

431 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_INOBT
 },

432 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_INOBT
 },

433 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_INOBT
 },

434 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

435 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

436 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

437 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

438 { "ªcs", 
FLDT_INOBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

439 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

440 { "keys", 
FLDT_INOBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

441 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

442 { "±rs", 
FLDT_INOBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

443 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_INOBT
 },

444 { 
NULL
 }

446 c⁄° 
fõld_t
 
	göobt_•¸c_Êds
[] = {

447 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

448 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

449 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

450 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_INOBT
 },

451 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_INOBT
 },

452 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_INOBT
 },

453 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

454 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

455 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

456 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

457 { "ªcs", 
FLDT_INOBTSPREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

458 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

459 { "keys", 
FLDT_INOBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

460 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

461 { "±rs", 
FLDT_INOBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

462 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_INOBT
 },

463 { 
NULL
 }

466 #unde‡
OFF


468 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_öobt_key_t
, 
ú_
 ## f))

	)

469 c⁄° 
fõld_t
 
	göobt_key_Êds
[] = {

470 { "°¨töo", 
FLDT_AGINO
, 
OI
(
KOFF
(
°¨töo
)), 
C1
, 0, 
TYP_INODE
 },

471 { 
NULL
 }

473 #unde‡
KOFF


475 
	#ROFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_öobt_ªc_t
, f))

	)

476 c⁄° 
fõld_t
 
	göobt_ªc_Êds
[] = {

477 { "°¨töo", 
FLDT_AGINO
, 
OI
(
ROFF
(
ú_°¨töo
)), 
C1
, 0, 
TYP_INODE
 },

478 { "‰ìcou¡", 
FLDT_INT32D
, 
OI
(
ROFF
(
ú_u
.
f
.
ú_‰ìcou¡
)), 
C1
, 0, 
TYP_NONE
 },

479 { "‰ì", 
FLDT_INOFREE
, 
OI
(
ROFF
(
ú_‰ì
)), 
C1
, 0, 
TYP_NONE
 },

480 { 
NULL
 }

483 c⁄° 
fõld_t
 
	göobt_•ªc_Êds
[] = {

484 { "°¨töo", 
FLDT_AGINO
, 
OI
(
ROFF
(
ú_°¨töo
)), 
C1
, 0, 
TYP_INODE
 },

485 { "hﬁemask", 
FLDT_UINT16X
, 
OI
(
ROFF
(
ú_u
.
•
.
ú_hﬁemask
)), 
C1
, 0,

486 
TYP_NONE
 },

487 { "cou¡", 
FLDT_UINT8D
, 
OI
(
ROFF
(
ú_u
.
•
.
ú_cou¡
)), 
C1
, 0, 
TYP_NONE
 },

488 { "‰ìcou¡", 
FLDT_INT8D
, 
OI
(
ROFF
(
ú_u
.
•
.
ú_‰ìcou¡
)), 
C1
, 0,

489 
TYP_NONE
 },

490 { "‰ì", 
FLDT_INOFREE
, 
OI
(
ROFF
(
ú_‰ì
)), 
C1
, 0, 
TYP_NONE
 },

491 { 
NULL
 }

493 #unde‡
ROFF


499 c⁄° 
fõld_t
 
	gbnobt_hÊd
[] = {

500 { "", 
FLDT_BNOBT
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

501 { 
NULL
 }

504 c⁄° 
fõld_t
 
	gbnobt_¸c_hÊd
[] = {

505 { "", 
FLDT_BNOBT_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

506 { 
NULL
 }

509 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

510 c⁄° 
fõld_t
 
	gbnobt_Êds
[] = {

511 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

512 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

513 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

514 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_BNOBT
 },

515 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_BNOBT
 },

516 { "ªcs", 
FLDT_BNOBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

517 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

518 { "keys", 
FLDT_BNOBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

519 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

520 { "±rs", 
FLDT_BNOBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

521 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BNOBT
 },

522 { 
NULL
 }

524 c⁄° 
fõld_t
 
	gbnobt_¸c_Êds
[] = {

525 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

526 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

527 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

528 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_BNOBT
 },

529 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_BNOBT
 },

530 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_BNOBT
 },

531 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

532 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

533 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

534 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

535 { "ªcs", 
FLDT_BNOBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

536 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

537 { "keys", 
FLDT_BNOBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

538 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

539 { "±rs", 
FLDT_BNOBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

540 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BNOBT
 },

541 { 
NULL
 }

543 #unde‡
OFF


545 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_Æloc_key_t
, 
¨_
 ## f))

	)

546 c⁄° 
fõld_t
 
	gbnobt_key_Êds
[] = {

547 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
KOFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

548 { "blockcou¡", 
FLDT_EXTLEN
, 
OI
(
KOFF
(
blockcou¡
)), 
C1
, 0, 
TYP_NONE
 },

549 { 
NULL
 }

551 #unde‡
KOFF


553 
	#ROFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_Æloc_ªc_t
, 
¨_
 ## f))

	)

554 c⁄° 
fõld_t
 
	gbnobt_ªc_Êds
[] = {

555 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
ROFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

556 { "blockcou¡", 
FLDT_EXTLEN
, 
OI
(
ROFF
(
blockcou¡
)), 
C1
, 0, 
TYP_NONE
 },

557 { 
NULL
 }

559 #unde‡
ROFF


561 c⁄° 
fõld_t
 
	g˙tbt_hÊd
[] = {

562 { "", 
FLDT_CNTBT
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

563 { 
NULL
 }

566 c⁄° 
fõld_t
 
	g˙tbt_¸c_hÊd
[] = {

567 { "", 
FLDT_CNTBT_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

568 { 
NULL
 }

571 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

572 c⁄° 
fõld_t
 
	g˙tbt_Êds
[] = {

573 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

574 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

575 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

576 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_CNTBT
 },

577 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_CNTBT
 },

578 { "ªcs", 
FLDT_CNTBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

579 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

580 { "keys", 
FLDT_CNTBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

581 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

582 { "±rs", 
FLDT_CNTBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

583 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_CNTBT
 },

584 { 
NULL
 }

586 c⁄° 
fõld_t
 
	g˙tbt_¸c_Êds
[] = {

587 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

588 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

589 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

590 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_CNTBT
 },

591 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_CNTBT
 },

592 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_CNTBT
 },

593 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

594 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

595 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

596 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

597 { "ªcs", 
FLDT_CNTBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

598 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

599 { "keys", 
FLDT_CNTBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

600 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

601 { "±rs", 
FLDT_CNTBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

602 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_CNTBT
 },

603 { 
NULL
 }

605 #unde‡
OFF


607 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_Æloc_key_t
, 
¨_
 ## f))

	)

608 c⁄° 
fõld_t
 
	g˙tbt_key_Êds
[] = {

609 { "blockcou¡", 
FLDT_EXTLEN
, 
OI
(
KOFF
(
blockcou¡
)), 
C1
, 0, 
TYP_NONE
 },

610 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
KOFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

611 { 
NULL
 }

613 #unde‡
KOFF


615 
	#ROFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_Æloc_ªc_t
, 
¨_
 ## f))

	)

616 c⁄° 
fõld_t
 
	g˙tbt_ªc_Êds
[] = {

617 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
ROFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

618 { "blockcou¡", 
FLDT_EXTLEN
, 
OI
(
ROFF
(
blockcou¡
)), 
C1
, 0, 
TYP_NONE
 },

619 { 
NULL
 }

621 #unde‡
ROFF


624 c⁄° 
fõld_t
 
	grm≠bt_¸c_hÊd
[] = {

625 { "", 
FLDT_RMAPBT_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

626 { 
NULL
 }

629 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

630 c⁄° 
fõld_t
 
	grm≠bt_¸c_Êds
[] = {

631 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

632 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

633 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

634 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_RMAPBT
 },

635 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_RMAPBT
 },

636 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_RMAPBT
 },

637 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

638 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

639 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

640 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

641 { "ªcs", 
FLDT_RMAPBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

642 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

643 { "keys", 
FLDT_RMAPBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

644 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

645 { "±rs", 
FLDT_RMAPBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

646 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_RMAPBT
 },

647 { 
NULL
 }

649 #unde‡
OFF


651 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_rm≠_key
, 
rm_
 ## f))

	)

653 
	#RMAPBK_STARTBLOCK_BITOFF
 0

	)

654 
	#RMAPBK_OWNER_BITOFF
 (
RMAPBK_STARTBLOCK_BITOFF
 + 
RMAPBT_STARTBLOCK_BITLEN
)

	)

655 
	#RMAPBK_ATTRFLAG_BITOFF
 (
RMAPBK_OWNER_BITOFF
 + 
RMAPBT_OWNER_BITLEN
)

	)

656 
	#RMAPBK_BMBTFLAG_BITOFF
 (
RMAPBK_ATTRFLAG_BITOFF
 + 
RMAPBT_ATTRFLAG_BITLEN
)

	)

657 
	#RMAPBK_EXNTFLAG_BITOFF
 (
RMAPBK_BMBTFLAG_BITOFF
 + 
RMAPBT_BMBTFLAG_BITLEN
)

	)

658 
	#RMAPBK_UNUSED_OFFSET_BITOFF
 (
RMAPBK_EXNTFLAG_BITOFF
 + 
RMAPBT_EXNTFLAG_BITLEN
)

	)

659 
	#RMAPBK_OFFSET_BITOFF
 (
RMAPBK_UNUSED_OFFSET_BITOFF
 + 
RMAPBT_UNUSED_OFFSET_BITLEN
)

	)

661 
	#HI_KOFF
(
f
Ë
	`bôize
((
xfs_rm≠_key
Ë+ 
	`off£tof
(xfs_rm≠_key, 
rm_
 ## f))

	)

663 
	#RMAPBK_STARTBLOCKHI_BITOFF
 (
	`bôize
((
xfs_rm≠_key
)))

	)

664 
	#RMAPBK_OWNERHI_BITOFF
 (
RMAPBK_STARTBLOCKHI_BITOFF
 + 
RMAPBT_STARTBLOCK_BITLEN
)

	)

665 
	#RMAPBK_ATTRFLAGHI_BITOFF
 (
RMAPBK_OWNERHI_BITOFF
 + 
RMAPBT_OWNER_BITLEN
)

	)

666 
	#RMAPBK_BMBTFLAGHI_BITOFF
 (
RMAPBK_ATTRFLAGHI_BITOFF
 + 
RMAPBT_ATTRFLAG_BITLEN
)

	)

667 
	#RMAPBK_EXNTFLAGHI_BITOFF
 (
RMAPBK_BMBTFLAGHI_BITOFF
 + 
RMAPBT_BMBTFLAG_BITLEN
)

	)

668 
	#RMAPBK_UNUSED_OFFSETHI_BITOFF
 (
RMAPBK_EXNTFLAGHI_BITOFF
 + 
RMAPBT_EXNTFLAG_BITLEN
)

	)

669 
	#RMAPBK_OFFSETHI_BITOFF
 (
RMAPBK_UNUSED_OFFSETHI_BITOFF
 + 
RMAPBT_UNUSED_OFFSET_BITLEN
)

	)

671 c⁄° 
fõld_t
 
	grm≠bt_key_Êds
[] = {

672 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
KOFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

673 { "ow√r", 
FLDT_INT64D
, 
OI
(
KOFF
(
ow√r
)), 
C1
, 0, 
TYP_NONE
 },

674 { "off£t", 
FLDT_RFILEOFFD
, 
OI
(
RMAPBK_OFFSET_BITOFF
), 
C1
, 0, 
TYP_NONE
 },

675 { "©åf‹k", 
FLDT_RATTRFORKFLG
, 
OI
(
RMAPBK_ATTRFLAG_BITOFF
), 
C1
, 0,

676 
TYP_NONE
 },

677 { "bmbtblock", 
FLDT_RBMBTFLG
, 
OI
(
RMAPBK_BMBTFLAG_BITOFF
), 
C1
, 0,

678 
TYP_NONE
 },

679 { "°¨tblock_hi", 
FLDT_AGBLOCK
, 
OI
(
HI_KOFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

680 { "ow√r_hi", 
FLDT_INT64D
, 
OI
(
HI_KOFF
(
ow√r
)), 
C1
, 0, 
TYP_NONE
 },

681 { "off£t_hi", 
FLDT_RFILEOFFD
, 
OI
(
RMAPBK_OFFSETHI_BITOFF
), 
C1
, 0, 
TYP_NONE
 },

682 { "©åf‹k_hi", 
FLDT_RATTRFORKFLG
, 
OI
(
RMAPBK_ATTRFLAGHI_BITOFF
), 
C1
, 0,

683 
TYP_NONE
 },

684 { "bmbtblock_hi", 
FLDT_RBMBTFLG
, 
OI
(
RMAPBK_BMBTFLAGHI_BITOFF
), 
C1
, 0,

685 
TYP_NONE
 },

686 { 
NULL
 }

688 #unde‡
HI_KOFF


689 #unde‡
KOFF


691 
	#ROFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_rm≠_ªc
, 
rm_
 ## f))

	)

693 
	#RMAPBT_STARTBLOCK_BITOFF
 0

	)

694 
	#RMAPBT_BLOCKCOUNT_BITOFF
 (
RMAPBT_STARTBLOCK_BITOFF
 + 
RMAPBT_STARTBLOCK_BITLEN
)

	)

695 
	#RMAPBT_OWNER_BITOFF
 (
RMAPBT_BLOCKCOUNT_BITOFF
 + 
RMAPBT_BLOCKCOUNT_BITLEN
)

	)

696 
	#RMAPBT_ATTRFLAG_BITOFF
 (
RMAPBT_OWNER_BITOFF
 + 
RMAPBT_OWNER_BITLEN
)

	)

697 
	#RMAPBT_BMBTFLAG_BITOFF
 (
RMAPBT_ATTRFLAG_BITOFF
 + 
RMAPBT_ATTRFLAG_BITLEN
)

	)

698 
	#RMAPBT_EXNTFLAG_BITOFF
 (
RMAPBT_BMBTFLAG_BITOFF
 + 
RMAPBT_BMBTFLAG_BITLEN
)

	)

699 
	#RMAPBT_UNUSED_OFFSET_BITOFF
 (
RMAPBT_EXNTFLAG_BITOFF
 + 
RMAPBT_EXNTFLAG_BITLEN
)

	)

700 
	#RMAPBT_OFFSET_BITOFF
 (
RMAPBT_UNUSED_OFFSET_BITOFF
 + 
RMAPBT_UNUSED_OFFSET_BITLEN
)

	)

702 c⁄° 
fõld_t
 
	grm≠bt_ªc_Êds
[] = {

703 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
RMAPBT_STARTBLOCK_BITOFF
), 
C1
, 0, 
TYP_DATA
 },

704 { "blockcou¡", 
FLDT_REXTLEN
, 
OI
(
RMAPBT_BLOCKCOUNT_BITOFF
), 
C1
, 0, 
TYP_NONE
 },

705 { "ow√r", 
FLDT_INT64D
, 
OI
(
RMAPBT_OWNER_BITOFF
), 
C1
, 0, 
TYP_NONE
 },

706 { "off£t", 
FLDT_RFILEOFFD
, 
OI
(
RMAPBT_OFFSET_BITOFF
), 
C1
, 0, 
TYP_NONE
 },

707 { "exã¡Êag", 
FLDT_REXTFLG
, 
OI
(
RMAPBT_EXNTFLAG_BITOFF
), 
C1
, 0,

708 
TYP_NONE
 },

709 { "©åf‹k", 
FLDT_RATTRFORKFLG
, 
OI
(
RMAPBT_ATTRFLAG_BITOFF
), 
C1
, 0,

710 
TYP_NONE
 },

711 { "bmbtblock", 
FLDT_RBMBTFLG
, 
OI
(
RMAPBT_BMBTFLAG_BITOFF
), 
C1
, 0,

712 
TYP_NONE
 },

713 { 
NULL
 }

715 #unde‡
ROFF


718 c⁄° 
fõld_t
 
	gªfcbt_¸c_hÊd
[] = {

719 { "", 
FLDT_REFCBT_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

720 { 
NULL
 }

723 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

724 c⁄° 
fõld_t
 
	gªfcbt_¸c_Êds
[] = {

725 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

726 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

727 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

728 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_REFCBT
 },

729 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_REFCBT
 },

730 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_REFCBT
 },

731 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

732 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

733 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

734 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

735 { "ªcs", 
FLDT_REFCBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

736 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

737 { "keys", 
FLDT_REFCBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

738 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

739 { "±rs", 
FLDT_REFCBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

740 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_REFCBT
 },

741 { 
NULL
 }

743 #unde‡
OFF


745 
	#REFCNTBT_COWFLAG_BITOFF
 0

	)

746 
	#REFCNTBT_STARTBLOCK_BITOFF
 (
REFCNTBT_COWFLAG_BITOFF
 + 
REFCNTBT_COWFLAG_BITLEN
)

	)

748 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_ªfcou¡_key
, 
rc_
 ## f))

	)

749 c⁄° 
fõld_t
 
	gªfcbt_key_Êds
[] = {

750 { "°¨tblock", 
FLDT_CAGBLOCK
, 
OI
(
REFCNTBT_STARTBLOCK_BITOFF
), 
C1
, 0, 
TYP_DATA
 },

751 { "cowÊag", 
FLDT_CCOWFLG
, 
OI
(
REFCNTBT_COWFLAG_BITOFF
), 
C1
, 0, 
TYP_DATA
 },

752 { 
NULL
 }

754 #unde‡
KOFF


756 
	#ROFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_ªfcou¡_ªc
, 
rc_
 ## f))

	)

757 c⁄° 
fõld_t
 
	gªfcbt_ªc_Êds
[] = {

758 { "°¨tblock", 
FLDT_CAGBLOCK
, 
OI
(
REFCNTBT_STARTBLOCK_BITOFF
), 
C1
, 0, 
TYP_DATA
 },

759 { "blockcou¡", 
FLDT_EXTLEN
, 
OI
(
ROFF
(
blockcou¡
)), 
C1
, 0, 
TYP_NONE
 },

760 { "ªfcou¡", 
FLDT_UINT32D
, 
OI
(
ROFF
(
ªfcou¡
)), 
C1
, 0, 
TYP_DATA
 },

761 { "cowÊag", 
FLDT_CCOWFLG
, 
OI
(
REFCNTBT_COWFLAG_BITOFF
), 
C1
, 0, 
TYP_DATA
 },

762 { 
NULL
 }

764 #unde‡
ROFF


	@btblock.h

19 c⁄° 
fõld
 
bm≠bè_Êds
[];

20 c⁄° 
fõld
 
bm≠bè_hÊd
[];

21 c⁄° 
fõld
 
bm≠bè_¸c_Êds
[];

22 c⁄° 
fõld
 
bm≠bè_¸c_hÊd
[];

23 c⁄° 
fõld
 
bm≠bè_key_Êds
[];

24 c⁄° 
fõld
 
bm≠bè_ªc_Êds
[];

26 c⁄° 
fõld
 
bm≠btd_Êds
[];

27 c⁄° 
fõld
 
bm≠btd_hÊd
[];

28 c⁄° 
fõld
 
bm≠btd_¸c_Êds
[];

29 c⁄° 
fõld
 
bm≠btd_¸c_hÊd
[];

30 c⁄° 
fõld
 
bm≠btd_key_Êds
[];

31 c⁄° 
fõld
 
bm≠btd_ªc_Êds
[];

33 c⁄° 
fõld
 
öobt_Êds
[];

34 c⁄° 
fõld
 
öobt_hÊd
[];

35 c⁄° 
fõld
 
öobt_¸c_Êds
[];

36 c⁄° 
fõld
 
öobt_•¸c_Êds
[];

37 c⁄° 
fõld
 
öobt_¸c_hÊd
[];

38 c⁄° 
fõld
 
öobt_•¸c_hÊd
[];

39 c⁄° 
fõld
 
öobt_key_Êds
[];

40 c⁄° 
fõld
 
öobt_ªc_Êds
[];

41 c⁄° 
fõld
 
öobt_•ªc_Êds
[];

43 c⁄° 
fõld
 
bnobt_Êds
[];

44 c⁄° 
fõld
 
bnobt_hÊd
[];

45 c⁄° 
fõld
 
bnobt_¸c_Êds
[];

46 c⁄° 
fõld
 
bnobt_¸c_hÊd
[];

47 c⁄° 
fõld
 
bnobt_key_Êds
[];

48 c⁄° 
fõld
 
bnobt_ªc_Êds
[];

50 c⁄° 
fõld
 
˙tbt_Êds
[];

51 c⁄° 
fõld
 
˙tbt_hÊd
[];

52 c⁄° 
fõld
 
˙tbt_¸c_Êds
[];

53 c⁄° 
fõld
 
˙tbt_¸c_hÊd
[];

54 c⁄° 
fõld
 
˙tbt_key_Êds
[];

55 c⁄° 
fõld
 
˙tbt_ªc_Êds
[];

57 c⁄° 
fõld
 
rm≠bt_¸c_Êds
[];

58 c⁄° 
fõld
 
rm≠bt_¸c_hÊd
[];

59 c⁄° 
fõld
 
rm≠bt_key_Êds
[];

60 c⁄° 
fõld
 
rm≠bt_ªc_Êds
[];

62 c⁄° 
fõld
 
ªfcbt_¸c_Êds
[];

63 c⁄° 
fõld
 
ªfcbt_¸c_hÊd
[];

64 c⁄° 
fõld
 
ªfcbt_key_Êds
[];

65 c⁄° 
fõld
 
ªfcbt_ªc_Êds
[];

67 
btblock_size
(*
obj
, 
°¨toff
, 
idx
);

	@check.c

19 
	~"libxfs.h
"

20 
	~<m©h.h
>

21 
	~<sys/time.h
>

22 
	~"bm≠.h
"

23 
	~"check.h
"

24 
	~"comm™d.h
"

25 
	~"io.h
"

26 
	~"ty≥.h
"

27 
	~"Âröt.h
"

28 
	~"Áddr.h
"

29 
	~"fõld.h
"

30 
	~"sb.h
"

31 
	~"ouçut.h
"

32 
	~"öô.h
"

33 
	~"mÆloc.h
"

34 
	~"dú2.h
"

37 
	mIS_USER_QUOTA
, 
	mIS_PROJECT_QUOTA
, 
	mIS_GROUP_QUOTA
,

38 } 
	tqty≥_t
;

41 
	mDBM_UNKNOWN
, 
	mDBM_AGF
, 
	mDBM_AGFL
, 
	mDBM_AGI
,

42 
	mDBM_ATTR
, 
	mDBM_BTBMAPA
, 
	mDBM_BTBMAPD
, 
	mDBM_BTBNO
,

43 
	mDBM_BTCNT
, 
	mDBM_BTINO
, 
	mDBM_DATA
, 
	mDBM_DIR
,

44 
	mDBM_FREE1
, 
	mDBM_FREE2
, 
	mDBM_FREELIST
, 
	mDBM_INODE
,

45 
	mDBM_LOG
, 
	mDBM_MISSING
, 
	mDBM_QUOTA
, 
	mDBM_RTBITMAP
,

46 
	mDBM_RTDATA
, 
	mDBM_RTFREE
, 
	mDBM_RTSUM
, 
	mDBM_SB
,

47 
	mDBM_SYMLINK
, 
	mDBM_BTFINO
, 
	mDBM_BTRMAP
, 
	mDBM_BTREFC
,

48 
	mDBM_RLDATA
, 
	mDBM_COWDATA
,

49 
	mDBM_NDBM


50 } 
	tdbm_t
;

52 
	söod©a
 {

53 
öod©a
 *
	m√xt
;

54 
∆ök_t
 
	mlök_£t
;

55 
∆ök_t
 
	mlök_add
;

56 
	misdú
:1;

57 
	mi§eÊök
:1;

58 
	m£curôy
;

59 
	mûi°
;

60 
xfs_öo_t
 
	möo
;

61 
öod©a
 *
	m∑ª¡
;

62 *
	m«me
;

63 } 
	töod©a_t
;

64 
	#MIN_INODATA_HASH_SIZE
 256

	)

65 
	#MAX_INODATA_HASH_SIZE
 65536

	)

66 
	#INODATA_AVG_HASH_LENGTH
 8

	)

68 
	sqöfo
 {

69 
xfs_q˙t_t
 
	mbc
;

70 
xfs_q˙t_t
 
	mic
;

71 
xfs_q˙t_t
 
	mrc
;

72 } 
	tqöfo_t
;

74 
	#QDATA_HASH_SIZE
 256

	)

75 
	sqd©a
 {

76 
qd©a
 *
	m√xt
;

77 
xfs_dqid_t
 
	mid
;

78 
qöfo_t
 
	mcou¡
;

79 
qöfo_t
 
	mdq
;

80 } 
	tqd©a_t
;

82 
	sblkít
 {

83 
xfs_fûeoff_t
 
	m°¨toff
;

84 
	mnblks
;

85 
xfs_fsblock_t
 
	mblks
[1];

86 } 
	tblkít_t
;

87 
	#BLKENT_SIZE
(
n
) \

88 (
	`off£tof
(
blkít_t
, 
blks
Ë+ ((
xfs_fsblock_t
Ë* (
n
)))

	)

90 
	sblkm≠
 {

91 
	m«íts
;

92 
	m√¡s
;

93 
blkít_t
 *
	míts
[1];

94 } 
	tblkm≠_t
;

95 
	#BLKMAP_SIZE
(
n
) \

96 (
	`off£tof
(
blkm≠_t
, 
íts
Ë+ ((
blkít_t
 *Ë* (
n
)))

	)

98 
	s‰ìèb
 {

99 
	m«íts
;

100 
	m√¡s
;

101 
xfs_dú2_d©a_off_t
 
	míts
[1];

102 } 
	t‰ìèb_t
;

103 
	#FREETAB_SIZE
(
n
) \

104 (
	`off£tof
(
‰ìèb_t
, 
íts
Ë+ ((
xfs_dú2_d©a_off_t
Ë* (
n
)))

	)

106 
	sdúhash
 {

107 
dúhash
 *
	m√xt
;

108 
__u32
 
	mhashvÆ
;

109 
__u32
 
	maddªss
;

110 
	m£í
;

111 } 
	tdúhash_t
;

112 
	#DIR_HASH_SIZE
 1024

	)

113 
	#DIR_HASH_FUNC
(
h
,
a
Ë(((hË^ (a)Ë% 
DIR_HASH_SIZE
)

	)

115 
xfs_exéí_t
 
	gagf‰ìblks
;

116 
xfs_exéí_t
 
	gagÊ⁄ge°
;

117 
__uöt64_t
 
	gagf_aggr_‰ìblks
;

118 
__uöt32_t
 
	gagfbåìblks
;

119 
	gœzycou¡
;

120 
xfs_agöo_t
 
	gagicou¡
;

121 
xfs_agöo_t
 
	gagi‰ìcou¡
;

122 
xfs_fsblock_t
 *
	gbli°
;

123 
	gbli°_size
;

124 **
	gdbm≠
;

125 
dúhash_t
 **
	gdúhash
;

126 
	gîr‹
;

127 
__uöt64_t
 
	gfdblocks
;

128 
__uöt64_t
 
	g‰exã¡s
;

129 
__uöt64_t
 
	gicou¡
;

130 
__uöt64_t
 
	gi‰ì
;

131 
öod©a_t
 ***
	göod©a
;

132 
	göod©a_hash_size
;

133 
öod©a_t
 ***
	göom≠
;

134 
	gnÊag
;

135 
	gpÊag
;

136 
	gtÊag
;

137 
qd©a_t
 **
	gqpd©a
;

138 
	gqpdo
;

139 
qd©a_t
 **
	gqud©a
;

140 
	gqudo
;

141 
qd©a_t
 **
	gqgd©a
;

142 
	gqgdo
;

143 
	gsbvîsi⁄
;

144 
	gsbvî_îr
;

145 
	g£rious_îr‹
;

146 
	gsÊag
;

147 
xfs_sumöfo_t
 *
	gsumcompuã
;

148 
xfs_sumöfo_t
 *
	gsumfûe
;

149 c⁄° *
	gty≥«me
[] = {

179 
NULL


181 
	gvîbo£
;

183 
	#CHECK_BLIST
(
b
Ë(
bli°_size
 && 
	`check_bli°
(b))

	)

184 
	#CHECK_BLISTA
(
a
,
b
) \

185 (
bli°_size
 && 
	`check_bli°
(
	`XFS_AGB_TO_FSB
(
mp
, 
a
, 
b
)))

	)

187 (*
	tsˇn_lbåì_f_t
)(
	txfs_båì_block
 *
	tblock
,

188 
	tÀvñ
,

189 
	tdbm_t
 
	tty≥
,

190 
	txfs_fsblock_t
 
	tbno
,

191 
	töod©a_t
 *
	tid
,

192 
	txfs_rfsblock_t
 *
	ttŸd
,

193 
	txfs_rfsblock_t
 *
	ttŸi
,

194 
	txfs_exäum_t
 *
	t√x
,

195 
	tblkm≠_t
 **
	tblkm≠p
,

196 
	ti§oŸ
,

197 
	tty≤m_t
 
	tbty≥
);

199 (*
	tsˇn_sbåì_f_t
)(
	txfs_båì_block
 *
	tblock
,

200 
	tÀvñ
,

201 
	txfs_agf_t
 *
	tagf
,

202 
	txfs_agblock_t
 
	tbno
,

203 
	ti§oŸ
);

205 
	`add_bli°
(
xfs_fsblock_t
 
bno
);

206 
	`add_ûi°
(
xfs_öo_t
 
öo
);

207 
	`addlök_öode
(
öod©a_t
 *
id
);

208 
	`add«me_öode
(
öod©a_t
 *
id
, *
«me
, 
«mñí
);

209 
	`add∑ª¡_öode
(
öod©a_t
 *
id
, 
xfs_öo_t
 
∑ª¡
);

210 
	`blkít_≠≥nd
(
blkít_t
 **
íç
, 
xfs_fsblock_t
 
b
,

211 
xfs_exéí_t
 
c
);

212 
blkít_t
 *
	`blkít_√w
(
xfs_fûeoff_t
 
o
, 
xfs_fsblock_t
 
b
,

213 
xfs_exéí_t
 
c
);

214 
	`blkít_¥ïíd
(
blkít_t
 **
íç
, 
xfs_fsblock_t
 
b
,

215 
xfs_exéí_t
 
c
);

216 
blkm≠_t
 *
	`blkm≠_Æloc
(
xfs_exäum_t
);

217 
	`blkm≠_‰ì
(
blkm≠_t
 *
blkm≠
);

218 
xfs_fsblock_t
 
	`blkm≠_gë
(
blkm≠_t
 *
blkm≠
, 
xfs_fûeoff_t
 
o
);

219 
	`blkm≠_gën
(
blkm≠_t
 *
blkm≠
, 
xfs_fûeoff_t
 
o
, 
nb
,

220 
bm≠_ext_t
 **
bmµ
);

221 
	`blkm≠_grow
(
blkm≠_t
 **
blkm≠p
, 
blkít_t
 **
íç
,

222 
blkít_t
 *
√wít
);

223 
xfs_fûeoff_t
 
	`blkm≠_√xt_off
(
blkm≠_t
 *
blkm≠
, xfs_fûeoff_à
o
,

224 *
t
);

225 
	`blkm≠_£t_blk
(
blkm≠_t
 **
blkm≠p
, 
xfs_fûeoff_t
 
o
,

226 
xfs_fsblock_t
 
b
);

227 
	`blkm≠_£t_ext
(
blkm≠_t
 **
blkm≠p
, 
xfs_fûeoff_t
 
o
,

228 
xfs_fsblock_t
 
b
, 
xfs_exéí_t
 
c
);

229 
	`blkm≠_shrök
(
blkm≠_t
 *
blkm≠
, 
blkít_t
 **
íç
);

230 
	`block‰ì_f
(
¨gc
, **
¨gv
);

231 
	`blockgë_f
(
¨gc
, **
¨gv
);

232 
	`blockåash_f
(
¨gc
, **
¨gv
);

233 
	`blocku£_f
(
¨gc
, **
¨gv
);

234 
	`check_bli°
(
xfs_fsblock_t
 
bno
);

235 
	`check_dbm≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

236 
xfs_exéí_t
 
Àn
, 
dbm_t
 
ty≥
,

237 
ign‹e_ªÊök
);

238 
	`check_öom≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

239 
xfs_exéí_t
 
Àn
, 
xfs_öo_t
 
c_öo
);

240 
	`check_lökcou¡s
(
xfs_agnumbî_t
 
agno
);

241 
	`check_ønge
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

242 
xfs_exéí_t
 
Àn
);

243 
	`check_rdbm≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

244 
dbm_t
 
ty≥
);

245 
	`check_röom≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

246 
xfs_öo_t
 
c_öo
);

247 
	`check_roŸdú
();

248 
	`check_º™ge
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
);

249 
	`check_£t_dbm≠
(
xfs_agnumbî_t
 
agno
,

250 
xfs_agblock_t
 
agbno
, 
xfs_exéí_t
 
Àn
,

251 
dbm_t
 
ty≥1
, dbm_à
ty≥2
,

252 
xfs_agnumbî_t
 
c_agno
,

253 
xfs_agblock_t
 
c_agbno
);

254 
	`check_£t_rdbm≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

255 
dbm_t
 
ty≥1
, dbm_à
ty≥2
);

256 
	`check_summ¨y
();

257 
	`checknŸ_dbm≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

258 
xfs_exéí_t
 
Àn
, 
ty≥mask
);

259 
	`checknŸ_rdbm≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

260 
ty≥mask
);

261 
	`dú_hash_add
(
xfs_dahash_t
 
hash
,

262 
xfs_dú2_d©≠å_t
 
addr
);

263 
	`dú_hash_check
(
öod©a_t
 *
id
, 
v
);

264 
	`dú_hash_d⁄e
();

265 
	`dú_hash_öô
();

266 
	`dú_hash_£e
(
xfs_dahash_t
 
hash
,

267 
xfs_dú2_d©≠å_t
 
addr
);

268 
öod©a_t
 *
	`föd_öode
(
xfs_öo_t
 
öo
, 
add
);

269 
	`‰ì_öod©a
(
xfs_agnumbî_t
 
agno
);

270 
	`öô
(
¨gc
, **
¨gv
);

271 *
	`öode_«me
(
xfs_öo_t
 
öo
, 
öod©a_t
 **
ùp
);

272 
	`ncheck_f
(
¨gc
, **
¨gv
);

273 *
	`¥ïíd_∑th
(*
ﬁd∑th
, *
∑ª¡
);

274 
xfs_öo_t
 
	`¥o˚ss_block_dú_v2
(
blkm≠_t
 *
blkm≠
, *
dŸ
,

275 *
dŸdŸ
, 
öod©a_t
 *
id
);

276 
	`¥o˚ss_bmbt_ª˛i°
(
xfs_bmbt_ªc_t
 *
Ω
, 
numªcs
,

277 
dbm_t
 
ty≥
, 
öod©a_t
 *
id
,

278 
xfs_rfsblock_t
 *
tŸ
,

279 
blkm≠_t
 **
blkm≠p
);

280 
	`¥o˚ss_btöode
(
öod©a_t
 *
id
, 
xfs_döode_t
 *
dù
,

281 
dbm_t
 
ty≥
, 
xfs_rfsblock_t
 *
tŸd
,

282 
xfs_rfsblock_t
 *
tŸi
, 
xfs_exäum_t
 *
√x
,

283 
blkm≠_t
 **
blkm≠p
, 
whichf‹k
);

284 
xfs_öo_t
 
	`¥o˚ss_d©a_dú_v2
(*
dŸ
, *
dŸdŸ
,

285 
öod©a_t
 *
id
, 
v
,

286 
xfs_dablk_t
 
dabno
,

287 
‰ìèb_t
 **
‰ìèbp
);

288 
xfs_dú2_d©a_‰ì_t
 *
	`¥o˚ss_d©a_dú_v2_‰ìföd
(

289 
xfs_dú2_d©a_hdr
 *
d©a
,

290 
xfs_dú2_d©a_unu£d
 *
dup
);

291 
	`¥o˚ss_dú
(
xfs_döode_t
 *
dù
, 
blkm≠_t
 *
blkm≠
,

292 
öod©a_t
 *
id
);

293 
	`¥o˚ss_dú_v2
(
xfs_döode_t
 *
dù
, 
blkm≠_t
 *
blkm≠
,

294 *
dŸ
, *
dŸdŸ
, 
öod©a_t
 *
id
,

295 
xfs_öo_t
 *
∑ª¡
);

296 
	`¥o˚ss_exöode
(
öod©a_t
 *
id
, 
xfs_döode_t
 *
dù
,

297 
dbm_t
 
ty≥
, 
xfs_rfsblock_t
 *
tŸd
,

298 
xfs_rfsblock_t
 *
tŸi
, 
xfs_exäum_t
 *
√x
,

299 
blkm≠_t
 **
blkm≠p
, 
whichf‹k
);

300 
	`¥o˚ss_öode
(
xfs_agf_t
 *
agf
, 
xfs_agöo_t
 
agöo
,

301 
xfs_döode_t
 *
dù
, 
is‰ì
);

302 
	`¥o˚ss_l˛öode
(
öod©a_t
 *
id
, 
xfs_döode_t
 *
dù
,

303 
dbm_t
 
ty≥
, 
xfs_rfsblock_t
 *
tŸd
,

304 
xfs_rfsblock_t
 *
tŸi
, 
xfs_exäum_t
 *
√x
,

305 
blkm≠_t
 **
blkm≠p
, 
whichf‹k
);

306 
xfs_öo_t
 
	`¥o˚ss_Àaf_node_dú_v2
(
blkm≠_t
 *
blkm≠
, *
dŸ
,

307 *
dŸdŸ
, 
öod©a_t
 *
id
,

308 
xfs_fsize_t
 
dúsize
);

309 
	`¥o˚ss_Àaf_node_dú_v2_‰ì
(
öod©a_t
 *
id
, 
v
,

310 
xfs_dablk_t
 
dbno
,

311 
‰ìèb_t
 *
‰ìèb
);

312 
	`¥o˚ss_Àaf_node_dú_v2_öt
(
öod©a_t
 *
id
, 
v
,

313 
xfs_dablk_t
 
dbno
,

314 
‰ìèb_t
 *
‰ìèb
);

315 
	`¥o˚ss_quŸa
(
qty≥_t
 
qty≥
, 
öod©a_t
 *
id
,

316 
blkm≠_t
 *
blkm≠
);

317 
	`¥o˚ss_πbôm≠
(
blkm≠_t
 *
blkm≠
);

318 
	`¥o˚ss_πsumm¨y
(
blkm≠_t
 *
blkm≠
);

319 
xfs_öo_t
 
	`¥o˚ss_sf_dú_v2
(
xfs_döode_t
 *
dù
, *
dŸ
,

320 *
dŸdŸ
, 
öod©a_t
 *
id
);

321 
	`quŸa_add
(
xfs_dqid_t
 *
p
, xfs_dqid_à*
g
, xfs_dqid_à*
u
,

322 
dq
, 
xfs_q˙t_t
 
bc
, xfs_q˙t_à
ic
,

323 
xfs_q˙t_t
 
rc
);

324 
	`quŸa_add1
(
qd©a_t
 **
qt
, 
xfs_dqid_t
 
id
, 
dq
,

325 
xfs_q˙t_t
 
bc
, xfs_q˙t_à
ic
,

326 
xfs_q˙t_t
 
rc
);

327 
	`quŸa_check
(*
s
, 
qd©a_t
 **
qt
);

328 
	`quŸa_öô
();

329 
	`sˇn_ag
(
xfs_agnumbî_t
 
agno
);

330 
	`sˇn_‰ìli°
(
xfs_agf_t
 *
agf
);

331 
	`sˇn_lbåì
(
xfs_fsblock_t
 
roŸ
, 
∆evñs
,

332 
sˇn_lbåì_f_t
 
func
, 
dbm_t
 
ty≥
,

333 
öod©a_t
 *
id
, 
xfs_rfsblock_t
 *
tŸd
,

334 
xfs_rfsblock_t
 *
tŸi
, 
xfs_exäum_t
 *
√x
,

335 
blkm≠_t
 **
blkm≠p
, 
i§oŸ
,

336 
ty≤m_t
 
bty≥
);

337 
	`sˇn_sbåì
(
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
roŸ
,

338 
∆evñs
, 
i§oŸ
,

339 
sˇn_sbåì_f_t
 
func
, 
ty≤m_t
 
bty≥
);

340 
	`sˇnfunc_bm≠
(
xfs_båì_block
 *
block
,

341 
Àvñ
, 
dbm_t
 
ty≥
, 
xfs_fsblock_t
 
bno
,

342 
öod©a_t
 *
id
, 
xfs_rfsblock_t
 *
tŸd
,

343 
xfs_rfsblock_t
 *
tŸi
, 
xfs_exäum_t
 *
√x
,

344 
blkm≠_t
 **
blkm≠p
, 
i§oŸ
,

345 
ty≤m_t
 
bty≥
);

346 
	`sˇnfunc_bno
(
xfs_båì_block
 *
block
, 
Àvñ
,

347 
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
bno
,

348 
i§oŸ
);

349 
	`sˇnfunc_˙t
(
xfs_båì_block
 *
block
, 
Àvñ
,

350 
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
bno
,

351 
i§oŸ
);

352 
	`sˇnfunc_öo
(
xfs_båì_block
 *
block
, 
Àvñ
,

353 
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
bno
,

354 
i§oŸ
);

355 
	`sˇnfunc_föo
(
xfs_båì_block
 *
block
, 
Àvñ
,

356 
xfs_agf
 *
agf
, 
xfs_agblock_t
 
bno
,

357 
i§oŸ
);

358 
	`sˇnfunc_rm≠
(
xfs_båì_block
 *
block
, 
Àvñ
,

359 
xfs_agf
 *
agf
, 
xfs_agblock_t
 
bno
,

360 
i§oŸ
);

361 
	`sˇnfunc_ªf˙t
(
xfs_båì_block
 *
block
, 
Àvñ
,

362 
xfs_agf
 *
agf
, 
xfs_agblock_t
 
bno
,

363 
i§oŸ
);

364 
	`£t_dbm≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

365 
xfs_exéí_t
 
Àn
, 
dbm_t
 
ty≥
,

366 
xfs_agnumbî_t
 
c_agno
, 
xfs_agblock_t
 
c_agbno
);

367 
	`£t_öom≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

368 
xfs_exéí_t
 
Àn
, 
öod©a_t
 *
id
);

369 
	`£t_rdbm≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

370 
dbm_t
 
ty≥
);

371 
	`£t_röom≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

372 
öod©a_t
 *
id
);

373 
	`£éök_öode
(
öod©a_t
 *
id
, 
∆ök_t
 
∆ök
, 
isdú
,

374 
£curôy
);

376 c⁄° 
cmdöfo_t
 
block‰ì_cmd
 =

377 { "block‰ì", 
NULL
, 
block‰ì_f
, 0, 0, 0,

378 
NULL
, 
	`N_
("‰ì block ußgêöf‹m©i⁄"), NULL 
	}
};

379 c⁄° 
cmdöfo_t
 
	gblockgë_cmd
 =

380 { "blockgë", "check", 
blockgë_f
, 0, -1, 0,

381 
N_
("[-s|-v] [-n] [-t] [-b bno]... [-i ino] ..."),

382 
N_
("gë block ußgê™d check c⁄si°ícy"), 
NULL
 };

383 c⁄° 
cmdöfo_t
 
	gblockåash_cmd
 =

384 { "blockåash", 
NULL
, 
blockåash_f
, 0, -1, 0,

385 
N_
("[-n count] [-x minlen] [-y maxlen] [-s seed] [-0123] [-tÅype] ..."),

386 
N_
("åashÑ™domly sñe˘ed block(s)"), 
NULL
 };

387 c⁄° 
cmdöfo_t
 
	gblocku£_cmd
 =

388 { "blocku£", 
NULL
, 
blocku£_f
, 0, 3, 0,

389 
N_
("[-n] [-c blockcount]"),

390 
N_
("¥öàußgêf‹ cuºíàblock(s)"), 
NULL
 };

391 c⁄° 
cmdöfo_t
 
	gncheck_cmd
 =

392 { "ncheck", 
NULL
, 
ncheck_f
, 0, -1, 0,

393 
N_
("[-s] [-i ino] ..."),

394 
N_
("¥öàöode-«mê∑ús"), 
NULL
 };

398 
	$add_bli°
(

399 
xfs_fsblock_t
 
bno
)

401 
bli°_size
++;

402 
bli°
 = 
	`xªÆloc
(bli°, 
bli°_size
 * (
bno
));

403 
bli°
[
bli°_size
 - 1] = 
bno
;

404 
	}
}

407 
	$add_ûi°
(

408 
xfs_öo_t
 
öo
)

410 
öod©a_t
 *
id
;

412 
id
 = 
	`föd_öode
(
öo
, 1);

413 i‡(
id
 =
NULL
) {

414 
	`db¥ötf
(
	`_
("-ò%Œd bad inodênumbî\n"), 
öo
);

417 
id
->
ûi°
 = 1;

418 
	}
}

421 
	$addlök_öode
(

422 
öod©a_t
 *
id
)

424 
id
->
lök_add
++;

425 i‡(
vîbo£
 || 
id
->
ûi°
)

426 
	`db¥ötf
(
	`_
("öodê%ŒdáddÜök,Çow %u\n"), 
id
->
öo
,

427 
id
->
lök_add
);

428 
	}
}

431 
	$add«me_öode
(

432 
öod©a_t
 *
id
,

433 *
«me
,

434 
«mñí
)

436 i‡(!
nÊag
 || 
id
->
«me
)

438 
id
->
«me
 = 
	`xmÆloc
(
«mñí
 + 1);

439 
	`mem˝y
(
id
->
«me
,Çame, 
«mñí
);

440 
id
->
«me
[
«mñí
] = '\0';

441 
	}
}

444 
	$add∑ª¡_öode
(

445 
öod©a_t
 *
id
,

446 
xfs_öo_t
 
∑ª¡
)

448 
öod©a_t
 *
pid
;

450 
pid
 = 
	`föd_öode
(
∑ª¡
, 1);

451 
id
->
∑ª¡
 = 
pid
;

452 i‡(
vîbo£
 || 
id
->
ûi°
 || (
pid
 &&Öid->ilist))

453 
	`db¥ötf
(
	`_
("öodê%ŒdÖ¨íà%Œd\n"), 
id
->
öo
, 
∑ª¡
);

454 
	}
}

457 
	$blkít_≠≥nd
(

458 
blkít_t
 **
íç
,

459 
xfs_fsblock_t
 
b
,

460 
xfs_exéí_t
 
c
)

462 
blkít_t
 *
ít
;

463 
i
;

465 
ít
 = *
íç
;

466 *
íç
 = 
ít
 = 
	`xªÆloc
”¡, 
	`BLKENT_SIZE
(
c
 +É¡->
nblks
));

467 
i
 = 0; i < 
c
; i++)

468 
ít
->
blks
[ít->
nblks
 + 
i
] = 
b
 + i;

469 
ít
->
nblks
 +
c
;

470 
	}
}

472 
blkít_t
 *

473 
	$blkít_√w
(

474 
xfs_fûeoff_t
 
o
,

475 
xfs_fsblock_t
 
b
,

476 
xfs_exéí_t
 
c
)

478 
blkít_t
 *
ít
;

479 
i
;

481 
ít
 = 
	`xmÆloc
(
	`BLKENT_SIZE
(
c
));

482 
ít
->
nblks
 = 
c
;

483 
ít
->
°¨toff
 = 
o
;

484 
i
 = 0; i < 
c
; i++)

485 
ít
->
blks
[
i
] = 
b
 + i;

486  
ít
;

487 
	}
}

490 
	$blkít_¥ïíd
(

491 
blkít_t
 **
íç
,

492 
xfs_fsblock_t
 
b
,

493 
xfs_exéí_t
 
c
)

495 
i
;

496 
blkít_t
 *
√wít
;

497 
blkít_t
 *
ﬁdít
;

499 
ﬁdít
 = *
íç
;

500 
√wít
 = 
	`xmÆloc
(
	`BLKENT_SIZE
(
ﬁdít
->
nblks
 + 
c
));

501 
√wít
->
nblks
 = 
ﬁdít
->nblk†+ 
c
;

502 
√wít
->
°¨toff
 = 
ﬁdít
->°¨tof‡- 
c
;

503 
i
 = 0; i < 
c
; i++)

504 
√wít
->
blks
[
i
] = 
b
 + 
c
;

505 ; 
i
 < 
ﬁdít
->
nblks
 + 
c
; i++)

506 
√wít
->
blks
[
i
] = 
ﬁdít
->blks[ò- 
c
];

507 
	`x‰ì
(
ﬁdít
);

508 *
íç
 = 
√wít
;

509 
	}
}

511 
blkm≠_t
 *

512 
	$blkm≠_Æloc
(

513 
xfs_exäum_t
 
√x
)

515 
blkm≠_t
 *
blkm≠
;

517 i‡(
√x
 < 1)

518 
√x
 = 1;

519 
blkm≠
 = 
	`xmÆloc
(
	`BLKMAP_SIZE
(
√x
));

520 
blkm≠
->
«íts
 = 
√x
;

521 
blkm≠
->
√¡s
 = 0;

522  
blkm≠
;

523 
	}
}

526 
	$blkm≠_‰ì
(

527 
blkm≠_t
 *
blkm≠
)

529 
blkít_t
 **
íç
;

530 
xfs_exäum_t
 
i
;

532 
i
 = 0, 
íç
 = 
blkm≠
->
íts
; i < blkm≠->
√¡s
; i++,Éntp++)

533 
	`x‰ì
(*
íç
);

534 
	`x‰ì
(
blkm≠
);

535 
	}
}

537 
xfs_fsblock_t


538 
	$blkm≠_gë
(

539 
blkm≠_t
 *
blkm≠
,

540 
xfs_fûeoff_t
 
o
)

542 
blkít_t
 *
ít
;

543 
blkít_t
 **
íç
;

544 
i
;

546 
i
 = 0, 
íç
 = 
blkm≠
->
íts
; i < blkm≠->
√¡s
; i++,Éntp++) {

547 
ít
 = *
íç
;

548 i‡(
o
 >
ít
->
°¨toff
 && o <É¡->°¨tof‡+É¡->
nblks
)

549  
ít
->
blks
[
o
 -É¡->
°¨toff
];

551  
NULLFSBLOCK
;

552 
	}
}

555 
	$blkm≠_gën
(

556 
blkm≠_t
 *
blkm≠
,

557 
xfs_fûeoff_t
 
o
,

558 
nb
,

559 
bm≠_ext_t
 **
bmµ
)

561 
bm≠_ext_t
 *
bmp
;

562 
blkít_t
 *
ít
;

563 
xfs_fûeoff_t
 
íto
;

564 
blkít_t
 **
íç
;

565 
i
;

566 
√x
;

568 
i
 = 
√x
 = 0, 
bmp
 = 
NULL
, 
íç
 = 
blkm≠
->
íts
;

569 
i
 < 
blkm≠
->
√¡s
;

570 
i
++, 
íç
++) {

571 
ít
 = *
íç
;

572 i‡(
ít
->
°¨toff
 >
o
 + 
nb
)

574 i‡(
ít
->
°¨toff
 +É¡->
nblks
 <
o
)

576 
íto
 = 
ít
->
°¨toff
;

577 
íto
 < 
ít
->
°¨toff
 +É¡->
nblks
 &&É¡ÿ< 
o
 + 
nb
;

578 
íto
++) {

579 i‡(
íto
 < 
o
)

581 i‡(
bmp
 &&

582 
bmp
[
√x
 - 1].
°¨toff
 + bmp[√x - 1].
blockcou¡
 ==

583 
íto
 &&

584 
bmp
[
√x
 - 1].
°¨tblock
 + bmp[√x - 1].
blockcou¡
 ==

585 
ít
->
blks
[
íto
 -É¡->
°¨toff
])

586 
bmp
[
√x
 - 1].
blockcou¡
++;

588 
bmp
 = 
	`ªÆloc
(bmp, ++
√x
 * (*bmp));

589 
bmp
[
√x
 - 1].
°¨toff
 = 
íto
;

590 
bmp
[
√x
 - 1].
°¨tblock
 =

591 
ít
->
blks
[
íto
 -É¡->
°¨toff
];

592 
bmp
[
√x
 - 1].
blockcou¡
 = 1;

593 
bmp
[
√x
 - 1].
Êag
 = 0;

597 *
bmµ
 = 
bmp
;

598  
√x
;

599 
	}
}

602 
	$blkm≠_grow
(

603 
blkm≠_t
 **
blkm≠p
,

604 
blkít_t
 **
íç
,

605 
blkít_t
 *
√wít
)

607 
blkm≠_t
 *
blkm≠
;

608 
i
;

609 
idx
;

611 
blkm≠
 = *
blkm≠p
;

612 
idx
 = ()(
íç
 - 
blkm≠
->
íts
);

613 i‡(
blkm≠
->
«íts
 =blkm≠->
√¡s
) {

614 
blkm≠
 = 
	`xªÆloc
(blkm≠, 
	`BLKMAP_SIZE
(blkm≠->
√¡s
 + 1));

615 *
blkm≠p
 = 
blkm≠
;

616 
blkm≠
->
«íts
++;

618 
i
 = 
blkm≠
->
√¡s
; i > 
idx
; i--)

619 
blkm≠
->
íts
[
i
] = blkmap->ents[i - 1];

620 
blkm≠
->
íts
[
idx
] = 
√wít
;

621 
blkm≠
->
√¡s
++;

622 
	}
}

624 
xfs_fûeoff_t


625 
	$blkm≠_œ°_off
(

626 
blkm≠_t
 *
blkm≠
)

628 
blkít_t
 *
ít
;

630 i‡(!
blkm≠
->
√¡s
)

631  
NULLFILEOFF
;

632 
ít
 = 
blkm≠
->
íts
[blkm≠->
√¡s
 - 1];

633  
ít
->
°¨toff
 +É¡->
nblks
;

634 
	}
}

636 
xfs_fûeoff_t


637 
	$blkm≠_√xt_off
(

638 
blkm≠_t
 *
blkm≠
,

639 
xfs_fûeoff_t
 
o
,

640 *
t
)

642 
blkít_t
 *
ít
;

643 
blkít_t
 **
íç
;

645 i‡(!
blkm≠
->
√¡s
)

646  
NULLFILEOFF
;

647 i‡(
o
 =
NULLFILEOFF
) {

648 *
t
 = 0;

649 
ít
 = 
blkm≠
->
íts
[0];

650  
ít
->
°¨toff
;

652 
íç
 = &
blkm≠
->
íts
[*
t
];

653 
ít
 = *
íç
;

654 i‡(
o
 < 
ít
->
°¨toff
 +É¡->
nblks
 - 1)

655  
o
 + 1;

656 
íç
++;

657 i‡(
íç
 >&
blkm≠
->
íts
[blkm≠->
√¡s
])

658  
NULLFILEOFF
;

659 (*
t
)++;

660 
ít
 = *
íç
;

661  
ít
->
°¨toff
;

662 
	}
}

665 
	$blkm≠_£t_blk
(

666 
blkm≠_t
 **
blkm≠p
,

667 
xfs_fûeoff_t
 
o
,

668 
xfs_fsblock_t
 
b
)

670 
blkm≠_t
 *
blkm≠
;

671 
blkít_t
 *
ít
;

672 
blkít_t
 **
íç
;

673 
blkít_t
 *
√xã¡
;

675 
blkm≠
 = *
blkm≠p
;

676 
íç
 = 
blkm≠
->
íts
;É¡∞< &blkm≠->íts[blkm≠->
√¡s
];Éntp++) {

677 
ít
 = *
íç
;

678 i‡(
o
 < 
ít
->
°¨toff
 - 1) {

679 
ít
 = 
	`blkít_√w
(
o
, 
b
, 1);

680 
	`blkm≠_grow
(
blkm≠p
, 
íç
, 
ít
);

683 i‡(
o
 =
ít
->
°¨toff
 - 1) {

684 
	`blkít_¥ïíd
(
íç
, 
b
, 1);

687 i‡(
o
 >
ít
->
°¨toff
 && o <É¡->°¨tof‡+É¡->
nblks
) {

688 
ít
->
blks
[
o
 -É¡->
°¨toff
] = 
b
;

691 i‡(
o
 > 
ít
->
°¨toff
 +É¡->
nblks
)

693 
	`blkít_≠≥nd
(
íç
, 
b
, 1);

694 i‡(
íç
 =&
blkm≠
->
íts
[blkm≠->
√¡s
 - 1])

696 
ít
 = *
íç
;

697 
√xã¡
 = 
íç
[1];

698 i‡(
ít
->
°¨toff
 +É¡->
nblks
 < 
√xã¡
->startoff)

700 
	`blkít_≠≥nd
(
íç
, 
√xã¡
->
blks
[0],Çexã¡->
nblks
);

701 
	`blkm≠_shrök
(
blkm≠
, &
íç
[1]);

704 
ít
 = 
	`blkít_√w
(
o
, 
b
, 1);

705 
	`blkm≠_grow
(
blkm≠p
, 
íç
, 
ít
);

706 
	}
}

709 
	$blkm≠_£t_ext
(

710 
blkm≠_t
 **
blkm≠p
,

711 
xfs_fûeoff_t
 
o
,

712 
xfs_fsblock_t
 
b
,

713 
xfs_exéí_t
 
c
)

715 
blkm≠_t
 *
blkm≠
;

716 
blkít_t
 *
ít
;

717 
blkít_t
 **
íç
;

718 
xfs_exäum_t
 
i
;

720 
blkm≠
 = *
blkm≠p
;

721 i‡(!
blkm≠
->
√¡s
) {

722 
blkm≠
->
íts
[0] = 
	`blkít_√w
(
o
, 
b
, 
c
);

723 
blkm≠
->
√¡s
 = 1;

726 
íç
 = &
blkm≠
->
íts
[blkm≠->
√¡s
 - 1];

727 
ít
 = *
íç
;

728 i‡(
ít
->
°¨toff
 +É¡->
nblks
 =
o
) {

729 
	`blkít_≠≥nd
(
íç
, 
b
, 
c
);

732 i‡(
ít
->
°¨toff
 +É¡->
nblks
 < 
o
) {

733 
ít
 = 
	`blkít_√w
(
o
, 
b
, 
c
);

734 
	`blkm≠_grow
(
blkm≠p
, &
blkm≠
->
íts
[blkm≠->
√¡s
], 
ít
);

737 
i
 = 0; i < 
c
; i++)

738 
	`blkm≠_£t_blk
(
blkm≠p
, 
o
 + 
i
, 
b
 + i);

739 
	}
}

742 
	$blkm≠_shrök
(

743 
blkm≠_t
 *
blkm≠
,

744 
blkít_t
 **
íç
)

746 
i
;

747 
idx
;

749 
	`x‰ì
(*
íç
);

750 
idx
 = ()(
íç
 - 
blkm≠
->
íts
);

751 
i
 = 
idx
 + 1; i < 
blkm≠
->
√¡s
; i++)

752 
blkm≠
->
íts
[
i
] = blkmap->ents[i - 1];

753 
blkm≠
->
√¡s
--;

754 
	}
}

758 
	$block‰ì_f
(

759 
¨gc
,

760 **
¨gv
)

762 
xfs_agnumbî_t
 
c
;

763 
π
;

765 i‡(!
dbm≠
) {

766 
	`db¥ötf
(
	`_
("block usage informationÇotállocated\n"));

769 
π
 = 
mp
->
m_sb
.
sb_ªxã¡s
 != 0;

770 
c
 = 0; c < 
mp
->
m_sb
.
sb_agcou¡
; c++) {

771 
	`x‰ì
(
dbm≠
[
c
]);

772 
	`x‰ì
(
öom≠
[
c
]);

773 
	`‰ì_öod©a
(
c
);

775 i‡(
π
) {

776 
	`x‰ì
(
dbm≠
[
c
]);

777 
	`x‰ì
(
öom≠
[
c
]);

778 
	`x‰ì
(
sumcompuã
);

779 
	`x‰ì
(
sumfûe
);

780 
sumcompuã
 = 
sumfûe
 = 
NULL
;

782 
	`x‰ì
(
dbm≠
);

783 
	`x‰ì
(
öom≠
);

784 
	`x‰ì
(
öod©a
);

785 
dbm≠
 = 
NULL
;

786 
öom≠
 = 
NULL
;

787 
öod©a
 = 
NULL
;

789 
	}
}

795 
	$blockgë_f
(

796 
¨gc
,

797 **
¨gv
)

799 
xfs_agnumbî_t
 
agno
;

800 
ﬁd¥efix
;

801 
sbyñl
;

803 i‡(
dbm≠
) {

804 
	`db¥ötf
(
	`_
("already have block usage information\n"));

808 i‡(!
	`öô
(
¨gc
, 
¨gv
)) {

809 i‡(
£rious_îr‹
)

810 
exôcode
 = 3;

812 
exôcode
 = 1;

815 
ﬁd¥efix
 = 
db¥efix
;

816 
db¥efix
 |
pÊag
;

817 
agno
 = 0, 
sbyñl
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

818 
	`sˇn_ag
(
agno
);

819 i‡(
sbvî_îr
 > 4 && !
sbyñl
 && sbvî_î∏>
agno
) {

820 
sbyñl
 = 1;

821 
	`db¥ötf
(
	`_
("WARNING:Åhis may beáÇewer XFS "

825 i‡(
bli°_size
) {

826 
	`x‰ì
(
bli°
);

827 
bli°
 = 
NULL
;

828 
bli°_size
 = 0;

830 i‡(
£rious_îr‹
) {

831 
exôcode
 = 2;

832 
db¥efix
 = 
ﬁd¥efix
;

835 
	`check_roŸdú
();

841 i‡(!
tÊag
) {

842 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++)

843 
	`checknŸ_dbm≠
(
agno
, 0, 
mp
->
m_sb
.
sb_agblocks
,

844 (1 << 
DBM_UNKNOWN
Ë| (1 << 
DBM_FREE1
));

846 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++)

847 
	`check_lökcou¡s
(
agno
);

848 i‡(
mp
->
m_sb
.
sb_rblocks
) {

849 
	`checknŸ_rdbm≠
(0,

850 (
xfs_exéí_t
)(
mp
->
m_sb
.
sb_ªxã¡s
 *

851 
mp
->
m_sb
.
sb_ªxtsize
),

852 1 << 
DBM_UNKNOWN
);

853 
	`check_summ¨y
();

855 i‡(
mp
->
m_sb
.
sb_icou¡
 !
icou¡
) {

856 i‡(!
sÊag
)

857 
	`db¥ötf
(
	`_
("sb_icount %lld, counted %lld\n"),

858 
mp
->
m_sb
.
sb_icou¡
, 
icou¡
);

859 
îr‹
++;

861 i‡(
mp
->
m_sb
.
sb_i‰ì
 !
i‰ì
) {

862 i‡(!
sÊag
)

863 
	`db¥ötf
(
	`_
("sb_ifree %lld, counted %lld\n"),

864 
mp
->
m_sb
.
sb_i‰ì
, 
i‰ì
);

865 
îr‹
++;

867 i‡(
mp
->
m_sb
.
sb_fdblocks
 !
fdblocks
) {

868 i‡(!
sÊag
)

869 
	`db¥ötf
(
	`_
("sb_fdblocks %lld, counted %lld\n"),

870 
mp
->
m_sb
.
sb_fdblocks
, 
fdblocks
);

871 
îr‹
++;

873 i‡(
œzycou¡
 && 
mp
->
m_sb
.
sb_fdblocks
 !
agf_aggr_‰ìblks
) {

874 i‡(!
sÊag
)

875 
	`db¥ötf
(
	`_
("sb_fdblocks %lld,ággregate AGF count %lld\n"),

876 
mp
->
m_sb
.
sb_fdblocks
, 
agf_aggr_‰ìblks
);

877 
îr‹
++;

879 i‡(
mp
->
m_sb
.
sb_‰exã¡s
 !
‰exã¡s
) {

880 i‡(!
sÊag
)

881 
	`db¥ötf
(
	`_
("sb_frextents %lld, counted %lld\n"),

882 
mp
->
m_sb
.
sb_‰exã¡s
, 
‰exã¡s
);

883 
îr‹
++;

885 i‡(
mp
->
m_sb
.
sb_bad_„©uªs2
 != 0 &&

886 
mp
->
m_sb
.
sb_bad_„©uªs2
 !mp->m_sb.
sb_„©uªs2
) {

887 i‡(!
sÊag
)

888 
	`db¥ötf
(
	`_
("sb_features2 (0x%x)Çot sameás "

890 
mp
->
m_sb
.
sb_„©uªs2
,

891 
mp
->
m_sb
.
sb_bad_„©uªs2
);

892 
îr‹
++;

894 i‡((
sbvîsi⁄
 & 
XFS_SB_VERSION_ATTRBIT
) &&

895 !
	`xfs_sb_vîsi⁄_haßâr
(&
mp
->
m_sb
)) {

896 i‡(!
sÊag
)

897 
	`db¥ötf
(
	`_
("sb versionnum missingáttr bit %x\n"),

898 
XFS_SB_VERSION_ATTRBIT
);

899 
îr‹
++;

901 i‡((
sbvîsi⁄
 & 
XFS_SB_VERSION_QUOTABIT
) &&

902 !
	`xfs_sb_vîsi⁄_hasquŸa
(&
mp
->
m_sb
)) {

903 i‡(!
sÊag
)

904 
	`db¥ötf
(
	`_
("sb versionnum missing quota bit %x\n"),

905 
XFS_SB_VERSION_QUOTABIT
);

906 
îr‹
++;

908 i‡(!(
sbvîsi⁄
 & 
XFS_SB_VERSION_ALIGNBIT
) &&

909 
	`xfs_sb_vîsi⁄_haßlign
(&
mp
->
m_sb
)) {

910 i‡(!
sÊag
)

911 
	`db¥ötf
(
	`_
("sb versionnumÉxtraálign bit %x\n"),

912 
XFS_SB_VERSION_ALIGNBIT
);

913 
îr‹
++;

915 i‡(
qudo
)

916 
	`quŸa_check
("u£r", 
qud©a
);

917 i‡(
qpdo
)

918 
	`quŸa_check
("¥oje˘", 
qpd©a
);

919 i‡(
qgdo
)

920 
	`quŸa_check
("group", 
qgd©a
);

921 i‡(
sbvî_îr
 > 
mp
->
m_sb
.
sb_agcou¡
 / 2)

922 
	`db¥ötf
(
	`_
("WARNING:Åhis may beáÇewer XFS filesystem.\n"));

923 i‡(
îr‹
)

924 
exôcode
 = 3;

925 
db¥efix
 = 
ﬁd¥efix
;

927 
	}
}

929 
	s…ab
 {

930 
	mmö
;

931 
	mmax
;

932 } 
	t…ab_t
;

935 
	$blockåash_b
(

936 
bô_off£t
,

937 
dbm_t
 
ty≥
,

938 
…ab_t
 *
…abp
,

939 
mode
)

941 
bô
;

942 
bôno
;

943 *
buf
;

944 
byã
;

945 
Àn
;

946 
mask
;

947 
√wbô
;

948 c⁄° 
xfs_buf_›s
 *
°ashed_›s
;

949 *
mode°r
[] = {

950 
	`N_
("zeroed"), N_("set"), N_("flipped"), N_("randomized")

952 
xfs_agnumbî_t
 
agno
;

953 
xfs_agblock_t
 
agbno
;

955 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
	`XFS_DADDR_TO_FSB
(mp, 
iocur_t›
->
bb
));

956 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
	`XFS_DADDR_TO_FSB
(mp, 
iocur_t›
->
bb
));

957 i‡(
iocur_t›
->
Àn
 == 0) {

958 
	`db¥ötf
(
	`_
("zero-length block %u/%u bufferÅoÅrash??\n"),

959 
agno
, 
agbno
);

962 
Àn
 = ()((
	`øndom
(Ë% (
…abp
->
max
 -Üèbp->
mö
 + 1)) +Ütabp->min);

967 i‡(
bô_off£t
 < 0) {

968 
bô_off£t
 = -(bit_offset + 1);

969 
bô_off£t
 +()(
	`øndom
(Ë% ()((
iocur_t›
->
Àn
 - bô_off£tË* 
NBBY
));

971 i‡(
bô_off£t
 + 
Àn
 >
iocur_t›
->À¿* 
NBBY
)

972 
Àn
 = (
iocur_t›
->À¿* 
NBBY
Ë- 
bô_off£t
;

973 
√wbô
 = 0;

974 
°ashed_›s
 = 
iocur_t›
->
bp
->
b_›s
;

975 
iocur_t›
->
bp
->
b_›s
 = 
NULL
;

976 i‡((
buf
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

977 
	`db¥ötf
(
	`_
("ˇn'àªad block %u/%u f‹Åøshög\n"), 
agno
, 
agbno
);

980 
bôno
 = 0; bônÿ< 
Àn
; bitno++) {

981 
bô
 = (
bô_off£t
 + 
bôno
Ë% (
mp
->
m_sb
.
sb_blocksize
 * 
NBBY
);

982 
byã
 = 
bô
 / 
NBBY
;

983 
bô
 %
NBBY
;

984 
mask
 = 1 << 
bô
;

985 
mode
) {

987 
√wbô
 = 0;

990 
√wbô
 = 1;

993 
√wbô
 = (
buf
[
byã
] & 
mask
) == 0;

996 
√wbô
 = ()
	`øndom
() & 1;

999 i‡(
√wbô
)

1000 
buf
[
byã
] |
mask
;

1002 
buf
[
byã
] &~
mask
;

1004 
	`wrôe_cur
();

1005 
iocur_t›
->
bp
->
b_›s
 = 
°ashed_›s
;

1006 
	`¥ötf
(
	`_
("blocktrash: %u/%u %s block %d bit%s starting %d:%d %s\n"),

1007 
agno
, 
agbno
, 
ty≥«me
[
ty≥
], 
Àn
,Üen == 1 ? "" : "s",

1008 
bô_off£t
 / 
NBBY
, bô_off£à% NBBY, 
mode°r
[
mode
]);

1009 
	}
}

1012 
	$blockåash_f
(

1013 
¨gc
,

1014 **
¨gv
)

1016 
xfs_agblock_t
 
agbno
;

1017 
xfs_agnumbî_t
 
agno
;

1018 
xfs_rfsblock_t
 
bi
;

1019 
xfs_rfsblock_t
 
blocks
;

1020 
c
;

1021 
cou¡
;

1022 
d⁄e
;

1023 
goodmask
;

1024 
i
;

1025 
…ab_t
 *
À¡ab
;

1026 
À¡abÀn
;

1027 
max
;

1028 
mö
;

1029 
mode
;

1030 
timevÆ
 
now
;

1031 *
p
;

1032 
xfs_rfsblock_t
 
øndb
;

1033 
uöt
 
£ed
;

1034 
s›t
;

1035 
tmask
;

1036 
boﬁ
 
this_block
 = 
Ál£
;

1037 
bô_off£t
 = -1;

1039 
›töd
 = 0;

1040 
cou¡
 = 1;

1041 
mö
 = 1;

1042 
max
 = 128 * 
NBBY
;

1043 
mode
 = 2;

1044 
	`gëtimeofday
(&
now
, 
NULL
);

1045 
£ed
 = ()(
now
.
tv_£c
 ^Çow.
tv_u£c
);

1046 
s›t
 = 0;

1047 
tmask
 = 0;

1048 
goodmask
 = (1 << 
DBM_AGF
) |

1049 (1 << 
DBM_AGFL
) |

1050 (1 << 
DBM_AGI
) |

1051 (1 << 
DBM_ATTR
) |

1052 (1 << 
DBM_BTBMAPA
) |

1053 (1 << 
DBM_BTBMAPD
) |

1054 (1 << 
DBM_BTBNO
) |

1055 (1 << 
DBM_BTCNT
) |

1056 (1 << 
DBM_BTINO
) |

1057 (1 << 
DBM_DIR
) |

1058 (1 << 
DBM_INODE
) |

1059 (1 << 
DBM_LOG
) |

1060 (1 << 
DBM_QUOTA
) |

1061 (1 << 
DBM_RTBITMAP
) |

1062 (1 << 
DBM_RTSUM
) |

1063 (1 << 
DBM_SYMLINK
) |

1064 (1 << 
DBM_BTFINO
) |

1065 (1 << 
DBM_BTRMAP
) |

1066 (1 << 
DBM_BTREFC
) |

1067 (1 << 
DBM_SB
);

1068 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "0123n:o:s:t:x:y:z")Ë!
EOF
) {

1069 
c
) {

1071 
mode
 = 0;

1074 
mode
 = 1;

1077 
mode
 = 2;

1080 
mode
 = 3;

1083 
cou¡
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

1084 i‡(*
p
 !'\0' || 
cou¡
 <= 0) {

1085 
	`db¥ötf
(
	`_
("bad blockåash cou¡ %s\n"), 
›èrg
);

1090 
ªœtive
 = 0;

1091 i‡(
›èrg
[0] == '+') {

1092 
›èrg
++;

1093 
ªœtive
 = 1;

1095 
bô_off£t
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

1096 i‡(*
p
 !'\0' || 
bô_off£t
 < 0) {

1097 
	`db¥ötf
(
	`_
("bad blockåash off£à%s\n"), 
›èrg
);

1100 i‡(
ªœtive
)

1101 
bô_off£t
 = -bit_offset - 1;

1105 
£ed
 = (
uöt
)
	`°πoul
(
›èrg
, &
p
, 0);

1106 
s›t
 = 1;

1109 
i
 = 0; 
ty≥«me
[i]; i++) {

1110 i‡(
	`°rcmp
(
ty≥«me
[
i
], 
›èrg
) == 0)

1113 i‡(!
ty≥«me
[
i
] || (((1 << iË& 
goodmask
) == 0)) {

1114 
	`db¥ötf
(
	`_
("bad blockåashÅy≥ %s\n"), 
›èrg
);

1117 
tmask
 |1 << 
i
;

1120 
mö
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

1121 i‡(*
p
 !'\0' || 
mö
 <= 0 ||

1122 
mö
 > 
mp
->
m_sb
.
sb_blocksize
 * 
NBBY
) {

1123 
	`db¥ötf
(
	`_
("bad blockåash mö %s\n"), 
›èrg
);

1128 
max
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

1129 i‡(*
p
 !'\0' || 
max
 <= 0 ||

1130 
max
 > 
mp
->
m_sb
.
sb_blocksize
 * 
NBBY
) {

1131 
	`db¥ötf
(
	`_
("bad blockåash max %s\n"), 
›èrg
);

1136 
this_block
 = 
åue
;

1139 
	`db¥ötf
(
	`_
("bad option for blocktrash command\n"));

1143 i‡(!
this_block
 && !
dbm≠
) {

1144 
	`db¥ötf
(
	`_
("mustÑun blockget first\n"));

1147 i‡(
this_block
 && 
iocur_•
 == 0) {

1148 
	`db¥ötf
(
	`_
("nothing on stack\n"));

1151 i‡(
mö
 > 
max
) {

1152 
	`db¥ötf
(
	`_
("bad min/max for blocktrash command\n"));

1155 i‡(
tmask
 == 0)

1156 
tmask
 = 
goodmask
 & ~((1 << 
DBM_LOG
Ë| (1 << 
DBM_SB
));

1157 
À¡ab
 = 
	`xmÆloc
((
…ab_t
));

1158 
À¡ab
->
mö
 =Üíèb->
max
 = min;

1159 
À¡abÀn
 = 1;

1160 
i
 = 
mö
 + 1; i <
max
; i++) {

1161 i‡((
i
 & (i - 1)) == 0) {

1162 
À¡ab
 = 
	`xªÆloc
(lentab,

1163 (
…ab_t
Ë* (
À¡abÀn
 + 1));

1164 
À¡ab
[
À¡abÀn
].
mö
 =Üíèb[À¡abÀn].
max
 = 
i
;

1165 
À¡abÀn
++;

1167 
À¡ab
[
À¡abÀn
 - 1].
max
 = 
i
;

1169 i‡(!
s›t
)

1170 
	`db¥ötf
(
	`_
("blockåash: sìd %u\n"), 
£ed
);

1171 
	`§™dom
(
£ed
);

1172 i‡(
this_block
) {

1173 
	`blockåash_b
(
bô_off£t
, 
DBM_UNKNOWN
,

1174 &
À¡ab
[
	`øndom
(Ë% 
À¡abÀn
], 
mode
);

1175 
out
;

1177 
blocks
 = 0, 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

1178 
agbno
 = 0, 
p
 = 
dbm≠
[
agno
];

1179 
agbno
 < 
mp
->
m_sb
.
sb_agblocks
;

1180 
agbno
++, 
p
++) {

1181 i‡((1 << *
p
Ë& 
tmask
)

1182 
blocks
++;

1185 i‡(
blocks
 == 0) {

1186 
	`db¥ötf
(
	`_
("blocktrash:Ço matching blocks\n"));

1187 
out
;

1189 
i
 = 0; i < 
cou¡
; i++) {

1190 
øndb
 = (
xfs_rfsblock_t
)((((
__öt64_t
)
	`øndom
() << 32) |

1191 
	`øndom
()Ë% 
blocks
);

1192 
bi
 = 0, 
agno
 = 0, 
d⁄e
 = 0;

1193 !
d⁄e
 && 
agno
 < 
mp
->
m_sb
.
sb_agcou¡
;

1194 
agno
++) {

1195 
agbno
 = 0, 
p
 = 
dbm≠
[
agno
];

1196 
agbno
 < 
mp
->
m_sb
.
sb_agblocks
;

1197 
agbno
++, 
p
++) {

1198 i‡(!((1 << *
p
Ë& 
tmask
))

1200 i‡(
bi
++ < 
øndb
)

1202 
	`push_cur
();

1203 
	`£t_cur
(
NULL
,

1204 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

1205 
blkbb
, 
DB_RING_IGN
, 
NULL
);

1206 
	`blockåash_b
(
bô_off£t
, (
dbm_t
)*
p
,

1207 &
À¡ab
[
	`øndom
(Ë% 
À¡abÀn
], 
mode
);

1208 
	`p›_cur
();

1209 
d⁄e
 = 1;

1214 
out
:

1215 
	`x‰ì
(
À¡ab
);

1217 
	}
}

1220 
	$blocku£_f
(

1221 
¨gc
,

1222 **
¨gv
)

1224 
xfs_agblock_t
 
agbno
;

1225 
xfs_agnumbî_t
 
agno
;

1226 
c
;

1227 
cou¡
;

1228 
xfs_agblock_t
 
íd
;

1229 
xfs_fsblock_t
 
fsb
;

1230 
öod©a_t
 *
i
;

1231 *
p
;

1232 
show«mes
;

1234 i‡(!
dbm≠
) {

1235 
	`db¥ötf
(
	`_
("mustÑun blockget first\n"));

1238 
›töd
 = 0;

1239 
show«mes
 = 0;

1240 
fsb
 = 
	`XFS_DADDR_TO_FSB
(
mp
, 
iocur_t›
->
off
 >> 
BBSHIFT
);

1241 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
fsb
);

1242 
íd
 = 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
fsb
);

1243 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:n")Ë!
EOF
) {

1244 
c
) {

1246 
cou¡
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

1247 
íd
 = 
agbno
 + 
cou¡
 - 1;

1248 i‡(*
p
 !'\0' || 
cou¡
 <= 0 ||

1249 
íd
 >
mp
->
m_sb
.
sb_agblocks
) {

1250 
	`db¥ötf
(
	`_
("bad blocku£ cou¡ %s\n"), 
›èrg
);

1255 i‡(!
nÊag
) {

1256 
	`db¥ötf
(
	`_
("mustÑun blockget -n first\n"));

1259 
show«mes
 = 1;

1262 
	`db¥ötf
(
	`_
("bad option for blockuse command\n"));

1266 
agbno
 <
íd
) {

1267 
p
 = &
dbm≠
[
agno
][
agbno
];

1268 
i
 = 
öom≠
[
agno
][
agbno
];

1269 
	`db¥ötf
(
	`_
("block %llu (%u/%u)Åype %s"),

1270 (
xfs_fsblock_t
)
	`XFS_AGB_TO_FSB
(
mp
, 
agno
, 
agbno
),

1271 
agno
, 
agbno
, 
ty≥«me
[(
dbm_t
)*
p
]);

1272 i‡(
i
) {

1273 
	`db¥ötf
(
	`_
(" inodê%Œd"), 
i
->
öo
);

1274 i‡(
show«mes
 && (
p
 = 
	`öode_«me
(
i
->
öo
, 
NULL
))) {

1275 
	`db¥ötf
(" %s", 
p
);

1276 
	`x‰ì
(
p
);

1279 
	`db¥ötf
("\n");

1280 
agbno
++;

1283 
	}
}

1286 
	$check_bli°
(

1287 
xfs_fsblock_t
 
bno
)

1289 
i
;

1291 
i
 = 0; i < 
bli°_size
; i++) {

1292 i‡(
bli°
[
i
] =
bno
)

1296 
	}
}

1299 
	$check_dbm≠
(

1300 
xfs_agnumbî_t
 
agno
,

1301 
xfs_agblock_t
 
agbno
,

1302 
xfs_exéí_t
 
Àn
,

1303 
dbm_t
 
ty≥
,

1304 
ign‹e_ªÊök
)

1306 
xfs_exéí_t
 
i
;

1307 *
p
;

1308 
dbm_t
 
d
;

1310 
i
 = 0, 
p
 = &
dbm≠
[
agno
][
agbno
]; i < 
Àn
; i++,Ö++) {

1311 
d
 = (
dbm_t
)*
p
;

1312 i‡(
ign‹e_ªÊök
 && (
d
 =
DBM_UNKNOWN
 || d =
DBM_DATA
 ||

1313 
d
 =
DBM_RLDATA
))

1315 i‡((
dbm_t
)*
p
 !
ty≥
) {

1316 i‡(!
sÊag
 || 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
)) {

1317 
	`db¥ötf
(
	`_
("block %u/%uÉxpectedÅype %s got "

1319 
agno
, 
agbno
 + 
i
, 
ty≥«me
[
ty≥
],

1320 
ty≥«me
[(
dbm_t
)*
p
]);

1322 
îr‹
++;

1325 
	}
}

1328 
	$check_öô
()

1330 
	`add_comm™d
(&
block‰ì_cmd
);

1331 
	`add_comm™d
(&
blockgë_cmd
);

1332 i‡(
ex≥π_mode
)

1333 
	`add_comm™d
(&
blockåash_cmd
);

1334 
	`add_comm™d
(&
blocku£_cmd
);

1335 
	`add_comm™d
(&
ncheck_cmd
);

1336 
	}
}

1339 
	$check_öom≠
(

1340 
xfs_agnumbî_t
 
agno
,

1341 
xfs_agblock_t
 
agbno
,

1342 
xfs_exéí_t
 
Àn
,

1343 
xfs_öo_t
 
c_öo
)

1345 
xfs_exéí_t
 
i
;

1346 
öod©a_t
 **
idp
;

1347 
rvÆ
;

1349 i‡(!
	`check_ønge
(
agno
, 
agbno
, 
Àn
)) {

1350 
	`db¥ötf
(
	`_
("blocks %u/%u..%u claimed by inode %lld\n"),

1351 
agno
, 
agbno
,ágbnÿ+ 
Àn
 - 1, 
c_öo
);

1354 
i
 = 0, 
rvÆ
 = 1, 
idp
 = &
öom≠
[
agno
][
agbno
]; i < 
Àn
; i++, idp++) {

1355 i‡(*
idp
 && !(*idp)->
i§eÊök
) {

1356 i‡(!
sÊag
 || (*
idp
)->
ûi°
 ||

1357 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
))

1358 
	`db¥ötf
(
	`_
("block %u/%u claimed by inode %lld, "

1360 
agno
, 
agbno
 + 
i
, 
c_öo
, (*
idp
)->
öo
);

1361 
îr‹
++;

1362 
rvÆ
 = 0;

1365  
rvÆ
;

1366 
	}
}

1369 
	$check_lökcou¡s
(

1370 
xfs_agnumbî_t
 
agno
)

1372 
öod©a_t
 *
ï
;

1373 
öod©a_t
 **
ht
;

1374 
idx
;

1375 *
∑th
;

1377 
ht
 = 
öod©a
[
agno
];

1378 
idx
 = 0; idx < 
öod©a_hash_size
; 
ht
++, idx++) {

1379 
ï
 = *
ht
;

1380 
ï
) {

1381 i‡(
ï
->
lök_£t
 !ï->
lök_add
 ||Ép->link_set == 0) {

1382 
∑th
 = 
	`öode_«me
(
ï
->
öo
, 
NULL
);

1383 i‡(!
∑th
 && 
ï
->
lök_add
)

1384 
∑th
 = 
	`x°rdup
("?");

1385 i‡(!
sÊag
 || 
ï
->
ûi°
) {

1386 i‡(
ï
->
lök_add
)

1387 
	`db¥ötf
(
	`_
("link count mismatch "

1391 
ï
->
öo
, 
∑th
,

1392 
ï
->
lök_£t
,

1393 
ï
->
lök_add
);

1394 i‡(
ï
->
lök_£t
)

1395 
	`db¥ötf
(
	`_
("disconnected inode "

1397 
ï
->
öo
,Ép->
lök_£t
);

1399 
	`db¥ötf
(
	`_
("allocated inode %lld "

1401 
ï
->
öo
);

1403 i‡(
∑th
)

1404 
	`x‰ì
(
∑th
);

1405 
îr‹
++;

1406 } i‡(
vîbo£
 || 
ï
->
ûi°
) {

1407 
∑th
 = 
	`öode_«me
(
ï
->
öo
, 
NULL
);

1408 i‡(
∑th
) {

1409 
	`db¥ötf
(
	`_
("inode %lldÇame %s\n"),

1410 
ï
->
öo
, 
∑th
);

1411 
	`x‰ì
(
∑th
);

1414 
ï
 =Ép->
√xt
;

1418 
	}
}

1421 
	$check_ønge
(

1422 
xfs_agnumbî_t
 
agno
,

1423 
xfs_agblock_t
 
agbno
,

1424 
xfs_exéí_t
 
Àn
)

1426 
xfs_exéí_t
 
i
;

1427 
xfs_agblock_t
 
low
 = 0;

1428 
xfs_agblock_t
 
high
 = 0;

1429 
vÆid_ønge
 = 0;

1430 
cur
, 
¥ev
 = 0;

1432 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 ||

1433 
agbno
 + 
Àn
 - 1 >
mp
->
m_sb
.
sb_agblocks
) {

1434 
i
 = 0; i < 
Àn
; i++) {

1435 
cur
 = !
sÊag
 || 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
) ? 1 : 0;

1436 i‡(
cur
 =1 && 
¥ev
 == 0) {

1437 
low
 = 
high
 = 
agbno
 + 
i
;

1438 
vÆid_ønge
 = 1;

1439 } i‡(
cur
 =0 && 
¥ev
 == 0) {

1441 } i‡(
cur
 =0 && 
¥ev
 == 1) {

1442 i‡(
low
 =
high
) {

1443 
	`db¥ötf
(
	`_
("block %u/%u out ofÑange\n"),

1444 
agno
, 
low
);

1446 
	`db¥ötf
(
	`_
("blocks %u/%u..%u "

1448 
agno
, 
low
, 
high
);

1450 
vÆid_ønge
 = 0;

1451 } i‡(
cur
 =1 && 
¥ev
 == 1) {

1452 
high
 = 
agbno
 + 
i
;

1454 
¥ev
 = 
cur
;

1456 i‡(
vÆid_ønge
) {

1457 i‡(
low
 =
high
) {

1458 
	`db¥ötf
(
	`_
("block %u/%u out ofÑange\n"),

1459 
agno
, 
low
);

1461 
	`db¥ötf
(
	`_
("blocks %u/%u..%u "

1463 
agno
, 
low
, 
high
);

1466 
îr‹
++;

1470 
	}
}

1473 
	$check_rdbm≠
(

1474 
xfs_rfsblock_t
 
bno
,

1475 
xfs_exéí_t
 
Àn
,

1476 
dbm_t
 
ty≥
)

1478 
xfs_exéí_t
 
i
;

1479 *
p
;

1481 
i
 = 0, 
p
 = &
dbm≠
[
mp
->
m_sb
.
sb_agcou¡
][
bno
]; i < 
Àn
; i++,Ö++) {

1482 i‡((
dbm_t
)*
p
 !
ty≥
) {

1483 i‡(!
sÊag
 || 
	`CHECK_BLIST
(
bno
 + 
i
))

1484 
	`db¥ötf
(
	`_
("rtblock %lluÉxpectedÅype %s got "

1486 
bno
 + 
i
, 
ty≥«me
[
ty≥
],

1487 
ty≥«me
[(
dbm_t
)*
p
]);

1488 
îr‹
++;

1491 
	}
}

1494 
	$check_röom≠
(

1495 
xfs_rfsblock_t
 
bno
,

1496 
xfs_exéí_t
 
Àn
,

1497 
xfs_öo_t
 
c_öo
)

1499 
xfs_exéí_t
 
i
;

1500 
öod©a_t
 **
idp
;

1501 
rvÆ
;

1503 i‡(!
	`check_º™ge
(
bno
, 
Àn
)) {

1504 
	`db¥ötf
(
	`_
("rtblocks %llu..%llu claimed by inode %lld\n"),

1505 
bno
, bnÿ+ 
Àn
 - 1, 
c_öo
);

1508 
i
 = 0, 
rvÆ
 = 1, 
idp
 = &
öom≠
[
mp
->
m_sb
.
sb_agcou¡
][
bno
];

1509 
i
 < 
Àn
;

1510 
i
++, 
idp
++) {

1511 i‡(*
idp
) {

1512 i‡(!
sÊag
 || (*
idp
)->
ûi°
 || 
	`CHECK_BLIST
(
bno
 + 
i
))

1513 
	`db¥ötf
(
	`_
("rtblock %llu claimed by inode %lld, "

1515 
bno
 + 
i
, 
c_öo
, (*
idp
)->
öo
);

1516 
îr‹
++;

1517 
rvÆ
 = 0;

1520  
rvÆ
;

1521 
	}
}

1524 
	$check_roŸdú
()

1526 
öod©a_t
 *
id
;

1528 
id
 = 
	`föd_öode
(
mp
->
m_sb
.
sb_roŸöo
, 0);

1529 i‡(
id
 =
NULL
) {

1530 i‡(!
sÊag
)

1531 
	`db¥ötf
(
	`_
("root inode %lld is missing\n"),

1532 
mp
->
m_sb
.
sb_roŸöo
);

1533 
îr‹
++;

1534 } i‡(!
id
->
isdú
) {

1535 i‡(!
sÊag
 || 
id
->
ûi°
)

1536 
	`db¥ötf
(
	`_
("root inode %lld isÇotá directory\n"),

1537 
mp
->
m_sb
.
sb_roŸöo
);

1538 
îr‹
++;

1540 
	}
}

1543 
	$check_º™ge
(

1544 
xfs_rfsblock_t
 
bno
,

1545 
xfs_exéí_t
 
Àn
)

1547 
xfs_exéí_t
 
i
;

1549 i‡(
bno
 + 
Àn
 - 1 >
mp
->
m_sb
.
sb_rblocks
) {

1550 
i
 = 0; i < 
Àn
; i++) {

1551 i‡(!
sÊag
 || 
	`CHECK_BLIST
(
bno
 + 
i
))

1552 
	`db¥ötf
(
	`_
("rtblock %llu out ofÑange\n"),

1553 
bno
 + 
i
);

1555 
îr‹
++;

1559 
	}
}

1570 
boﬁ


1571 
	$is_ªÊök
(

1572 
dbm_t
 
ty≥2
)

1574 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

1575  
Ál£
;

1576 i‡(
ty≥2
 =
DBM_DATA
 ||Åy≥2 =
DBM_RLDATA
)

1577  
åue
;

1578  
Ál£
;

1579 
	}
}

1582 
	$check_£t_dbm≠
(

1583 
xfs_agnumbî_t
 
agno
,

1584 
xfs_agblock_t
 
agbno
,

1585 
xfs_exéí_t
 
Àn
,

1586 
dbm_t
 
ty≥1
,

1587 
dbm_t
 
ty≥2
,

1588 
xfs_agnumbî_t
 
c_agno
,

1589 
xfs_agblock_t
 
c_agbno
)

1591 
xfs_exéí_t
 
i
;

1592 
may¥öt
;

1593 *
p
;

1595 i‡(!
	`check_ønge
(
agno
, 
agbno
, 
Àn
)) {

1596 
	`db¥ötf
(
	`_
("block†%u/%u..%u cœimed by block %u/%u\n"), 
agno
,

1597 
agbno
,ágbnÿ+ 
Àn
 - 1, 
c_agno
, 
c_agbno
);

1600 
	`check_dbm≠
(
agno
, 
agbno
, 
Àn
, 
ty≥1
, 
	`is_ªÊök
(
ty≥2
));

1601 
may¥öt
 = 
vîbo£
 | 
bli°_size
;

1602 
i
 = 0, 
p
 = &
dbm≠
[
agno
][
agbno
]; i < 
Àn
; i++,Ö++) {

1603 i‡(*
p
 =
DBM_RLDATA
 && 
ty≥2
 =
DBM_DATA
)

1605 i‡(*
p
 =
DBM_DATA
 && 
ty≥2
 == DBM_DATA)

1606 *
p
 = ()
DBM_RLDATA
;

1608 *
p
 = ()
ty≥2
;

1609 i‡(
may¥öt
 && (
vîbo£
 || 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
)))

1610 
	`db¥ötf
(
	`_
("£âög block %u/%uÅÿ%s\n"), 
agno
, 
agbno
 + 
i
,

1611 
ty≥«me
[
ty≥2
]);

1613 
	}
}

1616 
	$check_£t_rdbm≠
(

1617 
xfs_rfsblock_t
 
bno
,

1618 
xfs_exéí_t
 
Àn
,

1619 
dbm_t
 
ty≥1
,

1620 
dbm_t
 
ty≥2
)

1622 
xfs_exéí_t
 
i
;

1623 
may¥öt
;

1624 *
p
;

1626 i‡(!
	`check_º™ge
(
bno
, 
Àn
))

1628 
	`check_rdbm≠
(
bno
, 
Àn
, 
ty≥1
);

1629 
may¥öt
 = 
vîbo£
 | 
bli°_size
;

1630 
i
 = 0, 
p
 = &
dbm≠
[
mp
->
m_sb
.
sb_agcou¡
][
bno
]; i < 
Àn
; i++,Ö++) {

1631 *
p
 = ()
ty≥2
;

1632 i‡(
may¥öt
 && (
vîbo£
 || 
	`CHECK_BLIST
(
bno
 + 
i
)))

1633 
	`db¥ötf
(
	`_
("settingÑtblock %lluÅo %s\n"),

1634 
bno
 + 
i
, 
ty≥«me
[
ty≥2
]);

1636 
	}
}

1639 
	$check_summ¨y
()

1641 
xfs_rfsblock_t
 
bno
;

1642 
xfs_sumöfo_t
 *
c•
;

1643 
xfs_sumöfo_t
 *
f•
;

1644 
log
;

1646 
c•
 = 
sumcompuã
;

1647 
f•
 = 
sumfûe
;

1648 
log
 = 0;Üog < 
mp
->
m_rsumÀvñs
;Üog++) {

1649 
bno
 = 0;

1650 
bno
 < 
mp
->
m_sb
.
sb_rbmblocks
;

1651 
bno
++, 
c•
++, 
f•
++) {

1652 i‡(*
c•
 !*
f•
) {

1653 i‡(!
sÊag
)

1654 
	`db¥ötf
(
	`_
("rt summary mismatch, size %d "

1657 
log
, 
bno
, *
f•
, *
c•
);

1658 
îr‹
++;

1662 
	}
}

1665 
	$checknŸ_dbm≠
(

1666 
xfs_agnumbî_t
 
agno
,

1667 
xfs_agblock_t
 
agbno
,

1668 
xfs_exéí_t
 
Àn
,

1669 
ty≥mask
)

1671 
xfs_exéí_t
 
i
;

1672 *
p
;

1674 i‡(!
	`check_ønge
(
agno
, 
agbno
, 
Àn
))

1676 
i
 = 0, 
p
 = &
dbm≠
[
agno
][
agbno
]; i < 
Àn
; i++,Ö++) {

1677 i‡((1 << *
p
Ë& 
ty≥mask
) {

1678 i‡(!
sÊag
 || 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
))

1679 
	`db¥ötf
(
	`_
("block %u/%uÅype %sÇotÉxpected\n"),

1680 
agno
, 
agbno
 + 
i
, 
ty≥«me
[(
dbm_t
)*
p
]);

1681 
îr‹
++;

1684 
	}
}

1687 
	$checknŸ_rdbm≠
(

1688 
xfs_rfsblock_t
 
bno
,

1689 
xfs_exéí_t
 
Àn
,

1690 
ty≥mask
)

1692 
xfs_exéí_t
 
i
;

1693 *
p
;

1695 i‡(!
	`check_º™ge
(
bno
, 
Àn
))

1697 
i
 = 0, 
p
 = &
dbm≠
[
mp
->
m_sb
.
sb_agcou¡
][
bno
]; i < 
Àn
; i++,Ö++) {

1698 i‡((1 << *
p
Ë& 
ty≥mask
) {

1699 i‡(!
sÊag
 || 
	`CHECK_BLIST
(
bno
 + 
i
))

1700 
	`db¥ötf
(
	`_
("rtblock %lluÅype %sÇotÉxpected\n"),

1701 
bno
 + 
i
, 
ty≥«me
[(
dbm_t
)*
p
]);

1702 
îr‹
++;

1705 
	}
}

1708 
	$dú_hash_add
(

1709 
xfs_dahash_t
 
hash
,

1710 
xfs_dú2_d©≠å_t
 
addr
)

1712 
i
;

1713 
dúhash_t
 *
p
;

1715 
i
 = 
	`DIR_HASH_FUNC
(
hash
, 
addr
);

1716 
p
 = 
	`mÆloc
((*p));

1717 
p
->
√xt
 = 
dúhash
[
i
];

1718 
dúhash
[
i
] = 
p
;

1719 
p
->
hashvÆ
 = 
hash
;

1720 
p
->
addªss
 = 
addr
;

1721 
p
->
£í
 = 0;

1722 
	}
}

1725 
	$dú_hash_check
(

1726 
öod©a_t
 *
id
,

1727 
v
)

1729 
i
;

1730 
dúhash_t
 *
p
;

1732 
i
 = 0; i < 
DIR_HASH_SIZE
; i++) {

1733 
p
 = 
dúhash
[
i
];Ö;Ö =Ö->
√xt
) {

1734 i‡(
p
->
£í
)

1736 i‡(!
sÊag
 || 
id
->
ûi°
 || 
v
)

1737 
	`db¥ötf
(
	`_
("dir ino %lld missingÜeafÉntry for "

1739 
id
->
öo
, 
p
->
hashvÆ
,Ö->
addªss
);

1740 
îr‹
++;

1743 
	}
}

1746 
	$dú_hash_d⁄e
()

1748 
i
;

1749 
dúhash_t
 *
n
;

1750 
dúhash_t
 *
p
;

1752 
i
 = 0; i < 
DIR_HASH_SIZE
; i++) {

1753 
p
 = 
dúhash
[
i
];Ö;Ö = 
n
) {

1754 
n
 = 
p
->
√xt
;

1755 
	`‰ì
(
p
);

1757 
dúhash
[
i
] = 
NULL
;

1759 
	}
}

1762 
	$dú_hash_öô
()

1764 i‡(!
dúhash
)

1765 
dúhash
 = 
	`ˇŒoc
(
DIR_HASH_SIZE
, (*dirhash));

1766 
	}
}

1769 
	$dú_hash_£e
(

1770 
xfs_dahash_t
 
hash
,

1771 
xfs_dú2_d©≠å_t
 
addr
)

1773 
i
;

1774 
dúhash_t
 *
p
;

1776 
i
 = 
	`DIR_HASH_FUNC
(
hash
, 
addr
);

1777 
p
 = 
dúhash
[
i
];Ö;Ö =Ö->
√xt
) {

1778 i‡(
p
->
hashvÆ
 =
hash
 &&Ö->
addªss
 =
addr
) {

1779 i‡(
p
->
£í
)

1781 
p
->
£í
 = 1;

1786 
	}
}

1788 
öod©a_t
 *

1789 
	$föd_öode
(

1790 
xfs_öo_t
 
öo
,

1791 
add
)

1793 
xfs_agöo_t
 
agöo
;

1794 
xfs_agnumbî_t
 
agno
;

1795 
öod©a_t
 *
ít
;

1796 
öod©a_t
 **
hèb
;

1797 
xfs_agöo_t
 
ih
;

1799 
agno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
öo
);

1800 
agöo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
);

1801 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 ||

1802 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
Ë!
öo
)

1803  
NULL
;

1804 
hèb
 = 
öod©a
[
agno
];

1805 
ih
 = 
agöo
 % 
öod©a_hash_size
;

1806 
ít
 = 
hèb
[
ih
];

1807 
ít
) {

1808 i‡(
ít
->
öo
 == ino)

1809  
ít
;

1810 
ít
 =É¡->
√xt
;

1812 i‡(!
add
)

1813  
NULL
;

1814 
ít
 = 
	`xˇŒoc
(1, (*ent));

1815 
ít
->
öo
 = ino;

1816 
ít
->
√xt
 = 
hèb
[
ih
];

1817 
hèb
[
ih
] = 
ít
;

1818  
ít
;

1819 
	}
}

1822 
	$‰ì_öod©a
(

1823 
xfs_agnumbî_t
 
agno
)

1825 
öod©a_t
 *
hp
;

1826 
öod©a_t
 **
ht
;

1827 
i
;

1828 
öod©a_t
 *
√xt
;

1830 
ht
 = 
öod©a
[
agno
];

1831 
i
 = 0; i < 
öod©a_hash_size
; i++) {

1832 
hp
 = 
ht
[
i
];

1833 
hp
) {

1834 
√xt
 = 
hp
->next;

1835 i‡(
hp
->
«me
)

1836 
	`x‰ì
(
hp
->
«me
);

1837 
	`x‰ì
(
hp
);

1838 
hp
 = 
√xt
;

1841 
	`x‰ì
(
ht
);

1842 
	}
}

1845 
	$öô
(

1846 
¨gc
,

1847 **
¨gv
)

1849 
xfs_fsblock_t
 
bno
;

1850 
c
;

1851 
xfs_öo_t
 
öo
;

1852 
π
;

1854 
£rious_îr‹
 = 0;

1855 i‡(
mp
->
m_sb
.
sb_magi˙um
 !
XFS_SB_MAGIC
) {

1856 
	`db¥ötf
(
	`_
("bad superblock magicÇumber %x, giving up\n"),

1857 
mp
->
m_sb
.
sb_magi˙um
);

1858 
£rious_îr‹
 = 1;

1861 i‡(!
	`sb_logcheck
())

1863 
π
 = 
mp
->
m_sb
.
sb_ªxã¡s
 != 0;

1864 
dbm≠
 = 
	`xmÆloc
((
mp
->
m_sb
.
sb_agcou¡
 + 
π
) * (*dbmap));

1865 
öom≠
 = 
	`xmÆloc
((
mp
->
m_sb
.
sb_agcou¡
 + 
π
) * (*inomap));

1866 
öod©a
 = 
	`xmÆloc
(
mp
->
m_sb
.
sb_agcou¡
 * (*inodata));

1867 
öod©a_hash_size
 =

1868 ()
	`MAX
(
	`MIN
(
mp
->
m_sb
.
sb_icou¡
 /

1869 (
INODATA_AVG_HASH_LENGTH
 * 
mp
->
m_sb
.
sb_agcou¡
),

1870 
MAX_INODATA_HASH_SIZE
),

1871 
MIN_INODATA_HASH_SIZE
);

1872 
c
 = 0; c < 
mp
->
m_sb
.
sb_agcou¡
; c++) {

1873 
dbm≠
[
c
] = 
	`xˇŒoc
(
mp
->
m_sb
.
sb_agblocks
, (**dbmap));

1874 
öom≠
[
c
] = 
	`xˇŒoc
(
mp
->
m_sb
.
sb_agblocks
, (**inomap));

1875 
öod©a
[
c
] = 
	`xˇŒoc
(
öod©a_hash_size
, (**inodata));

1877 i‡(
π
) {

1878 
dbm≠
[
c
] = 
	`xˇŒoc
(
mp
->
m_sb
.
sb_rblocks
, (**dbmap));

1879 
öom≠
[
c
] = 
	`xˇŒoc
(
mp
->
m_sb
.
sb_rblocks
, (**inomap));

1880 
sumfûe
 = 
	`xˇŒoc
(
mp
->
m_rsumsize
, 1);

1881 
sumcompuã
 = 
	`xˇŒoc
(
mp
->
m_rsumsize
, 1);

1883 
nÊag
 = 
sÊag
 = 
tÊag
 = 
vîbo£
 = 
›töd
 = 0;

1884 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "b:i:≈°v")Ë!
EOF
) {

1885 
c
) {

1887 
bno
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 10);

1888 
	`add_bli°
(
bno
);

1891 
öo
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 10);

1892 
	`add_ûi°
(
öo
);

1895 
nÊag
 = 1;

1898 
pÊag
 = 1;

1901 
sÊag
 = 1;

1904 
tÊag
 = 1;

1907 
vîbo£
 = 1;

1910 
	`db¥ötf
(
	`_
("bad option for blockget command\n"));

1914 
îr‹
 = 
sbvî_îr
 = 
£rious_îr‹
 = 0;

1915 
fdblocks
 = 
‰exã¡s
 = 
icou¡
 = 
i‰ì
 = 0;

1916 
sbvîsi⁄
 = 
XFS_SB_VERSION_4
;

1921 i‡(
mp
->
m_sb
.
sb_öﬂlignmt
 ||

1922 (
	`xfs_sb_vîsi⁄_haßlign
(&
mp
->
m_sb
) &&

1923 
mp
->
m_sb
.
sb_ö›block
 >
XFS_INODES_PER_CHUNK
))

1924 
sbvîsi⁄
 |
XFS_SB_VERSION_ALIGNBIT
;

1925 i‡((
mp
->
m_sb
.
sb_uquŸöo
 && mp->m_sb.sb_uquŸöÿ!
NULLFSINO
) ||

1926 (
mp
->
m_sb
.
sb_gquŸöo
 && mp->m_sb.sb_gquŸöÿ!
NULLFSINO
) ||

1927 (
mp
->
m_sb
.
sb_pquŸöo
 && mp->m_sb.sb_pquŸöÿ!
NULLFSINO
))

1928 
sbvîsi⁄
 |
XFS_SB_VERSION_QUOTABIT
;

1929 
	`quŸa_öô
();

1931 
	}
}

1934 
	$öode_«me
(

1935 
xfs_öo_t
 
öo
,

1936 
öod©a_t
 **
ùp
)

1938 
öod©a_t
 *
id
;

1939 *
≈©h
;

1940 *
∑th
;

1942 
id
 = 
	`föd_öode
(
öo
, 0);

1943 i‡(
ùp
)

1944 *
ùp
 = 
id
;

1945 i‡(
id
 =
NULL
)

1946  
NULL
;

1947 i‡(
id
->
«me
 =
NULL
)

1948  
NULL
;

1949 
∑th
 = 
	`x°rdup
(
id
->
«me
);

1950 
id
->
∑ª¡
) {

1951 
id
 = id->
∑ª¡
;

1952 i‡(
id
->
«me
 =
NULL
)

1954 
≈©h
 = 
	`¥ïíd_∑th
(
∑th
, 
id
->
«me
);

1955 
	`x‰ì
(
∑th
);

1956 
∑th
 = 
≈©h
;

1958  
∑th
;

1959 
	}
}

1962 
	$ncheck_f
(

1963 
¨gc
,

1964 **
¨gv
)

1966 
xfs_agnumbî_t
 
agno
;

1967 
c
;

1968 
öod©a_t
 *
hp
;

1969 
öod©a_t
 **
ht
;

1970 
i
;

1971 
öod©a_t
 *
id
;

1972 
xfs_öo_t
 *
ûi°
;

1973 
ûi°_size
;

1974 
xfs_öo_t
 *
ûp
;

1975 
xfs_öo_t
 
öo
;

1976 *
p
;

1977 
£curôy
;

1979 i‡(!
öod©a
 || !
nÊag
) {

1980 
	`db¥ötf
(
	`_
("mustÑun blockget -n first\n"));

1983 
£curôy
 = 
›töd
 = 
ûi°_size
 = 0;

1984 
ûi°
 = 
NULL
;

1985 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "i:s")Ë!
EOF
) {

1986 
c
) {

1988 
öo
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 10);

1989 
ûi°
 = 
	`xªÆloc
(ûi°, (
ûi°_size
 + 1) *

1990 (*
ûi°
));

1991 
ûi°
[
ûi°_size
++] = 
öo
;

1994 
£curôy
 = 1;

1997 
	`db¥ötf
(
	`_
("bad o±i⁄ -%¯f‹Çcheck comm™d\n"), 
c
);

1998 
	`x‰ì
(
ûi°
);

2002 i‡(
ûi°
) {

2003 
ûp
 = 
ûi°
; iÕ < &ûi°[
ûi°_size
]; ilp++) {

2004 
öo
 = *
ûp
;

2005 i‡((
p
 = 
	`öode_«me
(
öo
, &
hp
))) {

2006 
	`db¥ötf
("%11Œu %s", 
öo
, 
p
);

2007 i‡(
hp
->
isdú
)

2008 
	`db¥ötf
("/.");

2009 
	`db¥ötf
("\n");

2010 
	`x‰ì
(
p
);

2013 
	`x‰ì
(
ûi°
);

2016 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

2017 
ht
 = 
öod©a
[
agno
];

2018 
i
 = 0; i < 
öod©a_hash_size
; i++) {

2019 
hp
 = 
ht
[
i
];

2020 
hp
 = 
ht
[
i
]; hp; h∞hp->
√xt
) {

2021 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
hp
->ino);

2022 
p
 = 
	`öode_«me
(
öo
, &
id
);

2023 i‡(!
p
 || !
id
)

2025 i‡(!
£curôy
 || 
id
->security) {

2026 
	`db¥ötf
("%11Œu %s", 
öo
, 
p
);

2027 i‡(
hp
->
isdú
)

2028 
	`db¥ötf
("/.");

2029 
	`db¥ötf
("\n");

2031 
	`x‰ì
(
p
);

2036 
	}
}

2039 
	$¥ïíd_∑th
(

2040 *
ﬁd∑th
,

2041 *
∑ª¡
)

2043 
Àn
;

2044 *
∑th
;

2046 
Àn
 = ()(
	`°æí
(
ﬁd∑th
Ë+ såÀn(
∑ª¡
) + 2);

2047 
∑th
 = 
	`xmÆloc
(
Àn
);

2048 
	`¢¥ötf
(
∑th
, 
Àn
, "%s/%s", 
∑ª¡
, 
ﬁd∑th
);

2049  
∑th
;

2050 
	}
}

2052 
xfs_öo_t


2053 
	$¥o˚ss_block_dú_v2
(

2054 
blkm≠_t
 *
blkm≠
,

2055 *
dŸ
,

2056 *
dŸdŸ
,

2057 
öod©a_t
 *
id
)

2059 
xfs_fsblock_t
 
b
;

2060 
bbm≠_t
 
bbm≠
;

2061 
bm≠_ext_t
 *
bmp
;

2062 
√x
;

2063 
xfs_öo_t
 
∑ª¡
;

2064 
v
;

2065 
x
;

2067 
√x
 = 
	`blkm≠_gën
(
blkm≠
, 0, 
mp
->
m_dú_geo
->
fsbcou¡
, &
bmp
);

2068 
v
 = 
id
->
ûi°
 || 
vîbo£
;

2069 i‡(
√x
 == 0) {

2070 i‡(!
sÊag
 || 
v
)

2071 
	`db¥ötf
(
	`_
("block 0 for directory inode %lld is "

2073 
id
->
öo
);

2074 
îr‹
++;

2077 
	`push_cur
();

2078 i‡(
√x
 > 1)

2079 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

2080 
	`£t_cur
(&
ty±ab
[
TYP_DIR2
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bmp
->
°¨tblock
),

2081 
mp
->
m_dú_geo
->
fsbcou¡
 * 
blkbb
, 
DB_RING_IGN
, 
√x
 > 1 ? &
bbm≠
 : 
NULL
);

2082 
x
 = 0; !
v
 && x < 
√x
; x++) {

2083 
b
 = 
bmp
[
x
].
°¨tblock
;

2084 !
v
 && 
b
 < 
bmp
[
x
].
°¨tblock
 + bmp[x].
blockcou¡
;

2085 
b
++)

2086 
v
 = 
	`CHECK_BLIST
(
b
);

2088 
	`‰ì
(
bmp
);

2089 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2090 i‡(!
sÊag
 || 
id
->
ûi°
 || 
v
)

2091 
	`db¥ötf
(
	`_
("can'tÑead block 0 for directory inode "

2093 
id
->
öo
);

2094 
îr‹
++;

2095 
	`p›_cur
();

2098 
	`dú_hash_öô
();

2099 
∑ª¡
 = 
	`¥o˚ss_d©a_dú_v2
(
dŸ
, 
dŸdŸ
, 
id
, 
v
, 
mp
->
m_dú_geo
->
d©ablk
,

2100 
NULL
);

2101 
	`dú_hash_check
(
id
, 
v
);

2102 
	`dú_hash_d⁄e
();

2103 
	`p›_cur
();

2104  
∑ª¡
;

2105 
	}
}

2108 
	$¥o˚ss_bmbt_ª˛i°
(

2109 
xfs_bmbt_ªc_t
 *
Ω
,

2110 
numªcs
,

2111 
dbm_t
 
ty≥
,

2112 
öod©a_t
 *
id
,

2113 
xfs_rfsblock_t
 *
tŸ
,

2114 
blkm≠_t
 **
blkm≠p
)

2116 
xfs_agblock_t
 
agbno
;

2117 
xfs_agnumbî_t
 
agno
;

2118 
xfs_fsblock_t
 
b
;

2119 
xfs_fûblks_t
 
c
;

2120 
xfs_fûblks_t
 
˝
;

2121 
f
;

2122 
i
;

2123 
xfs_agblock_t
 
ügbno
;

2124 
xfs_agnumbî_t
 
ügno
;

2125 
xfs_fûeoff_t
 
o
;

2126 
xfs_fûeoff_t
 
›
;

2127 
xfs_fsblock_t
 
s
;

2128 
v
;

2130 
˝
 = 
›
 = 0;

2131 
v
 = 
vîbo£
 || 
id
->
ûi°
;

2132 
ügno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
id
->
öo
);

2133 
ügbno
 = 
	`XFS_INO_TO_AGBNO
(
mp
, 
id
->
öo
);

2134 
i
 = 0; i < 
numªcs
; i++, 
Ω
++) {

2135 
	`c⁄vît_exã¡
(
Ω
, &
o
, &
s
, &
c
, &
f
);

2136 i‡(
v
)

2137 
	`db¥ötf
(
	`_
("inode %lldÉxtent [%lld,%lld,%lld,%d]\n"),

2138 
id
->
öo
, 
o
, 
s
, 
c
, 
f
);

2139 i‡(!
sÊag
 && 
i
 > 0 && 
›
 + 
˝
 > 
o
)

2140 
	`db¥ötf
(
	`_
("bmapÑec out of order, inode %lldÉntry %d\n"),

2141 
id
->
öo
, 
i
);

2142 
›
 = 
o
;

2143 
˝
 = 
c
;

2144 i‡(
ty≥
 =
DBM_RTDATA
) {

2145 i‡(!
sÊag
 && 
s
 >
mp
->
m_sb
.
sb_rblocks
) {

2146 
	`db¥ötf
(
	`_
("inode %lld badÑt blockÇumber %lld, "

2148 
id
->
öo
, 
s
, 
o
);

2151 } i‡(!
sÊag
) {

2152 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
s
);

2153 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
s
);

2154 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 ||

2155 
agbno
 >
mp
->
m_sb
.
sb_agblocks
) {

2156 
	`db¥ötf
(
	`_
("inode %lld bad blockÇumber %lld "

2158 
id
->
öo
, 
s
, 
agno
, 
agbno
, 
o
);

2161 i‡(
agbno
 + 
c
 - 1 >
mp
->
m_sb
.
sb_agblocks
) {

2162 
	`db¥ötf
(
	`_
("inode %lld bad blockÇumber %lld "

2164 
id
->
öo
, 
s
 + 
c
 - 1, 
agno
,

2165 
agbno
 + (
xfs_agblock_t
)
c
 - 1, 
o
);

2169 i‡(
blkm≠p
 && *blkmapp)

2170 
	`blkm≠_£t_ext
(
blkm≠p
, (
xfs_fûeoff_t
)
o
,

2171 (
xfs_fsblock_t
)
s
, (
xfs_exéí_t
)
c
);

2172 i‡(
ty≥
 =
DBM_RTDATA
) {

2173 
	`£t_rdbm≠
((
xfs_fsblock_t
)
s
, (
xfs_exéí_t
)
c
,

2174 
DBM_RTDATA
);

2175 
	`£t_röom≠
((
xfs_fsblock_t
)
s
, (
xfs_exéí_t
)
c
, 
id
);

2176 
b
 = (
xfs_fsblock_t
)
s
;

2177 
bli°_size
 && 
b
 < 
s
 + 
c
;

2178 
b
++, 
o
++) {

2179 i‡(
	`CHECK_BLIST
(
b
))

2180 
	`db¥ötf
(
	`_
("inode %lld block %lldát "

2182 
id
->
öo
, (
xfs_fsblock_t
)
b
, 
o
);

2185 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, (
xfs_fsblock_t
)
s
);

2186 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, (
xfs_fsblock_t
)
s
);

2187 
	`£t_dbm≠
(
agno
, 
agbno
, (
xfs_exéí_t
)
c
, 
ty≥
, 
ügno
,

2188 
ügbno
);

2189 
	`£t_öom≠
(
agno
, 
agbno
, (
xfs_exéí_t
)
c
, 
id
);

2190 
b
 = (
xfs_fsblock_t
)
s
;

2191 
bli°_size
 && 
b
 < 
s
 + 
c
;

2192 
b
++, 
o
++, 
agbno
++) {

2193 i‡(
	`CHECK_BLIST
(
b
))

2194 
	`db¥ötf
(
	`_
("inode %lld block %lldát "

2196 
id
->
öo
, (
xfs_fsblock_t
)
b
, 
o
);

2199 *
tŸ
 +
c
;

2201 
	}
}

2204 
	$¥o˚ss_btöode
(

2205 
öod©a_t
 *
id
,

2206 
xfs_döode_t
 *
dù
,

2207 
dbm_t
 
ty≥
,

2208 
xfs_rfsblock_t
 *
tŸd
,

2209 
xfs_rfsblock_t
 *
tŸi
,

2210 
xfs_exäum_t
 *
√x
,

2211 
blkm≠_t
 **
blkm≠p
,

2212 
whichf‹k
)

2214 
xfs_bmdr_block_t
 *
dib
;

2215 
i
;

2216 
xfs_bmbt_±r_t
 *
µ
;

2218 
dib
 = (
xfs_bmdr_block_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

2219 i‡(
	`be16_to_˝u
(
dib
->
bb_Àvñ
Ë>
	`XFS_BM_MAXLEVELS
(
mp
, 
whichf‹k
)) {

2220 i‡(!
sÊag
 || 
id
->
ûi°
)

2221 
	`db¥ötf
(
	`_
("level for ino %lld %s fork bmapÑootÅoo "

2223 
id
->
öo
,

2224 
whichf‹k
 =
XFS_DATA_FORK
 ? 
	`_
("data") : _("attr"),

2225 
	`be16_to_˝u
(
dib
->
bb_Àvñ
));

2226 
îr‹
++;

2229 i‡(
	`be16_to_˝u
(
dib
->
bb_numªcs
) >

2230 
	`libxfs_bmdr_maxªcs
(
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
),

2231 
	`be16_to_˝u
(
dib
->
bb_Àvñ
) == 0)) {

2232 i‡(!
sÊag
 || 
id
->
ûi°
)

2233 
	`db¥ötf
(
	`_
("numrecs for ino %lld %s fork bmapÑootÅoo "

2235 
id
->
öo
,

2236 
whichf‹k
 =
XFS_DATA_FORK
 ? 
	`_
("data") : _("attr"),

2237 
	`be16_to_˝u
(
dib
->
bb_numªcs
));

2238 
îr‹
++;

2241 i‡(
	`be16_to_˝u
(
dib
->
bb_Àvñ
) == 0) {

2242 
xfs_bmbt_ªc_t
 *
Ω
 = 
	`XFS_BMDR_REC_ADDR
(
dib
, 1);

2243 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, 
	`be16_to_˝u
(
dib
->
bb_numªcs
), 
ty≥
,

2244 
id
, 
tŸd
, 
blkm≠p
);

2245 *
√x
 +
	`be16_to_˝u
(
dib
->
bb_numªcs
);

2248 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
dib
, 1, 
	`libxfs_bmdr_maxªcs
(

2249 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
), 0));

2250 
i
 = 0; i < 
	`be16_to_˝u
(
dib
->
bb_numªcs
); i++)

2251 
	`sˇn_lbåì
(
	`gë_u«lig√d_be64
(&
µ
[
i
]),

2252 
	`be16_to_˝u
(
dib
->
bb_Àvñ
),

2253 
sˇnfunc_bm≠
, 
ty≥
, 
id
, 
tŸd
, 
tŸi
,

2254 
√x
, 
blkm≠p
, 1,

2255 
whichf‹k
 =
XFS_DATA_FORK
 ?

2256 
TYP_BMAPBTD
 : 
TYP_BMAPBTA
);

2258 i‡(*
√x
 <
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
Ë/ (
xfs_bmbt_ªc_t
)) {

2259 i‡(!
sÊag
 || 
id
->
ûi°
)

2260 
	`db¥ötf
(
	`_
("extent count for ino %lld %s forkÅooÜow "

2262 
id
->
öo
,

2263 
whichf‹k
 =
XFS_DATA_FORK
 ? 
	`_
("data") : _("attr"),

2264 *
√x
);

2265 
îr‹
++;

2267 
	}
}

2269 
xfs_öo_t


2270 
	$¥o˚ss_d©a_dú_v2
(

2271 *
dŸ
,

2272 *
dŸdŸ
,

2273 
öod©a_t
 *
id
,

2274 
v
,

2275 
xfs_dablk_t
 
dabno
,

2276 
‰ìèb_t
 **
‰ìèbp
)

2278 
xfs_dú2_d©≠å_t
 
addr
;

2279 
xfs_dú2_d©a_‰ì_t
 *
bf
;

2280 
bf_îr
;

2281 
xfs_dú2_d©a_hdr
 *
block
;

2282 
xfs_dú2_block_èû_t
 *
bç
 = 
NULL
;

2283 
öod©a_t
 *
cid
;

2284 
cou¡
;

2285 
xfs_dú2_d©a_hdr
 *
d©a
;

2286 
xfs_dú2_db_t
 
db
;

2287 
xfs_dú2_d©a_íåy_t
 *
dï
;

2288 
xfs_dú2_d©a_‰ì_t
 *
dÂ
;

2289 
xfs_dú2_d©a_unu£d_t
 *
dup
;

2290 *
íd±r
;

2291 
‰ì£í
;

2292 
‰ìèb_t
 *
‰ìèb
;

2293 
i
;

2294 
œ°‰ì
;

2295 
œ°‰ì_îr
;

2296 
xfs_dú2_Àaf_íåy_t
 *
Àp
 = 
NULL
;

2297 
xfs_öo_t
 
löo
;

2298 
xfs_öo_t
 
∑ª¡
 = 0;

2299 *
±r
;

2300 
°Æe
 = 0;

2301 
èg_îr
;

2302 
__be16
 *
ègp
;

2303 
xfs_«me
 
x«me
;

2305 
d©a
 = 
iocur_t›
->data;

2306 
block
 = 
iocur_t›
->
d©a
;

2307 i‡(
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR2_BLOCK_MAGIC
 &&

2308 
	`be32_to_˝u
(
d©a
->
magic
Ë!
XFS_DIR2_DATA_MAGIC
 &&

2309 
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR3_BLOCK_MAGIC
 &&

2310 
	`be32_to_˝u
(
d©a
->
magic
Ë!
XFS_DIR3_DATA_MAGIC
) {

2311 i‡(!
sÊag
 || 
v
)

2312 
	`db¥ötf
(
	`_
("bad directory data magic # %#x for dir ino "

2314 
	`be32_to_˝u
(
d©a
->
magic
), 
id
->
öo
, 
dabno
);

2315 
îr‹
++;

2316  
NULLFSINO
;

2318 
db
 = 
	`xfs_dú2_da_to_db
(
mp
->
m_dú_geo
, 
dabno
);

2319 
bf
 = 
	`M_DIROPS
(
mp
)->
	`d©a_be°‰ì_p
(
d©a
);

2320 
±r
 = (*)
	`M_DIROPS
(
mp
)->
	`d©a_unu£d_p
(
d©a
);

2321 i‡(
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

2322 
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
) {

2323 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

2324 
Àp
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

2325 
íd±r
 = (*)
Àp
;

2326 i‡(
íd±r
 <
±r
 ||Énd±∏> (*)
bç
) {

2327 
íd±r
 = (*)
d©a
 + 
mp
->
m_dú_geo
->
blksize
;

2328 
Àp
 = 
NULL
;

2329 i‡(!
sÊag
 || 
v
)

2330 
	`db¥ötf
(
	`_
("bad block directoryÅail for dir ino "

2332 
id
->
öo
);

2333 
îr‹
++;

2336 
íd±r
 = (*)
d©a
 + 
mp
->
m_dú_geo
->
blksize
;

2337 
bf_îr
 = 
œ°‰ì_îr
 = 
èg_îr
 = 0;

2338 
cou¡
 = 
œ°‰ì
 = 
‰ì£í
 = 0;

2339 i‡(
	`be16_to_˝u
(
bf
[0].
Àngth
) == 0) {

2340 
bf_îr
 +
	`be16_to_˝u
(
bf
[0].
off£t
) != 0;

2341 
‰ì£í
 |= 1 << 0;

2343 i‡(
	`be16_to_˝u
(
bf
[1].
Àngth
) == 0) {

2344 
bf_îr
 +
	`be16_to_˝u
(
bf
[1].
off£t
) != 0;

2345 
‰ì£í
 |= 1 << 1;

2347 i‡(
	`be16_to_˝u
(
bf
[2].
Àngth
) == 0) {

2348 
bf_îr
 +
	`be16_to_˝u
(
bf
[2].
off£t
) != 0;

2349 
‰ì£í
 |= 1 << 2;

2351 
bf_îr
 +
	`be16_to_˝u
(
bf
[0].
Àngth
) < be16_to_cpu(bf[1].length);

2352 
bf_îr
 +
	`be16_to_˝u
(
bf
[1].
Àngth
) < be16_to_cpu(bf[2].length);

2353 i‡(
‰ìèbp
) {

2354 
‰ìèb
 = *
‰ìèbp
;

2355 i‡(
‰ìèb
->
«íts
 <
db
) {

2356 *
‰ìèbp
 = 
‰ìèb
 =

2357 
	`ªÆloc
(
‰ìèb
, 
	`FREETAB_SIZE
(
db
 + 1));

2358 
i
 = 
‰ìèb
->
«íts
; i < 
db
; i++)

2359 
‰ìèb
->
íts
[
i
] = 
NULLDATAOFF
;

2360 
‰ìèb
->
«íts
 = 
db
 + 1;

2362 i‡(
‰ìèb
->
√¡s
 < 
db
 + 1)

2363 
‰ìèb
->
√¡s
 = 
db
 + 1;

2364 
‰ìèb
->
íts
[
db
] = 
	`be16_to_˝u
(
bf
[0].
Àngth
);

2366 
±r
 < 
íd±r
) {

2367 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

2368 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

2369 
œ°‰ì_îr
 +
œ°‰ì
 != 0;

2370 
ègp
 = 
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
);

2371 i‡((
	`be16_to_˝u
(
dup
->
Àngth
Ë& (
XFS_DIR2_DATA_ALIGN
 - 1)) ||

2372 
	`be16_to_˝u
(
dup
->
Àngth
) == 0 ||

2373 (*)
ègp
 >
íd±r
) {

2374 i‡(!
sÊag
 || 
v
)

2375 
	`db¥ötf
(
	`_
("dir %lld block %d bad free "

2377 
id
->
öo
, 
dabno
,

2378 ()((*)
dup
 -

2379 (*)
d©a
));

2380 
îr‹
++;

2383 
èg_îr
 +
	`be16_to_˝u
(*
ègp
Ë!(*)
dup
 - (*)
d©a
;

2384 
dÂ
 = 
	`¥o˚ss_d©a_dú_v2_‰ìföd
(
d©a
, 
dup
);

2385 i‡(
dÂ
) {

2386 
i
 = ()(
dÂ
 - 
bf
);

2387 
bf_îr
 +(
‰ì£í
 & (1 << 
i
)) != 0;

2388 
‰ì£í
 |1 << 
i
;

2390 
bf_îr
 +
	`be16_to_˝u
(
dup
->
Àngth
) >

2391 
	`be16_to_˝u
(
bf
[2].
Àngth
);

2392 
±r
 +
	`be16_to_˝u
(
dup
->
Àngth
);

2393 
œ°‰ì
 = 1;

2396 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

2397 i‡(
dï
->
«mñí
 == 0) {

2398 i‡(!
sÊag
 || 
v
)

2399 
	`db¥ötf
(
	`_
("dir %lld block %d zeroÜengthÉntry "

2401 
id
->
öo
, 
dabno
,

2402 ()((*)
dï
 - (*)
d©a
));

2403 
îr‹
++;

2405 
ègp
 = 
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
);

2406 i‡((*)
ègp
 >
íd±r
) {

2407 i‡(!
sÊag
 || 
v
)

2408 
	`db¥ötf
(
	`_
("dir %lld block %d badÉntryát %d\n"),

2409 
id
->
öo
, 
dabno
,

2410 ()((*)
dï
 - (*)
d©a
));

2411 
îr‹
++;

2414 
èg_îr
 +
	`be16_to_˝u
(*
ègp
Ë!(*)
dï
 - (*)
d©a
;

2415 
addr
 = 
	`xfs_dú2_db_off_to_d©≠å
(
mp
->
m_dú_geo
, 
db
,

2416 (*)
dï
 - (*)
d©a
);

2417 
x«me
.
«me
 = 
dï
->name;

2418 
x«me
.
Àn
 = 
dï
->
«mñí
;

2419 
	`dú_hash_add
(
mp
->
m_dú«me›s
->
	`hash«me
(&
x«me
), 
addr
);

2420 
±r
 +
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

2421 
cou¡
++;

2422 
œ°‰ì
 = 0;

2423 
löo
 = 
	`be64_to_˝u
(
dï
->
öumbî
);

2424 
cid
 = 
	`föd_öode
(
löo
, 1);

2425 i‡(
v
)

2426 
	`db¥ötf
(
	`_
("dir %lld block %dÉntry %*.*s %lld\n"),

2427 
id
->
öo
, 
dabno
, 
dï
->
«mñí
, dep->namelen,

2428 
dï
->
«me
, 
löo
);

2429 i‡(
cid
)

2430 
	`addlök_öode
(
cid
);

2432 i‡(!
sÊag
 || 
v
)

2433 
	`db¥ötf
(
	`_
("dir %lld block %dÉntry %*.*s bad "

2435 
id
->
öo
, 
dabno
, 
dï
->
«mñí
,

2436 
dï
->
«mñí
, dï->
«me
, 
löo
);

2437 
îr‹
++;

2439 i‡(
dï
->
«mñí
 =2 && dï->
«me
[0] == '.' &&

2440 
dï
->
«me
[1] == '.') {

2441 i‡(
∑ª¡
) {

2442 i‡(!
sÊag
 || 
v
)

2443 
	`db¥ötf
(
	`_
("multiple ..Éntries in dir "

2445 
id
->
öo
, 
∑ª¡
, 
löo
);

2446 
îr‹
++;

2448 
∑ª¡
 = 
cid
 ? 
löo
 : 
NULLFSINO
;

2449 (*
dŸdŸ
)++;

2450 } i‡(
dï
->
«mñí
 !1 || dï->
«me
[0] != '.') {

2451 i‡(
cid
 !
NULL
) {

2452 i‡(!
cid
->
∑ª¡
)

2453 
cid
->
∑ª¡
 = 
id
;

2454 
	`add«me_öode
(
cid
, (*)
dï
->
«me
,

2455 
dï
->
«mñí
);

2458 i‡(
löo
 !
id
->
öo
) {

2459 i‡(!
sÊag
 || 
v
)

2460 
	`db¥ötf
(
	`_
("dir %lldÉntry . inode "

2462 
id
->
öo
, 
löo
);

2463 
îr‹
++;

2465 (*
dŸ
)++;

2468 i‡(
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

2469 
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
) {

2470 
íd±r
 = (*)
d©a
 + 
mp
->
m_dú_geo
->
blksize
;

2471 
i
 = 
°Æe
 = 0; 
Àp
 && i < 
	`be32_to_˝u
(
bç
->
cou¡
); i++) {

2472 i‡((*)&
Àp
[
i
] >
íd±r
) {

2473 i‡(!
sÊag
 || 
v
)

2474 
	`db¥ötf
(
	`_
("dir %lld block %d bad count "

2475 "%u\n"), 
id
->
öo
, 
dabno
,

2476 
	`be32_to_˝u
(
bç
->
cou¡
));

2477 
îr‹
++;

2480 i‡(
	`be32_to_˝u
(
Àp
[
i
].
addªss
Ë=
XFS_DIR2_NULL_DATAPTR
)

2481 
°Æe
++;

2482 i‡(
	`dú_hash_£e
(
	`be32_to_˝u
(
Àp
[
i
].
hashvÆ
),

2483 
	`be32_to_˝u
(
Àp
[
i
].
addªss
))) {

2484 i‡(!
sÊag
 || 
v
)

2485 
	`db¥ötf
(
	`_
("dir %lld block %dÉxtraÜeaf "

2487 
id
->
öo
, 
dabno
,

2488 
	`be32_to_˝u
(
Àp
[
i
].
hashvÆ
),

2489 
	`be32_to_˝u
(
Àp
[
i
].
addªss
));

2490 
îr‹
++;

2494 
bf_îr
 +
‰ì£í
 != 7;

2495 i‡(
bf_îr
) {

2496 i‡(!
sÊag
 || 
v
)

2497 
	`db¥ötf
(
	`_
("dir %lld block %d bad bestfree data\n"),

2498 
id
->
öo
, 
dabno
);

2499 
îr‹
++;

2501 i‡((
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

2502 
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
) &&

2503 
cou¡
 !
	`be32_to_˝u
(
bç
->cou¡Ë- be32_to_˝u(bç->
°Æe
)) {

2504 i‡(!
sÊag
 || 
v
)

2505 
	`db¥ötf
(
	`_
("dir %lld block %d bad blockÅail count %d "

2507 
id
->
öo
, 
dabno
, 
	`be32_to_˝u
(
bç
->
cou¡
),

2508 
	`be32_to_˝u
(
bç
->
°Æe
));

2509 
îr‹
++;

2511 i‡((
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

2512 
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
) &&

2513 
°Æe
 !
	`be32_to_˝u
(
bç
->stale)) {

2514 i‡(!
sÊag
 || 
v
)

2515 
	`db¥ötf
(
	`_
("dir %lld block %d bad staleÅail count %d\n"),

2516 
id
->
öo
, 
dabno
, 
	`be32_to_˝u
(
bç
->
°Æe
));

2517 
îr‹
++;

2519 i‡(
œ°‰ì_îr
) {

2520 i‡(!
sÊag
 || 
v
)

2521 
	`db¥ötf
(
	`_
("dir %lld block %d consecutive freeÉntries\n"),

2522 
id
->
öo
, 
dabno
);

2523 
îr‹
++;

2525 i‡(
èg_îr
) {

2526 i‡(!
sÊag
 || 
v
)

2527 
	`db¥ötf
(
	`_
("dir %lld block %dÉntry/unusedÅag "

2529 
id
->
öo
, 
dabno
);

2530 
îr‹
++;

2532  
∑ª¡
;

2533 
	}
}

2535 
xfs_dú2_d©a_‰ì_t
 *

2536 
	$¥o˚ss_d©a_dú_v2_‰ìföd
(

2537 
xfs_dú2_d©a_hdr
 *
d©a
,

2538 
xfs_dú2_d©a_unu£d_t
 *
dup
)

2540 
xfs_dú2_d©a_‰ì
 *
bf
;

2541 
xfs_dú2_d©a_‰ì
 *
dÂ
;

2542 
xfs_dú2_d©a_aoff_t
 
off
;

2544 
off
 = (
xfs_dú2_d©a_aoff_t
)((*)
dup
 - (*)
d©a
);

2545 
bf
 = 
	`M_DIROPS
(
mp
)->
	`d©a_be°‰ì_p
(
d©a
);

2546 i‡(
	`be16_to_˝u
(
dup
->
Àngth
) <

2547 
	`be16_to_˝u
(
bf
[
XFS_DIR2_DATA_FD_COUNT
 - 1].
Àngth
))

2548  
NULL
;

2549 
dÂ
 = 
bf
; dÂ < &bf[
XFS_DIR2_DATA_FD_COUNT
]; dfp++) {

2550 i‡(
	`be16_to_˝u
(
dÂ
->
off£t
) == 0)

2551  
NULL
;

2552 i‡(
	`be16_to_˝u
(
dÂ
->
off£t
Ë=
off
)

2553  
dÂ
;

2555  
NULL
;

2556 
	}
}

2559 
	$¥o˚ss_dú
(

2560 
xfs_döode_t
 *
dù
,

2561 
blkm≠_t
 *
blkm≠
,

2562 
öod©a_t
 *
id
)

2564 
xfs_fsblock_t
 
bno
;

2565 
dŸ
;

2566 
dŸdŸ
;

2567 
xfs_öo_t
 
∑ª¡
;

2569 
dŸ
 = 
dŸdŸ
 = 0;

2570 i‡(
	`¥o˚ss_dú_v2
(
dù
, 
blkm≠
, &
dŸ
, &
dŸdŸ
, 
id
, &
∑ª¡
))

2573 
bno
 = 
	`XFS_INO_TO_FSB
(
mp
, 
id
->
öo
);

2574 i‡(
dŸ
 == 0) {

2575 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2576 
	`db¥ötf
(
	`_
("nÿ.É¡ry f‹ dúe˘‹y %Œd\n"), 
id
->
öo
);

2577 
îr‹
++;

2579 i‡(
dŸdŸ
 == 0) {

2580 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2581 
	`db¥ötf
(
	`_
("nÿ..É¡ry f‹ dúe˘‹y %Œd\n"), 
id
->
öo
);

2582 
îr‹
++;

2583 } i‡(
∑ª¡
 =
id
->
öo
 && id->öÿ!
mp
->
m_sb
.
sb_roŸöo
) {

2584 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2585 
	`db¥ötf
(
	`_
(".ánd .. same forÇon-root directory %lld\n"),

2586 
id
->
öo
);

2587 
îr‹
++;

2588 } i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_roŸöo
 && id->öÿ!
∑ª¡
) {

2589 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2590 
	`db¥ötf
(
	`_
("roŸ dúe˘‹y %Œd ha†.. %Œd\n"), 
id
->
öo
,

2591 
∑ª¡
);

2592 
îr‹
++;

2593 } i‡(
∑ª¡
 !
NULLFSINO
 && 
id
->
öo
 !=Öarent)

2594 
	`add∑ª¡_öode
(
id
, 
∑ª¡
);

2595 
	}
}

2598 
	$¥o˚ss_dú_v2
(

2599 
xfs_döode_t
 *
dù
,

2600 
blkm≠_t
 *
blkm≠
,

2601 *
dŸ
,

2602 *
dŸdŸ
,

2603 
öod©a_t
 *
id
,

2604 
xfs_öo_t
 *
∑ª¡
)

2606 
xfs_fûeoff_t
 
œ°
 = 0;

2607 
xfs_fsize_t
 
size
 = 
	`be64_to_˝u
(
dù
->
di_size
);

2609 i‡(
blkm≠
)

2610 
œ°
 = 
	`blkm≠_œ°_off
(
blkm≠
);

2611 i‡(
size
 <
	`XFS_DFORK_DSIZE
(
dù
, 
mp
) &&

2612 
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
)

2613 *
∑ª¡
 = 
	`¥o˚ss_sf_dú_v2
(
dù
, 
dŸ
, 
dŸdŸ
, 
id
);

2614 i‡(
œ°
 =
mp
->
m_dú_geo
->
fsbcou¡
 &&

2615 (
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ||

2616 
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
))

2617 *
∑ª¡
 = 
	`¥o˚ss_block_dú_v2
(
blkm≠
, 
dŸ
, 
dŸdŸ
, 
id
);

2618 i‡(
œ°
 >
mp
->
m_dú_geo
->
Àafblk
 + mp->m_dú_geo->
fsbcou¡
 &&

2619 (
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ||

2620 
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
))

2621 *
∑ª¡
 = 
	`¥o˚ss_Àaf_node_dú_v2
(
blkm≠
, 
dŸ
, 
dŸdŸ
, 
id
, 
size
);

2623 
	`db¥ötf
(
	`_
("bad size (%lld) or format (%d) for directory inode "

2625 
size
, 
dù
->
di_f‹m©
, 
id
->
öo
);

2626 
îr‹
++;

2630 
	}
}

2634 
	$¥o˚ss_exöode
(

2635 
öod©a_t
 *
id
,

2636 
xfs_döode_t
 *
dù
,

2637 
dbm_t
 
ty≥
,

2638 
xfs_rfsblock_t
 *
tŸd
,

2639 
xfs_rfsblock_t
 *
tŸi
,

2640 
xfs_exäum_t
 *
√x
,

2641 
blkm≠_t
 **
blkm≠p
,

2642 
whichf‹k
)

2644 
xfs_bmbt_ªc_t
 *
Ω
;

2646 
Ω
 = (
xfs_bmbt_ªc_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

2647 *
√x
 = 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
);

2648 i‡(*
√x
 < 0 || *√x > 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
) /

2649 (
xfs_bmbt_ªc_t
)) {

2650 i‡(!
sÊag
 || 
id
->
ûi°
)

2651 
	`db¥ötf
(
	`_
("badÇumber ofÉxtents %d for inode %lld\n"),

2652 *
√x
, 
id
->
öo
);

2653 
îr‹
++;

2656 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, *
√x
, 
ty≥
, 
id
, 
tŸd
, 
blkm≠p
);

2657 
	}
}

2660 
	$¥o˚ss_öode
(

2661 
xfs_agf_t
 *
agf
,

2662 
xfs_agöo_t
 
agöo
,

2663 
xfs_döode_t
 *
dù
,

2664 
is‰ì
)

2666 
blkm≠_t
 *
blkm≠
;

2667 
xfs_fsblock_t
 
bno
 = 0;

2668 
xfs_öode
 
xöo
;

2669 
öod©a_t
 *
id
 = 
NULL
;

2670 
xfs_öo_t
 
öo
;

2671 
xfs_exäum_t
 
√xã¡s
 = 0;

2672 
£curôy
;

2673 
xfs_rfsblock_t
 
tŸblocks
;

2674 
xfs_rfsblock_t
 
tŸdblocks
 = 0;

2675 
xfs_rfsblock_t
 
tŸiblocks
 = 0;

2676 
dbm_t
 
ty≥
;

2677 
xfs_exäum_t
 
™exã¡s
 = 0;

2678 
xfs_rfsblock_t
 
©Ÿdblocks
 = 0;

2679 
xfs_rfsblock_t
 
©Ÿiblocks
 = 0;

2680 
xfs_q˙t_t
 
bc
 = 0;

2681 
xfs_q˙t_t
 
ic
 = 0;

2682 
xfs_q˙t_t
 
rc
 = 0;

2683 
xfs_dqid_t
 
dq¥id
;

2684 
v
 = 0;

2685 
mode_t
 
mode
;

2686 
okfmts
[] = {

2688 1 << 
XFS_DINODE_FMT_DEV
,

2689 1 << 
XFS_DINODE_FMT_DEV
,

2691 (1 << 
XFS_DINODE_FMT_LOCAL
) |

2692 (1 << 
XFS_DINODE_FMT_EXTENTS
) |

2693 (1 << 
XFS_DINODE_FMT_BTREE
),

2695 1 << 
XFS_DINODE_FMT_DEV
,

2697 (1 << 
XFS_DINODE_FMT_EXTENTS
) |

2698 (1 << 
XFS_DINODE_FMT_BTREE
),

2700 (1 << 
XFS_DINODE_FMT_LOCAL
) |

2701 (1 << 
XFS_DINODE_FMT_EXTENTS
),

2703 1 << 
XFS_DINODE_FMT_DEV
,

2705 1 << 
XFS_DINODE_FMT_UUID
,

2708 *
fmäames
[] = {

2712 
	`libxfs_öode_‰om_disk
(&
xöo
, 
dù
);

2714 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
agöo
);

2715 i‡(!
is‰ì
) {

2716 
id
 = 
	`föd_öode
(
öo
, 1);

2717 
bno
 = 
	`XFS_INO_TO_FSB
(
mp
, 
öo
);

2718 
blkm≠
 = 
NULL
;

2720 
v
 = (!
sÊag
 || (
id
 && id->
ûi°
Ë|| 
	`CHECK_BLIST
(
bno
));

2721 i‡(
dù
->
di_magic
 !
	`˝u_to_be16
(
XFS_DINODE_MAGIC
)) {

2722 i‡(
is‰ì
 || 
v
)

2723 
	`db¥ötf
(
	`_
("bad magicÇumber %#x for inode %lld\n"),

2724 
	`be16_to_˝u
(
dù
->
di_magic
), 
öo
);

2725 
îr‹
++;

2728 i‡(!
	`libxfs_döode_good_vîsi⁄
(
mp
, 
xöo
.
i_d
.
di_vîsi⁄
)) {

2729 i‡(
is‰ì
 || 
v
)

2730 
	`db¥ötf
(
	`_
("bad versionÇumber %#x for inode %lld\n"),

2731 
xöo
.
i_d
.
di_vîsi⁄
, 
öo
);

2732 
îr‹
++;

2735 i‡(
is‰ì
) {

2736 i‡(
xöo
.
i_d
.
di_nblocks
 != 0) {

2737 i‡(
v
)

2738 
	`db¥ötf
(
	`_
("badÇblocks %lld for free inode "

2740 
xöo
.
i_d
.
di_nblocks
, 
öo
);

2741 
îr‹
++;

2743 i‡(
dù
->
di_∆ök
 != 0) {

2744 i‡(
v
)

2745 
	`db¥ötf
(
	`_
("badÇlink %d for free inode %lld\n"),

2746 
	`be32_to_˝u
(
dù
->
di_∆ök
), 
öo
);

2747 
îr‹
++;

2749 i‡(
dù
->
di_mode
 != 0) {

2750 i‡(
v
)

2751 
	`db¥ötf
(
	`_
("bad mode %#o for free inode %lld\n"),

2752 
	`be16_to_˝u
(
dù
->
di_mode
), 
öo
);

2753 
îr‹
++;

2758 i‡(
	`be32_to_˝u
(
dù
->
di_√xt_u∆öked
Ë!
NULLAGINO
) {

2759 i‡(
v
)

2760 
	`db¥ötf
(
	`_
("badÇext unlinked %#x for inode %lld\n"),

2761 
	`be32_to_˝u
(
dù
->
di_√xt_u∆öked
), 
öo
);

2762 
îr‹
++;

2767 
mode
 = 
	`be16_to_˝u
(
dù
->
di_mode
);

2768 i‡((((
mode
 & 
S_IFMT
) >> 12) > 15) ||

2769 (!(
okfmts
[(
mode
 & 
S_IFMT
Ë>> 12] & (1 << 
xöo
.
i_d
.
di_f‹m©
)))) {

2770 i‡(
v
)

2771 
	`db¥ötf
(
	`_
("bad format %d for inode %lldÅype %#o\n"),

2772 
xöo
.
i_d
.
di_f‹m©
, 
id
->
öo
, 
mode
 & 
S_IFMT
);

2773 
îr‹
++;

2776 i‡(()
	`XFS_DFORK_ASIZE
(
dù
, 
mp
) >=

2777 
	`XFS_LITINO
(
mp
, 
xöo
.
i_d
.
di_vîsi⁄
)) {

2778 i‡(
v
)

2779 
	`db¥ötf
(
	`_
("bad fork offset %d for inode %lld\n"),

2780 
xöo
.
i_d
.
di_f‹koff
, 
id
->
öo
);

2781 
îr‹
++;

2784 i‡(()
xöo
.
i_d
.
di_af‹m©
 > 
XFS_DINODE_FMT_BTREE
) {

2785 i‡(
v
)

2786 
	`db¥ötf
(
	`_
("badáttribute format %d for inode %lld\n"),

2787 
xöo
.
i_d
.
di_af‹m©
, 
id
->
öo
);

2788 
îr‹
++;

2791 i‡(
vîbo£
 || (
id
 && id->
ûi°
Ë|| 
	`CHECK_BLIST
(
bno
))

2792 
	`db¥ötf
(
	`_
("inode %lld mode %#o fmt %s "

2795 
id
->
öo
, 
mode
, 
fmäames
[()
xöo
.
i_d
.
di_f‹m©
],

2796 
fmäames
[()
xöo
.
i_d
.
di_af‹m©
],

2797 
xöo
.
i_d
.
di_√xã¡s
,

2798 
xöo
.
i_d
.
di_™exã¡s
,

2799 
xöo
.
i_d
.
di_nblocks
, xöo.i_d.
di_size
,

2800 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_REALTIME
 ? "Ñt" : "",

2801 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_PREALLOC
 ? "Öre" : "",

2802 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_IMMUTABLE
? " imm" : "",

2803 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_APPEND
 ? "ápp" : "",

2804 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_SYNC
 ? " syn" : "",

2805 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_NOATIME
 ? "Çoa" : "",

2806 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_NODUMP
 ? "Çod" : "");

2807 
£curôy
 = 0;

2808 
mode
 & 
S_IFMT
) {

2809 
S_IFDIR
:

2810 
ty≥
 = 
DBM_DIR
;

2811 i‡(
xöo
.
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
)

2813 
blkm≠
 = 
	`blkm≠_Æloc
(
xöo
.
i_d
.
di_√xã¡s
);

2815 
S_IFREG
:

2816 i‡(
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_REALTIME
)

2817 
ty≥
 = 
DBM_RTDATA
;

2818 i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_rbmöo
) {

2819 
ty≥
 = 
DBM_RTBITMAP
;

2820 
blkm≠
 = 
	`blkm≠_Æloc
(
xöo
.
i_d
.
di_√xã¡s
);

2821 
	`addlök_öode
(
id
);

2822 } i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_rsumöo
) {

2823 
ty≥
 = 
DBM_RTSUM
;

2824 
blkm≠
 = 
	`blkm≠_Æloc
(
xöo
.
i_d
.
di_√xã¡s
);

2825 
	`addlök_öode
(
id
);

2827 i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_uquŸöo
 ||

2828 
id
->
öo
 =
mp
->
m_sb
.
sb_gquŸöo
 ||

2829 
id
->
öo
 =
mp
->
m_sb
.
sb_pquŸöo
) {

2830 
ty≥
 = 
DBM_QUOTA
;

2831 
blkm≠
 = 
	`blkm≠_Æloc
(
xöo
.
i_d
.
di_√xã¡s
);

2832 
	`addlök_öode
(
id
);

2835 
ty≥
 = 
DBM_DATA
;

2836 i‡(
mode
 & (
S_ISUID
 | 
S_ISGID
))

2837 
£curôy
 = 1;

2839 
S_IFLNK
:

2840 
ty≥
 = 
DBM_SYMLINK
;

2843 
£curôy
 = 1;

2844 
ty≥
 = 
DBM_UNKNOWN
;

2848 
id
->
i§eÊök
 = !!(
xöo
.
i_d
.
di_Êags2
 & 
XFS_DIFLAG2_REFLINK
);

2849 
	`£éök_öode
(
id
, 
	`VFS_I
(&
xöo
)->
i_∆ök
, 
ty≥
 =
DBM_DIR
, 
£curôy
);

2851 
xöo
.
i_d
.
di_f‹m©
) {

2852 
XFS_DINODE_FMT_LOCAL
:

2853 
	`¥o˚ss_l˛öode
(
id
, 
dù
, 
ty≥
, &
tŸdblocks
, &
tŸiblocks
,

2854 &
√xã¡s
, &
blkm≠
, 
XFS_DATA_FORK
);

2856 
XFS_DINODE_FMT_EXTENTS
:

2857 
	`¥o˚ss_exöode
(
id
, 
dù
, 
ty≥
, &
tŸdblocks
, &
tŸiblocks
,

2858 &
√xã¡s
, &
blkm≠
, 
XFS_DATA_FORK
);

2860 
XFS_DINODE_FMT_BTREE
:

2861 
	`¥o˚ss_btöode
(
id
, 
dù
, 
ty≥
, &
tŸdblocks
, &
tŸiblocks
,

2862 &
√xã¡s
, &
blkm≠
, 
XFS_DATA_FORK
);

2865 i‡(
	`XFS_DFORK_Q
(
dù
)) {

2866 
sbvîsi⁄
 |
XFS_SB_VERSION_ATTRBIT
;

2867 
xöo
.
i_d
.
di_af‹m©
) {

2868 
XFS_DINODE_FMT_LOCAL
:

2869 
	`¥o˚ss_l˛öode
(
id
, 
dù
, 
DBM_ATTR
, &
©Ÿdblocks
,

2870 &
©Ÿiblocks
, &
™exã¡s
, 
NULL
, 
XFS_ATTR_FORK
);

2872 
XFS_DINODE_FMT_EXTENTS
:

2873 
	`¥o˚ss_exöode
(
id
, 
dù
, 
DBM_ATTR
, &
©Ÿdblocks
,

2874 &
©Ÿiblocks
, &
™exã¡s
, 
NULL
, 
XFS_ATTR_FORK
);

2876 
XFS_DINODE_FMT_BTREE
:

2877 
	`¥o˚ss_btöode
(
id
, 
dù
, 
DBM_ATTR
, &
©Ÿdblocks
,

2878 &
©Ÿiblocks
, &
™exã¡s
, 
NULL
, 
XFS_ATTR_FORK
);

2882 i‡(
qgdo
 || 
qpdo
 || 
qudo
) {

2883 
ty≥
) {

2884 
DBM_DATA
:

2885 
DBM_DIR
:

2886 
DBM_RTBITMAP
:

2887 
DBM_RTSUM
:

2888 
DBM_SYMLINK
:

2889 
DBM_UNKNOWN
:

2890 
bc
 = 
tŸdblocks
 + 
tŸiblocks
 +

2891 
©Ÿdblocks
 + 
©Ÿiblocks
;

2892 
ic
 = 1;

2894 
DBM_RTDATA
:

2895 
bc
 = 
tŸiblocks
 + 
©Ÿdblocks
 + 
©Ÿiblocks
;

2896 
rc
 = 
tŸdblocks
;

2897 
ic
 = 1;

2902 i‡(
ic
) {

2903 
dq¥id
 = 
	`xfs_gë_¥ojid
(&
xöo
.
i_d
);

2904 
	`quŸa_add
(&
dq¥id
, &
xöo
.
i_d
.
di_gid
, &xöo.i_d.
di_uid
,

2905 0, 
bc
, 
ic
, 
rc
);

2908 
tŸblocks
 = 
tŸdblocks
 + 
tŸiblocks
 + 
©Ÿdblocks
 + 
©Ÿiblocks
;

2909 i‡(
tŸblocks
 !
xöo
.
i_d
.
di_nblocks
) {

2910 i‡(
v
)

2911 
	`db¥ötf
(
	`_
("badÇblocks %lld for inode %lld, counted "

2913 
xöo
.
i_d
.
di_nblocks
, 
id
->
öo
, 
tŸblocks
);

2914 
îr‹
++;

2916 i‡(
√xã¡s
 !
xöo
.
i_d
.
di_√xã¡s
) {

2917 i‡(
v
)

2918 
	`db¥ötf
(
	`_
("badÇextents %d for inode %lld, counted %d\n"),

2919 
xöo
.
i_d
.
di_√xã¡s
, 
id
->
öo
, 
√xã¡s
);

2920 
îr‹
++;

2922 i‡(
™exã¡s
 !
xöo
.
i_d
.
di_™exã¡s
) {

2923 i‡(
v
)

2924 
	`db¥ötf
(
	`_
("badánextents %d for inode %lld, counted "

2926 
xöo
.
i_d
.
di_™exã¡s
, 
id
->
öo
, 
™exã¡s
);

2927 
îr‹
++;

2929 i‡(
ty≥
 =
DBM_DIR
)

2930 
	`¥o˚ss_dú
(
dù
, 
blkm≠
, 
id
);

2931 i‡(
ty≥
 =
DBM_RTBITMAP
)

2932 
	`¥o˚ss_πbôm≠
(
blkm≠
);

2933 i‡(
ty≥
 =
DBM_RTSUM
)

2934 
	`¥o˚ss_πsumm¨y
(
blkm≠
);

2939 i‡(
ty≥
 =
DBM_QUOTA
) {

2940 i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_uquŸöo
 &&

2941 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_UQUOTA_ACCT
) &&

2942 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_UQUOTA_CHKD
))

2943 
	`¥o˚ss_quŸa
(
IS_USER_QUOTA
, 
id
, 
blkm≠
);

2944 i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_gquŸöo
 &&

2945 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_GQUOTA_ACCT
) &&

2946 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_GQUOTA_CHKD
))

2947 
	`¥o˚ss_quŸa
(
IS_GROUP_QUOTA
, 
id
, 
blkm≠
);

2948 i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_pquŸöo
 &&

2949 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_PQUOTA_ACCT
) &&

2950 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_PQUOTA_CHKD
))

2951 
	`¥o˚ss_quŸa
(
IS_PROJECT_QUOTA
, 
id
, 
blkm≠
);

2953 i‡(
blkm≠
)

2954 
	`blkm≠_‰ì
(
blkm≠
);

2955 
	}
}

2959 
	$¥o˚ss_l˛öode
(

2960 
öod©a_t
 *
id
,

2961 
xfs_döode_t
 *
dù
,

2962 
dbm_t
 
ty≥
,

2963 
xfs_rfsblock_t
 *
tŸd
,

2964 
xfs_rfsblock_t
 *
tŸi
,

2965 
xfs_exäum_t
 *
√x
,

2966 
blkm≠_t
 **
blkm≠p
,

2967 
whichf‹k
)

2969 
xfs_©å_sh‹tf‹m_t
 *
asf
;

2970 
xfs_fsblock_t
 
bno
;

2972 
bno
 = 
	`XFS_INO_TO_FSB
(
mp
, 
id
->
öo
);

2973 i‡(
whichf‹k
 =
XFS_DATA_FORK
 && 
	`be64_to_˝u
(
dù
->
di_size
) >

2974 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
)) {

2975 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2976 
	`db¥ötf
(
	`_
("local inode %lld data isÅooÜarge (size "

2978 
id
->
öo
, 
	`be64_to_˝u
(
dù
->
di_size
));

2979 
îr‹
++;

2981 i‡(
whichf‹k
 =
XFS_ATTR_FORK
) {

2982 
asf
 = (
xfs_©å_sh‹tf‹m_t
 *)
	`XFS_DFORK_APTR
(
dù
);

2983 i‡(
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
Ë> 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
)) {

2984 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2985 
	`db¥ötf
(
	`_
("local inode %lldáttr isÅooÜarge "

2987 
id
->
öo
, 
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
));

2988 
îr‹
++;

2991 
	}
}

2993 
xfs_öo_t


2994 
	$¥o˚ss_Àaf_node_dú_v2
(

2995 
blkm≠_t
 *
blkm≠
,

2996 *
dŸ
,

2997 *
dŸdŸ
,

2998 
öod©a_t
 *
id
,

2999 
xfs_fsize_t
 
dúsize
)

3001 
xfs_fsblock_t
 
b
;

3002 
bbm≠_t
 
bbm≠
;

3003 
bm≠_ext_t
 *
bmp
;

3004 
xfs_fûeoff_t
 
dbno
;

3005 
‰ìèb_t
 *
‰ìèb
;

3006 
i
;

3007 
xfs_öo_t
 
löo
;

3008 
√x
;

3009 
xfs_öo_t
 
∑ª¡
;

3010 
t
 = 0;

3011 
v
;

3012 
v2
;

3013 
x
;

3015 
v2
 = 
vîbo£
 || 
id
->
ûi°
;

3016 
v
 = 
∑ª¡
 = 0;

3017 
dbno
 = 
NULLFILEOFF
;

3018 
‰ìèb
 = 
	`mÆloc
(
	`FREETAB_SIZE
(
dúsize
 / 
mp
->
m_dú_geo
->
blksize
));

3019 
‰ìèb
->
«íts
 = ()(
dúsize
 / 
mp
->
m_dú_geo
->
blksize
);

3020 
‰ìèb
->
√¡s
 = 0;

3021 
i
 = 0; i < 
‰ìèb
->
«íts
; i++)

3022 
‰ìèb
->
íts
[
i
] = 
NULLDATAOFF
;

3023 
	`dú_hash_öô
();

3024 (
dbno
 = 
	`blkm≠_√xt_off
(
blkm≠
, dbno, &
t
)Ë!
NULLFILEOFF
) {

3025 
√x
 = 
	`blkm≠_gën
(
blkm≠
, 
dbno
, 
mp
->
m_dú_geo
->
fsbcou¡
, &
bmp
);

3026 
	`ASSERT
(
√x
 > 0);

3027 
v
 = 
v2
, 
x
 = 0; !v && x < 
√x
; x++) {

3028 
b
 = 
bmp
[
x
].
°¨tblock
;

3029 !
v
 && 
b
 < 
bmp
[
x
].
°¨tblock
 + bmp[x].
blockcou¡
;

3030 
b
++)

3031 
v
 = 
	`CHECK_BLIST
(
b
);

3033 i‡(
v
)

3034 
	`db¥ötf
(
	`_
("dú inodê%Œd block %u=%Œu\n"), 
id
->
öo
,

3035 (
__uöt32_t
)
dbno
,

3036 (
xfs_fsblock_t
)
bmp
->
°¨tblock
);

3037 
	`push_cur
();

3038 i‡(
√x
 > 1)

3039 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

3040 
	`£t_cur
(&
ty±ab
[
TYP_DIR2
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bmp
->
°¨tblock
),

3041 
mp
->
m_dú_geo
->
fsbcou¡
 * 
blkbb
, 
DB_RING_IGN
,

3042 
√x
 > 1 ? &
bbm≠
 : 
NULL
);

3043 
	`‰ì
(
bmp
);

3044 i‡(
iocur_t›
->
d©a
 =
NULL
) {

3045 i‡(!
sÊag
 || 
v
)

3046 
	`db¥ötf
(
	`_
("can'tÑead block %u for directory "

3048 (
__uöt32_t
)
dbno
, 
id
->
öo
);

3049 
îr‹
++;

3050 
	`p›_cur
();

3051 
dbno
 +
mp
->
m_dú_geo
->
fsbcou¡
 - 1;

3054 i‡(
dbno
 < 
mp
->
m_dú_geo
->
Àafblk
) {

3055 
löo
 = 
	`¥o˚ss_d©a_dú_v2
(
dŸ
, 
dŸdŸ
, 
id
, 
v
,

3056 (
xfs_dablk_t
)
dbno
, &
‰ìèb
);

3057 i‡(
löo
) {

3058 i‡(
∑ª¡
) {

3059 i‡(!
sÊag
 || 
v
)

3060 
	`db¥ötf
(
	`_
("multiple ..Éntries "

3062 
id
->
öo
);

3063 
îr‹
++;

3065 
∑ª¡
 = 
löo
;

3067 } i‡(
dbno
 < 
mp
->
m_dú_geo
->
‰ìblk
) {

3068 
	`¥o˚ss_Àaf_node_dú_v2_öt
(
id
, 
v
, (
xfs_dablk_t
)
dbno
,

3069 
‰ìèb
);

3071 
	`¥o˚ss_Àaf_node_dú_v2_‰ì
(
id
, 
v
, (
xfs_dablk_t
)
dbno
,

3072 
‰ìèb
);

3074 
	`p›_cur
();

3075 
dbno
 +
mp
->
m_dú_geo
->
fsbcou¡
 - 1;

3077 
	`dú_hash_check
(
id
, 
v
);

3078 
	`dú_hash_d⁄e
();

3079 
i
 = 0; i < 
‰ìèb
->
√¡s
; i++) {

3080 i‡(
‰ìèb
->
íts
[
i
] !
NULLDATAOFF
) {

3081 i‡(!
sÊag
 || 
v
)

3082 
	`db¥ötf
(
	`_
("missing free index for data block %d "

3084 
	`xfs_dú2_db_to_da
(
mp
->
m_dú_geo
, 
i
), 
id
->
öo
);

3085 
îr‹
++;

3088 
	`‰ì
(
‰ìèb
);

3089  
∑ª¡
;

3090 
	}
}

3093 
	$¥o˚ss_Àaf_node_dú_v3_‰ì
(

3094 
öod©a_t
 *
id
,

3095 
v
,

3096 
xfs_dablk_t
 
dabno
,

3097 
‰ìèb_t
 *
‰ìèb
)

3099 
xfs_dú2_d©a_off_t
 
ít
;

3100 
xfs_dú3_‰ì
 *
‰ì
;

3101 
i
;

3102 
maxít
;

3103 
u£d
;

3105 
‰ì
 = 
iocur_t›
->
d©a
;

3106 
maxít
 = 
	`M_DIROPS
(
mp
)->
	`‰ì_max_be°s
(mp->
m_dú_geo
);

3107 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë!
	`xfs_dú2_da_to_db
(
mp
->
m_dú_geo
,

3108 
dabno
 - 
mp
->
m_dú_geo
->
‰ìblk
Ë* 
maxít
) {

3109 i‡(!
sÊag
 || 
v
)

3110 
	`db¥ötf
(
	`_
("bad free block firstdb %d for dir ino %lld "

3112 
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
), 
id
->
öo
, 
dabno
);

3113 
îr‹
++;

3116 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
Ë> 
maxít
 ||

3117 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
Ë> 
maxít
 ||

3118 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
) >

3119 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
)) {

3120 i‡(!
sÊag
 || 
v
)

3121 
	`db¥ötf
(
	`_
("bad free blockÇvalid/nused %d/%d for dir "

3123 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
),

3124 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
), 
id
->
öo
, 
dabno
);

3125 
îr‹
++;

3128 
u£d
 = 
i
 = 0; i < 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
); i++) {

3129 i‡(
‰ìèb
->
√¡s
 <
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
)

3130 
ít
 = 
NULLDATAOFF
;

3132 
ít
 = 
‰ìèb
->
íts
[
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
];

3133 i‡(
ít
 !
	`be16_to_˝u
(
‰ì
->
be°s
[
i
])) {

3134 i‡(!
sÊag
 || 
v
)

3135 
	`db¥ötf
(
	`_
("bad free blockÉnt %d is %d should "

3137 
i
, 
	`be16_to_˝u
(
‰ì
->
be°s
[i]), 
ít
,

3138 
id
->
öo
, 
dabno
);

3139 
îr‹
++;

3141 i‡(
	`be16_to_˝u
(
‰ì
->
be°s
[
i
]Ë!
NULLDATAOFF
)

3142 
u£d
++;

3143 i‡(
ít
 !
NULLDATAOFF
)

3144 
‰ìèb
->
íts
[
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
] =

3145 
NULLDATAOFF
;

3147 i‡(
u£d
 !
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
)) {

3148 i‡(!
sÊag
 || 
v
)

3149 
	`db¥ötf
(
	`_
("bad free blockÇused %d should be %d for dir "

3151 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
), 
u£d
, 
id
->
öo
,

3152 
dabno
);

3153 
îr‹
++;

3155 
	}
}

3158 
	$¥o˚ss_Àaf_node_dú_v2_‰ì
(

3159 
öod©a_t
 *
id
,

3160 
v
,

3161 
xfs_dablk_t
 
dabno
,

3162 
‰ìèb_t
 *
‰ìèb
)

3164 
xfs_dú2_d©a_off_t
 
ít
;

3165 
xfs_dú2_‰ì_t
 *
‰ì
;

3166 
i
;

3167 
maxít
;

3168 
u£d
;

3170 
‰ì
 = 
iocur_t›
->
d©a
;

3171 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
Ë!
XFS_DIR2_FREE_MAGIC
 &&

3172 
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
Ë!
XFS_DIR3_FREE_MAGIC
) {

3173 i‡(!
sÊag
 || 
v
)

3174 
	`db¥ötf
(
	`_
("bad free block magic # %#x for dir ino %lld "

3176 
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
), 
id
->
öo
, 
dabno
);

3177 
îr‹
++;

3180 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
Ë=
XFS_DIR3_FREE_MAGIC
) {

3181 
	`¥o˚ss_Àaf_node_dú_v3_‰ì
(
id
, 
v
, 
dabno
, 
‰ìèb
);

3184 
maxít
 = 
	`M_DIROPS
(
mp
)->
	`‰ì_max_be°s
(mp->
m_dú_geo
);

3185 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë!
	`xfs_dú2_da_to_db
(
mp
->
m_dú_geo
,

3186 
dabno
 - 
mp
->
m_dú_geo
->
‰ìblk
Ë* 
maxít
) {

3187 i‡(!
sÊag
 || 
v
)

3188 
	`db¥ötf
(
	`_
("bad free block firstdb %d for dir ino %lld "

3190 
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
), 
id
->
öo
, 
dabno
);

3191 
îr‹
++;

3194 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
Ë> 
maxít
 ||

3195 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
) < 0 ||

3196 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
Ë> 
maxít
 ||

3197 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
) < 0 ||

3198 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
) >

3199 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
)) {

3200 i‡(!
sÊag
 || 
v
)

3201 
	`db¥ötf
(
	`_
("bad free blockÇvalid/nused %d/%d for dir "

3203 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
),

3204 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
), 
id
->
öo
, 
dabno
);

3205 
îr‹
++;

3208 
u£d
 = 
i
 = 0; i < 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
); i++) {

3209 i‡(
‰ìèb
->
√¡s
 <
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
)

3210 
ít
 = 
NULLDATAOFF
;

3212 
ít
 = 
‰ìèb
->
íts
[
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
];

3213 i‡(
ít
 !
	`be16_to_˝u
(
‰ì
->
be°s
[
i
])) {

3214 i‡(!
sÊag
 || 
v
)

3215 
	`db¥ötf
(
	`_
("bad free blockÉnt %d is %d should "

3217 
i
, 
	`be16_to_˝u
(
‰ì
->
be°s
[i]), 
ít
,

3218 
id
->
öo
, 
dabno
);

3219 
îr‹
++;

3221 i‡(
	`be16_to_˝u
(
‰ì
->
be°s
[
i
]Ë!
NULLDATAOFF
)

3222 
u£d
++;

3223 i‡(
ít
 !
NULLDATAOFF
)

3224 
‰ìèb
->
íts
[
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
] =

3225 
NULLDATAOFF
;

3227 i‡(
u£d
 !
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
)) {

3228 i‡(!
sÊag
 || 
v
)

3229 
	`db¥ötf
(
	`_
("bad free blockÇused %d should be %d for dir "

3231 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
), 
u£d
, 
id
->
öo
,

3232 
dabno
);

3233 
îr‹
++;

3235 
	}
}

3240 
ölöe
 

3241 
	$xfs_dú3_Àaf_íts_cou¡
(
xfs_dú2_Àaf
 *
Õ
)

3243 i‡(
Õ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAF1_MAGIC
) ||

3244 
Õ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
)) {

3245 
xfs_dú3_Àaf
 *
Õ3
 = (xfs_dú3_Àa‡*)
Õ
;

3247  
	`be16_to_˝u
(
Õ3
->
hdr
.
cou¡
);

3249  
	`be16_to_˝u
(
Õ
->
hdr
.
cou¡
);

3250 
	}
}

3253 
	$¥o˚ss_Àaf_node_dú_v2_öt
(

3254 
öod©a_t
 *
id
,

3255 
v
,

3256 
xfs_dablk_t
 
dabno
,

3257 
‰ìèb_t
 *
‰ìèb
)

3259 
i
;

3260 
__be16
 *
lbp
;

3261 
xfs_dú2_Àaf_t
 *
Àaf
;

3262 
xfs_dú3_Àaf
 *
Àaf3
 = 
NULL
;

3263 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

3264 
xfs_dú2_Àaf_èû_t
 *
…p
;

3265 
xfs_da_öäode_t
 *
node
;

3266 
°Æe
;

3267 
xfs_da3_i˙ode_hdr
 
nodehdr
;

3269 
Àaf
 = 
iocur_t›
->
d©a
;

3270 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
)) {

3271 
XFS_DIR3_LEAF1_MAGIC
:

3272 
XFS_DIR3_LEAFN_MAGIC
:

3273 
XFS_DA3_NODE_MAGIC
:

3274 
Àaf3
 = 
iocur_t›
->
d©a
;

3277 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
)) {

3278 
XFS_DIR2_LEAF1_MAGIC
:

3279 
XFS_DIR3_LEAF1_MAGIC
:

3280 i‡(
	`be32_to_˝u
(
Àaf
->
hdr
.
öfo
.
f‹w
) ||

3281 
	`be32_to_˝u
(
Àaf
->
hdr
.
öfo
.
back
)) {

3282 i‡(!
sÊag
 || 
v
)

3283 
	`db¥ötf
(
	`_
("badÜeaf block forw/backÖointers "

3285 
	`be32_to_˝u
(
Àaf
->
hdr
.
öfo
.
f‹w
),

3286 
	`be32_to_˝u
(
Àaf
->
hdr
.
öfo
.
back
),

3287 
id
->
öo
, 
dabno
);

3288 
îr‹
++;

3290 i‡(
dabno
 !
mp
->
m_dú_geo
->
Àafblk
) {

3291 i‡(!
sÊag
 || 
v
)

3292 
	`db¥ötf
(
	`_
("singleÜeaf block for dir ino %lld "

3294 
id
->
öo
, 
dabno
,

3295 (
xfs_dablk_t
)
mp
->
m_dú_geo
->
Àafblk
);

3296 
îr‹
++;

3298 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
mp
->
m_dú_geo
, 
Àaf
);

3299 
lbp
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
);

3300 
i
 = 0; i < 
	`be32_to_˝u
(
…p
->
be°cou¡
); i++) {

3301 i‡(
‰ìèb
->
√¡s
 <
i
 || fªëab->
íts
[i] !=

3302 
	`be16_to_˝u
(
lbp
[
i
])) {

3303 i‡(!
sÊag
 || 
v
)

3304 
	`db¥ötf
(
	`_
("bestfree %d for dir ino %lld "

3307 
‰ìèb
->
√¡s
 <
i
 ?

3308 
NULLDATAOFF
 :

3309 
‰ìèb
->
íts
[
i
],

3310 
id
->
öo
,

3311 
	`xfs_dú2_db_to_da
(
mp
->
m_dú_geo
, 
i
),

3312 
	`be16_to_˝u
(
lbp
[
i
]));

3314 i‡(
‰ìèb
->
√¡s
 > 
i
)

3315 
‰ìèb
->
íts
[
i
] = 
NULLDATAOFF
;

3318 
XFS_DIR2_LEAFN_MAGIC
:

3319 
XFS_DIR3_LEAFN_MAGIC
:

3323 
XFS_DA_NODE_MAGIC
:

3324 
XFS_DA3_NODE_MAGIC
:

3325 
node
 = 
iocur_t›
->
d©a
;

3326 
	`M_DIROPS
(
mp
)->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

3327 i‡(
nodehdr
.
Àvñ
 < 1 ||Çodehdr.Àvñ > 
XFS_DA_NODE_MAXDEPTH
) {

3328 i‡(!
sÊag
 || 
v
)

3329 
	`db¥ötf
(
	`_
("badÇode blockÜevel %d for dir ino "

3331 
nodehdr
.
Àvñ
, 
id
->
öo
,

3332 
dabno
);

3333 
îr‹
++;

3337 i‡(!
sÊag
 || 
v
)

3338 
	`db¥ötf
(
	`_
("bad directory data magic # %#x for dir ino "

3340 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
), 
id
->
öo
,

3341 
dabno
);

3342 
îr‹
++;

3345 
Àp
 = 
	`M_DIROPS
(
mp
)->
	`Àaf_íts_p
(
Àaf
);

3346 
i
 = 
°Æe
 = 0; i < 
	`xfs_dú3_Àaf_íts_cou¡
(
Àaf
); i++) {

3347 i‡(
	`be32_to_˝u
(
Àp
[
i
].
addªss
Ë=
XFS_DIR2_NULL_DATAPTR
)

3348 
°Æe
++;

3349 i‡(
	`dú_hash_£e
(
	`be32_to_˝u
(
Àp
[
i
].
hashvÆ
),

3350 
	`be32_to_˝u
(
Àp
[
i
].
addªss
))) {

3351 i‡(!
sÊag
 || 
v
)

3352 
	`db¥ötf
(
	`_
("dir %lld block %dÉxtraÜeafÉntry "

3353 "%x %x\n"), 
id
->
öo
, 
dabno
,

3354 
	`be32_to_˝u
(
Àp
[
i
].
hashvÆ
),

3355 
	`be32_to_˝u
(
Àp
[
i
].
addªss
));

3356 
îr‹
++;

3359 i‡(
Àaf3
 && 
°Æe
 !
	`be16_to_˝u
÷óf3->
hdr
.stale)) {

3360 i‡(!
sÊag
 || 
v
)

3361 
	`db¥ötf
(
	`_
("dir3 %lld block %d stale mismatch "

3363 
id
->
öo
, 
dabno
, 
°Æe
,

3364 
	`be16_to_˝u
(
Àaf3
->
hdr
.
°Æe
));

3365 
îr‹
++;

3366 } i‡(!
Àaf
 && 
°Æe
 !
	`be16_to_˝u
÷óf->
hdr
.stale)) {

3367 i‡(!
sÊag
 || 
v
)

3368 
	`db¥ötf
(
	`_
("dir %lld block %d stale mismatch "

3370 
id
->
öo
, 
dabno
, 
°Æe
,

3371 
	`be16_to_˝u
(
Àaf
->
hdr
.
°Æe
));

3372 
îr‹
++;

3374 
	}
}

3377 
	$¥o˚ss_quŸa
(

3378 
qty≥_t
 
qty≥
,

3379 
öod©a_t
 *
id
,

3380 
blkm≠_t
 *
blkm≠
)

3382 
xfs_fsblock_t
 
bno
;

3383 
cb
;

3384 
xfs_dqblk_t
 *
dqb
;

3385 
xfs_dqid_t
 
dqid
;

3386 
u_öt8_t
 
exp_Êags
 = 0;

3387 
uöt
 
i
;

3388 
uöt
 
≥rblock
;

3389 
xfs_fûeoff_t
 
qbno
;

3390 *
s
 = 
NULL
;

3391 
scicb
;

3392 
t
 = 0;

3394 
qty≥
) {

3395 
IS_USER_QUOTA
:

3396 
s
 = "user";

3397 
exp_Êags
 = 
XFS_DQ_USER
;

3399 
IS_PROJECT_QUOTA
:

3400 
s
 = "project";

3401 
exp_Êags
 = 
XFS_DQ_PROJ
;

3403 
IS_GROUP_QUOTA
:

3404 
s
 = "group";

3405 
exp_Êags
 = 
XFS_DQ_GROUP
;

3408 
	`ASSERT
(0);

3411 
≥rblock
 = (
uöt
)(
mp
->
m_sb
.
sb_blocksize
 / (*
dqb
));

3412 
dqid
 = 0;

3413 
qbno
 = 
NULLFILEOFF
;

3414 (
qbno
 = 
	`blkm≠_√xt_off
(
blkm≠
, qbno, &
t
)Ë!
NULLFILEOFF
) {

3415 
bno
 = 
	`blkm≠_gë
(
blkm≠
, 
qbno
);

3416 
dqid
 = (
xfs_dqid_t
)
qbno
 * 
≥rblock
;

3417 
cb
 = 
	`CHECK_BLIST
(
bno
);

3418 
scicb
 = !
sÊag
 || 
id
->
ûi°
 || 
cb
;

3419 
	`push_cur
();

3420 
	`£t_cur
(&
ty±ab
[
TYP_DQBLK
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
), 
blkbb
,

3421 
DB_RING_IGN
, 
NULL
);

3422 i‡((
dqb
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

3423 i‡(
scicb
)

3424 
	`db¥ötf
(
	`_
("can'tÑead block %lld for %s quota "

3426 (
xfs_fûeoff_t
)
qbno
, 
s
,

3427 (
xfs_fsblock_t
)
bno
);

3428 
îr‹
++;

3429 
	`p›_cur
();

3432 
i
 = 0; i < 
≥rblock
; i++, 
dqid
++, 
dqb
++) {

3433 i‡(
vîbo£
 || 
id
->
ûi°
 || 
cb
)

3434 
	`db¥ötf
(
	`_
("%s dqblk %lldÉntry %d id %u bc "

3436 
s
, (
xfs_fûeoff_t
)
qbno
, 
i
, 
dqid
,

3437 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_bcou¡
),

3438 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_icou¡
),

3439 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_πbcou¡
));

3440 i‡(
	`be16_to_˝u
(
dqb
->
dd_diskdq
.
d_magic
Ë!
XFS_DQUOT_MAGIC
) {

3441 i‡(
scicb
)

3442 
	`db¥ötf
(
	`_
("bad magicÇumber %#x for %s "

3444 
	`be16_to_˝u
(
dqb
->
dd_diskdq
.
d_magic
), 
s
,

3445 (
xfs_fûeoff_t
)
qbno
, 
i
, 
dqid
);

3446 
îr‹
++;

3449 i‡(
dqb
->
dd_diskdq
.
d_vîsi⁄
 !
XFS_DQUOT_VERSION
) {

3450 i‡(
scicb
)

3451 
	`db¥ötf
(
	`_
("bad versionÇumber %#x for "

3454 
dqb
->
dd_diskdq
.
d_vîsi⁄
, 
s
,

3455 (
xfs_fûeoff_t
)
qbno
, 
i
, 
dqid
);

3456 
îr‹
++;

3459 i‡(
dqb
->
dd_diskdq
.
d_Êags
 !
exp_Êags
) {

3460 i‡(
scicb
)

3461 
	`db¥ötf
(
	`_
("bad flags %#x for %s dqblk "

3463 
dqb
->
dd_diskdq
.
d_Êags
, 
s
,

3464 (
xfs_fûeoff_t
)
qbno
, 
i
, 
dqid
);

3465 
îr‹
++;

3468 i‡(
	`be32_to_˝u
(
dqb
->
dd_diskdq
.
d_id
Ë!
dqid
) {

3469 i‡(
scicb
)

3470 
	`db¥ötf
(
	`_
("bad id %u for %s dqblk %lld "

3472 
	`be32_to_˝u
(
dqb
->
dd_diskdq
.
d_id
), 
s
,

3473 (
xfs_fûeoff_t
)
qbno
, 
i
, 
dqid
);

3474 
îr‹
++;

3477 
	`quŸa_add
((
qty≥
 =
IS_PROJECT_QUOTA
Ë? &
dqid
 : 
NULL
,

3478 (
qty≥
 =
IS_GROUP_QUOTA
Ë? &
dqid
 : 
NULL
,

3479 (
qty≥
 =
IS_USER_QUOTA
Ë? &
dqid
 : 
NULL
,

3481 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_bcou¡
),

3482 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_icou¡
),

3483 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_πbcou¡
));

3485 
	`p›_cur
();

3487 
	}
}

3490 
	$¥o˚ss_πbôm≠
(

3491 
blkm≠_t
 *
blkm≠
)

3493 
bô
;

3494 
bô•îblock
;

3495 
xfs_fûeoff_t
 
bmbno
;

3496 
xfs_fsblock_t
 
bno
;

3497 
xfs_πblock_t
 
exäo
;

3498 
Àn
;

3499 
log
;

3500 
offs
;

3501 
¥evbô
;

3502 
xfs_rfsblock_t
 
πbno
;

3503 
°¨t_bmbno
;

3504 
°¨t_bô
;

3505 
t
;

3506 
xfs_πw‹d_t
 *
w‹ds
;

3508 
bô•îblock
 = 
mp
->
m_sb
.
sb_blocksize
 * 
NBBY
;

3509 
bô
 = 
exäo
 = 
¥evbô
 = 
°¨t_bmbno
 = 
°¨t_bô
 = 0;

3510 
bmbno
 = 
NULLFILEOFF
;

3511 (
bmbno
 = 
	`blkm≠_√xt_off
(
blkm≠
, bmbno, &
t
)) !=

3512 
NULLFILEOFF
) {

3513 
bno
 = 
	`blkm≠_gë
(
blkm≠
, 
bmbno
);

3514 i‡(
bno
 =
NULLFSBLOCK
) {

3515 i‡(!
sÊag
)

3516 
	`db¥ötf
(
	`_
("block %lld forÑtbitmap inode is "

3518 (
xfs_fûeoff_t
)
bmbno
);

3519 
îr‹
++;

3522 
	`push_cur
();

3523 
	`£t_cur
(&
ty±ab
[
TYP_RTBITMAP
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
), 
blkbb
,

3524 
DB_RING_IGN
, 
NULL
);

3525 i‡((
w‹ds
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

3526 i‡(!
sÊag
)

3527 
	`db¥ötf
(
	`_
("can'tÑead block %lld forÑtbitmap "

3529 (
xfs_fûeoff_t
)
bmbno
);

3530 
îr‹
++;

3531 
	`p›_cur
();

3534 
bô
 = 0;

3535 
bô
 < 
bô•îblock
 && 
exäo
 < 
mp
->
m_sb
.
sb_ªxã¡s
;

3536 
bô
++, 
exäo
++) {

3537 i‡(
	`xfs_is£t
(
w‹ds
, 
bô
)) {

3538 
πbno
 = 
exäo
 * 
mp
->
m_sb
.
sb_ªxtsize
;

3539 
	`£t_rdbm≠
(
πbno
, 
mp
->
m_sb
.
sb_ªxtsize
,

3540 
DBM_RTFREE
);

3541 
‰exã¡s
++;

3542 i‡(
¥evbô
 == 0) {

3543 
°¨t_bmbno
 = ()
bmbno
;

3544 
°¨t_bô
 = 
bô
;

3545 
¥evbô
 = 1;

3547 } i‡(
¥evbô
 == 1) {

3548 
Àn
 = (()
bmbno
 - 
°¨t_bmbno
) *

3549 
bô•îblock
 + (
bô
 - 
°¨t_bô
);

3550 
log
 = 
	`XFS_RTBLOCKLOG
(
Àn
);

3551 
offs
 = 
	`XFS_SUMOFFS
(
mp
, 
log
, 
°¨t_bmbno
);

3552 
sumcompuã
[
offs
]++;

3553 
¥evbô
 = 0;

3556 
	`p›_cur
();

3557 i‡(
exäo
 =
mp
->
m_sb
.
sb_ªxã¡s
)

3560 i‡(
¥evbô
 == 1) {

3561 
Àn
 = (()
bmbno
 - 
°¨t_bmbno
Ë* 
bô•îblock
 +

3562 (
bô
 - 
°¨t_bô
);

3563 
log
 = 
	`XFS_RTBLOCKLOG
(
Àn
);

3564 
offs
 = 
	`XFS_SUMOFFS
(
mp
, 
log
, 
°¨t_bmbno
);

3565 
sumcompuã
[
offs
]++;

3567 
	}
}

3570 
	$¥o˚ss_πsumm¨y
(

3571 
blkm≠_t
 *
blkm≠
)

3573 
xfs_fsblock_t
 
bno
;

3574 *
byãs
;

3575 
xfs_fûeoff_t
 
sumbno
;

3576 
t
;

3578 
sumbno
 = 
NULLFILEOFF
;

3579 (
sumbno
 = 
	`blkm≠_√xt_off
(
blkm≠
, sumbno, &
t
)Ë!
NULLFILEOFF
) {

3580 
bno
 = 
	`blkm≠_gë
(
blkm≠
, 
sumbno
);

3581 i‡(
bno
 =
NULLFSBLOCK
) {

3582 i‡(!
sÊag
)

3583 
	`db¥ötf
(
	`_
("block %lld forÑtsummary inode is "

3585 (
xfs_fûeoff_t
)
sumbno
);

3586 
îr‹
++;

3589 
	`push_cur
();

3590 
	`£t_cur
(&
ty±ab
[
TYP_RTSUMMARY
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
),

3591 
blkbb
, 
DB_RING_IGN
, 
NULL
);

3592 i‡((
byãs
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

3593 i‡(!
sÊag
)

3594 
	`db¥ötf
(
	`_
("can'tÑead block %lld forÑtsummary "

3596 (
xfs_fûeoff_t
)
sumbno
);

3597 
îr‹
++;

3598 
	`p›_cur
();

3601 
	`mem˝y
((*)
sumfûe
 + 
sumbno
 * 
mp
->
m_sb
.
sb_blocksize
, 
byãs
,

3602 
mp
->
m_sb
.
sb_blocksize
);

3603 
	`p›_cur
();

3605 
	}
}

3607 
xfs_öo_t


3608 
	$¥o˚ss_sf_dú_v2
(

3609 
xfs_döode_t
 *
dù
,

3610 *
dŸ
,

3611 *
dŸdŸ
,

3612 
öod©a_t
 *
id
)

3614 
öod©a_t
 *
cid
;

3615 
i
;

3616 
i8
;

3617 
xfs_öo_t
 
löo
;

3618 
off£t
;

3619 
xfs_dú2_sf_hdr
 *
sf
;

3620 
xfs_dú2_sf_íåy_t
 *
s„
;

3621 
v
;

3623 
sf
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

3624 
	`addlök_öode
(
id
);

3625 
v
 = 
vîbo£
 || 
id
->
ûi°
;

3626 i‡(
v
)

3627 
	`db¥ötf
(
	`_
("dú %ŒdÉ¡ry . %Œd\n"), 
id
->
öo
, id->ino);

3628 (*
dŸ
)++;

3629 
s„
 = 
	`xfs_dú2_sf_fú°íåy
(
sf
);

3630 
off£t
 = 
	`M_DIROPS
(
mp
)->
d©a_fú°_off£t
;

3631 
i
 = 
sf
->
cou¡
 - 1, 
i8
 = 0; i >= 0; i--) {

3632 i‡((
öçå_t
)
s„
 + 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sf
, s„->
«mñí
) -

3633 (
öçå_t
)
sf
 > 
	`be64_to_˝u
(
dù
->
di_size
)) {

3634 i‡(!
sÊag
)

3635 
	`db¥ötf
(
	`_
("dir %llu bad size inÉntryát %d\n"),

3636 
id
->
öo
,

3637 ()((*)
s„
 - (*)
sf
));

3638 
îr‹
++;

3641 
löo
 = 
	`M_DIROPS
(
mp
)->
	`sf_gë_öo
(
sf
, 
s„
);

3642 i‡(
löo
 > 
XFS_DIR2_MAX_SHORT_INUM
)

3643 
i8
++;

3644 
cid
 = 
	`föd_öode
(
löo
, 1);

3645 i‡(
cid
 =
NULL
) {

3646 i‡(!
sÊag
)

3647 
	`db¥ötf
(
	`_
("dir %lldÉntry %*.*s bad inode "

3649 
id
->
öo
, 
s„
->
«mñí
, sfe->namelen,

3650 
s„
->
«me
, 
löo
);

3651 
îr‹
++;

3653 
	`addlök_öode
(
cid
);

3654 i‡(!
cid
->
∑ª¡
)

3655 
cid
->
∑ª¡
 = 
id
;

3656 
	`add«me_öode
(
cid
, (*)
s„
->
«me
, s„->
«mñí
);

3658 i‡(
v
)

3659 
	`db¥ötf
(
	`_
("dir %lldÉntry %*.*s offset %d %lld\n"),

3660 
id
->
öo
, 
s„
->
«mñí
, s„->«mñí, s„->
«me
,

3661 
	`xfs_dú2_sf_gë_off£t
(
s„
), 
löo
);

3662 i‡(
	`xfs_dú2_sf_gë_off£t
(
s„
Ë< 
off£t
) {

3663 i‡(!
sÊag
)

3664 
	`db¥ötf
(
	`_
("dir %lldÉntry %*.*s bad offset %d\n"),

3665 
id
->
öo
, 
s„
->
«mñí
, sfe->namelen,

3666 
s„
->
«me
, 
	`xfs_dú2_sf_gë_off£t
(sfe));

3667 
îr‹
++;

3669 
off£t
 =

3670 
	`xfs_dú2_sf_gë_off£t
(
s„
) +

3671 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sf
, 
s„
->
«mñí
);

3672 
s„
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
sf
, sfe);

3674 i‡(
i
 < 0 && (
öçå_t
)
s„
 - (öçå_t)
sf
 !=

3675 
	`be64_to_˝u
(
dù
->
di_size
)) {

3676 i‡(!
sÊag
)

3677 
	`db¥ötf
(
	`_
("dir %llu size is %lld, should be %u\n"),

3678 
id
->
öo
, 
	`be64_to_˝u
(
dù
->
di_size
),

3679 (
uöt
)((*)
s„
 - (*)
sf
));

3680 
îr‹
++;

3682 i‡(
off£t
 + (
sf
->
cou¡
 + 2Ë* (
xfs_dú2_Àaf_íåy_t
) +

3683 (
xfs_dú2_block_èû_t
Ë> 
mp
->
m_dú_geo
->
blksize
) {

3684 i‡(!
sÊag
)

3685 
	`db¥ötf
(
	`_
("dú %Œu off£t†toÿhigh\n"), 
id
->
öo
);

3686 
îr‹
++;

3688 
löo
 = 
	`M_DIROPS
(
mp
)->
	`sf_gë_∑ª¡_öo
(
sf
);

3689 i‡(
löo
 > 
XFS_DIR2_MAX_SHORT_INUM
)

3690 
i8
++;

3691 
cid
 = 
	`föd_öode
(
löo
, 1);

3692 i‡(
cid
)

3693 
	`addlök_öode
(
cid
);

3695 i‡(!
sÊag
)

3696 
	`db¥ötf
(
	`_
("dir %lldÉntry .. bad inodeÇumber %lld\n"),

3697 
id
->
öo
, 
löo
);

3698 
îr‹
++;

3700 i‡(
v
)

3701 
	`db¥ötf
(
	`_
("dú %ŒdÉ¡ry .. %Œd\n"), 
id
->
öo
, 
löo
);

3702 i‡(
i8
 !
sf
->
i8cou¡
) {

3703 i‡(!
sÊag
)

3704 
	`db¥ötf
(
	`_
("dir %lld i8count mismatch is %d should be "

3706 
id
->
öo
, 
sf
->
i8cou¡
, 
i8
);

3707 
îr‹
++;

3709 (*
dŸdŸ
)++;

3710  
cid
 ? 
löo
 : 
NULLFSINO
;

3711 
	}
}

3715 
	$quŸa_add
(

3716 
xfs_dqid_t
 *
¥jid
,

3717 
xfs_dqid_t
 *
gΩid
,

3718 
xfs_dqid_t
 *
u§id
,

3719 
dq
,

3720 
xfs_q˙t_t
 
bc
,

3721 
xfs_q˙t_t
 
ic
,

3722 
xfs_q˙t_t
 
rc
)

3724 i‡(
qudo
 && 
u§id
 !
NULL
)

3725 
	`quŸa_add1
(
qud©a
, *
u§id
, 
dq
, 
bc
, 
ic
, 
rc
);

3726 i‡(
qgdo
 && 
gΩid
 !
NULL
)

3727 
	`quŸa_add1
(
qgd©a
, *
gΩid
, 
dq
, 
bc
, 
ic
, 
rc
);

3728 i‡(
qpdo
 && 
¥jid
 !
NULL
)

3729 
	`quŸa_add1
(
qpd©a
, *
¥jid
, 
dq
, 
bc
, 
ic
, 
rc
);

3730 
	}
}

3733 
	$quŸa_add1
(

3734 
qd©a_t
 **
qt
,

3735 
xfs_dqid_t
 
id
,

3736 
dq
,

3737 
xfs_q˙t_t
 
bc
,

3738 
xfs_q˙t_t
 
ic
,

3739 
xfs_q˙t_t
 
rc
)

3741 
qd©a_t
 *
qe
;

3742 
qh
;

3743 
qöfo_t
 *
qi
;

3745 
qh
 = ()(
id
 % 
QDATA_HASH_SIZE
);

3746 
qe
 = 
qt
[
qh
];

3747 
qe
) {

3748 i‡(
qe
->
id
 == id) {

3749 
qi
 = 
dq
 ? &
qe
->dq : &qe->
cou¡
;

3750 
qi
->
bc
 += bc;

3751 
qi
->
ic
 += ic;

3752 
qi
->
rc
 +=Ñc;

3755 
qe
 = qe->
√xt
;

3757 
qe
 = 
	`xmÆloc
((*qe));

3758 
qe
->
id
 = id;

3759 
qi
 = 
dq
 ? &
qe
->dq : &qe->
cou¡
;

3760 
qi
->
bc
 = bc;

3761 
qi
->
ic
 = ic;

3762 
qi
->
rc
 =Ñc;

3763 
qi
 = 
dq
 ? &
qe
->
cou¡
 : &qe->dq;

3764 
qi
->
bc
 = qi->
ic
 = qi->
rc
 = 0;

3765 
qe
->
√xt
 = 
qt
[
qh
];

3766 
qt
[
qh
] = 
qe
;

3767 
	}
}

3770 
	$quŸa_check
(

3771 *
s
,

3772 
qd©a_t
 **
qt
)

3774 
i
;

3775 
qd©a_t
 *
√xt
;

3776 
qd©a_t
 *
qp
;

3778 
i
 = 0; i < 
QDATA_HASH_SIZE
; i++) {

3779 
qp
 = 
qt
[
i
];

3780 
qp
) {

3781 
√xt
 = 
qp
->next;

3782 i‡(
qp
->
cou¡
.
bc
 !qp->
dq
.bc ||

3783 
qp
->
cou¡
.
ic
 !qp->
dq
.ic ||

3784 
qp
->
cou¡
.
rc
 !qp->
dq
.rc) {

3785 i‡(!
sÊag
) {

3786 
	`db¥ötf
(
	`_
("%s quota id %u, have/exp"),

3787 
s
, 
qp
->
id
);

3788 i‡(
qp
->
cou¡
.
bc
 !qp->
dq
.bc)

3789 
	`db¥ötf
(
	`_
(" bc %lld/%lld"),

3790 
qp
->
dq
.
bc
,

3791 
qp
->
cou¡
.
bc
);

3792 i‡(
qp
->
cou¡
.
ic
 !qp->
dq
.ic)

3793 
	`db¥ötf
(
	`_
(" ic %lld/%lld"),

3794 
qp
->
dq
.
ic
,

3795 
qp
->
cou¡
.
ic
);

3796 i‡(
qp
->
cou¡
.
rc
 !qp->
dq
.rc)

3797 
	`db¥ötf
(
	`_
("Ñc %lld/%lld"),

3798 
qp
->
dq
.
rc
,

3799 
qp
->
cou¡
.
rc
);

3800 
	`db¥ötf
("\n");

3802 
îr‹
++;

3804 
	`x‰ì
(
qp
);

3805 
qp
 = 
√xt
;

3808 
	`x‰ì
(
qt
);

3809 
	}
}

3812 
	$quŸa_öô
()

3814 
qudo
 = 
mp
->
m_sb
.
sb_uquŸöo
 != 0 &&

3815 
mp
->
m_sb
.
sb_uquŸöo
 !
NULLFSINO
 &&

3816 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_UQUOTA_ACCT
) &&

3817 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_UQUOTA_CHKD
);

3818 
qgdo
 = 
mp
->
m_sb
.
sb_gquŸöo
 != 0 &&

3819 
mp
->
m_sb
.
sb_gquŸöo
 !
NULLFSINO
 &&

3820 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_GQUOTA_ACCT
) &&

3821 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_GQUOTA_CHKD
);

3822 
qpdo
 = 
mp
->
m_sb
.
sb_pquŸöo
 != 0 &&

3823 
mp
->
m_sb
.
sb_pquŸöo
 !
NULLFSINO
 &&

3824 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_PQUOTA_ACCT
) &&

3825 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_PQUOTA_CHKD
);

3826 i‡(
qudo
)

3827 
qud©a
 = 
	`xˇŒoc
(
QDATA_HASH_SIZE
, (
qd©a_t
 *));

3828 i‡(
qgdo
)

3829 
qgd©a
 = 
	`xˇŒoc
(
QDATA_HASH_SIZE
, (
qd©a_t
 *));

3830 i‡(
qpdo
)

3831 
qpd©a
 = 
	`xˇŒoc
(
QDATA_HASH_SIZE
, (
qd©a_t
 *));

3832 
	}
}

3835 
	$sˇn_ag
(

3836 
xfs_agnumbî_t
 
agno
)

3838 
xfs_agf_t
 *
agf
;

3839 
xfs_agi_t
 *
agi
;

3840 
i
;

3841 
xfs_sb_t
 
tsb
;

3842 
xfs_sb_t
 *
sb
 = &
tsb
;

3844 
agf‰ìblks
 = 
agÊ⁄ge°
 = 0;

3845 
agfbåìblks
 = -2;

3846 
agicou¡
 = 
agi‰ìcou¡
 = 0;

3847 
	`push_cur
();

3848 
	`£t_cur
(&
ty±ab
[
TYP_SB
],

3849 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
XFS_SB_DADDR
),

3850 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

3852 i‡(!
iocur_t›
->
d©a
) {

3853 
	`db¥ötf
(
	`_
("ˇn'àªad su≥rblock f‹ág %u\n"), 
agno
);

3854 
£rious_îr‹
++;

3855 
p›1_out
;

3858 
	`libxfs_sb_‰om_disk
(
sb
, 
iocur_t›
->
d©a
);

3860 i‡(
sb
->
sb_magi˙um
 !
XFS_SB_MAGIC
) {

3861 i‡(!
sÊag
)

3862 
	`db¥ötf
(
	`_
("bad sb magic # %#x inág %u\n"),

3863 
sb
->
sb_magi˙um
, 
agno
);

3864 
îr‹
++;

3866 i‡(!
	`xfs_sb_good_vîsi⁄
(
sb
)) {

3867 i‡(!
sÊag
)

3868 
	`db¥ötf
(
	`_
("bad sb version # %#x inág %u\n"),

3869 
sb
->
sb_vîsi⁄num
, 
agno
);

3870 
îr‹
++;

3871 
sbvî_îr
++;

3873 i‡(!
œzycou¡
 && 
	`xfs_sb_vîsi⁄_ha¶azysbcou¡
(
sb
)) {

3874 
œzycou¡
 = 1;

3876 i‡(
agno
 =0 && 
sb
->
sb_ö¥ogªss
 != 0) {

3877 i‡(!
sÊag
)

3878 
	`db¥ötf
(
	`_
("mkfsÇot completed successfully\n"));

3879 
îr‹
++;

3881 
	`£t_dbm≠
(
agno
, 
	`XFS_SB_BLOCK
(
mp
), 1, 
DBM_SB
,ágno, XFS_SB_BLOCK(mp));

3882 i‡(
sb
->
sb_log°¨t
 && 
	`XFS_FSB_TO_AGNO
(
mp
, sb->sb_log°¨tË=
agno
)

3883 
	`£t_dbm≠
(
agno
, 
	`XFS_FSB_TO_AGBNO
(
mp
, 
sb
->
sb_log°¨t
),

3884 
sb
->
sb_logblocks
, 
DBM_LOG
, 
agno
, 
	`XFS_SB_BLOCK
(
mp
));

3885 
	`push_cur
();

3886 
	`£t_cur
(&
ty±ab
[
TYP_AGF
],

3887 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

3888 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

3889 i‡((
agf
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

3890 
	`db¥ötf
(
	`_
("ˇn'àªadág‡block f‹ág %u\n"), 
agno
);

3891 
£rious_îr‹
++;

3892 
p›2_out
;

3894 i‡(
	`be32_to_˝u
(
agf
->
agf_magi˙um
Ë!
XFS_AGF_MAGIC
) {

3895 i‡(!
sÊag
)

3896 
	`db¥ötf
(
	`_
("badágf magic # %#x inág %u\n"),

3897 
	`be32_to_˝u
(
agf
->
agf_magi˙um
), 
agno
);

3898 
îr‹
++;

3900 i‡(!
	`XFS_AGF_GOOD_VERSION
(
	`be32_to_˝u
(
agf
->
agf_vîsi⁄num
))) {

3901 i‡(!
sÊag
)

3902 
	`db¥ötf
(
	`_
("badágf version # %#x inág %u\n"),

3903 
	`be32_to_˝u
(
agf
->
agf_vîsi⁄num
), 
agno
);

3904 
îr‹
++;

3906 i‡(
	`XFS_SB_BLOCK
(
mp
Ë!
	`XFS_AGF_BLOCK
(mp))

3907 
	`£t_dbm≠
(
agno
, 
	`XFS_AGF_BLOCK
(
mp
), 1, 
DBM_AGF
,ágno,

3908 
	`XFS_SB_BLOCK
(
mp
));

3909 i‡(
sb
->
sb_agblocks
 > 
	`be32_to_˝u
(
agf
->
agf_Àngth
))

3910 
	`£t_dbm≠
(
agno
, 
	`be32_to_˝u
(
agf
->
agf_Àngth
),

3911 
sb
->
sb_agblocks
 - 
	`be32_to_˝u
(
agf
->
agf_Àngth
),

3912 
DBM_MISSING
, 
agno
, 
	`XFS_SB_BLOCK
(
mp
));

3913 
	`push_cur
();

3914 
	`£t_cur
(&
ty±ab
[
TYP_AGI
],

3915 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),

3916 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

3917 i‡((
agi
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

3918 
	`db¥ötf
(
	`_
("ˇn'àªadágòblock f‹ág %u\n"), 
agno
);

3919 
£rious_îr‹
++;

3920 
p›3_out
;

3922 i‡(
	`be32_to_˝u
(
agi
->
agi_magi˙um
Ë!
XFS_AGI_MAGIC
) {

3923 i‡(!
sÊag
)

3924 
	`db¥ötf
(
	`_
("badági magic # %#x inág %u\n"),

3925 
	`be32_to_˝u
(
agi
->
agi_magi˙um
), 
agno
);

3926 
îr‹
++;

3928 i‡(!
	`XFS_AGI_GOOD_VERSION
(
	`be32_to_˝u
(
agi
->
agi_vîsi⁄num
))) {

3929 i‡(!
sÊag
)

3930 
	`db¥ötf
(
	`_
("badági version # %#x inág %u\n"),

3931 
	`be32_to_˝u
(
agi
->
agi_vîsi⁄num
), 
agno
);

3932 
îr‹
++;

3934 i‡(
	`XFS_SB_BLOCK
(
mp
Ë!
	`XFS_AGI_BLOCK
(mp) &&

3935 
	`XFS_AGF_BLOCK
(
mp
Ë!
	`XFS_AGI_BLOCK
(mp))

3936 
	`£t_dbm≠
(
agno
, 
	`XFS_AGI_BLOCK
(
mp
), 1, 
DBM_AGI
,ágno,

3937 
	`XFS_SB_BLOCK
(
mp
));

3938 
	`sˇn_‰ìli°
(
agf
);

3939 
fdblocks
--;

3940 
	`sˇn_sbåì
(
agf
,

3941 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_BNO
]),

3942 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNO
]),

3943 1, 
sˇnfunc_bno
, 
TYP_BNOBT
);

3944 
fdblocks
--;

3945 
	`sˇn_sbåì
(
agf
,

3946 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_CNT
]),

3947 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNT
]),

3948 1, 
sˇnfunc_˙t
, 
TYP_CNTBT
);

3949 i‡(
agf
->
agf_roŸs
[
XFS_BTNUM_RMAP
]) {

3950 
	`sˇn_sbåì
(
agf
,

3951 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_RMAP
]),

3952 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_RMAP
]),

3953 1, 
sˇnfunc_rm≠
, 
TYP_RMAPBT
);

3955 i‡(
agf
->
agf_ªfcou¡_roŸ
) {

3956 
	`sˇn_sbåì
(
agf
,

3957 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_roŸ
),

3958 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_Àvñ
),

3959 1, 
sˇnfunc_ªf˙t
, 
TYP_REFCBT
);

3961 
	`sˇn_sbåì
(
agf
,

3962 
	`be32_to_˝u
(
agi
->
agi_roŸ
),

3963 
	`be32_to_˝u
(
agi
->
agi_Àvñ
),

3964 1, 
sˇnfunc_öo
, 
TYP_INOBT
);

3965 i‡(
agi
->
agi_‰ì_roŸ
) {

3966 
	`sˇn_sbåì
(
agf
,

3967 
	`be32_to_˝u
(
agi
->
agi_‰ì_roŸ
),

3968 
	`be32_to_˝u
(
agi
->
agi_‰ì_Àvñ
),

3969 1, 
sˇnfunc_föo
, 
TYP_FINOBT
);

3971 i‡(
	`be32_to_˝u
(
agf
->
agf_‰ìblks
Ë!
agf‰ìblks
) {

3972 i‡(!
sÊag
)

3973 
	`db¥ötf
(
	`_
("agf_freeblks %u, counted %u inág %u\n"),

3974 
	`be32_to_˝u
(
agf
->
agf_‰ìblks
),

3975 
agf‰ìblks
, 
agno
);

3976 
îr‹
++;

3978 i‡(
	`be32_to_˝u
(
agf
->
agf_l⁄ge°
Ë!
agÊ⁄ge°
) {

3979 i‡(!
sÊag
)

3980 
	`db¥ötf
(
	`_
("agf_longest %u, counted %u inág %u\n"),

3981 
	`be32_to_˝u
(
agf
->
agf_l⁄ge°
),

3982 
agÊ⁄ge°
, 
agno
);

3983 
îr‹
++;

3985 i‡(
œzycou¡
 &&

3986 
	`be32_to_˝u
(
agf
->
agf_båìblks
Ë!
agfbåìblks
) {

3987 i‡(!
sÊag
)

3988 
	`db¥ötf
(
	`_
("agf_btreeblks %u, counted %u inág %u\n"),

3989 
	`be32_to_˝u
(
agf
->
agf_båìblks
),

3990 
agfbåìblks
, 
agno
);

3991 
îr‹
++;

3993 
agf_aggr_‰ìblks
 +
agf‰ìblks
 + 
agfbåìblks
;

3994 i‡(
	`be32_to_˝u
(
agi
->
agi_cou¡
Ë!
agicou¡
) {

3995 i‡(!
sÊag
)

3996 
	`db¥ötf
(
	`_
("agi_count %u, counted %u inág %u\n"),

3997 
	`be32_to_˝u
(
agi
->
agi_cou¡
),

3998 
agicou¡
, 
agno
);

3999 
îr‹
++;

4001 i‡(
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
Ë!
agi‰ìcou¡
) {

4002 i‡(!
sÊag
)

4003 
	`db¥ötf
(
	`_
("agi_freecount %u, counted %u inág %u\n"),

4004 
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
),

4005 
agi‰ìcou¡
, 
agno
);

4006 
îr‹
++;

4008 
i
 = 0; i < 
XFS_AGI_UNLINKED_BUCKETS
; i++) {

4009 i‡(
	`be32_to_˝u
(
agi
->
agi_u∆öked
[
i
]Ë!
NULLAGINO
) {

4010 i‡(!
sÊag
) {

4011 
xfs_agöo_t
 
agöo
=
	`be32_to_˝u
(
agi
->
agi_u∆öked
[
i
]);

4012 
	`db¥ötf
(
	`_
("agi unlinked bucket %d is %u inág "

4013 "%u (öode=%Œd)\n"), 
i
, 
agöo
, 
agno
,

4014 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
));

4016 
îr‹
++;

4019 
p›3_out
:

4020 
	`p›_cur
();

4021 
p›2_out
:

4022 
	`p›_cur
();

4023 
p›1_out
:

4024 
	`p›_cur
();

4025 
	}
}

4028 
	$sˇn_‰ìli°
(

4029 
xfs_agf_t
 *
agf
)

4031 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4032 
xfs_agÊ_t
 *
agÊ
;

4033 
xfs_agblock_t
 
bno
;

4034 
uöt
 
cou¡
;

4035 
i
;

4036 
__be32
 *
‰ìli°
;

4038 i‡(
	`XFS_SB_BLOCK
(
mp
Ë!
	`XFS_AGFL_BLOCK
(mp) &&

4039 
	`XFS_AGF_BLOCK
(
mp
Ë!
	`XFS_AGFL_BLOCK
(mp) &&

4040 
	`XFS_AGI_BLOCK
(
mp
Ë!
	`XFS_AGFL_BLOCK
(mp))

4041 
	`£t_dbm≠
(
£qno
, 
	`XFS_AGFL_BLOCK
(
mp
), 1, 
DBM_AGFL
, seqno,

4042 
	`XFS_SB_BLOCK
(
mp
));

4043 i‡(
	`be32_to_˝u
(
agf
->
agf_Êcou¡
) == 0)

4045 
	`push_cur
();

4046 
	`£t_cur
(&
ty±ab
[
TYP_AGFL
],

4047 
	`XFS_AG_DADDR
(
mp
, 
£qno
, 
	`XFS_AGFL_DADDR
(mp)),

4048 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

4049 i‡((
agÊ
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

4050 
	`db¥ötf
(
	`_
("ˇn'àªadágÊ block f‹ág %u\n"), 
£qno
);

4051 
£rious_îr‹
++;

4052 
	`p›_cur
();

4055 
i
 = 
	`be32_to_˝u
(
agf
->
agf_Êfú°
);

4058 i‡(
	`be32_to_˝u
(
agf
->
agf_Êfú°
Ë>
	`XFS_AGFL_SIZE
(
mp
) ||

4059 
	`be32_to_˝u
(
agf
->
agf_Êœ°
Ë>
	`XFS_AGFL_SIZE
(
mp
)) {

4060 
	`db¥ötf
(
	`_
("agf %d freelist blocks bad, skipping "

4061 "‰ìli° sˇn\n"), 
i
);

4062 
	`p›_cur
();

4067 
‰ìli°
 = 
	`xfs_sb_vîsi⁄_has¸c
(&((
mp
)->
m_sb
)Ë? &
agÊ
->
agÊ_bno
[0]

4068 : (
__be32
 *)
agÊ
;

4069 
cou¡
 = 0;

4071 
bno
 = 
	`be32_to_˝u
(
‰ìli°
[
i
]);

4072 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_FREELIST
, seqno,

4073 
	`XFS_AGFL_BLOCK
(
mp
));

4074 
cou¡
++;

4075 i‡(
i
 =
	`be32_to_˝u
(
agf
->
agf_Êœ°
))

4077 i‡(++
i
 =
	`XFS_AGFL_SIZE
(
mp
))

4078 
i
 = 0;

4080 i‡(
cou¡
 !
	`be32_to_˝u
(
agf
->
agf_Êcou¡
)) {

4081 i‡(!
sÊag
)

4082 
	`db¥ötf
(
	`_
("freeblk count %u != flcount %u inág %u\n"),

4083 
cou¡
, 
	`be32_to_˝u
(
agf
->
agf_Êcou¡
),

4084 
£qno
);

4085 
îr‹
++;

4087 
fdblocks
 +
cou¡
;

4088 
agf_aggr_‰ìblks
 +
cou¡
;

4089 
	`p›_cur
();

4090 
	}
}

4093 
	$sˇn_lbåì
(

4094 
xfs_fsblock_t
 
roŸ
,

4095 
∆evñs
,

4096 
sˇn_lbåì_f_t
 
func
,

4097 
dbm_t
 
ty≥
,

4098 
öod©a_t
 *
id
,

4099 
xfs_rfsblock_t
 *
tŸd
,

4100 
xfs_rfsblock_t
 *
tŸi
,

4101 
xfs_exäum_t
 *
√x
,

4102 
blkm≠_t
 **
blkm≠p
,

4103 
i§oŸ
,

4104 
ty≤m_t
 
bty≥
)

4106 
	`push_cur
();

4107 
	`£t_cur
(&
ty±ab
[
bty≥
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
roŸ
), 
blkbb
, 
DB_RING_IGN
,

4108 
NULL
);

4109 i‡(
iocur_t›
->
d©a
 =
NULL
) {

4110 i‡(!
sÊag
)

4111 
	`db¥ötf
(
	`_
("can'tÑead btree block %u/%u\n"),

4112 
	`XFS_FSB_TO_AGNO
(
mp
, 
roŸ
),

4113 
	`XFS_FSB_TO_AGBNO
(
mp
, 
roŸ
));

4114 
îr‹
++;

4115 
	`p›_cur
();

4118 (*
func
)(
iocur_t›
->
d©a
, 
∆evñs
 - 1, 
ty≥
, 
roŸ
, 
id
, 
tŸd
, 
tŸi
, 
√x
,

4119 
blkm≠p
, 
i§oŸ
, 
bty≥
);

4120 
	`p›_cur
();

4121 
	}
}

4124 
	$sˇn_sbåì
(

4125 
xfs_agf_t
 *
agf
,

4126 
xfs_agblock_t
 
roŸ
,

4127 
∆evñs
,

4128 
i§oŸ
,

4129 
sˇn_sbåì_f_t
 
func
,

4130 
ty≤m_t
 
bty≥
)

4132 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4134 
	`push_cur
();

4135 
	`£t_cur
(&
ty±ab
[
bty≥
],

4136 
	`XFS_AGB_TO_DADDR
(
mp
, 
£qno
, 
roŸ
), 
blkbb
, 
DB_RING_IGN
, 
NULL
);

4137 i‡(
iocur_t›
->
d©a
 =
NULL
) {

4138 i‡(!
sÊag
)

4139 
	`db¥ötf
(
	`_
("ˇn'àªad båì block %u/%u\n"), 
£qno
, 
roŸ
);

4140 
îr‹
++;

4141 
	`p›_cur
();

4144 (*
func
)(
iocur_t›
->
d©a
, 
∆evñs
 - 1, 
agf
, 
roŸ
, 
i§oŸ
);

4145 
	`p›_cur
();

4146 
	}
}

4149 
	$sˇnfunc_bm≠
(

4150 
xfs_båì_block
 *
block
,

4151 
Àvñ
,

4152 
dbm_t
 
ty≥
,

4153 
xfs_fsblock_t
 
bno
,

4154 
öod©a_t
 *
id
,

4155 
xfs_rfsblock_t
 *
tŸd
,

4156 
xfs_rfsblock_t
 *
tŸi
,

4157 
xfs_exäum_t
 *
√x
,

4158 
blkm≠_t
 **
blkm≠p
,

4159 
i§oŸ
,

4160 
ty≤m_t
 
bty≥
)

4162 
xfs_agblock_t
 
agbno
;

4163 
xfs_agnumbî_t
 
agno
;

4164 
i
;

4165 
xfs_bmbt_±r_t
 *
µ
;

4166 
xfs_bmbt_ªc_t
 *
Ω
;

4168 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
bno
);

4169 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
bno
);

4170 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_BMAP_MAGIC
 &&

4171 
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_BMAP_CRC_MAGIC
) {

4172 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

4173 
	`db¥ötf
(
	`_
("bad magic # %#x in inode %lld bmbt block "

4175 
	`be32_to_˝u
(
block
->
bb_magic
), 
id
->
öo
, 
agno
, 
agbno
);

4176 
îr‹
++;

4178 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4179 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

4180 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d in inode %lld bmbt "

4182 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
id
->
öo
, 
agno
, 
agbno
);

4183 
îr‹
++;

4185 
	`£t_dbm≠
(
agno
, 
agbno
, 1, 
ty≥
,ágno,ágbno);

4186 
	`£t_öom≠
(
agno
, 
agbno
, 1, 
id
);

4187 (*
tŸi
)++;

4188 i‡(
Àvñ
 == 0) {

4189 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_bm≠_dmxr
[0] ||

4190 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_bm≠_dmƒ
[0])) {

4191 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

4192 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) "

4194 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_bm≠_dmƒ
[0],

4195 
mp
->
m_bm≠_dmxr
[0], 
id
->
öo
,

4196 (
xfs_fsblock_t
)
bno
);

4197 
îr‹
++;

4200 
Ω
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1);

4201 *
√x
 +
	`be16_to_˝u
(
block
->
bb_numªcs
);

4202 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
ty≥
, 
id
, 
tŸd
,

4203 
blkm≠p
);

4206 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_bm≠_dmxr
[1] ||

4207 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_bm≠_dmƒ
[1])) {

4208 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

4209 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4211 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_bm≠_dmƒ
[1],

4212 
mp
->
m_bm≠_dmxr
[1], 
id
->
öo
, (
xfs_fsblock_t
)
bno
);

4213 
îr‹
++;

4216 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[0]);

4217 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4218 
	`sˇn_lbåì
(
	`be64_to_˝u
(
µ
[
i
]), 
Àvñ
, 
sˇnfunc_bm≠
, 
ty≥
, 
id
,

4219 
tŸd
, 
tŸi
, 
√x
, 
blkm≠p
, 0, 
bty≥
);

4220 
	}
}

4223 
	$sˇnfunc_bno
(

4224 
xfs_båì_block
 *
block
,

4225 
Àvñ
,

4226 
xfs_agf_t
 *
agf
,

4227 
xfs_agblock_t
 
bno
,

4228 
i§oŸ
)

4230 
i
;

4231 
xfs_Æloc_±r_t
 *
µ
;

4232 
xfs_Æloc_ªc_t
 *
Ω
;

4233 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4234 
xfs_agblock_t
 
œ°block
;

4236 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_ABTB_MAGIC
 &&

4237 
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_ABTB_CRC_MAGIC
) {

4238 
	`db¥ötf
(
	`_
("bad magic # %#x in btbno block %u/%u\n"),

4239 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4240 
£rious_îr‹
++;

4243 
fdblocks
++;

4244 
agfbåìblks
++;

4245 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4246 i‡(!
sÊag
)

4247 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d in btbno block "

4249 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4250 
îr‹
++;

4252 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTBNO
, seqno, bno);

4253 i‡(
Àvñ
 == 0) {

4254 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_Æloc_mxr
[0] ||

4255 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_Æloc_mƒ
[0])) {

4256 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4258 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_Æloc_mƒ
[0],

4259 
mp
->
m_Æloc_mxr
[0], 
£qno
, 
bno
);

4260 
£rious_îr‹
++;

4263 
Ω
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

4264 
œ°block
 = 0;

4265 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4266 
	`£t_dbm≠
(
£qno
, 
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
),

4267 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
), 
DBM_FREE1
,

4268 
£qno
, 
bno
);

4269 i‡(
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
Ë<
œ°block
) {

4270 
	`db¥ötf
(
	`_
(

4272 
i
, 
	`be32_to_˝u
(
Ω
[i].
¨_°¨tblock
),

4273 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
),

4274 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
bno
);

4275 
£rious_îr‹
++;

4277 
œ°block
 = 
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
);

4282 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_Æloc_mxr
[1] ||

4283 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_Æloc_mƒ
[1])) {

4284 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in btbno block "

4286 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_Æloc_mƒ
[1],

4287 
mp
->
m_Æloc_mxr
[1], 
£qno
, 
bno
);

4288 
£rious_îr‹
++;

4291 
µ
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

4292 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4293 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_bno
, 
TYP_BNOBT
);

4294 
	}
}

4297 
	$sˇnfunc_˙t
(

4298 
xfs_båì_block
 *
block
,

4299 
Àvñ
,

4300 
xfs_agf_t
 *
agf
,

4301 
xfs_agblock_t
 
bno
,

4302 
i§oŸ
)

4304 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4305 
i
;

4306 
xfs_Æloc_±r_t
 *
µ
;

4307 
xfs_Æloc_ªc_t
 *
Ω
;

4308 
xfs_exéí_t
 
œ°cou¡
;

4310 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_ABTC_MAGIC
 &&

4311 
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_ABTC_CRC_MAGIC
) {

4312 
	`db¥ötf
(
	`_
("bad magic # %#x in btcnt block %u/%u\n"),

4313 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4314 
£rious_îr‹
++;

4317 
fdblocks
++;

4318 
agfbåìblks
++;

4319 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4320 i‡(!
sÊag
)

4321 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d in btcnt block "

4323 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4324 
îr‹
++;

4326 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTCNT
, seqno, bno);

4327 i‡(
Àvñ
 == 0) {

4328 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_Æloc_mxr
[0] ||

4329 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_Æloc_mƒ
[0])) {

4330 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4332 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_Æloc_mƒ
[0],

4333 
mp
->
m_Æloc_mxr
[0], 
£qno
, 
bno
);

4334 
£rious_îr‹
++;

4337 
Ω
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

4338 
œ°cou¡
 = 0;

4339 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4340 
	`check_£t_dbm≠
(
£qno
, 
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
),

4341 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
), 
DBM_FREE1
, 
DBM_FREE2
,

4342 
£qno
, 
bno
);

4343 
fdblocks
 +
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
);

4344 
agf‰ìblks
 +
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
);

4345 i‡(
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
Ë> 
agÊ⁄ge°
)

4346 
agÊ⁄ge°
 = 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
);

4347 i‡(
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
Ë< 
œ°cou¡
) {

4348 
	`db¥ötf
(
	`_
(

4350 
i
, 
	`be32_to_˝u
(
Ω
[i].
¨_°¨tblock
),

4351 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
),

4352 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
bno
);

4354 
œ°cou¡
 = 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
);

4359 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_Æloc_mxr
[1] ||

4360 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_Æloc_mƒ
[1])) {

4361 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in btbno block "

4363 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_Æloc_mƒ
[1],

4364 
mp
->
m_Æloc_mxr
[1], 
£qno
, 
bno
);

4365 
£rious_îr‹
++;

4368 
µ
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

4369 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4370 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_˙t
, 
TYP_CNTBT
);

4371 
	}
}

4374 
	$sˇnfunc_öo
(

4375 
xfs_båì_block
 *
block
,

4376 
Àvñ
,

4377 
xfs_agf_t
 *
agf
,

4378 
xfs_agblock_t
 
bno
,

4379 
i§oŸ
)

4381 
xfs_agöo_t
 
agöo
;

4382 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4383 
i
;

4384 
is‰ì
;

4385 
j
;

4386 
‰ìcou¡
;

4387 
n‰ì
;

4388 
off
;

4389 
xfs_öobt_±r_t
 *
µ
;

4390 
xfs_öobt_ªc_t
 *
Ω
;

4391 
xfs_agblock_t
 
agbno
;

4392 
xfs_agblock_t
 
íd_agbno
;

4393 
xfs_döode
 *
dù
;

4394 
blks_≥r_buf
;

4395 
öodes_≥r_buf
;

4396 
ioff
;

4398 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

4399 
blks_≥r_buf
 = 
	`xfs_i˛u°î_size_fsb
(
mp
);

4401 
blks_≥r_buf
 = 
mp
->
m_üŒoc_blks
;

4402 
öodes_≥r_buf
 = 
	`mö
(
blks_≥r_buf
 << 
mp
->
m_sb
.
sb_ö›blog
,

4403 
XFS_INODES_PER_CHUNK
);

4405 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_IBT_MAGIC
 &&

4406 
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_IBT_CRC_MAGIC
) {

4407 
	`db¥ötf
(
	`_
("bad magic # %#x in inobt block %u/%u\n"),

4408 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4409 
£rious_îr‹
++;

4412 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4413 i‡(!
sÊag
)

4414 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d in inobt block "

4416 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4417 
îr‹
++;

4419 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTINO
, seqno, bno);

4420 i‡(
Àvñ
 == 0) {

4421 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_öobt_mxr
[0] ||

4422 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_öobt_mƒ
[0])) {

4423 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4425 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_öobt_mƒ
[0],

4426 
mp
->
m_öobt_mxr
[0], 
£qno
, 
bno
);

4427 
£rious_îr‹
++;

4430 
Ω
 = 
	`XFS_INOBT_REC_ADDR
(
mp
, 
block
, 1);

4431 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4432 
agöo
 = 
	`be32_to_˝u
(
Ω
[
i
].
ú_°¨töo
);

4433 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

4434 
off
 = 
	`XFS_AGINO_TO_OFFSET
(
mp
, 
agöo
);

4435 
íd_agbno
 = 
agbno
 + 
mp
->
m_üŒoc_blks
;

4436 i‡(
off
 == 0) {

4437 i‡((
sbvîsi⁄
 & 
XFS_SB_VERSION_ALIGNBIT
) &&

4438 
mp
->
m_sb
.
sb_öﬂlignmt
 &&

4439 (
	`XFS_INO_TO_AGBNO
(
mp
, 
agöo
) %

4440 
mp
->
m_sb
.
sb_öﬂlignmt
))

4441 
sbvîsi⁄
 &~
XFS_SB_VERSION_ALIGNBIT
;

4444 
	`push_cur
();

4446 
ioff
 = 0;

4447 
n‰ì
 = 0;

4448 
agbno
 < 
íd_agbno
 &&

4449 
ioff
 < 
XFS_INODES_PER_CHUNK
) {

4450 i‡(
	`xfs_öobt_is_•¨£_disk
(&
Ω
[
i
], 
ioff
))

4451 
√xt_buf
;

4453 i‡(
off
 < 
XFS_INODES_PER_CHUNK
)

4454 
	`£t_dbm≠
(
£qno
, 
agbno
, 
blks_≥r_buf
,

4455 
DBM_INODE
, 
£qno
, 
bno
);

4457 
icou¡
 +
öodes_≥r_buf
;

4458 
agicou¡
 +
öodes_≥r_buf
;

4460 
	`£t_cur
(&
ty±ab
[
TYP_INODE
],

4461 
	`XFS_AGB_TO_DADDR
(
mp
, 
£qno
, 
agbno
),

4462 
	`XFS_FSB_TO_BB
(
mp
, 
blks_≥r_buf
),

4463 
DB_RING_IGN
, 
NULL
);

4464 i‡(
iocur_t›
->
d©a
 =
NULL
) {

4465 i‡(!
sÊag
)

4466 
	`db¥ötf
(
	`_
("can'tÑead inode block "

4467 "%u/%u\n"), 
£qno
,

4468 
agbno
);

4469 
îr‹
++;

4470 
√xt_buf
;

4473 
j
 = 0; j < 
öodes_≥r_buf
; j++) {

4474 
is‰ì
 = 
	`XFS_INOBT_IS_FREE_DISK
(&
Ω
[
i
], 
ioff
 + 
j
);

4475 i‡(
is‰ì
)

4476 
n‰ì
++;

4477 
dù
 = (
xfs_döode_t
 *)((*)
iocur_t›
->
d©a
 +

4478 ((
off
 + 
j
Ë<< 
mp
->
m_sb
.
sb_öodñog
));

4479 
	`¥o˚ss_öode
(
agf
, 
agöo
 + 
ioff
 + 
j
, 
dù
, 
is‰ì
);

4482 
√xt_buf
:

4483 
agbno
 +
blks_≥r_buf
;

4484 
ioff
 +
öodes_≥r_buf
;

4487 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

4488 
‰ìcou¡
 = 
Ω
[
i
].
ú_u
.
•
.
ú_‰ìcou¡
;

4490 
‰ìcou¡
 = 
	`be32_to_˝u
(
Ω
[
i
].
ú_u
.
f
.
ú_‰ìcou¡
);

4492 
i‰ì
 +
‰ìcou¡
;

4493 
agi‰ìcou¡
 +
‰ìcou¡
;

4495 i‡(
n‰ì
 !
‰ìcou¡
) {

4496 i‡(!
sÊag
)

4497 
	`db¥ötf
(
	`_
("ir_freecount/free mismatch, "

4500 
£qno
, 
agöo
, 
‰ìcou¡
, 
n‰ì
);

4501 
îr‹
++;

4503 
	`p›_cur
();

4507 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_öobt_mxr
[1] ||

4508 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_öobt_mƒ
[1])) {

4509 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in inobt block "

4511 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_öobt_mƒ
[1],

4512 
mp
->
m_öobt_mxr
[1], 
£qno
, 
bno
);

4513 
£rious_îr‹
++;

4516 
µ
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_öobt_mxr
[1]);

4517 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4518 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_öo
, 
TYP_INOBT
);

4519 
	}
}

4522 
	$sˇnfunc_föo
(

4523 
xfs_båì_block
 *
block
,

4524 
Àvñ
,

4525 
xfs_agf
 *
agf
,

4526 
xfs_agblock_t
 
bno
,

4527 
i§oŸ
)

4529 
xfs_agöo_t
 
agöo
;

4530 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4531 
i
;

4532 
off
;

4533 
xfs_öobt_±r_t
 *
µ
;

4534 
xfs_öobt_ªc
 *
Ω
;

4535 
xfs_agblock_t
 
agbno
;

4536 
xfs_agblock_t
 
íd_agbno
;

4537 
blks_≥r_buf
;

4538 
öodes_≥r_buf
;

4539 
ioff
;

4541 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

4542 
blks_≥r_buf
 = 
	`xfs_i˛u°î_size_fsb
(
mp
);

4544 
blks_≥r_buf
 = 
mp
->
m_üŒoc_blks
;

4545 
öodes_≥r_buf
 = 
	`mö
(
blks_≥r_buf
 << 
mp
->
m_sb
.
sb_ö›blog
,

4546 
XFS_INODES_PER_CHUNK
);

4548 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_FIBT_MAGIC
 &&

4549 
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_FIBT_CRC_MAGIC
) {

4550 
	`db¥ötf
(
	`_
("bad magic # %#x in finobt block %u/%u\n"),

4551 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4552 
£rious_îr‹
++;

4555 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4556 i‡(!
sÊag
)

4557 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d in finobt block "

4559 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4560 
îr‹
++;

4562 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTFINO
, seqno, bno);

4563 i‡(
Àvñ
 == 0) {

4564 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_öobt_mxr
[0] ||

4565 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_öobt_mƒ
[0])) {

4566 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4568 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_öobt_mƒ
[0],

4569 
mp
->
m_öobt_mxr
[0], 
£qno
, 
bno
);

4570 
£rious_îr‹
++;

4573 
Ω
 = 
	`XFS_INOBT_REC_ADDR
(
mp
, 
block
, 1);

4574 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4575 
agöo
 = 
	`be32_to_˝u
(
Ω
[
i
].
ú_°¨töo
);

4576 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

4577 
off
 = 
	`XFS_AGINO_TO_OFFSET
(
mp
, 
agöo
);

4578 
íd_agbno
 = 
agbno
 + 
mp
->
m_üŒoc_blks
;

4579 i‡(
off
 == 0) {

4580 i‡((
sbvîsi⁄
 & 
XFS_SB_VERSION_ALIGNBIT
) &&

4581 
mp
->
m_sb
.
sb_öﬂlignmt
 &&

4582 (
	`XFS_INO_TO_AGBNO
(
mp
, 
agöo
) %

4583 
mp
->
m_sb
.
sb_öﬂlignmt
))

4584 
sbvîsi⁄
 &~
XFS_SB_VERSION_ALIGNBIT
;

4587 
ioff
 = 0;

4588 
agbno
 < 
íd_agbno
 &&

4589 
ioff
 < 
XFS_INODES_PER_CHUNK
) {

4590 i‡(
	`xfs_öobt_is_•¨£_disk
(&
Ω
[
i
], 
ioff
))

4591 
√xt_buf
;

4593 
	`check_£t_dbm≠
(
£qno
, 
agbno
,

4594 (
xfs_exéí_t
)
	`MAX
(1,

4595 
öodes_≥r_buf
 >>

4596 
mp
->
m_sb
.
sb_ö›blog
),

4597 
DBM_INODE
, DBM_INODE, 
£qno
, 
bno
);

4599 
√xt_buf
:

4600 
agbno
 +
blks_≥r_buf
;

4601 
ioff
 +
öodes_≥r_buf
;

4607 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_öobt_mxr
[1] ||

4608 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_öobt_mƒ
[1])) {

4609 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in finobt block "

4611 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_öobt_mƒ
[1],

4612 
mp
->
m_öobt_mxr
[1], 
£qno
, 
bno
);

4613 
£rious_îr‹
++;

4616 
µ
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_öobt_mxr
[1]);

4617 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4618 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_föo
, 
TYP_FINOBT
);

4619 
	}
}

4622 
	$sˇnfunc_rm≠
(

4623 
xfs_båì_block
 *
block
,

4624 
Àvñ
,

4625 
xfs_agf
 *
agf
,

4626 
xfs_agblock_t
 
bno
,

4627 
i§oŸ
)

4629 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4630 
i
;

4631 
xfs_rm≠_±r_t
 *
µ
;

4632 
xfs_rm≠_ªc
 *
Ω
;

4633 
xfs_agblock_t
 
œ°block
;

4635 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_RMAP_CRC_MAGIC
) {

4636 
	`db¥ötf
(
	`_
("bad magic # %#x inÑmapbt block %u/%u\n"),

4637 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4638 
£rious_îr‹
++;

4641 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4642 i‡(!
sÊag
)

4643 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d inÑmapbt block "

4645 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4646 
îr‹
++;

4648 i‡(!
i§oŸ
) {

4649 
fdblocks
++;

4650 
agfbåìblks
++;

4652 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTRMAP
, seqno, bno);

4653 i‡(
Àvñ
 == 0) {

4654 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_rm≠_mxr
[0] ||

4655 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_rm≠_mƒ
[0])) {

4656 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4658 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_rm≠_mƒ
[0],

4659 
mp
->
m_rm≠_mxr
[0], 
£qno
, 
bno
);

4660 
£rious_îr‹
++;

4663 
Ω
 = 
	`XFS_RMAP_REC_ADDR
(
block
, 1);

4664 
œ°block
 = 0;

4665 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4666 i‡(
	`be32_to_˝u
(
Ω
[
i
].
rm_°¨tblock
Ë< 
œ°block
) {

4667 
	`db¥ötf
(
	`_
(

4669 
i
, 
	`be32_to_˝u
(
Ω
[i].
rm_°¨tblock
),

4670 
	`be32_to_˝u
(
Ω
[
i
].
rm_°¨tblock
),

4671 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
bno
);

4673 
œ°block
 = 
	`be32_to_˝u
(
Ω
[
i
].
rm_°¨tblock
);

4678 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_rm≠_mxr
[1] ||

4679 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_rm≠_mƒ
[1])) {

4680 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) inÑmapbt "

4682 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_rm≠_mƒ
[1],

4683 
mp
->
m_rm≠_mxr
[1], 
£qno
, 
bno
);

4684 
£rious_îr‹
++;

4687 
µ
 = 
	`XFS_RMAP_PTR_ADDR
(
block
, 1, 
mp
->
m_rm≠_mxr
[1]);

4688 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4689 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_rm≠
,

4690 
TYP_RMAPBT
);

4691 
	}
}

4694 
	$sˇnfunc_ªf˙t
(

4695 
xfs_båì_block
 *
block
,

4696 
Àvñ
,

4697 
xfs_agf
 *
agf
,

4698 
xfs_agblock_t
 
bno
,

4699 
i§oŸ
)

4701 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4702 
i
;

4703 
xfs_ªfcou¡_±r_t
 *
µ
;

4704 
xfs_ªfcou¡_ªc
 *
Ω
;

4705 
xfs_agblock_t
 
œ°block
;

4707 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_REFC_CRC_MAGIC
) {

4708 
	`db¥ötf
(
	`_
("bad magic # %#x inÑefcntbt block %u/%u\n"),

4709 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4710 
£rious_îr‹
++;

4713 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4714 i‡(!
sÊag
)

4715 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d inÑefcntbt block "

4717 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4718 
îr‹
++;

4720 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTREFC
, seqno, bno);

4721 i‡(
Àvñ
 == 0) {

4722 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_ªfc_mxr
[0] ||

4723 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_ªfc_mƒ
[0])) {

4724 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4726 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_ªfc_mƒ
[0],

4727 
mp
->
m_ªfc_mxr
[0], 
£qno
, 
bno
);

4728 
£rious_îr‹
++;

4731 
Ω
 = 
	`XFS_REFCOUNT_REC_ADDR
(
block
, 1);

4732 
œ°block
 = 0;

4733 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4734 i‡(
	`be32_to_˝u
(
Ω
[
i
].
rc_ªfcou¡
) == 1) {

4735 
	`db¥ötf
(
	`_
(

4737 
£qno
,

4738 
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
),

4739 
	`be32_to_˝u
(
Ω
[
i
].
rc_blockcou¡
));

4740 
	`£t_dbm≠
(
£qno
,

4741 
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
),

4742 
	`be32_to_˝u
(
Ω
[
i
].
rc_blockcou¡
),

4743 
DBM_COWDATA
, 
£qno
, 
bno
);

4745 
	`£t_dbm≠
(
£qno
,

4746 
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
),

4747 
	`be32_to_˝u
(
Ω
[
i
].
rc_blockcou¡
),

4748 
DBM_RLDATA
, 
£qno
, 
bno
);

4750 i‡(
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
Ë< 
œ°block
) {

4751 
	`db¥ötf
(
	`_
(

4753 
i
, 
	`be32_to_˝u
(
Ω
[i].
rc_°¨tblock
),

4754 
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
),

4755 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
bno
);

4757 
œ°block
 = 
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
) +

4758 
	`be32_to_˝u
(
Ω
[
i
].
rc_blockcou¡
);

4763 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_ªfc_mxr
[1] ||

4764 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_ªfc_mƒ
[1])) {

4765 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) inÑefcntbt "

4767 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_ªfc_mƒ
[1],

4768 
mp
->
m_ªfc_mxr
[1], 
£qno
, 
bno
);

4769 
£rious_îr‹
++;

4772 
µ
 = 
	`XFS_REFCOUNT_PTR_ADDR
(
block
, 1, 
mp
->
m_ªfc_mxr
[1]);

4773 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4774 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_ªf˙t
,

4775 
TYP_REFCBT
);

4776 
	}
}

4779 
	$£t_dbm≠
(

4780 
xfs_agnumbî_t
 
agno
,

4781 
xfs_agblock_t
 
agbno
,

4782 
xfs_exéí_t
 
Àn
,

4783 
dbm_t
 
ty≥
,

4784 
xfs_agnumbî_t
 
c_agno
,

4785 
xfs_agblock_t
 
c_agbno
)

4787 
	`check_£t_dbm≠
(
agno
, 
agbno
, 
Àn
, 
DBM_UNKNOWN
, 
ty≥
, 
c_agno
, 
c_agbno
);

4788 
	}
}

4791 
	$£t_öom≠
(

4792 
xfs_agnumbî_t
 
agno
,

4793 
xfs_agblock_t
 
agbno
,

4794 
xfs_exéí_t
 
Àn
,

4795 
öod©a_t
 *
id
)

4797 
xfs_exéí_t
 
i
;

4798 
öod©a_t
 **
idp
;

4799 
may¥öt
;

4801 i‡(!
	`check_öom≠
(
agno
, 
agbno
, 
Àn
, 
id
->
öo
))

4803 
may¥öt
 = 
vîbo£
 | 
id
->
ûi°
 | 
bli°_size
;

4804 
i
 = 0, 
idp
 = &
öom≠
[
agno
][
agbno
]; i < 
Àn
; i++, idp++) {

4805 *
idp
 = 
id
;

4806 i‡(
may¥öt
 &&

4807 (
vîbo£
 || 
id
->
ûi°
 || 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
)))

4808 
	`db¥ötf
(
	`_
("setting inodeÅo %lld for block %u/%u\n"),

4809 
id
->
öo
, 
agno
, 
agbno
 + 
i
);

4811 
	}
}

4814 
	$£t_rdbm≠
(

4815 
xfs_rfsblock_t
 
bno
,

4816 
xfs_exéí_t
 
Àn
,

4817 
dbm_t
 
ty≥
)

4819 
	`check_£t_rdbm≠
(
bno
, 
Àn
, 
DBM_UNKNOWN
, 
ty≥
);

4820 
	}
}

4823 
	$£t_röom≠
(

4824 
xfs_rfsblock_t
 
bno
,

4825 
xfs_exéí_t
 
Àn
,

4826 
öod©a_t
 *
id
)

4828 
xfs_exéí_t
 
i
;

4829 
öod©a_t
 **
idp
;

4830 
may¥öt
;

4832 i‡(!
	`check_röom≠
(
bno
, 
Àn
, 
id
->
öo
))

4834 
may¥öt
 = 
vîbo£
 | 
id
->
ûi°
 | 
bli°_size
;

4835 
i
 = 0, 
idp
 = &
öom≠
[
mp
->
m_sb
.
sb_agcou¡
][
bno
];

4836 
i
 < 
Àn
;

4837 
i
++, 
idp
++) {

4838 *
idp
 = 
id
;

4839 i‡(
may¥öt
 && (
vîbo£
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
 + 
i
)))

4840 
	`db¥ötf
(
	`_
("setting inodeÅo %lld forÑtblock %llu\n"),

4841 
id
->
öo
, 
bno
 + 
i
);

4843 
	}
}

4846 
	$£éök_öode
(

4847 
öod©a_t
 *
id
,

4848 
∆ök_t
 
∆ök
,

4849 
isdú
,

4850 
£curôy
)

4852 
id
->
lök_£t
 = 
∆ök
;

4853 
id
->
isdú
 = isdir;

4854 
id
->
£curôy
 = security;

4855 i‡(
vîbo£
 || 
id
->
ûi°
)

4856 
	`db¥ötf
(
	`_
("öodê%ŒdÇlök %u %†dú\n"), 
id
->
öo
, 
∆ök
,

4857 
isdú
 ? "is" : "not");

4858 
	}
}

	@check.h

19 
check_öô
();

	@command.c

19 
	~"libxfs.h
"

20 
	~"addr.h
"

21 
	~"©å£t.h
"

22 
	~"block.h
"

23 
	~"bm≠.h
"

24 
	~"check.h
"

25 
	~"comm™d.h
"

26 
	~"c⁄vît.h
"

27 
	~"debug.h
"

28 
	~"ty≥.h
"

29 
	~"echo.h
"

30 
	~"Áddr.h
"

31 
	~"Âröt.h
"

32 
	~"fõld.h
"

33 
	~"agf.h
"

34 
	~"agÊ.h
"

35 
	~"agi.h
"

36 
	~"‰ag.h
"

37 
	~"‰ì•.h
"

38 
	~"hñp.h
"

39 
	~"hash.h
"

40 
	~"öode.h
"

41 
	~"öput.h
"

42 
	~"io.h
"

43 
	~"logf‹m©.h
"

44 
	~"mëadump.h
"

45 
	~"ouçut.h
"

46 
	~"¥öt.h
"

47 
	~"quô.h
"

48 
	~"sb.h
"

49 
	~"wrôe.h
"

50 
	~"mÆloc.h
"

51 
	~"dquŸ.h
"

52 
	~"fsm≠.h
"

53 
	~"¸c.h
"

55 
cmdöfo_t
 *
	gcmdèb
;

56 
	gncmds
;

59 
	$cmd_com∑ª
(c⁄° *
a
, c⁄° *
b
)

61  
	`°rcmp
(((c⁄° 
cmdöfo_t
 *)
a
)->
«me
,

62 ((c⁄° 
cmdöfo_t
 *)
b
)->
«me
);

63 
	}
}

66 
	$add_comm™d
(

67 c⁄° 
cmdöfo_t
 *
ci
)

69 
cmdèb
 = 
	`xªÆloc
((*)cmdèb, ++
ncmds
 * (*cmdtab));

70 
cmdèb
[
ncmds
 - 1] = *
ci
;

71 
	`qs‹t
(
cmdèb
, 
ncmds
, (*cmdèb), 
cmd_com∑ª
);

72 
	}
}

75 
	$comm™d
(

76 
¨gc
,

77 **
¨gv
)

79 *
cmd
;

80 c⁄° 
cmdöfo_t
 *
˘
;

82 
cmd
 = 
¨gv
[0];

83 
˘
 = 
	`föd_comm™d
(
cmd
);

84 i‡(
˘
 =
NULL
) {

85 
	`db¥ötf
(
	`_
("comm™d %†nŸ found\n"), 
cmd
);

88 i‡(
¨gc
-1 < 
˘
->
¨gmö
 || (˘->
¨gmax
 != -1 &&árgc-1 > ct->argmax)) {

89 
	`db¥ötf
(
	`_
("badárgumíàcou¡ %dÅÿ%s,Éx≥˘ed "), 
¨gc
-1, 
cmd
);

90 i‡(
˘
->
¨gmax
 == -1)

91 
	`db¥ötf
(
	`_
("©Üó° %d"), 
˘
->
¨gmö
);

92 i‡(
˘
->
¨gmö
 =˘->
¨gmax
)

93 
	`db¥ötf
("%d", 
˘
->
¨gmö
);

95 
	`db¥ötf
(
	`_
("bëwì¿%dánd %d"), 
˘
->
¨gmö
, ct->
¨gmax
);

96 
	`db¥ötf
(
	`_
("árguments\n"));

99 
	`∂©f‹m_gë›åe£t
();

100  
˘
->
	`cfunc
(
¨gc
, 
¨gv
);

101 
	}
}

103 c⁄° 
cmdöfo_t
 *

104 
	$föd_comm™d
(

105 c⁄° *
cmd
)

107 
cmdöfo_t
 *
˘
;

109 
˘
 = 
cmdèb
; cà< &cmdèb[
ncmds
]; ct++) {

110 i‡(
	`°rcmp
(
˘
->
«me
, 
cmd
) == 0 ||

111 (
˘
->
Æäame
 && 
	`°rcmp
(˘->Æäame, 
cmd
) == 0))

112  (c⁄° 
cmdöfo_t
 *)
˘
;

114  
NULL
;

115 
	}
}

118 
	$öô_comm™ds
()

120 
	`addr_öô
();

121 
	`agf_öô
();

122 
	`agÊ_öô
();

123 
	`agi_öô
();

124 
	`©å£t_öô
();

125 
	`block_öô
();

126 
	`bm≠_öô
();

127 
	`check_öô
();

128 
	`c⁄vît_öô
();

129 
	`¸c_öô
();

130 
	`debug_öô
();

131 
	`echo_öô
();

132 
	`‰ag_öô
();

133 
	`‰ì•_öô
();

134 
	`fsm≠_öô
();

135 
	`hñp_öô
();

136 
	`hash_öô
();

137 
	`öode_öô
();

138 
	`öput_öô
();

139 
	`logf‹m©_öô
();

140 
	`io_öô
();

141 
	`mëadump_öô
();

142 
	`ouçut_öô
();

143 
	`¥öt_öô
();

144 
	`quô_öô
();

145 
	`sb_öô
();

146 
	`ty≥_öô
();

147 
	`wrôe_öô
();

148 
	`dquŸ_öô
();

149 
	}
}

	@command.h

19 (*
	tcfunc_t
)(
	t¨gc
, **
	t¨gv
);

20 (*
	thñpfunc_t
)();

22 
	scmdöfo


24 c⁄° *
«me
;

25 c⁄° *
Æäame
;

26 
cfunc_t
 
cfunc
;

27 
¨gmö
;

28 
¨gmax
;

29 
ˇ≈ush
;

30 c⁄° *
¨gs
;

31 c⁄° *
⁄ñöe
;

32 
hñpfunc_t
 
hñp
;

33 } 
	tcmdöfo_t
;

35 
cmdöfo_t
 *
cmdèb
;

36 
ncmds
;

38 
	`add_comm™d
(c⁄° 
cmdöfo_t
 *
ci
);

39 
	`comm™d
(
¨gc
, **
¨gv
);

40 c⁄° 
cmdöfo_t
 *
	`föd_comm™d
(c⁄° *
cmd
);

41 
	`öô_comm™ds
();

	@convert.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"c⁄vît.h
"

22 
	~"ouçut.h
"

23 
	~"öô.h
"

25 
	#M
(
A
Ë(1 << 
CT_
 ## A)

	)

26 
	#agblock_to_byãs
(
x
) \

27 ((
__uöt64_t
)(
x
Ë<< 
mp
->
m_sb
.
sb_blocklog
)

	)

28 
	#agöo_to_byãs
(
x
) \

29 ((
__uöt64_t
)(
x
Ë<< 
mp
->
m_sb
.
sb_öodñog
)

	)

30 
	#agnumbî_to_byãs
(
x
) \

31 
	`agblock_to_byãs
((
__uöt64_t
)(
x
Ë* 
mp
->
m_sb
.
sb_agblocks
)

	)

32 
	#daddr_to_byãs
(
x
) \

33 ((
__uöt64_t
)(
x
Ë<< 
BBSHIFT
)

	)

34 
	#fsblock_to_byãs
(
x
) \

35 (
	`agnumbî_to_byãs
(
	`XFS_FSB_TO_AGNO
(
mp
, (
x
))) + \

36 
	`agblock_to_byãs
(
	`XFS_FSB_TO_AGBNO
(
mp
, (
x
))))

	)

37 
	#öo_to_byãs
(
x
) \

38 (
	`agnumbî_to_byãs
(
	`XFS_INO_TO_AGNO
(
mp
, (
x
))) + \

39 
	`agöo_to_byãs
(
	`XFS_INO_TO_AGINO
(
mp
, (
x
))))

	)

40 
	#öoidx_to_byãs
(
x
) \

41 ((
__uöt64_t
)(
x
Ë<< 
mp
->
m_sb
.
sb_öodñog
)

	)

44 
	mCT_NONE
 = -1,

45 
	mCT_AGBLOCK
,

46 
	mCT_AGINO
,

47 
	mCT_AGNUMBER
,

48 
	mCT_BBOFF
,

49 
	mCT_BLKOFF
,

50 
	mCT_BYTE
,

51 
	mCT_DADDR
,

52 
	mCT_FSBLOCK
,

53 
	mCT_INO
,

54 
	mCT_INOIDX
,

55 
	mCT_INOOFF
,

56 
	mNCTS


57 } 
	t˘y≥_t
;

59 
	s˘ydesc
 {

60 
˘y≥_t
 
	m˘y≥
;

61 
	mÆlowed
;

62 c⁄° **
	m«mes
;

63 } 
	t˘ydesc_t
;

66 
xfs_agblock_t
 
	magblock
;

67 
xfs_agöo_t
 
	magöo
;

68 
xfs_agnumbî_t
 
	magnumbî
;

69 
	mbboff
;

70 
	mblkoff
;

71 
__uöt64_t
 
	mbyã
;

72 
xfs_daddr_t
 
	mdaddr
;

73 
xfs_fsblock_t
 
	mfsblock
;

74 
xfs_öo_t
 
	möo
;

75 
	möoidx
;

76 
	möooff
;

77 } 
	tcvÆ_t
;

79 
__uöt64_t
 
byãvÆue
(
˘y≥_t
 
˘y≥
, 
cvÆ_t
 *
vÆ
);

80 
c⁄vît_f
(
¨gc
, **
¨gv
);

81 
gëvÆue
(*
s
, 
˘y≥_t
 
˘y≥
, 
cvÆ_t
 *
vÆ
);

82 
˘y≥_t
 
lookup˘y
(*
˘y«me
);

84 c⁄° *
	gagblock_«mes
[] = { "agblock", "agbno", 
NULL
 };

85 c⁄° *
	gagöo_«mes
[] = { "agöo", "agöode", 
NULL
 };

86 c⁄° *
	gagnumbî_«mes
[] = { "agnumbî", "agno", 
NULL
 };

87 c⁄° *
	gbboff_«mes
[] = { "bboff", "daddroff", 
NULL
 };

88 c⁄° *
	gblkoff_«mes
[] = { "blkoff", "fsboff", "agboff",

89 
NULL
 };

90 c⁄° *
	gbyã_«mes
[] = { "byã", "fsbyã", 
NULL
 };

91 c⁄° *
	gdaddr_«mes
[] = { "daddr", "bb", 
NULL
 };

92 c⁄° *
	gfsblock_«mes
[] = { "fsblock", "fsb", "fsbno", 
NULL
 };

93 c⁄° *
	göo_«mes
[] = { "öo", "öode", 
NULL
 };

94 c⁄° *
	göoidx_«mes
[] = { "öoidx", "off£t", 
NULL
 };

95 c⁄° *
	göooff_«mes
[] = { "öooff", "öodeoff", 
NULL
 };

97 c⁄° 
˘ydesc_t
 
	g˘ydescs
[
NCTS
] = {

98 { 
CT_AGBLOCK
, 
M
(
AGNUMBER
)|M(
BBOFF
)|M(
BLKOFF
)|M(
INOIDX
)|M(
INOOFF
),

99 
agblock_«mes
 },

100 { 
CT_AGINO
, 
M
(
AGNUMBER
)|M(
INOOFF
), 
agöo_«mes
 },

101 { 
CT_AGNUMBER
,

102 
M
(
AGBLOCK
)|M(
AGINO
)|M(
BBOFF
)|M(
BLKOFF
)|M(
INOIDX
)|M(
INOOFF
),

103 
agnumbî_«mes
 },

104 { 
CT_BBOFF
, 
M
(
AGBLOCK
)|M(
AGNUMBER
)|M(
DADDR
)|M(
FSBLOCK
), 
bboff_«mes
 },

105 { 
CT_BLKOFF
, 
M
(
AGBLOCK
)|M(
AGNUMBER
)|M(
FSBLOCK
), 
blkoff_«mes
 },

106 { 
CT_BYTE
, 0, 
byã_«mes
 },

107 { 
CT_DADDR
, 
M
(
BBOFF
), 
daddr_«mes
 },

108 { 
CT_FSBLOCK
, 
M
(
BBOFF
)|M(
BLKOFF
)|M(
INOIDX
), 
fsblock_«mes
 },

109 { 
CT_INO
, 
M
(
INOOFF
), 
öo_«mes
 },

110 { 
CT_INOIDX
, 
M
(
AGBLOCK
)|M(
AGNUMBER
)|M(
FSBLOCK
)|M(
INOOFF
),

111 
öoidx_«mes
 },

112 { 
CT_INOOFF
,

113 
M
(
AGBLOCK
)|M(
AGINO
)|M(
AGNUMBER
)|M(
FSBLOCK
)|M(
INO
)|M(
INOIDX
),

114 
öooff_«mes
 },

117 c⁄° 
cmdöfo_t
 
	gc⁄vît_cmd
 =

118 { "c⁄vît", 
NULL
, 
c⁄vît_f
, 3, 9, 0, "typeÇum [typeÇum]...Åype",

119 "c⁄vîà‰om o√áddªs†f‹mÅÿ™Ÿhî", 
NULL
 };

121 
__uöt64_t


122 
	$byãvÆue
(
˘y≥_t
 
˘y≥
, 
cvÆ_t
 *
vÆ
)

124 
˘y≥
) {

125 
CT_AGBLOCK
:

126  
	`agblock_to_byãs
(
vÆ
->
agblock
);

127 
CT_AGINO
:

128  
	`agöo_to_byãs
(
vÆ
->
agöo
);

129 
CT_AGNUMBER
:

130  
	`agnumbî_to_byãs
(
vÆ
->
agnumbî
);

131 
CT_BBOFF
:

132  (
__uöt64_t
)
vÆ
->
bboff
;

133 
CT_BLKOFF
:

134  (
__uöt64_t
)
vÆ
->
blkoff
;

135 
CT_BYTE
:

136  
vÆ
->
byã
;

137 
CT_DADDR
:

138  
	`daddr_to_byãs
(
vÆ
->
daddr
);

139 
CT_FSBLOCK
:

140  
	`fsblock_to_byãs
(
vÆ
->
fsblock
);

141 
CT_INO
:

142  
	`öo_to_byãs
(
vÆ
->
öo
);

143 
CT_INOIDX
:

144  
	`öoidx_to_byãs
(
vÆ
->
öoidx
);

145 
CT_INOOFF
:

146  (
__uöt64_t
)
vÆ
->
öooff
;

147 
CT_NONE
:

148 
NCTS
:

153 
	}
}

156 
	$c⁄vît_f
(
¨gc
, **
¨gv
)

158 
˘y≥_t
 
c
;

159 
c⁄mask
;

160 
cvÆ_t
 
cvÆs
[
NCTS
] = {};

161 
i
;

162 
mask
;

163 
__uöt64_t
 
v
;

164 
˘y≥_t
 
wty≥
;

167 
¨gc
--;

168 
¨gv
++;

170 i‡((
¨gc
 % 2) != 1) {

171 
	`db¥ötf
(
	`_
("badárgument count %dÅo convert,Éxpected 3,5,7,9 "

172 "¨gumíts\n"), 
¨gc
);

175 i‡((
wty≥
 = 
	`lookup˘y
(
¨gv
[
¨gc
 - 1])Ë=
CT_NONE
) {

176 
	`db¥ötf
(
	`_
("unknow¿c⁄vîsi⁄Åy≥ %s\n"), 
¨gv
[
¨gc
 - 1]);

180 
i
 = 
mask
 = 
c⁄mask
 = 0; i < (
¨gc
 - 1) / 2; i++) {

181 
c
 = 
	`lookup˘y
(
¨gv
[
i
 * 2]);

182 i‡(
c
 =
CT_NONE
) {

183 
	`db¥ötf
(
	`_
("unknow¿c⁄vîsi⁄Åy≥ %s\n"), 
¨gv
[
i
 * 2]);

186 i‡(
c
 =
wty≥
) {

187 
	`db¥ötf
(
	`_
("resultÅype sameásárgument\n"));

190 i‡(
c⁄mask
 & (1 << 
c
)) {

191 
	`db¥ötf
(
	`_
("conflicting conversionÅype %s\n"),

192 
¨gv
[
i
 * 2]);

195 i‡(!
	`gëvÆue
(
¨gv
[
i
 * 2 + 1], 
c
, &
cvÆs
[c]))

197 
mask
 |1 << 
c
;

198 
c⁄mask
 |~
˘ydescs
[
c
].
Ælowed
;

200 i‡(
cur_agno
 !
NULLAGNUMBER
 && (
c⁄mask
 & 
	`M
(
AGNUMBER
)) == 0) {

201 
cvÆs
[
CT_AGNUMBER
].
agnumbî
 = 
cur_agno
;

202 
mask
 |
	`M
(
AGNUMBER
);

204 
v
 = 0;

205 
c
 = (
˘y≥_t
)0; c < 
NCTS
; c++) {

206 i‡(!(
mask
 & (1 << 
c
)))

208 
v
 +
	`byãvÆue
(
c
, &
cvÆs
[c]);

210 
wty≥
) {

211 
CT_AGBLOCK
:

212 
v
 = 
	`xfs_daddr_to_agbno
(
mp
, v >> 
BBSHIFT
);

214 
CT_AGINO
:

215 
v
 = (v >> 
mp
->
m_sb
.
sb_öodñog
) %

216 (
mp
->
m_sb
.
sb_agblocks
 << mp->m_sb.
sb_ö›blog
);

218 
CT_AGNUMBER
:

219 
v
 = 
	`xfs_daddr_to_agno
(
mp
, v >> 
BBSHIFT
);

221 
CT_BBOFF
:

222 
v
 &
BBMASK
;

224 
CT_BLKOFF
:

225 
v
 &
mp
->
m_blockmask
;

227 
CT_BYTE
:

229 
CT_DADDR
:

230 
v
 >>
BBSHIFT
;

232 
CT_FSBLOCK
:

233 
v
 = 
	`XFS_DADDR_TO_FSB
(
mp
, v >> 
BBSHIFT
);

235 
CT_INO
:

236 
v
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
	`xfs_daddr_to_agno
(mp, v >> 
BBSHIFT
),

237 (
v
 >> 
mp
->
m_sb
.
sb_öodñog
) %

238 (
mp
->
m_sb
.
sb_agblocks
 << mp->m_sb.
sb_ö›blog
));

240 
CT_INOIDX
:

241 
v
 = (v >> 
mp
->
m_sb
.
sb_öodñog
Ë& (mp->m_sb.
sb_ö›block
 - 1);

243 
CT_INOOFF
:

244 
v
 &
mp
->
m_sb
.
sb_öodesize
 - 1;

246 
CT_NONE
:

247 
NCTS
:

251 
	`db¥ötf
("0x%Œx (%Œu)\n", 
v
, v);

253 
	}
}

256 
	$c⁄vît_öô
()

258 
	`add_comm™d
(&
c⁄vît_cmd
);

259 
	}
}

262 
	$gëvÆue
(*
s
, 
˘y≥_t
 
˘y≥
, 
cvÆ_t
 *
vÆ
)

264 *
p
;

265 
__uöt64_t
 
v
;

267 
v
 = 
	`°πouŒ
(
s
, &
p
, 0);

268 i‡(*
p
 != '\0') {

269 
	`db¥ötf
(
	`_
("%†i†nŸáÇumbî\n"), 
s
);

272 
˘y≥
) {

273 
CT_AGBLOCK
:

274 
vÆ
->
agblock
 = (
xfs_agblock_t
)
v
;

276 
CT_AGINO
:

277 
vÆ
->
agöo
 = (
xfs_agöo_t
)
v
;

279 
CT_AGNUMBER
:

280 
vÆ
->
agnumbî
 = (
xfs_agnumbî_t
)
v
;

282 
CT_BBOFF
:

283 
vÆ
->
bboff
 = ()
v
;

285 
CT_BLKOFF
:

286 
vÆ
->
blkoff
 = ()
v
;

288 
CT_BYTE
:

289 
vÆ
->
byã
 = (
__uöt64_t
)
v
;

291 
CT_DADDR
:

292 
vÆ
->
daddr
 = (
xfs_daddr_t
)
v
;

294 
CT_FSBLOCK
:

295 
vÆ
->
fsblock
 = (
xfs_fsblock_t
)
v
;

297 
CT_INO
:

298 
vÆ
->
öo
 = (
xfs_öo_t
)
v
;

300 
CT_INOIDX
:

301 
vÆ
->
öoidx
 = ()
v
;

303 
CT_INOOFF
:

304 
vÆ
->
öooff
 = ()
v
;

306 
CT_NONE
:

307 
NCTS
:

312 
	}
}

314 
˘y≥_t


315 
	$lookup˘y
(*
˘y«me
)

317 
˘y≥_t
 
˘y
;

318 c⁄° **
«me
;

320 
˘y
 = (
˘y≥_t
)0; cty < 
NCTS
; cty++) {

321 
«me
 = 
˘ydescs
[
˘y
].
«mes
; *name;Çame++) {

322 i‡(
	`°rcmp
(
˘y«me
, *
«me
) == 0)

323  
˘y
;

326  
CT_NONE
;

327 
	}
}

	@convert.h

19 
c⁄vît_öô
();

	@crc.c

18 
	~"libxfs.h
"

19 
	~"addr.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"Êi°.h
"

26 
	~"io.h
"

27 
	~"öô.h
"

28 
	~"ouçut.h
"

29 
	~"bô.h
"

30 
	~"¥öt.h
"

32 
¸c_f
(
¨gc
, **
¨gv
);

33 
¸c_hñp
();

35 c⁄° 
cmdöfo_t
 
	g¸c_cmd
 =

36 { "¸c", 
NULL
, 
¸c_f
, 0, 1, 0, "[-i|-r|-v]",

37 
N_
("m™ùuœã cr¯vÆue†f‹ V5 fûesy°em såu˘uªs"), 
¸c_hñp
 };

40 
	$¸c_öô
()

42 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

43 
	`add_comm™d
(&
¸c_cmd
);

44 
	}
}

47 
	$¸c_hñp
()

49 
	`db¥ötf
(
	`_
(

58 
	}
}

61 
	$¸c_f
(

62 
¨gc
,

63 **
¨gv
)

65 c⁄° 
xfs_buf_›s
 *
°ashed_›s
 = 
NULL
;

66 *
¥og«me
;

67 c⁄° 
fõld_t
 *
fõlds
;

68 c⁄° 
·©å_t
 *
Á
;

69 
Êi°_t
 *
Ê
;

70 
övÆid©e
 = 0;

71 
ªˇlcuœã
 = 0;

72 
vÆid©e
 = 0;

73 
c
;

75 i‡(
cur_typ
 =
NULL
) {

76 
	`db¥ötf
(
	`_
("no currentÅype\n"));

80 i‡(
cur_typ
->
fõlds
 =
NULL
) {

81 
	`db¥ötf
(
	`_
("currentÅype (%s) isÇotá structure\n"),

82 
cur_typ
->
«me
);

86 i‡(
¨gc
Ë(
c
 = 
	`gë›t
◊rgc, 
¨gv
, "úv")Ë!
EOF
) {

87 
c
) {

89 
övÆid©e
 = 1;

92 
ªˇlcuœã
 = 1;

95 
vÆid©e
 = 1;

98 
	`db¥ötf
(
	`_
("bad option for crc command\n"));

102 
vÆid©e
 = 1;

104 i‡(
övÆid©e
 + 
ªˇlcuœã
 + 
vÆid©e
 > 1) {

105 
	`db¥ötf
(
	`_
("crc commandáccepts only one option\n"));

109 i‡((
övÆid©e
 || 
ªˇlcuœã
) &&

110 ((
x
.
i§ód⁄ly
 & 
LIBXFS_ISREADONLY
Ë|| !
ex≥π_mode
)) {

111 
	`db¥ötf
(
	`_
("%sÇot inÉxpert mode, writing disabled\n"),

112 
¥og«me
);

116 
fõlds
 = 
cur_typ
->fields;

119 i‡(
fõlds
->
«me
[0] == '\0') {

120 
Á
 = &
·©åèb
[
fõlds
->
·yp
];

121 
	`ASSERT
(
Á
->
·yp
 =
fõlds
->ftyp);

122 
fõlds
 = 
Á
->
subÊd
;

126 
Ê
 = 
	`Êi°_föd_·yp
(
fõlds
, 
FLDT_CRC
);

127 i‡(!
Ê
) {

128 
	`db¥ötf
(
	`_
("NÿCRC fõld found f‹Åy≥ %s\n"), 
cur_typ
->
«me
);

133 i‡(!
	`Êi°_∑r£
(
fõlds
, 
Ê
, 
iocur_t›
->
d©a
, 0)) {

134 
	`Êi°_‰ì
(
Ê
);

135 
	`db¥ötf
(
	`_
("parsingÉrror\n"));

139 i‡(
övÆid©e
) {

140 
xfs_buf_›s
 
nowrôe_›s
;

141 
Êi°_t
 *
sÊ
;

142 
bô_Àngth
;

143 
∑ª¡off£t
;

144 
¸c
;

146 
sÊ
 = 
Ê
;

147 
∑ª¡off£t
 = 0;

148 
sÊ
->
chûd
) {

149 
∑ª¡off£t
 = 
sÊ
->
off£t
;

150 
sÊ
 = sÊ->
chûd
;

152 
	`ASSERT
(
sÊ
->
Êd
->
·yp
 =
FLDT_CRC
);

154 
bô_Àngth
 = 
	`fsize
(
sÊ
->
Êd
, 
iocur_t›
->
d©a
, 
∑ª¡off£t
, 0);

155 
bô_Àngth
 *
	`fcou¡
(
sÊ
->
Êd
, 
iocur_t›
->
d©a
, 
∑ª¡off£t
);

156 
¸c
 = 
	`gëbôvÆ
(
iocur_t›
->
d©a
, 
sÊ
->
off£t
, 
bô_Àngth
,

157 
BVUNSIGNED
);

159 
¸c
 = 
	`˝u_to_be32
(crc + 1);

160 
	`£tbôvÆ
(
iocur_t›
->
d©a
, 
sÊ
->
off£t
, 
bô_Àngth
, &
¸c
);

163 
°ashed_›s
 = 
iocur_t›
->
bp
->
b_›s
;

164 
nowrôe_›s
.
vîify_ªad
 = 
°ashed_›s
->verify_read;

165 
nowrôe_›s
.
vîify_wrôe
 = 
xfs_dummy_vîify
;

166 
iocur_t›
->
bp
->
b_›s
 = &
nowrôe_›s
;

169 i‡(
övÆid©e
 || 
ªˇlcuœã
) {

170 i‡(
övÆid©e
)

171 
	`db¥ötf
(
	`_
("Invalidating CRC:\n"));

173 
	`db¥ötf
(
	`_
("Recalculating CRC:\n"));

175 
	`wrôe_cur
();

176 i‡(
°ashed_›s
)

177 
iocur_t›
->
bp
->
b_›s
 = 
°ashed_›s
;

179 
iocur_t›
->
bp
->
b_›s
->
	`vîify_ªad
(iocur_top->bp);

181 
	`db¥ötf
(
	`_
("Verifying CRC:\n"));

184 
	`Êi°_¥öt
(
Ê
);

185 
	`¥öt_Êi°
(
Ê
);

186 
	`Êi°_‰ì
(
Ê
);

188 
	}
}

	@crc.h

18 
	gfõld
;

20 
¸c_öô
();

21 
¸c_°ru˘
(c⁄° 
fõld_t
 *
fõlds
, 
¨gc
, **
¨gv
);

	@debug.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"debug.h
"

22 
	~"ouçut.h
"

24 
debug_f
(
¨gc
, **
¨gv
);

26 c⁄° 
cmdöfo_t
 
	gdebug_cmd
 =

27 { "debug", 
NULL
, 
debug_f
, 0, 1, 0, 
N_
("[flagbits]"),

28 
N_
("£àdebug o±i⁄ bôs"), 
NULL
 };

30 
	gdebug_°©e
;

33 
	$debug_f
(

34 
¨gc
,

35 **
¨gv
)

37 *
p
;

39 i‡(
¨gc
 > 1) {

40 
debug_°©e
 = 
	`°πﬁ
(
¨gv
[1], &
p
, 0);

41 i‡(*
p
 != '\0') {

42 
	`db¥ötf
(
	`_
("bad vÆuêf‹ debug %s\n"), 
¨gv
[1]);

46 
	`db¥ötf
("debug = %ld\n", 
debug_°©e
);

48 
	}
}

51 
	$debug_öô
()

53 
	`add_comm™d
(&
debug_cmd
);

54 
	}
}

	@debug.h

19 
	#DEBUG_FLIST
 0x1

	)

21 
debug_°©e
;

22 
debug_öô
();

	@dir2.c

19 
	~"libxfs.h
"

20 
	~"bô.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"dú2.h
"

26 
	~"öô.h
"

27 
	~"ouçut.h
"

29 
dú2_block_hdr_cou¡
(*
obj
, 
°¨toff
);

30 
dú2_block_Àaf_cou¡
(*
obj
, 
°¨toff
);

31 
dú2_block_Àaf_off£t
(*
obj
, 
°¨toff
, 
idx
);

32 
dú2_block_èû_cou¡
(*
obj
, 
°¨toff
);

33 
dú2_block_èû_off£t
(*
obj
, 
°¨toff
, 
idx
);

34 
dú2_block_u_cou¡
(*
obj
, 
°¨toff
);

35 
dú2_block_u_off£t
(*
obj
, 
°¨toff
, 
idx
);

36 
dú2_d©a_uni⁄_‰ìèg_cou¡
(*
obj
, 
°¨toff
);

37 
dú2_d©a_uni⁄_öumbî_cou¡
(*
obj
, 
°¨toff
);

38 
dú2_d©a_uni⁄_Àngth_cou¡
(*
obj
, 
°¨toff
);

39 
dú2_d©a_uni⁄_«me_cou¡
(*
obj
, 
°¨toff
);

40 
dú2_d©a_uni⁄_«mñí_cou¡
(*
obj
, 
°¨toff
);

41 
dú2_d©a_uni⁄_èg_cou¡
(*
obj
, 
°¨toff
);

42 
dú2_d©a_uni⁄_èg_off£t
(*
obj
, 
°¨toff
, 
idx
);

43 
dú2_d©a_hdr_cou¡
(*
obj
, 
°¨toff
);

44 
dú2_d©a_u_cou¡
(*
obj
, 
°¨toff
);

45 
dú2_d©a_u_off£t
(*
obj
, 
°¨toff
, 
idx
);

46 
dú2_‰ì_be°s_cou¡
(*
obj
, 
°¨toff
);

47 
dú2_‰ì_hdr_cou¡
(*
obj
, 
°¨toff
);

48 
dú2_Àaf_be°s_cou¡
(*
obj
, 
°¨toff
);

49 
dú2_Àaf_be°s_off£t
(*
obj
, 
°¨toff
, 
idx
);

50 
dú2_Àaf_íts_cou¡
(*
obj
, 
°¨toff
);

51 
dú2_Àaf_hdr_cou¡
(*
obj
, 
°¨toff
);

52 
dú2_Àaf_èû_cou¡
(*
obj
, 
°¨toff
);

53 
dú2_Àaf_èû_off£t
(*
obj
, 
°¨toff
, 
idx
);

54 
dú2_node_båì_cou¡
(*
obj
, 
°¨toff
);

55 
dú2_node_hdr_cou¡
(*
obj
, 
°¨toff
);

57 c⁄° 
fõld_t
 
	gdú2_hÊd
[] = {

58 { "", 
FLDT_DIR2
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

59 { 
NULL
 }

62 
	#BOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_hdr
, f))

	)

63 
	#DOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_hdr
, f))

	)

64 
	#FOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_‰ì
, f))

	)

65 
	#LOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_Àaf
, f))

	)

66 
	#NOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_öäode
, f))

	)

67 c⁄° 
fõld_t
 
	gdú2_Êds
[] = {

68 { "bhdr", 
FLDT_DIR2_DATA_HDR
, 
OI
(
BOFF
(
magic
)), 
dú2_block_hdr_cou¡
,

69 
FLD_COUNT
, 
TYP_NONE
 },

70 { "bu", 
FLDT_DIR2_DATA_UNION
, 
dú2_block_u_off£t
, 
dú2_block_u_cou¡
,

71 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

72 { "bÀaf", 
FLDT_DIR2_LEAF_ENTRY
, 
dú2_block_Àaf_off£t
,

73 
dú2_block_Àaf_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

74 { "bèû", 
FLDT_DIR2_BLOCK_TAIL
, 
dú2_block_èû_off£t
,

75 
dú2_block_èû_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

76 { "dhdr", 
FLDT_DIR2_DATA_HDR
, 
OI
(
DOFF
(
magic
)), 
dú2_d©a_hdr_cou¡
,

77 
FLD_COUNT
, 
TYP_NONE
 },

78 { "du", 
FLDT_DIR2_DATA_UNION
, 
dú2_d©a_u_off£t
, 
dú2_d©a_u_cou¡
,

79 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

80 { "lhdr", 
FLDT_DIR2_LEAF_HDR
, 
OI
(
LOFF
(
hdr
)), 
dú2_Àaf_hdr_cou¡
,

81 
FLD_COUNT
, 
TYP_NONE
 },

82 { "lbe°s", 
FLDT_DIR2_DATA_OFF
, 
dú2_Àaf_be°s_off£t
,

83 
dú2_Àaf_be°s_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

84 { "À¡s", 
FLDT_DIR2_LEAF_ENTRY
, 
OI
(
LOFF
(
__íts
)), 
dú2_Àaf_íts_cou¡
,

85 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

86 { "…aû", 
FLDT_DIR2_LEAF_TAIL
, 
dú2_Àaf_èû_off£t
,

87 
dú2_Àaf_èû_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

88 { "nhdr", 
FLDT_DA_NODE_HDR
, 
OI
(
NOFF
(
hdr
)), 
dú2_node_hdr_cou¡
,

89 
FLD_COUNT
, 
TYP_NONE
 },

90 { "nbåì", 
FLDT_DA_NODE_ENTRY
, 
OI
(
NOFF
(
__båì
)), 
dú2_node_båì_cou¡
,

91 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

92 { "fhdr", 
FLDT_DIR2_FREE_HDR
, 
OI
(
FOFF
(
hdr
)), 
dú2_‰ì_hdr_cou¡
,

93 
FLD_COUNT
, 
TYP_NONE
 },

94 { "fbe°s", 
FLDT_DIR2_DATA_OFFNZ
, 
OI
(
FOFF
(
be°s
)),

95 
dú2_‰ì_be°s_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

96 { 
NULL
 }

99 
	#BTOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_block_èû_t
, f))

	)

100 c⁄° 
fõld_t
 
	gdú2_block_èû_Êds
[] = {

101 { "cou¡", 
FLDT_UINT32D
, 
OI
(
BTOFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

102 { "°Æe", 
FLDT_UINT32D
, 
OI
(
BTOFF
(
°Æe
)), 
C1
, 0, 
TYP_NONE
 },

103 { 
NULL
 }

106 
	#DFOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_‰ì_t
, f))

	)

107 c⁄° 
fõld_t
 
	gdú2_d©a_‰ì_Êds
[] = {

108 { "off£t", 
FLDT_DIR2_DATA_OFF
, 
OI
(
DFOFF
(
off£t
)), 
C1
, 0, 
TYP_NONE
 },

109 { "Àngth", 
FLDT_DIR2_DATA_OFF
, 
OI
(
DFOFF
(
Àngth
)), 
C1
, 0, 
TYP_NONE
 },

110 { 
NULL
 }

113 
	#DHOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_hdr_t
, f))

	)

114 c⁄° 
fõld_t
 
	gdú2_d©a_hdr_Êds
[] = {

115 { "magic", 
FLDT_UINT32X
, 
OI
(
DHOFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

116 { "be°‰ì", 
FLDT_DIR2_DATA_FREE
, 
OI
(
DHOFF
(
be°‰ì
)),

117 
CI
(
XFS_DIR2_DATA_FD_COUNT
), 
FLD_ARRAY
, 
TYP_NONE
 },

118 { 
NULL
 }

121 
	#DEOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_íåy_t
, f))

	)

122 
	#DUOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_unu£d_t
, f))

	)

123 c⁄° 
fõld_t
 
	gdú2_d©a_uni⁄_Êds
[] = {

124 { "‰ìèg", 
FLDT_UINT16X
, 
OI
(
DUOFF
(
‰ìèg
)),

125 
dú2_d©a_uni⁄_‰ìèg_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

126 { "öumbî", 
FLDT_INO
, 
OI
(
DEOFF
(
öumbî
)),

127 
dú2_d©a_uni⁄_öumbî_cou¡
, 
FLD_COUNT
, 
TYP_INODE
 },

128 { "Àngth", 
FLDT_DIR2_DATA_OFF
, 
OI
(
DUOFF
(
Àngth
)),

129 
dú2_d©a_uni⁄_Àngth_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

130 { "«mñí", 
FLDT_UINT8D
, 
OI
(
DEOFF
(
«mñí
)),

131 
dú2_d©a_uni⁄_«mñí_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

132 { "«me", 
FLDT_CHARNS
, 
OI
(
DEOFF
(
«me
)), 
dú2_d©a_uni⁄_«me_cou¡
,

133 
FLD_COUNT
, 
TYP_NONE
 },

134 { "èg", 
FLDT_DIR2_DATA_OFF
, 
dú2_d©a_uni⁄_èg_off£t
,

135 
dú2_d©a_uni⁄_èg_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

136 { 
NULL
 }

139 
	#LEOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_Àaf_íåy_t
, f))

	)

140 c⁄° 
fõld_t
 
	gdú2_Àaf_íåy_Êds
[] = {

141 { "hashvÆ", 
FLDT_UINT32X
, 
OI
(
LEOFF
(
hashvÆ
)), 
C1
, 0, 
TYP_NONE
 },

142 { "addªss", 
FLDT_UINT32X
, 
OI
(
LEOFF
(
addªss
)), 
C1
, 0, 
TYP_NONE
 },

143 { 
NULL
 }

146 
	#LHOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_Àaf_hdr_t
, f))

	)

147 c⁄° 
fõld_t
 
	gdú2_Àaf_hdr_Êds
[] = {

148 { "öfo", 
FLDT_DA_BLKINFO
, 
OI
(
LHOFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

149 { "cou¡", 
FLDT_UINT16D
, 
OI
(
LHOFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

150 { "°Æe", 
FLDT_UINT16D
, 
OI
(
LHOFF
(
°Æe
)), 
C1
, 0, 
TYP_NONE
 },

151 { 
NULL
 }

154 
	#LTOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_Àaf_èû_t
, f))

	)

155 c⁄° 
fõld_t
 
	gdú2_Àaf_èû_Êds
[] = {

156 { "be°cou¡", 
FLDT_UINT32D
, 
OI
(
LTOFF
(
be°cou¡
)), 
C1
, 0, 
TYP_NONE
 },

157 { 
NULL
 }

160 
	#FHOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_‰ì_hdr_t
, f))

	)

161 c⁄° 
fõld_t
 
	gdú2_‰ì_hdr_Êds
[] = {

162 { "magic", 
FLDT_UINT32X
, 
OI
(
FHOFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

163 { "fú°db", 
FLDT_INT32D
, 
OI
(
FHOFF
(
fú°db
)), 
C1
, 0, 
TYP_NONE
 },

164 { "nvÆid", 
FLDT_INT32D
, 
OI
(
FHOFF
(
nvÆid
)), 
C1
, 0, 
TYP_NONE
 },

165 { "nu£d", 
FLDT_INT32D
, 
OI
(
FHOFF
(
nu£d
)), 
C1
, 0, 
TYP_NONE
 },

166 { 
NULL
 }

169 
	#DBOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_blköfo_t
, f))

	)

170 c⁄° 
fõld_t
 
	gda_blköfo_Êds
[] = {

171 { "f‹w", 
FLDT_DIRBLOCK
, 
OI
(
DBOFF
(
f‹w
)), 
C1
, 0, 
TYP_INODATA
 },

172 { "back", 
FLDT_DIRBLOCK
, 
OI
(
DBOFF
(
back
)), 
C1
, 0, 
TYP_INODATA
 },

173 { "magic", 
FLDT_UINT16X
, 
OI
(
DBOFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

174 { "∑d", 
FLDT_UINT16X
, 
OI
(
DBOFF
(
∑d
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

175 { 
NULL
 }

178 
	#EOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_node_íåy_t
, f))

	)

179 c⁄° 
fõld_t
 
	gda_node_íåy_Êds
[] = {

180 { "hashvÆ", 
FLDT_UINT32X
, 
OI
(
EOFF
(
hashvÆ
)), 
C1
, 0, 
TYP_NONE
 },

181 { "bef‹e", 
FLDT_DIRBLOCK
, 
OI
(
EOFF
(
bef‹e
)), 
C1
, 0, 
TYP_INODATA
 },

182 { 
NULL
 }

185 
	#HOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_node_hdr_t
, f))

	)

186 c⁄° 
fõld_t
 
	gda_node_hdr_Êds
[] = {

187 { "öfo", 
FLDT_DA_BLKINFO
, 
OI
(
HOFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

188 { "cou¡", 
FLDT_UINT16D
, 
OI
(
HOFF
(
__cou¡
)), 
C1
, 0, 
TYP_NONE
 },

189 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
HOFF
(
__Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

190 { 
NULL
 }

197 
	$__dú2_block_èû_off£t
(

198 
xfs_dú2_d©a_hdr
 *
block
,

199 
°¨toff
,

200 
idx
)

202 
xfs_dú2_block_èû
 *
bç
;

204 
	`ASSERT
(
°¨toff
 == 0);

205 
	`ASSERT
(
idx
 == 0);

206 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

207  
	`bôize
(()((*)
bç
 - (*)
block
));

208 
	}
}

211 
	$__dú2_d©a_íåõs_cou¡
(

212 *
±r
,

213 *
íd±r
)

215 
i
;

217 
i
 = 0; 
±r
 < 
íd±r
; i++) {

218 
xfs_dú2_d©a_íåy
 *
dï
;

219 
xfs_dú2_d©a_unu£d
 *
dup
;

221 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

222 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

223 
±r
 +
	`be16_to_˝u
(
dup
->
Àngth
);

225 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
±r
;

226 
±r
 +
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

229  
i
;

230 
	}
}

233 
	$__dú2_d©a_íåy_off£t
(

234 *
±r
,

235 *
íd±r
,

236 
idx
)

238 
i
;

240 
i
 = 0; i < 
idx
; i++) {

241 
xfs_dú2_d©a_íåy
 *
dï
;

242 
xfs_dú2_d©a_unu£d
 *
dup
;

244 
	`ASSERT
(
±r
 < 
íd±r
);

245 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

246 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

247 
±r
 +
	`be16_to_˝u
(
dup
->
Àngth
);

249 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
±r
;

250 
±r
 +
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

253  
±r
;

254 
	}
}

260 
	$dú2_block_hdr_cou¡
(

261 *
obj
,

262 
°¨toff
)

264 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

266 
	`ASSERT
(
°¨toff
 == 0);

267  
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
;

268 
	}
}

271 
	$dú3_block_hdr_cou¡
(

272 *
obj
,

273 
°¨toff
)

275 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

277 
	`ASSERT
(
°¨toff
 == 0);

278  
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
;

279 
	}
}

282 
	$dú2_block_Àaf_cou¡
(

283 *
obj
,

284 
°¨toff
)

286 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

287 
xfs_dú2_block_èû
 *
bç
;

289 
	`ASSERT
(
°¨toff
 == 0);

290 i‡(
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR2_BLOCK_MAGIC
 &&

291 
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR3_BLOCK_MAGIC
)

293 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

294  
	`be32_to_˝u
(
bç
->
cou¡
);

295 
	}
}

298 
	$dú2_block_Àaf_off£t
(

299 *
obj
,

300 
°¨toff
,

301 
idx
)

303 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

304 
xfs_dú2_block_èû
 *
bç
;

305 
xfs_dú2_Àaf_íåy
 *
Àp
;

307 
	`ASSERT
(
°¨toff
 == 0);

308 
	`ASSERT
(
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

309 
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
);

310 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

311 
Àp
 = 
	`xfs_dú2_block_Àaf_p
(
bç
Ë+ 
idx
;

312  
	`bôize
(()((*)
Àp
 - (*)
block
));

313 
	}
}

316 
	$dú2_block_èû_cou¡
(

317 *
obj
,

318 
°¨toff
)

320 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

322 
	`ASSERT
(
°¨toff
 == 0);

323  
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
;

324 
	}
}

327 
	$dú3_block_èû_cou¡
(

328 *
obj
,

329 
°¨toff
)

331 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

333 
	`ASSERT
(
°¨toff
 == 0);

334  
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
;

335 
	}
}

338 
	$dú2_block_èû_off£t
(

339 *
obj
,

340 
°¨toff
,

341 
idx
)

343 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

345 
	`ASSERT
(
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

346 
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
);

347  
	`__dú2_block_èû_off£t
(
block
, 
°¨toff
, 
idx
);

348 
	}
}

351 
	$dú2_block_u_cou¡
(

352 *
obj
,

353 
°¨toff
)

355 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

356 
xfs_dú2_block_èû
 *
bç
;

358 
	`ASSERT
(
°¨toff
 == 0);

359 i‡(
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR2_BLOCK_MAGIC
 &&

360 
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR3_BLOCK_MAGIC
)

363 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

364  
	`__dú2_d©a_íåõs_cou¡
(

365 (*)
	`M_DIROPS
(
mp
)->
	`d©a_unu£d_p
(
block
),

366 (*)
	`xfs_dú2_block_Àaf_p
(
bç
));

367 
	}
}

370 
	$dú2_block_u_off£t
(

371 *
obj
,

372 
°¨toff
,

373 
idx
)

375 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

376 
xfs_dú2_block_èû
 *
bç
;

377 *
±r
;

379 
	`ASSERT
(
°¨toff
 == 0);

380 
	`ASSERT
(
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

381 
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
);

382 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

383 
±r
 = 
	`__dú2_d©a_íåy_off£t
(

384 (*)
	`M_DIROPS
(
mp
)->
	`d©a_unu£d_p
(
block
),

385 (*)
	`xfs_dú2_block_Àaf_p
(
bç
), 
idx
);

386  
	`bôize
(()(
±r
 - (*)
block
));

387 
	}
}

393 
	$dú2_d©a_uni⁄_‰ìèg_cou¡
(

394 *
obj
,

395 
°¨toff
)

397 
xfs_dú2_d©a_unu£d_t
 *
dup
;

398 *
íd
;

400 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

401 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

402 
íd
 = (*)&
dup
->
‰ìèg
 + (dup->freetag);

403  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 &&

404 
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
;

405 
	}
}

408 
	$dú2_d©a_uni⁄_öumbî_cou¡
(

409 *
obj
,

410 
°¨toff
)

412 
xfs_dú2_d©a_íåy_t
 *
dï
;

413 
xfs_dú2_d©a_unu£d_t
 *
dup
;

414 *
íd
;

416 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

417 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

418 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

419 
íd
 = (*)&
dï
->
öumbî
 + (dep->inumber);

420  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 &&

421 
	`be16_to_˝u
(
dup
->
‰ìèg
Ë!
XFS_DIR2_DATA_FREE_TAG
;

422 
	}
}

425 
	$dú2_d©a_uni⁄_Àngth_cou¡
(

426 *
obj
,

427 
°¨toff
)

429 
xfs_dú2_d©a_unu£d_t
 *
dup
;

430 *
íd
;

432 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

433 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

434 
íd
 = (*)&
dup
->
Àngth
 + (dup->length);

435  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 &&

436 
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
;

437 
	}
}

440 
	$dú2_d©a_uni⁄_«me_cou¡
(

441 *
obj
,

442 
°¨toff
)

444 
xfs_dú2_d©a_íåy_t
 *
dï
;

445 
xfs_dú2_d©a_unu£d_t
 *
dup
;

446 *
íd
;

448 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

449 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

450 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

451 
íd
 = (*)&
dï
->
«mñí
 + (dep->namelen);

452 i‡(
íd
 >(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 ||

453 
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

455 
íd
 = (*)&
dï
->
«me
[0] + dï->
«mñí
;

456  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 ? 
dï
->
«mñí
 : 0;

457 
	}
}

460 
	$dú2_d©a_uni⁄_«mñí_cou¡
(

461 *
obj
,

462 
°¨toff
)

464 
xfs_dú2_d©a_íåy_t
 *
dï
;

465 
xfs_dú2_d©a_unu£d_t
 *
dup
;

466 *
íd
;

468 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

469 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

470 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

471 
íd
 = (*)&
dï
->
«mñí
 + (dep->namelen);

472  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 &&

473 
	`be16_to_˝u
(
dup
->
‰ìèg
Ë!
XFS_DIR2_DATA_FREE_TAG
;

474 
	}
}

477 
	$dú2_d©a_uni⁄_èg_cou¡
(

478 *
obj
,

479 
°¨toff
)

481 
xfs_dú2_d©a_íåy_t
 *
dï
;

482 
xfs_dú2_d©a_unu£d_t
 *
dup
;

483 *
íd
;

484 
__be16
 *
ègp
;

486 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

487 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

488 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

489 
íd
 = (*)&
dup
->
‰ìèg
 + (dup->freetag);

490 i‡(
íd
 > (*)
obj
 + 
mp
->
m_dú_geo
->
blksize
)

492 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

493 
íd
 = (*)&
dup
->
Àngth
 + (dup->length);

494 i‡(
íd
 > (*)
obj
 + 
mp
->
m_dú_geo
->
blksize
)

496 
ègp
 = 
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
);

498 
íd
 = (*)&
dï
->
«mñí
 + (dep->namelen);

499 i‡(
íd
 > (*)
obj
 + 
mp
->
m_dú_geo
->
blksize
)

501 
ègp
 = 
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
);

503 
íd
 = (*)
ègp
 + (*tagp);

504  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
;

505 
	}
}

508 
	$dú2_d©a_uni⁄_èg_off£t
(

509 *
obj
,

510 
°¨toff
,

511 
idx
)

513 
xfs_dú2_d©a_íåy_t
 *
dï
;

514 
xfs_dú2_d©a_unu£d_t
 *
dup
;

516 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

517 
	`ASSERT
(
idx
 == 0);

518 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

519 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

520  
	`bôize
(()((*)
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
) -

521 (*)
dup
));

522 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

523  
	`bôize
(()((*)
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
) -

524 (*)
dï
));

525 
	}
}

528 
	$dú2_d©a_hdr_cou¡
(

529 *
obj
,

530 
°¨toff
)

532 
xfs_dú2_d©a_hdr
 *
d©a
 = 
obj
;

534 
	`ASSERT
(
°¨toff
 == 0);

535  
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_DATA_MAGIC
;

536 
	}
}

539 
	$dú3_d©a_hdr_cou¡
(

540 *
obj
,

541 
°¨toff
)

543 
xfs_dú2_d©a_hdr
 *
d©a
 = 
obj
;

545 
	`ASSERT
(
°¨toff
 == 0);

546  
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR3_DATA_MAGIC
;

547 
	}
}

550 
	$dú2_d©a_u_cou¡
(

551 *
obj
,

552 
°¨toff
)

554 
xfs_dú2_d©a_hdr
 *
d©a
 = 
obj
;

556 
	`ASSERT
(
°¨toff
 == 0);

557 i‡(
	`be32_to_˝u
(
d©a
->
magic
Ë!
XFS_DIR2_DATA_MAGIC
 &&

558 
	`be32_to_˝u
(
d©a
->
magic
Ë!
XFS_DIR3_DATA_MAGIC
)

561  
	`__dú2_d©a_íåõs_cou¡
(

562 (*)
	`M_DIROPS
(
mp
)->
	`d©a_unu£d_p
(
d©a
),

563 (*)
d©a
 + 
mp
->
m_dú_geo
->
blksize
);

564 
	}
}

567 
	$dú2_d©a_u_off£t
(

568 *
obj
,

569 
°¨toff
,

570 
idx
)

572 
xfs_dú2_d©a_hdr
 *
d©a
 = 
obj
;

573 *
±r
;

575 
	`ASSERT
(
°¨toff
 == 0);

576 
	`ASSERT
(
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_DATA_MAGIC
 ||

577 
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR3_DATA_MAGIC
);

578 
±r
 = 
	`__dú2_d©a_íåy_off£t
(

579 (*)
	`M_DIROPS
(
mp
)->
	`d©a_unu£d_p
(
d©a
),

580 (*)
d©a
 + 
mp
->
m_dú_geo
->
blksize
, 
idx
);

581  
	`bôize
(()(
±r
 - (*)
d©a
));

582 
	}
}

585 
	$dú2_d©a_uni⁄_size
(

586 *
obj
,

587 
°¨toff
,

588 
idx
)

590 
xfs_dú2_d©a_íåy_t
 *
dï
;

591 
xfs_dú2_d©a_unu£d_t
 *
dup
;

593 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

594 
	`ASSERT
(
idx
 == 0);

595 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

596 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

597  
	`bôize
(
	`be16_to_˝u
(
dup
->
Àngth
));

599 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

600  
	`bôize
(
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
));

602 
	}
}

605 
	$dú3_d©a_uni⁄_·y≥_off£t
(

606 *
obj
,

607 
°¨toff
,

608 
idx
)

610 
xfs_dú2_d©a_íåy_t
 *
dï
;

611 
xfs_dú2_d©a_unu£d_t
 *
dup
;

613 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

614 
	`ASSERT
(
idx
 == 0);

615 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

616 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

617  
	`bôize
(()((*)
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
) -

618 (*)
dup
));

619 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

620  
	`bôize
(()((*)&
dï
->
«me
[dï->
«mñí
] - (*)dep));

621 
	}
}

627 
	$dú2_‰ì_be°s_cou¡
(

628 *
obj
,

629 
°¨toff
)

631 
xfs_dú2_‰ì
 *
‰ì
 = 
obj
;

633 
	`ASSERT
(
°¨toff
 == 0);

634 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
Ë!
XFS_DIR2_FREE_MAGIC
)

636  
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
);

637 
	}
}

640 
	$dú3_‰ì_be°s_cou¡
(

641 *
obj
,

642 
°¨toff
)

644 
xfs_dú3_‰ì
 *
‰ì
 = 
obj
;

646 
	`ASSERT
(
°¨toff
 == 0);

647 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.hdr.
magic
Ë!
XFS_DIR3_FREE_MAGIC
)

649  
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
);

650 
	}
}

653 
	$dú2_‰ì_hdr_cou¡
(

654 *
obj
,

655 
°¨toff
)

657 
xfs_dú2_‰ì
 *
‰ì
 = 
obj
;

659 
	`ASSERT
(
°¨toff
 == 0);

660  
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
Ë=
XFS_DIR2_FREE_MAGIC
;

661 
	}
}

664 
	$dú3_‰ì_hdr_cou¡
(

665 *
obj
,

666 
°¨toff
)

668 
xfs_dú3_‰ì
 *
‰ì
 = 
obj
;

670 
	`ASSERT
(
°¨toff
 == 0);

671  
	`be32_to_˝u
(
‰ì
->
hdr
.hdr.
magic
Ë=
XFS_DIR3_FREE_MAGIC
;

672 
	}
}

678 
	$dú2_Àaf_be°s_cou¡
(

679 *
obj
,

680 
°¨toff
)

682 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

683 
xfs_dú2_Àaf_èû
 *
…p
;

685 
	`ASSERT
(
°¨toff
 == 0);

686 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_DIR2_LEAF1_MAGIC
 &&

687 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_DIR3_LEAF1_MAGIC
)

689 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
mp
->
m_dú_geo
, 
Àaf
);

690  
	`be32_to_˝u
(
…p
->
be°cou¡
);

691 
	}
}

694 
	$dú2_Àaf_be°s_off£t
(

695 *
obj
,

696 
°¨toff
,

697 
idx
)

699 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

700 
xfs_dú2_Àaf_èû
 *
…p
;

701 
__be16
 *
lbp
;

703 
	`ASSERT
(
°¨toff
 == 0);

704 
	`ASSERT
(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR2_LEAF1_MAGIC
 ||

705 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR3_LEAF1_MAGIC
);

706 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
mp
->
m_dú_geo
, 
Àaf
);

707 
lbp
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
Ë+ 
idx
;

708  
	`bôize
(()((*)
lbp
 - (*)
Àaf
));

709 
	}
}

712 
	$dú2_Àaf_íts_cou¡
(

713 *
obj
,

714 
°¨toff
)

716 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

718 
	`ASSERT
(
°¨toff
 == 0);

719 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_DIR2_LEAF1_MAGIC
 &&

720 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_DIR2_LEAFN_MAGIC
)

722  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

723 
	}
}

726 
	$dú3_Àaf_íts_cou¡
(

727 *
obj
,

728 
°¨toff
)

730 
xfs_dú3_Àaf
 *
Àaf
 = 
obj
;

732 
	`ASSERT
(
°¨toff
 == 0);

733 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_DIR3_LEAF1_MAGIC
 &&

734 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_DIR3_LEAFN_MAGIC
)

736  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

737 
	}
}

740 
	$dú2_Àaf_hdr_cou¡
(

741 *
obj
,

742 
°¨toff
)

744 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

746 
	`ASSERT
(
°¨toff
 == 0);

747  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR2_LEAF1_MAGIC
 ||

748 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR2_LEAFN_MAGIC
;

749 
	}
}

752 
	$dú3_Àaf_hdr_cou¡
(

753 *
obj
,

754 
°¨toff
)

756 
xfs_dú3_Àaf
 *
Àaf
 = 
obj
;

758 
	`ASSERT
(
°¨toff
 == 0);

759  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_DIR3_LEAF1_MAGIC
 ||

760 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_DIR3_LEAFN_MAGIC
;

761 
	}
}

764 
	$dú2_Àaf_èû_cou¡
(

765 *
obj
,

766 
°¨toff
)

768 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

770 
	`ASSERT
(
°¨toff
 == 0);

771  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR2_LEAF1_MAGIC
;

772 
	}
}

775 
	$dú3_Àaf_èû_cou¡
(

776 *
obj
,

777 
°¨toff
)

779 
xfs_dú3_Àaf
 *
Àaf
 = 
obj
;

781 
	`ASSERT
(
°¨toff
 == 0);

782  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_DIR3_LEAF1_MAGIC
;

783 
	}
}

786 
	$dú2_Àaf_èû_off£t
(

787 *
obj
,

788 
°¨toff
,

789 
idx
)

791 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

792 
xfs_dú2_Àaf_èû
 *
…p
;

794 
	`ASSERT
(
°¨toff
 == 0);

795 
	`ASSERT
(
idx
 == 0);

796 
	`ASSERT
(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR2_LEAF1_MAGIC
 ||

797 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR3_LEAF1_MAGIC
);

798 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
mp
->
m_dú_geo
, 
Àaf
);

799  
	`bôize
(()((*)
…p
 - (*)
Àaf
));

800 
	}
}

806 
	$dú2_node_båì_cou¡
(

807 *
obj
,

808 
°¨toff
)

810 
xfs_da_öäode_t
 *
node
 = 
obj
;

812 
	`ASSERT
(
°¨toff
 == 0);

813 i‡(
	`be16_to_˝u
(
node
->
hdr
.
öfo
.
magic
Ë!
XFS_DA_NODE_MAGIC
)

815  
	`be16_to_˝u
(
node
->
hdr
.
__cou¡
);

816 
	}
}

819 
	$dú3_node_båì_cou¡
(

820 *
obj
,

821 
°¨toff
)

823 
xfs_da3_öäode
 *
node
 = 
obj
;

825 
	`ASSERT
(
°¨toff
 == 0);

826 i‡(
	`be16_to_˝u
(
node
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_DA3_NODE_MAGIC
)

828  
	`be16_to_˝u
(
node
->
hdr
.
__cou¡
);

829 
	}
}

832 
	$dú2_node_hdr_cou¡
(

833 *
obj
,

834 
°¨toff
)

836 
xfs_da_öäode
 *
node
 = 
obj
;

838 
	`ASSERT
(
°¨toff
 == 0);

839  
	`be16_to_˝u
(
node
->
hdr
.
öfo
.
magic
Ë=
XFS_DA_NODE_MAGIC
;

840 
	}
}

843 
	$dú3_node_hdr_cou¡
(

844 *
obj
,

845 
°¨toff
)

847 
xfs_da3_öäode
 *
node
 = 
obj
;

849 
	`ASSERT
(
°¨toff
 == 0);

850  
	`be16_to_˝u
(
node
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_DA3_NODE_MAGIC
;

851 
	}
}

854 
	$dú2_size
(

855 *
obj
,

856 
°¨toff
,

857 
idx
)

859  
	`bôize
(
mp
->
m_dú_geo
->
blksize
);

860 
	}
}

865 c⁄° 
fõld_t
 
	gdú3_hÊd
[] = {

866 { "", 
FLDT_DIR3
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

867 { 
NULL
 }

870 
	#B3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_d©a_hdr
, f))

	)

871 
	#D3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_d©a_hdr
, f))

	)

872 
	#F3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_‰ì
, f))

	)

873 
	#L3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_Àaf
, f))

	)

874 
	#N3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da3_öäode
, f))

	)

875 c⁄° 
fõld_t
 
	gdú3_Êds
[] = {

876 { "bhdr", 
FLDT_DIR3_DATA_HDR
, 
OI
(
B3OFF
(
hdr
)), 
dú3_block_hdr_cou¡
,

877 
FLD_COUNT
, 
TYP_NONE
 },

878 { "bu", 
FLDT_DIR3_DATA_UNION
, 
dú2_block_u_off£t
, 
dú2_block_u_cou¡
,

879 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

880 { "bÀaf", 
FLDT_DIR2_LEAF_ENTRY
, 
dú2_block_Àaf_off£t
,

881 
dú2_block_Àaf_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

882 { "bèû", 
FLDT_DIR2_BLOCK_TAIL
, 
dú2_block_èû_off£t
,

883 
dú3_block_èû_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

884 { "dhdr", 
FLDT_DIR3_DATA_HDR
, 
OI
(
D3OFF
(
hdr
)), 
dú3_d©a_hdr_cou¡
,

885 
FLD_COUNT
, 
TYP_NONE
 },

886 { "du", 
FLDT_DIR3_DATA_UNION
, 
dú2_d©a_u_off£t
, 
dú2_d©a_u_cou¡
,

887 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

888 { "lhdr", 
FLDT_DIR3_LEAF_HDR
, 
OI
(
L3OFF
(
hdr
)), 
dú3_Àaf_hdr_cou¡
,

889 
FLD_COUNT
, 
TYP_NONE
 },

890 { "lbe°s", 
FLDT_DIR2_DATA_OFF
, 
dú2_Àaf_be°s_off£t
,

891 
dú2_Àaf_be°s_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

892 { "À¡s", 
FLDT_DIR2_LEAF_ENTRY
, 
OI
(
L3OFF
(
__íts
)), 
dú3_Àaf_íts_cou¡
,

893 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

894 { "…aû", 
FLDT_DIR2_LEAF_TAIL
, 
dú2_Àaf_èû_off£t
,

895 
dú3_Àaf_èû_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

896 { "nhdr", 
FLDT_DA3_NODE_HDR
, 
OI
(
N3OFF
(
hdr
)), 
dú3_node_hdr_cou¡
,

897 
FLD_COUNT
, 
TYP_NONE
 },

898 { "nbåì", 
FLDT_DA_NODE_ENTRY
, 
OI
(
N3OFF
(
__båì
)), 
dú3_node_båì_cou¡
,

899 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

900 { "fhdr", 
FLDT_DIR3_FREE_HDR
, 
OI
(
F3OFF
(
hdr
)), 
dú3_‰ì_hdr_cou¡
,

901 
FLD_COUNT
, 
TYP_NONE
 },

902 { "fbe°s", 
FLDT_DIR2_DATA_OFFNZ
, 
OI
(
F3OFF
(
be°s
)),

903 
dú3_‰ì_be°s_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

904 { 
NULL
 }

907 
	#D3EOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_íåy_t
, f))

	)

908 
	#D3UOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_unu£d_t
, f))

	)

909 c⁄° 
fõld_t
 
	gdú3_d©a_uni⁄_Êds
[] = {

910 { "‰ìèg", 
FLDT_UINT16X
, 
OI
(
D3UOFF
(
‰ìèg
)),

911 
dú2_d©a_uni⁄_‰ìèg_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

912 { "öumbî", 
FLDT_INO
, 
OI
(
D3EOFF
(
öumbî
)),

913 
dú2_d©a_uni⁄_öumbî_cou¡
, 
FLD_COUNT
, 
TYP_INODE
 },

914 { "Àngth", 
FLDT_DIR2_DATA_OFF
, 
OI
(
D3UOFF
(
Àngth
)),

915 
dú2_d©a_uni⁄_Àngth_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

916 { "«mñí", 
FLDT_UINT8D
, 
OI
(
D3EOFF
(
«mñí
)),

917 
dú2_d©a_uni⁄_«mñí_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

918 { "«me", 
FLDT_CHARNS
, 
OI
(
D3EOFF
(
«me
)), 
dú2_d©a_uni⁄_«me_cou¡
,

919 
FLD_COUNT
, 
TYP_NONE
 },

920 { "fûëy≥", 
FLDT_UINT8D
, 
dú3_d©a_uni⁄_·y≥_off£t
, 
C1
,

921 
FLD_OFFSET
, 
TYP_NONE
 },

922 { "èg", 
FLDT_DIR2_DATA_OFF
, 
dú2_d©a_uni⁄_èg_off£t
,

923 
dú2_d©a_uni⁄_èg_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

924 { 
NULL
 }

927 
	#DBH3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_blk_hdr
, f))

	)

928 c⁄° 
fõld_t
 
	gdú3_blkhdr_Êds
[] = {

929 { "magic", 
FLDT_UINT32X
, 
OI
(
DBH3OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

930 { "¸c", 
FLDT_CRC
, 
OI
(
DBH3OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

931 { "bno", 
FLDT_DFSBNO
, 
OI
(
DBH3OFF
(
blkno
)), 
C1
, 0, 
TYP_BMAPBTD
 },

932 { "l¢", 
FLDT_UINT64X
, 
OI
(
DBH3OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

933 { "uuid", 
FLDT_UUID
, 
OI
(
DBH3OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

934 { "ow√r", 
FLDT_INO
, 
OI
(
DBH3OFF
(
ow√r
)), 
C1
, 0, 
TYP_NONE
 },

935 { 
NULL
 }

938 
	#DH3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_d©a_hdr
, f))

	)

939 c⁄° 
fõld_t
 
	gdú3_d©a_hdr_Êds
[] = {

940 { "hdr", 
FLDT_DIR3_BLKHDR
, 
OI
(
DH3OFF
(
hdr
)), 
C1
, 0, 
TYP_NONE
 },

941 { "be°‰ì", 
FLDT_DIR2_DATA_FREE
, 
OI
(
DH3OFF
(
be°_‰ì
)),

942 
CI
(
XFS_DIR2_DATA_FD_COUNT
), 
FLD_ARRAY
, 
TYP_NONE
 },

943 { 
NULL
 }

946 
	#LH3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_Àaf_hdr
, f))

	)

947 c⁄° 
fõld_t
 
	gdú3_Àaf_hdr_Êds
[] = {

948 { "öfo", 
FLDT_DA3_BLKINFO
, 
OI
(
LH3OFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

949 { "cou¡", 
FLDT_UINT16D
, 
OI
(
LH3OFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

950 { "°Æe", 
FLDT_UINT16D
, 
OI
(
LH3OFF
(
°Æe
)), 
C1
, 0, 
TYP_NONE
 },

951 { 
NULL
 }

954 
	#FH3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_‰ì_hdr
, f))

	)

955 c⁄° 
fõld_t
 
	gdú3_‰ì_hdr_Êds
[] = {

956 { "hdr", 
FLDT_DIR3_BLKHDR
, 
OI
(
FH3OFF
(
hdr
)), 
C1
, 0, 
TYP_NONE
 },

957 { "fú°db", 
FLDT_INT32D
, 
OI
(
FH3OFF
(
fú°db
)), 
C1
, 0, 
TYP_NONE
 },

958 { "nvÆid", 
FLDT_INT32D
, 
OI
(
FH3OFF
(
nvÆid
)), 
C1
, 0, 
TYP_NONE
 },

959 { "nu£d", 
FLDT_INT32D
, 
OI
(
FH3OFF
(
nu£d
)), 
C1
, 0, 
TYP_NONE
 },

960 { 
NULL
 }

964 
	#DB3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da3_blköfo
, f))

	)

965 c⁄° 
fõld_t
 
	gda3_blköfo_Êds
[] = {

966 { "hdr", 
FLDT_DA_BLKINFO
, 
OI
(
DB3OFF
(
hdr
)), 
C1
, 0, 
TYP_NONE
 },

967 { "¸c", 
FLDT_CRC
, 
OI
(
DB3OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

968 { "bno", 
FLDT_DFSBNO
, 
OI
(
DB3OFF
(
blkno
)), 
C1
, 0, 
TYP_BMAPBTD
 },

969 { "l¢", 
FLDT_UINT64X
, 
OI
(
DB3OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

970 { "uuid", 
FLDT_UUID
, 
OI
(
DB3OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

971 { "ow√r", 
FLDT_INO
, 
OI
(
DB3OFF
(
ow√r
)), 
C1
, 0, 
TYP_NONE
 },

972 { 
NULL
 }

975 
	#H3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da3_node_hdr
, f))

	)

976 c⁄° 
fõld_t
 
	gda3_node_hdr_Êds
[] = {

977 { "öfo", 
FLDT_DA3_BLKINFO
, 
OI
(
H3OFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

978 { "cou¡", 
FLDT_UINT16D
, 
OI
(
H3OFF
(
__cou¡
)), 
C1
, 0, 
TYP_NONE
 },

979 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
H3OFF
(
__Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

980 { "∑d", 
FLDT_UINT32D
, 
OI
(
H3OFF
(
__∑d32
)), 
C1
, 0, 
TYP_NONE
 },

981 { 
NULL
 }

989 
	$xfs_dú3_db_ªad_vîify
(

990 
xfs_buf
 *
bp
)

992 
__be32
 
magic32
;

993 
__be16
 
magic16
;

995 
magic32
 = *(
__be32
 *)
bp
->
b_addr
;

996 
magic16
 = ((
xfs_da_blköfo
 *)
bp
->
b_addr
)->
magic
;

998 
magic32
) {

999 
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
):

1000 
bp
->
b_›s
 = &
xfs_dú3_block_buf_›s
;

1001 
vîify
;

1002 
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
):

1003 
bp
->
b_›s
 = &
xfs_dú3_d©a_buf_›s
;

1004 
vîify
;

1005 
	`˝u_to_be32
(
XFS_DIR3_FREE_MAGIC
):

1006 
bp
->
b_›s
 = &
xfs_dú3_‰ì_buf_›s
;

1007 
vîify
;

1012 
magic16
) {

1013 
	`˝u_to_be16
(
XFS_DIR3_LEAF1_MAGIC
):

1014 
bp
->
b_›s
 = &
xfs_dú3_Àaf1_buf_›s
;

1016 
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
):

1017 
bp
->
b_›s
 = &
xfs_dú3_Àa‚_buf_›s
;

1019 
	`˝u_to_be16
(
XFS_DA3_NODE_MAGIC
):

1020 
bp
->
b_›s
 = &
xfs_da3_node_buf_›s
;

1023 
	`db¥ötf
(
	`_
("Unknown directory bufferÅype!\n"));

1024 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

1027 
vîify
:

1028 
bp
->
b_›s
->
	`vîify_ªad
(bp);

1029 
	}
}

1032 
	$xfs_dú3_db_wrôe_vîify
(

1033 
xfs_buf
 *
bp
)

1035 
	`db¥ötf
(
	`_
("Writing unknown directory bufferÅype!\n"));

1036 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

1037 
	}
}

1039 c⁄° 
xfs_buf_›s
 
	gxfs_dú3_db_buf_›s
 = {

1040 .
«me
 = "xfs_dir3",

1041 .
	gvîify_ªad
 = 
xfs_dú3_db_ªad_vîify
,

1042 .
	gvîify_wrôe
 = 
xfs_dú3_db_wrôe_vîify
,

	@dir2.h

22 c⁄° 
fõld_t
 
dú2_block_èû_Êds
[];

23 c⁄° 
fõld_t
 
dú2_d©a_‰ì_Êds
[];

24 c⁄° 
fõld_t
 
dú2_d©a_uni⁄_Êds
[];

25 c⁄° 
fõld_t
 
dú2_Àaf_èû_Êds
[];

26 c⁄° 
fõld_t
 
dú2_Àaf_íåy_Êds
[];

28 c⁄° 
fõld_t
 
da_node_íåy_Êds
[];

33 c⁄° 
fõld_t
 
dú2_Êds
[];

34 c⁄° 
fõld_t
 
dú2_hÊd
[];

35 c⁄° 
fõld_t
 
dú2_d©a_hdr_Êds
[];

36 c⁄° 
fõld_t
 
dú2_‰ì_hdr_Êds
[];

37 c⁄° 
fõld_t
 
dú2_Àaf_hdr_Êds
[];

39 c⁄° 
fõld_t
 
da_blköfo_Êds
[];

40 c⁄° 
fõld_t
 
da_node_hdr_Êds
[];

45 c⁄° 
fõld_t
 
dú3_Êds
[];

46 c⁄° 
fõld_t
 
dú3_hÊd
[];

47 c⁄° 
fõld_t
 
dú3_blkhdr_Êds
[];

48 c⁄° 
fõld_t
 
dú3_d©a_hdr_Êds
[];

49 c⁄° 
fõld_t
 
dú3_‰ì_hdr_Êds
[];

50 c⁄° 
fõld_t
 
dú3_Àaf_hdr_Êds
[];

51 c⁄° 
fõld_t
 
dú3_d©a_uni⁄_Êds
[];

53 c⁄° 
fõld_t
 
da3_blköfo_Êds
[];

54 c⁄° 
fõld_t
 
da3_node_hdr_Êds
[];

56 
ölöe
 
uöt8_t
 *
	$xfs_dú2_sf_öumbîp
(
xfs_dú2_sf_íåy_t
 *
s„p
)

58  &(
s„p
)->
«me
[(s„p)->
«mñí
];

59 
	}
}

61 
dú2_d©a_uni⁄_size
(*
obj
, 
°¨toff
, 
idx
);

62 
dú2_size
(*
obj
, 
°¨toff
, 
idx
);

64 c⁄° 
xfs_buf_›s
 
xfs_dú3_db_buf_›s
;

	@dir2sf.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"bô.h
"

25 
	~"dú2.h
"

26 
	~"dú2sf.h
"

27 
	~"öô.h
"

29 
dú2_öou_i4_cou¡
(*
obj
, 
°¨toff
);

30 
dú2_öou_i8_cou¡
(*
obj
, 
°¨toff
);

31 
dú2_sf_íåy_öumbî_off£t
(*
obj
, 
°¨toff
, 
idx
);

32 
dú2_sf_íåy_«me_cou¡
(*
obj
, 
°¨toff
);

33 
dú2_sf_li°_cou¡
(*
obj
, 
°¨toff
);

34 
dú2_sf_li°_off£t
(*
obj
, 
°¨toff
, 
idx
);

36 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_sf_hdr
, f))

	)

37 c⁄° 
fõld_t
 
	gdú2sf_Êds
[] = {

38 { "hdr", 
FLDT_DIR2_SF_HDR
, 
OI
(
OFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

39 { "li°", 
FLDT_DIR2_SF_ENTRY
, 
dú2_sf_li°_off£t
, 
dú2_sf_li°_cou¡
,

40 
FLD_ARRAY
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

41 { 
NULL
 }

44 c⁄° 
fõld_t
 
	gdú2_öou_Êds
[] = {

45 { "i8", 
FLDT_DIR2_INO8
, 0, 
dú2_öou_i8_cou¡
, 
FLD_COUNT
, 
TYP_INODE
 },

46 { "i4", 
FLDT_DIR2_INO4
, 0, 
dú2_öou_i4_cou¡
, 
FLD_COUNT
, 
TYP_INODE
 },

47 { 
NULL
 }

50 
	#HOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_sf_hdr_t
, f))

	)

51 c⁄° 
fõld_t
 
	gdú2_sf_hdr_Êds
[] = {

52 { "cou¡", 
FLDT_UINT8D
, 
OI
(
HOFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

53 { "i8cou¡", 
FLDT_UINT8D
, 
OI
(
HOFF
(
i8cou¡
)), 
C1
, 0, 
TYP_NONE
 },

54 { "∑ª¡", 
FLDT_DIR2_INOU
, 
OI
(
HOFF
(
∑ª¡
)), 
C1
, 0, 
TYP_NONE
 },

55 { 
NULL
 }

58 
	#EOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_sf_íåy_t
, f))

	)

59 c⁄° 
fõld_t
 
	gdú2_sf_íåy_Êds
[] = {

60 { "«mñí", 
FLDT_UINT8D
, 
OI
(
EOFF
(
«mñí
)), 
C1
, 0, 
TYP_NONE
 },

61 { "off£t", 
FLDT_DIR2_SF_OFF
, 
OI
(
EOFF
(
off£t
)), 
C1
, 0, 
TYP_NONE
 },

62 { "«me", 
FLDT_CHARNS
, 
OI
(
EOFF
(
«me
)), 
dú2_sf_íåy_«me_cou¡
,

63 
FLD_COUNT
, 
TYP_NONE
 },

64 { "öumbî", 
FLDT_DIR2_INOU
, 
dú2_sf_íåy_öumbî_off£t
, 
C1
,

65 
FLD_OFFSET
, 
TYP_NONE
 },

66 { 
NULL
 }

71 
	$dú2_öou_i4_cou¡
(

72 *
obj
,

73 
°¨toff
)

75 
xfs_döode
 *
dù
 = 
obj
;

76 
xfs_dú2_sf_hdr
 *
sf
;

78 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

79 
sf
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

80  
sf
->
i8cou¡
 == 0;

81 
	}
}

85 
	$dú2_öou_i8_cou¡
(

86 *
obj
,

87 
°¨toff
)

89 
xfs_döode
 *
dù
 = 
obj
;

90 
xfs_dú2_sf_hdr
 *
sf
;

92 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

93 
sf
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

94  
sf
->
i8cou¡
 != 0;

95 
	}
}

99 
	$dú2_öou_size
(

100 *
obj
,

101 
°¨toff
,

102 
idx
)

104 
xfs_döode
 *
dù
 = 
obj
;

105 
xfs_dú2_sf_hdr
 *
sf
;

107 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

108 
	`ASSERT
(
idx
 == 0);

109 
sf
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

110  
	`bôize
(
sf
->
i8cou¡
 ? 
XFS_INO64_SIZE
 : 
XFS_INO32_SIZE
);

111 
	}
}

114 
	$dú2_sf_íåy_«me_cou¡
(

115 *
obj
,

116 
°¨toff
)

118 
xfs_dú2_sf_íåy_t
 *
e
;

120 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

121 
e
 = (
xfs_dú2_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

122  
e
->
«mñí
;

123 
	}
}

126 
	$dú2_sf_íåy_öumbî_off£t
(

127 *
obj
,

128 
°¨toff
,

129 
idx
)

131 
xfs_dú2_sf_íåy_t
 *
e
;

133 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

134 
	`ASSERT
(
idx
 == 0);

135 
e
 = (
xfs_dú2_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

136  
	`bôize
(()((*)
	`xfs_dú2_sf_öumbîp
(
e
) - (*)e));

137 
	}
}

140 
	$dú3_sf_íåy_öumbî_off£t
(

141 *
obj
,

142 
°¨toff
,

143 
idx
)

145 
xfs_dú2_sf_íåy_t
 *
e
;

147 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

148 
	`ASSERT
(
idx
 == 0);

149 
e
 = (
xfs_dú2_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

151  
	`bôize
(()((*)
	`xfs_dú2_sf_öumbîp
(
e
) + 1 - (*)e));

152 
	}
}

155 
	$dú3_sf_íåy_·y≥_off£t
(

156 *
obj
,

157 
°¨toff
,

158 
idx
)

160 
xfs_dú2_sf_íåy_t
 *
e
;

162 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

163 
	`ASSERT
(
idx
 == 0);

164 
e
 = (
xfs_dú2_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

165  
	`bôize
(()((*)&
e
->
«me
[e->
«mñí
] - (*)e));

166 
	}
}

169 
	$dú2_sf_íåy_size
(

170 *
obj
,

171 
°¨toff
,

172 
idx
)

174 
xfs_dú2_sf_íåy_t
 *
e
;

175 
i
;

176 
xfs_dú2_sf_hdr
 *
sf
;

178 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

179 
sf
 = (
xfs_dú2_sf_hdr
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

180 
e
 = 
	`xfs_dú2_sf_fú°íåy
(
sf
);

181 
i
 = 0; i < 
idx
; i++)

182 
e
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
sf
,É);

183  
	`bôize
(()
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sf
, 
e
->
«mñí
));

184 
	}
}

188 
	$dú2_sf_hdr_size
(

189 *
obj
,

190 
°¨toff
,

191 
idx
)

193 
xfs_dú2_sf_hdr
 *
sf
;

195 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

196 
	`ASSERT
(
idx
 == 0);

197 
sf
 = (
xfs_dú2_sf_hdr
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

198  
	`bôize
(
	`xfs_dú2_sf_hdr_size
(
sf
->
i8cou¡
));

199 
	}
}

202 
	$dú2_sf_li°_cou¡
(

203 *
obj
,

204 
°¨toff
)

206 
xfs_dú2_sf_hdr
 *
sf
;

208 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

209 
sf
 = (
xfs_dú2_sf_hdr
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

210  
sf
->
cou¡
;

211 
	}
}

214 
	$dú2_sf_li°_off£t
(

215 *
obj
,

216 
°¨toff
,

217 
idx
)

219 
xfs_dú2_sf_íåy_t
 *
e
;

220 
i
;

221 
xfs_dú2_sf_hdr
 *
sf
;

223 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

224 
sf
 = (
xfs_dú2_sf_hdr
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

225 
e
 = 
	`xfs_dú2_sf_fú°íåy
(
sf
);

226 
i
 = 0; i < 
idx
; i++)

227 
e
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
sf
,É);

228  
	`bôize
(()((*)
e
 - (*)
sf
));

229 
	}
}

233 
	$dú2sf_size
(

234 *
obj
,

235 
°¨toff
,

236 
idx
)

238 
xfs_dú2_sf_íåy_t
 *
e
;

239 
i
;

240 
xfs_dú2_sf_hdr
 *
sf
;

242 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

243 
	`ASSERT
(
idx
 == 0);

244 
sf
 = (
xfs_dú2_sf_hdr
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

245 
e
 = 
	`xfs_dú2_sf_fú°íåy
(
sf
);

246 
i
 = 0; i < 
sf
->
cou¡
; i++)

247 
e
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
sf
,É);

248  
	`bôize
(()((*)
e
 - (*)
sf
));

249 
	}
}

251 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_sf_hdr
, f))

	)

252 c⁄° 
fõld_t
 
	gdú3sf_Êds
[] = {

253 { "hdr", 
FLDT_DIR2_SF_HDR
, 
OI
(
OFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

254 { "li°", 
FLDT_DIR3_SF_ENTRY
, 
dú2_sf_li°_off£t
, 
dú2_sf_li°_cou¡
,

255 
FLD_ARRAY
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

256 { 
NULL
 }

259 
	#E3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_sf_íåy_t
, f))

	)

260 c⁄° 
fõld_t
 
	gdú3_sf_íåy_Êds
[] = {

261 { "«mñí", 
FLDT_UINT8D
, 
OI
(
EOFF
(
«mñí
)), 
C1
, 0, 
TYP_NONE
 },

262 { "off£t", 
FLDT_DIR2_SF_OFF
, 
OI
(
EOFF
(
off£t
)), 
C1
, 0, 
TYP_NONE
 },

263 { "«me", 
FLDT_CHARNS
, 
OI
(
EOFF
(
«me
)), 
dú2_sf_íåy_«me_cou¡
,

264 
FLD_COUNT
, 
TYP_NONE
 },

265 { "öumbî", 
FLDT_DIR2_INOU
, 
dú3_sf_íåy_öumbî_off£t
, 
C1
,

266 
FLD_OFFSET
, 
TYP_NONE
 },

267 { "fûëy≥", 
FLDT_UINT8D
, 
dú3_sf_íåy_·y≥_off£t
, 
C1
,

268 
FLD_OFFSET
, 
TYP_NONE
 },

269 { 
NULL
 }

	@dir2sf.h

19 c⁄° 
fõld_t
 
dú2sf_Êds
[];

20 c⁄° 
fõld_t
 
dú2_öou_Êds
[];

21 c⁄° 
fõld_t
 
dú2_sf_hdr_Êds
[];

22 c⁄° 
fõld_t
 
dú2_sf_íåy_Êds
[];

24 c⁄° 
fõld_t
 
dú3sf_Êds
[];

25 c⁄° 
fõld_t
 
dú3_sf_íåy_Êds
[];

27 
dú2sf_size
(*
obj
, 
°¨toff
, 
idx
);

28 
dú2_öou_size
(*
obj
, 
°¨toff
, 
idx
);

29 
dú2_sf_íåy_size
(*
obj
, 
°¨toff
, 
idx
);

30 
dú2_sf_hdr_size
(*
obj
, 
°¨toff
, 
idx
);

	@dquot.c

19 
	~"libxfs.h
"

20 
	~"bô.h
"

21 
	~"bm≠.h
"

22 
	~"comm™d.h
"

23 
	~"ty≥.h
"

24 
	~"Áddr.h
"

25 
	~"Âröt.h
"

26 
	~"fõld.h
"

27 
	~"öode.h
"

28 
	~"io.h
"

29 
	~"öô.h
"

30 
	~"ouçut.h
"

31 
	~"dquŸ.h
"

33 
dquŸ_f
(
¨gc
, **
¨gv
);

34 
dquŸ_hñp
();

36 c⁄° 
cmdöfo_t
 
	gdquŸ_cmd
 = {

37 "dquŸ", 
NULL
, 
dquŸ_f
, 1, 2, 1, 
N_
("[-g|-p|-u] id"),

38 
N_
("set currentáddressÅoá group,Öroject or user quota block for given ID"),

39 
dquŸ_hñp
,

42 c⁄° 
fõld_t
 
	gdqblk_hÊd
[] = {

43 { "", 
FLDT_DQBLK
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

44 { 
NULL
 }

47 
	#DDOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dqblk_t
, 
dd_
 ## f))

	)

48 
	#DDSZC
(
f
Ë
	`szcou¡
(
xfs_dqblk_t
, 
dd_
 ## f)

	)

49 c⁄° 
fõld_t
 
	gdqblk_Êds
[] = {

50 { "diskdq", 
FLDT_DISK_DQUOT
, 
OI
(
DDOFF
(
diskdq
)), 
C1
, 0, 
TYP_NONE
 },

51 { "fûl", 
FLDT_CHARS
, 
OI
(
DDOFF
(
fûl
)), 
CI
(
DDSZC
(fûl)), 
FLD_SKIPALL
,

52 
TYP_NONE
 },

53 { "¸c", 
FLDT_CRC
, 
OI
(
DDOFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

54 { "l¢", 
FLDT_UINT64X
, 
OI
(
DDOFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

55 { "uuid", 
FLDT_UUID
, 
OI
(
DDOFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

56 { 
NULL
 }

59 
	#DOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_disk_dquŸ_t
, 
d_
 ## f))

	)

60 c⁄° 
fõld_t
 
	gdisk_dquŸ_Êds
[] = {

61 { "magic", 
FLDT_UINT16X
, 
OI
(
DOFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

62 { "vîsi⁄", 
FLDT_UINT8X
, 
OI
(
DOFF
(
vîsi⁄
)), 
C1
, 0, 
TYP_NONE
 },

63 { "Êags", 
FLDT_UINT8X
, 
OI
(
DOFF
(
Êags
)), 
C1
, 0, 
TYP_NONE
 },

64 { "id", 
FLDT_DQID
, 
OI
(
DOFF
(
id
)), 
C1
, 0, 
TYP_NONE
 },

65 { "blk_h¨dlimô", 
FLDT_QCNT
, 
OI
(
DOFF
(
blk_h¨dlimô
)), 
C1
, 0,

66 
TYP_NONE
 },

67 { "blk_so·limô", 
FLDT_QCNT
, 
OI
(
DOFF
(
blk_so·limô
)), 
C1
, 0,

68 
TYP_NONE
 },

69 { "öo_h¨dlimô", 
FLDT_QCNT
, 
OI
(
DOFF
(
öo_h¨dlimô
)), 
C1
, 0,

70 
TYP_NONE
 },

71 { "öo_so·limô", 
FLDT_QCNT
, 
OI
(
DOFF
(
öo_so·limô
)), 
C1
, 0,

72 
TYP_NONE
 },

73 { "bcou¡", 
FLDT_QCNT
, 
OI
(
DOFF
(
bcou¡
)), 
C1
, 0, 
TYP_NONE
 },

74 { "icou¡", 
FLDT_QCNT
, 
OI
(
DOFF
(
icou¡
)), 
C1
, 0, 
TYP_NONE
 },

75 { "ôimî", 
FLDT_INT32D
, 
OI
(
DOFF
(
ôimî
)), 
C1
, 0, 
TYP_NONE
 },

76 { "btimî", 
FLDT_INT32D
, 
OI
(
DOFF
(
btimî
)), 
C1
, 0, 
TYP_NONE
 },

77 { "iw¨ns", 
FLDT_QWARNCNT
, 
OI
(
DOFF
(
iw¨ns
)), 
C1
, 0, 
TYP_NONE
 },

78 { "bw¨ns", 
FLDT_QWARNCNT
, 
OI
(
DOFF
(
bw¨ns
)), 
C1
, 0, 
TYP_NONE
 },

79 { "∑d0", 
FLDT_INT32D
, 
OI
(
DOFF
(
∑d0
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

80 { "πb_h¨dlimô", 
FLDT_QCNT
, 
OI
(
DOFF
(
πb_h¨dlimô
)), 
C1
, 0,

81 
TYP_NONE
 },

82 { "πb_so·limô", 
FLDT_QCNT
, 
OI
(
DOFF
(
πb_so·limô
)), 
C1
, 0,

83 
TYP_NONE
 },

84 { "πbcou¡", 
FLDT_QCNT
, 
OI
(
DOFF
(
πbcou¡
)), 
C1
, 0, 
TYP_NONE
 },

85 { "πbtimî", 
FLDT_INT32D
, 
OI
(
DOFF
(
πbtimî
)), 
C1
, 0, 
TYP_NONE
 },

86 { "πbw¨ns", 
FLDT_QWARNCNT
, 
OI
(
DOFF
(
πbw¨ns
)), 
C1
, 0, 
TYP_NONE
 },

87 { "∑d", 
FLDT_UINT16X
, 
OI
(
DOFF
(
∑d
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

88 { 
NULL
 }

92 
	$dquŸ_hñp
()

94 
	}
}

97 
	$dquŸ_f
(

98 
¨gc
,

99 **
¨gv
)

101 
bm≠_ext_t
 
bm
;

102 
c
;

103 
dogΩ
;

104 
d›rj
;

105 
xfs_dqid_t
 
id
;

106 
xfs_öo_t
 
öo
;

107 
√x
;

108 *
p
;

109 
≥rblock
;

110 
xfs_fûeoff_t
 
qbno
;

111 
qoff
;

112 *
s
;

114 
dogΩ
 = 
d›rj
 = 
›töd
 = 0;

115 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "gpu")Ë!
EOF
) {

116 
c
) {

118 
dogΩ
 = 1;

119 
d›rj
 = 0;

122 
d›rj
 = 1;

123 
dogΩ
 = 0;

126 
dogΩ
 = 
d›rj
 = 0;

129 
	`db¥ötf
(
	`_
("bad option for dquot command\n"));

133 
s
 = 
d›rj
 ? 
	`_
("¥oje˘"Ë: 
dogΩ
 ? _("group") : _("user");

134 i‡(
›töd
 !
¨gc
 - 1) {

135 
	`db¥ötf
(
	`_
("dquŸ comm™dÑequúe†⁄ê%†idárgumít\n"), 
s
);

138 
öo
 = 
mp
->
m_sb
.
sb_uquŸöo
;

139 i‡(
d›rj
)

140 
öo
 = 
mp
->
m_sb
.
sb_pquŸöo
;

141 i‡(
dogΩ
)

142 
öo
 = 
mp
->
m_sb
.
sb_gquŸöo
;

144 i‡(
öo
 =0 || inÿ=
NULLFSINO
) {

145 
	`db¥ötf
(
	`_
("nÿ%†quŸ®öodê¥e£¡\n"), 
s
);

148 
id
 = (
xfs_dqid_t
)
	`°πﬁ
(
¨gv
[
›töd
], &
p
, 0);

149 i‡(*
p
 != '\0') {

150 
	`db¥ötf
(
	`_
("bad %†id f‹ dquŸ %s\n"), 
s
, 
¨gv
[
›töd
]);

153 
≥rblock
 = ()(
mp
->
m_sb
.
sb_blocksize
 / (
xfs_dqblk_t
));

154 
qbno
 = (
xfs_fûeoff_t
)
id
 / 
≥rblock
;

155 
qoff
 = ()(
id
 % 
≥rblock
);

156 
	`push_cur
();

157 
	`£t_cur_öode
(
öo
);

158 
√x
 = 1;

159 
	`bm≠
(
qbno
, 1, 
XFS_DATA_FORK
, &
√x
, &
bm
);

160 
	`p›_cur
();

161 i‡(
√x
 == 0) {

162 
	`db¥ötf
(
	`_
("nÿ%†quŸ®d©®f‹ id %d\n"), 
s
, 
id
);

165 
	`£t_cur
(&
ty±ab
[
TYP_DQBLK
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bm
.
°¨tblock
), 
blkbb
,

166 
DB_RING_IGN
, 
NULL
);

167 
iocur_t›
->
dquŸ_buf
 = 1;

168 
	`off_cur
(
qoff
 * ()(
xfs_dqblk_t
), (xfs_dqblk_t));

169 
	`rög_add
();

171 
	}
}

174 
	$dquŸ_öô
()

176 
	`add_comm™d
(&
dquŸ_cmd
);

177 
	}
}

	@dquot.h

19 c⁄° 
fõld
 
disk_dquŸ_Êds
[];

20 c⁄° 
fõld
 
dqblk_Êds
[];

21 c⁄° 
fõld
 
dqblk_hÊd
[];

23 
dquŸ_öô
();

	@echo.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"echo.h
"

22 
	~"ouçut.h
"

24 
echo_f
(
¨gc
, **
¨gv
);

26 c⁄° 
cmdöfo_t
 
	gecho_cmd
 =

27 { "echo", 
NULL
, 
echo_f
, 0, -1, 0, 
N_
("[args]..."),

28 
N_
("echÿ¨gumíts"), 
NULL
 };

32 
	$echo_f
(

33 
¨gc
,

34 **
¨gv
)

36 *
c
;

38 
c
 = *(++
¨gv
); c; c = *(++argv))

39 
	`db¥ötf
("%†", 
c
);

40 
	`db¥ötf
("\n");

42 
	}
}

45 
	$echo_öô
()

47 
	`add_comm™d
(&
echo_cmd
);

48 
	}
}

	@echo.h

19 
echo_öô
();

	@faddr.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Âröt.h
"

22 
	~"Áddr.h
"

23 
	~"fõld.h
"

24 
	~"öode.h
"

25 
	~"io.h
"

26 
	~"bô.h
"

27 
	~"bm≠.h
"

28 
	~"ouçut.h
"

29 
	~"öô.h
"

32 
	$Á_agblock
(

33 *
obj
,

34 
bô
,

35 
ty≤m_t
 
√xt
)

37 
xfs_agblock_t
 
bno
;

39 i‡(
cur_agno
 =
NULLAGNUMBER
) {

40 
	`db¥ötf
(
	`_
("no currentállocation group, cannot setÇewáddr\n"));

43 
bno
 = (
xfs_agblock_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

44 i‡(
bno
 =
NULLAGBLOCK
) {

45 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

48 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

49 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
cur_agno
, 
bno
), 
blkbb
,

50 
DB_RING_ADD
, 
NULL
);

51 
	}
}

55 
	$Á_agöo
(

56 *
obj
,

57 
bô
,

58 
ty≤m_t
 
√xt
)

60 
xfs_agöo_t
 
agöo
;

62 i‡(
cur_agno
 =
NULLAGNUMBER
) {

63 
	`db¥ötf
(
	`_
("no currentállocation group, cannot setÇewáddr\n"));

66 
agöo
 = (
xfs_agöo_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
◊göo), 
BVUNSIGNED
);

67 i‡(
agöo
 =
NULLAGINO
) {

68 
	`db¥ötf
(
	`_
("null inodeÇumber, cannot setÇewáddr\n"));

71 
	`£t_cur_öode
(
	`XFS_AGINO_TO_INO
(
mp
, 
cur_agno
, 
agöo
));

72 
	}
}

76 
	$Á_©åblock
(

77 *
obj
,

78 
bô
,

79 
ty≤m_t
 
√xt
)

81 
bm≠_ext_t
 
bm
;

82 
__uöt32_t
 
bno
;

83 
xfs_fsblock_t
 
dfsbno
;

84 
√x
;

86 
bno
 = (
__uöt32_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

87 i‡(
bno
 == 0) {

88 
	`db¥ötf
(
	`_
("nulláttribute blockÇumber, cannot setÇewáddr\n"));

91 
√x
 = 1;

92 
	`bm≠
(
bno
, 1, 
XFS_ATTR_FORK
, &
√x
, &
bm
);

93 i‡(
√x
 == 0) {

94 
	`db¥ötf
(
	`_
("attribute block is unmapped\n"));

97 
dfsbno
 = 
bm
.
°¨tblock
 + (
bno
 - bm.
°¨toff
);

98 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

99 
	`£t_cur
(&
ty±ab
[
√xt
], (
__öt64_t
)
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
), 
blkbb
,

100 
DB_RING_ADD
, 
NULL
);

101 
	}
}

104 
	$Á_cfûeofÁ
(

105 *
obj
,

106 
bô
,

107 
ty≤m_t
 
√xt
)

109 
bm≠_ext_t
 
bm
;

110 
xfs_fûeoff_t
 
bno
;

111 
xfs_fsblock_t
 
dfsbno
;

112 
√x
;

114 
bno
 = (
xfs_fûeoff_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
BMBT_STARTOFF_BITLEN
,

115 
BVUNSIGNED
);

116 i‡(
bno
 =
NULLFILEOFF
) {

117 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

120 
√x
 = 1;

121 
	`bm≠
(
bno
, 1, 
XFS_ATTR_FORK
, &
√x
, &
bm
);

122 i‡(
√x
 == 0) {

123 
	`db¥ötf
(
	`_
("file block is unmapped\n"));

126 
dfsbno
 = 
bm
.
°¨tblock
 + (
bno
 - bm.
°¨toff
);

127 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

128 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
), 
blkbb
, 
DB_RING_ADD
,

129 
NULL
);

130 
	}
}

133 
	$Á_cfûeoffd
(

134 *
obj
,

135 
bô
,

136 
ty≤m_t
 
√xt
)

138 
bbm≠_t
 
bbm≠
;

139 
bm≠_ext_t
 *
bmp
;

140 
xfs_fûeoff_t
 
bno
;

141 
xfs_fsblock_t
 
dfsbno
;

142 
nb
;

143 
√x
;

145 
bno
 = (
xfs_fûeoff_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
BMBT_STARTOFF_BITLEN
,

146 
BVUNSIGNED
);

147 i‡(
bno
 =
NULLFILEOFF
) {

148 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

151 
√x
 = 
nb
 = 
√xt
 =
TYP_DIR2
 ? 
mp
->
m_dú_geo
->
fsbcou¡
 : 1;

152 
bmp
 = 
	`mÆloc
(
nb
 * (*bmp));

153 
	`bm≠
(
bno
, 
nb
, 
XFS_DATA_FORK
, &
√x
, 
bmp
);

154 i‡(
√x
 == 0) {

155 
	`db¥ötf
(
	`_
("file block is unmapped\n"));

156 
	`‰ì
(
bmp
);

159 
dfsbno
 = 
bmp
->
°¨tblock
 + (
bno
 - bmp->
°¨toff
);

160 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

161 i‡(
√x
 > 1)

162 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

163 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
), 
nb
 * 
blkbb
,

164 
DB_RING_ADD
, 
√x
 > 1 ? &
bbm≠
: 
NULL
);

165 
	`‰ì
(
bmp
);

166 
	}
}

169 
	$Á_cfsblock
(

170 *
obj
,

171 
bô
,

172 
ty≤m_t
 
√xt
)

174 
xfs_fsblock_t
 
bno
;

175 
nb
;

177 
bno
 = (
xfs_fsblock_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
BMBT_STARTBLOCK_BITLEN
,

178 
BVUNSIGNED
);

179 i‡(
bno
 =
NULLFSBLOCK
) {

180 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

183 
nb
 = 
√xt
 =
TYP_DIR2
 ? 
mp
->
m_dú_geo
->
fsbcou¡
 : 1;

184 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

185 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
), 
nb
 * 
blkbb
,

186 
DB_RING_ADD
, 
NULL
);

187 
	}
}

190 
	$Á_dfûofÁ
(

191 *
obj
,

192 
bô
,

193 
ty≤m_t
 
√xt
)

195 
bm≠_ext_t
 
bm
;

196 
xfs_fûeoff_t
 
bno
;

197 
xfs_fsblock_t
 
dfsbno
;

198 
√x
;

200 
bno
 = (
xfs_fûeoff_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

201 i‡(
bno
 =
NULLFILEOFF
) {

202 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

205 
√x
 = 1;

206 
	`bm≠
(
bno
, 1, 
XFS_ATTR_FORK
, &
√x
, &
bm
);

207 i‡(
√x
 == 0) {

208 
	`db¥ötf
(
	`_
("file block is unmapped\n"));

211 
dfsbno
 = 
bm
.
°¨tblock
 + (
bno
 - bm.
°¨toff
);

212 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

213 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
), 
blkbb
, 
DB_RING_ADD
,

214 
NULL
);

215 
	}
}

218 
	$Á_dfûoffd
(

219 *
obj
,

220 
bô
,

221 
ty≤m_t
 
√xt
)

223 
bbm≠_t
 
bbm≠
;

224 
bm≠_ext_t
 *
bmp
;

225 
xfs_fûeoff_t
 
bno
;

226 
xfs_fsblock_t
 
dfsbno
;

227 
nb
;

228 
√x
;

230 
bno
 = (
xfs_fûeoff_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

231 i‡(
bno
 =
NULLFILEOFF
) {

232 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

235 
√x
 = 
nb
 = 
√xt
 =
TYP_DIR2
 ? 
mp
->
m_dú_geo
->
fsbcou¡
 : 1;

236 
bmp
 = 
	`mÆloc
(
nb
 * (*bmp));

237 
	`bm≠
(
bno
, 
nb
, 
XFS_DATA_FORK
, &
√x
, 
bmp
);

238 i‡(
√x
 == 0) {

239 
	`db¥ötf
(
	`_
("file block is unmapped\n"));

240 
	`‰ì
(
bmp
);

243 
dfsbno
 = 
bmp
->
°¨tblock
 + (
bno
 - bmp->
°¨toff
);

244 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

245 i‡(
√x
 > 1)

246 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

247 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
), 
nb
 * 
blkbb
,

248 
DB_RING_ADD
, 
√x
 > 1 ? &
bbm≠
 : 
NULL
);

249 
	`‰ì
(
bmp
);

250 
	}
}

253 
	$Á_dfsbno
(

254 *
obj
,

255 
bô
,

256 
ty≤m_t
 
√xt
)

258 
xfs_fsblock_t
 
bno
;

260 
bno
 = (
xfs_fsblock_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

261 i‡(
bno
 =
NULLFSBLOCK
) {

262 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

265 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

266 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
), 
blkbb
, 
DB_RING_ADD
,

267 
NULL
);

268 
	}
}

272 
	$Á_dúblock
(

273 *
obj
,

274 
bô
,

275 
ty≤m_t
 
√xt
)

277 
bbm≠_t
 
bbm≠
;

278 
bm≠_ext_t
 *
bmp
;

279 
__uöt32_t
 
bno
;

280 
xfs_fsblock_t
 
dfsbno
;

281 
√x
;

283 
bno
 = (
__uöt32_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

284 i‡(
bno
 == 0) {

285 
	`db¥ötf
(
	`_
("null directory blockÇumber, cannot setÇewáddr\n"));

288 
√x
 = 
mp
->
m_dú_geo
->
fsbcou¡
;

289 
bmp
 = 
	`mÆloc
(
√x
 * (*bmp));

290 
	`bm≠
(
bno
, 
mp
->
m_dú_geo
->
fsbcou¡
, 
XFS_DATA_FORK
, &
√x
, 
bmp
);

291 i‡(
√x
 == 0) {

292 
	`db¥ötf
(
	`_
("directory block is unmapped\n"));

293 
	`‰ì
(
bmp
);

296 
dfsbno
 = 
bmp
->
°¨tblock
 + (
bno
 - bmp->
°¨toff
);

297 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

298 i‡(
√x
 > 1)

299 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

300 
	`£t_cur
(&
ty±ab
[
√xt
], (
__öt64_t
)
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
),

301 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_dú_geo
->
fsbcou¡
), 
DB_RING_ADD
,

302 
√x
 > 1 ? &
bbm≠
 : 
NULL
);

303 
	`‰ì
(
bmp
);

304 
	}
}

307 
	$Á_drfsbno
(

308 *
obj
,

309 
bô
,

310 
ty≤m_t
 
√xt
)

312 
xfs_rfsblock_t
 
bno
;

314 
bno
 = (
xfs_rfsblock_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

315 i‡(
bno
 =
NULLRFSBLOCK
) {

316 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

319 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

320 
	`£t_cur
(&
ty±ab
[
√xt
], (
__öt64_t
)
	`XFS_FSB_TO_BB
(
mp
, 
bno
), 
blkbb
,

321 
DB_RING_ADD
, 
NULL
);

322 
	}
}

326 
	$Á_dπbno
(

327 *
obj
,

328 
bô
,

329 
ty≤m_t
 
√xt
)

331 
xfs_πblock_t
 
bno
;

333 
bno
 = (
xfs_πblock_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

334 i‡(
bno
 =
NULLRTBLOCK
) {

335 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

339 
	}
}

343 
	$Á_öo
(

344 *
obj
,

345 
bô
,

346 
ty≤m_t
 
√xt
)

348 
xfs_öo_t
 
öo
;

350 
	`ASSERT
(
√xt
 =
TYP_INODE
);

351 
öo
 = (
xfs_öo_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(öo), 
BVUNSIGNED
);

352 i‡(
öo
 =
NULLFSINO
) {

353 
	`db¥ötf
(
	`_
("null inodeÇumber, cannot setÇewáddr\n"));

356 
	`£t_cur_öode
(
öo
);

357 
	}
}

360 
	$Á_öo4
(

361 *
obj
,

362 
bô
,

363 
ty≤m_t
 
√xt
)

365 
xfs_öo_t
 
öo
;

367 
	`ASSERT
(
√xt
 =
TYP_INODE
);

368 
öo
 = (
xfs_öo_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(
XFS_INO32_SIZE
), 
BVUNSIGNED
);

369 i‡(
öo
 =
NULLFSINO
) {

370 
	`db¥ötf
(
	`_
("null inodeÇumber, cannot setÇewáddr\n"));

373 
	`£t_cur_öode
(
öo
);

374 
	}
}

377 
	$Á_öo8
(

378 *
obj
,

379 
bô
,

380 
ty≤m_t
 
√xt
)

382 
xfs_öo_t
 
öo
;

384 
	`ASSERT
(
√xt
 =
TYP_INODE
);

385 
öo
 = (
xfs_öo_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(
XFS_INO64_SIZE
), 
BVUNSIGNED
);

386 i‡(
öo
 =
NULLFSINO
) {

387 
	`db¥ötf
(
	`_
("null inodeÇumber, cannot setÇewáddr\n"));

390 
	`£t_cur_öode
(
öo
);

391 
	}
}

	@faddr.h

19 (*
	tad‚c_t
)(*
	tobj
, 
	tbô
, 
	tty≤m_t
 
	t√xt
);

21 
	`Á_agblock
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

22 
	`Á_agöo
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

23 
	`Á_©åblock
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

24 
	`Á_cfûeoffd
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

25 
	`Á_cfsblock
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

26 
	`Á_dfûoffd
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

27 
	`Á_dfsbno
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

28 
	`Á_döode_uni⁄
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

29 
	`Á_dúblock
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

30 
	`Á_drfsbno
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

31 
	`Á_dπbno
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

32 
	`Á_öo
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

33 
	`Á_cfûeofÁ
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

34 
	`Á_dfûofÁ
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

35 
	`Á_öo4
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

36 
	`Á_öo8
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

	@field.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"öode.h
"

25 
	~"btblock.h
"

26 
	~"bmroŸ.h
"

27 
	~"bô.h
"

28 
	~"agf.h
"

29 
	~"agÊ.h
"

30 
	~"agi.h
"

31 
	~"sb.h
"

32 
	~"©å.h
"

33 
	~"©åsh‹t.h
"

34 
	~"dquŸ.h
"

35 
	~"dú2.h
"

36 
	~"dú2sf.h
"

37 
	~"symlök.h
"

39 c⁄° 
·©å_t
 
	g·©åèb
[] = {

40 { 
FLDT_AEXTNUM
, "´xäum", 
Â_num
, "%d", 
SI
(
bôsz
(
xfs_´xäum_t
)),

41 
FTARG_SIGNED
, 
NULL
, NULL },

42 { 
FLDT_AGBLOCK
, "agblock", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_agblock_t
)),

43 
FTARG_DONULL
, 
Á_agblock
, 
NULL
 },

44 { 
FLDT_AGBLOCKNZ
, "agblocknz", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_agblock_t
)),

45 
FTARG_SKIPZERO
|
FTARG_DONULL
, 
Á_agblock
, 
NULL
 },

46 { 
FLDT_AGF
, "agf", 
NULL
, (*)
agf_Êds
, 
agf_size
, 
FTARG_SIZE
, NULL,

47 
agf_Êds
 },

48 { 
FLDT_AGFL
, "agÊ", 
NULL
, (*)
agÊ_Êds
, 
agÊ_size
, 
FTARG_SIZE
,

49 
NULL
, 
agÊ_Êds
 },

50 { 
FLDT_AGFL_CRC
, "agÊ", 
NULL
, (*)
agÊ_¸c_Êds
, 
agÊ_size
,

51 
FTARG_SIZE
, 
NULL
, 
agÊ_¸c_Êds
 },

52 { 
FLDT_AGI
, "agi", 
NULL
, (*)
agi_Êds
, 
agi_size
, 
FTARG_SIZE
, NULL,

53 
agi_Êds
 },

54 { 
FLDT_AGINO
, "agöo", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_agöo_t
)),

55 
FTARG_DONULL
, 
Á_agöo
, 
NULL
 },

56 { 
FLDT_AGINONN
, "agö⁄n", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_agöo_t
)),

57 
FTARG_SKIPNULL
, 
Á_agöo
, 
NULL
 },

58 { 
FLDT_AGNUMBER
, "agnumbî", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_agnumbî_t
)),

59 
FTARG_DONULL
, 
NULL
, NULL },

62 { 
FLDT_ATTR
, "©å", 
NULL
, (*)
©å_Êds
, 
©å_size
, 
FTARG_SIZE
,

63 
NULL
, 
©å_Êds
 },

64 { 
FLDT_ATTR_BLKINFO
, "©å_blköfo", 
NULL
, (*)
©å_blköfo_Êds
,

65 
SI
(
bôsz
(
xfs_da_blköfo
)), 0, 
NULL
, 
©å_blköfo_Êds
 },

66 { 
FLDT_ATTR_LEAF_ENTRY
, "©å_Àaf_íåy", 
Â_ßºay
,

67 (*)
©å_Àaf_íåy_Êds
, 
SI
(
bôsz
(
xfs_©å_Àaf_íåy
)),

68 0, 
NULL
, 
©å_Àaf_íåy_Êds
 },

69 { 
FLDT_ATTR_LEAF_HDR
, "©å_Àaf_hdr", 
NULL
, (*)
©å_Àaf_hdr_Êds
,

70 
SI
(
bôsz
(
xfs_©å_Àaf_hdr
)), 0, 
NULL
, 
©å_Àaf_hdr_Êds
 },

71 { 
FLDT_ATTR_LEAF_MAP
, "©å_Àaf_m≠", 
Â_ßºay
,

72 (*)
©å_Àaf_m≠_Êds
, 
SI
(
bôsz
(
xfs_©å_Àaf_m≠
)), 0,

73 
NULL
, 
©å_Àaf_m≠_Êds
 },

74 { 
FLDT_ATTR_LEAF_NAME
, "©å_Àaf_«me", 
NULL
,

75 (*)
©å_Àaf_«me_Êds
, 
©å_Àaf_«me_size
, 
FTARG_SIZE
, 
NULL
,

76 
©å_Àaf_«me_Êds
 },

77 { 
FLDT_ATTR_NODE_ENTRY
, "©å_node_íåy", 
Â_ßºay
,

78 (*)
©å_node_íåy_Êds
, 
SI
(
bôsz
(
xfs_da_node_íåy
)), 0,

79 
NULL
, 
©å_node_íåy_Êds
 },

80 { 
FLDT_ATTR_NODE_HDR
, "©å_node_hdr", 
NULL
, (*)
©å_node_hdr_Êds
,

81 
SI
(
bôsz
(
xfs_da_node_hdr
)), 0, 
NULL
, 
©å_node_hdr_Êds
 },

82 { 
FLDT_ATTR_SF_ENTRY
, "©å_sf_íåy", 
NULL
, (*)
©å_sf_íåy_Êds
,

83 
©å_sf_íåy_size
, 
FTARG_SIZE
, 
NULL
, 
©å_sf_íåy_Êds
 },

84 { 
FLDT_ATTR_SF_HDR
, "©å_sf_hdr", 
NULL
, (*)
©å_sf_hdr_Êds
,

85 
SI
(
bôsz
(
xfs_©å_sf_hdr
)), 0, 
NULL
, 
©å_sf_hdr_Êds
 },

86 { 
FLDT_ATTRBLOCK
, "©åblock", 
Â_num
, "%u", 
SI
(
bôsz
(
__uöt32_t
)), 0,

87 
Á_©åblock
, 
NULL
 },

88 { 
FLDT_ATTRSHORT
, "©åsh‹t", 
NULL
, (*)
©å_sh‹tf‹m_Êds
,

89 
©åsh‹t_size
, 
FTARG_SIZE
, 
NULL
, 
©å_sh‹tf‹m_Êds
 },

92 { 
FLDT_ATTR3
, "©å3", 
NULL
, (*)
©å3_Êds
, 
©å_size
, 
FTARG_SIZE
,

93 
NULL
, 
©å3_Êds
 },

94 { 
FLDT_ATTR3_LEAF_HDR
, "©å3_Àaf_hdr", 
NULL
,

95 (*)
©å3_Àaf_hdr_Êds
, 
SI
(
bôsz
(
xfs_©å3_Àaf_hdr
)),

96 0, 
NULL
, 
©å3_Àaf_hdr_Êds
 },

97 { 
FLDT_ATTR3_NODE_HDR
, "©å3_node_hdr", 
NULL
,

98 (*)
da3_node_hdr_Êds
, 
SI
(
bôsz
(
xfs_da3_node_hdr
)),

99 0, 
NULL
, 
da3_node_hdr_Êds
 },

101 { 
FLDT_BMAPBTA
, "bm≠bè", 
NULL
, (*)
bm≠bè_Êds
, 
btblock_size
,

102 
FTARG_SIZE
, 
NULL
, 
bm≠bè_Êds
 },

103 { 
FLDT_BMAPBTA_CRC
, "bm≠bè", 
NULL
, (*)
bm≠bè_¸c_Êds
,

104 
btblock_size
, 
FTARG_SIZE
, 
NULL
, 
bm≠bè_¸c_Êds
 },

105 { 
FLDT_BMAPBTAKEY
, "bm≠bèkey", 
Â_ßºay
, (*)
bm≠bè_key_Êds
,

106 
SI
(
bôsz
(
xfs_bmbt_key_t
)), 0, 
NULL
, 
bm≠bè_key_Êds
 },

107 { 
FLDT_BMAPBTAPTR
, "bm≠bè±r", 
Â_num
, "%llu",

108 
SI
(
bôsz
(
xfs_bmbt_±r_t
)), 0, 
Á_dfsbno
, 
NULL
 },

109 { 
FLDT_BMAPBTAREC
, "bm≠bèªc", 
Â_ßºay
, (*)
bm≠bè_ªc_Êds
,

110 
SI
(
bôsz
(
xfs_bmbt_ªc_t
)), 0, 
NULL
, 
bm≠bè_ªc_Êds
 },

111 { 
FLDT_BMAPBTD
, "bm≠btd", 
NULL
, (*)
bm≠btd_Êds
, 
btblock_size
,

112 
FTARG_SIZE
, 
NULL
, 
bm≠btd_Êds
 },

113 { 
FLDT_BMAPBTD_CRC
, "bm≠btd", 
NULL
, (*)
bm≠btd_¸c_Êds
,

114 
btblock_size
, 
FTARG_SIZE
, 
NULL
, 
bm≠btd_¸c_Êds
 },

115 { 
FLDT_BMAPBTDKEY
, "bm≠btdkey", 
Â_ßºay
, (*)
bm≠btd_key_Êds
,

116 
SI
(
bôsz
(
xfs_bmbt_key_t
)), 0, 
NULL
, 
bm≠btd_key_Êds
 },

117 { 
FLDT_BMAPBTDPTR
, "bm≠btd±r", 
Â_num
, "%llu",

118 
SI
(
bôsz
(
xfs_bmbt_±r_t
)), 0, 
Á_dfsbno
, 
NULL
 },

119 { 
FLDT_BMAPBTDREC
, "bm≠btdªc", 
Â_ßºay
, (*)
bm≠btd_ªc_Êds
,

120 
SI
(
bôsz
(
xfs_bmbt_ªc_t
)), 0, 
NULL
, 
bm≠btd_ªc_Êds
 },

121 { 
FLDT_BMROOTA
, "bmroŸa", 
NULL
, (*)
bmroŸa_Êds
, 
bmroŸa_size
,

122 
FTARG_SIZE
, 
NULL
, 
bmroŸa_Êds
 },

123 { 
FLDT_BMROOTAKEY
, "bmroŸakey", 
Â_ßºay
, (*)
bmroŸa_key_Êds
,

124 
SI
(
bôsz
(
xfs_bmdr_key_t
)), 0, 
NULL
, 
bmroŸa_key_Êds
 },

125 { 
FLDT_BMROOTAPTR
, "bmroŸ≠å", 
Â_num
, "%llu",

126 
SI
(
bôsz
(
xfs_bmdr_±r_t
)), 0, 
Á_dfsbno
, 
NULL
 },

127 { 
FLDT_BMROOTD
, "bmroŸd", 
NULL
, (*)
bmroŸd_Êds
, 
bmroŸd_size
,

128 
FTARG_SIZE
, 
NULL
, 
bmroŸd_Êds
 },

129 { 
FLDT_BMROOTDKEY
, "bmroŸdkey", 
Â_ßºay
, (*)
bmroŸd_key_Êds
,

130 
SI
(
bôsz
(
xfs_bmdr_key_t
)), 0, 
NULL
, 
bmroŸd_key_Êds
 },

131 { 
FLDT_BMROOTDPTR
, "bmroŸd±r", 
Â_num
, "%llu",

132 
SI
(
bôsz
(
xfs_bmdr_±r_t
)), 0, 
Á_dfsbno
, 
NULL
 },

133 { 
FLDT_BNOBT
, "bnobt", 
NULL
, (*)
bnobt_Êds
, 
btblock_size
, 
FTARG_SIZE
,

134 
NULL
, 
bnobt_Êds
 },

135 { 
FLDT_BNOBT_CRC
, "bnobt", 
NULL
, (*)
bnobt_¸c_Êds
, 
btblock_size
,

136 
FTARG_SIZE
, 
NULL
, 
bnobt_¸c_Êds
 },

137 { 
FLDT_BNOBTKEY
, "bnobtkey", 
Â_ßºay
, (*)
bnobt_key_Êds
,

138 
SI
(
bôsz
(
xfs_Æloc_key_t
)), 0, 
NULL
, 
bnobt_key_Êds
 },

139 { 
FLDT_BNOBTPTR
, "bnobçå", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_Æloc_±r_t
)),

140 0, 
Á_agblock
, 
NULL
 },

141 { 
FLDT_BNOBTREC
, "bnobåec", 
Â_ßºay
, (*)
bnobt_ªc_Êds
,

142 
SI
(
bôsz
(
xfs_Æloc_ªc_t
)), 0, 
NULL
, 
bnobt_ªc_Êds
 },

143 { 
FLDT_CEXTFLG
, "˚xtÊag", 
Â_num
, "%u", 
SI
(
BMBT_EXNTFLAG_BITLEN
), 0,

144 
NULL
, NULL },

145 { 
FLDT_CEXTLEN
, "˚xéí", 
Â_num
, "%u", 
SI
(
BMBT_BLOCKCOUNT_BITLEN
), 0,

146 
NULL
, NULL },

147 { 
FLDT_CFILEOFFA
, "cfûeofÁ", 
Â_num
, "%Œu", 
SI
(
BMBT_STARTOFF_BITLEN
),

148 0, 
Á_cfûeofÁ
, 
NULL
 },

149 { 
FLDT_CFILEOFFD
, "cfûeoffd", 
Â_num
, "%Œu", 
SI
(
BMBT_STARTOFF_BITLEN
),

150 0, 
Á_cfûeoffd
, 
NULL
 },

151 { 
FLDT_CFSBLOCK
, "cfsblock", 
Â_num
, "%Œu", 
SI
(
BMBT_STARTBLOCK_BITLEN
),

152 0, 
Á_cfsblock
, 
NULL
 },

153 { 
FLDT_CHARNS
, "ch¨ns", 
Â_ch¨ns
, 
NULL
, 
SI
(
bôsz
()), 0, NULL,

154 
NULL
 },

155 { 
FLDT_CHARS
, "ch¨s", 
Â_num
, "%c", 
SI
(
bôsz
()), 0, 
NULL
, NULL },

156 { 
FLDT_REXTLEN
, "ªxéí", 
Â_num
, "%u", 
SI
(
RMAPBT_BLOCKCOUNT_BITLEN
),

157 0, 
NULL
, NULL },

158 { 
FLDT_RFILEOFFD
, "rfûeoffd", 
Â_num
, "%Œu", 
SI
(
RMAPBT_OFFSET_BITLEN
),

159 0, 
NULL
, NULL },

160 { 
FLDT_REXTFLG
, "ªxtÊag", 
Â_num
, "%u", 
SI
(
RMAPBT_EXNTFLAG_BITLEN
), 0,

161 
NULL
, NULL },

162 { 
FLDT_RATTRFORKFLG
, "øârf‹kÊag", 
Â_num
, "%u", 
SI
(
RMAPBT_ATTRFLAG_BITLEN
), 0,

163 
NULL
, NULL },

164 { 
FLDT_RBMBTFLG
, "rbmbtÊag", 
Â_num
, "%u", 
SI
(
RMAPBT_BMBTFLAG_BITLEN
), 0,

165 
NULL
, NULL },

166 { 
FLDT_CAGBLOCK
, "ˇgblock", 
Â_num
, "%u", 
SI
(
REFCNTBT_AGBLOCK_BITLEN
),

167 
FTARG_DONULL
, 
Á_agblock
, 
NULL
 },

168 { 
FLDT_CCOWFLG
, "ccowÊag", 
Â_num
, "%u", 
SI
(
REFCNTBT_COWFLAG_BITLEN
), 0,

169 
NULL
, NULL },

170 { 
FLDT_CNTBT
, "˙tbt", 
NULL
, (*)
˙tbt_Êds
, 
btblock_size
, 
FTARG_SIZE
,

171 
NULL
, 
˙tbt_Êds
 },

172 { 
FLDT_CNTBT_CRC
, "˙tbt", 
NULL
, (*)
˙tbt_¸c_Êds
, 
btblock_size
,

173 
FTARG_SIZE
, 
NULL
, 
˙tbt_¸c_Êds
 },

174 { 
FLDT_CNTBTKEY
, "˙tbtkey", 
Â_ßºay
, (*)
˙tbt_key_Êds
,

175 
SI
(
bôsz
(
xfs_Æloc_key_t
)), 0, 
NULL
, 
˙tbt_key_Êds
 },

176 { 
FLDT_CNTBTPTR
, "˙tbçå", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_Æloc_±r_t
)),

177 0, 
Á_agblock
, 
NULL
 },

178 { 
FLDT_CNTBTREC
, "˙tbåec", 
Â_ßºay
, (*)
˙tbt_ªc_Êds
,

179 
SI
(
bôsz
(
xfs_Æloc_ªc_t
)), 0, 
NULL
, 
˙tbt_ªc_Êds
 },

181 { 
FLDT_RMAPBT_CRC
, "rm≠bt", 
NULL
, (*)
rm≠bt_¸c_Êds
, 
btblock_size
,

182 
FTARG_SIZE
, 
NULL
, 
rm≠bt_¸c_Êds
 },

183 { 
FLDT_RMAPBTKEY
, "rm≠btkey", 
Â_ßºay
, (*)
rm≠bt_key_Êds
,

184 
SI
(
bôize
(2 * (
xfs_rm≠_key
))), 0, 
NULL
, 
rm≠bt_key_Êds
 },

185 { 
FLDT_RMAPBTPTR
, "rm≠bçå", 
Â_num
, "%u",

186 
SI
(
bôsz
(
xfs_rm≠_±r_t
)), 0, 
Á_agblock
, 
NULL
 },

187 { 
FLDT_RMAPBTREC
, "rm≠båec", 
Â_ßºay
, (*)
rm≠bt_ªc_Êds
,

188 
SI
(
bôsz
(
xfs_rm≠_ªc
)), 0, 
NULL
, 
rm≠bt_ªc_Êds
 },

190 { 
FLDT_REFCBT_CRC
, "ªf˙tbt", 
NULL
, (*)
ªfcbt_¸c_Êds
, 
btblock_size
,

191 
FTARG_SIZE
, 
NULL
, 
ªfcbt_¸c_Êds
 },

192 { 
FLDT_REFCBTKEY
, "ªf˙tbtkey", 
Â_ßºay
, (*)
ªfcbt_key_Êds
,

193 
SI
(
bôsz
(
xfs_ªfcou¡_key
)), 0, 
NULL
, 
ªfcbt_key_Êds
 },

194 { 
FLDT_REFCBTPTR
, "ªf˙tbçå", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_ªfcou¡_±r_t
)),

195 0, 
Á_agblock
, 
NULL
 },

196 { 
FLDT_REFCBTREC
, "ªf˙tbåec", 
Â_ßºay
, (*)
ªfcbt_ªc_Êds
,

197 
SI
(
bôsz
(
xfs_ªfcou¡_ªc
)), 0, 
NULL
, 
ªfcbt_ªc_Êds
 },

200 { 
FLDT_CRC
, "¸c", 
Â_¸c
, "%#x (%s)", 
SI
(
bôsz
(
__uöt32_t
)),

201 0, 
NULL
, NULL },

203 { 
FLDT_DEV
, "dev", 
Â_num
, "%#x", 
SI
(
bôsz
(
xfs_dev_t
)), 0, 
NULL
, NULL },

204 { 
FLDT_DFILOFFA
, "dfûofÁ", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_fûeoff_t
)),

205 0, 
Á_dfûofÁ
, 
NULL
 },

206 { 
FLDT_DFILOFFD
, "dfûoffd", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_fûeoff_t
)),

207 0, 
Á_dfûoffd
, 
NULL
 },

208 { 
FLDT_DFSBNO
, "dfsbno", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_fsblock_t
)),

209 
FTARG_DONULL
, 
Á_dfsbno
, 
NULL
 },

210 { 
FLDT_DINODE_A
, "döode_a", 
NULL
, (*)
öode_a_Êds
, 
öode_a_size
,

211 
FTARG_SIZE
|
FTARG_OKEMPTY
, 
NULL
, 
öode_a_Êds
 },

212 { 
FLDT_DINODE_CORE
, "döode_c‹e", 
NULL
, (*)
öode_c‹e_Êds
,

213 
SI
(
bôsz
(
xfs_döode_t
)), 0, 
NULL
, 
öode_c‹e_Êds
 },

214 { 
FLDT_DINODE_FMT
, "döode_fmt", 
Â_döode_fmt
, 
NULL
,

215 
SI
(
bôsz
(
__öt8_t
)), 0, 
NULL
, NULL },

216 { 
FLDT_DINODE_U
, "döode_u", 
NULL
, (*)
öode_u_Êds
, 
öode_u_size
,

217 
FTARG_SIZE
|
FTARG_OKEMPTY
, 
NULL
, 
öode_u_Êds
 },

218 { 
FLDT_DINODE_V3
, "döode_v3", 
NULL
, (*)
öode_v3_Êds
,

219 
SI
(
bôsz
(
xfs_döode_t
)), 0, 
NULL
, 
öode_v3_Êds
 },

222 { 
FLDT_DIR2
, "dú2", 
NULL
, (*)
dú2_Êds
, 
dú2_size
, 
FTARG_SIZE
,

223 
NULL
, 
dú2_Êds
 },

224 { 
FLDT_DIR2_BLOCK_TAIL
, "dú2_block_èû", 
NULL
,

225 (*)
dú2_block_èû_Êds
, 
SI
(
bôsz
(
xfs_dú2_block_èû_t
)), 0,

226 
NULL
, 
dú2_block_èû_Êds
 },

227 { 
FLDT_DIR2_DATA_FREE
, "dú2_d©a_‰ì", 
NULL
,

228 (*)
dú2_d©a_‰ì_Êds
, 
SI
(
bôsz
(
xfs_dú2_d©a_‰ì_t
)), 0, 
NULL
,

229 
dú2_d©a_‰ì_Êds
 },

230 { 
FLDT_DIR2_DATA_HDR
, "dú2_d©a_hdr", 
NULL
, (*)
dú2_d©a_hdr_Êds
,

231 
SI
(
bôsz
(
xfs_dú2_d©a_hdr_t
)), 0, 
NULL
, 
dú2_d©a_hdr_Êds
 },

232 { 
FLDT_DIR2_DATA_OFF
, "dú2_d©a_off", 
Â_num
, "%#x",

233 
SI
(
bôsz
(
xfs_dú2_d©a_off_t
)), 0, 
NULL
, NULL },

234 { 
FLDT_DIR2_DATA_OFFNZ
, "dú2_d©a_of‚z", 
Â_num
, "%#x",

235 
SI
(
bôsz
(
xfs_dú2_d©a_off_t
)), 
FTARG_SKIPZERO
, 
NULL
, NULL },

236 { 
FLDT_DIR2_DATA_UNION
, "dú2_d©a_uni⁄", 
NULL
,

237 (*)
dú2_d©a_uni⁄_Êds
, 
dú2_d©a_uni⁄_size
, 
FTARG_SIZE
, 
NULL
,

238 
dú2_d©a_uni⁄_Êds
 },

239 { 
FLDT_DIR2_FREE_HDR
, "dú2_‰ì_hdr", 
NULL
, (*)
dú2_‰ì_hdr_Êds
,

240 
SI
(
bôsz
(
xfs_dú2_‰ì_hdr_t
)), 0, 
NULL
, 
dú2_‰ì_hdr_Êds
 },

241 { 
FLDT_DIR2_INO4
, "dú2_öo4", 
Â_num
, "%u",

242 
SI
(
bôize
(
XFS_INO32_SIZE
)), 0, 
Á_öo4
, 
NULL
 },

243 { 
FLDT_DIR2_INO8
, "dú2_öo8", 
Â_num
, "%llu",

244 
SI
(
bôize
(
XFS_INO64_SIZE
)), 0, 
Á_öo8
, 
NULL
 },

245 { 
FLDT_DIR2_INOU
, "dú2_öou", 
NULL
, (*)
dú2_öou_Êds
,

246 
dú2_öou_size
, 
FTARG_SIZE
, 
NULL
, 
dú2_öou_Êds
 },

247 { 
FLDT_DIR2_LEAF_ENTRY
, "dú2_Àaf_íåy", 
NULL
,

248 (*)
dú2_Àaf_íåy_Êds
, 
SI
(
bôsz
(
xfs_dú2_Àaf_íåy_t
)), 0,

249 
NULL
, 
dú2_Àaf_íåy_Êds
 },

250 { 
FLDT_DIR2_LEAF_HDR
, "dú2_Àaf_hdr", 
NULL
, (*)
dú2_Àaf_hdr_Êds
,

251 
SI
(
bôsz
(
xfs_dú2_Àaf_hdr_t
)), 0, 
NULL
, 
dú2_Àaf_hdr_Êds
 },

252 { 
FLDT_DIR2_LEAF_TAIL
, "dú2_Àaf_èû", 
NULL
,

253 (*)
dú2_Àaf_èû_Êds
, 
SI
(
bôsz
(
xfs_dú2_Àaf_èû_t
)), 0, 
NULL
,

254 
dú2_Àaf_èû_Êds
 },

255 { 
FLDT_DIR2_SF_ENTRY
, "dú2_sf_íåy", 
NULL
, (*)
dú2_sf_íåy_Êds
,

256 
dú2_sf_íåy_size
, 
FTARG_SIZE
, 
NULL
, 
dú2_sf_íåy_Êds
 },

257 { 
FLDT_DIR2_SF_HDR
, "dú2_sf_hdr", 
NULL
, (*)
dú2_sf_hdr_Êds
,

258 
dú2_sf_hdr_size
, 
FTARG_SIZE
, 
NULL
, 
dú2_sf_hdr_Êds
 },

259 { 
FLDT_DIR2_SF_OFF
, "dú2_sf_off", 
Â_num
, "%#x",

260 
SI
(
bôize
(2*(
__u8
))), 0, 
NULL
, NULL },

261 { 
FLDT_DIR2SF
, "dú2sf", 
NULL
, (*)
dú2sf_Êds
, 
dú2sf_size
,

262 
FTARG_SIZE
, 
NULL
, 
dú2sf_Êds
 },

265 { 
FLDT_DIR3
, "dú3", 
NULL
, (*)
dú3_Êds
, 
dú2_size
, 
FTARG_SIZE
,

266 
NULL
, 
dú3_Êds
 },

267 { 
FLDT_DIR3_BLKHDR
, "dú3_blk_hdr", 
NULL
, (*)
dú3_blkhdr_Êds
,

268 
SI
(
bôsz
(
xfs_dú3_blk_hdr
)), 0, 
NULL
, 
dú3_blkhdr_Êds
 },

269 { 
FLDT_DIR3_DATA_HDR
, "dú3_d©a_hdr", 
NULL
, (*)
dú3_d©a_hdr_Êds
,

270 
SI
(
bôsz
(
xfs_dú3_d©a_hdr
)), 0, 
NULL
, 
dú3_d©a_hdr_Êds
 },

271 { 
FLDT_DIR3_FREE_HDR
, "dú3_‰ì_hdr", 
NULL
, (*)
dú3_‰ì_hdr_Êds
,

272 
SI
(
bôsz
(
xfs_dú3_‰ì_hdr
)), 0, 
NULL
, 
dú3_‰ì_hdr_Êds
 },

273 { 
FLDT_DIR3_LEAF_HDR
, "dú3_Àaf_hdr", 
NULL
, (*)
dú3_Àaf_hdr_Êds
,

274 
SI
(
bôsz
(
xfs_dú3_Àaf_hdr
)), 0, 
NULL
, 
dú3_Àaf_hdr_Êds
 },

275 { 
FLDT_DIR3_DATA_UNION
, "dú3_d©a_uni⁄", 
NULL
,

276 (*)
dú3_d©a_uni⁄_Êds
, 
dú2_d©a_uni⁄_size
, 
FTARG_SIZE
, 
NULL
,

277 
dú3_d©a_uni⁄_Êds
 },

278 { 
FLDT_DIR3_SF_ENTRY
, "dú3_sf_íåy", 
NULL
, (*)
dú3_sf_íåy_Êds
,

279 
dú2_sf_íåy_size
, 
FTARG_SIZE
, 
NULL
, 
dú3_sf_íåy_Êds
 },

280 { 
FLDT_DIR3SF
, "dú3sf", 
NULL
, (*)
dú3sf_Êds
, 
dú2sf_size
,

281 
FTARG_SIZE
, 
NULL
, 
dú3sf_Êds
 },

284 { 
FLDT_DA_BLKINFO
, "dú_blköfo", 
NULL
, (*)
da_blköfo_Êds
,

285 
SI
(
bôsz
(
xfs_da_blköfo
)), 0, 
NULL
, 
da_blköfo_Êds
 },

286 { 
FLDT_DA_NODE_ENTRY
, "dú_node_íåy", 
Â_ßºay
,

287 (*)
da_node_íåy_Êds
, 
SI
(
bôsz
(
xfs_da_node_íåy
)), 0,

288 
NULL
, 
da_node_íåy_Êds
 },

289 { 
FLDT_DA_NODE_HDR
, "dú_node_hdr", 
NULL
, (*)
da_node_hdr_Êds
,

290 
SI
(
bôsz
(
xfs_da_node_hdr
)), 0, 
NULL
, 
da_node_hdr_Êds
 },

291 { 
FLDT_DA3_BLKINFO
, "dú_blköfo", 
NULL
, (*)
da3_blköfo_Êds
,

292 
SI
(
bôsz
(
xfs_da3_blköfo
)), 0, 
NULL
, 
da3_blköfo_Êds
 },

293 { 
FLDT_DA3_NODE_HDR
, "dú_node_hdr", 
NULL
, (*)
da3_node_hdr_Êds
,

294 
SI
(
bôsz
(
xfs_da3_node_hdr
)), 0, 
NULL
, 
da3_node_hdr_Êds
 },

296 { 
FLDT_DIRBLOCK
, "dúblock", 
Â_num
, "%u", 
SI
(
bôsz
(
__uöt32_t
)), 0,

297 
Á_dúblock
, 
NULL
 },

298 { 
FLDT_DISK_DQUOT
, "disk_dquŸ", 
NULL
, (*)
disk_dquŸ_Êds
,

299 
SI
(
bôsz
(
xfs_disk_dquŸ_t
)), 0, 
NULL
, 
disk_dquŸ_Êds
 },

300 { 
FLDT_DQBLK
, "dqblk", 
NULL
, (*)
dqblk_Êds
, 
SI
(
bôsz
(
xfs_dqblk_t
)),

301 0, 
NULL
, 
dqblk_Êds
 },

302 { 
FLDT_DQID
, "dqid", 
Â_num
, "%d", 
SI
(
bôsz
(
xfs_dqid_t
)), 0, 
NULL
,

303 
NULL
 },

304 { 
FLDT_DRFSBNO
, "drfsbno", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_rfsblock_t
)),

305 
FTARG_DONULL
, 
Á_drfsbno
, 
NULL
 },

306 { 
FLDT_DRTBNO
, "dπbno", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_πblock_t
)),

307 
FTARG_DONULL
, 
Á_dπbno
, 
NULL
 },

308 { 
FLDT_EXTLEN
, "exéí", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_exéí_t
)), 0, 
NULL
,

309 
NULL
 },

310 { 
FLDT_EXTNUM
, "exäum", 
Â_num
, "%d", 
SI
(
bôsz
(
xfs_exäum_t
)),

311 
FTARG_SIGNED
, 
NULL
, NULL },

312 { 
FLDT_FSIZE
, "fsize", 
Â_num
, "%Œd", 
SI
(
bôsz
(
xfs_fsize_t
)),

313 
FTARG_SIGNED
, 
NULL
, NULL },

314 { 
FLDT_INO
, "öo", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_öo_t
)), 
FTARG_DONULL
,

315 
Á_öo
, 
NULL
 },

316 { 
FLDT_INOBT
, "öobt", 
NULL
, (*)
öobt_Êds
, 
btblock_size
,

317 
FTARG_SIZE
, 
NULL
, 
öobt_Êds
 },

318 { 
FLDT_INOBT_CRC
, "öobt", 
NULL
, (*)
öobt_¸c_Êds
, 
btblock_size
,

319 
FTARG_SIZE
, 
NULL
, 
öobt_¸c_Êds
 },

320 { 
FLDT_INOBT_SPCRC
, "öobt", 
NULL
, (*)
öobt_•¸c_Êds
,

321 
btblock_size
, 
FTARG_SIZE
, 
NULL
, 
öobt_•¸c_Êds
 },

322 { 
FLDT_INOBTKEY
, "öobtkey", 
Â_ßºay
, (*)
öobt_key_Êds
,

323 
SI
(
bôsz
(
xfs_öobt_key_t
)), 0, 
NULL
, 
öobt_key_Êds
 },

324 { 
FLDT_INOBTPTR
, "öobçå", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_öobt_±r_t
)),

325 0, 
Á_agblock
, 
NULL
 },

326 { 
FLDT_INOBTREC
, "öobåec", 
Â_ßºay
, (*)
öobt_ªc_Êds
,

327 
SI
(
bôsz
(
xfs_öobt_ªc_t
)), 0, 
NULL
, 
öobt_ªc_Êds
 },

328 { 
FLDT_INOBTSPREC
, "öobt•ªc", 
Â_ßºay
, (*Ë
öobt_•ªc_Êds
,

329 
SI
(
bôsz
(
xfs_öobt_ªc_t
)), 0, 
NULL
, 
öobt_•ªc_Êds
 },

330 { 
FLDT_INODE
, "öode", 
NULL
, (*)
öode_Êds
, 
öode_size
, 
FTARG_SIZE
,

331 
NULL
, 
öode_Êds
 },

332 { 
FLDT_INODE_CRC
, "öode", 
NULL
, (*)
öode_¸c_Êds
, 
öode_size
,

333 
FTARG_SIZE
, 
NULL
, 
öode_¸c_Êds
 },

334 { 
FLDT_INOFREE
, "öo‰ì", 
Â_num
, "%#Œx", 
SI
(
bôsz
(
xfs_öo‰ì_t
)), 0,

335 
NULL
, NULL },

336 { 
FLDT_INT16D
, "öt16d", 
Â_num
, "%d", 
SI
(
bôsz
(
__öt16_t
)),

337 
FTARG_SIGNED
, 
NULL
, NULL },

338 { 
FLDT_INT32D
, "öt32d", 
Â_num
, "%d", 
SI
(
bôsz
(
__öt32_t
)),

339 
FTARG_SIGNED
, 
NULL
, NULL },

340 { 
FLDT_INT64D
, "öt64d", 
Â_num
, "%Œd", 
SI
(
bôsz
(
__öt64_t
)),

341 
FTARG_SIGNED
, 
NULL
, NULL },

342 { 
FLDT_INT8D
, "öt8d", 
Â_num
, "%d", 
SI
(
bôsz
(
__öt8_t
)), 
FTARG_SIGNED
,

343 
NULL
, NULL },

344 { 
FLDT_NSEC
, "n£c", 
Â_num
, "%09d", 
SI
(
bôsz
(
__öt32_t
)), 
FTARG_SIGNED
,

345 
NULL
, NULL },

346 { 
FLDT_QCNT
, "q˙t", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_q˙t_t
)), 0, 
NULL
,

347 
NULL
 },

348 { 
FLDT_QWARNCNT
, "qw¨n˙t", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_qw¨n˙t_t
)), 0,

349 
NULL
, NULL },

350 { 
FLDT_SB
, "sb", 
NULL
, (*)
sb_Êds
, 
sb_size
, 
FTARG_SIZE
, NULL,

351 
sb_Êds
 },

354 { 
FLDT_SYMLINK_CRC
, "symlök", 
NULL
, (*)
symlök_¸c_Êds
,

355 
symlök_size
, 
FTARG_SIZE
, 
NULL
, 
symlök_¸c_Êds
 },

357 { 
FLDT_TIME
, "time", 
Â_time
, 
NULL
, 
SI
(
bôsz
(
__öt32_t
)), 
FTARG_SIGNED
,

358 
NULL
, NULL },

359 { 
FLDT_TIMESTAMP
, "time°amp", 
NULL
, (*)
time°amp_Êds
,

360 
SI
(
bôsz
(
xfs_time°amp_t
)), 0, 
NULL
, 
time°amp_Êds
 },

361 { 
FLDT_UINT1
, "uöt1", 
Â_num
, "%u", 
SI
(1), 0, 
NULL
, NULL },

362 { 
FLDT_UINT16D
, "uöt16d", 
Â_num
, "%u", 
SI
(
bôsz
(
__uöt16_t
)), 0, 
NULL
,

363 
NULL
 },

364 { 
FLDT_UINT16O
, "uöt16o", 
Â_num
, "%#o", 
SI
(
bôsz
(
__uöt16_t
)), 0,

365 
NULL
, NULL },

366 { 
FLDT_UINT16X
, "uöt16x", 
Â_num
, "%#x", 
SI
(
bôsz
(
__uöt16_t
)), 0,

367 
NULL
, NULL },

368 { 
FLDT_UINT32D
, "uöt32d", 
Â_num
, "%u", 
SI
(
bôsz
(
__uöt32_t
)), 0, 
NULL
,

369 
NULL
 },

370 { 
FLDT_UINT32O
, "uöt32o", 
Â_num
, "%#o", 
SI
(
bôsz
(
__uöt32_t
)), 0,

371 
NULL
, NULL },

372 { 
FLDT_UINT32X
, "uöt32x", 
Â_num
, "%#x", 
SI
(
bôsz
(
__uöt32_t
)), 0,

373 
NULL
, NULL },

374 { 
FLDT_UINT64D
, "uöt64d", 
Â_num
, "%Œu", 
SI
(
bôsz
(
__uöt64_t
)), 0,

375 
NULL
, NULL },

376 { 
FLDT_UINT64O
, "uöt64o", 
Â_num
, "%#Œo", 
SI
(
bôsz
(
__uöt64_t
)), 0,

377 
NULL
, NULL },

378 { 
FLDT_UINT64X
, "uöt64x", 
Â_num
, "%#Œx", 
SI
(
bôsz
(
__uöt64_t
)), 0,

379 
NULL
, NULL },

380 { 
FLDT_UINT8D
, "uöt8d", 
Â_num
, "%u", 
SI
(
bôsz
(
__uöt8_t
)), 0, 
NULL
,

381 
NULL
 },

382 { 
FLDT_UINT8O
, "uöt8o", 
Â_num
, "%#o", 
SI
(
bôsz
(
__uöt8_t
)), 0, 
NULL
,

383 
NULL
 },

384 { 
FLDT_UINT8X
, "uöt8x", 
Â_num
, "%#x", 
SI
(
bôsz
(
__uöt8_t
)), 0, 
NULL
,

385 
NULL
 },

386 { 
FLDT_UUID
, "uuid", 
Â_uuid
, 
NULL
, 
SI
(
bôsz
(
uuid_t
)), 0, NULL, NULL },

387 { 
FLDT_ZZZ
, 
NULL
 }

391 
	$bôoff£t
(

392 c⁄° 
fõld_t
 *
f
,

393 *
obj
,

394 
°¨toff
,

395 
idx
)

398 i‡(!(
f
->
Êags
 & 
FLD_OFFSET
)) {

399 i‡(
f
->
Êags
 & 
FLD_ARRAY
) {

400 
aba£
;

401 #ifde‡
DEBUG


402 c⁄° 
·©å_t
 *
Á
 = &
·©åèb
[
f
->
·yp
];

405 
aba£
 = (
f
->
Êags
 & 
FLD_ABASE1
) != 0;

406 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

407 
	`ASSERT
((
Á
->
¨g
 & 
FTARG_SIZE
) == 0);

408  ()(
öçå_t
)
f
->
off£t
 +

409 (
idx
 - 
aba£
Ë* 
	`fsize
(
f
, 
obj
, 
°¨toff
, idx);

411  ()(
öçå_t
)
f
->
off£t
;

413  (*
f
->
off£t
)(
obj
, 
°¨toff
, 
idx
);

414 
	}
}

417 
	$fcou¡
(

418 c⁄° 
fõld_t
 *
f
,

419 *
obj
,

420 
°¨toff
)

422 i‡(!(
f
->
Êags
 & 
FLD_COUNT
))

423  ()(
öçå_t
)
f
->
cou¡
;

425  (*
f
->
cou¡
)(
obj
, 
°¨toff
);

426 
	}
}

428 c⁄° 
fõld_t
 *

429 
	$födfõld
(

430 *
«me
,

431 c⁄° 
fõld_t
 *
fõlds
,

432 *
obj
,

433 
°¨toff
)

435 c⁄° 
fõld_t
 *
f
;

438 
f
 = 
fõlds
; f->
«me
; f++)

439 i‡(
	`°rcmp
(
f
->
«me
,ÇameË=0 && 
	`fcou¡
(f, 
obj
, 
°¨toff
))

440  
f
;

441  
NULL
;

442 
	}
}

445 
	$fsize
(

446 c⁄° 
fõld_t
 *
f
,

447 *
obj
,

448 
°¨toff
,

449 
idx
)

451 c⁄° 
·©å_t
 *
Á
;

453 
Á
 = &
·©åèb
[
f
->
·yp
];

454 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

455 i‡(!(
Á
->
¨g
 & 
FTARG_SIZE
))

456  ()(
öçå_t
)
Á
->
size
;

458  (*
Á
->
size
)(
obj
, 
°¨toff
, 
idx
);

459 
	}
}

	@field.h

19 
	eÊdt
 {

20 
	mFLDT_AEXTNUM
,

21 
	mFLDT_AGBLOCK
,

22 
	mFLDT_AGBLOCKNZ
,

23 
	mFLDT_AGF
,

24 
	mFLDT_AGFL
,

25 
	mFLDT_AGFL_CRC
,

26 
	mFLDT_AGI
,

27 
	mFLDT_AGINO
,

28 
	mFLDT_AGINONN
,

29 
	mFLDT_AGNUMBER
,

32 
	mFLDT_ATTR
,

33 
	mFLDT_ATTR_BLKINFO
,

34 
	mFLDT_ATTR_LEAF_ENTRY
,

35 
	mFLDT_ATTR_LEAF_HDR
,

36 
	mFLDT_ATTR_LEAF_MAP
,

37 
	mFLDT_ATTR_LEAF_NAME
,

38 
	mFLDT_ATTR_NODE_ENTRY
,

39 
	mFLDT_ATTR_NODE_HDR
,

40 
	mFLDT_ATTR_SF_ENTRY
,

41 
	mFLDT_ATTR_SF_HDR
,

42 
	mFLDT_ATTRBLOCK
,

43 
	mFLDT_ATTRSHORT
,

46 
	mFLDT_ATTR3
,

47 
	mFLDT_ATTR3_LEAF_HDR
,

48 
	mFLDT_ATTR3_NODE_HDR
,

50 
	mFLDT_BMAPBTA
,

51 
	mFLDT_BMAPBTA_CRC
,

52 
	mFLDT_BMAPBTAKEY
,

53 
	mFLDT_BMAPBTAPTR
,

54 
	mFLDT_BMAPBTAREC
,

55 
	mFLDT_BMAPBTD
,

56 
	mFLDT_BMAPBTD_CRC
,

57 
	mFLDT_BMAPBTDKEY
,

58 
	mFLDT_BMAPBTDPTR
,

59 
	mFLDT_BMAPBTDREC
,

60 
	mFLDT_BMROOTA
,

61 
	mFLDT_BMROOTAKEY
,

62 
	mFLDT_BMROOTAPTR
,

63 
	mFLDT_BMROOTD
,

64 
	mFLDT_BMROOTDKEY
,

65 
	mFLDT_BMROOTDPTR
,

66 
	mFLDT_BNOBT
,

67 
	mFLDT_BNOBT_CRC
,

68 
	mFLDT_BNOBTKEY
,

69 
	mFLDT_BNOBTPTR
,

70 
	mFLDT_BNOBTREC
,

71 
	mFLDT_CEXTFLG
,

72 
	mFLDT_CEXTLEN
,

73 
	mFLDT_CFILEOFFA
,

74 
	mFLDT_CFILEOFFD
,

75 
	mFLDT_CFSBLOCK
,

76 
	mFLDT_CHARNS
,

77 
	mFLDT_CHARS
,

78 
	mFLDT_REXTLEN
,

79 
	mFLDT_RFILEOFFD
,

80 
	mFLDT_REXTFLG
,

81 
	mFLDT_RATTRFORKFLG
,

82 
	mFLDT_RBMBTFLG
,

83 
	mFLDT_CAGBLOCK
,

84 
	mFLDT_CCOWFLG
,

85 
	mFLDT_CNTBT
,

86 
	mFLDT_CNTBT_CRC
,

87 
	mFLDT_CNTBTKEY
,

88 
	mFLDT_CNTBTPTR
,

89 
	mFLDT_CNTBTREC
,

90 
	mFLDT_RMAPBT_CRC
,

91 
	mFLDT_RMAPBTKEY
,

92 
	mFLDT_RMAPBTPTR
,

93 
	mFLDT_RMAPBTREC
,

94 
	mFLDT_REFCBT_CRC
,

95 
	mFLDT_REFCBTKEY
,

96 
	mFLDT_REFCBTPTR
,

97 
	mFLDT_REFCBTREC
,

100 
	mFLDT_CRC
,

102 
	mFLDT_DEV
,

103 
	mFLDT_DFILOFFA
,

104 
	mFLDT_DFILOFFD
,

105 
	mFLDT_DFSBNO
,

106 
	mFLDT_DINODE_A
,

107 
	mFLDT_DINODE_CORE
,

108 
	mFLDT_DINODE_FMT
,

109 
	mFLDT_DINODE_U
,

110 
	mFLDT_DINODE_V3
,

113 
	mFLDT_DIR2
,

114 
	mFLDT_DIR2_BLOCK_TAIL
,

115 
	mFLDT_DIR2_DATA_FREE
,

116 
	mFLDT_DIR2_DATA_HDR
,

117 
	mFLDT_DIR2_DATA_OFF
,

118 
	mFLDT_DIR2_DATA_OFFNZ
,

119 
	mFLDT_DIR2_DATA_UNION
,

120 
	mFLDT_DIR2_FREE_HDR
,

121 
	mFLDT_DIR2_INO4
,

122 
	mFLDT_DIR2_INO8
,

123 
	mFLDT_DIR2_INOU
,

124 
	mFLDT_DIR2_LEAF_ENTRY
,

125 
	mFLDT_DIR2_LEAF_HDR
,

126 
	mFLDT_DIR2_LEAF_TAIL
,

127 
	mFLDT_DIR2_SF_ENTRY
,

128 
	mFLDT_DIR2_SF_HDR
,

129 
	mFLDT_DIR2_SF_OFF
,

130 
	mFLDT_DIR2SF
,

133 
	mFLDT_DIR3
,

134 
	mFLDT_DIR3_BLKHDR
,

135 
	mFLDT_DIR3_DATA_HDR
,

136 
	mFLDT_DIR3_FREE_HDR
,

137 
	mFLDT_DIR3_LEAF_HDR
,

138 
	mFLDT_DIR3_DATA_UNION
,

139 
	mFLDT_DIR3_SF_ENTRY
,

140 
	mFLDT_DIR3SF
,

143 
	mFLDT_DA_BLKINFO
,

144 
	mFLDT_DA_NODE_ENTRY
,

145 
	mFLDT_DA_NODE_HDR
,

146 
	mFLDT_DA3_BLKINFO
,

147 
	mFLDT_DA3_NODE_HDR
,

149 
	mFLDT_DIRBLOCK
,

150 
	mFLDT_DISK_DQUOT
,

151 
	mFLDT_DQBLK
,

152 
	mFLDT_DQID
,

153 
	mFLDT_DRFSBNO
,

154 
	mFLDT_DRTBNO
,

155 
	mFLDT_EXTLEN
,

156 
	mFLDT_EXTNUM
,

157 
	mFLDT_FSIZE
,

158 
	mFLDT_INO
,

159 
	mFLDT_INOBT
,

160 
	mFLDT_INOBT_CRC
,

161 
	mFLDT_INOBT_SPCRC
,

162 
	mFLDT_INOBTKEY
,

163 
	mFLDT_INOBTPTR
,

164 
	mFLDT_INOBTREC
,

165 
	mFLDT_INOBTSPREC
,

166 
	mFLDT_INODE
,

167 
	mFLDT_INODE_CRC
,

168 
	mFLDT_INOFREE
,

169 
	mFLDT_INT16D
,

170 
	mFLDT_INT32D
,

171 
	mFLDT_INT64D
,

172 
	mFLDT_INT8D
,

173 
	mFLDT_NSEC
,

174 
	mFLDT_QCNT
,

175 
	mFLDT_QWARNCNT
,

176 
	mFLDT_SB
,

179 
	mFLDT_SYMLINK_CRC
,

181 
	mFLDT_TIME
,

182 
	mFLDT_TIMESTAMP
,

183 
	mFLDT_UINT1
,

184 
	mFLDT_UINT16D
,

185 
	mFLDT_UINT16O
,

186 
	mFLDT_UINT16X
,

187 
	mFLDT_UINT32D
,

188 
	mFLDT_UINT32O
,

189 
	mFLDT_UINT32X
,

190 
	mFLDT_UINT64D
,

191 
	mFLDT_UINT64O
,

192 
	mFLDT_UINT64X
,

193 
	mFLDT_UINT8D
,

194 
	mFLDT_UINT8O
,

195 
	mFLDT_UINT8X
,

196 
	mFLDT_UUID
,

197 
	mFLDT_ZZZ


198 } 
	tÊdt_t
;

200 (*
	toff£t_‚c_t
)(*
	tobj
, 
	t°¨toff
, 
	tidx
);

201 
	#OI
(
o
Ë((
off£t_‚c_t
)(
öçå_t
)(o))

	)

203 (*
	tcou¡_‚c_t
)(*
	tobj
, 
	t°¨toff
);

204 
	#CI
(
c
Ë((
cou¡_‚c_t
)(
öçå_t
)(c))

	)

205 
	#C1
 
	`CI
(1)

	)

207 
	sfõld


209 *
«me
;

210 
Êdt_t
 
·yp
;

211 
off£t_‚c_t
 
off£t
;

212 
cou¡_‚c_t
 
cou¡
;

213 
Êags
;

214 
ty≤m_t
 
√xt
;

215 } 
	tfõld_t
;

220 
	#FLD_ABASE1
 1

	)

221 
	#FLD_SKIPALL
 2

	)

222 
	#FLD_ARRAY
 4

	)

223 
	#FLD_OFFSET
 8

	)

224 
	#FLD_COUNT
 16

	)

226 (*
	tsize_‚c_t
)(*
	tobj
, 
	t°¨toff
, 
	tidx
);

227 
	#SI
(
s
Ë((
size_‚c_t
)(
öçå_t
)(s))

	)

229 
	s·©å


231 
Êdt_t
 
·yp
;

232 *
«me
;

233 
¥‚c_t
 
¥func
;

234 *
fmt°r
;

235 
size_‚c_t
 
size
;

236 
¨g
;

237 
ad‚c_t
 
adfunc
;

238 c⁄° 
fõld_t
 *
subÊd
;

239 } 
	t·©å_t
;

240 c⁄° 
·©å_t
 
·©åèb
[];

245 
	#FTARG_SKIPZERO
 1

	)

246 
	#FTARG_DONULL
 2

	)

247 
	#FTARG_SKIPNULL
 4

	)

248 
	#FTARG_SIGNED
 8

	)

249 
	#FTARG_SIZE
 16

	)

250 
	#FTARG_SKIPNMS
 32

	)

251 
	#FTARG_OKEMPTY
 64

	)

253 
	`bôoff£t
(c⁄° 
fõld_t
 *
f
, *
obj
, 
°¨toff
,

254 
idx
);

255 
	`fcou¡
(c⁄° 
fõld_t
 *
f
, *
obj
, 
°¨toff
);

256 c⁄° 
fõld_t
 *
	`födfõld
(*
«me
, c⁄° fõld_à*
fõlds
,

257 *
obj
, 
°¨toff
);

258 
	`fsize
(c⁄° 
fõld_t
 *
f
, *
obj
, 
°¨toff
,

259 
idx
);

	@flist.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"Êi°.h
"

25 
	~"debug.h
"

26 
	~"ouçut.h
"

27 
	~"mÆloc.h
"

29 
Êi°_ex∑nd_¨øys
(
Êi°_t
 *
Ê
);

30 
Êi°_ex∑nd_°ru˘s
(
Êi°_t
 *
Ê
, *
obj
);

31 
Êi°_t
 *
Êi°_ª∂iˇã
(Êi°_à*
Ê
);

32 
·ok_t
 *
Êi°_•lô
(*
s
);

33 
·ok_‰ì
(
·ok_t
 *
·
);

36 
	$Êi°_ex∑nd_¨øys
(

37 
Êi°_t
 *
Ê
)

39 c⁄° 
fõld_t
 *
f
;

40 #ifde‡
DEBUG


41 c⁄° 
·©å_t
 *
Á
;

43 
high
;

44 
idx
;

45 
low
;

46 
Êi°_t
 *
√w
;

47 
Êi°_t
 *
¥ev
;

48 
Êi°_t
 *
sib
;

50 
f
 = 
Ê
->
Êd
;

51 #ifde‡
DEBUG


52 
Á
 = &
·©åèb
[
f
->
·yp
];

54 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

55 
	`ASSERT
(
f
->
Êags
 & 
FLD_ARRAY
);

56 
low
 = 
Ê
->low;

57 
high
 = 
Ê
->high;

58 
Ê
->
high
 = fl->
low
;

59 
sib
 = 
Ê
->
siblög
;

60 
idx
 = 
low
 + 1, 
¥ev
 = 
Ê
; idx <
high
; idx++) {

61 
√w
 = 
	`Êi°_make
(
f
->
«me
);

62 
√w
->
Êd
 = 
f
;

63 
√w
->
low
 =Çew->
high
 = 
idx
;

64 
√w
->
Êags
 |
FL_OKLOW
 | 
FL_OKHIGH
;

65 
√w
->
chûd
 = 
	`Êi°_ª∂iˇã
(
Ê
->child);

66 
¥ev
->
siblög
 = 
√w
;

67 
¥ev
 = 
√w
;

69 
¥ev
->
siblög
 = 
sib
;

70 
	}
}

73 
	$Êi°_ex∑nd_°ru˘s
(

74 
Êi°_t
 *
Ê
,

75 *
obj
)

77 c⁄° 
fõld_t
 *
cf
;

78 c⁄° 
fõld_t
 *
f
;

79 c⁄° 
·©å_t
 *
Á
;

80 
Êi°_t
 *
√w
;

81 
Êi°_t
 *
¥ev
;

83 
f
 = 
Ê
->
Êd
;

84 
Á
 = &
·©åèb
[
f
->
·yp
];

85 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

86 
	`ASSERT
(
Á
->
subÊd
 !
NULL
);

87 
	`ASSERT
(
Ê
->
chûd
 =
NULL
);

88 
cf
 = 
Á
->
subÊd
, 
¥ev
 = 
NULL
; cf->
«me
 != NULL; cf++) {

89 i‡(
	`fcou¡
(
cf
, 
obj
, 
Ê
->
off£t
) == 0)

91 i‡(
cf
->
Êags
 & 
FLD_SKIPALL
)

93 
√w
 = 
	`Êi°_make
(
cf
->
«me
);

94 
√w
->
Êd
 = 
cf
;

95 i‡(
¥ev
)

96 
¥ev
->
siblög
 = 
√w
;

98 
Ê
->
chûd
 = 
√w
;

99 
¥ev
 = 
√w
;

101 
	}
}

104 
	$Êi°_‰ì
(

105 
Êi°_t
 *
Ê
)

107 i‡(
Ê
->
chûd
)

108 
	`Êi°_‰ì
(
Ê
->
chûd
);

109 i‡(
Ê
->
siblög
)

110 
	`Êi°_‰ì
(
Ê
->
siblög
);

111 i‡(
Ê
->
«me
)

112 
	`x‰ì
(
Ê
->
«me
);

113 
	`x‰ì
(
Ê
);

114 
	}
}

116 
Êi°_t
 *

117 
	$Êi°_make
(

118 *
«me
)

120 
Êi°_t
 *
Ê
;

122 
Ê
 = 
	`xmÆloc
((*fl));

123 
Ê
->
«me
 = 
	`x°rdup
(name);

124 
Ê
->
Êd
 = 
NULL
;

125 
Ê
->
chûd
 = 
NULL
;

126 
Ê
->
siblög
 = 
NULL
;

127 
Ê
->
low
 = 0;

128 
Ê
->
high
 = 0;

129 
Ê
->
Êags
 = 0;

130 
Ê
->
off£t
 = 0;

131  
Ê
;

132 
	}
}

135 
	$Êi°_∑r£
(

136 c⁄° 
fõld_t
 *
fõlds
,

137 
Êi°_t
 *
Ê
,

138 *
obj
,

139 
°¨toff
)

141 c⁄° 
fõld_t
 *
f
;

142 c⁄° 
·©å_t
 *
Á
;

143 
high
;

144 
low
;

146 
Ê
) {

147 
f
 = 
	`födfõld
(
Ê
->
«me
, 
fõlds
, 
obj
, 
°¨toff
);

148 i‡(
f
 =
NULL
) {

149 
	`db¥ötf
(
	`_
("fõld %†nŸ found\n"), 
Ê
->
«me
);

152 
Ê
->
Êd
 = 
f
;

153 
Á
 = &
·©åèb
[
f
->
·yp
];

154 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

155 i‡(
f
->
Êags
 & 
FLD_ARRAY
) {

156 
low
 = (
f
->
Êags
 & 
FLD_ABASE1
) != 0;

157 
high
 = 
	`fcou¡
(
f
, 
obj
, 
°¨toff
Ë+ 
low
 - 1;

158 i‡(
low
 > 
high
) {

159 
	`db¥ötf
(
	`_
("nÿñemít†ö %s\n"), 
Ê
->
«me
);

162 i‡(
Ê
->
Êags
 & 
FL_OKHIGH
) {

163 i‡(
Ê
->
low
 <Üow || fl->low > 
high
 ||

164 
Ê
->
high
 < 
low
 || fl->high > high) {

165 
	`db¥ötf
(
	`_
("indices %d-%d for field %s "

167 
Ê
->
low
, fl->
high
, fl->
«me
,

168 
low
, 
high
);

171 } i‡(
Ê
->
Êags
 & 
FL_OKLOW
) {

172 i‡(
Ê
->
low
 <Üow || fl->low > 
high
) {

173 
	`db¥ötf
(
	`_
("index %d for field %s out of "

175 
Ê
->
low
, fl->
«me
,Üow, 
high
);

178 
Ê
->
high
 = fl->
low
;

179 
Ê
->
Êags
 |
FL_OKHIGH
;

181 
Ê
->
low
 =Üow;

182 
Ê
->
high
 = high;

183 
Ê
->
Êags
 |
FL_OKLOW
 | 
FL_OKHIGH
;

186 i‡(
Ê
->
Êags
 & 
FL_OKLOW
) {

187 
	`db¥ötf
(
	`_
("field %s isÇotánárray\n"),

188 
Ê
->
«me
);

192 
Ê
->
off£t
 = 
°¨toff
 + 
	`bôoff£t
(
f
, 
obj
, sèπoff, fl->
low
);

193 i‡((
Ê
->
chûd
 !
NULL
 || 
Á
->
¥func
 == NULL) &&

194 (
f
->
Êags
 & 
FLD_ARRAY
Ë&& 
Ê
->
low
 !Ê->
high
)

195 
	`Êi°_ex∑nd_¨øys
(
Ê
);

196 i‡(
Á
->
¥func
 =
NULL
 && 
Ê
->
chûd
 == NULL)

197 
	`Êi°_ex∑nd_°ru˘s
(
Ê
, 
obj
);

198 i‡(
Ê
->
chûd
) {

199 i‡(
Á
->
subÊd
 =
NULL
) {

200 
	`db¥ötf
(
	`_
("field %s hasÇo subfields\n"),

201 
Ê
->
«me
);

204 i‡(!
	`Êi°_∑r£
(
Á
->
subÊd
, 
Ê
->
chûd
, 
obj
,

205 
Ê
->
off£t
))

208 
Ê
 = fl->
siblög
;

211 
	}
}

214 
	$Êi°_¥öt
(

215 
Êi°_t
 *
Ê
)

217 i‡(!(
debug_°©e
 & 
DEBUG_FLIST
))

219 
Ê
) {

220 
	`db¥ötf
(
	`_
("Ê@%p:\n"), 
Ê
);

221 
	`db¥ötf
(
	`_
("\tname=%s, fld=%p, child=%p, sibling=%p\n"),

222 
Ê
->
«me
, fl->
Êd
, fl->
chûd
, fl->
siblög
);

223 
	`db¥ötf
(
	`_
("\tlow=%d, high=%d, flags=%d (%s%s), offset=%d\n"),

224 
Ê
->
low
, fl->
high
, fl->
Êags
,

225 
Ê
->
Êags
 & 
FL_OKLOW
 ? 
	`_
("oklow ") : "",

226 
Ê
->
Êags
 & 
FL_OKHIGH
 ? 
	`_
("okhigh"Ë: "", fl->
off£t
);

227 
	`db¥ötf
(
	`_
("\tfld->name=%s, fld->ftyp=%d (%s)\n"),

228 
Ê
->
Êd
->
«me
, fl->Êd->
·yp
,

229 
·©åèb
[
Ê
->
Êd
->
·yp
].
«me
);

230 
	`db¥ötf
(
	`_
("\tÊd->Êags=%d (%s%s%s%s%s)\n"), 
Ê
->
Êd
->
Êags
,

231 
Ê
->
Êd
->
Êags
 & 
FLD_ABASE1
 ? "abase1 " : "",

232 
Ê
->
Êd
->
Êags
 & 
FLD_SKIPALL
 ? "skipall " : "",

233 
Ê
->
Êd
->
Êags
 & 
FLD_ARRAY
 ? "array " : "",

234 
Ê
->
Êd
->
Êags
 & 
FLD_OFFSET
 ? "offset " : "",

235 
Ê
->
Êd
->
Êags
 & 
FLD_COUNT
 ? "count " : "");

236 i‡(
Ê
->
chûd
)

237 
	`Êi°_¥öt
(
Ê
->
chûd
);

238 
Ê
 = fl->
siblög
;

240 
	}
}

242 
Êi°_t
 *

243 
	$Êi°_ª∂iˇã
(

244 
Êi°_t
 *
f
)

246 
Êi°_t
 *
√w
;

248 i‡(
f
 =
NULL
)

249  
NULL
;

250 
√w
 = 
	`Êi°_make
(
f
->
«me
);

251 
√w
->
Êd
 = 
f
->fld;

252 
√w
->
chûd
 = 
	`Êi°_ª∂iˇã
(
f
->child);

253 
√w
->
siblög
 = 
	`Êi°_ª∂iˇã
(
f
->sibling);

254 
√w
->
low
 = 
f
->low;

255 
√w
->
high
 = 
f
->high;

256 
√w
->
Êags
 = 
f
->flags;

257 
√w
->
off£t
 = 
f
->offset;

258  
√w
;

259 
	}
}

261 
Êi°_t
 *

262 
	$Êi°_sˇn
(

263 *
«me
)

265 
Êi°_t
 *
Ê
;

266 
Êi°_t
 *
lÊ
;

267 
Êi°_t
 *
nÊ
;

268 
num
;

269 
·ok_t
 *
p
;

270 
·ok_t
 *
v
;

271 *
x
;

273 
v
 = 
	`Êi°_•lô
(
«me
);

274 i‡(!
v
)

275  
NULL
;

276 
p
 = 
v
;

277 
Ê
 = 
lÊ
 = 
NULL
;

278 
p
->
tokty
 !
TT_END
) {

279 i‡(
p
->
tokty
 !
TT_NAME
)

280 
bad
;

281 
nÊ
 = 
	`Êi°_make
(
p
->
tok
);

282 i‡(
lÊ
)

283 
lÊ
->
chûd
 = 
nÊ
;

285 
Ê
 = 
nÊ
;

286 
lÊ
 = 
nÊ
;

287 
p
++;

288 i‡(
p
->
tokty
 =
TT_LB
) {

289 
p
++;

290 i‡(
p
->
tokty
 !
TT_NUM
)

291 
bad
;

292 
num
 = ()
	`°πoul
(
p
->
tok
, &
x
, 0);

293 i‡(*
x
 != '\0')

294 
bad
;

295 
nÊ
->
Êags
 |
FL_OKLOW
;

296 
nÊ
->
low
 = 
num
;

297 
p
++;

298 i‡(
p
->
tokty
 =
TT_DASH
) {

299 
p
++;

300 i‡(
p
->
tokty
 !
TT_NUM
)

301 
bad
;

302 
num
 = ()
	`°πoul
(
p
->
tok
, &
x
, 0);

303 i‡(*
x
 != '\0')

304 
bad
;

305 
nÊ
->
Êags
 |
FL_OKHIGH
;

306 
nÊ
->
high
 = 
num
;

307 
p
++;

309 i‡(
p
->
tokty
 !
TT_RB
)

310 
bad
;

311 
p
++;

313 i‡(
p
->
tokty
 =
TT_DOT
) {

314 
p
++;

315 i‡(
p
->
tokty
 =
TT_END
)

316 
bad
;

319 
	`·ok_‰ì
(
v
);

320  
Ê
;

321 
bad
:

322 
	`db¥ötf
(
	`_
("bad sy¡ax i¿fõldÇamê%s\n"), 
«me
);

323 
	`·ok_‰ì
(
v
);

324 i‡(
Ê
)

325 
	`Êi°_‰ì
(
Ê
);

326  
NULL
;

327 
	}
}

329 
·ok_t
 *

330 
	$Êi°_•lô
(

331 *
s
)

333 *
a
;

334 
i
;

335 *
idch¨s
;

336 *
öôidch¨
;

337 
l
;

338 
èûskù
 = 0;

339 *
numch¨s
;

340 *
xnumch¨s
;

341 
nv
;

342 
pun˘ch¨s
[] = "[-].";

343 
tokty_t
 
pun˘ty≥s
[] = { 
TT_LB
, 
TT_DASH
, 
TT_RB
, 
TT_DOT
 };

344 
tokty_t
 
t
;

345 
·ok_t
 *
v
;

347 i‡(
idch¨s
 =
NULL
) {

348 
idch¨s
 = 
	`xmÆloc
(26 + 10 + 1 + 1);

349 
öôidch¨
 = 
	`xmÆloc
(26 + 1);

350 
numch¨s
 = 
	`xmÆloc
(10 + 1);

351 
xnumch¨s
 = 
	`xmÆloc
(12 + 1);

352 
i
 = 'a'; i <= 'z'; i++) {

353 
idch¨s
[
i
 - 'a'] = i;

354 
öôidch¨
[
i
 - 'a'] = i;

357 
i
 = '0'; i <= '9'; i++) {

358 
idch¨s
[26 + (
i
 - '0')] = i;

359 
numch¨s
[
i
 - '0'] = i;

360 
xnumch¨s
[
i
 - '0'] = i;

362 
idch¨s
[26 + 10] = '_';

363 
idch¨s
[26 + 10 + 1] = '\0';

364 
öôidch¨
[26] = '\0';

365 
numch¨s
[10] = '\0';

366 
xnumch¨s
[10] = 'x';

367 
xnumch¨s
[11] = 'X';

368 
xnumch¨s
[12] = '\0';

370 
nv
 = 0;

371 
v
 = 
	`xmÆloc
((*v));

372 
v
->
tok
 = 
NULL
;

373 *
s
) {

375 i‡(*
s
 == '\"') {

376 
s
++;

377 i‡((
a
 = 
	`°ºchr
(
s
, '\"')Ë=
NULL
) {

378 
	`db¥ötf
(
	`_
("missög closög quŸê%s\n"), 
s
);

379 
	`·ok_‰ì
(
v
);

380  
NULL
;

382 
èûskù
 = 1;

383 
l
 = ()(
a
 - 
s
);

384 
t
 = 
TT_STRING
;

385 } i‡(
	`°rchr
(
öôidch¨
, *
s
)) {

386 
l
 = ()
	`°r•n
(
s
, 
idch¨s
);

387 
t
 = 
TT_NAME
;

388 } i‡(
	`°rchr
(
numch¨s
, *
s
)) {

389 
l
 = ()
	`°r•n
(
s
, 
xnumch¨s
);

390 
t
 = 
TT_NUM
;

391 } i‡((
a
 = 
	`°rchr
(
pun˘ch¨s
, *
s
))) {

392 
l
 = 1;

393 
t
 = 
pun˘ty≥s
[
a
 - 
pun˘ch¨s
];

395 
	`db¥ötf
(
	`_
("bad ch¨a˘î i¿fõld %s\n"), 
s
);

396 
	`·ok_‰ì
(
v
);

397  
NULL
;

399 
a
 = 
	`xmÆloc
(
l
 + 1);

400 
	`°∫˝y
(
a
, 
s
, 
l
);

401 
a
[
l
] = '\0';

402 
v
 = 
	`xªÆloc
(v, (
nv
 + 2) * (*v));

403 
v
[
nv
].
tok
 = 
a
;

404 
v
[
nv
].
tokty
 = 
t
;

405 
nv
++;

406 
s
 +
l
 + 
èûskù
;

407 
èûskù
 = 0;

409 
v
[
nv
].
tok
 = 
NULL
;

410 
v
[
nv
].
tokty
 = 
TT_END
;

411  
v
;

412 
	}
}

420 
Êi°_t
 *

421 
	$Êi°_föd_·yp
(

422 c⁄° 
fõld_t
 *
fõlds
,

423 
Êdt_t
 
ty≥
)

425 
Êi°_t
 *
Ê
;

426 c⁄° 
fõld_t
 *
f
;

427 c⁄° 
·©å_t
 *
Á
;

429 
f
 = 
fõlds
; f->
«me
; f++) {

430 
Ê
 = 
	`Êi°_make
(
f
->
«me
);

431 
Ê
->
Êd
 = 
f
;

432 i‡(
f
->
·yp
 =
ty≥
)

433  
Ê
;

434 
Á
 = &
·©åèb
[
f
->
·yp
];

435 i‡(
Á
->
subÊd
) {

436 
Êi°_t
 *
nÊ
;

438 
nÊ
 = 
	`Êi°_föd_·yp
(
Á
->
subÊd
, 
ty≥
);

439 i‡(
nÊ
) {

440 
Ê
->
chûd
 = 
nÊ
;

441  
Ê
;

444 
	`Êi°_‰ì
(
Ê
);

446  
NULL
;

447 
	}
}

450 
	$·ok_‰ì
(

451 
·ok_t
 *
·
)

453 
·ok_t
 *
p
;

455 
p
 = 
·
;Ö->
tok
;Ö++)

456 
	`x‰ì
(
p
->
tok
);

457 
	`x‰ì
(
·
);

458 
	}
}

	@flist.h

6 
	gfõld
;

8 
	sÊi°
 {

9 *
	m«me
;

10 c⁄° 
fõld
 *
	mÊd
;

11 
Êi°
 *
	mchûd
;

12 
Êi°
 *
	msiblög
;

13 
	mlow
;

14 
	mhigh
;

15 
	mÊags
;

16 
	moff£t
;

17 } 
	tÊi°_t
;

22 
	#FL_OKLOW
 1

	)

23 
	#FL_OKHIGH
 2

	)

25 
	etokty
 {

26 
	mTT_NAME
, 
	mTT_NUM
, 
	mTT_STRING
, 
	mTT_LB
, 
	mTT_RB
, 
	mTT_DASH
, 
	mTT_DOT
, 
	mTT_END


27 } 
	ttokty_t
;

29 
	s·ok
 {

30 *
	mtok
;

31 
tokty_t
 
	mtokty
;

32 } 
	t·ok_t
;

34 
Êi°_‰ì
(
Êi°_t
 *
Ê
);

35 
Êi°_t
 *
Êi°_make
(*
«me
);

36 
Êi°_∑r£
(c⁄° 
fõld
 *
fõlds
, 
Êi°_t
 *
Ê
, *
obj
,

37 
°¨toff
);

38 
Êi°_¥öt
(
Êi°_t
 *
Ê
);

39 
Êi°_t
 *
Êi°_sˇn
(*
«me
);

40 
Êi°_t
 *
Êi°_föd_·yp
(c⁄° 
fõld_t
 *
fõlds
, 
Êdt_t
 
ty≥
);

	@fprint.c

19 
	~"libxfs.h
"

20 
	~<˘y≥.h
>

21 
	~<time.h
>

22 
	~"ty≥.h
"

23 
	~"Áddr.h
"

24 
	~"Âröt.h
"

25 
	~"fõld.h
"

26 
	~"öode.h
"

27 
	~"btblock.h
"

28 
	~"bô.h
"

29 
	~"¥öt.h
"

30 
	~"ouçut.h
"

31 
	~"sig.h
"

32 
	~"mÆloc.h
"

33 
	~"io.h
"

36 
	$Â_ch¨ns
(

37 *
obj
,

38 
bô
,

39 
cou¡
,

40 *
fmt°r
,

41 
size
,

42 
¨g
,

43 
ba£
,

44 
¨øy
)

46 
i
;

47 *
p
;

49 
	`ASSERT
(
	`bôoffs
(
bô
) == 0);

50 
	`ASSERT
(
size
 =
	`bôsz
());

51 
	`db¥ötf
("\"");

52 
i
 = 0, 
p
 = (*)
obj
 + 
	`byãize
(
bô
);

53 
i
 < 
cou¡
 && !
	`£íöt
();

54 
i
++, 
p
++) {

55 i‡(*
p
 == '\\' || *p == '\'' || *p == '"' || *p == '\?')

56 
	`db¥ötf
("\\%c", *
p
);

57 i‡(
	`isgøph
(()*
p
) || *p == ' ')

58 
	`db¥ötf
("%c", *
p
);

59 i‡(*
p
 == '\a' || *p == '\b' || *p == '\f' || *p == '\n' ||

60 *
p
 == '\r' || *p == '\t' || *p == '\v')

61 
	`db¥ötf
("\\%c", *
p
 + ('a' - '\a'));

63 
	`db¥ötf
("\\%03o", *
p
 & 0xff);

65 
	`db¥ötf
("\"");

67 
	}
}

70 
	$Â_num
(

71 *
obj
,

72 
bô
,

73 
cou¡
,

74 *
fmt°r
,

75 
size
,

76 
¨g
,

77 
ba£
,

78 
¨øy
)

80 
bôpos
;

81 
i
;

82 
i¢uŒ
;

83 
__öt64_t
 
vÆ
;

85 
i
 = 0, 
bôpos
 = 
bô
;

86 
i
 < 
cou¡
 && !
	`£íöt
();

87 
i
++, 
bôpos
 +
size
) {

88 
vÆ
 = 
	`gëbôvÆ
(
obj
, 
bôpos
, 
size
,

89 (
¨g
 & 
FTARG_SIGNED
Ë? 
BVSIGNED
 : 
BVUNSIGNED
);

90 i‡((
¨g
 & 
FTARG_SKIPZERO
Ë&& 
vÆ
 == 0)

92 
i¢uŒ
 = (
¨g
 & 
FTARG_SIGNED
Ë|| 
size
 == 64 ?

93 
vÆ
 =-1LL : vÆ =((1LL << 
size
) - 1LL);

94 i‡((
¨g
 & 
FTARG_SKIPNULL
Ë&& 
i¢uŒ
)

96 i‡(
¨øy
 && 
cou¡
 > 1)

97 
	`db¥ötf
("%d:", 
i
 + 
ba£
);

98 i‡((
¨g
 & 
FTARG_DONULL
Ë&& 
i¢uŒ
)

99 
	`db¥ötf
(
	`_
("null"));

100 i‡(
size
 > 32)

101 
	`db¥ötf
(
fmt°r
, 
vÆ
);

103 
	`db¥ötf
(
fmt°r
, (
__öt32_t
)
vÆ
);

104 i‡(
i
 < 
cou¡
 - 1)

105 
	`db¥ötf
(" ");

108 
	}
}

112 
	$Â_ßºay
(

113 *
obj
,

114 
bô
,

115 
cou¡
,

116 *
fmt°r
,

117 
size
,

118 
¨g
,

119 
ba£
,

120 
¨øy
)

122 
	`¥öt_ßºay
(
obj
, 
bô
, 
cou¡
, 
size
, 
ba£
, 
¨øy
,

123 (c⁄° 
fõld_t
 *)
fmt°r
, (
¨g
 & 
FTARG_SKIPNMS
) != 0);

125 
	}
}

129 
	$Â_time
(

130 *
obj
,

131 
bô
,

132 
cou¡
,

133 *
fmt°r
,

134 
size
,

135 
¨g
,

136 
ba£
,

137 
¨øy
)

139 
bôpos
;

140 *
c
;

141 
i
;

142 
time_t
 
t
;

144 
	`ASSERT
(
	`bôoffs
(
bô
) == 0);

145 
i
 = 0, 
bôpos
 = 
bô
;

146 
i
 < 
cou¡
 && !
	`£íöt
();

147 
i
++, 
bôpos
 +
size
) {

148 i‡(
¨øy
)

149 
	`db¥ötf
("%d:", 
i
 + 
ba£
);

150 
t
=(
time_t
)
	`gëbôvÆ
((*)
obj
 + 
	`byãize
(
bôpos
), 0, (
öt32_t
)*8, 0);

151 
c
 = 
	`˘ime
(&
t
);

152 
	`db¥ötf
("%24.24s", 
c
);

153 i‡(
i
 < 
cou¡
 - 1)

154 
	`db¥ötf
(" ");

157 
	}
}

161 
	$Â_uuid
(

162 *
obj
,

163 
bô
,

164 
cou¡
,

165 *
fmt°r
,

166 
size
,

167 
¨g
,

168 
ba£
,

169 
¨øy
)

171 
bp
[40];

172 
i
;

173 
uuid_t
 *
p
;

175 
	`ASSERT
(
	`bôoffs
(
bô
) == 0);

176 
p
 = (
uuid_t
 *)((*)
obj
 + 
	`byãize
(
bô
)), 
i
 = 0;

177 
i
 < 
cou¡
 && !
	`£íöt
();

178 
i
++, 
p
++) {

179 i‡(
¨øy
)

180 
	`db¥ötf
("%d:", 
i
 + 
ba£
);

181 
	`∂©f‹m_uuid_u≈¨£
(
p
, 
bp
);

182 
	`db¥ötf
("%s", 
bp
);

183 i‡(
i
 < 
cou¡
 - 1)

184 
	`db¥ötf
(" ");

187 
	}
}

194 
	$Â_¸c
(

195 *
obj
,

196 
bô
,

197 
cou¡
,

198 *
fmt°r
,

199 
size
,

200 
¨g
,

201 
ba£
,

202 
¨øy
)

204 
bôpos
;

205 
i
;

206 
__öt64_t
 
vÆ
;

207 *
ok
;

209 
	`iocur_¸c_vÆid
()) {

211 
ok
 = "unchecked";

214 
ok
 = "bad";

217 
ok
 = "correct";

220 
ok
 = "unknown state";

224 
i
 = 0, 
bôpos
 = 
bô
;

225 
i
 < 
cou¡
 && !
	`£íöt
();

226 
i
++, 
bôpos
 +
size
) {

227 i‡(
¨øy
)

228 
	`db¥ötf
("%d:", 
i
 + 
ba£
);

229 
vÆ
 = 
	`gëbôvÆ
(
obj
, 
bôpos
, 
size
, 
BVUNSIGNED
);

230 i‡(
size
 > 32)

231 
	`db¥ötf
(
fmt°r
, 
vÆ
, 
ok
);

233 
	`db¥ötf
(
fmt°r
, (
__öt32_t
)
vÆ
, 
ok
);

234 i‡(
i
 < 
cou¡
 - 1)

235 
	`db¥ötf
(" ");

238 
	}
}

	@fprint.h

19 (*
	t¥‚c_t
)(*
	tobj
, 
	tbô
, 
	tcou¡
, *
	tfmt°r
, 
	tsize
,

20 
	t¨g
, 
	tba£
, 
	t¨øy
);

22 
	`Â_ch¨ns
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

23 
¨g
, 
ba£
, 
¨øy
);

24 
	`Â_num
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

25 
¨g
, 
ba£
, 
¨øy
);

26 
	`Â_ßºay
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

27 
¨g
, 
ba£
, 
¨øy
);

28 
	`Â_time
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

29 
¨g
, 
ba£
, 
¨øy
);

30 
	`Â_uuid
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

31 
¨g
, 
ba£
, 
¨øy
);

32 
	`Â_¸c
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

33 
¨g
, 
ba£
, 
¨øy
);

	@frag.c

19 
	~"libxfs.h
"

20 
	~<sys/time.h
>

21 
	~"bm≠.h
"

22 
	~"comm™d.h
"

23 
	~"‰ag.h
"

24 
	~"io.h
"

25 
	~"ouçut.h
"

26 
	~"ty≥.h
"

27 
	~"öô.h
"

28 
	~"mÆloc.h
"

30 
	sexã¡
 {

31 
xfs_fûeoff_t
 
	m°¨toff
;

32 
xfs_fûblks_t
 
	mblockcou¡
;

33 } 
	texã¡_t
;

35 
	sextm≠
 {

36 
	m«íts
;

37 
	m√¡s
;

38 
exã¡_t
 
	míts
[1];

39 } 
	textm≠_t
;

40 
	#EXTMAP_SIZE
(
n
) \

41 (
	`off£tof
(
extm≠_t
, 
íts
Ë+ ((
exã¡_t
Ë* (
n
)))

	)

43 
	gaÊag
;

44 
	gdÊag
;

45 
__uöt64_t
 
	gextcou¡_a˘uÆ
;

46 
__uöt64_t
 
	gextcou¡_idól
;

47 
	gfÊag
;

48 
	glÊag
;

49 
	gqÊag
;

50 
	gRÊag
;

51 
	grÊag
;

52 
	gvÊag
;

54 (*
	tsˇn_lbåì_f_t
)(
	txfs_båì_block
 *
	tblock
,

55 
	tÀvñ
,

56 
	textm≠_t
 **
	textm≠p
,

57 
	tty≤m_t
 
	tbty≥
);

59 (*
	tsˇn_sbåì_f_t
)(
	txfs_båì_block
 *
	tblock
,

60 
	tÀvñ
,

61 
	txfs_agf_t
 *
	tagf
);

63 
extm≠_t
 *
	`extm≠_Æloc
(
xfs_exäum_t
 
√x
);

64 
xfs_exäum_t
 
	`extm≠_idól
(
extm≠_t
 *
extm≠
);

65 
	`extm≠_£t_ext
(
extm≠_t
 **
extm≠p
, 
xfs_fûeoff_t
 
o
,

66 
xfs_exéí_t
 
c
);

67 
	`‰ag_f
(
¨gc
, **
¨gv
);

68 
	`öô
(
¨gc
, **
¨gv
);

69 
	`¥o˚ss_bmbt_ª˛i°
(
xfs_bmbt_ªc_t
 *
Ω
, 
numªcs
,

70 
extm≠_t
 **
extm≠p
);

71 
	`¥o˚ss_btöode
(
xfs_döode_t
 *
dù
, 
extm≠_t
 **
extm≠p
,

72 
whichf‹k
);

73 
	`¥o˚ss_exöode
(
xfs_döode_t
 *
dù
, 
extm≠_t
 **
extm≠p
,

74 
whichf‹k
);

75 
	`¥o˚ss_f‹k
(
xfs_döode_t
 *
dù
, 
whichf‹k
);

76 
	`¥o˚ss_öode
(
xfs_agf_t
 *
agf
, 
xfs_agöo_t
 
agöo
,

77 
xfs_döode_t
 *
dù
);

78 
	`sˇn_ag
(
xfs_agnumbî_t
 
agno
);

79 
	`sˇn_lbåì
(
xfs_fsblock_t
 
roŸ
, 
∆evñs
,

80 
sˇn_lbåì_f_t
 
func
, 
extm≠_t
 **
extm≠p
,

81 
ty≤m_t
 
bty≥
);

82 
	`sˇn_sbåì
(
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
roŸ
,

83 
∆evñs
, 
sˇn_sbåì_f_t
 
func
,

84 
ty≤m_t
 
bty≥
);

85 
	`sˇnfunc_bm≠
(
xfs_båì_block
 *
block
, 
Àvñ
,

86 
extm≠_t
 **
extm≠p
, 
ty≤m_t
 
bty≥
);

87 
	`sˇnfunc_öo
(
xfs_båì_block
 *
block
, 
Àvñ
,

88 
xfs_agf_t
 *
agf
);

90 c⁄° 
cmdöfo_t
 
‰ag_cmd
 =

91 { "‰ag", 
NULL
, 
‰ag_f
, 0, -1, 0,

93 "gë fûê‰agmíèti⁄ d©a", 
NULL
 
	}
};

95 
extm≠_t
 *

96 
	$extm≠_Æloc
(

97 
xfs_exäum_t
 
√x
)

99 
extm≠_t
 *
extm≠
;

101 i‡(
√x
 < 1)

102 
√x
 = 1;

103 
extm≠
 = 
	`xmÆloc
(
	`EXTMAP_SIZE
(
√x
));

104 
extm≠
->
«íts
 = 
√x
;

105 
extm≠
->
√¡s
 = 0;

106  
extm≠
;

107 
	}
}

109 
xfs_exäum_t


110 
	$extm≠_idól
(

111 
extm≠_t
 *
extm≠
)

113 
exã¡_t
 *
ï
;

114 
xfs_exäum_t
 
rvÆ
;

116 
ï
 = &
extm≠
->
íts
[0], 
rvÆ
 = 0;

117 
ï
 < &
extm≠
->
íts
[extm≠->
√¡s
];

118 
ï
++) {

119 i‡(
ï
 =&
extm≠
->
íts
[0] ||

120 
ï
->
°¨toff
 !ï[-1].°¨tof‡+Ép[-1].
blockcou¡
)

121 
rvÆ
++;

123  
rvÆ
;

124 
	}
}

127 
	$extm≠_£t_ext
(

128 
extm≠_t
 **
extm≠p
,

129 
xfs_fûeoff_t
 
o
,

130 
xfs_exéí_t
 
c
)

132 
extm≠_t
 *
extm≠
;

133 
exã¡_t
 *
ít
;

135 
extm≠
 = *
extm≠p
;

136 i‡(
extm≠
->
√¡s
 =extm≠->
«íts
) {

137 
extm≠
->
«íts
++;

138 
extm≠
 = 
	`xªÆloc
”xtm≠, 
	`EXTMAP_SIZE
”xtm≠->
«íts
));

139 *
extm≠p
 = 
extm≠
;

141 
ít
 = &
extm≠
->
íts
[extm≠->
√¡s
];

142 
ít
->
°¨toff
 = 
o
;

143 
ít
->
blockcou¡
 = 
c
;

144 
extm≠
->
√¡s
++;

145 
	}
}

148 
	$‰ag_öô
()

150 
	`add_comm™d
(&
‰ag_cmd
);

151 
	}
}

157 
	$‰ag_f
(

158 
¨gc
,

159 **
¨gv
)

161 
xfs_agnumbî_t
 
agno
;

162 
™swî
;

164 i‡(!
	`öô
(
¨gc
, 
¨gv
))

166 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++)

167 
	`sˇn_ag
(
agno
);

168 i‡(
extcou¡_a˘uÆ
)

169 
™swî
 = ()(
extcou¡_a˘uÆ
 - 
extcou¡_idól
) * 100.0 /

170 ()
extcou¡_a˘uÆ
;

172 
™swî
 = 0.0;

173 
	`db¥ötf
(
	`_
("actual %llu, ideal %llu, fragmentation factor %.2f%%\n"),

174 
extcou¡_a˘uÆ
, 
extcou¡_idól
, 
™swî
);

175 
	`db¥ötf
(
	`_
("Note,ÅhisÇumber isÜargely meaningless.\n"));

176 
™swî
 = ()
extcou¡_a˘uÆ
 / ()
extcou¡_idól
;

177 
	`db¥ötf
(
	`_
("Files onÅhis filesystemáverage %.2fÉxtentsÖer file\n"),

178 
™swî
);

180 
	}
}

183 
	$öô
(

184 
¨gc
,

185 **
¨gv
)

187 
c
;

189 
aÊag
 = 
dÊag
 = 
fÊag
 = 
lÊag
 = 
qÊag
 = 
RÊag
 = 
rÊag
 = 
vÊag
 = 0;

190 
›töd
 = 0;

191 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "adÊqRrv")Ë!
EOF
) {

192 
c
) {

194 
aÊag
 = 1;

197 
dÊag
 = 1;

200 
fÊag
 = 1;

203 
lÊag
 = 1;

206 
qÊag
 = 1;

209 
RÊag
 = 1;

212 
rÊag
 = 1;

215 
vÊag
 = 1;

218 
	`db¥ötf
(
	`_
("bad option for frag command\n"));

222 i‡(!
aÊag
 && !
dÊag
 && !
fÊag
 && !
lÊag
 && !
qÊag
 && !
RÊag
 && !
rÊag
)

223 
aÊag
 = 
dÊag
 = 
fÊag
 = 
lÊag
 = 
qÊag
 = 
RÊag
 = 
rÊag
 = 1;

224 
extcou¡_a˘uÆ
 = 
extcou¡_idól
 = 0;

226 
	}
}

229 
	$¥o˚ss_bmbt_ª˛i°
(

230 
xfs_bmbt_ªc_t
 *
Ω
,

231 
numªcs
,

232 
extm≠_t
 **
extm≠p
)

234 
xfs_fûblks_t
 
c
;

235 
f
;

236 
i
;

237 
xfs_fûeoff_t
 
o
;

238 
xfs_fsblock_t
 
s
;

240 
i
 = 0; i < 
numªcs
; i++, 
Ω
++) {

241 
	`c⁄vît_exã¡
(
Ω
, &
o
, &
s
, &
c
, &
f
);

242 
	`extm≠_£t_ext
(
extm≠p
, (
xfs_fûeoff_t
)
o
, (
xfs_exéí_t
)
c
);

244 
	}
}

247 
	$¥o˚ss_btöode
(

248 
xfs_döode_t
 *
dù
,

249 
extm≠_t
 **
extm≠p
,

250 
whichf‹k
)

252 
xfs_bmdr_block_t
 *
dib
;

253 
i
;

254 
xfs_bmbt_±r_t
 *
µ
;

256 
dib
 = (
xfs_bmdr_block_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

257 i‡(
	`be16_to_˝u
(
dib
->
bb_Àvñ
) == 0) {

258 
xfs_bmbt_ªc_t
 *
Ω
 = 
	`XFS_BMDR_REC_ADDR
(
dib
, 1);

259 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, 
	`be16_to_˝u
(
dib
->
bb_numªcs
), 
extm≠p
);

262 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
dib
, 1,

263 
	`libxfs_bmdr_maxªcs
(
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
), 0));

264 
i
 = 0; i < 
	`be16_to_˝u
(
dib
->
bb_numªcs
); i++)

265 
	`sˇn_lbåì
(
	`gë_u«lig√d_be64
(&
µ
[
i
]),

266 
	`be16_to_˝u
(
dib
->
bb_Àvñ
), 
sˇnfunc_bm≠
, 
extm≠p
,

267 
whichf‹k
 =
XFS_DATA_FORK
 ? 
TYP_BMAPBTD
 : 
TYP_BMAPBTA
);

268 
	}
}

271 
	$¥o˚ss_exöode
(

272 
xfs_döode_t
 *
dù
,

273 
extm≠_t
 **
extm≠p
,

274 
whichf‹k
)

276 
xfs_bmbt_ªc_t
 *
Ω
;

278 
Ω
 = (
xfs_bmbt_ªc_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

279 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
), 
extm≠p
);

280 
	}
}

283 
	$¥o˚ss_f‹k
(

284 
xfs_döode_t
 *
dù
,

285 
whichf‹k
)

287 
extm≠_t
 *
extm≠
;

288 
√x
;

290 
√x
 = 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
);

291 i‡(!
√x
)

293 
extm≠
 = 
	`extm≠_Æloc
(
√x
);

294 
	`XFS_DFORK_FORMAT
(
dù
, 
whichf‹k
)) {

295 
XFS_DINODE_FMT_EXTENTS
:

296 
	`¥o˚ss_exöode
(
dù
, &
extm≠
, 
whichf‹k
);

298 
XFS_DINODE_FMT_BTREE
:

299 
	`¥o˚ss_btöode
(
dù
, &
extm≠
, 
whichf‹k
);

302 
extcou¡_a˘uÆ
 +
extm≠
->
√¡s
;

303 
extcou¡_idól
 +
	`extm≠_idól
(
extm≠
);

304 
	`x‰ì
(
extm≠
);

305 
	}
}

308 
	$¥o˚ss_öode
(

309 
xfs_agf_t
 *
agf
,

310 
xfs_agöo_t
 
agöo
,

311 
xfs_döode_t
 *
dù
)

313 
__uöt64_t
 
a˘uÆ
;

314 
__uöt64_t
 
idól
;

315 
xfs_öo_t
 
öo
;

316 
skùa
;

317 
skùd
;

319 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
agöo
);

320 
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
) {

321 
S_IFDIR
:

322 
skùd
 = !
dÊag
;

324 
S_IFREG
:

325 i‡(!
rÊag
 && (
	`be16_to_˝u
(
dù
->
di_Êags
Ë& 
XFS_DIFLAG_REALTIME
))

326 
skùd
 = 1;

327 i‡(!
RÊag
 &&

328 (
öo
 =
mp
->
m_sb
.
sb_rbmöo
 ||

329 
öo
 =
mp
->
m_sb
.
sb_rsumöo
))

330 
skùd
 = 1;

331 i‡(!
qÊag
 &&

332 (
öo
 =
mp
->
m_sb
.
sb_uquŸöo
 ||

333 
öo
 =
mp
->
m_sb
.
sb_gquŸöo
 ||

334 
öo
 =
mp
->
m_sb
.
sb_pquŸöo
))

335 
skùd
 = 1;

337 
skùd
 = !
fÊag
;

339 
S_IFLNK
:

340 
skùd
 = !
lÊag
;

343 
skùd
 = 1;

346 
a˘uÆ
 = 
extcou¡_a˘uÆ
;

347 
idól
 = 
extcou¡_idól
;

348 i‡(!
skùd
)

349 
	`¥o˚ss_f‹k
(
dù
, 
XFS_DATA_FORK
);

350 
skùa
 = !
aÊag
 || !
	`XFS_DFORK_Q
(
dù
);

351 i‡(!
skùa
)

352 
	`¥o˚ss_f‹k
(
dù
, 
XFS_ATTR_FORK
);

353 i‡(
vÊag
 && (!
skùd
 || !
skùa
))

354 
	`db¥ötf
(
	`_
("inode %lldáctual %lld ideal %lld\n"),

355 
öo
, 
extcou¡_a˘uÆ
 - 
a˘uÆ
, 
extcou¡_idól
 - 
idól
);

356 
	}
}

359 
	$sˇn_ag
(

360 
xfs_agnumbî_t
 
agno
)

362 
xfs_agf_t
 *
agf
;

363 
xfs_agi_t
 *
agi
;

365 
	`push_cur
();

366 
	`£t_cur
(&
ty±ab
[
TYP_AGF
],

367 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

368 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

369 i‡((
agf
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

370 
	`db¥ötf
(
	`_
("ˇn'àªadág‡block f‹ág %u\n"), 
agno
);

371 
	`p›_cur
();

374 
	`push_cur
();

375 
	`£t_cur
(&
ty±ab
[
TYP_AGI
],

376 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),

377 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

378 i‡((
agi
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

379 
	`db¥ötf
(
	`_
("ˇn'àªadágòblock f‹ág %u\n"), 
agno
);

380 
	`p›_cur
();

381 
	`p›_cur
();

384 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
agi
->
agi_roŸ
),

385 
	`be32_to_˝u
(
agi
->
agi_Àvñ
), 
sˇnfunc_öo
, 
TYP_INOBT
);

386 
	`p›_cur
();

387 
	`p›_cur
();

388 
	}
}

391 
	$sˇn_lbåì
(

392 
xfs_fsblock_t
 
roŸ
,

393 
∆evñs
,

394 
sˇn_lbåì_f_t
 
func
,

395 
extm≠_t
 **
extm≠p
,

396 
ty≤m_t
 
bty≥
)

398 
	`push_cur
();

399 
	`£t_cur
(&
ty±ab
[
bty≥
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
roŸ
), 
blkbb
, 
DB_RING_IGN
,

400 
NULL
);

401 i‡(
iocur_t›
->
d©a
 =
NULL
) {

402 
	`db¥ötf
(
	`_
("can'tÑead btree block %u/%u\n"),

403 
	`XFS_FSB_TO_AGNO
(
mp
, 
roŸ
),

404 
	`XFS_FSB_TO_AGBNO
(
mp
, 
roŸ
));

407 (*
func
)(
iocur_t›
->
d©a
, 
∆evñs
 - 1, 
extm≠p
, 
bty≥
);

408 
	`p›_cur
();

409 
	}
}

412 
	$sˇn_sbåì
(

413 
xfs_agf_t
 *
agf
,

414 
xfs_agblock_t
 
roŸ
,

415 
∆evñs
,

416 
sˇn_sbåì_f_t
 
func
,

417 
ty≤m_t
 
bty≥
)

419 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

421 
	`push_cur
();

422 
	`£t_cur
(&
ty±ab
[
bty≥
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
£qno
, 
roŸ
),

423 
blkbb
, 
DB_RING_IGN
, 
NULL
);

424 i‡(
iocur_t›
->
d©a
 =
NULL
) {

425 
	`db¥ötf
(
	`_
("ˇn'àªad båì block %u/%u\n"), 
£qno
, 
roŸ
);

428 (*
func
)(
iocur_t›
->
d©a
, 
∆evñs
 - 1, 
agf
);

429 
	`p›_cur
();

430 
	}
}

433 
	$sˇnfunc_bm≠
(

434 
xfs_båì_block
 *
block
,

435 
Àvñ
,

436 
extm≠_t
 **
extm≠p
,

437 
ty≤m_t
 
bty≥
)

439 
i
;

440 
xfs_bmbt_±r_t
 *
µ
;

441 
xfs_bmbt_ªc_t
 *
Ω
;

442 
ƒecs
;

444 
ƒecs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

446 i‡(
Àvñ
 == 0) {

447 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[0]) {

448 
	`db¥ötf
(
	`_
("invalidÇumrecs (%u) in %s block\n"),

449 
ƒecs
, 
ty±ab
[
bty≥
].
«me
);

452 
Ω
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1);

453 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, 
ƒecs
, 
extm≠p
);

457 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[1]) {

458 
	`db¥ötf
(
	`_
("invalidÇumrecs (%u) in %s block\n"),

459 
ƒecs
, 
ty±ab
[
bty≥
].
«me
);

462 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[0]);

463 
i
 = 0; i < 
ƒecs
; i++)

464 
	`sˇn_lbåì
(
	`be64_to_˝u
(
µ
[
i
]), 
Àvñ
, 
sˇnfunc_bm≠
, 
extm≠p
,

465 
bty≥
);

466 
	}
}

469 
	$sˇnfunc_öo
(

470 
xfs_båì_block
 *
block
,

471 
Àvñ
,

472 
xfs_agf_t
 *
agf
)

474 
xfs_agöo_t
 
agöo
;

475 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

476 
i
;

477 
j
;

478 
off
;

479 
xfs_öobt_±r_t
 *
µ
;

480 
xfs_öobt_ªc_t
 *
Ω
;

482 i‡(
Àvñ
 == 0) {

483 
Ω
 = 
	`XFS_INOBT_REC_ADDR
(
mp
, 
block
, 1);

484 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

485 
agöo
 = 
	`be32_to_˝u
(
Ω
[
i
].
ú_°¨töo
);

486 
off
 = 
	`XFS_INO_TO_OFFSET
(
mp
, 
agöo
);

487 
	`push_cur
();

488 
	`£t_cur
(&
ty±ab
[
TYP_INODE
],

489 
	`XFS_AGB_TO_DADDR
(
mp
, 
£qno
,

490 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
)),

491 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_üŒoc_blks
),

492 
DB_RING_IGN
, 
NULL
);

493 i‡(
iocur_t›
->
d©a
 =
NULL
) {

494 
	`db¥ötf
(
	`_
("can'tÑead inode block %u/%u\n"),

495 
£qno
, 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
));

498 
j
 = 0; j < 
XFS_INODES_PER_CHUNK
; j++) {

499 i‡(
	`XFS_INOBT_IS_FREE_DISK
(&
Ω
[
i
], 
j
))

501 
	`¥o˚ss_öode
(
agf
, 
agöo
 + 
j
, (
xfs_döode_t
 *)

502 ((*)
iocur_t›
->
d©a
 +

503 ((
off
 + 
j
Ë<< 
mp
->
m_sb
.
sb_öodñog
)));

505 
	`p›_cur
();

509 
µ
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_öobt_mxr
[1]);

510 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

511 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 
sˇnfunc_öo
,

512 
TYP_INOBT
);

513 
	}
}

	@frag.h

19 
‰ag_öô
();

	@freesp.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"‰ì•.h
"

22 
	~"io.h
"

23 
	~"ty≥.h
"

24 
	~"ouçut.h
"

25 
	~"öô.h
"

26 
	~"mÆloc.h
"

28 
	shi°ít


30 
	mlow
;

31 
	mhigh
;

32 
	mcou¡
;

33 
	mblocks
;

34 } 
	thi°ít_t
;

36 
addhi°ít
(
h
);

37 
addtohi°
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

38 
xfs_exéí_t
 
Àn
);

39 
‰ì•_f
(
¨gc
, **
¨gv
);

40 
hi°öô
(
maxÀn
);

41 
öô
(
¨gc
, **
¨gv
);

42 
¥öthi°
();

43 
sˇn_ag
(
xfs_agnumbî_t
 
agno
);

44 
sˇnfunc_bno
(
xfs_båì_block
 *
block
, 
ty≤m_t
 
typ
, 
Àvñ
,

45 
xfs_agf_t
 *
agf
);

46 
sˇnfunc_˙t
(
xfs_båì_block
 *
block
, 
ty≤m_t
 
typ
, 
Àvñ
,

47 
xfs_agf_t
 *
agf
);

48 
sˇn_‰ìli°
(
xfs_agf_t
 *
agf
);

49 
sˇn_sbåì
(
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
roŸ
, 
ty≤m_t
 
typ
,

50 
∆evñs
,

51 (*
func
)(
xfs_båì_block
 *
block
, 
ty≤m_t
 
typ
,

52 
Àvñ
, 
xfs_agf_t
 *
agf
));

53 
	`ußge
();

55 
agcou¡
;

56 
xfs_agnumbî_t
 *
agli°
;

57 
cou¡Êag
;

58 
dumpÊag
;

59 
equÆsize
;

60 
hi°ít_t
 *
hi°
;

61 
hi°cou¡
;

62 
mu…size
;

63 
£í1
;

64 
summ¨yÊag
;

65 
tŸblocks
;

66 
tŸexts
;

68 c⁄° 
cmdöfo_t
 
‰ì•_cmd
 =

69 { "‰ì•", 
NULL
, 
‰ì•_f
, 0, -1, 0,

71 "summ¨izê‰ì s∑˚ f‹ fûesy°em", 
NULL
 
	}
};

74 
	$öagli°
(

75 
xfs_agnumbî_t
 
agno
)

77 
i
;

79 i‡(
agcou¡
 == 0)

81 
i
 = 0; i < 
agcou¡
; i++)

82 i‡(
agli°
[
i
] =
agno
)

85 
	}
}

91 
	$‰ì•_f
(

92 
¨gc
,

93 **
¨gv
)

95 
xfs_agnumbî_t
 
agno
;

97 i‡(!
	`öô
(
¨gc
, 
¨gv
))

100 i‡(
dumpÊag
)

101 
	`db¥ötf
("%8s %8s %8s\n", "agno", "agbno", "len");

103 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

104 i‡(
	`öagli°
(
agno
))

105 
	`sˇn_ag
(
agno
);

107 i‡(
hi°cou¡
)

108 
	`¥öthi°
();

109 i‡(
summ¨yÊag
) {

110 
	`db¥ötf
(
	`_
("tŸÆ fªêexã¡†%Œd\n"), 
tŸexts
);

111 
	`db¥ötf
(
	`_
("tŸÆ fªêblock†%Œd\n"), 
tŸblocks
);

112 
	`db¥ötf
(
	`_
("average freeÉxtent size %g\n"),

113 ()
tŸblocks
 / ()
tŸexts
);

115 i‡(
agli°
)

116 
	`x‰ì
(
agli°
);

117 i‡(
hi°
)

118 
	`x‰ì
(
hi°
);

120 
	}
}

123 
	$‰ì•_öô
()

125 
	`add_comm™d
(&
‰ì•_cmd
);

126 
	}
}

129 
	$agli°add
(

130 *
a
)

132 
agli°
 = 
	`xªÆloc
◊gli°, (
agcou¡
 + 1) * (*aglist));

133 
agli°
[
agcou¡
] = (
xfs_agnumbî_t
)
	`©oi
(
a
);

134 
agcou¡
++;

135 
	}
}

138 
	$öô
(

139 
¨gc
,

140 **
¨gv
)

142 
c
;

143 
•e˚d
 = 0;

145 
agcou¡
 = 
cou¡Êag
 = 
dumpÊag
 = 
equÆsize
 = 
mu…size
 = 
›töd
 = 0;

146 
hi°cou¡
 = 
£í1
 = 
summ¨yÊag
 = 0;

147 
tŸblocks
 = 
tŸexts
 = 0;

148 
agli°
 = 
NULL
;

149 
hi°
 = 
NULL
;

150 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "a:bcde:h:m:s")Ë!
EOF
) {

151 
c
) {

153 
	`agli°add
(
›èrg
);

156 i‡(
•e˚d
)

157  
	`ußge
();

158 
mu…size
 = 2;

159 
•e˚d
 = 1;

162 
cou¡Êag
 = 1;

165 
dumpÊag
 = 1;

168 i‡(
•e˚d
)

169  
	`ußge
();

170 
equÆsize
 = 
	`©oi
(
›èrg
);

171 
•e˚d
 = 1;

174 i‡(
•e˚d
 && !
hi°cou¡
)

175  
	`ußge
();

176 
	`addhi°ít
(
	`©oi
(
›èrg
));

177 
•e˚d
 = 1;

180 i‡(
•e˚d
)

181  
	`ußge
();

182 
mu…size
 = 
	`©oi
(
›èrg
);

183 
•e˚d
 = 1;

186 
summ¨yÊag
 = 1;

189  
	`ußge
();

192 i‡(
›töd
 !
¨gc
)

193  
	`ußge
();

194 i‡(!
•e˚d
)

195 
mu…size
 = 2;

196 
	`hi°öô
(()
mp
->
m_sb
.
sb_agblocks
);

198 
	}
}

201 
	$ußge
()

203 
	`db¥ötf
(
	`_
("freespárguments: [-bcds] [-aágno] [-e binsize] [-h h1]... "

206 
	}
}

209 
	$sˇn_ag
(

210 
xfs_agnumbî_t
 
agno
)

212 
xfs_agf_t
 *
agf
;

214 
	`push_cur
();

215 
	`£t_cur
(&
ty±ab
[
TYP_AGF
], 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

216 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

217 
agf
 = 
iocur_t›
->
d©a
;

218 
	`sˇn_‰ìli°
(
agf
);

219 i‡(
cou¡Êag
)

220 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
◊gf->
agf_roŸs
[
XFS_BTNUM_CNT
]),

221 
TYP_CNTBT
, 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNT
]),

222 
sˇnfunc_˙t
);

224 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
◊gf->
agf_roŸs
[
XFS_BTNUM_BNO
]),

225 
TYP_BNOBT
, 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNO
]),

226 
sˇnfunc_bno
);

227 
	`p›_cur
();

228 
	}
}

231 
	$sˇn_‰ìli°
(

232 
xfs_agf_t
 *
agf
)

234 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

235 
xfs_agÊ_t
 *
agÊ
;

236 
xfs_agblock_t
 
bno
;

237 
i
;

238 
__be32
 *
agÊ_bno
;

240 i‡(
	`be32_to_˝u
(
agf
->
agf_Êcou¡
) == 0)

242 
	`push_cur
();

243 
	`£t_cur
(&
ty±ab
[
TYP_AGFL
], 
	`XFS_AG_DADDR
(
mp
, 
£qno
, 
	`XFS_AGFL_DADDR
(mp)),

244 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

245 
agÊ
 = 
iocur_t›
->
d©a
;

246 
i
 = 
	`be32_to_˝u
(
agf
->
agf_Êfú°
);

249 
agÊ_bno
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
Ë? &
agÊ
->agfl_bno[0]

250 : (
__be32
 *)
agÊ
;

253 i‡(
	`be32_to_˝u
(
agf
->
agf_Êfú°
Ë>
	`XFS_AGFL_SIZE
(
mp
) ||

254 
	`be32_to_˝u
(
agf
->
agf_Êœ°
Ë>
	`XFS_AGFL_SIZE
(
mp
)) {

255 
	`db¥ötf
(
	`_
("agf %d freelist blocks bad, skipping "

256 "‰ìli° sˇn\n"), 
i
);

257 
	`p›_cur
();

262 
bno
 = 
	`be32_to_˝u
(
agÊ_bno
[
i
]);

263 
	`addtohi°
(
£qno
, 
bno
, 1);

264 i‡(
i
 =
	`be32_to_˝u
(
agf
->
agf_Êœ°
))

266 i‡(++
i
 =
	`XFS_AGFL_SIZE
(
mp
))

267 
i
 = 0;

269 
	`p›_cur
();

270 
	}
}

273 
sˇn_sbåì
(

274 
xfs_agf_t
 *
agf
,

275 
xfs_agblock_t
 
roŸ
,

276 
ty≤m_t
 
typ
,

277 
∆evñs
,

278 (*
func
)(
xfs_båì_block
 *
block
,

279 
ty≤m_t
 
typ
,

280 
Àvñ
,

281 
xfs_agf_t
 *
agf
))

283 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

285 
	`push_cur
();

286 
	`£t_cur
(&
ty±ab
[
typ
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
£qno
, 
roŸ
),

287 
blkbb
, 
DB_RING_IGN
, 
NULL
);

288 i‡(
iocur_t›
->
d©a
 =
NULL
) {

289 
	`db¥ötf
(
	`_
("ˇn'àªad båì block %u/%u\n"), 
£qno
, 
roŸ
);

292 (*
func
)(
iocur_t›
->
d©a
, 
typ
, 
∆evñs
 - 1, 
agf
);

293 
	`p›_cur
();

294 
	}
}

298 
	$sˇnfunc_bno
(

299 
xfs_båì_block
 *
block
,

300 
ty≤m_t
 
typ
,

301 
Àvñ
,

302 
xfs_agf_t
 *
agf
)

304 
i
;

305 
xfs_Æloc_±r_t
 *
µ
;

306 
xfs_Æloc_ªc_t
 *
Ω
;

308 i‡(!(
	`be32_to_˝u
(
block
->
bb_magic
Ë=
XFS_ABTB_MAGIC
 ||

309 
	`be32_to_˝u
(
block
->
bb_magic
Ë=
XFS_ABTB_CRC_MAGIC
))

312 i‡(
Àvñ
 == 0) {

313 
Ω
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

314 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

315 
	`addtohi°
(
	`be32_to_˝u
(
agf
->
agf_£qno
),

316 
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
),

317 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
));

320 
µ
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

321 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

322 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
typ
, 
Àvñ
, 
sˇnfunc_bno
);

323 
	}
}

326 
	$sˇnfunc_˙t
(

327 
xfs_båì_block
 *
block
,

328 
ty≤m_t
 
typ
,

329 
Àvñ
,

330 
xfs_agf_t
 *
agf
)

332 
i
;

333 
xfs_Æloc_±r_t
 *
µ
;

334 
xfs_Æloc_ªc_t
 *
Ω
;

336 i‡(!(
	`be32_to_˝u
(
block
->
bb_magic
Ë=
XFS_ABTC_MAGIC
 ||

337 
	`be32_to_˝u
(
block
->
bb_magic
Ë=
XFS_ABTC_CRC_MAGIC
))

340 i‡(
Àvñ
 == 0) {

341 
Ω
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

342 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

343 
	`addtohi°
(
	`be32_to_˝u
(
agf
->
agf_£qno
),

344 
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
),

345 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
));

348 
µ
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

349 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

350 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
typ
, 
Àvñ
, 
sˇnfunc_˙t
);

351 
	}
}

354 
	$addhi°ít
(

355 
h
)

357 
hi°
 = 
	`xªÆloc
(hi°, (
hi°cou¡
 + 1) * (*hist));

358 i‡(
h
 == 0)

359 
h
 = 1;

360 
hi°
[
hi°cou¡
].
low
 = 
h
;

361 
hi°
[
hi°cou¡
].
cou¡
 = hi°[hi°cou¡].
blocks
 = 0;

362 
hi°cou¡
++;

363 i‡(
h
 == 1)

364 
£í1
 = 1;

365 
	}
}

368 
	$addtohi°
(

369 
xfs_agnumbî_t
 
agno
,

370 
xfs_agblock_t
 
agbno
,

371 
xfs_exéí_t
 
Àn
)

373 
i
;

375 i‡(
dumpÊag
)

376 
	`db¥ötf
("%8d %8d %8d\n", 
agno
, 
agbno
, 
Àn
);

377 
tŸexts
++;

378 
tŸblocks
 +
Àn
;

379 
i
 = 0; i < 
hi°cou¡
; i++) {

380 i‡(
hi°
[
i
].
high
 >
Àn
) {

381 
hi°
[
i
].
cou¡
++;

382 
hi°
[
i
].
blocks
 +
Àn
;

386 
	}
}

389 
	$hcmp
(

390 c⁄° *
a
,

391 c⁄° *
b
)

393  ((
hi°ít_t
 *)
a
)->
low
 - ((hi°ít_à*)
b
)->low;

394 
	}
}

397 
	$hi°öô
(

398 
maxÀn
)

400 
i
;

402 i‡(
equÆsize
) {

403 
i
 = 1; i < 
maxÀn
; i +
equÆsize
)

404 
	`addhi°ít
(
i
);

405 } i‡(
mu…size
) {

406 
i
 = 1; i < 
maxÀn
; i *
mu…size
)

407 
	`addhi°ít
(
i
);

409 i‡(!
£í1
)

410 
	`addhi°ít
(1);

411 
	`qs‹t
(
hi°
, 
hi°cou¡
, (*hi°), 
hcmp
);

413 
i
 = 0; i < 
hi°cou¡
; i++) {

414 i‡(
i
 < 
hi°cou¡
 - 1)

415 
hi°
[
i
].
high
 = hi°[ò+ 1].
low
 - 1;

417 
hi°
[
i
].
high
 = 
maxÀn
;

419 
	}
}

422 
	$¥öthi°
()

424 
i
;

426 
	`db¥ötf
("%7s %7s %7s %7s %6s\n",

427 
	`_
("from"), _("to"), _("extents"), _("blocks"), _("pct"));

428 
i
 = 0; i < 
hi°cou¡
; i++) {

429 i‡(
hi°
[
i
].
cou¡
)

430 
	`db¥ötf
("%7d %7d %7Œd %7Œd %6.2f\n", 
hi°
[
i
].
low
,

431 
hi°
[
i
].
high
, hi°[i].
cou¡
, hi°[i].
blocks
,

432 
hi°
[
i
].
blocks
 * 100.0 / 
tŸblocks
);

434 
	}
}

	@freesp.h

19 
‰ì•_öô
();

	@fsmap.c

20 
	~"libxfs.h
"

21 
	~"comm™d.h
"

22 
	~"fsm≠.h
"

23 
	~"ouçut.h
"

24 
	~"öô.h
"

26 
	sfsm≠_öfo
 {

27 
	mƒ
;

28 
xfs_agnumbî_t
 
	magno
;

32 
	$fsm≠_‚
(

33 
xfs_båì_cur
 *
cur
,

34 
xfs_rm≠_úec
 *
ªc
,

35 *
¥iv
)

37 
fsm≠_öfo
 *
öfo
 = 
¥iv
;

39 
	`db¥ötf
(
	`_
("%llu: %u/%uÜen %u owner %lld offset %llu bmbt %dáttrfork %dÉxtflag %d\n"),

40 
öfo
->
ƒ
, info->
agno
, 
ªc
->
rm_°¨tblock
,

41 
ªc
->
rm_blockcou¡
,Ñec->
rm_ow√r
,Ñec->
rm_off£t
,

42 !!(
ªc
->
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
),

43 !!(
ªc
->
rm_Êags
 & 
XFS_RMAP_ATTR_FORK
),

44 !!(
ªc
->
rm_Êags
 & 
XFS_RMAP_UNWRITTEN
));

45 
öfo
->
ƒ
++;

48 
	}
}

51 
	$fsm≠
(

52 
xfs_fsblock_t
 
°¨t_fsb
,

53 
xfs_fsblock_t
 
íd_fsb
)

55 
fsm≠_öfo
 
öfo
;

56 
xfs_agnumbî_t
 
°¨t_ag
;

57 
xfs_agnumbî_t
 
íd_ag
;

58 
xfs_agnumbî_t
 
agno
;

59 
xfs_daddr_t
 
eofs
;

60 
xfs_rm≠_úec
 
low
 = {0};

61 
xfs_rm≠_úec
 
high
 = {0};

62 
xfs_båì_cur
 *
bt_cur
;

63 
xfs_buf
 *
agbp
;

64 
îr‹
;

66 
eofs
 = 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_dblocks
);

67 i‡(
	`XFS_FSB_TO_DADDR
(
mp
, 
íd_fsb
Ë>
eofs
)

68 
íd_fsb
 = 
	`XFS_DADDR_TO_FSB
(
mp
, 
eofs
 - 1);

70 
low
.
rm_°¨tblock
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
°¨t_fsb
);

71 
high
.
rm_°¨tblock
 = -1U;

72 
high
.
rm_ow√r
 = 
ULLONG_MAX
;

73 
high
.
rm_off£t
 = 
ULLONG_MAX
;

74 
high
.
rm_Êags
 = 
XFS_RMAP_ATTR_FORK
 | 
XFS_RMAP_BMBT_BLOCK
 | 
XFS_RMAP_UNWRITTEN
;

76 
°¨t_ag
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
°¨t_fsb
);

77 
íd_ag
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
íd_fsb
);

79 
öfo
.
ƒ
 = 0;

80 
agno
 = 
°¨t_ag
;ágnÿ<
íd_ag
;ágno++) {

81 i‡(
agno
 =
íd_ag
)

82 
high
.
rm_°¨tblock
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
íd_fsb
);

84 
îr‹
 = -
	`libxfs_Æloc_ªad_agf
(
mp
, 
NULL
, 
agno
, 0, &
agbp
);

85 i‡(
îr‹
) {

86 
	`db¥ötf
(
	`_
("Eº‹ %d whûêªadög AGF.\n"), 
îr‹
);

90 
bt_cur
 = 
	`libxfs_rm≠bt_öô_curs‹
(
mp
, 
NULL
, 
agbp
, 
agno
);

91 i‡(!
bt_cur
) {

92 
	`libxfs_putbuf
(
agbp
);

93 
	`db¥ötf
(
	`_
("NotÉnough memory.\n"));

97 
öfo
.
agno
 =ágno;

98 
îr‹
 = -
	`libxfs_rm≠_quîy_ønge
(
bt_cur
, &
low
, &
high
,

99 
fsm≠_‚
, &
öfo
);

100 i‡(
îr‹
) {

101 
	`libxfs_båì_dñ_curs‹
(
bt_cur
, 
XFS_BTREE_ERROR
);

102 
	`libxfs_putbuf
(
agbp
);

103 
	`db¥ötf
(
	`_
("Error %d while querying fsmap btree.\n"),

104 
îr‹
);

108 
	`libxfs_båì_dñ_curs‹
(
bt_cur
, 
XFS_BTREE_NOERROR
);

109 
	`libxfs_putbuf
(
agbp
);

111 i‡(
agno
 =
°¨t_ag
)

112 
low
.
rm_°¨tblock
 = 0;

114 
	}
}

117 
	$fsm≠_f
(

118 
¨gc
,

119 **
¨gv
)

121 *
p
;

122 
c
;

123 
xfs_fsblock_t
 
°¨t_fsb
 = 0;

124 
xfs_fsblock_t
 
íd_fsb
 = 
NULLFSBLOCK
;

126 i‡(!
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
)) {

127 
	`db¥ötf
(
	`_
("Filesystem doesÇot supportÑeverse mapping btree.\n"));

131 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "")Ë!
EOF
) {

132 
c
) {

134 
	`db¥ötf
(
	`_
("Bad option for fsmap command.\n"));

139 i‡(
¨gc
 > 
›töd
) {

140 
°¨t_fsb
 = 
	`°πouŒ
(
¨gv
[
›töd
], &
p
, 0);

141 i‡(*
p
 !'\0' || 
°¨t_fsb
 >
mp
->
m_sb
.
sb_dblocks
) {

142 
	`db¥ötf
(
	`_
("Bad fsm≠ sèπ_fsb %s.\n"), 
¨gv
[
›töd
]);

147 i‡(
¨gc
 > 
›töd
 + 1) {

148 
íd_fsb
 = 
	`°πouŒ
(
¨gv
[
›töd
 + 1], &
p
, 0);

149 i‡(*
p
 != '\0') {

150 
	`db¥ötf
(
	`_
("Bad fsm≠Énd_fsb %s.\n"), 
¨gv
[
›töd
 + 1]);

155 
	`fsm≠
(
°¨t_fsb
, 
íd_fsb
);

158 
	}
}

160 c⁄° 
cmdöfo_t
 
	gfsm≠_cmd
 =

161 { "fsm≠", 
NULL
, 
fsm≠_f
, 0, 2, 0,

162 
N_
("[start_fsb] [end_fsb]"),

163 
N_
("di•œyÑevî£ m≠pög(s)"), 
NULL
 };

166 
	$fsm≠_öô
()

168 
	`add_comm™d
(&
fsm≠_cmd
);

169 
	}
}

	@fsmap.h

20 
fsm≠_öô
();

	@hash.c

19 
	~"libxfs.h
"

20 
	~"addr.h
"

21 
	~"comm™d.h
"

22 
	~"ty≥.h
"

23 
	~"io.h
"

24 
	~"ouçut.h
"

26 
hash_f
(
¨gc
, **
¨gv
);

27 
hash_hñp
();

29 c⁄° 
cmdöfo_t
 
	ghash_cmd
 =

30 { "hash", 
NULL
, 
hash_f
, 1, 1, 0, 
N_
("string"),

31 
N_
("ˇlcuœã hash vÆue"), 
hash_hñp
 };

34 
	$hash_hñp
()

36 
	`db¥ötf
(
	`_
(

45 
	}
}

49 
	$hash_f
(

50 
¨gc
,

51 **
¨gv
)

53 
xfs_dahash_t
 
hashvÆ
;

55 
hashvÆ
 = 
	`libxfs_da_hash«me
((*)
¨gv
[1], ()
	`°æí
(argv[1]));

56 
	`db¥ötf
("0x%x\n", 
hashvÆ
);

58 
	}
}

61 
	$hash_öô
()

63 
	`add_comm™d
(&
hash_cmd
);

64 
	}
}

	@hash.h

19 
hash_öô
();

	@help.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"hñp.h
"

22 
	~"ouçut.h
"

24 
hñp_Æl
();

25 
hñp_⁄ecmd
(c⁄° *
cmd
, c⁄° 
cmdöfo_t
 *
˘
);

26 
hñp_f
(
¨gc
, **
¨gv
);

27 
hñp_⁄ñöe
(c⁄° *
cmd
, c⁄° 
cmdöfo_t
 *
˘
);

29 c⁄° 
cmdöfo_t
 
	ghñp_cmd
 =

30 { "hñp", "?", 
hñp_f
, 0, 1, 0, 
N_
("[command]"),

31 
N_
("hñ∞f‹ o√ o∏Æ»comm™ds"), 
NULL
 };

34 
	$hñp_Æl
()

36 c⁄° 
cmdöfo_t
 *
˘
;

38 
˘
 = 
cmdèb
; cà< &cmdèb[
ncmds
]; ct++)

39 
	`hñp_⁄ñöe
(
˘
->
«me
, ct);

40 
	`db¥ötf
(
	`_
("\nUse 'help commandname' forÉxtended help.\n"));

41 
	}
}

44 
	$hñp_f
(

45 
¨gc
,

46 **
¨gv
)

48 c⁄° 
cmdöfo_t
 *
˘
;

50 i‡(
¨gc
 == 1) {

51 
	`hñp_Æl
();

54 
˘
 = 
	`föd_comm™d
(
¨gv
[1]);

55 i‡(
˘
 =
NULL
) {

56 
	`db¥ötf
(
	`_
("comm™d %†nŸ found\n"), 
¨gv
[1]);

59 
	`hñp_⁄ecmd
(
¨gv
[1], 
˘
);

61 
	}
}

64 
	$hñp_öô
()

66 
	`add_comm™d
(&
hñp_cmd
);

67 
	}
}

70 
	$hñp_⁄ecmd
(

71 c⁄° *
cmd
,

72 c⁄° 
cmdöfo_t
 *
˘
)

74 
	`hñp_⁄ñöe
(
cmd
, 
˘
);

75 i‡(
˘
->
hñp
)

76 
˘
->
	`hñp
();

77 
	}
}

80 
	$hñp_⁄ñöe
(

81 c⁄° *
cmd
,

82 c⁄° 
cmdöfo_t
 *
˘
)

84 i‡(
cmd
)

85 
	`db¥ötf
("%†", 
cmd
);

87 
	`db¥ötf
("%†", 
˘
->
«me
);

88 i‡(
˘
->
Æäame
)

89 
	`db¥ötf
(
	`_
("(‹ %sË"), 
˘
->
Æäame
);

91 i‡(
˘
->
¨gs
)

92 
	`db¥ötf
("%†", 
˘
->
¨gs
);

93 
	`db¥ötf
("-- %s\n", 
˘
->
⁄ñöe
);

94 
	}
}

	@help.h

19 
hñp_öô
();

	@init.c

19 
	~"libxfs.h
"

20 
	~"libxlog.h
"

21 
	~<sig«l.h
>

22 
	~"comm™d.h
"

23 
	~"öô.h
"

24 
	~"öput.h
"

25 
	~"io.h
"

26 
	~"öô.h
"

27 
	~"sig.h
"

28 
	~"ouçut.h
"

29 
	~"mÆloc.h
"

30 
	~"ty≥.h
"

32 **
	gcmdlöe
;

33 
	gncmdlöe
;

34 *
	gfsdevi˚
;

35 
	gblkbb
;

36 
	gexôcode
;

37 
	gex≥π_mode
;

38 
	gf‹˚
;

39 
xfs_mou¡
 
	gxmou¡
;

40 
xfs_mou¡
 *
	gmp
;

41 
xlog
 
	gxlog
;

42 
libxfs_öô_t
 
	gx
;

43 
xfs_agnumbî_t
 
	gcur_agno
 = 
NULLAGNUMBER
;

46 
	$ußge
()

48 
	`Ârötf
(
°dîr
, 
	`_
(

50 ), 
¥og«me
);

51 
	`exô
(1);

52 
	}
}

55 
	$öô
(

56 
¨gc
,

57 **
¨gv
)

59 
xfs_sb
 *
sbp
;

60 
xfs_buf
 *
bp
;

61 
agcou¡
;

62 
c
;

64 
	`£éoˇÀ
(
LC_ALL
, "");

65 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

66 
	`ãxtdomaö
(
PACKAGE
);

68 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

69 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:fFù:rxVl:")Ë!
EOF
) {

70 
c
) {

72 
cmdlöe
 = 
	`xªÆloc
(cmdlöe, (
ncmdlöe
+1)*(*));

73 
cmdlöe
[
ncmdlöe
++] = 
›èrg
;

76 
x
.
disfûe
 = 1;

79 
f‹˚
 = 1;

82 
x
.
i§ód⁄ly
 = (
LIBXFS_ISREADONLY
|
LIBXFS_ISINACTIVE
);

85 
¥og«me
 = 
›èrg
;

88 
x
.
i§ód⁄ly
 = 
LIBXFS_ISREADONLY
;

91 
x
.
log«me
 = 
›èrg
;

94 
ex≥π_mode
 = 1;

97 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
¥og«me
, 
VERSION
);

98 
	`exô
(0);

100 
	`ußge
();

104 i‡(
›töd
 + 1 !
¨gc
) {

105 
	`ußge
();

109 
fsdevi˚
 = 
¨gv
[
›töd
];

110 i‡(!
x
.
disfûe
)

111 
x
.
vﬁ«me
 = 
fsdevi˚
;

113 
x
.
d«me
 = 
fsdevi˚
;

115 
x
.
bˇche_Êags
 = 
CACHE_MISCOMPARE_PURGE
;

116 i‡(!
	`libxfs_öô
(&
x
)) {

117 
	`Âuts
(
	`_
("\nfatalÉrror -- couldn't initialize XFSÜibrary\n"),

118 
°dîr
);

119 
	`exô
(1);

126 
	`mem£t
(&
xmou¡
, 0, (
xfs_mou¡
));

127 
	`libxfs_bu·¨g_öô
(&
xmou¡
, 
x
.
ddev
, x.
logdev
, x.
πdev
);

128 
bp
 = 
	`libxfs_ªadbuf
(
xmou¡
.
m_ddev_èrgp
, 
XFS_SB_DADDR
,

129 1 << (
XFS_MAX_SECTORSIZE_LOG
 - 
BBSHIFT
), 0, 
NULL
);

131 i‡(!
bp
 || bp->
b_îr‹
) {

132 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s is invalid (cannotÑead first 512 "

133 "byãs)\n"), 
¥og«me
, 
fsdevi˚
);

134 
	`exô
(1);

138 
	`libxfs_sb_‰om_disk
(&
xmou¡
.
m_sb
, 
	`XFS_BUF_TO_SBP
(
bp
));

139 
	`libxfs_putbuf
(
bp
);

140 
	`libxfs_purgebuf
(
bp
);

142 
sbp
 = &
xmou¡
.
m_sb
;

143 i‡(
sbp
->
sb_magi˙um
 !
XFS_SB_MAGIC
) {

144 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s isÇotá valid XFS filesystem (unexpected SB magicÇumber 0x%08x)\n"),

145 
¥og«me
, 
fsdevi˚
, 
sbp
->
sb_magi˙um
);

146 i‡(!
f‹˚
) {

147 
	`Ârötf
(
°dîr
, 
	`_
("Use -FÅo forceáÑeadáttempt.\n"));

148 
	`exô
(
EXIT_FAILURE
);

152 
agcou¡
 = 
sbp
->
sb_agcou¡
;

153 
mp
 = 
	`libxfs_mou¡
(&
xmou¡
, 
sbp
, 
x
.
ddev
, x.
logdev
, x.
πdev
,

154 
LIBXFS_MOUNT_DEBUGGER
);

155 i‡(!
mp
) {

156 
	`Ârötf
(
°dîr
,

157 
	`_
("%s: device %s unusable (notán XFS filesystem?)\n"),

158 
¥og«me
, 
fsdevi˚
);

159 
	`exô
(1);

161 
mp
->
m_log
 = &
xlog
;

162 
blkbb
 = 1 << 
mp
->
m_blkbb_log
;

165 i‡(
sbp
->
sb_agcou¡
 !
agcou¡
)

166 
exôcode
 = 1;

171 i‡(
sbp
->
sb_roŸöo
 !
NULLFSINO
 &&

172 
	`xfs_sb_vîsi⁄_ha¶azysbcou¡
(&
mp
->
m_sb
)) {

173 
îr‹
 = -
	`libxfs_öôülize_≥øg_d©a
(
mp
, 
sbp
->
sb_agcou¡
);

174 i‡(
îr‹
) {

175 
	`Ârötf
(
°dîr
,

176 
	`_
("%s: cannot initÖerag data (%d). Continuingányway.\n"),

177 
¥og«me
, 
îr‹
);

181 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

182 
	`ty≥_£t_èb_•¸c
();

183 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

184 
	`ty≥_£t_èb_¸c
();

186 
	`push_cur
();

187 
	`öô_comm™ds
();

188 
	`öô_sig
();

189 
	}
}

192 
	$maö
(

193 
¨gc
,

194 **
¨gv
)

196 
c
, 
i
, 
d⁄e
 = 0;

197 *
öput
;

198 **
v
;

199 
°¨t_iocur_•
;

201 
	`öô
(
¨gc
, 
¨gv
);

202 
°¨t_iocur_•
 = 
iocur_•
;

204 
i
 = 0; !
d⁄e
 && i < 
ncmdlöe
; i++) {

205 
v
 = 
	`bªaklöe
(
cmdlöe
[
i
], &
c
);

206 i‡(
c
)

207 
d⁄e
 = 
	`comm™d
(
c
, 
v
);

208 
	`x‰ì
(
v
);

210 i‡(
cmdlöe
) {

211 
	`x‰ì
(
cmdlöe
);

212 
˛o£_devi˚s
;

215 
	`pushfûe
(
°dö
);

216 !
d⁄e
) {

217 i‡((
öput
 = 
	`„tchlöe
()Ë=
NULL
)

219 
v
 = 
	`bªaklöe
(
öput
, &
c
);

220 i‡(
c
)

221 
d⁄e
 = 
	`comm™d
(
c
, 
v
);

222 
	`d⁄ñöe
(
öput
, 
v
);

225 
˛o£_devi˚s
:

230 
iocur_•
 > 
°¨t_iocur_•
)

231 
	`p›_cur
();

232 
	`libxfs_umou¡
(
mp
);

233 i‡(
x
.
ddev
)

234 
	`libxfs_devi˚_˛o£
(
x
.
ddev
);

235 i‡(
x
.
logdev
 && x.logdev !x.
ddev
)

236 
	`libxfs_devi˚_˛o£
(
x
.
logdev
);

237 i‡(
x
.
πdev
)

238 
	`libxfs_devi˚_˛o£
(
x
.
πdev
);

239  
exôcode
;

240 
	}
}

	@init.h

19 *
fsdevi˚
;

20 
blkbb
;

21 
exôcode
;

22 
ex≥π_mode
;

23 
xfs_mou¡_t
 *
mp
;

24 
libxfs_öô_t
 
x
;

25 
xfs_agnumbî_t
 
cur_agno
;

	@inode.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"öode.h
"

26 
	~"io.h
"

27 
	~"¥öt.h
"

28 
	~"block.h
"

29 
	~"bô.h
"

30 
	~"ouçut.h
"

31 
	~"öô.h
"

33 
öode_a_bmbt_cou¡
(*
obj
, 
°¨toff
);

34 
öode_a_bmx_cou¡
(*
obj
, 
°¨toff
);

35 
öode_a_cou¡
(*
obj
, 
°¨toff
);

36 
öode_a_off£t
(*
obj
, 
°¨toff
, 
idx
);

37 
öode_a_sÁâr_cou¡
(*
obj
, 
°¨toff
);

38 
öode_c‹e_∆ökv2_cou¡
(*
obj
, 
°¨toff
);

39 
öode_c‹e_⁄lök_cou¡
(*
obj
, 
°¨toff
);

40 
öode_c‹e_¥ojid_cou¡
(*
obj
, 
°¨toff
);

41 
öode_c‹e_∆ökv1_cou¡
(*
obj
, 
°¨toff
);

42 
öode_f
(
¨gc
, **
¨gv
);

43 
öode_u_off£t
(*
obj
, 
°¨toff
, 
idx
);

44 
öode_u_bmbt_cou¡
(*
obj
, 
°¨toff
);

45 
öode_u_bmx_cou¡
(*
obj
, 
°¨toff
);

46 
öode_u_c_cou¡
(*
obj
, 
°¨toff
);

47 
öode_u_dev_cou¡
(*
obj
, 
°¨toff
);

48 
öode_u_muuid_cou¡
(*
obj
, 
°¨toff
);

49 
öode_u_sfdú2_cou¡
(*
obj
, 
°¨toff
);

50 
öode_u_sfdú3_cou¡
(*
obj
, 
°¨toff
);

51 
öode_u_symlök_cou¡
(*
obj
, 
°¨toff
);

53 c⁄° 
cmdöfo_t
 
	göode_cmd
 =

54 { "öode", 
NULL
, 
öode_f
, 0, 1, 1, "[inode#]",

55 "£àcuºíàöode", 
NULL
 };

57 c⁄° 
fõld_t
 
	göode_hÊd
[] = {

58 { "", 
FLDT_INODE
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

59 { 
NULL
 }

61 c⁄° 
fõld_t
 
	göode_¸c_hÊd
[] = {

62 { "", 
FLDT_INODE_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

63 { 
NULL
 }

67 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_döode_t
, 
di_
 ## f))

	)

68 c⁄° 
fõld_t
 
	göode_Êds
[] = {

69 { "c‹e", 
FLDT_DINODE_CORE
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

70 { "√xt_u∆öked", 
FLDT_AGINO
, 
OI
(
OFF
(
√xt_u∆öked
)), 
C1
, 0,

71 
TYP_INODE
 },

72 { "u", 
FLDT_DINODE_U
, 
öode_u_off£t
, 
C1
, 
FLD_OFFSET
, 
TYP_NONE
 },

73 { "a", 
FLDT_DINODE_A
, 
öode_a_off£t
, 
öode_a_cou¡
,

74 
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

75 { 
NULL
 }

77 c⁄° 
fõld_t
 
	göode_¸c_Êds
[] = {

78 { "c‹e", 
FLDT_DINODE_CORE
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

79 { "√xt_u∆öked", 
FLDT_AGINO
, 
OI
(
OFF
(
√xt_u∆öked
)), 
C1
, 0,

80 
TYP_INODE
 },

81 { "v3", 
FLDT_DINODE_V3
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

82 { "u3", 
FLDT_DINODE_U
, 
öode_u_off£t
, 
C1
, 
FLD_OFFSET
, 
TYP_NONE
 },

83 { "a", 
FLDT_DINODE_A
, 
öode_a_off£t
, 
öode_a_cou¡
,

84 
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

85 { 
NULL
 }

89 
	#COFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_döode_t
, 
di_
 ## f))

	)

90 c⁄° 
fõld_t
 
	göode_c‹e_Êds
[] = {

91 { "magic", 
FLDT_UINT16X
, 
OI
(
COFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

92 { "mode", 
FLDT_UINT16O
, 
OI
(
COFF
(
mode
)), 
C1
, 0, 
TYP_NONE
 },

93 { "vîsi⁄", 
FLDT_INT8D
, 
OI
(
COFF
(
vîsi⁄
)), 
C1
, 0, 
TYP_NONE
 },

94 { "f‹m©", 
FLDT_DINODE_FMT
, 
OI
(
COFF
(
f‹m©
)), 
C1
, 0, 
TYP_NONE
 },

95 { "∆ökv1", 
FLDT_UINT16D
, 
OI
(
COFF
(
⁄lök
)), 
öode_c‹e_∆ökv1_cou¡
,

96 
FLD_COUNT
, 
TYP_NONE
 },

97 { "∆ökv2", 
FLDT_UINT32D
, 
OI
(
COFF
(
∆ök
)), 
öode_c‹e_∆ökv2_cou¡
,

98 
FLD_COUNT
, 
TYP_NONE
 },

99 { "⁄lök", 
FLDT_UINT16D
, 
OI
(
COFF
(
⁄lök
)), 
öode_c‹e_⁄lök_cou¡
,

100 
FLD_COUNT
, 
TYP_NONE
 },

101 { "¥ojid_lo", 
FLDT_UINT16D
, 
OI
(
COFF
(
¥ojid_lo
)),

102 
öode_c‹e_¥ojid_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

103 { "¥ojid_hi", 
FLDT_UINT16D
, 
OI
(
COFF
(
¥ojid_hi
)),

104 
öode_c‹e_¥ojid_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

105 { "uid", 
FLDT_UINT32D
, 
OI
(
COFF
(
uid
)), 
C1
, 0, 
TYP_NONE
 },

106 { "gid", 
FLDT_UINT32D
, 
OI
(
COFF
(
gid
)), 
C1
, 0, 
TYP_NONE
 },

107 { "Êushôî", 
FLDT_UINT16D
, 
OI
(
COFF
(
Êushôî
)), 
C1
, 0, 
TYP_NONE
 },

108 { "©ime", 
FLDT_TIMESTAMP
, 
OI
(
COFF
(
©ime
)), 
C1
, 0, 
TYP_NONE
 },

109 { "mtime", 
FLDT_TIMESTAMP
, 
OI
(
COFF
(
mtime
)), 
C1
, 0, 
TYP_NONE
 },

110 { "˘ime", 
FLDT_TIMESTAMP
, 
OI
(
COFF
(
˘ime
)), 
C1
, 0, 
TYP_NONE
 },

111 { "size", 
FLDT_FSIZE
, 
OI
(
COFF
(
size
)), 
C1
, 0, 
TYP_NONE
 },

112 { "nblocks", 
FLDT_DRFSBNO
, 
OI
(
COFF
(
nblocks
)), 
C1
, 0, 
TYP_NONE
 },

113 { "extsize", 
FLDT_EXTLEN
, 
OI
(
COFF
(
extsize
)), 
C1
, 0, 
TYP_NONE
 },

114 { "√xã¡s", 
FLDT_EXTNUM
, 
OI
(
COFF
(
√xã¡s
)), 
C1
, 0, 
TYP_NONE
 },

115 { "«exã¡s", 
FLDT_AEXTNUM
, 
OI
(
COFF
(
™exã¡s
)), 
C1
, 0, 
TYP_NONE
 },

116 { "f‹koff", 
FLDT_UINT8D
, 
OI
(
COFF
(
f‹koff
)), 
C1
, 0, 
TYP_NONE
 },

117 { "af‹m©", 
FLDT_DINODE_FMT
, 
OI
(
COFF
(
af‹m©
)), 
C1
, 0, 
TYP_NONE
 },

118 { "dmevmask", 
FLDT_UINT32X
, 
OI
(
COFF
(
dmevmask
)), 
C1
, 0, 
TYP_NONE
 },

119 { "dm°©e", 
FLDT_UINT16D
, 
OI
(
COFF
(
dm°©e
)), 
C1
, 0, 
TYP_NONE
 },

120 { "Êags", 
FLDT_UINT16X
, 
OI
(
COFF
(
Êags
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

121 { "√wπbm", 
FLDT_UINT1
,

122 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_NEWRTBM_BIT
 - 1), 
C1
,

123 0, 
TYP_NONE
 },

124 { "¥óŒoc", 
FLDT_UINT1
,

125 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_PREALLOC_BIT
 - 1), 
C1
,

126 0, 
TYP_NONE
 },

127 { "ªÆtime", 
FLDT_UINT1
,

128 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_REALTIME_BIT
 - 1), 
C1
,

129 0, 
TYP_NONE
 },

130 { "immuèbÀ", 
FLDT_UINT1
,

131 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_IMMUTABLE_BIT
-1), 
C1
,

132 0, 
TYP_NONE
 },

133 { "≠≥nd", 
FLDT_UINT1
,

134 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_APPEND_BIT
 - 1), 
C1
,

135 0, 
TYP_NONE
 },

136 { "sync", 
FLDT_UINT1
,

137 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_SYNC_BIT
 - 1), 
C1
,

138 0, 
TYP_NONE
 },

139 { "nﬂtime", 
FLDT_UINT1
,

140 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_NOATIME_BIT
 - 1), 
C1
,

141 0, 
TYP_NONE
 },

142 { "nodump", 
FLDT_UINT1
,

143 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_NODUMP_BIT
 - 1), 
C1
,

144 0, 
TYP_NONE
 },

145 { "πöhîô", 
FLDT_UINT1
,

146 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_RTINHERIT_BIT
-1), 
C1
,

147 0, 
TYP_NONE
 },

148 { "¥ojöhîô", 
FLDT_UINT1
,

149 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_PROJINHERIT_BIT
-1),
C1
,

150 0, 
TYP_NONE
 },

151 { "nosymlöks", 
FLDT_UINT1
,

152 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_NOSYMLINKS_BIT
-1), 
C1
,

153 0, 
TYP_NONE
 },

154 { "extsz", 
FLDT_UINT1
,

155 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_EXTSIZE_BIT
-1),
C1
,

156 0, 
TYP_NONE
 },

157 { "extszöhîô", 
FLDT_UINT1
,

158 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_EXTSZINHERIT_BIT
-1),
C1
,

159 0, 
TYP_NONE
 },

160 { "node‰ag", 
FLDT_UINT1
,

161 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_NODEFRAG_BIT
-1),
C1
,

162 0, 
TYP_NONE
 },

163 { "fûe°ªam", 
FLDT_UINT1
,

164 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_FILESTREAM_BIT
-1),
C1
,

165 0, 
TYP_NONE
 },

166 { "gí", 
FLDT_UINT32D
, 
OI
(
COFF
(
gí
)), 
C1
, 0, 
TYP_NONE
 },

167 { 
NULL
 }

170 c⁄° 
fõld_t
 
	göode_v3_Êds
[] = {

171 { "¸c", 
FLDT_CRC
, 
OI
(
COFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

172 { "ch™ge_cou¡", 
FLDT_UINT64D
, 
OI
(
COFF
(
ch™gecou¡
)), 
C1
, 0, 
TYP_NONE
 },

173 { "l¢", 
FLDT_UINT64X
, 
OI
(
COFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

174 { "Êags2", 
FLDT_UINT64X
, 
OI
(
COFF
(
Êags2
)), 
C1
, 0, 
TYP_NONE
 },

175 { "cowextsize", 
FLDT_EXTLEN
, 
OI
(
COFF
(
cowextsize
)), 
C1
, 0, 
TYP_NONE
 },

176 { "¸time", 
FLDT_TIMESTAMP
, 
OI
(
COFF
(
¸time
)), 
C1
, 0, 
TYP_NONE
 },

177 { "öumbî", 
FLDT_INO
, 
OI
(
COFF
(
öo
)), 
C1
, 0, 
TYP_NONE
 },

178 { "uuid", 
FLDT_UUID
, 
OI
(
COFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

179 { "ªÊök", 
FLDT_UINT1
,

180 
OI
(
COFF
(
Êags2
Ë+ 
bôsz
(
__uöt64_t
Ë- 
XFS_DIFLAG2_REFLINK_BIT
-1), 
C1
,

181 0, 
TYP_NONE
 },

182 { "cowextsz", 
FLDT_UINT1
,

183 
OI
(
COFF
(
Êags2
Ë+ 
bôsz
(
__uöt64_t
Ë- 
XFS_DIFLAG2_COWEXTSIZE_BIT
-1), 
C1
,

184 0, 
TYP_NONE
 },

185 { 
NULL
 }

189 
	#TOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_time°amp_t
, 
t_
 ## f))

	)

190 c⁄° 
fõld_t
 
	gtime°amp_Êds
[] = {

191 { "£c", 
FLDT_TIME
, 
OI
(
TOFF
(
£c
)), 
C1
, 0, 
TYP_NONE
 },

192 { "n£c", 
FLDT_NSEC
, 
OI
(
TOFF
(
n£c
)), 
C1
, 0, 
TYP_NONE
 },

193 { 
NULL
 }

196 c⁄° 
fõld_t
 
	göode_u_Êds
[] = {

197 { "bmbt", 
FLDT_BMROOTD
, 
NULL
, 
öode_u_bmbt_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

198 { "bmx", 
FLDT_BMAPBTDREC
, 
NULL
, 
öode_u_bmx_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
,

199 
TYP_NONE
 },

200 { "c", 
FLDT_CHARNS
, 
NULL
, 
öode_u_c_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

201 { "dev", 
FLDT_DEV
, 
NULL
, 
öode_u_dev_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

202 { "muuid", 
FLDT_UUID
, 
NULL
, 
öode_u_muuid_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

203 { "sfdú2", 
FLDT_DIR2SF
, 
NULL
, 
öode_u_sfdú2_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

204 { "sfdú3", 
FLDT_DIR3SF
, 
NULL
, 
öode_u_sfdú3_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

205 { "symlök", 
FLDT_CHARNS
, 
NULL
, 
öode_u_symlök_cou¡
, 
FLD_COUNT
,

206 
TYP_NONE
 },

207 { 
NULL
 }

210 c⁄° 
fõld_t
 
	göode_a_Êds
[] = {

211 { "bmbt", 
FLDT_BMROOTA
, 
NULL
, 
öode_a_bmbt_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

212 { "bmx", 
FLDT_BMAPBTAREC
, 
NULL
, 
öode_a_bmx_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
,

213 
TYP_NONE
 },

214 { "sÁâr", 
FLDT_ATTRSHORT
, 
NULL
, 
öode_a_sÁâr_cou¡
, 
FLD_COUNT
,

215 
TYP_NONE
 },

216 { 
NULL
 }

219 c⁄° *
	gdöode_fmt_«me
[] =

221 c⁄° 
	gdöode_fmt_«me_size
 =

222 (
döode_fmt_«me
) / (dinode_fmt_name[0]);

226 
	$Â_döode_fmt
(

227 *
obj
,

228 
bô
,

229 
cou¡
,

230 *
fmt°r
,

231 
size
,

232 
¨g
,

233 
ba£
,

234 
¨øy
)

236 
bôpos
;

237 
xfs_döode_fmt_t
 
f
;

238 
i
;

240 
i
 = 0, 
bôpos
 = 
bô
; i < 
cou¡
; i++, bôpo†+
size
) {

241 
f
 = (
xfs_döode_fmt_t
)
	`gëbôvÆ
(
obj
, 
bôpos
, 
size
, 
BVUNSIGNED
);

242 i‡(
¨øy
)

243 
	`db¥ötf
("%d:", 
i
 + 
ba£
);

244 i‡(
f
 < 0 || f >
döode_fmt_«me_size
)

245 
	`db¥ötf
("%d", ()
f
);

247 
	`db¥ötf
("%d (%s)", ()
f
, 
döode_fmt_«me
[()f]);

248 i‡(
i
 < 
cou¡
 - 1)

249 
	`db¥ötf
(" ");

252 
	}
}

255 
	$öode_a_bmbt_cou¡
(

256 *
obj
,

257 
°¨toff
)

259 
xfs_döode_t
 *
dù
;

261 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

262 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

263 
dù
 = 
obj
;

264 i‡(!
	`XFS_DFORK_Q
(
dù
))

266 
	`ASSERT
((*)
	`XFS_DFORK_APTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

267  
dù
->
di_af‹m©
 =
XFS_DINODE_FMT_BTREE
;

268 
	}
}

271 
	$öode_a_bmx_cou¡
(

272 *
obj
,

273 
°¨toff
)

275 
xfs_döode_t
 *
dù
;

277 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

278 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

279 
dù
 = 
obj
;

280 i‡(!
	`XFS_DFORK_Q
(
dù
))

282 
	`ASSERT
((*)
	`XFS_DFORK_APTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

283  
dù
->
di_af‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ?

284 
	`be16_to_˝u
(
dù
->
di_™exã¡s
) : 0;

285 
	}
}

288 
	$öode_a_cou¡
(

289 *
obj
,

290 
°¨toff
)

292 
xfs_döode_t
 *
dù
;

294 
	`ASSERT
(
°¨toff
 == 0);

295 
dù
 = 
obj
;

296  
	`XFS_DFORK_Q
(
dù
);

297 
	}
}

300 
	$öode_a_off£t
(

301 *
obj
,

302 
°¨toff
,

303 
idx
)

305 
xfs_döode_t
 *
dù
;

307 
	`ASSERT
(
°¨toff
 == 0);

308 
	`ASSERT
(
idx
 == 0);

309 
dù
 = 
obj
;

310 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
));

311  
	`bôize
(()((*)
	`XFS_DFORK_APTR
(
dù
) - (*)dip));

312 
	}
}

315 
	$öode_a_sÁâr_cou¡
(

316 *
obj
,

317 
°¨toff
)

319 
xfs_döode_t
 *
dù
;

321 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

322 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

323 
dù
 = 
obj
;

324 i‡(!
	`XFS_DFORK_Q
(
dù
))

326 
	`ASSERT
((*)
	`XFS_DFORK_APTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

327  
dù
->
di_af‹m©
 =
XFS_DINODE_FMT_LOCAL
;

328 
	}
}

331 
	$öode_a_size
(

332 *
obj
,

333 
°¨toff
,

334 
idx
)

336 
xfs_©å_sh‹tf‹m_t
 *
asf
;

337 
xfs_döode_t
 *
dù
;

339 
	`ASSERT
(
°¨toff
 == 0);

340 
	`ASSERT
(
idx
 == 0);

341 
dù
 = 
obj
;

342 
dù
->
di_af‹m©
) {

343 
XFS_DINODE_FMT_LOCAL
:

344 
asf
 = (
xfs_©å_sh‹tf‹m_t
 *)
	`XFS_DFORK_APTR
(
dù
);

345  
	`bôize
(
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
));

346 
XFS_DINODE_FMT_EXTENTS
:

347  ()
	`be16_to_˝u
(
dù
->
di_™exã¡s
) *

348 
	`bôsz
(
xfs_bmbt_ªc_t
);

349 
XFS_DINODE_FMT_BTREE
:

350  
	`bôize
(()
	`XFS_DFORK_ASIZE
(
dù
, 
mp
));

354 
	}
}

357 
	$öode_c‹e_∆ökv1_cou¡
(

358 *
obj
,

359 
°¨toff
)

361 
xfs_döode_t
 *
dic
;

363 
	`ASSERT
(
°¨toff
 == 0);

364 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

365 
dic
 = 
obj
;

366  
dic
->
di_vîsi⁄
 == 1;

367 
	}
}

370 
	$öode_c‹e_∆ökv2_cou¡
(

371 *
obj
,

372 
°¨toff
)

374 
xfs_döode_t
 *
dic
;

376 
	`ASSERT
(
°¨toff
 == 0);

377 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

378 
dic
 = 
obj
;

379  
dic
->
di_vîsi⁄
 >= 2;

380 
	}
}

383 
	$öode_c‹e_⁄lök_cou¡
(

384 *
obj
,

385 
°¨toff
)

387 
xfs_döode_t
 *
dic
;

389 
	`ASSERT
(
°¨toff
 == 0);

390 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

391 
dic
 = 
obj
;

392  
dic
->
di_vîsi⁄
 >= 2;

393 
	}
}

396 
	$öode_c‹e_¥ojid_cou¡
(

397 *
obj
,

398 
°¨toff
)

400 
xfs_döode_t
 *
dic
;

402 
	`ASSERT
(
°¨toff
 == 0);

403 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

404 
dic
 = 
obj
;

405  
dic
->
di_vîsi⁄
 >= 2;

406 
	}
}

409 
	$öode_f
(

410 
¨gc
,

411 **
¨gv
)

413 
xfs_öo_t
 
öo
;

414 *
p
;

416 i‡(
¨gc
 > 1) {

417 
öo
 = 
	`°πouŒ
(
¨gv
[1], &
p
, 0);

418 i‡(*
p
 != '\0') {

419 
	`db¥ötf
(
	`_
("bad vÆuêf‹ inodênumbî %s\n"), 
¨gv
[1]);

422 
	`£t_cur_öode
(
öo
);

423 } i‡(
iocur_t›
->
öo
 =
NULLFSINO
)

424 
	`db¥ötf
(
	`_
("no current inode\n"));

426 
	`db¥ötf
(
	`_
("cuºíàöodênumbî i†%Œd\n"), 
iocur_t›
->
öo
);

428 
	}
}

431 
	$öode_öô
()

433 
	`add_comm™d
(&
öode_cmd
);

434 
	}
}

436 
ty≤m_t


437 
	$öode_√xt_ty≥
()

439 
iocur_t›
->
mode
 & 
S_IFMT
) {

440 
S_IFDIR
:

441  
TYP_DIR2
;

442 
S_IFLNK
:

443  
TYP_SYMLINK
;

444 
S_IFREG
:

445 i‡(
iocur_t›
->
öo
 =
mp
->
m_sb
.
sb_rbmöo
)

446  
TYP_RTBITMAP
;

447 i‡(
iocur_t›
->
öo
 =
mp
->
m_sb
.
sb_rsumöo
)

448  
TYP_RTSUMMARY
;

449 i‡(
iocur_t›
->
öo
 =
mp
->
m_sb
.
sb_uquŸöo
 ||

450 
iocur_t›
->
öo
 =
mp
->
m_sb
.
sb_gquŸöo
 ||

451 
iocur_t›
->
öo
 =
mp
->
m_sb
.
sb_pquŸöo
)

452  
TYP_DQBLK
;

454  
TYP_DATA
;

456  
TYP_NONE
;

458 
	}
}

461 
	$öode_size
(

462 *
obj
,

463 
°¨toff
,

464 
idx
)

466  
	`bôize
(
mp
->
m_sb
.
sb_öodesize
);

467 
	}
}

470 
	$öode_u_off£t
(

471 *
obj
,

472 
°¨toff
,

473 
idx
)

475 
xfs_döode_t
 *
dù
;

477 
	`ASSERT
(
°¨toff
 == 0);

478 
	`ASSERT
(
idx
 == 0);

479 
dù
 = 
obj
;

480  
	`bôize
(()((*)
	`XFS_DFORK_DPTR
(
dù
) - (*)dip));

481 
	}
}

484 
	$öode_u_bmbt_cou¡
(

485 *
obj
,

486 
°¨toff
)

488 
xfs_döode_t
 *
dù
;

490 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

491 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

492 
dù
 = 
obj
;

493 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

494  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
;

495 
	}
}

498 
	$öode_u_bmx_cou¡
(

499 *
obj
,

500 
°¨toff
)

502 
xfs_döode_t
 *
dù
;

504 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

505 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

506 
dù
 = 
obj
;

507 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

508  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ?

509 
	`be32_to_˝u
(
dù
->
di_√xã¡s
) : 0;

510 
	}
}

513 
	$öode_u_c_cou¡
(

514 *
obj
,

515 
°¨toff
)

517 
xfs_döode_t
 *
dù
;

519 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

520 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

521 
dù
 = 
obj
;

522 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

523  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
 &&

524 (
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
Ë=
S_IFREG
 ?

525 ()
	`be64_to_˝u
(
dù
->
di_size
) : 0;

526 
	}
}

529 
	$öode_u_dev_cou¡
(

530 *
obj
,

531 
°¨toff
)

533 
xfs_döode_t
 *
dù
;

535 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

536 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

537 
dù
 = 
obj
;

538 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

539  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_DEV
;

540 
	}
}

543 
	$öode_u_muuid_cou¡
(

544 *
obj
,

545 
°¨toff
)

547 
xfs_döode_t
 *
dù
;

549 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

550 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

551 
dù
 = 
obj
;

552 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

553  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_UUID
;

554 
	}
}

557 
	$öode_u_sfdú2_cou¡
(

558 *
obj
,

559 
°¨toff
)

561 
xfs_döode_t
 *
dù
;

563 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

564 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

565 
dù
 = 
obj
;

566 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

567  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
 &&

568 (
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
Ë=
S_IFDIR
 &&

569 !
	`xfs_sb_vîsi⁄_has·y≥
(&
mp
->
m_sb
);

570 
	}
}

573 
	$öode_u_sfdú3_cou¡
(

574 *
obj
,

575 
°¨toff
)

577 
xfs_döode_t
 *
dù
;

579 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

580 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

581 
dù
 = 
obj
;

582 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

583  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
 &&

584 (
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
Ë=
S_IFDIR
 &&

585 
	`xfs_sb_vîsi⁄_has·y≥
(&
mp
->
m_sb
);

586 
	}
}

589 
	$öode_u_size
(

590 *
obj
,

591 
°¨toff
,

592 
idx
)

594 
xfs_döode_t
 *
dù
;

596 
	`ASSERT
(
°¨toff
 == 0);

597 
	`ASSERT
(
idx
 == 0);

598 
dù
 = 
obj
;

599 
dù
->
di_f‹m©
) {

600 
XFS_DINODE_FMT_DEV
:

601  
	`bôsz
(
xfs_dev_t
);

602 
XFS_DINODE_FMT_LOCAL
:

603  
	`bôize
(()
	`be64_to_˝u
(
dù
->
di_size
));

604 
XFS_DINODE_FMT_EXTENTS
:

605  ()
	`be32_to_˝u
(
dù
->
di_√xã¡s
) *

606 
	`bôsz
(
xfs_bmbt_ªc_t
);

607 
XFS_DINODE_FMT_BTREE
:

608  
	`bôize
(()
	`XFS_DFORK_DSIZE
(
dù
, 
mp
));

609 
XFS_DINODE_FMT_UUID
:

610  
	`bôsz
(
uuid_t
);

614 
	}
}

617 
	$öode_u_symlök_cou¡
(

618 *
obj
,

619 
°¨toff
)

621 
xfs_döode_t
 *
dù
;

623 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

624 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

625 
dù
 = 
obj
;

626 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

627  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
 &&

628 (
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
Ë=
S_IFLNK
 ?

629 ()
	`be64_to_˝u
(
dù
->
di_size
) : 0;

630 
	}
}

641 
	$£t_cur_öode
(

642 
xfs_öo_t
 
öo
)

644 
xfs_agblock_t
 
agbno
;

645 
xfs_agöo_t
 
agöo
;

646 
xfs_agnumbî_t
 
agno
;

647 
xfs_döode_t
 *
dù
;

648 
off£t
;

649 
numblks
 = 
blkbb
;

650 
xfs_agblock_t
 
˛u°î_agbno
;

653 
agno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
öo
);

654 
agöo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
);

655 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

656 
off£t
 = 
	`XFS_AGINO_TO_OFFSET
(
mp
, 
agöo
);

657 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 || 
agbno
 >mp->m_sb.
sb_agblocks
 ||

658 
off£t
 >
mp
->
m_sb
.
sb_ö›block
 ||

659 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
Ë!
öo
) {

660 
	`db¥ötf
(
	`_
("bad inodênumbî %Œd\n"), 
öo
);

663 
cur_agno
 = 
agno
;

665 i‡(
mp
->
m_öode_˛u°î_size
 > mp->
m_sb
.
sb_blocksize
 &&

666 
mp
->
m_öﬂlign_mask
) {

667 
xfs_agblock_t
 
chunk_agbno
;

668 
xfs_agblock_t
 
off£t_agbno
;

669 
blks_≥r_˛u°î
;

671 
blks_≥r_˛u°î
 = 
mp
->
m_öode_˛u°î_size
 >>

672 
mp
->
m_sb
.
sb_blocklog
;

673 
off£t_agbno
 = 
agbno
 & 
mp
->
m_öﬂlign_mask
;

674 
chunk_agbno
 = 
agbno
 - 
off£t_agbno
;

675 
˛u°î_agbno
 = 
chunk_agbno
 +

676 ((
off£t_agbno
 / 
blks_≥r_˛u°î
) * blks_per_cluster);

677 
off£t
 +((
agbno
 - 
˛u°î_agbno
Ë* 
mp
->
m_sb
.
sb_ö›block
);

678 
numblks
 = 
	`XFS_FSB_TO_BB
(
mp
, 
blks_≥r_˛u°î
);

680 
˛u°î_agbno
 = 
agbno
;

686 
	`ASSERT
(
ty±ab
[
TYP_INODE
].
ty≤m
 == TYP_INODE);

689 
	`£t_cur
(&
ty±ab
[
TYP_INODE
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
˛u°î_agbno
),

690 
numblks
, 
DB_RING_IGN
, 
NULL
);

691 
	`off_cur
(
off£t
 << 
mp
->
m_sb
.
sb_öodñog
, mp->m_sb.
sb_öodesize
);

692 i‡(!
iocur_t›
->
d©a
)

694 
dù
 = 
iocur_t›
->
d©a
;

695 
iocur_t›
->
öo_buf
 = 1;

696 
iocur_t›
->
öo
 = ino;

697 
iocur_t›
->
mode
 = 
	`be16_to_˝u
(
dù
->
di_mode
);

698 i‡((
iocur_t›
->
mode
 & 
S_IFMT
Ë=
S_IFDIR
)

699 
iocur_t›
->
dúöo
 = 
öo
;

701 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

702 
iocur_t›
->
öo_¸c_ok
 = 
	`libxfs_vîify_cksum
((*)
dù
,

703 
mp
->
m_sb
.
sb_öodesize
,

704 
XFS_DINODE_CRC_OFF
);

705 i‡(!
iocur_t›
->
öo_¸c_ok
)

706 
	`db¥ötf
(

707 
	`_
("Metadata CRCÉrror detected for ino %lld\n"),

708 
öo
);

712 
	`rög_add
();

713 
	}
}

	@inode.h

19 c⁄° 
fõld
 
öode_a_Êds
[];

20 c⁄° 
fõld
 
öode_c‹e_Êds
[];

21 c⁄° 
fõld
 
öode_v3_Êds
[];

22 c⁄° 
fõld
 
öode_Êds
[];

23 c⁄° 
fõld
 
öode_¸c_Êds
[];

24 c⁄° 
fõld
 
öode_hÊd
[];

25 c⁄° 
fõld
 
öode_¸c_hÊd
[];

26 c⁄° 
fõld
 
öode_u_Êds
[];

27 c⁄° 
fõld
 
time°amp_Êds
[];

29 
Â_döode_fmt
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
,

30 
size
, 
¨g
, 
ba£
, 
¨øy
);

31 
öode_a_size
(*
obj
, 
°¨toff
, 
idx
);

32 
öode_öô
();

33 
ty≤m_t
 
öode_√xt_ty≥
();

34 
öode_size
(*
obj
, 
°¨toff
, 
idx
);

35 
öode_u_size
(*
obj
, 
°¨toff
, 
idx
);

36 
£t_cur_öode
(
xfs_öo_t
 
öo
);

	@input.c

19 
	~"libxfs.h
"

20 
	~<sig«l.h
>

21 
	~"comm™d.h
"

22 
	~"öput.h
"

23 
	~"ouçut.h
"

24 
	~"sig.h
"

25 
	~"mÆloc.h
"

26 
	~"öô.h
"

28 #i‡
deföed
(
ENABLE_READLINE
)

29 
	~<ªadlöe/hi°‹y.h
>

30 
	~<ªadlöe/ªadlöe.h
>

31 #ñi‡
deföed
(
ENABLE_EDITLINE
)

32 
	~<hi°edô.h
>

35 
	göput°acksize
;

36 
FILE
 **
	göput°ack
;

37 
FILE
 *
	gcuröput
;

39 
p›fûe
();

40 
sour˚_f
(
¨gc
, **
¨gv
);

42 c⁄° 
cmdöfo_t
 
	gsour˚_cmd
 =

43 { "sour˚", 
NULL
, 
sour˚_f
, 1, 1, 0, 
N_
("source-file"),

44 
N_
("gë comm™d†‰om sour˚-fûe"), 
NULL
 };

49 
	$tokíize
(

50 *
öp
)

52 *
œ°_∂a˚
 = 
NULL
;

53 *
°¨t
;

54 *
wÆk
;

55 
ö_°rög
 = 0;

56 
ö_esˇ≥
 = 0;

58 i‡(
öp
) {

59 
°¨t
 = 
öp
;

61 i‡(
œ°_∂a˚
 =
NULL
)

62  
NULL
;

65 i‡(*
œ°_∂a˚
 != '\0')

66  
NULL
;

68 
°¨t
 = 
œ°_∂a˚
 + 1;

70 
œ°_∂a˚
 = 
NULL
;

73 *
°¨t
 == ' ' || *start == '\t')

74 
°¨t
++;

76 
wÆk
 = 
°¨t
;

77 ;*
wÆk
 != '\0'; walk++) {

78 i‡(
ö_esˇ≥
) {

79 
ö_esˇ≥
 = 0;

82 i‡(*
wÆk
 == '\\')

83 
ö_esˇ≥
 = 1;

84 i‡(*
wÆk
 == '\"')

85 
ö_°rög
 ^= 1;

87 i‡(!
ö_°rög
 && !
ö_esˇ≥
 &&

88 (*
wÆk
 == ' ' || *walk == '\t')) {

89 
œ°_∂a˚
 = 
wÆk
;

90 *
œ°_∂a˚
 = '\0';

94 i‡(
wÆk
 =
°¨t
)

95  
NULL
;

97  
°¨t
;

98 
	}
}

101 
	$bªaklöe
(

102 *
öput
,

103 *
cou¡
)

105 
c
;

106 *
öp
;

107 *
p
;

108 **
rvÆ
;

110 
c
 = 0;

111 
öp
 = 
öput
;

112 
rvÆ
 = 
	`xˇŒoc
((*), 1);

115 
p
 = 
	`tokíize
(
öp
);

117 i‡(
p
 =
NULL
)

119 
öp
 = 
NULL
;

120 
c
++;

121 
rvÆ
 = 
	`xªÆloc
‘vÆ, (*rvÆË* (
c
 + 1));

122 
rvÆ
[
c
 - 1] = 
p
;

123 
rvÆ
[
c
] = 
NULL
;

125 *
cou¡
 = 
c
;

126  
rvÆ
;

127 
	}
}

130 
	$d⁄ñöe
(

131 *
öput
,

132 **
vec
)

134 
	`x‰ì
(
öput
);

135 
	`x‰ì
(
vec
);

136 
	}
}

139 
	$gë_¥om±
()

141 
¥om±
[
FILENAME_MAX
 + 1];

143 i‡(!
¥om±
[0])

144 
	`¢¥ötf
(
¥om±
, ’rom±), "%s> ", 
¥og«me
);

145  
¥om±
;

146 
	}
}

149 
	$„tchlöe_öã∫Æ
()

151 
buf
[1024];

152 
isc⁄t
;

153 
size_t
 
Àn
;

154 
size_t
 
æí
;

155 *
rvÆ
;

157 
rvÆ
 = 
NULL
;

158 
æí
 = 
isc⁄t
 = 0; ; ) {

159 i‡(
curöput
 =
°dö
) {

160 i‡(
isc⁄t
)

161 
	`db¥ötf
("... ");

163 
	`db¥ötf
(
	`gë_¥om±
(), 
¥og«me
);

164 
	`fÊush
(
°dö
);

166 i‡(
	`£íöt
() ||

167 (!
	`fgës
(
buf
, (buf), 
curöput
) &&

168 
	`„º‹
(
curöput
Ë&& 
	`£íöt
())) {

169 
	`˛óröt
();

170 
	`db¥ötf
("^C\n");

171 
	`˛óªº
(
curöput
);

172 i‡(
isc⁄t
) {

173 
isc⁄t
 = 0;

174 
æí
 = 0;

175 i‡(
rvÆ
) {

176 
	`x‰ì
(
rvÆ
);

177 
rvÆ
 = 
NULL
;

182 i‡(
	`„º‹
(
curöput
Ë|| 
	`„of
(curinput) ||

183 (
Àn
 = 
	`°æí
(
buf
)) == 0) {

191 i‡(
curöput
 =
°dö
)

192 
	`db¥ötf
("\n");

194 
	`p›fûe
();

195 
isc⁄t
 = 0;

196 
æí
 = 0;

197 i‡(
rvÆ
) {

198 
	`x‰ì
(
rvÆ
);

199 
rvÆ
 = 
NULL
;

201  
NULL
;

203 i‡(
öput°acksize
 == 1)

204 
	`log¥ötf
("%s", 
buf
);

205 
rvÆ
 = 
	`xªÆloc
‘vÆ, 
æí
 + 
Àn
 + 1);

206 i‡(
æí
 == 0)

207 
rvÆ
[0] = '\0';

208 
æí
 +
Àn
;

209 
	`°rˇt
(
rvÆ
, 
buf
);

210 i‡(
buf
[
Àn
 - 1] == '\n') {

211 i‡(
Àn
 > 1 && 
buf
[len - 2] == '\\') {

212 
rvÆ
[
æí
 - 2] = ' ';

213 
rvÆ
[
æí
 - 1] = '\0';

214 
æí
--;

215 
isc⁄t
 = 1;

217 
rvÆ
[
æí
 - 1] = '\0';

218 
æí
--;

223  
rvÆ
;

224 
	}
}

226 #ifde‡
ENABLE_READLINE


228 
	$„tchlöe
()

230 *
löe
;

232 i‡(
öput°acksize
 == 1) {

233 
löe
 = 
	`ªadlöe
(
	`gë_¥om±
());

234 i‡(!
löe
)

235 
	`db¥ötf
("\n");

236 i‡(
löe
 && *line) {

237 
	`add_hi°‹y
(
löe
);

238 
	`log¥ötf
("%s", 
löe
);

241 
löe
 = 
	`„tchlöe_öã∫Æ
();

243  
löe
;

244 
	}
}

245 #ñi‡
deföed
(
ENABLE_EDITLINE
)

246 *
	$ñ_gë_¥om±
(
EdôLöe
 *
e
Ë{  
	`gë_¥om±
(); 
	}
}

248 
	$„tchlöe
()

250 
EdôLöe
 *
ñ
;

251 
Hi°‹y
 *
hi°
;

252 
Hi°Evít
 
hevít
;

253 *
löe
;

254 
cou¡
;

256 i‡(!
ñ
) {

257 
hi°
 = 
	`hi°‹y_öô
();

258 
	`hi°‹y
(
hi°
, &
hevít
, 
H_SETSIZE
, 100);

259 
ñ
 = 
	`ñ_öô
(
¥og«me
, 
°dö
, 
°dout
, 
°dîr
);

260 
	`ñ_sour˚
(
ñ
, 
NULL
);

261 
	`ñ_£t
(
ñ
, 
EL_SIGNAL
, 1);

262 
	`ñ_£t
(
ñ
, 
EL_PROMPT
, 
ñ_gë_¥om±
);

263 
	`ñ_£t
(
ñ
, 
EL_HIST
, 
hi°‹y
, (c⁄° *)
hi°
);

266 i‡(
öput°acksize
 == 1) {

267 
löe
 = 
	`x°rdup
(
	`ñ_gës
(
ñ
, &
cou¡
));

268 i‡(
löe
) {

269 i‡(
cou¡
 > 0)

270 
löe
[
cou¡
-1] = '\0';

271 i‡(*
löe
) {

272 
	`hi°‹y
(
hi°
, &
hevít
, 
H_ENTER
, 
löe
);

273 
	`log¥ötf
("%s", 
löe
);

277 
löe
 = 
	`„tchlöe_öã∫Æ
();

279  
löe
;

280 
	}
}

282 * 
	$„tchlöe
(Ë{  
	`„tchlöe_öã∫Æ
(); 
	}
}

286 
	$p›fûe
()

288 i‡(
öput°acksize
 == 0) {

289 
curöput
 = 
NULL
;

292 i‡(
curöput
 !
°dö
)

293 
	`f˛o£
(
curöput
);

295 
öput°acksize
--;

296 i‡(
öput°acksize
) {

297 
öput°ack
 =

298 
	`xªÆloc
(
öput°ack
, 
öput°acksize
 * (*inputstack));

299 
curöput
 = 
öput°ack
[
öput°acksize
 - 1];

301 
	`‰ì
(
öput°ack
);

302 
curöput
 = 
NULL
;

303 
öput°ack
 = 
NULL
;

305 
	}
}

308 
	$pushfûe
(

309 
FILE
 *
fûe
)

311 
öput°ack
 =

312 
	`xªÆloc
(
öput°ack
,

313 (
öput°acksize
 + 1Ë* (*
öput°ack
));

314 
öput°acksize
++;

315 
curöput
 = 
öput°ack
[
öput°acksize
 - 1] = 
fûe
;

316 
	}
}

320 
	$sour˚_f
(

321 
¨gc
,

322 **
¨gv
)

324 
FILE
 *
f
;

325 
c
, 
d⁄e
 = 0;

326 *
öput
;

327 **
v
;

329 
f
 = 
	`f›í
(
¨gv
[1], "r");

330 i‡(
f
 =
NULL
) {

331 
	`db¥ötf
(
	`_
("ˇn'à›í %s\n"), 
¨gv
[0]);

336 
	`pushfûe
(
f
);

337 !
d⁄e
) {

338 i‡((
öput
 = 
	`„tchlöe_öã∫Æ
()Ë=
NULL
)

340 
v
 = 
	`bªaklöe
(
öput
, &
c
);

341 i‡(
c
)

342 
d⁄e
 = 
	`comm™d
(
c
, 
v
);

343 
	`d⁄ñöe
(
öput
, 
v
);

347 
	}
}

350 
	$öput_öô
()

352 
	`add_comm™d
(&
sour˚_cmd
);

353 
	}
}

	@input.h

19 **
bªaklöe
(*
öput
, *
cou¡
);

20 
d⁄ñöe
(*
öput
, **
vec
);

21 *
„tchlöe
();

22 
öput_öô
();

23 
pushfûe
(
FILE
 *
fûe
);

	@io.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"öode.h
"

26 
	~"io.h
"

27 
	~"ouçut.h
"

28 
	~"öô.h
"

29 
	~"mÆloc.h
"

30 
	~"¸c.h
"

32 
p›_f
(
¨gc
, **
¨gv
);

33 
p›_hñp
();

34 
push_f
(
¨gc
, **
¨gv
);

35 
push_hñp
();

36 
°ack_f
(
¨gc
, **
¨gv
);

37 
°ack_hñp
();

38 
f‹w¨d_f
(
¨gc
, **
¨gv
);

39 
f‹w¨d_hñp
();

40 
back_f
(
¨gc
, **
¨gv
);

41 
back_hñp
();

42 
rög_f
(
¨gc
, **
¨gv
);

43 
rög_hñp
();

45 c⁄° 
cmdöfo_t
 
	gp›_cmd
 =

46 { "p›", 
NULL
, 
p›_f
, 0, 0, 0, NULL,

47 
N_
("p›Üoˇti⁄ fromÅhê°ack"), 
p›_hñp
 };

48 c⁄° 
cmdöfo_t
 
	gpush_cmd
 =

49 { "push", 
NULL
, 
push_f
, 0, 2, 0, 
N_
("[command]"),

50 
N_
("pushÜoˇti⁄Åÿthê°ack"), 
push_hñp
 };

51 c⁄° 
cmdöfo_t
 
	g°ack_cmd
 =

52 { "°ack", 
NULL
, 
°ack_f
, 0, 0, 0, NULL,

53 
N_
("võwÅhêloˇti⁄ sèck"), 
°ack_hñp
 };

54 c⁄° 
cmdöfo_t
 
	gf‹w¨d_cmd
 =

55 { "f‹w¨d", "f", 
f‹w¨d_f
, 0, 0, 0, 
NULL
,

56 
N_
("movêf‹w¨dÅÿ√xàíåy i¿thêposôi⁄Ñög"), 
f‹w¨d_hñp
 };

57 c⁄° 
cmdöfo_t
 
	gback_cmd
 =

58 { "back", "b", 
back_f
, 0, 0, 0, 
NULL
,

59 
N_
("movêtÿthê¥eviou†loˇti⁄ i¿thêposôi⁄Ñög"), 
back_hñp
 };

60 c⁄° 
cmdöfo_t
 
	grög_cmd
 =

61 { "rög", 
NULL
, 
rög_f
, 0, 1, 0, NULL,

62 
N_
("showÖosôi⁄Ñög o∏movêtÿ®•ecifi¯íåy"), 
rög_hñp
 };

64 
iocur_t
 *
	giocur_ba£
;

65 
iocur_t
 *
	giocur_t›
;

66 
	giocur_•
 = -1;

67 
	giocur_Àn
;

69 
	#RING_ENTRIES
 20

	)

70 
iocur_t
 
	giocur_rög
[
RING_ENTRIES
];

71 
	grög_hód
 = -1;

72 
	grög_èû
 = -1;

73 
	grög_cuºít
 = -1;

76 
	$io_öô
()

78 
	`add_comm™d
(&
p›_cmd
);

79 
	`add_comm™d
(&
push_cmd
);

80 
	`add_comm™d
(&
°ack_cmd
);

81 
	`add_comm™d
(&
f‹w¨d_cmd
);

82 
	`add_comm™d
(&
back_cmd
);

83 
	`add_comm™d
(&
rög_cmd
);

84 
	}
}

87 
	$off_cur
(

88 
off
,

89 
Àn
)

91 i‡(
iocur_t›
 =
NULL
 || 
off
 + 
Àn
 > 
	`BBTOB
(iocur_t›->
bÀn
))

92 
	`db¥ötf
(
	`_
("ˇn'à£àblock off£àtÿ%d\n"), 
off
);

94 
iocur_t›
->
boff
 = 
off
;

95 
iocur_t›
->
off
 = ((
xfs_off_t
)iocur_t›->
bb
 << 
BBSHIFT
) + off;

96 
iocur_t›
->
Àn
 =Üen;

97 
iocur_t›
->
d©a
 = (*)((*)iocur_t›->
buf
 + 
off
);

99 
	}
}

102 
	$p›_cur
()

104 i‡(
iocur_•
 < 0) {

105 
	`db¥ötf
(
	`_
("can'tÖopánything from I/O stack\n"));

108 i‡(
iocur_t›
->
bp
) {

109 
	`libxfs_putbuf
(
iocur_t›
->
bp
);

110 
iocur_t›
->
bp
 = 
NULL
;

112 i‡(
iocur_t›
->
bbm≠
) {

113 
	`‰ì
(
iocur_t›
->
bbm≠
);

114 
iocur_t›
->
bbm≠
 = 
NULL
;

116 i‡(--
iocur_•
 >= 0) {

117 
iocur_t›
 = 
iocur_ba£
 + 
iocur_•
;

118 
cur_typ
 = 
iocur_t›
->
typ
;

120 
iocur_t›
 = 
iocur_ba£
;

121 
iocur_•
 = 0;

123 
	}
}

127 
	$p›_f
(

128 
¨gc
,

129 **
¨gv
)

131 
	`p›_cur
();

133 
	}
}

136 
	$p›_hñp
()

138 
	`db¥ötf
(
	`_
(

143 
	}
}

146 
	$¥öt_iocur
(

147 *
èg
,

148 
iocur_t
 *
ioc
)

150 
i
;

152 
	`db¥ötf
("%s\n", 
èg
);

153 
	`db¥ötf
(
	`_
("\tbyã off£à%Œd,Üígth %d\n"), 
ioc
->
off
, ioc->
Àn
);

154 
	`db¥ötf
(
	`_
("\tbuf„∏block %Œd (fsbnÿ%Œd), %d bb%s\n"), 
ioc
->
bb
,

155 (
xfs_fsblock_t
)
	`XFS_DADDR_TO_FSB
(
mp
, 
ioc
->
bb
), ioc->
bÀn
,

156 
ioc
->
bÀn
 == 1 ? "" : "s");

157 i‡(
ioc
->
bbm≠
) {

158 
	`db¥ötf
(
	`_
("\tblock map"));

159 
i
 = 0; i < 
ioc
->
bbm≠
->
nm≠s
; i++)

160 
	`db¥ötf
(" %Œd:%d", 
ioc
->
bbm≠
->
b
[
i
].
bm_bn
,

161 
ioc
->
bbm≠
->
b
[
i
].
bm_Àn
);

162 
	`db¥ötf
("\n");

164 
	`db¥ötf
(
	`_
("\töodê%Œd, dú inodê%Œd,Åy≥ %s\n"), 
ioc
->
öo
,

165 
ioc
->
dúöo
, ioc->
typ
 =
NULL
 ? 
	`_
("n⁄e"Ë: ioc->typ->
«me
);

166 
	}
}

169 
	$¥öt_rög
()

171 
i
;

172 
iocur_t
 *
ioc
;

174 i‡(
rög_cuºít
 == -1) {

175 
	`db¥ötf
(
	`_
("noÉntries inÜocationÑing.\n"));

179 
	`db¥ötf
(
	`_
("Åype bblock bblen fsbno inode\n"));

181 
i
 = 
rög_hód
;

183 
ioc
 = &
iocur_rög
[
i
];

184 i‡(
i
 =
rög_cuºít
)

185 
	`¥ötf
("*%2d: ", 
i
);

187 
	`¥ötf
(" %2d: ", 
i
);

189 
	`db¥ötf
("%-7.7s %8lld %5d %8lld %9lld\n",

190 
ioc
->
typ
 =
NULL
 ? "n⁄e" : ioc->typ->
«me
,

191 
ioc
->
bb
,

192 
ioc
->
bÀn
,

193 (
xfs_fsblock_t
)
	`XFS_DADDR_TO_FSB
(
mp
, 
ioc
->
bb
),

194 
ioc
->
öo


197 i‡(
i
 =
rög_èû
)

200 
i
 = (i+(
RING_ENTRIES
-1))%RING_ENTRIES;

202 
	}
}

206 
	$push_cur
()

208 i‡(
iocur_•
 + 1 >
iocur_Àn
) {

209 
iocur_ba£
 = 
	`xªÆloc
(iocur_base,

210 (*
iocur_ba£
Ë* (
iocur_Àn
 + 1));

211 
iocur_Àn
++;

213 
iocur_•
++;

214 
iocur_t›
 = 
iocur_ba£
 + 
iocur_•
;

215 
	`mem£t
(
iocur_t›
, 0, (*
iocur_ba£
));

216 
iocur_t›
->
öo
 = 
iocur_•
 > 0 ? iocur_t›[-1].öÿ: 
NULLFSINO
;

217 
iocur_t›
->
dúöo
 = 
iocur_•
 > 0 ? iocur_t›[-1].dúöÿ: 
NULLFSINO
;

218 
iocur_t›
->
mode
 = 
iocur_•
 > 0 ? iocur_top[-1].mode : 0;

219 
cur_typ
 = 
NULL
;

220 
	}
}

223 
	$push_f
(

224 
¨gc
,

225 **
¨gv
)

227 c⁄° 
cmdöfo_t
 *
˘
;

229 i‡(
¨gc
 > 1) {

231 
˘
 = 
	`föd_comm™d
(
¨gv
[1]);

232 i‡(
˘
 =
NULL
) {

233 
	`db¥ötf
(
	`_
("nÿsuch comm™d %s\n"), 
¨gv
[1]);

236 i‡(!
˘
->
ˇ≈ush
) {

237 
	`db¥ötf
(
	`_
("nÿpush f‹máŒowed f‹ %s\n"), 
¨gv
[1]);

243 
	`push_cur
();

244 i‡(
iocur_t›
[-1].
typ
 && iocur_t›[-1].typ->
ty≤m
 =
TYP_INODE
)

245 
	`£t_cur_öode
(
iocur_t›
[-1].
öo
);

247 
	`£t_cur
(
iocur_t›
[-1].
typ
, iocur_t›[-1].
bb
,

248 
iocur_t›
[-1].
bÀn
, 
DB_RING_IGN
,

249 
iocur_t›
[-1].
bbm≠
);

252 i‡(
¨gc
>1)

253 ()
	`comm™d
(
¨gc
-1, 
¨gv
+1);

255 
	}
}

258 
	$push_hñp
()

260 
	`db¥ötf
(
	`_
(

267 
	}
}

272 
	$f‹w¨d_f
(

273 
¨gc
,

274 **
¨gv
)

276 i‡(
rög_cuºít
 == -1) {

277 
	`db¥ötf
(
	`_
("ring isÉmpty\n"));

280 i‡(
rög_cuºít
 =
rög_hód
) {

281 
	`db¥ötf
(
	`_
("no furtherÉntries\n"));

285 
rög_cuºít
 = (rög_cuºít+1)%
RING_ENTRIES
;

287 
	`£t_cur
(
iocur_rög
[
rög_cuºít
].
typ
,

288 
iocur_rög
[
rög_cuºít
].
bb
,

289 
iocur_rög
[
rög_cuºít
].
bÀn
,

290 
DB_RING_IGN
,

291 
iocur_rög
[
rög_cuºít
].
bbm≠
);

294 
	}
}

297 
	$f‹w¨d_hñp
()

299 
	`db¥ötf
(
	`_
(

307 
	}
}

312 
	$back_f
(

313 
¨gc
,

314 **
¨gv
)

316 i‡(
rög_cuºít
 == -1) {

317 
	`db¥ötf
(
	`_
("ring isÉmpty\n"));

320 i‡(
rög_cuºít
 =
rög_èû
) {

321 
	`db¥ötf
(
	`_
("noÖreviousÉntries\n"));

325 
rög_cuºít
 = (rög_cuºít+(
RING_ENTRIES
-1))%RING_ENTRIES;

327 
	`£t_cur
(
iocur_rög
[
rög_cuºít
].
typ
,

328 
iocur_rög
[
rög_cuºít
].
bb
,

329 
iocur_rög
[
rög_cuºít
].
bÀn
,

330 
DB_RING_IGN
,

331 
iocur_rög
[
rög_cuºít
].
bbm≠
);

334 
	}
}

337 
	$back_hñp
()

339 
	`db¥ötf
(
	`_
(

346 
	}
}

350 
	$rög_f
(

351 
¨gc
,

352 **
¨gv
)

354 
ödex
;

356 i‡(
¨gc
 == 1) {

357 
	`¥öt_rög
();

361 
ödex
 = ()
	`°πoul
(
¨gv
[1], 
NULL
, 0);

362 i‡(
ödex
 < 0 || index >
RING_ENTRIES
) {

363 
	`db¥ötf
(
	`_
("övÆidÉ¡ry: %d\n"), 
ödex
);

367 
rög_cuºít
 = 
ödex
;

369 
	`£t_cur
(
iocur_rög
[
ödex
].
typ
,

370 
iocur_rög
[
ödex
].
bb
,

371 
iocur_rög
[
ödex
].
bÀn
,

372 
DB_RING_IGN
,

373 
iocur_rög
[
ödex
].
bbm≠
);

376 
	}
}

379 
	$rög_hñp
()

381 
	`db¥ötf
(
	`_
(

401 
RING_ENTRIES
);

402 
	}
}

406 
	$rög_add
()

408 i‡(
rög_hód
 == -1) {

410 
rög_hód
 = 0;

411 
rög_èû
 = 0;

412 
rög_cuºít
 = 0;

413 
iocur_rög
[0] = *
iocur_t›
;

415 i‡(
rög_cuºít
 =
rög_hód
) {

416 
rög_hód
 = (rög_hód+1)%
RING_ENTRIES
;

417 
iocur_rög
[
rög_hód
] = *
iocur_t›
;

418 i‡(
rög_hód
 =
rög_èû
)

419 
rög_èû
 = (rög_èû+1)%
RING_ENTRIES
;

420 
rög_cuºít
 = 
rög_hód
;

422 
rög_cuºít
 = (rög_cuºít+1)%
RING_ENTRIES
;

423 
iocur_rög
[
rög_cuºít
] = *
iocur_t›
;

426 
	}
}

429 
	$wrôe_cur_buf
()

431 
ªt
;

433 
ªt
 = -
	`libxfs_wrôebu‰
(
iocur_t›
->
bp
);

434 i‡(
ªt
 != 0)

435 
	`db¥ötf
(
	`_
("wrôêîr‹: %s\n"), 
	`°ªº‹
(
ªt
));

438 
ªt
 = -
	`libxfs_ªadbu‰
(
mp
->
m_ddev_èrgp
, 
iocur_t›
->
bb
, iocur_t›->
bp
,

439 
iocur_t›
->
bÀn
, 0);

440 i‡(
ªt
 != 0)

441 
	`db¥ötf
(
	`_
("ªadÉº‹: %s\n"), 
	`°ªº‹
(
ªt
));

442 
	}
}

445 
	$wrôe_cur_bbs
()

447 
ªt
;

449 
ªt
 = -
	`libxfs_wrôebu‰
(
iocur_t›
->
bp
);

450 i‡(
ªt
 != 0)

451 
	`db¥ötf
(
	`_
("wrôêîr‹: %s\n"), 
	`°ªº‹
(
ªt
));

455 
ªt
 = -
	`libxfs_ªadbu‰_m≠
(
mp
->
m_ddev_èrgp
, 
iocur_t›
->
bp
, 0);

456 i‡(
ªt
 != 0)

457 
	`db¥ötf
(
	`_
("ªadÉº‹: %s\n"), 
	`°ªº‹
(
ªt
));

458 
	}
}

461 
	$xfs_dummy_vîify
(

462 
xfs_buf
 *
bp
)

465 
	}
}

468 
	$xfs_vîify_ªˇlc_¸c
(

469 
xfs_buf
 *
bp
)

471 
	`xfs_buf_upd©e_cksum
(
bp
, 
iocur_t›
->
typ
->
¸c_off
);

472 
	}
}

475 
	$wrôe_cur
()

477 
boﬁ
 
skù_¸c
 = 
Ál£
;

479 i‡(
iocur_•
 < 0) {

480 
	`db¥ötf
(
	`_
("nothingÅo write\n"));

484 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) ||

485 !
iocur_t›
->
bp
->
b_›s
 ||

486 
iocur_t›
->
bp
->
b_›s
->
vîify_wrôe
 =
xfs_dummy_vîify
)

487 
skù_¸c
 = 
åue
;

489 i‡(!
skù_¸c
) {

490 i‡(
iocur_t›
->
öo_buf
) {

491 
	`libxfs_döode_ˇlc_¸c
(
mp
, 
iocur_t›
->
d©a
);

492 
iocur_t›
->
öo_¸c_ok
 = 1;

493 } i‡(
iocur_t›
->
dquŸ_buf
) {

494 
	`xfs_upd©e_cksum
(
iocur_t›
->
d©a
,

495 (
xfs_dqblk
),

496 
XFS_DQUOT_CRC_OFF
);

499 i‡(
iocur_t›
->
bbm≠
)

500 
	`wrôe_cur_bbs
();

502 
	`wrôe_cur_buf
();

505 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

506 
skù_¸c
 && 
iocur_t›
->
öo_buf
) {

507 
iocur_t›
->
öo_¸c_ok
 = 
	`libxfs_vîify_cksum
(iocur_t›->
d©a
,

508 
mp
->
m_sb
.
sb_öodesize
,

509 
XFS_DINODE_CRC_OFF
);

512 
	}
}

515 
	$£t_cur
(

516 c⁄° 
typ_t
 *
t
,

517 
__öt64_t
 
d
,

518 
c
,

519 
rög_Êag
,

520 
bbm≠_t
 *
bbm≠
)

522 
xfs_buf
 *
bp
;

523 
xfs_öo_t
 
dúöo
;

524 
xfs_öo_t
 
öo
;

525 
__uöt16_t
 
mode
;

526 c⁄° 
xfs_buf_›s
 *
›s
 = 
t
 ?Å->
b›s
 : 
NULL
;

528 i‡(
iocur_•
 < 0) {

529 
	`db¥ötf
(
	`_
("set_curÇo stackÉlementÅo set\n"));

534 
öo
 = 
iocur_t›
->ino;

535 
dúöo
 = 
iocur_t›
->dirino;

536 
mode
 = 
iocur_t›
->mode;

537 
	`p›_cur
();

538 
	`push_cur
();

540 i‡(
bbm≠
) {

541 #ifde‡
DEBUG_BBMAP


542 
i
;

543 
	`¥ötf
(
	`_
("xfs_db gŸá bbm≠ f‹ %Œd\n"), ()
d
);

544 
	`¥ötf
(
	`_
("\tblock map"));

545 
i
 = 0; i < 
bbm≠
->
nm≠s
; i++)

546 
	`¥ötf
(" %Œd:%d", ()
bbm≠
->
b
[
i
].
bm_bn
,

547 
bbm≠
->
b
[
i
].
bm_Àn
);

548 
	`¥ötf
("\n");

550 
iocur_t›
->
bbm≠
 = 
	`mÆloc
((bbmap));

551 i‡(!
iocur_t›
->
bbm≠
)

553 
	`mem˝y
(
iocur_t›
->
bbm≠
, bbmap, (bbmap));

554 
bp
 = 
	`libxfs_ªadbuf_m≠
(
mp
->
m_ddev_èrgp
, 
bbm≠
->
b
,

555 
bbm≠
->
nm≠s
, 0, 
›s
);

557 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_ddev_èrgp
, 
d
, 
c
, 0, 
›s
);

558 
iocur_t›
->
bbm≠
 = 
NULL
;

565 i‡(!
bp
 || (bp->
b_îr‹
 && bp->b_îr‹ !-
EFSCORRUPTED
 &&

566 
bp
->
b_îr‹
 !-
EFSBADCRC
))

568 
iocur_t›
->
buf
 = 
bp
->
b_addr
;

569 
iocur_t›
->
bp
 = bp;

570 i‡(!
›s
)

571 
bp
->
b_Êags
 |
LIBXFS_B_UNCHECKED
;

573 
iocur_t›
->
bb
 = 
d
;

574 
iocur_t›
->
bÀn
 = 
c
;

575 
iocur_t›
->
boff
 = 0;

576 
iocur_t›
->
d©a
 = iocur_t›->
buf
;

577 
iocur_t›
->
Àn
 = 
	`BBTOB
(
c
);

578 
iocur_t›
->
off
 = 
d
 << 
BBSHIFT
;

579 
iocur_t›
->
typ
 = 
cur_typ
 = 
t
;

580 
iocur_t›
->
öo
 = ino;

581 
iocur_t›
->
dúöo
 = dirino;

582 
iocur_t›
->
mode
 = mode;

583 
iocur_t›
->
öo_buf
 = 0;

584 
iocur_t›
->
dquŸ_buf
 = 0;

587 i‡(
rög_Êag
)

588 
	`rög_add
();

589 
	}
}

592 
	$£t_iocur_ty≥
(

593 c⁄° 
typ_t
 *
t
)

595 
xfs_buf
 *
bp
 = 
iocur_t›
->bp;

597 
iocur_t›
->
typ
 = 
t
;

600 i‡(!
bp
)

602 i‡(!
t
->
b›s
) {

603 
bp
->
b_›s
 = 
NULL
;

604 
bp
->
b_Êags
 |
LIBXFS_B_UNCHECKED
;

607 i‡(!(
bp
->
b_Êags
 & 
LIBXFS_B_UPTODATE
))

609 
bp
->
b_îr‹
 = 0;

610 
bp
->
b_›s
 = 
t
->
b›s
;

611 
bp
->
b_›s
->
	`vîify_ªad
(bp);

612 
bp
->
b_Êags
 &~
LIBXFS_B_UNCHECKED
;

613 
	}
}

616 
	$°ack_hñp
()

618 
	`db¥ötf
(
	`_
(

629 
	}
}

633 
	$°ack_f
(

634 
¨gc
,

635 **
¨gv
)

637 
i
;

638 
ègbuf
[8];

640 
i
 = 
iocur_•
; i > 0; i--) {

641 
	`¢¥ötf
(
ègbuf
, —agbuf), "%d: ", 
i
);

642 
	`¥öt_iocur
(
ègbuf
, &
iocur_ba£
[
i
]);

645 
	}
}

	@io.h

19 
	gtyp
;

21 
	#BBMAP_SIZE
 (
XFS_MAX_BLOCKSIZE
 / 
BBSIZE
)

	)

22 
	sbbm≠
 {

23 
	mnm≠s
;

24 
xfs_buf_m≠
 
	mb
[
BBMAP_SIZE
];

25 } 
	tbbm≠_t
;

27 
	siocur
 {

28 
__öt64_t
 
	mbb
;

29 
	mbÀn
;

30 
	mboff
;

31 *
	mbuf
;

32 *
	md©a
;

33 
xfs_öo_t
 
	mdúöo
;

34 
xfs_öo_t
 
	möo
;

35 
	mÀn
;

36 
__uöt16_t
 
	mmode
;

37 
xfs_off_t
 
	moff
;

38 c⁄° 
typ
 *
	mtyp
;

39 
bbm≠_t
 *
	mbbm≠
;

40 
xfs_buf
 *
	mbp
;

41 
	möo_¸c_ok
:1;

42 
	möo_buf
:1;

43 
	mdquŸ_buf
:1;

44 
	m√ed_¸c
:1;

45 } 
	tiocur_t
;

47 
	#DB_RING_ADD
 1

	)

48 
	#DB_RING_IGN
 0

	)

50 
iocur_t
 *
iocur_ba£
;

51 
iocur_t
 *
iocur_t›
;

52 
iocur_•
;

53 
iocur_Àn
;

55 
io_öô
();

56 
off_cur
(
off
, 
Àn
);

57 
p›_cur
();

58 
¥öt_iocur
(*
èg
, 
iocur_t
 *
ioc
);

59 
push_cur
();

60 
ªad_buf
(
__öt64_t
 
daddr
, 
cou¡
, *
buÂ
);

61 
wrôe_cur
();

62 
£t_cur
(c⁄° 
typ
 *
t
, 
__öt64_t
 
d
, 
c
, 
rög_add
,

63 
bbm≠_t
 *
bbm≠
);

64 
rög_add
();

65 
£t_iocur_ty≥
(c⁄° 
typ
 *
t
);

66 
xfs_dummy_vîify
(
xfs_buf
 *
bp
);

67 
xfs_vîify_ªˇlc_¸c
(
xfs_buf
 *
bp
);

72 
ölöe
 

73 
	$iocur_¸c_vÆid
()

75 i‡(!
iocur_t›
->
bp
)

77 i‡(
iocur_t›
->
bp
->
b_Êags
 & 
LIBXFS_B_UNCHECKED
)

79  (
iocur_t›
->
bp
->
b_îr‹
 !-
EFSBADCRC
 &&

80 (!
iocur_t›
->
öo_buf
 || iocur_t›->
öo_¸c_ok
));

81 
	}
}

	@logformat.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"öô.h
"

22 
	~"ouçut.h
"

23 
	~"libxlog.h
"

25 
	#MAX_LSUNIT
 256 * 1024

	)

28 
	$logf‹m©_f
(
¨gc
, **
¨gv
)

30 
xfs_daddr_t
 
hód_blk
;

31 
xfs_daddr_t
 
èû_blk
;

32 
logvîsi⁄
;

33 
lsunô
 = -1;

34 
cy˛e
 = -1;

35 
îr‹
;

36 
c
;

38 
logvîsi⁄
 = 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
) ? 2 : 1;

40 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:s:")Ë!
EOF
) {

41 
c
) {

43 
cy˛e
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

44 i‡(
cy˛e
 == 0) {

45 
	`db¥ötf
("invalid cycle\n");

50 
lsunô
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

55 i‡(
lsunô
 > 1 &&

56 (
lsunô
 % 
mp
->
m_sb
.
sb_blocksize
 ||

57 (
logvîsi⁄
 =2 && 
lsunô
 > 
MAX_LSUNIT
))) {

58 
	`db¥ötf
("invalidÜog stripe unit\n");

63 
	`db¥ötf
("invalid option\n");

72 
	`mem£t
(
mp
->
m_log
, 0, (
xlog
));

73 
mp
->
m_log
->
l_mp
 = mp;

74 
mp
->
m_log
->
l_dev
 = mp->
m_logdev_èrgp
;

75 
mp
->
m_log
->
l_logBBsize
 = 
	`XFS_FSB_TO_BB
(mp, mp->
m_sb
.
sb_logblocks
);

76 
mp
->
m_log
->
l_logBB°¨t
 = 
	`XFS_FSB_TO_DADDR
(mp, mp->
m_sb
.
sb_log°¨t
);

77 
mp
->
m_log
->
l_£˘BBsize
 = 
BBSIZE
;

78 i‡(
	`xfs_sb_vîsi⁄_has£˘‹
(&
mp
->
m_sb
))

79 
mp
->
m_log
->
l_£˘BBsize
 <<(mp->
m_sb
.
sb_log£˘log
 - 
BBSHIFT
);

80 
mp
->
m_log
->
l_£˘BBsize
 = 
	`BTOBB
(mp->m_log->l_sectBBsize);

82 
îr‹
 = 
	`xlog_föd_èû
(
mp
->
m_log
, &
hód_blk
, &
èû_blk
);

83 i‡(
îr‹
) {

84 
	`db¥ötf
("couldÇot findÜog head/tail\n");

87 i‡(
hód_blk
 !
èû_blk
) {

88 
	`db¥ötf
(
	`_
(

97 i‡(
cy˛e
 < 0)

98 
cy˛e
 = 
mp
->
m_log
->
l_cuº_cy˛e
;

99 i‡(
lsunô
 < 0)

100 
lsunô
 = 
mp
->
m_sb
.
sb_logsunô
;

102 
	`db¥ötf
("FormattingÅheÜogÅo cycle %d, stripe unit %d bytes.\n",

103 
cy˛e
, 
lsunô
);

104 
îr‹
 = -
	`libxfs_log_˛ór
(
mp
->
m_logdev_èrgp
, 
NULL
,

105 
mp
->
m_log
->
l_logBB°¨t
,

106 
mp
->
m_log
->
l_logBBsize
,

107 &
mp
->
m_sb
.
sb_uuid
, 
logvîsi⁄
, 
lsunô
,

108 
XLOG_FMT
, 
cy˛e
, 
Ál£
);

109 i‡(
îr‹
) {

110 
	`db¥ötf
("îr‹ f‹m©tögÜog - %d\n", 
îr‹
);

111  
îr‹
;

115 
	}
}

118 
	$logf‹m©_hñp
()

120 
	`db¥ötf
(
	`_
(

128 
	}
}

130 c⁄° 
cmdöfo
 
	glogf‹m©_cmd
 = {

131 .
«me
 = "logformat",

132 .
	gÆäame
 = 
NULL
,

133 .
	gcfunc
 = 
logf‹m©_f
,

134 .
	g¨gmö
 = 0,

135 .
	g¨gmax
 = 4,

136 .
	gˇ≈ush
 = 0,

137 .
	g¨gs
 = 
N_
("[-c cycle] [-s sunit]"),

138 .
	g⁄ñöe
 = 
N_
("reformatÅheÜog"),

139 .
	ghñp
 = 
logf‹m©_hñp
,

143 
	$logf‹m©_öô
()

145 i‡(!
ex≥π_mode
)

148 
	`add_comm™d
(&
logf‹m©_cmd
);

149 
	}
}

	@logformat.h

19 
logf‹m©_öô
();

	@malloc.c

19 
	~"libxfs.h
"

20 
	~"öô.h
"

21 
	~"mÆloc.h
"

22 
	~"ouçut.h
"

25 
	$badmÆloc
()

27 
	`db¥ötf
(
	`_
("%s: ouào‡mem‹y\n"), 
¥og«me
);

28 
	`exô
(4);

29 
	}
}

32 
	$xˇŒoc
(

33 
size_t
 
√Àm
,

34 
size_t
 
ñsize
)

36 *
±r
;

38 
±r
 = 
	`ˇŒoc
(
√Àm
, 
ñsize
);

39 i‡(
±r
)

40  
±r
;

41 
	`badmÆloc
();

43  
NULL
;

44 
	}
}

47 
	$x‰ì
(

48 *
±r
)

50 
	`‰ì
(
±r
);

51 
	}
}

54 
	$xmÆloc
(

55 
size_t
 
size
)

57 *
±r
;

59 
±r
 = 
	`vÆloc
(
size
);

60 i‡(
±r
)

61  
±r
;

62 
	`badmÆloc
();

64  
NULL
;

65 
	}
}

68 
	$xªÆloc
(

69 *
±r
,

70 
size_t
 
size
)

72 
±r
 = 
	`ªÆloc
’å, 
size
);

73 i‡(
±r
 || !
size
)

74  
±r
;

75 
	`badmÆloc
();

77  
NULL
;

78 
	}
}

81 
	$x°rdup
(

82 c⁄° *
s1
)

84 *
s
;

86 
s
 = 
	`°rdup
(
s1
);

87 i‡(
s
)

88  
s
;

89 
	`badmÆloc
();

91  
NULL
;

92 
	}
}

	@malloc.h

19 *
xˇŒoc
(
size_t
 
√Àm
, size_à
ñsize
);

20 
x‰ì
(*
±r
);

21 *
xmÆloc
(
size_t
 
size
);

22 *
xªÆloc
(*
±r
, 
size_t
 
size
);

23 *
x°rdup
(c⁄° *
s1
);

	@metadump.c

19 
	~"libxfs.h
"

20 
	~"libxlog.h
"

21 
	~"bm≠.h
"

22 
	~"comm™d.h
"

23 
	~"mëadump.h
"

24 
	~"io.h
"

25 
	~"ouçut.h
"

26 
	~"ty≥.h
"

27 
	~"öô.h
"

28 
	~"sig.h
"

29 
	~"xfs_mëadump.h
"

30 
	~"Âröt.h
"

31 
	~"Áddr.h
"

32 
	~"fõld.h
"

33 
	~"dú2.h
"

35 
	#DEFAULT_MAX_EXT_SIZE
 1000

	)

43 
	#DUP_MAX
 5

	)

47 
mëadump_f
(
¨gc
, **
¨gv
);

48 
mëadump_hñp
();

58 c⁄° 
cmdöfo_t
 
	gmëadump_cmd
 =

59 { "mëadump", 
NULL
, 
mëadump_f
, 0, -1, 0,

60 
N_
("[-a] [-e] [-g] [-m max_extent] [-w] [-o] filename"),

61 
N_
("dum∞mëad©®tÿ®fûe"), 
mëadump_hñp
 };

63 
FILE
 *
	goutf
;

65 
xfs_mëablock_t
 *
	gmëablock
;

66 
__be64
 *
	gblock_ödex
;

67 *
	gblock_buf„r
;

69 
	gnum_ödi˚s
;

70 
	gcur_ödex
;

72 
xfs_öo_t
 
	gcur_öo
;

74 
	gshow_¥ogªss
 = 0;

75 
	g°›_⁄_ªad_îr‹
 = 0;

76 
	gmax_exã¡_size
 = 
DEFAULT_MAX_EXT_SIZE
;

77 
	gobfusˇã
 = 1;

78 
	gzîo_°Æe_d©a
 = 1;

79 
	gshow_w¨nögs
 = 0;

80 
	g¥ogªss_sö˚_w¨nög
 = 0;

83 
	$mëadump_öô
()

85 
	`add_comm™d
(&
mëadump_cmd
);

86 
	}
}

89 
	$mëadump_hñp
()

91 
	`db¥ötf
(
	`_
(

103 "\n"), 
DEFAULT_MAX_EXT_SIZE
);

104 
	}
}

107 
	$¥öt_w¨nög
(c⁄° *
fmt
, ...)

109 
buf
[200];

110 
va_li°
 
≠
;

112 i‡(
	`£íöt
())

115 
	`va_°¨t
(
≠
, 
fmt
);

116 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

117 
	`va_íd
(
≠
);

118 
buf
[(buf)-1] = '\0';

120 
	`Ârötf
(
°dîr
, "%s%s: %s\n", 
¥ogªss_sö˚_w¨nög
 ? "\n" : "",

121 
¥og«me
, 
buf
);

122 
¥ogªss_sö˚_w¨nög
 = 0;

123 
	}
}

126 
	$¥öt_¥ogªss
(c⁄° *
fmt
, ...)

128 
buf
[60];

129 
va_li°
 
≠
;

130 
FILE
 *
f
;

132 i‡(
	`£íöt
())

135 
	`va_°¨t
(
≠
, 
fmt
);

136 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

137 
	`va_íd
(
≠
);

138 
buf
[(buf)-1] = '\0';

140 
f
 = (
outf
 =
°dout
Ë? 
°dîr
 : stdout;

141 
	`Ârötf
(
f
, "\r%-59s", 
buf
);

142 
	`fÊush
(
f
);

143 
¥ogªss_sö˚_w¨nög
 = 1;

144 
	}
}

156 
	$wrôe_ödex
()

161 
mëablock
->
mb_cou¡
 = 
	`˝u_to_be16
(
cur_ödex
);

162 i‡(
	`fwrôe
(
mëablock
, (
cur_ödex
 + 1Ë<< 
BBSHIFT
, 1, 
outf
) != 1) {

163 
	`¥öt_w¨nög
("îr‹ wrôögÅÿfûe: %s", 
	`°ªº‹
(
î∫o
));

164  -
î∫o
;

167 
	`mem£t
(
block_ödex
, 0, 
num_ödi˚s
 * (
__be64
));

168 
cur_ödex
 = 0;

170 
	}
}

176 
	$wrôe_buf_£gmít
(

177 *
d©a
,

178 
__öt64_t
 
off
,

179 
Àn
)

181 
i
;

182 
ªt
;

184 
i
 = 0; i < 
Àn
; i++, 
off
++, 
d©a
 +
BBSIZE
) {

185 
block_ödex
[
cur_ödex
] = 
	`˝u_to_be64
(
off
);

186 
	`mem˝y
(&
block_buf„r
[
cur_ödex
 << 
BBSHIFT
], 
d©a
, 
BBSIZE
);

187 i‡(++
cur_ödex
 =
num_ödi˚s
) {

188 
ªt
 = 
	`wrôe_ödex
();

189 i‡(
ªt
)

190  -
EIO
;

194 
	}
}

208 
	$wrôe_buf
(

209 
iocur_t
 *
buf
)

211 
xfs_buf
 *
bp
 = 
buf
->bp;

212 
i
;

213 
ªt
;

220 i‡(
buf
->
√ed_¸c
 && 
bp
 && bp->
b_›s
 && !bp->
b_îr‹
) {

221 
bp
->
b_›s
->
	`vîify_wrôe
(bp);

222 i‡(
bp
->
b_îr‹
) {

223 
	`¥öt_w¨nög
(

225 
bp
->
b_›s
->
«me
,

226 ()
bp
->
b_bn
, bp->
b_bcou¡
);

231 i‡(!
buf
->
bbm≠
) {

232 
ªt
 = 
	`wrôe_buf_£gmít
(
buf
->
d©a
, buf->
bb
, buf->
bÀn
);

233 i‡(
ªt
)

234  
ªt
;

236 
Àn
 = 0;

237 
i
 = 0; i < 
buf
->
bbm≠
->
nm≠s
; i++) {

238 
ªt
 = 
	`wrôe_buf_£gmít
(
buf
->
d©a
 + 
	`BBTOB
(
Àn
),

239 
buf
->
bbm≠
->
b
[
i
].
bm_bn
,

240 
buf
->
bbm≠
->
b
[
i
].
bm_Àn
);

241 i‡(
ªt
)

242  
ªt
;

243 
Àn
 +
buf
->
bbm≠
->
b
[
i
].
bm_Àn
;

246  
	`£íöt
(Ë? -
EINTR
 : 0;

247 
	}
}

255 
	$zîo_båì_node
(

256 
xfs_båì_block
 *
block
,

257 
ty≤m_t
 
bty≥
)

259 
ƒecs
;

260 
xfs_bmbt_±r_t
 *
bµ
;

261 
xfs_bmbt_key_t
 *
bkp
;

262 
xfs_öobt_±r_t
 *
ùp
;

263 
xfs_öobt_key_t
 *
ikp
;

264 
xfs_Æloc_±r_t
 *
≠p
;

265 
xfs_Æloc_key_t
 *
akp
;

266 *
zp1
, *
zp2
;

267 *
key_íd
;

269 
ƒecs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

270 i‡(
ƒecs
 < 0)

273 
bty≥
) {

274 
TYP_BMAPBTA
:

275 
TYP_BMAPBTD
:

276 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[1])

279 
bkp
 = 
	`XFS_BMBT_KEY_ADDR
(
mp
, 
block
, 1);

280 
bµ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[1]);

281 
zp1
 = (*)&
bkp
[
ƒecs
];

282 
zp2
 = (*)&
bµ
[
ƒecs
];

283 
key_íd
 = (*)
bµ
;

285 
TYP_INOBT
:

286 
TYP_FINOBT
:

287 i‡(
ƒecs
 > 
mp
->
m_öobt_mxr
[1])

290 
ikp
 = 
	`XFS_INOBT_KEY_ADDR
(
mp
, 
block
, 1);

291 
ùp
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_öobt_mxr
[1]);

292 
zp1
 = (*)&
ikp
[
ƒecs
];

293 
zp2
 = (*)&
ùp
[
ƒecs
];

294 
key_íd
 = (*)
ùp
;

296 
TYP_BNOBT
:

297 
TYP_CNTBT
:

298 i‡(
ƒecs
 > 
mp
->
m_Æloc_mxr
[1])

301 
akp
 = 
	`XFS_ALLOC_KEY_ADDR
(
mp
, 
block
, 1);

302 
≠p
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

303 
zp1
 = (*)&
akp
[
ƒecs
];

304 
zp2
 = (*)&
≠p
[
ƒecs
];

305 
key_íd
 = (*)
≠p
;

313 
	`mem£t
(
zp1
, 0, 
key_íd
 - zp1);

316 
	`mem£t
(
zp2
, 0, (*)
block
 + 
mp
->
m_sb
.
sb_blocksize
 - zp2);

317 
	}
}

325 
	$zîo_båì_Àaf
(

326 
xfs_båì_block
 *
block
,

327 
ty≤m_t
 
bty≥
)

329 
ƒecs
;

330 
xfs_bmbt_ªc
 *
bΩ
;

331 
xfs_öobt_ªc
 *
úp
;

332 
xfs_Æloc_ªc
 *
¨p
;

333 *
zp
;

335 
ƒecs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

336 i‡(
ƒecs
 < 0)

339 
bty≥
) {

340 
TYP_BMAPBTA
:

341 
TYP_BMAPBTD
:

342 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[0])

345 
bΩ
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1);

346 
zp
 = (*)&
bΩ
[
ƒecs
];

348 
TYP_INOBT
:

349 
TYP_FINOBT
:

350 i‡(
ƒecs
 > 
mp
->
m_öobt_mxr
[0])

353 
úp
 = 
	`XFS_INOBT_REC_ADDR
(
mp
, 
block
, 1);

354 
zp
 = (*)&
úp
[
ƒecs
];

356 
TYP_BNOBT
:

357 
TYP_CNTBT
:

358 i‡(
ƒecs
 > 
mp
->
m_Æloc_mxr
[0])

361 
¨p
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

362 
zp
 = (*)&
¨p
[
ƒecs
];

369 
	`mem£t
(
zp
, 0, (*)
block
 + 
mp
->
m_sb
.
sb_blocksize
 - zp);

370 
	}
}

373 
	$zîo_båì_block
(

374 
xfs_båì_block
 *
block
,

375 
ty≤m_t
 
bty≥
)

377 
Àvñ
;

379 
Àvñ
 = 
	`be16_to_˝u
(
block
->
bb_Àvñ
);

381 i‡(
Àvñ
 > 0)

382 
	`zîo_båì_node
(
block
, 
bty≥
);

384 
	`zîo_båì_Àaf
(
block
, 
bty≥
);

385 
	}
}

388 
sˇn_båì
(

389 
xfs_agnumbî_t
 
agno
,

390 
xfs_agblock_t
 
agbno
,

391 
Àvñ
,

392 
ty≤m_t
 
bty≥
,

393 *
¨g
,

394 (*
func
)(
xfs_båì_block
 *
block
,

395 
xfs_agnumbî_t
 
agno
,

396 
xfs_agblock_t
 
agbno
,

397 
Àvñ
,

398 
ty≤m_t
 
bty≥
,

399 *
¨g
))

401 
rvÆ
 = 0;

403 
	`push_cur
();

404 
	`£t_cur
(&
ty±ab
[
bty≥
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
), 
blkbb
,

405 
DB_RING_IGN
, 
NULL
);

406 i‡(
iocur_t›
->
d©a
 =
NULL
) {

407 
	`¥öt_w¨nög
("ˇ¬ŸÑód %†block %u/%u", 
ty±ab
[
bty≥
].
«me
,

408 
agno
, 
agbno
);

409 
rvÆ
 = !
°›_⁄_ªad_îr‹
;

410 
p›_out
;

413 i‡(
zîo_°Æe_d©a
) {

414 
	`zîo_båì_block
(
iocur_t›
->
d©a
, 
bty≥
);

415 
iocur_t›
->
√ed_¸c
 = 1;

418 i‡(
	`wrôe_buf
(
iocur_t›
))

419 
p›_out
;

421 i‡(!(*
func
)(
iocur_t›
->
d©a
, 
agno
, 
agbno
, 
Àvñ
 - 1, 
bty≥
, 
¨g
))

422 
p›_out
;

423 
rvÆ
 = 1;

424 
p›_out
:

425 
	`p›_cur
();

426  
rvÆ
;

427 
	}
}

432 
	$vÆid_bno
(

433 
xfs_agnumbî_t
 
agno
,

434 
xfs_agblock_t
 
agbno
)

436 i‡(
agno
 < (
mp
->
m_sb
.
sb_agcou¡
 - 1Ë&& 
agbno
 > 0 &&

437 
agbno
 <
mp
->
m_sb
.
sb_agblocks
)

439 i‡(
agno
 =(
mp
->
m_sb
.
sb_agcou¡
 - 1Ë&& 
agbno
 > 0 &&

440 
agbno
 <(
mp
->
m_sb
.
sb_dblocks
 -

441 (
xfs_rfsblock_t
)(
mp
->
m_sb
.
sb_agcou¡
 - 1) *

442 
mp
->
m_sb
.
sb_agblocks
))

446 
	}
}

450 
	$sˇnfunc_‰ì•
(

451 
xfs_båì_block
 *
block
,

452 
xfs_agnumbî_t
 
agno
,

453 
xfs_agblock_t
 
agbno
,

454 
Àvñ
,

455 
ty≤m_t
 
bty≥
,

456 *
¨g
)

458 
xfs_Æloc_±r_t
 *
µ
;

459 
i
;

460 
numªcs
;

462 i‡(
Àvñ
 == 0)

465 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

466 i‡(
numªcs
 > 
mp
->
m_Æloc_mxr
[1]) {

467 i‡(
show_w¨nögs
)

468 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in %s block %u/%u",

469 
numªcs
, 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

473 
µ
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

474 
i
 = 0; i < 
numªcs
; i++) {

475 i‡(!
	`vÆid_bno
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]))) {

476 i‡(
show_w¨nögs
)

477 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

479 
agno
, 
	`be32_to_˝u
(
µ
[
i
]),

480 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

483 i‡(!
	`sˇn_båì
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 
bty≥
, 
¨g
,

484 
sˇnfunc_‰ì•
))

488 
	}
}

491 
	$c›y_‰ì_bno_båì
(

492 
xfs_agnumbî_t
 
agno
,

493 
xfs_agf_t
 *
agf
)

495 
xfs_agblock_t
 
roŸ
;

496 
Àvñs
;

498 
roŸ
 = 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_BNO
]);

499 
Àvñs
 = 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNO
]);

502 i‡(
roŸ
 =0 ||ÑoŸ > 
mp
->
m_sb
.
sb_agblocks
) {

503 i‡(
show_w¨nögs
)

504 
	`¥öt_w¨nög
("invalid blockÇumber (%u) in bnobt "

505 "roŸ i¿ag‡%u", 
roŸ
, 
agno
);

508 i‡(
Àvñs
 >
XFS_BTREE_MAXLEVELS
) {

509 i‡(
show_w¨nögs
)

510 
	`¥öt_w¨nög
("invalidÜevel (%u) in bnobtÑoot "

511 "öág‡%u", 
Àvñs
, 
agno
);

515  
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_BNOBT
, 
agf
, 
sˇnfunc_‰ì•
);

516 
	}
}

519 
	$c›y_‰ì_˙t_båì
(

520 
xfs_agnumbî_t
 
agno
,

521 
xfs_agf_t
 *
agf
)

523 
xfs_agblock_t
 
roŸ
;

524 
Àvñs
;

526 
roŸ
 = 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_CNT
]);

527 
Àvñs
 = 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNT
]);

530 i‡(
roŸ
 =0 ||ÑoŸ > 
mp
->
m_sb
.
sb_agblocks
) {

531 i‡(
show_w¨nögs
)

532 
	`¥öt_w¨nög
("invalid blockÇumber (%u) in cntbt "

533 "roŸ i¿ag‡%u", 
roŸ
, 
agno
);

536 i‡(
Àvñs
 >
XFS_BTREE_MAXLEVELS
) {

537 i‡(
show_w¨nögs
)

538 
	`¥öt_w¨nög
("invalidÜevel (%u) in cntbtÑoot "

539 "öág‡%u", 
Àvñs
, 
agno
);

543  
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_CNTBT
, 
agf
, 
sˇnfunc_‰ì•
);

544 
	}
}

547 
	$sˇnfunc_rm≠bt
(

548 
xfs_båì_block
 *
block
,

549 
xfs_agnumbî_t
 
agno
,

550 
xfs_agblock_t
 
agbno
,

551 
Àvñ
,

552 
ty≤m_t
 
bty≥
,

553 *
¨g
)

555 
xfs_rm≠_±r_t
 *
µ
;

556 
i
;

557 
numªcs
;

559 i‡(
Àvñ
 == 0)

562 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

563 i‡(
numªcs
 > 
mp
->
m_rm≠_mxr
[1]) {

564 i‡(
show_w¨nögs
)

565 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in %s block %u/%u",

566 
numªcs
, 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

570 
µ
 = 
	`XFS_RMAP_PTR_ADDR
(
block
, 1, 
mp
->
m_rm≠_mxr
[1]);

571 
i
 = 0; i < 
numªcs
; i++) {

572 i‡(!
	`vÆid_bno
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]))) {

573 i‡(
show_w¨nögs
)

574 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

576 
agno
, 
	`be32_to_˝u
(
µ
[
i
]),

577 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

580 i‡(!
	`sˇn_båì
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 
bty≥
, 
¨g
,

581 
sˇnfunc_rm≠bt
))

585 
	}
}

588 
	$c›y_rm≠_båì
(

589 
xfs_agnumbî_t
 
agno
,

590 
xfs_agf
 *
agf
)

592 
xfs_agblock_t
 
roŸ
;

593 
Àvñs
;

595 i‡(!
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

598 
roŸ
 = 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_RMAP
]);

599 
Àvñs
 = 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_RMAP
]);

602 i‡(
roŸ
 =0 ||ÑoŸ > 
mp
->
m_sb
.
sb_agblocks
) {

603 i‡(
show_w¨nögs
)

604 
	`¥öt_w¨nög
("invalid blockÇumber (%u) inÑmapbt "

605 "roŸ i¿ag‡%u", 
roŸ
, 
agno
);

608 i‡(
Àvñs
 >
XFS_BTREE_MAXLEVELS
) {

609 i‡(
show_w¨nögs
)

610 
	`¥öt_w¨nög
("invalidÜevel (%u) inÑmapbtÑoot "

611 "öág‡%u", 
Àvñs
, 
agno
);

615  
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_RMAPBT
, 
agf
, 
sˇnfunc_rm≠bt
);

616 
	}
}

619 
	$sˇnfunc_ªf˙tbt
(

620 
xfs_båì_block
 *
block
,

621 
xfs_agnumbî_t
 
agno
,

622 
xfs_agblock_t
 
agbno
,

623 
Àvñ
,

624 
ty≤m_t
 
bty≥
,

625 *
¨g
)

627 
xfs_ªfcou¡_±r_t
 *
µ
;

628 
i
;

629 
numªcs
;

631 i‡(
Àvñ
 == 0)

634 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

635 i‡(
numªcs
 > 
mp
->
m_ªfc_mxr
[1]) {

636 i‡(
show_w¨nögs
)

637 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in %s block %u/%u",

638 
numªcs
, 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

642 
µ
 = 
	`XFS_REFCOUNT_PTR_ADDR
(
block
, 1, 
mp
->
m_ªfc_mxr
[1]);

643 
i
 = 0; i < 
numªcs
; i++) {

644 i‡(!
	`vÆid_bno
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]))) {

645 i‡(
show_w¨nögs
)

646 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

648 
agno
, 
	`be32_to_˝u
(
µ
[
i
]),

649 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

652 i‡(!
	`sˇn_båì
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 
bty≥
, 
¨g
,

653 
sˇnfunc_ªf˙tbt
))

657 
	}
}

660 
	$c›y_ªfcou¡_båì
(

661 
xfs_agnumbî_t
 
agno
,

662 
xfs_agf
 *
agf
)

664 
xfs_agblock_t
 
roŸ
;

665 
Àvñs
;

667 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

670 
roŸ
 = 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_roŸ
);

671 
Àvñs
 = 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_Àvñ
);

674 i‡(
roŸ
 =0 ||ÑoŸ > 
mp
->
m_sb
.
sb_agblocks
) {

675 i‡(
show_w¨nögs
)

676 
	`¥öt_w¨nög
("invalid blockÇumber (%u) inÑefcntbt "

677 "roŸ i¿ag‡%u", 
roŸ
, 
agno
);

680 i‡(
Àvñs
 >
XFS_BTREE_MAXLEVELS
) {

681 i‡(
show_w¨nögs
)

682 
	`¥öt_w¨nög
("invalidÜevel (%u) inÑefcntbtÑoot "

683 "öág‡%u", 
Àvñs
, 
agno
);

687  
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_REFCBT
, 
agf
, 
sˇnfunc_ªf˙tbt
);

688 
	}
}

692 
	s«me_ít
 {

693 
«me_ít
 *
	m√xt
;

694 
xfs_dahash_t
 
	mhash
;

695 
	m«mñí
;

696 
	m«me
[1];

699 
	#NAME_TABLE_SIZE
 4096

	)

701 
«me_ít
 *
	g«mëabÀ
[
NAME_TABLE_SIZE
];

704 
	$«mëabÀ_˛ór
()

706 
i
;

707 
«me_ít
 *
ít
;

709 
i
 = 0; i < 
NAME_TABLE_SIZE
; i++) {

710 (
ít
 = 
«mëabÀ
[
i
])) {

711 
«mëabÀ
[
i
] = 
ít
->
√xt
;

712 
	`‰ì
(
ít
);

715 
	}
}

721 
«me_ít
 *

722 
	$«mëabÀ_föd
(
xfs_dahash_t
 
hash
, 
«mñí
, *
«me
)

724 
«me_ít
 *
ít
;

726 
ít
 = 
«mëabÀ
[
hash
 % 
NAME_TABLE_SIZE
];É¡;É¡ =É¡->
√xt
) {

727 i‡(
ít
->
hash
 =hash &&É¡->
«mñí
 ==Çamelen &&

728 !
	`memcmp
(
ít
->
«me
,Çame, 
«mñí
))

729  
ít
;

731  
NULL
;

732 
	}
}

738 
«me_ít
 *

739 
	$«mëabÀ_add
(
xfs_dahash_t
 
hash
, 
«mñí
, *
«me
)

741 
«me_ít
 *
ít
;

743 
ít
 = 
	`mÆloc
( *íà+ 
«mñí
);

744 i‡(!
ít
)

745  
NULL
;

747 
ít
->
«mñí
 =Çamelen;

748 
	`mem˝y
(
ít
->
«me
,Çame, 
«mñí
);

749 
ít
->
hash
 = hash;

750 
ít
->
√xt
 = 
«mëabÀ
[
hash
 % 
NAME_TABLE_SIZE
];

752 
«mëabÀ
[
hash
 % 
NAME_TABLE_SIZE
] = 
ít
;

754  
ít
;

755 
	}
}

757 
	#is_övÆid_ch¨
(
c
Ë((cË='/' || (cË='\0')

	)

758 
	#rﬁ32
(
x
,
y
Ë(((xË<< (y)Ë| ((xË>> (32 - (y))))

	)

760 
ölöe
 

761 
	$øndom_fûíame_ch¨
()

763 
fûíame_Æphabë
[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

767  
fûíame_Æphabë
[
	`øndom
() % ( filename_alphabet - 1)];

768 
	}
}

770 
	#ORPHANAGE
 "lo°+found"

	)

771 
	#ORPHANAGE_LEN
 ( (
ORPHANAGE
Ë- 1)

	)

773 
ölöe
 

774 
	$is_‹ph™age_dú
(

775 
xfs_mou¡
 *
mp
,

776 
xfs_öo_t
 
dú_öo
,

777 
size_t
 
«me_Àn
,

778 *
«me
)

780  
dú_öo
 =
mp
->
m_sb
.
sb_roŸöo
 &&

781 
«me_Àn
 =
ORPHANAGE_LEN
 &&

782 !
	`memcmp
(
«me
, 
ORPHANAGE
, 
ORPHANAGE_LEN
);

783 
	}
}

794 
	$ö_lo°_found
(

795 
xfs_öo_t
 
öo
,

796 
«mñí
,

797 *
«me
)

799 
xfs_öo_t
 
‹ph™age_öo
 = 0;

800 
s
[24];

801 
¶í
;

805 
	`ASSERT
(
öo
 != 0);

806 i‡(!
‹ph™age_öo
 && 
	`is_‹ph™age_dú
(
mp
, 
cur_öo
, 
«mñí
, 
«me
))

807 
‹ph™age_öo
 = 
öo
;

811 i‡(
öo
 =
‹ph™age_öo
)

816 i‡(
cur_öo
 !
‹ph™age_öo
)

824 
¶í
 = 
	`¢¥ötf
(
s
,  (s), "%Œu", (Ë
öo
);

826  
¶í
 =
«mñí
 && !
	`memcmp
(
«me
, 
s
,Çamelen);

827 
	}
}

835 
	$obfusˇã_«me
(

836 
xfs_dahash_t
 
hash
,

837 
size_t
 
«me_Àn
,

838 *
«me
)

840 *
√wp
 = 
«me
;

841 
i
;

842 
xfs_dahash_t
 
√w_hash
 = 0;

843 *
fú°
;

844 
high_bô
;

845 
shi·
;

854 i‡(
«me_Àn
 < 5)

862 
i
 = 0; i < 
«me_Àn
 - 5; i++) {

863 *
√wp
 = 
	`øndom_fûíame_ch¨
();

864 
√w_hash
 = *
√wp
 ^ 
	`rﬁ32
(new_hash, 7);

865 
√wp
++;

877 
√w_hash
 = 
	`rﬁ32
“ew_hash, 3Ë^ 
hash
;

879 
fú°
 = 
√wp
;

880 
high_bô
 = 0;

881 
shi·
 = 28; shift >= 0; shift -= 7) {

882 *
√wp
 = (
√w_hash
 >> 
shi·
 & 0x7fË^ 
high_bô
;

883 i‡(
	`is_övÆid_ch¨
(*
√wp
)) {

884 *
√wp
 ^= 1;

885 
high_bô
 = 0x80;

887 
high_bô
 = 0;

888 
	`ASSERT
(!
	`is_övÆid_ch¨
(*
√wp
));

889 
√wp
++;

899 i‡(
high_bô
) {

900 *
fú°
 ^= 0x10;

901 
	`ASSERT
(!
	`is_övÆid_ch¨
(*
fú°
));

903 
	`ASSERT
(
	`libxfs_da_hash«me
(
«me
, 
«me_Àn
Ë=
hash
);

904 
	}
}

991 
	$Êù_bô
(

992 
size_t
 
«me_Àn
,

993 *
«me
,

994 
uöt32_t
 
bô£q
)

996 
ödex
;

997 
size_t
 
off£t
;

998 *
p0
, *
p1
;

999 
m0
, 
m1
;

1001 
byã
;

1002 
bô
;

1003 } 
bô_to_Êù
[][2] = {

1023 
ödex
 = 0; index < 
	`ARRAY_SIZE
(
bô_to_Êù
); index++)

1024 i‡(
bô_to_Êù
[
ödex
][1].
byã
 >
«me_Àn
)

1032 i‡(
bô£q
 > --
ödex
)

1040 
off£t
 = 
«me_Àn
 - (
bô_to_Êù
[
ödex
][1].
byã
 + 1);

1041 
ödex
 -
bô£q
;

1043 
p0
 = 
«me
 + 
off£t
 + 
bô_to_Êù
[
ödex
][0].
byã
;

1044 
p1
 = 
«me
 + 
off£t
 + 
bô_to_Êù
[
ödex
][1].
byã
;

1045 
m0
 = 1 << 
bô_to_Êù
[
ödex
][0].
bô
;

1046 
m1
 = 1 << 
bô_to_Êù
[
ödex
][1].
bô
;

1050 i‡(
	`is_övÆid_ch¨
(*
p0
 ^ 
m0
Ë|| is_övÆid_ch¨(*
p1
 ^ 
m1
))

1053 *
p0
 ^
m0
;

1054 *
p1
 ^
m1
;

1057 
	}
}

1129 
	$föd_Æã∫©e
(

1130 
size_t
 
«me_Àn
,

1131 *
«me
,

1132 
uöt32_t
 
£q
)

1134 
uöt32_t
 
bô£q
 = 0;

1135 
uöt32_t
 
bôs
 = 
£q
;

1137 i‡(!
£q
)

1139 i‡(
«me_Àn
 < 2)

1142 
bô£q
 = 0; 
bôs
; bitseq++) {

1143 
uöt32_t
 
mask
 = 1 << 
bô£q
;

1144 
fb
;

1146 i‡(!(
bôs
 & 
mask
))

1149 
fb
 = 
	`Êù_bô
(
«me_Àn
, 
«me
, 
bô£q
);

1150 i‡(
fb
 < 1)

1151  
fb
 ? -1 : 0;

1152 
bôs
 ^
mask
;

1156 
	}
}

1168 
	$h™dÀ_du∂iˇã_«me
(
xfs_dahash_t
 
hash
, 
size_t
 
«me_Àn
, *
«me
)

1170 
√w_«me
[
«me_Àn
 + 1];

1171 
uöt32_t
 
£q
 = 1;

1173 i‡(!
	`«mëabÀ_föd
(
hash
, 
«me_Àn
, 
«me
))

1179 
found
;

1183 
	`mem˝y
(
√w_«me
, 
«me
, 
«me_Àn
);

1184 
found
 = 
	`föd_Æã∫©e
(
«me_Àn
, 
√w_«me
, 
£q
++);

1185 i‡(
found
 < 0)

1187 } !
found
);

1188 } 
	`«mëabÀ_föd
(
hash
, 
«me_Àn
, 
√w_«me
));

1194 
	`mem˝y
(
«me
, 
√w_«me
, 
«me_Àn
);

1197 
	}
}

1200 
	$gíî©e_obfusˇãd_«me
(

1201 
xfs_öo_t
 
öo
,

1202 
«mñí
,

1203 *
«me
)

1205 
xfs_dahash_t
 
hash
;

1213 i‡(
öo
 && 
	`ö_lo°_found
(öo, 
«mñí
, 
«me
))

1222 i‡(*
«me
 == '/')

1223 
«me
++;

1227 
hash
 = 
	`libxfs_da_hash«me
(
«me
, 
«mñí
);

1228 
	`obfusˇã_«me
(
hash
, 
«mñí
, 
«me
);

1236 i‡(!
	`h™dÀ_du∂iˇã_«me
(
hash
, 
«mñí
, 
«me
)) {

1237 
	`¥öt_w¨nög
("duplicateÇame for inode %llu "

1239 (Ë
öo
,

1240 (Ë
cur_öo
);

1246 i‡(!
	`«mëabÀ_add
(
hash
, 
«mñí
, 
«me
))

1247 
	`¥öt_w¨nög
("unableÅoÑecordÇame for inode %llu "

1249 (Ë
öo
,

1250 (Ë
cur_öo
);

1251 
	}
}

1254 
	$¥o˚ss_sf_dú
(

1255 
xfs_döode_t
 *
dù
)

1257 
xfs_dú2_sf_hdr
 *
sÂ
;

1258 
xfs_dú2_sf_íåy_t
 *
s„p
;

1259 
__uöt64_t
 
öo_dú_size
;

1260 
i
;

1262 
sÂ
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

1263 
öo_dú_size
 = 
	`be64_to_˝u
(
dù
->
di_size
);

1264 i‡(
öo_dú_size
 > 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
)) {

1265 
öo_dú_size
 = 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
);

1266 i‡(
show_w¨nögs
)

1267 
	`¥öt_w¨nög
("invalid size in dir inode %llu",

1268 ()
cur_öo
);

1271 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
);

1272 
i
 = 0; (ò< 
sÂ
->
cou¡
) &&

1273 ((*)
s„p
 - (*)
sÂ
 < 
öo_dú_size
); 
i
++) {

1279 
«mñí
 = 
s„p
->namelen;

1281 i‡(
«mñí
 == 0) {

1282 i‡(
show_w¨nögs
)

1283 
	`¥öt_w¨nög
("zeroÜengthÉntry in dir inode "

1284 "%Œu", ()
cur_öo
);

1285 i‡(
i
 !
sÂ
->
cou¡
 - 1)

1287 
«mñí
 = 
öo_dú_size
 - ((*)&
s„p
->
«me
[0] -

1288 (*)
sÂ
);

1289 } i‡((*)
s„p
 - (*)
sÂ
 +

1290 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 
s„p
->
«mñí
) >

1291 
öo_dú_size
) {

1292 i‡(
show_w¨nögs
)

1293 
	`¥öt_w¨nög
("entryÜength in dir inode %llu "

1294 "ovîÊow†•a˚", ()
cur_öo
);

1295 i‡(
i
 !
sÂ
->
cou¡
 - 1)

1297 
«mñí
 = 
öo_dú_size
 - ((*)&
s„p
->
«me
[0] -

1298 (*)
sÂ
);

1301 i‡(
obfusˇã
)

1302 
	`gíî©e_obfusˇãd_«me
(

1303 
	`M_DIROPS
(
mp
)->
	`sf_gë_öo
(
sÂ
, 
s„p
),

1304 
«mñí
, &
s„p
->
«me
[0]);

1306 
s„p
 = (
xfs_dú2_sf_íåy_t
 *)((*)sfep +

1307 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 
«mñí
));

1311 i‡(
zîo_°Æe_d©a
 && (
öo_dú_size
 < 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
)))

1312 
	`mem£t
(
s„p
, 0, 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
Ë- 
öo_dú_size
);

1313 
	}
}

1323 
	$obfusˇã_∑th_comp⁄íts
(

1324 *
buf
,

1325 
__uöt64_t
 
Àn
)

1327 *
comp
 = (*)
buf
;

1328 *
íd
 = 
comp
 + 
Àn
;

1329 
xfs_dahash_t
 
hash
;

1331 
comp
 < 
íd
) {

1332 *
¶ash
;

1333 
«mñí
;

1336 
¶ash
 = 
	`°rchr
((*)
comp
, '/');

1337 i‡(!
¶ash
) {

1339 
«mñí
 = 
	`°∫Àn
((*)
comp
, 
Àn
);

1340 
hash
 = 
	`libxfs_da_hash«me
(
comp
, 
«mñí
);

1341 
	`obfusˇã_«me
(
hash
, 
«mñí
, 
comp
);

1344 
«mñí
 = 
¶ash
 - (*)
comp
;

1346 i‡(!
«mñí
) {

1347 
comp
++;

1348 
Àn
--;

1351 
hash
 = 
	`libxfs_da_hash«me
(
comp
, 
«mñí
);

1352 
	`obfusˇã_«me
(
hash
, 
«mñí
, 
comp
);

1353 
comp
 +
«mñí
 + 1;

1354 
Àn
 -
«mñí
 + 1;

1356 
	}
}

1359 
	$¥o˚ss_sf_symlök
(

1360 
xfs_döode_t
 *
dù
)

1362 
__uöt64_t
 
Àn
;

1363 *
buf
;

1365 
Àn
 = 
	`be64_to_˝u
(
dù
->
di_size
);

1366 i‡(
Àn
 > 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
)) {

1367 i‡(
show_w¨nögs
)

1368 
	`¥öt_w¨nög
("invalid size (%d) in symlink inode %llu",

1369 
Àn
, ()
cur_öo
);

1370 
Àn
 = 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
);

1373 
buf
 = (*)
	`XFS_DFORK_DPTR
(
dù
);

1374 i‡(
obfusˇã
)

1375 
	`obfusˇã_∑th_comp⁄íts
(
buf
, 
Àn
);

1378 i‡(
zîo_°Æe_d©a
 && 
Àn
 < 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
))

1379 
	`mem£t
(&
buf
[
Àn
], 0, 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
) -Üen);

1380 
	}
}

1383 
	$¥o˚ss_sf_©å
(

1384 
xfs_döode_t
 *
dù
)

1391 
xfs_©å_sh‹tf‹m_t
 *
asÂ
;

1392 
xfs_©å_sf_íåy_t
 *
as„p
;

1393 
öo_©å_size
;

1394 
i
;

1396 
asÂ
 = (
xfs_©å_sh‹tf‹m_t
 *)
	`XFS_DFORK_APTR
(
dù
);

1397 i‡(
asÂ
->
hdr
.
cou¡
 == 0)

1400 
öo_©å_size
 = 
	`be16_to_˝u
(
asÂ
->
hdr
.
tŸsize
);

1401 i‡(
öo_©å_size
 > 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
)) {

1402 
öo_©å_size
 = 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
);

1403 i‡(
show_w¨nögs
)

1404 
	`¥öt_w¨nög
("invalidáttr size in inode %llu",

1405 ()
cur_öo
);

1408 
as„p
 = &
asÂ
->
li°
[0];

1409 
i
 = 0; (ò< 
asÂ
->
hdr
.
cou¡
) &&

1410 ((*)
as„p
 - (*)
asÂ
 < 
öo_©å_size
); 
i
++) {

1412 
«mñí
 = 
as„p
->namelen;

1414 i‡(
«mñí
 == 0) {

1415 i‡(
show_w¨nögs
)

1416 
	`¥öt_w¨nög
("zeroÜengtháttrÉntry in inode "

1417 "%Œu", ()
cur_öo
);

1419 } i‡((*)
as„p
 - (*)
asÂ
 +

1420 
	`XFS_ATTR_SF_ENTSIZE
(
as„p
Ë> 
öo_©å_size
) {

1421 i‡(
show_w¨nögs
)

1422 
	`¥öt_w¨nög
("attrÉntryÜength in inode %llu "

1423 "ovîÊow†•a˚", ()
cur_öo
);

1427 i‡(
obfusˇã
) {

1428 
	`gíî©e_obfusˇãd_«me
(0, 
as„p
->
«mñí
,

1429 &
as„p
->
«mevÆ
[0]);

1430 
	`mem£t
(&
as„p
->
«mevÆ
[as„p->
«mñí
], 'v',

1431 
as„p
->
vÆuñí
);

1434 
as„p
 = (
xfs_©å_sf_íåy_t
 *)((*)asfep +

1435 
	`XFS_ATTR_SF_ENTSIZE
(
as„p
));

1439 i‡(
zîo_°Æe_d©a
 && (
öo_©å_size
 < 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
)))

1440 
	`mem£t
(
as„p
, 0, 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
Ë- 
öo_©å_size
);

1441 
	}
}

1444 
	$¥o˚ss_dú_d©a_block
(

1445 *
block
,

1446 
xfs_fûeoff_t
 
off£t
,

1447 
is_block_f‹m©
)

1455 
dú_off£t
;

1456 *
±r
;

1457 *
íd±r
;

1458 
íd_of_d©a
;

1459 
w™tmagic
;

1460 
xfs_dú2_d©a_hdr
 *
d©ahdr
;

1462 
d©ahdr
 = (
xfs_dú2_d©a_hdr
 *)
block
;

1464 i‡(
is_block_f‹m©
) {

1465 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

1466 
xfs_dú2_block_èû_t
 *
bç
;

1468 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
d©ahdr
);

1469 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

1470 i‡((*)
bÕ
 > (*)
bç
)

1471 
bÕ
 = (
xfs_dú2_Àaf_íåy_t
 *)
bç
;

1473 
íd_of_d©a
 = (*)
bÕ
 - 
block
;

1474 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1475 
w™tmagic
 = 
XFS_DIR3_BLOCK_MAGIC
;

1477 
w™tmagic
 = 
XFS_DIR2_BLOCK_MAGIC
;

1479 
íd_of_d©a
 = 
mp
->
m_dú_geo
->
fsbcou¡
 << mp->
m_sb
.
sb_blocklog
;

1480 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1481 
w™tmagic
 = 
XFS_DIR3_DATA_MAGIC
;

1483 
w™tmagic
 = 
XFS_DIR2_DATA_MAGIC
;

1486 i‡(
	`be32_to_˝u
(
d©ahdr
->
magic
Ë!
w™tmagic
) {

1487 i‡(
show_w¨nögs
)

1488 
	`¥öt_w¨nög
(

1490 ()
cur_öo
, ()
off£t
);

1494 
dú_off£t
 = 
	`M_DIROPS
(
mp
)->
d©a_íåy_off£t
;

1495 
±r
 = 
block
 + 
dú_off£t
;

1496 
íd±r
 = 
block
 + 
mp
->
m_dú_geo
->
blksize
;

1498 
±r
 < 
íd±r
 && 
dú_off£t
 < 
íd_of_d©a
) {

1499 
xfs_dú2_d©a_íåy_t
 *
dï
;

1500 
xfs_dú2_d©a_unu£d_t
 *
dup
;

1501 
Àngth
;

1503 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

1505 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

1506 
Àngth
 = 
	`be16_to_˝u
(
dup
->length);

1507 i‡(
dú_off£t
 + 
Àngth
 > 
íd_of_d©a
 ||

1508 !
Àngth
 || (Àngth & (
XFS_DIR2_DATA_ALIGN
 - 1))) {

1509 i‡(
show_w¨nögs
)

1510 
	`¥öt_w¨nög
(

1512 ()
cur_öo
);

1515 i‡(
	`be16_to_˝u
(*
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
)) !=

1516 
dú_off£t
)

1518 
dú_off£t
 +
Àngth
;

1519 
±r
 +
Àngth
;

1525 i‡(
zîo_°Æe_d©a
) {

1526 
zÀn
 = 
Àngth
 -

1527 (
xfs_dú2_d©a_unu£d_t
);

1529 i‡(
zÀn
 > 0) {

1530 
	`mem£t
(&
dup
->
èg
, 0, 
zÀn
);

1531 
iocur_t›
->
√ed_¸c
 = 1;

1534 i‡(
dú_off£t
 >
íd_of_d©a
 || 
±r
 >
íd±r
)

1538 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
±r
;

1539 
Àngth
 = 
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

1541 i‡(
dú_off£t
 + 
Àngth
 > 
íd_of_d©a
 ||

1542 
±r
 + 
Àngth
 > 
íd±r
) {

1543 i‡(
show_w¨nögs
)

1544 
	`¥öt_w¨nög
(

1546 ()
cur_öo
);

1549 i‡(
	`be16_to_˝u
(*
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
)) !=

1550 
dú_off£t
)

1553 i‡(
obfusˇã
)

1554 
	`gíî©e_obfusˇãd_«me
(
	`be64_to_˝u
(
dï
->
öumbî
),

1555 
dï
->
«mñí
, &dï->
«me
[0]);

1556 
dú_off£t
 +
Àngth
;

1557 
±r
 +
Àngth
;

1559 i‡(
zîo_°Æe_d©a
) {

1561 
zÀn
 =

1562 (*)
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
) -

1563 (*)&
dï
->
«me
[dï->
«mñí
] - 1;

1564 i‡(
zÀn
 > 0) {

1565 
	`mem£t
(&
dï
->
«me
[dï->
«mñí
] + 1, 0, 
zÀn
);

1566 
iocur_t›
->
√ed_¸c
 = 1;

1570 
	}
}

1573 
	$¥o˚ss_symlök_block
(

1574 *
block
)

1576 *
lök
 = 
block
;

1578 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&(
mp
)->
m_sb
))

1579 
lök
 +(
xfs_dsymlök_hdr
);

1581 i‡(
obfusˇã
)

1582 
	`obfusˇã_∑th_comp⁄íts
(
lök
, 
	`XFS_SYMLINK_BUF_SPACE
(
mp
,

1583 
mp
->
m_sb
.
sb_blocksize
));

1584 i‡(
zîo_°Æe_d©a
) {

1585 
size_t
 
lökÀn
, 
zÀn
;

1587 
lökÀn
 = 
	`°æí
(
lök
);

1588 
zÀn
 = 
mp
->
m_sb
.
sb_blocksize
 - 
lökÀn
;

1589 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1590 
zÀn
 -(
xfs_dsymlök_hdr
);

1591 i‡(
zÀn
 < 
mp
->
m_sb
.
sb_blocksize
)

1592 
	`mem£t
(
lök
 + 
lökÀn
, 0, 
zÀn
);

1594 
	}
}

1596 
	#MAX_REMOTE_VALS
 4095

	)

1598 
	s©å_d©a_s
 {

1599 
	mªmŸe_vÆ_cou¡
;

1600 
xfs_dablk_t
 
	mªmŸe_vÆs
[
MAX_REMOTE_VALS
];

1601 } 
	g©å_d©a
;

1603 
ölöe
 

1604 
	$add_ªmŸe_vÆs
(

1605 
xfs_dablk_t
 
blockidx
,

1606 
Àngth
)

1608 
Àngth
 > 0 && 
©å_d©a
.
ªmŸe_vÆ_cou¡
 < 
MAX_REMOTE_VALS
) {

1609 
©å_d©a
.
ªmŸe_vÆs
[©å_d©a.
ªmŸe_vÆ_cou¡
] = 
blockidx
;

1610 
©å_d©a
.
ªmŸe_vÆ_cou¡
++;

1611 
blockidx
++;

1612 
Àngth
 -
mp
->
m_sb
.
sb_blocksize
;

1615 i‡(
©å_d©a
.
ªmŸe_vÆ_cou¡
 >
MAX_REMOTE_VALS
) {

1616 
	`¥öt_w¨nög
(

1619 
	}
}

1623 
	$¥o˚ss_©å_block
(

1624 *
block
,

1625 
xfs_fûeoff_t
 
off£t
)

1627 
xfs_©å_Àafblock
 *
Àaf
;

1628 
xfs_©å3_i˛óf_hdr
 
hdr
;

1629 
i
;

1630 
√¡rõs
;

1631 
xfs_©å_Àaf_íåy_t
 *
íåy
;

1632 
xfs_©å_Àaf_«me_loˇl_t
 *
loˇl
;

1633 
xfs_©å_Àaf_«me_ªmŸe_t
 *
ªmŸe
;

1634 
__uöt32_t
 
bs
 = 
mp
->
m_sb
.
sb_blocksize
;

1635 *
fú°_«me
;

1638 
Àaf
 = (
xfs_©å_Àafblock_t
 *)
block
;

1641 i‡((
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR_LEAF_MAGIC
) &&

1642 (
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR3_LEAF_MAGIC
)) {

1643 
i
 = 0; i < 
©å_d©a
.
ªmŸe_vÆ_cou¡
; i++) {

1644 i‡(
obfusˇã
 && 
©å_d©a
.
ªmŸe_vÆs
[
i
] =
off£t
)

1646 
	`mem£t
(
block
 +

1647 (
bs
 - 
	`XFS_ATTR3_RMT_BUF_SPACE
(
mp
, bs)),

1648 'v', 
	`XFS_ATTR3_RMT_BUF_SPACE
(
mp
, 
bs
));

1654 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
hdr
, 
Àaf
);

1656 
√¡rõs
 = 
hdr
.
cou¡
;

1657 i‡(
√¡rõs
 == 0 ||

1658 
√¡rõs
 * (
xfs_©å_Àaf_íåy_t
) +

1659 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
) >

1660 
	`XFS_ATTR3_RMT_BUF_SPACE
(
mp
, 
bs
)) {

1661 i‡(
show_w¨nögs
)

1662 
	`¥öt_w¨nög
("invalidáttr count in inode %llu",

1663 ()
cur_öo
);

1667 
íåy
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

1669 
fú°_«me
 = 
NULL
;

1670 
i
 = 0; i < 
√¡rõs
; i++, 
íåy
++) {

1671 
∆í
, 
vÀn
, 
zÀn
;

1674 i‡(!
fú°_«me
 || 
	`xfs_©å3_Àaf_«me
(
Àaf
, 
i
) < first_name)

1675 
fú°_«me
 = 
	`xfs_©å3_Àaf_«me
(
Àaf
, 
i
);

1677 i‡(
	`be16_to_˝u
(
íåy
->
«meidx
Ë> 
mp
->
m_sb
.
sb_blocksize
) {

1678 i‡(
show_w¨nögs
)

1679 
	`¥öt_w¨nög
(

1681 ()
cur_öo
);

1684 i‡(
íåy
->
Êags
 & 
XFS_ATTR_LOCAL
) {

1685 
loˇl
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
i
);

1686 i‡(
loˇl
->
«mñí
 == 0) {

1687 i‡(
show_w¨nögs
)

1688 
	`¥öt_w¨nög
(

1690 ()
cur_öo
);

1693 i‡(
obfusˇã
) {

1694 
	`gíî©e_obfusˇãd_«me
(0, 
loˇl
->
«mñí
,

1695 &
loˇl
->
«mevÆ
[0]);

1696 
	`mem£t
(&
loˇl
->
«mevÆ
[loˇl->
«mñí
], 'v',

1697 
	`be16_to_˝u
(
loˇl
->
vÆuñí
));

1700 
∆í
 = 
loˇl
->
«mñí
;

1701 
vÀn
 = 
	`be16_to_˝u
(
loˇl
->
vÆuñí
);

1702 
zÀn
 = 
	`xfs_©å_Àaf_ítsize_loˇl
(
∆í
, 
vÀn
) -

1703 ((
xfs_©å_Àaf_«me_loˇl_t
) - 1 +

1704 
∆í
 + 
vÀn
);

1705 i‡(
zîo_°Æe_d©a
)

1706 
	`mem£t
(&
loˇl
->
«mevÆ
[
∆í
 + 
vÀn
], 0, 
zÀn
);

1708 
ªmŸe
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
i
);

1709 i‡(
ªmŸe
->
«mñí
 =0 ||ÑemŸe->
vÆueblk
 == 0) {

1710 i‡(
show_w¨nögs
)

1711 
	`¥öt_w¨nög
(

1713 ()
cur_öo
);

1716 i‡(
obfusˇã
) {

1717 
	`gíî©e_obfusˇãd_«me
(0, 
ªmŸe
->
«mñí
,

1718 &
ªmŸe
->
«me
[0]);

1719 
	`add_ªmŸe_vÆs
(
	`be32_to_˝u
(
ªmŸe
->
vÆueblk
),

1720 
	`be32_to_˝u
(
ªmŸe
->
vÆuñí
));

1723 
∆í
 = 
ªmŸe
->
«mñí
;

1724 
zÀn
 = 
	`xfs_©å_Àaf_ítsize_ªmŸe
(
∆í
) -

1725 ((
xfs_©å_Àaf_«me_ªmŸe_t
) - 1 +

1726 
∆í
);

1727 i‡(
zîo_°Æe_d©a
)

1728 
	`mem£t
(&
ªmŸe
->
«me
[
∆í
], 0, 
zÀn
);

1733 i‡(
zîo_°Æe_d©a
) {

1734 
xfs_©å_Àaf_íåy
 *
íåõs
;

1736 
íåõs
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

1737 
	`mem£t
(&
íåõs
[
√¡rõs
], 0,

1738 
fú°_«me
 - (*)&
íåõs
[
√¡rõs
]);

1740 
	}
}

1744 
	$¥o˚ss_sögÀ_fsb_obje˘s
(

1745 
xfs_fûeoff_t
 
o
,

1746 
xfs_fsblock_t
 
s
,

1747 
xfs_fûblks_t
 
c
,

1748 
ty≤m_t
 
bty≥
,

1749 
xfs_fûeoff_t
 
œ°
)

1751 *
dp
;

1752 
ªt
 = 0;

1753 
i
;

1755 
i
 = 0; i < 
c
; i++) {

1756 
	`push_cur
();

1757 
	`£t_cur
(&
ty±ab
[
bty≥
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
s
), 
blkbb
,

1758 
DB_RING_IGN
, 
NULL
);

1760 i‡(!
iocur_t›
->
d©a
) {

1761 
xfs_agnumbî_t
 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
s
);

1762 
xfs_agblock_t
 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
s
);

1764 
	`¥öt_w¨nög
("cannotÑead %s block %u/%u (%llu)",

1765 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
, 
s
);

1766 i‡(
°›_⁄_ªad_îr‹
)

1767 
ªt
 = -
EIO
;

1768 
out_p›
;

1772 i‡(!
obfusˇã
 && !
zîo_°Æe_d©a
)

1773 
wrôe
;

1776 i‡(
zîo_°Æe_d©a
) {

1777 
xfs_da_öäode_t
 *
node
 = 
iocur_t›
->
d©a
;

1778 
magic
 = 
	`be16_to_˝u
(
node
->
hdr
.
öfo
.magic);

1780 i‡(
magic
 =
XFS_DA_NODE_MAGIC
 ||

1781 
magic
 =
XFS_DA3_NODE_MAGIC
) {

1782 
xfs_da3_i˙ode_hdr
 
hdr
;

1783 
u£d
;

1785 
	`M_DIROPS
(
mp
)->
	`node_hdr_‰om_disk
(&
hdr
, 
node
);

1786 
u£d
 = 
	`M_DIROPS
(
mp
)->
node_hdr_size
;

1788 
u£d
 +
hdr
.
cou¡


1789 * (
xfs_da_node_íåy
);

1791 i‡(
u£d
 < 
mp
->
m_sb
.
sb_blocksize
) {

1792 
	`mem£t
((*)
node
 + 
u£d
, 0,

1793 
mp
->
m_sb
.
sb_blocksize
 - 
u£d
);

1794 
iocur_t›
->
√ed_¸c
 = 1;

1800 
dp
 = 
iocur_t›
->
d©a
;

1801 
bty≥
) {

1802 
TYP_DIR2
:

1803 i‡(
o
 >
mp
->
m_dú_geo
->
Àafblk
)

1806 
	`¥o˚ss_dú_d©a_block
(
dp
, 
o
,

1807 
œ°
 =
mp
->
m_dú_geo
->
fsbcou¡
);

1808 
iocur_t›
->
√ed_¸c
 = 1;

1810 
TYP_SYMLINK
:

1811 
	`¥o˚ss_symlök_block
(
dp
);

1812 
iocur_t›
->
√ed_¸c
 = 1;

1814 
TYP_ATTR
:

1815 
	`¥o˚ss_©å_block
(
dp
, 
o
);

1816 
iocur_t›
->
√ed_¸c
 = 1;

1822 
wrôe
:

1823 
ªt
 = 
	`wrôe_buf
(
iocur_t›
);

1824 
out_p›
:

1825 
	`p›_cur
();

1826 i‡(
ªt
)

1828 
o
++;

1829 
s
++;

1832  
ªt
;

1833 
	}
}

1838 
bbm≠
 
	gmfsb_m≠
;

1839 
	gmfsb_Àngth
;

1842 
	$¥o˚ss_mu…i_fsb_obje˘s
(

1843 
xfs_fûeoff_t
 
o
,

1844 
xfs_fsblock_t
 
s
,

1845 
xfs_fûblks_t
 
c
,

1846 
ty≤m_t
 
bty≥
,

1847 
xfs_fûeoff_t
 
œ°
)

1849 
ªt
 = 0;

1851 
bty≥
) {

1852 
TYP_DIR2
:

1855 
	`¥öt_w¨nög
("badÅy≥ f‹ mu…i-fsb obje˘ %d", 
bty≥
);

1856  -
EINVAL
;

1859 
c
 > 0) {

1860 
bm_Àn
;

1862 i‡(
mfsb_Àngth
 + 
c
 >
mp
->
m_dú_geo
->
fsbcou¡
) {

1863 
bm_Àn
 = 
mp
->
m_dú_geo
->
fsbcou¡
 - 
mfsb_Àngth
;

1864 
mfsb_Àngth
 = 0;

1866 
mfsb_Àngth
 +
c
;

1867 
bm_Àn
 = 
c
;

1870 
mfsb_m≠
.
b
[mfsb_m≠.
nm≠s
].
bm_bn
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
s
);

1871 
mfsb_m≠
.
b
[mfsb_m≠.
nm≠s
].
bm_Àn
 = 
	`XFS_FSB_TO_BB
(
mp
, bm_len);

1872 
mfsb_m≠
.
nm≠s
++;

1874 i‡(
mfsb_Àngth
 == 0) {

1875 
	`push_cur
();

1876 
	`£t_cur
(&
ty±ab
[
bty≥
], 0, 0, 
DB_RING_IGN
, &
mfsb_m≠
);

1877 i‡(!
iocur_t›
->
d©a
) {

1878 
xfs_agnumbî_t
 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
s
);

1879 
xfs_agblock_t
 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
s
);

1881 
	`¥öt_w¨nög
("cannotÑead %s block %u/%u (%llu)",

1882 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
, 
s
);

1883 i‡(
°›_⁄_ªad_îr‹
)

1884 
ªt
 = -1;

1885 
out_p›
;

1889 i‡((!
obfusˇã
 && !
zîo_°Æe_d©a
) ||

1890 
o
 >
mp
->
m_dú_geo
->
Àafblk
) {

1891 
ªt
 = 
	`wrôe_buf
(
iocur_t›
);

1892 
out_p›
;

1895 
	`¥o˚ss_dú_d©a_block
(
iocur_t›
->
d©a
, 
o
,

1896 
œ°
 =
mp
->
m_dú_geo
->
fsbcou¡
);

1897 
iocur_t›
->
√ed_¸c
 = 1;

1898 
ªt
 = 
	`wrôe_buf
(
iocur_t›
);

1899 
out_p›
:

1900 
	`p›_cur
();

1901 
mfsb_m≠
.
nm≠s
 = 0;

1902 i‡(
ªt
)

1905 
c
 -
bm_Àn
;

1906 
s
 +
bm_Àn
;

1909  
ªt
;

1910 
	}
}

1914 
	$¥o˚ss_bmbt_ª˛i°
(

1915 
xfs_bmbt_ªc_t
 *
Ω
,

1916 
numªcs
,

1917 
ty≤m_t
 
bty≥
)

1919 
i
;

1920 
xfs_fûeoff_t
 
o
, 
›
 = 
NULLFILEOFF
;

1921 
xfs_fsblock_t
 
s
;

1922 
xfs_fûblks_t
 
c
, 
˝
 = 
NULLFILEOFF
;

1923 
f
;

1924 
xfs_fûeoff_t
 
œ°
;

1925 
xfs_agnumbî_t
 
agno
;

1926 
xfs_agblock_t
 
agbno
;

1927 
îr‹
;

1929 i‡(
bty≥
 =
TYP_DATA
)

1932 
	`c⁄vît_exã¡
(&
Ω
[
numªcs
 - 1], &
o
, &
s
, &
c
, &
f
);

1933 
œ°
 = 
o
 + 
c
;

1935 
i
 = 0; i < 
numªcs
; i++, 
Ω
++) {

1936 
	`c⁄vît_exã¡
(
Ω
, &
o
, &
s
, &
c
, &
f
);

1942 i‡(
i
 > 0 && 
›
 + 
˝
 > 
o
) {

1943 i‡(
show_w¨nögs
)

1944 
	`¥öt_w¨nög
("bmapÉxtent %d in %s ino %llu "

1946 "ídedáà%Œu", 
i
,

1947 
ty±ab
[
bty≥
].
«me
, ()
cur_öo
,

1948 
o
, 
›
 + 
˝
 - 1);

1952 i‡(
c
 > 
max_exã¡_size
) {

1958 i‡(
show_w¨nögs
)

1959 
	`¥öt_w¨nög
("suspicious count %u in bmap "

1960 "exã¡ %d i¿%†öÿ%Œu", 
c
, 
i
,

1961 
ty±ab
[
bty≥
].
«me
, ()
cur_öo
);

1965 
›
 = 
o
;

1966 
˝
 = 
c
;

1968 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
s
);

1969 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
s
);

1971 i‡(!
	`vÆid_bno
(
agno
, 
agbno
)) {

1972 i‡(
show_w¨nögs
)

1973 
	`¥öt_w¨nög
("invalid blockÇumber %u/%u "

1975 "%Œu", 
agno
, 
agbno
, 
s
, 
i
,

1976 
ty±ab
[
bty≥
].
«me
, ()
cur_öo
);

1980 i‡(!
	`vÆid_bno
(
agno
, 
agbno
 + 
c
 - 1)) {

1981 i‡(
show_w¨nögs
)

1982 
	`¥öt_w¨nög
("bmapÉxtent %i in %s inode %llu "

1983 "ovîÊow†AG (íd i†%u/%u)", 
i
,

1984 
ty±ab
[
bty≥
].
«me
, ()
cur_öo
,

1985 
agno
, 
agbno
 + 
c
 - 1);

1990 i‡(
bty≥
 !
TYP_DIR2
 || 
mp
->
m_dú_geo
->
fsbcou¡
 == 1) {

1991 
îr‹
 = 
	`¥o˚ss_sögÀ_fsb_obje˘s
(
o
, 
s
, 
c
, 
bty≥
, 
œ°
);

1993 
îr‹
 = 
	`¥o˚ss_mu…i_fsb_obje˘s
(
o
, 
s
, 
c
, 
bty≥
, 
œ°
);

1995 i‡(
îr‹
)

2000 
	}
}

2003 
	$sˇnfunc_bm≠
(

2004 
xfs_båì_block
 *
block
,

2005 
xfs_agnumbî_t
 
agno
,

2006 
xfs_agblock_t
 
agbno
,

2007 
Àvñ
,

2008 
ty≤m_t
 
bty≥
,

2009 *
¨g
)

2011 
i
;

2012 
xfs_bmbt_±r_t
 *
µ
;

2013 
ƒecs
;

2015 
ƒecs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

2017 i‡(
Àvñ
 == 0) {

2018 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[0]) {

2019 i‡(
show_w¨nögs
)

2020 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in %s "

2021 "block %u/%u", 
ƒecs
,

2022 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2025  
	`¥o˚ss_bmbt_ª˛i°
(
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1),

2026 
ƒecs
, *(
ty≤m_t
*)
¨g
);

2029 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[1]) {

2030 i‡(
show_w¨nögs
)

2031 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in %s block %u/%u",

2032 
ƒecs
, 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2035 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[1]);

2036 
i
 = 0; i < 
ƒecs
; i++) {

2037 
xfs_agnumbî_t
 
ag
;

2038 
xfs_agblock_t
 
bno
;

2040 
ag
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
	`gë_u«lig√d_be64
(&
µ
[
i
]));

2041 
bno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
	`gë_u«lig√d_be64
(&
µ
[
i
]));

2043 i‡(
bno
 =0 || bnÿ> 
mp
->
m_sb
.
sb_agblocks
 ||

2044 
ag
 > 
mp
->
m_sb
.
sb_agcou¡
) {

2045 i‡(
show_w¨nögs
)

2046 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

2047 "ö %†block %u/%u", 
ag
, 
bno
,

2048 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2052 i‡(!
	`sˇn_båì
(
ag
, 
bno
, 
Àvñ
, 
bty≥
, 
¨g
, 
sˇnfunc_bm≠
))

2056 
	}
}

2059 
	$¥o˚ss_btöode
(

2060 
xfs_döode_t
 *
dù
,

2061 
ty≤m_t
 
ôy≥
)

2063 
xfs_bmdr_block_t
 *
dib
;

2064 
i
;

2065 
xfs_bmbt_±r_t
 *
µ
;

2066 
Àvñ
;

2067 
ƒecs
;

2068 
maxªcs
;

2069 
whichf‹k
;

2070 
ty≤m_t
 
bty≥
;

2072 
whichf‹k
 = (
ôy≥
 =
TYP_ATTR
Ë? 
XFS_ATTR_FORK
 : 
XFS_DATA_FORK
;

2073 
bty≥
 = (
ôy≥
 =
TYP_ATTR
Ë? 
TYP_BMAPBTA
 : 
TYP_BMAPBTD
;

2075 
dib
 = (
xfs_bmdr_block_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

2076 
Àvñ
 = 
	`be16_to_˝u
(
dib
->
bb_Àvñ
);

2077 
ƒecs
 = 
	`be16_to_˝u
(
dib
->
bb_numªcs
);

2079 i‡(
Àvñ
 > 
	`XFS_BM_MAXLEVELS
(
mp
, 
whichf‹k
)) {

2080 i‡(
show_w¨nögs
)

2081 
	`¥öt_w¨nög
("invalidÜevel (%u) in inode %lld %s "

2082 "roŸ", 
Àvñ
, ()
cur_öo
,

2083 
ty±ab
[
bty≥
].
«me
);

2087 i‡(
Àvñ
 == 0) {

2088  
	`¥o˚ss_bmbt_ª˛i°
(
	`XFS_BMDR_REC_ADDR
(
dib
, 1),

2089 
ƒecs
, 
ôy≥
);

2092 
maxªcs
 = 
	`libxfs_bmdr_maxªcs
(
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
), 0);

2093 i‡(
ƒecs
 > 
maxªcs
) {

2094 i‡(
show_w¨nögs
)

2095 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in inode %lld %s "

2096 "roŸ", 
ƒecs
, ()
cur_öo
,

2097 
ty±ab
[
bty≥
].
«me
);

2101 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
dib
, 1, 
maxªcs
);

2102 
i
 = 0; i < 
ƒecs
; i++) {

2103 
xfs_agnumbî_t
 
ag
;

2104 
xfs_agblock_t
 
bno
;

2106 
ag
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
	`gë_u«lig√d_be64
(&
µ
[
i
]));

2107 
bno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
	`gë_u«lig√d_be64
(&
µ
[
i
]));

2109 i‡(
bno
 =0 || bnÿ> 
mp
->
m_sb
.
sb_agblocks
 ||

2110 
ag
 > 
mp
->
m_sb
.
sb_agcou¡
) {

2111 i‡(
show_w¨nögs
)

2112 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

2113 "ö inodê%Œu %†roŸ", 
ag
,

2114 
bno
, ()
cur_öo
,

2115 
ty±ab
[
bty≥
].
«me
);

2119 i‡(!
	`sˇn_båì
(
ag
, 
bno
, 
Àvñ
, 
bty≥
, &
ôy≥
, 
sˇnfunc_bm≠
))

2123 
	}
}

2126 
	$¥o˚ss_exöode
(

2127 
xfs_döode_t
 *
dù
,

2128 
ty≤m_t
 
ôy≥
)

2130 
whichf‹k
;

2131 
u£d
;

2132 
xfs_exäum_t
 
√x
;

2134 
whichf‹k
 = (
ôy≥
 =
TYP_ATTR
Ë? 
XFS_ATTR_FORK
 : 
XFS_DATA_FORK
;

2136 
√x
 = 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
);

2137 
u£d
 = 
√x
 * (
xfs_bmbt_ªc_t
);

2138 i‡(
√x
 < 0 || 
u£d
 > 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
)) {

2139 i‡(
show_w¨nögs
)

2140 
	`¥öt_w¨nög
("badÇumber ofÉxtents %d in inode %lld",

2141 
√x
, ()
cur_öo
);

2146 i‡(
zîo_°Æe_d©a
 && (
u£d
 < 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
)))

2147 
	`mem£t
(
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
Ë+ 
u£d
, 0,

2148 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
Ë- 
u£d
);

2151  
	`¥o˚ss_bmbt_ª˛i°
((
xfs_bmbt_ªc_t
 *)
	`XFS_DFORK_PTR
(
dù
,

2152 
whichf‹k
), 
√x
, 
ôy≥
);

2153 
	}
}

2156 
	$¥o˚ss_öode_d©a
(

2157 
xfs_döode_t
 *
dù
,

2158 
ty≤m_t
 
ôy≥
)

2160 
dù
->
di_f‹m©
) {

2161 
XFS_DINODE_FMT_LOCAL
:

2162 i‡(
obfusˇã
 || 
zîo_°Æe_d©a
)

2163 
ôy≥
) {

2164 
TYP_DIR2
:

2165 
	`¥o˚ss_sf_dú
(
dù
);

2168 
TYP_SYMLINK
:

2169 
	`¥o˚ss_sf_symlök
(
dù
);

2176 
XFS_DINODE_FMT_EXTENTS
:

2177  
	`¥o˚ss_exöode
(
dù
, 
ôy≥
);

2179 
XFS_DINODE_FMT_BTREE
:

2180  
	`¥o˚ss_btöode
(
dù
, 
ôy≥
);

2183 
	}
}

2193 
	$¥o˚ss_öode
(

2194 
xfs_agnumbî_t
 
agno
,

2195 
xfs_agöo_t
 
agöo
,

2196 
xfs_döode_t
 *
dù
,

2197 
boﬁ
 
‰ì_öode
)

2199 
suc˚ss
;

2200 
boﬁ
 
¸c_was_ok
 = 
Ál£
;

2201 
boﬁ
 
√ed_√w_¸c
 = 
Ál£
;

2203 
suc˚ss
 = 1;

2204 
cur_öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
);

2207 i‡(
obfusˇã
 || 
zîo_°Æe_d©a
) {

2208 
¸c_was_ok
 = 
	`libxfs_vîify_cksum
((*)
dù
,

2209 
mp
->
m_sb
.
sb_öodesize
,

2210 
	`off£tof
(
xfs_döode
, 
di_¸c
));

2213 i‡(
‰ì_öode
) {

2214 i‡(
zîo_°Æe_d©a
) {

2216 
	`mem£t
(
	`XFS_DFORK_DPTR
(
dù
), 0,

2217 
	`XFS_LITINO
(
mp
, 
dù
->
di_vîsi⁄
));

2219 
d⁄e
;

2223 
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
) {

2224 
S_IFDIR
:

2225 
suc˚ss
 = 
	`¥o˚ss_öode_d©a
(
dù
, 
TYP_DIR2
);

2226 i‡(
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
)

2227 
√ed_√w_¸c
 = 1;

2229 
S_IFLNK
:

2230 
suc˚ss
 = 
	`¥o˚ss_öode_d©a
(
dù
, 
TYP_SYMLINK
);

2231 i‡(
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
)

2232 
√ed_√w_¸c
 = 1;

2234 
S_IFREG
:

2235 
suc˚ss
 = 
	`¥o˚ss_öode_d©a
(
dù
, 
TYP_DATA
);

2239 
	`«mëabÀ_˛ór
();

2242 i‡(
suc˚ss
 &&

2243 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
Ë< 
	`XFS_LITINO
(mp, dù->
di_vîsi⁄
)) {

2244 
©å_d©a
.
ªmŸe_vÆ_cou¡
 = 0;

2245 
dù
->
di_af‹m©
) {

2246 
XFS_DINODE_FMT_LOCAL
:

2247 
√ed_√w_¸c
 = 1;

2248 i‡(
obfusˇã
 || 
zîo_°Æe_d©a
)

2249 
	`¥o˚ss_sf_©å
(
dù
);

2252 
XFS_DINODE_FMT_EXTENTS
:

2253 
suc˚ss
 = 
	`¥o˚ss_exöode
(
dù
, 
TYP_ATTR
);

2256 
XFS_DINODE_FMT_BTREE
:

2257 
suc˚ss
 = 
	`¥o˚ss_btöode
(
dù
, 
TYP_ATTR
);

2260 
	`«mëabÀ_˛ór
();

2263 
d⁄e
:

2265 i‡(
zîo_°Æe_d©a
)

2266 
√ed_√w_¸c
 = 1;

2268 i‡(
¸c_was_ok
 && 
√ed_√w_¸c
)

2269 
	`libxfs_döode_ˇlc_¸c
(
mp
, 
dù
);

2270  
suc˚ss
;

2271 
	}
}

2273 
__uöt32_t
 
	göodes_c›õd
 = 0;

2276 
	$c›y_öode_chunk
(

2277 
xfs_agnumbî_t
 
agno
,

2278 
xfs_öobt_ªc_t
 *
Ω
)

2280 
xfs_agöo_t
 
agöo
;

2281 
off
;

2282 
xfs_agblock_t
 
agbno
;

2283 
xfs_agblock_t
 
íd_agbno
;

2284 
i
;

2285 
rvÆ
 = 0;

2286 
blks_≥r_buf
;

2287 
öodes_≥r_buf
;

2288 
ioff
;

2290 
agöo
 = 
	`be32_to_˝u
(
Ω
->
ú_°¨töo
);

2291 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

2292 
íd_agbno
 = 
agbno
 + 
mp
->
m_üŒoc_blks
;

2293 
off
 = 
	`XFS_INO_TO_OFFSET
(
mp
, 
agöo
);

2303 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

2304 
blks_≥r_buf
 = 
	`xfs_i˛u°î_size_fsb
(
mp
);

2306 
blks_≥r_buf
 = 
mp
->
m_üŒoc_blks
;

2307 
öodes_≥r_buf
 = 
	`mö
(
blks_≥r_buf
 << 
mp
->
m_sb
.
sb_ö›blog
,

2308 
XFS_INODES_PER_CHUNK
);

2315 i‡(
off
 && 
öodes_≥r_buf
 !
XFS_INODES_PER_CHUNK
) {

2316 
	`¥öt_w¨nög
("bad sèπög inodêoff£à%d", 
off
);

2320 i‡(
agöo
 =0 ||ágöÿ=
NULLAGINO
 || !
	`vÆid_bno
(
agno
, 
agbno
) ||

2321 !
	`vÆid_bno
(
agno
, 
	`XFS_AGINO_TO_AGBNO
(
mp
,

2322 
agöo
 + 
XFS_INODES_PER_CHUNK
 - 1))) {

2323 i‡(
show_w¨nögs
)

2324 
	`¥öt_w¨nög
("bad inodeÇumber %llu (%u/%u)",

2325 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
),ágno,ágino);

2333 i‡((
mp
->
m_sb
.
sb_ö›block
 <
XFS_INODES_PER_CHUNK
 && 
off
 != 0) ||

2334 (
mp
->
m_sb
.
sb_ö›block
 > 
XFS_INODES_PER_CHUNK
 &&

2335 
off
 % 
XFS_INODES_PER_CHUNK
 != 0) ||

2336 (
	`xfs_sb_vîsi⁄_haßlign
(&
mp
->
m_sb
) &&

2337 
mp
->
m_sb
.
sb_öﬂlignmt
 != 0 &&

2338 
agbno
 % 
mp
->
m_sb
.
sb_öﬂlignmt
 != 0)) {

2339 i‡(
show_w¨nögs
)

2340 
	`¥öt_w¨nög
("badlyáligned inode (start = %llu)",

2341 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
));

2345 
	`push_cur
();

2346 
ioff
 = 0;

2347 
agbno
 < 
íd_agbno
 && 
ioff
 < 
XFS_INODES_PER_CHUNK
) {

2348 i‡(
	`xfs_öobt_is_•¨£_disk
(
Ω
, 
ioff
))

2349 
√xt_bp
;

2351 
	`£t_cur
(&
ty±ab
[
TYP_INODE
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

2352 
	`XFS_FSB_TO_BB
(
mp
, 
blks_≥r_buf
), 
DB_RING_IGN
, 
NULL
);

2353 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2354 
	`¥öt_w¨nög
("cannotÑead inode block %u/%u",

2355 
agno
, 
agbno
);

2356 
rvÆ
 = !
°›_⁄_ªad_îr‹
;

2357 
p›_out
;

2360 
i
 = 0; i < 
öodes_≥r_buf
; i++) {

2361 
xfs_döode_t
 *
dù
;

2363 
dù
 = (
xfs_döode_t
 *)((*)
iocur_t›
->
d©a
 +

2364 ((
off
 + 
i
Ë<< 
mp
->
m_sb
.
sb_öodñog
));

2367 i‡(!
	`¥o˚ss_öode
(
agno
, 
agöo
 + 
ioff
 + 
i
, 
dù
,

2368 
	`XFS_INOBT_IS_FREE_DISK
(
Ω
, 
ioff
 + 
i
)))

2369 
p›_out
;

2371 
öodes_c›õd
++;

2374 i‡(
	`wrôe_buf
(
iocur_t›
))

2375 
p›_out
;

2377 
√xt_bp
:

2378 
agbno
 +
blks_≥r_buf
;

2379 
ioff
 +
öodes_≥r_buf
;

2382 i‡(
show_¥ogªss
)

2383 
	`¥öt_¥ogªss
("Copied %u of %u inodes (%u of %u AGs)",

2384 
öodes_c›õd
, 
mp
->
m_sb
.
sb_icou¡
, 
agno
,

2385 
mp
->
m_sb
.
sb_agcou¡
);

2386 
rvÆ
 = 1;

2387 
p›_out
:

2388 
	`p›_cur
();

2389  
rvÆ
;

2390 
	}
}

2393 
	$sˇnfunc_öo
(

2394 
xfs_båì_block
 *
block
,

2395 
xfs_agnumbî_t
 
agno
,

2396 
xfs_agblock_t
 
agbno
,

2397 
Àvñ
,

2398 
ty≤m_t
 
bty≥
,

2399 *
¨g
)

2401 
xfs_öobt_ªc_t
 *
Ω
;

2402 
xfs_öobt_±r_t
 *
µ
;

2403 
i
;

2404 
numªcs
;

2405 
föobt
 = *(*Ë
¨g
;

2407 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

2409 i‡(
Àvñ
 == 0) {

2410 i‡(
numªcs
 > 
mp
->
m_öobt_mxr
[0]) {

2411 i‡(
show_w¨nögs
)

2412 
	`¥öt_w¨nög
("invalidÇumrecs %d in %s "

2413 "block %u/%u", 
numªcs
,

2414 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2415 
numªcs
 = 
mp
->
m_öobt_mxr
[0];

2422 i‡(
föobt
)

2425 
Ω
 = 
	`XFS_INOBT_REC_ADDR
(
mp
, 
block
, 1);

2426 
i
 = 0; i < 
numªcs
; i++, 
Ω
++) {

2427 i‡(!
	`c›y_öode_chunk
(
agno
, 
Ω
))

2433 i‡(
numªcs
 > 
mp
->
m_öobt_mxr
[1]) {

2434 i‡(
show_w¨nögs
)

2435 
	`¥öt_w¨nög
("invalidÇumrecs %d in %s block %u/%u",

2436 
numªcs
, 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2437 
numªcs
 = 
mp
->
m_öobt_mxr
[1];

2440 
µ
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_öobt_mxr
[1]);

2441 
i
 = 0; i < 
numªcs
; i++) {

2442 i‡(!
	`vÆid_bno
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]))) {

2443 i‡(
show_w¨nögs
)

2444 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

2446 
agno
, 
	`be32_to_˝u
(
µ
[
i
]),

2447 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2450 i‡(!
	`sˇn_båì
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
,

2451 
bty≥
, 
¨g
, 
sˇnfunc_öo
))

2455 
	}
}

2458 
	$c›y_öodes
(

2459 
xfs_agnumbî_t
 
agno
,

2460 
xfs_agi_t
 *
agi
)

2462 
xfs_agblock_t
 
roŸ
;

2463 
Àvñs
;

2464 
föobt
 = 0;

2466 
roŸ
 = 
	`be32_to_˝u
(
agi
->
agi_roŸ
);

2467 
Àvñs
 = 
	`be32_to_˝u
(
agi
->
agi_Àvñ
);

2470 i‡(
roŸ
 =0 ||ÑoŸ > 
mp
->
m_sb
.
sb_agblocks
) {

2471 i‡(
show_w¨nögs
)

2472 
	`¥öt_w¨nög
("invalid blockÇumber (%u) in inobt "

2473 "roŸ i¿agò%u", 
roŸ
, 
agno
);

2476 i‡(
Àvñs
 >
XFS_BTREE_MAXLEVELS
) {

2477 i‡(
show_w¨nögs
)

2478 
	`¥öt_w¨nög
("invalidÜevel (%u) in inobtÑoot "

2479 "öágò%u", 
Àvñs
, 
agno
);

2483 i‡(!
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_INOBT
, &
föobt
, 
sˇnfunc_öo
))

2486 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
)) {

2487 
roŸ
 = 
	`be32_to_˝u
(
agi
->
agi_‰ì_roŸ
);

2488 
Àvñs
 = 
	`be32_to_˝u
(
agi
->
agi_‰ì_Àvñ
);

2490 
föobt
 = 1;

2491 i‡(!
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_INOBT
, &
föobt
,

2492 
sˇnfunc_öo
))

2497 
	}
}

2500 
	$sˇn_ag
(

2501 
xfs_agnumbî_t
 
agno
)

2503 
xfs_agf_t
 *
agf
;

2504 
xfs_agi_t
 *
agi
;

2505 
°ack_cou¡
 = 0;

2506 
rvÆ
 = 0;

2509 
	`push_cur
();

2510 
°ack_cou¡
++;

2511 
	`£t_cur
(&
ty±ab
[
TYP_SB
], 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
XFS_SB_DADDR
),

2512 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

2513 i‡(!
iocur_t›
->
d©a
) {

2514 
	`¥öt_w¨nög
("ˇ¬ŸÑód su≥rblock f‹ág %u", 
agno
);

2515 i‡(
°›_⁄_ªad_îr‹
)

2516 
p›_out
;

2519 i‡(
obfusˇã
) {

2520 
xfs_sb
 *
sb
 = 
iocur_t›
->
d©a
;

2521 
	`mem£t
(
sb
->
sb_‚ame
, 'L',

2522 
	`mö
(
	`°æí
(
sb
->
sb_‚ame
), (sb->sb_fname)));

2523 
iocur_t›
->
√ed_¸c
 = 1;

2525 i‡(
	`wrôe_buf
(
iocur_t›
))

2526 
p›_out
;

2530 
	`push_cur
();

2531 
°ack_cou¡
++;

2532 
	`£t_cur
(&
ty±ab
[
TYP_AGF
], 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

2533 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

2534 
agf
 = 
iocur_t›
->
d©a
;

2535 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2536 
	`¥öt_w¨nög
("ˇ¬ŸÑódág‡block f‹ág %u", 
agno
);

2537 i‡(
°›_⁄_ªad_îr‹
)

2538 
p›_out
;

2540 i‡(
	`wrôe_buf
(
iocur_t›
))

2541 
p›_out
;

2545 
	`push_cur
();

2546 
°ack_cou¡
++;

2547 
	`£t_cur
(&
ty±ab
[
TYP_AGI
], 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),

2548 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

2549 
agi
 = 
iocur_t›
->
d©a
;

2550 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2551 
	`¥öt_w¨nög
("ˇ¬ŸÑódágòblock f‹ág %u", 
agno
);

2552 i‡(
°›_⁄_ªad_îr‹
)

2553 
p›_out
;

2555 i‡(
	`wrôe_buf
(
iocur_t›
))

2556 
p›_out
;

2560 
	`push_cur
();

2561 
°ack_cou¡
++;

2562 
	`£t_cur
(&
ty±ab
[
TYP_AGFL
], 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGFL_DADDR
(mp)),

2563 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

2564 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2565 
	`¥öt_w¨nög
("ˇ¬ŸÑódágÊ block f‹ág %u", 
agno
);

2566 i‡(
°›_⁄_ªad_îr‹
)

2567 
p›_out
;

2569 i‡(
agf
 && 
zîo_°Æe_d©a
) {

2571 
i
;

2572 
__be32
 *
agÊ_bno
;

2574 
agÊ_bno
 = 
	`XFS_BUF_TO_AGFL_BNO
(
mp
, 
iocur_t›
->
bp
);

2575 
i
 = 
	`be32_to_˝u
(
agf
->
agf_Êœ°
);

2578 i‡(++
i
 =
	`XFS_AGFL_SIZE
(
mp
))

2579 
i
 = 0;

2580 i‡(
i
 =
	`be32_to_˝u
(
agf
->
agf_Êfú°
))

2582 
agÊ_bno
[
i
] = 
	`˝u_to_be32
(
NULLAGBLOCK
);

2584 
iocur_t›
->
√ed_¸c
 = 1;

2586 i‡(
	`wrôe_buf
(
iocur_t›
))

2587 
p›_out
;

2591 i‡(
agf
) {

2592 i‡(
show_¥ogªss
)

2593 
	`¥öt_¥ogªss
("Copying free spaceÅrees of AG %u",

2594 
agno
);

2595 i‡(!
	`c›y_‰ì_bno_båì
(
agno
, 
agf
))

2596 
p›_out
;

2597 i‡(!
	`c›y_‰ì_˙t_båì
(
agno
, 
agf
))

2598 
p›_out
;

2599 i‡(!
	`c›y_rm≠_båì
(
agno
, 
agf
))

2600 
p›_out
;

2601 i‡(!
	`c›y_ªfcou¡_båì
(
agno
, 
agf
))

2602 
p›_out
;

2606 i‡(
agi
) {

2607 i‡(!
	`c›y_öodes
(
agno
, 
agi
))

2608 
p›_out
;

2610 
rvÆ
 = 1;

2611 
p›_out
:

2612 
°ack_cou¡
--)

2613 
	`p›_cur
();

2614  
rvÆ
;

2615 
	}
}

2618 
	$c›y_öo
(

2619 
xfs_öo_t
 
öo
,

2620 
ty≤m_t
 
ôy≥
)

2622 
xfs_agnumbî_t
 
agno
;

2623 
xfs_agblock_t
 
agbno
;

2624 
xfs_agöo_t
 
agöo
;

2625 
off£t
;

2626 
rvÆ
 = 0;

2628 i‡(
öo
 =0 || inÿ=
NULLFSINO
)

2631 
agno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
öo
);

2632 
agöo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
);

2633 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

2634 
off£t
 = 
	`XFS_AGINO_TO_OFFSET
(
mp
, 
agöo
);

2636 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 || 
agbno
 >mp->m_sb.
sb_agblocks
 ||

2637 
off£t
 >
mp
->
m_sb
.
sb_ö›block
) {

2638 i‡(
show_w¨nögs
)

2639 
	`¥öt_w¨nög
("invalid %s inodeÇumber (%lld)",

2640 
ty±ab
[
ôy≥
].
«me
, ()
öo
);

2644 
	`push_cur
();

2645 
	`£t_cur
(&
ty±ab
[
TYP_INODE
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

2646 
blkbb
, 
DB_RING_IGN
, 
NULL
);

2647 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2648 
	`¥öt_w¨nög
("cannotÑead %s inode %lld",

2649 
ty±ab
[
ôy≥
].
«me
, ()
öo
);

2650 
rvÆ
 = !
°›_⁄_ªad_îr‹
;

2651 
p›_out
;

2653 
	`off_cur
(
off£t
 << 
mp
->
m_sb
.
sb_öodñog
, mp->m_sb.
sb_öodesize
);

2655 
cur_öo
 = 
öo
;

2656 
rvÆ
 = 
	`¥o˚ss_öode_d©a
(
iocur_t›
->
d©a
, 
ôy≥
);

2657 
p›_out
:

2658 
	`p›_cur
();

2659  
rvÆ
;

2660 
	}
}

2664 
	$c›y_sb_öodes
()

2666 i‡(!
	`c›y_öo
(
mp
->
m_sb
.
sb_rbmöo
, 
TYP_RTBITMAP
))

2669 i‡(!
	`c›y_öo
(
mp
->
m_sb
.
sb_rsumöo
, 
TYP_RTSUMMARY
))

2672 i‡(!
	`c›y_öo
(
mp
->
m_sb
.
sb_uquŸöo
, 
TYP_DQBLK
))

2675 i‡(!
	`c›y_öo
(
mp
->
m_sb
.
sb_gquŸöo
, 
TYP_DQBLK
))

2678  
	`c›y_öo
(
mp
->
m_sb
.
sb_pquŸöo
, 
TYP_DQBLK
);

2679 
	}
}

2682 
	$c›y_log
()

2684 
xlog
 
log
;

2685 
dúty
;

2686 
xfs_daddr_t
 
log°¨t
;

2687 
logblocks
;

2688 
logvîsi⁄
;

2689 
cy˛e
 = 
XLOG_INIT_CYCLE
;

2691 i‡(
show_¥ogªss
)

2692 
	`¥öt_¥ogªss
("CopyingÜog");

2694 
	`push_cur
();

2695 
	`£t_cur
(&
ty±ab
[
TYP_LOG
], 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
),

2696 
mp
->
m_sb
.
sb_logblocks
 * 
blkbb
, 
DB_RING_IGN
, 
NULL
);

2697 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2698 
	`p›_cur
();

2699 
	`¥öt_w¨nög
("cannotÑeadÜog");

2700  !
°›_⁄_ªad_îr‹
;

2704 i‡(!
obfusˇã
 && !
zîo_°Æe_d©a
)

2705 
d⁄e
;

2707 
dúty
 = 
	`xlog_is_dúty
(
mp
, &
log
, &
x
, 0);

2709 
dúty
) {

2712 i‡(
show_¥ogªss
)

2713 
	`¥öt_¥ogªss
("Zeroing cleanÜog");

2715 
log°¨t
 = 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
);

2716 
logblocks
 = 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_logblocks
);

2717 
logvîsi⁄
 = 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
) ? 2 : 1;

2718 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

2719 
cy˛e
 = 
log
.
l_cuº_cy˛e
 + 1;

2721 
	`libxfs_log_˛ór
(
NULL
, 
iocur_t›
->
d©a
, 
log°¨t
, 
logblocks
,

2722 &
mp
->
m_sb
.
sb_uuid
, 
logvîsi⁄
,

2723 
mp
->
m_sb
.
sb_logsunô
, 
XLOG_FMT
, 
cy˛e
, 
åue
);

2727 i‡(
obfusˇã
)

2728 
	`¥öt_w¨nög
(

2729 
	`_
("FilesystemÜog is dirty; image will contain unobfuscated metadata inÜog."));

2733 i‡(
obfusˇã
)

2734 
	`¥öt_w¨nög
(

2735 
	`_
("CouldÇot discernÜog; image will contain unobfuscated metadata inÜog."));

2739 
d⁄e
:

2740  !
	`wrôe_buf
(
iocur_t›
);

2741 
	}
}

2744 
	$mëadump_f
(

2745 
¨gc
,

2746 **
¨gv
)

2748 
xfs_agnumbî_t
 
agno
;

2749 
c
;

2750 
°¨t_iocur_•
;

2751 *
p
;

2753 
exôcode
 = 1;

2754 
show_¥ogªss
 = 0;

2755 
show_w¨nögs
 = 0;

2756 
°›_⁄_ªad_îr‹
 = 0;

2758 i‡(
mp
->
m_sb
.
sb_magi˙um
 !
XFS_SB_MAGIC
) {

2759 
	`¥öt_w¨nög
("bad superblock magicÇumber %x, giving up",

2760 
mp
->
m_sb
.
sb_magi˙um
);

2768 i‡(
mp
->
m_sb
.
sb_agcou¡
 == 1 &&

2769 
	`XFS_MAX_DBLOCKS
(&
mp
->
m_sb
Ë< mp->m_sb.
sb_dblocks
) {

2770 
	`¥öt_w¨nög
("truncatedágcount, giving up");

2774 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "´gm:ow")Ë!
EOF
) {

2775 
c
) {

2777 
zîo_°Æe_d©a
 = 0;

2780 
°›_⁄_ªad_îr‹
 = 1;

2783 
show_¥ogªss
 = 1;

2786 
max_exã¡_size
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

2787 i‡(*
p
 !'\0' || 
max_exã¡_size
 <= 0) {

2788 
	`¥öt_w¨nög
("bad maxÉxtent size %s",

2789 
›èrg
);

2794 
obfusˇã
 = 0;

2797 
show_w¨nögs
 = 1;

2800 
	`¥öt_w¨nög
("bad option for metadump command");

2805 i‡(
›töd
 !
¨gc
 - 1) {

2806 
	`¥öt_w¨nög
("too few options for metadump (no filename given)");

2810 
mëablock
 = (
xfs_mëablock_t
 *)
	`ˇŒoc
(
BBSIZE
 + 1, BBSIZE);

2811 i‡(
mëablock
 =
NULL
) {

2812 
	`¥öt_w¨nög
("memoryállocation failure");

2815 
mëablock
->
mb_blocklog
 = 
BBSHIFT
;

2816 
mëablock
->
mb_magic
 = 
	`˝u_to_be32
(
XFS_MD_MAGIC
);

2818 
block_ödex
 = (
__be64
 *)((*)
mëablock
 + (
xfs_mëablock_t
));

2819 
block_buf„r
 = (*)
mëablock
 + 
BBSIZE
;

2820 
num_ödi˚s
 = (
BBSIZE
 - (
xfs_mëablock_t
)Ë/ (
__be64
);

2827 i‡(
mp
->
m_sb
.
sb_£˘size
 > 
num_ödi˚s
 * 
BBSIZE
) {

2828 
	`¥öt_w¨nög
("Cannot dump filesystem with sector size %u",

2829 
mp
->
m_sb
.
sb_£˘size
);

2830 
	`‰ì
(
mëablock
);

2834 
cur_ödex
 = 0;

2835 
°¨t_iocur_•
 = 
iocur_•
;

2837 i‡(
	`°rcmp
(
¨gv
[
›töd
], "-") == 0) {

2838 i‡(
	`ißây
(
	`fûío
(
°dout
))) {

2839 
	`¥öt_w¨nög
("cannot writeÅoáÅerminal");

2840 
	`‰ì
(
mëablock
);

2843 
outf
 = 
°dout
;

2845 
outf
 = 
	`f›í
(
¨gv
[
›töd
], "wb");

2846 i‡(
outf
 =
NULL
) {

2847 
	`¥öt_w¨nög
("cannot create dump file");

2848 
	`‰ì
(
mëablock
);

2853 
exôcode
 = 0;

2855 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

2856 i‡(!
	`sˇn_ag
(
agno
)) {

2857 
exôcode
 = 1;

2863 i‡(!
exôcode
)

2864 
exôcode
 = !
	`c›y_sb_öodes
();

2867 i‡((
mp
->
m_sb
.
sb_log°¨t
 !0Ë&& !
exôcode
)

2868 
exôcode
 = !
	`c›y_log
();

2871 i‡(!
exôcode
)

2872 
exôcode
 = 
	`wrôe_ödex
() < 0;

2874 i‡(
¥ogªss_sö˚_w¨nög
)

2875 
	`Âutc
('\n', (
outf
 =
°dout
Ë? 
°dîr
 : stdout);

2877 i‡(
outf
 !
°dout
)

2878 
	`f˛o£
(
outf
);

2881 
iocur_•
 > 
°¨t_iocur_•
)

2882 
	`p›_cur
();

2884 
	`‰ì
(
mëablock
);

2887 
	}
}

	@metadump.h

19 
mëadump_öô
();

	@output.c

19 
	~"libxfs.h
"

20 
	~<°d¨g.h
>

21 
	~"comm™d.h
"

22 
	~"ouçut.h
"

23 
	~"sig.h
"

24 
	~"mÆloc.h
"

25 
	~"öô.h
"

27 
log_f
(
¨gc
, **
¨gv
);

29 c⁄° 
cmdöfo_t
 
	glog_cmd
 =

30 { "log", 
NULL
, 
log_f
, 0, 2, 0, 
N_
("[stop|start <filename>]"),

31 
N_
("°¨à‹ st›ÜoggögÅÿ®fûe"), 
NULL
 };

33 
	gdb¥efix
;

34 
FILE
 *
	glog_fûe
;

35 *
	glog_fûe_«me
;

38 
	$db¥ötf
(c⁄° *
fmt
, ...)

40 
va_li°
 
≠
;

41 
i
;

43 i‡(
	`£íöt
())

45 
	`va_°¨t
(
≠
, 
fmt
);

46 
	`blocköt
();

47 
i
 = 0;

48 i‡(
db¥efix
)

49 
i
 +
	`¥ötf
("%s: ", 
fsdevi˚
);

50 
i
 +
	`v¥ötf
(
fmt
, 
≠
);

51 
	`unblocköt
();

52 
	`va_íd
(
≠
);

53 i‡(
log_fûe
) {

54 
	`va_°¨t
(
≠
, 
fmt
);

55 
	`vÂrötf
(
log_fûe
, 
fmt
, 
≠
);

56 
	`va_íd
(
≠
);

58  
i
;

59 
	}
}

62 
	$log_f
(

63 
¨gc
,

64 **
¨gv
)

66 i‡(
¨gc
 == 1) {

67 i‡(
log_fûe
)

68 
	`db¥ötf
(
	`_
("loggögÅÿ%s\n"), 
log_fûe_«me
);

70 
	`db¥ötf
(
	`_
("noÜog file\n"));

71 } i‡(
¨gc
 =2 && 
	`°rcmp
(
¨gv
[1], "stop") == 0) {

72 i‡(
log_fûe
) {

73 
	`x‰ì
(
log_fûe_«me
);

74 
	`f˛o£
(
log_fûe
);

75 
log_fûe
 = 
NULL
;

77 
	`db¥ötf
(
	`_
("noÜog file\n"));

78 } i‡(
¨gc
 =3 && 
	`°rcmp
(
¨gv
[1], "start") == 0) {

79 i‡(
log_fûe
)

80 
	`db¥ötf
(
	`_
("ÆªadyÜoggögÅÿ%s\n"), 
log_fûe_«me
);

82 
log_fûe
 = 
	`f›í
(
¨gv
[2], "a");

83 i‡(
log_fûe
 =
NULL
)

84 
	`db¥ötf
(
	`_
("can't open %s for writing\n"),

85 
¨gv
[2]);

87 
log_fûe_«me
 = 
	`x°rdup
(
¨gv
[1]);

90 
	`db¥ötf
(
	`_
("badÜog command, ignored\n"));

92 
	}
}

95 
	$log¥ötf
(c⁄° *
fmt
, ...)

97 
va_li°
 
≠
;

99 i‡(
log_fûe
) {

100 
	`va_°¨t
(
≠
, 
fmt
);

101 ()
	`vÂrötf
(
log_fûe
, 
fmt
, 
≠
);

102 
	`va_íd
(
≠
);

104 
	}
}

107 
	$ouçut_öô
()

109 
	`add_comm™d
(&
log_cmd
);

110 
	}
}

	@output.h

19 
db¥efix
;

21 
db¥ötf
(const *, ...);

22 
log¥ötf
(const *, ...);

23 
ouçut_öô
();

	@print.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"io.h
"

26 
	~"¥öt.h
"

27 
	~"bô.h
"

28 
	~"Êi°.h
"

29 
	~"°rvec.h
"

30 
	~"ouçut.h
"

31 
	~"sig.h
"

32 
	~"wrôe.h
"

34 
¥öt_Ælfõlds
(c⁄° 
fõld
 *
fõlds
);

35 
¥öt_f
(
¨gc
, **
¨gv
);

36 
¥öt_Êi°_1
(
Êi°
 *Êi°, **
pfx
, 
∑ª¡off
);

37 
¥öt_somefõlds
(c⁄° 
fõld
 *
fõlds
, 
¨gc
,

38 **
¨gv
);

40 c⁄° 
cmdöfo_t
 
	g¥öt_cmd
 =

41 { "¥öt", "p", 
¥öt_f
, 0, -1, 0, 
N_
("[value]..."),

42 
N_
("¥öàfõld vÆues"), 
NULL
 };

45 
	$¥öt_Ælfõlds
(

46 c⁄° 
fõld_t
 *
fõlds
)

48 
Êi°_t
 *
Êi°
;

49 #ifde‡
DEBUG


50 
i
;

53 
Êi°
 = 
	`Êi°_make
("");

54 
Êi°
->
Êd
 = 
fõlds
;

55 #i‚de‡
DEBUG


56 ()
	`Êi°_∑r£
(
fõlds
, 
Êi°
, 
iocur_t›
->
d©a
, 0);

58 
i
 = 
	`Êi°_∑r£
(
fõlds
, 
Êi°
, 
iocur_t›
->
d©a
, 0);

59 
	`ASSERT
(
i
 == 1);

61 
	`Êi°_¥öt
(
Êi°
);

62 
	`¥öt_Êi°
(
Êi°
);

63 
	`Êi°_‰ì
(
Êi°
);

64 
	}
}

67 
	$¥öt_f
(

68 
¨gc
,

69 **
¨gv
)

71 
pfunc_t
 
pf
;

73 i‡(
cur_typ
 =
NULL
) {

74 
	`db¥ötf
(
	`_
("no currentÅype\n"));

77 
pf
 = 
cur_typ
->
pfunc
;

78 i‡(
pf
 =
NULL
) {

79 
	`db¥ötf
(
	`_
("nÿ¥öàfun˘i⁄ f‹Åy≥ %s\n"), 
cur_typ
->
«me
);

82 
¨gc
--;

83 
¨gv
++;

84 (*
pf
)(
DB_READ
, 
cur_typ
->
fõlds
, 
¨gc
, 
¨gv
);

86 
	}
}

89 
	$¥öt_Êi°
(

90 
Êi°_t
 *
Êi°
)

92 **
pfx
;

94 
pfx
 = 
	`√w_°rvec
(0);

95 
	`¥öt_Êi°_1
(
Êi°
, 
pfx
, 0);

96 
	`‰ì_°rvec
(
pfx
);

97 
	}
}

100 
	$¥öt_Êi°_1
(

101 
Êi°_t
 *
Êi°
,

102 **
µfx
,

103 
∑ª¡off
)

105 
buf
[16];

106 c⁄° 
fõld_t
 *
f
;

107 c⁄° 
·©å_t
 *
Á
;

108 
Êi°_t
 *
Ê
;

109 
low
;

110 
cou¡
;

111 
√ed∆
;

112 **
pfx
;

114 
Ê
 = 
Êi°
; f»&& !
	`£íöt
(); f»Ê->
siblög
) {

115 
pfx
 = 
	`c›y_°rvec
(
µfx
);

116 i‡(
Ê
->
«me
[0])

117 
	`add_°rvec
(&
pfx
, 
Ê
->
«me
);

118 i‡(
Ê
->
Êags
 & 
FL_OKLOW
) {

119 
	`add_°rvec
(&
pfx
, "[");

120 
	`¢¥ötf
(
buf
, (buf), "%d", 
Ê
->
low
);

121 
	`add_°rvec
(&
pfx
, 
buf
);

122 i‡(
Ê
->
low
 !Ê->
high
) {

123 
	`add_°rvec
(&
pfx
, "-");

124 
	`¢¥ötf
(
buf
, (buf), "%d", 
Ê
->
high
);

125 
	`add_°rvec
(&
pfx
, 
buf
);

127 
	`add_°rvec
(&
pfx
, "]");

129 i‡(
Ê
->
chûd
) {

130 i‡(
Ê
->
«me
[0])

131 
	`add_°rvec
(&
pfx
, ".");

132 
	`¥öt_Êi°_1
(
Ê
->
chûd
, 
pfx
, fl->
off£t
);

134 
f
 = 
Ê
->
Êd
;

135 
Á
 = &
·©åèb
[
f
->
·yp
];

136 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

137 
	`¥öt_°rvec
(
pfx
);

138 
	`db¥ötf
(" = ");

139 i‡(
Ê
->
Êags
 & 
FL_OKLOW
)

140 
low
 = 
Ê
->low;

142 
low
 = 0;

143 
cou¡
 = 
	`fcou¡
(
f
, 
iocur_t›
->
d©a
, 
∑ª¡off
);

144 i‡(
Ê
->
Êags
 & 
FL_OKHIGH
)

145 
cou¡
 = 
	`mö
(cou¡, 
Ê
->
high
 - 
low
 + 1);

146 i‡(
Á
->
¥func
) {

147 
√ed∆
 = 
Á
->
	`¥func
(
iocur_t›
->
d©a
, 
Ê
->
off£t
,

148 
cou¡
, 
Á
->
fmt°r
,

149 
	`fsize
(
f
, 
iocur_t›
->
d©a
, 
∑ª¡off
, 0),

150 
Á
->
¨g
, 
low
,

151 (
f
->
Êags
 & 
FLD_ARRAY
) != 0);

152 i‡(
√ed∆
)

153 
	`db¥ötf
("\n");

155 
	`ASSERT
(
Á
->
¨g
 & 
FTARG_OKEMPTY
);

156 
	`db¥ötf
(
	`_
("(empty)\n"));

159 
	`‰ì_°rvec
(
pfx
);

161 
	}
}

164 
	$¥öt_öô
()

166 
	`add_comm™d
(&
¥öt_cmd
);

167 
	}
}

170 
	$¥öt_ßºay
(

171 *
obj
,

172 
bô
,

173 
cou¡
,

174 
size
,

175 
ba£
,

176 
¨øy
,

177 c⁄° 
fõld_t
 *
Êds
,

178 
skùnms
)

180 
bôoff
;

181 c⁄° 
fõld_t
 *
f
;

182 c⁄° 
·©å_t
 *
Á
;

183 
fú°
;

184 
i
;

186 
	`ASSERT
(
	`bôoffs
(
bô
) == 0);

187 i‡(
skùnms
 == 0) {

188 
f
 = 
Êds
, 
fú°
 = 1; f->
«me
; f++) {

189 i‡(
f
->
Êags
 & 
FLD_SKIPALL
)

191 
	`db¥ötf
("%c%s", 
fú°
 ? '[' : ',', 
f
->
«me
);

192 
fú°
 = 0;

194 
	`db¥ötf
("] ");

196 
i
 = 0, 
bôoff
 = 
bô
;

197 
i
 < 
cou¡
 && !
	`£íöt
();

198 
i
++, 
bôoff
 +
size
) {

199 i‡(
¨øy
)

200 
	`db¥ötf
("\n%d:", 
i
 + 
ba£
);

201 
f
 = 
Êds
, 
fú°
 = 1; f->
«me
; f++) {

202 i‡(
f
->
Êags
 & 
FLD_SKIPALL
)

204 
Á
 = &
·©åèb
[
f
->
·yp
];

205 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

206 
	`db¥ötf
("%c", 
fú°
 ? '[' : ',');

207 
fú°
 = 0;

208 i‡(
Á
->
¥func
)

209 
Á
->
	`¥func
(
obj
,

210 
bôoff
 +

211 
	`bôoff£t
(
f
, 
obj
, 
bôoff
, 
i
 + 
ba£
),

212 
	`fcou¡
(
f
, 
obj
, 
bôoff
), 
Á
->
fmt°r
,

213 
	`fsize
(
f
, 
obj
, 
bôoff
, 
i
 + 
ba£
),

214 
Á
->
¨g
, (
f
->
Êags
 & 
FLD_ABASE1
) != 0,

215 
f
->
Êags
 & 
FLD_ARRAY
);

217 
	`ASSERT
(
Á
->
¨g
 & 
FTARG_OKEMPTY
);

218 
	`db¥ötf
(
	`_
("(empty)"));

221 
	`db¥ötf
("]");

222 i‡(
i
 < 
cou¡
 - 1)

223 
	`db¥ötf
(" ");

225 
	}
}

228 
	$¥öt_somefõlds
(

229 c⁄° 
fõld_t
 *
fõlds
,

230 
¨gc
,

231 **
¨gv
)

233 c⁄° 
·©å_t
 *
Á
;

234 
Êi°_t
 *
Ê
;

235 
Êi°_t
 *
lÊ
;

236 
Êi°_t
 *
nÊ
;

238 
Ê
 = 
lÊ
 = 
NULL
;

239 
¨gc
 > 0) {

240 
nÊ
 = 
	`Êi°_sˇn
(*
¨gv
);

241 i‡(!
nÊ
) {

242 i‡(
Ê
)

243 
	`Êi°_‰ì
(
Ê
);

246 i‡(
lÊ
)

247 
lÊ
->
siblög
 = 
nÊ
;

249 
Ê
 = 
nÊ
;

250 
lÊ
 = 
nÊ
;

251 
¨gc
--;

252 
¨gv
++;

254 i‡(
fõlds
->
«me
[0] == '\0') {

255 
Á
 = &
·©åèb
[
fõlds
->
·yp
];

256 
	`ASSERT
(
Á
->
·yp
 =
fõlds
->ftyp);

257 
fõlds
 = 
Á
->
subÊd
;

259 i‡(!
	`Êi°_∑r£
(
fõlds
, 
Ê
, 
iocur_t›
->
d©a
, 0)) {

260 
	`Êi°_‰ì
(
Ê
);

263 
	`Êi°_¥öt
(
Ê
);

264 
	`¥öt_Êi°
(
Ê
);

265 
	`Êi°_‰ì
(
Ê
);

266 
	}
}

270 
	$¥öt_°rög
(

271 c⁄° 
fõld_t
 *
fõlds
,

272 
¨gc
,

273 **
¨gv
)

275 *
˝
;

277 i‡(
¨gc
 != 0)

278 
	`db¥ötf
(
	`_
("noárgumentsállowed\n"));

279 
	`db¥ötf
("\"");

280 
˝
 = 
iocur_t›
->
d©a
;

281 
˝
 < (*)
iocur_t›
->
d©a
 + iocur_t›->
Àn
 && *cp &&

282 !
	`£íöt
();

283 
˝
++)

284 
	`db¥ötf
("%c", *
˝
);

285 
	`db¥ötf
("\"\n");

286 
	}
}

289 
	$¥öt_°ru˘
(

290 c⁄° 
fõld_t
 *
fõlds
,

291 
¨gc
,

292 **
¨gv
)

294 i‡(
¨gc
 == 0)

295 
	`¥öt_Ælfõlds
(
fõlds
);

297 
	`¥öt_somefõlds
(
fõlds
, 
¨gc
, 
¨gv
);

298 
	}
}

	@print.h

19 
	gfõld
;

20 
	gÊi°
;

22 
¥öt_Êi°
(
Êi°
 *flist);

23 
¥öt_öô
();

24 
¥öt_ßºay
(*
obj
, 
bô
, 
cou¡
, 
size
, 
ba£
,

25 
¨øy
, c⁄° 
fõld_t
 *
Êds
, 
skùnms
);

26 
¥öt_°ru˘
(c⁄° 
fõld
 *
fõlds
, 
¨gc
, **
¨gv
);

27 
¥öt_°rög
(c⁄° 
fõld
 *
fõlds
, 
¨gc
, **
¨gv
);

	@quit.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"quô.h
"

23 
quô_f
(
¨gc
, **
¨gv
);

25 c⁄° 
cmdöfo_t
 
	gquô_cmd
 =

26 { "quô", "q", 
quô_f
, 0, 0, 0, 
NULL
,

27 
N_
("exô xfs_db"), 
NULL
 };

30 
	$quô_f
(

31 
¨gc
,

32 **
¨gv
)

35 
	}
}

38 
	$quô_öô
()

40 
	`add_comm™d
(&
quô_cmd
);

41 
	}
}

	@quit.h

19 
quô_öô
();

	@sb.c

19 
	~"libxfs.h
"

20 
	~"libxlog.h
"

21 
	~"comm™d.h
"

22 
	~"ty≥.h
"

23 
	~"Áddr.h
"

24 
	~"Âröt.h
"

25 
	~"fõld.h
"

26 
	~"io.h
"

27 
	~"sb.h
"

28 
	~"bô.h
"

29 
	~"ouçut.h
"

30 
	~"öô.h
"

32 
	#uuid_equÆ
(
s
,
d
Ë(
	`∂©f‹m_uuid_com∑ª
((s),(d)Ë=0)

	)

34 
sb_f
(
¨gc
, **
¨gv
);

35 
sb_hñp
();

36 
uuid_f
(
¨gc
, **
¨gv
);

37 
uuid_hñp
();

38 
œbñ_f
(
¨gc
, **
¨gv
);

39 
œbñ_hñp
();

40 
vîsi⁄_f
(
¨gc
, **
¨gv
);

41 
vîsi⁄_hñp
();

43 c⁄° 
cmdöfo_t
 
	gsb_cmd
 =

44 { "sb", 
NULL
, 
sb_f
, 0, 1, 1, 
N_
("[agno]"),

45 
N_
("£àcuºíàaddªs†tÿsb hódî"), 
sb_hñp
 };

46 c⁄° 
cmdöfo_t
 
	guuid_cmd
 =

47 { "uuid", 
NULL
, 
uuid_f
, 0, 1, 1, 
N_
("[uuid]"),

48 
N_
("wrôe/¥öàFS uuid"), 
uuid_hñp
 };

49 c⁄° 
cmdöfo_t
 
	gœbñ_cmd
 =

50 { "œbñ", 
NULL
, 
œbñ_f
, 0, 1, 1, 
N_
("[label]"),

51 
N_
("wrôe/¥öàFSÜabñ"), 
œbñ_hñp
 };

52 c⁄° 
cmdöfo_t
 
	gvîsi⁄_cmd
 =

53 { "vîsi⁄", 
NULL
, 
vîsi⁄_f
, 0, -1, 1, 
N_
("[feature | [vnum fnum]]"),

54 
N_
("£à„©uª bô(sËöÅhêsb vîsi⁄ fõld"), 
vîsi⁄_hñp
 };

57 
	$sb_öô
()

59 
	`add_comm™d
(&
sb_cmd
);

60 
	`add_comm™d
(&
uuid_cmd
);

61 
	`add_comm™d
(&
œbñ_cmd
);

62 
	`add_comm™d
(&
vîsi⁄_cmd
);

63 
	}
}

65 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_sb_t
, 
sb_
 ## f))

	)

66 
	#SZC
(
f
Ë
	`szcou¡
(
xfs_sb_t
, 
sb_
 ## f)

	)

67 c⁄° 
fõld_t
 
	gsb_Êds
[] = {

68 { "magi˙um", 
FLDT_UINT32X
, 
OI
(
OFF
(
magi˙um
)), 
C1
, 0, 
TYP_NONE
 },

69 { "blocksize", 
FLDT_UINT32D
, 
OI
(
OFF
(
blocksize
)), 
C1
, 0, 
TYP_NONE
 },

70 { "dblocks", 
FLDT_DRFSBNO
, 
OI
(
OFF
(
dblocks
)), 
C1
, 0, 
TYP_NONE
 },

71 { "rblocks", 
FLDT_DRFSBNO
, 
OI
(
OFF
(
rblocks
)), 
C1
, 0, 
TYP_NONE
 },

72 { "ªxã¡s", 
FLDT_DRTBNO
, 
OI
(
OFF
(
ªxã¡s
)), 
C1
, 0, 
TYP_NONE
 },

73 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

74 { "log°¨t", 
FLDT_DFSBNO
, 
OI
(
OFF
(
log°¨t
)), 
C1
, 0, 
TYP_LOG
 },

75 { "roŸöo", 
FLDT_INO
, 
OI
(
OFF
(
roŸöo
)), 
C1
, 0, 
TYP_INODE
 },

76 { "rbmöo", 
FLDT_INO
, 
OI
(
OFF
(
rbmöo
)), 
C1
, 0, 
TYP_INODE
 },

77 { "rsumöo", 
FLDT_INO
, 
OI
(
OFF
(
rsumöo
)), 
C1
, 0, 
TYP_INODE
 },

78 { "ªxtsize", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
ªxtsize
)), 
C1
, 0, 
TYP_NONE
 },

79 { "agblocks", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
agblocks
)), 
C1
, 0, 
TYP_NONE
 },

80 { "agcou¡", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
agcou¡
)), 
C1
, 0, 
TYP_NONE
 },

81 { "rbmblocks", 
FLDT_EXTLEN
, 
OI
(
OFF
(
rbmblocks
)), 
C1
, 0, 
TYP_NONE
 },

82 { "logblocks", 
FLDT_EXTLEN
, 
OI
(
OFF
(
logblocks
)), 
C1
, 0, 
TYP_NONE
 },

83 { "vîsi⁄num", 
FLDT_UINT16X
, 
OI
(
OFF
(
vîsi⁄num
)), 
C1
, 0, 
TYP_NONE
 },

84 { "£˘size", 
FLDT_UINT16D
, 
OI
(
OFF
(
£˘size
)), 
C1
, 0, 
TYP_NONE
 },

85 { "öodesize", 
FLDT_UINT16D
, 
OI
(
OFF
(
öodesize
)), 
C1
, 0, 
TYP_NONE
 },

86 { "ö›block", 
FLDT_UINT16D
, 
OI
(
OFF
(
ö›block
)), 
C1
, 0, 
TYP_NONE
 },

87 { "‚ame", 
FLDT_CHARNS
, 
OI
(
OFF
(
‚ame
)), 
CI
(
SZC
(‚ame)), 0, 
TYP_NONE
 },

88 { "blocklog", 
FLDT_UINT8D
, 
OI
(
OFF
(
blocklog
)), 
C1
, 0, 
TYP_NONE
 },

89 { "£˘log", 
FLDT_UINT8D
, 
OI
(
OFF
(
£˘log
)), 
C1
, 0, 
TYP_NONE
 },

90 { "öodñog", 
FLDT_UINT8D
, 
OI
(
OFF
(
öodñog
)), 
C1
, 0, 
TYP_NONE
 },

91 { "ö›blog", 
FLDT_UINT8D
, 
OI
(
OFF
(
ö›blog
)), 
C1
, 0, 
TYP_NONE
 },

92 { "agblklog", 
FLDT_UINT8D
, 
OI
(
OFF
(
agblklog
)), 
C1
, 0, 
TYP_NONE
 },

93 { "ªxt¶og", 
FLDT_UINT8D
, 
OI
(
OFF
(
ªxt¶og
)), 
C1
, 0, 
TYP_NONE
 },

94 { "ö¥ogªss", 
FLDT_UINT8D
, 
OI
(
OFF
(
ö¥ogªss
)), 
C1
, 0, 
TYP_NONE
 },

95 { "imax_p˘", 
FLDT_UINT8D
, 
OI
(
OFF
(
imax_p˘
)), 
C1
, 0, 
TYP_NONE
 },

96 { "icou¡", 
FLDT_UINT64D
, 
OI
(
OFF
(
icou¡
)), 
C1
, 0, 
TYP_NONE
 },

97 { "i‰ì", 
FLDT_UINT64D
, 
OI
(
OFF
(
i‰ì
)), 
C1
, 0, 
TYP_NONE
 },

98 { "fdblocks", 
FLDT_UINT64D
, 
OI
(
OFF
(
fdblocks
)), 
C1
, 0, 
TYP_NONE
 },

99 { "‰exã¡s", 
FLDT_UINT64D
, 
OI
(
OFF
(
‰exã¡s
)), 
C1
, 0, 
TYP_NONE
 },

100 { "uquŸöo", 
FLDT_INO
, 
OI
(
OFF
(
uquŸöo
)), 
C1
, 0, 
TYP_INODE
 },

101 { "gquŸöo", 
FLDT_INO
, 
OI
(
OFF
(
gquŸöo
)), 
C1
, 0, 
TYP_INODE
 },

102 { "qÊags", 
FLDT_UINT16X
, 
OI
(
OFF
(
qÊags
)), 
C1
, 0, 
TYP_NONE
 },

103 { "Êags", 
FLDT_UINT8X
, 
OI
(
OFF
(
Êags
)), 
C1
, 0, 
TYP_NONE
 },

104 { "sh¨ed_vn", 
FLDT_UINT8D
, 
OI
(
OFF
(
sh¨ed_vn
)), 
C1
, 0, 
TYP_NONE
 },

105 { "öﬂlignmt", 
FLDT_EXTLEN
, 
OI
(
OFF
(
öﬂlignmt
)), 
C1
, 0, 
TYP_NONE
 },

106 { "unô", 
FLDT_UINT32D
, 
OI
(
OFF
(
unô
)), 
C1
, 0, 
TYP_NONE
 },

107 { "width", 
FLDT_UINT32D
, 
OI
(
OFF
(
width
)), 
C1
, 0, 
TYP_NONE
 },

108 { "dúblklog", 
FLDT_UINT8D
, 
OI
(
OFF
(
dúblklog
)), 
C1
, 0, 
TYP_NONE
 },

109 { "log£˘log", 
FLDT_UINT8D
, 
OI
(
OFF
(
log£˘log
)), 
C1
, 0, 
TYP_NONE
 },

110 { "log£˘size", 
FLDT_UINT16D
, 
OI
(
OFF
(
log£˘size
)), 
C1
, 0, 
TYP_NONE
 },

111 { "logsunô", 
FLDT_UINT32D
, 
OI
(
OFF
(
logsunô
)), 
C1
, 0, 
TYP_NONE
 },

112 { "„©uªs2", 
FLDT_UINT32X
, 
OI
(
OFF
(
„©uªs2
)), 
C1
, 0, 
TYP_NONE
 },

113 { "bad_„©uªs2", 
FLDT_UINT32X
, 
OI
(
OFF
(
bad_„©uªs2
)),

114 
C1
, 0, 
TYP_NONE
 },

115 { "„©uªs_com∑t", 
FLDT_UINT32X
, 
OI
(
OFF
(
„©uªs_com∑t
)),

116 
C1
, 0, 
TYP_NONE
 },

117 { "„©uªs_ro_com∑t", 
FLDT_UINT32X
, 
OI
(
OFF
(
„©uªs_ro_com∑t
)),

118 
C1
, 0, 
TYP_NONE
 },

119 { "„©uªs_öcom∑t", 
FLDT_UINT32X
, 
OI
(
OFF
(
„©uªs_öcom∑t
)),

120 
C1
, 0, 
TYP_NONE
 },

121 { "„©uªs_log_öcom∑t", 
FLDT_UINT32X
, 
OI
(
OFF
(
„©uªs_log_öcom∑t
)),

122 
C1
, 0, 
TYP_NONE
 },

123 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

124 { "•öo_Æign", 
FLDT_EXTLEN
, 
OI
(
OFF
(
•öo_Æign
)), 
C1
, 0, 
TYP_NONE
 },

125 { "pquŸöo", 
FLDT_INO
, 
OI
(
OFF
(
pquŸöo
)), 
C1
, 0, 
TYP_INODE
 },

126 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

127 { "mëa_uuid", 
FLDT_UUID
, 
OI
(
OFF
(
mëa_uuid
)), 
C1
, 0, 
TYP_NONE
 },

128 { 
NULL
 }

131 c⁄° 
fõld_t
 
	gsb_hÊd
[] = {

132 { "", 
FLDT_SB
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

133 { 
NULL
 }

137 
	$sb_hñp
()

139 
	`db¥ötf
(
	`_
(

154 
	}
}

157 
	$sb_f
(

158 
¨gc
,

159 **
¨gv
)

161 
xfs_agnumbî_t
 
agno
;

162 *
p
;

164 i‡(
¨gc
 > 1) {

165 
agno
 = (
xfs_agnumbî_t
)
	`°πoul
(
¨gv
[1], &
p
, 0);

166 i‡(*
p
 !'\0' || 
agno
 >
mp
->
m_sb
.
sb_agcou¡
) {

167 
	`db¥ötf
(
	`_
("badáŒoˇti⁄ grou∞numbî %s\n"), 
¨gv
[1]);

170 
cur_agno
 = 
agno
;

171 } i‡(
cur_agno
 =
NULLAGNUMBER
)

172 
cur_agno
 = 0;

173 
	`ASSERT
(
ty±ab
[
TYP_SB
].
ty≤m
 == TYP_SB);

174 
	`£t_cur
(&
ty±ab
[
TYP_SB
],

175 
	`XFS_AG_DADDR
(
mp
, 
cur_agno
, 
XFS_SB_DADDR
),

176 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_ADD
, 
NULL
);

178 
	}
}

182 
	$sb_size
(

183 *
obj
,

184 
°¨toff
,

185 
idx
)

187  
	`bôize
(
mp
->
m_sb
.
sb_£˘size
);

188 
	}
}

191 
	$gë_sb
(
xfs_agnumbî_t
 
agno
, 
xfs_sb_t
 *
sb
)

193 
	`push_cur
();

194 
	`£t_cur
(&
ty±ab
[
TYP_SB
],

195 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
XFS_SB_DADDR
),

196 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

198 i‡(!
iocur_t›
->
d©a
) {

199 
	`db¥ötf
(
	`_
("ˇn'àªad su≥rblock f‹ AG %u\n"), 
agno
);

200 
	`p›_cur
();

204 
	`libxfs_sb_‰om_disk
(
sb
, 
iocur_t›
->
d©a
);

206 i‡(
sb
->
sb_magi˙um
 !
XFS_SB_MAGIC
) {

207 
	`db¥ötf
(
	`_
("bad sb magic # %#x in AG %u\n"),

208 
sb
->
sb_magi˙um
, 
agno
);

211 i‡(!
	`xfs_sb_good_vîsi⁄
(
sb
)) {

212 
	`db¥ötf
(
	`_
("bad sb version # %#x in AG %u\n"),

213 
sb
->
sb_vîsi⁄num
, 
agno
);

216 i‡(
agno
 =0 && 
sb
->
sb_ö¥ogªss
 != 0) {

217 
	`db¥ötf
(
	`_
("mkfsÇot completed successfully\n"));

221 
	}
}

224 
	$xlog_ªcovî_do_å™s
(
xlog
 *
log
, 
xlog_ªcovî_t
 *
t
, 
p
)

227 
	}
}

230 
	$sb_logcheck
()

232 
dúty
;

234 i‡(
mp
->
m_sb
.
sb_log°¨t
) {

235 i‡(
x
.
logdev
 && x.logdev !x.
ddev
) {

236 
	`db¥ötf
(
	`_
("aborting -ÉxternalÜog specified for FS "

241 i‡(!
x
.
logdev
 || (x.logdev =x.
ddev
)) {

242 
	`db¥ötf
(
	`_
("aborting -ÇoÉxternalÜog specified for FS "

248 
	`libxfs_bu·¨g_öô
(
mp
, 
x
.
ddev
, x.
logdev
, x.
πdev
);

250 
dúty
 = 
	`xlog_is_dúty
(
mp
, mp->
m_log
, &
x
, 0);

251 i‡(
dúty
 == -1) {

252 
	`db¥ötf
(
	`_
("ERROR: cannot findÜog head/tail,Ñun xfs_repair\n"));

254 } i‡(
dúty
 == 1) {

255 
	`db¥ötf
(
	`_
(

261 "o‡thêfûesy°em bef‹êdoögÅhis.\n"), 
¥og«me
);

266 
	}
}

269 
	$sb_logzîo
(
uuid_t
 *
uuidp
)

271 
cy˛e
 = 
XLOG_INIT_CYCLE
;

272 
îr‹
;

274 i‡(!
	`sb_logcheck
())

281 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

282 
cy˛e
 = 
mp
->
m_log
->
l_cuº_cy˛e
 + 1;

284 
	`db¥ötf
(
	`_
("ClearingÜogánd setting UUID\n"));

286 
îr‹
 = 
	`libxfs_log_˛ór
(
mp
->
m_logdev_èrgp
, 
NULL
,

287 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
),

288 (
xfs_exéí_t
)
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_logblocks
),

289 
uuidp
,

290 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
) ? 2 : 1,

291 
mp
->
m_sb
.
sb_logsunô
, 
XLOG_FMT
, 
cy˛e
, 
åue
);

292 i‡(
îr‹
) {

293 
	`db¥ötf
(
	`_
("ERROR: cannot clearÅheÜog\n"));

298 
	}
}

302 
	$uuid_hñp
()

304 
	`db¥ötf
(
	`_
(

323 
	}
}

325 
uuid_t
 *

326 
	$do_uuid
(
xfs_agnumbî_t
 
agno
, 
uuid_t
 *
uuid
)

328 
xfs_sb_t
 
tsb
;

329 
uuid_t
 
uu
;

331 i‡(!
	`gë_sb
(
agno
, &
tsb
))

332  
NULL
;

334 i‡(!
uuid
) {

335 
	`mem˝y
(&
uu
, &
tsb
.
sb_uuid
, (
uuid_t
));

336 
	`p›_cur
();

337  &
uu
;

340 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
tsb
))

341 
wrôe
;

350 i‡(!
	`xfs_sb_vîsi⁄_hasmëauuid
(&
tsb
) &&

351 !
	`uuid_equÆ
(
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
)) {

352 
mp
->
m_sb
.
sb_„©uªs_öcom∑t
 |
XFS_SB_FEAT_INCOMPAT_META_UUID
;

353 
tsb
.
sb_„©uªs_öcom∑t
 |
XFS_SB_FEAT_INCOMPAT_META_UUID
;

354 
	`mem˝y
(&
tsb
.
sb_mëa_uuid
, &tsb.
sb_uuid
, (
uuid_t
));

355 } i‡(
	`xfs_sb_vîsi⁄_hasmëauuid
(&
tsb
) &&

356 
	`uuid_equÆ
(
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
)) {

357 
	`mem£t
(&
tsb
.
sb_mëa_uuid
, 0, (
uuid_t
));

359 
	`libxfs_sb_to_disk
(
iocur_t›
->
d©a
, &
tsb
);

360 
mp
->
m_sb
.
sb_„©uªs_öcom∑t
 &=

361 ~
XFS_SB_FEAT_INCOMPAT_META_UUID
;

362 
tsb
.
sb_„©uªs_öcom∑t
 &~
XFS_SB_FEAT_INCOMPAT_META_UUID
;

365 
wrôe
:

366 
	`mem˝y
(&
tsb
.
sb_uuid
, 
uuid
, (
uuid_t
));

367 
	`libxfs_sb_to_disk
(
iocur_t›
->
d©a
, &
tsb
);

368 
	`wrôe_cur
();

369  
uuid
;

370 
	}
}

373 
	$uuid_f
(

374 
¨gc
,

375 **
¨gv
)

377 
bp
[40];

378 
xfs_agnumbî_t
 
agno
;

379 
uuid_t
 
uu
;

380 
uuid_t
 *
uup
 = 
NULL
;

382 i‡(
¨gc
 != 1 &&árgc != 2) {

383 
	`db¥ötf
(
	`_
("invalidÖarameters\n"));

387 i‡(
¨gc
 == 2) {

389 i‡((
x
.
i§ód⁄ly
 & 
LIBXFS_ISREADONLY
Ë|| !
ex≥π_mode
) {

390 
	`db¥ötf
(
	`_
("%s:Çot inÉxpert mode, writing disabled\n"),

391 
¥og«me
);

395 i‡(!
	`°rˇ£cmp
(
¨gv
[1], "generate")) {

396 
	`∂©f‹m_uuid_gíî©e
(&
uu
);

397 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "nil")) {

398 
	`∂©f‹m_uuid_˛ór
(&
uu
);

399 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "rewrite")) {

400 
uup
 = 
	`do_uuid
(0, 
NULL
);

401 i‡(!
uup
) {

402 
	`db¥ötf
(
	`_
("failedÅoÑead UUID from AG 0\n"));

405 
	`mem˝y
(&
uu
, 
uup
, (
uuid_t
));

406 
	`∂©f‹m_uuid_u≈¨£
(&
uu
, 
bp
);

407 
	`db¥ötf
(
	`_
("ﬁd UUID = %s\n"), 
bp
);

408 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "restore")) {

409 
xfs_sb_t
 
tsb
;

411 i‡(!
	`gë_sb
(0, &
tsb
))

415 i‡(!
	`xfs_sb_vîsi⁄_hasmëauuid
(&
tsb
))

418 
	`mem˝y
(&
uu
, 
mp
->
m_sb
.
sb_mëa_uuid
, (
uuid_t
));

420 i‡(
	`∂©f‹m_uuid_∑r£
(
¨gv
[1], &
uu
)) {

421 
	`db¥ötf
(
	`_
("invalid UUID\n"));

427 i‡(!
	`sb_logzîo
(&
uu
))

430 
	`db¥ötf
(
	`_
("writingáll SBs\n"));

431 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++)

432 i‡(!
	`do_uuid
(
agno
, &
uu
)) {

433 
	`db¥ötf
(
	`_
("ÁûedÅÿ£àUUID i¿AG %d\n"), 
agno
);

437 
	`∂©f‹m_uuid_u≈¨£
(&
uu
, 
bp
);

438 
	`db¥ötf
(
	`_
("√w UUID = %s\n"), 
bp
);

443 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

444 
uup
 = 
	`do_uuid
(
agno
, 
NULL
);

445 i‡(!
uup
) {

446 
	`db¥ötf
(
	`_
("failedÅoÑead UUID from AG %d\n"),

447 
agno
);

450 i‡(
agno
) {

451 i‡(
	`memcmp
(&
uu
, 
uup
, (
uuid_t
))) {

452 
	`db¥ötf
(
	`_
("warning: UUID in AG %d "

454 
agno
);

458 
	`mem˝y
(&
uu
, 
uup
, (
uuid_t
));

461 i‡(
mp
->
m_sb
.
sb_log°¨t
) {

462 i‡(
x
.
logdev
 && x.logdev !x.
ddev
)

463 
	`db¥ötf
(
	`_
("warning -ÉxternalÜog specified "

465 } i‡(!
x
.
logdev
 || (x.logdev =x.
ddev
)) {

466 
	`db¥ötf
(
	`_
("warning -ÇoÉxternalÜog specified "

470 
	`∂©f‹m_uuid_u≈¨£
(&
uu
, 
bp
);

471 
	`db¥ötf
(
	`_
("UUID = %s\n"), 
bp
);

475 
	}
}

479 
	$œbñ_hñp
()

481 
	`db¥ötf
(
	`_
(

497 
	}
}

500 
	$do_œbñ
(
xfs_agnumbî_t
 
agno
, *
œbñ
)

502 
size_t
 
Àn
;

503 
xfs_sb_t
 
tsb
;

504 
lbl
[(
tsb
.
sb_‚ame
) + 1];

506 i‡(!
	`gë_sb
(
agno
, &
tsb
))

507  
NULL
;

509 
	`mem£t
(&
lbl
[0], 0, (lbl));

511 i‡(!
œbñ
) {

512 
	`p›_cur
();

513 
	`mem˝y
(&
lbl
[0], &
tsb
.
sb_‚ame
, (tsb.sb_fname));

514  &
lbl
[0];

517 i‡((
Àn
 = 
	`°æí
(
œbñ
)Ë> (
tsb
.
sb_‚ame
)) {

518 i‡(
agno
 == 0)

519 
	`db¥ötf
(
	`_
("%s:ÅruncatingÜabelÜength from %dÅo %d\n"),

520 
¥og«me
, ()
Àn
, ()(
tsb
.
sb_‚ame
));

521 
Àn
 = (
tsb
.
sb_‚ame
);

523 i‡–
Àn
 == 2 &&

524 (
	`°rcmp
(
œbñ
, "\"\"") == 0 ||

525 
	`°rcmp
(
œbñ
, "''") == 0 ||

526 
	`°rcmp
(
œbñ
, "--") == 0) )

527 
œbñ
[0] =Üabel[1] = '\0';

528 
	`mem£t
(&
tsb
.
sb_‚ame
, 0, (tsb.sb_fname));

529 
	`mem˝y
(&
tsb
.
sb_‚ame
, 
œbñ
, 
Àn
);

530 
	`mem˝y
(&
lbl
[0], &
tsb
.
sb_‚ame
, (tsb.sb_fname));

531 
	`libxfs_sb_to_disk
(
iocur_t›
->
d©a
, &
tsb
);

532 
	`wrôe_cur
();

533  &
lbl
[0];

534 
	}
}

537 
	$œbñ_f
(

538 
¨gc
,

539 **
¨gv
)

541 *
p
 = 
NULL
;

542 
xfs_sb_t
 
sb
;

543 
xfs_agnumbî_t
 
ag
;

545 i‡(
¨gc
 != 1 &&árgc != 2) {

546 
	`db¥ötf
(
	`_
("invalidÖarameters\n"));

550 i‡(
¨gc
 == 2) {

552 i‡((
x
.
i§ód⁄ly
 & 
LIBXFS_ISREADONLY
Ë|| !
ex≥π_mode
) {

553 
	`db¥ötf
(
	`_
("%s:Çot inÉxpert mode, writing disabled\n"),

554 
¥og«me
);

558 
	`db¥ötf
(
	`_
("writingáll SBs\n"));

559 
ag
 = 0;ág < 
mp
->
m_sb
.
sb_agcou¡
;ág++)

560 i‡((
p
 = 
	`do_œbñ
(
ag
, 
¨gv
[1])Ë=
NULL
) {

561 
	`db¥ötf
(
	`_
("ÁûedÅÿ£àœbñ i¿AG %d\n"), 
ag
);

564 
	`db¥ötf
(
	`_
("√wÜabñ = \"%s\"\n"), 
p
);

568 
ag
 = 0;ág < 
mp
->
m_sb
.
sb_agcou¡
;ág++) {

569 
p
 = 
	`do_œbñ
(
ag
, 
NULL
);

570 i‡(!
p
) {

571 
	`db¥ötf
(
	`_
("ÁûedÅÿªadÜabñ i¿AG %d\n"), 
ag
);

574 i‡(!
ag
)

575 
	`mem˝y
(&
sb
.
sb_‚ame
, 
p
, (sb.sb_fname));

576 i‡(
	`memcmp
(&
sb
.
sb_‚ame
, 
p
, (sb.sb_fname)))

577 
	`db¥ötf
(
	`_
("w¨nög: AG %dÜabñ dif„rs\n"), 
ag
);

579 
	`db¥ötf
(
	`_
("œbñ = \"%s\"\n"), 
p
);

582 
	}
}

586 
	$vîsi⁄_hñp
()

588 
	`db¥ötf
(
	`_
(

606 
	}
}

609 
	$do_vîsi⁄
(
xfs_agnumbî_t
 
agno
, 
__uöt16_t
 
vîsi⁄
, 
__uöt32_t
 
„©uªs
)

611 
xfs_sb_t
 
tsb
;

613 i‡(!
	`gë_sb
(
agno
, &
tsb
))

616 i‡(
	`xfs_sb_has_mism©ched_„©uªs2
(&
tsb
)) {

617 
	`db¥ötf
(
	`_
("Superblock has mismatched features2 fields, "

622 i‡((
vîsi⁄
 & 
XFS_SB_VERSION_LOGV2BIT
) &&

623 !
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
tsb
)) {

624 
tsb
.
sb_logsunô
 = 1;

627 
tsb
.
sb_vîsi⁄num
 = 
vîsi⁄
;

628 
tsb
.
sb_„©uªs2
 = 
„©uªs
;

629 
tsb
.
sb_bad_„©uªs2
 = 
„©uªs
;

630 
	`libxfs_sb_to_disk
(
iocur_t›
->
d©a
, &
tsb
);

631 
	`wrôe_cur
();

633 
	}
}

636 
	$vîsi⁄_°rög
(

637 
xfs_sb_t
 *
sbp
)

639 
s
[1024];

641 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_1
)

642 
	`°r˝y
(
s
, "V1");

643 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_2
)

644 
	`°r˝y
(
s
, "V2");

645 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_3
)

646 
	`°r˝y
(
s
, "V3");

647 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_4
)

648 
	`°r˝y
(
s
, "V4");

649 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
)

650 
	`°r˝y
(
s
, "V5");

656 i‡(
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_NLINKBIT
)

657 
	`°rˇt
(
s
, ",NLINK");

658 i‡(
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_SHAREDBIT
)

659 
	`°rˇt
(
s
, ",SHARED");

660 i‡(
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_DIRV2BIT
)

661 
	`°rˇt
(
s
, ",DIRV2");

663 i‡(
	`xfs_sb_vîsi⁄_haßâr
(
sbp
))

664 
	`°rˇt
(
s
, ",ATTR");

665 i‡(
	`xfs_sb_vîsi⁄_hasquŸa
(
sbp
))

666 
	`°rˇt
(
s
, ",QUOTA");

667 i‡(
	`xfs_sb_vîsi⁄_haßlign
(
sbp
))

668 
	`°rˇt
(
s
, ",ALIGN");

669 i‡(
	`xfs_sb_vîsi⁄_hasdÆign
(
sbp
))

670 
	`°rˇt
(
s
, ",DALIGN");

671 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(
sbp
))

672 
	`°rˇt
(
s
, ",LOGV2");

673 i‡(
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(
sbp
))

674 
	`°rˇt
(
s
, ",EXTFLG");

675 i‡(
	`xfs_sb_vîsi⁄_has£˘‹
(
sbp
))

676 
	`°rˇt
(
s
, ",SECTOR");

677 i‡(
	`xfs_sb_vîsi⁄_haßsciici
(
sbp
))

678 
	`°rˇt
(
s
, ",ASCII_CI");

679 i‡(
	`xfs_sb_vîsi⁄_hasm‹ebôs
(
sbp
))

680 
	`°rˇt
(
s
, ",MOREBITS");

681 i‡(
	`xfs_sb_vîsi⁄_haßâr2
(
sbp
))

682 
	`°rˇt
(
s
, ",ATTR2");

683 i‡(
	`xfs_sb_vîsi⁄_ha¶azysbcou¡
(
sbp
))

684 
	`°rˇt
(
s
, ",LAZYSBCOUNT");

685 i‡(
	`xfs_sb_vîsi⁄_ha•rojid32bô
(
sbp
))

686 
	`°rˇt
(
s
, ",PROJID32BIT");

687 i‡(
	`xfs_sb_vîsi⁄_has¸c
(
sbp
))

688 
	`°rˇt
(
s
, ",CRC");

689 i‡(
	`xfs_sb_vîsi⁄_has·y≥
(
sbp
))

690 
	`°rˇt
(
s
, ",FTYPE");

691 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(
sbp
))

692 
	`°rˇt
(
s
, ",FINOBT");

693 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(
sbp
))

694 
	`°rˇt
(
s
, ",SPARSE_INODES");

695 i‡(
	`xfs_sb_vîsi⁄_hasmëauuid
(
sbp
))

696 
	`°rˇt
(
s
, ",META_UUID");

697 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(
sbp
))

698 
	`°rˇt
(
s
, ",REFLINK");

699  
s
;

700 
	}
}

709 
	$vîsi⁄_f
(

710 
¨gc
,

711 **
¨gv
)

713 
__uöt16_t
 
vîsi⁄
 = 0;

714 
__uöt32_t
 
„©uªs
 = 0;

715 
xfs_agnumbî_t
 
ag
;

717 i‡(
¨gc
 == 2) {

719 i‡((
x
.
i§ód⁄ly
 & 
LIBXFS_ISREADONLY
Ë|| !
ex≥π_mode
) {

720 
	`db¥ötf
(
	`_
("%s:Çot inÉxpert mode, writing disabled\n"),

721 
¥og«me
);

726 i‡(!
	`°rˇ£cmp
(
¨gv
[1], "extflg")) {

727 
	`XFS_SB_VERSION_NUM
(&
mp
->
m_sb
)) {

728 
XFS_SB_VERSION_1
:

729 
vîsi⁄
 = 0x0004 | 
XFS_SB_VERSION_EXTFLGBIT
;

731 
XFS_SB_VERSION_2
:

732 
vîsi⁄
 = 0x0014 | 
XFS_SB_VERSION_EXTFLGBIT
;

734 
XFS_SB_VERSION_3
:

735 
vîsi⁄
 = 0x0034 | 
XFS_SB_VERSION_EXTFLGBIT
;

737 
XFS_SB_VERSION_4
:

738 i‡(
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(&
mp
->
m_sb
))

739 
	`db¥ötf
(

740 
	`_
("unwrittenÉxtents flag isálreadyÉnabled\n"));

742 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
 |

743 
XFS_SB_VERSION_EXTFLGBIT
;

745 
XFS_SB_VERSION_5
:

746 
	`db¥ötf
(

747 
	`_
("unwrittenÉxtentsálwaysÉnabled for v5 superblocks.\n"));

750 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "log2")) {

751 
	`XFS_SB_VERSION_NUM
(&
mp
->
m_sb
)) {

752 
XFS_SB_VERSION_1
:

753 
vîsi⁄
 = 0x0004 | 
XFS_SB_VERSION_LOGV2BIT
;

755 
XFS_SB_VERSION_2
:

756 
vîsi⁄
 = 0x0014 | 
XFS_SB_VERSION_LOGV2BIT
;

758 
XFS_SB_VERSION_3
:

759 
vîsi⁄
 = 0x0034 | 
XFS_SB_VERSION_LOGV2BIT
;

761 
XFS_SB_VERSION_4
:

762 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
))

763 
	`db¥ötf
(

764 
	`_
("version 2Üog format isálready in use\n"));

766 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
 |

767 
XFS_SB_VERSION_LOGV2BIT
;

769 
XFS_SB_VERSION_5
:

770 
	`db¥ötf
(

771 
	`_
("Version 2ÜogsálwaysÉnabled for v5 superblocks.\n"));

774 } i‡(
	`XFS_SB_VERSION_NUM
(&
mp
->
m_sb
Ë=
XFS_SB_VERSION_5
) {

775 
	`db¥ötf
(

776 
	`_
("%s: Cannot change %s on v5 superblocks.\n"),

777 
¥og«me
, 
¨gv
[1]);

779 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "attr1")) {

781 i‡(
	`xfs_sb_vîsi⁄_haßâr2
(&
mp
->
m_sb
)) {

782 i‡(!(
mp
->
m_sb
.
sb_„©uªs2
 &=

783 ~
XFS_SB_VERSION2_ATTR2BIT
))

784 
mp
->
m_sb
.
sb_vîsi⁄num
 &=

785 ~
XFS_SB_VERSION_MOREBITSBIT
;

787 
	`xfs_sb_vîsi⁄_add©å
(&
mp
->
m_sb
);

788 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
;

789 
„©uªs
 = 
mp
->
m_sb
.
sb_„©uªs2
;

790 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "attr2")) {

791 
	`xfs_sb_vîsi⁄_add©å
(&
mp
->
m_sb
);

792 
	`xfs_sb_vîsi⁄_add©å2
(&
mp
->
m_sb
);

793 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
;

794 
„©uªs
 = 
mp
->
m_sb
.
sb_„©uªs2
;

795 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "projid32bit")) {

796 
	`xfs_sb_vîsi⁄_add¥ojid32bô
(&
mp
->
m_sb
);

797 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
;

798 
„©uªs
 = 
mp
->
m_sb
.
sb_„©uªs2
;

800 
	`db¥ötf
(
	`_
("%s: invalid version change command \"%s\"\n"),

801 
¥og«me
, 
¨gv
[1]);

805 i‡(
vîsi⁄
) {

806 
	`db¥ötf
(
	`_
("writingáll SBs\n"));

807 
ag
 = 0;ág < 
mp
->
m_sb
.
sb_agcou¡
;ág++)

808 i‡(!
	`do_vîsi⁄
(
ag
, 
vîsi⁄
, 
„©uªs
)) {

809 
	`db¥ötf
(
	`_
("failedÅo set versionnum "

810 "ö AG %d\n"), 
ag
);

813 
mp
->
m_sb
.
sb_vîsi⁄num
 = 
vîsi⁄
;

814 
mp
->
m_sb
.
sb_„©uªs2
 = 
„©uªs
;

818 i‡(
¨gc
 == 3) {

819 *
•
;

821 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
;

822 
„©uªs
 = 
mp
->
m_sb
.
sb_„©uªs2
;

823 
mp
->
m_sb
.
sb_vîsi⁄num
 = 
	`°πoul
(
¨gv
[1], &
•
, 0);

824 
mp
->
m_sb
.
sb_„©uªs2
 = 
	`°πoul
(
¨gv
[2], &
•
, 0);

827 
	`db¥ötf
(
	`_
("vîsi⁄num [0x%x+0x%x] = %s\n"), 
mp
->
m_sb
.
sb_vîsi⁄num
,

828 
mp
->
m_sb
.
sb_„©uªs2
, 
	`vîsi⁄_°rög
(&mp->m_sb));

830 i‡(
¨gc
 == 3) {

831 
mp
->
m_sb
.
sb_vîsi⁄num
 = 
vîsi⁄
;

832 
mp
->
m_sb
.
sb_„©uªs2
 = 
„©uªs
;

837 
	}
}

	@sb.h

19 c⁄° 
fõld
 
sb_Êds
[];

20 c⁄° 
fõld
 
sb_hÊd
[];

22 
sb_öô
();

23 
sb_logcheck
();

24 
sb_size
(*
obj
, 
°¨toff
, 
idx
);

	@sig.c

19 
	~"libxfs.h
"

20 
	~<sig«l.h
>

21 
	~"sig.h
"

23 
	ggŸöå
;

24 
sig£t_t
 
	göå£t
;

27 
	$öãºu±
(
sig
, 
sigöfo_t
 *
öfo
, *
uc
)

29 
gŸöå
 = 1;

30 
	}
}

33 
	$blocköt
()

35 
	`sig¥ocmask
(
SIG_BLOCK
, &
öå£t
, 
NULL
);

36 
	}
}

39 
	$˛óröt
()

41 
gŸöå
 = 0;

42 
	}
}

45 
	$öô_sig
()

47 
siga˘i⁄
 
ß
;

49 
	`mem£t
(&
ß
, 0, (sa));

50 
ß
.
ß_siga˘i⁄
 = 
öãºu±
;

51 
	`siga˘i⁄
(
SIGINT
, &
ß
, 
NULL
);

52 
	`sigem±y£t
(&
öå£t
);

53 
	`sigadd£t
(&
öå£t
, 
SIGINT
);

54 
	}
}

57 
	$£íöt
()

59  
gŸöå
;

60 
	}
}

63 
	$unblocköt
()

65 
	`sig¥ocmask
(
SIG_UNBLOCK
, &
öå£t
, 
NULL
);

66 
	}
}

	@sig.h

19 
blocköt
();

20 
˛óröt
();

21 
öô_sig
();

22 
£íöt
();

23 
unblocköt
();

	@strvec.c

19 
	~"libxfs.h
"

20 
	~"°rvec.h
"

21 
	~"ouçut.h
"

22 
	~"mÆloc.h
"

24 
cou¡_°rvec
(**
vec
);

27 
	$add_°rvec
(

28 ***
ve˝
,

29 *
°r
)

31 *
dup
;

32 
i
;

33 **
vec
;

35 
dup
 = 
	`x°rdup
(
°r
);

36 
vec
 = *
ve˝
;

37 
i
 = 
	`cou¡_°rvec
(
vec
);

38 
vec
 = 
	`xªÆloc
(vec, (*vecË* (
i
 + 2));

39 
vec
[
i
] = 
dup
;

40 
vec
[
i
 + 1] = 
NULL
;

41 *
ve˝
 = 
vec
;

42 
	}
}

45 
	$c›y_°rvec
(

46 **
vec
)

48 
i
;

49 **
rvÆ
;

51 
i
 = 
	`cou¡_°rvec
(
vec
);

52 
rvÆ
 = 
	`√w_°rvec
(
i
);

53 
i
 = 0; 
vec
[i] !
NULL
; i++)

54 
rvÆ
[
i
] = 
	`x°rdup
(
vec
[i]);

55  
rvÆ
;

56 
	}
}

59 
	$cou¡_°rvec
(

60 **
vec
)

62 
i
;

64 
i
 = 0; 
vec
[i] !
NULL
; i++)

66  
i
;

67 
	}
}

70 
	$‰ì_°rvec
(

71 **
vec
)

73 
i
;

75 
i
 = 0; 
vec
[i] !
NULL
; i++)

76 
	`x‰ì
(
vec
[
i
]);

77 
	`x‰ì
(
vec
);

78 
	}
}

81 
	$√w_°rvec
(

82 
cou¡
)

84 **
rvÆ
;

86 
rvÆ
 = 
	`xmÆloc
((*rvÆË* (
cou¡
 + 1));

87 
rvÆ
[
cou¡
] = 
NULL
;

88  
rvÆ
;

89 
	}
}

92 
	$¥öt_°rvec
(

93 **
vec
)

95 
i
;

97 
i
 = 0; 
vec
[i] !
NULL
; i++)

98 
	`db¥ötf
("%s", 
vec
[
i
]);

99 
	}
}

	@strvec.h

19 
add_°rvec
(***
ve˝
, *
°r
);

20 **
c›y_°rvec
(**
vec
);

21 
‰ì_°rvec
(**
vec
);

22 **
√w_°rvec
(
cou¡
);

23 
¥öt_°rvec
(**
vec
);

	@symlink.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"bô.h
"

25 
	~"öô.h
"

32 
	$symlök_cou¡
(

33 *
obj
,

34 
°¨toff
)

36 
xfs_dsymlök_hdr
 *
hdr
 = 
obj
;

38 
	`ASSERT
(
°¨toff
 == 0);

40 i‡(
hdr
->
¶_magic
 !
	`˝u_to_be32
(
XFS_SYMLINK_MAGIC
))

42 i‡(
	`be32_to_˝u
(
hdr
->
¶_byãs
Ë+ (*hdrË> 
mp
->
m_sb
.
sb_blocksize
)

43  
mp
->
m_sb
.
sb_blocksize
 - (*
hdr
);

44  
	`be32_to_˝u
(
hdr
->
¶_byãs
);

45 
	}
}

48 
	$symlök_size
(

49 *
obj
,

50 
°¨toff
,

51 
idx
)

53 
xfs_dsymlök_hdr
 *
hdr
 = 
obj
;

55 
	`ASSERT
(
°¨toff
 == 0);

56 i‡(
hdr
->
¶_magic
 !
	`˝u_to_be32
(
XFS_SYMLINK_MAGIC
))

58  
	`be32_to_˝u
(
hdr
->
¶_byãs
) + (*hdr);

59 
	}
}

61 c⁄° 
fõld
 
	gsymlök_¸c_hÊd
[] = {

62 { "", 
FLDT_SYMLINK_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

63 { 
NULL
 }

66 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dsymlök_hdr
, 
¶_
 ## f))

	)

67 
	#SZOF
(
f
Ë
	`bôize
((
xfs_dsymlök_hdr
))

	)

68 c⁄° 
fõld
 
	gsymlök_¸c_Êds
[] = {

69 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

70 { "off£t", 
FLDT_UINT32D
, 
OI
(
OFF
(
off£t
)), 
C1
, 0, 
TYP_NONE
 },

71 { "byãs", 
FLDT_UINT32D
, 
OI
(
OFF
(
byãs
)), 
C1
, 0, 
TYP_NONE
 },

72 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

73 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

74 { "ow√r", 
FLDT_INO
, 
OI
(
OFF
(
ow√r
)), 
C1
, 0, 
TYP_NONE
 },

75 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
blkno
)), 
C1
, 0, 
TYP_BMAPBTD
 },

76 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

77 { "d©a", 
FLDT_CHARNS
, 
OI
(
bôize
((
xfs_dsymlök_hdr
))),

78 
symlök_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

79 { 
NULL
 }

	@symlink.h

18 #i‚de‡
__XFS_DB_SYMLINK_H


19 
	#__XFS_DB_SYMLINK_H


	)

21 c⁄° 
fõld
 
symlök_¸c_hÊd
[];

22 c⁄° 
fõld
 
symlök_¸c_Êds
[];

24 
symlök_size
(*
obj
, 
°¨toff
, 
idx
);

	@text.c

19 
	~"libxfs.h
"

20 
	~<˘y≥.h
>

21 
	~"block.h
"

22 
	~"bm≠.h
"

23 
	~"comm™d.h
"

24 
	~"ty≥.h
"

25 
	~"Áddr.h
"

26 
	~"Âröt.h
"

27 
	~"fõld.h
"

28 
	~"öode.h
"

29 
	~"io.h
"

30 
	~"ouçut.h
"

31 
	~"öô.h
"

33 
¥öt_øwãxt
(*
d©a
, 
Àn
);

36 
	$¥öt_ãxt
(

37 c⁄° 
fõld_t
 *
fõlds
,

38 
¨gc
,

39 **
¨gv
)

41 
	`¥öt_øwãxt
(
iocur_t›
->
d©a
, iocur_t›->
Àn
);

42 
	}
}

45 
	$¥öt_øwãxt
(

46 *
d©a
,

47 
Àn
)

49 
i
;

50 
j
;

51 
œ°addr
;

52 
offch¨s
;

53 *
p
;

55 
œ°addr
 = (
Àn
 - 1) & ~(16 - 1);

56 i‡(
œ°addr
 < 0x10)

57 
offch¨s
 = 1;

58 i‡(
œ°addr
 < 0x100)

59 
offch¨s
 = 2;

60 i‡(
œ°addr
 < 0x1000)

61 
offch¨s
 = 3;

63 
offch¨s
 = 4;

65 
i
 = 0, 
p
 = 
d©a
; i < 
Àn
; i += 16) {

66 *
s
 = 
p
;

68 
	`db¥ötf
("%-0*.*x: ", 
offch¨s
, offch¨s, 
i
);

70 
j
 = 0; j < 16 && 
i
 + j < 
Àn
; j++, 
p
++) {

71 
	`db¥ötf
("%02x ", *
p
);

74 
	`db¥ötf
(" ");

76 
j
 = 0; j < 16 && 
i
 + j < 
Àn
; j++, 
s
++) {

77 i‡(
	`iß um
(*
s
))

78 
	`db¥ötf
("%c", *
s
);

80 
	`db¥ötf
(".", *
s
);

83 
	`db¥ötf
("\n");

85 
	}
}

	@text.h

19 
¥öt_ãxt
(c⁄° 
fõld
 *
fõlds
, 
¨gc
, **
¨gv
);

	@type.c

19 
	~"libxfs.h
"

20 
	~"block.h
"

21 
	~"comm™d.h
"

22 
	~"ty≥.h
"

23 
	~"Áddr.h
"

24 
	~"Âröt.h
"

25 
	~"fõld.h
"

26 
	~"¥öt.h
"

27 
	~"sb.h
"

28 
	~"öode.h
"

29 
	~"btblock.h
"

30 
	~"bmroŸ.h
"

31 
	~"agf.h
"

32 
	~"agÊ.h
"

33 
	~"agi.h
"

34 
	~"io.h
"

35 
	~"ouçut.h
"

36 
	~"wrôe.h
"

37 
	~"©å.h
"

38 
	~"dquŸ.h
"

39 
	~"dú2.h
"

40 
	~"ãxt.h
"

41 
	~"symlök.h
"

43 c⁄° 
typ_t
 *
födtyp
(*
«me
);

44 
ty≥_f
(
¨gc
, **
¨gv
);

46 c⁄° 
typ_t
 *
	gcur_typ
;

48 c⁄° 
cmdöfo_t
 
	gty≥_cmd
 =

49 { "ty≥", 
NULL
, 
ty≥_f
, 0, 1, 1, 
N_
("[newtype]"),

50 
N_
("£t/show cuºíàd©®ty≥"), 
NULL
 };

52 c⁄° 
typ_t
 
	g__ty±ab
[] = {

53 { 
TYP_AGF
, "agf", 
h™dÀ_°ru˘
, 
agf_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

54 { 
TYP_AGFL
, "agÊ", 
h™dÀ_°ru˘
, 
agÊ_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

55 { 
TYP_AGI
, "agi", 
h™dÀ_°ru˘
, 
agi_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

56 { 
TYP_ATTR
, "©å", 
h™dÀ_°ru˘
, 
©å_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

57 { 
TYP_BMAPBTA
, "bm≠bè", 
h™dÀ_°ru˘
, 
bm≠bè_hÊd
, 
NULL
,

58 
TYP_F_NO_CRC_OFF
 },

59 { 
TYP_BMAPBTD
, "bm≠btd", 
h™dÀ_°ru˘
, 
bm≠btd_hÊd
, 
NULL
,

60 
TYP_F_NO_CRC_OFF
 },

61 { 
TYP_BNOBT
, "bnobt", 
h™dÀ_°ru˘
, 
bnobt_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

62 { 
TYP_CNTBT
, "˙tbt", 
h™dÀ_°ru˘
, 
˙tbt_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

63 { 
TYP_RMAPBT
, 
NULL
 },

64 { 
TYP_REFCBT
, 
NULL
 },

65 { 
TYP_DATA
, "d©a", 
h™dÀ_block
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

66 { 
TYP_DIR2
, "dú2", 
h™dÀ_°ru˘
, 
dú2_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

67 { 
TYP_DQBLK
, "dqblk", 
h™dÀ_°ru˘
, 
dqblk_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

68 { 
TYP_INOBT
, "öobt", 
h™dÀ_°ru˘
, 
öobt_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

69 { 
TYP_INODATA
, "öod©a", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

70 { 
TYP_INODE
, "öode", 
h™dÀ_°ru˘
, 
öode_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

71 { 
TYP_LOG
, "log", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

72 { 
TYP_RTBITMAP
, "πbôm≠", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

73 { 
TYP_RTSUMMARY
, "πsumm¨y", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

74 { 
TYP_SB
, "sb", 
h™dÀ_°ru˘
, 
sb_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

75 { 
TYP_SYMLINK
, "symlök", 
h™dÀ_°rög
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

76 { 
TYP_TEXT
, "ãxt", 
h™dÀ_ãxt
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

77 { 
TYP_FINOBT
, "föobt", 
h™dÀ_°ru˘
, 
öobt_hÊd
, 
NULL
,

78 
TYP_F_NO_CRC_OFF
 },

79 { 
TYP_NONE
, 
NULL
 }

82 c⁄° 
typ_t
 
	g__ty±ab_¸c
[] = {

83 { 
TYP_AGF
, "agf", 
h™dÀ_°ru˘
, 
agf_hÊd
, &
xfs_agf_buf_›s
,

84 
XFS_AGF_CRC_OFF
 },

85 { 
TYP_AGFL
, "agÊ", 
h™dÀ_°ru˘
, 
agÊ_¸c_hÊd
, &
xfs_agÊ_buf_›s
,

86 
XFS_AGFL_CRC_OFF
 },

87 { 
TYP_AGI
, "agi", 
h™dÀ_°ru˘
, 
agi_hÊd
, &
xfs_agi_buf_›s
,

88 
XFS_AGI_CRC_OFF
 },

89 { 
TYP_ATTR
, "©å3", 
h™dÀ_°ru˘
, 
©å3_hÊd
,

90 &
xfs_©å3_db_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

91 { 
TYP_BMAPBTA
, "bm≠bè", 
h™dÀ_°ru˘
, 
bm≠bè_¸c_hÊd
,

92 &
xfs_bmbt_buf_›s
, 
XFS_BTREE_LBLOCK_CRC_OFF
 },

93 { 
TYP_BMAPBTD
, "bm≠btd", 
h™dÀ_°ru˘
, 
bm≠btd_¸c_hÊd
,

94 &
xfs_bmbt_buf_›s
, 
XFS_BTREE_LBLOCK_CRC_OFF
 },

95 { 
TYP_BNOBT
, "bnobt", 
h™dÀ_°ru˘
, 
bnobt_¸c_hÊd
,

96 &
xfs_Ælocbt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

97 { 
TYP_CNTBT
, "˙tbt", 
h™dÀ_°ru˘
, 
˙tbt_¸c_hÊd
,

98 &
xfs_Ælocbt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

99 { 
TYP_RMAPBT
, "rm≠bt", 
h™dÀ_°ru˘
, 
rm≠bt_¸c_hÊd
,

100 &
xfs_rm≠bt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

101 { 
TYP_REFCBT
, "ªf˙tbt", 
h™dÀ_°ru˘
, 
ªfcbt_¸c_hÊd
,

102 &
xfs_ªfcou¡bt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

103 { 
TYP_DATA
, "d©a", 
h™dÀ_block
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

104 { 
TYP_DIR2
, "dú3", 
h™dÀ_°ru˘
, 
dú3_hÊd
,

105 &
xfs_dú3_db_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

106 { 
TYP_DQBLK
, "dqblk", 
h™dÀ_°ru˘
, 
dqblk_hÊd
,

107 &
xfs_dquŸ_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

108 { 
TYP_INOBT
, "öobt", 
h™dÀ_°ru˘
, 
öobt_¸c_hÊd
,

109 &
xfs_öobt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

110 { 
TYP_INODATA
, "öod©a", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

111 { 
TYP_INODE
, "öode", 
h™dÀ_°ru˘
, 
öode_¸c_hÊd
,

112 &
xfs_öode_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

113 { 
TYP_LOG
, "log", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

114 { 
TYP_RTBITMAP
, "πbôm≠", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

115 { 
TYP_RTSUMMARY
, "πsumm¨y", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

116 { 
TYP_SB
, "sb", 
h™dÀ_°ru˘
, 
sb_hÊd
, &
xfs_sb_buf_›s
,

117 
XFS_SB_CRC_OFF
 },

118 { 
TYP_SYMLINK
, "symlök", 
h™dÀ_°ru˘
, 
symlök_¸c_hÊd
,

119 &
xfs_symlök_buf_›s
, 
XFS_SYMLINK_CRC_OFF
 },

120 { 
TYP_TEXT
, "ãxt", 
h™dÀ_ãxt
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

121 { 
TYP_FINOBT
, "föobt", 
h™dÀ_°ru˘
, 
öobt_¸c_hÊd
,

122 &
xfs_öobt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

123 { 
TYP_NONE
, 
NULL
 }

126 c⁄° 
typ_t
 
	g__ty±ab_•¸c
[] = {

127 { 
TYP_AGF
, "agf", 
h™dÀ_°ru˘
, 
agf_hÊd
, &
xfs_agf_buf_›s
,

128 
XFS_AGF_CRC_OFF
 },

129 { 
TYP_AGFL
, "agÊ", 
h™dÀ_°ru˘
, 
agÊ_¸c_hÊd
, &
xfs_agÊ_buf_›s
 ,

130 
XFS_AGFL_CRC_OFF
 },

131 { 
TYP_AGI
, "agi", 
h™dÀ_°ru˘
, 
agi_hÊd
, &
xfs_agi_buf_›s
 ,

132 
XFS_AGI_CRC_OFF
 },

133 { 
TYP_ATTR
, "©å3", 
h™dÀ_°ru˘
, 
©å3_hÊd
,

134 &
xfs_©å3_db_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

135 { 
TYP_BMAPBTA
, "bm≠bè", 
h™dÀ_°ru˘
, 
bm≠bè_¸c_hÊd
,

136 &
xfs_bmbt_buf_›s
, 
XFS_BTREE_LBLOCK_CRC_OFF
 },

137 { 
TYP_BMAPBTD
, "bm≠btd", 
h™dÀ_°ru˘
, 
bm≠btd_¸c_hÊd
,

138 &
xfs_bmbt_buf_›s
, 
XFS_BTREE_LBLOCK_CRC_OFF
 },

139 { 
TYP_BNOBT
, "bnobt", 
h™dÀ_°ru˘
, 
bnobt_¸c_hÊd
,

140 &
xfs_Ælocbt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

141 { 
TYP_CNTBT
, "˙tbt", 
h™dÀ_°ru˘
, 
˙tbt_¸c_hÊd
,

142 &
xfs_Ælocbt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

143 { 
TYP_RMAPBT
, "rm≠bt", 
h™dÀ_°ru˘
, 
rm≠bt_¸c_hÊd
,

144 &
xfs_rm≠bt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

145 { 
TYP_REFCBT
, "ªf˙tbt", 
h™dÀ_°ru˘
, 
ªfcbt_¸c_hÊd
,

146 &
xfs_ªfcou¡bt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

147 { 
TYP_DATA
, "d©a", 
h™dÀ_block
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

148 { 
TYP_DIR2
, "dú3", 
h™dÀ_°ru˘
, 
dú3_hÊd
,

149 &
xfs_dú3_db_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

150 { 
TYP_DQBLK
, "dqblk", 
h™dÀ_°ru˘
, 
dqblk_hÊd
,

151 &
xfs_dquŸ_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

152 { 
TYP_INOBT
, "öobt", 
h™dÀ_°ru˘
, 
öobt_•¸c_hÊd
,

153 &
xfs_öobt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

154 { 
TYP_INODATA
, "öod©a", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

155 { 
TYP_INODE
, "öode", 
h™dÀ_°ru˘
, 
öode_¸c_hÊd
,

156 &
xfs_öode_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

157 { 
TYP_LOG
, "log", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

158 { 
TYP_RTBITMAP
, "πbôm≠", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

159 { 
TYP_RTSUMMARY
, "πsumm¨y", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

160 { 
TYP_SB
, "sb", 
h™dÀ_°ru˘
, 
sb_hÊd
, &
xfs_sb_buf_›s
,

161 
XFS_SB_CRC_OFF
 },

162 { 
TYP_SYMLINK
, "symlök", 
h™dÀ_°ru˘
, 
symlök_¸c_hÊd
,

163 &
xfs_symlök_buf_›s
, 
XFS_SYMLINK_CRC_OFF
 },

164 { 
TYP_TEXT
, "ãxt", 
h™dÀ_ãxt
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

165 { 
TYP_FINOBT
, "föobt", 
h™dÀ_°ru˘
, 
öobt_¸c_hÊd
,

166 &
xfs_öobt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

167 { 
TYP_NONE
, 
NULL
 }

170 c⁄° 
typ_t
 *
	gty±ab
 = 
__ty±ab
;

173 
	$ty≥_£t_èb_¸c
()

175 
ty±ab
 = 
__ty±ab_¸c
;

176 
	}
}

179 
	$ty≥_£t_èb_•¸c
()

181 
ty±ab
 = 
__ty±ab_•¸c
;

182 
	}
}

184 c⁄° 
typ_t
 *

185 
	$födtyp
(

186 *
«me
)

188 c⁄° 
typ_t
 *
â
;

190 
â
 = 
ty±ab
;Åt->
ty≤m
 !
TYP_NONE
;Åt++) {

191 
	`ASSERT
(
â
->
ty≤m
 =(
ty≤m_t
)—à- 
ty±ab
));

192 i‡(
â
->
«me
 && 
	`°rcmp
(tt->name,Çame) == 0)

193  
â
;

195  
NULL
;

196 
	}
}

199 
	$ty≥_f
(

200 
¨gc
,

201 **
¨gv
)

203 c⁄° 
typ_t
 *
â
;

204 
cou¡
 = 0;

206 i‡(
¨gc
 == 1) {

207 i‡(
cur_typ
 =
NULL
)

208 
	`db¥ötf
(
	`_
("no currentÅype\n"));

210 
	`db¥ötf
(
	`_
("cuºíàty≥ i†\"%s\"\n"), 
cur_typ
->
«me
);

212 
	`db¥ötf
(
	`_
("\n supportedÅypesáre:\n "));

213 
â
 = 
ty±ab
, 
cou¡
 = 0;Åt->
ty≤m
 !
TYP_NONE
;Åt++) {

214 i‡(
â
->
«me
 =
NULL
)

216 i‡((
â
+1)->
«me
 !
NULL
) {

217 
	`db¥ötf
("%s, ", 
â
->
«me
);

218 i‡((++
cou¡
 % 8) == 0)

219 
	`db¥ötf
("\n ");

220 } i‡((
â
+1)->
ty≤m
 =
TYP_NONE
) {

221 
	`db¥ötf
("%s\n", 
â
->
«me
);

227 
â
 = 
	`födtyp
(
¨gv
[1]);

228 i‡(
â
 =
NULL
) {

229 
	`db¥ötf
(
	`_
("nÿsuchÅy≥ %s\n"), 
¨gv
[1]);

231 i‡(
iocur_t›
->
typ
 =
NULL
)

232 
	`db¥ötf
(
	`_
("no current object\n"));

234 
cur_typ
 = 
â
;

235 
	`£t_iocur_ty≥
(
â
);

240 
	}
}

243 
	$ty≥_öô
()

245 
	`add_comm™d
(&
ty≥_cmd
);

246 
	}
}

251 
	$h™dÀ_°ru˘
(

252 
a˘i⁄
,

253 c⁄° 
fõld_t
 *
fõlds
,

254 
¨gc
,

255 **
¨gv
)

257 i‡(
a˘i⁄
 =
DB_WRITE
)

258 
	`wrôe_°ru˘
(
fõlds
, 
¨gc
, 
¨gv
);

260 
	`¥öt_°ru˘
(
fõlds
, 
¨gc
, 
¨gv
);

261 
	}
}

264 
	$h™dÀ_°rög
(

265 
a˘i⁄
,

266 c⁄° 
fõld_t
 *
fõlds
,

267 
¨gc
,

268 **
¨gv
)

270 i‡(
a˘i⁄
 =
DB_WRITE
)

271 
	`wrôe_°rög
(
fõlds
, 
¨gc
, 
¨gv
);

273 
	`¥öt_°rög
(
fõlds
, 
¨gc
, 
¨gv
);

274 
	}
}

277 
	$h™dÀ_block
(

278 
a˘i⁄
,

279 c⁄° 
fõld_t
 *
fõlds
,

280 
¨gc
,

281 **
¨gv
)

283 i‡(
a˘i⁄
 =
DB_WRITE
)

284 
	`wrôe_block
(
fõlds
, 
¨gc
, 
¨gv
);

286 
	`¥öt_block
(
fõlds
, 
¨gc
, 
¨gv
);

287 
	}
}

290 
	$h™dÀ_ãxt
(

291 
a˘i⁄
,

292 c⁄° 
fõld_t
 *
fõlds
,

293 
¨gc
,

294 **
¨gv
)

296 i‡(
a˘i⁄
 !
DB_WRITE
)

297 
	`¥öt_ãxt
(
fõlds
, 
¨gc
, 
¨gv
);

298 
	}
}

	@type.h

19 
	gfõld
;

21 
	#szof
(
x
,
y
Ë(((x *)0)->y)

	)

22 
	#szcou¡
(
x
,
y
Ë(
	`szof
(x,yË/ szof(x,y[0]))

	)

24 
	ety≤m


26 
	mTYP_AGF
, 
	mTYP_AGFL
, 
	mTYP_AGI
, 
	mTYP_ATTR
, 
	mTYP_BMAPBTA
,

27 
	mTYP_BMAPBTD
, 
	mTYP_BNOBT
, 
	mTYP_CNTBT
, 
	mTYP_RMAPBT
, 
	mTYP_REFCBT
, 
	mTYP_DATA
,

28 
	mTYP_DIR2
, 
	mTYP_DQBLK
, 
	mTYP_INOBT
, 
	mTYP_INODATA
, 
	mTYP_INODE
,

29 
	mTYP_LOG
, 
	mTYP_RTBITMAP
, 
	mTYP_RTSUMMARY
, 
	mTYP_SB
, 
	mTYP_SYMLINK
,

30 
	mTYP_TEXT
, 
	mTYP_FINOBT
, 
	mTYP_NONE


31 } 
	tty≤m_t
;

33 
	#DB_WRITE
 1

	)

34 
	#DB_READ
 0

	)

36 (*
	t›func_t
)(c⁄° 
	tfõld
 *
	tÊd
, 
	t¨gc
, **
	t¨gv
);

37 (*
	tpfunc_t
)(
	ta˘i⁄
, c⁄° 
	tfõld
 *
	tÊd
, 
	t¨gc
, **
	t¨gv
);

39 
	styp


41 
ty≤m_t
 
ty≤m
;

42 *
«me
;

43 
pfunc_t
 
pfunc
;

44 c⁄° 
fõld
 *
fõlds
;

45 c⁄° 
xfs_buf_›s
 *
b›s
;

46 
¸c_off
;

47 
	#TYP_F_NO_CRC_OFF
 (-1UL)

	)

48 } 
	ttyp_t
;

49 c⁄° 
typ_t
 *
ty±ab
, *
cur_typ
;

51 
	`ty≥_öô
();

52 
	`ty≥_£t_èb_¸c
();

53 
	`ty≥_£t_èb_•¸c
();

54 
	`h™dÀ_block
(
a˘i⁄
, c⁄° 
fõld
 *
fõlds
, 
¨gc
,

55 **
¨gv
);

56 
	`h™dÀ_°rög
(
a˘i⁄
, c⁄° 
fõld
 *
fõlds
, 
¨gc
,

57 **
¨gv
);

58 
	`h™dÀ_°ru˘
(
a˘i⁄
, c⁄° 
fõld
 *
fõlds
, 
¨gc
,

59 **
¨gv
);

60 
	`h™dÀ_ãxt
(
a˘i⁄
, c⁄° 
fõld
 *
fõlds
, 
¨gc
,

61 **
¨gv
);

	@write.c

19 
	~"libxfs.h
"

20 
	~<˘y≥.h
>

21 
	~<time.h
>

22 
	~"bô.h
"

23 
	~"block.h
"

24 
	~"comm™d.h
"

25 
	~"ty≥.h
"

26 
	~"Áddr.h
"

27 
	~"Âröt.h
"

28 
	~"fõld.h
"

29 
	~"Êi°.h
"

30 
	~"io.h
"

31 
	~"öô.h
"

32 
	~"ouçut.h
"

33 
	~"¥öt.h
"

34 
	~"wrôe.h
"

35 
	~"mÆloc.h
"

37 
wrôe_f
(
¨gc
, **
¨gv
);

38 
wrôe_hñp
();

40 c⁄° 
cmdöfo_t
 
	gwrôe_cmd
 =

41 { "wrôe", 
NULL
, 
wrôe_f
, 0, -1, 0, 
N_
("[-c] [field or value]..."),

42 
N_
("wrôêvÆuêtÿdisk"), 
wrôe_hñp
 };

45 
	$wrôe_öô
()

47 i‡(!
ex≥π_mode
)

50 
	`add_comm™d
(&
wrôe_cmd
);

51 
	`§™d48
(
	`˛ock
());

52 
	}
}

55 
	$wrôe_hñp
()

57 
	`db¥ötf
(
	`_
(

88 
	}
}

91 
	$wrôe_f
(

92 
¨gc
,

93 **
¨gv
)

95 
pfunc_t
 
pf
;

96 *
¥og«me
;

97 
c
;

98 
boﬁ
 
c‹ru±
 = 
Ál£
;

99 
boﬁ
 
övÆid_d©a
 = 
Ál£
;

100 
xfs_buf_›s
 
loˇl_›s
;

101 c⁄° 
xfs_buf_›s
 *
°ashed_›s
 = 
NULL
;

103 i‡(
x
.
i§ód⁄ly
 & 
LIBXFS_ISREADONLY
) {

104 
	`db¥ötf
(
	`_
("%s started inÑead only mode, writing disabled\n"),

105 
¥og«me
);

109 i‡(
cur_typ
 =
NULL
) {

110 
	`db¥ötf
(
	`_
("no currentÅype\n"));

114 
pf
 = 
cur_typ
->
pfunc
;

115 i‡(
pf
 =
NULL
) {

116 
	`db¥ötf
(
	`_
("no handler function forÅype %s, write unsupported.\n"),

117 
cur_typ
->
«me
);

121 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "cd")Ë!
EOF
) {

122 
c
) {

124 
c‹ru±
 = 
åue
;

127 
övÆid_d©a
 = 
åue
;

130 
	`db¥ötf
(
	`_
("bad option for write command\n"));

135 i‡(
c‹ru±
 && 
övÆid_d©a
) {

136 
	`db¥ötf
(
	`_
("Cannot specify both -cánd -d options\n"));

140 i‡(
övÆid_d©a
 && 
iocur_t›
->
typ
->
¸c_off
 =
TYP_F_NO_CRC_OFF
) {

141 
	`db¥ötf
(
	`_
("CannotÑecalculate CRCs onÅhisÅype of object\n"));

145 
¨gc
 -
›töd
;

146 
¨gv
 +
›töd
;

152 i‡(!
iocur_t›
->
bp
->
b_›s
 ||

153 !(
c‹ru±
 || 
övÆid_d©a
)) {

154 (*
pf
)(
DB_WRITE
, 
cur_typ
->
fõlds
, 
¨gc
, 
¨gv
);

160 
°ashed_›s
 = 
iocur_t›
->
bp
->
b_›s
;

161 
loˇl_›s
.
vîify_ªad
 = 
°ashed_›s
->verify_read;

162 
iocur_t›
->
bp
->
b_›s
 = &
loˇl_›s
;

164 i‡(
c‹ru±
) {

165 
loˇl_›s
.
vîify_wrôe
 = 
xfs_dummy_vîify
;

166 
	`db¥ötf
(
	`_
("Allowing write of corrupted dataánd bad CRC\n"));

168 
loˇl_›s
.
vîify_wrôe
 = 
xfs_vîify_ªˇlc_¸c
;

169 
	`db¥ötf
(
	`_
("Allowing write of corrupted data with good CRC\n"));

172 (*
pf
)(
DB_WRITE
, 
cur_typ
->
fõlds
, 
¨gc
, 
¨gv
);

174 
iocur_t›
->
bp
->
b_›s
 = 
°ashed_›s
;

177 
	}
}

182 
	$sigcmp
(

183 *
s1
,

184 *
s2
,

185 
sig
)

187 
sig˙t
;

189 i‡(!
s1
 || !
s2
)

192 
sig˙t
 = 0; *
s1
 =*
s2
; s1++, s2++) {

193 
sig˙t
++;

194 i‡(*
s1
 == '\0')

197 i‡(*
s1
 && *
s2
)

200 i‡(
sig
 && (
sig˙t
 >= sig))

204 
	}
}

208 
	$bwrôe_lshi·
(

209 
°¨t
,

210 
Àn
,

211 
shi·
,

212 
‰om
,

213 
to
)

215 *
ba£
;

217 i‡(
shi·
 == -1)

218 
shi·
 = 1;

219 i‡(
°¨t
 == -1)

220 
°¨t
 = 0;

221 i‡(
Àn
 == -1)

222 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

224 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

225 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

226 
Àn
, 
iocur_t›
->len);

229 
ba£
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

231 
	`mem˝y
(
ba£
, ba£+
shi·
, 
Àn
-shift);

232 
	`mem£t
(
ba£
+(
Àn
-
shi·
), 0, shift);

233 
	}
}

237 
	$bwrôe_rshi·
(

238 
°¨t
,

239 
Àn
,

240 
shi·
,

241 
‰om
,

242 
to
)

244 *
ba£
;

246 i‡(
shi·
 == -1)

247 
shi·
 = 1;

248 i‡(
°¨t
 == -1)

249 
°¨t
 = 0;

250 i‡(
Àn
 == -1)

251 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

253 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

254 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

255 
Àn
, 
iocur_t›
->len);

258 
ba£
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

260 
	`mem˝y
(
ba£
+
shi·
, ba£, 
Àn
-shift);

261 
	`mem£t
(
ba£
, 0, 
shi·
);

262 
	}
}

266 
	$bwrôe_ÃŸ
(

267 
°¨t
,

268 
Àn
,

269 
shi·
,

270 
‰om
,

271 
to
)

273 *
ba£
;

274 *
hﬁd_ªgi⁄
;

276 i‡(
shi·
 == -1)

277 
shi·
 = 1;

278 i‡(
°¨t
 == -1)

279 
°¨t
 = 0;

280 i‡(
Àn
 == -1)

281 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

283 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

284 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

285 
Àn
, 
iocur_t›
->len);

288 
ba£
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

290 
hﬁd_ªgi⁄
 = 
	`xmÆloc
(
shi·
);

291 
	`mem˝y
(
hﬁd_ªgi⁄
, 
ba£
, 
shi·
);

292 
	`mem˝y
(
ba£
, ba£+
shi·
, 
Àn
-shift);

293 
	`mem˝y
(
ba£
+(
Àn
-
shi·
), 
hﬁd_ªgi⁄
, shift);

294 
	`‰ì
(
hﬁd_ªgi⁄
);

295 
	}
}

299 
	$bwrôe_ºŸ
(

300 
°¨t
,

301 
Àn
,

302 
shi·
,

303 
‰om
,

304 
to
)

306 *
ba£
;

307 *
hﬁd_ªgi⁄
;

309 i‡(
shi·
 == -1)

310 
shi·
 = 1;

311 i‡(
°¨t
 == -1)

312 
°¨t
 = 0;

313 i‡(
Àn
 == -1)

314 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

316 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

317 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

318 
Àn
, 
iocur_t›
->len);

321 
ba£
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

323 
hﬁd_ªgi⁄
 = 
	`xmÆloc
(
shi·
);

324 
	`mem˝y
(
hﬁd_ªgi⁄
, 
ba£
+(
Àn
-
shi·
), shift);

325 
	`memmove
(
ba£
+
shi·
, ba£, 
Àn
-shift);

326 
	`mem˝y
(
ba£
, 
hﬁd_ªgi⁄
, 
shi·
);

327 
	`‰ì
(
hﬁd_ªgi⁄
);

328 
	}
}

332 
	$bwrôe_£q
(

333 
°¨t
,

334 
Àn
,

335 
°ï
,

336 
‰om
,

337 
to
)

339 
i
;

340 
tmp
;

341 
ba£
;

342 
ønge
;

343 
t›
;

344 *
buf
;

346 i‡(
°¨t
 == -1)

347 
°¨t
 = 0;

349 i‡(
Àn
 == -1)

350 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

352 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

353 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

354 
Àn
, 
iocur_t›
->len);

357 i‡(
‰om
 == -1 || from > 255)

358 
‰om
 = 0;

359 i‡(
to
 == -1 ||Åo > 255)

360 
to
 = 255;

361 i‡(
°ï
 == -1)

362 
°ï
 = 1;

364 
ba£
 = 
‰om
;

365 
t›
 = 
to
;

366 i‡(
‰om
 > 
to
) {

367 
ba£
 = 
to
;

368 
t›
 = 
‰om
;

369 i‡(
°ï
 > 0)

370 
°ï
 = -step;

373 
ønge
 = 
t›
 - 
ba£
;

374 
buf
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

376 
tmp
 = 0;

377 
i
 = 
°¨t
; i < sèπ+
Àn
; i++) {

378 *
buf
++ = 
tmp
 + 
ba£
;

379 
tmp
 = (tm∞+ 
°ï
)%(
ønge
+1);

381 
	}
}

385 
	$bwrôe_øndom
(

386 
°¨t
,

387 
Àn
,

388 
shi·
,

389 
‰om
,

390 
to
)

392 
i
;

393 *
buf
;

395 i‡(
°¨t
 == -1)

396 
°¨t
 = 0;

398 i‡(
Àn
 == -1)

399 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

401 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

402 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

403 
Àn
, 
iocur_t›
->len);

406 
buf
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

408 
i
 = 
°¨t
; i < sèπ+
Àn
; i++)

409 *
buf
++ = ()
	`Ã™d48
();

410 
	}
}

414 
	$bwrôe_fûl
(

415 
°¨t
,

416 
Àn
,

417 
vÆue
,

418 
‰om
,

419 
to
)

421 *
ba£
;

423 i‡(
vÆue
 == -1)

424 
vÆue
 = 0;

425 i‡(
°¨t
 == -1)

426 
°¨t
 = 0;

427 i‡(
Àn
 == -1)

428 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

430 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

431 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

432 
Àn
, 
iocur_t›
->len);

435 
ba£
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

437 
	`mem£t
(
ba£
, 
vÆue
, 
Àn
);

438 
	}
}

440 
	sbw_cmd
 {

441 (*
	mcmdfunc
)(,,,,);

442 *
	mcmd°r
;

443 
	msig_ch¨s
;

444 
	m¨gmö
;

445 
	m¨gmax
;

446 
	mshi·cou¡_¨g
;

447 
	m‰om_¨g
;

448 
	mto_¨g
;

449 
	m°¨t_¨g
;

450 
	mÀn_¨g
;

451 *
	mußge
;

452 } 
	gbw_cmdèb
[] = {

454 { 
bwrôe_lshi·
, "lshift", 2, 0, 3, 1, 0, 0, 2, 3,

456 { 
bwrôe_rshi·
, "rshift", 2, 0, 3, 1, 0, 0, 2, 3,

458 { 
bwrôe_ÃŸ
, "lrot", 2, 0, 3, 1, 0, 0, 2, 3,

460 { 
bwrôe_ºŸ
, "rrot", 2, 0, 3, 1, 0, 0, 2, 3,

462 { 
bwrôe_£q
, "sequence", 3, 0, 4, 0, 1, 2, 3, 4,

464 { 
bwrôe_øndom
, "random", 3, 0, 2, 0, 0, 0, 1, 2,

466 { 
bwrôe_fûl
, "fill", 1, 1, 3, 1, 0, 0, 2, 3,

470 
	#BWRITE_CMD_MAX
 ((
bw_cmdèb
)/(bw_cmdèb[0]))

	)

473 
	$c⁄vît_o˘
(

474 *
¨g
,

475 *
ªt
)

477 
cou¡
;

478 
i
;

479 
vÆ
 = 0;

483 
cou¡
 = 0; count < 3; count++) {

484 i‡(
¨g
[
cou¡
] == '\0')

487 i‡((
¨g
[
cou¡
] < '0') && (arg[count] > '7'))

491 
i
 = 0; i < 
cou¡
; i++) {

492 
vÆ
 |((
¨g
[(
cou¡
-1)-
i
]-'0')&0x07)<<(i*3);

495 *
ªt
 = 
vÆ
&0xff;

497 (
cou¡
);

498 
	}
}

500 
	#NYBBLE
(
x
Ë(
	`isdigô
(x)?(x-'0'):(
	`tﬁowî
(x)-'a'+0xa))

	)

520 
	$c⁄vît_¨g
(

521 *
¨g
,

522 
bô_Àngth
)

524 
i
;

525 
Æloc_size
;

526 
o˘vÆ
;

527 
off£t
;

528 
ªt
;

529 *
buf
 = 
NULL
;

530 *
ídp
;

531 *
rbuf
;

532 *
o°r
;

533 
__u64
 *
vÆue
;

534 
__u64
 
vÆ
 = 0;

536 i‡(
bô_Àngth
 <= 64)

537 
Æloc_size
 = 8;

539 
Æloc_size
 = (
bô_Àngth
 + 7) / 8;

541 
buf
 = 
	`xªÆloc
(buf, 
Æloc_size
);

542 
	`mem£t
(
buf
, 0, 
Æloc_size
);

543 
vÆue
 = (
__u64
 *)
buf
;

544 
rbuf
 = 
buf
;

546 i‡(*
¨g
 == '\"') {

550 
o°r
 = 
	`°ºchr
(
¨g
 + 1, '\"');

551 i‡(
o°r
)

552 *
o°r
 = '\0';

554 
o°r
 = 
¨g
 + 1;

555 
i
 = 0; i < 
Æloc_size
; i++) {

556 i‡(!*
o°r
)

560 i‡(*
o°r
 == '\\') {

561 i‡(*(
o°r
 + 1) >= '0' || *(ostr + 1) <= '7') {

562 
ªt
 = 
	`c⁄vît_o˘
(
o°r
 + 1, &
o˘vÆ
);

563 *
rbuf
++ = 
o˘vÆ
;

564 
o°r
 +
ªt
 + 1;

568 *
rbuf
++ = *
o°r
++;

570  
buf
;

573 i‡(
¨g
[0] ='#' || (◊rg[0] !'-'Ë&& 
	`°rchr
(arg,'-'))) {

582 
byãs
 = 
bô_Àngth
 / 
NBBY
;

585 i‡(
bô_Àngth
 % 
NBBY
)

586  
NULL
;

589 i‡(*
¨g
 == '#')

590 
¨g
++;

592 *
¨g
 && 
byãs
--) {

594 *
¨g
 == '-')

595 
¨g
++;

598 i‡(!
	`isxdigô
(()*
¨g
))

599  
NULL
;

600 *
rbuf
 = 
	`NYBBLE
(()*
¨g
) << 4;

601 
¨g
++;

604 *
¨g
 == '-')

605 
¨g
++;

608 i‡(!
	`isxdigô
(()*
¨g
))

609  
NULL
;

610 *
rbuf
++ |
	`NYBBLE
(()*
¨g
);

611 
¨g
++;

613 i‡(
byãs
 < 0 && *
¨g
)

614  
NULL
;

616  
buf
;

620 
vÆ
 = 
	`°πﬁl
(
¨g
, &
ídp
, 0);

622 i‡(*
ídp
 != '\0')

623  
NULL
;

626 i‡(
bô_Àngth
 < 64 && (
vÆ
 >> bit_length) > 0)

627  
NULL
;

638 
off£t
 = 
bô_Àngth
 % 
NBBY
;

639 i‡(
off£t
)

640 
vÆ
 <<(
NBBY
 - 
off£t
);

646 *
vÆue
 = 
	`˝u_to_be64
(
vÆ
);

652 
off£t
 = (
__be64
Ë- 1 - ((
bô_Àngth
 - 1) / (__be64));

653 
rbuf
 +
off£t
;

654  
rbuf
;

655 
	}
}

660 
	$wrôe_°ru˘
(

661 c⁄° 
fõld_t
 *
fõlds
,

662 
¨gc
,

663 **
¨gv
)

665 c⁄° 
·©å_t
 *
Á
;

666 
Êi°_t
 *
Ê
;

667 
Êi°_t
 *
sÊ
;

668 
bô_Àngth
;

669 *
buf
;

670 
∑ª¡off£t
;

672 i‡(
¨gc
 != 2) {

673 
	`db¥ötf
(
	`_
("usage: write fieldname value\n"));

677 
Ê
 = 
	`Êi°_sˇn
(
¨gv
[0]);

678 i‡(!
Ê
) {

679 
	`db¥ötf
(
	`_
("u«bÀÅÿ∑r£ '%s'.\n"), 
¨gv
[0]);

684 i‡(
fõlds
->
«me
[0] == '\0') {

685 
Á
 = &
·©åèb
[
fõlds
->
·yp
];

686 
	`ASSERT
(
Á
->
·yp
 =
fõlds
->ftyp);

687 
fõlds
 = 
Á
->
subÊd
;

691 i‡(!
	`Êi°_∑r£
(
fõlds
, 
Ê
, 
iocur_t›
->
d©a
, 0)) {

692 
	`Êi°_‰ì
(
Ê
);

693 
	`db¥ötf
(
	`_
("parsingÉrror\n"));

697 
sÊ
 = 
Ê
;

698 
∑ª¡off£t
 = 0;

699 
sÊ
->
chûd
) {

700 
∑ª¡off£t
 = 
sÊ
->
off£t
;

701 
sÊ
 = sÊ->
chûd
;

717 
bô_Àngth
 = 
	`fsize
(
sÊ
->
Êd
, 
iocur_t›
->
d©a
, 
∑ª¡off£t
, 0);

718 i‡(
sÊ
->
Êd
->
Êags
 & 
FLD_ARRAY
)

719 
bô_Àngth
 *
sÊ
->
high
 - sÊ->
low
 + 1;

721 
bô_Àngth
 *
	`fcou¡
(
sÊ
->
Êd
, 
iocur_t›
->
d©a
, 
∑ª¡off£t
);

726 
buf
 = 
	`c⁄vît_¨g
(
¨gv
[1], 
bô_Àngth
);

727 i‡(!
buf
) {

728 
	`db¥ötf
(
	`_
("u«bÀÅÿc⁄vîàvÆuê'%s'.\n"), 
¨gv
[1]);

729 
	`Êi°_‰ì
(
Ê
);

733 
	`£tbôvÆ
(
iocur_t›
->
d©a
, 
sÊ
->
off£t
, 
bô_Àngth
, 
buf
);

734 
	`wrôe_cur
();

736 
	`Êi°_¥öt
(
Ê
);

737 
	`¥öt_Êi°
(
Ê
);

738 
	`Êi°_‰ì
(
Ê
);

739 
	}
}

743 
	$wrôe_°rög
(

744 c⁄° 
fõld_t
 *
fõlds
,

745 
¨gc
,

746 **
¨gv
)

748 *
buf
;

749 
i
;

751 i‡(
¨gc
 != 1) {

752 
	`db¥ötf
(
	`_
("usage (in string mode): write \"string...\"\n"));

756 
buf
 = 
	`c⁄vît_¨g
(
¨gv
[0], ()((
	`°æí
(argv[0])+1)*8));

757 
i
 = 0; i < 
iocur_t›
->
Àn
; i++) {

758 ((*)
iocur_t›
->
d©a
)[
i
] = *
buf
;

759 i‡(*
buf
++ == '\0')

764 
	`wrôe_cur
();

765 
	}
}

769 
	$wrôe_block
(

770 c⁄° 
fõld_t
 *
fõlds
,

771 
¨gc
,

772 **
¨gv
)

774 
i
;

775 
shi·cou¡
 = -1;

776 
°¨t
 = -1;

777 
Àn
 = -1;

778 
‰om
 = -1;

779 
to
 = -1;

780 
bw_cmd
 *
cmd
 = 
NULL
;

782 i‡(
¨gc
 <= 1 ||árgc > 5)

783 
block_ußge
;

785 
i
 = 0; i < 
BWRITE_CMD_MAX
; i++) {

786 i‡(
	`sigcmp
(
¨gv
[0], 
bw_cmdèb
[
i
].
cmd°r
,

787 
bw_cmdèb
[
i
].
sig_ch¨s
)) {

788 
cmd
 = &
bw_cmdèb
[
i
];

793 i‡(!
cmd
) {

794 
	`db¥ötf
(
	`_
("write: invalid subcommand\n"));

795 
block_ußge
;

798 i‡((
¨gc
 < 
cmd
->
¨gmö
 + 1Ë|| (¨g¯> cmd->
¨gmax
 + 1)) {

799 
	`db¥ötf
(
	`_
("write %s: invalidÇumber ofárguments\n"),

800 
cmd
->
cmd°r
);

801 
block_ußge
;

804 i‡(
cmd
->
shi·cou¡_¨g
 && (cmd->shi·cou¡_¨g < 
¨gc
))

805 
shi·cou¡
 = ()
	`°πoul
(
¨gv
[
cmd
->
shi·cou¡_¨g
], 
NULL
, 0);

806 i‡(
cmd
->
°¨t_¨g
 && (cmd->°¨t_¨g < 
¨gc
))

807 
°¨t
 = ()
	`°πoul
(
¨gv
[
cmd
->
°¨t_¨g
], 
NULL
, 0);

808 i‡(
cmd
->
Àn_¨g
 && (cmd->Àn_¨g < 
¨gc
))

809 
Àn
 = ()
	`°πoul
(
¨gv
[
cmd
->
Àn_¨g
], 
NULL
, 0);

810 i‡(
cmd
->
‰om_¨g
 && (cmd->
Àn_¨g
 < 
¨gc
))

811 
‰om
 = ()
	`°πoul
(
¨gv
[
cmd
->
‰om_¨g
], 
NULL
, 0);

812 i‡(
cmd
->
to_¨g
 && (cmd->
Àn_¨g
 < 
¨gc
))

813 
to
 = ()
	`°πoul
(
¨gv
[
cmd
->
to_¨g
], 
NULL
, 0);

815 
cmd
->
	`cmdfunc
(
°¨t
, 
Àn
, 
shi·cou¡
, 
‰om
, 
to
);

818 
	`wrôe_cur
();

821 
block_ußge
:

823 
	`db¥ötf
(
	`_
("usage: write (in data mode)\n"));

824 
i
 = 0; i < 
BWRITE_CMD_MAX
; i++) {

825 
	`db¥ötf
(" %-9.9s %s\n",

826 
bw_cmdèb
[
i
].
cmd°r
, bw_cmdèb[i].
ußge
);

828 
	`db¥ötf
("\n");

830 
	}
}

	@write.h

19 
	gfõld
;

21 
wrôe_öô
();

22 
wrôe_block
(c⁄° 
fõld_t
 *
fõlds
, 
¨gc
, **
¨gv
);

23 
wrôe_°ru˘
(c⁄° 
fõld_t
 *
fõlds
, 
¨gc
, **
¨gv
);

24 
wrôe_°rög
(c⁄° 
fõld_t
 *
fõlds
, 
¨gc
, **
¨gv
);

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_MISC


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_MISC


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_MISC


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_MISC


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 #ifde‡
__USE_ISOC99


26 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

27 #ifde‡
__MATH_DECLARE_LDOUBLE


28 #ifde‡
__NO_LONG_DOUBLE_MATH


29 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

31 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

36 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


38 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

40 #ifde‡
__USE_ISOC99


41 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

42 #ifde‡
__MATH_DECLARE_LDOUBLE


43 #ifde‡
__NO_LONG_DOUBLE_MATH


44 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

46 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

52 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

53 #ifde‡
__USE_ISOC99


54 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

55 #ifde‡
__MATH_DECLARE_LDOUBLE


56 #ifde‡
__NO_LONG_DOUBLE_MATH


57 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

59 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

65 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

66 #ifde‡
__USE_ISOC99


67 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

68 #ifde‡
__MATH_DECLARE_LDOUBLE


69 #ifde‡
__NO_LONG_DOUBLE_MATH


70 
__REDIRECT_NTH
 (
©™2l
, (, ),

71 
__©™2_föôe
);

73 
__REDIRECT_NTH
 (
©™2l
, (, ),

74 
__©™2l_föôe
);

79 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


81 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

83 #ifde‡
__USE_ISOC99


84 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

85 #ifde‡
__MATH_DECLARE_LDOUBLE


86 #ifde‡
__NO_LONG_DOUBLE_MATH


87 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

89 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

95 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

96 #ifde‡
__USE_ISOC99


97 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

102 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

108 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

109 #ifde‡
__USE_ISOC99


110 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

111 #ifde‡
__MATH_DECLARE_LDOUBLE


112 #ifde‡
__NO_LONG_DOUBLE_MATH


113 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

115 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

120 #ifde‡
__USE_GNU


122 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

123 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

124 #ifde‡
__MATH_DECLARE_LDOUBLE


125 #ifde‡
__NO_LONG_DOUBLE_MATH


126 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

128 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

133 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

134 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

135 #ifde‡
__MATH_DECLARE_LDOUBLE


136 #ifde‡
__NO_LONG_DOUBLE_MATH


137 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

139 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

144 #ifde‡
__USE_ISOC99


146 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

147 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

148 #ifde‡
__MATH_DECLARE_LDOUBLE


149 #ifde‡
__NO_LONG_DOUBLE_MATH


150 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

152 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

158 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

159 #ifde‡
__USE_ISOC99


160 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

161 #ifde‡
__MATH_DECLARE_LDOUBLE


162 #ifde‡
__NO_LONG_DOUBLE_MATH


163 
__REDIRECT_NTH
 (
fmodl
, (, ),

164 
__fmod_föôe
);

166 
__REDIRECT_NTH
 (
fmodl
, (, ),

167 
__fmodl_föôe
);

172 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


174 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

176 #ifde‡
__USE_ISOC99


177 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

178 #ifde‡
__MATH_DECLARE_LDOUBLE


179 #ifde‡
__NO_LONG_DOUBLE_MATH


180 
__REDIRECT_NTH
 (
hypŸl
, (, ),

181 
__hypŸ_föôe
);

183 
__REDIRECT_NTH
 (
hypŸl
, (, ),

184 
__hypŸl_föôe
);

189 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


191 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

193 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


194 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

195 #ifde‡
__MATH_DECLARE_LDOUBLE


196 #ifde‡
__NO_LONG_DOUBLE_MATH


197 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

199 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

204 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


206 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

208 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


209 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

210 #ifde‡
__MATH_DECLARE_LDOUBLE


211 #ifde‡
__NO_LONG_DOUBLE_MATH


212 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

214 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


221 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

223 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


224 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

225 #ifde‡
__MATH_DECLARE_LDOUBLE


226 #ifde‡
__NO_LONG_DOUBLE_MATH


227 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

229 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


236 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

238 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


239 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

240 #ifde‡
__MATH_DECLARE_LDOUBLE


241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

244 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


251 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

253 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


254 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

255 #ifde‡
__MATH_DECLARE_LDOUBLE


256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

259 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

264 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


266 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

268 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


269 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

270 #ifde‡
__MATH_DECLARE_LDOUBLE


271 #ifde‡
__NO_LONG_DOUBLE_MATH


272 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

274 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

279 #ifde‡
__USE_MISC


281 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

282 #ifde‡
__USE_ISOC99


283 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

284 #ifde‡
__MATH_DECLARE_LDOUBLE


285 #ifde‡
__NO_LONG_DOUBLE_MATH


286 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

287 
__lgamma_r_föôe
);

289 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

290 
__lgammÆ_r_föôe
);

296 
__lgamma_r_föôe
 (, *);

297 
__lgammaf_r_föôe
 (, *);

298 #ifde‡
__NO_LONG_DOUBLE_MATH


299 
__REDIRECT_NTH
 (
__lgammÆ_r_föôe
, (, *),

300 
__lgamma_r_föôe
);

302 
__lgammÆ_r_föôe
 (, *);

305 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

306 && 
deföed
 
	g__exã∫_Æways_ölöe
)

308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

310 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


311  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

313 
__loˇl_signgam
 = 0;

314  
	`__lgamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

316 
	}
}

318 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


319 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

321 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


322  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

324 
__loˇl_signgam
 = 0;

325  
	`__lgammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

327 
	}
}

328 #ifde‡
__MATH_DECLARE_LDOUBLE


329 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


332  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

334 
__loˇl_signgam
 = 0;

335  
	`__lgammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

337 
	}
}

341 #i‡((
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)) \

342 && 
deföed
 
	g__exã∫_Æways_ölöe
)

344 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

346  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

347 
	}
}

348 #ifde‡
__USE_ISOC99


349 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

351  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

352 
	}
}

353 #ifde‡
__MATH_DECLARE_LDOUBLE


354 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

356  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

357 
	}
}

363 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

364 #ifde‡
__USE_ISOC99


365 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

366 #ifde‡
__MATH_DECLARE_LDOUBLE


367 #ifde‡
__NO_LONG_DOUBLE_MATH


368 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

370 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

376 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

377 #ifde‡
__USE_ISOC99


378 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

379 #ifde‡
__MATH_DECLARE_LDOUBLE


380 #ifde‡
__NO_LONG_DOUBLE_MATH


381 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

383 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

388 #ifde‡
__USE_ISOC99


390 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

391 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

396 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

402 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

403 #ifde‡
__USE_ISOC99


404 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

405 #ifde‡
__MATH_DECLARE_LDOUBLE


406 #ifde‡
__NO_LONG_DOUBLE_MATH


407 
__REDIRECT_NTH
 (
powl
, (, ),

408 
__pow_föôe
);

410 
__REDIRECT_NTH
 (
powl
, (, ),

411 
__powl_föôe
);

416 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


418 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

420 #ifde‡
__USE_ISOC99


421 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

422 #ifde‡
__MATH_DECLARE_LDOUBLE


423 #ifde‡
__NO_LONG_DOUBLE_MATH


424 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

425 
__ªmaödî_föôe
);

427 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

428 
__ªmaödîl_föôe
);

433 #i‡(
deföed
 
__USE_MISC
 \

434 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K8
))

436 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

438 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


439 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

440 #ifde‡
__MATH_DECLARE_LDOUBLE


441 #ifde‡
__NO_LONG_DOUBLE_MATH


442 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

443 
__sˇlb_föôe
);

445 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

446 
__sˇlbl_föôe
);

452 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

453 #ifde‡
__USE_ISOC99


454 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

455 #ifde‡
__MATH_DECLARE_LDOUBLE


456 #ifde‡
__NO_LONG_DOUBLE_MATH


457 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

459 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

465 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

466 #ifde‡
__USE_ISOC99


467 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

468 #ifde‡
__MATH_DECLARE_LDOUBLE


469 #ifde‡
__NO_LONG_DOUBLE_MATH


470 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

472 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

477 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


479 
__gamma_r_föôe
 (, *);

480 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

482 
__loˇl_signgam
 = 0;

483 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

484  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

485 
	}
}

486 
__gammaf_r_föôe
 (, *);

487 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

489 
__loˇl_signgam
 = 0;

490 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

491  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

492 
	}
}

493 #ifde‡
__MATH_DECLARE_LDOUBLE


494 
__gammÆ_r_föôe
 (, *);

495 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

497 
__loˇl_signgam
 = 0;

498 #ifde‡
__NO_LONG_DOUBLE_MATH


499 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

501 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

503  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

504 
	}
}

	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #ñi‡
__GNUC_PREREQ
 (6,0)

33 
	#__DECL_SIMD_x86_64
 
	`__©åibuã__
 ((
	`__simd__
 ("nŸöbønch")))

	)

36 #ifde‡
__DECL_SIMD_x86_64


37 #unde‡
__DECL_SIMD_cos


38 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_cosf


40 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_sö


42 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_söf


44 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_söcos


46 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_söcosf


48 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_log


50 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_logf


52 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_exp


54 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

55 #unde‡
__DECL_SIMD_expf


56 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

57 #unde‡
__DECL_SIMD_pow


58 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

59 #unde‡
__DECL_SIMD_powf


60 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL_VEC
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


199 #i‡(!
deföed
 
__˝lu•lus
 \

200 || 
	g__˝lu•lus
 < 201103L \

201 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

204 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

211 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

215 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

218 #ifde‡
__USE_ISOC99


219 
__BEGIN_NAMESPACE_C99


221 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

222 
	g__END_NAMESPACE_C99


225 #ifde‡
__USE_ISOC99


226 
__BEGIN_NAMESPACE_C99


228 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

229 
	g__END_NAMESPACE_C99


234 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

236 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

237 #i‡(!
deföed
 
__˝lu•lus
 \

238 || 
	g__˝lu•lus
 < 201103L \

239 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

241 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

245 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && 
__MATH_DECLARING_DOUBLE
)

247 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

248 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

249 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

250 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

256 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

260 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

261 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

262 
	g__END_NAMESPACE_C99


265 #ifde‡
__USE_ISOC99


266 
__BEGIN_NAMESPACE_C99


268 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

269 
	g__END_NAMESPACE_C99


272 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

274 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

277 #ifde‡
__USE_MISC


281 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

285 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


286 
__BEGIN_NAMESPACE_C99


289 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

292 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

293 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


294 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

297 #ifde‡
__USE_GNU


299 
__MATHCALL
 (
√xtdown
,, (
_MdoubÀ_
 
__x
));

301 
__MATHCALL
 (
√xtup
,, (
_MdoubÀ_
 
__x
));

305 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

307 #ifde‡
__USE_ISOC99


309 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

313 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

316 #ifde‡
__USE_ISOC99


318 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

322 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

326 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

330 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

335 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

342 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

343 
__exãnsi⁄__


344 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

348 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

349 
__exãnsi⁄__


350 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

354 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

357 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

360 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

364 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

365 
__©åibuã__
 ((
__c⁄°__
));

368 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

369 
__©åibuã__
 ((
__c⁄°__
));

373 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

376 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


377 
	g__END_NAMESPACE_C99


380 #ifde‡
__USE_GNU


382 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

383 
__©åibuã__
 ((
__c⁄°__
));

386 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

387 && 
	g__MATH_DECLARING_DOUBLE
 \

388 && !
deföed
 
	g__USE_XOPEN2K8
)

390 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


390 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


391 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

392 && 
deföed
 
	g__OPTIMIZE__
)

396 #unde‡
m©h_îrh™dlög


405 #ifde‡
__USE_ISOC99


406 
	#__ölöe_m©h›
(
func
, 
›
) \

407 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

408 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

409 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›NP
(
func
, 
›
) \

411 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

412 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

415 
	#__ölöe_m©h›
(
func
, 
›
) \

416 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

417 
	#__ölöe_m©h›NP
(
func
, 
›
) \

418 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

421 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

422 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

423 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

424 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

427 #ifde‡
__USE_ISOC99


428 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

429 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

434 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

437 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

438 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

439 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

440 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

443 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

444 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

445 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

447 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

448 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

450 
Êﬂt_ty≥
 
__ªsu…
; \

451 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

452  
__ªsu…
; \

453 }

	)

456 #ifde‡
__USE_ISOC99


457 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

460 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

461 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

462 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

463 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

464 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

465 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

469 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

470 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

471 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

472 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

473 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

478 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

479 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

480 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

482 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

483 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

484 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

485 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

486 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

487 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

488 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

489 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

490 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

491 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

492 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

493 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

496 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

497 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

498 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

500 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

501 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

503 
code
; \

504 }

	)

507 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

508 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

509 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

511 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

512 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

514 
code
; \

515 }

	)

517 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

518 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

519 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

521 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

522 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

523 
Êﬂt_ty≥
 
¨g3
)) \

525 
code
; \

526 }

	)

530 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


534 #ifde‡
__FAST_MATH__


535 #ifde‡
__USE_GNU


536 
	#__söcos_code
 \

537 
__co§
; \

538 
__sör
; \

539 
__swtmp
; \

540 
__asm
 
__vﬁ©ûe__
 \

555 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

556 *
__söx
 = 
__sör
; \

557 *
__cosx
 = 
__co§


	)

559 
__MATH_INLINE
 

560 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

562 
__söcos_code
;

563 
	}
}

565 
__MATH_INLINE
 

566 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

568 
__söcos_code
;

569 
	}
}

571 
__MATH_INLINE
 

572 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

574 
__söcos_code
;

575 
	}
}

582 #i‡
__GNUC_PREREQ
 (3, 5)

583 
	#__expm1_code
 \

584 
__ãmp
; \

585 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

586  
__ãmp
 ? __ãm∞: 
__x


	)

588 
	#__expm1_code
 \

589 
__vÆue
; \

590 
__exp⁄ít
; \

591 
__ãmp
; \

592 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

602 
__asm
 
__vﬁ©ûe__
 \

604 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

605 
__ãmp
 -= 1.0; \

606 
__ãmp
 +
__vÆue
; \

607  
__ãmp
 ? __ãm∞: 
__x


	)

609 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

611 #i‡
	`__GNUC_PREREQ
 (3, 4)

612 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

614 
	#__exp_code
 \

615 
__vÆue
; \

616 
__exp⁄ít
; \

617 
__asm
 
__vﬁ©ûe__
 \

625 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

626 
__vÆue
 += 1.0; \

627 
__asm
 
__vﬁ©ûe__
 \

629 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

630  
__vÆue


	)

631 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

632 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

636 #i‡!
	`__GNUC_PREREQ
 (3, 5)

637 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

638 
__vÆue
; \

639 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

640 
__asm
 
__vﬁ©ûe__
 \

642 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

643  
__vÆue
)

648 #i‡
	`__GNUC_PREREQ
 (3, 4)

649 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

650  
	$__buûtö_©™2l
 (
__y
, 
__x
))

652 
	#__©™2_code
 \

653 
__vÆue
; \

654 
__asm
 
__vﬁ©ûe__
 \

656 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

657  
__vÆue


	)

658 #ifde‡
__FAST_MATH__


659 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

661 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

665 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

666 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

667 
__vÆue
; \

668 
__asm
 
__vﬁ©ûe__
 \

673 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

674  
__vÆue
)

678 #ifde‡
__FAST_MATH__


679 #i‡!
	`__GNUC_PREREQ
 (3,3)

680 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

681 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

682 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

684 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

688 #i‡
	`__GNUC_PREREQ
 (2, 8)

689 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

690 #ifde‡
__USE_ISOC99


691 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

692 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

694 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

696 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

697 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

700 #ifde‡
__FAST_MATH__


701 #i‡!
	`__GNUC_PREREQ
 (3, 4)

703 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

705 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

707 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 #i‡!
	`__GNUC_PREREQ
 (3, 5)

711 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

713 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

714 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

717 #i‡!
	`__GNUC_PREREQ
 (3, 4)

718 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

722 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

723 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

724 { 
__xld
: 
__x
 
	}
}; \

725 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

726 
	g__n
.
	g__xi
[1] = 0x80000000; \

727 
	g__n
.
	g__xi
[0] = 0; \

728  
	g__n
.
	g__xld
)

731 #ifde‡
__FAST_MATH__


733 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

734 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

735  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

737 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

738 
__ex
 = 
	`__ex∂
 (
__x
); \

739  0.5 * (
__ex
 + 1.0 / __ex))

741 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

742 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

743  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

746 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

747 
__vÆue
; \

748 
__ign‹e
; \

749 
__cw
; \

750 
__cwtmp
; \

751 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

759 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

760 "=m" (
__cw
) \

761 : "0" (
__x
)); \

762  
__vÆue
)

764 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

765 
__vÆue
; \

766 
__ign‹e
; \

767 
__cw
; \

768 
__cwtmp
; \

769 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

777 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

778 "=m" (
__cw
) \

779 : "0" (
__x
)); \

780  
__vÆue
)

782 #ifde‡
__FAST_MATH__


783 
	#__ldexp_code
 \

784 
__vÆue
; \

785 
__asm
 
__vﬁ©ûe__
 \

787 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

788  
__vÆue


	)

790 
__MATH_INLINE
 

791 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

793 
__ldexp_code
;

794 
	}
}

799 #ifde‡
__USE_ISOC99


801 #ifde‡
__FAST_MATH__


802 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

806 
	#__M_SQRT2
 1.41421356237309504880L

	)

808 #i‡!
	`__GNUC_PREREQ
 (3, 5)

809 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

810 
__vÆue
; \

811 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

812 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

814 
__asm
 
__vﬁ©ûe__
 \

818 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

819  
__vÆue
)

824 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

825 
__y
 = 
	`__Áb¶
 (
__x
); \

826  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

827 * 
	$__sgn1l
 (
__x
)))

829 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

830  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

832 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

833 
__y
 = 
	`__Áb¶
 (
__x
); \

834  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

837 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

838  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

840 #i‡!
	`__GNUC_PREREQ
 (3, 5)

841 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

842 
__vÆue
; \

843 
__junk
; \

844 
__asm
 
__vﬁ©ûe__
 \

846 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

847  
__vÆue
)

853 #ifde‡
__USE_ISOC99


854 #ifde‡
__FAST_MATH__


856 #i‡!
	`__GNUC_PREREQ
 (3, 5)

857 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

860 
__MATH_INLINE
 

861 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

863 
__ldexp_code
;

864 
	}
}

866 
__MATH_INLINE
 

867 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

869 
__ldexp_code
;

870 
	}
}

872 
__ölöe_m©h›NP
 (
röt
, "frndint")

875 
	#__Ãöt_code
 \

876 
__Ãöåes
; \

877 
__asm__
 
__vﬁ©ûe__
 \

879 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

880  
__Ãöåes


	)

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãötf
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöt
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 
__MATH_INLINE
 

892 
__NTH
 (
	$Ãöé
 (
__x
))

894 
__Ãöt_code
;

895 
	}
}

896 #unde‡
__Ãöt_code


898 
	#__Œröt_code
 \

899 
__Œröåes
; \

900 
__asm__
 
__vﬁ©ûe__
 \

902 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

903  
__Œröåes


	)

904 
__exãnsi⁄__


905 
__MATH_INLINE
 

906 
__NTH
 (
	$Œrötf
 (
__x
))

908 
__Œröt_code
;

909 
	}
}

910 
__exãnsi⁄__


911 
__MATH_INLINE
 

912 
__NTH
 (
	$Œröt
 (
__x
))

914 
__Œröt_code
;

915 
	}
}

916 
__exãnsi⁄__


917 
__MATH_INLINE
 

918 
__NTH
 (
	$Œröé
 (
__x
))

920 
__Œröt_code
;

921 
	}
}

922 #unde‡
__Œröt_code


927 #ifde‡
__USE_MISC


929 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

930 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

931 
__vÆue
; \

932 
__˛obbîed
; \

933 
__asm
 
__vﬁ©ûe__
 \

938 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

939  
__vÆue
)

944 
__MATH_INLINE
 

945 
__NTH
 (
	$__föôe
 (
__x
))

947  (
__exãnsi⁄__


948 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

950 
	}
}

955 #unde‡
__©™2_code


956 #ifde‡
__FAST_MATH__


957 #unde‡
__expm1_code


958 #unde‡
__exp_code


959 #unde‡
__söcos_code


966 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


967 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

968 
__ölöe_m©hcode2_
 (, 
__õì754_©™2l
, 
__y
, 
__x
,

969 
__vÆue
;

970 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

971 : "Ò" (
__vÆue
)

972 : "0" (
__x
), "u" (
__y
) : "st(1)");

973  
__vÆue
;)

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

330 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

331 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

332 #ñi‡!
__GNUC_PREREQ
 (4, 1)

333 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


334 #ñi‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 #i‚de‡
__USE_FORTIFY_LEVEL


341 
	#__USE_FORTIFY_LEVEL
 0

	)

346 
	~<°dc-¥edef.h
>

354 #unde‡
__GNU_LIBRARY__


355 
	#__GNU_LIBRARY__
 6

	)

359 
	#__GLIBC__
 2

	)

360 
	#__GLIBC_MINOR__
 24

	)

362 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

363 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

366 #i‚de‡
__ASSEMBLER__


367 #i‚de‡
_SYS_CDEFS_H


368 
	~<sys/cdefs.h
>

373 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


374 
	#__USE_LARGEFILE
 1

	)

375 
	#__USE_LARGEFILE64
 1

	)

381 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

382 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

383 && 
deföed
 
	g__exã∫_ölöe


384 
	#__USE_EXTERN_INLINES
 1

	)

392 
	~<gnu/°ubs.h
>

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 #ifde‡
__USE_XOPEN2K


43 
	#__√ed_time•ec


	)

45 
	~<time.h
>

46 
	#__√ed_timevÆ


	)

47 
	~<bôs/time.h
>

49 #i‚de‡
__su£c⁄ds_t_deföed


50 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

51 
	#__su£c⁄ds_t_deföed


	)

56 
	t__fd_mask
;

59 #unde‡
__NFDBITS


61 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

62 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

63 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

70 #ifde‡
__USE_XOPEN


71 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

72 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

74 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

75 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

77 } 
	tfd_£t
;

80 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

82 #ifde‡
__USE_MISC


84 
__fd_mask
 
	tfd_mask
;

87 
	#NFDBITS
 
__NFDBITS


	)

92 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

93 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

94 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

95 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

98 
__BEGIN_DECLS


108 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

109 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

110 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

111 
timevÆ
 *
__ª°ri˘
 
__timeout
);

113 #ifde‡
__USE_XOPEN2K


120 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

121 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

122 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

123 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

124 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

129 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


130 
	~<bôs/£À˘2.h
>

133 
	g__END_DECLS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

40 
	#__DECL_SIMD_sö


	)

41 
	#__DECL_SIMD_söf


	)

42 
	#__DECL_SIMD_söl


	)

44 
	#__DECL_SIMD_söcos


	)

45 
	#__DECL_SIMD_söcosf


	)

46 
	#__DECL_SIMD_söco¶


	)

48 
	#__DECL_SIMD_log


	)

49 
	#__DECL_SIMD_logf


	)

50 
	#__DECL_SIMD_logl


	)

52 
	#__DECL_SIMD_exp


	)

53 
	#__DECL_SIMD_expf


	)

54 
	#__DECL_SIMD_ex∂


	)

56 
	#__DECL_SIMD_pow


	)

57 
	#__DECL_SIMD_powf


	)

58 
	#__DECL_SIMD_powl


	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

57 
	#__STDC_ISO_10646__
 201605L

	)

60 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

310 #unde‡
__Æways_ölöe


311 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

313 #unde‡
__Æways_ölöe


314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡
__GNUC_PREREQ
 (4,3)

320 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

322 
	#__©åibuã_¨tificül__


	)

334 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

335 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

336 || 
deföed
 
__GNUC_GNU_INLINE__
)))

337 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


338 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

339 
	#__exã∫_Æways_ölöe
 \

340 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

342 
	#__exã∫_ölöe
 
__ölöe


	)

343 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

347 #ifde‡
__exã∫_Æways_ölöe


348 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

353 #i‡
__GNUC_PREREQ
 (4,3)

354 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

355 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

362 #i‡!
__GNUC_PREREQ
 (2,8)

363 
	#__exãnsi⁄__


	)

367 #i‡!
__GNUC_PREREQ
 (2,92)

368 
	#__ª°ri˘


	)

374 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


375 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

377 #ifde‡
__GNUC__


378 
	#__ª°ri˘_¨r


	)

380 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

381 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

384 
	#__ª°ri˘_¨r


	)

389 #i‡
__GNUC__
 >= 3

390 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

391 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

393 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

394 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

397 #i‡(!
deföed
 
_N‹ëu∫
 \

398 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

399 && !
	$__GNUC_PREREQ
 (4,7))

400 #i‡
	`__GNUC_PREREQ
 (2,8)

401 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

403 
	#_N‹ëu∫


	)

407 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

408 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

409 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

410 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

411 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

412 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

415 
	~<bôs/w‹dsize.h
>

417 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


418 
	#__LDBL_COMPAT
 1

	)

419 #ifde‡
__REDIRECT


420 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

421 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

422 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

423 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

424 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

425 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

426 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

427 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

428 
	#__LDBL_REDIR_DECL
(
«me
) \

429 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

430 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

431 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

432 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

433 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

436 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


437 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

438 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

439 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

440 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

441 
	#__LDBL_REDIR_DECL
(
«me
)

	)

442 #ifde‡
__REDIRECT


443 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

444 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

445 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@
1
.
1
/usr/include
137
1930
addr.c
addr.h
agf.c
agf.h
agfl.c
agfl.h
agi.c
agi.h
attr.c
attr.h
attrset.c
attrset.h
attrshort.c
attrshort.h
bit.c
bit.h
block.c
block.h
bmap.c
bmap.h
bmroot.c
bmroot.h
btblock.c
btblock.h
check.c
check.h
command.c
command.h
convert.c
convert.h
crc.c
crc.h
debug.c
debug.h
dir2.c
dir2.h
dir2sf.c
dir2sf.h
dquot.c
dquot.h
echo.c
echo.h
faddr.c
faddr.h
field.c
field.h
flist.c
flist.h
fprint.c
fprint.h
frag.c
frag.h
freesp.c
freesp.h
fsmap.c
fsmap.h
hash.c
hash.h
help.c
help.h
init.c
init.h
inode.c
inode.h
input.c
input.h
io.c
io.h
logformat.c
logformat.h
malloc.c
malloc.h
metadump.c
metadump.h
output.c
output.h
print.c
print.h
quit.c
quit.h
sb.c
sb.h
sig.c
sig.h
strvec.c
strvec.h
symlink.c
symlink.h
text.c
text.h
type.c
type.h
write.c
write.h
/usr/include/ctype.h
/usr/include/math.h
/usr/include/signal.h
/usr/include/sys/time.h
/usr/include/time.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/math-finite.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/sys/select.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/gnu/stubs.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/bits/byteswap-16.h
/usr/include/gnu/stubs-64.h
