cscope 15 $HOME/devel/xfsprogs-dev               0003975211
	@copy/xfs_copy.c

19 
	~"libxfs.h
"

20 
	~<sys/°©.h
>

21 
	~<sys/waô.h
>

22 
	~<±hªad.h
>

23 
	~<sig«l.h
>

24 
	~<°d¨g.h
>

25 
	~"xfs_c›y.h
"

26 
	~"libxlog.h
"

28 
	#rounddown
(
x
, 
y
Ë(((x)/(y))*(y))

	)

29 
	#uuid_equÆ
(
s
,
d
Ë(
	`∂©f‹m_uuid_com∑ª
((s),(d)Ë=0)

	)

31 
∂©f‹m_check_ismou¡ed
(*, *, 
°©
 *, );

33 
	glogfd
;

34 *
	glogfûe_«me
;

35 
FILE
 *
	glogîr
;

36 
	gLOGFILE_NAME
[] = "/var/tmp/xfs_copy.log.XXXXXX";

38 *
	gsour˚_«me
;

39 
	gsour˚_fd
;

41 
	gsour˚_blocksize
;

42 
	gsour˚_£˘‹size
;

44 
xfs_agblock_t
 
	gfú°_agbno
;

46 
__uöt64_t
 
	gb¨cou¡
[11];

48 
	gnum_èrgës
;

49 
èrgë_c⁄åﬁ
 *
	gèrgë
;

51 
wbuf
 
	gw_buf
;

52 
wbuf
 
	gbåì_buf
;

54 
pid_t
 
	g∑ª¡_pid
;

55 
	gkids
;

57 
thªad_c⁄åﬁ
 
	gglob_masks
;

58 
thªad_¨gs
 *
	gèrg
;

60 
±hªad_muãx_t
 
	gmaöwaô
;

62 
	#ACTIVE
 1

	)

63 
	#INACTIVE
 2

	)

65 
xfs_off_t
 
wrôe_log_åaûî
(
fd
, 
wbuf
 *
w
, 
xfs_mou¡_t
 *
mp
);

66 
xfs_off_t
 
wrôe_log_hódî
(
fd
, 
wbuf
 *
w
, 
xfs_mou¡_t
 *
mp
);

67 
f‹m©_logs
(
xfs_mou¡
 *);

71 
	#OUT
 0x01

	)

72 
	#ERR
 0x02

	)

73 
	#LOG
 0x04

	)

74 
	#PRE
 0x08

	)

75 
	#LAST
 0x10

	)

78 
	$sig«l_maskfunc
(
add£t
, 
√w£t
)

80 
sig£t_t
 
£t
;

82 
	`sigem±y£t
(&
£t
);

83 
	`sigadd£t
(&
£t
, 
add£t
);

84 
	`sig¥ocmask
(
√w£t
, &
£t
, 
NULL
);

85 
	}
}

88 
	$do_mesßge
(
Êags
, 
code
, c⁄° *
fmt
, ...)

90 
va_li°
 
≠
;

91 
ìk
 = 0;

93 i‡(
Êags
 & 
LOG
) {

94 
	`va_°¨t
(
≠
, 
fmt
);

95 i‡(
	`vÂrötf
(
logîr
, 
fmt
, 
≠
) <= 0)

96 
ìk
 = 1;

97 
	`va_íd
(
≠
);

99 i‡(
ìk
)

100 
Êags
 |
ERR
;

101 i‡(
Êags
 & 
ERR
) {

102 
	`va_°¨t
(
≠
, 
fmt
);

103 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

104 
	`va_íd
(
≠
);

105 } i‡(
Êags
 & 
OUT
) {

106 
	`va_°¨t
(
≠
, 
fmt
);

107 
	`vÂrötf
(
°dout
, 
fmt
, 
≠
);

108 
	`va_íd
(
≠
);

111 i‡(
Êags
 & 
PRE
) {

112 
	`do_mesßge
(
Êags
 & ~
PRE
, 0, ": %s\n", 
	`°ªº‹
(
code
));

113 i‡(
Êags
 & 
LAST
)

114 
	`Ârötf
(
°dîr
,

115 
	`_
("CheckÜogfile \"%s\" for more details\n"),

116 
logfûe_«me
);

120 i‡(
ìk
) {

121 
	`Ârötf
(
°dîr
, 
	`_
("%s: couldÇot writeÅoÜogfile \"%s\".\n"),

122 
¥og«me
, 
logfûe_«me
);

123 
	`Ârötf
(
°dîr
,

124 
	`_
("Aborting XFS copy --ÜogfileÉrror --Ñeason: %s\n"),

125 
	`°ªº‹
(
î∫o
));

126 
	`±hªad_exô
(
NULL
);

128 
	}
}

130 
	#do_out
(
¨gs
...Ë
	`do_mesßge
(
OUT
|
LOG
, 0, ##árgs)

	)

131 
	#do_log
(
¨gs
...Ë
	`do_mesßge
(
ERR
|
LOG
, 0, ##árgs)

	)

132 
	#do_w¨n
(
¨gs
...Ë
	`do_mesßge
(
LOG
, 0, ##árgs)

	)

133 
	#do_îr‹
(
e
,
s
Ë
	`do_mesßge
(
ERR
|
LOG
|
PRE
,É, s)

	)

134 
	#do_Áèl
(
e
,
s
Ë
	`do_mesßge
(
ERR
|
LOG
|
PRE
|
LAST
,É, s)

	)

135 
	#do_vÁèl
(
e
,
s
,
¨gs
...Ë
	`do_mesßge
(
ERR
|
LOG
|
PRE
|
LAST
,É, s, ##árgs)

	)

136 
	#dõ_≥º‹
() \

138 
	`do_mesßge
(
ERR
|
LOG
|
PRE
|
LAST
, 
î∫o
, \

139 
	`_
("Aborting XFS copy -Ñeason")); \

140 
	`exô
(1); \

141 } 0)

	)

144 
	$xlog_ªcovî_do_å™s
(
xlog
 *
log
, 
xlog_ªcovî
 *
t
, 
p
)

147 
	}
}

150 
	$check_îr‹s
()

152 
i
, 
fú°_îr‹
 = 0;

154 
i
 = 0; i < 
num_èrgës
; i++) {

155 i‡(
èrgë
[
i
].
°©e
 =
INACTIVE
) {

156 i‡(
fú°_îr‹
 == 0) {

157 
fú°_îr‹
++;

158 
	`do_log
(

159 
	`_
("THE FOLLOWING COPIES FAILED TO COMPLETE\n"));

161 
	`do_log
(" %†-- ", 
èrgë
[
i
].
«me
);

162 i‡(
èrgë
[
i
].
îr_ty≥
 == 0)

163 
	`do_log
(
	`_
("writeÉrror"));

165 
	`do_log
(
	`_
("lseekÉrror"));

166 
	`do_log
(
	`_
("áàoff£à%Œd\n"), 
èrgë
[
i
].
posôi⁄
);

169 i‡(
fú°_îr‹
 == 0) {

170 
	`Ârötf
(
°dout
, 
	`_
("All copies completed.\n"));

171 
	`fÊush
(
NULL
);

173 
	`Ârötf
(
°dîr
, 
	`_
("See \"%s\" for more details.\n"),

174 
logfûe_«me
);

175 
	`exô
(1);

177 
	}
}

184 
	$do_wrôe
(

185 
thªad_¨gs
 *
¨gs
,

186 
wbuf
 *
buf
)

188 
ªs
;

189 
îr‹
 = 0;

191 i‡(!
buf
)

192 
buf
 = &
w_buf
;

194 i‡(
èrgë
[
¨gs
->
id
].
posôi⁄
 !
buf
->position) {

195 i‡(
	`l£ek
(
¨gs
->
fd
, 
buf
->
posôi⁄
, 
SEEK_SET
) < 0) {

196 
îr‹
 = 
èrgë
[
¨gs
->
id
].
îr_ty≥
 = 1;

198 
èrgë
[
¨gs
->
id
].
posôi⁄
 = 
buf
->position;

202 i‡((
ªs
 = 
	`wrôe
(
èrgë
[
¨gs
->
id
].
fd
, 
buf
->
d©a
,

203 
buf
->
Àngth
)) == buf->length) {

204 
èrgë
[
¨gs
->
id
].
posôi⁄
 +
ªs
;

206 
îr‹
 = 2;

209 i‡(
îr‹
) {

210 
èrgë
[
¨gs
->
id
].
îr‹
 = 
î∫o
;

211 
èrgë
[
¨gs
->
id
].
posôi⁄
 = 
buf
->position;

213  
îr‹
;

214 
	}
}

217 
	$begö_ªadî
(*
¨g
)

219 
thªad_¨gs
 *
¨gs
 = 
¨g
;

222 
	`±hªad_muãx_lock
(&
¨gs
->
waô
);

223 i‡(
	`do_wrôe
(
¨gs
, 
NULL
))

224 
h™dÀ_îr‹
;

225 
	`±hªad_muãx_lock
(&
glob_masks
.
muãx
);

226 i‡(--
glob_masks
.
num_w‹kög
 == 0)

227 
	`±hªad_muãx_u∆ock
(&
maöwaô
);

228 
	`±hªad_muãx_u∆ock
(&
glob_masks
.
muãx
);

232 
h™dÀ_îr‹
:

235 
	`±hªad_muãx_lock
(&
glob_masks
.
muãx
);

236 
èrgë
[
¨gs
->
id
].
°©e
 = 
INACTIVE
;

237 i‡(--
glob_masks
.
num_w‹kög
 == 0)

238 
	`±hªad_muãx_u∆ock
(&
maöwaô
);

239 
	`±hªad_muãx_u∆ock
(&
glob_masks
.
muãx
);

240 
	`±hªad_exô
(
NULL
);

241  
NULL
;

242 
	}
}

245 
	$h™dÀr
(
sig
)

247 
pid_t
 
pid
;

248 
°©us
, 
i
;

250 
pid
 = 
	`waô
(&
°©us
);

252 
kids
--;

254 
i
 = 0; i < 
num_èrgës
; i++) {

255 i‡(
èrgë
[
i
].
pid
 ==Öid) {

256 i‡(
èrgë
[
i
].
°©e
 =
INACTIVE
) {

259 i‡(
èrgë
[
i
].
îr_ty≥
 == 0) {

260 
	`do_w¨n
(

261 
	`_
("%s: writeÉrror onÅarget %d \"%s\"át offset %lld\n"),

262 
¥og«me
, 
i
, 
èrgë
[i].
«me
,

263 
èrgë
[
i
].
posôi⁄
);

265 
	`do_w¨n
(

266 
	`_
("%s:ÜseekÉrror onÅarget %d \"%s\"át offset %lld\n"),

267 
¥og«me
, 
i
, 
èrgë
[i].
«me
,

268 
èrgë
[
i
].
posôi⁄
);

271 
	`do_vÁèl
(
èrgë
[
i
].
îr‹
,

272 
	`_
("Ab‹tögÅ¨gë %d -Ñós⁄"), 
i
);

274 i‡(
kids
 == 0) {

275 
	`do_log
(

276 
	`_
("Aborting XFS copy -Ço moreÅargets.\n"));

277 
	`check_îr‹s
();

278 
	`±hªad_exô
(
NULL
);

281 
	`sig«l
(
SIGCHLD
, 
h™dÀr
);

286 
	`do_w¨n
(

287 
	`_
("%s:Åhread %d died unexpectedly,Åarget \"%s\" incomplete\n"),

288 
¥og«me
, 
i
, 
èrgë
[i].
«me
);

289 
	`do_w¨n
(
	`_
("%s: offset wasÖrobably %lld\n"),

290 
¥og«me
, 
èrgë
[
i
].
posôi⁄
);

291 
	`do_Áèl
(
èrgë
[
i
].
îr‹
,

292 
	`_
("Aborting XFS copy -Ñeason"));

293 
	`±hªad_exô
(
NULL
);

300 
	`do_w¨n
(
	`_
("%s: Unknow¿chûd dõd (shouldÇevî h≠≥n!)\n"), 
¥og«me
);

301 
	`dõ_≥º‹
();

302 
	`±hªad_exô
(
NULL
);

303 
	`sig«l
(
SIGCHLD
, 
h™dÀr
);

304 
	}
}

307 
	$ußge
()

309 
	`Ârötf
(
°dîr
,

310 
	`_
("Usage: %s [-bdV] [-LÜogfile] sourceÅarget [target ...]\n"),

311 
¥og«me
);

312 
	`exô
(1);

313 
	}
}

316 
	$öô_b¨
(
__uöt64_t
 
sour˚_blocks
)

318 
i
;

320 
i
 = 0; i < 11; i++)

321 
b¨cou¡
[
i
] = (
sour˚_blocks
/10)*i;

322 
	}
}

325 
	$bump_b¨
(
ã¡hs
, 
__uöt64_t
 
numblocks
)

327 *
b¨
[11] = {

341 i‡(
ã¡hs
 > 10) {

342 
	`¥ötf
("%s", 
b¨
[10]);

343 
	`fÊush
(
°dout
);

345 
ã¡hs
 < 10 && 
numblocks
 > 
b¨cou¡
[tenths]) {

346 
	`¥ötf
("%s", 
b¨
[
ã¡hs
]);

347 
	`fÊush
(
°dout
);

348 
ã¡hs
++;

351  
ã¡hs
;

352 
	}
}

354 
xfs_off_t
 
	gsour˚_posôi⁄
 = -1;

356 
wbuf
 *

357 
	$wbuf_öô
(
wbuf
 *
buf
, 
d©a_size
, 
d©a_Æign
, 
mö_io_size
, 
id
)

359 
	`ASSERT
(
d©a_size
 % 
BBSIZE
 == 0);

360 (
buf
->
d©a
 = 
	`memÆign
(
d©a_Æign
, 
d©a_size
)Ë=
NULL
) {

361 
d©a_size
 >>= 1;

362 i‡(
d©a_size
 < 
mö_io_size
)

363  
NULL
;

365 
	`ASSERT
(
mö_io_size
 % 
BBSIZE
 == 0);

366 
buf
->
d©a_Æign
 = data_align;

367 
buf
->
mö_io_size
 = min_io_size;

368 
buf
->
size
 = 
d©a_size
;

369 
buf
->
id
 = id;

370  
buf
;

371 
	}
}

374 
	$ªad_wbuf
(
fd
, 
wbuf
 *
buf
, 
xfs_mou¡_t
 *
mp
)

376 
ªs
 = 0;

377 
xfs_off_t
 
Ães
 = 0;

378 
xfs_off_t
 
√wpos
;

379 
size_t
 
diff
;

381 
√wpos
 = 
	`rounddown
(
buf
->
posôi⁄
, (
xfs_off_t
Ëbuf->
mö_io_size
);

383 i‡(
√wpos
 !
buf
->
posôi⁄
) {

384 
diff
 = 
buf
->
posôi⁄
 - 
√wpos
;

385 
buf
->
posôi⁄
 = 
√wpos
;

387 
buf
->
Àngth
 +
diff
;

390 i‡(
sour˚_posôi⁄
 !
buf
->
posôi⁄
) {

391 
Ães
 = 
	`l£ek
(
fd
, 
buf
->
posôi⁄
, 
SEEK_SET
);

392 i‡(
Ães
 < 0LL) {

393 
	`do_w¨n
(
	`_
("%s:Üseek failureát offset %lld\n"),

394 
¥og«me
, 
sour˚_posôi⁄
);

395 
	`dõ_≥º‹
();

397 
sour˚_posôi⁄
 = 
buf
->
posôi⁄
;

400 
	`ASSERT
(
sour˚_posôi⁄
 % 
sour˚_£˘‹size
 == 0);

404 i‡(
buf
->
Àngth
 % buf->
mö_io_size
 != 0)

405 
buf
->
Àngth
 = 
	`roundup
(buf->Àngth, buf->
mö_io_size
);

407 i‡(
buf
->
Àngth
 > buf->
size
) {

408 
	`do_w¨n
(
	`_
("assertÉrror: buf->length = %d, buf->size = %d\n"),

409 
buf
->
Àngth
, buf->
size
);

410 
	`exô
(1);

413 i‡((
ªs
 = 
	`ªad
(
fd
, 
buf
->
d©a
, buf->
Àngth
)) < 0) {

414 
	`do_w¨n
(
	`_
("%s:Ñead failureát offset %lld\n"),

415 
¥og«me
, 
sour˚_posôi⁄
);

416 
	`dõ_≥º‹
();

419 i‡(
ªs
 < 
buf
->
Àngth
 &&

420 
sour˚_posôi⁄
 + 
ªs
 =
mp
->
m_sb
.
sb_dblocks
 * 
sour˚_blocksize
)

421 
ªs
 = 
buf
->
Àngth
;

423 
	`ASSERT
(
ªs
 =
buf
->
Àngth
);

424 
sour˚_posôi⁄
 +
ªs
;

425 
buf
->
Àngth
 = 
ªs
;

426 
	}
}

429 
	$ªad_ag_hódî
(
fd
, 
xfs_agnumbî_t
 
agno
, 
wbuf
 *
buf
, 
ag_hódî_t
 *
ag
,

430 
xfs_mou¡_t
 *
mp
, 
blocksize
, 
£˘‹size
)

432 
xfs_daddr_t
 
off
;

433 
Àngth
;

434 
xfs_off_t
 
√wpos
;

435 
size_t
 
diff
;

439 
diff
 = 0;

440 
off
 = 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
XFS_SB_DADDR
);

441 
buf
->
posôi⁄
 = (
xfs_off_t
Ë
off
 * (xfs_off_tË
BBSIZE
;

442 
Àngth
 = 
buf
->Àngth = 
fú°_agbno
 * 
blocksize
;

443 i‡(
Àngth
 == 0) {

444 
	`do_log
(
	`_
("ag header buffer invalid!\n"));

445 
	`exô
(1);

450 
√wpos
 = 
	`rounddown
(
buf
->
posôi⁄
, (
xfs_off_t
Ëbuf->
mö_io_size
);

451 i‡(
√wpos
 !
buf
->
posôi⁄
) {

452 
diff
 = 
buf
->
posôi⁄
 - 
√wpos
;

453 
buf
->
posôi⁄
 = 
√wpos
;

454 
buf
->
Àngth
 +
diff
;

459 i‡(
buf
->
Àngth
 % buf->
mö_io_size
 != 0)

460 
buf
->
Àngth
 = 
	`roundup
(buf->Àngth, buf->
mö_io_size
);

462 
	`ªad_wbuf
(
fd
, 
buf
, 
mp
);

463 
	`ASSERT
(
buf
->
Àngth
 >=Üength);

465 
ag
->
xfs_sb
 = (
xfs_dsb_t
 *Ë(
buf
->
d©a
 + 
diff
);

466 
	`ASSERT
(
	`be32_to_˝u
(
ag
->
xfs_sb
->
sb_magi˙um
Ë=
XFS_SB_MAGIC
);

467 
ag
->
xfs_agf
 = (
xfs_agf_t
 *Ë(
buf
->
d©a
 + 
diff
 + 
£˘‹size
);

468 
	`ASSERT
(
	`be32_to_˝u
(
ag
->
xfs_agf
->
agf_magi˙um
Ë=
XFS_AGF_MAGIC
);

469 
ag
->
xfs_agi
 = (
xfs_agi_t
 *Ë(
buf
->
d©a
 + 
diff
 + 2 * 
£˘‹size
);

470 
	`ASSERT
(
	`be32_to_˝u
(
ag
->
xfs_agi
->
agi_magi˙um
Ë=
XFS_AGI_MAGIC
);

471 
ag
->
xfs_agÊ
 = (
xfs_agÊ_t
 *Ë(
buf
->
d©a
 + 
diff
 + 3 * 
£˘‹size
);

472 
	}
}

476 
	$wrôe_wbuf
()

478 
i
;

481 
i
 = 0; i < 
num_èrgës
; i++)

482 i‡(
èrgë
[
i
].
°©e
 !
INACTIVE
)

483 
glob_masks
.
num_w‹kög
++;

486 
i
 = 0; i < 
num_èrgës
; i++)

487 i‡(
èrgë
[
i
].
°©e
 !
INACTIVE
)

488 
	`±hªad_muãx_u∆ock
(&
èrg
[
i
].
waô
);

490 
	`sig«l_maskfunc
(
SIGCHLD
, 
SIG_UNBLOCK
);

491 
	`±hªad_muãx_lock
(&
maöwaô
);

492 
	`sig«l_maskfunc
(
SIGCHLD
, 
SIG_BLOCK
);

493 
	}
}

496 
	$sb_upd©e_uuid
(

497 
xfs_sb_t
 *
sb
,

498 
ag_hódî_t
 *
ag_hdr
,

499 
thªad_¨gs
 *
tˇrg
)

508 i‡(
	`xfs_sb_vîsi⁄_has¸c
(
sb
Ë&& !
	`xfs_sb_vîsi⁄_hasmëauuid
(sb) &&

509 !
	`uuid_equÆ
(&
tˇrg
->
uuid
, &
sb
->
sb_uuid
)) {

510 
__be32
 
„©
;

512 
„©
 = 
	`be32_to_˝u
(
ag_hdr
->
xfs_sb
->
sb_„©uªs_öcom∑t
);

513 
„©
 |
XFS_SB_FEAT_INCOMPAT_META_UUID
;

514 
ag_hdr
->
xfs_sb
->
sb_„©uªs_öcom∑t
 = 
	`˝u_to_be32
(
„©
);

515 
	`∂©f‹m_uuid_c›y
(&
ag_hdr
->
xfs_sb
->
sb_mëa_uuid
,

516 &
sb
->
sb_uuid
);

520 
	`∂©f‹m_uuid_c›y
(&
ag_hdr
->
xfs_sb
->
sb_uuid
, &
tˇrg
->
uuid
);

523 i‡(
	`xfs_sb_vîsi⁄_has¸c
(
sb
))

524 
	`xfs_upd©e_cksum
((*)
ag_hdr
->
xfs_sb
, 
sb
->
sb_£˘size
,

525 
XFS_SB_CRC_OFF
);

526 
	}
}

529 
	$maö
(
¨gc
, **
¨gv
)

531 
i
, 
j
;

532 
howÁr
 = 0;

533 
›í_Êags
;

534 
xfs_off_t
 
pos
;

535 
size_t
 
Àngth
;

536 
c
;

537 
__uöt64_t
 
size
, 
sizeb
;

538 
__uöt64_t
 
numblocks
 = 0;

539 
wblocks
 = 0;

540 
num_thªads
 = 0;

541 
diﬂâr
 
d
;

542 
wbuf_size
;

543 
wbuf_Æign
;

544 
wbuf_möiosize
;

545 
sour˚_is_fûe
 = 0;

546 
buf„ªd_ouçut
 = 0;

547 
du∂iˇã
 = 0;

548 
uöt
 
båì_Àvñs
, 
cuºít_Àvñ
;

549 
ag_hódî_t
 
ag_hdr
;

550 
xfs_mou¡_t
 *
mp
;

551 
xfs_mou¡_t
 
mbuf
;

552 
xlog
 xlog;

553 
xfs_buf_t
 *
sbp
;

554 
xfs_sb_t
 *
sb
;

555 
xfs_agnumbî_t
 
num_ags
, 
agno
;

556 
xfs_agblock_t
 
bno
;

557 
xfs_daddr_t
 
begö
, 
√xt_begö
, 
ag_begö
, 
√w_begö
, 
ag_íd
;

558 
xfs_båì_block
 *
block
;

559 
xfs_Æloc_±r_t
 *
±r
;

560 
xfs_Æloc_ªc_t
 *
ªc_±r
;

561 *
›èrg
;

562 
›töd
;

563 
libxfs_öô_t
 
x¨gs
;

564 
thªad_¨gs
 *
tˇrg
;

565 
°©
 
°©buf
;

567 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

569 
	`£éoˇÀ
(
LC_ALL
, "");

570 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

571 
	`ãxtdomaö
(
PACKAGE
);

573 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "bdL:V")Ë!
EOF
) {

574 
c
) {

576 
buf„ªd_ouçut
 = 1;

579 
du∂iˇã
 = 1;

582 
logfûe_«me
 = 
›èrg
;

585 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
¥og«me
, 
VERSION
);

586 
	`exô
(0);

588 
	`ußge
();

592 i‡(
¨gc
 - 
›töd
 < 2)

593 
	`ußge
();

595 i‡(
logfûe_«me
) {

596 
logfd
 = 
	`›í
(
logfûe_«me
, 
O_CREAT
|
O_WRONLY
|
O_EXCL
, 0600);

598 
logfûe_«me
 = 
LOGFILE_NAME
;

599 
logfd
 = 
	`mk°emp
(
logfûe_«me
);

602 i‡(
logfd
 < 0) {

603 
	`Ârötf
(
°dîr
, 
	`_
("%s: couldn't openÜog file \"%s\"\n"),

604 
¥og«me
, 
logfûe_«me
);

605 
	`≥º‹
(
	`_
("Aborting XFS copy -Ñeason"));

606 
	`exô
(1);

609 i‡((
logîr
 = 
	`fd›í
(
logfd
, "w")Ë=
NULL
) {

610 
	`Ârötf
(
°dîr
, 
	`_
("%s: couldn't set upÜogfile stream\n"),

611 
¥og«me
);

612 
	`≥º‹
(
	`_
("Aborting XFS copy -Ñeason"));

613 
	`exô
(1);

616 
sour˚_«me
 = 
¨gv
[
›töd
];

617 
sour˚_fd
 = -1;

618 
›töd
++;

620 
num_èrgës
 = 
¨gc
 - 
›töd
;

621 i‡((
èrgë
 = 
	`mÆloc
((
èrgë_c⁄åﬁ
Ë* 
num_èrgës
)Ë=
NULL
) {

622 
	`do_log
(
	`_
("Couldn'tállocateÅargetárray\n"));

623 
	`dõ_≥º‹
();

625 
i
 = 0; 
›töd
 < 
¨gc
; i++, optind++) {

626 
èrgë
[
i
].
«me
 = 
¨gv
[
›töd
];

627 
èrgë
[
i
].
fd
 = -1;

628 
èrgë
[
i
].
posôi⁄
 = -1;

629 
èrgë
[
i
].
°©e
 = 
INACTIVE
;

630 
èrgë
[
i
].
îr‹
 = 0;

631 
èrgë
[
i
].
îr_ty≥
 = 0;

634 
∑ª¡_pid
 = 
	`gëpid
();

638 
›í_Êags
 = 
O_RDONLY
;

640 i‡((
sour˚_fd
 = 
	`›í
(
sour˚_«me
, 
›í_Êags
)) < 0) {

641 
	`do_log
(
	`_
("%s: couldn't open source \"%s\"\n"),

642 
¥og«me
, 
sour˚_«me
);

643 
	`dõ_≥º‹
();

646 i‡(
	`f°©
(
sour˚_fd
, &
°©buf
) < 0) {

647 
	`do_log
(
	`_
("%s: couldn't stat source \"%s\"\n"),

648 
¥og«me
, 
sour˚_«me
);

649 
	`dõ_≥º‹
();

652 i‡(
	`S_ISREG
(
°©buf
.
°_mode
))

653 
sour˚_is_fûe
 = 1;

655 i‡(
sour˚_is_fûe
 && 
	`∂©f‹m_ã°_xfs_fd
(
sour˚_fd
)) {

656 i‡(
	`f˙é
(
sour˚_fd
, 
F_SETFL
, 
›í_Êags
 | 
O_DIRECT
) < 0) {

657 
	`do_log
(
	`_
("%s: Cannot set direct I/O flag on \"%s\".\n"),

658 
¥og«me
, 
sour˚_«me
);

659 
	`dõ_≥º‹
();

661 i‡(
	`xfs˘l
(
sour˚_«me
, 
sour˚_fd
, 
XFS_IOC_DIOINFO
, &
d
) < 0) {

662 
	`do_log
(
	`_
("%s: xfsctl on file \"%s\" failed.\n"),

663 
¥og«me
, 
sour˚_«me
);

664 
	`dõ_≥º‹
();

667 
wbuf_Æign
 = 
d
.
d_mem
;

668 
wbuf_size
 = 
	`MIN
(
d
.
d_maxiosz
, 1 * 1024 * 1024);

669 
wbuf_möiosize
 = 
d
.
d_möiosz
;

673 
wbuf_Æign
 = 
	`gë∑gesize
();

674 
wbuf_size
 = 1 * 1024 * 1024;

675 
wbuf_möiosize
 = -1;

678 i‡(!
sour˚_is_fûe
) {

683 i‡(
	`∂©f‹m_check_ismou¡ed
(
sour˚_«me
, 
NULL
, &
°©buf
, 0)) {

684 
	`do_log
(

685 
	`_
("%s: Warning --á filesystem is mounted onÅhe source device.\n"),

686 
¥og«me
);

687 
	`do_log
(

688 
	`_
("\t\tGenerated copies may be corrupt unlessÅhe source is\n"));

689 
	`do_log
(

690 
	`_
("\t\tunmounted or mountedÑead-only. CopyÖroceeding...\n"));

696 
	`mem£t
(&
x¨gs
, 0, (xargs));

697 
x¨gs
.
isdúe˘
 = 
LIBXFS_DIRECT
;

698 
x¨gs
.
i§ód⁄ly
 = 
LIBXFS_ISREADONLY
;

700 i‡(
sour˚_is_fûe
) {

701 
x¨gs
.
d«me
 = 
sour˚_«me
;

702 
x¨gs
.
disfûe
 = 1;

704 
x¨gs
.
vﬁ«me
 = 
sour˚_«me
;

706 i‡(!
	`libxfs_öô
(&
x¨gs
)) {

707 
	`do_log
(
	`_
("%s: couldn't initialize XFSÜibrary\n"

708 "%s: Ab‹tög.\n"), 
¥og«me
,Örogname);

709 
	`exô
(1);

712 
	`mem£t
(&
mbuf
, 0, (
xfs_mou¡_t
));

715 
	`libxfs_bu·¨g_öô
(&
mbuf
, 
x¨gs
.
ddev
, x¨gs.
logdev
, x¨gs.
πdev
);

716 
sbp
 = 
	`libxfs_ªadbuf
(
mbuf
.
m_ddev_èrgp
, 
XFS_SB_DADDR
,

717 1 << (
XFS_MAX_SECTORSIZE_LOG
 - 
BBSHIFT
), 0, 
NULL
);

718 
sb
 = &
mbuf
.
m_sb
;

719 
	`libxfs_sb_‰om_disk
(
sb
, 
	`XFS_BUF_TO_SBP
(
sbp
));

722 
	`libxfs_putbuf
(
sbp
);

723 
	`libxfs_purgebuf
(
sbp
);

724 
sbp
 = 
	`libxfs_ªadbuf
(
mbuf
.
m_ddev_èrgp
, 
XFS_SB_DADDR
,

725 1 << (
sb
->
sb_£˘log
 - 
BBSHIFT
),

726 0, &
xfs_sb_buf_›s
);

727 
	`libxfs_putbuf
(
sbp
);

729 
mp
 = 
	`libxfs_mou¡
(&
mbuf
, 
sb
, 
x¨gs
.
ddev
, x¨gs.
logdev
, x¨gs.
πdev
, 0);

730 i‡(
mp
 =
NULL
) {

731 
	`do_log
(
	`_
("%s: %s filesystem failedÅo initialize\n"

732 "%s: Ab‹tög.\n"), 
¥og«me
, 
sour˚_«me
,Örogname);

733 
	`exô
(1);

734 } i‡(
mp
->
m_sb
.
sb_ö¥ogªss
) {

735 
	`do_log
(
	`_
("%s %s filesystem failedÅo initialize\n"

736 "%s: Ab‹tög.\n"), 
¥og«me
, 
sour˚_«me
,Örogname);

737 
	`exô
(1);

738 } i‡(
mp
->
m_sb
.
sb_log°¨t
 == 0) {

739 
	`do_log
(
	`_
("%s: %s hasánÉxternalÜog.\n%s: Aborting.\n"),

740 
¥og«me
, 
sour˚_«me
,Örogname);

741 
	`exô
(1);

742 } i‡(
mp
->
m_sb
.
sb_ªxã¡s
 != 0) {

743 
	`do_log
(
	`_
("%s: %s hasáÑeal-time section.\n"

744 "%s: Ab‹tög.\n"), 
¥og«me
, 
sour˚_«me
,Örogname);

745 
	`exô
(1);

756 
	`mem£t
(&
xlog
, 0, (xlog));

757 
mp
->
m_log
 = &
xlog
;

758 
c
 = 
	`xlog_is_dúty
(
mp
, mp->
m_log
, &
x¨gs
, 0);

759 i‡(!
du∂iˇã
) {

760 i‡(
c
 == 1) {

761 
	`do_log
(
	`_
(

764 
	`exô
(1);

765 } i‡(
c
 < 0) {

766 
	`do_log
(
	`_
(

769 
	`exô
(1);

773 
sour˚_blocksize
 = 
mp
->
m_sb
.
sb_blocksize
;

774 
sour˚_£˘‹size
 = 
mp
->
m_sb
.
sb_£˘size
;

776 i‡(
wbuf_möiosize
 == -1)

777 
wbuf_möiosize
 = 
sour˚_£˘‹size
;

779 
	`ASSERT
(
sour˚_blocksize
 % 
sour˚_£˘‹size
 == 0);

780 
	`ASSERT
(
sour˚_£˘‹size
 % 
BBSIZE
 == 0);

782 i‡(
sour˚_blocksize
 < 
sour˚_£˘‹size
) {

783 
	`do_log
(
	`_
("Error: filesystem block size is smallerÅhanÅhe"

785 
	`exô
(1);

788 
fú°_agbno
 = 
	`XFS_AGFL_BLOCK
(
mp
) + 1;

792 
›í_Êags
 = 
O_RDWR
;

794 
i
 = 0; i < 
num_èrgës
; i++) {

795 
wrôe_œ°_block
 = 0;

797 i‡(
	`°©
(
èrgë
[
i
].
«me
, &
°©buf
) < 0) {

800 
	`do_out
(
	`_
("Cª©ög fûê%s\n"), 
èrgë
[
i
].
«me
);

802 
›í_Êags
 |
O_CREAT
;

803 i‡(!
buf„ªd_ouçut
)

804 
›í_Êags
 |
O_DIRECT
;

805 
wrôe_œ°_block
 = 1;

806 } i‡(
	`S_ISREG
(
°©buf
.
°_mode
)) {

807 
›í_Êags
 |
O_TRUNC
;

808 i‡(!
buf„ªd_ouçut
)

809 
›í_Êags
 |
O_DIRECT
;

810 
wrôe_œ°_block
 = 1;

816 i‡(
	`∂©f‹m_check_ismou¡ed
(
èrgë
[
i
].
«me
,

817 
NULL
, &
°©buf
, 0)) {

818 
	`do_log
(
	`_
("%s:á filesystem is mounted "

822 
¥og«me
, 
èrgë
[
i
].
«me
,Örogname);

823 
	`exô
(1);

827 
èrgë
[
i
].
fd
 = 
	`›í
—¨gë[i].
«me
, 
›í_Êags
, 0644);

828 i‡(
èrgë
[
i
].
fd
 < 0) {

829 
	`do_log
(
	`_
("%s: couldn't openÅarget \"%s\"\n"),

830 
¥og«me
, 
èrgë
[
i
].
«me
);

831 
	`dõ_≥º‹
();

834 i‡(
wrôe_œ°_block
) {

837 i‡(
	`·runˇã
(
èrgë
[
i
].
fd
, 
mp
->
m_sb
.
sb_dblocks
 *

838 
sour˚_blocksize
)) {

839 
	`do_log
(
	`_
("%s: cannot grow data section.\n"),

840 
¥og«me
);

841 
	`dõ_≥º‹
();

843 i‡(
	`∂©f‹m_ã°_xfs_fd
(
èrgë
[
i
].
fd
)) {

844 i‡(
	`xfs˘l
(
èrgë
[
i
].
«me
,Å¨gë[i].
fd
,

845 
XFS_IOC_DIOINFO
, &
d
) < 0) {

846 
	`do_log
(

847 
	`_
("%s: xfsctl on \"%s\" failed.\n"),

848 
¥og«me
, 
èrgë
[
i
].
«me
);

849 
	`dõ_≥º‹
();

851 
wbuf_Æign
 = 
	`MAX
(wbuf_Æign, 
d
.
d_mem
);

852 
wbuf_size
 = 
	`MIN
(
d
.
d_maxiosz
, wbuf_size);

853 
wbuf_möiosize
 = 
	`MAX
(
d
.
d_möiosz
,

854 
wbuf_möiosize
);

858 *
lb
[
XFS_MAX_SECTORSIZE
] = { 
NULL
 };

859 
off64_t
 
off
;

863 
off
 = 
mp
->
m_sb
.
sb_dblocks
 * 
sour˚_blocksize
;

864 
off
 -(
lb
);

865 i‡(
	`pwrôe
(
èrgë
[
i
].
fd
, 
lb
, ÷b), 
off
) < 0) {

866 
	`do_log
(
	`_
("%s: failedÅo writeÜast block\n"),

867 
¥og«me
);

868 
	`do_log
(
	`_
("\tIsÅarget \"%s\"Åoo small?\n"),

869 
èrgë
[
i
].
«me
);

870 
	`dõ_≥º‹
();

877 i‡(
	`±hªad_muãx_öô
(&
glob_masks
.
muãx
, 
NULL
) != 0) {

878 
	`do_log
(
	`_
("Couldn't initialize globalÅhread mask\n"));

879 
	`dõ_≥º‹
();

881 
glob_masks
.
num_w‹kög
 = 0;

883 i‡(
	`wbuf_öô
(&
w_buf
, 
wbuf_size
, 
wbuf_Æign
,

884 
wbuf_möiosize
, 0Ë=
NULL
) {

885 
	`do_log
(
	`_
("Error initializing wbuf 0\n"));

886 
	`dõ_≥º‹
();

889 
wblocks
 = 
wbuf_size
 / 
BBSIZE
;

891 i‡(
	`wbuf_öô
(&
båì_buf
, 
	`MAX
(
sour˚_blocksize
, 
wbuf_möiosize
),

892 
wbuf_Æign
, 
wbuf_möiosize
, 1Ë=
NULL
) {

893 
	`do_log
(
	`_
("Error initializing btree buf 1\n"));

894 
	`dõ_≥º‹
();

897 i‡(
	`±hªad_muãx_öô
(&
maöwaô
,
NULL
) != 0) {

898 
	`do_log
(
	`_
("Error creating first semaphore.\n"));

899 
	`dõ_≥º‹
();

900 
	`exô
(1);

903 
	`±hªad_muãx_lock
(&
maöwaô
);

907 
	`sig«l
(
SIGCHLD
, 
h™dÀr
);

908 
	`sig«l_maskfunc
(
SIGCHLD
, 
SIG_BLOCK
);

912 i‡((
èrg
 = 
	`mÆloc
(
num_èrgës
 * (
thªad_¨gs
))Ë=
NULL
) {

913 
	`do_log
(
	`_
("Couldn't malloc space forÅhreadárgs\n"));

914 
	`dõ_≥º‹
();

915 
	`exô
(1);

918 
i
 = 0, 
tˇrg
 = 
èrg
; i < 
num_èrgës
; i++,Åcarg++) {

919 i‡(!
du∂iˇã
)

920 
	`∂©f‹m_uuid_gíî©e
(&
tˇrg
->
uuid
);

922 
	`∂©f‹m_uuid_c›y
(&
tˇrg
->
uuid
, &
mp
->
m_sb
.
sb_uuid
);

924 i‡(
	`±hªad_muãx_öô
(&
tˇrg
->
waô
, 
NULL
) != 0) {

925 
	`do_log
(
	`_
("Eº‹ cª©ögÅhªad muãx %d\n"), 
i
);

926 
	`dõ_≥º‹
();

927 
	`exô
(1);

930 
	`±hªad_muãx_lock
(&
tˇrg
->
waô
);

933 
i
 = 0, 
tˇrg
 = 
èrg
; i < 
num_èrgës
; i++,Åcarg++) {

934 
tˇrg
->
id
 = 
i
;

935 
tˇrg
->
fd
 = 
èrgë
[
i
].fd;

937 
èrgë
[
i
].
°©e
 = 
ACTIVE
;

938 
num_thªads
++;

940 i‡(
	`±hªad_¸óã
(&
èrgë
[
i
].
pid
, 
NULL
,

941 
begö_ªadî
, (*)
tˇrg
)) {

942 
	`do_log
(
	`_
("Eº‹ cª©ögÅhªad f‹Å¨gë %d\n"), 
i
);

943 
	`dõ_≥º‹
();

947 
	`ASSERT
(
num_èrgës
 =
num_thªads
);

951 
num_ags
 = 
mp
->
m_sb
.
sb_agcou¡
;

953 
	`öô_b¨
(
mp
->
m_sb
.
sb_blocksize
 / 
BBSIZE


954 * ((
__uöt64_t
)
mp
->
m_sb
.
sb_dblocks


955 - (
__uöt64_t
)
mp
->
m_sb
.
sb_fdblocks
 + 10 * 
num_ags
));

957 
kids
 = 
num_èrgës
;

959 
agno
 = 0;ágnÿ< 
num_ags
 && 
kids
 > 0;ágno++) {

962 
	`ªad_ag_hódî
(
sour˚_fd
, 
agno
, &
w_buf
, &
ag_hdr
, 
mp
,

963 
sour˚_blocksize
, 
sour˚_£˘‹size
);

967 i‡(
agno
 == 0)

968 
ag_hdr
.
xfs_sb
->
sb_ö¥ogªss
 = 1;

972 
	`memmove
(
båì_buf
.
d©a
, 
ag_hdr
.
xfs_agf
, 
sour˚_£˘‹size
);

973 
ag_hdr
.
xfs_agf
 = (
xfs_agf_t
 *Ë
båì_buf
.
d©a
;

974 
båì_buf
.
Àngth
 = 
sour˚_blocksize
;

978 
	`wrôe_wbuf
();

982 
bno
 = 
	`be32_to_˝u
(
ag_hdr
.
xfs_agf
->
agf_roŸs
[
XFS_BTNUM_BNOi
]);

983 
cuºít_Àvñ
 = 0;

984 
båì_Àvñs
 = 
	`be32_to_˝u
(
ag_hdr
.
xfs_agf
->

985 
agf_Àvñs
[
XFS_BTNUM_BNOi
]);

987 
ag_íd
 = 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
,

988 
	`be32_to_˝u
(
ag_hdr
.
xfs_agf
->
agf_Àngth
) - 1)

989 + 
sour˚_blocksize
 / 
BBSIZE
;

994 i‡(
cuºít_Àvñ
 >
båì_Àvñs
) {

995 
	`do_log
(

996 
	`_
("Error: currentÜevel %d >= btreeÜevels %d\n"),

997 
cuºít_Àvñ
, 
båì_Àvñs
);

998 
	`exô
(1);

1001 
cuºít_Àvñ
++;

1003 
båì_buf
.
posôi⁄
 = 
pos
 = (
xfs_off_t
)

1004 
	`XFS_AGB_TO_DADDR
(
mp
,
agno
,
bno
Ë<< 
BBSHIFT
;

1005 
båì_buf
.
Àngth
 = 
sour˚_blocksize
;

1007 
	`ªad_wbuf
(
sour˚_fd
, &
båì_buf
, 
mp
);

1008 
block
 = (
xfs_båì_block
 *)

1009 ((*)
båì_buf
.
d©a
 +

1010 
pos
 - 
båì_buf
.
posôi⁄
);

1012 i‡(
	`be32_to_˝u
(
block
->
bb_magic
) !=

1013 (
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) ?

1014 
XFS_ABTB_CRC_MAGIC
 : 
XFS_ABTB_MAGIC
)) {

1015 
	`do_log
(
	`_
("Bad btree magic 0x%x\n"),

1016 
	`be32_to_˝u
(
block
->
bb_magic
));

1017 
	`exô
(1);

1020 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
) == 0)

1023 
±r
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1,

1024 
mp
->
m_Æloc_mxr
[1]);

1025 
bno
 = 
	`be32_to_˝u
(
±r
[0]);

1030 
pos
 = 
w_buf
.
posôi⁄
 >> 
BBSHIFT
;

1031 
Àngth
 = 
w_buf
.Àngth >> 
BBSHIFT
;

1032 
√xt_begö
 = 
pos
 + 
Àngth
;

1033 
ag_begö
 = 
√xt_begö
;

1035 
	`ASSERT
(
w_buf
.
posôi⁄
 % 
sour˚_£˘‹size
 == 0);

1040 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
) != 0) {

1041 
	`do_log
(

1042 
	`_
("WARNING: source filesystem inconsistent.\n"));

1043 
	`do_log
(

1044 
	`_
(" AÜeaf btreeÑec isn'táÜeaf. AbortingÇow.\n"));

1045 
	`exô
(1);

1048 
ªc_±r
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

1049 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
);

1050 
i
++, 
ªc_±r
++) {

1053 
begö
 = 
√xt_begö
;

1061 i‡(
begö
 < 
ag_begö
)

1062 
begö
 = 
ag_begö
;

1069 
sizeb
 = 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
,

1070 
	`be32_to_˝u
(
ªc_±r
->
¨_°¨tblock
)) -

1071 
begö
;

1072 
size
 = 
	`roundup
(
sizeb
 <<
BBSHIFT
, 
wbuf_möiosize
);

1073 i‡(
size
 > 0) {

1076 
w_buf
.
posôi⁄
 = (
xfs_off_t
)

1077 
begö
 << 
BBSHIFT
;

1079 
size
 > 0) {

1083 i‡(
size
 > 
w_buf
.size) {

1084 
w_buf
.
Àngth
 = w_buf.
size
;

1085 
size
 -
w_buf
.size;

1086 
sizeb
 -
wblocks
;

1087 
numblocks
 +
wblocks
;

1089 
w_buf
.
Àngth
 = 
size
;

1090 
numblocks
 +
sizeb
;

1091 
size
 = 0;

1094 
	`ªad_wbuf
(
sour˚_fd
, &
w_buf
, 
mp
);

1095 
	`wrôe_wbuf
();

1097 
w_buf
.
posôi⁄
 +w_buf.
Àngth
;

1099 
howÁr
 = 
	`bump_b¨
(

1100 
howÁr
, 
numblocks
);

1106 
√w_begö
 = 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
,

1107 
	`be32_to_˝u
(
ªc_±r
->
¨_°¨tblock
) +

1108 
	`be32_to_˝u
(
ªc_±r
->
¨_blockcou¡
));

1109 
√xt_begö
 = 
	`rounddown
(
√w_begö
,

1110 
w_buf
.
mö_io_size
 >> 
BBSHIFT
);

1113 i‡(
	`be32_to_˝u
(
block
->
bb_u
.
s
.
bb_rightsib
Ë=
NULLAGBLOCK
)

1118 
båì_buf
.
posôi⁄
 = 
pos
 = (
xfs_off_t
)

1119 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
	`be32_to_˝u
(

1120 
block
->
bb_u
.
s
.
bb_rightsib
)Ë<< 
BBSHIFT
;

1121 
båì_buf
.
Àngth
 = 
sour˚_blocksize
;

1125 
	`ªad_wbuf
(
sour˚_fd
, &
båì_buf
, 
mp
);

1127 
block
 = (
xfs_båì_block
 *)

1128 ((*Ë
båì_buf
.
d©a
 +

1129 
pos
 - 
båì_buf
.
posôi⁄
);

1131 
	`ASSERT
(
	`be32_to_˝u
(
block
->
bb_magic
Ë=
XFS_ABTB_MAGIC
);

1138 i‡(
√xt_begö
 < 
ag_íd
) {

1139 
begö
 = 
√xt_begö
;

1141 
sizeb
 = 
ag_íd
 - 
begö
;

1142 
size
 = 
	`roundup
(
sizeb
 << 
BBSHIFT
, 
wbuf_möiosize
);

1144 i‡(
size
 > 0) {

1147 
w_buf
.
posôi⁄
 = (
xfs_off_t
Ë
begö
 << 
BBSHIFT
;

1149 
size
 > 0) {

1153 i‡(
size
 > 
w_buf
.size) {

1154 
w_buf
.
Àngth
 = w_buf.
size
;

1155 
size
 -
w_buf
.size;

1156 
sizeb
 -
wblocks
;

1157 
numblocks
 +
wblocks
;

1159 
w_buf
.
Àngth
 = 
size
;

1160 
numblocks
 +
sizeb
;

1161 
size
 = 0;

1164 
	`ªad_wbuf
(
sour˚_fd
, &
w_buf
, 
mp
);

1165 
	`wrôe_wbuf
();

1167 
w_buf
.
posôi⁄
 +w_buf.
Àngth
;

1169 
howÁr
 = 
	`bump_b¨
(howÁr, 
numblocks
);

1175 i‡(
kids
 > 0) {

1176 i‡(!
du∂iˇã
)

1178 
	`f‹m©_logs
(
mp
);

1180 
num_ags
 = 1;

1185 
i
 = 
num_ags
 - 1; i >= 0; i--) {

1186 
	`ªad_ag_hódî
(
sour˚_fd
, 
i
, &
w_buf
, &
ag_hdr
, 
mp
,

1187 
sour˚_blocksize
, 
sour˚_£˘‹size
);

1188 i‡(
i
 == 0)

1189 
ag_hdr
.
xfs_sb
->
sb_ö¥ogªss
 = 0;

1193 
j
 = 0, 
tˇrg
 = 
èrg
; j < 
num_èrgës
; j++) {

1194 
	`sb_upd©e_uuid
(
sb
, &
ag_hdr
, 
tˇrg
);

1195 
	`do_wrôe
(
tˇrg
, 
NULL
);

1196 
tˇrg
++;

1200 
	`bump_b¨
(100, 0);

1203 
	`check_îr‹s
();

1204 
	`libxfs_umou¡
(
mp
);

1207 
	}
}

1210 
	$√xt_log_chunk
(*
p
, 
off£t
, *
¥iv©e
)

1212 
wbuf
 *
buf
 = (wbu‡*)
¥iv©e
;

1214 i‡(
buf
->
Àngth
 < ()(
p
 - buf->
d©a
Ë+ 
off£t
) {

1217 
	`do_wrôe
(
buf
->
ow√r
, 
NULL
);

1218 
	`mem£t
(
buf
->
d©a
, 0, buf->
Àngth
);

1219  
buf
->
d©a
;

1221  
p
 + 
off£t
;

1222 
	}
}

1230 
xfs_off_t


1231 
	$wrôe_log_hódî
(
fd
, 
wbuf
 *
buf
, 
xfs_mou¡_t
 *
mp
)

1233 *
p
 = 
buf
->
d©a
;

1234 
xfs_off_t
 
log°¨t
;

1235 
off£t
;

1237 
log°¨t
 = 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
Ë<< 
BBSHIFT
;

1238 
buf
->
posôi⁄
 = 
	`rounddown
(
log°¨t
, (
xfs_off_t
)buf->
Àngth
);

1240 
	`mem£t
(
p
, 0, 
buf
->
size
);

1241 i‡(
log°¨t
 % 
buf
->
Àngth
) {

1242 
	`ªad_wbuf
(
fd
, 
buf
, 
mp
);

1243 
off£t
 = 
log°¨t
 - 
buf
->
posôi⁄
;

1244 
p
 +
off£t
;

1245 
	`mem£t
(
p
, 0, 
buf
->
Àngth
 - 
off£t
);

1248 
off£t
 = 
	`libxfs_log_hódî
(
p
, &
buf
->
ow√r
->
uuid
,

1249 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
) ? 2 : 1,

1250 
mp
->
m_sb
.
sb_logsunô
, 
XLOG_FMT
, 
NULLCOMMITLSN
,

1251 
NULLCOMMITLSN
, 
√xt_log_chunk
, 
buf
);

1252 
	`do_wrôe
(
buf
->
ow√r
, 
NULL
);

1254  
	`roundup
(
log°¨t
 + 
off£t
, 
buf
->
Àngth
);

1255 
	}
}

1262 
xfs_off_t


1263 
	$wrôe_log_åaûî
(
fd
, 
wbuf
 *
buf
, 
xfs_mou¡_t
 *
mp
)

1265 
xfs_off_t
 
logíd
;

1266 
off£t
;

1268 
logíd
 = 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
Ë<< 
BBSHIFT
;

1269 
logíd
 +
	`XFS_FSB_TO_B
(
mp
, mp->
m_sb
.
sb_logblocks
);

1271 
buf
->
posôi⁄
 = 
	`rounddown
(
logíd
, (
xfs_off_t
)buf->
Àngth
);

1273 i‡(
logíd
 % 
buf
->
Àngth
) {

1274 
	`ªad_wbuf
(
fd
, 
buf
, 
mp
);

1275 
off£t
 = ()(
logíd
 - 
buf
->
posôi⁄
);

1276 
	`mem£t
(
buf
->
d©a
, 0, 
off£t
);

1277 
	`do_wrôe
(
buf
->
ow√r
, 
NULL
);

1280  
buf
->
posôi⁄
;

1281 
	}
}

1288 
	$˛ór_log
(

1289 
xfs_mou¡
 *
mp
,

1290 
thªad_¨gs
 *
tˇrg
)

1292 
xfs_off_t
 
pos
;

1293 
xfs_off_t
 
íd_pos
;

1295 
w_buf
.
ow√r
 = 
tˇrg
;

1296 
w_buf
.
Àngth
 = 
	`rounddown
(w_buf.
size
, w_buf.
mö_io_size
);

1297 
pos
 = 
	`wrôe_log_hódî
(
sour˚_fd
, &
w_buf
, 
mp
);

1298 
íd_pos
 = 
	`wrôe_log_åaûî
(
sour˚_fd
, &
w_buf
, 
mp
);

1299 
w_buf
.
posôi⁄
 = 
pos
;

1300 
	`mem£t
(
w_buf
.
d©a
, 0, w_buf.
Àngth
);

1302 
w_buf
.
posôi⁄
 < 
íd_pos
) {

1303 
	`do_wrôe
(
tˇrg
, 
NULL
);

1304 
w_buf
.
posôi⁄
 +w_buf.
Àngth
;

1306 
	}
}

1313 
	$f‹m©_log
(

1314 
xfs_mou¡
 *
mp
,

1315 
thªad_¨gs
 *
tˇrg
,

1316 
wbuf
 *
buf
)

1318 
log°¨t
;

1319 
Àngth
;

1320 
cy˛e
 = 
XLOG_INIT_CYCLE
;

1322 
buf
->
ow√r
 = 
tˇrg
;

1323 
buf
->
Àngth
 = buf->
size
;

1324 
buf
->
posôi⁄
 = 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
Ë<< 
BBSHIFT
;

1326 
log°¨t
 = 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_log°¨t
);

1327 
Àngth
 = 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_logblocks
);

1334 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1335 
cy˛e
 = 
mp
->
m_log
->
l_cuº_cy˛e
 + 1;

1341 
	`libxfs_log_˛ór
(
NULL
, 
buf
->
d©a
, 
log°¨t
, 
Àngth
, &buf->
ow√r
->
uuid
,

1342 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
) ? 2 : 1,

1343 
mp
->
m_sb
.
sb_logsunô
, 
XLOG_FMT
, 
cy˛e
, 
åue
);

1344 i‡(
	`do_wrôe
(
buf
->
ow√r
, buf))

1345 
èrgë
[
tˇrg
->
id
].
°©e
 = 
INACTIVE
;

1346 
	}
}

1349 
	$f‹m©_logs
(

1350 
xfs_mou¡
 *
mp
)

1352 
thªad_¨gs
 *
tˇrg
;

1353 
i
;

1354 
wbuf
 
logbuf
;

1355 
logsize
;

1357 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

1358 
logsize
 = 
	`XFS_FSB_TO_B
(
mp
, mp->
m_sb
.
sb_logblocks
);

1359 i‡(!
	`wbuf_öô
(&
logbuf
, 
logsize
, 
w_buf
.
d©a_Æign
,

1360 
w_buf
.
mö_io_size
, w_buf.
id
))

1361  -
ENOMEM
;

1364 
i
 = 0, 
tˇrg
 = 
èrg
; i < 
num_èrgës
; i++) {

1365 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1366 
	`f‹m©_log
(
mp
, 
tˇrg
, &
logbuf
);

1368 
	`˛ór_log
(
mp
, 
tˇrg
);

1369 
tˇrg
++;

1372 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1373 
	`‰ì
(
logbuf
.
d©a
);

1376 
	}
}

	@copy/xfs_copy.h

32 
	sag_hódî
 {

33 
xfs_dsb_t
 *
	mxfs_sb
;

34 
xfs_agf_t
 *
	mxfs_agf
;

35 
xfs_agi_t
 *
	mxfs_agi
;

36 
xfs_agÊ_t
 *
	mxfs_agÊ
;

37 *
	mªsidue
;

38 
	mªsidue_Àngth
;

39 } 
	tag_hódî_t
;

52 
	gt_¨gs
;

54 
	mid
;

55 
size_t
 
	msize
;

56 
size_t
 
	mmö_io_size
;

57 
	md©a_Æign
;

58 
xfs_off_t
 
	mposôi⁄
;

59 
size_t
 
	mÀngth
;

60 *
	md©a
;

61 
t_¨gs
 *
	mow√r
;

62 } 
	twbuf
;

64 
	st_¨gs
 {

65 
	mid
;

66 
uuid_t
 
	muuid
;

67 
±hªad_muãx_t
 
	mwaô
;

68 
	mfd
;

69 } 
	tthªad_¨gs
;

72 
±hªad_muãx_t
 
	mmuãx
;

73 
	mnum_w‹kög
;

74 
wbuf
 *
	mbuf„r
;

75 } 
	tthªad_c⁄åﬁ
;

77 
	tthªad_id
;

78 
	ttm_ödex
;

79 
__uöt32_t
 
	tthªad_mask
;

82 *
	m«me
;

83 
	mfd
;

84 
xfs_off_t
 
	mposôi⁄
;

85 
±hªad_t
 
	mpid
;

86 
	m°©e
;

87 
	mîr‹
;

88 
	mîr_ty≥
;

89 } 
	tèrgë_c⁄åﬁ
;

	@db/addr.c

19 
	~"libxfs.h
"

20 
	~"addr.h
"

21 
	~"comm™d.h
"

22 
	~"ty≥.h
"

23 
	~"Áddr.h
"

24 
	~"Âröt.h
"

25 
	~"fõld.h
"

26 
	~"io.h
"

27 
	~"Êi°.h
"

28 
	~"öode.h
"

29 
	~"ouçut.h
"

31 
addr_f
(
¨gc
, **
¨gv
);

32 
addr_hñp
();

34 c⁄° 
cmdöfo_t
 
	gaddr_cmd
 =

35 { "addr", "a", 
addr_f
, 0, 1, 1, 
N_
("[field-expression]"),

36 
N_
("£àcuºíàaddªss"), 
addr_hñp
 };

39 
	$addr_hñp
()

41 
	`db¥ötf
(
	`_
(

53 
	}
}

56 
	$addr_f
(

57 
¨gc
,

58 **
¨gv
)

60 
ad‚c_t
 
adf
;

61 c⁄° 
·©å_t
 *
Á
;

62 
Êi°_t
 *
Ê
;

63 c⁄° 
fõld_t
 *
Êd
;

64 
ty≤m_t
 
√xt
;

65 
Êi°_t
 *
tÊ
;

67 i‡(
¨gc
 == 1) {

68 
	`¥öt_iocur
("cuºít", 
iocur_t›
);

71 i‡(
cur_typ
 =
NULL
) {

72 
	`db¥ötf
(
	`_
("no currentÅype\n"));

75 
Êd
 = 
cur_typ
->
fõlds
;

76 i‡(
Êd
 !
NULL
 && fld->
«me
[0] == '\0') {

77 
Á
 = &
·©åèb
[
Êd
->
·yp
];

78 
	`ASSERT
(
Á
->
·yp
 =
Êd
->ftyp);

79 
Êd
 = 
Á
->
subÊd
;

81 i‡(
Êd
 =
NULL
) {

82 
	`db¥ötf
(
	`_
("nÿfõld†f‹Åy≥ %s\n"), 
cur_typ
->
«me
);

85 
Ê
 = 
	`Êi°_sˇn
(
¨gv
[1]);

86 i‡(
Ê
 =
NULL
)

88 i‡(!
	`Êi°_∑r£
(
Êd
, 
Ê
, 
iocur_t›
->
d©a
, 0))

89 
out
;

91 
	`Êi°_¥öt
(
Ê
);

92 
tÊ
 = 
Ê
;ÅÊ->
chûd
 !
NULL
;Åfl =Åfl->child) {

93 i‡((
tÊ
->
Êags
 & 
FL_OKLOW
Ë&&ÅÊ->
low
 <ÅÊ->
high
) {

94 
	`db¥ötf
(
	`_
("arrayÇotállowed foráddr command\n"));

95 
out
;

98 
Êd
 = 
tÊ
->fld;

99 
√xt
 = 
Êd
->next;

100 i‡(
√xt
 =
TYP_INODATA
)

101 
√xt
 = 
	`öode_√xt_ty≥
();

102 i‡(
√xt
 =
TYP_NONE
) {

103 
	`db¥ötf
(
	`_
("nÿ√xàty≥ f‹ fõld %s\n"), 
Êd
->
«me
);

104 
out
;

106 
Á
 = &
·©åèb
[
Êd
->
·yp
];

107 
	`ASSERT
(
Á
->
·yp
 =
Êd
->ftyp);

108 
adf
 = 
Á
->
adfunc
;

109 i‡(
adf
 =
NULL
) {

110 
	`db¥ötf
(
	`_
("noáddr function for field %s (type %s)\n"),

111 
Êd
->
«me
, 
Á
->name);

112 
out
;

114 (*
adf
)(
iocur_t›
->
d©a
, 
tÊ
->
off£t
, 
√xt
);

115 
out
:

116 
	`Êi°_‰ì
(
Ê
);

118 
	}
}

121 
	$addr_öô
()

123 
	`add_comm™d
(&
addr_cmd
);

124 
	}
}

	@db/addr.h

19 
addr_öô
();

	@db/agf.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"io.h
"

26 
	~"bô.h
"

27 
	~"ouçut.h
"

28 
	~"öô.h
"

29 
	~"agf.h
"

31 
agf_f
(
¨gc
, **
¨gv
);

32 
agf_hñp
();

34 c⁄° 
cmdöfo_t
 
	gagf_cmd
 =

35 { "agf", 
NULL
, 
agf_f
, 0, 1, 1, 
N_
("[agno]"),

36 
N_
("£àaddªs†tÿag‡hódî"), 
agf_hñp
 };

38 c⁄° 
fõld_t
 
	gagf_hÊd
[] = {

39 { "", 
FLDT_AGF
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

40 { 
NULL
 }

43 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_agf_t
, 
agf_
 ## f))

	)

44 
	#SZ
(
f
Ë
	`bôszof
(
xfs_agf_t
, 
agf_
 ## f)

	)

45 c⁄° 
fõld_t
 
	gagf_Êds
[] = {

46 { "magi˙um", 
FLDT_UINT32X
, 
OI
(
OFF
(
magi˙um
)), 
C1
, 0, 
TYP_NONE
 },

47 { "vîsi⁄num", 
FLDT_UINT32D
, 
OI
(
OFF
(
vîsi⁄num
)), 
C1
, 0, 
TYP_NONE
 },

48 { "£qno", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
£qno
)), 
C1
, 0, 
TYP_NONE
 },

49 { "Àngth", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
Àngth
)), 
C1
, 0, 
TYP_NONE
 },

50 { "roŸs", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
roŸs
)), 
CI
(
XFS_BTNUM_AGF
),

51 
FLD_ARRAY
|
FLD_SKIPALL
, 
TYP_NONE
 },

52 { "bn‹oŸ", 
FLDT_AGBLOCK
,

53 
OI
(
OFF
(
roŸs
Ë+ 
XFS_BTNUM_BNO
 * 
SZ
‘oŸs[XFS_BTNUM_BNO])), 
C1
, 0,

54 
TYP_BNOBT
 },

55 { "˙åoŸ", 
FLDT_AGBLOCK
,

56 
OI
(
OFF
(
roŸs
Ë+ 
XFS_BTNUM_CNT
 * 
SZ
‘oŸs[XFS_BTNUM_CNT])), 
C1
, 0,

57 
TYP_CNTBT
 },

58 { "rm≠roŸ", 
FLDT_AGBLOCKNZ
,

59 
OI
(
OFF
(
roŸs
Ë+ 
XFS_BTNUM_RMAP
 * 
SZ
‘oŸs[XFS_BTNUM_RMAP])), 
C1
, 0,

60 
TYP_RMAPBT
 },

61 { "ªf˙åoŸ", 
FLDT_AGBLOCKNZ
,

62 
OI
(
OFF
(
ªfcou¡_roŸ
)), 
C1
, 0,

63 
TYP_REFCBT
 },

64 { "Àvñs", 
FLDT_UINT32D
, 
OI
(
OFF
(
Àvñs
)), 
CI
(
XFS_BTNUM_AGF
),

65 
FLD_ARRAY
|
FLD_SKIPALL
, 
TYP_NONE
 },

66 { "bnﬁevñ", 
FLDT_UINT32D
,

67 
OI
(
OFF
(
Àvñs
Ë+ 
XFS_BTNUM_BNO
 * 
SZ
÷evñs[XFS_BTNUM_BNO])), 
C1
, 0,

68 
TYP_NONE
 },

69 { "˙éevñ", 
FLDT_UINT32D
,

70 
OI
(
OFF
(
Àvñs
Ë+ 
XFS_BTNUM_CNT
 * 
SZ
÷evñs[XFS_BTNUM_CNT])), 
C1
, 0,

71 
TYP_NONE
 },

72 { "rm≠Àvñ", 
FLDT_UINT32D
,

73 
OI
(
OFF
(
Àvñs
Ë+ 
XFS_BTNUM_RMAP
 * 
SZ
÷evñs[XFS_BTNUM_RMAP])), 
C1
, 0,

74 
TYP_NONE
 },

75 { "ªf˙éevñ", 
FLDT_UINT32D
,

76 
OI
(
OFF
(
ªfcou¡_Àvñ
)), 
C1
, 0,

77 
TYP_NONE
 },

78 { "rm≠blocks", 
FLDT_UINT32D
,

79 
OI
(
OFF
(
rm≠_blocks
)), 
C1
, 0,

80 
TYP_NONE
 },

81 { "ªf˙tblocks", 
FLDT_UINT32D
,

82 
OI
(
OFF
(
ªfcou¡_blocks
)), 
C1
, 0,

83 
TYP_NONE
 },

84 { "Êfú°", 
FLDT_UINT32D
, 
OI
(
OFF
(
Êfú°
)), 
C1
, 0, 
TYP_NONE
 },

85 { "Êœ°", 
FLDT_UINT32D
, 
OI
(
OFF
(
Êœ°
)), 
C1
, 0, 
TYP_NONE
 },

86 { "Êcou¡", 
FLDT_UINT32D
, 
OI
(
OFF
(
Êcou¡
)), 
C1
, 0, 
TYP_NONE
 },

87 { "‰ìblks", 
FLDT_EXTLEN
, 
OI
(
OFF
(
‰ìblks
)), 
C1
, 0, 
TYP_NONE
 },

88 { "l⁄ge°", 
FLDT_EXTLEN
, 
OI
(
OFF
(
l⁄ge°
)), 
C1
, 0, 
TYP_NONE
 },

89 { "båìblks", 
FLDT_UINT32D
, 
OI
(
OFF
(
båìblks
)), 
C1
, 0, 
TYP_NONE
 },

90 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

91 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

92 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

93 { 
NULL
 }

97 
	$agf_hñp
()

99 
	`db¥ötf
(
	`_
(

112 
	}
}

115 
	$agf_f
(

116 
¨gc
,

117 **
¨gv
)

119 
xfs_agnumbî_t
 
agno
;

120 *
p
;

122 i‡(
¨gc
 > 1) {

123 
agno
 = (
xfs_agnumbî_t
)
	`°πoul
(
¨gv
[1], &
p
, 0);

124 i‡(*
p
 !'\0' || 
agno
 >
mp
->
m_sb
.
sb_agcou¡
) {

125 
	`db¥ötf
(
	`_
("badáŒoˇti⁄ grou∞numbî %s\n"), 
¨gv
[1]);

128 
cur_agno
 = 
agno
;

129 } i‡(
cur_agno
 =
NULLAGNUMBER
)

130 
cur_agno
 = 0;

131 
	`ASSERT
(
ty±ab
[
TYP_AGF
].
ty≤m
 == TYP_AGF);

132 
	`£t_cur
(&
ty±ab
[
TYP_AGF
],

133 
	`XFS_AG_DADDR
(
mp
, 
cur_agno
, 
	`XFS_AGF_DADDR
(mp)),

134 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_ADD
, 
NULL
);

136 
	}
}

139 
	$agf_öô
()

141 
	`add_comm™d
(&
agf_cmd
);

142 
	}
}

145 
	$agf_size
(

146 *
obj
,

147 
°¨toff
,

148 
idx
)

150  
	`bôize
(
mp
->
m_sb
.
sb_£˘size
);

151 
	}
}

	@db/agf.h

19 c⁄° 
fõld
 
agf_Êds
[];

20 c⁄° 
fõld
 
agf_hÊd
[];

22 
agf_öô
();

23 
agf_size
(*
obj
, 
°¨toff
, 
idx
);

	@db/agfl.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"io.h
"

26 
	~"bô.h
"

27 
	~"ouçut.h
"

28 
	~"öô.h
"

29 
	~"agÊ.h
"

31 
agÊ_bno_size
(*
obj
, 
°¨toff
);

32 
agÊ_f
(
¨gc
, **
¨gv
);

33 
agÊ_hñp
();

35 c⁄° 
cmdöfo_t
 
	gagÊ_cmd
 =

36 { "agÊ", 
NULL
, 
agÊ_f
, 0, 1, 1, 
N_
("[agno]"),

37 
N_
("£àaddªs†tÿagÊ block"), 
agÊ_hñp
 };

39 c⁄° 
fõld_t
 
	gagÊ_hÊd
[] = { {

40 "", 
FLDT_AGFL
, 
OI
(0), 
C1
, 0, 
TYP_NONE
, },

41 { 
NULL
 }

44 c⁄° 
fõld_t
 
	gagÊ_¸c_hÊd
[] = { {

45 "", 
FLDT_AGFL_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
, },

46 { 
NULL
 }

49 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_agÊ_t
, 
agÊ_
 ## f))

	)

50 c⁄° 
fõld_t
 
	gagÊ_Êds
[] = {

51 { "bno", 
FLDT_AGBLOCKNZ
, 
OI
(
OFF
(
magi˙um
)), 
agÊ_bno_size
,

52 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_DATA
 },

53 { 
NULL
 }

56 c⁄° 
fõld_t
 
	gagÊ_¸c_Êds
[] = {

57 { "magi˙um", 
FLDT_UINT32X
, 
OI
(
OFF
(
magi˙um
)), 
C1
, 0, 
TYP_NONE
 },

58 { "£qno", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
£qno
)), 
C1
, 0, 
TYP_NONE
 },

59 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

60 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

61 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

62 { "bno", 
FLDT_AGBLOCKNZ
, 
OI
(
OFF
(
bno
)), 
agÊ_bno_size
,

63 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_DATA
 },

64 { 
NULL
 }

68 
	$agÊ_bno_size
(

69 *
obj
,

70 
°¨toff
)

72  
	`XFS_AGFL_SIZE
(
mp
);

73 
	}
}

76 
	$agÊ_hñp
()

78 
	`db¥ötf
(
	`_
(

93 
	}
}

96 
	$agÊ_f
(

97 
¨gc
,

98 **
¨gv
)

100 
xfs_agnumbî_t
 
agno
;

101 *
p
;

103 i‡(
¨gc
 > 1) {

104 
agno
 = (
xfs_agnumbî_t
)
	`°πoul
(
¨gv
[1], &
p
, 0);

105 i‡(*
p
 !'\0' || 
agno
 >
mp
->
m_sb
.
sb_agcou¡
) {

106 
	`db¥ötf
(
	`_
("badáŒoˇti⁄ grou∞numbî %s\n"), 
¨gv
[1]);

109 
cur_agno
 = 
agno
;

110 } i‡(
cur_agno
 =
NULLAGNUMBER
)

111 
cur_agno
 = 0;

112 
	`ASSERT
(
ty±ab
[
TYP_AGFL
].
ty≤m
 == TYP_AGFL);

113 
	`£t_cur
(&
ty±ab
[
TYP_AGFL
],

114 
	`XFS_AG_DADDR
(
mp
, 
cur_agno
, 
	`XFS_AGFL_DADDR
(mp)),

115 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_ADD
, 
NULL
);

117 
	}
}

120 
	$agÊ_öô
()

122 
	`add_comm™d
(&
agÊ_cmd
);

123 
	}
}

127 
	$agÊ_size
(

128 *
obj
,

129 
°¨toff
,

130 
idx
)

132  
	`bôize
(
mp
->
m_sb
.
sb_£˘size
);

133 
	}
}

	@db/agfl.h

19 c⁄° 
fõld
 
agÊ_Êds
[];

20 c⁄° 
fõld
 
agÊ_hÊd
[];

21 c⁄° 
fõld
 
agÊ_¸c_Êds
[];

22 c⁄° 
fõld
 
agÊ_¸c_hÊd
[];

24 
agÊ_öô
();

25 
agÊ_size
(*
obj
, 
°¨toff
, 
idx
);

	@db/agi.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"io.h
"

26 
	~"bô.h
"

27 
	~"ouçut.h
"

28 
	~"öô.h
"

29 
	~"agi.h
"

31 
agi_f
(
¨gc
, **
¨gv
);

32 
agi_hñp
();

34 c⁄° 
cmdöfo_t
 
	gagi_cmd
 =

35 { "agi", 
NULL
, 
agi_f
, 0, 1, 1, 
N_
("[agno]"),

36 
N_
("£àaddªs†tÿagòhódî"), 
agi_hñp
 };

38 c⁄° 
fõld_t
 
	gagi_hÊd
[] = {

39 { "", 
FLDT_AGI
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

40 { 
NULL
 }

43 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_agi_t
, 
agi_
 ## f))

	)

44 c⁄° 
fõld_t
 
	gagi_Êds
[] = {

45 { "magi˙um", 
FLDT_UINT32X
, 
OI
(
OFF
(
magi˙um
)), 
C1
, 0, 
TYP_NONE
 },

46 { "vîsi⁄num", 
FLDT_UINT32D
, 
OI
(
OFF
(
vîsi⁄num
)), 
C1
, 0, 
TYP_NONE
 },

47 { "£qno", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
£qno
)), 
C1
, 0, 
TYP_NONE
 },

48 { "Àngth", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
Àngth
)), 
C1
, 0, 
TYP_NONE
 },

49 { "cou¡", 
FLDT_AGINO
, 
OI
(
OFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

50 { "roŸ", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
roŸ
)), 
C1
, 0, 
TYP_INOBT
 },

51 { "Àvñ", 
FLDT_UINT32D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

52 { "‰ìcou¡", 
FLDT_AGINO
, 
OI
(
OFF
(
‰ìcou¡
)), 
C1
, 0, 
TYP_NONE
 },

53 { "√wöo", 
FLDT_AGINO
, 
OI
(
OFF
(
√wöo
)), 
C1
, 0, 
TYP_INODE
 },

54 { "dúöo", 
FLDT_AGINO
, 
OI
(
OFF
(
dúöo
)), 
C1
, 0, 
TYP_INODE
 },

55 { "u∆öked", 
FLDT_AGINONN
, 
OI
(
OFF
(
u∆öked
)),

56 
CI
(
XFS_AGI_UNLINKED_BUCKETS
), 
FLD_ARRAY
, 
TYP_NONE
 },

57 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

58 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

59 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

60 { "‰ì_roŸ", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
‰ì_roŸ
)), 
C1
, 0, 
TYP_INOBT
 },

61 { "‰ì_Àvñ", 
FLDT_UINT32D
, 
OI
(
OFF
(
‰ì_Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

62 { 
NULL
 }

66 
	$agi_hñp
()

68 
	`db¥ötf
(
	`_
(

81 
	}
}

84 
	$agi_f
(

85 
¨gc
,

86 **
¨gv
)

88 
xfs_agnumbî_t
 
agno
;

89 *
p
;

91 i‡(
¨gc
 > 1) {

92 
agno
 = (
xfs_agnumbî_t
)
	`°πoul
(
¨gv
[1], &
p
, 0);

93 i‡(*
p
 !'\0' || 
agno
 >
mp
->
m_sb
.
sb_agcou¡
) {

94 
	`db¥ötf
(
	`_
("badáŒoˇti⁄ grou∞numbî %s\n"), 
¨gv
[1]);

97 
cur_agno
 = 
agno
;

98 } i‡(
cur_agno
 =
NULLAGNUMBER
)

99 
cur_agno
 = 0;

100 
	`ASSERT
(
ty±ab
[
TYP_AGI
].
ty≤m
 == TYP_AGI);

101 
	`£t_cur
(&
ty±ab
[
TYP_AGI
],

102 
	`XFS_AG_DADDR
(
mp
, 
cur_agno
, 
	`XFS_AGI_DADDR
(mp)),

103 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_ADD
, 
NULL
);

105 
	}
}

108 
	$agi_öô
()

110 
	`add_comm™d
(&
agi_cmd
);

111 
	}
}

115 
	$agi_size
(

116 *
obj
,

117 
°¨toff
,

118 
idx
)

120  
	`bôize
(
mp
->
m_sb
.
sb_£˘size
);

121 
	}
}

	@db/agi.h

19 c⁄° 
fõld
 
agi_Êds
[];

20 c⁄° 
fõld
 
agi_hÊd
[];

22 
agi_öô
();

23 
agi_size
(*
obj
, 
°¨toff
, 
idx
);

	@db/attr.c

19 
	~"libxfs.h
"

20 
	~"bô.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"©å.h
"

26 
	~"io.h
"

27 
	~"öô.h
"

28 
	~"ouçut.h
"

30 
©å_Àaf_íåõs_cou¡
(*
obj
, 
°¨toff
);

31 
©å_Àaf_hdr_cou¡
(*
obj
, 
°¨toff
);

32 
©å_Àaf_«me_loˇl_cou¡
(*
obj
, 
°¨toff
);

33 
©å_Àaf_«me_loˇl_«me_cou¡
(*
obj
, 
°¨toff
);

34 
©å_Àaf_«me_loˇl_vÆue_cou¡
(*
obj
, 
°¨toff
);

35 
©å_Àaf_«me_loˇl_vÆue_off£t
(*
obj
, 
°¨toff
,

36 
idx
);

37 
©å_Àaf_«me_ªmŸe_cou¡
(*
obj
, 
°¨toff
);

38 
©å_Àaf_«me_ªmŸe_«me_cou¡
(*
obj
, 
°¨toff
);

39 
©å_Àaf_nvli°_cou¡
(*
obj
, 
°¨toff
);

40 
©å_Àaf_nvli°_off£t
(*
obj
, 
°¨toff
, 
idx
);

41 
©å_node_båì_cou¡
(*
obj
, 
°¨toff
);

42 
©å_node_hdr_cou¡
(*
obj
, 
°¨toff
);

44 c⁄° 
fõld_t
 
	g©å_hÊd
[] = {

45 { "", 
FLDT_ATTR
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

46 { 
NULL
 }

49 
	#LOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àafblock_t
, f))

	)

50 
	#NOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_öäode_t
, f))

	)

51 c⁄° 
fõld_t
 
	g©å_Êds
[] = {

52 { "hdr", 
FLDT_ATTR_LEAF_HDR
, 
OI
(
LOFF
(
hdr
)), 
©å_Àaf_hdr_cou¡
,

53 
FLD_COUNT
, 
TYP_NONE
 },

54 { "hdr", 
FLDT_ATTR_NODE_HDR
, 
OI
(
NOFF
(
hdr
)), 
©å_node_hdr_cou¡
,

55 
FLD_COUNT
, 
TYP_NONE
 },

56 { "íåõs", 
FLDT_ATTR_LEAF_ENTRY
, 
OI
(
LOFF
(
íåõs
)),

57 
©å_Àaf_íåõs_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

58 { "båì", 
FLDT_ATTR_NODE_ENTRY
, 
OI
(
NOFF
(
__båì
)), 
©å_node_båì_cou¡
,

59 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

60 { "nvli°", 
FLDT_ATTR_LEAF_NAME
, 
©å_Àaf_nvli°_off£t
,

61 
©å_Àaf_nvli°_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

62 { 
NULL
 }

65 
	#BOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_blköfo_t
, f))

	)

66 c⁄° 
fõld_t
 
	g©å_blköfo_Êds
[] = {

67 { "f‹w", 
FLDT_ATTRBLOCK
, 
OI
(
BOFF
(
f‹w
)), 
C1
, 0, 
TYP_ATTR
 },

68 { "back", 
FLDT_ATTRBLOCK
, 
OI
(
BOFF
(
back
)), 
C1
, 0, 
TYP_ATTR
 },

69 { "magic", 
FLDT_UINT16X
, 
OI
(
BOFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

70 { "∑d", 
FLDT_UINT16X
, 
OI
(
BOFF
(
∑d
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

71 { 
NULL
 }

74 
	#LEOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àaf_íåy_t
, f))

	)

75 c⁄° 
fõld_t
 
	g©å_Àaf_íåy_Êds
[] = {

76 { "hashvÆ", 
FLDT_UINT32X
, 
OI
(
LEOFF
(
hashvÆ
)), 
C1
, 0, 
TYP_NONE
 },

77 { "«meidx", 
FLDT_UINT16D
, 
OI
(
LEOFF
(
«meidx
)), 
C1
, 0, 
TYP_NONE
 },

78 { "Êags", 
FLDT_UINT8X
, 
OI
(
LEOFF
(
Êags
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

79 { "öcom∂ëe", 
FLDT_UINT1
,

80 
OI
(
LEOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_INCOMPLETE_BIT
 - 1), 
C1
,

81 0, 
TYP_NONE
 },

82 { "roŸ", 
FLDT_UINT1
,

83 
OI
(
LEOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_ROOT_BIT
 - 1), 
C1
, 0,

84 
TYP_NONE
 },

85 { "£cuª", 
FLDT_UINT1
,

86 
OI
(
LEOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_SECURE_BIT
 - 1), 
C1
, 0,

87 
TYP_NONE
 },

88 { "loˇl", 
FLDT_UINT1
,

89 
OI
(
LEOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_LOCAL_BIT
 - 1), 
C1
, 0,

90 
TYP_NONE
 },

91 { "∑d2", 
FLDT_UINT8X
, 
OI
(
LEOFF
(
∑d2
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

92 { 
NULL
 }

95 
	#LHOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àaf_hdr_t
, f))

	)

96 c⁄° 
fõld_t
 
	g©å_Àaf_hdr_Êds
[] = {

97 { "öfo", 
FLDT_ATTR_BLKINFO
, 
OI
(
LHOFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

98 { "cou¡", 
FLDT_UINT16D
, 
OI
(
LHOFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

99 { "u£dbyãs", 
FLDT_UINT16D
, 
OI
(
LHOFF
(
u£dbyãs
)), 
C1
, 0, 
TYP_NONE
 },

100 { "fú°u£d", 
FLDT_UINT16D
, 
OI
(
LHOFF
(
fú°u£d
)), 
C1
, 0, 
TYP_NONE
 },

101 { "hﬁes", 
FLDT_UINT8D
, 
OI
(
LHOFF
(
hﬁes
)), 
C1
, 0, 
TYP_NONE
 },

102 { "∑d1", 
FLDT_UINT8X
, 
OI
(
LHOFF
(
∑d1
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

103 { "‰ìm≠", 
FLDT_ATTR_LEAF_MAP
, 
OI
(
LHOFF
(
‰ìm≠
)),

104 
CI
(
XFS_ATTR_LEAF_MAPSIZE
), 
FLD_ARRAY
, 
TYP_NONE
 },

105 { 
NULL
 }

108 
	#LMOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àaf_m≠_t
, f))

	)

109 c⁄° 
fõld_t
 
	g©å_Àaf_m≠_Êds
[] = {

110 { "ba£", 
FLDT_UINT16D
, 
OI
(
LMOFF
(
ba£
)), 
C1
, 0, 
TYP_NONE
 },

111 { "size", 
FLDT_UINT16D
, 
OI
(
LMOFF
(
size
)), 
C1
, 0, 
TYP_NONE
 },

112 { 
NULL
 }

115 
	#LNOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àaf_«me_loˇl_t
, f))

	)

116 
	#LVOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_Àaf_«me_ªmŸe_t
, f))

	)

117 c⁄° 
fõld_t
 
	g©å_Àaf_«me_Êds
[] = {

118 { "vÆuñí", 
FLDT_UINT16D
, 
OI
(
LNOFF
(
vÆuñí
)),

119 
©å_Àaf_«me_loˇl_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

120 { "«mñí", 
FLDT_UINT8D
, 
OI
(
LNOFF
(
«mñí
)),

121 
©å_Àaf_«me_loˇl_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

122 { "«me", 
FLDT_CHARNS
, 
OI
(
LNOFF
(
«mevÆ
)),

123 
©å_Àaf_«me_loˇl_«me_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

124 { "vÆue", 
FLDT_CHARNS
, 
©å_Àaf_«me_loˇl_vÆue_off£t
,

125 
©å_Àaf_«me_loˇl_vÆue_cou¡
, 
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

126 { "vÆueblk", 
FLDT_UINT32X
, 
OI
(
LVOFF
(
vÆueblk
)),

127 
©å_Àaf_«me_ªmŸe_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

128 { "vÆuñí", 
FLDT_UINT32D
, 
OI
(
LVOFF
(
vÆuñí
)),

129 
©å_Àaf_«me_ªmŸe_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

130 { "«mñí", 
FLDT_UINT8D
, 
OI
(
LVOFF
(
«mñí
)),

131 
©å_Àaf_«me_ªmŸe_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

132 { "«me", 
FLDT_CHARNS
, 
OI
(
LVOFF
(
«me
)),

133 
©å_Àaf_«me_ªmŸe_«me_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

134 { 
NULL
 }

137 
	#EOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_node_íåy_t
, f))

	)

138 c⁄° 
fõld_t
 
	g©å_node_íåy_Êds
[] = {

139 { "hashvÆ", 
FLDT_UINT32X
, 
OI
(
EOFF
(
hashvÆ
)), 
C1
, 0, 
TYP_NONE
 },

140 { "bef‹e", 
FLDT_ATTRBLOCK
, 
OI
(
EOFF
(
bef‹e
)), 
C1
, 0, 
TYP_ATTR
 },

141 { 
NULL
 }

144 
	#HOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_node_hdr_t
, f))

	)

145 c⁄° 
fõld_t
 
	g©å_node_hdr_Êds
[] = {

146 { "öfo", 
FLDT_ATTR_BLKINFO
, 
OI
(
HOFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

147 { "cou¡", 
FLDT_UINT16D
, 
OI
(
HOFF
(
__cou¡
)), 
C1
, 0, 
TYP_NONE
 },

148 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
HOFF
(
__Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

149 { 
NULL
 }

153 
	$©å_Àaf_íåõs_cou¡
(

154 *
obj
,

155 
°¨toff
)

157 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

159 
	`ASSERT
(
°¨toff
 == 0);

160 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR_LEAF_MAGIC
)

162  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

163 
	}
}

166 
	$©å3_Àaf_íåõs_cou¡
(

167 *
obj
,

168 
°¨toff
)

170 
xfs_©å3_Àafblock
 *
Àaf
 = 
obj
;

172 
	`ASSERT
(
°¨toff
 == 0);

173 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_ATTR3_LEAF_MAGIC
)

175  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

176 
	}
}

179 
	$©å_Àaf_hdr_cou¡
(

180 *
obj
,

181 
°¨toff
)

183 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

185 
	`ASSERT
(
°¨toff
 == 0);

186  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_ATTR_LEAF_MAGIC
;

187 
	}
}

190 
	$©å3_Àaf_hdr_cou¡
(

191 *
obj
,

192 
°¨toff
)

194 
xfs_©å3_Àafblock
 *
Àaf
 = 
obj
;

196 
	`ASSERT
(
°¨toff
 == 0);

197  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_ATTR3_LEAF_MAGIC
;

198 
	}
}

200 (*
	t©å_Àaf_íåy_wÆk_f
)(
	txfs_©å_Àafblock
 *,

201 
	txfs_©å_Àaf_íåy
 *, );

203 
	$©å_Àaf_íåy_wÆk
(

204 *
obj
,

205 
°¨toff
,

206 
©å_Àaf_íåy_wÆk_f
 
func
)

208 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

209 
xfs_©å3_i˛óf_hdr
 
Àafhdr
;

210 
xfs_©å_Àaf_íåy
 *
íåõs
;

211 
xfs_©å_Àaf_íåy
 *
e
;

212 
i
;

213 
off
;

215 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

216 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR_LEAF_MAGIC
 &&

217 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR3_LEAF_MAGIC
)

220 
off
 = 
	`byãize
(
°¨toff
);

221 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
Àafhdr
, 
Àaf
);

222 
íåõs
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

224 
i
 = 0; i < 
Àafhdr
.
cou¡
; i++) {

225 
e
 = &
íåõs
[
i
];

226 i‡(
	`be16_to_˝u
(
e
->
«meidx
Ë=
off
)

227  
	`func
(
Àaf
, 
e
, 
i
);

230 
	}
}

233 
	$__©å_Àaf_«me_loˇl_cou¡
(

234 
xfs_©å_Àafblock
 *
Àaf
,

235 
xfs_©å_Àaf_íåy
 *
e
,

236 
i
)

238  (
e
->
Êags
 & 
XFS_ATTR_LOCAL
) != 0;

239 
	}
}

242 
	$©å_Àaf_«me_loˇl_cou¡
(

243 *
obj
,

244 
°¨toff
)

246  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

247 
__©å_Àaf_«me_loˇl_cou¡
);

248 
	}
}

251 
	$__©å_Àaf_«me_loˇl_«me_cou¡
(

252 
xfs_©å_Àafblock
 *
Àaf
,

253 
xfs_©å_Àaf_íåy
 *
e
,

254 
i
)

256 
xfs_©å_Àaf_«me_loˇl
 *
l
;

258 i‡(!(
e
->
Êags
 & 
XFS_ATTR_LOCAL
))

261 
l
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
i
);

262  
l
->
«mñí
;

263 
	}
}

266 
	$©å_Àaf_«me_loˇl_«me_cou¡
(

267 *
obj
,

268 
°¨toff
)

270  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

271 
__©å_Àaf_«me_loˇl_«me_cou¡
);

272 
	}
}

275 
	$__©å_Àaf_«me_loˇl_vÆue_cou¡
(

276 
xfs_©å_Àafblock
 *
Àaf
,

277 
xfs_©å_Àaf_íåy
 *
e
,

278 
i
)

280 
xfs_©å_Àaf_«me_loˇl
 *
l
;

282 i‡(!(
e
->
Êags
 & 
XFS_ATTR_LOCAL
))

285 
l
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
i
);

286  
	`be16_to_˝u
(
l
->
vÆuñí
);

287 
	}
}

290 
	$©å_Àaf_«me_loˇl_vÆue_cou¡
(

291 *
obj
,

292 
°¨toff
)

294  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

295 
__©å_Àaf_«me_loˇl_vÆue_cou¡
);

296 
	}
}

299 
	$__©å_Àaf_«me_loˇl_vÆue_off£t
(

300 
xfs_©å_Àafblock
 *
Àaf
,

301 
xfs_©å_Àaf_íåy
 *
e
,

302 
i
)

304 
xfs_©å_Àaf_«me_loˇl
 *
l
;

305 *
vp
;

307 
l
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
i
);

308 
vp
 = (*)&
l
->
«mevÆ
[l->
«mñí
];

310  ()
	`bôize
(
vp
 - (*)
l
);

311 
	}
}

314 
	$©å_Àaf_«me_loˇl_vÆue_off£t
(

315 *
obj
,

316 
°¨toff
,

317 
idx
)

319  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

320 
__©å_Àaf_«me_loˇl_vÆue_off£t
);

321 
	}
}

324 
	$__©å_Àaf_«me_ªmŸe_cou¡
(

325 
xfs_©å_Àafblock
 *
Àaf
,

326 
xfs_©å_Àaf_íåy
 *
e
,

327 
i
)

329  (
e
->
Êags
 & 
XFS_ATTR_LOCAL
) == 0;

330 
	}
}

333 
	$©å_Àaf_«me_ªmŸe_cou¡
(

334 *
obj
,

335 
°¨toff
)

337  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

338 
__©å_Àaf_«me_ªmŸe_cou¡
);

339 
	}
}

342 
	$__©å_Àaf_«me_ªmŸe_«me_cou¡
(

343 
xfs_©å_Àafblock
 *
Àaf
,

344 
xfs_©å_Àaf_íåy
 *
e
,

345 
i
)

347 
xfs_©å_Àaf_«me_ªmŸe
 *
r
;

349 i‡(
e
->
Êags
 & 
XFS_ATTR_LOCAL
)

352 
r
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
i
);

353  
r
->
«mñí
;

354 
	}
}

357 
	$©å_Àaf_«me_ªmŸe_«me_cou¡
(

358 *
obj
,

359 
°¨toff
)

361  
	`©å_Àaf_íåy_wÆk
(
obj
, 
°¨toff
,

362 
__©å_Àaf_«me_ªmŸe_«me_cou¡
);

363 
	}
}

366 
	$©å_Àaf_«me_size
(

367 *
obj
,

368 
°¨toff
,

369 
idx
)

371 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

372 
xfs_©å_Àaf_íåy
 *
e
;

373 
xfs_©å_Àaf_«me_loˇl
 *
l
;

374 
xfs_©å_Àaf_«me_ªmŸe
 *
r
;

376 
	`ASSERT
(
°¨toff
 == 0);

377 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR_LEAF_MAGIC
 &&

378 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR3_LEAF_MAGIC
)

380 
e
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf
)[
idx
];

381 i‡(
e
->
Êags
 & 
XFS_ATTR_LOCAL
) {

382 
l
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
idx
);

383  ()
	`bôize
(
	`xfs_©å_Àaf_ítsize_loˇl
(
l
->
«mñí
,

384 
	`be16_to_˝u
(
l
->
vÆuñí
)));

386 
r
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
idx
);

387  ()
	`bôize
(
	`xfs_©å_Àaf_ítsize_ªmŸe
(
r
->
«mñí
));

389 
	}
}

392 
	$©å_Àaf_nvli°_cou¡
(

393 *
obj
,

394 
°¨toff
)

396 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

398 
	`ASSERT
(
°¨toff
 == 0);

399 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR_LEAF_MAGIC
)

401  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

402 
	}
}

405 
	$©å3_Àaf_nvli°_cou¡
(

406 *
obj
,

407 
°¨toff
)

409 
xfs_©å3_Àafblock
 *
Àaf
 = 
obj
;

411 
	`ASSERT
(
°¨toff
 == 0);

412 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_ATTR3_LEAF_MAGIC
)

414  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

415 
	}
}

418 
	$©å_Àaf_nvli°_off£t
(

419 *
obj
,

420 
°¨toff
,

421 
idx
)

423 
xfs_©å_Àafblock
 *
Àaf
 = 
obj
;

424 
xfs_©å_Àaf_íåy
 *
e
;

426 
	`ASSERT
(
°¨toff
 == 0);

427 
e
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf
)[
idx
];

428  
	`bôize
(
	`be16_to_˝u
(
e
->
«meidx
));

429 
	}
}

432 
	$©å_node_båì_cou¡
(

433 *
obj
,

434 
°¨toff
)

436 
xfs_da_öäode
 *
node
 = 
obj
;

438 
	`ASSERT
(
°¨toff
 == 0);

439 i‡(
	`be16_to_˝u
(
node
->
hdr
.
öfo
.
magic
Ë!
XFS_DA_NODE_MAGIC
)

441  
	`be16_to_˝u
(
node
->
hdr
.
__cou¡
);

442 
	}
}

445 
	$©å3_node_båì_cou¡
(

446 *
obj
,

447 
°¨toff
)

449 
xfs_da3_öäode
 *
node
 = 
obj
;

451 
	`ASSERT
(
°¨toff
 == 0);

452 i‡(
	`be16_to_˝u
(
node
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_DA3_NODE_MAGIC
)

454  
	`be16_to_˝u
(
node
->
hdr
.
__cou¡
);

455 
	}
}

459 
	$©å_node_hdr_cou¡
(

460 *
obj
,

461 
°¨toff
)

463 
xfs_da_öäode
 *
node
 = 
obj
;

465 
	`ASSERT
(
°¨toff
 == 0);

466  
	`be16_to_˝u
(
node
->
hdr
.
öfo
.
magic
Ë=
XFS_DA_NODE_MAGIC
;

467 
	}
}

470 
	$©å3_node_hdr_cou¡
(

471 *
obj
,

472 
°¨toff
)

474 
xfs_da3_öäode
 *
node
 = 
obj
;

476 
	`ASSERT
(
°¨toff
 == 0);

477  
	`be16_to_˝u
(
node
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_DA3_NODE_MAGIC
;

478 
	}
}

481 
	$©å_size
(

482 *
obj
,

483 
°¨toff
,

484 
idx
)

486  
	`bôize
(
mp
->
m_sb
.
sb_blocksize
);

487 
	}
}

492 c⁄° 
fõld_t
 
	g©å3_hÊd
[] = {

493 { "", 
FLDT_ATTR3
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

494 { 
NULL
 }

497 
	#L3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å3_Àafblock
, f))

	)

498 
	#N3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da3_öäode
, f))

	)

499 c⁄° 
fõld_t
 
	g©å3_Êds
[] = {

500 { "hdr", 
FLDT_ATTR3_LEAF_HDR
, 
OI
(
L3OFF
(
hdr
)), 
©å3_Àaf_hdr_cou¡
,

501 
FLD_COUNT
, 
TYP_NONE
 },

502 { "hdr", 
FLDT_DA3_NODE_HDR
, 
OI
(
N3OFF
(
hdr
)), 
©å3_node_hdr_cou¡
,

503 
FLD_COUNT
, 
TYP_NONE
 },

504 { "íåõs", 
FLDT_ATTR_LEAF_ENTRY
, 
OI
(
L3OFF
(
íåõs
)),

505 
©å3_Àaf_íåõs_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

506 { "båì", 
FLDT_ATTR_NODE_ENTRY
, 
OI
(
N3OFF
(
__båì
)),

507 
©å3_node_båì_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

508 { "nvli°", 
FLDT_ATTR_LEAF_NAME
, 
©å_Àaf_nvli°_off£t
,

509 
©å3_Àaf_nvli°_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

510 { 
NULL
 }

513 
	#LH3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å3_Àaf_hdr
, f))

	)

514 c⁄° 
fõld_t
 
	g©å3_Àaf_hdr_Êds
[] = {

515 { "öfo", 
FLDT_DA3_BLKINFO
, 
OI
(
LH3OFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

516 { "cou¡", 
FLDT_UINT16D
, 
OI
(
LH3OFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

517 { "u£dbyãs", 
FLDT_UINT16D
, 
OI
(
LH3OFF
(
u£dbyãs
)), 
C1
, 0, 
TYP_NONE
 },

518 { "fú°u£d", 
FLDT_UINT16D
, 
OI
(
LH3OFF
(
fú°u£d
)), 
C1
, 0, 
TYP_NONE
 },

519 { "hﬁes", 
FLDT_UINT8D
, 
OI
(
LH3OFF
(
hﬁes
)), 
C1
, 0, 
TYP_NONE
 },

520 { "∑d1", 
FLDT_UINT8X
, 
OI
(
LH3OFF
(
∑d1
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

521 { "‰ìm≠", 
FLDT_ATTR_LEAF_MAP
, 
OI
(
LH3OFF
(
‰ìm≠
)),

522 
CI
(
XFS_ATTR_LEAF_MAPSIZE
), 
FLD_ARRAY
, 
TYP_NONE
 },

523 { 
NULL
 }

531 
	$xfs_©å3_db_ªad_vîify
(

532 
xfs_buf
 *
bp
)

534 
__be32
 
magic32
;

535 
__be16
 
magic16
;

537 
magic32
 = *(
__be32
 *)
bp
->
b_addr
;

538 
magic16
 = ((
xfs_da_blköfo
 *)
bp
->
b_addr
)->
magic
;

540 
magic16
) {

541 
	`˝u_to_be16
(
XFS_ATTR3_LEAF_MAGIC
):

542 
bp
->
b_›s
 = &
xfs_©å3_Àaf_buf_›s
;

543 
vîify
;

544 
	`˝u_to_be16
(
XFS_DA3_NODE_MAGIC
):

545 
bp
->
b_›s
 = &
xfs_da3_node_buf_›s
;

546 
vîify
;

551 
magic32
) {

552 
	`˝u_to_be32
(
XFS_ATTR3_RMT_MAGIC
):

553 
bp
->
b_›s
 = &
xfs_©å3_rmt_buf_›s
;

556 
	`db¥ötf
(
	`_
("Unknownáttribute bufferÅype!\n"));

557 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

560 
vîify
:

561 
bp
->
b_›s
->
	`vîify_ªad
(bp);

562 
	}
}

565 
	$xfs_©å3_db_wrôe_vîify
(

566 
xfs_buf
 *
bp
)

568 
	`db¥ötf
(
	`_
("Writing unknownáttribute bufferÅype!\n"));

569 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

570 
	}
}

572 c⁄° 
xfs_buf_›s
 
	gxfs_©å3_db_buf_›s
 = {

573 .
«me
 = "xfs_attr3",

574 .
	gvîify_ªad
 = 
xfs_©å3_db_ªad_vîify
,

575 .
	gvîify_wrôe
 = 
xfs_©å3_db_wrôe_vîify
,

	@db/attr.h

19 c⁄° 
fõld_t
 
©å_Êds
[];

20 c⁄° 
fõld_t
 
©å_hÊd
[];

21 c⁄° 
fõld_t
 
©å_blköfo_Êds
[];

22 c⁄° 
fõld_t
 
©å_Àaf_íåy_Êds
[];

23 c⁄° 
fõld_t
 
©å_Àaf_hdr_Êds
[];

24 c⁄° 
fõld_t
 
©å_Àaf_m≠_Êds
[];

25 c⁄° 
fõld_t
 
©å_Àaf_«me_Êds
[];

26 c⁄° 
fõld_t
 
©å_node_íåy_Êds
[];

27 c⁄° 
fõld_t
 
©å_node_hdr_Êds
[];

29 c⁄° 
fõld_t
 
©å3_Êds
[];

30 c⁄° 
fõld_t
 
©å3_hÊd
[];

31 c⁄° 
fõld_t
 
©å3_Àaf_hdr_Êds
[];

32 c⁄° 
fõld_t
 
©å3_node_hdr_Êds
[];

34 
©å_Àaf_«me_size
(*
obj
, 
°¨toff
, 
idx
);

35 
©å_size
(*
obj
, 
°¨toff
, 
idx
);

37 c⁄° 
xfs_buf_›s
 
xfs_©å3_db_buf_›s
;

	@db/attrset.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"©å£t.h
"

22 
	~"io.h
"

23 
	~"ouçut.h
"

24 
	~"ty≥.h
"

25 
	~"öô.h
"

26 
	~"Âröt.h
"

27 
	~"Áddr.h
"

28 
	~"fõld.h
"

29 
	~"öode.h
"

30 
	~"mÆloc.h
"

32 
©å_£t_f
(
¨gc
, **
¨gv
);

33 
©å_ªmove_f
(
¨gc
, **
¨gv
);

34 
©å£t_hñp
();

36 c⁄° 
cmdöfo_t
 
	g©å_£t_cmd
 =

37 { "©å_£t", "a£t", 
©å_£t_f
, 1, -1, 0,

38 
N_
("[-r|-s|-p|-u] [-n] [-R|-C] [-vÇ]Çame"),

39 
N_
("£àthê«medáâribuã o¿thêcuºíàöode"), 
©å£t_hñp
 };

40 c⁄° 
cmdöfo_t
 
	g©å_ªmove_cmd
 =

41 { "©å_ªmove", "¨emove", 
©å_ªmove_f
, 1, -1, 0,

42 
N_
("[-r|-s|-p|-u] [-n]Çame"),

43 
N_
("ªmovêthê«medáâribuã fromÅhêcuºíàöode"), 
©å£t_hñp
 };

46 
	$©å£t_hñp
()

48 
	`db¥ötf
(
	`_
(

64 
	}
}

67 
	$©å£t_öô
()

69 i‡(!
ex≥π_mode
)

72 
	`add_comm™d
(&
©å_£t_cmd
);

73 
	`add_comm™d
(&
©å_ªmove_cmd
);

74 
	}
}

77 
	$©å_£t_f
(

78 
¨gc
,

79 **
¨gv
)

81 
xfs_öode_t
 *
ù
 = 
NULL
;

82 *
«me
, *
vÆue
, *
•
;

83 
c
, 
vÆuñí
 = 0, 
Êags
 = 0;

85 i‡(
cur_typ
 =
NULL
) {

86 
	`db¥ötf
(
	`_
("no currentÅype\n"));

89 i‡(
cur_typ
->
ty≤m
 !
TYP_INODE
) {

90 
	`db¥ötf
(
	`_
("currentÅype isÇot inode\n"));

94 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "rusCRnv:")Ë!
EOF
) {

95 
c
) {

98 
Êags
 |
LIBXFS_ATTR_ROOT
;

99 
Êags
 &~
LIBXFS_ATTR_SECURE
;

102 
Êags
 &~(
LIBXFS_ATTR_ROOT
 | 
LIBXFS_ATTR_SECURE
);

105 
Êags
 |
LIBXFS_ATTR_SECURE
;

106 
Êags
 &~
LIBXFS_ATTR_ROOT
;

111 
Êags
 |
LIBXFS_ATTR_CREATE
;

114 
Êags
 |
LIBXFS_ATTR_REPLACE
;

118 
mp
->
m_Êags
 |
LIBXFS_MOUNT_COMPAT_ATTR
;

123 
vÆuñí
 = ()
	`°πﬁ
(
›èrg
, &
•
, 0);

124 i‡(*
•
 !'\0' || 
vÆuñí
 < 0 || valuelen > 64*1024) {

125 
	`db¥ötf
(
	`_
("badáâr_£àvÆuñí %s\n"), 
›èrg
);

131 
	`db¥ötf
(
	`_
("bad option foráttr_set command\n"));

136 i‡(
›töd
 !
¨gc
 - 1) {

137 
	`db¥ötf
(
	`_
("too few options foráttr_set (noÇame given)\n"));

141 
«me
 = 
¨gv
[
›töd
];

143 i‡(
vÆuñí
) {

144 
vÆue
 = (*)
	`memÆign
(
	`gë∑gesize
(), 
vÆuñí
);

145 i‡(!
vÆue
) {

146 
	`db¥ötf
(
	`_
("ˇ¬ŸáŒoˇã buf„∏(%d)\n"), 
vÆuñí
);

147 
out
;

149 
	`mem£t
(
vÆue
, 'v', 
vÆuñí
);

151 
vÆue
 = 
NULL
;

154 i‡(
	`libxfs_igë
(
mp
, 
NULL
, 
iocur_t›
->
öo
, 0, &
ù
)) {

155 
	`db¥ötf
(
	`_
("failedÅo iget inode %llu\n"),

156 ()
iocur_t›
->
öo
);

157 
out
;

160 i‡(
	`libxfs_©å_£t
(
ù
, (*)
«me
,

161 (*)
vÆue
, 
vÆuñí
, 
Êags
)) {

162 
	`db¥ötf
(
	`_
("failedÅo setáttr %s on inode %llu\n"),

163 
«me
, ()
iocur_t›
->
öo
);

164 
out
;

168 
	`£t_cur_öode
(
iocur_t›
->
öo
);

170 
out
:

171 
mp
->
m_Êags
 &~
LIBXFS_MOUNT_COMPAT_ATTR
;

172 i‡(
ù
)

173 
	`IRELE
(
ù
);

174 i‡(
vÆue
)

175 
	`‰ì
(
vÆue
);

177 
	}
}

180 
	$©å_ªmove_f
(

181 
¨gc
,

182 **
¨gv
)

184 
xfs_öode_t
 *
ù
 = 
NULL
;

185 *
«me
;

186 
c
, 
Êags
 = 0;

188 i‡(
cur_typ
 =
NULL
) {

189 
	`db¥ötf
(
	`_
("no currentÅype\n"));

192 i‡(
cur_typ
->
ty≤m
 !
TYP_INODE
) {

193 
	`db¥ötf
(
	`_
("currentÅype isÇot inode\n"));

197 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "ru¢")Ë!
EOF
) {

198 
c
) {

201 
Êags
 |
LIBXFS_ATTR_ROOT
;

202 
Êags
 &~
LIBXFS_ATTR_SECURE
;

205 
Êags
 &~(
LIBXFS_ATTR_ROOT
 | 
LIBXFS_ATTR_SECURE
);

208 
Êags
 |
LIBXFS_ATTR_SECURE
;

209 
Êags
 &~
LIBXFS_ATTR_ROOT
;

213 
mp
->
m_Êags
 |
LIBXFS_MOUNT_COMPAT_ATTR
;

217 
	`db¥ötf
(
	`_
("bad option foráttr_remove command\n"));

222 i‡(
›töd
 !
¨gc
 - 1) {

223 
	`db¥ötf
(
	`_
("too few options foráttr_remove (noÇame given)\n"));

227 
«me
 = 
¨gv
[
›töd
];

229 i‡(
	`libxfs_igë
(
mp
, 
NULL
, 
iocur_t›
->
öo
, 0, &
ù
)) {

230 
	`db¥ötf
(
	`_
("failedÅo iget inode %llu\n"),

231 ()
iocur_t›
->
öo
);

232 
out
;

235 i‡(
	`libxfs_©å_ªmove
(
ù
, (*)
«me
, 
Êags
)) {

236 
	`db¥ötf
(
	`_
("failedÅoÑemoveáttr %s from inode %llu\n"),

237 
«me
, ()
iocur_t›
->
öo
);

238 
out
;

242 
	`£t_cur_öode
(
iocur_t›
->
öo
);

244 
out
:

245 
mp
->
m_Êags
 &~
LIBXFS_MOUNT_COMPAT_ATTR
;

246 i‡(
ù
)

247 
	`IRELE
(
ù
);

249 
	}
}

	@db/attrset.h

19 
©å£t_öô
();

	@db/attrshort.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"bô.h
"

25 
	~"©åsh‹t.h
"

27 
©å_sf_íåy_«me_cou¡
(*
obj
, 
°¨toff
);

28 
©å_sf_íåy_vÆue_cou¡
(*
obj
, 
°¨toff
);

29 
©å_sf_íåy_vÆue_off£t
(*
obj
, 
°¨toff
, 
idx
);

30 
©å_sh‹tf‹m_li°_cou¡
(*
obj
, 
°¨toff
);

31 
©å_sh‹tf‹m_li°_off£t
(*
obj
, 
°¨toff
, 
idx
);

33 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_sh‹tf‹m_t
, f))

	)

34 c⁄° 
fõld_t
 
	g©å_sh‹tf‹m_Êds
[] = {

35 { "hdr", 
FLDT_ATTR_SF_HDR
, 
OI
(
OFF
(
hdr
)), 
C1
, 0, 
TYP_NONE
 },

36 { "li°", 
FLDT_ATTR_SF_ENTRY
, 
©å_sh‹tf‹m_li°_off£t
,

37 
©å_sh‹tf‹m_li°_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

38 { 
NULL
 }

41 
	#HOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_sf_hdr_t
, f))

	)

42 c⁄° 
fõld_t
 
	g©å_sf_hdr_Êds
[] = {

43 { "tŸsize", 
FLDT_UINT16D
, 
OI
(
HOFF
(
tŸsize
)), 
C1
, 0, 
TYP_NONE
 },

44 { "cou¡", 
FLDT_UINT8D
, 
OI
(
HOFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

45 { 
NULL
 }

48 
	#EOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_©å_sf_íåy_t
, f))

	)

49 c⁄° 
fõld_t
 
	g©å_sf_íåy_Êds
[] = {

50 { "«mñí", 
FLDT_UINT8D
, 
OI
(
EOFF
(
«mñí
)), 
C1
, 0, 
TYP_NONE
 },

51 { "vÆuñí", 
FLDT_UINT8D
, 
OI
(
EOFF
(
vÆuñí
)), 
C1
, 0, 
TYP_NONE
 },

52 { "Êags", 
FLDT_UINT8X
, 
OI
(
EOFF
(
Êags
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

53 { "roŸ", 
FLDT_UINT1
,

54 
OI
(
EOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_ROOT_BIT
 - 1), 
C1
, 0,

55 
TYP_NONE
 },

56 { "£cuª", 
FLDT_UINT1
,

57 
OI
(
EOFF
(
Êags
Ë+ 
bôsz
(
__uöt8_t
Ë- 
XFS_ATTR_SECURE_BIT
 - 1), 
C1
, 0,

58 
TYP_NONE
 },

59 { "«me", 
FLDT_CHARNS
, 
OI
(
EOFF
(
«mevÆ
)), 
©å_sf_íåy_«me_cou¡
,

60 
FLD_COUNT
, 
TYP_NONE
 },

61 { "vÆue", 
FLDT_CHARNS
, 
©å_sf_íåy_vÆue_off£t
,

62 
©å_sf_íåy_vÆue_cou¡
, 
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

63 { 
NULL
 }

67 
	$©å_sf_íåy_«me_cou¡
(

68 *
obj
,

69 
°¨toff
)

71 
xfs_©å_sf_íåy_t
 *
e
;

73 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

74 
e
 = (
xfs_©å_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

75  
e
->
«mñí
;

76 
	}
}

79 
	$©å_sf_íåy_size
(

80 *
obj
,

81 
°¨toff
,

82 
idx
)

84 
xfs_©å_sf_íåy_t
 *
e
;

85 
i
;

86 
xfs_©å_sh‹tf‹m_t
 *
sf
;

88 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

89 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

90 
e
 = &
sf
->
li°
[0];

91 
i
 = 0; i < 
idx
; i++)

92 
e
 = 
	`XFS_ATTR_SF_NEXTENTRY
(e);

93  
	`bôize
(()
	`XFS_ATTR_SF_ENTSIZE
(
e
));

94 
	}
}

97 
	$©å_sf_íåy_vÆue_cou¡
(

98 *
obj
,

99 
°¨toff
)

101 
xfs_©å_sf_íåy_t
 *
e
;

103 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

104 
e
 = (
xfs_©å_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

105  
e
->
vÆuñí
;

106 
	}
}

110 
	$©å_sf_íåy_vÆue_off£t
(

111 *
obj
,

112 
°¨toff
,

113 
idx
)

115 
xfs_©å_sf_íåy_t
 *
e
;

117 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

118 
	`ASSERT
(
idx
 == 0);

119 
e
 = (
xfs_©å_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

120  
	`bôize
(()((*)&
e
->
«mevÆ
[e->
«mñí
] - (*)e));

121 
	}
}

124 
	$©å_sh‹tf‹m_li°_cou¡
(

125 *
obj
,

126 
°¨toff
)

128 
xfs_©å_sh‹tf‹m_t
 *
sf
;

130 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

131 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

132  
sf
->
hdr
.
cou¡
;

133 
	}
}

136 
	$©å_sh‹tf‹m_li°_off£t
(

137 *
obj
,

138 
°¨toff
,

139 
idx
)

141 
xfs_©å_sf_íåy_t
 *
e
;

142 
i
;

143 
xfs_©å_sh‹tf‹m_t
 *
sf
;

145 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

146 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

147 
e
 = &
sf
->
li°
[0];

148 
i
 = 0; i < 
idx
; i++)

149 
e
 = 
	`XFS_ATTR_SF_NEXTENTRY
(e);

150  
	`bôize
(()((*)
e
 - (*)
sf
));

151 
	}
}

155 
	$©åsh‹t_size
(

156 *
obj
,

157 
°¨toff
,

158 
idx
)

160 
xfs_©å_sf_íåy_t
 *
e
;

161 
i
;

162 
xfs_©å_sh‹tf‹m_t
 *
sf
;

164 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

165 
	`ASSERT
(
idx
 == 0);

166 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

167 
e
 = &
sf
->
li°
[0];

168 
i
 = 0; i < 
sf
->
hdr
.
cou¡
; i++)

169 
e
 = 
	`XFS_ATTR_SF_NEXTENTRY
(e);

170  
	`bôize
(()((*)
e
 - (*)
sf
));

171 
	}
}

	@db/attrshort.h

19 c⁄° 
fõld_t
 
©å_sf_íåy_Êds
[];

20 c⁄° 
fõld_t
 
©å_sf_hdr_Êds
[];

21 c⁄° 
fõld_t
 
©å_sh‹tf‹m_Êds
[];

22 c⁄° 
fõld_t
 
©åsh‹t_hÊd
[];

24 
©å_sf_íåy_size
(*
obj
, 
°¨toff
, 
idx
);

25 
©åsh‹t_size
(*
obj
, 
°¨toff
, 
idx
);

	@db/bit.c

19 
	~"libxfs.h
"

20 
	~"bô.h
"

22 #unde‡
£tbô


24 
gëbô
(*
±r
, 
bô
);

25 
£tbô
(*
±r
, 
bô
, 
vÆ
);

28 
	$gëbô
(

29 *
±r
,

30 
bô
)

32 
mask
;

33 
shi·
;

35 
±r
 +
	`byãize
(
bô
);

36 
bô
 = 
	`bôoffs
(bit);

37 
shi·
 = 7 - 
bô
;

38 
mask
 = 1 << 
shi·
;

39  (*
±r
 & 
mask
Ë>> 
shi·
;

40 
	}
}

43 
	$£tbô
(

44 *
±r
,

45 
bô
,

46 
vÆ
)

48 
mask
;

49 
shi·
;

51 
±r
 +
	`byãize
(
bô
);

52 
bô
 = 
	`bôoffs
(bit);

53 
shi·
 = 7 - 
bô
;

54 
mask
 = (1 << 
shi·
);

55 i‡(
vÆ
) {

56 *
±r
 |
mask
;

58 
mask
 = ~mask;

59 *
±r
 &
mask
;

61 
	}
}

63 
__öt64_t


64 
	$gëbôvÆ
(

65 *
obj
,

66 
bôoff
,

67 
nbôs
,

68 
Êags
)

70 
bô
;

71 
i
;

72 *
p
;

73 
__öt64_t
 
rvÆ
;

74 
sig√xt
;

75 
z1
, 
z2
, 
z3
, 
z4
;

77 
	`ASSERT
(
nbôs
<=64);

79 
p
 = (*)
obj
 + 
	`byãize
(
bôoff
);

80 
bô
 = 
	`bôoffs
(
bôoff
);

81 
sig√xt
 = (
Êags
 & 
BVSIGNED
) != 0;

82 
z4
 = ((
öçå_t
)
p
 & 0xfË=0 && 
bô
 == 0;

83 i‡(
nbôs
 =64 && 
z4
)

84  
	`be64_to_˝u
(*(
__be64
 *)
p
);

85 
z3
 = ((
öçå_t
)
p
 & 0x7Ë=0 && 
bô
 == 0;

86 i‡(
nbôs
 =32 && 
z3
) {

87 i‡(
sig√xt
)

88  (
__s32
)
	`be32_to_˝u
(*(
__be32
 *)
p
);

90  (
__u32
)
	`be32_to_˝u
(*(
__be32
 *)
p
);

92 
z2
 = ((
öçå_t
)
p
 & 0x3Ë=0 && 
bô
 == 0;

93 i‡(
nbôs
 =16 && 
z2
) {

94 i‡(
sig√xt
)

95  (
__s16
)
	`be16_to_˝u
(*(
__be16
 *)
p
);

97  (
__u16
)
	`be16_to_˝u
(*(
__be16
 *)
p
);

99 
z1
 = ((
öçå_t
)
p
 & 0x1Ë=0 && 
bô
 == 0;

100 i‡(
nbôs
 =8 && 
z1
) {

101 i‡(
sig√xt
)

102  *(
__s8
 *)
p
;

104  *(
__u8
 *)
p
;

108 
i
 = 0, 
rvÆ
 = 0LL; i < 
nbôs
; i++) {

109 i‡(
	`gëbô
(
p
, 
bô
 + 
i
)) {

117 #i‡
__BYTE_ORDER
 =
LITTLE_ENDIAN


118 i‡(
i
 =0 && 
sig√xt
 && 
nbôs
 < 64)

119 
rvÆ
 = -1LL << 
nbôs
;

120 
rvÆ
 |1LL << (
nbôs
 - 
i
 - 1);

122 i‡((
i
 =(
nbôs
 - 1)Ë&& 
sig√xt
 &&Çbits < 64)

123 
rvÆ
 |(-1LL << 
nbôs
);

124 
rvÆ
 |1LL << (
nbôs
 - 
i
 - 1);

128  
rvÆ
;

129 
	}
}

153 
	$£tbôvÆ
(

154 *
obuf
,

155 
bôoff
,

156 
nbôs
,

157 *
ibuf
)

159 *
ö
 = 
ibuf
;

160 *
out
 = 
obuf
;

161 
bô
;

163 i‡(
bôoff
 % 
NBBY
 || 
nbôs
 % NBBY) {

164 
bô
 = 0; bô < 
nbôs
; bit++)

165 
	`£tbô
(
out
, 
bô
 + 
bôoff
, 
	`gëbô
(
ö
, bit));

167 
	`mem˝y
(
out
 + 
	`byãize
(
bôoff
), 
ö
, byãize(
nbôs
));

168 
	}
}

	@db/bit.h

19 
	#bôize
(
s
Ë((sË* 
NBBY
)

	)

20 
	#bôsz
(
t
Ë
	`bôize
(—))

	)

21 
	#bôszof
(
x
,
y
Ë
	`bôize
(
	`szof
(x,y))

	)

22 
	#byãize
(
s
Ë((sË/ 
NBBY
)

	)

23 
	#bôoffs
(
s
Ë((sË% 
NBBY
)

	)

25 
	#BVUNSIGNED
 0

	)

26 
	#BVSIGNED
 1

	)

28 
__öt64_t
 
gëbôvÆ
(*
obj
, 
bôoff
, 
nbôs
, 
Êags
);

29 
£tbôvÆ
(*
obuf
, 
bôoff
, 
nbôs
, *
ibuf
);

	@db/block.c

19 
	~"libxfs.h
"

20 
	~"block.h
"

21 
	~"bm≠.h
"

22 
	~"comm™d.h
"

23 
	~"ty≥.h
"

24 
	~"Áddr.h
"

25 
	~"Âröt.h
"

26 
	~"fõld.h
"

27 
	~"öode.h
"

28 
	~"io.h
"

29 
	~"ouçut.h
"

30 
	~"öô.h
"

32 
ablock_f
(
¨gc
, **
¨gv
);

33 
ablock_hñp
();

34 
daddr_f
(
¨gc
, **
¨gv
);

35 
daddr_hñp
();

36 
dblock_f
(
¨gc
, **
¨gv
);

37 
dblock_hñp
();

38 
fsblock_f
(
¨gc
, **
¨gv
);

39 
fsblock_hñp
();

40 
¥öt_øwd©a
(*
d©a
, 
Àn
);

42 c⁄° 
cmdöfo_t
 
	gablock_cmd
 =

43 { "ablock", 
NULL
, 
ablock_f
, 1, 1, 1, 
N_
("filoff"),

44 
N_
("£àaddªs†tÿfûêoff£à◊â∏f‹k)"), 
ablock_hñp
 };

45 c⁄° 
cmdöfo_t
 
	gdaddr_cmd
 =

46 { "daddr", 
NULL
, 
daddr_f
, 0, 1, 1, 
N_
("[d]"),

47 
N_
("£àaddªs†tÿdadd∏vÆue"), 
daddr_hñp
 };

48 c⁄° 
cmdöfo_t
 
	gdblock_cmd
 =

49 { "dblock", 
NULL
, 
dblock_f
, 1, 1, 1, 
N_
("filoff"),

50 
N_
("£àaddªs†tÿfûêoff£à(d©®f‹k)"), 
dblock_hñp
 };

51 c⁄° 
cmdöfo_t
 
	gfsblock_cmd
 =

52 { "fsblock", "fsb", 
fsblock_f
, 0, 1, 1, 
N_
("[fsb]"),

53 
N_
("£àaddªs†tÿfsblock vÆue"), 
fsblock_hñp
 };

56 
	$ablock_hñp
()

58 
	`db¥ötf
(
	`_
(

65 
	}
}

69 
	$ablock_f
(

70 
¨gc
,

71 **
¨gv
)

73 
bm≠_ext_t
 
bm
;

74 
xfs_fûeoff_t
 
bno
;

75 
xfs_fsblock_t
 
dfsbno
;

76 
havóâr
;

77 
√x
;

78 *
p
;

80 
bno
 = (
xfs_fûeoff_t
)
	`°πouŒ
(
¨gv
[1], &
p
, 0);

81 i‡(*
p
 != '\0') {

82 
	`db¥ötf
(
	`_
("bad blockÇumbî %s\n"), 
¨gv
[1]);

85 
	`push_cur
();

86 
	`£t_cur_öode
(
iocur_t›
->
öo
);

87 
havóâr
 = 
	`XFS_DFORK_Q
((
xfs_döode_t
 *)
iocur_t›
->
d©a
);

88 
	`p›_cur
();

89 i‡(!
havóâr
) {

90 
	`db¥ötf
(
	`_
("noáttribute data for file\n"));

93 
√x
 = 1;

94 
	`bm≠
(
bno
, 1, 
XFS_ATTR_FORK
, &
√x
, &
bm
);

95 i‡(
√x
 == 0) {

96 
	`db¥ötf
(
	`_
("fileáttr block is unmapped\n"));

99 
dfsbno
 = 
bm
.
°¨tblock
 + (
bno
 - bm.
°¨toff
);

100 
	`ASSERT
(
ty±ab
[
TYP_ATTR
].
ty≤m
 == TYP_ATTR);

101 
	`£t_cur
(&
ty±ab
[
TYP_ATTR
], (
__öt64_t
)
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
),

102 
blkbb
, 
DB_RING_ADD
, 
NULL
);

104 
	}
}

107 
	$block_öô
()

109 
	`add_comm™d
(&
ablock_cmd
);

110 
	`add_comm™d
(&
daddr_cmd
);

111 
	`add_comm™d
(&
dblock_cmd
);

112 
	`add_comm™d
(&
fsblock_cmd
);

113 
	}
}

116 
	$daddr_hñp
()

118 
	`db¥ötf
(
	`_
(

124 
	}
}

127 
	$daddr_f
(

128 
¨gc
,

129 **
¨gv
)

131 
__öt64_t
 
d
;

132 *
p
;

134 i‡(
¨gc
 == 1) {

135 
	`db¥ötf
(
	`_
("cuºíàdadd∏i†%Œd\n"), 
iocur_t›
->
off
 >> 
BBSHIFT
);

138 
d
 = (
__öt64_t
)
	`°πouŒ
(
¨gv
[1], &
p
, 0);

139 i‡(*
p
 != '\0' ||

140 
d
 >
mp
->
m_sb
.
sb_dblocks
 << (mp->m_sb.
sb_blocklog
 - 
BBSHIFT
)) {

141 
	`db¥ötf
(
	`_
("bad dadd∏%s\n"), 
¨gv
[1]);

144 
	`ASSERT
(
ty±ab
[
TYP_DATA
].
ty≤m
 == TYP_DATA);

145 
	`£t_cur
(&
ty±ab
[
TYP_DATA
], 
d
, 1, 
DB_RING_ADD
, 
NULL
);

147 
	}
}

150 
	$dblock_hñp
()

152 
	`db¥ötf
(
	`_
(

159 
	}
}

162 
	$dblock_f
(

163 
¨gc
,

164 **
¨gv
)

166 
bbm≠_t
 
bbm≠
;

167 
bm≠_ext_t
 *
bmp
;

168 
xfs_fûeoff_t
 
bno
;

169 
xfs_fsblock_t
 
dfsbno
;

170 
nb
;

171 
√x
;

172 *
p
;

173 
ty≤m_t
 
ty≥
;

175 
bno
 = (
xfs_fûeoff_t
)
	`°πouŒ
(
¨gv
[1], &
p
, 0);

176 i‡(*
p
 != '\0') {

177 
	`db¥ötf
(
	`_
("bad blockÇumbî %s\n"), 
¨gv
[1]);

180 
	`push_cur
();

181 
	`£t_cur_öode
(
iocur_t›
->
öo
);

182 
ty≥
 = 
	`öode_√xt_ty≥
();

183 
	`p›_cur
();

184 i‡(
ty≥
 =
TYP_NONE
) {

185 
	`db¥ötf
(
	`_
("noÅype for file data\n"));

188 
√x
 = 
nb
 = 
ty≥
 =
TYP_DIR2
 ? 
mp
->
m_dú_geo
->
fsbcou¡
 : 1;

189 
bmp
 = 
	`mÆloc
(
nb
 * (*bmp));

190 
	`bm≠
(
bno
, 
nb
, 
XFS_DATA_FORK
, &
√x
, 
bmp
);

191 i‡(
√x
 == 0) {

192 
	`db¥ötf
(
	`_
("file data block is unmapped\n"));

193 
	`‰ì
(
bmp
);

196 
dfsbno
 = 
bmp
->
°¨tblock
 + (
bno
 - bmp->
°¨toff
);

197 
	`ASSERT
(
ty±ab
[
ty≥
].
ty≤m
 ==Åype);

198 i‡(
√x
 > 1)

199 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

200 
	`£t_cur
(&
ty±ab
[
ty≥
], (
__öt64_t
)
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
),

201 
nb
 * 
blkbb
, 
DB_RING_ADD
, 
√x
 > 1 ? &
bbm≠
 : 
NULL
);

202 
	`‰ì
(
bmp
);

204 
	}
}

207 
	$fsblock_hñp
()

209 
	`db¥ötf
(
	`_
(

216 
	}
}

219 
	$fsblock_f
(

220 
¨gc
,

221 **
¨gv
)

223 
xfs_agblock_t
 
agbno
;

224 
xfs_agnumbî_t
 
agno
;

225 
xfs_fsblock_t
 
d
;

226 *
p
;

228 i‡(
¨gc
 == 1) {

229 
	`db¥ötf
(
	`_
("current fsblock is %lld\n"),

230 
	`XFS_DADDR_TO_FSB
(
mp
, 
iocur_t›
->
off
 >> 
BBSHIFT
));

233 
d
 = 
	`°πouŒ
(
¨gv
[1], &
p
, 0);

234 i‡(*
p
 != '\0') {

235 
	`db¥ötf
(
	`_
("bad fsblock %s\n"), 
¨gv
[1]);

238 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
d
);

239 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
d
);

240 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 || 
agbno
 >mp->m_sb.
sb_agblocks
) {

241 
	`db¥ötf
(
	`_
("bad fsblock %s\n"), 
¨gv
[1]);

244 
	`ASSERT
(
ty±ab
[
TYP_DATA
].
ty≤m
 == TYP_DATA);

245 
	`£t_cur
(&
ty±ab
[
TYP_DATA
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

246 
blkbb
, 
DB_RING_ADD
, 
NULL
);

248 
	}
}

251 
	$¥öt_block
(

252 c⁄° 
fõld_t
 *
fõlds
,

253 
¨gc
,

254 **
¨gv
)

256 
	`¥öt_øwd©a
(
iocur_t›
->
d©a
, iocur_t›->
Àn
);

257 
	}
}

260 
	$¥öt_øwd©a
(

261 *
d©a
,

262 
Àn
)

264 
i
;

265 
j
;

266 
œ°addr
;

267 
offch¨s
;

268 *
p
;

270 
œ°addr
 = (
Àn
 - 1) & ~(32 - 1);

271 i‡(
œ°addr
 < 0x10)

272 
offch¨s
 = 1;

273 i‡(
œ°addr
 < 0x100)

274 
offch¨s
 = 2;

275 i‡(
œ°addr
 < 0x1000)

276 
offch¨s
 = 3;

278 
offch¨s
 = 4;

279 
i
 = 0, 
p
 = 
d©a
; i < 
Àn
; i += 32) {

280 
	`db¥ötf
("%-0*.*x:", 
offch¨s
, offch¨s, 
i
);

281 
j
 = 0; j < 32 && 
i
 + j < 
Àn
; j++, 
p
++) {

282 i‡((
j
 & 3) == 0)

283 
	`db¥ötf
(" ");

284 
	`db¥ötf
("%02x", *
p
);

286 
	`db¥ötf
("\n");

288 
	}
}

	@db/block.h

19 
	gfõld
;

21 
block_öô
();

22 
¥öt_block
(c⁄° 
fõld
 *
fõlds
, 
¨gc
, **
¨gv
);

	@db/bmap.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Âröt.h
"

23 
	~"Áddr.h
"

24 
	~"fõld.h
"

25 
	~"bm≠.h
"

26 
	~"io.h
"

27 
	~"öode.h
"

28 
	~"ouçut.h
"

29 
	~"öô.h
"

31 
bm≠_f
(
¨gc
, **
¨gv
);

32 
bm≠_⁄e_exã¡
(
xfs_bmbt_ªc_t
 *
ï
,

33 
xfs_fûeoff_t
 *
ofÂ
, xfs_fûeoff_à
eoff
,

34 *
idxp
, 
bm≠_ext_t
 *
bï
);

35 
xfs_fsblock_t
 
£À˘_chûd
(
xfs_fûeoff_t
 
off
, 
xfs_bmbt_key_t
 *
kp
,

36 
xfs_bmbt_±r_t
 *
µ
, 
ƒecs
);

38 c⁄° 
cmdöfo_t
 
	gbm≠_cmd
 =

39 { "bm≠", 
NULL
, 
bm≠_f
, 0, 3, 0, 
N_
("[-ad] [block [len]]"),

40 
N_
("show block m≠ f‹ cuºíàfûe"), 
NULL
 };

43 
	$bm≠
(

44 
xfs_fûeoff_t
 
off£t
,

45 
xfs_fûblks_t
 
Àn
,

46 
whichf‹k
,

47 *
√xp
,

48 
bm≠_ext_t
 *
bï
)

50 
xfs_båì_block
 *
block
;

51 
xfs_fsblock_t
 
bno
;

52 
xfs_fûeoff_t
 
curoff£t
;

53 
xfs_döode_t
 *
dù
;

54 
xfs_fûeoff_t
 
eoff£t
;

55 
xfs_bmbt_ªc_t
 *
ï
;

56 
xfs_döode_fmt_t
 
fmt
;

57 
fsize
;

58 
xfs_bmbt_key_t
 *
kp
;

59 
n
;

60 
√x
;

61 
xfs_fsblock_t
 
√xtbno
;

62 
√xã¡s
;

63 
xfs_bmbt_±r_t
 *
µ
;

64 
xfs_bmdr_block_t
 *
rblock
;

65 
ty≤m_t
 
typ
;

66 
xfs_bmbt_ªc_t
 *
xp
;

68 
	`push_cur
();

69 
	`£t_cur_öode
(
iocur_t›
->
öo
);

70 
√x
 = *
√xp
;

71 *
√xp
 = 0;

72 
	`ASSERT
(
√x
 > 0);

73 
dù
 = 
iocur_t›
->
d©a
;

74 
n
 = 0;

75 
eoff£t
 = 
off£t
 + 
Àn
 - 1;

76 
curoff£t
 = 
off£t
;

77 
fmt
 = (
xfs_döode_fmt_t
)
	`XFS_DFORK_FORMAT
(
dù
, 
whichf‹k
);

78 
typ
 = 
whichf‹k
 =
XFS_DATA_FORK
 ? 
TYP_BMAPBTD
 : 
TYP_BMAPBTA
;

79 
	`ASSERT
(
ty±ab
[
typ
].
ty≤m
 ==Åyp);

80 
	`ASSERT
(
fmt
 =
XFS_DINODE_FMT_LOCAL
 || fmà=
XFS_DINODE_FMT_EXTENTS
 ||

81 
fmt
 =
XFS_DINODE_FMT_BTREE
);

82 i‡(
fmt
 =
XFS_DINODE_FMT_EXTENTS
) {

83 
√xã¡s
 = 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
);

84 
xp
 = (
xfs_bmbt_ªc_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

85 
ï
 = 
xp
;É∞< &xp[
√xã¡s
] && 
n
 < 
√x
;Ép++) {

86 i‡(!
	`bm≠_⁄e_exã¡
(
ï
, &
curoff£t
, 
eoff£t
, &
n
, 
bï
))

89 } i‡(
fmt
 =
XFS_DINODE_FMT_BTREE
) {

90 
	`push_cur
();

91 
rblock
 = (
xfs_bmdr_block_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

92 
fsize
 = 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
);

93 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
rblock
, 1, 
	`libxfs_bmdr_maxªcs
(
fsize
, 0));

94 
kp
 = 
	`XFS_BMDR_KEY_ADDR
(
rblock
, 1);

95 
bno
 = 
	`£À˘_chûd
(
curoff£t
, 
kp
, 
µ
,

96 
	`be16_to_˝u
(
rblock
->
bb_numªcs
));

98 
	`£t_cur
(&
ty±ab
[
typ
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
),

99 
blkbb
, 
DB_RING_IGN
, 
NULL
);

100 
block
 = (
xfs_båì_block
 *)
iocur_t›
->
d©a
;

101 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
) == 0)

103 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1,

104 
	`libxfs_bmbt_maxªcs
(
mp
, mp->
m_sb
.
sb_blocksize
, 0));

105 
kp
 = 
	`XFS_BMBT_KEY_ADDR
(
mp
, 
block
, 1);

106 
bno
 = 
	`£À˘_chûd
(
curoff£t
, 
kp
, 
µ
,

107 
	`be16_to_˝u
(
block
->
bb_numªcs
));

110 
√xtbno
 = 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_rightsib
);

111 
√xã¡s
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

112 
xp
 = (
xfs_bmbt_ªc_t
 *)

113 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1);

114 
ï
 = 
xp
;É∞< &xp[
√xã¡s
] && 
n
 < 
√x
;Ép++) {

115 i‡(!
	`bm≠_⁄e_exã¡
(
ï
, &
curoff£t
, 
eoff£t
,

116 &
n
, 
bï
)) {

117 
√xtbno
 = 
NULLFSBLOCK
;

121 
bno
 = 
√xtbno
;

122 i‡(
bno
 =
NULLFSBLOCK
)

124 
	`£t_cur
(&
ty±ab
[
typ
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
),

125 
blkbb
, 
DB_RING_IGN
, 
NULL
);

126 
block
 = (
xfs_båì_block
 *)
iocur_t›
->
d©a
;

128 
	`p›_cur
();

130 
	`p›_cur
();

131 *
√xp
 = 
n
;

132 
	}
}

135 
	$bm≠_f
(

136 
¨gc
,

137 **
¨gv
)

139 
af‹k
 = 0;

140 
bm≠_ext_t
 
be
;

141 
c
;

142 
xfs_fûeoff_t
 
co
, 
coßve
;

143 
df‹k
 = 0;

144 
xfs_döode_t
 *
dù
;

145 
xfs_fûeoff_t
 
eo
;

146 
xfs_fûblks_t
 
Àn
;

147 
√x
;

148 *
p
;

149 
whichf‹k
;

151 i‡(
iocur_t›
->
öo
 =
NULLFSINO
) {

152 
	`db¥ötf
(
	`_
("no current inode\n"));

155 
›töd
 = 0;

156 i‡(
¨gc
Ë(
c
 = 
	`gë›t
◊rgc, 
¨gv
, "ad")Ë!
EOF
) {

157 
c
) {

159 
af‹k
 = 1;

162 
df‹k
 = 1;

165 
	`db¥ötf
(
	`_
("bad option for bmap command\n"));

169 i‡(
af‹k
 + 
df‹k
 == 0) {

170 
	`push_cur
();

171 
	`£t_cur_öode
(
iocur_t›
->
öo
);

172 
dù
 = 
iocur_t›
->
d©a
;

173 i‡(
	`be32_to_˝u
(
dù
->
di_√xã¡s
))

174 
df‹k
 = 1;

175 i‡(
	`be16_to_˝u
(
dù
->
di_™exã¡s
))

176 
af‹k
 = 1;

177 
	`p›_cur
();

179 i‡(
›töd
 < 
¨gc
) {

180 
co
 = (
xfs_fûeoff_t
)
	`°πouŒ
(
¨gv
[
›töd
], &
p
, 0);

181 i‡(*
p
 != '\0') {

182 
	`db¥ötf
(
	`_
("bad blockÇumber for bmap %s\n"),

183 
¨gv
[
›töd
]);

186 
›töd
++;

187 i‡(
›töd
 < 
¨gc
) {

188 
Àn
 = (
xfs_fûblks_t
)
	`°πouŒ
(
¨gv
[
›töd
], &
p
, 0);

189 i‡(*
p
 != '\0') {

190 
	`db¥ötf
(
	`_
("badÜí f‹ bm≠ %s\n"), 
¨gv
[
›töd
]);

193 
eo
 = 
co
 + 
Àn
 - 1;

195 
eo
 = 
co
;

197 
co
 = 0;

198 
eo
 = -1;

200 
coßve
 = 
co
;

201 
whichf‹k
 = 
XFS_DATA_FORK
;

202 
whichf‹k
 <
XFS_ATTR_FORK
;

203 
whichf‹k
++) {

204 i‡(
whichf‹k
 =
XFS_DATA_FORK
 && !
df‹k
)

206 i‡(
whichf‹k
 =
XFS_ATTR_FORK
 && !
af‹k
)

209 
√x
 = 1;

210 
	`bm≠
(
co
, 
eo
 - cÿ+ 1, 
whichf‹k
, &
√x
, &
be
);

211 i‡(
√x
 == 0)

213 
	`db¥ötf
(
	`_
("%s offset %lld startblock %llu (%u/%u) count "

215 
whichf‹k
 =
XFS_DATA_FORK
 ? 
	`_
("data") : _("attr"),

216 
be
.
°¨toff
, be.
°¨tblock
,

217 
	`XFS_FSB_TO_AGNO
(
mp
, 
be
.
°¨tblock
),

218 
	`XFS_FSB_TO_AGBNO
(
mp
, 
be
.
°¨tblock
),

219 
be
.
blockcou¡
, be.
Êag
);

220 
co
 = 
be
.
°¨toff
 + be.
blockcou¡
;

222 
co
 = 
coßve
;

225 
	}
}

228 
	$bm≠_öô
()

230 
	`add_comm™d
(&
bm≠_cmd
);

231 
	}
}

234 
	$bm≠_⁄e_exã¡
(

235 
xfs_bmbt_ªc_t
 *
ï
,

236 
xfs_fûeoff_t
 *
ofÂ
,

237 
xfs_fûeoff_t
 
eoff
,

238 *
idxp
,

239 
bm≠_ext_t
 *
bï
)

241 
xfs_fûblks_t
 
c
;

242 
xfs_fûeoff_t
 
curoff£t
;

243 
f
;

244 
idx
;

245 
xfs_fûeoff_t
 
o
;

246 
xfs_fsblock_t
 
s
;

248 
	`c⁄vît_exã¡
(
ï
, &
o
, &
s
, &
c
, &
f
);

249 
curoff£t
 = *
ofÂ
;

250 
idx
 = *
idxp
;

251 i‡(
o
 + 
c
 <
curoff£t
)

253 i‡(
o
 > 
eoff
)

255 i‡(
o
 < 
curoff£t
) {

256 
c
 -
curoff£t
 - 
o
;

257 
s
 +
curoff£t
 - 
o
;

258 
o
 = 
curoff£t
;

260 i‡(
o
 + 
c
 - 1 > 
eoff
)

261 
c
 -(
o
 + c - 1Ë- 
eoff
;

262 
bï
[
idx
].
°¨toff
 = 
o
;

263 
bï
[
idx
].
°¨tblock
 = 
s
;

264 
bï
[
idx
].
blockcou¡
 = 
c
;

265 
bï
[
idx
].
Êag
 = 
f
;

266 *
idxp
 = 
idx
 + 1;

267 *
ofÂ
 = 
o
 + 
c
;

269 
	}
}

272 
	$c⁄vît_exã¡
(

273 
xfs_bmbt_ªc_t
 *
Ω
,

274 
xfs_fûeoff_t
 *
›
,

275 
xfs_fsblock_t
 *
•
,

276 
xfs_fûblks_t
 *
˝
,

277 *
Â
)

279 
xfs_bmbt_úec
 
úec
;

281 
	`libxfs_bmbt_disk_gë_Æl
(
Ω
, &
úec
);

282 *
Â
 = 
úec
.
br_°©e
 =
XFS_EXT_UNWRITTEN
;

283 *
›
 = 
úec
.
br_°¨toff
;

284 *
•
 = 
úec
.
br_°¨tblock
;

285 *
˝
 = 
úec
.
br_blockcou¡
;

286 
	}
}

289 
	$make_bbm≠
(

290 
bbm≠_t
 *
bbm≠
,

291 
√x
,

292 
bm≠_ext_t
 *
bmp
)

294 
i
;

296 
i
 = 0; i < 
√x
; i++) {

297 
bbm≠
->
b
[
i
].
bm_bn
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
bmp
[i].
°¨tblock
);

298 
bbm≠
->
b
[
i
].
bm_Àn
 = 
	`XFS_FSB_TO_BB
(
mp
, 
bmp
[i].
blockcou¡
);

300 
bbm≠
->
nm≠s
 = 
√x
;

301 
	}
}

303 
xfs_fsblock_t


304 
	$£À˘_chûd
(

305 
xfs_fûeoff_t
 
off
,

306 
xfs_bmbt_key_t
 *
kp
,

307 
xfs_bmbt_±r_t
 *
µ
,

308 
ƒecs
)

310 
i
;

312 
i
 = 0; i < 
ƒecs
; i++) {

313 i‡(
	`be64_to_˝u
(
kp
[
i
].
br_°¨toff
Ë=
off
)

314  
	`be64_to_˝u
(
µ
[
i
]);

315 i‡(
	`be64_to_˝u
(
kp
[
i
].
br_°¨toff
Ë> 
off
) {

316 i‡(
i
 == 0)

317  
	`be64_to_˝u
(
µ
[
i
]);

319  
	`be64_to_˝u
(
µ
[
i
 - 1]);

322  
	`be64_to_˝u
(
µ
[
ƒecs
 - 1]);

323 
	}
}

	@db/bmap.h

19 
	gbbm≠
;

20 
	gxfs_bmbt_ªc
;

22 
	sbm≠_ext
 {

23 
xfs_fûeoff_t
 
	m°¨toff
;

24 
xfs_fsblock_t
 
	m°¨tblock
;

25 
xfs_fûblks_t
 
	mblockcou¡
;

26 
	mÊag
;

27 } 
	tbm≠_ext_t
;

29 
bm≠
(
xfs_fûeoff_t
 
off£t
, 
xfs_fûblks_t
 
Àn
, 
whichf‹k
,

30 *
√xp
, 
bm≠_ext_t
 *
bï
);

31 
bm≠_öô
();

32 
c⁄vît_exã¡
(
xfs_bmbt_ªc
 *
Ω
, 
xfs_fûeoff_t
 *
›
,

33 
xfs_fsblock_t
 *
•
, 
xfs_fûblks_t
 *
˝
, *
Â
);

34 
make_bbm≠
(
bbm≠
 *bbm≠, 
√x
, 
bm≠_ext_t
 *
bmp
);

	@db/bmroot.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"bmroŸ.h
"

25 
	~"io.h
"

26 
	~"¥öt.h
"

27 
	~"bô.h
"

28 
	~"öô.h
"

30 
bmroŸa_key_cou¡
(*
obj
, 
°¨toff
);

31 
bmroŸa_key_off£t
(*
obj
, 
°¨toff
, 
idx
);

32 
bmroŸa_±r_cou¡
(*
obj
, 
°¨toff
);

33 
bmroŸa_±r_off£t
(*
obj
, 
°¨toff
, 
idx
);

34 
bmroŸd_key_cou¡
(*
obj
, 
°¨toff
);

35 
bmroŸd_key_off£t
(*
obj
, 
°¨toff
, 
idx
);

36 
bmroŸd_±r_cou¡
(*
obj
, 
°¨toff
);

37 
bmroŸd_±r_off£t
(*
obj
, 
°¨toff
, 
idx
);

39 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_bmdr_block_t
, 
bb_
 ## f))

	)

40 c⁄° 
fõld_t
 
	gbmroŸa_Êds
[] = {

41 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

42 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

43 { "keys", 
FLDT_BMROOTAKEY
, 
bmroŸa_key_off£t
, 
bmroŸa_key_cou¡
,

44 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

45 { "±rs", 
FLDT_BMROOTAPTR
, 
bmroŸa_±r_off£t
, 
bmroŸa_±r_cou¡
,

46 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTA
 },

47 { 
NULL
 }

49 c⁄° 
fõld_t
 
	gbmroŸd_Êds
[] = {

50 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

51 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

52 { "keys", 
FLDT_BMROOTDKEY
, 
bmroŸd_key_off£t
, 
bmroŸd_key_cou¡
,

53 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

54 { "±rs", 
FLDT_BMROOTDPTR
, 
bmroŸd_±r_off£t
, 
bmroŸd_±r_cou¡
,

55 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTD
 },

56 { 
NULL
 }

59 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_bmdr_key_t
, 
br_
 ## f))

	)

60 c⁄° 
fõld_t
 
	gbmroŸa_key_Êds
[] = {

61 { "°¨toff", 
FLDT_DFILOFFA
, 
OI
(
KOFF
(
°¨toff
)), 
C1
, 0, 
TYP_NONE
 },

62 { 
NULL
 }

64 c⁄° 
fõld_t
 
	gbmroŸd_key_Êds
[] = {

65 { "°¨toff", 
FLDT_DFILOFFD
, 
OI
(
KOFF
(
°¨toff
)), 
C1
, 0, 
TYP_NONE
 },

66 { 
NULL
 }

70 
	$bmroŸa_key_cou¡
(

71 *
obj
,

72 
°¨toff
)

74 
xfs_bmdr_block_t
 *
block
;

75 #ifde‡
DEBUG


76 
xfs_döode_t
 *
dù
 = 
obj
;

79 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

80 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

81 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

82 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
Ë&& (*)
block
 =
	`XFS_DFORK_APTR
(dip));

83 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

84  
	`be16_to_˝u
(
block
->
bb_numªcs
);

85 
	}
}

88 
	$bmroŸa_key_off£t
(

89 *
obj
,

90 
°¨toff
,

91 
idx
)

93 
xfs_bmdr_block_t
 *
block
;

94 #ifde‡
DEBUG


95 
xfs_döode_t
 *
dù
 = 
obj
;

97 
xfs_bmdr_key_t
 *
kp
;

99 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

100 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

101 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

102 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
Ë&& (*)
block
 =
	`XFS_DFORK_APTR
(dip));

103 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

104 
kp
 = 
	`XFS_BMDR_KEY_ADDR
(
block
, 
idx
);

105  
	`bôize
(()((*)
kp
 - (*)
block
));

106 
	}
}

109 
	$bmroŸa_±r_cou¡
(

110 *
obj
,

111 
°¨toff
)

113 
xfs_bmdr_block_t
 *
block
;

114 #ifde‡
DEBUG


115 
xfs_döode_t
 *
dù
 = 
obj
;

118 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

119 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

120 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

121 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
Ë&& (*)
block
 =
	`XFS_DFORK_APTR
(dip));

122 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

123  
	`be16_to_˝u
(
block
->
bb_numªcs
);

124 
	}
}

127 
	$bmroŸa_±r_off£t
(

128 *
obj
,

129 
°¨toff
,

130 
idx
)

132 
xfs_bmdr_block_t
 *
block
;

133 
xfs_döode_t
 *
dù
;

134 
xfs_bmdr_±r_t
 *
µ
;

136 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

137 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

138 
dù
 = 
obj
;

139 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

140 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
Ë&& (*)
block
 =
	`XFS_DFORK_APTR
(dip));

141 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

142 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
block
, 
idx
,

143 
	`libxfs_bmdr_maxªcs
(
	`XFS_DFORK_ASIZE
(
dù
, 
mp
), 0));

144  
	`bôize
(()((*)
µ
 - (*)
block
));

145 
	}
}

148 
	$bmroŸa_size
(

149 *
obj
,

150 
°¨toff
,

151 
idx
)

153 
xfs_döode_t
 *
dù
;

154 #ifde‡
DEBUG


155 
xfs_bmdr_block_t
 *
block
;

158 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

159 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

160 
	`ASSERT
(
idx
 == 0);

161 
dù
 = 
obj
;

162 #ifde‡
DEBUG


163 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

164 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
Ë&& (*)
block
 =
	`XFS_DFORK_APTR
(dip));

166  
	`bôize
(()
	`XFS_DFORK_ASIZE
(
dù
, 
mp
));

167 
	}
}

170 
	$bmroŸd_key_cou¡
(

171 *
obj
,

172 
°¨toff
)

174 
xfs_bmdr_block_t
 *
block
;

175 #ifde‡
DEBUG


176 
xfs_döode_t
 *
dù
 = 
obj
;

179 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

180 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

181 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

182 
	`ASSERT
((*)
block
 =
	`XFS_DFORK_DPTR
(
dù
));

183 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

184  
	`be16_to_˝u
(
block
->
bb_numªcs
);

185 
	}
}

188 
	$bmroŸd_key_off£t
(

189 *
obj
,

190 
°¨toff
,

191 
idx
)

193 
xfs_bmdr_block_t
 *
block
;

194 
xfs_bmdr_key_t
 *
kp
;

196 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

197 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

198 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

199 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

200 
kp
 = 
	`XFS_BMDR_KEY_ADDR
(
block
, 
idx
);

201  
	`bôize
(()((*)
kp
 - (*)
block
));

202 
	}
}

205 
	$bmroŸd_±r_cou¡
(

206 *
obj
,

207 
°¨toff
)

209 
xfs_bmdr_block_t
 *
block
;

210 #ifde‡
DEBUG


211 
xfs_döode_t
 *
dù
 = 
obj
;

214 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

215 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

216 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

217 
	`ASSERT
((*)
block
 =
	`XFS_DFORK_DPTR
(
dù
));

218 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

219  
	`be16_to_˝u
(
block
->
bb_numªcs
);

220 
	}
}

223 
	$bmroŸd_±r_off£t
(

224 *
obj
,

225 
°¨toff
,

226 
idx
)

228 
xfs_bmdr_block_t
 *
block
;

229 
xfs_bmdr_±r_t
 *
µ
;

230 
xfs_döode_t
 *
dù
;

232 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

233 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

234 
dù
 = 
obj
;

235 
block
 = (
xfs_bmdr_block_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

236 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

237 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
block
, 
idx
,

238 
	`libxfs_bmdr_maxªcs
(
	`XFS_DFORK_DSIZE
(
dù
, 
mp
), 0));

239  
	`bôize
(()((*)
µ
 - (*)
block
));

240 
	}
}

243 
	$bmroŸd_size
(

244 *
obj
,

245 
°¨toff
,

246 
idx
)

248 
xfs_döode_t
 *
dù
;

250 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

251 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

252 
	`ASSERT
(
idx
 == 0);

253 
dù
 = 
obj
;

254  
	`bôize
(()
	`XFS_DFORK_DSIZE
(
dù
, 
mp
));

255 
	}
}

	@db/bmroot.h

19 c⁄° 
fõld
 
bmroŸa_Êds
[];

20 c⁄° 
fõld
 
bmroŸa_key_Êds
[];

21 c⁄° 
fõld
 
bmroŸd_Êds
[];

22 c⁄° 
fõld
 
bmroŸd_key_Êds
[];

24 
bmroŸa_size
(*
obj
, 
°¨toff
, 
idx
);

25 
bmroŸd_size
(*
obj
, 
°¨toff
, 
idx
);

	@db/btblock.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"btblock.h
"

25 
	~"¥öt.h
"

26 
	~"bô.h
"

27 
	~"öô.h
"

32 
	sxfs_db_båì
 {

33 
uöt32_t
 
	mmagic
;

34 
size_t
 
	mblock_Àn
;

35 
size_t
 
	mkey_Àn
;

36 
size_t
 
	mªc_Àn
;

37 
size_t
 
	m±r_Àn
;

38 } 
	gbåìs
[] = {

39 { 
XFS_BMAP_MAGIC
,

40 
XFS_BTREE_LBLOCK_LEN
,

41 (
xfs_bmbt_key_t
),

42 (
xfs_bmbt_ªc_t
),

43 (
__be64
),

45 { 
XFS_ABTB_MAGIC
,

46 
XFS_BTREE_SBLOCK_LEN
,

47 (
xfs_Æloc_key_t
),

48 (
xfs_Æloc_ªc_t
),

49 (
__be32
),

51 { 
XFS_ABTC_MAGIC
,

52 
XFS_BTREE_SBLOCK_LEN
,

53 (
xfs_Æloc_key_t
),

54 (
xfs_Æloc_ªc_t
),

55 (
__be32
),

57 { 
XFS_IBT_MAGIC
,

58 
XFS_BTREE_SBLOCK_LEN
,

59 (
xfs_öobt_key_t
),

60 (
xfs_öobt_ªc_t
),

61 (
__be32
),

63 { 
XFS_FIBT_MAGIC
,

64 
XFS_BTREE_SBLOCK_LEN
,

65 (
xfs_öobt_key_t
),

66 (
xfs_öobt_ªc_t
),

67 (
__be32
),

69 { 
XFS_BMAP_CRC_MAGIC
,

70 
XFS_BTREE_LBLOCK_CRC_LEN
,

71 (
xfs_bmbt_key_t
),

72 (
xfs_bmbt_ªc_t
),

73 (
__be64
),

75 { 
XFS_ABTB_CRC_MAGIC
,

76 
XFS_BTREE_SBLOCK_CRC_LEN
,

77 (
xfs_Æloc_key_t
),

78 (
xfs_Æloc_ªc_t
),

79 (
__be32
),

81 { 
XFS_ABTC_CRC_MAGIC
,

82 
XFS_BTREE_SBLOCK_CRC_LEN
,

83 (
xfs_Æloc_key_t
),

84 (
xfs_Æloc_ªc_t
),

85 (
__be32
),

87 { 
XFS_IBT_CRC_MAGIC
,

88 
XFS_BTREE_SBLOCK_CRC_LEN
,

89 (
xfs_öobt_key_t
),

90 (
xfs_öobt_ªc_t
),

91 (
__be32
),

93 { 
XFS_FIBT_CRC_MAGIC
,

94 
XFS_BTREE_SBLOCK_CRC_LEN
,

95 (
xfs_öobt_key_t
),

96 (
xfs_öobt_ªc_t
),

97 (
__be32
),

99 { 
XFS_RMAP_CRC_MAGIC
,

100 
XFS_BTREE_SBLOCK_CRC_LEN
,

101 2 * (
xfs_rm≠_key
),

102 (
xfs_rm≠_ªc
),

103 (
__be32
),

105 { 
XFS_REFC_CRC_MAGIC
,

106 
XFS_BTREE_SBLOCK_CRC_LEN
,

107 (
xfs_ªfcou¡_key
),

108 (
xfs_ªfcou¡_ªc
),

109 (
__be32
),

121 
xfs_db_båì
 *

122 
	$block_to_bt
(

123 
xfs_båì_block
 *
bb
)

125 
xfs_db_båì
 *
bç
 = &
båìs
[0];

128 i‡(
	`be32_to_˝u
((
bb
)->
bb_magic
Ë=
bç
->
magic
)

129  
bç
;

130 
bç
++;

131 } 
bç
->
magic
 != 0);

133  
NULL
;

134 
	}
}

138 
	$btblock_maxªcs
(
xfs_db_båì
 *
bt
, 
blocksize
)

140 
blocksize
 -
bt
->
block_Àn
;

142  
blocksize
 / (
bt
->
key_Àn
 + bt->
±r_Àn
);

143 
	}
}

152 
	$btblock_key_cou¡
(

153 *
obj
,

154 
°¨toff
)

156 
xfs_båì_block
 *
block
 = 
obj
;

158 
	`ASSERT
(
°¨toff
 == 0);

160 i‡(
block
->
bb_Àvñ
 == 0)

162  
	`be16_to_˝u
(
block
->
bb_numªcs
);

163 
	}
}

169 
	$btblock_ªc_cou¡
(

170 *
obj
,

171 
°¨toff
)

173 
xfs_båì_block
 *
block
 = 
obj
;

175 
	`ASSERT
(
°¨toff
 == 0);

177 i‡(
block
->
bb_Àvñ
 != 0)

179  
	`be16_to_˝u
(
block
->
bb_numªcs
);

180 
	}
}

186 
	$btblock_key_off£t
(

187 *
obj
,

188 
°¨toff
,

189 
idx
)

191 
xfs_båì_block
 *
block
 = 
obj
;

192 
xfs_db_båì
 *
bt
 = 
	`block_to_bt
(
block
);

193 
off£t
;

195 
	`ASSERT
(
°¨toff
 == 0);

196 
	`ASSERT
(
block
->
bb_Àvñ
 != 0);

198 
off£t
 = 
bt
->
block_Àn
 + (
idx
 - 1Ë* bt->
key_Àn
;

199  
	`bôize
(
off£t
);

200 
	}
}

206 
	$btblock_±r_off£t
(

207 *
obj
,

208 
°¨toff
,

209 
idx
)

211 
xfs_båì_block
 *
block
 = 
obj
;

212 
xfs_db_båì
 *
bt
 = 
	`block_to_bt
(
block
);

213 
off£t
;

214 
maxªcs
;

216 
	`ASSERT
(
°¨toff
 == 0);

217 
	`ASSERT
(
block
->
bb_Àvñ
 != 0);

219 
maxªcs
 = 
	`btblock_maxªcs
(
bt
, 
mp
->
m_sb
.
sb_blocksize
);

220 
off£t
 = 
bt
->
block_Àn
 +

221 
maxªcs
 * 
bt
->
key_Àn
 +

222 (
idx
 - 1Ë* 
bt
->
±r_Àn
;

224  
	`bôize
(
off£t
);

225 
	}
}

231 
	$btblock_ªc_off£t
(

232 *
obj
,

233 
°¨toff
,

234 
idx
)

236 
xfs_båì_block
 *
block
 = 
obj
;

237 
xfs_db_båì
 *
bt
 = 
	`block_to_bt
(
block
);

238 
off£t
;

240 
	`ASSERT
(
°¨toff
 == 0);

241 
	`ASSERT
(
block
->
bb_Àvñ
 == 0);

243 
off£t
 = 
bt
->
block_Àn
 + (
idx
 - 1Ë* bt->
ªc_Àn
;

244  
	`bôize
(
off£t
);

245 
	}
}

251 
	$btblock_size
(

252 *
obj
,

253 
°¨toff
,

254 
idx
)

256  
	`bôize
(
mp
->
m_sb
.
sb_blocksize
);

257 
	}
}

264 c⁄° 
fõld_t
 
	gbm≠bè_hÊd
[] = {

265 { "", 
FLDT_BMAPBTA
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

266 { 
NULL
 }

268 c⁄° 
fõld_t
 
	gbm≠btd_hÊd
[] = {

269 { "", 
FLDT_BMAPBTD
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

270 { 
NULL
 }

273 c⁄° 
fõld_t
 
	gbm≠bè_¸c_hÊd
[] = {

274 { "", 
FLDT_BMAPBTA_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

275 { 
NULL
 }

277 c⁄° 
fõld_t
 
	gbm≠btd_¸c_hÊd
[] = {

278 { "", 
FLDT_BMAPBTD_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

279 { 
NULL
 }

282 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

283 c⁄° 
fõld_t
 
	gbm≠bè_Êds
[] = {

284 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

285 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

286 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

287 { "À·sib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_À·sib
)), 
C1
, 0, 
TYP_BMAPBTA
 },

288 { "rightsib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_rightsib
)), 
C1
, 0, 
TYP_BMAPBTA
 },

289 { "ªcs", 
FLDT_BMAPBTAREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

290 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

291 { "keys", 
FLDT_BMAPBTAKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

292 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

293 { "±rs", 
FLDT_BMAPBTAPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

294 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTA
 },

295 { 
NULL
 }

297 c⁄° 
fõld_t
 
	gbm≠btd_Êds
[] = {

298 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

299 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

300 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

301 { "À·sib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_À·sib
)), 
C1
, 0, 
TYP_BMAPBTD
 },

302 { "rightsib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_rightsib
)), 
C1
, 0, 
TYP_BMAPBTD
 },

303 { "ªcs", 
FLDT_BMAPBTDREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

304 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

305 { "keys", 
FLDT_BMAPBTDKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

306 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

307 { "±rs", 
FLDT_BMAPBTDPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

308 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTD
 },

309 { 
NULL
 }

312 c⁄° 
fõld_t
 
	gbm≠bè_¸c_Êds
[] = {

313 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

314 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

315 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

316 { "À·sib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_À·sib
)), 
C1
, 0, 
TYP_BMAPBTA
 },

317 { "rightsib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_rightsib
)), 
C1
, 0, 
TYP_BMAPBTA
 },

318 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_blkno
)), 
C1
, 0, 
TYP_BMAPBTD
 },

319 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
l
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

320 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
l
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

321 { "ow√r", 
FLDT_INO
, 
OI
(
OFF
(
u
.
l
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

322 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
l
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

323 { "ªcs", 
FLDT_BMAPBTAREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

324 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

325 { "keys", 
FLDT_BMAPBTAKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

326 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

327 { "±rs", 
FLDT_BMAPBTAPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

328 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTA
 },

329 { 
NULL
 }

331 c⁄° 
fõld_t
 
	gbm≠btd_¸c_Êds
[] = {

332 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

333 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

334 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

335 { "À·sib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_À·sib
)), 
C1
, 0, 
TYP_BMAPBTD
 },

336 { "rightsib", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_rightsib
)), 
C1
, 0, 
TYP_BMAPBTD
 },

337 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
l
.
bb_blkno
)), 
C1
, 0, 
TYP_BMAPBTD
 },

338 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
l
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

339 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
l
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

340 { "ow√r", 
FLDT_INO
, 
OI
(
OFF
(
u
.
l
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

341 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
l
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

342 { "ªcs", 
FLDT_BMAPBTDREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

343 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

344 { "keys", 
FLDT_BMAPBTDKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

345 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

346 { "±rs", 
FLDT_BMAPBTDPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

347 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BMAPBTD
 },

348 { 
NULL
 }

350 #unde‡
OFF


352 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_bmbt_key_t
, 
br_
 ## f))

	)

353 c⁄° 
fõld_t
 
	gbm≠bè_key_Êds
[] = {

354 { "°¨toff", 
FLDT_DFILOFFA
, 
OI
(
KOFF
(
°¨toff
)), 
C1
, 0, 
TYP_ATTR
 },

355 { 
NULL
 }

357 c⁄° 
fõld_t
 
	gbm≠btd_key_Êds
[] = {

358 { "°¨toff", 
FLDT_DFILOFFD
, 
OI
(
KOFF
(
°¨toff
)), 
C1
, 0, 
TYP_INODATA
 },

359 { 
NULL
 }

361 #unde‡
KOFF


363 
	#BMBT_EXNTFLAG_BITOFF
 0

	)

364 
	#BMBT_STARTOFF_BITOFF
 (
BMBT_EXNTFLAG_BITOFF
 + 
BMBT_EXNTFLAG_BITLEN
)

	)

365 
	#BMBT_STARTBLOCK_BITOFF
 (
BMBT_STARTOFF_BITOFF
 + 
BMBT_STARTOFF_BITLEN
)

	)

366 
	#BMBT_BLOCKCOUNT_BITOFF
 \

367 (
BMBT_STARTBLOCK_BITOFF
 + 
BMBT_STARTBLOCK_BITLEN
)

	)

369 c⁄° 
fõld_t
 
	gbm≠bè_ªc_Êds
[] = {

370 { "°¨toff", 
FLDT_CFILEOFFA
, 
OI
(
BMBT_STARTOFF_BITOFF
), 
C1
, 0,

371 
TYP_ATTR
 },

372 { "°¨tblock", 
FLDT_CFSBLOCK
, 
OI
(
BMBT_STARTBLOCK_BITOFF
), 
C1
, 0,

373 
TYP_ATTR
 },

374 { "blockcou¡", 
FLDT_CEXTLEN
, 
OI
(
BMBT_BLOCKCOUNT_BITOFF
), 
C1
, 0,

375 
TYP_NONE
 },

376 { "exã¡Êag", 
FLDT_CEXTFLG
, 
OI
(
BMBT_EXNTFLAG_BITOFF
), 
C1
, 0,

377 
TYP_NONE
 },

378 { 
NULL
 }

380 c⁄° 
fõld_t
 
	gbm≠btd_ªc_Êds
[] = {

381 { "°¨toff", 
FLDT_CFILEOFFD
, 
OI
(
BMBT_STARTOFF_BITOFF
), 
C1
, 0,

382 
TYP_INODATA
 },

383 { "°¨tblock", 
FLDT_CFSBLOCK
, 
OI
(
BMBT_STARTBLOCK_BITOFF
), 
C1
, 0,

384 
TYP_INODATA
 },

385 { "blockcou¡", 
FLDT_CEXTLEN
, 
OI
(
BMBT_BLOCKCOUNT_BITOFF
), 
C1
, 0,

386 
TYP_NONE
 },

387 { "exã¡Êag", 
FLDT_CEXTFLG
, 
OI
(
BMBT_EXNTFLAG_BITOFF
), 
C1
, 0,

388 
TYP_NONE
 },

389 { 
NULL
 }

397 c⁄° 
fõld_t
 
	göobt_hÊd
[] = {

398 { "", 
FLDT_INOBT
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

399 { 
NULL
 }

402 c⁄° 
fõld_t
 
	göobt_¸c_hÊd
[] = {

403 { "", 
FLDT_INOBT_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

404 { 
NULL
 }

407 c⁄° 
fõld_t
 
	göobt_•¸c_hÊd
[] = {

408 { "", 
FLDT_INOBT_SPCRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

409 { 
NULL
 }

412 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

413 c⁄° 
fõld_t
 
	göobt_Êds
[] = {

414 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

415 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

416 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

417 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_INOBT
 },

418 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_INOBT
 },

419 { "ªcs", 
FLDT_INOBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

420 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

421 { "keys", 
FLDT_INOBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

422 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

423 { "±rs", 
FLDT_INOBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

424 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_INOBT
 },

425 { 
NULL
 }

427 c⁄° 
fõld_t
 
	göobt_¸c_Êds
[] = {

428 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

429 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

430 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

431 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_INOBT
 },

432 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_INOBT
 },

433 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_INOBT
 },

434 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

435 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

436 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

437 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

438 { "ªcs", 
FLDT_INOBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

439 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

440 { "keys", 
FLDT_INOBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

441 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

442 { "±rs", 
FLDT_INOBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

443 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_INOBT
 },

444 { 
NULL
 }

446 c⁄° 
fõld_t
 
	göobt_•¸c_Êds
[] = {

447 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

448 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

449 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

450 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_INOBT
 },

451 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_INOBT
 },

452 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_INOBT
 },

453 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

454 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

455 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

456 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

457 { "ªcs", 
FLDT_INOBTSPREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

458 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

459 { "keys", 
FLDT_INOBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

460 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

461 { "±rs", 
FLDT_INOBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

462 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_INOBT
 },

463 { 
NULL
 }

466 #unde‡
OFF


468 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_öobt_key_t
, 
ú_
 ## f))

	)

469 c⁄° 
fõld_t
 
	göobt_key_Êds
[] = {

470 { "°¨töo", 
FLDT_AGINO
, 
OI
(
KOFF
(
°¨töo
)), 
C1
, 0, 
TYP_INODE
 },

471 { 
NULL
 }

473 #unde‡
KOFF


475 
	#ROFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_öobt_ªc_t
, f))

	)

476 c⁄° 
fõld_t
 
	göobt_ªc_Êds
[] = {

477 { "°¨töo", 
FLDT_AGINO
, 
OI
(
ROFF
(
ú_°¨töo
)), 
C1
, 0, 
TYP_INODE
 },

478 { "‰ìcou¡", 
FLDT_INT32D
, 
OI
(
ROFF
(
ú_u
.
f
.
ú_‰ìcou¡
)), 
C1
, 0, 
TYP_NONE
 },

479 { "‰ì", 
FLDT_INOFREE
, 
OI
(
ROFF
(
ú_‰ì
)), 
C1
, 0, 
TYP_NONE
 },

480 { 
NULL
 }

483 c⁄° 
fõld_t
 
	göobt_•ªc_Êds
[] = {

484 { "°¨töo", 
FLDT_AGINO
, 
OI
(
ROFF
(
ú_°¨töo
)), 
C1
, 0, 
TYP_INODE
 },

485 { "hﬁemask", 
FLDT_UINT16X
, 
OI
(
ROFF
(
ú_u
.
•
.
ú_hﬁemask
)), 
C1
, 0,

486 
TYP_NONE
 },

487 { "cou¡", 
FLDT_UINT8D
, 
OI
(
ROFF
(
ú_u
.
•
.
ú_cou¡
)), 
C1
, 0, 
TYP_NONE
 },

488 { "‰ìcou¡", 
FLDT_INT8D
, 
OI
(
ROFF
(
ú_u
.
•
.
ú_‰ìcou¡
)), 
C1
, 0,

489 
TYP_NONE
 },

490 { "‰ì", 
FLDT_INOFREE
, 
OI
(
ROFF
(
ú_‰ì
)), 
C1
, 0, 
TYP_NONE
 },

491 { 
NULL
 }

493 #unde‡
ROFF


499 c⁄° 
fõld_t
 
	gbnobt_hÊd
[] = {

500 { "", 
FLDT_BNOBT
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

501 { 
NULL
 }

504 c⁄° 
fõld_t
 
	gbnobt_¸c_hÊd
[] = {

505 { "", 
FLDT_BNOBT_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

506 { 
NULL
 }

509 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

510 c⁄° 
fõld_t
 
	gbnobt_Êds
[] = {

511 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

512 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

513 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

514 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_BNOBT
 },

515 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_BNOBT
 },

516 { "ªcs", 
FLDT_BNOBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

517 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

518 { "keys", 
FLDT_BNOBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

519 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

520 { "±rs", 
FLDT_BNOBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

521 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BNOBT
 },

522 { 
NULL
 }

524 c⁄° 
fõld_t
 
	gbnobt_¸c_Êds
[] = {

525 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

526 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

527 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

528 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_BNOBT
 },

529 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_BNOBT
 },

530 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_BNOBT
 },

531 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

532 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

533 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

534 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

535 { "ªcs", 
FLDT_BNOBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

536 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

537 { "keys", 
FLDT_BNOBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

538 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

539 { "±rs", 
FLDT_BNOBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

540 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_BNOBT
 },

541 { 
NULL
 }

543 #unde‡
OFF


545 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_Æloc_key_t
, 
¨_
 ## f))

	)

546 c⁄° 
fõld_t
 
	gbnobt_key_Êds
[] = {

547 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
KOFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

548 { "blockcou¡", 
FLDT_EXTLEN
, 
OI
(
KOFF
(
blockcou¡
)), 
C1
, 0, 
TYP_NONE
 },

549 { 
NULL
 }

551 #unde‡
KOFF


553 
	#ROFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_Æloc_ªc_t
, 
¨_
 ## f))

	)

554 c⁄° 
fõld_t
 
	gbnobt_ªc_Êds
[] = {

555 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
ROFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

556 { "blockcou¡", 
FLDT_EXTLEN
, 
OI
(
ROFF
(
blockcou¡
)), 
C1
, 0, 
TYP_NONE
 },

557 { 
NULL
 }

559 #unde‡
ROFF


561 c⁄° 
fõld_t
 
	g˙tbt_hÊd
[] = {

562 { "", 
FLDT_CNTBT
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

563 { 
NULL
 }

566 c⁄° 
fõld_t
 
	g˙tbt_¸c_hÊd
[] = {

567 { "", 
FLDT_CNTBT_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

568 { 
NULL
 }

571 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

572 c⁄° 
fõld_t
 
	g˙tbt_Êds
[] = {

573 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

574 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

575 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

576 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_CNTBT
 },

577 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_CNTBT
 },

578 { "ªcs", 
FLDT_CNTBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

579 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

580 { "keys", 
FLDT_CNTBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

581 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

582 { "±rs", 
FLDT_CNTBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

583 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_CNTBT
 },

584 { 
NULL
 }

586 c⁄° 
fõld_t
 
	g˙tbt_¸c_Êds
[] = {

587 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

588 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

589 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

590 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_CNTBT
 },

591 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_CNTBT
 },

592 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_CNTBT
 },

593 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

594 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

595 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

596 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

597 { "ªcs", 
FLDT_CNTBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

598 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

599 { "keys", 
FLDT_CNTBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

600 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

601 { "±rs", 
FLDT_CNTBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

602 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_CNTBT
 },

603 { 
NULL
 }

605 #unde‡
OFF


607 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_Æloc_key_t
, 
¨_
 ## f))

	)

608 c⁄° 
fõld_t
 
	g˙tbt_key_Êds
[] = {

609 { "blockcou¡", 
FLDT_EXTLEN
, 
OI
(
KOFF
(
blockcou¡
)), 
C1
, 0, 
TYP_NONE
 },

610 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
KOFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

611 { 
NULL
 }

613 #unde‡
KOFF


615 
	#ROFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_Æloc_ªc_t
, 
¨_
 ## f))

	)

616 c⁄° 
fõld_t
 
	g˙tbt_ªc_Êds
[] = {

617 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
ROFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

618 { "blockcou¡", 
FLDT_EXTLEN
, 
OI
(
ROFF
(
blockcou¡
)), 
C1
, 0, 
TYP_NONE
 },

619 { 
NULL
 }

621 #unde‡
ROFF


624 c⁄° 
fõld_t
 
	grm≠bt_¸c_hÊd
[] = {

625 { "", 
FLDT_RMAPBT_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

626 { 
NULL
 }

629 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

630 c⁄° 
fõld_t
 
	grm≠bt_¸c_Êds
[] = {

631 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

632 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

633 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

634 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_RMAPBT
 },

635 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_RMAPBT
 },

636 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_RMAPBT
 },

637 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

638 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

639 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

640 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

641 { "ªcs", 
FLDT_RMAPBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

642 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

643 { "keys", 
FLDT_RMAPBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

644 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

645 { "±rs", 
FLDT_RMAPBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

646 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_RMAPBT
 },

647 { 
NULL
 }

649 #unde‡
OFF


651 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_rm≠_key
, 
rm_
 ## f))

	)

653 
	#RMAPBK_STARTBLOCK_BITOFF
 0

	)

654 
	#RMAPBK_OWNER_BITOFF
 (
RMAPBK_STARTBLOCK_BITOFF
 + 
RMAPBT_STARTBLOCK_BITLEN
)

	)

655 
	#RMAPBK_ATTRFLAG_BITOFF
 (
RMAPBK_OWNER_BITOFF
 + 
RMAPBT_OWNER_BITLEN
)

	)

656 
	#RMAPBK_BMBTFLAG_BITOFF
 (
RMAPBK_ATTRFLAG_BITOFF
 + 
RMAPBT_ATTRFLAG_BITLEN
)

	)

657 
	#RMAPBK_EXNTFLAG_BITOFF
 (
RMAPBK_BMBTFLAG_BITOFF
 + 
RMAPBT_BMBTFLAG_BITLEN
)

	)

658 
	#RMAPBK_UNUSED_OFFSET_BITOFF
 (
RMAPBK_EXNTFLAG_BITOFF
 + 
RMAPBT_EXNTFLAG_BITLEN
)

	)

659 
	#RMAPBK_OFFSET_BITOFF
 (
RMAPBK_UNUSED_OFFSET_BITOFF
 + 
RMAPBT_UNUSED_OFFSET_BITLEN
)

	)

661 
	#HI_KOFF
(
f
Ë
	`bôize
((
xfs_rm≠_key
Ë+ 
	`off£tof
(xfs_rm≠_key, 
rm_
 ## f))

	)

663 
	#RMAPBK_STARTBLOCKHI_BITOFF
 (
	`bôize
((
xfs_rm≠_key
)))

	)

664 
	#RMAPBK_OWNERHI_BITOFF
 (
RMAPBK_STARTBLOCKHI_BITOFF
 + 
RMAPBT_STARTBLOCK_BITLEN
)

	)

665 
	#RMAPBK_ATTRFLAGHI_BITOFF
 (
RMAPBK_OWNERHI_BITOFF
 + 
RMAPBT_OWNER_BITLEN
)

	)

666 
	#RMAPBK_BMBTFLAGHI_BITOFF
 (
RMAPBK_ATTRFLAGHI_BITOFF
 + 
RMAPBT_ATTRFLAG_BITLEN
)

	)

667 
	#RMAPBK_EXNTFLAGHI_BITOFF
 (
RMAPBK_BMBTFLAGHI_BITOFF
 + 
RMAPBT_BMBTFLAG_BITLEN
)

	)

668 
	#RMAPBK_UNUSED_OFFSETHI_BITOFF
 (
RMAPBK_EXNTFLAGHI_BITOFF
 + 
RMAPBT_EXNTFLAG_BITLEN
)

	)

669 
	#RMAPBK_OFFSETHI_BITOFF
 (
RMAPBK_UNUSED_OFFSETHI_BITOFF
 + 
RMAPBT_UNUSED_OFFSET_BITLEN
)

	)

671 c⁄° 
fõld_t
 
	grm≠bt_key_Êds
[] = {

672 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
KOFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

673 { "ow√r", 
FLDT_INT64D
, 
OI
(
KOFF
(
ow√r
)), 
C1
, 0, 
TYP_NONE
 },

674 { "off£t", 
FLDT_RFILEOFFD
, 
OI
(
RMAPBK_OFFSET_BITOFF
), 
C1
, 0, 
TYP_NONE
 },

675 { "©åf‹k", 
FLDT_RATTRFORKFLG
, 
OI
(
RMAPBK_ATTRFLAG_BITOFF
), 
C1
, 0,

676 
TYP_NONE
 },

677 { "bmbtblock", 
FLDT_RBMBTFLG
, 
OI
(
RMAPBK_BMBTFLAG_BITOFF
), 
C1
, 0,

678 
TYP_NONE
 },

679 { "°¨tblock_hi", 
FLDT_AGBLOCK
, 
OI
(
HI_KOFF
(
°¨tblock
)), 
C1
, 0, 
TYP_DATA
 },

680 { "ow√r_hi", 
FLDT_INT64D
, 
OI
(
HI_KOFF
(
ow√r
)), 
C1
, 0, 
TYP_NONE
 },

681 { "off£t_hi", 
FLDT_RFILEOFFD
, 
OI
(
RMAPBK_OFFSETHI_BITOFF
), 
C1
, 0, 
TYP_NONE
 },

682 { "©åf‹k_hi", 
FLDT_RATTRFORKFLG
, 
OI
(
RMAPBK_ATTRFLAGHI_BITOFF
), 
C1
, 0,

683 
TYP_NONE
 },

684 { "bmbtblock_hi", 
FLDT_RBMBTFLG
, 
OI
(
RMAPBK_BMBTFLAGHI_BITOFF
), 
C1
, 0,

685 
TYP_NONE
 },

686 { 
NULL
 }

688 #unde‡
HI_KOFF


689 #unde‡
KOFF


691 
	#ROFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_rm≠_ªc
, 
rm_
 ## f))

	)

693 
	#RMAPBT_STARTBLOCK_BITOFF
 0

	)

694 
	#RMAPBT_BLOCKCOUNT_BITOFF
 (
RMAPBT_STARTBLOCK_BITOFF
 + 
RMAPBT_STARTBLOCK_BITLEN
)

	)

695 
	#RMAPBT_OWNER_BITOFF
 (
RMAPBT_BLOCKCOUNT_BITOFF
 + 
RMAPBT_BLOCKCOUNT_BITLEN
)

	)

696 
	#RMAPBT_ATTRFLAG_BITOFF
 (
RMAPBT_OWNER_BITOFF
 + 
RMAPBT_OWNER_BITLEN
)

	)

697 
	#RMAPBT_BMBTFLAG_BITOFF
 (
RMAPBT_ATTRFLAG_BITOFF
 + 
RMAPBT_ATTRFLAG_BITLEN
)

	)

698 
	#RMAPBT_EXNTFLAG_BITOFF
 (
RMAPBT_BMBTFLAG_BITOFF
 + 
RMAPBT_BMBTFLAG_BITLEN
)

	)

699 
	#RMAPBT_UNUSED_OFFSET_BITOFF
 (
RMAPBT_EXNTFLAG_BITOFF
 + 
RMAPBT_EXNTFLAG_BITLEN
)

	)

700 
	#RMAPBT_OFFSET_BITOFF
 (
RMAPBT_UNUSED_OFFSET_BITOFF
 + 
RMAPBT_UNUSED_OFFSET_BITLEN
)

	)

702 c⁄° 
fõld_t
 
	grm≠bt_ªc_Êds
[] = {

703 { "°¨tblock", 
FLDT_AGBLOCK
, 
OI
(
RMAPBT_STARTBLOCK_BITOFF
), 
C1
, 0, 
TYP_DATA
 },

704 { "blockcou¡", 
FLDT_REXTLEN
, 
OI
(
RMAPBT_BLOCKCOUNT_BITOFF
), 
C1
, 0, 
TYP_NONE
 },

705 { "ow√r", 
FLDT_INT64D
, 
OI
(
RMAPBT_OWNER_BITOFF
), 
C1
, 0, 
TYP_NONE
 },

706 { "off£t", 
FLDT_RFILEOFFD
, 
OI
(
RMAPBT_OFFSET_BITOFF
), 
C1
, 0, 
TYP_NONE
 },

707 { "exã¡Êag", 
FLDT_REXTFLG
, 
OI
(
RMAPBT_EXNTFLAG_BITOFF
), 
C1
, 0,

708 
TYP_NONE
 },

709 { "©åf‹k", 
FLDT_RATTRFORKFLG
, 
OI
(
RMAPBT_ATTRFLAG_BITOFF
), 
C1
, 0,

710 
TYP_NONE
 },

711 { "bmbtblock", 
FLDT_RBMBTFLG
, 
OI
(
RMAPBT_BMBTFLAG_BITOFF
), 
C1
, 0,

712 
TYP_NONE
 },

713 { 
NULL
 }

715 #unde‡
ROFF


718 c⁄° 
fõld_t
 
	gªfcbt_¸c_hÊd
[] = {

719 { "", 
FLDT_REFCBT_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

720 { 
NULL
 }

723 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_båì_block
, 
bb_
 ## f))

	)

724 c⁄° 
fõld_t
 
	gªfcbt_¸c_Êds
[] = {

725 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

726 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
OFF
(
Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

727 { "numªcs", 
FLDT_UINT16D
, 
OI
(
OFF
(
numªcs
)), 
C1
, 0, 
TYP_NONE
 },

728 { "À·sib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_À·sib
)), 
C1
, 0, 
TYP_REFCBT
 },

729 { "rightsib", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
u
.
s
.
bb_rightsib
)), 
C1
, 0, 
TYP_REFCBT
 },

730 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
u
.
s
.
bb_blkno
)), 
C1
, 0, 
TYP_REFCBT
 },

731 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
u
.
s
.
bb_l¢
)), 
C1
, 0, 
TYP_NONE
 },

732 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
u
.
s
.
bb_uuid
)), 
C1
, 0, 
TYP_NONE
 },

733 { "ow√r", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
u
.
s
.
bb_ow√r
)), 
C1
, 0, 
TYP_NONE
 },

734 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
u
.
s
.
bb_¸c
)), 
C1
, 0, 
TYP_NONE
 },

735 { "ªcs", 
FLDT_REFCBTREC
, 
btblock_ªc_off£t
, 
btblock_ªc_cou¡
,

736 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

737 { "keys", 
FLDT_REFCBTKEY
, 
btblock_key_off£t
, 
btblock_key_cou¡
,

738 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

739 { "±rs", 
FLDT_REFCBTPTR
, 
btblock_±r_off£t
, 
btblock_key_cou¡
,

740 
FLD_ARRAY
|
FLD_ABASE1
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_REFCBT
 },

741 { 
NULL
 }

743 #unde‡
OFF


745 
	#REFCNTBT_COWFLAG_BITOFF
 0

	)

746 
	#REFCNTBT_STARTBLOCK_BITOFF
 (
REFCNTBT_COWFLAG_BITOFF
 + 
REFCNTBT_COWFLAG_BITLEN
)

	)

748 
	#KOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_ªfcou¡_key
, 
rc_
 ## f))

	)

749 c⁄° 
fõld_t
 
	gªfcbt_key_Êds
[] = {

750 { "°¨tblock", 
FLDT_CAGBLOCK
, 
OI
(
REFCNTBT_STARTBLOCK_BITOFF
), 
C1
, 0, 
TYP_DATA
 },

751 { "cowÊag", 
FLDT_CCOWFLG
, 
OI
(
REFCNTBT_COWFLAG_BITOFF
), 
C1
, 0, 
TYP_DATA
 },

752 { 
NULL
 }

754 #unde‡
KOFF


756 
	#ROFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_ªfcou¡_ªc
, 
rc_
 ## f))

	)

757 c⁄° 
fõld_t
 
	gªfcbt_ªc_Êds
[] = {

758 { "°¨tblock", 
FLDT_CAGBLOCK
, 
OI
(
REFCNTBT_STARTBLOCK_BITOFF
), 
C1
, 0, 
TYP_DATA
 },

759 { "blockcou¡", 
FLDT_EXTLEN
, 
OI
(
ROFF
(
blockcou¡
)), 
C1
, 0, 
TYP_NONE
 },

760 { "ªfcou¡", 
FLDT_UINT32D
, 
OI
(
ROFF
(
ªfcou¡
)), 
C1
, 0, 
TYP_DATA
 },

761 { "cowÊag", 
FLDT_CCOWFLG
, 
OI
(
REFCNTBT_COWFLAG_BITOFF
), 
C1
, 0, 
TYP_DATA
 },

762 { 
NULL
 }

764 #unde‡
ROFF


	@db/btblock.h

19 c⁄° 
fõld
 
bm≠bè_Êds
[];

20 c⁄° 
fõld
 
bm≠bè_hÊd
[];

21 c⁄° 
fõld
 
bm≠bè_¸c_Êds
[];

22 c⁄° 
fõld
 
bm≠bè_¸c_hÊd
[];

23 c⁄° 
fõld
 
bm≠bè_key_Êds
[];

24 c⁄° 
fõld
 
bm≠bè_ªc_Êds
[];

26 c⁄° 
fõld
 
bm≠btd_Êds
[];

27 c⁄° 
fõld
 
bm≠btd_hÊd
[];

28 c⁄° 
fõld
 
bm≠btd_¸c_Êds
[];

29 c⁄° 
fõld
 
bm≠btd_¸c_hÊd
[];

30 c⁄° 
fõld
 
bm≠btd_key_Êds
[];

31 c⁄° 
fõld
 
bm≠btd_ªc_Êds
[];

33 c⁄° 
fõld
 
öobt_Êds
[];

34 c⁄° 
fõld
 
öobt_hÊd
[];

35 c⁄° 
fõld
 
öobt_¸c_Êds
[];

36 c⁄° 
fõld
 
öobt_•¸c_Êds
[];

37 c⁄° 
fõld
 
öobt_¸c_hÊd
[];

38 c⁄° 
fõld
 
öobt_•¸c_hÊd
[];

39 c⁄° 
fõld
 
öobt_key_Êds
[];

40 c⁄° 
fõld
 
öobt_ªc_Êds
[];

41 c⁄° 
fõld
 
öobt_•ªc_Êds
[];

43 c⁄° 
fõld
 
bnobt_Êds
[];

44 c⁄° 
fõld
 
bnobt_hÊd
[];

45 c⁄° 
fõld
 
bnobt_¸c_Êds
[];

46 c⁄° 
fõld
 
bnobt_¸c_hÊd
[];

47 c⁄° 
fõld
 
bnobt_key_Êds
[];

48 c⁄° 
fõld
 
bnobt_ªc_Êds
[];

50 c⁄° 
fõld
 
˙tbt_Êds
[];

51 c⁄° 
fõld
 
˙tbt_hÊd
[];

52 c⁄° 
fõld
 
˙tbt_¸c_Êds
[];

53 c⁄° 
fõld
 
˙tbt_¸c_hÊd
[];

54 c⁄° 
fõld
 
˙tbt_key_Êds
[];

55 c⁄° 
fõld
 
˙tbt_ªc_Êds
[];

57 c⁄° 
fõld
 
rm≠bt_¸c_Êds
[];

58 c⁄° 
fõld
 
rm≠bt_¸c_hÊd
[];

59 c⁄° 
fõld
 
rm≠bt_key_Êds
[];

60 c⁄° 
fõld
 
rm≠bt_ªc_Êds
[];

62 c⁄° 
fõld
 
ªfcbt_¸c_Êds
[];

63 c⁄° 
fõld
 
ªfcbt_¸c_hÊd
[];

64 c⁄° 
fõld
 
ªfcbt_key_Êds
[];

65 c⁄° 
fõld
 
ªfcbt_ªc_Êds
[];

67 
btblock_size
(*
obj
, 
°¨toff
, 
idx
);

	@db/check.c

19 
	~"libxfs.h
"

20 
	~<m©h.h
>

21 
	~<sys/time.h
>

22 
	~"bm≠.h
"

23 
	~"check.h
"

24 
	~"comm™d.h
"

25 
	~"io.h
"

26 
	~"ty≥.h
"

27 
	~"Âröt.h
"

28 
	~"Áddr.h
"

29 
	~"fõld.h
"

30 
	~"sb.h
"

31 
	~"ouçut.h
"

32 
	~"öô.h
"

33 
	~"mÆloc.h
"

34 
	~"dú2.h
"

37 
	mIS_USER_QUOTA
, 
	mIS_PROJECT_QUOTA
, 
	mIS_GROUP_QUOTA
,

38 } 
	tqty≥_t
;

41 
	mDBM_UNKNOWN
, 
	mDBM_AGF
, 
	mDBM_AGFL
, 
	mDBM_AGI
,

42 
	mDBM_ATTR
, 
	mDBM_BTBMAPA
, 
	mDBM_BTBMAPD
, 
	mDBM_BTBNO
,

43 
	mDBM_BTCNT
, 
	mDBM_BTINO
, 
	mDBM_DATA
, 
	mDBM_DIR
,

44 
	mDBM_FREE1
, 
	mDBM_FREE2
, 
	mDBM_FREELIST
, 
	mDBM_INODE
,

45 
	mDBM_LOG
, 
	mDBM_MISSING
, 
	mDBM_QUOTA
, 
	mDBM_RTBITMAP
,

46 
	mDBM_RTDATA
, 
	mDBM_RTFREE
, 
	mDBM_RTSUM
, 
	mDBM_SB
,

47 
	mDBM_SYMLINK
, 
	mDBM_BTFINO
, 
	mDBM_BTRMAP
, 
	mDBM_BTREFC
,

48 
	mDBM_RLDATA
, 
	mDBM_COWDATA
,

49 
	mDBM_NDBM


50 } 
	tdbm_t
;

52 
	söod©a
 {

53 
öod©a
 *
	m√xt
;

54 
∆ök_t
 
	mlök_£t
;

55 
∆ök_t
 
	mlök_add
;

56 
	misdú
:1;

57 
	mi§eÊök
:1;

58 
	m£curôy
;

59 
	mûi°
;

60 
xfs_öo_t
 
	möo
;

61 
öod©a
 *
	m∑ª¡
;

62 *
	m«me
;

63 } 
	töod©a_t
;

64 
	#MIN_INODATA_HASH_SIZE
 256

	)

65 
	#MAX_INODATA_HASH_SIZE
 65536

	)

66 
	#INODATA_AVG_HASH_LENGTH
 8

	)

68 
	sqöfo
 {

69 
xfs_q˙t_t
 
	mbc
;

70 
xfs_q˙t_t
 
	mic
;

71 
xfs_q˙t_t
 
	mrc
;

72 } 
	tqöfo_t
;

74 
	#QDATA_HASH_SIZE
 256

	)

75 
	sqd©a
 {

76 
qd©a
 *
	m√xt
;

77 
xfs_dqid_t
 
	mid
;

78 
qöfo_t
 
	mcou¡
;

79 
qöfo_t
 
	mdq
;

80 } 
	tqd©a_t
;

82 
	sblkít
 {

83 
xfs_fûeoff_t
 
	m°¨toff
;

84 
	mnblks
;

85 
xfs_fsblock_t
 
	mblks
[1];

86 } 
	tblkít_t
;

87 
	#BLKENT_SIZE
(
n
) \

88 (
	`off£tof
(
blkít_t
, 
blks
Ë+ ((
xfs_fsblock_t
Ë* (
n
)))

	)

90 
	sblkm≠
 {

91 
	m«íts
;

92 
	m√¡s
;

93 
blkít_t
 *
	míts
[1];

94 } 
	tblkm≠_t
;

95 
	#BLKMAP_SIZE
(
n
) \

96 (
	`off£tof
(
blkm≠_t
, 
íts
Ë+ ((
blkít_t
 *Ë* (
n
)))

	)

98 
	s‰ìèb
 {

99 
	m«íts
;

100 
	m√¡s
;

101 
xfs_dú2_d©a_off_t
 
	míts
[1];

102 } 
	t‰ìèb_t
;

103 
	#FREETAB_SIZE
(
n
) \

104 (
	`off£tof
(
‰ìèb_t
, 
íts
Ë+ ((
xfs_dú2_d©a_off_t
Ë* (
n
)))

	)

106 
	sdúhash
 {

107 
dúhash
 *
	m√xt
;

108 
__u32
 
	mhashvÆ
;

109 
__u32
 
	maddªss
;

110 
	m£í
;

111 } 
	tdúhash_t
;

112 
	#DIR_HASH_SIZE
 1024

	)

113 
	#DIR_HASH_FUNC
(
h
,
a
Ë(((hË^ (a)Ë% 
DIR_HASH_SIZE
)

	)

115 
xfs_exéí_t
 
	gagf‰ìblks
;

116 
xfs_exéí_t
 
	gagÊ⁄ge°
;

117 
__uöt64_t
 
	gagf_aggr_‰ìblks
;

118 
__uöt32_t
 
	gagfbåìblks
;

119 
	gœzycou¡
;

120 
xfs_agöo_t
 
	gagicou¡
;

121 
xfs_agöo_t
 
	gagi‰ìcou¡
;

122 
xfs_fsblock_t
 *
	gbli°
;

123 
	gbli°_size
;

124 **
	gdbm≠
;

125 
dúhash_t
 **
	gdúhash
;

126 
	gîr‹
;

127 
__uöt64_t
 
	gfdblocks
;

128 
__uöt64_t
 
	g‰exã¡s
;

129 
__uöt64_t
 
	gicou¡
;

130 
__uöt64_t
 
	gi‰ì
;

131 
öod©a_t
 ***
	göod©a
;

132 
	göod©a_hash_size
;

133 
öod©a_t
 ***
	göom≠
;

134 
	gnÊag
;

135 
	gpÊag
;

136 
	gtÊag
;

137 
qd©a_t
 **
	gqpd©a
;

138 
	gqpdo
;

139 
qd©a_t
 **
	gqud©a
;

140 
	gqudo
;

141 
qd©a_t
 **
	gqgd©a
;

142 
	gqgdo
;

143 
	gsbvîsi⁄
;

144 
	gsbvî_îr
;

145 
	g£rious_îr‹
;

146 
	gsÊag
;

147 
xfs_sumöfo_t
 *
	gsumcompuã
;

148 
xfs_sumöfo_t
 *
	gsumfûe
;

149 c⁄° *
	gty≥«me
[] = {

179 
NULL


181 
	gvîbo£
;

183 
	#CHECK_BLIST
(
b
Ë(
bli°_size
 && 
	`check_bli°
(b))

	)

184 
	#CHECK_BLISTA
(
a
,
b
) \

185 (
bli°_size
 && 
	`check_bli°
(
	`XFS_AGB_TO_FSB
(
mp
, 
a
, 
b
)))

	)

187 (*
	tsˇn_lbåì_f_t
)(
	txfs_båì_block
 *
	tblock
,

188 
	tÀvñ
,

189 
	tdbm_t
 
	tty≥
,

190 
	txfs_fsblock_t
 
	tbno
,

191 
	töod©a_t
 *
	tid
,

192 
	txfs_rfsblock_t
 *
	ttŸd
,

193 
	txfs_rfsblock_t
 *
	ttŸi
,

194 
	txfs_exäum_t
 *
	t√x
,

195 
	tblkm≠_t
 **
	tblkm≠p
,

196 
	ti§oŸ
,

197 
	tty≤m_t
 
	tbty≥
);

199 (*
	tsˇn_sbåì_f_t
)(
	txfs_båì_block
 *
	tblock
,

200 
	tÀvñ
,

201 
	txfs_agf_t
 *
	tagf
,

202 
	txfs_agblock_t
 
	tbno
,

203 
	ti§oŸ
);

205 
	`add_bli°
(
xfs_fsblock_t
 
bno
);

206 
	`add_ûi°
(
xfs_öo_t
 
öo
);

207 
	`addlök_öode
(
öod©a_t
 *
id
);

208 
	`add«me_öode
(
öod©a_t
 *
id
, *
«me
, 
«mñí
);

209 
	`add∑ª¡_öode
(
öod©a_t
 *
id
, 
xfs_öo_t
 
∑ª¡
);

210 
	`blkít_≠≥nd
(
blkít_t
 **
íç
, 
xfs_fsblock_t
 
b
,

211 
xfs_exéí_t
 
c
);

212 
blkít_t
 *
	`blkít_√w
(
xfs_fûeoff_t
 
o
, 
xfs_fsblock_t
 
b
,

213 
xfs_exéí_t
 
c
);

214 
	`blkít_¥ïíd
(
blkít_t
 **
íç
, 
xfs_fsblock_t
 
b
,

215 
xfs_exéí_t
 
c
);

216 
blkm≠_t
 *
	`blkm≠_Æloc
(
xfs_exäum_t
);

217 
	`blkm≠_‰ì
(
blkm≠_t
 *
blkm≠
);

218 
xfs_fsblock_t
 
	`blkm≠_gë
(
blkm≠_t
 *
blkm≠
, 
xfs_fûeoff_t
 
o
);

219 
	`blkm≠_gën
(
blkm≠_t
 *
blkm≠
, 
xfs_fûeoff_t
 
o
, 
nb
,

220 
bm≠_ext_t
 **
bmµ
);

221 
	`blkm≠_grow
(
blkm≠_t
 **
blkm≠p
, 
blkít_t
 **
íç
,

222 
blkít_t
 *
√wít
);

223 
xfs_fûeoff_t
 
	`blkm≠_√xt_off
(
blkm≠_t
 *
blkm≠
, xfs_fûeoff_à
o
,

224 *
t
);

225 
	`blkm≠_£t_blk
(
blkm≠_t
 **
blkm≠p
, 
xfs_fûeoff_t
 
o
,

226 
xfs_fsblock_t
 
b
);

227 
	`blkm≠_£t_ext
(
blkm≠_t
 **
blkm≠p
, 
xfs_fûeoff_t
 
o
,

228 
xfs_fsblock_t
 
b
, 
xfs_exéí_t
 
c
);

229 
	`blkm≠_shrök
(
blkm≠_t
 *
blkm≠
, 
blkít_t
 **
íç
);

230 
	`block‰ì_f
(
¨gc
, **
¨gv
);

231 
	`blockgë_f
(
¨gc
, **
¨gv
);

232 
	`blockåash_f
(
¨gc
, **
¨gv
);

233 
	`blocku£_f
(
¨gc
, **
¨gv
);

234 
	`check_bli°
(
xfs_fsblock_t
 
bno
);

235 
	`check_dbm≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

236 
xfs_exéí_t
 
Àn
, 
dbm_t
 
ty≥
,

237 
ign‹e_ªÊök
);

238 
	`check_öom≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

239 
xfs_exéí_t
 
Àn
, 
xfs_öo_t
 
c_öo
);

240 
	`check_lökcou¡s
(
xfs_agnumbî_t
 
agno
);

241 
	`check_ønge
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

242 
xfs_exéí_t
 
Àn
);

243 
	`check_rdbm≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

244 
dbm_t
 
ty≥
);

245 
	`check_röom≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

246 
xfs_öo_t
 
c_öo
);

247 
	`check_roŸdú
();

248 
	`check_º™ge
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
);

249 
	`check_£t_dbm≠
(
xfs_agnumbî_t
 
agno
,

250 
xfs_agblock_t
 
agbno
, 
xfs_exéí_t
 
Àn
,

251 
dbm_t
 
ty≥1
, dbm_à
ty≥2
,

252 
xfs_agnumbî_t
 
c_agno
,

253 
xfs_agblock_t
 
c_agbno
);

254 
	`check_£t_rdbm≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

255 
dbm_t
 
ty≥1
, dbm_à
ty≥2
);

256 
	`check_summ¨y
();

257 
	`checknŸ_dbm≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

258 
xfs_exéí_t
 
Àn
, 
ty≥mask
);

259 
	`checknŸ_rdbm≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

260 
ty≥mask
);

261 
	`dú_hash_add
(
xfs_dahash_t
 
hash
,

262 
xfs_dú2_d©≠å_t
 
addr
);

263 
	`dú_hash_check
(
öod©a_t
 *
id
, 
v
);

264 
	`dú_hash_d⁄e
();

265 
	`dú_hash_öô
();

266 
	`dú_hash_£e
(
xfs_dahash_t
 
hash
,

267 
xfs_dú2_d©≠å_t
 
addr
);

268 
öod©a_t
 *
	`föd_öode
(
xfs_öo_t
 
öo
, 
add
);

269 
	`‰ì_öod©a
(
xfs_agnumbî_t
 
agno
);

270 
	`öô
(
¨gc
, **
¨gv
);

271 *
	`öode_«me
(
xfs_öo_t
 
öo
, 
öod©a_t
 **
ùp
);

272 
	`ncheck_f
(
¨gc
, **
¨gv
);

273 *
	`¥ïíd_∑th
(*
ﬁd∑th
, *
∑ª¡
);

274 
xfs_öo_t
 
	`¥o˚ss_block_dú_v2
(
blkm≠_t
 *
blkm≠
, *
dŸ
,

275 *
dŸdŸ
, 
öod©a_t
 *
id
);

276 
	`¥o˚ss_bmbt_ª˛i°
(
xfs_bmbt_ªc_t
 *
Ω
, 
numªcs
,

277 
dbm_t
 
ty≥
, 
öod©a_t
 *
id
,

278 
xfs_rfsblock_t
 *
tŸ
,

279 
blkm≠_t
 **
blkm≠p
);

280 
	`¥o˚ss_btöode
(
öod©a_t
 *
id
, 
xfs_döode_t
 *
dù
,

281 
dbm_t
 
ty≥
, 
xfs_rfsblock_t
 *
tŸd
,

282 
xfs_rfsblock_t
 *
tŸi
, 
xfs_exäum_t
 *
√x
,

283 
blkm≠_t
 **
blkm≠p
, 
whichf‹k
);

284 
xfs_öo_t
 
	`¥o˚ss_d©a_dú_v2
(*
dŸ
, *
dŸdŸ
,

285 
öod©a_t
 *
id
, 
v
,

286 
xfs_dablk_t
 
dabno
,

287 
‰ìèb_t
 **
‰ìèbp
);

288 
xfs_dú2_d©a_‰ì_t
 *
	`¥o˚ss_d©a_dú_v2_‰ìföd
(

289 
xfs_dú2_d©a_hdr
 *
d©a
,

290 
xfs_dú2_d©a_unu£d
 *
dup
);

291 
	`¥o˚ss_dú
(
xfs_döode_t
 *
dù
, 
blkm≠_t
 *
blkm≠
,

292 
öod©a_t
 *
id
);

293 
	`¥o˚ss_dú_v2
(
xfs_döode_t
 *
dù
, 
blkm≠_t
 *
blkm≠
,

294 *
dŸ
, *
dŸdŸ
, 
öod©a_t
 *
id
,

295 
xfs_öo_t
 *
∑ª¡
);

296 
	`¥o˚ss_exöode
(
öod©a_t
 *
id
, 
xfs_döode_t
 *
dù
,

297 
dbm_t
 
ty≥
, 
xfs_rfsblock_t
 *
tŸd
,

298 
xfs_rfsblock_t
 *
tŸi
, 
xfs_exäum_t
 *
√x
,

299 
blkm≠_t
 **
blkm≠p
, 
whichf‹k
);

300 
	`¥o˚ss_öode
(
xfs_agf_t
 *
agf
, 
xfs_agöo_t
 
agöo
,

301 
xfs_döode_t
 *
dù
, 
is‰ì
);

302 
	`¥o˚ss_l˛öode
(
öod©a_t
 *
id
, 
xfs_döode_t
 *
dù
,

303 
dbm_t
 
ty≥
, 
xfs_rfsblock_t
 *
tŸd
,

304 
xfs_rfsblock_t
 *
tŸi
, 
xfs_exäum_t
 *
√x
,

305 
blkm≠_t
 **
blkm≠p
, 
whichf‹k
);

306 
xfs_öo_t
 
	`¥o˚ss_Àaf_node_dú_v2
(
blkm≠_t
 *
blkm≠
, *
dŸ
,

307 *
dŸdŸ
, 
öod©a_t
 *
id
,

308 
xfs_fsize_t
 
dúsize
);

309 
	`¥o˚ss_Àaf_node_dú_v2_‰ì
(
öod©a_t
 *
id
, 
v
,

310 
xfs_dablk_t
 
dbno
,

311 
‰ìèb_t
 *
‰ìèb
);

312 
	`¥o˚ss_Àaf_node_dú_v2_öt
(
öod©a_t
 *
id
, 
v
,

313 
xfs_dablk_t
 
dbno
,

314 
‰ìèb_t
 *
‰ìèb
);

315 
	`¥o˚ss_quŸa
(
qty≥_t
 
qty≥
, 
öod©a_t
 *
id
,

316 
blkm≠_t
 *
blkm≠
);

317 
	`¥o˚ss_πbôm≠
(
blkm≠_t
 *
blkm≠
);

318 
	`¥o˚ss_πsumm¨y
(
blkm≠_t
 *
blkm≠
);

319 
xfs_öo_t
 
	`¥o˚ss_sf_dú_v2
(
xfs_döode_t
 *
dù
, *
dŸ
,

320 *
dŸdŸ
, 
öod©a_t
 *
id
);

321 
	`quŸa_add
(
xfs_dqid_t
 *
p
, xfs_dqid_à*
g
, xfs_dqid_à*
u
,

322 
dq
, 
xfs_q˙t_t
 
bc
, xfs_q˙t_à
ic
,

323 
xfs_q˙t_t
 
rc
);

324 
	`quŸa_add1
(
qd©a_t
 **
qt
, 
xfs_dqid_t
 
id
, 
dq
,

325 
xfs_q˙t_t
 
bc
, xfs_q˙t_à
ic
,

326 
xfs_q˙t_t
 
rc
);

327 
	`quŸa_check
(*
s
, 
qd©a_t
 **
qt
);

328 
	`quŸa_öô
();

329 
	`sˇn_ag
(
xfs_agnumbî_t
 
agno
);

330 
	`sˇn_‰ìli°
(
xfs_agf_t
 *
agf
);

331 
	`sˇn_lbåì
(
xfs_fsblock_t
 
roŸ
, 
∆evñs
,

332 
sˇn_lbåì_f_t
 
func
, 
dbm_t
 
ty≥
,

333 
öod©a_t
 *
id
, 
xfs_rfsblock_t
 *
tŸd
,

334 
xfs_rfsblock_t
 *
tŸi
, 
xfs_exäum_t
 *
√x
,

335 
blkm≠_t
 **
blkm≠p
, 
i§oŸ
,

336 
ty≤m_t
 
bty≥
);

337 
	`sˇn_sbåì
(
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
roŸ
,

338 
∆evñs
, 
i§oŸ
,

339 
sˇn_sbåì_f_t
 
func
, 
ty≤m_t
 
bty≥
);

340 
	`sˇnfunc_bm≠
(
xfs_båì_block
 *
block
,

341 
Àvñ
, 
dbm_t
 
ty≥
, 
xfs_fsblock_t
 
bno
,

342 
öod©a_t
 *
id
, 
xfs_rfsblock_t
 *
tŸd
,

343 
xfs_rfsblock_t
 *
tŸi
, 
xfs_exäum_t
 *
√x
,

344 
blkm≠_t
 **
blkm≠p
, 
i§oŸ
,

345 
ty≤m_t
 
bty≥
);

346 
	`sˇnfunc_bno
(
xfs_båì_block
 *
block
, 
Àvñ
,

347 
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
bno
,

348 
i§oŸ
);

349 
	`sˇnfunc_˙t
(
xfs_båì_block
 *
block
, 
Àvñ
,

350 
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
bno
,

351 
i§oŸ
);

352 
	`sˇnfunc_öo
(
xfs_båì_block
 *
block
, 
Àvñ
,

353 
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
bno
,

354 
i§oŸ
);

355 
	`sˇnfunc_föo
(
xfs_båì_block
 *
block
, 
Àvñ
,

356 
xfs_agf
 *
agf
, 
xfs_agblock_t
 
bno
,

357 
i§oŸ
);

358 
	`sˇnfunc_rm≠
(
xfs_båì_block
 *
block
, 
Àvñ
,

359 
xfs_agf
 *
agf
, 
xfs_agblock_t
 
bno
,

360 
i§oŸ
);

361 
	`sˇnfunc_ªf˙t
(
xfs_båì_block
 *
block
, 
Àvñ
,

362 
xfs_agf
 *
agf
, 
xfs_agblock_t
 
bno
,

363 
i§oŸ
);

364 
	`£t_dbm≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

365 
xfs_exéí_t
 
Àn
, 
dbm_t
 
ty≥
,

366 
xfs_agnumbî_t
 
c_agno
, 
xfs_agblock_t
 
c_agbno
);

367 
	`£t_öom≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

368 
xfs_exéí_t
 
Àn
, 
öod©a_t
 *
id
);

369 
	`£t_rdbm≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

370 
dbm_t
 
ty≥
);

371 
	`£t_röom≠
(
xfs_rfsblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

372 
öod©a_t
 *
id
);

373 
	`£éök_öode
(
öod©a_t
 *
id
, 
∆ök_t
 
∆ök
, 
isdú
,

374 
£curôy
);

376 c⁄° 
cmdöfo_t
 
block‰ì_cmd
 =

377 { "block‰ì", 
NULL
, 
block‰ì_f
, 0, 0, 0,

378 
NULL
, 
	`N_
("‰ì block ußgêöf‹m©i⁄"), NULL 
	}
};

379 c⁄° 
cmdöfo_t
 
	gblockgë_cmd
 =

380 { "blockgë", "check", 
blockgë_f
, 0, -1, 0,

381 
N_
("[-s|-v] [-n] [-t] [-b bno]... [-i ino] ..."),

382 
N_
("gë block ußgê™d check c⁄si°ícy"), 
NULL
 };

383 c⁄° 
cmdöfo_t
 
	gblockåash_cmd
 =

384 { "blockåash", 
NULL
, 
blockåash_f
, 0, -1, 0,

385 
N_
("[-n count] [-x minlen] [-y maxlen] [-s seed] [-0123] [-tÅype] ..."),

386 
N_
("åashÑ™domly sñe˘ed block(s)"), 
NULL
 };

387 c⁄° 
cmdöfo_t
 
	gblocku£_cmd
 =

388 { "blocku£", 
NULL
, 
blocku£_f
, 0, 3, 0,

389 
N_
("[-n] [-c blockcount]"),

390 
N_
("¥öàußgêf‹ cuºíàblock(s)"), 
NULL
 };

391 c⁄° 
cmdöfo_t
 
	gncheck_cmd
 =

392 { "ncheck", 
NULL
, 
ncheck_f
, 0, -1, 0,

393 
N_
("[-s] [-i ino] ..."),

394 
N_
("¥öàöode-«mê∑ús"), 
NULL
 };

398 
	$add_bli°
(

399 
xfs_fsblock_t
 
bno
)

401 
bli°_size
++;

402 
bli°
 = 
	`xªÆloc
(bli°, 
bli°_size
 * (
bno
));

403 
bli°
[
bli°_size
 - 1] = 
bno
;

404 
	}
}

407 
	$add_ûi°
(

408 
xfs_öo_t
 
öo
)

410 
öod©a_t
 *
id
;

412 
id
 = 
	`föd_öode
(
öo
, 1);

413 i‡(
id
 =
NULL
) {

414 
	`db¥ötf
(
	`_
("-ò%Œd bad inodênumbî\n"), 
öo
);

417 
id
->
ûi°
 = 1;

418 
	}
}

421 
	$addlök_öode
(

422 
öod©a_t
 *
id
)

424 
id
->
lök_add
++;

425 i‡(
vîbo£
 || 
id
->
ûi°
)

426 
	`db¥ötf
(
	`_
("öodê%ŒdáddÜök,Çow %u\n"), 
id
->
öo
,

427 
id
->
lök_add
);

428 
	}
}

431 
	$add«me_öode
(

432 
öod©a_t
 *
id
,

433 *
«me
,

434 
«mñí
)

436 i‡(!
nÊag
 || 
id
->
«me
)

438 
id
->
«me
 = 
	`xmÆloc
(
«mñí
 + 1);

439 
	`mem˝y
(
id
->
«me
,Çame, 
«mñí
);

440 
id
->
«me
[
«mñí
] = '\0';

441 
	}
}

444 
	$add∑ª¡_öode
(

445 
öod©a_t
 *
id
,

446 
xfs_öo_t
 
∑ª¡
)

448 
öod©a_t
 *
pid
;

450 
pid
 = 
	`föd_öode
(
∑ª¡
, 1);

451 
id
->
∑ª¡
 = 
pid
;

452 i‡(
vîbo£
 || 
id
->
ûi°
 || (
pid
 &&Öid->ilist))

453 
	`db¥ötf
(
	`_
("öodê%ŒdÖ¨íà%Œd\n"), 
id
->
öo
, 
∑ª¡
);

454 
	}
}

457 
	$blkít_≠≥nd
(

458 
blkít_t
 **
íç
,

459 
xfs_fsblock_t
 
b
,

460 
xfs_exéí_t
 
c
)

462 
blkít_t
 *
ít
;

463 
i
;

465 
ít
 = *
íç
;

466 *
íç
 = 
ít
 = 
	`xªÆloc
”¡, 
	`BLKENT_SIZE
(
c
 +É¡->
nblks
));

467 
i
 = 0; i < 
c
; i++)

468 
ít
->
blks
[ít->
nblks
 + 
i
] = 
b
 + i;

469 
ít
->
nblks
 +
c
;

470 
	}
}

472 
blkít_t
 *

473 
	$blkít_√w
(

474 
xfs_fûeoff_t
 
o
,

475 
xfs_fsblock_t
 
b
,

476 
xfs_exéí_t
 
c
)

478 
blkít_t
 *
ít
;

479 
i
;

481 
ít
 = 
	`xmÆloc
(
	`BLKENT_SIZE
(
c
));

482 
ít
->
nblks
 = 
c
;

483 
ít
->
°¨toff
 = 
o
;

484 
i
 = 0; i < 
c
; i++)

485 
ít
->
blks
[
i
] = 
b
 + i;

486  
ít
;

487 
	}
}

490 
	$blkít_¥ïíd
(

491 
blkít_t
 **
íç
,

492 
xfs_fsblock_t
 
b
,

493 
xfs_exéí_t
 
c
)

495 
i
;

496 
blkít_t
 *
√wít
;

497 
blkít_t
 *
ﬁdít
;

499 
ﬁdít
 = *
íç
;

500 
√wít
 = 
	`xmÆloc
(
	`BLKENT_SIZE
(
ﬁdít
->
nblks
 + 
c
));

501 
√wít
->
nblks
 = 
ﬁdít
->nblk†+ 
c
;

502 
√wít
->
°¨toff
 = 
ﬁdít
->°¨tof‡- 
c
;

503 
i
 = 0; i < 
c
; i++)

504 
√wít
->
blks
[
i
] = 
b
 + 
c
;

505 ; 
i
 < 
ﬁdít
->
nblks
 + 
c
; i++)

506 
√wít
->
blks
[
i
] = 
ﬁdít
->blks[ò- 
c
];

507 
	`x‰ì
(
ﬁdít
);

508 *
íç
 = 
√wít
;

509 
	}
}

511 
blkm≠_t
 *

512 
	$blkm≠_Æloc
(

513 
xfs_exäum_t
 
√x
)

515 
blkm≠_t
 *
blkm≠
;

517 i‡(
√x
 < 1)

518 
√x
 = 1;

519 
blkm≠
 = 
	`xmÆloc
(
	`BLKMAP_SIZE
(
√x
));

520 
blkm≠
->
«íts
 = 
√x
;

521 
blkm≠
->
√¡s
 = 0;

522  
blkm≠
;

523 
	}
}

526 
	$blkm≠_‰ì
(

527 
blkm≠_t
 *
blkm≠
)

529 
blkít_t
 **
íç
;

530 
xfs_exäum_t
 
i
;

532 
i
 = 0, 
íç
 = 
blkm≠
->
íts
; i < blkm≠->
√¡s
; i++,Éntp++)

533 
	`x‰ì
(*
íç
);

534 
	`x‰ì
(
blkm≠
);

535 
	}
}

537 
xfs_fsblock_t


538 
	$blkm≠_gë
(

539 
blkm≠_t
 *
blkm≠
,

540 
xfs_fûeoff_t
 
o
)

542 
blkít_t
 *
ít
;

543 
blkít_t
 **
íç
;

544 
i
;

546 
i
 = 0, 
íç
 = 
blkm≠
->
íts
; i < blkm≠->
√¡s
; i++,Éntp++) {

547 
ít
 = *
íç
;

548 i‡(
o
 >
ít
->
°¨toff
 && o <É¡->°¨tof‡+É¡->
nblks
)

549  
ít
->
blks
[
o
 -É¡->
°¨toff
];

551  
NULLFSBLOCK
;

552 
	}
}

555 
	$blkm≠_gën
(

556 
blkm≠_t
 *
blkm≠
,

557 
xfs_fûeoff_t
 
o
,

558 
nb
,

559 
bm≠_ext_t
 **
bmµ
)

561 
bm≠_ext_t
 *
bmp
;

562 
blkít_t
 *
ít
;

563 
xfs_fûeoff_t
 
íto
;

564 
blkít_t
 **
íç
;

565 
i
;

566 
√x
;

568 
i
 = 
√x
 = 0, 
bmp
 = 
NULL
, 
íç
 = 
blkm≠
->
íts
;

569 
i
 < 
blkm≠
->
√¡s
;

570 
i
++, 
íç
++) {

571 
ít
 = *
íç
;

572 i‡(
ít
->
°¨toff
 >
o
 + 
nb
)

574 i‡(
ít
->
°¨toff
 +É¡->
nblks
 <
o
)

576 
íto
 = 
ít
->
°¨toff
;

577 
íto
 < 
ít
->
°¨toff
 +É¡->
nblks
 &&É¡ÿ< 
o
 + 
nb
;

578 
íto
++) {

579 i‡(
íto
 < 
o
)

581 i‡(
bmp
 &&

582 
bmp
[
√x
 - 1].
°¨toff
 + bmp[√x - 1].
blockcou¡
 ==

583 
íto
 &&

584 
bmp
[
√x
 - 1].
°¨tblock
 + bmp[√x - 1].
blockcou¡
 ==

585 
ít
->
blks
[
íto
 -É¡->
°¨toff
])

586 
bmp
[
√x
 - 1].
blockcou¡
++;

588 
bmp
 = 
	`ªÆloc
(bmp, ++
√x
 * (*bmp));

589 
bmp
[
√x
 - 1].
°¨toff
 = 
íto
;

590 
bmp
[
√x
 - 1].
°¨tblock
 =

591 
ít
->
blks
[
íto
 -É¡->
°¨toff
];

592 
bmp
[
√x
 - 1].
blockcou¡
 = 1;

593 
bmp
[
√x
 - 1].
Êag
 = 0;

597 *
bmµ
 = 
bmp
;

598  
√x
;

599 
	}
}

602 
	$blkm≠_grow
(

603 
blkm≠_t
 **
blkm≠p
,

604 
blkít_t
 **
íç
,

605 
blkít_t
 *
√wít
)

607 
blkm≠_t
 *
blkm≠
;

608 
i
;

609 
idx
;

611 
blkm≠
 = *
blkm≠p
;

612 
idx
 = ()(
íç
 - 
blkm≠
->
íts
);

613 i‡(
blkm≠
->
«íts
 =blkm≠->
√¡s
) {

614 
blkm≠
 = 
	`xªÆloc
(blkm≠, 
	`BLKMAP_SIZE
(blkm≠->
√¡s
 + 1));

615 *
blkm≠p
 = 
blkm≠
;

616 
blkm≠
->
«íts
++;

618 
i
 = 
blkm≠
->
√¡s
; i > 
idx
; i--)

619 
blkm≠
->
íts
[
i
] = blkmap->ents[i - 1];

620 
blkm≠
->
íts
[
idx
] = 
√wít
;

621 
blkm≠
->
√¡s
++;

622 
	}
}

624 
xfs_fûeoff_t


625 
	$blkm≠_œ°_off
(

626 
blkm≠_t
 *
blkm≠
)

628 
blkít_t
 *
ít
;

630 i‡(!
blkm≠
->
√¡s
)

631  
NULLFILEOFF
;

632 
ít
 = 
blkm≠
->
íts
[blkm≠->
√¡s
 - 1];

633  
ít
->
°¨toff
 +É¡->
nblks
;

634 
	}
}

636 
xfs_fûeoff_t


637 
	$blkm≠_√xt_off
(

638 
blkm≠_t
 *
blkm≠
,

639 
xfs_fûeoff_t
 
o
,

640 *
t
)

642 
blkít_t
 *
ít
;

643 
blkít_t
 **
íç
;

645 i‡(!
blkm≠
->
√¡s
)

646  
NULLFILEOFF
;

647 i‡(
o
 =
NULLFILEOFF
) {

648 *
t
 = 0;

649 
ít
 = 
blkm≠
->
íts
[0];

650  
ít
->
°¨toff
;

652 
íç
 = &
blkm≠
->
íts
[*
t
];

653 
ít
 = *
íç
;

654 i‡(
o
 < 
ít
->
°¨toff
 +É¡->
nblks
 - 1)

655  
o
 + 1;

656 
íç
++;

657 i‡(
íç
 >&
blkm≠
->
íts
[blkm≠->
√¡s
])

658  
NULLFILEOFF
;

659 (*
t
)++;

660 
ít
 = *
íç
;

661  
ít
->
°¨toff
;

662 
	}
}

665 
	$blkm≠_£t_blk
(

666 
blkm≠_t
 **
blkm≠p
,

667 
xfs_fûeoff_t
 
o
,

668 
xfs_fsblock_t
 
b
)

670 
blkm≠_t
 *
blkm≠
;

671 
blkít_t
 *
ít
;

672 
blkít_t
 **
íç
;

673 
blkít_t
 *
√xã¡
;

675 
blkm≠
 = *
blkm≠p
;

676 
íç
 = 
blkm≠
->
íts
;É¡∞< &blkm≠->íts[blkm≠->
√¡s
];Éntp++) {

677 
ít
 = *
íç
;

678 i‡(
o
 < 
ít
->
°¨toff
 - 1) {

679 
ít
 = 
	`blkít_√w
(
o
, 
b
, 1);

680 
	`blkm≠_grow
(
blkm≠p
, 
íç
, 
ít
);

683 i‡(
o
 =
ít
->
°¨toff
 - 1) {

684 
	`blkít_¥ïíd
(
íç
, 
b
, 1);

687 i‡(
o
 >
ít
->
°¨toff
 && o <É¡->°¨tof‡+É¡->
nblks
) {

688 
ít
->
blks
[
o
 -É¡->
°¨toff
] = 
b
;

691 i‡(
o
 > 
ít
->
°¨toff
 +É¡->
nblks
)

693 
	`blkít_≠≥nd
(
íç
, 
b
, 1);

694 i‡(
íç
 =&
blkm≠
->
íts
[blkm≠->
√¡s
 - 1])

696 
ít
 = *
íç
;

697 
√xã¡
 = 
íç
[1];

698 i‡(
ít
->
°¨toff
 +É¡->
nblks
 < 
√xã¡
->startoff)

700 
	`blkít_≠≥nd
(
íç
, 
√xã¡
->
blks
[0],Çexã¡->
nblks
);

701 
	`blkm≠_shrök
(
blkm≠
, &
íç
[1]);

704 
ít
 = 
	`blkít_√w
(
o
, 
b
, 1);

705 
	`blkm≠_grow
(
blkm≠p
, 
íç
, 
ít
);

706 
	}
}

709 
	$blkm≠_£t_ext
(

710 
blkm≠_t
 **
blkm≠p
,

711 
xfs_fûeoff_t
 
o
,

712 
xfs_fsblock_t
 
b
,

713 
xfs_exéí_t
 
c
)

715 
blkm≠_t
 *
blkm≠
;

716 
blkít_t
 *
ít
;

717 
blkít_t
 **
íç
;

718 
xfs_exäum_t
 
i
;

720 
blkm≠
 = *
blkm≠p
;

721 i‡(!
blkm≠
->
√¡s
) {

722 
blkm≠
->
íts
[0] = 
	`blkít_√w
(
o
, 
b
, 
c
);

723 
blkm≠
->
√¡s
 = 1;

726 
íç
 = &
blkm≠
->
íts
[blkm≠->
√¡s
 - 1];

727 
ít
 = *
íç
;

728 i‡(
ít
->
°¨toff
 +É¡->
nblks
 =
o
) {

729 
	`blkít_≠≥nd
(
íç
, 
b
, 
c
);

732 i‡(
ít
->
°¨toff
 +É¡->
nblks
 < 
o
) {

733 
ít
 = 
	`blkít_√w
(
o
, 
b
, 
c
);

734 
	`blkm≠_grow
(
blkm≠p
, &
blkm≠
->
íts
[blkm≠->
√¡s
], 
ít
);

737 
i
 = 0; i < 
c
; i++)

738 
	`blkm≠_£t_blk
(
blkm≠p
, 
o
 + 
i
, 
b
 + i);

739 
	}
}

742 
	$blkm≠_shrök
(

743 
blkm≠_t
 *
blkm≠
,

744 
blkít_t
 **
íç
)

746 
i
;

747 
idx
;

749 
	`x‰ì
(*
íç
);

750 
idx
 = ()(
íç
 - 
blkm≠
->
íts
);

751 
i
 = 
idx
 + 1; i < 
blkm≠
->
√¡s
; i++)

752 
blkm≠
->
íts
[
i
] = blkmap->ents[i - 1];

753 
blkm≠
->
√¡s
--;

754 
	}
}

758 
	$block‰ì_f
(

759 
¨gc
,

760 **
¨gv
)

762 
xfs_agnumbî_t
 
c
;

763 
π
;

765 i‡(!
dbm≠
) {

766 
	`db¥ötf
(
	`_
("block usage informationÇotállocated\n"));

769 
π
 = 
mp
->
m_sb
.
sb_ªxã¡s
 != 0;

770 
c
 = 0; c < 
mp
->
m_sb
.
sb_agcou¡
; c++) {

771 
	`x‰ì
(
dbm≠
[
c
]);

772 
	`x‰ì
(
öom≠
[
c
]);

773 
	`‰ì_öod©a
(
c
);

775 i‡(
π
) {

776 
	`x‰ì
(
dbm≠
[
c
]);

777 
	`x‰ì
(
öom≠
[
c
]);

778 
	`x‰ì
(
sumcompuã
);

779 
	`x‰ì
(
sumfûe
);

780 
sumcompuã
 = 
sumfûe
 = 
NULL
;

782 
	`x‰ì
(
dbm≠
);

783 
	`x‰ì
(
öom≠
);

784 
	`x‰ì
(
öod©a
);

785 
dbm≠
 = 
NULL
;

786 
öom≠
 = 
NULL
;

787 
öod©a
 = 
NULL
;

789 
	}
}

795 
	$blockgë_f
(

796 
¨gc
,

797 **
¨gv
)

799 
xfs_agnumbî_t
 
agno
;

800 
ﬁd¥efix
;

801 
sbyñl
;

803 i‡(
dbm≠
) {

804 
	`db¥ötf
(
	`_
("already have block usage information\n"));

808 i‡(!
	`öô
(
¨gc
, 
¨gv
)) {

809 i‡(
£rious_îr‹
)

810 
exôcode
 = 3;

812 
exôcode
 = 1;

815 
ﬁd¥efix
 = 
db¥efix
;

816 
db¥efix
 |
pÊag
;

817 
agno
 = 0, 
sbyñl
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

818 
	`sˇn_ag
(
agno
);

819 i‡(
sbvî_îr
 > 4 && !
sbyñl
 && sbvî_î∏>
agno
) {

820 
sbyñl
 = 1;

821 
	`db¥ötf
(
	`_
("WARNING:Åhis may beáÇewer XFS "

825 i‡(
bli°_size
) {

826 
	`x‰ì
(
bli°
);

827 
bli°
 = 
NULL
;

828 
bli°_size
 = 0;

830 i‡(
£rious_îr‹
) {

831 
exôcode
 = 2;

832 
db¥efix
 = 
ﬁd¥efix
;

835 
	`check_roŸdú
();

841 i‡(!
tÊag
) {

842 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++)

843 
	`checknŸ_dbm≠
(
agno
, 0, 
mp
->
m_sb
.
sb_agblocks
,

844 (1 << 
DBM_UNKNOWN
Ë| (1 << 
DBM_FREE1
));

846 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++)

847 
	`check_lökcou¡s
(
agno
);

848 i‡(
mp
->
m_sb
.
sb_rblocks
) {

849 
	`checknŸ_rdbm≠
(0,

850 (
xfs_exéí_t
)(
mp
->
m_sb
.
sb_ªxã¡s
 *

851 
mp
->
m_sb
.
sb_ªxtsize
),

852 1 << 
DBM_UNKNOWN
);

853 
	`check_summ¨y
();

855 i‡(
mp
->
m_sb
.
sb_icou¡
 !
icou¡
) {

856 i‡(!
sÊag
)

857 
	`db¥ötf
(
	`_
("sb_icount %lld, counted %lld\n"),

858 
mp
->
m_sb
.
sb_icou¡
, 
icou¡
);

859 
îr‹
++;

861 i‡(
mp
->
m_sb
.
sb_i‰ì
 !
i‰ì
) {

862 i‡(!
sÊag
)

863 
	`db¥ötf
(
	`_
("sb_ifree %lld, counted %lld\n"),

864 
mp
->
m_sb
.
sb_i‰ì
, 
i‰ì
);

865 
îr‹
++;

867 i‡(
mp
->
m_sb
.
sb_fdblocks
 !
fdblocks
) {

868 i‡(!
sÊag
)

869 
	`db¥ötf
(
	`_
("sb_fdblocks %lld, counted %lld\n"),

870 
mp
->
m_sb
.
sb_fdblocks
, 
fdblocks
);

871 
îr‹
++;

873 i‡(
œzycou¡
 && 
mp
->
m_sb
.
sb_fdblocks
 !
agf_aggr_‰ìblks
) {

874 i‡(!
sÊag
)

875 
	`db¥ötf
(
	`_
("sb_fdblocks %lld,ággregate AGF count %lld\n"),

876 
mp
->
m_sb
.
sb_fdblocks
, 
agf_aggr_‰ìblks
);

877 
îr‹
++;

879 i‡(
mp
->
m_sb
.
sb_‰exã¡s
 !
‰exã¡s
) {

880 i‡(!
sÊag
)

881 
	`db¥ötf
(
	`_
("sb_frextents %lld, counted %lld\n"),

882 
mp
->
m_sb
.
sb_‰exã¡s
, 
‰exã¡s
);

883 
îr‹
++;

885 i‡(
mp
->
m_sb
.
sb_bad_„©uªs2
 != 0 &&

886 
mp
->
m_sb
.
sb_bad_„©uªs2
 !mp->m_sb.
sb_„©uªs2
) {

887 i‡(!
sÊag
)

888 
	`db¥ötf
(
	`_
("sb_features2 (0x%x)Çot sameás "

890 
mp
->
m_sb
.
sb_„©uªs2
,

891 
mp
->
m_sb
.
sb_bad_„©uªs2
);

892 
îr‹
++;

894 i‡((
sbvîsi⁄
 & 
XFS_SB_VERSION_ATTRBIT
) &&

895 !
	`xfs_sb_vîsi⁄_haßâr
(&
mp
->
m_sb
)) {

896 i‡(!
sÊag
)

897 
	`db¥ötf
(
	`_
("sb versionnum missingáttr bit %x\n"),

898 
XFS_SB_VERSION_ATTRBIT
);

899 
îr‹
++;

901 i‡((
sbvîsi⁄
 & 
XFS_SB_VERSION_QUOTABIT
) &&

902 !
	`xfs_sb_vîsi⁄_hasquŸa
(&
mp
->
m_sb
)) {

903 i‡(!
sÊag
)

904 
	`db¥ötf
(
	`_
("sb versionnum missing quota bit %x\n"),

905 
XFS_SB_VERSION_QUOTABIT
);

906 
îr‹
++;

908 i‡(!(
sbvîsi⁄
 & 
XFS_SB_VERSION_ALIGNBIT
) &&

909 
	`xfs_sb_vîsi⁄_haßlign
(&
mp
->
m_sb
)) {

910 i‡(!
sÊag
)

911 
	`db¥ötf
(
	`_
("sb versionnumÉxtraálign bit %x\n"),

912 
XFS_SB_VERSION_ALIGNBIT
);

913 
îr‹
++;

915 i‡(
qudo
)

916 
	`quŸa_check
("u£r", 
qud©a
);

917 i‡(
qpdo
)

918 
	`quŸa_check
("¥oje˘", 
qpd©a
);

919 i‡(
qgdo
)

920 
	`quŸa_check
("group", 
qgd©a
);

921 i‡(
sbvî_îr
 > 
mp
->
m_sb
.
sb_agcou¡
 / 2)

922 
	`db¥ötf
(
	`_
("WARNING:Åhis may beáÇewer XFS filesystem.\n"));

923 i‡(
îr‹
)

924 
exôcode
 = 3;

925 
db¥efix
 = 
ﬁd¥efix
;

927 
	}
}

929 
	s…ab
 {

930 
	mmö
;

931 
	mmax
;

932 } 
	t…ab_t
;

935 
	$blockåash_b
(

936 
bô_off£t
,

937 
dbm_t
 
ty≥
,

938 
…ab_t
 *
…abp
,

939 
mode
)

941 
bô
;

942 
bôno
;

943 *
buf
;

944 
byã
;

945 
Àn
;

946 
mask
;

947 
√wbô
;

948 c⁄° 
xfs_buf_›s
 *
°ashed_›s
;

949 *
mode°r
[] = {

950 
	`N_
("zeroed"), N_("set"), N_("flipped"), N_("randomized")

952 
xfs_agnumbî_t
 
agno
;

953 
xfs_agblock_t
 
agbno
;

955 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
	`XFS_DADDR_TO_FSB
(mp, 
iocur_t›
->
bb
));

956 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
	`XFS_DADDR_TO_FSB
(mp, 
iocur_t›
->
bb
));

957 i‡(
iocur_t›
->
Àn
 == 0) {

958 
	`db¥ötf
(
	`_
("zero-length block %u/%u bufferÅoÅrash??\n"),

959 
agno
, 
agbno
);

962 
Àn
 = ()((
	`øndom
(Ë% (
…abp
->
max
 -Üèbp->
mö
 + 1)) +Ütabp->min);

967 i‡(
bô_off£t
 < 0) {

968 
bô_off£t
 = -(bit_offset + 1);

969 
bô_off£t
 +()(
	`øndom
(Ë% ()((
iocur_t›
->
Àn
 - bô_off£tË* 
NBBY
));

971 i‡(
bô_off£t
 + 
Àn
 >
iocur_t›
->À¿* 
NBBY
)

972 
Àn
 = (
iocur_t›
->À¿* 
NBBY
Ë- 
bô_off£t
;

973 
√wbô
 = 0;

974 
°ashed_›s
 = 
iocur_t›
->
bp
->
b_›s
;

975 
iocur_t›
->
bp
->
b_›s
 = 
NULL
;

976 i‡((
buf
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

977 
	`db¥ötf
(
	`_
("ˇn'àªad block %u/%u f‹Åøshög\n"), 
agno
, 
agbno
);

980 
bôno
 = 0; bônÿ< 
Àn
; bitno++) {

981 
bô
 = (
bô_off£t
 + 
bôno
Ë% (
mp
->
m_sb
.
sb_blocksize
 * 
NBBY
);

982 
byã
 = 
bô
 / 
NBBY
;

983 
bô
 %
NBBY
;

984 
mask
 = 1 << 
bô
;

985 
mode
) {

987 
√wbô
 = 0;

990 
√wbô
 = 1;

993 
√wbô
 = (
buf
[
byã
] & 
mask
) == 0;

996 
√wbô
 = ()
	`øndom
() & 1;

999 i‡(
√wbô
)

1000 
buf
[
byã
] |
mask
;

1002 
buf
[
byã
] &~
mask
;

1004 
	`wrôe_cur
();

1005 
iocur_t›
->
bp
->
b_›s
 = 
°ashed_›s
;

1006 
	`¥ötf
(
	`_
("blocktrash: %u/%u %s block %d bit%s starting %d:%d %s\n"),

1007 
agno
, 
agbno
, 
ty≥«me
[
ty≥
], 
Àn
,Üen == 1 ? "" : "s",

1008 
bô_off£t
 / 
NBBY
, bô_off£à% NBBY, 
mode°r
[
mode
]);

1009 
	}
}

1012 
	$blockåash_f
(

1013 
¨gc
,

1014 **
¨gv
)

1016 
xfs_agblock_t
 
agbno
;

1017 
xfs_agnumbî_t
 
agno
;

1018 
xfs_rfsblock_t
 
bi
;

1019 
xfs_rfsblock_t
 
blocks
;

1020 
c
;

1021 
cou¡
;

1022 
d⁄e
;

1023 
goodmask
;

1024 
i
;

1025 
…ab_t
 *
À¡ab
;

1026 
À¡abÀn
;

1027 
max
;

1028 
mö
;

1029 
mode
;

1030 
timevÆ
 
now
;

1031 *
p
;

1032 
xfs_rfsblock_t
 
øndb
;

1033 
uöt
 
£ed
;

1034 
s›t
;

1035 
tmask
;

1036 
boﬁ
 
this_block
 = 
Ál£
;

1037 
bô_off£t
 = -1;

1039 
›töd
 = 0;

1040 
cou¡
 = 1;

1041 
mö
 = 1;

1042 
max
 = 128 * 
NBBY
;

1043 
mode
 = 2;

1044 
	`gëtimeofday
(&
now
, 
NULL
);

1045 
£ed
 = ()(
now
.
tv_£c
 ^Çow.
tv_u£c
);

1046 
s›t
 = 0;

1047 
tmask
 = 0;

1048 
goodmask
 = (1 << 
DBM_AGF
) |

1049 (1 << 
DBM_AGFL
) |

1050 (1 << 
DBM_AGI
) |

1051 (1 << 
DBM_ATTR
) |

1052 (1 << 
DBM_BTBMAPA
) |

1053 (1 << 
DBM_BTBMAPD
) |

1054 (1 << 
DBM_BTBNO
) |

1055 (1 << 
DBM_BTCNT
) |

1056 (1 << 
DBM_BTINO
) |

1057 (1 << 
DBM_DIR
) |

1058 (1 << 
DBM_INODE
) |

1059 (1 << 
DBM_LOG
) |

1060 (1 << 
DBM_QUOTA
) |

1061 (1 << 
DBM_RTBITMAP
) |

1062 (1 << 
DBM_RTSUM
) |

1063 (1 << 
DBM_SYMLINK
) |

1064 (1 << 
DBM_BTFINO
) |

1065 (1 << 
DBM_BTRMAP
) |

1066 (1 << 
DBM_BTREFC
) |

1067 (1 << 
DBM_SB
);

1068 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "0123n:o:s:t:x:y:z")Ë!
EOF
) {

1069 
c
) {

1071 
mode
 = 0;

1074 
mode
 = 1;

1077 
mode
 = 2;

1080 
mode
 = 3;

1083 
cou¡
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

1084 i‡(*
p
 !'\0' || 
cou¡
 <= 0) {

1085 
	`db¥ötf
(
	`_
("bad blockåash cou¡ %s\n"), 
›èrg
);

1090 
ªœtive
 = 0;

1091 i‡(
›èrg
[0] == '+') {

1092 
›èrg
++;

1093 
ªœtive
 = 1;

1095 
bô_off£t
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

1096 i‡(*
p
 !'\0' || 
bô_off£t
 < 0) {

1097 
	`db¥ötf
(
	`_
("bad blockåash off£à%s\n"), 
›èrg
);

1100 i‡(
ªœtive
)

1101 
bô_off£t
 = -bit_offset - 1;

1105 
£ed
 = (
uöt
)
	`°πoul
(
›èrg
, &
p
, 0);

1106 
s›t
 = 1;

1109 
i
 = 0; 
ty≥«me
[i]; i++) {

1110 i‡(
	`°rcmp
(
ty≥«me
[
i
], 
›èrg
) == 0)

1113 i‡(!
ty≥«me
[
i
] || (((1 << iË& 
goodmask
) == 0)) {

1114 
	`db¥ötf
(
	`_
("bad blockåashÅy≥ %s\n"), 
›èrg
);

1117 
tmask
 |1 << 
i
;

1120 
mö
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

1121 i‡(*
p
 !'\0' || 
mö
 <= 0 ||

1122 
mö
 > 
mp
->
m_sb
.
sb_blocksize
 * 
NBBY
) {

1123 
	`db¥ötf
(
	`_
("bad blockåash mö %s\n"), 
›èrg
);

1128 
max
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

1129 i‡(*
p
 !'\0' || 
max
 <= 0 ||

1130 
max
 > 
mp
->
m_sb
.
sb_blocksize
 * 
NBBY
) {

1131 
	`db¥ötf
(
	`_
("bad blockåash max %s\n"), 
›èrg
);

1136 
this_block
 = 
åue
;

1139 
	`db¥ötf
(
	`_
("bad option for blocktrash command\n"));

1143 i‡(!
this_block
 && !
dbm≠
) {

1144 
	`db¥ötf
(
	`_
("mustÑun blockget first\n"));

1147 i‡(
this_block
 && 
iocur_•
 == 0) {

1148 
	`db¥ötf
(
	`_
("nothing on stack\n"));

1151 i‡(
mö
 > 
max
) {

1152 
	`db¥ötf
(
	`_
("bad min/max for blocktrash command\n"));

1155 i‡(
tmask
 == 0)

1156 
tmask
 = 
goodmask
 & ~((1 << 
DBM_LOG
Ë| (1 << 
DBM_SB
));

1157 
À¡ab
 = 
	`xmÆloc
((
…ab_t
));

1158 
À¡ab
->
mö
 =Üíèb->
max
 = min;

1159 
À¡abÀn
 = 1;

1160 
i
 = 
mö
 + 1; i <
max
; i++) {

1161 i‡((
i
 & (i - 1)) == 0) {

1162 
À¡ab
 = 
	`xªÆloc
(lentab,

1163 (
…ab_t
Ë* (
À¡abÀn
 + 1));

1164 
À¡ab
[
À¡abÀn
].
mö
 =Üíèb[À¡abÀn].
max
 = 
i
;

1165 
À¡abÀn
++;

1167 
À¡ab
[
À¡abÀn
 - 1].
max
 = 
i
;

1169 i‡(!
s›t
)

1170 
	`db¥ötf
(
	`_
("blockåash: sìd %u\n"), 
£ed
);

1171 
	`§™dom
(
£ed
);

1172 i‡(
this_block
) {

1173 
	`blockåash_b
(
bô_off£t
, 
DBM_UNKNOWN
,

1174 &
À¡ab
[
	`øndom
(Ë% 
À¡abÀn
], 
mode
);

1175 
out
;

1177 
blocks
 = 0, 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

1178 
agbno
 = 0, 
p
 = 
dbm≠
[
agno
];

1179 
agbno
 < 
mp
->
m_sb
.
sb_agblocks
;

1180 
agbno
++, 
p
++) {

1181 i‡((1 << *
p
Ë& 
tmask
)

1182 
blocks
++;

1185 i‡(
blocks
 == 0) {

1186 
	`db¥ötf
(
	`_
("blocktrash:Ço matching blocks\n"));

1187 
out
;

1189 
i
 = 0; i < 
cou¡
; i++) {

1190 
øndb
 = (
xfs_rfsblock_t
)((((
__öt64_t
)
	`øndom
() << 32) |

1191 
	`øndom
()Ë% 
blocks
);

1192 
bi
 = 0, 
agno
 = 0, 
d⁄e
 = 0;

1193 !
d⁄e
 && 
agno
 < 
mp
->
m_sb
.
sb_agcou¡
;

1194 
agno
++) {

1195 
agbno
 = 0, 
p
 = 
dbm≠
[
agno
];

1196 
agbno
 < 
mp
->
m_sb
.
sb_agblocks
;

1197 
agbno
++, 
p
++) {

1198 i‡(!((1 << *
p
Ë& 
tmask
))

1200 i‡(
bi
++ < 
øndb
)

1202 
	`push_cur
();

1203 
	`£t_cur
(
NULL
,

1204 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

1205 
blkbb
, 
DB_RING_IGN
, 
NULL
);

1206 
	`blockåash_b
(
bô_off£t
, (
dbm_t
)*
p
,

1207 &
À¡ab
[
	`øndom
(Ë% 
À¡abÀn
], 
mode
);

1208 
	`p›_cur
();

1209 
d⁄e
 = 1;

1214 
out
:

1215 
	`x‰ì
(
À¡ab
);

1217 
	}
}

1220 
	$blocku£_f
(

1221 
¨gc
,

1222 **
¨gv
)

1224 
xfs_agblock_t
 
agbno
;

1225 
xfs_agnumbî_t
 
agno
;

1226 
c
;

1227 
cou¡
;

1228 
xfs_agblock_t
 
íd
;

1229 
xfs_fsblock_t
 
fsb
;

1230 
öod©a_t
 *
i
;

1231 *
p
;

1232 
show«mes
;

1234 i‡(!
dbm≠
) {

1235 
	`db¥ötf
(
	`_
("mustÑun blockget first\n"));

1238 
›töd
 = 0;

1239 
show«mes
 = 0;

1240 
fsb
 = 
	`XFS_DADDR_TO_FSB
(
mp
, 
iocur_t›
->
off
 >> 
BBSHIFT
);

1241 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
fsb
);

1242 
íd
 = 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
fsb
);

1243 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:n")Ë!
EOF
) {

1244 
c
) {

1246 
cou¡
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

1247 
íd
 = 
agbno
 + 
cou¡
 - 1;

1248 i‡(*
p
 !'\0' || 
cou¡
 <= 0 ||

1249 
íd
 >
mp
->
m_sb
.
sb_agblocks
) {

1250 
	`db¥ötf
(
	`_
("bad blocku£ cou¡ %s\n"), 
›èrg
);

1255 i‡(!
nÊag
) {

1256 
	`db¥ötf
(
	`_
("mustÑun blockget -n first\n"));

1259 
show«mes
 = 1;

1262 
	`db¥ötf
(
	`_
("bad option for blockuse command\n"));

1266 
agbno
 <
íd
) {

1267 
p
 = &
dbm≠
[
agno
][
agbno
];

1268 
i
 = 
öom≠
[
agno
][
agbno
];

1269 
	`db¥ötf
(
	`_
("block %llu (%u/%u)Åype %s"),

1270 (
xfs_fsblock_t
)
	`XFS_AGB_TO_FSB
(
mp
, 
agno
, 
agbno
),

1271 
agno
, 
agbno
, 
ty≥«me
[(
dbm_t
)*
p
]);

1272 i‡(
i
) {

1273 
	`db¥ötf
(
	`_
(" inodê%Œd"), 
i
->
öo
);

1274 i‡(
show«mes
 && (
p
 = 
	`öode_«me
(
i
->
öo
, 
NULL
))) {

1275 
	`db¥ötf
(" %s", 
p
);

1276 
	`x‰ì
(
p
);

1279 
	`db¥ötf
("\n");

1280 
agbno
++;

1283 
	}
}

1286 
	$check_bli°
(

1287 
xfs_fsblock_t
 
bno
)

1289 
i
;

1291 
i
 = 0; i < 
bli°_size
; i++) {

1292 i‡(
bli°
[
i
] =
bno
)

1296 
	}
}

1299 
	$check_dbm≠
(

1300 
xfs_agnumbî_t
 
agno
,

1301 
xfs_agblock_t
 
agbno
,

1302 
xfs_exéí_t
 
Àn
,

1303 
dbm_t
 
ty≥
,

1304 
ign‹e_ªÊök
)

1306 
xfs_exéí_t
 
i
;

1307 *
p
;

1308 
dbm_t
 
d
;

1310 
i
 = 0, 
p
 = &
dbm≠
[
agno
][
agbno
]; i < 
Àn
; i++,Ö++) {

1311 
d
 = (
dbm_t
)*
p
;

1312 i‡(
ign‹e_ªÊök
 && (
d
 =
DBM_UNKNOWN
 || d =
DBM_DATA
 ||

1313 
d
 =
DBM_RLDATA
))

1315 i‡((
dbm_t
)*
p
 !
ty≥
) {

1316 i‡(!
sÊag
 || 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
)) {

1317 
	`db¥ötf
(
	`_
("block %u/%uÉxpectedÅype %s got "

1319 
agno
, 
agbno
 + 
i
, 
ty≥«me
[
ty≥
],

1320 
ty≥«me
[(
dbm_t
)*
p
]);

1322 
îr‹
++;

1325 
	}
}

1328 
	$check_öô
()

1330 
	`add_comm™d
(&
block‰ì_cmd
);

1331 
	`add_comm™d
(&
blockgë_cmd
);

1332 i‡(
ex≥π_mode
)

1333 
	`add_comm™d
(&
blockåash_cmd
);

1334 
	`add_comm™d
(&
blocku£_cmd
);

1335 
	`add_comm™d
(&
ncheck_cmd
);

1336 
	}
}

1339 
	$check_öom≠
(

1340 
xfs_agnumbî_t
 
agno
,

1341 
xfs_agblock_t
 
agbno
,

1342 
xfs_exéí_t
 
Àn
,

1343 
xfs_öo_t
 
c_öo
)

1345 
xfs_exéí_t
 
i
;

1346 
öod©a_t
 **
idp
;

1347 
rvÆ
;

1349 i‡(!
	`check_ønge
(
agno
, 
agbno
, 
Àn
)) {

1350 
	`db¥ötf
(
	`_
("blocks %u/%u..%u claimed by inode %lld\n"),

1351 
agno
, 
agbno
,ágbnÿ+ 
Àn
 - 1, 
c_öo
);

1354 
i
 = 0, 
rvÆ
 = 1, 
idp
 = &
öom≠
[
agno
][
agbno
]; i < 
Àn
; i++, idp++) {

1355 i‡(*
idp
 && !(*idp)->
i§eÊök
) {

1356 i‡(!
sÊag
 || (*
idp
)->
ûi°
 ||

1357 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
))

1358 
	`db¥ötf
(
	`_
("block %u/%u claimed by inode %lld, "

1360 
agno
, 
agbno
 + 
i
, 
c_öo
, (*
idp
)->
öo
);

1361 
îr‹
++;

1362 
rvÆ
 = 0;

1365  
rvÆ
;

1366 
	}
}

1369 
	$check_lökcou¡s
(

1370 
xfs_agnumbî_t
 
agno
)

1372 
öod©a_t
 *
ï
;

1373 
öod©a_t
 **
ht
;

1374 
idx
;

1375 *
∑th
;

1377 
ht
 = 
öod©a
[
agno
];

1378 
idx
 = 0; idx < 
öod©a_hash_size
; 
ht
++, idx++) {

1379 
ï
 = *
ht
;

1380 
ï
) {

1381 i‡(
ï
->
lök_£t
 !ï->
lök_add
 ||Ép->link_set == 0) {

1382 
∑th
 = 
	`öode_«me
(
ï
->
öo
, 
NULL
);

1383 i‡(!
∑th
 && 
ï
->
lök_add
)

1384 
∑th
 = 
	`x°rdup
("?");

1385 i‡(!
sÊag
 || 
ï
->
ûi°
) {

1386 i‡(
ï
->
lök_add
)

1387 
	`db¥ötf
(
	`_
("link count mismatch "

1391 
ï
->
öo
, 
∑th
,

1392 
ï
->
lök_£t
,

1393 
ï
->
lök_add
);

1394 i‡(
ï
->
lök_£t
)

1395 
	`db¥ötf
(
	`_
("disconnected inode "

1397 
ï
->
öo
,Ép->
lök_£t
);

1399 
	`db¥ötf
(
	`_
("allocated inode %lld "

1401 
ï
->
öo
);

1403 i‡(
∑th
)

1404 
	`x‰ì
(
∑th
);

1405 
îr‹
++;

1406 } i‡(
vîbo£
 || 
ï
->
ûi°
) {

1407 
∑th
 = 
	`öode_«me
(
ï
->
öo
, 
NULL
);

1408 i‡(
∑th
) {

1409 
	`db¥ötf
(
	`_
("inode %lldÇame %s\n"),

1410 
ï
->
öo
, 
∑th
);

1411 
	`x‰ì
(
∑th
);

1414 
ï
 =Ép->
√xt
;

1418 
	}
}

1421 
	$check_ønge
(

1422 
xfs_agnumbî_t
 
agno
,

1423 
xfs_agblock_t
 
agbno
,

1424 
xfs_exéí_t
 
Àn
)

1426 
xfs_exéí_t
 
i
;

1427 
xfs_agblock_t
 
low
 = 0;

1428 
xfs_agblock_t
 
high
 = 0;

1429 
vÆid_ønge
 = 0;

1430 
cur
, 
¥ev
 = 0;

1432 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 ||

1433 
agbno
 + 
Àn
 - 1 >
mp
->
m_sb
.
sb_agblocks
) {

1434 
i
 = 0; i < 
Àn
; i++) {

1435 
cur
 = !
sÊag
 || 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
) ? 1 : 0;

1436 i‡(
cur
 =1 && 
¥ev
 == 0) {

1437 
low
 = 
high
 = 
agbno
 + 
i
;

1438 
vÆid_ønge
 = 1;

1439 } i‡(
cur
 =0 && 
¥ev
 == 0) {

1441 } i‡(
cur
 =0 && 
¥ev
 == 1) {

1442 i‡(
low
 =
high
) {

1443 
	`db¥ötf
(
	`_
("block %u/%u out ofÑange\n"),

1444 
agno
, 
low
);

1446 
	`db¥ötf
(
	`_
("blocks %u/%u..%u "

1448 
agno
, 
low
, 
high
);

1450 
vÆid_ønge
 = 0;

1451 } i‡(
cur
 =1 && 
¥ev
 == 1) {

1452 
high
 = 
agbno
 + 
i
;

1454 
¥ev
 = 
cur
;

1456 i‡(
vÆid_ønge
) {

1457 i‡(
low
 =
high
) {

1458 
	`db¥ötf
(
	`_
("block %u/%u out ofÑange\n"),

1459 
agno
, 
low
);

1461 
	`db¥ötf
(
	`_
("blocks %u/%u..%u "

1463 
agno
, 
low
, 
high
);

1466 
îr‹
++;

1470 
	}
}

1473 
	$check_rdbm≠
(

1474 
xfs_rfsblock_t
 
bno
,

1475 
xfs_exéí_t
 
Àn
,

1476 
dbm_t
 
ty≥
)

1478 
xfs_exéí_t
 
i
;

1479 *
p
;

1481 
i
 = 0, 
p
 = &
dbm≠
[
mp
->
m_sb
.
sb_agcou¡
][
bno
]; i < 
Àn
; i++,Ö++) {

1482 i‡((
dbm_t
)*
p
 !
ty≥
) {

1483 i‡(!
sÊag
 || 
	`CHECK_BLIST
(
bno
 + 
i
))

1484 
	`db¥ötf
(
	`_
("rtblock %lluÉxpectedÅype %s got "

1486 
bno
 + 
i
, 
ty≥«me
[
ty≥
],

1487 
ty≥«me
[(
dbm_t
)*
p
]);

1488 
îr‹
++;

1491 
	}
}

1494 
	$check_röom≠
(

1495 
xfs_rfsblock_t
 
bno
,

1496 
xfs_exéí_t
 
Àn
,

1497 
xfs_öo_t
 
c_öo
)

1499 
xfs_exéí_t
 
i
;

1500 
öod©a_t
 **
idp
;

1501 
rvÆ
;

1503 i‡(!
	`check_º™ge
(
bno
, 
Àn
)) {

1504 
	`db¥ötf
(
	`_
("rtblocks %llu..%llu claimed by inode %lld\n"),

1505 
bno
, bnÿ+ 
Àn
 - 1, 
c_öo
);

1508 
i
 = 0, 
rvÆ
 = 1, 
idp
 = &
öom≠
[
mp
->
m_sb
.
sb_agcou¡
][
bno
];

1509 
i
 < 
Àn
;

1510 
i
++, 
idp
++) {

1511 i‡(*
idp
) {

1512 i‡(!
sÊag
 || (*
idp
)->
ûi°
 || 
	`CHECK_BLIST
(
bno
 + 
i
))

1513 
	`db¥ötf
(
	`_
("rtblock %llu claimed by inode %lld, "

1515 
bno
 + 
i
, 
c_öo
, (*
idp
)->
öo
);

1516 
îr‹
++;

1517 
rvÆ
 = 0;

1520  
rvÆ
;

1521 
	}
}

1524 
	$check_roŸdú
()

1526 
öod©a_t
 *
id
;

1528 
id
 = 
	`föd_öode
(
mp
->
m_sb
.
sb_roŸöo
, 0);

1529 i‡(
id
 =
NULL
) {

1530 i‡(!
sÊag
)

1531 
	`db¥ötf
(
	`_
("root inode %lld is missing\n"),

1532 
mp
->
m_sb
.
sb_roŸöo
);

1533 
îr‹
++;

1534 } i‡(!
id
->
isdú
) {

1535 i‡(!
sÊag
 || 
id
->
ûi°
)

1536 
	`db¥ötf
(
	`_
("root inode %lld isÇotá directory\n"),

1537 
mp
->
m_sb
.
sb_roŸöo
);

1538 
îr‹
++;

1540 
	}
}

1543 
	$check_º™ge
(

1544 
xfs_rfsblock_t
 
bno
,

1545 
xfs_exéí_t
 
Àn
)

1547 
xfs_exéí_t
 
i
;

1549 i‡(
bno
 + 
Àn
 - 1 >
mp
->
m_sb
.
sb_rblocks
) {

1550 
i
 = 0; i < 
Àn
; i++) {

1551 i‡(!
sÊag
 || 
	`CHECK_BLIST
(
bno
 + 
i
))

1552 
	`db¥ötf
(
	`_
("rtblock %llu out ofÑange\n"),

1553 
bno
 + 
i
);

1555 
îr‹
++;

1559 
	}
}

1570 
boﬁ


1571 
	$is_ªÊök
(

1572 
dbm_t
 
ty≥2
)

1574 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

1575  
Ál£
;

1576 i‡(
ty≥2
 =
DBM_DATA
 ||Åy≥2 =
DBM_RLDATA
)

1577  
åue
;

1578  
Ál£
;

1579 
	}
}

1582 
	$check_£t_dbm≠
(

1583 
xfs_agnumbî_t
 
agno
,

1584 
xfs_agblock_t
 
agbno
,

1585 
xfs_exéí_t
 
Àn
,

1586 
dbm_t
 
ty≥1
,

1587 
dbm_t
 
ty≥2
,

1588 
xfs_agnumbî_t
 
c_agno
,

1589 
xfs_agblock_t
 
c_agbno
)

1591 
xfs_exéí_t
 
i
;

1592 
may¥öt
;

1593 *
p
;

1595 i‡(!
	`check_ønge
(
agno
, 
agbno
, 
Àn
)) {

1596 
	`db¥ötf
(
	`_
("block†%u/%u..%u cœimed by block %u/%u\n"), 
agno
,

1597 
agbno
,ágbnÿ+ 
Àn
 - 1, 
c_agno
, 
c_agbno
);

1600 
	`check_dbm≠
(
agno
, 
agbno
, 
Àn
, 
ty≥1
, 
	`is_ªÊök
(
ty≥2
));

1601 
may¥öt
 = 
vîbo£
 | 
bli°_size
;

1602 
i
 = 0, 
p
 = &
dbm≠
[
agno
][
agbno
]; i < 
Àn
; i++,Ö++) {

1603 i‡(*
p
 =
DBM_RLDATA
 && 
ty≥2
 =
DBM_DATA
)

1605 i‡(*
p
 =
DBM_DATA
 && 
ty≥2
 == DBM_DATA)

1606 *
p
 = ()
DBM_RLDATA
;

1608 *
p
 = ()
ty≥2
;

1609 i‡(
may¥öt
 && (
vîbo£
 || 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
)))

1610 
	`db¥ötf
(
	`_
("£âög block %u/%uÅÿ%s\n"), 
agno
, 
agbno
 + 
i
,

1611 
ty≥«me
[
ty≥2
]);

1613 
	}
}

1616 
	$check_£t_rdbm≠
(

1617 
xfs_rfsblock_t
 
bno
,

1618 
xfs_exéí_t
 
Àn
,

1619 
dbm_t
 
ty≥1
,

1620 
dbm_t
 
ty≥2
)

1622 
xfs_exéí_t
 
i
;

1623 
may¥öt
;

1624 *
p
;

1626 i‡(!
	`check_º™ge
(
bno
, 
Àn
))

1628 
	`check_rdbm≠
(
bno
, 
Àn
, 
ty≥1
);

1629 
may¥öt
 = 
vîbo£
 | 
bli°_size
;

1630 
i
 = 0, 
p
 = &
dbm≠
[
mp
->
m_sb
.
sb_agcou¡
][
bno
]; i < 
Àn
; i++,Ö++) {

1631 *
p
 = ()
ty≥2
;

1632 i‡(
may¥öt
 && (
vîbo£
 || 
	`CHECK_BLIST
(
bno
 + 
i
)))

1633 
	`db¥ötf
(
	`_
("settingÑtblock %lluÅo %s\n"),

1634 
bno
 + 
i
, 
ty≥«me
[
ty≥2
]);

1636 
	}
}

1639 
	$check_summ¨y
()

1641 
xfs_rfsblock_t
 
bno
;

1642 
xfs_sumöfo_t
 *
c•
;

1643 
xfs_sumöfo_t
 *
f•
;

1644 
log
;

1646 
c•
 = 
sumcompuã
;

1647 
f•
 = 
sumfûe
;

1648 
log
 = 0;Üog < 
mp
->
m_rsumÀvñs
;Üog++) {

1649 
bno
 = 0;

1650 
bno
 < 
mp
->
m_sb
.
sb_rbmblocks
;

1651 
bno
++, 
c•
++, 
f•
++) {

1652 i‡(*
c•
 !*
f•
) {

1653 i‡(!
sÊag
)

1654 
	`db¥ötf
(
	`_
("rt summary mismatch, size %d "

1657 
log
, 
bno
, *
f•
, *
c•
);

1658 
îr‹
++;

1662 
	}
}

1665 
	$checknŸ_dbm≠
(

1666 
xfs_agnumbî_t
 
agno
,

1667 
xfs_agblock_t
 
agbno
,

1668 
xfs_exéí_t
 
Àn
,

1669 
ty≥mask
)

1671 
xfs_exéí_t
 
i
;

1672 *
p
;

1674 i‡(!
	`check_ønge
(
agno
, 
agbno
, 
Àn
))

1676 
i
 = 0, 
p
 = &
dbm≠
[
agno
][
agbno
]; i < 
Àn
; i++,Ö++) {

1677 i‡((1 << *
p
Ë& 
ty≥mask
) {

1678 i‡(!
sÊag
 || 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
))

1679 
	`db¥ötf
(
	`_
("block %u/%uÅype %sÇotÉxpected\n"),

1680 
agno
, 
agbno
 + 
i
, 
ty≥«me
[(
dbm_t
)*
p
]);

1681 
îr‹
++;

1684 
	}
}

1687 
	$checknŸ_rdbm≠
(

1688 
xfs_rfsblock_t
 
bno
,

1689 
xfs_exéí_t
 
Àn
,

1690 
ty≥mask
)

1692 
xfs_exéí_t
 
i
;

1693 *
p
;

1695 i‡(!
	`check_º™ge
(
bno
, 
Àn
))

1697 
i
 = 0, 
p
 = &
dbm≠
[
mp
->
m_sb
.
sb_agcou¡
][
bno
]; i < 
Àn
; i++,Ö++) {

1698 i‡((1 << *
p
Ë& 
ty≥mask
) {

1699 i‡(!
sÊag
 || 
	`CHECK_BLIST
(
bno
 + 
i
))

1700 
	`db¥ötf
(
	`_
("rtblock %lluÅype %sÇotÉxpected\n"),

1701 
bno
 + 
i
, 
ty≥«me
[(
dbm_t
)*
p
]);

1702 
îr‹
++;

1705 
	}
}

1708 
	$dú_hash_add
(

1709 
xfs_dahash_t
 
hash
,

1710 
xfs_dú2_d©≠å_t
 
addr
)

1712 
i
;

1713 
dúhash_t
 *
p
;

1715 
i
 = 
	`DIR_HASH_FUNC
(
hash
, 
addr
);

1716 
p
 = 
	`mÆloc
((*p));

1717 
p
->
√xt
 = 
dúhash
[
i
];

1718 
dúhash
[
i
] = 
p
;

1719 
p
->
hashvÆ
 = 
hash
;

1720 
p
->
addªss
 = 
addr
;

1721 
p
->
£í
 = 0;

1722 
	}
}

1725 
	$dú_hash_check
(

1726 
öod©a_t
 *
id
,

1727 
v
)

1729 
i
;

1730 
dúhash_t
 *
p
;

1732 
i
 = 0; i < 
DIR_HASH_SIZE
; i++) {

1733 
p
 = 
dúhash
[
i
];Ö;Ö =Ö->
√xt
) {

1734 i‡(
p
->
£í
)

1736 i‡(!
sÊag
 || 
id
->
ûi°
 || 
v
)

1737 
	`db¥ötf
(
	`_
("dir ino %lld missingÜeafÉntry for "

1739 
id
->
öo
, 
p
->
hashvÆ
,Ö->
addªss
);

1740 
îr‹
++;

1743 
	}
}

1746 
	$dú_hash_d⁄e
()

1748 
i
;

1749 
dúhash_t
 *
n
;

1750 
dúhash_t
 *
p
;

1752 
i
 = 0; i < 
DIR_HASH_SIZE
; i++) {

1753 
p
 = 
dúhash
[
i
];Ö;Ö = 
n
) {

1754 
n
 = 
p
->
√xt
;

1755 
	`‰ì
(
p
);

1757 
dúhash
[
i
] = 
NULL
;

1759 
	}
}

1762 
	$dú_hash_öô
()

1764 i‡(!
dúhash
)

1765 
dúhash
 = 
	`ˇŒoc
(
DIR_HASH_SIZE
, (*dirhash));

1766 
	}
}

1769 
	$dú_hash_£e
(

1770 
xfs_dahash_t
 
hash
,

1771 
xfs_dú2_d©≠å_t
 
addr
)

1773 
i
;

1774 
dúhash_t
 *
p
;

1776 
i
 = 
	`DIR_HASH_FUNC
(
hash
, 
addr
);

1777 
p
 = 
dúhash
[
i
];Ö;Ö =Ö->
√xt
) {

1778 i‡(
p
->
hashvÆ
 =
hash
 &&Ö->
addªss
 =
addr
) {

1779 i‡(
p
->
£í
)

1781 
p
->
£í
 = 1;

1786 
	}
}

1788 
öod©a_t
 *

1789 
	$föd_öode
(

1790 
xfs_öo_t
 
öo
,

1791 
add
)

1793 
xfs_agöo_t
 
agöo
;

1794 
xfs_agnumbî_t
 
agno
;

1795 
öod©a_t
 *
ít
;

1796 
öod©a_t
 **
hèb
;

1797 
xfs_agöo_t
 
ih
;

1799 
agno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
öo
);

1800 
agöo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
);

1801 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 ||

1802 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
Ë!
öo
)

1803  
NULL
;

1804 
hèb
 = 
öod©a
[
agno
];

1805 
ih
 = 
agöo
 % 
öod©a_hash_size
;

1806 
ít
 = 
hèb
[
ih
];

1807 
ít
) {

1808 i‡(
ít
->
öo
 == ino)

1809  
ít
;

1810 
ít
 =É¡->
√xt
;

1812 i‡(!
add
)

1813  
NULL
;

1814 
ít
 = 
	`xˇŒoc
(1, (*ent));

1815 
ít
->
öo
 = ino;

1816 
ít
->
√xt
 = 
hèb
[
ih
];

1817 
hèb
[
ih
] = 
ít
;

1818  
ít
;

1819 
	}
}

1822 
	$‰ì_öod©a
(

1823 
xfs_agnumbî_t
 
agno
)

1825 
öod©a_t
 *
hp
;

1826 
öod©a_t
 **
ht
;

1827 
i
;

1828 
öod©a_t
 *
√xt
;

1830 
ht
 = 
öod©a
[
agno
];

1831 
i
 = 0; i < 
öod©a_hash_size
; i++) {

1832 
hp
 = 
ht
[
i
];

1833 
hp
) {

1834 
√xt
 = 
hp
->next;

1835 i‡(
hp
->
«me
)

1836 
	`x‰ì
(
hp
->
«me
);

1837 
	`x‰ì
(
hp
);

1838 
hp
 = 
√xt
;

1841 
	`x‰ì
(
ht
);

1842 
	}
}

1845 
	$öô
(

1846 
¨gc
,

1847 **
¨gv
)

1849 
xfs_fsblock_t
 
bno
;

1850 
c
;

1851 
xfs_öo_t
 
öo
;

1852 
π
;

1854 
£rious_îr‹
 = 0;

1855 i‡(
mp
->
m_sb
.
sb_magi˙um
 !
XFS_SB_MAGIC
) {

1856 
	`db¥ötf
(
	`_
("bad superblock magicÇumber %x, giving up\n"),

1857 
mp
->
m_sb
.
sb_magi˙um
);

1858 
£rious_îr‹
 = 1;

1861 i‡(!
	`sb_logcheck
())

1863 
π
 = 
mp
->
m_sb
.
sb_ªxã¡s
 != 0;

1864 
dbm≠
 = 
	`xmÆloc
((
mp
->
m_sb
.
sb_agcou¡
 + 
π
) * (*dbmap));

1865 
öom≠
 = 
	`xmÆloc
((
mp
->
m_sb
.
sb_agcou¡
 + 
π
) * (*inomap));

1866 
öod©a
 = 
	`xmÆloc
(
mp
->
m_sb
.
sb_agcou¡
 * (*inodata));

1867 
öod©a_hash_size
 =

1868 ()
	`MAX
(
	`MIN
(
mp
->
m_sb
.
sb_icou¡
 /

1869 (
INODATA_AVG_HASH_LENGTH
 * 
mp
->
m_sb
.
sb_agcou¡
),

1870 
MAX_INODATA_HASH_SIZE
),

1871 
MIN_INODATA_HASH_SIZE
);

1872 
c
 = 0; c < 
mp
->
m_sb
.
sb_agcou¡
; c++) {

1873 
dbm≠
[
c
] = 
	`xˇŒoc
(
mp
->
m_sb
.
sb_agblocks
, (**dbmap));

1874 
öom≠
[
c
] = 
	`xˇŒoc
(
mp
->
m_sb
.
sb_agblocks
, (**inomap));

1875 
öod©a
[
c
] = 
	`xˇŒoc
(
öod©a_hash_size
, (**inodata));

1877 i‡(
π
) {

1878 
dbm≠
[
c
] = 
	`xˇŒoc
(
mp
->
m_sb
.
sb_rblocks
, (**dbmap));

1879 
öom≠
[
c
] = 
	`xˇŒoc
(
mp
->
m_sb
.
sb_rblocks
, (**inomap));

1880 
sumfûe
 = 
	`xˇŒoc
(
mp
->
m_rsumsize
, 1);

1881 
sumcompuã
 = 
	`xˇŒoc
(
mp
->
m_rsumsize
, 1);

1883 
nÊag
 = 
sÊag
 = 
tÊag
 = 
vîbo£
 = 
›töd
 = 0;

1884 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "b:i:≈°v")Ë!
EOF
) {

1885 
c
) {

1887 
bno
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 10);

1888 
	`add_bli°
(
bno
);

1891 
öo
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 10);

1892 
	`add_ûi°
(
öo
);

1895 
nÊag
 = 1;

1898 
pÊag
 = 1;

1901 
sÊag
 = 1;

1904 
tÊag
 = 1;

1907 
vîbo£
 = 1;

1910 
	`db¥ötf
(
	`_
("bad option for blockget command\n"));

1914 
îr‹
 = 
sbvî_îr
 = 
£rious_îr‹
 = 0;

1915 
fdblocks
 = 
‰exã¡s
 = 
icou¡
 = 
i‰ì
 = 0;

1916 
sbvîsi⁄
 = 
XFS_SB_VERSION_4
;

1921 i‡(
mp
->
m_sb
.
sb_öﬂlignmt
 ||

1922 (
	`xfs_sb_vîsi⁄_haßlign
(&
mp
->
m_sb
) &&

1923 
mp
->
m_sb
.
sb_ö›block
 >
XFS_INODES_PER_CHUNK
))

1924 
sbvîsi⁄
 |
XFS_SB_VERSION_ALIGNBIT
;

1925 i‡((
mp
->
m_sb
.
sb_uquŸöo
 && mp->m_sb.sb_uquŸöÿ!
NULLFSINO
) ||

1926 (
mp
->
m_sb
.
sb_gquŸöo
 && mp->m_sb.sb_gquŸöÿ!
NULLFSINO
) ||

1927 (
mp
->
m_sb
.
sb_pquŸöo
 && mp->m_sb.sb_pquŸöÿ!
NULLFSINO
))

1928 
sbvîsi⁄
 |
XFS_SB_VERSION_QUOTABIT
;

1929 
	`quŸa_öô
();

1931 
	}
}

1934 
	$öode_«me
(

1935 
xfs_öo_t
 
öo
,

1936 
öod©a_t
 **
ùp
)

1938 
öod©a_t
 *
id
;

1939 *
≈©h
;

1940 *
∑th
;

1942 
id
 = 
	`föd_öode
(
öo
, 0);

1943 i‡(
ùp
)

1944 *
ùp
 = 
id
;

1945 i‡(
id
 =
NULL
)

1946  
NULL
;

1947 i‡(
id
->
«me
 =
NULL
)

1948  
NULL
;

1949 
∑th
 = 
	`x°rdup
(
id
->
«me
);

1950 
id
->
∑ª¡
) {

1951 
id
 = id->
∑ª¡
;

1952 i‡(
id
->
«me
 =
NULL
)

1954 
≈©h
 = 
	`¥ïíd_∑th
(
∑th
, 
id
->
«me
);

1955 
	`x‰ì
(
∑th
);

1956 
∑th
 = 
≈©h
;

1958  
∑th
;

1959 
	}
}

1962 
	$ncheck_f
(

1963 
¨gc
,

1964 **
¨gv
)

1966 
xfs_agnumbî_t
 
agno
;

1967 
c
;

1968 
öod©a_t
 *
hp
;

1969 
öod©a_t
 **
ht
;

1970 
i
;

1971 
öod©a_t
 *
id
;

1972 
xfs_öo_t
 *
ûi°
;

1973 
ûi°_size
;

1974 
xfs_öo_t
 *
ûp
;

1975 
xfs_öo_t
 
öo
;

1976 *
p
;

1977 
£curôy
;

1979 i‡(!
öod©a
 || !
nÊag
) {

1980 
	`db¥ötf
(
	`_
("mustÑun blockget -n first\n"));

1983 
£curôy
 = 
›töd
 = 
ûi°_size
 = 0;

1984 
ûi°
 = 
NULL
;

1985 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "i:s")Ë!
EOF
) {

1986 
c
) {

1988 
öo
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 10);

1989 
ûi°
 = 
	`xªÆloc
(ûi°, (
ûi°_size
 + 1) *

1990 (*
ûi°
));

1991 
ûi°
[
ûi°_size
++] = 
öo
;

1994 
£curôy
 = 1;

1997 
	`db¥ötf
(
	`_
("bad o±i⁄ -%¯f‹Çcheck comm™d\n"), 
c
);

1998 
	`x‰ì
(
ûi°
);

2002 i‡(
ûi°
) {

2003 
ûp
 = 
ûi°
; iÕ < &ûi°[
ûi°_size
]; ilp++) {

2004 
öo
 = *
ûp
;

2005 i‡((
p
 = 
	`öode_«me
(
öo
, &
hp
))) {

2006 
	`db¥ötf
("%11Œu %s", 
öo
, 
p
);

2007 i‡(
hp
->
isdú
)

2008 
	`db¥ötf
("/.");

2009 
	`db¥ötf
("\n");

2010 
	`x‰ì
(
p
);

2013 
	`x‰ì
(
ûi°
);

2016 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

2017 
ht
 = 
öod©a
[
agno
];

2018 
i
 = 0; i < 
öod©a_hash_size
; i++) {

2019 
hp
 = 
ht
[
i
];

2020 
hp
 = 
ht
[
i
]; hp; h∞hp->
√xt
) {

2021 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
hp
->ino);

2022 
p
 = 
	`öode_«me
(
öo
, &
id
);

2023 i‡(!
p
 || !
id
)

2025 i‡(!
£curôy
 || 
id
->security) {

2026 
	`db¥ötf
("%11Œu %s", 
öo
, 
p
);

2027 i‡(
hp
->
isdú
)

2028 
	`db¥ötf
("/.");

2029 
	`db¥ötf
("\n");

2031 
	`x‰ì
(
p
);

2036 
	}
}

2039 
	$¥ïíd_∑th
(

2040 *
ﬁd∑th
,

2041 *
∑ª¡
)

2043 
Àn
;

2044 *
∑th
;

2046 
Àn
 = ()(
	`°æí
(
ﬁd∑th
Ë+ såÀn(
∑ª¡
) + 2);

2047 
∑th
 = 
	`xmÆloc
(
Àn
);

2048 
	`¢¥ötf
(
∑th
, 
Àn
, "%s/%s", 
∑ª¡
, 
ﬁd∑th
);

2049  
∑th
;

2050 
	}
}

2052 
xfs_öo_t


2053 
	$¥o˚ss_block_dú_v2
(

2054 
blkm≠_t
 *
blkm≠
,

2055 *
dŸ
,

2056 *
dŸdŸ
,

2057 
öod©a_t
 *
id
)

2059 
xfs_fsblock_t
 
b
;

2060 
bbm≠_t
 
bbm≠
;

2061 
bm≠_ext_t
 *
bmp
;

2062 
√x
;

2063 
xfs_öo_t
 
∑ª¡
;

2064 
v
;

2065 
x
;

2067 
√x
 = 
	`blkm≠_gën
(
blkm≠
, 0, 
mp
->
m_dú_geo
->
fsbcou¡
, &
bmp
);

2068 
v
 = 
id
->
ûi°
 || 
vîbo£
;

2069 i‡(
√x
 == 0) {

2070 i‡(!
sÊag
 || 
v
)

2071 
	`db¥ötf
(
	`_
("block 0 for directory inode %lld is "

2073 
id
->
öo
);

2074 
îr‹
++;

2077 
	`push_cur
();

2078 i‡(
√x
 > 1)

2079 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

2080 
	`£t_cur
(&
ty±ab
[
TYP_DIR2
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bmp
->
°¨tblock
),

2081 
mp
->
m_dú_geo
->
fsbcou¡
 * 
blkbb
, 
DB_RING_IGN
, 
√x
 > 1 ? &
bbm≠
 : 
NULL
);

2082 
x
 = 0; !
v
 && x < 
√x
; x++) {

2083 
b
 = 
bmp
[
x
].
°¨tblock
;

2084 !
v
 && 
b
 < 
bmp
[
x
].
°¨tblock
 + bmp[x].
blockcou¡
;

2085 
b
++)

2086 
v
 = 
	`CHECK_BLIST
(
b
);

2088 
	`‰ì
(
bmp
);

2089 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2090 i‡(!
sÊag
 || 
id
->
ûi°
 || 
v
)

2091 
	`db¥ötf
(
	`_
("can'tÑead block 0 for directory inode "

2093 
id
->
öo
);

2094 
îr‹
++;

2095 
	`p›_cur
();

2098 
	`dú_hash_öô
();

2099 
∑ª¡
 = 
	`¥o˚ss_d©a_dú_v2
(
dŸ
, 
dŸdŸ
, 
id
, 
v
, 
mp
->
m_dú_geo
->
d©ablk
,

2100 
NULL
);

2101 
	`dú_hash_check
(
id
, 
v
);

2102 
	`dú_hash_d⁄e
();

2103 
	`p›_cur
();

2104  
∑ª¡
;

2105 
	}
}

2108 
	$¥o˚ss_bmbt_ª˛i°
(

2109 
xfs_bmbt_ªc_t
 *
Ω
,

2110 
numªcs
,

2111 
dbm_t
 
ty≥
,

2112 
öod©a_t
 *
id
,

2113 
xfs_rfsblock_t
 *
tŸ
,

2114 
blkm≠_t
 **
blkm≠p
)

2116 
xfs_agblock_t
 
agbno
;

2117 
xfs_agnumbî_t
 
agno
;

2118 
xfs_fsblock_t
 
b
;

2119 
xfs_fûblks_t
 
c
;

2120 
xfs_fûblks_t
 
˝
;

2121 
f
;

2122 
i
;

2123 
xfs_agblock_t
 
ügbno
;

2124 
xfs_agnumbî_t
 
ügno
;

2125 
xfs_fûeoff_t
 
o
;

2126 
xfs_fûeoff_t
 
›
;

2127 
xfs_fsblock_t
 
s
;

2128 
v
;

2130 
˝
 = 
›
 = 0;

2131 
v
 = 
vîbo£
 || 
id
->
ûi°
;

2132 
ügno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
id
->
öo
);

2133 
ügbno
 = 
	`XFS_INO_TO_AGBNO
(
mp
, 
id
->
öo
);

2134 
i
 = 0; i < 
numªcs
; i++, 
Ω
++) {

2135 
	`c⁄vît_exã¡
(
Ω
, &
o
, &
s
, &
c
, &
f
);

2136 i‡(
v
)

2137 
	`db¥ötf
(
	`_
("inode %lldÉxtent [%lld,%lld,%lld,%d]\n"),

2138 
id
->
öo
, 
o
, 
s
, 
c
, 
f
);

2139 i‡(!
sÊag
 && 
i
 > 0 && 
›
 + 
˝
 > 
o
)

2140 
	`db¥ötf
(
	`_
("bmapÑec out of order, inode %lldÉntry %d\n"),

2141 
id
->
öo
, 
i
);

2142 
›
 = 
o
;

2143 
˝
 = 
c
;

2144 i‡(
ty≥
 =
DBM_RTDATA
) {

2145 i‡(!
sÊag
 && 
s
 >
mp
->
m_sb
.
sb_rblocks
) {

2146 
	`db¥ötf
(
	`_
("inode %lld badÑt blockÇumber %lld, "

2148 
id
->
öo
, 
s
, 
o
);

2151 } i‡(!
sÊag
) {

2152 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
s
);

2153 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
s
);

2154 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 ||

2155 
agbno
 >
mp
->
m_sb
.
sb_agblocks
) {

2156 
	`db¥ötf
(
	`_
("inode %lld bad blockÇumber %lld "

2158 
id
->
öo
, 
s
, 
agno
, 
agbno
, 
o
);

2161 i‡(
agbno
 + 
c
 - 1 >
mp
->
m_sb
.
sb_agblocks
) {

2162 
	`db¥ötf
(
	`_
("inode %lld bad blockÇumber %lld "

2164 
id
->
öo
, 
s
 + 
c
 - 1, 
agno
,

2165 
agbno
 + (
xfs_agblock_t
)
c
 - 1, 
o
);

2169 i‡(
blkm≠p
 && *blkmapp)

2170 
	`blkm≠_£t_ext
(
blkm≠p
, (
xfs_fûeoff_t
)
o
,

2171 (
xfs_fsblock_t
)
s
, (
xfs_exéí_t
)
c
);

2172 i‡(
ty≥
 =
DBM_RTDATA
) {

2173 
	`£t_rdbm≠
((
xfs_fsblock_t
)
s
, (
xfs_exéí_t
)
c
,

2174 
DBM_RTDATA
);

2175 
	`£t_röom≠
((
xfs_fsblock_t
)
s
, (
xfs_exéí_t
)
c
, 
id
);

2176 
b
 = (
xfs_fsblock_t
)
s
;

2177 
bli°_size
 && 
b
 < 
s
 + 
c
;

2178 
b
++, 
o
++) {

2179 i‡(
	`CHECK_BLIST
(
b
))

2180 
	`db¥ötf
(
	`_
("inode %lld block %lldát "

2182 
id
->
öo
, (
xfs_fsblock_t
)
b
, 
o
);

2185 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, (
xfs_fsblock_t
)
s
);

2186 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, (
xfs_fsblock_t
)
s
);

2187 
	`£t_dbm≠
(
agno
, 
agbno
, (
xfs_exéí_t
)
c
, 
ty≥
, 
ügno
,

2188 
ügbno
);

2189 
	`£t_öom≠
(
agno
, 
agbno
, (
xfs_exéí_t
)
c
, 
id
);

2190 
b
 = (
xfs_fsblock_t
)
s
;

2191 
bli°_size
 && 
b
 < 
s
 + 
c
;

2192 
b
++, 
o
++, 
agbno
++) {

2193 i‡(
	`CHECK_BLIST
(
b
))

2194 
	`db¥ötf
(
	`_
("inode %lld block %lldát "

2196 
id
->
öo
, (
xfs_fsblock_t
)
b
, 
o
);

2199 *
tŸ
 +
c
;

2201 
	}
}

2204 
	$¥o˚ss_btöode
(

2205 
öod©a_t
 *
id
,

2206 
xfs_döode_t
 *
dù
,

2207 
dbm_t
 
ty≥
,

2208 
xfs_rfsblock_t
 *
tŸd
,

2209 
xfs_rfsblock_t
 *
tŸi
,

2210 
xfs_exäum_t
 *
√x
,

2211 
blkm≠_t
 **
blkm≠p
,

2212 
whichf‹k
)

2214 
xfs_bmdr_block_t
 *
dib
;

2215 
i
;

2216 
xfs_bmbt_±r_t
 *
µ
;

2218 
dib
 = (
xfs_bmdr_block_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

2219 i‡(
	`be16_to_˝u
(
dib
->
bb_Àvñ
Ë>
	`XFS_BM_MAXLEVELS
(
mp
, 
whichf‹k
)) {

2220 i‡(!
sÊag
 || 
id
->
ûi°
)

2221 
	`db¥ötf
(
	`_
("level for ino %lld %s fork bmapÑootÅoo "

2223 
id
->
öo
,

2224 
whichf‹k
 =
XFS_DATA_FORK
 ? 
	`_
("data") : _("attr"),

2225 
	`be16_to_˝u
(
dib
->
bb_Àvñ
));

2226 
îr‹
++;

2229 i‡(
	`be16_to_˝u
(
dib
->
bb_numªcs
) >

2230 
	`libxfs_bmdr_maxªcs
(
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
),

2231 
	`be16_to_˝u
(
dib
->
bb_Àvñ
) == 0)) {

2232 i‡(!
sÊag
 || 
id
->
ûi°
)

2233 
	`db¥ötf
(
	`_
("numrecs for ino %lld %s fork bmapÑootÅoo "

2235 
id
->
öo
,

2236 
whichf‹k
 =
XFS_DATA_FORK
 ? 
	`_
("data") : _("attr"),

2237 
	`be16_to_˝u
(
dib
->
bb_numªcs
));

2238 
îr‹
++;

2241 i‡(
	`be16_to_˝u
(
dib
->
bb_Àvñ
) == 0) {

2242 
xfs_bmbt_ªc_t
 *
Ω
 = 
	`XFS_BMDR_REC_ADDR
(
dib
, 1);

2243 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, 
	`be16_to_˝u
(
dib
->
bb_numªcs
), 
ty≥
,

2244 
id
, 
tŸd
, 
blkm≠p
);

2245 *
√x
 +
	`be16_to_˝u
(
dib
->
bb_numªcs
);

2248 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
dib
, 1, 
	`libxfs_bmdr_maxªcs
(

2249 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
), 0));

2250 
i
 = 0; i < 
	`be16_to_˝u
(
dib
->
bb_numªcs
); i++)

2251 
	`sˇn_lbåì
(
	`gë_u«lig√d_be64
(&
µ
[
i
]),

2252 
	`be16_to_˝u
(
dib
->
bb_Àvñ
),

2253 
sˇnfunc_bm≠
, 
ty≥
, 
id
, 
tŸd
, 
tŸi
,

2254 
√x
, 
blkm≠p
, 1,

2255 
whichf‹k
 =
XFS_DATA_FORK
 ?

2256 
TYP_BMAPBTD
 : 
TYP_BMAPBTA
);

2258 i‡(*
√x
 <
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
Ë/ (
xfs_bmbt_ªc_t
)) {

2259 i‡(!
sÊag
 || 
id
->
ûi°
)

2260 
	`db¥ötf
(
	`_
("extent count for ino %lld %s forkÅooÜow "

2262 
id
->
öo
,

2263 
whichf‹k
 =
XFS_DATA_FORK
 ? 
	`_
("data") : _("attr"),

2264 *
√x
);

2265 
îr‹
++;

2267 
	}
}

2269 
xfs_öo_t


2270 
	$¥o˚ss_d©a_dú_v2
(

2271 *
dŸ
,

2272 *
dŸdŸ
,

2273 
öod©a_t
 *
id
,

2274 
v
,

2275 
xfs_dablk_t
 
dabno
,

2276 
‰ìèb_t
 **
‰ìèbp
)

2278 
xfs_dú2_d©≠å_t
 
addr
;

2279 
xfs_dú2_d©a_‰ì_t
 *
bf
;

2280 
bf_îr
;

2281 
xfs_dú2_d©a_hdr
 *
block
;

2282 
xfs_dú2_block_èû_t
 *
bç
 = 
NULL
;

2283 
öod©a_t
 *
cid
;

2284 
cou¡
;

2285 
xfs_dú2_d©a_hdr
 *
d©a
;

2286 
xfs_dú2_db_t
 
db
;

2287 
xfs_dú2_d©a_íåy_t
 *
dï
;

2288 
xfs_dú2_d©a_‰ì_t
 *
dÂ
;

2289 
xfs_dú2_d©a_unu£d_t
 *
dup
;

2290 *
íd±r
;

2291 
‰ì£í
;

2292 
‰ìèb_t
 *
‰ìèb
;

2293 
i
;

2294 
œ°‰ì
;

2295 
œ°‰ì_îr
;

2296 
xfs_dú2_Àaf_íåy_t
 *
Àp
 = 
NULL
;

2297 
xfs_öo_t
 
löo
;

2298 
xfs_öo_t
 
∑ª¡
 = 0;

2299 *
±r
;

2300 
°Æe
 = 0;

2301 
èg_îr
;

2302 
__be16
 *
ègp
;

2303 
xfs_«me
 
x«me
;

2305 
d©a
 = 
iocur_t›
->data;

2306 
block
 = 
iocur_t›
->
d©a
;

2307 i‡(
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR2_BLOCK_MAGIC
 &&

2308 
	`be32_to_˝u
(
d©a
->
magic
Ë!
XFS_DIR2_DATA_MAGIC
 &&

2309 
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR3_BLOCK_MAGIC
 &&

2310 
	`be32_to_˝u
(
d©a
->
magic
Ë!
XFS_DIR3_DATA_MAGIC
) {

2311 i‡(!
sÊag
 || 
v
)

2312 
	`db¥ötf
(
	`_
("bad directory data magic # %#x for dir ino "

2314 
	`be32_to_˝u
(
d©a
->
magic
), 
id
->
öo
, 
dabno
);

2315 
îr‹
++;

2316  
NULLFSINO
;

2318 
db
 = 
	`xfs_dú2_da_to_db
(
mp
->
m_dú_geo
, 
dabno
);

2319 
bf
 = 
	`M_DIROPS
(
mp
)->
	`d©a_be°‰ì_p
(
d©a
);

2320 
±r
 = (*)
	`M_DIROPS
(
mp
)->
	`d©a_unu£d_p
(
d©a
);

2321 i‡(
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

2322 
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
) {

2323 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

2324 
Àp
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

2325 
íd±r
 = (*)
Àp
;

2326 i‡(
íd±r
 <
±r
 ||Énd±∏> (*)
bç
) {

2327 
íd±r
 = (*)
d©a
 + 
mp
->
m_dú_geo
->
blksize
;

2328 
Àp
 = 
NULL
;

2329 i‡(!
sÊag
 || 
v
)

2330 
	`db¥ötf
(
	`_
("bad block directoryÅail for dir ino "

2332 
id
->
öo
);

2333 
îr‹
++;

2336 
íd±r
 = (*)
d©a
 + 
mp
->
m_dú_geo
->
blksize
;

2337 
bf_îr
 = 
œ°‰ì_îr
 = 
èg_îr
 = 0;

2338 
cou¡
 = 
œ°‰ì
 = 
‰ì£í
 = 0;

2339 i‡(
	`be16_to_˝u
(
bf
[0].
Àngth
) == 0) {

2340 
bf_îr
 +
	`be16_to_˝u
(
bf
[0].
off£t
) != 0;

2341 
‰ì£í
 |= 1 << 0;

2343 i‡(
	`be16_to_˝u
(
bf
[1].
Àngth
) == 0) {

2344 
bf_îr
 +
	`be16_to_˝u
(
bf
[1].
off£t
) != 0;

2345 
‰ì£í
 |= 1 << 1;

2347 i‡(
	`be16_to_˝u
(
bf
[2].
Àngth
) == 0) {

2348 
bf_îr
 +
	`be16_to_˝u
(
bf
[2].
off£t
) != 0;

2349 
‰ì£í
 |= 1 << 2;

2351 
bf_îr
 +
	`be16_to_˝u
(
bf
[0].
Àngth
) < be16_to_cpu(bf[1].length);

2352 
bf_îr
 +
	`be16_to_˝u
(
bf
[1].
Àngth
) < be16_to_cpu(bf[2].length);

2353 i‡(
‰ìèbp
) {

2354 
‰ìèb
 = *
‰ìèbp
;

2355 i‡(
‰ìèb
->
«íts
 <
db
) {

2356 *
‰ìèbp
 = 
‰ìèb
 =

2357 
	`ªÆloc
(
‰ìèb
, 
	`FREETAB_SIZE
(
db
 + 1));

2358 
i
 = 
‰ìèb
->
«íts
; i < 
db
; i++)

2359 
‰ìèb
->
íts
[
i
] = 
NULLDATAOFF
;

2360 
‰ìèb
->
«íts
 = 
db
 + 1;

2362 i‡(
‰ìèb
->
√¡s
 < 
db
 + 1)

2363 
‰ìèb
->
√¡s
 = 
db
 + 1;

2364 
‰ìèb
->
íts
[
db
] = 
	`be16_to_˝u
(
bf
[0].
Àngth
);

2366 
±r
 < 
íd±r
) {

2367 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

2368 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

2369 
œ°‰ì_îr
 +
œ°‰ì
 != 0;

2370 
ègp
 = 
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
);

2371 i‡((
	`be16_to_˝u
(
dup
->
Àngth
Ë& (
XFS_DIR2_DATA_ALIGN
 - 1)) ||

2372 
	`be16_to_˝u
(
dup
->
Àngth
) == 0 ||

2373 (*)
ègp
 >
íd±r
) {

2374 i‡(!
sÊag
 || 
v
)

2375 
	`db¥ötf
(
	`_
("dir %lld block %d bad free "

2377 
id
->
öo
, 
dabno
,

2378 ()((*)
dup
 -

2379 (*)
d©a
));

2380 
îr‹
++;

2383 
èg_îr
 +
	`be16_to_˝u
(*
ègp
Ë!(*)
dup
 - (*)
d©a
;

2384 
dÂ
 = 
	`¥o˚ss_d©a_dú_v2_‰ìföd
(
d©a
, 
dup
);

2385 i‡(
dÂ
) {

2386 
i
 = ()(
dÂ
 - 
bf
);

2387 
bf_îr
 +(
‰ì£í
 & (1 << 
i
)) != 0;

2388 
‰ì£í
 |1 << 
i
;

2390 
bf_îr
 +
	`be16_to_˝u
(
dup
->
Àngth
) >

2391 
	`be16_to_˝u
(
bf
[2].
Àngth
);

2392 
±r
 +
	`be16_to_˝u
(
dup
->
Àngth
);

2393 
œ°‰ì
 = 1;

2396 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

2397 i‡(
dï
->
«mñí
 == 0) {

2398 i‡(!
sÊag
 || 
v
)

2399 
	`db¥ötf
(
	`_
("dir %lld block %d zeroÜengthÉntry "

2401 
id
->
öo
, 
dabno
,

2402 ()((*)
dï
 - (*)
d©a
));

2403 
îr‹
++;

2405 
ègp
 = 
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
);

2406 i‡((*)
ègp
 >
íd±r
) {

2407 i‡(!
sÊag
 || 
v
)

2408 
	`db¥ötf
(
	`_
("dir %lld block %d badÉntryát %d\n"),

2409 
id
->
öo
, 
dabno
,

2410 ()((*)
dï
 - (*)
d©a
));

2411 
îr‹
++;

2414 
èg_îr
 +
	`be16_to_˝u
(*
ègp
Ë!(*)
dï
 - (*)
d©a
;

2415 
addr
 = 
	`xfs_dú2_db_off_to_d©≠å
(
mp
->
m_dú_geo
, 
db
,

2416 (*)
dï
 - (*)
d©a
);

2417 
x«me
.
«me
 = 
dï
->name;

2418 
x«me
.
Àn
 = 
dï
->
«mñí
;

2419 
	`dú_hash_add
(
mp
->
m_dú«me›s
->
	`hash«me
(&
x«me
), 
addr
);

2420 
±r
 +
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

2421 
cou¡
++;

2422 
œ°‰ì
 = 0;

2423 
löo
 = 
	`be64_to_˝u
(
dï
->
öumbî
);

2424 
cid
 = 
	`föd_öode
(
löo
, 1);

2425 i‡(
v
)

2426 
	`db¥ötf
(
	`_
("dir %lld block %dÉntry %*.*s %lld\n"),

2427 
id
->
öo
, 
dabno
, 
dï
->
«mñí
, dep->namelen,

2428 
dï
->
«me
, 
löo
);

2429 i‡(
cid
)

2430 
	`addlök_öode
(
cid
);

2432 i‡(!
sÊag
 || 
v
)

2433 
	`db¥ötf
(
	`_
("dir %lld block %dÉntry %*.*s bad "

2435 
id
->
öo
, 
dabno
, 
dï
->
«mñí
,

2436 
dï
->
«mñí
, dï->
«me
, 
löo
);

2437 
îr‹
++;

2439 i‡(
dï
->
«mñí
 =2 && dï->
«me
[0] == '.' &&

2440 
dï
->
«me
[1] == '.') {

2441 i‡(
∑ª¡
) {

2442 i‡(!
sÊag
 || 
v
)

2443 
	`db¥ötf
(
	`_
("multiple ..Éntries in dir "

2445 
id
->
öo
, 
∑ª¡
, 
löo
);

2446 
îr‹
++;

2448 
∑ª¡
 = 
cid
 ? 
löo
 : 
NULLFSINO
;

2449 (*
dŸdŸ
)++;

2450 } i‡(
dï
->
«mñí
 !1 || dï->
«me
[0] != '.') {

2451 i‡(
cid
 !
NULL
) {

2452 i‡(!
cid
->
∑ª¡
)

2453 
cid
->
∑ª¡
 = 
id
;

2454 
	`add«me_öode
(
cid
, (*)
dï
->
«me
,

2455 
dï
->
«mñí
);

2458 i‡(
löo
 !
id
->
öo
) {

2459 i‡(!
sÊag
 || 
v
)

2460 
	`db¥ötf
(
	`_
("dir %lldÉntry . inode "

2462 
id
->
öo
, 
löo
);

2463 
îr‹
++;

2465 (*
dŸ
)++;

2468 i‡(
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

2469 
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
) {

2470 
íd±r
 = (*)
d©a
 + 
mp
->
m_dú_geo
->
blksize
;

2471 
i
 = 
°Æe
 = 0; 
Àp
 && i < 
	`be32_to_˝u
(
bç
->
cou¡
); i++) {

2472 i‡((*)&
Àp
[
i
] >
íd±r
) {

2473 i‡(!
sÊag
 || 
v
)

2474 
	`db¥ötf
(
	`_
("dir %lld block %d bad count "

2475 "%u\n"), 
id
->
öo
, 
dabno
,

2476 
	`be32_to_˝u
(
bç
->
cou¡
));

2477 
îr‹
++;

2480 i‡(
	`be32_to_˝u
(
Àp
[
i
].
addªss
Ë=
XFS_DIR2_NULL_DATAPTR
)

2481 
°Æe
++;

2482 i‡(
	`dú_hash_£e
(
	`be32_to_˝u
(
Àp
[
i
].
hashvÆ
),

2483 
	`be32_to_˝u
(
Àp
[
i
].
addªss
))) {

2484 i‡(!
sÊag
 || 
v
)

2485 
	`db¥ötf
(
	`_
("dir %lld block %dÉxtraÜeaf "

2487 
id
->
öo
, 
dabno
,

2488 
	`be32_to_˝u
(
Àp
[
i
].
hashvÆ
),

2489 
	`be32_to_˝u
(
Àp
[
i
].
addªss
));

2490 
îr‹
++;

2494 
bf_îr
 +
‰ì£í
 != 7;

2495 i‡(
bf_îr
) {

2496 i‡(!
sÊag
 || 
v
)

2497 
	`db¥ötf
(
	`_
("dir %lld block %d bad bestfree data\n"),

2498 
id
->
öo
, 
dabno
);

2499 
îr‹
++;

2501 i‡((
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

2502 
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
) &&

2503 
cou¡
 !
	`be32_to_˝u
(
bç
->cou¡Ë- be32_to_˝u(bç->
°Æe
)) {

2504 i‡(!
sÊag
 || 
v
)

2505 
	`db¥ötf
(
	`_
("dir %lld block %d bad blockÅail count %d "

2507 
id
->
öo
, 
dabno
, 
	`be32_to_˝u
(
bç
->
cou¡
),

2508 
	`be32_to_˝u
(
bç
->
°Æe
));

2509 
îr‹
++;

2511 i‡((
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

2512 
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
) &&

2513 
°Æe
 !
	`be32_to_˝u
(
bç
->stale)) {

2514 i‡(!
sÊag
 || 
v
)

2515 
	`db¥ötf
(
	`_
("dir %lld block %d bad staleÅail count %d\n"),

2516 
id
->
öo
, 
dabno
, 
	`be32_to_˝u
(
bç
->
°Æe
));

2517 
îr‹
++;

2519 i‡(
œ°‰ì_îr
) {

2520 i‡(!
sÊag
 || 
v
)

2521 
	`db¥ötf
(
	`_
("dir %lld block %d consecutive freeÉntries\n"),

2522 
id
->
öo
, 
dabno
);

2523 
îr‹
++;

2525 i‡(
èg_îr
) {

2526 i‡(!
sÊag
 || 
v
)

2527 
	`db¥ötf
(
	`_
("dir %lld block %dÉntry/unusedÅag "

2529 
id
->
öo
, 
dabno
);

2530 
îr‹
++;

2532  
∑ª¡
;

2533 
	}
}

2535 
xfs_dú2_d©a_‰ì_t
 *

2536 
	$¥o˚ss_d©a_dú_v2_‰ìföd
(

2537 
xfs_dú2_d©a_hdr
 *
d©a
,

2538 
xfs_dú2_d©a_unu£d_t
 *
dup
)

2540 
xfs_dú2_d©a_‰ì
 *
bf
;

2541 
xfs_dú2_d©a_‰ì
 *
dÂ
;

2542 
xfs_dú2_d©a_aoff_t
 
off
;

2544 
off
 = (
xfs_dú2_d©a_aoff_t
)((*)
dup
 - (*)
d©a
);

2545 
bf
 = 
	`M_DIROPS
(
mp
)->
	`d©a_be°‰ì_p
(
d©a
);

2546 i‡(
	`be16_to_˝u
(
dup
->
Àngth
) <

2547 
	`be16_to_˝u
(
bf
[
XFS_DIR2_DATA_FD_COUNT
 - 1].
Àngth
))

2548  
NULL
;

2549 
dÂ
 = 
bf
; dÂ < &bf[
XFS_DIR2_DATA_FD_COUNT
]; dfp++) {

2550 i‡(
	`be16_to_˝u
(
dÂ
->
off£t
) == 0)

2551  
NULL
;

2552 i‡(
	`be16_to_˝u
(
dÂ
->
off£t
Ë=
off
)

2553  
dÂ
;

2555  
NULL
;

2556 
	}
}

2559 
	$¥o˚ss_dú
(

2560 
xfs_döode_t
 *
dù
,

2561 
blkm≠_t
 *
blkm≠
,

2562 
öod©a_t
 *
id
)

2564 
xfs_fsblock_t
 
bno
;

2565 
dŸ
;

2566 
dŸdŸ
;

2567 
xfs_öo_t
 
∑ª¡
;

2569 
dŸ
 = 
dŸdŸ
 = 0;

2570 i‡(
	`¥o˚ss_dú_v2
(
dù
, 
blkm≠
, &
dŸ
, &
dŸdŸ
, 
id
, &
∑ª¡
))

2573 
bno
 = 
	`XFS_INO_TO_FSB
(
mp
, 
id
->
öo
);

2574 i‡(
dŸ
 == 0) {

2575 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2576 
	`db¥ötf
(
	`_
("nÿ.É¡ry f‹ dúe˘‹y %Œd\n"), 
id
->
öo
);

2577 
îr‹
++;

2579 i‡(
dŸdŸ
 == 0) {

2580 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2581 
	`db¥ötf
(
	`_
("nÿ..É¡ry f‹ dúe˘‹y %Œd\n"), 
id
->
öo
);

2582 
îr‹
++;

2583 } i‡(
∑ª¡
 =
id
->
öo
 && id->öÿ!
mp
->
m_sb
.
sb_roŸöo
) {

2584 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2585 
	`db¥ötf
(
	`_
(".ánd .. same forÇon-root directory %lld\n"),

2586 
id
->
öo
);

2587 
îr‹
++;

2588 } i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_roŸöo
 && id->öÿ!
∑ª¡
) {

2589 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2590 
	`db¥ötf
(
	`_
("roŸ dúe˘‹y %Œd ha†.. %Œd\n"), 
id
->
öo
,

2591 
∑ª¡
);

2592 
îr‹
++;

2593 } i‡(
∑ª¡
 !
NULLFSINO
 && 
id
->
öo
 !=Öarent)

2594 
	`add∑ª¡_öode
(
id
, 
∑ª¡
);

2595 
	}
}

2598 
	$¥o˚ss_dú_v2
(

2599 
xfs_döode_t
 *
dù
,

2600 
blkm≠_t
 *
blkm≠
,

2601 *
dŸ
,

2602 *
dŸdŸ
,

2603 
öod©a_t
 *
id
,

2604 
xfs_öo_t
 *
∑ª¡
)

2606 
xfs_fûeoff_t
 
œ°
 = 0;

2607 
xfs_fsize_t
 
size
 = 
	`be64_to_˝u
(
dù
->
di_size
);

2609 i‡(
blkm≠
)

2610 
œ°
 = 
	`blkm≠_œ°_off
(
blkm≠
);

2611 i‡(
size
 <
	`XFS_DFORK_DSIZE
(
dù
, 
mp
) &&

2612 
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
)

2613 *
∑ª¡
 = 
	`¥o˚ss_sf_dú_v2
(
dù
, 
dŸ
, 
dŸdŸ
, 
id
);

2614 i‡(
œ°
 =
mp
->
m_dú_geo
->
fsbcou¡
 &&

2615 (
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ||

2616 
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
))

2617 *
∑ª¡
 = 
	`¥o˚ss_block_dú_v2
(
blkm≠
, 
dŸ
, 
dŸdŸ
, 
id
);

2618 i‡(
œ°
 >
mp
->
m_dú_geo
->
Àafblk
 + mp->m_dú_geo->
fsbcou¡
 &&

2619 (
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ||

2620 
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
))

2621 *
∑ª¡
 = 
	`¥o˚ss_Àaf_node_dú_v2
(
blkm≠
, 
dŸ
, 
dŸdŸ
, 
id
, 
size
);

2623 
	`db¥ötf
(
	`_
("bad size (%lld) or format (%d) for directory inode "

2625 
size
, 
dù
->
di_f‹m©
, 
id
->
öo
);

2626 
îr‹
++;

2630 
	}
}

2634 
	$¥o˚ss_exöode
(

2635 
öod©a_t
 *
id
,

2636 
xfs_döode_t
 *
dù
,

2637 
dbm_t
 
ty≥
,

2638 
xfs_rfsblock_t
 *
tŸd
,

2639 
xfs_rfsblock_t
 *
tŸi
,

2640 
xfs_exäum_t
 *
√x
,

2641 
blkm≠_t
 **
blkm≠p
,

2642 
whichf‹k
)

2644 
xfs_bmbt_ªc_t
 *
Ω
;

2646 
Ω
 = (
xfs_bmbt_ªc_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

2647 *
√x
 = 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
);

2648 i‡(*
√x
 < 0 || *√x > 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
) /

2649 (
xfs_bmbt_ªc_t
)) {

2650 i‡(!
sÊag
 || 
id
->
ûi°
)

2651 
	`db¥ötf
(
	`_
("badÇumber ofÉxtents %d for inode %lld\n"),

2652 *
√x
, 
id
->
öo
);

2653 
îr‹
++;

2656 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, *
√x
, 
ty≥
, 
id
, 
tŸd
, 
blkm≠p
);

2657 
	}
}

2660 
	$¥o˚ss_öode
(

2661 
xfs_agf_t
 *
agf
,

2662 
xfs_agöo_t
 
agöo
,

2663 
xfs_döode_t
 *
dù
,

2664 
is‰ì
)

2666 
blkm≠_t
 *
blkm≠
;

2667 
xfs_fsblock_t
 
bno
 = 0;

2668 
xfs_öode
 
xöo
;

2669 
öod©a_t
 *
id
 = 
NULL
;

2670 
xfs_öo_t
 
öo
;

2671 
xfs_exäum_t
 
√xã¡s
 = 0;

2672 
£curôy
;

2673 
xfs_rfsblock_t
 
tŸblocks
;

2674 
xfs_rfsblock_t
 
tŸdblocks
 = 0;

2675 
xfs_rfsblock_t
 
tŸiblocks
 = 0;

2676 
dbm_t
 
ty≥
;

2677 
xfs_exäum_t
 
™exã¡s
 = 0;

2678 
xfs_rfsblock_t
 
©Ÿdblocks
 = 0;

2679 
xfs_rfsblock_t
 
©Ÿiblocks
 = 0;

2680 
xfs_q˙t_t
 
bc
 = 0;

2681 
xfs_q˙t_t
 
ic
 = 0;

2682 
xfs_q˙t_t
 
rc
 = 0;

2683 
xfs_dqid_t
 
dq¥id
;

2684 
v
 = 0;

2685 
mode_t
 
mode
;

2686 
okfmts
[] = {

2688 1 << 
XFS_DINODE_FMT_DEV
,

2689 1 << 
XFS_DINODE_FMT_DEV
,

2691 (1 << 
XFS_DINODE_FMT_LOCAL
) |

2692 (1 << 
XFS_DINODE_FMT_EXTENTS
) |

2693 (1 << 
XFS_DINODE_FMT_BTREE
),

2695 1 << 
XFS_DINODE_FMT_DEV
,

2697 (1 << 
XFS_DINODE_FMT_EXTENTS
) |

2698 (1 << 
XFS_DINODE_FMT_BTREE
),

2700 (1 << 
XFS_DINODE_FMT_LOCAL
) |

2701 (1 << 
XFS_DINODE_FMT_EXTENTS
),

2703 1 << 
XFS_DINODE_FMT_DEV
,

2705 1 << 
XFS_DINODE_FMT_UUID
,

2708 *
fmäames
[] = {

2712 
	`libxfs_öode_‰om_disk
(&
xöo
, 
dù
);

2714 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
agöo
);

2715 i‡(!
is‰ì
) {

2716 
id
 = 
	`föd_öode
(
öo
, 1);

2717 
bno
 = 
	`XFS_INO_TO_FSB
(
mp
, 
öo
);

2718 
blkm≠
 = 
NULL
;

2720 
v
 = (!
sÊag
 || (
id
 && id->
ûi°
Ë|| 
	`CHECK_BLIST
(
bno
));

2721 i‡(
dù
->
di_magic
 !
	`˝u_to_be16
(
XFS_DINODE_MAGIC
)) {

2722 i‡(
is‰ì
 || 
v
)

2723 
	`db¥ötf
(
	`_
("bad magicÇumber %#x for inode %lld\n"),

2724 
	`be16_to_˝u
(
dù
->
di_magic
), 
öo
);

2725 
îr‹
++;

2728 i‡(!
	`libxfs_döode_good_vîsi⁄
(
mp
, 
xöo
.
i_d
.
di_vîsi⁄
)) {

2729 i‡(
is‰ì
 || 
v
)

2730 
	`db¥ötf
(
	`_
("bad versionÇumber %#x for inode %lld\n"),

2731 
xöo
.
i_d
.
di_vîsi⁄
, 
öo
);

2732 
îr‹
++;

2735 i‡(
is‰ì
) {

2736 i‡(
xöo
.
i_d
.
di_nblocks
 != 0) {

2737 i‡(
v
)

2738 
	`db¥ötf
(
	`_
("badÇblocks %lld for free inode "

2740 
xöo
.
i_d
.
di_nblocks
, 
öo
);

2741 
îr‹
++;

2743 i‡(
dù
->
di_∆ök
 != 0) {

2744 i‡(
v
)

2745 
	`db¥ötf
(
	`_
("badÇlink %d for free inode %lld\n"),

2746 
	`be32_to_˝u
(
dù
->
di_∆ök
), 
öo
);

2747 
îr‹
++;

2749 i‡(
dù
->
di_mode
 != 0) {

2750 i‡(
v
)

2751 
	`db¥ötf
(
	`_
("bad mode %#o for free inode %lld\n"),

2752 
	`be16_to_˝u
(
dù
->
di_mode
), 
öo
);

2753 
îr‹
++;

2758 i‡(
	`be32_to_˝u
(
dù
->
di_√xt_u∆öked
Ë!
NULLAGINO
) {

2759 i‡(
v
)

2760 
	`db¥ötf
(
	`_
("badÇext unlinked %#x for inode %lld\n"),

2761 
	`be32_to_˝u
(
dù
->
di_√xt_u∆öked
), 
öo
);

2762 
îr‹
++;

2767 
mode
 = 
	`be16_to_˝u
(
dù
->
di_mode
);

2768 i‡((((
mode
 & 
S_IFMT
) >> 12) > 15) ||

2769 (!(
okfmts
[(
mode
 & 
S_IFMT
Ë>> 12] & (1 << 
xöo
.
i_d
.
di_f‹m©
)))) {

2770 i‡(
v
)

2771 
	`db¥ötf
(
	`_
("bad format %d for inode %lldÅype %#o\n"),

2772 
xöo
.
i_d
.
di_f‹m©
, 
id
->
öo
, 
mode
 & 
S_IFMT
);

2773 
îr‹
++;

2776 i‡(()
	`XFS_DFORK_ASIZE
(
dù
, 
mp
) >=

2777 
	`XFS_LITINO
(
mp
, 
xöo
.
i_d
.
di_vîsi⁄
)) {

2778 i‡(
v
)

2779 
	`db¥ötf
(
	`_
("bad fork offset %d for inode %lld\n"),

2780 
xöo
.
i_d
.
di_f‹koff
, 
id
->
öo
);

2781 
îr‹
++;

2784 i‡(()
xöo
.
i_d
.
di_af‹m©
 > 
XFS_DINODE_FMT_BTREE
) {

2785 i‡(
v
)

2786 
	`db¥ötf
(
	`_
("badáttribute format %d for inode %lld\n"),

2787 
xöo
.
i_d
.
di_af‹m©
, 
id
->
öo
);

2788 
îr‹
++;

2791 i‡(
vîbo£
 || (
id
 && id->
ûi°
Ë|| 
	`CHECK_BLIST
(
bno
))

2792 
	`db¥ötf
(
	`_
("inode %lld mode %#o fmt %s "

2795 
id
->
öo
, 
mode
, 
fmäames
[()
xöo
.
i_d
.
di_f‹m©
],

2796 
fmäames
[()
xöo
.
i_d
.
di_af‹m©
],

2797 
xöo
.
i_d
.
di_√xã¡s
,

2798 
xöo
.
i_d
.
di_™exã¡s
,

2799 
xöo
.
i_d
.
di_nblocks
, xöo.i_d.
di_size
,

2800 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_REALTIME
 ? "Ñt" : "",

2801 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_PREALLOC
 ? "Öre" : "",

2802 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_IMMUTABLE
? " imm" : "",

2803 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_APPEND
 ? "ápp" : "",

2804 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_SYNC
 ? " syn" : "",

2805 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_NOATIME
 ? "Çoa" : "",

2806 
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_NODUMP
 ? "Çod" : "");

2807 
£curôy
 = 0;

2808 
mode
 & 
S_IFMT
) {

2809 
S_IFDIR
:

2810 
ty≥
 = 
DBM_DIR
;

2811 i‡(
xöo
.
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
)

2813 
blkm≠
 = 
	`blkm≠_Æloc
(
xöo
.
i_d
.
di_√xã¡s
);

2815 
S_IFREG
:

2816 i‡(
xöo
.
i_d
.
di_Êags
 & 
XFS_DIFLAG_REALTIME
)

2817 
ty≥
 = 
DBM_RTDATA
;

2818 i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_rbmöo
) {

2819 
ty≥
 = 
DBM_RTBITMAP
;

2820 
blkm≠
 = 
	`blkm≠_Æloc
(
xöo
.
i_d
.
di_√xã¡s
);

2821 
	`addlök_öode
(
id
);

2822 } i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_rsumöo
) {

2823 
ty≥
 = 
DBM_RTSUM
;

2824 
blkm≠
 = 
	`blkm≠_Æloc
(
xöo
.
i_d
.
di_√xã¡s
);

2825 
	`addlök_öode
(
id
);

2827 i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_uquŸöo
 ||

2828 
id
->
öo
 =
mp
->
m_sb
.
sb_gquŸöo
 ||

2829 
id
->
öo
 =
mp
->
m_sb
.
sb_pquŸöo
) {

2830 
ty≥
 = 
DBM_QUOTA
;

2831 
blkm≠
 = 
	`blkm≠_Æloc
(
xöo
.
i_d
.
di_√xã¡s
);

2832 
	`addlök_öode
(
id
);

2835 
ty≥
 = 
DBM_DATA
;

2836 i‡(
mode
 & (
S_ISUID
 | 
S_ISGID
))

2837 
£curôy
 = 1;

2839 
S_IFLNK
:

2840 
ty≥
 = 
DBM_SYMLINK
;

2843 
£curôy
 = 1;

2844 
ty≥
 = 
DBM_UNKNOWN
;

2848 
id
->
i§eÊök
 = !!(
xöo
.
i_d
.
di_Êags2
 & 
XFS_DIFLAG2_REFLINK
);

2849 
	`£éök_öode
(
id
, 
	`VFS_I
(&
xöo
)->
i_∆ök
, 
ty≥
 =
DBM_DIR
, 
£curôy
);

2851 
xöo
.
i_d
.
di_f‹m©
) {

2852 
XFS_DINODE_FMT_LOCAL
:

2853 
	`¥o˚ss_l˛öode
(
id
, 
dù
, 
ty≥
, &
tŸdblocks
, &
tŸiblocks
,

2854 &
√xã¡s
, &
blkm≠
, 
XFS_DATA_FORK
);

2856 
XFS_DINODE_FMT_EXTENTS
:

2857 
	`¥o˚ss_exöode
(
id
, 
dù
, 
ty≥
, &
tŸdblocks
, &
tŸiblocks
,

2858 &
√xã¡s
, &
blkm≠
, 
XFS_DATA_FORK
);

2860 
XFS_DINODE_FMT_BTREE
:

2861 
	`¥o˚ss_btöode
(
id
, 
dù
, 
ty≥
, &
tŸdblocks
, &
tŸiblocks
,

2862 &
√xã¡s
, &
blkm≠
, 
XFS_DATA_FORK
);

2865 i‡(
	`XFS_DFORK_Q
(
dù
)) {

2866 
sbvîsi⁄
 |
XFS_SB_VERSION_ATTRBIT
;

2867 
xöo
.
i_d
.
di_af‹m©
) {

2868 
XFS_DINODE_FMT_LOCAL
:

2869 
	`¥o˚ss_l˛öode
(
id
, 
dù
, 
DBM_ATTR
, &
©Ÿdblocks
,

2870 &
©Ÿiblocks
, &
™exã¡s
, 
NULL
, 
XFS_ATTR_FORK
);

2872 
XFS_DINODE_FMT_EXTENTS
:

2873 
	`¥o˚ss_exöode
(
id
, 
dù
, 
DBM_ATTR
, &
©Ÿdblocks
,

2874 &
©Ÿiblocks
, &
™exã¡s
, 
NULL
, 
XFS_ATTR_FORK
);

2876 
XFS_DINODE_FMT_BTREE
:

2877 
	`¥o˚ss_btöode
(
id
, 
dù
, 
DBM_ATTR
, &
©Ÿdblocks
,

2878 &
©Ÿiblocks
, &
™exã¡s
, 
NULL
, 
XFS_ATTR_FORK
);

2882 i‡(
qgdo
 || 
qpdo
 || 
qudo
) {

2883 
ty≥
) {

2884 
DBM_DATA
:

2885 
DBM_DIR
:

2886 
DBM_RTBITMAP
:

2887 
DBM_RTSUM
:

2888 
DBM_SYMLINK
:

2889 
DBM_UNKNOWN
:

2890 
bc
 = 
tŸdblocks
 + 
tŸiblocks
 +

2891 
©Ÿdblocks
 + 
©Ÿiblocks
;

2892 
ic
 = 1;

2894 
DBM_RTDATA
:

2895 
bc
 = 
tŸiblocks
 + 
©Ÿdblocks
 + 
©Ÿiblocks
;

2896 
rc
 = 
tŸdblocks
;

2897 
ic
 = 1;

2902 i‡(
ic
) {

2903 
dq¥id
 = 
	`xfs_gë_¥ojid
(&
xöo
.
i_d
);

2904 
	`quŸa_add
(&
dq¥id
, &
xöo
.
i_d
.
di_gid
, &xöo.i_d.
di_uid
,

2905 0, 
bc
, 
ic
, 
rc
);

2908 
tŸblocks
 = 
tŸdblocks
 + 
tŸiblocks
 + 
©Ÿdblocks
 + 
©Ÿiblocks
;

2909 i‡(
tŸblocks
 !
xöo
.
i_d
.
di_nblocks
) {

2910 i‡(
v
)

2911 
	`db¥ötf
(
	`_
("badÇblocks %lld for inode %lld, counted "

2913 
xöo
.
i_d
.
di_nblocks
, 
id
->
öo
, 
tŸblocks
);

2914 
îr‹
++;

2916 i‡(
√xã¡s
 !
xöo
.
i_d
.
di_√xã¡s
) {

2917 i‡(
v
)

2918 
	`db¥ötf
(
	`_
("badÇextents %d for inode %lld, counted %d\n"),

2919 
xöo
.
i_d
.
di_√xã¡s
, 
id
->
öo
, 
√xã¡s
);

2920 
îr‹
++;

2922 i‡(
™exã¡s
 !
xöo
.
i_d
.
di_™exã¡s
) {

2923 i‡(
v
)

2924 
	`db¥ötf
(
	`_
("badánextents %d for inode %lld, counted "

2926 
xöo
.
i_d
.
di_™exã¡s
, 
id
->
öo
, 
™exã¡s
);

2927 
îr‹
++;

2929 i‡(
ty≥
 =
DBM_DIR
)

2930 
	`¥o˚ss_dú
(
dù
, 
blkm≠
, 
id
);

2931 i‡(
ty≥
 =
DBM_RTBITMAP
)

2932 
	`¥o˚ss_πbôm≠
(
blkm≠
);

2933 i‡(
ty≥
 =
DBM_RTSUM
)

2934 
	`¥o˚ss_πsumm¨y
(
blkm≠
);

2939 i‡(
ty≥
 =
DBM_QUOTA
) {

2940 i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_uquŸöo
 &&

2941 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_UQUOTA_ACCT
) &&

2942 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_UQUOTA_CHKD
))

2943 
	`¥o˚ss_quŸa
(
IS_USER_QUOTA
, 
id
, 
blkm≠
);

2944 i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_gquŸöo
 &&

2945 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_GQUOTA_ACCT
) &&

2946 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_GQUOTA_CHKD
))

2947 
	`¥o˚ss_quŸa
(
IS_GROUP_QUOTA
, 
id
, 
blkm≠
);

2948 i‡(
id
->
öo
 =
mp
->
m_sb
.
sb_pquŸöo
 &&

2949 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_PQUOTA_ACCT
) &&

2950 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_PQUOTA_CHKD
))

2951 
	`¥o˚ss_quŸa
(
IS_PROJECT_QUOTA
, 
id
, 
blkm≠
);

2953 i‡(
blkm≠
)

2954 
	`blkm≠_‰ì
(
blkm≠
);

2955 
	}
}

2959 
	$¥o˚ss_l˛öode
(

2960 
öod©a_t
 *
id
,

2961 
xfs_döode_t
 *
dù
,

2962 
dbm_t
 
ty≥
,

2963 
xfs_rfsblock_t
 *
tŸd
,

2964 
xfs_rfsblock_t
 *
tŸi
,

2965 
xfs_exäum_t
 *
√x
,

2966 
blkm≠_t
 **
blkm≠p
,

2967 
whichf‹k
)

2969 
xfs_©å_sh‹tf‹m_t
 *
asf
;

2970 
xfs_fsblock_t
 
bno
;

2972 
bno
 = 
	`XFS_INO_TO_FSB
(
mp
, 
id
->
öo
);

2973 i‡(
whichf‹k
 =
XFS_DATA_FORK
 && 
	`be64_to_˝u
(
dù
->
di_size
) >

2974 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
)) {

2975 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2976 
	`db¥ötf
(
	`_
("local inode %lld data isÅooÜarge (size "

2978 
id
->
öo
, 
	`be64_to_˝u
(
dù
->
di_size
));

2979 
îr‹
++;

2981 i‡(
whichf‹k
 =
XFS_ATTR_FORK
) {

2982 
asf
 = (
xfs_©å_sh‹tf‹m_t
 *)
	`XFS_DFORK_APTR
(
dù
);

2983 i‡(
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
Ë> 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
)) {

2984 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

2985 
	`db¥ötf
(
	`_
("local inode %lldáttr isÅooÜarge "

2987 
id
->
öo
, 
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
));

2988 
îr‹
++;

2991 
	}
}

2993 
xfs_öo_t


2994 
	$¥o˚ss_Àaf_node_dú_v2
(

2995 
blkm≠_t
 *
blkm≠
,

2996 *
dŸ
,

2997 *
dŸdŸ
,

2998 
öod©a_t
 *
id
,

2999 
xfs_fsize_t
 
dúsize
)

3001 
xfs_fsblock_t
 
b
;

3002 
bbm≠_t
 
bbm≠
;

3003 
bm≠_ext_t
 *
bmp
;

3004 
xfs_fûeoff_t
 
dbno
;

3005 
‰ìèb_t
 *
‰ìèb
;

3006 
i
;

3007 
xfs_öo_t
 
löo
;

3008 
√x
;

3009 
xfs_öo_t
 
∑ª¡
;

3010 
t
 = 0;

3011 
v
;

3012 
v2
;

3013 
x
;

3015 
v2
 = 
vîbo£
 || 
id
->
ûi°
;

3016 
v
 = 
∑ª¡
 = 0;

3017 
dbno
 = 
NULLFILEOFF
;

3018 
‰ìèb
 = 
	`mÆloc
(
	`FREETAB_SIZE
(
dúsize
 / 
mp
->
m_dú_geo
->
blksize
));

3019 
‰ìèb
->
«íts
 = ()(
dúsize
 / 
mp
->
m_dú_geo
->
blksize
);

3020 
‰ìèb
->
√¡s
 = 0;

3021 
i
 = 0; i < 
‰ìèb
->
«íts
; i++)

3022 
‰ìèb
->
íts
[
i
] = 
NULLDATAOFF
;

3023 
	`dú_hash_öô
();

3024 (
dbno
 = 
	`blkm≠_√xt_off
(
blkm≠
, dbno, &
t
)Ë!
NULLFILEOFF
) {

3025 
√x
 = 
	`blkm≠_gën
(
blkm≠
, 
dbno
, 
mp
->
m_dú_geo
->
fsbcou¡
, &
bmp
);

3026 
	`ASSERT
(
√x
 > 0);

3027 
v
 = 
v2
, 
x
 = 0; !v && x < 
√x
; x++) {

3028 
b
 = 
bmp
[
x
].
°¨tblock
;

3029 !
v
 && 
b
 < 
bmp
[
x
].
°¨tblock
 + bmp[x].
blockcou¡
;

3030 
b
++)

3031 
v
 = 
	`CHECK_BLIST
(
b
);

3033 i‡(
v
)

3034 
	`db¥ötf
(
	`_
("dú inodê%Œd block %u=%Œu\n"), 
id
->
öo
,

3035 (
__uöt32_t
)
dbno
,

3036 (
xfs_fsblock_t
)
bmp
->
°¨tblock
);

3037 
	`push_cur
();

3038 i‡(
√x
 > 1)

3039 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

3040 
	`£t_cur
(&
ty±ab
[
TYP_DIR2
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bmp
->
°¨tblock
),

3041 
mp
->
m_dú_geo
->
fsbcou¡
 * 
blkbb
, 
DB_RING_IGN
,

3042 
√x
 > 1 ? &
bbm≠
 : 
NULL
);

3043 
	`‰ì
(
bmp
);

3044 i‡(
iocur_t›
->
d©a
 =
NULL
) {

3045 i‡(!
sÊag
 || 
v
)

3046 
	`db¥ötf
(
	`_
("can'tÑead block %u for directory "

3048 (
__uöt32_t
)
dbno
, 
id
->
öo
);

3049 
îr‹
++;

3050 
	`p›_cur
();

3051 
dbno
 +
mp
->
m_dú_geo
->
fsbcou¡
 - 1;

3054 i‡(
dbno
 < 
mp
->
m_dú_geo
->
Àafblk
) {

3055 
löo
 = 
	`¥o˚ss_d©a_dú_v2
(
dŸ
, 
dŸdŸ
, 
id
, 
v
,

3056 (
xfs_dablk_t
)
dbno
, &
‰ìèb
);

3057 i‡(
löo
) {

3058 i‡(
∑ª¡
) {

3059 i‡(!
sÊag
 || 
v
)

3060 
	`db¥ötf
(
	`_
("multiple ..Éntries "

3062 
id
->
öo
);

3063 
îr‹
++;

3065 
∑ª¡
 = 
löo
;

3067 } i‡(
dbno
 < 
mp
->
m_dú_geo
->
‰ìblk
) {

3068 
	`¥o˚ss_Àaf_node_dú_v2_öt
(
id
, 
v
, (
xfs_dablk_t
)
dbno
,

3069 
‰ìèb
);

3071 
	`¥o˚ss_Àaf_node_dú_v2_‰ì
(
id
, 
v
, (
xfs_dablk_t
)
dbno
,

3072 
‰ìèb
);

3074 
	`p›_cur
();

3075 
dbno
 +
mp
->
m_dú_geo
->
fsbcou¡
 - 1;

3077 
	`dú_hash_check
(
id
, 
v
);

3078 
	`dú_hash_d⁄e
();

3079 
i
 = 0; i < 
‰ìèb
->
√¡s
; i++) {

3080 i‡(
‰ìèb
->
íts
[
i
] !
NULLDATAOFF
) {

3081 i‡(!
sÊag
 || 
v
)

3082 
	`db¥ötf
(
	`_
("missing free index for data block %d "

3084 
	`xfs_dú2_db_to_da
(
mp
->
m_dú_geo
, 
i
), 
id
->
öo
);

3085 
îr‹
++;

3088 
	`‰ì
(
‰ìèb
);

3089  
∑ª¡
;

3090 
	}
}

3093 
	$¥o˚ss_Àaf_node_dú_v3_‰ì
(

3094 
öod©a_t
 *
id
,

3095 
v
,

3096 
xfs_dablk_t
 
dabno
,

3097 
‰ìèb_t
 *
‰ìèb
)

3099 
xfs_dú2_d©a_off_t
 
ít
;

3100 
xfs_dú3_‰ì
 *
‰ì
;

3101 
i
;

3102 
maxít
;

3103 
u£d
;

3105 
‰ì
 = 
iocur_t›
->
d©a
;

3106 
maxít
 = 
	`M_DIROPS
(
mp
)->
	`‰ì_max_be°s
(mp->
m_dú_geo
);

3107 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë!
	`xfs_dú2_da_to_db
(
mp
->
m_dú_geo
,

3108 
dabno
 - 
mp
->
m_dú_geo
->
‰ìblk
Ë* 
maxít
) {

3109 i‡(!
sÊag
 || 
v
)

3110 
	`db¥ötf
(
	`_
("bad free block firstdb %d for dir ino %lld "

3112 
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
), 
id
->
öo
, 
dabno
);

3113 
îr‹
++;

3116 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
Ë> 
maxít
 ||

3117 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
Ë> 
maxít
 ||

3118 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
) >

3119 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
)) {

3120 i‡(!
sÊag
 || 
v
)

3121 
	`db¥ötf
(
	`_
("bad free blockÇvalid/nused %d/%d for dir "

3123 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
),

3124 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
), 
id
->
öo
, 
dabno
);

3125 
îr‹
++;

3128 
u£d
 = 
i
 = 0; i < 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
); i++) {

3129 i‡(
‰ìèb
->
√¡s
 <
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
)

3130 
ít
 = 
NULLDATAOFF
;

3132 
ít
 = 
‰ìèb
->
íts
[
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
];

3133 i‡(
ít
 !
	`be16_to_˝u
(
‰ì
->
be°s
[
i
])) {

3134 i‡(!
sÊag
 || 
v
)

3135 
	`db¥ötf
(
	`_
("bad free blockÉnt %d is %d should "

3137 
i
, 
	`be16_to_˝u
(
‰ì
->
be°s
[i]), 
ít
,

3138 
id
->
öo
, 
dabno
);

3139 
îr‹
++;

3141 i‡(
	`be16_to_˝u
(
‰ì
->
be°s
[
i
]Ë!
NULLDATAOFF
)

3142 
u£d
++;

3143 i‡(
ít
 !
NULLDATAOFF
)

3144 
‰ìèb
->
íts
[
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
] =

3145 
NULLDATAOFF
;

3147 i‡(
u£d
 !
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
)) {

3148 i‡(!
sÊag
 || 
v
)

3149 
	`db¥ötf
(
	`_
("bad free blockÇused %d should be %d for dir "

3151 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
), 
u£d
, 
id
->
öo
,

3152 
dabno
);

3153 
îr‹
++;

3155 
	}
}

3158 
	$¥o˚ss_Àaf_node_dú_v2_‰ì
(

3159 
öod©a_t
 *
id
,

3160 
v
,

3161 
xfs_dablk_t
 
dabno
,

3162 
‰ìèb_t
 *
‰ìèb
)

3164 
xfs_dú2_d©a_off_t
 
ít
;

3165 
xfs_dú2_‰ì_t
 *
‰ì
;

3166 
i
;

3167 
maxít
;

3168 
u£d
;

3170 
‰ì
 = 
iocur_t›
->
d©a
;

3171 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
Ë!
XFS_DIR2_FREE_MAGIC
 &&

3172 
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
Ë!
XFS_DIR3_FREE_MAGIC
) {

3173 i‡(!
sÊag
 || 
v
)

3174 
	`db¥ötf
(
	`_
("bad free block magic # %#x for dir ino %lld "

3176 
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
), 
id
->
öo
, 
dabno
);

3177 
îr‹
++;

3180 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
Ë=
XFS_DIR3_FREE_MAGIC
) {

3181 
	`¥o˚ss_Àaf_node_dú_v3_‰ì
(
id
, 
v
, 
dabno
, 
‰ìèb
);

3184 
maxít
 = 
	`M_DIROPS
(
mp
)->
	`‰ì_max_be°s
(mp->
m_dú_geo
);

3185 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë!
	`xfs_dú2_da_to_db
(
mp
->
m_dú_geo
,

3186 
dabno
 - 
mp
->
m_dú_geo
->
‰ìblk
Ë* 
maxít
) {

3187 i‡(!
sÊag
 || 
v
)

3188 
	`db¥ötf
(
	`_
("bad free block firstdb %d for dir ino %lld "

3190 
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
), 
id
->
öo
, 
dabno
);

3191 
îr‹
++;

3194 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
Ë> 
maxít
 ||

3195 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
) < 0 ||

3196 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
Ë> 
maxít
 ||

3197 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
) < 0 ||

3198 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
) >

3199 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
)) {

3200 i‡(!
sÊag
 || 
v
)

3201 
	`db¥ötf
(
	`_
("bad free blockÇvalid/nused %d/%d for dir "

3203 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
),

3204 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
), 
id
->
öo
, 
dabno
);

3205 
îr‹
++;

3208 
u£d
 = 
i
 = 0; i < 
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
); i++) {

3209 i‡(
‰ìèb
->
√¡s
 <
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
)

3210 
ít
 = 
NULLDATAOFF
;

3212 
ít
 = 
‰ìèb
->
íts
[
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
];

3213 i‡(
ít
 !
	`be16_to_˝u
(
‰ì
->
be°s
[
i
])) {

3214 i‡(!
sÊag
 || 
v
)

3215 
	`db¥ötf
(
	`_
("bad free blockÉnt %d is %d should "

3217 
i
, 
	`be16_to_˝u
(
‰ì
->
be°s
[i]), 
ít
,

3218 
id
->
öo
, 
dabno
);

3219 
îr‹
++;

3221 i‡(
	`be16_to_˝u
(
‰ì
->
be°s
[
i
]Ë!
NULLDATAOFF
)

3222 
u£d
++;

3223 i‡(
ít
 !
NULLDATAOFF
)

3224 
‰ìèb
->
íts
[
	`be32_to_˝u
(
‰ì
->
hdr
.
fú°db
Ë+ 
i
] =

3225 
NULLDATAOFF
;

3227 i‡(
u£d
 !
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
)) {

3228 i‡(!
sÊag
 || 
v
)

3229 
	`db¥ötf
(
	`_
("bad free blockÇused %d should be %d for dir "

3231 
	`be32_to_˝u
(
‰ì
->
hdr
.
nu£d
), 
u£d
, 
id
->
öo
,

3232 
dabno
);

3233 
îr‹
++;

3235 
	}
}

3240 
ölöe
 

3241 
	$xfs_dú3_Àaf_íts_cou¡
(
xfs_dú2_Àaf
 *
Õ
)

3243 i‡(
Õ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAF1_MAGIC
) ||

3244 
Õ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
)) {

3245 
xfs_dú3_Àaf
 *
Õ3
 = (xfs_dú3_Àa‡*)
Õ
;

3247  
	`be16_to_˝u
(
Õ3
->
hdr
.
cou¡
);

3249  
	`be16_to_˝u
(
Õ
->
hdr
.
cou¡
);

3250 
	}
}

3253 
	$¥o˚ss_Àaf_node_dú_v2_öt
(

3254 
öod©a_t
 *
id
,

3255 
v
,

3256 
xfs_dablk_t
 
dabno
,

3257 
‰ìèb_t
 *
‰ìèb
)

3259 
i
;

3260 
__be16
 *
lbp
;

3261 
xfs_dú2_Àaf_t
 *
Àaf
;

3262 
xfs_dú3_Àaf
 *
Àaf3
 = 
NULL
;

3263 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

3264 
xfs_dú2_Àaf_èû_t
 *
…p
;

3265 
xfs_da_öäode_t
 *
node
;

3266 
°Æe
;

3267 
xfs_da3_i˙ode_hdr
 
nodehdr
;

3269 
Àaf
 = 
iocur_t›
->
d©a
;

3270 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
)) {

3271 
XFS_DIR3_LEAF1_MAGIC
:

3272 
XFS_DIR3_LEAFN_MAGIC
:

3273 
XFS_DA3_NODE_MAGIC
:

3274 
Àaf3
 = 
iocur_t›
->
d©a
;

3277 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
)) {

3278 
XFS_DIR2_LEAF1_MAGIC
:

3279 
XFS_DIR3_LEAF1_MAGIC
:

3280 i‡(
	`be32_to_˝u
(
Àaf
->
hdr
.
öfo
.
f‹w
) ||

3281 
	`be32_to_˝u
(
Àaf
->
hdr
.
öfo
.
back
)) {

3282 i‡(!
sÊag
 || 
v
)

3283 
	`db¥ötf
(
	`_
("badÜeaf block forw/backÖointers "

3285 
	`be32_to_˝u
(
Àaf
->
hdr
.
öfo
.
f‹w
),

3286 
	`be32_to_˝u
(
Àaf
->
hdr
.
öfo
.
back
),

3287 
id
->
öo
, 
dabno
);

3288 
îr‹
++;

3290 i‡(
dabno
 !
mp
->
m_dú_geo
->
Àafblk
) {

3291 i‡(!
sÊag
 || 
v
)

3292 
	`db¥ötf
(
	`_
("singleÜeaf block for dir ino %lld "

3294 
id
->
öo
, 
dabno
,

3295 (
xfs_dablk_t
)
mp
->
m_dú_geo
->
Àafblk
);

3296 
îr‹
++;

3298 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
mp
->
m_dú_geo
, 
Àaf
);

3299 
lbp
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
);

3300 
i
 = 0; i < 
	`be32_to_˝u
(
…p
->
be°cou¡
); i++) {

3301 i‡(
‰ìèb
->
√¡s
 <
i
 || fªëab->
íts
[i] !=

3302 
	`be16_to_˝u
(
lbp
[
i
])) {

3303 i‡(!
sÊag
 || 
v
)

3304 
	`db¥ötf
(
	`_
("bestfree %d for dir ino %lld "

3307 
‰ìèb
->
√¡s
 <
i
 ?

3308 
NULLDATAOFF
 :

3309 
‰ìèb
->
íts
[
i
],

3310 
id
->
öo
,

3311 
	`xfs_dú2_db_to_da
(
mp
->
m_dú_geo
, 
i
),

3312 
	`be16_to_˝u
(
lbp
[
i
]));

3314 i‡(
‰ìèb
->
√¡s
 > 
i
)

3315 
‰ìèb
->
íts
[
i
] = 
NULLDATAOFF
;

3318 
XFS_DIR2_LEAFN_MAGIC
:

3319 
XFS_DIR3_LEAFN_MAGIC
:

3323 
XFS_DA_NODE_MAGIC
:

3324 
XFS_DA3_NODE_MAGIC
:

3325 
node
 = 
iocur_t›
->
d©a
;

3326 
	`M_DIROPS
(
mp
)->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

3327 i‡(
nodehdr
.
Àvñ
 < 1 ||Çodehdr.Àvñ > 
XFS_DA_NODE_MAXDEPTH
) {

3328 i‡(!
sÊag
 || 
v
)

3329 
	`db¥ötf
(
	`_
("badÇode blockÜevel %d for dir ino "

3331 
nodehdr
.
Àvñ
, 
id
->
öo
,

3332 
dabno
);

3333 
îr‹
++;

3337 i‡(!
sÊag
 || 
v
)

3338 
	`db¥ötf
(
	`_
("bad directory data magic # %#x for dir ino "

3340 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
), 
id
->
öo
,

3341 
dabno
);

3342 
îr‹
++;

3345 
Àp
 = 
	`M_DIROPS
(
mp
)->
	`Àaf_íts_p
(
Àaf
);

3346 
i
 = 
°Æe
 = 0; i < 
	`xfs_dú3_Àaf_íts_cou¡
(
Àaf
); i++) {

3347 i‡(
	`be32_to_˝u
(
Àp
[
i
].
addªss
Ë=
XFS_DIR2_NULL_DATAPTR
)

3348 
°Æe
++;

3349 i‡(
	`dú_hash_£e
(
	`be32_to_˝u
(
Àp
[
i
].
hashvÆ
),

3350 
	`be32_to_˝u
(
Àp
[
i
].
addªss
))) {

3351 i‡(!
sÊag
 || 
v
)

3352 
	`db¥ötf
(
	`_
("dir %lld block %dÉxtraÜeafÉntry "

3353 "%x %x\n"), 
id
->
öo
, 
dabno
,

3354 
	`be32_to_˝u
(
Àp
[
i
].
hashvÆ
),

3355 
	`be32_to_˝u
(
Àp
[
i
].
addªss
));

3356 
îr‹
++;

3359 i‡(
Àaf3
 && 
°Æe
 !
	`be16_to_˝u
÷óf3->
hdr
.stale)) {

3360 i‡(!
sÊag
 || 
v
)

3361 
	`db¥ötf
(
	`_
("dir3 %lld block %d stale mismatch "

3363 
id
->
öo
, 
dabno
, 
°Æe
,

3364 
	`be16_to_˝u
(
Àaf3
->
hdr
.
°Æe
));

3365 
îr‹
++;

3366 } i‡(!
Àaf
 && 
°Æe
 !
	`be16_to_˝u
÷óf->
hdr
.stale)) {

3367 i‡(!
sÊag
 || 
v
)

3368 
	`db¥ötf
(
	`_
("dir %lld block %d stale mismatch "

3370 
id
->
öo
, 
dabno
, 
°Æe
,

3371 
	`be16_to_˝u
(
Àaf
->
hdr
.
°Æe
));

3372 
îr‹
++;

3374 
	}
}

3377 
	$¥o˚ss_quŸa
(

3378 
qty≥_t
 
qty≥
,

3379 
öod©a_t
 *
id
,

3380 
blkm≠_t
 *
blkm≠
)

3382 
xfs_fsblock_t
 
bno
;

3383 
cb
;

3384 
xfs_dqblk_t
 *
dqb
;

3385 
xfs_dqid_t
 
dqid
;

3386 
u_öt8_t
 
exp_Êags
 = 0;

3387 
uöt
 
i
;

3388 
uöt
 
≥rblock
;

3389 
xfs_fûeoff_t
 
qbno
;

3390 *
s
 = 
NULL
;

3391 
scicb
;

3392 
t
 = 0;

3394 
qty≥
) {

3395 
IS_USER_QUOTA
:

3396 
s
 = "user";

3397 
exp_Êags
 = 
XFS_DQ_USER
;

3399 
IS_PROJECT_QUOTA
:

3400 
s
 = "project";

3401 
exp_Êags
 = 
XFS_DQ_PROJ
;

3403 
IS_GROUP_QUOTA
:

3404 
s
 = "group";

3405 
exp_Êags
 = 
XFS_DQ_GROUP
;

3408 
	`ASSERT
(0);

3411 
≥rblock
 = (
uöt
)(
mp
->
m_sb
.
sb_blocksize
 / (*
dqb
));

3412 
dqid
 = 0;

3413 
qbno
 = 
NULLFILEOFF
;

3414 (
qbno
 = 
	`blkm≠_√xt_off
(
blkm≠
, qbno, &
t
)Ë!
NULLFILEOFF
) {

3415 
bno
 = 
	`blkm≠_gë
(
blkm≠
, 
qbno
);

3416 
dqid
 = (
xfs_dqid_t
)
qbno
 * 
≥rblock
;

3417 
cb
 = 
	`CHECK_BLIST
(
bno
);

3418 
scicb
 = !
sÊag
 || 
id
->
ûi°
 || 
cb
;

3419 
	`push_cur
();

3420 
	`£t_cur
(&
ty±ab
[
TYP_DQBLK
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
), 
blkbb
,

3421 
DB_RING_IGN
, 
NULL
);

3422 i‡((
dqb
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

3423 i‡(
scicb
)

3424 
	`db¥ötf
(
	`_
("can'tÑead block %lld for %s quota "

3426 (
xfs_fûeoff_t
)
qbno
, 
s
,

3427 (
xfs_fsblock_t
)
bno
);

3428 
îr‹
++;

3429 
	`p›_cur
();

3432 
i
 = 0; i < 
≥rblock
; i++, 
dqid
++, 
dqb
++) {

3433 i‡(
vîbo£
 || 
id
->
ûi°
 || 
cb
)

3434 
	`db¥ötf
(
	`_
("%s dqblk %lldÉntry %d id %u bc "

3436 
s
, (
xfs_fûeoff_t
)
qbno
, 
i
, 
dqid
,

3437 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_bcou¡
),

3438 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_icou¡
),

3439 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_πbcou¡
));

3440 i‡(
	`be16_to_˝u
(
dqb
->
dd_diskdq
.
d_magic
Ë!
XFS_DQUOT_MAGIC
) {

3441 i‡(
scicb
)

3442 
	`db¥ötf
(
	`_
("bad magicÇumber %#x for %s "

3444 
	`be16_to_˝u
(
dqb
->
dd_diskdq
.
d_magic
), 
s
,

3445 (
xfs_fûeoff_t
)
qbno
, 
i
, 
dqid
);

3446 
îr‹
++;

3449 i‡(
dqb
->
dd_diskdq
.
d_vîsi⁄
 !
XFS_DQUOT_VERSION
) {

3450 i‡(
scicb
)

3451 
	`db¥ötf
(
	`_
("bad versionÇumber %#x for "

3454 
dqb
->
dd_diskdq
.
d_vîsi⁄
, 
s
,

3455 (
xfs_fûeoff_t
)
qbno
, 
i
, 
dqid
);

3456 
îr‹
++;

3459 i‡(
dqb
->
dd_diskdq
.
d_Êags
 !
exp_Êags
) {

3460 i‡(
scicb
)

3461 
	`db¥ötf
(
	`_
("bad flags %#x for %s dqblk "

3463 
dqb
->
dd_diskdq
.
d_Êags
, 
s
,

3464 (
xfs_fûeoff_t
)
qbno
, 
i
, 
dqid
);

3465 
îr‹
++;

3468 i‡(
	`be32_to_˝u
(
dqb
->
dd_diskdq
.
d_id
Ë!
dqid
) {

3469 i‡(
scicb
)

3470 
	`db¥ötf
(
	`_
("bad id %u for %s dqblk %lld "

3472 
	`be32_to_˝u
(
dqb
->
dd_diskdq
.
d_id
), 
s
,

3473 (
xfs_fûeoff_t
)
qbno
, 
i
, 
dqid
);

3474 
îr‹
++;

3477 
	`quŸa_add
((
qty≥
 =
IS_PROJECT_QUOTA
Ë? &
dqid
 : 
NULL
,

3478 (
qty≥
 =
IS_GROUP_QUOTA
Ë? &
dqid
 : 
NULL
,

3479 (
qty≥
 =
IS_USER_QUOTA
Ë? &
dqid
 : 
NULL
,

3481 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_bcou¡
),

3482 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_icou¡
),

3483 
	`be64_to_˝u
(
dqb
->
dd_diskdq
.
d_πbcou¡
));

3485 
	`p›_cur
();

3487 
	}
}

3490 
	$¥o˚ss_πbôm≠
(

3491 
blkm≠_t
 *
blkm≠
)

3493 
bô
;

3494 
bô•îblock
;

3495 
xfs_fûeoff_t
 
bmbno
;

3496 
xfs_fsblock_t
 
bno
;

3497 
xfs_πblock_t
 
exäo
;

3498 
Àn
;

3499 
log
;

3500 
offs
;

3501 
¥evbô
;

3502 
xfs_rfsblock_t
 
πbno
;

3503 
°¨t_bmbno
;

3504 
°¨t_bô
;

3505 
t
;

3506 
xfs_πw‹d_t
 *
w‹ds
;

3508 
bô•îblock
 = 
mp
->
m_sb
.
sb_blocksize
 * 
NBBY
;

3509 
bô
 = 
exäo
 = 
¥evbô
 = 
°¨t_bmbno
 = 
°¨t_bô
 = 0;

3510 
bmbno
 = 
NULLFILEOFF
;

3511 (
bmbno
 = 
	`blkm≠_√xt_off
(
blkm≠
, bmbno, &
t
)) !=

3512 
NULLFILEOFF
) {

3513 
bno
 = 
	`blkm≠_gë
(
blkm≠
, 
bmbno
);

3514 i‡(
bno
 =
NULLFSBLOCK
) {

3515 i‡(!
sÊag
)

3516 
	`db¥ötf
(
	`_
("block %lld forÑtbitmap inode is "

3518 (
xfs_fûeoff_t
)
bmbno
);

3519 
îr‹
++;

3522 
	`push_cur
();

3523 
	`£t_cur
(&
ty±ab
[
TYP_RTBITMAP
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
), 
blkbb
,

3524 
DB_RING_IGN
, 
NULL
);

3525 i‡((
w‹ds
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

3526 i‡(!
sÊag
)

3527 
	`db¥ötf
(
	`_
("can'tÑead block %lld forÑtbitmap "

3529 (
xfs_fûeoff_t
)
bmbno
);

3530 
îr‹
++;

3531 
	`p›_cur
();

3534 
bô
 = 0;

3535 
bô
 < 
bô•îblock
 && 
exäo
 < 
mp
->
m_sb
.
sb_ªxã¡s
;

3536 
bô
++, 
exäo
++) {

3537 i‡(
	`xfs_is£t
(
w‹ds
, 
bô
)) {

3538 
πbno
 = 
exäo
 * 
mp
->
m_sb
.
sb_ªxtsize
;

3539 
	`£t_rdbm≠
(
πbno
, 
mp
->
m_sb
.
sb_ªxtsize
,

3540 
DBM_RTFREE
);

3541 
‰exã¡s
++;

3542 i‡(
¥evbô
 == 0) {

3543 
°¨t_bmbno
 = ()
bmbno
;

3544 
°¨t_bô
 = 
bô
;

3545 
¥evbô
 = 1;

3547 } i‡(
¥evbô
 == 1) {

3548 
Àn
 = (()
bmbno
 - 
°¨t_bmbno
) *

3549 
bô•îblock
 + (
bô
 - 
°¨t_bô
);

3550 
log
 = 
	`XFS_RTBLOCKLOG
(
Àn
);

3551 
offs
 = 
	`XFS_SUMOFFS
(
mp
, 
log
, 
°¨t_bmbno
);

3552 
sumcompuã
[
offs
]++;

3553 
¥evbô
 = 0;

3556 
	`p›_cur
();

3557 i‡(
exäo
 =
mp
->
m_sb
.
sb_ªxã¡s
)

3560 i‡(
¥evbô
 == 1) {

3561 
Àn
 = (()
bmbno
 - 
°¨t_bmbno
Ë* 
bô•îblock
 +

3562 (
bô
 - 
°¨t_bô
);

3563 
log
 = 
	`XFS_RTBLOCKLOG
(
Àn
);

3564 
offs
 = 
	`XFS_SUMOFFS
(
mp
, 
log
, 
°¨t_bmbno
);

3565 
sumcompuã
[
offs
]++;

3567 
	}
}

3570 
	$¥o˚ss_πsumm¨y
(

3571 
blkm≠_t
 *
blkm≠
)

3573 
xfs_fsblock_t
 
bno
;

3574 *
byãs
;

3575 
xfs_fûeoff_t
 
sumbno
;

3576 
t
;

3578 
sumbno
 = 
NULLFILEOFF
;

3579 (
sumbno
 = 
	`blkm≠_√xt_off
(
blkm≠
, sumbno, &
t
)Ë!
NULLFILEOFF
) {

3580 
bno
 = 
	`blkm≠_gë
(
blkm≠
, 
sumbno
);

3581 i‡(
bno
 =
NULLFSBLOCK
) {

3582 i‡(!
sÊag
)

3583 
	`db¥ötf
(
	`_
("block %lld forÑtsummary inode is "

3585 (
xfs_fûeoff_t
)
sumbno
);

3586 
îr‹
++;

3589 
	`push_cur
();

3590 
	`£t_cur
(&
ty±ab
[
TYP_RTSUMMARY
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
),

3591 
blkbb
, 
DB_RING_IGN
, 
NULL
);

3592 i‡((
byãs
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

3593 i‡(!
sÊag
)

3594 
	`db¥ötf
(
	`_
("can'tÑead block %lld forÑtsummary "

3596 (
xfs_fûeoff_t
)
sumbno
);

3597 
îr‹
++;

3598 
	`p›_cur
();

3601 
	`mem˝y
((*)
sumfûe
 + 
sumbno
 * 
mp
->
m_sb
.
sb_blocksize
, 
byãs
,

3602 
mp
->
m_sb
.
sb_blocksize
);

3603 
	`p›_cur
();

3605 
	}
}

3607 
xfs_öo_t


3608 
	$¥o˚ss_sf_dú_v2
(

3609 
xfs_döode_t
 *
dù
,

3610 *
dŸ
,

3611 *
dŸdŸ
,

3612 
öod©a_t
 *
id
)

3614 
öod©a_t
 *
cid
;

3615 
i
;

3616 
i8
;

3617 
xfs_öo_t
 
löo
;

3618 
off£t
;

3619 
xfs_dú2_sf_hdr
 *
sf
;

3620 
xfs_dú2_sf_íåy_t
 *
s„
;

3621 
v
;

3623 
sf
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

3624 
	`addlök_öode
(
id
);

3625 
v
 = 
vîbo£
 || 
id
->
ûi°
;

3626 i‡(
v
)

3627 
	`db¥ötf
(
	`_
("dú %ŒdÉ¡ry . %Œd\n"), 
id
->
öo
, id->ino);

3628 (*
dŸ
)++;

3629 
s„
 = 
	`xfs_dú2_sf_fú°íåy
(
sf
);

3630 
off£t
 = 
	`M_DIROPS
(
mp
)->
d©a_fú°_off£t
;

3631 
i
 = 
sf
->
cou¡
 - 1, 
i8
 = 0; i >= 0; i--) {

3632 i‡((
öçå_t
)
s„
 + 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sf
, s„->
«mñí
) -

3633 (
öçå_t
)
sf
 > 
	`be64_to_˝u
(
dù
->
di_size
)) {

3634 i‡(!
sÊag
)

3635 
	`db¥ötf
(
	`_
("dir %llu bad size inÉntryát %d\n"),

3636 
id
->
öo
,

3637 ()((*)
s„
 - (*)
sf
));

3638 
îr‹
++;

3641 
löo
 = 
	`M_DIROPS
(
mp
)->
	`sf_gë_öo
(
sf
, 
s„
);

3642 i‡(
löo
 > 
XFS_DIR2_MAX_SHORT_INUM
)

3643 
i8
++;

3644 
cid
 = 
	`föd_öode
(
löo
, 1);

3645 i‡(
cid
 =
NULL
) {

3646 i‡(!
sÊag
)

3647 
	`db¥ötf
(
	`_
("dir %lldÉntry %*.*s bad inode "

3649 
id
->
öo
, 
s„
->
«mñí
, sfe->namelen,

3650 
s„
->
«me
, 
löo
);

3651 
îr‹
++;

3653 
	`addlök_öode
(
cid
);

3654 i‡(!
cid
->
∑ª¡
)

3655 
cid
->
∑ª¡
 = 
id
;

3656 
	`add«me_öode
(
cid
, (*)
s„
->
«me
, s„->
«mñí
);

3658 i‡(
v
)

3659 
	`db¥ötf
(
	`_
("dir %lldÉntry %*.*s offset %d %lld\n"),

3660 
id
->
öo
, 
s„
->
«mñí
, s„->«mñí, s„->
«me
,

3661 
	`xfs_dú2_sf_gë_off£t
(
s„
), 
löo
);

3662 i‡(
	`xfs_dú2_sf_gë_off£t
(
s„
Ë< 
off£t
) {

3663 i‡(!
sÊag
)

3664 
	`db¥ötf
(
	`_
("dir %lldÉntry %*.*s bad offset %d\n"),

3665 
id
->
öo
, 
s„
->
«mñí
, sfe->namelen,

3666 
s„
->
«me
, 
	`xfs_dú2_sf_gë_off£t
(sfe));

3667 
îr‹
++;

3669 
off£t
 =

3670 
	`xfs_dú2_sf_gë_off£t
(
s„
) +

3671 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sf
, 
s„
->
«mñí
);

3672 
s„
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
sf
, sfe);

3674 i‡(
i
 < 0 && (
öçå_t
)
s„
 - (öçå_t)
sf
 !=

3675 
	`be64_to_˝u
(
dù
->
di_size
)) {

3676 i‡(!
sÊag
)

3677 
	`db¥ötf
(
	`_
("dir %llu size is %lld, should be %u\n"),

3678 
id
->
öo
, 
	`be64_to_˝u
(
dù
->
di_size
),

3679 (
uöt
)((*)
s„
 - (*)
sf
));

3680 
îr‹
++;

3682 i‡(
off£t
 + (
sf
->
cou¡
 + 2Ë* (
xfs_dú2_Àaf_íåy_t
) +

3683 (
xfs_dú2_block_èû_t
Ë> 
mp
->
m_dú_geo
->
blksize
) {

3684 i‡(!
sÊag
)

3685 
	`db¥ötf
(
	`_
("dú %Œu off£t†toÿhigh\n"), 
id
->
öo
);

3686 
îr‹
++;

3688 
löo
 = 
	`M_DIROPS
(
mp
)->
	`sf_gë_∑ª¡_öo
(
sf
);

3689 i‡(
löo
 > 
XFS_DIR2_MAX_SHORT_INUM
)

3690 
i8
++;

3691 
cid
 = 
	`föd_öode
(
löo
, 1);

3692 i‡(
cid
)

3693 
	`addlök_öode
(
cid
);

3695 i‡(!
sÊag
)

3696 
	`db¥ötf
(
	`_
("dir %lldÉntry .. bad inodeÇumber %lld\n"),

3697 
id
->
öo
, 
löo
);

3698 
îr‹
++;

3700 i‡(
v
)

3701 
	`db¥ötf
(
	`_
("dú %ŒdÉ¡ry .. %Œd\n"), 
id
->
öo
, 
löo
);

3702 i‡(
i8
 !
sf
->
i8cou¡
) {

3703 i‡(!
sÊag
)

3704 
	`db¥ötf
(
	`_
("dir %lld i8count mismatch is %d should be "

3706 
id
->
öo
, 
sf
->
i8cou¡
, 
i8
);

3707 
îr‹
++;

3709 (*
dŸdŸ
)++;

3710  
cid
 ? 
löo
 : 
NULLFSINO
;

3711 
	}
}

3715 
	$quŸa_add
(

3716 
xfs_dqid_t
 *
¥jid
,

3717 
xfs_dqid_t
 *
gΩid
,

3718 
xfs_dqid_t
 *
u§id
,

3719 
dq
,

3720 
xfs_q˙t_t
 
bc
,

3721 
xfs_q˙t_t
 
ic
,

3722 
xfs_q˙t_t
 
rc
)

3724 i‡(
qudo
 && 
u§id
 !
NULL
)

3725 
	`quŸa_add1
(
qud©a
, *
u§id
, 
dq
, 
bc
, 
ic
, 
rc
);

3726 i‡(
qgdo
 && 
gΩid
 !
NULL
)

3727 
	`quŸa_add1
(
qgd©a
, *
gΩid
, 
dq
, 
bc
, 
ic
, 
rc
);

3728 i‡(
qpdo
 && 
¥jid
 !
NULL
)

3729 
	`quŸa_add1
(
qpd©a
, *
¥jid
, 
dq
, 
bc
, 
ic
, 
rc
);

3730 
	}
}

3733 
	$quŸa_add1
(

3734 
qd©a_t
 **
qt
,

3735 
xfs_dqid_t
 
id
,

3736 
dq
,

3737 
xfs_q˙t_t
 
bc
,

3738 
xfs_q˙t_t
 
ic
,

3739 
xfs_q˙t_t
 
rc
)

3741 
qd©a_t
 *
qe
;

3742 
qh
;

3743 
qöfo_t
 *
qi
;

3745 
qh
 = ()(
id
 % 
QDATA_HASH_SIZE
);

3746 
qe
 = 
qt
[
qh
];

3747 
qe
) {

3748 i‡(
qe
->
id
 == id) {

3749 
qi
 = 
dq
 ? &
qe
->dq : &qe->
cou¡
;

3750 
qi
->
bc
 += bc;

3751 
qi
->
ic
 += ic;

3752 
qi
->
rc
 +=Ñc;

3755 
qe
 = qe->
√xt
;

3757 
qe
 = 
	`xmÆloc
((*qe));

3758 
qe
->
id
 = id;

3759 
qi
 = 
dq
 ? &
qe
->dq : &qe->
cou¡
;

3760 
qi
->
bc
 = bc;

3761 
qi
->
ic
 = ic;

3762 
qi
->
rc
 =Ñc;

3763 
qi
 = 
dq
 ? &
qe
->
cou¡
 : &qe->dq;

3764 
qi
->
bc
 = qi->
ic
 = qi->
rc
 = 0;

3765 
qe
->
√xt
 = 
qt
[
qh
];

3766 
qt
[
qh
] = 
qe
;

3767 
	}
}

3770 
	$quŸa_check
(

3771 *
s
,

3772 
qd©a_t
 **
qt
)

3774 
i
;

3775 
qd©a_t
 *
√xt
;

3776 
qd©a_t
 *
qp
;

3778 
i
 = 0; i < 
QDATA_HASH_SIZE
; i++) {

3779 
qp
 = 
qt
[
i
];

3780 
qp
) {

3781 
√xt
 = 
qp
->next;

3782 i‡(
qp
->
cou¡
.
bc
 !qp->
dq
.bc ||

3783 
qp
->
cou¡
.
ic
 !qp->
dq
.ic ||

3784 
qp
->
cou¡
.
rc
 !qp->
dq
.rc) {

3785 i‡(!
sÊag
) {

3786 
	`db¥ötf
(
	`_
("%s quota id %u, have/exp"),

3787 
s
, 
qp
->
id
);

3788 i‡(
qp
->
cou¡
.
bc
 !qp->
dq
.bc)

3789 
	`db¥ötf
(
	`_
(" bc %lld/%lld"),

3790 
qp
->
dq
.
bc
,

3791 
qp
->
cou¡
.
bc
);

3792 i‡(
qp
->
cou¡
.
ic
 !qp->
dq
.ic)

3793 
	`db¥ötf
(
	`_
(" ic %lld/%lld"),

3794 
qp
->
dq
.
ic
,

3795 
qp
->
cou¡
.
ic
);

3796 i‡(
qp
->
cou¡
.
rc
 !qp->
dq
.rc)

3797 
	`db¥ötf
(
	`_
("Ñc %lld/%lld"),

3798 
qp
->
dq
.
rc
,

3799 
qp
->
cou¡
.
rc
);

3800 
	`db¥ötf
("\n");

3802 
îr‹
++;

3804 
	`x‰ì
(
qp
);

3805 
qp
 = 
√xt
;

3808 
	`x‰ì
(
qt
);

3809 
	}
}

3812 
	$quŸa_öô
()

3814 
qudo
 = 
mp
->
m_sb
.
sb_uquŸöo
 != 0 &&

3815 
mp
->
m_sb
.
sb_uquŸöo
 !
NULLFSINO
 &&

3816 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_UQUOTA_ACCT
) &&

3817 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_UQUOTA_CHKD
);

3818 
qgdo
 = 
mp
->
m_sb
.
sb_gquŸöo
 != 0 &&

3819 
mp
->
m_sb
.
sb_gquŸöo
 !
NULLFSINO
 &&

3820 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_GQUOTA_ACCT
) &&

3821 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_GQUOTA_CHKD
);

3822 
qpdo
 = 
mp
->
m_sb
.
sb_pquŸöo
 != 0 &&

3823 
mp
->
m_sb
.
sb_pquŸöo
 !
NULLFSINO
 &&

3824 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_PQUOTA_ACCT
) &&

3825 (
mp
->
m_sb
.
sb_qÊags
 & 
XFS_PQUOTA_CHKD
);

3826 i‡(
qudo
)

3827 
qud©a
 = 
	`xˇŒoc
(
QDATA_HASH_SIZE
, (
qd©a_t
 *));

3828 i‡(
qgdo
)

3829 
qgd©a
 = 
	`xˇŒoc
(
QDATA_HASH_SIZE
, (
qd©a_t
 *));

3830 i‡(
qpdo
)

3831 
qpd©a
 = 
	`xˇŒoc
(
QDATA_HASH_SIZE
, (
qd©a_t
 *));

3832 
	}
}

3835 
	$sˇn_ag
(

3836 
xfs_agnumbî_t
 
agno
)

3838 
xfs_agf_t
 *
agf
;

3839 
xfs_agi_t
 *
agi
;

3840 
i
;

3841 
xfs_sb_t
 
tsb
;

3842 
xfs_sb_t
 *
sb
 = &
tsb
;

3844 
agf‰ìblks
 = 
agÊ⁄ge°
 = 0;

3845 
agfbåìblks
 = -2;

3846 
agicou¡
 = 
agi‰ìcou¡
 = 0;

3847 
	`push_cur
();

3848 
	`£t_cur
(&
ty±ab
[
TYP_SB
],

3849 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
XFS_SB_DADDR
),

3850 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

3852 i‡(!
iocur_t›
->
d©a
) {

3853 
	`db¥ötf
(
	`_
("ˇn'àªad su≥rblock f‹ág %u\n"), 
agno
);

3854 
£rious_îr‹
++;

3855 
p›1_out
;

3858 
	`libxfs_sb_‰om_disk
(
sb
, 
iocur_t›
->
d©a
);

3860 i‡(
sb
->
sb_magi˙um
 !
XFS_SB_MAGIC
) {

3861 i‡(!
sÊag
)

3862 
	`db¥ötf
(
	`_
("bad sb magic # %#x inág %u\n"),

3863 
sb
->
sb_magi˙um
, 
agno
);

3864 
îr‹
++;

3866 i‡(!
	`xfs_sb_good_vîsi⁄
(
sb
)) {

3867 i‡(!
sÊag
)

3868 
	`db¥ötf
(
	`_
("bad sb version # %#x inág %u\n"),

3869 
sb
->
sb_vîsi⁄num
, 
agno
);

3870 
îr‹
++;

3871 
sbvî_îr
++;

3873 i‡(!
œzycou¡
 && 
	`xfs_sb_vîsi⁄_ha¶azysbcou¡
(
sb
)) {

3874 
œzycou¡
 = 1;

3876 i‡(
agno
 =0 && 
sb
->
sb_ö¥ogªss
 != 0) {

3877 i‡(!
sÊag
)

3878 
	`db¥ötf
(
	`_
("mkfsÇot completed successfully\n"));

3879 
îr‹
++;

3881 
	`£t_dbm≠
(
agno
, 
	`XFS_SB_BLOCK
(
mp
), 1, 
DBM_SB
,ágno, XFS_SB_BLOCK(mp));

3882 i‡(
sb
->
sb_log°¨t
 && 
	`XFS_FSB_TO_AGNO
(
mp
, sb->sb_log°¨tË=
agno
)

3883 
	`£t_dbm≠
(
agno
, 
	`XFS_FSB_TO_AGBNO
(
mp
, 
sb
->
sb_log°¨t
),

3884 
sb
->
sb_logblocks
, 
DBM_LOG
, 
agno
, 
	`XFS_SB_BLOCK
(
mp
));

3885 
	`push_cur
();

3886 
	`£t_cur
(&
ty±ab
[
TYP_AGF
],

3887 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

3888 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

3889 i‡((
agf
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

3890 
	`db¥ötf
(
	`_
("ˇn'àªadág‡block f‹ág %u\n"), 
agno
);

3891 
£rious_îr‹
++;

3892 
p›2_out
;

3894 i‡(
	`be32_to_˝u
(
agf
->
agf_magi˙um
Ë!
XFS_AGF_MAGIC
) {

3895 i‡(!
sÊag
)

3896 
	`db¥ötf
(
	`_
("badágf magic # %#x inág %u\n"),

3897 
	`be32_to_˝u
(
agf
->
agf_magi˙um
), 
agno
);

3898 
îr‹
++;

3900 i‡(!
	`XFS_AGF_GOOD_VERSION
(
	`be32_to_˝u
(
agf
->
agf_vîsi⁄num
))) {

3901 i‡(!
sÊag
)

3902 
	`db¥ötf
(
	`_
("badágf version # %#x inág %u\n"),

3903 
	`be32_to_˝u
(
agf
->
agf_vîsi⁄num
), 
agno
);

3904 
îr‹
++;

3906 i‡(
	`XFS_SB_BLOCK
(
mp
Ë!
	`XFS_AGF_BLOCK
(mp))

3907 
	`£t_dbm≠
(
agno
, 
	`XFS_AGF_BLOCK
(
mp
), 1, 
DBM_AGF
,ágno,

3908 
	`XFS_SB_BLOCK
(
mp
));

3909 i‡(
sb
->
sb_agblocks
 > 
	`be32_to_˝u
(
agf
->
agf_Àngth
))

3910 
	`£t_dbm≠
(
agno
, 
	`be32_to_˝u
(
agf
->
agf_Àngth
),

3911 
sb
->
sb_agblocks
 - 
	`be32_to_˝u
(
agf
->
agf_Àngth
),

3912 
DBM_MISSING
, 
agno
, 
	`XFS_SB_BLOCK
(
mp
));

3913 
	`push_cur
();

3914 
	`£t_cur
(&
ty±ab
[
TYP_AGI
],

3915 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),

3916 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

3917 i‡((
agi
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

3918 
	`db¥ötf
(
	`_
("ˇn'àªadágòblock f‹ág %u\n"), 
agno
);

3919 
£rious_îr‹
++;

3920 
p›3_out
;

3922 i‡(
	`be32_to_˝u
(
agi
->
agi_magi˙um
Ë!
XFS_AGI_MAGIC
) {

3923 i‡(!
sÊag
)

3924 
	`db¥ötf
(
	`_
("badági magic # %#x inág %u\n"),

3925 
	`be32_to_˝u
(
agi
->
agi_magi˙um
), 
agno
);

3926 
îr‹
++;

3928 i‡(!
	`XFS_AGI_GOOD_VERSION
(
	`be32_to_˝u
(
agi
->
agi_vîsi⁄num
))) {

3929 i‡(!
sÊag
)

3930 
	`db¥ötf
(
	`_
("badági version # %#x inág %u\n"),

3931 
	`be32_to_˝u
(
agi
->
agi_vîsi⁄num
), 
agno
);

3932 
îr‹
++;

3934 i‡(
	`XFS_SB_BLOCK
(
mp
Ë!
	`XFS_AGI_BLOCK
(mp) &&

3935 
	`XFS_AGF_BLOCK
(
mp
Ë!
	`XFS_AGI_BLOCK
(mp))

3936 
	`£t_dbm≠
(
agno
, 
	`XFS_AGI_BLOCK
(
mp
), 1, 
DBM_AGI
,ágno,

3937 
	`XFS_SB_BLOCK
(
mp
));

3938 
	`sˇn_‰ìli°
(
agf
);

3939 
fdblocks
--;

3940 
	`sˇn_sbåì
(
agf
,

3941 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_BNO
]),

3942 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNO
]),

3943 1, 
sˇnfunc_bno
, 
TYP_BNOBT
);

3944 
fdblocks
--;

3945 
	`sˇn_sbåì
(
agf
,

3946 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_CNT
]),

3947 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNT
]),

3948 1, 
sˇnfunc_˙t
, 
TYP_CNTBT
);

3949 i‡(
agf
->
agf_roŸs
[
XFS_BTNUM_RMAP
]) {

3950 
	`sˇn_sbåì
(
agf
,

3951 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_RMAP
]),

3952 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_RMAP
]),

3953 1, 
sˇnfunc_rm≠
, 
TYP_RMAPBT
);

3955 i‡(
agf
->
agf_ªfcou¡_roŸ
) {

3956 
	`sˇn_sbåì
(
agf
,

3957 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_roŸ
),

3958 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_Àvñ
),

3959 1, 
sˇnfunc_ªf˙t
, 
TYP_REFCBT
);

3961 
	`sˇn_sbåì
(
agf
,

3962 
	`be32_to_˝u
(
agi
->
agi_roŸ
),

3963 
	`be32_to_˝u
(
agi
->
agi_Àvñ
),

3964 1, 
sˇnfunc_öo
, 
TYP_INOBT
);

3965 i‡(
agi
->
agi_‰ì_roŸ
) {

3966 
	`sˇn_sbåì
(
agf
,

3967 
	`be32_to_˝u
(
agi
->
agi_‰ì_roŸ
),

3968 
	`be32_to_˝u
(
agi
->
agi_‰ì_Àvñ
),

3969 1, 
sˇnfunc_föo
, 
TYP_FINOBT
);

3971 i‡(
	`be32_to_˝u
(
agf
->
agf_‰ìblks
Ë!
agf‰ìblks
) {

3972 i‡(!
sÊag
)

3973 
	`db¥ötf
(
	`_
("agf_freeblks %u, counted %u inág %u\n"),

3974 
	`be32_to_˝u
(
agf
->
agf_‰ìblks
),

3975 
agf‰ìblks
, 
agno
);

3976 
îr‹
++;

3978 i‡(
	`be32_to_˝u
(
agf
->
agf_l⁄ge°
Ë!
agÊ⁄ge°
) {

3979 i‡(!
sÊag
)

3980 
	`db¥ötf
(
	`_
("agf_longest %u, counted %u inág %u\n"),

3981 
	`be32_to_˝u
(
agf
->
agf_l⁄ge°
),

3982 
agÊ⁄ge°
, 
agno
);

3983 
îr‹
++;

3985 i‡(
œzycou¡
 &&

3986 
	`be32_to_˝u
(
agf
->
agf_båìblks
Ë!
agfbåìblks
) {

3987 i‡(!
sÊag
)

3988 
	`db¥ötf
(
	`_
("agf_btreeblks %u, counted %u inág %u\n"),

3989 
	`be32_to_˝u
(
agf
->
agf_båìblks
),

3990 
agfbåìblks
, 
agno
);

3991 
îr‹
++;

3993 
agf_aggr_‰ìblks
 +
agf‰ìblks
 + 
agfbåìblks
;

3994 i‡(
	`be32_to_˝u
(
agi
->
agi_cou¡
Ë!
agicou¡
) {

3995 i‡(!
sÊag
)

3996 
	`db¥ötf
(
	`_
("agi_count %u, counted %u inág %u\n"),

3997 
	`be32_to_˝u
(
agi
->
agi_cou¡
),

3998 
agicou¡
, 
agno
);

3999 
îr‹
++;

4001 i‡(
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
Ë!
agi‰ìcou¡
) {

4002 i‡(!
sÊag
)

4003 
	`db¥ötf
(
	`_
("agi_freecount %u, counted %u inág %u\n"),

4004 
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
),

4005 
agi‰ìcou¡
, 
agno
);

4006 
îr‹
++;

4008 
i
 = 0; i < 
XFS_AGI_UNLINKED_BUCKETS
; i++) {

4009 i‡(
	`be32_to_˝u
(
agi
->
agi_u∆öked
[
i
]Ë!
NULLAGINO
) {

4010 i‡(!
sÊag
) {

4011 
xfs_agöo_t
 
agöo
=
	`be32_to_˝u
(
agi
->
agi_u∆öked
[
i
]);

4012 
	`db¥ötf
(
	`_
("agi unlinked bucket %d is %u inág "

4013 "%u (öode=%Œd)\n"), 
i
, 
agöo
, 
agno
,

4014 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
));

4016 
îr‹
++;

4019 
p›3_out
:

4020 
	`p›_cur
();

4021 
p›2_out
:

4022 
	`p›_cur
();

4023 
p›1_out
:

4024 
	`p›_cur
();

4025 
	}
}

4028 
	$sˇn_‰ìli°
(

4029 
xfs_agf_t
 *
agf
)

4031 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4032 
xfs_agÊ_t
 *
agÊ
;

4033 
xfs_agblock_t
 
bno
;

4034 
uöt
 
cou¡
;

4035 
i
;

4036 
__be32
 *
‰ìli°
;

4038 i‡(
	`XFS_SB_BLOCK
(
mp
Ë!
	`XFS_AGFL_BLOCK
(mp) &&

4039 
	`XFS_AGF_BLOCK
(
mp
Ë!
	`XFS_AGFL_BLOCK
(mp) &&

4040 
	`XFS_AGI_BLOCK
(
mp
Ë!
	`XFS_AGFL_BLOCK
(mp))

4041 
	`£t_dbm≠
(
£qno
, 
	`XFS_AGFL_BLOCK
(
mp
), 1, 
DBM_AGFL
, seqno,

4042 
	`XFS_SB_BLOCK
(
mp
));

4043 i‡(
	`be32_to_˝u
(
agf
->
agf_Êcou¡
) == 0)

4045 
	`push_cur
();

4046 
	`£t_cur
(&
ty±ab
[
TYP_AGFL
],

4047 
	`XFS_AG_DADDR
(
mp
, 
£qno
, 
	`XFS_AGFL_DADDR
(mp)),

4048 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

4049 i‡((
agÊ
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

4050 
	`db¥ötf
(
	`_
("ˇn'àªadágÊ block f‹ág %u\n"), 
£qno
);

4051 
£rious_îr‹
++;

4052 
	`p›_cur
();

4055 
i
 = 
	`be32_to_˝u
(
agf
->
agf_Êfú°
);

4058 i‡(
	`be32_to_˝u
(
agf
->
agf_Êfú°
Ë>
	`XFS_AGFL_SIZE
(
mp
) ||

4059 
	`be32_to_˝u
(
agf
->
agf_Êœ°
Ë>
	`XFS_AGFL_SIZE
(
mp
)) {

4060 
	`db¥ötf
(
	`_
("agf %d freelist blocks bad, skipping "

4061 "‰ìli° sˇn\n"), 
i
);

4062 
	`p›_cur
();

4067 
‰ìli°
 = 
	`xfs_sb_vîsi⁄_has¸c
(&((
mp
)->
m_sb
)Ë? &
agÊ
->
agÊ_bno
[0]

4068 : (
__be32
 *)
agÊ
;

4069 
cou¡
 = 0;

4071 
bno
 = 
	`be32_to_˝u
(
‰ìli°
[
i
]);

4072 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_FREELIST
, seqno,

4073 
	`XFS_AGFL_BLOCK
(
mp
));

4074 
cou¡
++;

4075 i‡(
i
 =
	`be32_to_˝u
(
agf
->
agf_Êœ°
))

4077 i‡(++
i
 =
	`XFS_AGFL_SIZE
(
mp
))

4078 
i
 = 0;

4080 i‡(
cou¡
 !
	`be32_to_˝u
(
agf
->
agf_Êcou¡
)) {

4081 i‡(!
sÊag
)

4082 
	`db¥ötf
(
	`_
("freeblk count %u != flcount %u inág %u\n"),

4083 
cou¡
, 
	`be32_to_˝u
(
agf
->
agf_Êcou¡
),

4084 
£qno
);

4085 
îr‹
++;

4087 
fdblocks
 +
cou¡
;

4088 
agf_aggr_‰ìblks
 +
cou¡
;

4089 
	`p›_cur
();

4090 
	}
}

4093 
	$sˇn_lbåì
(

4094 
xfs_fsblock_t
 
roŸ
,

4095 
∆evñs
,

4096 
sˇn_lbåì_f_t
 
func
,

4097 
dbm_t
 
ty≥
,

4098 
öod©a_t
 *
id
,

4099 
xfs_rfsblock_t
 *
tŸd
,

4100 
xfs_rfsblock_t
 *
tŸi
,

4101 
xfs_exäum_t
 *
√x
,

4102 
blkm≠_t
 **
blkm≠p
,

4103 
i§oŸ
,

4104 
ty≤m_t
 
bty≥
)

4106 
	`push_cur
();

4107 
	`£t_cur
(&
ty±ab
[
bty≥
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
roŸ
), 
blkbb
, 
DB_RING_IGN
,

4108 
NULL
);

4109 i‡(
iocur_t›
->
d©a
 =
NULL
) {

4110 i‡(!
sÊag
)

4111 
	`db¥ötf
(
	`_
("can'tÑead btree block %u/%u\n"),

4112 
	`XFS_FSB_TO_AGNO
(
mp
, 
roŸ
),

4113 
	`XFS_FSB_TO_AGBNO
(
mp
, 
roŸ
));

4114 
îr‹
++;

4115 
	`p›_cur
();

4118 (*
func
)(
iocur_t›
->
d©a
, 
∆evñs
 - 1, 
ty≥
, 
roŸ
, 
id
, 
tŸd
, 
tŸi
, 
√x
,

4119 
blkm≠p
, 
i§oŸ
, 
bty≥
);

4120 
	`p›_cur
();

4121 
	}
}

4124 
	$sˇn_sbåì
(

4125 
xfs_agf_t
 *
agf
,

4126 
xfs_agblock_t
 
roŸ
,

4127 
∆evñs
,

4128 
i§oŸ
,

4129 
sˇn_sbåì_f_t
 
func
,

4130 
ty≤m_t
 
bty≥
)

4132 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4134 
	`push_cur
();

4135 
	`£t_cur
(&
ty±ab
[
bty≥
],

4136 
	`XFS_AGB_TO_DADDR
(
mp
, 
£qno
, 
roŸ
), 
blkbb
, 
DB_RING_IGN
, 
NULL
);

4137 i‡(
iocur_t›
->
d©a
 =
NULL
) {

4138 i‡(!
sÊag
)

4139 
	`db¥ötf
(
	`_
("ˇn'àªad båì block %u/%u\n"), 
£qno
, 
roŸ
);

4140 
îr‹
++;

4141 
	`p›_cur
();

4144 (*
func
)(
iocur_t›
->
d©a
, 
∆evñs
 - 1, 
agf
, 
roŸ
, 
i§oŸ
);

4145 
	`p›_cur
();

4146 
	}
}

4149 
	$sˇnfunc_bm≠
(

4150 
xfs_båì_block
 *
block
,

4151 
Àvñ
,

4152 
dbm_t
 
ty≥
,

4153 
xfs_fsblock_t
 
bno
,

4154 
öod©a_t
 *
id
,

4155 
xfs_rfsblock_t
 *
tŸd
,

4156 
xfs_rfsblock_t
 *
tŸi
,

4157 
xfs_exäum_t
 *
√x
,

4158 
blkm≠_t
 **
blkm≠p
,

4159 
i§oŸ
,

4160 
ty≤m_t
 
bty≥
)

4162 
xfs_agblock_t
 
agbno
;

4163 
xfs_agnumbî_t
 
agno
;

4164 
i
;

4165 
xfs_bmbt_±r_t
 *
µ
;

4166 
xfs_bmbt_ªc_t
 *
Ω
;

4168 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
bno
);

4169 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
bno
);

4170 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_BMAP_MAGIC
 &&

4171 
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_BMAP_CRC_MAGIC
) {

4172 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

4173 
	`db¥ötf
(
	`_
("bad magic # %#x in inode %lld bmbt block "

4175 
	`be32_to_˝u
(
block
->
bb_magic
), 
id
->
öo
, 
agno
, 
agbno
);

4176 
îr‹
++;

4178 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4179 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

4180 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d in inode %lld bmbt "

4182 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
id
->
öo
, 
agno
, 
agbno
);

4183 
îr‹
++;

4185 
	`£t_dbm≠
(
agno
, 
agbno
, 1, 
ty≥
,ágno,ágbno);

4186 
	`£t_öom≠
(
agno
, 
agbno
, 1, 
id
);

4187 (*
tŸi
)++;

4188 i‡(
Àvñ
 == 0) {

4189 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_bm≠_dmxr
[0] ||

4190 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_bm≠_dmƒ
[0])) {

4191 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

4192 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) "

4194 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_bm≠_dmƒ
[0],

4195 
mp
->
m_bm≠_dmxr
[0], 
id
->
öo
,

4196 (
xfs_fsblock_t
)
bno
);

4197 
îr‹
++;

4200 
Ω
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1);

4201 *
√x
 +
	`be16_to_˝u
(
block
->
bb_numªcs
);

4202 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
ty≥
, 
id
, 
tŸd
,

4203 
blkm≠p
);

4206 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_bm≠_dmxr
[1] ||

4207 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_bm≠_dmƒ
[1])) {

4208 i‡(!
sÊag
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
))

4209 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4211 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_bm≠_dmƒ
[1],

4212 
mp
->
m_bm≠_dmxr
[1], 
id
->
öo
, (
xfs_fsblock_t
)
bno
);

4213 
îr‹
++;

4216 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[0]);

4217 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4218 
	`sˇn_lbåì
(
	`be64_to_˝u
(
µ
[
i
]), 
Àvñ
, 
sˇnfunc_bm≠
, 
ty≥
, 
id
,

4219 
tŸd
, 
tŸi
, 
√x
, 
blkm≠p
, 0, 
bty≥
);

4220 
	}
}

4223 
	$sˇnfunc_bno
(

4224 
xfs_båì_block
 *
block
,

4225 
Àvñ
,

4226 
xfs_agf_t
 *
agf
,

4227 
xfs_agblock_t
 
bno
,

4228 
i§oŸ
)

4230 
i
;

4231 
xfs_Æloc_±r_t
 *
µ
;

4232 
xfs_Æloc_ªc_t
 *
Ω
;

4233 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4234 
xfs_agblock_t
 
œ°block
;

4236 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_ABTB_MAGIC
 &&

4237 
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_ABTB_CRC_MAGIC
) {

4238 
	`db¥ötf
(
	`_
("bad magic # %#x in btbno block %u/%u\n"),

4239 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4240 
£rious_îr‹
++;

4243 
fdblocks
++;

4244 
agfbåìblks
++;

4245 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4246 i‡(!
sÊag
)

4247 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d in btbno block "

4249 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4250 
îr‹
++;

4252 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTBNO
, seqno, bno);

4253 i‡(
Àvñ
 == 0) {

4254 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_Æloc_mxr
[0] ||

4255 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_Æloc_mƒ
[0])) {

4256 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4258 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_Æloc_mƒ
[0],

4259 
mp
->
m_Æloc_mxr
[0], 
£qno
, 
bno
);

4260 
£rious_îr‹
++;

4263 
Ω
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

4264 
œ°block
 = 0;

4265 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4266 
	`£t_dbm≠
(
£qno
, 
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
),

4267 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
), 
DBM_FREE1
,

4268 
£qno
, 
bno
);

4269 i‡(
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
Ë<
œ°block
) {

4270 
	`db¥ötf
(
	`_
(

4272 
i
, 
	`be32_to_˝u
(
Ω
[i].
¨_°¨tblock
),

4273 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
),

4274 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
bno
);

4275 
£rious_îr‹
++;

4277 
œ°block
 = 
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
);

4282 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_Æloc_mxr
[1] ||

4283 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_Æloc_mƒ
[1])) {

4284 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in btbno block "

4286 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_Æloc_mƒ
[1],

4287 
mp
->
m_Æloc_mxr
[1], 
£qno
, 
bno
);

4288 
£rious_îr‹
++;

4291 
µ
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

4292 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4293 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_bno
, 
TYP_BNOBT
);

4294 
	}
}

4297 
	$sˇnfunc_˙t
(

4298 
xfs_båì_block
 *
block
,

4299 
Àvñ
,

4300 
xfs_agf_t
 *
agf
,

4301 
xfs_agblock_t
 
bno
,

4302 
i§oŸ
)

4304 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4305 
i
;

4306 
xfs_Æloc_±r_t
 *
µ
;

4307 
xfs_Æloc_ªc_t
 *
Ω
;

4308 
xfs_exéí_t
 
œ°cou¡
;

4310 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_ABTC_MAGIC
 &&

4311 
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_ABTC_CRC_MAGIC
) {

4312 
	`db¥ötf
(
	`_
("bad magic # %#x in btcnt block %u/%u\n"),

4313 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4314 
£rious_îr‹
++;

4317 
fdblocks
++;

4318 
agfbåìblks
++;

4319 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4320 i‡(!
sÊag
)

4321 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d in btcnt block "

4323 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4324 
îr‹
++;

4326 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTCNT
, seqno, bno);

4327 i‡(
Àvñ
 == 0) {

4328 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_Æloc_mxr
[0] ||

4329 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_Æloc_mƒ
[0])) {

4330 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4332 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_Æloc_mƒ
[0],

4333 
mp
->
m_Æloc_mxr
[0], 
£qno
, 
bno
);

4334 
£rious_îr‹
++;

4337 
Ω
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

4338 
œ°cou¡
 = 0;

4339 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4340 
	`check_£t_dbm≠
(
£qno
, 
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
),

4341 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
), 
DBM_FREE1
, 
DBM_FREE2
,

4342 
£qno
, 
bno
);

4343 
fdblocks
 +
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
);

4344 
agf‰ìblks
 +
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
);

4345 i‡(
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
Ë> 
agÊ⁄ge°
)

4346 
agÊ⁄ge°
 = 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
);

4347 i‡(
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
Ë< 
œ°cou¡
) {

4348 
	`db¥ötf
(
	`_
(

4350 
i
, 
	`be32_to_˝u
(
Ω
[i].
¨_°¨tblock
),

4351 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
),

4352 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
bno
);

4354 
œ°cou¡
 = 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
);

4359 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_Æloc_mxr
[1] ||

4360 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_Æloc_mƒ
[1])) {

4361 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in btbno block "

4363 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_Æloc_mƒ
[1],

4364 
mp
->
m_Æloc_mxr
[1], 
£qno
, 
bno
);

4365 
£rious_îr‹
++;

4368 
µ
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

4369 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4370 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_˙t
, 
TYP_CNTBT
);

4371 
	}
}

4374 
	$sˇnfunc_öo
(

4375 
xfs_båì_block
 *
block
,

4376 
Àvñ
,

4377 
xfs_agf_t
 *
agf
,

4378 
xfs_agblock_t
 
bno
,

4379 
i§oŸ
)

4381 
xfs_agöo_t
 
agöo
;

4382 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4383 
i
;

4384 
is‰ì
;

4385 
j
;

4386 
‰ìcou¡
;

4387 
n‰ì
;

4388 
off
;

4389 
xfs_öobt_±r_t
 *
µ
;

4390 
xfs_öobt_ªc_t
 *
Ω
;

4391 
xfs_agblock_t
 
agbno
;

4392 
xfs_agblock_t
 
íd_agbno
;

4393 
xfs_döode
 *
dù
;

4394 
blks_≥r_buf
;

4395 
öodes_≥r_buf
;

4396 
ioff
;

4398 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

4399 
blks_≥r_buf
 = 
	`xfs_i˛u°î_size_fsb
(
mp
);

4401 
blks_≥r_buf
 = 
mp
->
m_üŒoc_blks
;

4402 
öodes_≥r_buf
 = 
	`mö
(
blks_≥r_buf
 << 
mp
->
m_sb
.
sb_ö›blog
,

4403 
XFS_INODES_PER_CHUNK
);

4405 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_IBT_MAGIC
 &&

4406 
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_IBT_CRC_MAGIC
) {

4407 
	`db¥ötf
(
	`_
("bad magic # %#x in inobt block %u/%u\n"),

4408 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4409 
£rious_îr‹
++;

4412 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4413 i‡(!
sÊag
)

4414 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d in inobt block "

4416 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4417 
îr‹
++;

4419 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTINO
, seqno, bno);

4420 i‡(
Àvñ
 == 0) {

4421 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_öobt_mxr
[0] ||

4422 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_öobt_mƒ
[0])) {

4423 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4425 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_öobt_mƒ
[0],

4426 
mp
->
m_öobt_mxr
[0], 
£qno
, 
bno
);

4427 
£rious_îr‹
++;

4430 
Ω
 = 
	`XFS_INOBT_REC_ADDR
(
mp
, 
block
, 1);

4431 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4432 
agöo
 = 
	`be32_to_˝u
(
Ω
[
i
].
ú_°¨töo
);

4433 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

4434 
off
 = 
	`XFS_AGINO_TO_OFFSET
(
mp
, 
agöo
);

4435 
íd_agbno
 = 
agbno
 + 
mp
->
m_üŒoc_blks
;

4436 i‡(
off
 == 0) {

4437 i‡((
sbvîsi⁄
 & 
XFS_SB_VERSION_ALIGNBIT
) &&

4438 
mp
->
m_sb
.
sb_öﬂlignmt
 &&

4439 (
	`XFS_INO_TO_AGBNO
(
mp
, 
agöo
) %

4440 
mp
->
m_sb
.
sb_öﬂlignmt
))

4441 
sbvîsi⁄
 &~
XFS_SB_VERSION_ALIGNBIT
;

4444 
	`push_cur
();

4446 
ioff
 = 0;

4447 
n‰ì
 = 0;

4448 
agbno
 < 
íd_agbno
 &&

4449 
ioff
 < 
XFS_INODES_PER_CHUNK
) {

4450 i‡(
	`xfs_öobt_is_•¨£_disk
(&
Ω
[
i
], 
ioff
))

4451 
√xt_buf
;

4453 i‡(
off
 < 
XFS_INODES_PER_CHUNK
)

4454 
	`£t_dbm≠
(
£qno
, 
agbno
, 
blks_≥r_buf
,

4455 
DBM_INODE
, 
£qno
, 
bno
);

4457 
icou¡
 +
öodes_≥r_buf
;

4458 
agicou¡
 +
öodes_≥r_buf
;

4460 
	`£t_cur
(&
ty±ab
[
TYP_INODE
],

4461 
	`XFS_AGB_TO_DADDR
(
mp
, 
£qno
, 
agbno
),

4462 
	`XFS_FSB_TO_BB
(
mp
, 
blks_≥r_buf
),

4463 
DB_RING_IGN
, 
NULL
);

4464 i‡(
iocur_t›
->
d©a
 =
NULL
) {

4465 i‡(!
sÊag
)

4466 
	`db¥ötf
(
	`_
("can'tÑead inode block "

4467 "%u/%u\n"), 
£qno
,

4468 
agbno
);

4469 
îr‹
++;

4470 
√xt_buf
;

4473 
j
 = 0; j < 
öodes_≥r_buf
; j++) {

4474 
is‰ì
 = 
	`XFS_INOBT_IS_FREE_DISK
(&
Ω
[
i
], 
ioff
 + 
j
);

4475 i‡(
is‰ì
)

4476 
n‰ì
++;

4477 
dù
 = (
xfs_döode_t
 *)((*)
iocur_t›
->
d©a
 +

4478 ((
off
 + 
j
Ë<< 
mp
->
m_sb
.
sb_öodñog
));

4479 
	`¥o˚ss_öode
(
agf
, 
agöo
 + 
ioff
 + 
j
, 
dù
, 
is‰ì
);

4482 
√xt_buf
:

4483 
agbno
 +
blks_≥r_buf
;

4484 
ioff
 +
öodes_≥r_buf
;

4487 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

4488 
‰ìcou¡
 = 
Ω
[
i
].
ú_u
.
•
.
ú_‰ìcou¡
;

4490 
‰ìcou¡
 = 
	`be32_to_˝u
(
Ω
[
i
].
ú_u
.
f
.
ú_‰ìcou¡
);

4492 
i‰ì
 +
‰ìcou¡
;

4493 
agi‰ìcou¡
 +
‰ìcou¡
;

4495 i‡(
n‰ì
 !
‰ìcou¡
) {

4496 i‡(!
sÊag
)

4497 
	`db¥ötf
(
	`_
("ir_freecount/free mismatch, "

4500 
£qno
, 
agöo
, 
‰ìcou¡
, 
n‰ì
);

4501 
îr‹
++;

4503 
	`p›_cur
();

4507 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_öobt_mxr
[1] ||

4508 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_öobt_mƒ
[1])) {

4509 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in inobt block "

4511 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_öobt_mƒ
[1],

4512 
mp
->
m_öobt_mxr
[1], 
£qno
, 
bno
);

4513 
£rious_îr‹
++;

4516 
µ
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_öobt_mxr
[1]);

4517 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4518 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_öo
, 
TYP_INOBT
);

4519 
	}
}

4522 
	$sˇnfunc_föo
(

4523 
xfs_båì_block
 *
block
,

4524 
Àvñ
,

4525 
xfs_agf
 *
agf
,

4526 
xfs_agblock_t
 
bno
,

4527 
i§oŸ
)

4529 
xfs_agöo_t
 
agöo
;

4530 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4531 
i
;

4532 
off
;

4533 
xfs_öobt_±r_t
 *
µ
;

4534 
xfs_öobt_ªc
 *
Ω
;

4535 
xfs_agblock_t
 
agbno
;

4536 
xfs_agblock_t
 
íd_agbno
;

4537 
blks_≥r_buf
;

4538 
öodes_≥r_buf
;

4539 
ioff
;

4541 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

4542 
blks_≥r_buf
 = 
	`xfs_i˛u°î_size_fsb
(
mp
);

4544 
blks_≥r_buf
 = 
mp
->
m_üŒoc_blks
;

4545 
öodes_≥r_buf
 = 
	`mö
(
blks_≥r_buf
 << 
mp
->
m_sb
.
sb_ö›blog
,

4546 
XFS_INODES_PER_CHUNK
);

4548 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_FIBT_MAGIC
 &&

4549 
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_FIBT_CRC_MAGIC
) {

4550 
	`db¥ötf
(
	`_
("bad magic # %#x in finobt block %u/%u\n"),

4551 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4552 
£rious_îr‹
++;

4555 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4556 i‡(!
sÊag
)

4557 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d in finobt block "

4559 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4560 
îr‹
++;

4562 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTFINO
, seqno, bno);

4563 i‡(
Àvñ
 == 0) {

4564 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_öobt_mxr
[0] ||

4565 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_öobt_mƒ
[0])) {

4566 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4568 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_öobt_mƒ
[0],

4569 
mp
->
m_öobt_mxr
[0], 
£qno
, 
bno
);

4570 
£rious_îr‹
++;

4573 
Ω
 = 
	`XFS_INOBT_REC_ADDR
(
mp
, 
block
, 1);

4574 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4575 
agöo
 = 
	`be32_to_˝u
(
Ω
[
i
].
ú_°¨töo
);

4576 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

4577 
off
 = 
	`XFS_AGINO_TO_OFFSET
(
mp
, 
agöo
);

4578 
íd_agbno
 = 
agbno
 + 
mp
->
m_üŒoc_blks
;

4579 i‡(
off
 == 0) {

4580 i‡((
sbvîsi⁄
 & 
XFS_SB_VERSION_ALIGNBIT
) &&

4581 
mp
->
m_sb
.
sb_öﬂlignmt
 &&

4582 (
	`XFS_INO_TO_AGBNO
(
mp
, 
agöo
) %

4583 
mp
->
m_sb
.
sb_öﬂlignmt
))

4584 
sbvîsi⁄
 &~
XFS_SB_VERSION_ALIGNBIT
;

4587 
ioff
 = 0;

4588 
agbno
 < 
íd_agbno
 &&

4589 
ioff
 < 
XFS_INODES_PER_CHUNK
) {

4590 i‡(
	`xfs_öobt_is_•¨£_disk
(&
Ω
[
i
], 
ioff
))

4591 
√xt_buf
;

4593 
	`check_£t_dbm≠
(
£qno
, 
agbno
,

4594 (
xfs_exéí_t
)
	`MAX
(1,

4595 
öodes_≥r_buf
 >>

4596 
mp
->
m_sb
.
sb_ö›blog
),

4597 
DBM_INODE
, DBM_INODE, 
£qno
, 
bno
);

4599 
√xt_buf
:

4600 
agbno
 +
blks_≥r_buf
;

4601 
ioff
 +
öodes_≥r_buf
;

4607 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_öobt_mxr
[1] ||

4608 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_öobt_mƒ
[1])) {

4609 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in finobt block "

4611 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_öobt_mƒ
[1],

4612 
mp
->
m_öobt_mxr
[1], 
£qno
, 
bno
);

4613 
£rious_îr‹
++;

4616 
µ
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_öobt_mxr
[1]);

4617 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4618 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_föo
, 
TYP_FINOBT
);

4619 
	}
}

4622 
	$sˇnfunc_rm≠
(

4623 
xfs_båì_block
 *
block
,

4624 
Àvñ
,

4625 
xfs_agf
 *
agf
,

4626 
xfs_agblock_t
 
bno
,

4627 
i§oŸ
)

4629 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4630 
i
;

4631 
xfs_rm≠_±r_t
 *
µ
;

4632 
xfs_rm≠_ªc
 *
Ω
;

4633 
xfs_agblock_t
 
œ°block
;

4635 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_RMAP_CRC_MAGIC
) {

4636 
	`db¥ötf
(
	`_
("bad magic # %#x inÑmapbt block %u/%u\n"),

4637 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4638 
£rious_îr‹
++;

4641 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4642 i‡(!
sÊag
)

4643 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d inÑmapbt block "

4645 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4646 
îr‹
++;

4648 i‡(!
i§oŸ
) {

4649 
fdblocks
++;

4650 
agfbåìblks
++;

4652 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTRMAP
, seqno, bno);

4653 i‡(
Àvñ
 == 0) {

4654 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_rm≠_mxr
[0] ||

4655 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_rm≠_mƒ
[0])) {

4656 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4658 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_rm≠_mƒ
[0],

4659 
mp
->
m_rm≠_mxr
[0], 
£qno
, 
bno
);

4660 
£rious_îr‹
++;

4663 
Ω
 = 
	`XFS_RMAP_REC_ADDR
(
block
, 1);

4664 
œ°block
 = 0;

4665 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4666 i‡(
	`be32_to_˝u
(
Ω
[
i
].
rm_°¨tblock
Ë< 
œ°block
) {

4667 
	`db¥ötf
(
	`_
(

4669 
i
, 
	`be32_to_˝u
(
Ω
[i].
rm_°¨tblock
),

4670 
	`be32_to_˝u
(
Ω
[
i
].
rm_°¨tblock
),

4671 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
bno
);

4673 
œ°block
 = 
	`be32_to_˝u
(
Ω
[
i
].
rm_°¨tblock
);

4678 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_rm≠_mxr
[1] ||

4679 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_rm≠_mƒ
[1])) {

4680 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) inÑmapbt "

4682 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_rm≠_mƒ
[1],

4683 
mp
->
m_rm≠_mxr
[1], 
£qno
, 
bno
);

4684 
£rious_îr‹
++;

4687 
µ
 = 
	`XFS_RMAP_PTR_ADDR
(
block
, 1, 
mp
->
m_rm≠_mxr
[1]);

4688 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4689 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_rm≠
,

4690 
TYP_RMAPBT
);

4691 
	}
}

4694 
	$sˇnfunc_ªf˙t
(

4695 
xfs_båì_block
 *
block
,

4696 
Àvñ
,

4697 
xfs_agf
 *
agf
,

4698 
xfs_agblock_t
 
bno
,

4699 
i§oŸ
)

4701 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

4702 
i
;

4703 
xfs_ªfcou¡_±r_t
 *
µ
;

4704 
xfs_ªfcou¡_ªc
 *
Ω
;

4705 
xfs_agblock_t
 
œ°block
;

4707 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
XFS_REFC_CRC_MAGIC
) {

4708 
	`db¥ötf
(
	`_
("bad magic # %#x inÑefcntbt block %u/%u\n"),

4709 
	`be32_to_˝u
(
block
->
bb_magic
), 
£qno
, 
bno
);

4710 
£rious_îr‹
++;

4713 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

4714 i‡(!
sÊag
)

4715 
	`db¥ötf
(
	`_
("expectedÜevel %d got %d inÑefcntbt block "

4717 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
£qno
, 
bno
);

4718 
îr‹
++;

4720 
	`£t_dbm≠
(
£qno
, 
bno
, 1, 
DBM_BTREFC
, seqno, bno);

4721 i‡(
Àvñ
 == 0) {

4722 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_ªfc_mxr
[0] ||

4723 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_ªfc_mƒ
[0])) {

4724 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in "

4726 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_ªfc_mƒ
[0],

4727 
mp
->
m_ªfc_mxr
[0], 
£qno
, 
bno
);

4728 
£rious_îr‹
++;

4731 
Ω
 = 
	`XFS_REFCOUNT_REC_ADDR
(
block
, 1);

4732 
œ°block
 = 0;

4733 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

4734 i‡(
	`be32_to_˝u
(
Ω
[
i
].
rc_ªfcou¡
) == 1) {

4735 
	`db¥ötf
(
	`_
(

4737 
£qno
,

4738 
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
),

4739 
	`be32_to_˝u
(
Ω
[
i
].
rc_blockcou¡
));

4740 
	`£t_dbm≠
(
£qno
,

4741 
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
),

4742 
	`be32_to_˝u
(
Ω
[
i
].
rc_blockcou¡
),

4743 
DBM_COWDATA
, 
£qno
, 
bno
);

4745 
	`£t_dbm≠
(
£qno
,

4746 
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
),

4747 
	`be32_to_˝u
(
Ω
[
i
].
rc_blockcou¡
),

4748 
DBM_RLDATA
, 
£qno
, 
bno
);

4750 i‡(
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
Ë< 
œ°block
) {

4751 
	`db¥ötf
(
	`_
(

4753 
i
, 
	`be32_to_˝u
(
Ω
[i].
rc_°¨tblock
),

4754 
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
),

4755 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
bno
);

4757 
œ°block
 = 
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
) +

4758 
	`be32_to_˝u
(
Ω
[
i
].
rc_blockcou¡
);

4763 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_ªfc_mxr
[1] ||

4764 (
i§oŸ
 =0 && 
	`be16_to_˝u
(
block
->
bb_numªcs
Ë< 
mp
->
m_ªfc_mƒ
[1])) {

4765 
	`db¥ötf
(
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) inÑefcntbt "

4767 
	`be16_to_˝u
(
block
->
bb_numªcs
), 
mp
->
m_ªfc_mƒ
[1],

4768 
mp
->
m_ªfc_mxr
[1], 
£qno
, 
bno
);

4769 
£rious_îr‹
++;

4772 
µ
 = 
	`XFS_REFCOUNT_PTR_ADDR
(
block
, 1, 
mp
->
m_ªfc_mxr
[1]);

4773 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

4774 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 0, 
sˇnfunc_ªf˙t
,

4775 
TYP_REFCBT
);

4776 
	}
}

4779 
	$£t_dbm≠
(

4780 
xfs_agnumbî_t
 
agno
,

4781 
xfs_agblock_t
 
agbno
,

4782 
xfs_exéí_t
 
Àn
,

4783 
dbm_t
 
ty≥
,

4784 
xfs_agnumbî_t
 
c_agno
,

4785 
xfs_agblock_t
 
c_agbno
)

4787 
	`check_£t_dbm≠
(
agno
, 
agbno
, 
Àn
, 
DBM_UNKNOWN
, 
ty≥
, 
c_agno
, 
c_agbno
);

4788 
	}
}

4791 
	$£t_öom≠
(

4792 
xfs_agnumbî_t
 
agno
,

4793 
xfs_agblock_t
 
agbno
,

4794 
xfs_exéí_t
 
Àn
,

4795 
öod©a_t
 *
id
)

4797 
xfs_exéí_t
 
i
;

4798 
öod©a_t
 **
idp
;

4799 
may¥öt
;

4801 i‡(!
	`check_öom≠
(
agno
, 
agbno
, 
Àn
, 
id
->
öo
))

4803 
may¥öt
 = 
vîbo£
 | 
id
->
ûi°
 | 
bli°_size
;

4804 
i
 = 0, 
idp
 = &
öom≠
[
agno
][
agbno
]; i < 
Àn
; i++, idp++) {

4805 *
idp
 = 
id
;

4806 i‡(
may¥öt
 &&

4807 (
vîbo£
 || 
id
->
ûi°
 || 
	`CHECK_BLISTA
(
agno
, 
agbno
 + 
i
)))

4808 
	`db¥ötf
(
	`_
("setting inodeÅo %lld for block %u/%u\n"),

4809 
id
->
öo
, 
agno
, 
agbno
 + 
i
);

4811 
	}
}

4814 
	$£t_rdbm≠
(

4815 
xfs_rfsblock_t
 
bno
,

4816 
xfs_exéí_t
 
Àn
,

4817 
dbm_t
 
ty≥
)

4819 
	`check_£t_rdbm≠
(
bno
, 
Àn
, 
DBM_UNKNOWN
, 
ty≥
);

4820 
	}
}

4823 
	$£t_röom≠
(

4824 
xfs_rfsblock_t
 
bno
,

4825 
xfs_exéí_t
 
Àn
,

4826 
öod©a_t
 *
id
)

4828 
xfs_exéí_t
 
i
;

4829 
öod©a_t
 **
idp
;

4830 
may¥öt
;

4832 i‡(!
	`check_röom≠
(
bno
, 
Àn
, 
id
->
öo
))

4834 
may¥öt
 = 
vîbo£
 | 
id
->
ûi°
 | 
bli°_size
;

4835 
i
 = 0, 
idp
 = &
öom≠
[
mp
->
m_sb
.
sb_agcou¡
][
bno
];

4836 
i
 < 
Àn
;

4837 
i
++, 
idp
++) {

4838 *
idp
 = 
id
;

4839 i‡(
may¥öt
 && (
vîbo£
 || 
id
->
ûi°
 || 
	`CHECK_BLIST
(
bno
 + 
i
)))

4840 
	`db¥ötf
(
	`_
("setting inodeÅo %lld forÑtblock %llu\n"),

4841 
id
->
öo
, 
bno
 + 
i
);

4843 
	}
}

4846 
	$£éök_öode
(

4847 
öod©a_t
 *
id
,

4848 
∆ök_t
 
∆ök
,

4849 
isdú
,

4850 
£curôy
)

4852 
id
->
lök_£t
 = 
∆ök
;

4853 
id
->
isdú
 = isdir;

4854 
id
->
£curôy
 = security;

4855 i‡(
vîbo£
 || 
id
->
ûi°
)

4856 
	`db¥ötf
(
	`_
("öodê%ŒdÇlök %u %†dú\n"), 
id
->
öo
, 
∆ök
,

4857 
isdú
 ? "is" : "not");

4858 
	}
}

	@db/check.h

19 
check_öô
();

	@db/command.c

19 
	~"libxfs.h
"

20 
	~"addr.h
"

21 
	~"©å£t.h
"

22 
	~"block.h
"

23 
	~"bm≠.h
"

24 
	~"check.h
"

25 
	~"comm™d.h
"

26 
	~"c⁄vît.h
"

27 
	~"debug.h
"

28 
	~"ty≥.h
"

29 
	~"echo.h
"

30 
	~"Áddr.h
"

31 
	~"Âröt.h
"

32 
	~"fõld.h
"

33 
	~"agf.h
"

34 
	~"agÊ.h
"

35 
	~"agi.h
"

36 
	~"‰ag.h
"

37 
	~"‰ì•.h
"

38 
	~"hñp.h
"

39 
	~"hash.h
"

40 
	~"öode.h
"

41 
	~"öput.h
"

42 
	~"io.h
"

43 
	~"logf‹m©.h
"

44 
	~"mëadump.h
"

45 
	~"ouçut.h
"

46 
	~"¥öt.h
"

47 
	~"quô.h
"

48 
	~"sb.h
"

49 
	~"wrôe.h
"

50 
	~"mÆloc.h
"

51 
	~"dquŸ.h
"

52 
	~"fsm≠.h
"

53 
	~"¸c.h
"

55 
cmdöfo_t
 *
	gcmdèb
;

56 
	gncmds
;

59 
	$cmd_com∑ª
(c⁄° *
a
, c⁄° *
b
)

61  
	`°rcmp
(((c⁄° 
cmdöfo_t
 *)
a
)->
«me
,

62 ((c⁄° 
cmdöfo_t
 *)
b
)->
«me
);

63 
	}
}

66 
	$add_comm™d
(

67 c⁄° 
cmdöfo_t
 *
ci
)

69 
cmdèb
 = 
	`xªÆloc
((*)cmdèb, ++
ncmds
 * (*cmdtab));

70 
cmdèb
[
ncmds
 - 1] = *
ci
;

71 
	`qs‹t
(
cmdèb
, 
ncmds
, (*cmdèb), 
cmd_com∑ª
);

72 
	}
}

75 
	$comm™d
(

76 
¨gc
,

77 **
¨gv
)

79 *
cmd
;

80 c⁄° 
cmdöfo_t
 *
˘
;

82 
cmd
 = 
¨gv
[0];

83 
˘
 = 
	`föd_comm™d
(
cmd
);

84 i‡(
˘
 =
NULL
) {

85 
	`db¥ötf
(
	`_
("comm™d %†nŸ found\n"), 
cmd
);

88 i‡(
¨gc
-1 < 
˘
->
¨gmö
 || (˘->
¨gmax
 != -1 &&árgc-1 > ct->argmax)) {

89 
	`db¥ötf
(
	`_
("badárgumíàcou¡ %dÅÿ%s,Éx≥˘ed "), 
¨gc
-1, 
cmd
);

90 i‡(
˘
->
¨gmax
 == -1)

91 
	`db¥ötf
(
	`_
("©Üó° %d"), 
˘
->
¨gmö
);

92 i‡(
˘
->
¨gmö
 =˘->
¨gmax
)

93 
	`db¥ötf
("%d", 
˘
->
¨gmö
);

95 
	`db¥ötf
(
	`_
("bëwì¿%dánd %d"), 
˘
->
¨gmö
, ct->
¨gmax
);

96 
	`db¥ötf
(
	`_
("árguments\n"));

99 
	`∂©f‹m_gë›åe£t
();

100  
˘
->
	`cfunc
(
¨gc
, 
¨gv
);

101 
	}
}

103 c⁄° 
cmdöfo_t
 *

104 
	$föd_comm™d
(

105 c⁄° *
cmd
)

107 
cmdöfo_t
 *
˘
;

109 
˘
 = 
cmdèb
; cà< &cmdèb[
ncmds
]; ct++) {

110 i‡(
	`°rcmp
(
˘
->
«me
, 
cmd
) == 0 ||

111 (
˘
->
Æäame
 && 
	`°rcmp
(˘->Æäame, 
cmd
) == 0))

112  (c⁄° 
cmdöfo_t
 *)
˘
;

114  
NULL
;

115 
	}
}

118 
	$öô_comm™ds
()

120 
	`addr_öô
();

121 
	`agf_öô
();

122 
	`agÊ_öô
();

123 
	`agi_öô
();

124 
	`©å£t_öô
();

125 
	`block_öô
();

126 
	`bm≠_öô
();

127 
	`check_öô
();

128 
	`c⁄vît_öô
();

129 
	`¸c_öô
();

130 
	`debug_öô
();

131 
	`echo_öô
();

132 
	`‰ag_öô
();

133 
	`‰ì•_öô
();

134 
	`fsm≠_öô
();

135 
	`hñp_öô
();

136 
	`hash_öô
();

137 
	`öode_öô
();

138 
	`öput_öô
();

139 
	`logf‹m©_öô
();

140 
	`io_öô
();

141 
	`mëadump_öô
();

142 
	`ouçut_öô
();

143 
	`¥öt_öô
();

144 
	`quô_öô
();

145 
	`sb_öô
();

146 
	`ty≥_öô
();

147 
	`wrôe_öô
();

148 
	`dquŸ_öô
();

149 
	}
}

	@db/command.h

19 (*
	tcfunc_t
)(
	t¨gc
, **
	t¨gv
);

20 (*
	thñpfunc_t
)();

22 
	scmdöfo


24 c⁄° *
«me
;

25 c⁄° *
Æäame
;

26 
cfunc_t
 
cfunc
;

27 
¨gmö
;

28 
¨gmax
;

29 
ˇ≈ush
;

30 c⁄° *
¨gs
;

31 c⁄° *
⁄ñöe
;

32 
hñpfunc_t
 
hñp
;

33 } 
	tcmdöfo_t
;

35 
cmdöfo_t
 *
cmdèb
;

36 
ncmds
;

38 
	`add_comm™d
(c⁄° 
cmdöfo_t
 *
ci
);

39 
	`comm™d
(
¨gc
, **
¨gv
);

40 c⁄° 
cmdöfo_t
 *
	`föd_comm™d
(c⁄° *
cmd
);

41 
	`öô_comm™ds
();

	@db/convert.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"c⁄vît.h
"

22 
	~"ouçut.h
"

23 
	~"öô.h
"

25 
	#M
(
A
Ë(1 << 
CT_
 ## A)

	)

26 
	#agblock_to_byãs
(
x
) \

27 ((
__uöt64_t
)(
x
Ë<< 
mp
->
m_sb
.
sb_blocklog
)

	)

28 
	#agöo_to_byãs
(
x
) \

29 ((
__uöt64_t
)(
x
Ë<< 
mp
->
m_sb
.
sb_öodñog
)

	)

30 
	#agnumbî_to_byãs
(
x
) \

31 
	`agblock_to_byãs
((
__uöt64_t
)(
x
Ë* 
mp
->
m_sb
.
sb_agblocks
)

	)

32 
	#daddr_to_byãs
(
x
) \

33 ((
__uöt64_t
)(
x
Ë<< 
BBSHIFT
)

	)

34 
	#fsblock_to_byãs
(
x
) \

35 (
	`agnumbî_to_byãs
(
	`XFS_FSB_TO_AGNO
(
mp
, (
x
))) + \

36 
	`agblock_to_byãs
(
	`XFS_FSB_TO_AGBNO
(
mp
, (
x
))))

	)

37 
	#öo_to_byãs
(
x
) \

38 (
	`agnumbî_to_byãs
(
	`XFS_INO_TO_AGNO
(
mp
, (
x
))) + \

39 
	`agöo_to_byãs
(
	`XFS_INO_TO_AGINO
(
mp
, (
x
))))

	)

40 
	#öoidx_to_byãs
(
x
) \

41 ((
__uöt64_t
)(
x
Ë<< 
mp
->
m_sb
.
sb_öodñog
)

	)

44 
	mCT_NONE
 = -1,

45 
	mCT_AGBLOCK
,

46 
	mCT_AGINO
,

47 
	mCT_AGNUMBER
,

48 
	mCT_BBOFF
,

49 
	mCT_BLKOFF
,

50 
	mCT_BYTE
,

51 
	mCT_DADDR
,

52 
	mCT_FSBLOCK
,

53 
	mCT_INO
,

54 
	mCT_INOIDX
,

55 
	mCT_INOOFF
,

56 
	mNCTS


57 } 
	t˘y≥_t
;

59 
	s˘ydesc
 {

60 
˘y≥_t
 
	m˘y≥
;

61 
	mÆlowed
;

62 c⁄° **
	m«mes
;

63 } 
	t˘ydesc_t
;

66 
xfs_agblock_t
 
	magblock
;

67 
xfs_agöo_t
 
	magöo
;

68 
xfs_agnumbî_t
 
	magnumbî
;

69 
	mbboff
;

70 
	mblkoff
;

71 
__uöt64_t
 
	mbyã
;

72 
xfs_daddr_t
 
	mdaddr
;

73 
xfs_fsblock_t
 
	mfsblock
;

74 
xfs_öo_t
 
	möo
;

75 
	möoidx
;

76 
	möooff
;

77 } 
	tcvÆ_t
;

79 
__uöt64_t
 
byãvÆue
(
˘y≥_t
 
˘y≥
, 
cvÆ_t
 *
vÆ
);

80 
c⁄vît_f
(
¨gc
, **
¨gv
);

81 
gëvÆue
(*
s
, 
˘y≥_t
 
˘y≥
, 
cvÆ_t
 *
vÆ
);

82 
˘y≥_t
 
lookup˘y
(*
˘y«me
);

84 c⁄° *
	gagblock_«mes
[] = { "agblock", "agbno", 
NULL
 };

85 c⁄° *
	gagöo_«mes
[] = { "agöo", "agöode", 
NULL
 };

86 c⁄° *
	gagnumbî_«mes
[] = { "agnumbî", "agno", 
NULL
 };

87 c⁄° *
	gbboff_«mes
[] = { "bboff", "daddroff", 
NULL
 };

88 c⁄° *
	gblkoff_«mes
[] = { "blkoff", "fsboff", "agboff",

89 
NULL
 };

90 c⁄° *
	gbyã_«mes
[] = { "byã", "fsbyã", 
NULL
 };

91 c⁄° *
	gdaddr_«mes
[] = { "daddr", "bb", 
NULL
 };

92 c⁄° *
	gfsblock_«mes
[] = { "fsblock", "fsb", "fsbno", 
NULL
 };

93 c⁄° *
	göo_«mes
[] = { "öo", "öode", 
NULL
 };

94 c⁄° *
	göoidx_«mes
[] = { "öoidx", "off£t", 
NULL
 };

95 c⁄° *
	göooff_«mes
[] = { "öooff", "öodeoff", 
NULL
 };

97 c⁄° 
˘ydesc_t
 
	g˘ydescs
[
NCTS
] = {

98 { 
CT_AGBLOCK
, 
M
(
AGNUMBER
)|M(
BBOFF
)|M(
BLKOFF
)|M(
INOIDX
)|M(
INOOFF
),

99 
agblock_«mes
 },

100 { 
CT_AGINO
, 
M
(
AGNUMBER
)|M(
INOOFF
), 
agöo_«mes
 },

101 { 
CT_AGNUMBER
,

102 
M
(
AGBLOCK
)|M(
AGINO
)|M(
BBOFF
)|M(
BLKOFF
)|M(
INOIDX
)|M(
INOOFF
),

103 
agnumbî_«mes
 },

104 { 
CT_BBOFF
, 
M
(
AGBLOCK
)|M(
AGNUMBER
)|M(
DADDR
)|M(
FSBLOCK
), 
bboff_«mes
 },

105 { 
CT_BLKOFF
, 
M
(
AGBLOCK
)|M(
AGNUMBER
)|M(
FSBLOCK
), 
blkoff_«mes
 },

106 { 
CT_BYTE
, 0, 
byã_«mes
 },

107 { 
CT_DADDR
, 
M
(
BBOFF
), 
daddr_«mes
 },

108 { 
CT_FSBLOCK
, 
M
(
BBOFF
)|M(
BLKOFF
)|M(
INOIDX
), 
fsblock_«mes
 },

109 { 
CT_INO
, 
M
(
INOOFF
), 
öo_«mes
 },

110 { 
CT_INOIDX
, 
M
(
AGBLOCK
)|M(
AGNUMBER
)|M(
FSBLOCK
)|M(
INOOFF
),

111 
öoidx_«mes
 },

112 { 
CT_INOOFF
,

113 
M
(
AGBLOCK
)|M(
AGINO
)|M(
AGNUMBER
)|M(
FSBLOCK
)|M(
INO
)|M(
INOIDX
),

114 
öooff_«mes
 },

117 c⁄° 
cmdöfo_t
 
	gc⁄vît_cmd
 =

118 { "c⁄vît", 
NULL
, 
c⁄vît_f
, 3, 9, 0, "typeÇum [typeÇum]...Åype",

119 "c⁄vîà‰om o√áddªs†f‹mÅÿ™Ÿhî", 
NULL
 };

121 
__uöt64_t


122 
	$byãvÆue
(
˘y≥_t
 
˘y≥
, 
cvÆ_t
 *
vÆ
)

124 
˘y≥
) {

125 
CT_AGBLOCK
:

126  
	`agblock_to_byãs
(
vÆ
->
agblock
);

127 
CT_AGINO
:

128  
	`agöo_to_byãs
(
vÆ
->
agöo
);

129 
CT_AGNUMBER
:

130  
	`agnumbî_to_byãs
(
vÆ
->
agnumbî
);

131 
CT_BBOFF
:

132  (
__uöt64_t
)
vÆ
->
bboff
;

133 
CT_BLKOFF
:

134  (
__uöt64_t
)
vÆ
->
blkoff
;

135 
CT_BYTE
:

136  
vÆ
->
byã
;

137 
CT_DADDR
:

138  
	`daddr_to_byãs
(
vÆ
->
daddr
);

139 
CT_FSBLOCK
:

140  
	`fsblock_to_byãs
(
vÆ
->
fsblock
);

141 
CT_INO
:

142  
	`öo_to_byãs
(
vÆ
->
öo
);

143 
CT_INOIDX
:

144  
	`öoidx_to_byãs
(
vÆ
->
öoidx
);

145 
CT_INOOFF
:

146  (
__uöt64_t
)
vÆ
->
öooff
;

147 
CT_NONE
:

148 
NCTS
:

153 
	}
}

156 
	$c⁄vît_f
(
¨gc
, **
¨gv
)

158 
˘y≥_t
 
c
;

159 
c⁄mask
;

160 
cvÆ_t
 
cvÆs
[
NCTS
] = {};

161 
i
;

162 
mask
;

163 
__uöt64_t
 
v
;

164 
˘y≥_t
 
wty≥
;

167 
¨gc
--;

168 
¨gv
++;

170 i‡((
¨gc
 % 2) != 1) {

171 
	`db¥ötf
(
	`_
("badárgument count %dÅo convert,Éxpected 3,5,7,9 "

172 "¨gumíts\n"), 
¨gc
);

175 i‡((
wty≥
 = 
	`lookup˘y
(
¨gv
[
¨gc
 - 1])Ë=
CT_NONE
) {

176 
	`db¥ötf
(
	`_
("unknow¿c⁄vîsi⁄Åy≥ %s\n"), 
¨gv
[
¨gc
 - 1]);

180 
i
 = 
mask
 = 
c⁄mask
 = 0; i < (
¨gc
 - 1) / 2; i++) {

181 
c
 = 
	`lookup˘y
(
¨gv
[
i
 * 2]);

182 i‡(
c
 =
CT_NONE
) {

183 
	`db¥ötf
(
	`_
("unknow¿c⁄vîsi⁄Åy≥ %s\n"), 
¨gv
[
i
 * 2]);

186 i‡(
c
 =
wty≥
) {

187 
	`db¥ötf
(
	`_
("resultÅype sameásárgument\n"));

190 i‡(
c⁄mask
 & (1 << 
c
)) {

191 
	`db¥ötf
(
	`_
("conflicting conversionÅype %s\n"),

192 
¨gv
[
i
 * 2]);

195 i‡(!
	`gëvÆue
(
¨gv
[
i
 * 2 + 1], 
c
, &
cvÆs
[c]))

197 
mask
 |1 << 
c
;

198 
c⁄mask
 |~
˘ydescs
[
c
].
Ælowed
;

200 i‡(
cur_agno
 !
NULLAGNUMBER
 && (
c⁄mask
 & 
	`M
(
AGNUMBER
)) == 0) {

201 
cvÆs
[
CT_AGNUMBER
].
agnumbî
 = 
cur_agno
;

202 
mask
 |
	`M
(
AGNUMBER
);

204 
v
 = 0;

205 
c
 = (
˘y≥_t
)0; c < 
NCTS
; c++) {

206 i‡(!(
mask
 & (1 << 
c
)))

208 
v
 +
	`byãvÆue
(
c
, &
cvÆs
[c]);

210 
wty≥
) {

211 
CT_AGBLOCK
:

212 
v
 = 
	`xfs_daddr_to_agbno
(
mp
, v >> 
BBSHIFT
);

214 
CT_AGINO
:

215 
v
 = (v >> 
mp
->
m_sb
.
sb_öodñog
) %

216 (
mp
->
m_sb
.
sb_agblocks
 << mp->m_sb.
sb_ö›blog
);

218 
CT_AGNUMBER
:

219 
v
 = 
	`xfs_daddr_to_agno
(
mp
, v >> 
BBSHIFT
);

221 
CT_BBOFF
:

222 
v
 &
BBMASK
;

224 
CT_BLKOFF
:

225 
v
 &
mp
->
m_blockmask
;

227 
CT_BYTE
:

229 
CT_DADDR
:

230 
v
 >>
BBSHIFT
;

232 
CT_FSBLOCK
:

233 
v
 = 
	`XFS_DADDR_TO_FSB
(
mp
, v >> 
BBSHIFT
);

235 
CT_INO
:

236 
v
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
	`xfs_daddr_to_agno
(mp, v >> 
BBSHIFT
),

237 (
v
 >> 
mp
->
m_sb
.
sb_öodñog
) %

238 (
mp
->
m_sb
.
sb_agblocks
 << mp->m_sb.
sb_ö›blog
));

240 
CT_INOIDX
:

241 
v
 = (v >> 
mp
->
m_sb
.
sb_öodñog
Ë& (mp->m_sb.
sb_ö›block
 - 1);

243 
CT_INOOFF
:

244 
v
 &
mp
->
m_sb
.
sb_öodesize
 - 1;

246 
CT_NONE
:

247 
NCTS
:

251 
	`db¥ötf
("0x%Œx (%Œu)\n", 
v
, v);

253 
	}
}

256 
	$c⁄vît_öô
()

258 
	`add_comm™d
(&
c⁄vît_cmd
);

259 
	}
}

262 
	$gëvÆue
(*
s
, 
˘y≥_t
 
˘y≥
, 
cvÆ_t
 *
vÆ
)

264 *
p
;

265 
__uöt64_t
 
v
;

267 
v
 = 
	`°πouŒ
(
s
, &
p
, 0);

268 i‡(*
p
 != '\0') {

269 
	`db¥ötf
(
	`_
("%†i†nŸáÇumbî\n"), 
s
);

272 
˘y≥
) {

273 
CT_AGBLOCK
:

274 
vÆ
->
agblock
 = (
xfs_agblock_t
)
v
;

276 
CT_AGINO
:

277 
vÆ
->
agöo
 = (
xfs_agöo_t
)
v
;

279 
CT_AGNUMBER
:

280 
vÆ
->
agnumbî
 = (
xfs_agnumbî_t
)
v
;

282 
CT_BBOFF
:

283 
vÆ
->
bboff
 = ()
v
;

285 
CT_BLKOFF
:

286 
vÆ
->
blkoff
 = ()
v
;

288 
CT_BYTE
:

289 
vÆ
->
byã
 = (
__uöt64_t
)
v
;

291 
CT_DADDR
:

292 
vÆ
->
daddr
 = (
xfs_daddr_t
)
v
;

294 
CT_FSBLOCK
:

295 
vÆ
->
fsblock
 = (
xfs_fsblock_t
)
v
;

297 
CT_INO
:

298 
vÆ
->
öo
 = (
xfs_öo_t
)
v
;

300 
CT_INOIDX
:

301 
vÆ
->
öoidx
 = ()
v
;

303 
CT_INOOFF
:

304 
vÆ
->
öooff
 = ()
v
;

306 
CT_NONE
:

307 
NCTS
:

312 
	}
}

314 
˘y≥_t


315 
	$lookup˘y
(*
˘y«me
)

317 
˘y≥_t
 
˘y
;

318 c⁄° **
«me
;

320 
˘y
 = (
˘y≥_t
)0; cty < 
NCTS
; cty++) {

321 
«me
 = 
˘ydescs
[
˘y
].
«mes
; *name;Çame++) {

322 i‡(
	`°rcmp
(
˘y«me
, *
«me
) == 0)

323  
˘y
;

326  
CT_NONE
;

327 
	}
}

	@db/convert.h

19 
c⁄vît_öô
();

	@db/crc.c

18 
	~"libxfs.h
"

19 
	~"addr.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"Êi°.h
"

26 
	~"io.h
"

27 
	~"öô.h
"

28 
	~"ouçut.h
"

29 
	~"bô.h
"

30 
	~"¥öt.h
"

32 
¸c_f
(
¨gc
, **
¨gv
);

33 
¸c_hñp
();

35 c⁄° 
cmdöfo_t
 
	g¸c_cmd
 =

36 { "¸c", 
NULL
, 
¸c_f
, 0, 1, 0, "[-i|-r|-v]",

37 
N_
("m™ùuœã cr¯vÆue†f‹ V5 fûesy°em såu˘uªs"), 
¸c_hñp
 };

40 
	$¸c_öô
()

42 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

43 
	`add_comm™d
(&
¸c_cmd
);

44 
	}
}

47 
	$¸c_hñp
()

49 
	`db¥ötf
(
	`_
(

58 
	}
}

61 
	$¸c_f
(

62 
¨gc
,

63 **
¨gv
)

65 c⁄° 
xfs_buf_›s
 *
°ashed_›s
 = 
NULL
;

66 *
¥og«me
;

67 c⁄° 
fõld_t
 *
fõlds
;

68 c⁄° 
·©å_t
 *
Á
;

69 
Êi°_t
 *
Ê
;

70 
övÆid©e
 = 0;

71 
ªˇlcuœã
 = 0;

72 
vÆid©e
 = 0;

73 
c
;

75 i‡(
cur_typ
 =
NULL
) {

76 
	`db¥ötf
(
	`_
("no currentÅype\n"));

80 i‡(
cur_typ
->
fõlds
 =
NULL
) {

81 
	`db¥ötf
(
	`_
("currentÅype (%s) isÇotá structure\n"),

82 
cur_typ
->
«me
);

86 i‡(
¨gc
Ë(
c
 = 
	`gë›t
◊rgc, 
¨gv
, "úv")Ë!
EOF
) {

87 
c
) {

89 
övÆid©e
 = 1;

92 
ªˇlcuœã
 = 1;

95 
vÆid©e
 = 1;

98 
	`db¥ötf
(
	`_
("bad option for crc command\n"));

102 
vÆid©e
 = 1;

104 i‡(
övÆid©e
 + 
ªˇlcuœã
 + 
vÆid©e
 > 1) {

105 
	`db¥ötf
(
	`_
("crc commandáccepts only one option\n"));

109 i‡((
övÆid©e
 || 
ªˇlcuœã
) &&

110 ((
x
.
i§ód⁄ly
 & 
LIBXFS_ISREADONLY
Ë|| !
ex≥π_mode
)) {

111 
	`db¥ötf
(
	`_
("%sÇot inÉxpert mode, writing disabled\n"),

112 
¥og«me
);

116 
fõlds
 = 
cur_typ
->fields;

119 i‡(
fõlds
->
«me
[0] == '\0') {

120 
Á
 = &
·©åèb
[
fõlds
->
·yp
];

121 
	`ASSERT
(
Á
->
·yp
 =
fõlds
->ftyp);

122 
fõlds
 = 
Á
->
subÊd
;

126 
Ê
 = 
	`Êi°_föd_·yp
(
fõlds
, 
FLDT_CRC
);

127 i‡(!
Ê
) {

128 
	`db¥ötf
(
	`_
("NÿCRC fõld found f‹Åy≥ %s\n"), 
cur_typ
->
«me
);

133 i‡(!
	`Êi°_∑r£
(
fõlds
, 
Ê
, 
iocur_t›
->
d©a
, 0)) {

134 
	`Êi°_‰ì
(
Ê
);

135 
	`db¥ötf
(
	`_
("parsingÉrror\n"));

139 i‡(
övÆid©e
) {

140 
xfs_buf_›s
 
nowrôe_›s
;

141 
Êi°_t
 *
sÊ
;

142 
bô_Àngth
;

143 
∑ª¡off£t
;

144 
¸c
;

146 
sÊ
 = 
Ê
;

147 
∑ª¡off£t
 = 0;

148 
sÊ
->
chûd
) {

149 
∑ª¡off£t
 = 
sÊ
->
off£t
;

150 
sÊ
 = sÊ->
chûd
;

152 
	`ASSERT
(
sÊ
->
Êd
->
·yp
 =
FLDT_CRC
);

154 
bô_Àngth
 = 
	`fsize
(
sÊ
->
Êd
, 
iocur_t›
->
d©a
, 
∑ª¡off£t
, 0);

155 
bô_Àngth
 *
	`fcou¡
(
sÊ
->
Êd
, 
iocur_t›
->
d©a
, 
∑ª¡off£t
);

156 
¸c
 = 
	`gëbôvÆ
(
iocur_t›
->
d©a
, 
sÊ
->
off£t
, 
bô_Àngth
,

157 
BVUNSIGNED
);

159 
¸c
 = 
	`˝u_to_be32
(crc + 1);

160 
	`£tbôvÆ
(
iocur_t›
->
d©a
, 
sÊ
->
off£t
, 
bô_Àngth
, &
¸c
);

163 
°ashed_›s
 = 
iocur_t›
->
bp
->
b_›s
;

164 
nowrôe_›s
.
vîify_ªad
 = 
°ashed_›s
->verify_read;

165 
nowrôe_›s
.
vîify_wrôe
 = 
xfs_dummy_vîify
;

166 
iocur_t›
->
bp
->
b_›s
 = &
nowrôe_›s
;

169 i‡(
övÆid©e
 || 
ªˇlcuœã
) {

170 i‡(
övÆid©e
)

171 
	`db¥ötf
(
	`_
("Invalidating CRC:\n"));

173 
	`db¥ötf
(
	`_
("Recalculating CRC:\n"));

175 
	`wrôe_cur
();

176 i‡(
°ashed_›s
)

177 
iocur_t›
->
bp
->
b_›s
 = 
°ashed_›s
;

179 
iocur_t›
->
bp
->
b_›s
->
	`vîify_ªad
(iocur_top->bp);

181 
	`db¥ötf
(
	`_
("Verifying CRC:\n"));

184 
	`Êi°_¥öt
(
Ê
);

185 
	`¥öt_Êi°
(
Ê
);

186 
	`Êi°_‰ì
(
Ê
);

188 
	}
}

	@db/crc.h

18 
	gfõld
;

20 
¸c_öô
();

21 
¸c_°ru˘
(c⁄° 
fõld_t
 *
fõlds
, 
¨gc
, **
¨gv
);

	@db/debug.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"debug.h
"

22 
	~"ouçut.h
"

24 
debug_f
(
¨gc
, **
¨gv
);

26 c⁄° 
cmdöfo_t
 
	gdebug_cmd
 =

27 { "debug", 
NULL
, 
debug_f
, 0, 1, 0, 
N_
("[flagbits]"),

28 
N_
("£àdebug o±i⁄ bôs"), 
NULL
 };

30 
	gdebug_°©e
;

33 
	$debug_f
(

34 
¨gc
,

35 **
¨gv
)

37 *
p
;

39 i‡(
¨gc
 > 1) {

40 
debug_°©e
 = 
	`°πﬁ
(
¨gv
[1], &
p
, 0);

41 i‡(*
p
 != '\0') {

42 
	`db¥ötf
(
	`_
("bad vÆuêf‹ debug %s\n"), 
¨gv
[1]);

46 
	`db¥ötf
("debug = %ld\n", 
debug_°©e
);

48 
	}
}

51 
	$debug_öô
()

53 
	`add_comm™d
(&
debug_cmd
);

54 
	}
}

	@db/debug.h

19 
	#DEBUG_FLIST
 0x1

	)

21 
debug_°©e
;

22 
debug_öô
();

	@db/dir2.c

19 
	~"libxfs.h
"

20 
	~"bô.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"dú2.h
"

26 
	~"öô.h
"

27 
	~"ouçut.h
"

29 
dú2_block_hdr_cou¡
(*
obj
, 
°¨toff
);

30 
dú2_block_Àaf_cou¡
(*
obj
, 
°¨toff
);

31 
dú2_block_Àaf_off£t
(*
obj
, 
°¨toff
, 
idx
);

32 
dú2_block_èû_cou¡
(*
obj
, 
°¨toff
);

33 
dú2_block_èû_off£t
(*
obj
, 
°¨toff
, 
idx
);

34 
dú2_block_u_cou¡
(*
obj
, 
°¨toff
);

35 
dú2_block_u_off£t
(*
obj
, 
°¨toff
, 
idx
);

36 
dú2_d©a_uni⁄_‰ìèg_cou¡
(*
obj
, 
°¨toff
);

37 
dú2_d©a_uni⁄_öumbî_cou¡
(*
obj
, 
°¨toff
);

38 
dú2_d©a_uni⁄_Àngth_cou¡
(*
obj
, 
°¨toff
);

39 
dú2_d©a_uni⁄_«me_cou¡
(*
obj
, 
°¨toff
);

40 
dú2_d©a_uni⁄_«mñí_cou¡
(*
obj
, 
°¨toff
);

41 
dú2_d©a_uni⁄_èg_cou¡
(*
obj
, 
°¨toff
);

42 
dú2_d©a_uni⁄_èg_off£t
(*
obj
, 
°¨toff
, 
idx
);

43 
dú2_d©a_hdr_cou¡
(*
obj
, 
°¨toff
);

44 
dú2_d©a_u_cou¡
(*
obj
, 
°¨toff
);

45 
dú2_d©a_u_off£t
(*
obj
, 
°¨toff
, 
idx
);

46 
dú2_‰ì_be°s_cou¡
(*
obj
, 
°¨toff
);

47 
dú2_‰ì_hdr_cou¡
(*
obj
, 
°¨toff
);

48 
dú2_Àaf_be°s_cou¡
(*
obj
, 
°¨toff
);

49 
dú2_Àaf_be°s_off£t
(*
obj
, 
°¨toff
, 
idx
);

50 
dú2_Àaf_íts_cou¡
(*
obj
, 
°¨toff
);

51 
dú2_Àaf_hdr_cou¡
(*
obj
, 
°¨toff
);

52 
dú2_Àaf_èû_cou¡
(*
obj
, 
°¨toff
);

53 
dú2_Àaf_èû_off£t
(*
obj
, 
°¨toff
, 
idx
);

54 
dú2_node_båì_cou¡
(*
obj
, 
°¨toff
);

55 
dú2_node_hdr_cou¡
(*
obj
, 
°¨toff
);

57 c⁄° 
fõld_t
 
	gdú2_hÊd
[] = {

58 { "", 
FLDT_DIR2
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

59 { 
NULL
 }

62 
	#BOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_hdr
, f))

	)

63 
	#DOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_hdr
, f))

	)

64 
	#FOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_‰ì
, f))

	)

65 
	#LOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_Àaf
, f))

	)

66 
	#NOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_öäode
, f))

	)

67 c⁄° 
fõld_t
 
	gdú2_Êds
[] = {

68 { "bhdr", 
FLDT_DIR2_DATA_HDR
, 
OI
(
BOFF
(
magic
)), 
dú2_block_hdr_cou¡
,

69 
FLD_COUNT
, 
TYP_NONE
 },

70 { "bu", 
FLDT_DIR2_DATA_UNION
, 
dú2_block_u_off£t
, 
dú2_block_u_cou¡
,

71 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

72 { "bÀaf", 
FLDT_DIR2_LEAF_ENTRY
, 
dú2_block_Àaf_off£t
,

73 
dú2_block_Àaf_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

74 { "bèû", 
FLDT_DIR2_BLOCK_TAIL
, 
dú2_block_èû_off£t
,

75 
dú2_block_èû_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

76 { "dhdr", 
FLDT_DIR2_DATA_HDR
, 
OI
(
DOFF
(
magic
)), 
dú2_d©a_hdr_cou¡
,

77 
FLD_COUNT
, 
TYP_NONE
 },

78 { "du", 
FLDT_DIR2_DATA_UNION
, 
dú2_d©a_u_off£t
, 
dú2_d©a_u_cou¡
,

79 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

80 { "lhdr", 
FLDT_DIR2_LEAF_HDR
, 
OI
(
LOFF
(
hdr
)), 
dú2_Àaf_hdr_cou¡
,

81 
FLD_COUNT
, 
TYP_NONE
 },

82 { "lbe°s", 
FLDT_DIR2_DATA_OFF
, 
dú2_Àaf_be°s_off£t
,

83 
dú2_Àaf_be°s_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

84 { "À¡s", 
FLDT_DIR2_LEAF_ENTRY
, 
OI
(
LOFF
(
__íts
)), 
dú2_Àaf_íts_cou¡
,

85 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

86 { "…aû", 
FLDT_DIR2_LEAF_TAIL
, 
dú2_Àaf_èû_off£t
,

87 
dú2_Àaf_èû_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

88 { "nhdr", 
FLDT_DA_NODE_HDR
, 
OI
(
NOFF
(
hdr
)), 
dú2_node_hdr_cou¡
,

89 
FLD_COUNT
, 
TYP_NONE
 },

90 { "nbåì", 
FLDT_DA_NODE_ENTRY
, 
OI
(
NOFF
(
__båì
)), 
dú2_node_båì_cou¡
,

91 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

92 { "fhdr", 
FLDT_DIR2_FREE_HDR
, 
OI
(
FOFF
(
hdr
)), 
dú2_‰ì_hdr_cou¡
,

93 
FLD_COUNT
, 
TYP_NONE
 },

94 { "fbe°s", 
FLDT_DIR2_DATA_OFFNZ
, 
OI
(
FOFF
(
be°s
)),

95 
dú2_‰ì_be°s_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

96 { 
NULL
 }

99 
	#BTOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_block_èû_t
, f))

	)

100 c⁄° 
fõld_t
 
	gdú2_block_èû_Êds
[] = {

101 { "cou¡", 
FLDT_UINT32D
, 
OI
(
BTOFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

102 { "°Æe", 
FLDT_UINT32D
, 
OI
(
BTOFF
(
°Æe
)), 
C1
, 0, 
TYP_NONE
 },

103 { 
NULL
 }

106 
	#DFOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_‰ì_t
, f))

	)

107 c⁄° 
fõld_t
 
	gdú2_d©a_‰ì_Êds
[] = {

108 { "off£t", 
FLDT_DIR2_DATA_OFF
, 
OI
(
DFOFF
(
off£t
)), 
C1
, 0, 
TYP_NONE
 },

109 { "Àngth", 
FLDT_DIR2_DATA_OFF
, 
OI
(
DFOFF
(
Àngth
)), 
C1
, 0, 
TYP_NONE
 },

110 { 
NULL
 }

113 
	#DHOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_hdr_t
, f))

	)

114 c⁄° 
fõld_t
 
	gdú2_d©a_hdr_Êds
[] = {

115 { "magic", 
FLDT_UINT32X
, 
OI
(
DHOFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

116 { "be°‰ì", 
FLDT_DIR2_DATA_FREE
, 
OI
(
DHOFF
(
be°‰ì
)),

117 
CI
(
XFS_DIR2_DATA_FD_COUNT
), 
FLD_ARRAY
, 
TYP_NONE
 },

118 { 
NULL
 }

121 
	#DEOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_íåy_t
, f))

	)

122 
	#DUOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_unu£d_t
, f))

	)

123 c⁄° 
fõld_t
 
	gdú2_d©a_uni⁄_Êds
[] = {

124 { "‰ìèg", 
FLDT_UINT16X
, 
OI
(
DUOFF
(
‰ìèg
)),

125 
dú2_d©a_uni⁄_‰ìèg_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

126 { "öumbî", 
FLDT_INO
, 
OI
(
DEOFF
(
öumbî
)),

127 
dú2_d©a_uni⁄_öumbî_cou¡
, 
FLD_COUNT
, 
TYP_INODE
 },

128 { "Àngth", 
FLDT_DIR2_DATA_OFF
, 
OI
(
DUOFF
(
Àngth
)),

129 
dú2_d©a_uni⁄_Àngth_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

130 { "«mñí", 
FLDT_UINT8D
, 
OI
(
DEOFF
(
«mñí
)),

131 
dú2_d©a_uni⁄_«mñí_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

132 { "«me", 
FLDT_CHARNS
, 
OI
(
DEOFF
(
«me
)), 
dú2_d©a_uni⁄_«me_cou¡
,

133 
FLD_COUNT
, 
TYP_NONE
 },

134 { "èg", 
FLDT_DIR2_DATA_OFF
, 
dú2_d©a_uni⁄_èg_off£t
,

135 
dú2_d©a_uni⁄_èg_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

136 { 
NULL
 }

139 
	#LEOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_Àaf_íåy_t
, f))

	)

140 c⁄° 
fõld_t
 
	gdú2_Àaf_íåy_Êds
[] = {

141 { "hashvÆ", 
FLDT_UINT32X
, 
OI
(
LEOFF
(
hashvÆ
)), 
C1
, 0, 
TYP_NONE
 },

142 { "addªss", 
FLDT_UINT32X
, 
OI
(
LEOFF
(
addªss
)), 
C1
, 0, 
TYP_NONE
 },

143 { 
NULL
 }

146 
	#LHOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_Àaf_hdr_t
, f))

	)

147 c⁄° 
fõld_t
 
	gdú2_Àaf_hdr_Êds
[] = {

148 { "öfo", 
FLDT_DA_BLKINFO
, 
OI
(
LHOFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

149 { "cou¡", 
FLDT_UINT16D
, 
OI
(
LHOFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

150 { "°Æe", 
FLDT_UINT16D
, 
OI
(
LHOFF
(
°Æe
)), 
C1
, 0, 
TYP_NONE
 },

151 { 
NULL
 }

154 
	#LTOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_Àaf_èû_t
, f))

	)

155 c⁄° 
fõld_t
 
	gdú2_Àaf_èû_Êds
[] = {

156 { "be°cou¡", 
FLDT_UINT32D
, 
OI
(
LTOFF
(
be°cou¡
)), 
C1
, 0, 
TYP_NONE
 },

157 { 
NULL
 }

160 
	#FHOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_‰ì_hdr_t
, f))

	)

161 c⁄° 
fõld_t
 
	gdú2_‰ì_hdr_Êds
[] = {

162 { "magic", 
FLDT_UINT32X
, 
OI
(
FHOFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

163 { "fú°db", 
FLDT_INT32D
, 
OI
(
FHOFF
(
fú°db
)), 
C1
, 0, 
TYP_NONE
 },

164 { "nvÆid", 
FLDT_INT32D
, 
OI
(
FHOFF
(
nvÆid
)), 
C1
, 0, 
TYP_NONE
 },

165 { "nu£d", 
FLDT_INT32D
, 
OI
(
FHOFF
(
nu£d
)), 
C1
, 0, 
TYP_NONE
 },

166 { 
NULL
 }

169 
	#DBOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_blköfo_t
, f))

	)

170 c⁄° 
fõld_t
 
	gda_blköfo_Êds
[] = {

171 { "f‹w", 
FLDT_DIRBLOCK
, 
OI
(
DBOFF
(
f‹w
)), 
C1
, 0, 
TYP_INODATA
 },

172 { "back", 
FLDT_DIRBLOCK
, 
OI
(
DBOFF
(
back
)), 
C1
, 0, 
TYP_INODATA
 },

173 { "magic", 
FLDT_UINT16X
, 
OI
(
DBOFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

174 { "∑d", 
FLDT_UINT16X
, 
OI
(
DBOFF
(
∑d
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

175 { 
NULL
 }

178 
	#EOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_node_íåy_t
, f))

	)

179 c⁄° 
fõld_t
 
	gda_node_íåy_Êds
[] = {

180 { "hashvÆ", 
FLDT_UINT32X
, 
OI
(
EOFF
(
hashvÆ
)), 
C1
, 0, 
TYP_NONE
 },

181 { "bef‹e", 
FLDT_DIRBLOCK
, 
OI
(
EOFF
(
bef‹e
)), 
C1
, 0, 
TYP_INODATA
 },

182 { 
NULL
 }

185 
	#HOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da_node_hdr_t
, f))

	)

186 c⁄° 
fõld_t
 
	gda_node_hdr_Êds
[] = {

187 { "öfo", 
FLDT_DA_BLKINFO
, 
OI
(
HOFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

188 { "cou¡", 
FLDT_UINT16D
, 
OI
(
HOFF
(
__cou¡
)), 
C1
, 0, 
TYP_NONE
 },

189 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
HOFF
(
__Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

190 { 
NULL
 }

197 
	$__dú2_block_èû_off£t
(

198 
xfs_dú2_d©a_hdr
 *
block
,

199 
°¨toff
,

200 
idx
)

202 
xfs_dú2_block_èû
 *
bç
;

204 
	`ASSERT
(
°¨toff
 == 0);

205 
	`ASSERT
(
idx
 == 0);

206 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

207  
	`bôize
(()((*)
bç
 - (*)
block
));

208 
	}
}

211 
	$__dú2_d©a_íåõs_cou¡
(

212 *
±r
,

213 *
íd±r
)

215 
i
;

217 
i
 = 0; 
±r
 < 
íd±r
; i++) {

218 
xfs_dú2_d©a_íåy
 *
dï
;

219 
xfs_dú2_d©a_unu£d
 *
dup
;

221 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

222 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

223 
±r
 +
	`be16_to_˝u
(
dup
->
Àngth
);

225 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
±r
;

226 
±r
 +
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

229  
i
;

230 
	}
}

233 
	$__dú2_d©a_íåy_off£t
(

234 *
±r
,

235 *
íd±r
,

236 
idx
)

238 
i
;

240 
i
 = 0; i < 
idx
; i++) {

241 
xfs_dú2_d©a_íåy
 *
dï
;

242 
xfs_dú2_d©a_unu£d
 *
dup
;

244 
	`ASSERT
(
±r
 < 
íd±r
);

245 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

246 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

247 
±r
 +
	`be16_to_˝u
(
dup
->
Àngth
);

249 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
±r
;

250 
±r
 +
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

253  
±r
;

254 
	}
}

260 
	$dú2_block_hdr_cou¡
(

261 *
obj
,

262 
°¨toff
)

264 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

266 
	`ASSERT
(
°¨toff
 == 0);

267  
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
;

268 
	}
}

271 
	$dú3_block_hdr_cou¡
(

272 *
obj
,

273 
°¨toff
)

275 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

277 
	`ASSERT
(
°¨toff
 == 0);

278  
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
;

279 
	}
}

282 
	$dú2_block_Àaf_cou¡
(

283 *
obj
,

284 
°¨toff
)

286 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

287 
xfs_dú2_block_èû
 *
bç
;

289 
	`ASSERT
(
°¨toff
 == 0);

290 i‡(
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR2_BLOCK_MAGIC
 &&

291 
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR3_BLOCK_MAGIC
)

293 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

294  
	`be32_to_˝u
(
bç
->
cou¡
);

295 
	}
}

298 
	$dú2_block_Àaf_off£t
(

299 *
obj
,

300 
°¨toff
,

301 
idx
)

303 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

304 
xfs_dú2_block_èû
 *
bç
;

305 
xfs_dú2_Àaf_íåy
 *
Àp
;

307 
	`ASSERT
(
°¨toff
 == 0);

308 
	`ASSERT
(
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

309 
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
);

310 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

311 
Àp
 = 
	`xfs_dú2_block_Àaf_p
(
bç
Ë+ 
idx
;

312  
	`bôize
(()((*)
Àp
 - (*)
block
));

313 
	}
}

316 
	$dú2_block_èû_cou¡
(

317 *
obj
,

318 
°¨toff
)

320 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

322 
	`ASSERT
(
°¨toff
 == 0);

323  
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
;

324 
	}
}

327 
	$dú3_block_èû_cou¡
(

328 *
obj
,

329 
°¨toff
)

331 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

333 
	`ASSERT
(
°¨toff
 == 0);

334  
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
;

335 
	}
}

338 
	$dú2_block_èû_off£t
(

339 *
obj
,

340 
°¨toff
,

341 
idx
)

343 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

345 
	`ASSERT
(
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

346 
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
);

347  
	`__dú2_block_èû_off£t
(
block
, 
°¨toff
, 
idx
);

348 
	}
}

351 
	$dú2_block_u_cou¡
(

352 *
obj
,

353 
°¨toff
)

355 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

356 
xfs_dú2_block_èû
 *
bç
;

358 
	`ASSERT
(
°¨toff
 == 0);

359 i‡(
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR2_BLOCK_MAGIC
 &&

360 
	`be32_to_˝u
(
block
->
magic
Ë!
XFS_DIR3_BLOCK_MAGIC
)

363 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

364  
	`__dú2_d©a_íåõs_cou¡
(

365 (*)
	`M_DIROPS
(
mp
)->
	`d©a_unu£d_p
(
block
),

366 (*)
	`xfs_dú2_block_Àaf_p
(
bç
));

367 
	}
}

370 
	$dú2_block_u_off£t
(

371 *
obj
,

372 
°¨toff
,

373 
idx
)

375 
xfs_dú2_d©a_hdr
 *
block
 = 
obj
;

376 
xfs_dú2_block_èû
 *
bç
;

377 *
±r
;

379 
	`ASSERT
(
°¨toff
 == 0);

380 
	`ASSERT
(
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

381 
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
);

382 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

383 
±r
 = 
	`__dú2_d©a_íåy_off£t
(

384 (*)
	`M_DIROPS
(
mp
)->
	`d©a_unu£d_p
(
block
),

385 (*)
	`xfs_dú2_block_Àaf_p
(
bç
), 
idx
);

386  
	`bôize
(()(
±r
 - (*)
block
));

387 
	}
}

393 
	$dú2_d©a_uni⁄_‰ìèg_cou¡
(

394 *
obj
,

395 
°¨toff
)

397 
xfs_dú2_d©a_unu£d_t
 *
dup
;

398 *
íd
;

400 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

401 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

402 
íd
 = (*)&
dup
->
‰ìèg
 + (dup->freetag);

403  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 &&

404 
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
;

405 
	}
}

408 
	$dú2_d©a_uni⁄_öumbî_cou¡
(

409 *
obj
,

410 
°¨toff
)

412 
xfs_dú2_d©a_íåy_t
 *
dï
;

413 
xfs_dú2_d©a_unu£d_t
 *
dup
;

414 *
íd
;

416 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

417 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

418 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

419 
íd
 = (*)&
dï
->
öumbî
 + (dep->inumber);

420  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 &&

421 
	`be16_to_˝u
(
dup
->
‰ìèg
Ë!
XFS_DIR2_DATA_FREE_TAG
;

422 
	}
}

425 
	$dú2_d©a_uni⁄_Àngth_cou¡
(

426 *
obj
,

427 
°¨toff
)

429 
xfs_dú2_d©a_unu£d_t
 *
dup
;

430 *
íd
;

432 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

433 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

434 
íd
 = (*)&
dup
->
Àngth
 + (dup->length);

435  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 &&

436 
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
;

437 
	}
}

440 
	$dú2_d©a_uni⁄_«me_cou¡
(

441 *
obj
,

442 
°¨toff
)

444 
xfs_dú2_d©a_íåy_t
 *
dï
;

445 
xfs_dú2_d©a_unu£d_t
 *
dup
;

446 *
íd
;

448 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

449 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

450 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

451 
íd
 = (*)&
dï
->
«mñí
 + (dep->namelen);

452 i‡(
íd
 >(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 ||

453 
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

455 
íd
 = (*)&
dï
->
«me
[0] + dï->
«mñí
;

456  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 ? 
dï
->
«mñí
 : 0;

457 
	}
}

460 
	$dú2_d©a_uni⁄_«mñí_cou¡
(

461 *
obj
,

462 
°¨toff
)

464 
xfs_dú2_d©a_íåy_t
 *
dï
;

465 
xfs_dú2_d©a_unu£d_t
 *
dup
;

466 *
íd
;

468 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

469 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

470 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

471 
íd
 = (*)&
dï
->
«mñí
 + (dep->namelen);

472  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
 &&

473 
	`be16_to_˝u
(
dup
->
‰ìèg
Ë!
XFS_DIR2_DATA_FREE_TAG
;

474 
	}
}

477 
	$dú2_d©a_uni⁄_èg_cou¡
(

478 *
obj
,

479 
°¨toff
)

481 
xfs_dú2_d©a_íåy_t
 *
dï
;

482 
xfs_dú2_d©a_unu£d_t
 *
dup
;

483 *
íd
;

484 
__be16
 *
ègp
;

486 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

487 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

488 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

489 
íd
 = (*)&
dup
->
‰ìèg
 + (dup->freetag);

490 i‡(
íd
 > (*)
obj
 + 
mp
->
m_dú_geo
->
blksize
)

492 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

493 
íd
 = (*)&
dup
->
Àngth
 + (dup->length);

494 i‡(
íd
 > (*)
obj
 + 
mp
->
m_dú_geo
->
blksize
)

496 
ègp
 = 
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
);

498 
íd
 = (*)&
dï
->
«mñí
 + (dep->namelen);

499 i‡(
íd
 > (*)
obj
 + 
mp
->
m_dú_geo
->
blksize
)

501 
ègp
 = 
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
);

503 
íd
 = (*)
ègp
 + (*tagp);

504  
íd
 <(*)
obj
 + 
mp
->
m_dú_geo
->
blksize
;

505 
	}
}

508 
	$dú2_d©a_uni⁄_èg_off£t
(

509 *
obj
,

510 
°¨toff
,

511 
idx
)

513 
xfs_dú2_d©a_íåy_t
 *
dï
;

514 
xfs_dú2_d©a_unu£d_t
 *
dup
;

516 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

517 
	`ASSERT
(
idx
 == 0);

518 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

519 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

520  
	`bôize
(()((*)
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
) -

521 (*)
dup
));

522 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

523  
	`bôize
(()((*)
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
) -

524 (*)
dï
));

525 
	}
}

528 
	$dú2_d©a_hdr_cou¡
(

529 *
obj
,

530 
°¨toff
)

532 
xfs_dú2_d©a_hdr
 *
d©a
 = 
obj
;

534 
	`ASSERT
(
°¨toff
 == 0);

535  
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_DATA_MAGIC
;

536 
	}
}

539 
	$dú3_d©a_hdr_cou¡
(

540 *
obj
,

541 
°¨toff
)

543 
xfs_dú2_d©a_hdr
 *
d©a
 = 
obj
;

545 
	`ASSERT
(
°¨toff
 == 0);

546  
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR3_DATA_MAGIC
;

547 
	}
}

550 
	$dú2_d©a_u_cou¡
(

551 *
obj
,

552 
°¨toff
)

554 
xfs_dú2_d©a_hdr
 *
d©a
 = 
obj
;

556 
	`ASSERT
(
°¨toff
 == 0);

557 i‡(
	`be32_to_˝u
(
d©a
->
magic
Ë!
XFS_DIR2_DATA_MAGIC
 &&

558 
	`be32_to_˝u
(
d©a
->
magic
Ë!
XFS_DIR3_DATA_MAGIC
)

561  
	`__dú2_d©a_íåõs_cou¡
(

562 (*)
	`M_DIROPS
(
mp
)->
	`d©a_unu£d_p
(
d©a
),

563 (*)
d©a
 + 
mp
->
m_dú_geo
->
blksize
);

564 
	}
}

567 
	$dú2_d©a_u_off£t
(

568 *
obj
,

569 
°¨toff
,

570 
idx
)

572 
xfs_dú2_d©a_hdr
 *
d©a
 = 
obj
;

573 *
±r
;

575 
	`ASSERT
(
°¨toff
 == 0);

576 
	`ASSERT
(
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_DATA_MAGIC
 ||

577 
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR3_DATA_MAGIC
);

578 
±r
 = 
	`__dú2_d©a_íåy_off£t
(

579 (*)
	`M_DIROPS
(
mp
)->
	`d©a_unu£d_p
(
d©a
),

580 (*)
d©a
 + 
mp
->
m_dú_geo
->
blksize
, 
idx
);

581  
	`bôize
(()(
±r
 - (*)
d©a
));

582 
	}
}

585 
	$dú2_d©a_uni⁄_size
(

586 *
obj
,

587 
°¨toff
,

588 
idx
)

590 
xfs_dú2_d©a_íåy_t
 *
dï
;

591 
xfs_dú2_d©a_unu£d_t
 *
dup
;

593 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

594 
	`ASSERT
(
idx
 == 0);

595 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

596 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

597  
	`bôize
(
	`be16_to_˝u
(
dup
->
Àngth
));

599 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

600  
	`bôize
(
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
));

602 
	}
}

605 
	$dú3_d©a_uni⁄_·y≥_off£t
(

606 *
obj
,

607 
°¨toff
,

608 
idx
)

610 
xfs_dú2_d©a_íåy_t
 *
dï
;

611 
xfs_dú2_d©a_unu£d_t
 *
dup
;

613 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

614 
	`ASSERT
(
idx
 == 0);

615 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

616 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
)

617  
	`bôize
(()((*)
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
) -

618 (*)
dup
));

619 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

620  
	`bôize
(()((*)&
dï
->
«me
[dï->
«mñí
] - (*)dep));

621 
	}
}

627 
	$dú2_‰ì_be°s_cou¡
(

628 *
obj
,

629 
°¨toff
)

631 
xfs_dú2_‰ì
 *
‰ì
 = 
obj
;

633 
	`ASSERT
(
°¨toff
 == 0);

634 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
Ë!
XFS_DIR2_FREE_MAGIC
)

636  
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
);

637 
	}
}

640 
	$dú3_‰ì_be°s_cou¡
(

641 *
obj
,

642 
°¨toff
)

644 
xfs_dú3_‰ì
 *
‰ì
 = 
obj
;

646 
	`ASSERT
(
°¨toff
 == 0);

647 i‡(
	`be32_to_˝u
(
‰ì
->
hdr
.hdr.
magic
Ë!
XFS_DIR3_FREE_MAGIC
)

649  
	`be32_to_˝u
(
‰ì
->
hdr
.
nvÆid
);

650 
	}
}

653 
	$dú2_‰ì_hdr_cou¡
(

654 *
obj
,

655 
°¨toff
)

657 
xfs_dú2_‰ì
 *
‰ì
 = 
obj
;

659 
	`ASSERT
(
°¨toff
 == 0);

660  
	`be32_to_˝u
(
‰ì
->
hdr
.
magic
Ë=
XFS_DIR2_FREE_MAGIC
;

661 
	}
}

664 
	$dú3_‰ì_hdr_cou¡
(

665 *
obj
,

666 
°¨toff
)

668 
xfs_dú3_‰ì
 *
‰ì
 = 
obj
;

670 
	`ASSERT
(
°¨toff
 == 0);

671  
	`be32_to_˝u
(
‰ì
->
hdr
.hdr.
magic
Ë=
XFS_DIR3_FREE_MAGIC
;

672 
	}
}

678 
	$dú2_Àaf_be°s_cou¡
(

679 *
obj
,

680 
°¨toff
)

682 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

683 
xfs_dú2_Àaf_èû
 *
…p
;

685 
	`ASSERT
(
°¨toff
 == 0);

686 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_DIR2_LEAF1_MAGIC
 &&

687 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_DIR3_LEAF1_MAGIC
)

689 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
mp
->
m_dú_geo
, 
Àaf
);

690  
	`be32_to_˝u
(
…p
->
be°cou¡
);

691 
	}
}

694 
	$dú2_Àaf_be°s_off£t
(

695 *
obj
,

696 
°¨toff
,

697 
idx
)

699 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

700 
xfs_dú2_Àaf_èû
 *
…p
;

701 
__be16
 *
lbp
;

703 
	`ASSERT
(
°¨toff
 == 0);

704 
	`ASSERT
(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR2_LEAF1_MAGIC
 ||

705 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR3_LEAF1_MAGIC
);

706 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
mp
->
m_dú_geo
, 
Àaf
);

707 
lbp
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
Ë+ 
idx
;

708  
	`bôize
(()((*)
lbp
 - (*)
Àaf
));

709 
	}
}

712 
	$dú2_Àaf_íts_cou¡
(

713 *
obj
,

714 
°¨toff
)

716 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

718 
	`ASSERT
(
°¨toff
 == 0);

719 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_DIR2_LEAF1_MAGIC
 &&

720 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_DIR2_LEAFN_MAGIC
)

722  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

723 
	}
}

726 
	$dú3_Àaf_íts_cou¡
(

727 *
obj
,

728 
°¨toff
)

730 
xfs_dú3_Àaf
 *
Àaf
 = 
obj
;

732 
	`ASSERT
(
°¨toff
 == 0);

733 i‡(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_DIR3_LEAF1_MAGIC
 &&

734 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_DIR3_LEAFN_MAGIC
)

736  
	`be16_to_˝u
(
Àaf
->
hdr
.
cou¡
);

737 
	}
}

740 
	$dú2_Àaf_hdr_cou¡
(

741 *
obj
,

742 
°¨toff
)

744 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

746 
	`ASSERT
(
°¨toff
 == 0);

747  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR2_LEAF1_MAGIC
 ||

748 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR2_LEAFN_MAGIC
;

749 
	}
}

752 
	$dú3_Àaf_hdr_cou¡
(

753 *
obj
,

754 
°¨toff
)

756 
xfs_dú3_Àaf
 *
Àaf
 = 
obj
;

758 
	`ASSERT
(
°¨toff
 == 0);

759  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_DIR3_LEAF1_MAGIC
 ||

760 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_DIR3_LEAFN_MAGIC
;

761 
	}
}

764 
	$dú2_Àaf_èû_cou¡
(

765 *
obj
,

766 
°¨toff
)

768 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

770 
	`ASSERT
(
°¨toff
 == 0);

771  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR2_LEAF1_MAGIC
;

772 
	}
}

775 
	$dú3_Àaf_èû_cou¡
(

776 *
obj
,

777 
°¨toff
)

779 
xfs_dú3_Àaf
 *
Àaf
 = 
obj
;

781 
	`ASSERT
(
°¨toff
 == 0);

782  
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_DIR3_LEAF1_MAGIC
;

783 
	}
}

786 
	$dú2_Àaf_èû_off£t
(

787 *
obj
,

788 
°¨toff
,

789 
idx
)

791 
xfs_dú2_Àaf
 *
Àaf
 = 
obj
;

792 
xfs_dú2_Àaf_èû
 *
…p
;

794 
	`ASSERT
(
°¨toff
 == 0);

795 
	`ASSERT
(
idx
 == 0);

796 
	`ASSERT
(
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR2_LEAF1_MAGIC
 ||

797 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë=
XFS_DIR3_LEAF1_MAGIC
);

798 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
mp
->
m_dú_geo
, 
Àaf
);

799  
	`bôize
(()((*)
…p
 - (*)
Àaf
));

800 
	}
}

806 
	$dú2_node_båì_cou¡
(

807 *
obj
,

808 
°¨toff
)

810 
xfs_da_öäode_t
 *
node
 = 
obj
;

812 
	`ASSERT
(
°¨toff
 == 0);

813 i‡(
	`be16_to_˝u
(
node
->
hdr
.
öfo
.
magic
Ë!
XFS_DA_NODE_MAGIC
)

815  
	`be16_to_˝u
(
node
->
hdr
.
__cou¡
);

816 
	}
}

819 
	$dú3_node_båì_cou¡
(

820 *
obj
,

821 
°¨toff
)

823 
xfs_da3_öäode
 *
node
 = 
obj
;

825 
	`ASSERT
(
°¨toff
 == 0);

826 i‡(
	`be16_to_˝u
(
node
->
hdr
.
öfo
.hdr.
magic
Ë!
XFS_DA3_NODE_MAGIC
)

828  
	`be16_to_˝u
(
node
->
hdr
.
__cou¡
);

829 
	}
}

832 
	$dú2_node_hdr_cou¡
(

833 *
obj
,

834 
°¨toff
)

836 
xfs_da_öäode
 *
node
 = 
obj
;

838 
	`ASSERT
(
°¨toff
 == 0);

839  
	`be16_to_˝u
(
node
->
hdr
.
öfo
.
magic
Ë=
XFS_DA_NODE_MAGIC
;

840 
	}
}

843 
	$dú3_node_hdr_cou¡
(

844 *
obj
,

845 
°¨toff
)

847 
xfs_da3_öäode
 *
node
 = 
obj
;

849 
	`ASSERT
(
°¨toff
 == 0);

850  
	`be16_to_˝u
(
node
->
hdr
.
öfo
.hdr.
magic
Ë=
XFS_DA3_NODE_MAGIC
;

851 
	}
}

854 
	$dú2_size
(

855 *
obj
,

856 
°¨toff
,

857 
idx
)

859  
	`bôize
(
mp
->
m_dú_geo
->
blksize
);

860 
	}
}

865 c⁄° 
fõld_t
 
	gdú3_hÊd
[] = {

866 { "", 
FLDT_DIR3
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

867 { 
NULL
 }

870 
	#B3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_d©a_hdr
, f))

	)

871 
	#D3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_d©a_hdr
, f))

	)

872 
	#F3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_‰ì
, f))

	)

873 
	#L3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_Àaf
, f))

	)

874 
	#N3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da3_öäode
, f))

	)

875 c⁄° 
fõld_t
 
	gdú3_Êds
[] = {

876 { "bhdr", 
FLDT_DIR3_DATA_HDR
, 
OI
(
B3OFF
(
hdr
)), 
dú3_block_hdr_cou¡
,

877 
FLD_COUNT
, 
TYP_NONE
 },

878 { "bu", 
FLDT_DIR3_DATA_UNION
, 
dú2_block_u_off£t
, 
dú2_block_u_cou¡
,

879 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

880 { "bÀaf", 
FLDT_DIR2_LEAF_ENTRY
, 
dú2_block_Àaf_off£t
,

881 
dú2_block_Àaf_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

882 { "bèû", 
FLDT_DIR2_BLOCK_TAIL
, 
dú2_block_èû_off£t
,

883 
dú3_block_èû_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

884 { "dhdr", 
FLDT_DIR3_DATA_HDR
, 
OI
(
D3OFF
(
hdr
)), 
dú3_d©a_hdr_cou¡
,

885 
FLD_COUNT
, 
TYP_NONE
 },

886 { "du", 
FLDT_DIR3_DATA_UNION
, 
dú2_d©a_u_off£t
, 
dú2_d©a_u_cou¡
,

887 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

888 { "lhdr", 
FLDT_DIR3_LEAF_HDR
, 
OI
(
L3OFF
(
hdr
)), 
dú3_Àaf_hdr_cou¡
,

889 
FLD_COUNT
, 
TYP_NONE
 },

890 { "lbe°s", 
FLDT_DIR2_DATA_OFF
, 
dú2_Àaf_be°s_off£t
,

891 
dú2_Àaf_be°s_cou¡
, 
FLD_ARRAY
|
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

892 { "À¡s", 
FLDT_DIR2_LEAF_ENTRY
, 
OI
(
L3OFF
(
__íts
)), 
dú3_Àaf_íts_cou¡
,

893 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

894 { "…aû", 
FLDT_DIR2_LEAF_TAIL
, 
dú2_Àaf_èû_off£t
,

895 
dú3_Àaf_èû_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

896 { "nhdr", 
FLDT_DA3_NODE_HDR
, 
OI
(
N3OFF
(
hdr
)), 
dú3_node_hdr_cou¡
,

897 
FLD_COUNT
, 
TYP_NONE
 },

898 { "nbåì", 
FLDT_DA_NODE_ENTRY
, 
OI
(
N3OFF
(
__båì
)), 
dú3_node_båì_cou¡
,

899 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

900 { "fhdr", 
FLDT_DIR3_FREE_HDR
, 
OI
(
F3OFF
(
hdr
)), 
dú3_‰ì_hdr_cou¡
,

901 
FLD_COUNT
, 
TYP_NONE
 },

902 { "fbe°s", 
FLDT_DIR2_DATA_OFFNZ
, 
OI
(
F3OFF
(
be°s
)),

903 
dú3_‰ì_be°s_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
, 
TYP_NONE
 },

904 { 
NULL
 }

907 
	#D3EOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_íåy_t
, f))

	)

908 
	#D3UOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_d©a_unu£d_t
, f))

	)

909 c⁄° 
fõld_t
 
	gdú3_d©a_uni⁄_Êds
[] = {

910 { "‰ìèg", 
FLDT_UINT16X
, 
OI
(
D3UOFF
(
‰ìèg
)),

911 
dú2_d©a_uni⁄_‰ìèg_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

912 { "öumbî", 
FLDT_INO
, 
OI
(
D3EOFF
(
öumbî
)),

913 
dú2_d©a_uni⁄_öumbî_cou¡
, 
FLD_COUNT
, 
TYP_INODE
 },

914 { "Àngth", 
FLDT_DIR2_DATA_OFF
, 
OI
(
D3UOFF
(
Àngth
)),

915 
dú2_d©a_uni⁄_Àngth_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

916 { "«mñí", 
FLDT_UINT8D
, 
OI
(
D3EOFF
(
«mñí
)),

917 
dú2_d©a_uni⁄_«mñí_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

918 { "«me", 
FLDT_CHARNS
, 
OI
(
D3EOFF
(
«me
)), 
dú2_d©a_uni⁄_«me_cou¡
,

919 
FLD_COUNT
, 
TYP_NONE
 },

920 { "fûëy≥", 
FLDT_UINT8D
, 
dú3_d©a_uni⁄_·y≥_off£t
, 
C1
,

921 
FLD_OFFSET
, 
TYP_NONE
 },

922 { "èg", 
FLDT_DIR2_DATA_OFF
, 
dú2_d©a_uni⁄_èg_off£t
,

923 
dú2_d©a_uni⁄_èg_cou¡
, 
FLD_OFFSET
|
FLD_COUNT
, 
TYP_NONE
 },

924 { 
NULL
 }

927 
	#DBH3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_blk_hdr
, f))

	)

928 c⁄° 
fõld_t
 
	gdú3_blkhdr_Êds
[] = {

929 { "magic", 
FLDT_UINT32X
, 
OI
(
DBH3OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

930 { "¸c", 
FLDT_CRC
, 
OI
(
DBH3OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

931 { "bno", 
FLDT_DFSBNO
, 
OI
(
DBH3OFF
(
blkno
)), 
C1
, 0, 
TYP_BMAPBTD
 },

932 { "l¢", 
FLDT_UINT64X
, 
OI
(
DBH3OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

933 { "uuid", 
FLDT_UUID
, 
OI
(
DBH3OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

934 { "ow√r", 
FLDT_INO
, 
OI
(
DBH3OFF
(
ow√r
)), 
C1
, 0, 
TYP_NONE
 },

935 { 
NULL
 }

938 
	#DH3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_d©a_hdr
, f))

	)

939 c⁄° 
fõld_t
 
	gdú3_d©a_hdr_Êds
[] = {

940 { "hdr", 
FLDT_DIR3_BLKHDR
, 
OI
(
DH3OFF
(
hdr
)), 
C1
, 0, 
TYP_NONE
 },

941 { "be°‰ì", 
FLDT_DIR2_DATA_FREE
, 
OI
(
DH3OFF
(
be°_‰ì
)),

942 
CI
(
XFS_DIR2_DATA_FD_COUNT
), 
FLD_ARRAY
, 
TYP_NONE
 },

943 { 
NULL
 }

946 
	#LH3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_Àaf_hdr
, f))

	)

947 c⁄° 
fõld_t
 
	gdú3_Àaf_hdr_Êds
[] = {

948 { "öfo", 
FLDT_DA3_BLKINFO
, 
OI
(
LH3OFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

949 { "cou¡", 
FLDT_UINT16D
, 
OI
(
LH3OFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

950 { "°Æe", 
FLDT_UINT16D
, 
OI
(
LH3OFF
(
°Æe
)), 
C1
, 0, 
TYP_NONE
 },

951 { 
NULL
 }

954 
	#FH3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú3_‰ì_hdr
, f))

	)

955 c⁄° 
fõld_t
 
	gdú3_‰ì_hdr_Êds
[] = {

956 { "hdr", 
FLDT_DIR3_BLKHDR
, 
OI
(
FH3OFF
(
hdr
)), 
C1
, 0, 
TYP_NONE
 },

957 { "fú°db", 
FLDT_INT32D
, 
OI
(
FH3OFF
(
fú°db
)), 
C1
, 0, 
TYP_NONE
 },

958 { "nvÆid", 
FLDT_INT32D
, 
OI
(
FH3OFF
(
nvÆid
)), 
C1
, 0, 
TYP_NONE
 },

959 { "nu£d", 
FLDT_INT32D
, 
OI
(
FH3OFF
(
nu£d
)), 
C1
, 0, 
TYP_NONE
 },

960 { 
NULL
 }

964 
	#DB3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da3_blköfo
, f))

	)

965 c⁄° 
fõld_t
 
	gda3_blköfo_Êds
[] = {

966 { "hdr", 
FLDT_DA_BLKINFO
, 
OI
(
DB3OFF
(
hdr
)), 
C1
, 0, 
TYP_NONE
 },

967 { "¸c", 
FLDT_CRC
, 
OI
(
DB3OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

968 { "bno", 
FLDT_DFSBNO
, 
OI
(
DB3OFF
(
blkno
)), 
C1
, 0, 
TYP_BMAPBTD
 },

969 { "l¢", 
FLDT_UINT64X
, 
OI
(
DB3OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

970 { "uuid", 
FLDT_UUID
, 
OI
(
DB3OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

971 { "ow√r", 
FLDT_INO
, 
OI
(
DB3OFF
(
ow√r
)), 
C1
, 0, 
TYP_NONE
 },

972 { 
NULL
 }

975 
	#H3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_da3_node_hdr
, f))

	)

976 c⁄° 
fõld_t
 
	gda3_node_hdr_Êds
[] = {

977 { "öfo", 
FLDT_DA3_BLKINFO
, 
OI
(
H3OFF
(
öfo
)), 
C1
, 0, 
TYP_NONE
 },

978 { "cou¡", 
FLDT_UINT16D
, 
OI
(
H3OFF
(
__cou¡
)), 
C1
, 0, 
TYP_NONE
 },

979 { "Àvñ", 
FLDT_UINT16D
, 
OI
(
H3OFF
(
__Àvñ
)), 
C1
, 0, 
TYP_NONE
 },

980 { "∑d", 
FLDT_UINT32D
, 
OI
(
H3OFF
(
__∑d32
)), 
C1
, 0, 
TYP_NONE
 },

981 { 
NULL
 }

989 
	$xfs_dú3_db_ªad_vîify
(

990 
xfs_buf
 *
bp
)

992 
__be32
 
magic32
;

993 
__be16
 
magic16
;

995 
magic32
 = *(
__be32
 *)
bp
->
b_addr
;

996 
magic16
 = ((
xfs_da_blköfo
 *)
bp
->
b_addr
)->
magic
;

998 
magic32
) {

999 
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
):

1000 
bp
->
b_›s
 = &
xfs_dú3_block_buf_›s
;

1001 
vîify
;

1002 
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
):

1003 
bp
->
b_›s
 = &
xfs_dú3_d©a_buf_›s
;

1004 
vîify
;

1005 
	`˝u_to_be32
(
XFS_DIR3_FREE_MAGIC
):

1006 
bp
->
b_›s
 = &
xfs_dú3_‰ì_buf_›s
;

1007 
vîify
;

1012 
magic16
) {

1013 
	`˝u_to_be16
(
XFS_DIR3_LEAF1_MAGIC
):

1014 
bp
->
b_›s
 = &
xfs_dú3_Àaf1_buf_›s
;

1016 
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
):

1017 
bp
->
b_›s
 = &
xfs_dú3_Àa‚_buf_›s
;

1019 
	`˝u_to_be16
(
XFS_DA3_NODE_MAGIC
):

1020 
bp
->
b_›s
 = &
xfs_da3_node_buf_›s
;

1023 
	`db¥ötf
(
	`_
("Unknown directory bufferÅype!\n"));

1024 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

1027 
vîify
:

1028 
bp
->
b_›s
->
	`vîify_ªad
(bp);

1029 
	}
}

1032 
	$xfs_dú3_db_wrôe_vîify
(

1033 
xfs_buf
 *
bp
)

1035 
	`db¥ötf
(
	`_
("Writing unknown directory bufferÅype!\n"));

1036 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

1037 
	}
}

1039 c⁄° 
xfs_buf_›s
 
	gxfs_dú3_db_buf_›s
 = {

1040 .
«me
 = "xfs_dir3",

1041 .
	gvîify_ªad
 = 
xfs_dú3_db_ªad_vîify
,

1042 .
	gvîify_wrôe
 = 
xfs_dú3_db_wrôe_vîify
,

	@db/dir2.h

22 c⁄° 
fõld_t
 
dú2_block_èû_Êds
[];

23 c⁄° 
fõld_t
 
dú2_d©a_‰ì_Êds
[];

24 c⁄° 
fõld_t
 
dú2_d©a_uni⁄_Êds
[];

25 c⁄° 
fõld_t
 
dú2_Àaf_èû_Êds
[];

26 c⁄° 
fõld_t
 
dú2_Àaf_íåy_Êds
[];

28 c⁄° 
fõld_t
 
da_node_íåy_Êds
[];

33 c⁄° 
fõld_t
 
dú2_Êds
[];

34 c⁄° 
fõld_t
 
dú2_hÊd
[];

35 c⁄° 
fõld_t
 
dú2_d©a_hdr_Êds
[];

36 c⁄° 
fõld_t
 
dú2_‰ì_hdr_Êds
[];

37 c⁄° 
fõld_t
 
dú2_Àaf_hdr_Êds
[];

39 c⁄° 
fõld_t
 
da_blköfo_Êds
[];

40 c⁄° 
fõld_t
 
da_node_hdr_Êds
[];

45 c⁄° 
fõld_t
 
dú3_Êds
[];

46 c⁄° 
fõld_t
 
dú3_hÊd
[];

47 c⁄° 
fõld_t
 
dú3_blkhdr_Êds
[];

48 c⁄° 
fõld_t
 
dú3_d©a_hdr_Êds
[];

49 c⁄° 
fõld_t
 
dú3_‰ì_hdr_Êds
[];

50 c⁄° 
fõld_t
 
dú3_Àaf_hdr_Êds
[];

51 c⁄° 
fõld_t
 
dú3_d©a_uni⁄_Êds
[];

53 c⁄° 
fõld_t
 
da3_blköfo_Êds
[];

54 c⁄° 
fõld_t
 
da3_node_hdr_Êds
[];

56 
ölöe
 
uöt8_t
 *
	$xfs_dú2_sf_öumbîp
(
xfs_dú2_sf_íåy_t
 *
s„p
)

58  &(
s„p
)->
«me
[(s„p)->
«mñí
];

59 
	}
}

61 
dú2_d©a_uni⁄_size
(*
obj
, 
°¨toff
, 
idx
);

62 
dú2_size
(*
obj
, 
°¨toff
, 
idx
);

64 c⁄° 
xfs_buf_›s
 
xfs_dú3_db_buf_›s
;

	@db/dir2sf.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"bô.h
"

25 
	~"dú2.h
"

26 
	~"dú2sf.h
"

27 
	~"öô.h
"

29 
dú2_öou_i4_cou¡
(*
obj
, 
°¨toff
);

30 
dú2_öou_i8_cou¡
(*
obj
, 
°¨toff
);

31 
dú2_sf_íåy_öumbî_off£t
(*
obj
, 
°¨toff
, 
idx
);

32 
dú2_sf_íåy_«me_cou¡
(*
obj
, 
°¨toff
);

33 
dú2_sf_li°_cou¡
(*
obj
, 
°¨toff
);

34 
dú2_sf_li°_off£t
(*
obj
, 
°¨toff
, 
idx
);

36 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_sf_hdr
, f))

	)

37 c⁄° 
fõld_t
 
	gdú2sf_Êds
[] = {

38 { "hdr", 
FLDT_DIR2_SF_HDR
, 
OI
(
OFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

39 { "li°", 
FLDT_DIR2_SF_ENTRY
, 
dú2_sf_li°_off£t
, 
dú2_sf_li°_cou¡
,

40 
FLD_ARRAY
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

41 { 
NULL
 }

44 c⁄° 
fõld_t
 
	gdú2_öou_Êds
[] = {

45 { "i8", 
FLDT_DIR2_INO8
, 0, 
dú2_öou_i8_cou¡
, 
FLD_COUNT
, 
TYP_INODE
 },

46 { "i4", 
FLDT_DIR2_INO4
, 0, 
dú2_öou_i4_cou¡
, 
FLD_COUNT
, 
TYP_INODE
 },

47 { 
NULL
 }

50 
	#HOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_sf_hdr_t
, f))

	)

51 c⁄° 
fõld_t
 
	gdú2_sf_hdr_Êds
[] = {

52 { "cou¡", 
FLDT_UINT8D
, 
OI
(
HOFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

53 { "i8cou¡", 
FLDT_UINT8D
, 
OI
(
HOFF
(
i8cou¡
)), 
C1
, 0, 
TYP_NONE
 },

54 { "∑ª¡", 
FLDT_DIR2_INOU
, 
OI
(
HOFF
(
∑ª¡
)), 
C1
, 0, 
TYP_NONE
 },

55 { 
NULL
 }

58 
	#EOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_sf_íåy_t
, f))

	)

59 c⁄° 
fõld_t
 
	gdú2_sf_íåy_Êds
[] = {

60 { "«mñí", 
FLDT_UINT8D
, 
OI
(
EOFF
(
«mñí
)), 
C1
, 0, 
TYP_NONE
 },

61 { "off£t", 
FLDT_DIR2_SF_OFF
, 
OI
(
EOFF
(
off£t
)), 
C1
, 0, 
TYP_NONE
 },

62 { "«me", 
FLDT_CHARNS
, 
OI
(
EOFF
(
«me
)), 
dú2_sf_íåy_«me_cou¡
,

63 
FLD_COUNT
, 
TYP_NONE
 },

64 { "öumbî", 
FLDT_DIR2_INOU
, 
dú2_sf_íåy_öumbî_off£t
, 
C1
,

65 
FLD_OFFSET
, 
TYP_NONE
 },

66 { 
NULL
 }

71 
	$dú2_öou_i4_cou¡
(

72 *
obj
,

73 
°¨toff
)

75 
xfs_döode
 *
dù
 = 
obj
;

76 
xfs_dú2_sf_hdr
 *
sf
;

78 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

79 
sf
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

80  
sf
->
i8cou¡
 == 0;

81 
	}
}

85 
	$dú2_öou_i8_cou¡
(

86 *
obj
,

87 
°¨toff
)

89 
xfs_döode
 *
dù
 = 
obj
;

90 
xfs_dú2_sf_hdr
 *
sf
;

92 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

93 
sf
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

94  
sf
->
i8cou¡
 != 0;

95 
	}
}

99 
	$dú2_öou_size
(

100 *
obj
,

101 
°¨toff
,

102 
idx
)

104 
xfs_döode
 *
dù
 = 
obj
;

105 
xfs_dú2_sf_hdr
 *
sf
;

107 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

108 
	`ASSERT
(
idx
 == 0);

109 
sf
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

110  
	`bôize
(
sf
->
i8cou¡
 ? 
XFS_INO64_SIZE
 : 
XFS_INO32_SIZE
);

111 
	}
}

114 
	$dú2_sf_íåy_«me_cou¡
(

115 *
obj
,

116 
°¨toff
)

118 
xfs_dú2_sf_íåy_t
 *
e
;

120 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

121 
e
 = (
xfs_dú2_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

122  
e
->
«mñí
;

123 
	}
}

126 
	$dú2_sf_íåy_öumbî_off£t
(

127 *
obj
,

128 
°¨toff
,

129 
idx
)

131 
xfs_dú2_sf_íåy_t
 *
e
;

133 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

134 
	`ASSERT
(
idx
 == 0);

135 
e
 = (
xfs_dú2_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

136  
	`bôize
(()((*)
	`xfs_dú2_sf_öumbîp
(
e
) - (*)e));

137 
	}
}

140 
	$dú3_sf_íåy_öumbî_off£t
(

141 *
obj
,

142 
°¨toff
,

143 
idx
)

145 
xfs_dú2_sf_íåy_t
 *
e
;

147 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

148 
	`ASSERT
(
idx
 == 0);

149 
e
 = (
xfs_dú2_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

151  
	`bôize
(()((*)
	`xfs_dú2_sf_öumbîp
(
e
) + 1 - (*)e));

152 
	}
}

155 
	$dú3_sf_íåy_·y≥_off£t
(

156 *
obj
,

157 
°¨toff
,

158 
idx
)

160 
xfs_dú2_sf_íåy_t
 *
e
;

162 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

163 
	`ASSERT
(
idx
 == 0);

164 
e
 = (
xfs_dú2_sf_íåy_t
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

165  
	`bôize
(()((*)&
e
->
«me
[e->
«mñí
] - (*)e));

166 
	}
}

169 
	$dú2_sf_íåy_size
(

170 *
obj
,

171 
°¨toff
,

172 
idx
)

174 
xfs_dú2_sf_íåy_t
 *
e
;

175 
i
;

176 
xfs_dú2_sf_hdr
 *
sf
;

178 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

179 
sf
 = (
xfs_dú2_sf_hdr
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

180 
e
 = 
	`xfs_dú2_sf_fú°íåy
(
sf
);

181 
i
 = 0; i < 
idx
; i++)

182 
e
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
sf
,É);

183  
	`bôize
(()
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sf
, 
e
->
«mñí
));

184 
	}
}

188 
	$dú2_sf_hdr_size
(

189 *
obj
,

190 
°¨toff
,

191 
idx
)

193 
xfs_dú2_sf_hdr
 *
sf
;

195 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

196 
	`ASSERT
(
idx
 == 0);

197 
sf
 = (
xfs_dú2_sf_hdr
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

198  
	`bôize
(
	`xfs_dú2_sf_hdr_size
(
sf
->
i8cou¡
));

199 
	}
}

202 
	$dú2_sf_li°_cou¡
(

203 *
obj
,

204 
°¨toff
)

206 
xfs_dú2_sf_hdr
 *
sf
;

208 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

209 
sf
 = (
xfs_dú2_sf_hdr
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

210  
sf
->
cou¡
;

211 
	}
}

214 
	$dú2_sf_li°_off£t
(

215 *
obj
,

216 
°¨toff
,

217 
idx
)

219 
xfs_dú2_sf_íåy_t
 *
e
;

220 
i
;

221 
xfs_dú2_sf_hdr
 *
sf
;

223 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

224 
sf
 = (
xfs_dú2_sf_hdr
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

225 
e
 = 
	`xfs_dú2_sf_fú°íåy
(
sf
);

226 
i
 = 0; i < 
idx
; i++)

227 
e
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
sf
,É);

228  
	`bôize
(()((*)
e
 - (*)
sf
));

229 
	}
}

233 
	$dú2sf_size
(

234 *
obj
,

235 
°¨toff
,

236 
idx
)

238 
xfs_dú2_sf_íåy_t
 *
e
;

239 
i
;

240 
xfs_dú2_sf_hdr
 *
sf
;

242 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

243 
	`ASSERT
(
idx
 == 0);

244 
sf
 = (
xfs_dú2_sf_hdr
 *)((*)
obj
 + 
	`byãize
(
°¨toff
));

245 
e
 = 
	`xfs_dú2_sf_fú°íåy
(
sf
);

246 
i
 = 0; i < 
sf
->
cou¡
; i++)

247 
e
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
sf
,É);

248  
	`bôize
(()((*)
e
 - (*)
sf
));

249 
	}
}

251 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_sf_hdr
, f))

	)

252 c⁄° 
fõld_t
 
	gdú3sf_Êds
[] = {

253 { "hdr", 
FLDT_DIR2_SF_HDR
, 
OI
(
OFF
(
cou¡
)), 
C1
, 0, 
TYP_NONE
 },

254 { "li°", 
FLDT_DIR3_SF_ENTRY
, 
dú2_sf_li°_off£t
, 
dú2_sf_li°_cou¡
,

255 
FLD_ARRAY
|
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

256 { 
NULL
 }

259 
	#E3OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dú2_sf_íåy_t
, f))

	)

260 c⁄° 
fõld_t
 
	gdú3_sf_íåy_Êds
[] = {

261 { "«mñí", 
FLDT_UINT8D
, 
OI
(
EOFF
(
«mñí
)), 
C1
, 0, 
TYP_NONE
 },

262 { "off£t", 
FLDT_DIR2_SF_OFF
, 
OI
(
EOFF
(
off£t
)), 
C1
, 0, 
TYP_NONE
 },

263 { "«me", 
FLDT_CHARNS
, 
OI
(
EOFF
(
«me
)), 
dú2_sf_íåy_«me_cou¡
,

264 
FLD_COUNT
, 
TYP_NONE
 },

265 { "öumbî", 
FLDT_DIR2_INOU
, 
dú3_sf_íåy_öumbî_off£t
, 
C1
,

266 
FLD_OFFSET
, 
TYP_NONE
 },

267 { "fûëy≥", 
FLDT_UINT8D
, 
dú3_sf_íåy_·y≥_off£t
, 
C1
,

268 
FLD_OFFSET
, 
TYP_NONE
 },

269 { 
NULL
 }

	@db/dir2sf.h

19 c⁄° 
fõld_t
 
dú2sf_Êds
[];

20 c⁄° 
fõld_t
 
dú2_öou_Êds
[];

21 c⁄° 
fõld_t
 
dú2_sf_hdr_Êds
[];

22 c⁄° 
fõld_t
 
dú2_sf_íåy_Êds
[];

24 c⁄° 
fõld_t
 
dú3sf_Êds
[];

25 c⁄° 
fõld_t
 
dú3_sf_íåy_Êds
[];

27 
dú2sf_size
(*
obj
, 
°¨toff
, 
idx
);

28 
dú2_öou_size
(*
obj
, 
°¨toff
, 
idx
);

29 
dú2_sf_íåy_size
(*
obj
, 
°¨toff
, 
idx
);

30 
dú2_sf_hdr_size
(*
obj
, 
°¨toff
, 
idx
);

	@db/dquot.c

19 
	~"libxfs.h
"

20 
	~"bô.h
"

21 
	~"bm≠.h
"

22 
	~"comm™d.h
"

23 
	~"ty≥.h
"

24 
	~"Áddr.h
"

25 
	~"Âröt.h
"

26 
	~"fõld.h
"

27 
	~"öode.h
"

28 
	~"io.h
"

29 
	~"öô.h
"

30 
	~"ouçut.h
"

31 
	~"dquŸ.h
"

33 
dquŸ_f
(
¨gc
, **
¨gv
);

34 
dquŸ_hñp
();

36 c⁄° 
cmdöfo_t
 
	gdquŸ_cmd
 = {

37 "dquŸ", 
NULL
, 
dquŸ_f
, 1, 2, 1, 
N_
("[-g|-p|-u] id"),

38 
N_
("set currentáddressÅoá group,Öroject or user quota block for given ID"),

39 
dquŸ_hñp
,

42 c⁄° 
fõld_t
 
	gdqblk_hÊd
[] = {

43 { "", 
FLDT_DQBLK
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

44 { 
NULL
 }

47 
	#DDOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dqblk_t
, 
dd_
 ## f))

	)

48 
	#DDSZC
(
f
Ë
	`szcou¡
(
xfs_dqblk_t
, 
dd_
 ## f)

	)

49 c⁄° 
fõld_t
 
	gdqblk_Êds
[] = {

50 { "diskdq", 
FLDT_DISK_DQUOT
, 
OI
(
DDOFF
(
diskdq
)), 
C1
, 0, 
TYP_NONE
 },

51 { "fûl", 
FLDT_CHARS
, 
OI
(
DDOFF
(
fûl
)), 
CI
(
DDSZC
(fûl)), 
FLD_SKIPALL
,

52 
TYP_NONE
 },

53 { "¸c", 
FLDT_CRC
, 
OI
(
DDOFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

54 { "l¢", 
FLDT_UINT64X
, 
OI
(
DDOFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

55 { "uuid", 
FLDT_UUID
, 
OI
(
DDOFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

56 { 
NULL
 }

59 
	#DOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_disk_dquŸ_t
, 
d_
 ## f))

	)

60 c⁄° 
fõld_t
 
	gdisk_dquŸ_Êds
[] = {

61 { "magic", 
FLDT_UINT16X
, 
OI
(
DOFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

62 { "vîsi⁄", 
FLDT_UINT8X
, 
OI
(
DOFF
(
vîsi⁄
)), 
C1
, 0, 
TYP_NONE
 },

63 { "Êags", 
FLDT_UINT8X
, 
OI
(
DOFF
(
Êags
)), 
C1
, 0, 
TYP_NONE
 },

64 { "id", 
FLDT_DQID
, 
OI
(
DOFF
(
id
)), 
C1
, 0, 
TYP_NONE
 },

65 { "blk_h¨dlimô", 
FLDT_QCNT
, 
OI
(
DOFF
(
blk_h¨dlimô
)), 
C1
, 0,

66 
TYP_NONE
 },

67 { "blk_so·limô", 
FLDT_QCNT
, 
OI
(
DOFF
(
blk_so·limô
)), 
C1
, 0,

68 
TYP_NONE
 },

69 { "öo_h¨dlimô", 
FLDT_QCNT
, 
OI
(
DOFF
(
öo_h¨dlimô
)), 
C1
, 0,

70 
TYP_NONE
 },

71 { "öo_so·limô", 
FLDT_QCNT
, 
OI
(
DOFF
(
öo_so·limô
)), 
C1
, 0,

72 
TYP_NONE
 },

73 { "bcou¡", 
FLDT_QCNT
, 
OI
(
DOFF
(
bcou¡
)), 
C1
, 0, 
TYP_NONE
 },

74 { "icou¡", 
FLDT_QCNT
, 
OI
(
DOFF
(
icou¡
)), 
C1
, 0, 
TYP_NONE
 },

75 { "ôimî", 
FLDT_INT32D
, 
OI
(
DOFF
(
ôimî
)), 
C1
, 0, 
TYP_NONE
 },

76 { "btimî", 
FLDT_INT32D
, 
OI
(
DOFF
(
btimî
)), 
C1
, 0, 
TYP_NONE
 },

77 { "iw¨ns", 
FLDT_QWARNCNT
, 
OI
(
DOFF
(
iw¨ns
)), 
C1
, 0, 
TYP_NONE
 },

78 { "bw¨ns", 
FLDT_QWARNCNT
, 
OI
(
DOFF
(
bw¨ns
)), 
C1
, 0, 
TYP_NONE
 },

79 { "∑d0", 
FLDT_INT32D
, 
OI
(
DOFF
(
∑d0
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

80 { "πb_h¨dlimô", 
FLDT_QCNT
, 
OI
(
DOFF
(
πb_h¨dlimô
)), 
C1
, 0,

81 
TYP_NONE
 },

82 { "πb_so·limô", 
FLDT_QCNT
, 
OI
(
DOFF
(
πb_so·limô
)), 
C1
, 0,

83 
TYP_NONE
 },

84 { "πbcou¡", 
FLDT_QCNT
, 
OI
(
DOFF
(
πbcou¡
)), 
C1
, 0, 
TYP_NONE
 },

85 { "πbtimî", 
FLDT_INT32D
, 
OI
(
DOFF
(
πbtimî
)), 
C1
, 0, 
TYP_NONE
 },

86 { "πbw¨ns", 
FLDT_QWARNCNT
, 
OI
(
DOFF
(
πbw¨ns
)), 
C1
, 0, 
TYP_NONE
 },

87 { "∑d", 
FLDT_UINT16X
, 
OI
(
DOFF
(
∑d
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

88 { 
NULL
 }

92 
	$dquŸ_hñp
()

94 
	}
}

97 
	$dquŸ_f
(

98 
¨gc
,

99 **
¨gv
)

101 
bm≠_ext_t
 
bm
;

102 
c
;

103 
dogΩ
;

104 
d›rj
;

105 
xfs_dqid_t
 
id
;

106 
xfs_öo_t
 
öo
;

107 
√x
;

108 *
p
;

109 
≥rblock
;

110 
xfs_fûeoff_t
 
qbno
;

111 
qoff
;

112 *
s
;

114 
dogΩ
 = 
d›rj
 = 
›töd
 = 0;

115 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "gpu")Ë!
EOF
) {

116 
c
) {

118 
dogΩ
 = 1;

119 
d›rj
 = 0;

122 
d›rj
 = 1;

123 
dogΩ
 = 0;

126 
dogΩ
 = 
d›rj
 = 0;

129 
	`db¥ötf
(
	`_
("bad option for dquot command\n"));

133 
s
 = 
d›rj
 ? 
	`_
("¥oje˘"Ë: 
dogΩ
 ? _("group") : _("user");

134 i‡(
›töd
 !
¨gc
 - 1) {

135 
	`db¥ötf
(
	`_
("dquŸ comm™dÑequúe†⁄ê%†idárgumít\n"), 
s
);

138 
öo
 = 
mp
->
m_sb
.
sb_uquŸöo
;

139 i‡(
d›rj
)

140 
öo
 = 
mp
->
m_sb
.
sb_pquŸöo
;

141 i‡(
dogΩ
)

142 
öo
 = 
mp
->
m_sb
.
sb_gquŸöo
;

144 i‡(
öo
 =0 || inÿ=
NULLFSINO
) {

145 
	`db¥ötf
(
	`_
("nÿ%†quŸ®öodê¥e£¡\n"), 
s
);

148 
id
 = (
xfs_dqid_t
)
	`°πﬁ
(
¨gv
[
›töd
], &
p
, 0);

149 i‡(*
p
 != '\0') {

150 
	`db¥ötf
(
	`_
("bad %†id f‹ dquŸ %s\n"), 
s
, 
¨gv
[
›töd
]);

153 
≥rblock
 = ()(
mp
->
m_sb
.
sb_blocksize
 / (
xfs_dqblk_t
));

154 
qbno
 = (
xfs_fûeoff_t
)
id
 / 
≥rblock
;

155 
qoff
 = ()(
id
 % 
≥rblock
);

156 
	`push_cur
();

157 
	`£t_cur_öode
(
öo
);

158 
√x
 = 1;

159 
	`bm≠
(
qbno
, 1, 
XFS_DATA_FORK
, &
√x
, &
bm
);

160 
	`p›_cur
();

161 i‡(
√x
 == 0) {

162 
	`db¥ötf
(
	`_
("nÿ%†quŸ®d©®f‹ id %d\n"), 
s
, 
id
);

165 
	`£t_cur
(&
ty±ab
[
TYP_DQBLK
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bm
.
°¨tblock
), 
blkbb
,

166 
DB_RING_IGN
, 
NULL
);

167 
iocur_t›
->
dquŸ_buf
 = 1;

168 
	`off_cur
(
qoff
 * ()(
xfs_dqblk_t
), (xfs_dqblk_t));

169 
	`rög_add
();

171 
	}
}

174 
	$dquŸ_öô
()

176 
	`add_comm™d
(&
dquŸ_cmd
);

177 
	}
}

	@db/dquot.h

19 c⁄° 
fõld
 
disk_dquŸ_Êds
[];

20 c⁄° 
fõld
 
dqblk_Êds
[];

21 c⁄° 
fõld
 
dqblk_hÊd
[];

23 
dquŸ_öô
();

	@db/echo.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"echo.h
"

22 
	~"ouçut.h
"

24 
echo_f
(
¨gc
, **
¨gv
);

26 c⁄° 
cmdöfo_t
 
	gecho_cmd
 =

27 { "echo", 
NULL
, 
echo_f
, 0, -1, 0, 
N_
("[args]..."),

28 
N_
("echÿ¨gumíts"), 
NULL
 };

32 
	$echo_f
(

33 
¨gc
,

34 **
¨gv
)

36 *
c
;

38 
c
 = *(++
¨gv
); c; c = *(++argv))

39 
	`db¥ötf
("%†", 
c
);

40 
	`db¥ötf
("\n");

42 
	}
}

45 
	$echo_öô
()

47 
	`add_comm™d
(&
echo_cmd
);

48 
	}
}

	@db/echo.h

19 
echo_öô
();

	@db/faddr.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Âröt.h
"

22 
	~"Áddr.h
"

23 
	~"fõld.h
"

24 
	~"öode.h
"

25 
	~"io.h
"

26 
	~"bô.h
"

27 
	~"bm≠.h
"

28 
	~"ouçut.h
"

29 
	~"öô.h
"

32 
	$Á_agblock
(

33 *
obj
,

34 
bô
,

35 
ty≤m_t
 
√xt
)

37 
xfs_agblock_t
 
bno
;

39 i‡(
cur_agno
 =
NULLAGNUMBER
) {

40 
	`db¥ötf
(
	`_
("no currentállocation group, cannot setÇewáddr\n"));

43 
bno
 = (
xfs_agblock_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

44 i‡(
bno
 =
NULLAGBLOCK
) {

45 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

48 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

49 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
cur_agno
, 
bno
), 
blkbb
,

50 
DB_RING_ADD
, 
NULL
);

51 
	}
}

55 
	$Á_agöo
(

56 *
obj
,

57 
bô
,

58 
ty≤m_t
 
√xt
)

60 
xfs_agöo_t
 
agöo
;

62 i‡(
cur_agno
 =
NULLAGNUMBER
) {

63 
	`db¥ötf
(
	`_
("no currentállocation group, cannot setÇewáddr\n"));

66 
agöo
 = (
xfs_agöo_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
◊göo), 
BVUNSIGNED
);

67 i‡(
agöo
 =
NULLAGINO
) {

68 
	`db¥ötf
(
	`_
("null inodeÇumber, cannot setÇewáddr\n"));

71 
	`£t_cur_öode
(
	`XFS_AGINO_TO_INO
(
mp
, 
cur_agno
, 
agöo
));

72 
	}
}

76 
	$Á_©åblock
(

77 *
obj
,

78 
bô
,

79 
ty≤m_t
 
√xt
)

81 
bm≠_ext_t
 
bm
;

82 
__uöt32_t
 
bno
;

83 
xfs_fsblock_t
 
dfsbno
;

84 
√x
;

86 
bno
 = (
__uöt32_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

87 i‡(
bno
 == 0) {

88 
	`db¥ötf
(
	`_
("nulláttribute blockÇumber, cannot setÇewáddr\n"));

91 
√x
 = 1;

92 
	`bm≠
(
bno
, 1, 
XFS_ATTR_FORK
, &
√x
, &
bm
);

93 i‡(
√x
 == 0) {

94 
	`db¥ötf
(
	`_
("attribute block is unmapped\n"));

97 
dfsbno
 = 
bm
.
°¨tblock
 + (
bno
 - bm.
°¨toff
);

98 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

99 
	`£t_cur
(&
ty±ab
[
√xt
], (
__öt64_t
)
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
), 
blkbb
,

100 
DB_RING_ADD
, 
NULL
);

101 
	}
}

104 
	$Á_cfûeofÁ
(

105 *
obj
,

106 
bô
,

107 
ty≤m_t
 
√xt
)

109 
bm≠_ext_t
 
bm
;

110 
xfs_fûeoff_t
 
bno
;

111 
xfs_fsblock_t
 
dfsbno
;

112 
√x
;

114 
bno
 = (
xfs_fûeoff_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
BMBT_STARTOFF_BITLEN
,

115 
BVUNSIGNED
);

116 i‡(
bno
 =
NULLFILEOFF
) {

117 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

120 
√x
 = 1;

121 
	`bm≠
(
bno
, 1, 
XFS_ATTR_FORK
, &
√x
, &
bm
);

122 i‡(
√x
 == 0) {

123 
	`db¥ötf
(
	`_
("file block is unmapped\n"));

126 
dfsbno
 = 
bm
.
°¨tblock
 + (
bno
 - bm.
°¨toff
);

127 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

128 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
), 
blkbb
, 
DB_RING_ADD
,

129 
NULL
);

130 
	}
}

133 
	$Á_cfûeoffd
(

134 *
obj
,

135 
bô
,

136 
ty≤m_t
 
√xt
)

138 
bbm≠_t
 
bbm≠
;

139 
bm≠_ext_t
 *
bmp
;

140 
xfs_fûeoff_t
 
bno
;

141 
xfs_fsblock_t
 
dfsbno
;

142 
nb
;

143 
√x
;

145 
bno
 = (
xfs_fûeoff_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
BMBT_STARTOFF_BITLEN
,

146 
BVUNSIGNED
);

147 i‡(
bno
 =
NULLFILEOFF
) {

148 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

151 
√x
 = 
nb
 = 
√xt
 =
TYP_DIR2
 ? 
mp
->
m_dú_geo
->
fsbcou¡
 : 1;

152 
bmp
 = 
	`mÆloc
(
nb
 * (*bmp));

153 
	`bm≠
(
bno
, 
nb
, 
XFS_DATA_FORK
, &
√x
, 
bmp
);

154 i‡(
√x
 == 0) {

155 
	`db¥ötf
(
	`_
("file block is unmapped\n"));

156 
	`‰ì
(
bmp
);

159 
dfsbno
 = 
bmp
->
°¨tblock
 + (
bno
 - bmp->
°¨toff
);

160 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

161 i‡(
√x
 > 1)

162 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

163 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
), 
nb
 * 
blkbb
,

164 
DB_RING_ADD
, 
√x
 > 1 ? &
bbm≠
: 
NULL
);

165 
	`‰ì
(
bmp
);

166 
	}
}

169 
	$Á_cfsblock
(

170 *
obj
,

171 
bô
,

172 
ty≤m_t
 
√xt
)

174 
xfs_fsblock_t
 
bno
;

175 
nb
;

177 
bno
 = (
xfs_fsblock_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
BMBT_STARTBLOCK_BITLEN
,

178 
BVUNSIGNED
);

179 i‡(
bno
 =
NULLFSBLOCK
) {

180 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

183 
nb
 = 
√xt
 =
TYP_DIR2
 ? 
mp
->
m_dú_geo
->
fsbcou¡
 : 1;

184 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

185 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
), 
nb
 * 
blkbb
,

186 
DB_RING_ADD
, 
NULL
);

187 
	}
}

190 
	$Á_dfûofÁ
(

191 *
obj
,

192 
bô
,

193 
ty≤m_t
 
√xt
)

195 
bm≠_ext_t
 
bm
;

196 
xfs_fûeoff_t
 
bno
;

197 
xfs_fsblock_t
 
dfsbno
;

198 
√x
;

200 
bno
 = (
xfs_fûeoff_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

201 i‡(
bno
 =
NULLFILEOFF
) {

202 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

205 
√x
 = 1;

206 
	`bm≠
(
bno
, 1, 
XFS_ATTR_FORK
, &
√x
, &
bm
);

207 i‡(
√x
 == 0) {

208 
	`db¥ötf
(
	`_
("file block is unmapped\n"));

211 
dfsbno
 = 
bm
.
°¨tblock
 + (
bno
 - bm.
°¨toff
);

212 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

213 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
), 
blkbb
, 
DB_RING_ADD
,

214 
NULL
);

215 
	}
}

218 
	$Á_dfûoffd
(

219 *
obj
,

220 
bô
,

221 
ty≤m_t
 
√xt
)

223 
bbm≠_t
 
bbm≠
;

224 
bm≠_ext_t
 *
bmp
;

225 
xfs_fûeoff_t
 
bno
;

226 
xfs_fsblock_t
 
dfsbno
;

227 
nb
;

228 
√x
;

230 
bno
 = (
xfs_fûeoff_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

231 i‡(
bno
 =
NULLFILEOFF
) {

232 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

235 
√x
 = 
nb
 = 
√xt
 =
TYP_DIR2
 ? 
mp
->
m_dú_geo
->
fsbcou¡
 : 1;

236 
bmp
 = 
	`mÆloc
(
nb
 * (*bmp));

237 
	`bm≠
(
bno
, 
nb
, 
XFS_DATA_FORK
, &
√x
, 
bmp
);

238 i‡(
√x
 == 0) {

239 
	`db¥ötf
(
	`_
("file block is unmapped\n"));

240 
	`‰ì
(
bmp
);

243 
dfsbno
 = 
bmp
->
°¨tblock
 + (
bno
 - bmp->
°¨toff
);

244 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

245 i‡(
√x
 > 1)

246 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

247 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
), 
nb
 * 
blkbb
,

248 
DB_RING_ADD
, 
√x
 > 1 ? &
bbm≠
 : 
NULL
);

249 
	`‰ì
(
bmp
);

250 
	}
}

253 
	$Á_dfsbno
(

254 *
obj
,

255 
bô
,

256 
ty≤m_t
 
√xt
)

258 
xfs_fsblock_t
 
bno
;

260 
bno
 = (
xfs_fsblock_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

261 i‡(
bno
 =
NULLFSBLOCK
) {

262 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

265 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

266 
	`£t_cur
(&
ty±ab
[
√xt
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
), 
blkbb
, 
DB_RING_ADD
,

267 
NULL
);

268 
	}
}

272 
	$Á_dúblock
(

273 *
obj
,

274 
bô
,

275 
ty≤m_t
 
√xt
)

277 
bbm≠_t
 
bbm≠
;

278 
bm≠_ext_t
 *
bmp
;

279 
__uöt32_t
 
bno
;

280 
xfs_fsblock_t
 
dfsbno
;

281 
√x
;

283 
bno
 = (
__uöt32_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

284 i‡(
bno
 == 0) {

285 
	`db¥ötf
(
	`_
("null directory blockÇumber, cannot setÇewáddr\n"));

288 
√x
 = 
mp
->
m_dú_geo
->
fsbcou¡
;

289 
bmp
 = 
	`mÆloc
(
√x
 * (*bmp));

290 
	`bm≠
(
bno
, 
mp
->
m_dú_geo
->
fsbcou¡
, 
XFS_DATA_FORK
, &
√x
, 
bmp
);

291 i‡(
√x
 == 0) {

292 
	`db¥ötf
(
	`_
("directory block is unmapped\n"));

293 
	`‰ì
(
bmp
);

296 
dfsbno
 = 
bmp
->
°¨tblock
 + (
bno
 - bmp->
°¨toff
);

297 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

298 i‡(
√x
 > 1)

299 
	`make_bbm≠
(&
bbm≠
, 
√x
, 
bmp
);

300 
	`£t_cur
(&
ty±ab
[
√xt
], (
__öt64_t
)
	`XFS_FSB_TO_DADDR
(
mp
, 
dfsbno
),

301 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_dú_geo
->
fsbcou¡
), 
DB_RING_ADD
,

302 
√x
 > 1 ? &
bbm≠
 : 
NULL
);

303 
	`‰ì
(
bmp
);

304 
	}
}

307 
	$Á_drfsbno
(

308 *
obj
,

309 
bô
,

310 
ty≤m_t
 
√xt
)

312 
xfs_rfsblock_t
 
bno
;

314 
bno
 = (
xfs_rfsblock_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

315 i‡(
bno
 =
NULLRFSBLOCK
) {

316 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

319 
	`ASSERT
(
ty±ab
[
√xt
].
ty≤m
 ==Çext);

320 
	`£t_cur
(&
ty±ab
[
√xt
], (
__öt64_t
)
	`XFS_FSB_TO_BB
(
mp
, 
bno
), 
blkbb
,

321 
DB_RING_ADD
, 
NULL
);

322 
	}
}

326 
	$Á_dπbno
(

327 *
obj
,

328 
bô
,

329 
ty≤m_t
 
√xt
)

331 
xfs_πblock_t
 
bno
;

333 
bno
 = (
xfs_πblock_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(bno), 
BVUNSIGNED
);

334 i‡(
bno
 =
NULLRTBLOCK
) {

335 
	`db¥ötf
(
	`_
("null blockÇumber, cannot setÇewáddr\n"));

339 
	}
}

343 
	$Á_öo
(

344 *
obj
,

345 
bô
,

346 
ty≤m_t
 
√xt
)

348 
xfs_öo_t
 
öo
;

350 
	`ASSERT
(
√xt
 =
TYP_INODE
);

351 
öo
 = (
xfs_öo_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(öo), 
BVUNSIGNED
);

352 i‡(
öo
 =
NULLFSINO
) {

353 
	`db¥ötf
(
	`_
("null inodeÇumber, cannot setÇewáddr\n"));

356 
	`£t_cur_öode
(
öo
);

357 
	}
}

360 
	$Á_öo4
(

361 *
obj
,

362 
bô
,

363 
ty≤m_t
 
√xt
)

365 
xfs_öo_t
 
öo
;

367 
	`ASSERT
(
√xt
 =
TYP_INODE
);

368 
öo
 = (
xfs_öo_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(
XFS_INO32_SIZE
), 
BVUNSIGNED
);

369 i‡(
öo
 =
NULLFSINO
) {

370 
	`db¥ötf
(
	`_
("null inodeÇumber, cannot setÇewáddr\n"));

373 
	`£t_cur_öode
(
öo
);

374 
	}
}

377 
	$Á_öo8
(

378 *
obj
,

379 
bô
,

380 
ty≤m_t
 
√xt
)

382 
xfs_öo_t
 
öo
;

384 
	`ASSERT
(
√xt
 =
TYP_INODE
);

385 
öo
 = (
xfs_öo_t
)
	`gëbôvÆ
(
obj
, 
bô
, 
	`bôsz
(
XFS_INO64_SIZE
), 
BVUNSIGNED
);

386 i‡(
öo
 =
NULLFSINO
) {

387 
	`db¥ötf
(
	`_
("null inodeÇumber, cannot setÇewáddr\n"));

390 
	`£t_cur_öode
(
öo
);

391 
	}
}

	@db/faddr.h

19 (*
	tad‚c_t
)(*
	tobj
, 
	tbô
, 
	tty≤m_t
 
	t√xt
);

21 
	`Á_agblock
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

22 
	`Á_agöo
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

23 
	`Á_©åblock
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

24 
	`Á_cfûeoffd
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

25 
	`Á_cfsblock
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

26 
	`Á_dfûoffd
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

27 
	`Á_dfsbno
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

28 
	`Á_döode_uni⁄
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

29 
	`Á_dúblock
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

30 
	`Á_drfsbno
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

31 
	`Á_dπbno
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

32 
	`Á_öo
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

33 
	`Á_cfûeofÁ
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

34 
	`Á_dfûofÁ
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

35 
	`Á_öo4
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

36 
	`Á_öo8
(*
obj
, 
bô
, 
ty≤m_t
 
√xt
);

	@db/field.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"öode.h
"

25 
	~"btblock.h
"

26 
	~"bmroŸ.h
"

27 
	~"bô.h
"

28 
	~"agf.h
"

29 
	~"agÊ.h
"

30 
	~"agi.h
"

31 
	~"sb.h
"

32 
	~"©å.h
"

33 
	~"©åsh‹t.h
"

34 
	~"dquŸ.h
"

35 
	~"dú2.h
"

36 
	~"dú2sf.h
"

37 
	~"symlök.h
"

39 c⁄° 
·©å_t
 
	g·©åèb
[] = {

40 { 
FLDT_AEXTNUM
, "´xäum", 
Â_num
, "%d", 
SI
(
bôsz
(
xfs_´xäum_t
)),

41 
FTARG_SIGNED
, 
NULL
, NULL },

42 { 
FLDT_AGBLOCK
, "agblock", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_agblock_t
)),

43 
FTARG_DONULL
, 
Á_agblock
, 
NULL
 },

44 { 
FLDT_AGBLOCKNZ
, "agblocknz", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_agblock_t
)),

45 
FTARG_SKIPZERO
|
FTARG_DONULL
, 
Á_agblock
, 
NULL
 },

46 { 
FLDT_AGF
, "agf", 
NULL
, (*)
agf_Êds
, 
agf_size
, 
FTARG_SIZE
, NULL,

47 
agf_Êds
 },

48 { 
FLDT_AGFL
, "agÊ", 
NULL
, (*)
agÊ_Êds
, 
agÊ_size
, 
FTARG_SIZE
,

49 
NULL
, 
agÊ_Êds
 },

50 { 
FLDT_AGFL_CRC
, "agÊ", 
NULL
, (*)
agÊ_¸c_Êds
, 
agÊ_size
,

51 
FTARG_SIZE
, 
NULL
, 
agÊ_¸c_Êds
 },

52 { 
FLDT_AGI
, "agi", 
NULL
, (*)
agi_Êds
, 
agi_size
, 
FTARG_SIZE
, NULL,

53 
agi_Êds
 },

54 { 
FLDT_AGINO
, "agöo", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_agöo_t
)),

55 
FTARG_DONULL
, 
Á_agöo
, 
NULL
 },

56 { 
FLDT_AGINONN
, "agö⁄n", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_agöo_t
)),

57 
FTARG_SKIPNULL
, 
Á_agöo
, 
NULL
 },

58 { 
FLDT_AGNUMBER
, "agnumbî", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_agnumbî_t
)),

59 
FTARG_DONULL
, 
NULL
, NULL },

62 { 
FLDT_ATTR
, "©å", 
NULL
, (*)
©å_Êds
, 
©å_size
, 
FTARG_SIZE
,

63 
NULL
, 
©å_Êds
 },

64 { 
FLDT_ATTR_BLKINFO
, "©å_blköfo", 
NULL
, (*)
©å_blköfo_Êds
,

65 
SI
(
bôsz
(
xfs_da_blköfo
)), 0, 
NULL
, 
©å_blköfo_Êds
 },

66 { 
FLDT_ATTR_LEAF_ENTRY
, "©å_Àaf_íåy", 
Â_ßºay
,

67 (*)
©å_Àaf_íåy_Êds
, 
SI
(
bôsz
(
xfs_©å_Àaf_íåy
)),

68 0, 
NULL
, 
©å_Àaf_íåy_Êds
 },

69 { 
FLDT_ATTR_LEAF_HDR
, "©å_Àaf_hdr", 
NULL
, (*)
©å_Àaf_hdr_Êds
,

70 
SI
(
bôsz
(
xfs_©å_Àaf_hdr
)), 0, 
NULL
, 
©å_Àaf_hdr_Êds
 },

71 { 
FLDT_ATTR_LEAF_MAP
, "©å_Àaf_m≠", 
Â_ßºay
,

72 (*)
©å_Àaf_m≠_Êds
, 
SI
(
bôsz
(
xfs_©å_Àaf_m≠
)), 0,

73 
NULL
, 
©å_Àaf_m≠_Êds
 },

74 { 
FLDT_ATTR_LEAF_NAME
, "©å_Àaf_«me", 
NULL
,

75 (*)
©å_Àaf_«me_Êds
, 
©å_Àaf_«me_size
, 
FTARG_SIZE
, 
NULL
,

76 
©å_Àaf_«me_Êds
 },

77 { 
FLDT_ATTR_NODE_ENTRY
, "©å_node_íåy", 
Â_ßºay
,

78 (*)
©å_node_íåy_Êds
, 
SI
(
bôsz
(
xfs_da_node_íåy
)), 0,

79 
NULL
, 
©å_node_íåy_Êds
 },

80 { 
FLDT_ATTR_NODE_HDR
, "©å_node_hdr", 
NULL
, (*)
©å_node_hdr_Êds
,

81 
SI
(
bôsz
(
xfs_da_node_hdr
)), 0, 
NULL
, 
©å_node_hdr_Êds
 },

82 { 
FLDT_ATTR_SF_ENTRY
, "©å_sf_íåy", 
NULL
, (*)
©å_sf_íåy_Êds
,

83 
©å_sf_íåy_size
, 
FTARG_SIZE
, 
NULL
, 
©å_sf_íåy_Êds
 },

84 { 
FLDT_ATTR_SF_HDR
, "©å_sf_hdr", 
NULL
, (*)
©å_sf_hdr_Êds
,

85 
SI
(
bôsz
(
xfs_©å_sf_hdr
)), 0, 
NULL
, 
©å_sf_hdr_Êds
 },

86 { 
FLDT_ATTRBLOCK
, "©åblock", 
Â_num
, "%u", 
SI
(
bôsz
(
__uöt32_t
)), 0,

87 
Á_©åblock
, 
NULL
 },

88 { 
FLDT_ATTRSHORT
, "©åsh‹t", 
NULL
, (*)
©å_sh‹tf‹m_Êds
,

89 
©åsh‹t_size
, 
FTARG_SIZE
, 
NULL
, 
©å_sh‹tf‹m_Êds
 },

92 { 
FLDT_ATTR3
, "©å3", 
NULL
, (*)
©å3_Êds
, 
©å_size
, 
FTARG_SIZE
,

93 
NULL
, 
©å3_Êds
 },

94 { 
FLDT_ATTR3_LEAF_HDR
, "©å3_Àaf_hdr", 
NULL
,

95 (*)
©å3_Àaf_hdr_Êds
, 
SI
(
bôsz
(
xfs_©å3_Àaf_hdr
)),

96 0, 
NULL
, 
©å3_Àaf_hdr_Êds
 },

97 { 
FLDT_ATTR3_NODE_HDR
, "©å3_node_hdr", 
NULL
,

98 (*)
da3_node_hdr_Êds
, 
SI
(
bôsz
(
xfs_da3_node_hdr
)),

99 0, 
NULL
, 
da3_node_hdr_Êds
 },

101 { 
FLDT_BMAPBTA
, "bm≠bè", 
NULL
, (*)
bm≠bè_Êds
, 
btblock_size
,

102 
FTARG_SIZE
, 
NULL
, 
bm≠bè_Êds
 },

103 { 
FLDT_BMAPBTA_CRC
, "bm≠bè", 
NULL
, (*)
bm≠bè_¸c_Êds
,

104 
btblock_size
, 
FTARG_SIZE
, 
NULL
, 
bm≠bè_¸c_Êds
 },

105 { 
FLDT_BMAPBTAKEY
, "bm≠bèkey", 
Â_ßºay
, (*)
bm≠bè_key_Êds
,

106 
SI
(
bôsz
(
xfs_bmbt_key_t
)), 0, 
NULL
, 
bm≠bè_key_Êds
 },

107 { 
FLDT_BMAPBTAPTR
, "bm≠bè±r", 
Â_num
, "%llu",

108 
SI
(
bôsz
(
xfs_bmbt_±r_t
)), 0, 
Á_dfsbno
, 
NULL
 },

109 { 
FLDT_BMAPBTAREC
, "bm≠bèªc", 
Â_ßºay
, (*)
bm≠bè_ªc_Êds
,

110 
SI
(
bôsz
(
xfs_bmbt_ªc_t
)), 0, 
NULL
, 
bm≠bè_ªc_Êds
 },

111 { 
FLDT_BMAPBTD
, "bm≠btd", 
NULL
, (*)
bm≠btd_Êds
, 
btblock_size
,

112 
FTARG_SIZE
, 
NULL
, 
bm≠btd_Êds
 },

113 { 
FLDT_BMAPBTD_CRC
, "bm≠btd", 
NULL
, (*)
bm≠btd_¸c_Êds
,

114 
btblock_size
, 
FTARG_SIZE
, 
NULL
, 
bm≠btd_¸c_Êds
 },

115 { 
FLDT_BMAPBTDKEY
, "bm≠btdkey", 
Â_ßºay
, (*)
bm≠btd_key_Êds
,

116 
SI
(
bôsz
(
xfs_bmbt_key_t
)), 0, 
NULL
, 
bm≠btd_key_Êds
 },

117 { 
FLDT_BMAPBTDPTR
, "bm≠btd±r", 
Â_num
, "%llu",

118 
SI
(
bôsz
(
xfs_bmbt_±r_t
)), 0, 
Á_dfsbno
, 
NULL
 },

119 { 
FLDT_BMAPBTDREC
, "bm≠btdªc", 
Â_ßºay
, (*)
bm≠btd_ªc_Êds
,

120 
SI
(
bôsz
(
xfs_bmbt_ªc_t
)), 0, 
NULL
, 
bm≠btd_ªc_Êds
 },

121 { 
FLDT_BMROOTA
, "bmroŸa", 
NULL
, (*)
bmroŸa_Êds
, 
bmroŸa_size
,

122 
FTARG_SIZE
, 
NULL
, 
bmroŸa_Êds
 },

123 { 
FLDT_BMROOTAKEY
, "bmroŸakey", 
Â_ßºay
, (*)
bmroŸa_key_Êds
,

124 
SI
(
bôsz
(
xfs_bmdr_key_t
)), 0, 
NULL
, 
bmroŸa_key_Êds
 },

125 { 
FLDT_BMROOTAPTR
, "bmroŸ≠å", 
Â_num
, "%llu",

126 
SI
(
bôsz
(
xfs_bmdr_±r_t
)), 0, 
Á_dfsbno
, 
NULL
 },

127 { 
FLDT_BMROOTD
, "bmroŸd", 
NULL
, (*)
bmroŸd_Êds
, 
bmroŸd_size
,

128 
FTARG_SIZE
, 
NULL
, 
bmroŸd_Êds
 },

129 { 
FLDT_BMROOTDKEY
, "bmroŸdkey", 
Â_ßºay
, (*)
bmroŸd_key_Êds
,

130 
SI
(
bôsz
(
xfs_bmdr_key_t
)), 0, 
NULL
, 
bmroŸd_key_Êds
 },

131 { 
FLDT_BMROOTDPTR
, "bmroŸd±r", 
Â_num
, "%llu",

132 
SI
(
bôsz
(
xfs_bmdr_±r_t
)), 0, 
Á_dfsbno
, 
NULL
 },

133 { 
FLDT_BNOBT
, "bnobt", 
NULL
, (*)
bnobt_Êds
, 
btblock_size
, 
FTARG_SIZE
,

134 
NULL
, 
bnobt_Êds
 },

135 { 
FLDT_BNOBT_CRC
, "bnobt", 
NULL
, (*)
bnobt_¸c_Êds
, 
btblock_size
,

136 
FTARG_SIZE
, 
NULL
, 
bnobt_¸c_Êds
 },

137 { 
FLDT_BNOBTKEY
, "bnobtkey", 
Â_ßºay
, (*)
bnobt_key_Êds
,

138 
SI
(
bôsz
(
xfs_Æloc_key_t
)), 0, 
NULL
, 
bnobt_key_Êds
 },

139 { 
FLDT_BNOBTPTR
, "bnobçå", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_Æloc_±r_t
)),

140 0, 
Á_agblock
, 
NULL
 },

141 { 
FLDT_BNOBTREC
, "bnobåec", 
Â_ßºay
, (*)
bnobt_ªc_Êds
,

142 
SI
(
bôsz
(
xfs_Æloc_ªc_t
)), 0, 
NULL
, 
bnobt_ªc_Êds
 },

143 { 
FLDT_CEXTFLG
, "˚xtÊag", 
Â_num
, "%u", 
SI
(
BMBT_EXNTFLAG_BITLEN
), 0,

144 
NULL
, NULL },

145 { 
FLDT_CEXTLEN
, "˚xéí", 
Â_num
, "%u", 
SI
(
BMBT_BLOCKCOUNT_BITLEN
), 0,

146 
NULL
, NULL },

147 { 
FLDT_CFILEOFFA
, "cfûeofÁ", 
Â_num
, "%Œu", 
SI
(
BMBT_STARTOFF_BITLEN
),

148 0, 
Á_cfûeofÁ
, 
NULL
 },

149 { 
FLDT_CFILEOFFD
, "cfûeoffd", 
Â_num
, "%Œu", 
SI
(
BMBT_STARTOFF_BITLEN
),

150 0, 
Á_cfûeoffd
, 
NULL
 },

151 { 
FLDT_CFSBLOCK
, "cfsblock", 
Â_num
, "%Œu", 
SI
(
BMBT_STARTBLOCK_BITLEN
),

152 0, 
Á_cfsblock
, 
NULL
 },

153 { 
FLDT_CHARNS
, "ch¨ns", 
Â_ch¨ns
, 
NULL
, 
SI
(
bôsz
()), 0, NULL,

154 
NULL
 },

155 { 
FLDT_CHARS
, "ch¨s", 
Â_num
, "%c", 
SI
(
bôsz
()), 0, 
NULL
, NULL },

156 { 
FLDT_REXTLEN
, "ªxéí", 
Â_num
, "%u", 
SI
(
RMAPBT_BLOCKCOUNT_BITLEN
),

157 0, 
NULL
, NULL },

158 { 
FLDT_RFILEOFFD
, "rfûeoffd", 
Â_num
, "%Œu", 
SI
(
RMAPBT_OFFSET_BITLEN
),

159 0, 
NULL
, NULL },

160 { 
FLDT_REXTFLG
, "ªxtÊag", 
Â_num
, "%u", 
SI
(
RMAPBT_EXNTFLAG_BITLEN
), 0,

161 
NULL
, NULL },

162 { 
FLDT_RATTRFORKFLG
, "øârf‹kÊag", 
Â_num
, "%u", 
SI
(
RMAPBT_ATTRFLAG_BITLEN
), 0,

163 
NULL
, NULL },

164 { 
FLDT_RBMBTFLG
, "rbmbtÊag", 
Â_num
, "%u", 
SI
(
RMAPBT_BMBTFLAG_BITLEN
), 0,

165 
NULL
, NULL },

166 { 
FLDT_CAGBLOCK
, "ˇgblock", 
Â_num
, "%u", 
SI
(
REFCNTBT_AGBLOCK_BITLEN
),

167 
FTARG_DONULL
, 
Á_agblock
, 
NULL
 },

168 { 
FLDT_CCOWFLG
, "ccowÊag", 
Â_num
, "%u", 
SI
(
REFCNTBT_COWFLAG_BITLEN
), 0,

169 
NULL
, NULL },

170 { 
FLDT_CNTBT
, "˙tbt", 
NULL
, (*)
˙tbt_Êds
, 
btblock_size
, 
FTARG_SIZE
,

171 
NULL
, 
˙tbt_Êds
 },

172 { 
FLDT_CNTBT_CRC
, "˙tbt", 
NULL
, (*)
˙tbt_¸c_Êds
, 
btblock_size
,

173 
FTARG_SIZE
, 
NULL
, 
˙tbt_¸c_Êds
 },

174 { 
FLDT_CNTBTKEY
, "˙tbtkey", 
Â_ßºay
, (*)
˙tbt_key_Êds
,

175 
SI
(
bôsz
(
xfs_Æloc_key_t
)), 0, 
NULL
, 
˙tbt_key_Êds
 },

176 { 
FLDT_CNTBTPTR
, "˙tbçå", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_Æloc_±r_t
)),

177 0, 
Á_agblock
, 
NULL
 },

178 { 
FLDT_CNTBTREC
, "˙tbåec", 
Â_ßºay
, (*)
˙tbt_ªc_Êds
,

179 
SI
(
bôsz
(
xfs_Æloc_ªc_t
)), 0, 
NULL
, 
˙tbt_ªc_Êds
 },

181 { 
FLDT_RMAPBT_CRC
, "rm≠bt", 
NULL
, (*)
rm≠bt_¸c_Êds
, 
btblock_size
,

182 
FTARG_SIZE
, 
NULL
, 
rm≠bt_¸c_Êds
 },

183 { 
FLDT_RMAPBTKEY
, "rm≠btkey", 
Â_ßºay
, (*)
rm≠bt_key_Êds
,

184 
SI
(
bôize
(2 * (
xfs_rm≠_key
))), 0, 
NULL
, 
rm≠bt_key_Êds
 },

185 { 
FLDT_RMAPBTPTR
, "rm≠bçå", 
Â_num
, "%u",

186 
SI
(
bôsz
(
xfs_rm≠_±r_t
)), 0, 
Á_agblock
, 
NULL
 },

187 { 
FLDT_RMAPBTREC
, "rm≠båec", 
Â_ßºay
, (*)
rm≠bt_ªc_Êds
,

188 
SI
(
bôsz
(
xfs_rm≠_ªc
)), 0, 
NULL
, 
rm≠bt_ªc_Êds
 },

190 { 
FLDT_REFCBT_CRC
, "ªf˙tbt", 
NULL
, (*)
ªfcbt_¸c_Êds
, 
btblock_size
,

191 
FTARG_SIZE
, 
NULL
, 
ªfcbt_¸c_Êds
 },

192 { 
FLDT_REFCBTKEY
, "ªf˙tbtkey", 
Â_ßºay
, (*)
ªfcbt_key_Êds
,

193 
SI
(
bôsz
(
xfs_ªfcou¡_key
)), 0, 
NULL
, 
ªfcbt_key_Êds
 },

194 { 
FLDT_REFCBTPTR
, "ªf˙tbçå", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_ªfcou¡_±r_t
)),

195 0, 
Á_agblock
, 
NULL
 },

196 { 
FLDT_REFCBTREC
, "ªf˙tbåec", 
Â_ßºay
, (*)
ªfcbt_ªc_Êds
,

197 
SI
(
bôsz
(
xfs_ªfcou¡_ªc
)), 0, 
NULL
, 
ªfcbt_ªc_Êds
 },

200 { 
FLDT_CRC
, "¸c", 
Â_¸c
, "%#x (%s)", 
SI
(
bôsz
(
__uöt32_t
)),

201 0, 
NULL
, NULL },

203 { 
FLDT_DEV
, "dev", 
Â_num
, "%#x", 
SI
(
bôsz
(
xfs_dev_t
)), 0, 
NULL
, NULL },

204 { 
FLDT_DFILOFFA
, "dfûofÁ", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_fûeoff_t
)),

205 0, 
Á_dfûofÁ
, 
NULL
 },

206 { 
FLDT_DFILOFFD
, "dfûoffd", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_fûeoff_t
)),

207 0, 
Á_dfûoffd
, 
NULL
 },

208 { 
FLDT_DFSBNO
, "dfsbno", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_fsblock_t
)),

209 
FTARG_DONULL
, 
Á_dfsbno
, 
NULL
 },

210 { 
FLDT_DINODE_A
, "döode_a", 
NULL
, (*)
öode_a_Êds
, 
öode_a_size
,

211 
FTARG_SIZE
|
FTARG_OKEMPTY
, 
NULL
, 
öode_a_Êds
 },

212 { 
FLDT_DINODE_CORE
, "döode_c‹e", 
NULL
, (*)
öode_c‹e_Êds
,

213 
SI
(
bôsz
(
xfs_döode_t
)), 0, 
NULL
, 
öode_c‹e_Êds
 },

214 { 
FLDT_DINODE_FMT
, "döode_fmt", 
Â_döode_fmt
, 
NULL
,

215 
SI
(
bôsz
(
__öt8_t
)), 0, 
NULL
, NULL },

216 { 
FLDT_DINODE_U
, "döode_u", 
NULL
, (*)
öode_u_Êds
, 
öode_u_size
,

217 
FTARG_SIZE
|
FTARG_OKEMPTY
, 
NULL
, 
öode_u_Êds
 },

218 { 
FLDT_DINODE_V3
, "döode_v3", 
NULL
, (*)
öode_v3_Êds
,

219 
SI
(
bôsz
(
xfs_döode_t
)), 0, 
NULL
, 
öode_v3_Êds
 },

222 { 
FLDT_DIR2
, "dú2", 
NULL
, (*)
dú2_Êds
, 
dú2_size
, 
FTARG_SIZE
,

223 
NULL
, 
dú2_Êds
 },

224 { 
FLDT_DIR2_BLOCK_TAIL
, "dú2_block_èû", 
NULL
,

225 (*)
dú2_block_èû_Êds
, 
SI
(
bôsz
(
xfs_dú2_block_èû_t
)), 0,

226 
NULL
, 
dú2_block_èû_Êds
 },

227 { 
FLDT_DIR2_DATA_FREE
, "dú2_d©a_‰ì", 
NULL
,

228 (*)
dú2_d©a_‰ì_Êds
, 
SI
(
bôsz
(
xfs_dú2_d©a_‰ì_t
)), 0, 
NULL
,

229 
dú2_d©a_‰ì_Êds
 },

230 { 
FLDT_DIR2_DATA_HDR
, "dú2_d©a_hdr", 
NULL
, (*)
dú2_d©a_hdr_Êds
,

231 
SI
(
bôsz
(
xfs_dú2_d©a_hdr_t
)), 0, 
NULL
, 
dú2_d©a_hdr_Êds
 },

232 { 
FLDT_DIR2_DATA_OFF
, "dú2_d©a_off", 
Â_num
, "%#x",

233 
SI
(
bôsz
(
xfs_dú2_d©a_off_t
)), 0, 
NULL
, NULL },

234 { 
FLDT_DIR2_DATA_OFFNZ
, "dú2_d©a_of‚z", 
Â_num
, "%#x",

235 
SI
(
bôsz
(
xfs_dú2_d©a_off_t
)), 
FTARG_SKIPZERO
, 
NULL
, NULL },

236 { 
FLDT_DIR2_DATA_UNION
, "dú2_d©a_uni⁄", 
NULL
,

237 (*)
dú2_d©a_uni⁄_Êds
, 
dú2_d©a_uni⁄_size
, 
FTARG_SIZE
, 
NULL
,

238 
dú2_d©a_uni⁄_Êds
 },

239 { 
FLDT_DIR2_FREE_HDR
, "dú2_‰ì_hdr", 
NULL
, (*)
dú2_‰ì_hdr_Êds
,

240 
SI
(
bôsz
(
xfs_dú2_‰ì_hdr_t
)), 0, 
NULL
, 
dú2_‰ì_hdr_Êds
 },

241 { 
FLDT_DIR2_INO4
, "dú2_öo4", 
Â_num
, "%u",

242 
SI
(
bôize
(
XFS_INO32_SIZE
)), 0, 
Á_öo4
, 
NULL
 },

243 { 
FLDT_DIR2_INO8
, "dú2_öo8", 
Â_num
, "%llu",

244 
SI
(
bôize
(
XFS_INO64_SIZE
)), 0, 
Á_öo8
, 
NULL
 },

245 { 
FLDT_DIR2_INOU
, "dú2_öou", 
NULL
, (*)
dú2_öou_Êds
,

246 
dú2_öou_size
, 
FTARG_SIZE
, 
NULL
, 
dú2_öou_Êds
 },

247 { 
FLDT_DIR2_LEAF_ENTRY
, "dú2_Àaf_íåy", 
NULL
,

248 (*)
dú2_Àaf_íåy_Êds
, 
SI
(
bôsz
(
xfs_dú2_Àaf_íåy_t
)), 0,

249 
NULL
, 
dú2_Àaf_íåy_Êds
 },

250 { 
FLDT_DIR2_LEAF_HDR
, "dú2_Àaf_hdr", 
NULL
, (*)
dú2_Àaf_hdr_Êds
,

251 
SI
(
bôsz
(
xfs_dú2_Àaf_hdr_t
)), 0, 
NULL
, 
dú2_Àaf_hdr_Êds
 },

252 { 
FLDT_DIR2_LEAF_TAIL
, "dú2_Àaf_èû", 
NULL
,

253 (*)
dú2_Àaf_èû_Êds
, 
SI
(
bôsz
(
xfs_dú2_Àaf_èû_t
)), 0, 
NULL
,

254 
dú2_Àaf_èû_Êds
 },

255 { 
FLDT_DIR2_SF_ENTRY
, "dú2_sf_íåy", 
NULL
, (*)
dú2_sf_íåy_Êds
,

256 
dú2_sf_íåy_size
, 
FTARG_SIZE
, 
NULL
, 
dú2_sf_íåy_Êds
 },

257 { 
FLDT_DIR2_SF_HDR
, "dú2_sf_hdr", 
NULL
, (*)
dú2_sf_hdr_Êds
,

258 
dú2_sf_hdr_size
, 
FTARG_SIZE
, 
NULL
, 
dú2_sf_hdr_Êds
 },

259 { 
FLDT_DIR2_SF_OFF
, "dú2_sf_off", 
Â_num
, "%#x",

260 
SI
(
bôize
(2*(
__u8
))), 0, 
NULL
, NULL },

261 { 
FLDT_DIR2SF
, "dú2sf", 
NULL
, (*)
dú2sf_Êds
, 
dú2sf_size
,

262 
FTARG_SIZE
, 
NULL
, 
dú2sf_Êds
 },

265 { 
FLDT_DIR3
, "dú3", 
NULL
, (*)
dú3_Êds
, 
dú2_size
, 
FTARG_SIZE
,

266 
NULL
, 
dú3_Êds
 },

267 { 
FLDT_DIR3_BLKHDR
, "dú3_blk_hdr", 
NULL
, (*)
dú3_blkhdr_Êds
,

268 
SI
(
bôsz
(
xfs_dú3_blk_hdr
)), 0, 
NULL
, 
dú3_blkhdr_Êds
 },

269 { 
FLDT_DIR3_DATA_HDR
, "dú3_d©a_hdr", 
NULL
, (*)
dú3_d©a_hdr_Êds
,

270 
SI
(
bôsz
(
xfs_dú3_d©a_hdr
)), 0, 
NULL
, 
dú3_d©a_hdr_Êds
 },

271 { 
FLDT_DIR3_FREE_HDR
, "dú3_‰ì_hdr", 
NULL
, (*)
dú3_‰ì_hdr_Êds
,

272 
SI
(
bôsz
(
xfs_dú3_‰ì_hdr
)), 0, 
NULL
, 
dú3_‰ì_hdr_Êds
 },

273 { 
FLDT_DIR3_LEAF_HDR
, "dú3_Àaf_hdr", 
NULL
, (*)
dú3_Àaf_hdr_Êds
,

274 
SI
(
bôsz
(
xfs_dú3_Àaf_hdr
)), 0, 
NULL
, 
dú3_Àaf_hdr_Êds
 },

275 { 
FLDT_DIR3_DATA_UNION
, "dú3_d©a_uni⁄", 
NULL
,

276 (*)
dú3_d©a_uni⁄_Êds
, 
dú2_d©a_uni⁄_size
, 
FTARG_SIZE
, 
NULL
,

277 
dú3_d©a_uni⁄_Êds
 },

278 { 
FLDT_DIR3_SF_ENTRY
, "dú3_sf_íåy", 
NULL
, (*)
dú3_sf_íåy_Êds
,

279 
dú2_sf_íåy_size
, 
FTARG_SIZE
, 
NULL
, 
dú3_sf_íåy_Êds
 },

280 { 
FLDT_DIR3SF
, "dú3sf", 
NULL
, (*)
dú3sf_Êds
, 
dú2sf_size
,

281 
FTARG_SIZE
, 
NULL
, 
dú3sf_Êds
 },

284 { 
FLDT_DA_BLKINFO
, "dú_blköfo", 
NULL
, (*)
da_blköfo_Êds
,

285 
SI
(
bôsz
(
xfs_da_blköfo
)), 0, 
NULL
, 
da_blköfo_Êds
 },

286 { 
FLDT_DA_NODE_ENTRY
, "dú_node_íåy", 
Â_ßºay
,

287 (*)
da_node_íåy_Êds
, 
SI
(
bôsz
(
xfs_da_node_íåy
)), 0,

288 
NULL
, 
da_node_íåy_Êds
 },

289 { 
FLDT_DA_NODE_HDR
, "dú_node_hdr", 
NULL
, (*)
da_node_hdr_Êds
,

290 
SI
(
bôsz
(
xfs_da_node_hdr
)), 0, 
NULL
, 
da_node_hdr_Êds
 },

291 { 
FLDT_DA3_BLKINFO
, "dú_blköfo", 
NULL
, (*)
da3_blköfo_Êds
,

292 
SI
(
bôsz
(
xfs_da3_blköfo
)), 0, 
NULL
, 
da3_blköfo_Êds
 },

293 { 
FLDT_DA3_NODE_HDR
, "dú_node_hdr", 
NULL
, (*)
da3_node_hdr_Êds
,

294 
SI
(
bôsz
(
xfs_da3_node_hdr
)), 0, 
NULL
, 
da3_node_hdr_Êds
 },

296 { 
FLDT_DIRBLOCK
, "dúblock", 
Â_num
, "%u", 
SI
(
bôsz
(
__uöt32_t
)), 0,

297 
Á_dúblock
, 
NULL
 },

298 { 
FLDT_DISK_DQUOT
, "disk_dquŸ", 
NULL
, (*)
disk_dquŸ_Êds
,

299 
SI
(
bôsz
(
xfs_disk_dquŸ_t
)), 0, 
NULL
, 
disk_dquŸ_Êds
 },

300 { 
FLDT_DQBLK
, "dqblk", 
NULL
, (*)
dqblk_Êds
, 
SI
(
bôsz
(
xfs_dqblk_t
)),

301 0, 
NULL
, 
dqblk_Êds
 },

302 { 
FLDT_DQID
, "dqid", 
Â_num
, "%d", 
SI
(
bôsz
(
xfs_dqid_t
)), 0, 
NULL
,

303 
NULL
 },

304 { 
FLDT_DRFSBNO
, "drfsbno", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_rfsblock_t
)),

305 
FTARG_DONULL
, 
Á_drfsbno
, 
NULL
 },

306 { 
FLDT_DRTBNO
, "dπbno", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_πblock_t
)),

307 
FTARG_DONULL
, 
Á_dπbno
, 
NULL
 },

308 { 
FLDT_EXTLEN
, "exéí", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_exéí_t
)), 0, 
NULL
,

309 
NULL
 },

310 { 
FLDT_EXTNUM
, "exäum", 
Â_num
, "%d", 
SI
(
bôsz
(
xfs_exäum_t
)),

311 
FTARG_SIGNED
, 
NULL
, NULL },

312 { 
FLDT_FSIZE
, "fsize", 
Â_num
, "%Œd", 
SI
(
bôsz
(
xfs_fsize_t
)),

313 
FTARG_SIGNED
, 
NULL
, NULL },

314 { 
FLDT_INO
, "öo", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_öo_t
)), 
FTARG_DONULL
,

315 
Á_öo
, 
NULL
 },

316 { 
FLDT_INOBT
, "öobt", 
NULL
, (*)
öobt_Êds
, 
btblock_size
,

317 
FTARG_SIZE
, 
NULL
, 
öobt_Êds
 },

318 { 
FLDT_INOBT_CRC
, "öobt", 
NULL
, (*)
öobt_¸c_Êds
, 
btblock_size
,

319 
FTARG_SIZE
, 
NULL
, 
öobt_¸c_Êds
 },

320 { 
FLDT_INOBT_SPCRC
, "öobt", 
NULL
, (*)
öobt_•¸c_Êds
,

321 
btblock_size
, 
FTARG_SIZE
, 
NULL
, 
öobt_•¸c_Êds
 },

322 { 
FLDT_INOBTKEY
, "öobtkey", 
Â_ßºay
, (*)
öobt_key_Êds
,

323 
SI
(
bôsz
(
xfs_öobt_key_t
)), 0, 
NULL
, 
öobt_key_Êds
 },

324 { 
FLDT_INOBTPTR
, "öobçå", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_öobt_±r_t
)),

325 0, 
Á_agblock
, 
NULL
 },

326 { 
FLDT_INOBTREC
, "öobåec", 
Â_ßºay
, (*)
öobt_ªc_Êds
,

327 
SI
(
bôsz
(
xfs_öobt_ªc_t
)), 0, 
NULL
, 
öobt_ªc_Êds
 },

328 { 
FLDT_INOBTSPREC
, "öobt•ªc", 
Â_ßºay
, (*Ë
öobt_•ªc_Êds
,

329 
SI
(
bôsz
(
xfs_öobt_ªc_t
)), 0, 
NULL
, 
öobt_•ªc_Êds
 },

330 { 
FLDT_INODE
, "öode", 
NULL
, (*)
öode_Êds
, 
öode_size
, 
FTARG_SIZE
,

331 
NULL
, 
öode_Êds
 },

332 { 
FLDT_INODE_CRC
, "öode", 
NULL
, (*)
öode_¸c_Êds
, 
öode_size
,

333 
FTARG_SIZE
, 
NULL
, 
öode_¸c_Êds
 },

334 { 
FLDT_INOFREE
, "öo‰ì", 
Â_num
, "%#Œx", 
SI
(
bôsz
(
xfs_öo‰ì_t
)), 0,

335 
NULL
, NULL },

336 { 
FLDT_INT16D
, "öt16d", 
Â_num
, "%d", 
SI
(
bôsz
(
__öt16_t
)),

337 
FTARG_SIGNED
, 
NULL
, NULL },

338 { 
FLDT_INT32D
, "öt32d", 
Â_num
, "%d", 
SI
(
bôsz
(
__öt32_t
)),

339 
FTARG_SIGNED
, 
NULL
, NULL },

340 { 
FLDT_INT64D
, "öt64d", 
Â_num
, "%Œd", 
SI
(
bôsz
(
__öt64_t
)),

341 
FTARG_SIGNED
, 
NULL
, NULL },

342 { 
FLDT_INT8D
, "öt8d", 
Â_num
, "%d", 
SI
(
bôsz
(
__öt8_t
)), 
FTARG_SIGNED
,

343 
NULL
, NULL },

344 { 
FLDT_NSEC
, "n£c", 
Â_num
, "%09d", 
SI
(
bôsz
(
__öt32_t
)), 
FTARG_SIGNED
,

345 
NULL
, NULL },

346 { 
FLDT_QCNT
, "q˙t", 
Â_num
, "%Œu", 
SI
(
bôsz
(
xfs_q˙t_t
)), 0, 
NULL
,

347 
NULL
 },

348 { 
FLDT_QWARNCNT
, "qw¨n˙t", 
Â_num
, "%u", 
SI
(
bôsz
(
xfs_qw¨n˙t_t
)), 0,

349 
NULL
, NULL },

350 { 
FLDT_SB
, "sb", 
NULL
, (*)
sb_Êds
, 
sb_size
, 
FTARG_SIZE
, NULL,

351 
sb_Êds
 },

354 { 
FLDT_SYMLINK_CRC
, "symlök", 
NULL
, (*)
symlök_¸c_Êds
,

355 
symlök_size
, 
FTARG_SIZE
, 
NULL
, 
symlök_¸c_Êds
 },

357 { 
FLDT_TIME
, "time", 
Â_time
, 
NULL
, 
SI
(
bôsz
(
__öt32_t
)), 
FTARG_SIGNED
,

358 
NULL
, NULL },

359 { 
FLDT_TIMESTAMP
, "time°amp", 
NULL
, (*)
time°amp_Êds
,

360 
SI
(
bôsz
(
xfs_time°amp_t
)), 0, 
NULL
, 
time°amp_Êds
 },

361 { 
FLDT_UINT1
, "uöt1", 
Â_num
, "%u", 
SI
(1), 0, 
NULL
, NULL },

362 { 
FLDT_UINT16D
, "uöt16d", 
Â_num
, "%u", 
SI
(
bôsz
(
__uöt16_t
)), 0, 
NULL
,

363 
NULL
 },

364 { 
FLDT_UINT16O
, "uöt16o", 
Â_num
, "%#o", 
SI
(
bôsz
(
__uöt16_t
)), 0,

365 
NULL
, NULL },

366 { 
FLDT_UINT16X
, "uöt16x", 
Â_num
, "%#x", 
SI
(
bôsz
(
__uöt16_t
)), 0,

367 
NULL
, NULL },

368 { 
FLDT_UINT32D
, "uöt32d", 
Â_num
, "%u", 
SI
(
bôsz
(
__uöt32_t
)), 0, 
NULL
,

369 
NULL
 },

370 { 
FLDT_UINT32O
, "uöt32o", 
Â_num
, "%#o", 
SI
(
bôsz
(
__uöt32_t
)), 0,

371 
NULL
, NULL },

372 { 
FLDT_UINT32X
, "uöt32x", 
Â_num
, "%#x", 
SI
(
bôsz
(
__uöt32_t
)), 0,

373 
NULL
, NULL },

374 { 
FLDT_UINT64D
, "uöt64d", 
Â_num
, "%Œu", 
SI
(
bôsz
(
__uöt64_t
)), 0,

375 
NULL
, NULL },

376 { 
FLDT_UINT64O
, "uöt64o", 
Â_num
, "%#Œo", 
SI
(
bôsz
(
__uöt64_t
)), 0,

377 
NULL
, NULL },

378 { 
FLDT_UINT64X
, "uöt64x", 
Â_num
, "%#Œx", 
SI
(
bôsz
(
__uöt64_t
)), 0,

379 
NULL
, NULL },

380 { 
FLDT_UINT8D
, "uöt8d", 
Â_num
, "%u", 
SI
(
bôsz
(
__uöt8_t
)), 0, 
NULL
,

381 
NULL
 },

382 { 
FLDT_UINT8O
, "uöt8o", 
Â_num
, "%#o", 
SI
(
bôsz
(
__uöt8_t
)), 0, 
NULL
,

383 
NULL
 },

384 { 
FLDT_UINT8X
, "uöt8x", 
Â_num
, "%#x", 
SI
(
bôsz
(
__uöt8_t
)), 0, 
NULL
,

385 
NULL
 },

386 { 
FLDT_UUID
, "uuid", 
Â_uuid
, 
NULL
, 
SI
(
bôsz
(
uuid_t
)), 0, NULL, NULL },

387 { 
FLDT_ZZZ
, 
NULL
 }

391 
	$bôoff£t
(

392 c⁄° 
fõld_t
 *
f
,

393 *
obj
,

394 
°¨toff
,

395 
idx
)

398 i‡(!(
f
->
Êags
 & 
FLD_OFFSET
)) {

399 i‡(
f
->
Êags
 & 
FLD_ARRAY
) {

400 
aba£
;

401 #ifde‡
DEBUG


402 c⁄° 
·©å_t
 *
Á
 = &
·©åèb
[
f
->
·yp
];

405 
aba£
 = (
f
->
Êags
 & 
FLD_ABASE1
) != 0;

406 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

407 
	`ASSERT
((
Á
->
¨g
 & 
FTARG_SIZE
) == 0);

408  ()(
öçå_t
)
f
->
off£t
 +

409 (
idx
 - 
aba£
Ë* 
	`fsize
(
f
, 
obj
, 
°¨toff
, idx);

411  ()(
öçå_t
)
f
->
off£t
;

413  (*
f
->
off£t
)(
obj
, 
°¨toff
, 
idx
);

414 
	}
}

417 
	$fcou¡
(

418 c⁄° 
fõld_t
 *
f
,

419 *
obj
,

420 
°¨toff
)

422 i‡(!(
f
->
Êags
 & 
FLD_COUNT
))

423  ()(
öçå_t
)
f
->
cou¡
;

425  (*
f
->
cou¡
)(
obj
, 
°¨toff
);

426 
	}
}

428 c⁄° 
fõld_t
 *

429 
	$födfõld
(

430 *
«me
,

431 c⁄° 
fõld_t
 *
fõlds
,

432 *
obj
,

433 
°¨toff
)

435 c⁄° 
fõld_t
 *
f
;

438 
f
 = 
fõlds
; f->
«me
; f++)

439 i‡(
	`°rcmp
(
f
->
«me
,ÇameË=0 && 
	`fcou¡
(f, 
obj
, 
°¨toff
))

440  
f
;

441  
NULL
;

442 
	}
}

445 
	$fsize
(

446 c⁄° 
fõld_t
 *
f
,

447 *
obj
,

448 
°¨toff
,

449 
idx
)

451 c⁄° 
·©å_t
 *
Á
;

453 
Á
 = &
·©åèb
[
f
->
·yp
];

454 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

455 i‡(!(
Á
->
¨g
 & 
FTARG_SIZE
))

456  ()(
öçå_t
)
Á
->
size
;

458  (*
Á
->
size
)(
obj
, 
°¨toff
, 
idx
);

459 
	}
}

	@db/field.h

19 
	eÊdt
 {

20 
	mFLDT_AEXTNUM
,

21 
	mFLDT_AGBLOCK
,

22 
	mFLDT_AGBLOCKNZ
,

23 
	mFLDT_AGF
,

24 
	mFLDT_AGFL
,

25 
	mFLDT_AGFL_CRC
,

26 
	mFLDT_AGI
,

27 
	mFLDT_AGINO
,

28 
	mFLDT_AGINONN
,

29 
	mFLDT_AGNUMBER
,

32 
	mFLDT_ATTR
,

33 
	mFLDT_ATTR_BLKINFO
,

34 
	mFLDT_ATTR_LEAF_ENTRY
,

35 
	mFLDT_ATTR_LEAF_HDR
,

36 
	mFLDT_ATTR_LEAF_MAP
,

37 
	mFLDT_ATTR_LEAF_NAME
,

38 
	mFLDT_ATTR_NODE_ENTRY
,

39 
	mFLDT_ATTR_NODE_HDR
,

40 
	mFLDT_ATTR_SF_ENTRY
,

41 
	mFLDT_ATTR_SF_HDR
,

42 
	mFLDT_ATTRBLOCK
,

43 
	mFLDT_ATTRSHORT
,

46 
	mFLDT_ATTR3
,

47 
	mFLDT_ATTR3_LEAF_HDR
,

48 
	mFLDT_ATTR3_NODE_HDR
,

50 
	mFLDT_BMAPBTA
,

51 
	mFLDT_BMAPBTA_CRC
,

52 
	mFLDT_BMAPBTAKEY
,

53 
	mFLDT_BMAPBTAPTR
,

54 
	mFLDT_BMAPBTAREC
,

55 
	mFLDT_BMAPBTD
,

56 
	mFLDT_BMAPBTD_CRC
,

57 
	mFLDT_BMAPBTDKEY
,

58 
	mFLDT_BMAPBTDPTR
,

59 
	mFLDT_BMAPBTDREC
,

60 
	mFLDT_BMROOTA
,

61 
	mFLDT_BMROOTAKEY
,

62 
	mFLDT_BMROOTAPTR
,

63 
	mFLDT_BMROOTD
,

64 
	mFLDT_BMROOTDKEY
,

65 
	mFLDT_BMROOTDPTR
,

66 
	mFLDT_BNOBT
,

67 
	mFLDT_BNOBT_CRC
,

68 
	mFLDT_BNOBTKEY
,

69 
	mFLDT_BNOBTPTR
,

70 
	mFLDT_BNOBTREC
,

71 
	mFLDT_CEXTFLG
,

72 
	mFLDT_CEXTLEN
,

73 
	mFLDT_CFILEOFFA
,

74 
	mFLDT_CFILEOFFD
,

75 
	mFLDT_CFSBLOCK
,

76 
	mFLDT_CHARNS
,

77 
	mFLDT_CHARS
,

78 
	mFLDT_REXTLEN
,

79 
	mFLDT_RFILEOFFD
,

80 
	mFLDT_REXTFLG
,

81 
	mFLDT_RATTRFORKFLG
,

82 
	mFLDT_RBMBTFLG
,

83 
	mFLDT_CAGBLOCK
,

84 
	mFLDT_CCOWFLG
,

85 
	mFLDT_CNTBT
,

86 
	mFLDT_CNTBT_CRC
,

87 
	mFLDT_CNTBTKEY
,

88 
	mFLDT_CNTBTPTR
,

89 
	mFLDT_CNTBTREC
,

90 
	mFLDT_RMAPBT_CRC
,

91 
	mFLDT_RMAPBTKEY
,

92 
	mFLDT_RMAPBTPTR
,

93 
	mFLDT_RMAPBTREC
,

94 
	mFLDT_REFCBT_CRC
,

95 
	mFLDT_REFCBTKEY
,

96 
	mFLDT_REFCBTPTR
,

97 
	mFLDT_REFCBTREC
,

100 
	mFLDT_CRC
,

102 
	mFLDT_DEV
,

103 
	mFLDT_DFILOFFA
,

104 
	mFLDT_DFILOFFD
,

105 
	mFLDT_DFSBNO
,

106 
	mFLDT_DINODE_A
,

107 
	mFLDT_DINODE_CORE
,

108 
	mFLDT_DINODE_FMT
,

109 
	mFLDT_DINODE_U
,

110 
	mFLDT_DINODE_V3
,

113 
	mFLDT_DIR2
,

114 
	mFLDT_DIR2_BLOCK_TAIL
,

115 
	mFLDT_DIR2_DATA_FREE
,

116 
	mFLDT_DIR2_DATA_HDR
,

117 
	mFLDT_DIR2_DATA_OFF
,

118 
	mFLDT_DIR2_DATA_OFFNZ
,

119 
	mFLDT_DIR2_DATA_UNION
,

120 
	mFLDT_DIR2_FREE_HDR
,

121 
	mFLDT_DIR2_INO4
,

122 
	mFLDT_DIR2_INO8
,

123 
	mFLDT_DIR2_INOU
,

124 
	mFLDT_DIR2_LEAF_ENTRY
,

125 
	mFLDT_DIR2_LEAF_HDR
,

126 
	mFLDT_DIR2_LEAF_TAIL
,

127 
	mFLDT_DIR2_SF_ENTRY
,

128 
	mFLDT_DIR2_SF_HDR
,

129 
	mFLDT_DIR2_SF_OFF
,

130 
	mFLDT_DIR2SF
,

133 
	mFLDT_DIR3
,

134 
	mFLDT_DIR3_BLKHDR
,

135 
	mFLDT_DIR3_DATA_HDR
,

136 
	mFLDT_DIR3_FREE_HDR
,

137 
	mFLDT_DIR3_LEAF_HDR
,

138 
	mFLDT_DIR3_DATA_UNION
,

139 
	mFLDT_DIR3_SF_ENTRY
,

140 
	mFLDT_DIR3SF
,

143 
	mFLDT_DA_BLKINFO
,

144 
	mFLDT_DA_NODE_ENTRY
,

145 
	mFLDT_DA_NODE_HDR
,

146 
	mFLDT_DA3_BLKINFO
,

147 
	mFLDT_DA3_NODE_HDR
,

149 
	mFLDT_DIRBLOCK
,

150 
	mFLDT_DISK_DQUOT
,

151 
	mFLDT_DQBLK
,

152 
	mFLDT_DQID
,

153 
	mFLDT_DRFSBNO
,

154 
	mFLDT_DRTBNO
,

155 
	mFLDT_EXTLEN
,

156 
	mFLDT_EXTNUM
,

157 
	mFLDT_FSIZE
,

158 
	mFLDT_INO
,

159 
	mFLDT_INOBT
,

160 
	mFLDT_INOBT_CRC
,

161 
	mFLDT_INOBT_SPCRC
,

162 
	mFLDT_INOBTKEY
,

163 
	mFLDT_INOBTPTR
,

164 
	mFLDT_INOBTREC
,

165 
	mFLDT_INOBTSPREC
,

166 
	mFLDT_INODE
,

167 
	mFLDT_INODE_CRC
,

168 
	mFLDT_INOFREE
,

169 
	mFLDT_INT16D
,

170 
	mFLDT_INT32D
,

171 
	mFLDT_INT64D
,

172 
	mFLDT_INT8D
,

173 
	mFLDT_NSEC
,

174 
	mFLDT_QCNT
,

175 
	mFLDT_QWARNCNT
,

176 
	mFLDT_SB
,

179 
	mFLDT_SYMLINK_CRC
,

181 
	mFLDT_TIME
,

182 
	mFLDT_TIMESTAMP
,

183 
	mFLDT_UINT1
,

184 
	mFLDT_UINT16D
,

185 
	mFLDT_UINT16O
,

186 
	mFLDT_UINT16X
,

187 
	mFLDT_UINT32D
,

188 
	mFLDT_UINT32O
,

189 
	mFLDT_UINT32X
,

190 
	mFLDT_UINT64D
,

191 
	mFLDT_UINT64O
,

192 
	mFLDT_UINT64X
,

193 
	mFLDT_UINT8D
,

194 
	mFLDT_UINT8O
,

195 
	mFLDT_UINT8X
,

196 
	mFLDT_UUID
,

197 
	mFLDT_ZZZ


198 } 
	tÊdt_t
;

200 (*
	toff£t_‚c_t
)(*
	tobj
, 
	t°¨toff
, 
	tidx
);

201 
	#OI
(
o
Ë((
off£t_‚c_t
)(
öçå_t
)(o))

	)

203 (*
	tcou¡_‚c_t
)(*
	tobj
, 
	t°¨toff
);

204 
	#CI
(
c
Ë((
cou¡_‚c_t
)(
öçå_t
)(c))

	)

205 
	#C1
 
	`CI
(1)

	)

207 
	sfõld


209 *
«me
;

210 
Êdt_t
 
·yp
;

211 
off£t_‚c_t
 
off£t
;

212 
cou¡_‚c_t
 
cou¡
;

213 
Êags
;

214 
ty≤m_t
 
√xt
;

215 } 
	tfõld_t
;

220 
	#FLD_ABASE1
 1

	)

221 
	#FLD_SKIPALL
 2

	)

222 
	#FLD_ARRAY
 4

	)

223 
	#FLD_OFFSET
 8

	)

224 
	#FLD_COUNT
 16

	)

226 (*
	tsize_‚c_t
)(*
	tobj
, 
	t°¨toff
, 
	tidx
);

227 
	#SI
(
s
Ë((
size_‚c_t
)(
öçå_t
)(s))

	)

229 
	s·©å


231 
Êdt_t
 
·yp
;

232 *
«me
;

233 
¥‚c_t
 
¥func
;

234 *
fmt°r
;

235 
size_‚c_t
 
size
;

236 
¨g
;

237 
ad‚c_t
 
adfunc
;

238 c⁄° 
fõld_t
 *
subÊd
;

239 } 
	t·©å_t
;

240 c⁄° 
·©å_t
 
·©åèb
[];

245 
	#FTARG_SKIPZERO
 1

	)

246 
	#FTARG_DONULL
 2

	)

247 
	#FTARG_SKIPNULL
 4

	)

248 
	#FTARG_SIGNED
 8

	)

249 
	#FTARG_SIZE
 16

	)

250 
	#FTARG_SKIPNMS
 32

	)

251 
	#FTARG_OKEMPTY
 64

	)

253 
	`bôoff£t
(c⁄° 
fõld_t
 *
f
, *
obj
, 
°¨toff
,

254 
idx
);

255 
	`fcou¡
(c⁄° 
fõld_t
 *
f
, *
obj
, 
°¨toff
);

256 c⁄° 
fõld_t
 *
	`födfõld
(*
«me
, c⁄° fõld_à*
fõlds
,

257 *
obj
, 
°¨toff
);

258 
	`fsize
(c⁄° 
fõld_t
 *
f
, *
obj
, 
°¨toff
,

259 
idx
);

	@db/flist.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"Êi°.h
"

25 
	~"debug.h
"

26 
	~"ouçut.h
"

27 
	~"mÆloc.h
"

29 
Êi°_ex∑nd_¨øys
(
Êi°_t
 *
Ê
);

30 
Êi°_ex∑nd_°ru˘s
(
Êi°_t
 *
Ê
, *
obj
);

31 
Êi°_t
 *
Êi°_ª∂iˇã
(Êi°_à*
Ê
);

32 
·ok_t
 *
Êi°_•lô
(*
s
);

33 
·ok_‰ì
(
·ok_t
 *
·
);

36 
	$Êi°_ex∑nd_¨øys
(

37 
Êi°_t
 *
Ê
)

39 c⁄° 
fõld_t
 *
f
;

40 #ifde‡
DEBUG


41 c⁄° 
·©å_t
 *
Á
;

43 
high
;

44 
idx
;

45 
low
;

46 
Êi°_t
 *
√w
;

47 
Êi°_t
 *
¥ev
;

48 
Êi°_t
 *
sib
;

50 
f
 = 
Ê
->
Êd
;

51 #ifde‡
DEBUG


52 
Á
 = &
·©åèb
[
f
->
·yp
];

54 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

55 
	`ASSERT
(
f
->
Êags
 & 
FLD_ARRAY
);

56 
low
 = 
Ê
->low;

57 
high
 = 
Ê
->high;

58 
Ê
->
high
 = fl->
low
;

59 
sib
 = 
Ê
->
siblög
;

60 
idx
 = 
low
 + 1, 
¥ev
 = 
Ê
; idx <
high
; idx++) {

61 
√w
 = 
	`Êi°_make
(
f
->
«me
);

62 
√w
->
Êd
 = 
f
;

63 
√w
->
low
 =Çew->
high
 = 
idx
;

64 
√w
->
Êags
 |
FL_OKLOW
 | 
FL_OKHIGH
;

65 
√w
->
chûd
 = 
	`Êi°_ª∂iˇã
(
Ê
->child);

66 
¥ev
->
siblög
 = 
√w
;

67 
¥ev
 = 
√w
;

69 
¥ev
->
siblög
 = 
sib
;

70 
	}
}

73 
	$Êi°_ex∑nd_°ru˘s
(

74 
Êi°_t
 *
Ê
,

75 *
obj
)

77 c⁄° 
fõld_t
 *
cf
;

78 c⁄° 
fõld_t
 *
f
;

79 c⁄° 
·©å_t
 *
Á
;

80 
Êi°_t
 *
√w
;

81 
Êi°_t
 *
¥ev
;

83 
f
 = 
Ê
->
Êd
;

84 
Á
 = &
·©åèb
[
f
->
·yp
];

85 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

86 
	`ASSERT
(
Á
->
subÊd
 !
NULL
);

87 
	`ASSERT
(
Ê
->
chûd
 =
NULL
);

88 
cf
 = 
Á
->
subÊd
, 
¥ev
 = 
NULL
; cf->
«me
 != NULL; cf++) {

89 i‡(
	`fcou¡
(
cf
, 
obj
, 
Ê
->
off£t
) == 0)

91 i‡(
cf
->
Êags
 & 
FLD_SKIPALL
)

93 
√w
 = 
	`Êi°_make
(
cf
->
«me
);

94 
√w
->
Êd
 = 
cf
;

95 i‡(
¥ev
)

96 
¥ev
->
siblög
 = 
√w
;

98 
Ê
->
chûd
 = 
√w
;

99 
¥ev
 = 
√w
;

101 
	}
}

104 
	$Êi°_‰ì
(

105 
Êi°_t
 *
Ê
)

107 i‡(
Ê
->
chûd
)

108 
	`Êi°_‰ì
(
Ê
->
chûd
);

109 i‡(
Ê
->
siblög
)

110 
	`Êi°_‰ì
(
Ê
->
siblög
);

111 i‡(
Ê
->
«me
)

112 
	`x‰ì
(
Ê
->
«me
);

113 
	`x‰ì
(
Ê
);

114 
	}
}

116 
Êi°_t
 *

117 
	$Êi°_make
(

118 *
«me
)

120 
Êi°_t
 *
Ê
;

122 
Ê
 = 
	`xmÆloc
((*fl));

123 
Ê
->
«me
 = 
	`x°rdup
(name);

124 
Ê
->
Êd
 = 
NULL
;

125 
Ê
->
chûd
 = 
NULL
;

126 
Ê
->
siblög
 = 
NULL
;

127 
Ê
->
low
 = 0;

128 
Ê
->
high
 = 0;

129 
Ê
->
Êags
 = 0;

130 
Ê
->
off£t
 = 0;

131  
Ê
;

132 
	}
}

135 
	$Êi°_∑r£
(

136 c⁄° 
fõld_t
 *
fõlds
,

137 
Êi°_t
 *
Ê
,

138 *
obj
,

139 
°¨toff
)

141 c⁄° 
fõld_t
 *
f
;

142 c⁄° 
·©å_t
 *
Á
;

143 
high
;

144 
low
;

146 
Ê
) {

147 
f
 = 
	`födfõld
(
Ê
->
«me
, 
fõlds
, 
obj
, 
°¨toff
);

148 i‡(
f
 =
NULL
) {

149 
	`db¥ötf
(
	`_
("fõld %†nŸ found\n"), 
Ê
->
«me
);

152 
Ê
->
Êd
 = 
f
;

153 
Á
 = &
·©åèb
[
f
->
·yp
];

154 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

155 i‡(
f
->
Êags
 & 
FLD_ARRAY
) {

156 
low
 = (
f
->
Êags
 & 
FLD_ABASE1
) != 0;

157 
high
 = 
	`fcou¡
(
f
, 
obj
, 
°¨toff
Ë+ 
low
 - 1;

158 i‡(
low
 > 
high
) {

159 
	`db¥ötf
(
	`_
("nÿñemít†ö %s\n"), 
Ê
->
«me
);

162 i‡(
Ê
->
Êags
 & 
FL_OKHIGH
) {

163 i‡(
Ê
->
low
 <Üow || fl->low > 
high
 ||

164 
Ê
->
high
 < 
low
 || fl->high > high) {

165 
	`db¥ötf
(
	`_
("indices %d-%d for field %s "

167 
Ê
->
low
, fl->
high
, fl->
«me
,

168 
low
, 
high
);

171 } i‡(
Ê
->
Êags
 & 
FL_OKLOW
) {

172 i‡(
Ê
->
low
 <Üow || fl->low > 
high
) {

173 
	`db¥ötf
(
	`_
("index %d for field %s out of "

175 
Ê
->
low
, fl->
«me
,Üow, 
high
);

178 
Ê
->
high
 = fl->
low
;

179 
Ê
->
Êags
 |
FL_OKHIGH
;

181 
Ê
->
low
 =Üow;

182 
Ê
->
high
 = high;

183 
Ê
->
Êags
 |
FL_OKLOW
 | 
FL_OKHIGH
;

186 i‡(
Ê
->
Êags
 & 
FL_OKLOW
) {

187 
	`db¥ötf
(
	`_
("field %s isÇotánárray\n"),

188 
Ê
->
«me
);

192 
Ê
->
off£t
 = 
°¨toff
 + 
	`bôoff£t
(
f
, 
obj
, sèπoff, fl->
low
);

193 i‡((
Ê
->
chûd
 !
NULL
 || 
Á
->
¥func
 == NULL) &&

194 (
f
->
Êags
 & 
FLD_ARRAY
Ë&& 
Ê
->
low
 !Ê->
high
)

195 
	`Êi°_ex∑nd_¨øys
(
Ê
);

196 i‡(
Á
->
¥func
 =
NULL
 && 
Ê
->
chûd
 == NULL)

197 
	`Êi°_ex∑nd_°ru˘s
(
Ê
, 
obj
);

198 i‡(
Ê
->
chûd
) {

199 i‡(
Á
->
subÊd
 =
NULL
) {

200 
	`db¥ötf
(
	`_
("field %s hasÇo subfields\n"),

201 
Ê
->
«me
);

204 i‡(!
	`Êi°_∑r£
(
Á
->
subÊd
, 
Ê
->
chûd
, 
obj
,

205 
Ê
->
off£t
))

208 
Ê
 = fl->
siblög
;

211 
	}
}

214 
	$Êi°_¥öt
(

215 
Êi°_t
 *
Ê
)

217 i‡(!(
debug_°©e
 & 
DEBUG_FLIST
))

219 
Ê
) {

220 
	`db¥ötf
(
	`_
("Ê@%p:\n"), 
Ê
);

221 
	`db¥ötf
(
	`_
("\tname=%s, fld=%p, child=%p, sibling=%p\n"),

222 
Ê
->
«me
, fl->
Êd
, fl->
chûd
, fl->
siblög
);

223 
	`db¥ötf
(
	`_
("\tlow=%d, high=%d, flags=%d (%s%s), offset=%d\n"),

224 
Ê
->
low
, fl->
high
, fl->
Êags
,

225 
Ê
->
Êags
 & 
FL_OKLOW
 ? 
	`_
("oklow ") : "",

226 
Ê
->
Êags
 & 
FL_OKHIGH
 ? 
	`_
("okhigh"Ë: "", fl->
off£t
);

227 
	`db¥ötf
(
	`_
("\tfld->name=%s, fld->ftyp=%d (%s)\n"),

228 
Ê
->
Êd
->
«me
, fl->Êd->
·yp
,

229 
·©åèb
[
Ê
->
Êd
->
·yp
].
«me
);

230 
	`db¥ötf
(
	`_
("\tÊd->Êags=%d (%s%s%s%s%s)\n"), 
Ê
->
Êd
->
Êags
,

231 
Ê
->
Êd
->
Êags
 & 
FLD_ABASE1
 ? "abase1 " : "",

232 
Ê
->
Êd
->
Êags
 & 
FLD_SKIPALL
 ? "skipall " : "",

233 
Ê
->
Êd
->
Êags
 & 
FLD_ARRAY
 ? "array " : "",

234 
Ê
->
Êd
->
Êags
 & 
FLD_OFFSET
 ? "offset " : "",

235 
Ê
->
Êd
->
Êags
 & 
FLD_COUNT
 ? "count " : "");

236 i‡(
Ê
->
chûd
)

237 
	`Êi°_¥öt
(
Ê
->
chûd
);

238 
Ê
 = fl->
siblög
;

240 
	}
}

242 
Êi°_t
 *

243 
	$Êi°_ª∂iˇã
(

244 
Êi°_t
 *
f
)

246 
Êi°_t
 *
√w
;

248 i‡(
f
 =
NULL
)

249  
NULL
;

250 
√w
 = 
	`Êi°_make
(
f
->
«me
);

251 
√w
->
Êd
 = 
f
->fld;

252 
√w
->
chûd
 = 
	`Êi°_ª∂iˇã
(
f
->child);

253 
√w
->
siblög
 = 
	`Êi°_ª∂iˇã
(
f
->sibling);

254 
√w
->
low
 = 
f
->low;

255 
√w
->
high
 = 
f
->high;

256 
√w
->
Êags
 = 
f
->flags;

257 
√w
->
off£t
 = 
f
->offset;

258  
√w
;

259 
	}
}

261 
Êi°_t
 *

262 
	$Êi°_sˇn
(

263 *
«me
)

265 
Êi°_t
 *
Ê
;

266 
Êi°_t
 *
lÊ
;

267 
Êi°_t
 *
nÊ
;

268 
num
;

269 
·ok_t
 *
p
;

270 
·ok_t
 *
v
;

271 *
x
;

273 
v
 = 
	`Êi°_•lô
(
«me
);

274 i‡(!
v
)

275  
NULL
;

276 
p
 = 
v
;

277 
Ê
 = 
lÊ
 = 
NULL
;

278 
p
->
tokty
 !
TT_END
) {

279 i‡(
p
->
tokty
 !
TT_NAME
)

280 
bad
;

281 
nÊ
 = 
	`Êi°_make
(
p
->
tok
);

282 i‡(
lÊ
)

283 
lÊ
->
chûd
 = 
nÊ
;

285 
Ê
 = 
nÊ
;

286 
lÊ
 = 
nÊ
;

287 
p
++;

288 i‡(
p
->
tokty
 =
TT_LB
) {

289 
p
++;

290 i‡(
p
->
tokty
 !
TT_NUM
)

291 
bad
;

292 
num
 = ()
	`°πoul
(
p
->
tok
, &
x
, 0);

293 i‡(*
x
 != '\0')

294 
bad
;

295 
nÊ
->
Êags
 |
FL_OKLOW
;

296 
nÊ
->
low
 = 
num
;

297 
p
++;

298 i‡(
p
->
tokty
 =
TT_DASH
) {

299 
p
++;

300 i‡(
p
->
tokty
 !
TT_NUM
)

301 
bad
;

302 
num
 = ()
	`°πoul
(
p
->
tok
, &
x
, 0);

303 i‡(*
x
 != '\0')

304 
bad
;

305 
nÊ
->
Êags
 |
FL_OKHIGH
;

306 
nÊ
->
high
 = 
num
;

307 
p
++;

309 i‡(
p
->
tokty
 !
TT_RB
)

310 
bad
;

311 
p
++;

313 i‡(
p
->
tokty
 =
TT_DOT
) {

314 
p
++;

315 i‡(
p
->
tokty
 =
TT_END
)

316 
bad
;

319 
	`·ok_‰ì
(
v
);

320  
Ê
;

321 
bad
:

322 
	`db¥ötf
(
	`_
("bad sy¡ax i¿fõldÇamê%s\n"), 
«me
);

323 
	`·ok_‰ì
(
v
);

324 i‡(
Ê
)

325 
	`Êi°_‰ì
(
Ê
);

326  
NULL
;

327 
	}
}

329 
·ok_t
 *

330 
	$Êi°_•lô
(

331 *
s
)

333 *
a
;

334 
i
;

335 *
idch¨s
;

336 *
öôidch¨
;

337 
l
;

338 
èûskù
 = 0;

339 *
numch¨s
;

340 *
xnumch¨s
;

341 
nv
;

342 
pun˘ch¨s
[] = "[-].";

343 
tokty_t
 
pun˘ty≥s
[] = { 
TT_LB
, 
TT_DASH
, 
TT_RB
, 
TT_DOT
 };

344 
tokty_t
 
t
;

345 
·ok_t
 *
v
;

347 i‡(
idch¨s
 =
NULL
) {

348 
idch¨s
 = 
	`xmÆloc
(26 + 10 + 1 + 1);

349 
öôidch¨
 = 
	`xmÆloc
(26 + 1);

350 
numch¨s
 = 
	`xmÆloc
(10 + 1);

351 
xnumch¨s
 = 
	`xmÆloc
(12 + 1);

352 
i
 = 'a'; i <= 'z'; i++) {

353 
idch¨s
[
i
 - 'a'] = i;

354 
öôidch¨
[
i
 - 'a'] = i;

357 
i
 = '0'; i <= '9'; i++) {

358 
idch¨s
[26 + (
i
 - '0')] = i;

359 
numch¨s
[
i
 - '0'] = i;

360 
xnumch¨s
[
i
 - '0'] = i;

362 
idch¨s
[26 + 10] = '_';

363 
idch¨s
[26 + 10 + 1] = '\0';

364 
öôidch¨
[26] = '\0';

365 
numch¨s
[10] = '\0';

366 
xnumch¨s
[10] = 'x';

367 
xnumch¨s
[11] = 'X';

368 
xnumch¨s
[12] = '\0';

370 
nv
 = 0;

371 
v
 = 
	`xmÆloc
((*v));

372 
v
->
tok
 = 
NULL
;

373 *
s
) {

375 i‡(*
s
 == '\"') {

376 
s
++;

377 i‡((
a
 = 
	`°ºchr
(
s
, '\"')Ë=
NULL
) {

378 
	`db¥ötf
(
	`_
("missög closög quŸê%s\n"), 
s
);

379 
	`·ok_‰ì
(
v
);

380  
NULL
;

382 
èûskù
 = 1;

383 
l
 = ()(
a
 - 
s
);

384 
t
 = 
TT_STRING
;

385 } i‡(
	`°rchr
(
öôidch¨
, *
s
)) {

386 
l
 = ()
	`°r•n
(
s
, 
idch¨s
);

387 
t
 = 
TT_NAME
;

388 } i‡(
	`°rchr
(
numch¨s
, *
s
)) {

389 
l
 = ()
	`°r•n
(
s
, 
xnumch¨s
);

390 
t
 = 
TT_NUM
;

391 } i‡((
a
 = 
	`°rchr
(
pun˘ch¨s
, *
s
))) {

392 
l
 = 1;

393 
t
 = 
pun˘ty≥s
[
a
 - 
pun˘ch¨s
];

395 
	`db¥ötf
(
	`_
("bad ch¨a˘î i¿fõld %s\n"), 
s
);

396 
	`·ok_‰ì
(
v
);

397  
NULL
;

399 
a
 = 
	`xmÆloc
(
l
 + 1);

400 
	`°∫˝y
(
a
, 
s
, 
l
);

401 
a
[
l
] = '\0';

402 
v
 = 
	`xªÆloc
(v, (
nv
 + 2) * (*v));

403 
v
[
nv
].
tok
 = 
a
;

404 
v
[
nv
].
tokty
 = 
t
;

405 
nv
++;

406 
s
 +
l
 + 
èûskù
;

407 
èûskù
 = 0;

409 
v
[
nv
].
tok
 = 
NULL
;

410 
v
[
nv
].
tokty
 = 
TT_END
;

411  
v
;

412 
	}
}

420 
Êi°_t
 *

421 
	$Êi°_föd_·yp
(

422 c⁄° 
fõld_t
 *
fõlds
,

423 
Êdt_t
 
ty≥
)

425 
Êi°_t
 *
Ê
;

426 c⁄° 
fõld_t
 *
f
;

427 c⁄° 
·©å_t
 *
Á
;

429 
f
 = 
fõlds
; f->
«me
; f++) {

430 
Ê
 = 
	`Êi°_make
(
f
->
«me
);

431 
Ê
->
Êd
 = 
f
;

432 i‡(
f
->
·yp
 =
ty≥
)

433  
Ê
;

434 
Á
 = &
·©åèb
[
f
->
·yp
];

435 i‡(
Á
->
subÊd
) {

436 
Êi°_t
 *
nÊ
;

438 
nÊ
 = 
	`Êi°_föd_·yp
(
Á
->
subÊd
, 
ty≥
);

439 i‡(
nÊ
) {

440 
Ê
->
chûd
 = 
nÊ
;

441  
Ê
;

444 
	`Êi°_‰ì
(
Ê
);

446  
NULL
;

447 
	}
}

450 
	$·ok_‰ì
(

451 
·ok_t
 *
·
)

453 
·ok_t
 *
p
;

455 
p
 = 
·
;Ö->
tok
;Ö++)

456 
	`x‰ì
(
p
->
tok
);

457 
	`x‰ì
(
·
);

458 
	}
}

	@db/flist.h

6 
	gfõld
;

8 
	sÊi°
 {

9 *
	m«me
;

10 c⁄° 
fõld
 *
	mÊd
;

11 
Êi°
 *
	mchûd
;

12 
Êi°
 *
	msiblög
;

13 
	mlow
;

14 
	mhigh
;

15 
	mÊags
;

16 
	moff£t
;

17 } 
	tÊi°_t
;

22 
	#FL_OKLOW
 1

	)

23 
	#FL_OKHIGH
 2

	)

25 
	etokty
 {

26 
	mTT_NAME
, 
	mTT_NUM
, 
	mTT_STRING
, 
	mTT_LB
, 
	mTT_RB
, 
	mTT_DASH
, 
	mTT_DOT
, 
	mTT_END


27 } 
	ttokty_t
;

29 
	s·ok
 {

30 *
	mtok
;

31 
tokty_t
 
	mtokty
;

32 } 
	t·ok_t
;

34 
Êi°_‰ì
(
Êi°_t
 *
Ê
);

35 
Êi°_t
 *
Êi°_make
(*
«me
);

36 
Êi°_∑r£
(c⁄° 
fõld
 *
fõlds
, 
Êi°_t
 *
Ê
, *
obj
,

37 
°¨toff
);

38 
Êi°_¥öt
(
Êi°_t
 *
Ê
);

39 
Êi°_t
 *
Êi°_sˇn
(*
«me
);

40 
Êi°_t
 *
Êi°_föd_·yp
(c⁄° 
fõld_t
 *
fõlds
, 
Êdt_t
 
ty≥
);

	@db/fprint.c

19 
	~"libxfs.h
"

20 
	~<˘y≥.h
>

21 
	~<time.h
>

22 
	~"ty≥.h
"

23 
	~"Áddr.h
"

24 
	~"Âröt.h
"

25 
	~"fõld.h
"

26 
	~"öode.h
"

27 
	~"btblock.h
"

28 
	~"bô.h
"

29 
	~"¥öt.h
"

30 
	~"ouçut.h
"

31 
	~"sig.h
"

32 
	~"mÆloc.h
"

33 
	~"io.h
"

36 
	$Â_ch¨ns
(

37 *
obj
,

38 
bô
,

39 
cou¡
,

40 *
fmt°r
,

41 
size
,

42 
¨g
,

43 
ba£
,

44 
¨øy
)

46 
i
;

47 *
p
;

49 
	`ASSERT
(
	`bôoffs
(
bô
) == 0);

50 
	`ASSERT
(
size
 =
	`bôsz
());

51 
	`db¥ötf
("\"");

52 
i
 = 0, 
p
 = (*)
obj
 + 
	`byãize
(
bô
);

53 
i
 < 
cou¡
 && !
	`£íöt
();

54 
i
++, 
p
++) {

55 i‡(*
p
 == '\\' || *p == '\'' || *p == '"' || *p == '\?')

56 
	`db¥ötf
("\\%c", *
p
);

57 i‡(
	`isgøph
(()*
p
) || *p == ' ')

58 
	`db¥ötf
("%c", *
p
);

59 i‡(*
p
 == '\a' || *p == '\b' || *p == '\f' || *p == '\n' ||

60 *
p
 == '\r' || *p == '\t' || *p == '\v')

61 
	`db¥ötf
("\\%c", *
p
 + ('a' - '\a'));

63 
	`db¥ötf
("\\%03o", *
p
 & 0xff);

65 
	`db¥ötf
("\"");

67 
	}
}

70 
	$Â_num
(

71 *
obj
,

72 
bô
,

73 
cou¡
,

74 *
fmt°r
,

75 
size
,

76 
¨g
,

77 
ba£
,

78 
¨øy
)

80 
bôpos
;

81 
i
;

82 
i¢uŒ
;

83 
__öt64_t
 
vÆ
;

85 
i
 = 0, 
bôpos
 = 
bô
;

86 
i
 < 
cou¡
 && !
	`£íöt
();

87 
i
++, 
bôpos
 +
size
) {

88 
vÆ
 = 
	`gëbôvÆ
(
obj
, 
bôpos
, 
size
,

89 (
¨g
 & 
FTARG_SIGNED
Ë? 
BVSIGNED
 : 
BVUNSIGNED
);

90 i‡((
¨g
 & 
FTARG_SKIPZERO
Ë&& 
vÆ
 == 0)

92 
i¢uŒ
 = (
¨g
 & 
FTARG_SIGNED
Ë|| 
size
 == 64 ?

93 
vÆ
 =-1LL : vÆ =((1LL << 
size
) - 1LL);

94 i‡((
¨g
 & 
FTARG_SKIPNULL
Ë&& 
i¢uŒ
)

96 i‡(
¨øy
 && 
cou¡
 > 1)

97 
	`db¥ötf
("%d:", 
i
 + 
ba£
);

98 i‡((
¨g
 & 
FTARG_DONULL
Ë&& 
i¢uŒ
)

99 
	`db¥ötf
(
	`_
("null"));

100 i‡(
size
 > 32)

101 
	`db¥ötf
(
fmt°r
, 
vÆ
);

103 
	`db¥ötf
(
fmt°r
, (
__öt32_t
)
vÆ
);

104 i‡(
i
 < 
cou¡
 - 1)

105 
	`db¥ötf
(" ");

108 
	}
}

112 
	$Â_ßºay
(

113 *
obj
,

114 
bô
,

115 
cou¡
,

116 *
fmt°r
,

117 
size
,

118 
¨g
,

119 
ba£
,

120 
¨øy
)

122 
	`¥öt_ßºay
(
obj
, 
bô
, 
cou¡
, 
size
, 
ba£
, 
¨øy
,

123 (c⁄° 
fõld_t
 *)
fmt°r
, (
¨g
 & 
FTARG_SKIPNMS
) != 0);

125 
	}
}

129 
	$Â_time
(

130 *
obj
,

131 
bô
,

132 
cou¡
,

133 *
fmt°r
,

134 
size
,

135 
¨g
,

136 
ba£
,

137 
¨øy
)

139 
bôpos
;

140 *
c
;

141 
i
;

142 
time_t
 
t
;

144 
	`ASSERT
(
	`bôoffs
(
bô
) == 0);

145 
i
 = 0, 
bôpos
 = 
bô
;

146 
i
 < 
cou¡
 && !
	`£íöt
();

147 
i
++, 
bôpos
 +
size
) {

148 i‡(
¨øy
)

149 
	`db¥ötf
("%d:", 
i
 + 
ba£
);

150 
t
=(
time_t
)
	`gëbôvÆ
((*)
obj
 + 
	`byãize
(
bôpos
), 0, (
öt32_t
)*8, 0);

151 
c
 = 
	`˘ime
(&
t
);

152 
	`db¥ötf
("%24.24s", 
c
);

153 i‡(
i
 < 
cou¡
 - 1)

154 
	`db¥ötf
(" ");

157 
	}
}

161 
	$Â_uuid
(

162 *
obj
,

163 
bô
,

164 
cou¡
,

165 *
fmt°r
,

166 
size
,

167 
¨g
,

168 
ba£
,

169 
¨øy
)

171 
bp
[40];

172 
i
;

173 
uuid_t
 *
p
;

175 
	`ASSERT
(
	`bôoffs
(
bô
) == 0);

176 
p
 = (
uuid_t
 *)((*)
obj
 + 
	`byãize
(
bô
)), 
i
 = 0;

177 
i
 < 
cou¡
 && !
	`£íöt
();

178 
i
++, 
p
++) {

179 i‡(
¨øy
)

180 
	`db¥ötf
("%d:", 
i
 + 
ba£
);

181 
	`∂©f‹m_uuid_u≈¨£
(
p
, 
bp
);

182 
	`db¥ötf
("%s", 
bp
);

183 i‡(
i
 < 
cou¡
 - 1)

184 
	`db¥ötf
(" ");

187 
	}
}

194 
	$Â_¸c
(

195 *
obj
,

196 
bô
,

197 
cou¡
,

198 *
fmt°r
,

199 
size
,

200 
¨g
,

201 
ba£
,

202 
¨øy
)

204 
bôpos
;

205 
i
;

206 
__öt64_t
 
vÆ
;

207 *
ok
;

209 
	`iocur_¸c_vÆid
()) {

211 
ok
 = "unchecked";

214 
ok
 = "bad";

217 
ok
 = "correct";

220 
ok
 = "unknown state";

224 
i
 = 0, 
bôpos
 = 
bô
;

225 
i
 < 
cou¡
 && !
	`£íöt
();

226 
i
++, 
bôpos
 +
size
) {

227 i‡(
¨øy
)

228 
	`db¥ötf
("%d:", 
i
 + 
ba£
);

229 
vÆ
 = 
	`gëbôvÆ
(
obj
, 
bôpos
, 
size
, 
BVUNSIGNED
);

230 i‡(
size
 > 32)

231 
	`db¥ötf
(
fmt°r
, 
vÆ
, 
ok
);

233 
	`db¥ötf
(
fmt°r
, (
__öt32_t
)
vÆ
, 
ok
);

234 i‡(
i
 < 
cou¡
 - 1)

235 
	`db¥ötf
(" ");

238 
	}
}

	@db/fprint.h

19 (*
	t¥‚c_t
)(*
	tobj
, 
	tbô
, 
	tcou¡
, *
	tfmt°r
, 
	tsize
,

20 
	t¨g
, 
	tba£
, 
	t¨øy
);

22 
	`Â_ch¨ns
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

23 
¨g
, 
ba£
, 
¨øy
);

24 
	`Â_num
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

25 
¨g
, 
ba£
, 
¨øy
);

26 
	`Â_ßºay
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

27 
¨g
, 
ba£
, 
¨øy
);

28 
	`Â_time
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

29 
¨g
, 
ba£
, 
¨øy
);

30 
	`Â_uuid
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

31 
¨g
, 
ba£
, 
¨øy
);

32 
	`Â_¸c
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
, 
size
,

33 
¨g
, 
ba£
, 
¨øy
);

	@db/frag.c

19 
	~"libxfs.h
"

20 
	~<sys/time.h
>

21 
	~"bm≠.h
"

22 
	~"comm™d.h
"

23 
	~"‰ag.h
"

24 
	~"io.h
"

25 
	~"ouçut.h
"

26 
	~"ty≥.h
"

27 
	~"öô.h
"

28 
	~"mÆloc.h
"

30 
	sexã¡
 {

31 
xfs_fûeoff_t
 
	m°¨toff
;

32 
xfs_fûblks_t
 
	mblockcou¡
;

33 } 
	texã¡_t
;

35 
	sextm≠
 {

36 
	m«íts
;

37 
	m√¡s
;

38 
exã¡_t
 
	míts
[1];

39 } 
	textm≠_t
;

40 
	#EXTMAP_SIZE
(
n
) \

41 (
	`off£tof
(
extm≠_t
, 
íts
Ë+ ((
exã¡_t
Ë* (
n
)))

	)

43 
	gaÊag
;

44 
	gdÊag
;

45 
__uöt64_t
 
	gextcou¡_a˘uÆ
;

46 
__uöt64_t
 
	gextcou¡_idól
;

47 
	gfÊag
;

48 
	glÊag
;

49 
	gqÊag
;

50 
	gRÊag
;

51 
	grÊag
;

52 
	gvÊag
;

54 (*
	tsˇn_lbåì_f_t
)(
	txfs_båì_block
 *
	tblock
,

55 
	tÀvñ
,

56 
	textm≠_t
 **
	textm≠p
,

57 
	tty≤m_t
 
	tbty≥
);

59 (*
	tsˇn_sbåì_f_t
)(
	txfs_båì_block
 *
	tblock
,

60 
	tÀvñ
,

61 
	txfs_agf_t
 *
	tagf
);

63 
extm≠_t
 *
	`extm≠_Æloc
(
xfs_exäum_t
 
√x
);

64 
xfs_exäum_t
 
	`extm≠_idól
(
extm≠_t
 *
extm≠
);

65 
	`extm≠_£t_ext
(
extm≠_t
 **
extm≠p
, 
xfs_fûeoff_t
 
o
,

66 
xfs_exéí_t
 
c
);

67 
	`‰ag_f
(
¨gc
, **
¨gv
);

68 
	`öô
(
¨gc
, **
¨gv
);

69 
	`¥o˚ss_bmbt_ª˛i°
(
xfs_bmbt_ªc_t
 *
Ω
, 
numªcs
,

70 
extm≠_t
 **
extm≠p
);

71 
	`¥o˚ss_btöode
(
xfs_döode_t
 *
dù
, 
extm≠_t
 **
extm≠p
,

72 
whichf‹k
);

73 
	`¥o˚ss_exöode
(
xfs_döode_t
 *
dù
, 
extm≠_t
 **
extm≠p
,

74 
whichf‹k
);

75 
	`¥o˚ss_f‹k
(
xfs_döode_t
 *
dù
, 
whichf‹k
);

76 
	`¥o˚ss_öode
(
xfs_agf_t
 *
agf
, 
xfs_agöo_t
 
agöo
,

77 
xfs_döode_t
 *
dù
);

78 
	`sˇn_ag
(
xfs_agnumbî_t
 
agno
);

79 
	`sˇn_lbåì
(
xfs_fsblock_t
 
roŸ
, 
∆evñs
,

80 
sˇn_lbåì_f_t
 
func
, 
extm≠_t
 **
extm≠p
,

81 
ty≤m_t
 
bty≥
);

82 
	`sˇn_sbåì
(
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
roŸ
,

83 
∆evñs
, 
sˇn_sbåì_f_t
 
func
,

84 
ty≤m_t
 
bty≥
);

85 
	`sˇnfunc_bm≠
(
xfs_båì_block
 *
block
, 
Àvñ
,

86 
extm≠_t
 **
extm≠p
, 
ty≤m_t
 
bty≥
);

87 
	`sˇnfunc_öo
(
xfs_båì_block
 *
block
, 
Àvñ
,

88 
xfs_agf_t
 *
agf
);

90 c⁄° 
cmdöfo_t
 
‰ag_cmd
 =

91 { "‰ag", 
NULL
, 
‰ag_f
, 0, -1, 0,

93 "gë fûê‰agmíèti⁄ d©a", 
NULL
 
	}
};

95 
extm≠_t
 *

96 
	$extm≠_Æloc
(

97 
xfs_exäum_t
 
√x
)

99 
extm≠_t
 *
extm≠
;

101 i‡(
√x
 < 1)

102 
√x
 = 1;

103 
extm≠
 = 
	`xmÆloc
(
	`EXTMAP_SIZE
(
√x
));

104 
extm≠
->
«íts
 = 
√x
;

105 
extm≠
->
√¡s
 = 0;

106  
extm≠
;

107 
	}
}

109 
xfs_exäum_t


110 
	$extm≠_idól
(

111 
extm≠_t
 *
extm≠
)

113 
exã¡_t
 *
ï
;

114 
xfs_exäum_t
 
rvÆ
;

116 
ï
 = &
extm≠
->
íts
[0], 
rvÆ
 = 0;

117 
ï
 < &
extm≠
->
íts
[extm≠->
√¡s
];

118 
ï
++) {

119 i‡(
ï
 =&
extm≠
->
íts
[0] ||

120 
ï
->
°¨toff
 !ï[-1].°¨tof‡+Ép[-1].
blockcou¡
)

121 
rvÆ
++;

123  
rvÆ
;

124 
	}
}

127 
	$extm≠_£t_ext
(

128 
extm≠_t
 **
extm≠p
,

129 
xfs_fûeoff_t
 
o
,

130 
xfs_exéí_t
 
c
)

132 
extm≠_t
 *
extm≠
;

133 
exã¡_t
 *
ít
;

135 
extm≠
 = *
extm≠p
;

136 i‡(
extm≠
->
√¡s
 =extm≠->
«íts
) {

137 
extm≠
->
«íts
++;

138 
extm≠
 = 
	`xªÆloc
”xtm≠, 
	`EXTMAP_SIZE
”xtm≠->
«íts
));

139 *
extm≠p
 = 
extm≠
;

141 
ít
 = &
extm≠
->
íts
[extm≠->
√¡s
];

142 
ít
->
°¨toff
 = 
o
;

143 
ít
->
blockcou¡
 = 
c
;

144 
extm≠
->
√¡s
++;

145 
	}
}

148 
	$‰ag_öô
()

150 
	`add_comm™d
(&
‰ag_cmd
);

151 
	}
}

157 
	$‰ag_f
(

158 
¨gc
,

159 **
¨gv
)

161 
xfs_agnumbî_t
 
agno
;

162 
™swî
;

164 i‡(!
	`öô
(
¨gc
, 
¨gv
))

166 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++)

167 
	`sˇn_ag
(
agno
);

168 i‡(
extcou¡_a˘uÆ
)

169 
™swî
 = ()(
extcou¡_a˘uÆ
 - 
extcou¡_idól
) * 100.0 /

170 ()
extcou¡_a˘uÆ
;

172 
™swî
 = 0.0;

173 
	`db¥ötf
(
	`_
("actual %llu, ideal %llu, fragmentation factor %.2f%%\n"),

174 
extcou¡_a˘uÆ
, 
extcou¡_idól
, 
™swî
);

175 
	`db¥ötf
(
	`_
("Note,ÅhisÇumber isÜargely meaningless.\n"));

176 
™swî
 = ()
extcou¡_a˘uÆ
 / ()
extcou¡_idól
;

177 
	`db¥ötf
(
	`_
("Files onÅhis filesystemáverage %.2fÉxtentsÖer file\n"),

178 
™swî
);

180 
	}
}

183 
	$öô
(

184 
¨gc
,

185 **
¨gv
)

187 
c
;

189 
aÊag
 = 
dÊag
 = 
fÊag
 = 
lÊag
 = 
qÊag
 = 
RÊag
 = 
rÊag
 = 
vÊag
 = 0;

190 
›töd
 = 0;

191 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "adÊqRrv")Ë!
EOF
) {

192 
c
) {

194 
aÊag
 = 1;

197 
dÊag
 = 1;

200 
fÊag
 = 1;

203 
lÊag
 = 1;

206 
qÊag
 = 1;

209 
RÊag
 = 1;

212 
rÊag
 = 1;

215 
vÊag
 = 1;

218 
	`db¥ötf
(
	`_
("bad option for frag command\n"));

222 i‡(!
aÊag
 && !
dÊag
 && !
fÊag
 && !
lÊag
 && !
qÊag
 && !
RÊag
 && !
rÊag
)

223 
aÊag
 = 
dÊag
 = 
fÊag
 = 
lÊag
 = 
qÊag
 = 
RÊag
 = 
rÊag
 = 1;

224 
extcou¡_a˘uÆ
 = 
extcou¡_idól
 = 0;

226 
	}
}

229 
	$¥o˚ss_bmbt_ª˛i°
(

230 
xfs_bmbt_ªc_t
 *
Ω
,

231 
numªcs
,

232 
extm≠_t
 **
extm≠p
)

234 
xfs_fûblks_t
 
c
;

235 
f
;

236 
i
;

237 
xfs_fûeoff_t
 
o
;

238 
xfs_fsblock_t
 
s
;

240 
i
 = 0; i < 
numªcs
; i++, 
Ω
++) {

241 
	`c⁄vît_exã¡
(
Ω
, &
o
, &
s
, &
c
, &
f
);

242 
	`extm≠_£t_ext
(
extm≠p
, (
xfs_fûeoff_t
)
o
, (
xfs_exéí_t
)
c
);

244 
	}
}

247 
	$¥o˚ss_btöode
(

248 
xfs_döode_t
 *
dù
,

249 
extm≠_t
 **
extm≠p
,

250 
whichf‹k
)

252 
xfs_bmdr_block_t
 *
dib
;

253 
i
;

254 
xfs_bmbt_±r_t
 *
µ
;

256 
dib
 = (
xfs_bmdr_block_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

257 i‡(
	`be16_to_˝u
(
dib
->
bb_Àvñ
) == 0) {

258 
xfs_bmbt_ªc_t
 *
Ω
 = 
	`XFS_BMDR_REC_ADDR
(
dib
, 1);

259 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, 
	`be16_to_˝u
(
dib
->
bb_numªcs
), 
extm≠p
);

262 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
dib
, 1,

263 
	`libxfs_bmdr_maxªcs
(
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
), 0));

264 
i
 = 0; i < 
	`be16_to_˝u
(
dib
->
bb_numªcs
); i++)

265 
	`sˇn_lbåì
(
	`gë_u«lig√d_be64
(&
µ
[
i
]),

266 
	`be16_to_˝u
(
dib
->
bb_Àvñ
), 
sˇnfunc_bm≠
, 
extm≠p
,

267 
whichf‹k
 =
XFS_DATA_FORK
 ? 
TYP_BMAPBTD
 : 
TYP_BMAPBTA
);

268 
	}
}

271 
	$¥o˚ss_exöode
(

272 
xfs_döode_t
 *
dù
,

273 
extm≠_t
 **
extm≠p
,

274 
whichf‹k
)

276 
xfs_bmbt_ªc_t
 *
Ω
;

278 
Ω
 = (
xfs_bmbt_ªc_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

279 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
), 
extm≠p
);

280 
	}
}

283 
	$¥o˚ss_f‹k
(

284 
xfs_döode_t
 *
dù
,

285 
whichf‹k
)

287 
extm≠_t
 *
extm≠
;

288 
√x
;

290 
√x
 = 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
);

291 i‡(!
√x
)

293 
extm≠
 = 
	`extm≠_Æloc
(
√x
);

294 
	`XFS_DFORK_FORMAT
(
dù
, 
whichf‹k
)) {

295 
XFS_DINODE_FMT_EXTENTS
:

296 
	`¥o˚ss_exöode
(
dù
, &
extm≠
, 
whichf‹k
);

298 
XFS_DINODE_FMT_BTREE
:

299 
	`¥o˚ss_btöode
(
dù
, &
extm≠
, 
whichf‹k
);

302 
extcou¡_a˘uÆ
 +
extm≠
->
√¡s
;

303 
extcou¡_idól
 +
	`extm≠_idól
(
extm≠
);

304 
	`x‰ì
(
extm≠
);

305 
	}
}

308 
	$¥o˚ss_öode
(

309 
xfs_agf_t
 *
agf
,

310 
xfs_agöo_t
 
agöo
,

311 
xfs_döode_t
 *
dù
)

313 
__uöt64_t
 
a˘uÆ
;

314 
__uöt64_t
 
idól
;

315 
xfs_öo_t
 
öo
;

316 
skùa
;

317 
skùd
;

319 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
agöo
);

320 
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
) {

321 
S_IFDIR
:

322 
skùd
 = !
dÊag
;

324 
S_IFREG
:

325 i‡(!
rÊag
 && (
	`be16_to_˝u
(
dù
->
di_Êags
Ë& 
XFS_DIFLAG_REALTIME
))

326 
skùd
 = 1;

327 i‡(!
RÊag
 &&

328 (
öo
 =
mp
->
m_sb
.
sb_rbmöo
 ||

329 
öo
 =
mp
->
m_sb
.
sb_rsumöo
))

330 
skùd
 = 1;

331 i‡(!
qÊag
 &&

332 (
öo
 =
mp
->
m_sb
.
sb_uquŸöo
 ||

333 
öo
 =
mp
->
m_sb
.
sb_gquŸöo
 ||

334 
öo
 =
mp
->
m_sb
.
sb_pquŸöo
))

335 
skùd
 = 1;

337 
skùd
 = !
fÊag
;

339 
S_IFLNK
:

340 
skùd
 = !
lÊag
;

343 
skùd
 = 1;

346 
a˘uÆ
 = 
extcou¡_a˘uÆ
;

347 
idól
 = 
extcou¡_idól
;

348 i‡(!
skùd
)

349 
	`¥o˚ss_f‹k
(
dù
, 
XFS_DATA_FORK
);

350 
skùa
 = !
aÊag
 || !
	`XFS_DFORK_Q
(
dù
);

351 i‡(!
skùa
)

352 
	`¥o˚ss_f‹k
(
dù
, 
XFS_ATTR_FORK
);

353 i‡(
vÊag
 && (!
skùd
 || !
skùa
))

354 
	`db¥ötf
(
	`_
("inode %lldáctual %lld ideal %lld\n"),

355 
öo
, 
extcou¡_a˘uÆ
 - 
a˘uÆ
, 
extcou¡_idól
 - 
idól
);

356 
	}
}

359 
	$sˇn_ag
(

360 
xfs_agnumbî_t
 
agno
)

362 
xfs_agf_t
 *
agf
;

363 
xfs_agi_t
 *
agi
;

365 
	`push_cur
();

366 
	`£t_cur
(&
ty±ab
[
TYP_AGF
],

367 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

368 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

369 i‡((
agf
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

370 
	`db¥ötf
(
	`_
("ˇn'àªadág‡block f‹ág %u\n"), 
agno
);

371 
	`p›_cur
();

374 
	`push_cur
();

375 
	`£t_cur
(&
ty±ab
[
TYP_AGI
],

376 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),

377 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

378 i‡((
agi
 = 
iocur_t›
->
d©a
Ë=
NULL
) {

379 
	`db¥ötf
(
	`_
("ˇn'àªadágòblock f‹ág %u\n"), 
agno
);

380 
	`p›_cur
();

381 
	`p›_cur
();

384 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
agi
->
agi_roŸ
),

385 
	`be32_to_˝u
(
agi
->
agi_Àvñ
), 
sˇnfunc_öo
, 
TYP_INOBT
);

386 
	`p›_cur
();

387 
	`p›_cur
();

388 
	}
}

391 
	$sˇn_lbåì
(

392 
xfs_fsblock_t
 
roŸ
,

393 
∆evñs
,

394 
sˇn_lbåì_f_t
 
func
,

395 
extm≠_t
 **
extm≠p
,

396 
ty≤m_t
 
bty≥
)

398 
	`push_cur
();

399 
	`£t_cur
(&
ty±ab
[
bty≥
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
roŸ
), 
blkbb
, 
DB_RING_IGN
,

400 
NULL
);

401 i‡(
iocur_t›
->
d©a
 =
NULL
) {

402 
	`db¥ötf
(
	`_
("can'tÑead btree block %u/%u\n"),

403 
	`XFS_FSB_TO_AGNO
(
mp
, 
roŸ
),

404 
	`XFS_FSB_TO_AGBNO
(
mp
, 
roŸ
));

407 (*
func
)(
iocur_t›
->
d©a
, 
∆evñs
 - 1, 
extm≠p
, 
bty≥
);

408 
	`p›_cur
();

409 
	}
}

412 
	$sˇn_sbåì
(

413 
xfs_agf_t
 *
agf
,

414 
xfs_agblock_t
 
roŸ
,

415 
∆evñs
,

416 
sˇn_sbåì_f_t
 
func
,

417 
ty≤m_t
 
bty≥
)

419 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

421 
	`push_cur
();

422 
	`£t_cur
(&
ty±ab
[
bty≥
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
£qno
, 
roŸ
),

423 
blkbb
, 
DB_RING_IGN
, 
NULL
);

424 i‡(
iocur_t›
->
d©a
 =
NULL
) {

425 
	`db¥ötf
(
	`_
("ˇn'àªad båì block %u/%u\n"), 
£qno
, 
roŸ
);

428 (*
func
)(
iocur_t›
->
d©a
, 
∆evñs
 - 1, 
agf
);

429 
	`p›_cur
();

430 
	}
}

433 
	$sˇnfunc_bm≠
(

434 
xfs_båì_block
 *
block
,

435 
Àvñ
,

436 
extm≠_t
 **
extm≠p
,

437 
ty≤m_t
 
bty≥
)

439 
i
;

440 
xfs_bmbt_±r_t
 *
µ
;

441 
xfs_bmbt_ªc_t
 *
Ω
;

442 
ƒecs
;

444 
ƒecs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

446 i‡(
Àvñ
 == 0) {

447 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[0]) {

448 
	`db¥ötf
(
	`_
("invalidÇumrecs (%u) in %s block\n"),

449 
ƒecs
, 
ty±ab
[
bty≥
].
«me
);

452 
Ω
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1);

453 
	`¥o˚ss_bmbt_ª˛i°
(
Ω
, 
ƒecs
, 
extm≠p
);

457 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[1]) {

458 
	`db¥ötf
(
	`_
("invalidÇumrecs (%u) in %s block\n"),

459 
ƒecs
, 
ty±ab
[
bty≥
].
«me
);

462 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[0]);

463 
i
 = 0; i < 
ƒecs
; i++)

464 
	`sˇn_lbåì
(
	`be64_to_˝u
(
µ
[
i
]), 
Àvñ
, 
sˇnfunc_bm≠
, 
extm≠p
,

465 
bty≥
);

466 
	}
}

469 
	$sˇnfunc_öo
(

470 
xfs_båì_block
 *
block
,

471 
Àvñ
,

472 
xfs_agf_t
 *
agf
)

474 
xfs_agöo_t
 
agöo
;

475 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

476 
i
;

477 
j
;

478 
off
;

479 
xfs_öobt_±r_t
 *
µ
;

480 
xfs_öobt_ªc_t
 *
Ω
;

482 i‡(
Àvñ
 == 0) {

483 
Ω
 = 
	`XFS_INOBT_REC_ADDR
(
mp
, 
block
, 1);

484 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++) {

485 
agöo
 = 
	`be32_to_˝u
(
Ω
[
i
].
ú_°¨töo
);

486 
off
 = 
	`XFS_INO_TO_OFFSET
(
mp
, 
agöo
);

487 
	`push_cur
();

488 
	`£t_cur
(&
ty±ab
[
TYP_INODE
],

489 
	`XFS_AGB_TO_DADDR
(
mp
, 
£qno
,

490 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
)),

491 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_üŒoc_blks
),

492 
DB_RING_IGN
, 
NULL
);

493 i‡(
iocur_t›
->
d©a
 =
NULL
) {

494 
	`db¥ötf
(
	`_
("can'tÑead inode block %u/%u\n"),

495 
£qno
, 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
));

498 
j
 = 0; j < 
XFS_INODES_PER_CHUNK
; j++) {

499 i‡(
	`XFS_INOBT_IS_FREE_DISK
(&
Ω
[
i
], 
j
))

501 
	`¥o˚ss_öode
(
agf
, 
agöo
 + 
j
, (
xfs_döode_t
 *)

502 ((*)
iocur_t›
->
d©a
 +

503 ((
off
 + 
j
Ë<< 
mp
->
m_sb
.
sb_öodñog
)));

505 
	`p›_cur
();

509 
µ
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_öobt_mxr
[1]);

510 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

511 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 
sˇnfunc_öo
,

512 
TYP_INOBT
);

513 
	}
}

	@db/frag.h

19 
‰ag_öô
();

	@db/freesp.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"‰ì•.h
"

22 
	~"io.h
"

23 
	~"ty≥.h
"

24 
	~"ouçut.h
"

25 
	~"öô.h
"

26 
	~"mÆloc.h
"

28 
	shi°ít


30 
	mlow
;

31 
	mhigh
;

32 
	mcou¡
;

33 
	mblocks
;

34 } 
	thi°ít_t
;

36 
addhi°ít
(
h
);

37 
addtohi°
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

38 
xfs_exéí_t
 
Àn
);

39 
‰ì•_f
(
¨gc
, **
¨gv
);

40 
hi°öô
(
maxÀn
);

41 
öô
(
¨gc
, **
¨gv
);

42 
¥öthi°
();

43 
sˇn_ag
(
xfs_agnumbî_t
 
agno
);

44 
sˇnfunc_bno
(
xfs_båì_block
 *
block
, 
ty≤m_t
 
typ
, 
Àvñ
,

45 
xfs_agf_t
 *
agf
);

46 
sˇnfunc_˙t
(
xfs_båì_block
 *
block
, 
ty≤m_t
 
typ
, 
Àvñ
,

47 
xfs_agf_t
 *
agf
);

48 
sˇn_‰ìli°
(
xfs_agf_t
 *
agf
);

49 
sˇn_sbåì
(
xfs_agf_t
 *
agf
, 
xfs_agblock_t
 
roŸ
, 
ty≤m_t
 
typ
,

50 
∆evñs
,

51 (*
func
)(
xfs_båì_block
 *
block
, 
ty≤m_t
 
typ
,

52 
Àvñ
, 
xfs_agf_t
 *
agf
));

53 
	`ußge
();

55 
agcou¡
;

56 
xfs_agnumbî_t
 *
agli°
;

57 
cou¡Êag
;

58 
dumpÊag
;

59 
equÆsize
;

60 
hi°ít_t
 *
hi°
;

61 
hi°cou¡
;

62 
mu…size
;

63 
£í1
;

64 
summ¨yÊag
;

65 
tŸblocks
;

66 
tŸexts
;

68 c⁄° 
cmdöfo_t
 
‰ì•_cmd
 =

69 { "‰ì•", 
NULL
, 
‰ì•_f
, 0, -1, 0,

71 "summ¨izê‰ì s∑˚ f‹ fûesy°em", 
NULL
 
	}
};

74 
	$öagli°
(

75 
xfs_agnumbî_t
 
agno
)

77 
i
;

79 i‡(
agcou¡
 == 0)

81 
i
 = 0; i < 
agcou¡
; i++)

82 i‡(
agli°
[
i
] =
agno
)

85 
	}
}

91 
	$‰ì•_f
(

92 
¨gc
,

93 **
¨gv
)

95 
xfs_agnumbî_t
 
agno
;

97 i‡(!
	`öô
(
¨gc
, 
¨gv
))

100 i‡(
dumpÊag
)

101 
	`db¥ötf
("%8s %8s %8s\n", "agno", "agbno", "len");

103 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

104 i‡(
	`öagli°
(
agno
))

105 
	`sˇn_ag
(
agno
);

107 i‡(
hi°cou¡
)

108 
	`¥öthi°
();

109 i‡(
summ¨yÊag
) {

110 
	`db¥ötf
(
	`_
("tŸÆ fªêexã¡†%Œd\n"), 
tŸexts
);

111 
	`db¥ötf
(
	`_
("tŸÆ fªêblock†%Œd\n"), 
tŸblocks
);

112 
	`db¥ötf
(
	`_
("average freeÉxtent size %g\n"),

113 ()
tŸblocks
 / ()
tŸexts
);

115 i‡(
agli°
)

116 
	`x‰ì
(
agli°
);

117 i‡(
hi°
)

118 
	`x‰ì
(
hi°
);

120 
	}
}

123 
	$‰ì•_öô
()

125 
	`add_comm™d
(&
‰ì•_cmd
);

126 
	}
}

129 
	$agli°add
(

130 *
a
)

132 
agli°
 = 
	`xªÆloc
◊gli°, (
agcou¡
 + 1) * (*aglist));

133 
agli°
[
agcou¡
] = (
xfs_agnumbî_t
)
	`©oi
(
a
);

134 
agcou¡
++;

135 
	}
}

138 
	$öô
(

139 
¨gc
,

140 **
¨gv
)

142 
c
;

143 
•e˚d
 = 0;

145 
agcou¡
 = 
cou¡Êag
 = 
dumpÊag
 = 
equÆsize
 = 
mu…size
 = 
›töd
 = 0;

146 
hi°cou¡
 = 
£í1
 = 
summ¨yÊag
 = 0;

147 
tŸblocks
 = 
tŸexts
 = 0;

148 
agli°
 = 
NULL
;

149 
hi°
 = 
NULL
;

150 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "a:bcde:h:m:s")Ë!
EOF
) {

151 
c
) {

153 
	`agli°add
(
›èrg
);

156 i‡(
•e˚d
)

157  
	`ußge
();

158 
mu…size
 = 2;

159 
•e˚d
 = 1;

162 
cou¡Êag
 = 1;

165 
dumpÊag
 = 1;

168 i‡(
•e˚d
)

169  
	`ußge
();

170 
equÆsize
 = 
	`©oi
(
›èrg
);

171 
•e˚d
 = 1;

174 i‡(
•e˚d
 && !
hi°cou¡
)

175  
	`ußge
();

176 
	`addhi°ít
(
	`©oi
(
›èrg
));

177 
•e˚d
 = 1;

180 i‡(
•e˚d
)

181  
	`ußge
();

182 
mu…size
 = 
	`©oi
(
›èrg
);

183 
•e˚d
 = 1;

186 
summ¨yÊag
 = 1;

189  
	`ußge
();

192 i‡(
›töd
 !
¨gc
)

193  
	`ußge
();

194 i‡(!
•e˚d
)

195 
mu…size
 = 2;

196 
	`hi°öô
(()
mp
->
m_sb
.
sb_agblocks
);

198 
	}
}

201 
	$ußge
()

203 
	`db¥ötf
(
	`_
("freespárguments: [-bcds] [-aágno] [-e binsize] [-h h1]... "

206 
	}
}

209 
	$sˇn_ag
(

210 
xfs_agnumbî_t
 
agno
)

212 
xfs_agf_t
 *
agf
;

214 
	`push_cur
();

215 
	`£t_cur
(&
ty±ab
[
TYP_AGF
], 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

216 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

217 
agf
 = 
iocur_t›
->
d©a
;

218 
	`sˇn_‰ìli°
(
agf
);

219 i‡(
cou¡Êag
)

220 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
◊gf->
agf_roŸs
[
XFS_BTNUM_CNT
]),

221 
TYP_CNTBT
, 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNT
]),

222 
sˇnfunc_˙t
);

224 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
◊gf->
agf_roŸs
[
XFS_BTNUM_BNO
]),

225 
TYP_BNOBT
, 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNO
]),

226 
sˇnfunc_bno
);

227 
	`p›_cur
();

228 
	}
}

231 
	$sˇn_‰ìli°
(

232 
xfs_agf_t
 *
agf
)

234 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

235 
xfs_agÊ_t
 *
agÊ
;

236 
xfs_agblock_t
 
bno
;

237 
i
;

238 
__be32
 *
agÊ_bno
;

240 i‡(
	`be32_to_˝u
(
agf
->
agf_Êcou¡
) == 0)

242 
	`push_cur
();

243 
	`£t_cur
(&
ty±ab
[
TYP_AGFL
], 
	`XFS_AG_DADDR
(
mp
, 
£qno
, 
	`XFS_AGFL_DADDR
(mp)),

244 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

245 
agÊ
 = 
iocur_t›
->
d©a
;

246 
i
 = 
	`be32_to_˝u
(
agf
->
agf_Êfú°
);

249 
agÊ_bno
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
Ë? &
agÊ
->agfl_bno[0]

250 : (
__be32
 *)
agÊ
;

253 i‡(
	`be32_to_˝u
(
agf
->
agf_Êfú°
Ë>
	`XFS_AGFL_SIZE
(
mp
) ||

254 
	`be32_to_˝u
(
agf
->
agf_Êœ°
Ë>
	`XFS_AGFL_SIZE
(
mp
)) {

255 
	`db¥ötf
(
	`_
("agf %d freelist blocks bad, skipping "

256 "‰ìli° sˇn\n"), 
i
);

257 
	`p›_cur
();

262 
bno
 = 
	`be32_to_˝u
(
agÊ_bno
[
i
]);

263 
	`addtohi°
(
£qno
, 
bno
, 1);

264 i‡(
i
 =
	`be32_to_˝u
(
agf
->
agf_Êœ°
))

266 i‡(++
i
 =
	`XFS_AGFL_SIZE
(
mp
))

267 
i
 = 0;

269 
	`p›_cur
();

270 
	}
}

273 
sˇn_sbåì
(

274 
xfs_agf_t
 *
agf
,

275 
xfs_agblock_t
 
roŸ
,

276 
ty≤m_t
 
typ
,

277 
∆evñs
,

278 (*
func
)(
xfs_båì_block
 *
block
,

279 
ty≤m_t
 
typ
,

280 
Àvñ
,

281 
xfs_agf_t
 *
agf
))

283 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

285 
	`push_cur
();

286 
	`£t_cur
(&
ty±ab
[
typ
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
£qno
, 
roŸ
),

287 
blkbb
, 
DB_RING_IGN
, 
NULL
);

288 i‡(
iocur_t›
->
d©a
 =
NULL
) {

289 
	`db¥ötf
(
	`_
("ˇn'àªad båì block %u/%u\n"), 
£qno
, 
roŸ
);

292 (*
func
)(
iocur_t›
->
d©a
, 
typ
, 
∆evñs
 - 1, 
agf
);

293 
	`p›_cur
();

294 
	}
}

298 
	$sˇnfunc_bno
(

299 
xfs_båì_block
 *
block
,

300 
ty≤m_t
 
typ
,

301 
Àvñ
,

302 
xfs_agf_t
 *
agf
)

304 
i
;

305 
xfs_Æloc_±r_t
 *
µ
;

306 
xfs_Æloc_ªc_t
 *
Ω
;

308 i‡(!(
	`be32_to_˝u
(
block
->
bb_magic
Ë=
XFS_ABTB_MAGIC
 ||

309 
	`be32_to_˝u
(
block
->
bb_magic
Ë=
XFS_ABTB_CRC_MAGIC
))

312 i‡(
Àvñ
 == 0) {

313 
Ω
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

314 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

315 
	`addtohi°
(
	`be32_to_˝u
(
agf
->
agf_£qno
),

316 
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
),

317 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
));

320 
µ
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

321 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

322 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
typ
, 
Àvñ
, 
sˇnfunc_bno
);

323 
	}
}

326 
	$sˇnfunc_˙t
(

327 
xfs_båì_block
 *
block
,

328 
ty≤m_t
 
typ
,

329 
Àvñ
,

330 
xfs_agf_t
 *
agf
)

332 
i
;

333 
xfs_Æloc_±r_t
 *
µ
;

334 
xfs_Æloc_ªc_t
 *
Ω
;

336 i‡(!(
	`be32_to_˝u
(
block
->
bb_magic
Ë=
XFS_ABTC_MAGIC
 ||

337 
	`be32_to_˝u
(
block
->
bb_magic
Ë=
XFS_ABTC_CRC_MAGIC
))

340 i‡(
Àvñ
 == 0) {

341 
Ω
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

342 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

343 
	`addtohi°
(
	`be32_to_˝u
(
agf
->
agf_£qno
),

344 
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
),

345 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
));

348 
µ
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

349 
i
 = 0; i < 
	`be16_to_˝u
(
block
->
bb_numªcs
); i++)

350 
	`sˇn_sbåì
(
agf
, 
	`be32_to_˝u
(
µ
[
i
]), 
typ
, 
Àvñ
, 
sˇnfunc_˙t
);

351 
	}
}

354 
	$addhi°ít
(

355 
h
)

357 
hi°
 = 
	`xªÆloc
(hi°, (
hi°cou¡
 + 1) * (*hist));

358 i‡(
h
 == 0)

359 
h
 = 1;

360 
hi°
[
hi°cou¡
].
low
 = 
h
;

361 
hi°
[
hi°cou¡
].
cou¡
 = hi°[hi°cou¡].
blocks
 = 0;

362 
hi°cou¡
++;

363 i‡(
h
 == 1)

364 
£í1
 = 1;

365 
	}
}

368 
	$addtohi°
(

369 
xfs_agnumbî_t
 
agno
,

370 
xfs_agblock_t
 
agbno
,

371 
xfs_exéí_t
 
Àn
)

373 
i
;

375 i‡(
dumpÊag
)

376 
	`db¥ötf
("%8d %8d %8d\n", 
agno
, 
agbno
, 
Àn
);

377 
tŸexts
++;

378 
tŸblocks
 +
Àn
;

379 
i
 = 0; i < 
hi°cou¡
; i++) {

380 i‡(
hi°
[
i
].
high
 >
Àn
) {

381 
hi°
[
i
].
cou¡
++;

382 
hi°
[
i
].
blocks
 +
Àn
;

386 
	}
}

389 
	$hcmp
(

390 c⁄° *
a
,

391 c⁄° *
b
)

393  ((
hi°ít_t
 *)
a
)->
low
 - ((hi°ít_à*)
b
)->low;

394 
	}
}

397 
	$hi°öô
(

398 
maxÀn
)

400 
i
;

402 i‡(
equÆsize
) {

403 
i
 = 1; i < 
maxÀn
; i +
equÆsize
)

404 
	`addhi°ít
(
i
);

405 } i‡(
mu…size
) {

406 
i
 = 1; i < 
maxÀn
; i *
mu…size
)

407 
	`addhi°ít
(
i
);

409 i‡(!
£í1
)

410 
	`addhi°ít
(1);

411 
	`qs‹t
(
hi°
, 
hi°cou¡
, (*hi°), 
hcmp
);

413 
i
 = 0; i < 
hi°cou¡
; i++) {

414 i‡(
i
 < 
hi°cou¡
 - 1)

415 
hi°
[
i
].
high
 = hi°[ò+ 1].
low
 - 1;

417 
hi°
[
i
].
high
 = 
maxÀn
;

419 
	}
}

422 
	$¥öthi°
()

424 
i
;

426 
	`db¥ötf
("%7s %7s %7s %7s %6s\n",

427 
	`_
("from"), _("to"), _("extents"), _("blocks"), _("pct"));

428 
i
 = 0; i < 
hi°cou¡
; i++) {

429 i‡(
hi°
[
i
].
cou¡
)

430 
	`db¥ötf
("%7d %7d %7Œd %7Œd %6.2f\n", 
hi°
[
i
].
low
,

431 
hi°
[
i
].
high
, hi°[i].
cou¡
, hi°[i].
blocks
,

432 
hi°
[
i
].
blocks
 * 100.0 / 
tŸblocks
);

434 
	}
}

	@db/freesp.h

19 
‰ì•_öô
();

	@db/fsmap.c

20 
	~"libxfs.h
"

21 
	~"comm™d.h
"

22 
	~"fsm≠.h
"

23 
	~"ouçut.h
"

24 
	~"öô.h
"

26 
	sfsm≠_öfo
 {

27 
	mƒ
;

28 
xfs_agnumbî_t
 
	magno
;

32 
	$fsm≠_‚
(

33 
xfs_båì_cur
 *
cur
,

34 
xfs_rm≠_úec
 *
ªc
,

35 *
¥iv
)

37 
fsm≠_öfo
 *
öfo
 = 
¥iv
;

39 
	`db¥ötf
(
	`_
("%llu: %u/%uÜen %u owner %lld offset %llu bmbt %dáttrfork %dÉxtflag %d\n"),

40 
öfo
->
ƒ
, info->
agno
, 
ªc
->
rm_°¨tblock
,

41 
ªc
->
rm_blockcou¡
,Ñec->
rm_ow√r
,Ñec->
rm_off£t
,

42 !!(
ªc
->
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
),

43 !!(
ªc
->
rm_Êags
 & 
XFS_RMAP_ATTR_FORK
),

44 !!(
ªc
->
rm_Êags
 & 
XFS_RMAP_UNWRITTEN
));

45 
öfo
->
ƒ
++;

48 
	}
}

51 
	$fsm≠
(

52 
xfs_fsblock_t
 
°¨t_fsb
,

53 
xfs_fsblock_t
 
íd_fsb
)

55 
fsm≠_öfo
 
öfo
;

56 
xfs_agnumbî_t
 
°¨t_ag
;

57 
xfs_agnumbî_t
 
íd_ag
;

58 
xfs_agnumbî_t
 
agno
;

59 
xfs_daddr_t
 
eofs
;

60 
xfs_rm≠_úec
 
low
 = {0};

61 
xfs_rm≠_úec
 
high
 = {0};

62 
xfs_båì_cur
 *
bt_cur
;

63 
xfs_buf
 *
agbp
;

64 
îr‹
;

66 
eofs
 = 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_dblocks
);

67 i‡(
	`XFS_FSB_TO_DADDR
(
mp
, 
íd_fsb
Ë>
eofs
)

68 
íd_fsb
 = 
	`XFS_DADDR_TO_FSB
(
mp
, 
eofs
 - 1);

70 
low
.
rm_°¨tblock
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
°¨t_fsb
);

71 
high
.
rm_°¨tblock
 = -1U;

72 
high
.
rm_ow√r
 = 
ULLONG_MAX
;

73 
high
.
rm_off£t
 = 
ULLONG_MAX
;

74 
high
.
rm_Êags
 = 
XFS_RMAP_ATTR_FORK
 | 
XFS_RMAP_BMBT_BLOCK
 | 
XFS_RMAP_UNWRITTEN
;

76 
°¨t_ag
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
°¨t_fsb
);

77 
íd_ag
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
íd_fsb
);

79 
öfo
.
ƒ
 = 0;

80 
agno
 = 
°¨t_ag
;ágnÿ<
íd_ag
;ágno++) {

81 i‡(
agno
 =
íd_ag
)

82 
high
.
rm_°¨tblock
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
íd_fsb
);

84 
îr‹
 = -
	`libxfs_Æloc_ªad_agf
(
mp
, 
NULL
, 
agno
, 0, &
agbp
);

85 i‡(
îr‹
) {

86 
	`db¥ötf
(
	`_
("Eº‹ %d whûêªadög AGF.\n"), 
îr‹
);

90 
bt_cur
 = 
	`libxfs_rm≠bt_öô_curs‹
(
mp
, 
NULL
, 
agbp
, 
agno
);

91 i‡(!
bt_cur
) {

92 
	`libxfs_putbuf
(
agbp
);

93 
	`db¥ötf
(
	`_
("NotÉnough memory.\n"));

97 
öfo
.
agno
 =ágno;

98 
îr‹
 = -
	`libxfs_rm≠_quîy_ønge
(
bt_cur
, &
low
, &
high
,

99 
fsm≠_‚
, &
öfo
);

100 i‡(
îr‹
) {

101 
	`libxfs_båì_dñ_curs‹
(
bt_cur
, 
XFS_BTREE_ERROR
);

102 
	`libxfs_putbuf
(
agbp
);

103 
	`db¥ötf
(
	`_
("Error %d while querying fsmap btree.\n"),

104 
îr‹
);

108 
	`libxfs_båì_dñ_curs‹
(
bt_cur
, 
XFS_BTREE_NOERROR
);

109 
	`libxfs_putbuf
(
agbp
);

111 i‡(
agno
 =
°¨t_ag
)

112 
low
.
rm_°¨tblock
 = 0;

114 
	}
}

117 
	$fsm≠_f
(

118 
¨gc
,

119 **
¨gv
)

121 *
p
;

122 
c
;

123 
xfs_fsblock_t
 
°¨t_fsb
 = 0;

124 
xfs_fsblock_t
 
íd_fsb
 = 
NULLFSBLOCK
;

126 i‡(!
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
)) {

127 
	`db¥ötf
(
	`_
("Filesystem doesÇot supportÑeverse mapping btree.\n"));

131 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "")Ë!
EOF
) {

132 
c
) {

134 
	`db¥ötf
(
	`_
("Bad option for fsmap command.\n"));

139 i‡(
¨gc
 > 
›töd
) {

140 
°¨t_fsb
 = 
	`°πouŒ
(
¨gv
[
›töd
], &
p
, 0);

141 i‡(*
p
 !'\0' || 
°¨t_fsb
 >
mp
->
m_sb
.
sb_dblocks
) {

142 
	`db¥ötf
(
	`_
("Bad fsm≠ sèπ_fsb %s.\n"), 
¨gv
[
›töd
]);

147 i‡(
¨gc
 > 
›töd
 + 1) {

148 
íd_fsb
 = 
	`°πouŒ
(
¨gv
[
›töd
 + 1], &
p
, 0);

149 i‡(*
p
 != '\0') {

150 
	`db¥ötf
(
	`_
("Bad fsm≠Énd_fsb %s.\n"), 
¨gv
[
›töd
 + 1]);

155 
	`fsm≠
(
°¨t_fsb
, 
íd_fsb
);

158 
	}
}

160 c⁄° 
cmdöfo_t
 
	gfsm≠_cmd
 =

161 { "fsm≠", 
NULL
, 
fsm≠_f
, 0, 2, 0,

162 
N_
("[start_fsb] [end_fsb]"),

163 
N_
("di•œyÑevî£ m≠pög(s)"), 
NULL
 };

166 
	$fsm≠_öô
()

168 
	`add_comm™d
(&
fsm≠_cmd
);

169 
	}
}

	@db/fsmap.h

20 
fsm≠_öô
();

	@db/hash.c

19 
	~"libxfs.h
"

20 
	~"addr.h
"

21 
	~"comm™d.h
"

22 
	~"ty≥.h
"

23 
	~"io.h
"

24 
	~"ouçut.h
"

26 
hash_f
(
¨gc
, **
¨gv
);

27 
hash_hñp
();

29 c⁄° 
cmdöfo_t
 
	ghash_cmd
 =

30 { "hash", 
NULL
, 
hash_f
, 1, 1, 0, 
N_
("string"),

31 
N_
("ˇlcuœã hash vÆue"), 
hash_hñp
 };

34 
	$hash_hñp
()

36 
	`db¥ötf
(
	`_
(

45 
	}
}

49 
	$hash_f
(

50 
¨gc
,

51 **
¨gv
)

53 
xfs_dahash_t
 
hashvÆ
;

55 
hashvÆ
 = 
	`libxfs_da_hash«me
((*)
¨gv
[1], ()
	`°æí
(argv[1]));

56 
	`db¥ötf
("0x%x\n", 
hashvÆ
);

58 
	}
}

61 
	$hash_öô
()

63 
	`add_comm™d
(&
hash_cmd
);

64 
	}
}

	@db/hash.h

19 
hash_öô
();

	@db/help.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"hñp.h
"

22 
	~"ouçut.h
"

24 
hñp_Æl
();

25 
hñp_⁄ecmd
(c⁄° *
cmd
, c⁄° 
cmdöfo_t
 *
˘
);

26 
hñp_f
(
¨gc
, **
¨gv
);

27 
hñp_⁄ñöe
(c⁄° *
cmd
, c⁄° 
cmdöfo_t
 *
˘
);

29 c⁄° 
cmdöfo_t
 
	ghñp_cmd
 =

30 { "hñp", "?", 
hñp_f
, 0, 1, 0, 
N_
("[command]"),

31 
N_
("hñ∞f‹ o√ o∏Æ»comm™ds"), 
NULL
 };

34 
	$hñp_Æl
()

36 c⁄° 
cmdöfo_t
 *
˘
;

38 
˘
 = 
cmdèb
; cà< &cmdèb[
ncmds
]; ct++)

39 
	`hñp_⁄ñöe
(
˘
->
«me
, ct);

40 
	`db¥ötf
(
	`_
("\nUse 'help commandname' forÉxtended help.\n"));

41 
	}
}

44 
	$hñp_f
(

45 
¨gc
,

46 **
¨gv
)

48 c⁄° 
cmdöfo_t
 *
˘
;

50 i‡(
¨gc
 == 1) {

51 
	`hñp_Æl
();

54 
˘
 = 
	`föd_comm™d
(
¨gv
[1]);

55 i‡(
˘
 =
NULL
) {

56 
	`db¥ötf
(
	`_
("comm™d %†nŸ found\n"), 
¨gv
[1]);

59 
	`hñp_⁄ecmd
(
¨gv
[1], 
˘
);

61 
	}
}

64 
	$hñp_öô
()

66 
	`add_comm™d
(&
hñp_cmd
);

67 
	}
}

70 
	$hñp_⁄ecmd
(

71 c⁄° *
cmd
,

72 c⁄° 
cmdöfo_t
 *
˘
)

74 
	`hñp_⁄ñöe
(
cmd
, 
˘
);

75 i‡(
˘
->
hñp
)

76 
˘
->
	`hñp
();

77 
	}
}

80 
	$hñp_⁄ñöe
(

81 c⁄° *
cmd
,

82 c⁄° 
cmdöfo_t
 *
˘
)

84 i‡(
cmd
)

85 
	`db¥ötf
("%†", 
cmd
);

87 
	`db¥ötf
("%†", 
˘
->
«me
);

88 i‡(
˘
->
Æäame
)

89 
	`db¥ötf
(
	`_
("(‹ %sË"), 
˘
->
Æäame
);

91 i‡(
˘
->
¨gs
)

92 
	`db¥ötf
("%†", 
˘
->
¨gs
);

93 
	`db¥ötf
("-- %s\n", 
˘
->
⁄ñöe
);

94 
	}
}

	@db/help.h

19 
hñp_öô
();

	@db/init.c

19 
	~"libxfs.h
"

20 
	~"libxlog.h
"

21 
	~<sig«l.h
>

22 
	~"comm™d.h
"

23 
	~"öô.h
"

24 
	~"öput.h
"

25 
	~"io.h
"

26 
	~"öô.h
"

27 
	~"sig.h
"

28 
	~"ouçut.h
"

29 
	~"mÆloc.h
"

30 
	~"ty≥.h
"

32 **
	gcmdlöe
;

33 
	gncmdlöe
;

34 *
	gfsdevi˚
;

35 
	gblkbb
;

36 
	gexôcode
;

37 
	gex≥π_mode
;

38 
	gf‹˚
;

39 
xfs_mou¡
 
	gxmou¡
;

40 
xfs_mou¡
 *
	gmp
;

41 
xlog
 
	gxlog
;

42 
libxfs_öô_t
 
	gx
;

43 
xfs_agnumbî_t
 
	gcur_agno
 = 
NULLAGNUMBER
;

46 
	$ußge
()

48 
	`Ârötf
(
°dîr
, 
	`_
(

50 ), 
¥og«me
);

51 
	`exô
(1);

52 
	}
}

55 
	$öô
(

56 
¨gc
,

57 **
¨gv
)

59 
xfs_sb
 *
sbp
;

60 
xfs_buf
 *
bp
;

61 
agcou¡
;

62 
c
;

64 
	`£éoˇÀ
(
LC_ALL
, "");

65 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

66 
	`ãxtdomaö
(
PACKAGE
);

68 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

69 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:fFù:rxVl:")Ë!
EOF
) {

70 
c
) {

72 
cmdlöe
 = 
	`xªÆloc
(cmdlöe, (
ncmdlöe
+1)*(*));

73 
cmdlöe
[
ncmdlöe
++] = 
›èrg
;

76 
x
.
disfûe
 = 1;

79 
f‹˚
 = 1;

82 
x
.
i§ód⁄ly
 = (
LIBXFS_ISREADONLY
|
LIBXFS_ISINACTIVE
);

85 
¥og«me
 = 
›èrg
;

88 
x
.
i§ód⁄ly
 = 
LIBXFS_ISREADONLY
;

91 
x
.
log«me
 = 
›èrg
;

94 
ex≥π_mode
 = 1;

97 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
¥og«me
, 
VERSION
);

98 
	`exô
(0);

100 
	`ußge
();

104 i‡(
›töd
 + 1 !
¨gc
) {

105 
	`ußge
();

109 
fsdevi˚
 = 
¨gv
[
›töd
];

110 i‡(!
x
.
disfûe
)

111 
x
.
vﬁ«me
 = 
fsdevi˚
;

113 
x
.
d«me
 = 
fsdevi˚
;

115 
x
.
bˇche_Êags
 = 
CACHE_MISCOMPARE_PURGE
;

116 i‡(!
	`libxfs_öô
(&
x
)) {

117 
	`Âuts
(
	`_
("\nfatalÉrror -- couldn't initialize XFSÜibrary\n"),

118 
°dîr
);

119 
	`exô
(1);

126 
	`mem£t
(&
xmou¡
, 0, (
xfs_mou¡
));

127 
	`libxfs_bu·¨g_öô
(&
xmou¡
, 
x
.
ddev
, x.
logdev
, x.
πdev
);

128 
bp
 = 
	`libxfs_ªadbuf
(
xmou¡
.
m_ddev_èrgp
, 
XFS_SB_DADDR
,

129 1 << (
XFS_MAX_SECTORSIZE_LOG
 - 
BBSHIFT
), 0, 
NULL
);

131 i‡(!
bp
 || bp->
b_îr‹
) {

132 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s is invalid (cannotÑead first 512 "

133 "byãs)\n"), 
¥og«me
, 
fsdevi˚
);

134 
	`exô
(1);

138 
	`libxfs_sb_‰om_disk
(&
xmou¡
.
m_sb
, 
	`XFS_BUF_TO_SBP
(
bp
));

139 
	`libxfs_putbuf
(
bp
);

140 
	`libxfs_purgebuf
(
bp
);

142 
sbp
 = &
xmou¡
.
m_sb
;

143 i‡(
sbp
->
sb_magi˙um
 !
XFS_SB_MAGIC
) {

144 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s isÇotá valid XFS filesystem (unexpected SB magicÇumber 0x%08x)\n"),

145 
¥og«me
, 
fsdevi˚
, 
sbp
->
sb_magi˙um
);

146 i‡(!
f‹˚
) {

147 
	`Ârötf
(
°dîr
, 
	`_
("Use -FÅo forceáÑeadáttempt.\n"));

148 
	`exô
(
EXIT_FAILURE
);

152 
agcou¡
 = 
sbp
->
sb_agcou¡
;

153 
mp
 = 
	`libxfs_mou¡
(&
xmou¡
, 
sbp
, 
x
.
ddev
, x.
logdev
, x.
πdev
,

154 
LIBXFS_MOUNT_DEBUGGER
);

155 i‡(!
mp
) {

156 
	`Ârötf
(
°dîr
,

157 
	`_
("%s: device %s unusable (notán XFS filesystem?)\n"),

158 
¥og«me
, 
fsdevi˚
);

159 
	`exô
(1);

161 
mp
->
m_log
 = &
xlog
;

162 
blkbb
 = 1 << 
mp
->
m_blkbb_log
;

165 i‡(
sbp
->
sb_agcou¡
 !
agcou¡
)

166 
exôcode
 = 1;

171 i‡(
sbp
->
sb_roŸöo
 !
NULLFSINO
 &&

172 
	`xfs_sb_vîsi⁄_ha¶azysbcou¡
(&
mp
->
m_sb
)) {

173 
îr‹
 = -
	`libxfs_öôülize_≥øg_d©a
(
mp
, 
sbp
->
sb_agcou¡
);

174 i‡(
îr‹
) {

175 
	`Ârötf
(
°dîr
,

176 
	`_
("%s: cannot initÖerag data (%d). Continuingányway.\n"),

177 
¥og«me
, 
îr‹
);

181 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

182 
	`ty≥_£t_èb_•¸c
();

183 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

184 
	`ty≥_£t_èb_¸c
();

186 
	`push_cur
();

187 
	`öô_comm™ds
();

188 
	`öô_sig
();

189 
	}
}

192 
	$maö
(

193 
¨gc
,

194 **
¨gv
)

196 
c
, 
i
, 
d⁄e
 = 0;

197 *
öput
;

198 **
v
;

199 
°¨t_iocur_•
;

201 
	`öô
(
¨gc
, 
¨gv
);

202 
°¨t_iocur_•
 = 
iocur_•
;

204 
i
 = 0; !
d⁄e
 && i < 
ncmdlöe
; i++) {

205 
v
 = 
	`bªaklöe
(
cmdlöe
[
i
], &
c
);

206 i‡(
c
)

207 
d⁄e
 = 
	`comm™d
(
c
, 
v
);

208 
	`x‰ì
(
v
);

210 i‡(
cmdlöe
) {

211 
	`x‰ì
(
cmdlöe
);

212 
˛o£_devi˚s
;

215 
	`pushfûe
(
°dö
);

216 !
d⁄e
) {

217 i‡((
öput
 = 
	`„tchlöe
()Ë=
NULL
)

219 
v
 = 
	`bªaklöe
(
öput
, &
c
);

220 i‡(
c
)

221 
d⁄e
 = 
	`comm™d
(
c
, 
v
);

222 
	`d⁄ñöe
(
öput
, 
v
);

225 
˛o£_devi˚s
:

230 
iocur_•
 > 
°¨t_iocur_•
)

231 
	`p›_cur
();

232 
	`libxfs_umou¡
(
mp
);

233 i‡(
x
.
ddev
)

234 
	`libxfs_devi˚_˛o£
(
x
.
ddev
);

235 i‡(
x
.
logdev
 && x.logdev !x.
ddev
)

236 
	`libxfs_devi˚_˛o£
(
x
.
logdev
);

237 i‡(
x
.
πdev
)

238 
	`libxfs_devi˚_˛o£
(
x
.
πdev
);

239  
exôcode
;

240 
	}
}

	@db/init.h

19 *
fsdevi˚
;

20 
blkbb
;

21 
exôcode
;

22 
ex≥π_mode
;

23 
xfs_mou¡_t
 *
mp
;

24 
libxfs_öô_t
 
x
;

25 
xfs_agnumbî_t
 
cur_agno
;

	@db/inode.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"öode.h
"

26 
	~"io.h
"

27 
	~"¥öt.h
"

28 
	~"block.h
"

29 
	~"bô.h
"

30 
	~"ouçut.h
"

31 
	~"öô.h
"

33 
öode_a_bmbt_cou¡
(*
obj
, 
°¨toff
);

34 
öode_a_bmx_cou¡
(*
obj
, 
°¨toff
);

35 
öode_a_cou¡
(*
obj
, 
°¨toff
);

36 
öode_a_off£t
(*
obj
, 
°¨toff
, 
idx
);

37 
öode_a_sÁâr_cou¡
(*
obj
, 
°¨toff
);

38 
öode_c‹e_∆ökv2_cou¡
(*
obj
, 
°¨toff
);

39 
öode_c‹e_⁄lök_cou¡
(*
obj
, 
°¨toff
);

40 
öode_c‹e_¥ojid_cou¡
(*
obj
, 
°¨toff
);

41 
öode_c‹e_∆ökv1_cou¡
(*
obj
, 
°¨toff
);

42 
öode_f
(
¨gc
, **
¨gv
);

43 
öode_u_off£t
(*
obj
, 
°¨toff
, 
idx
);

44 
öode_u_bmbt_cou¡
(*
obj
, 
°¨toff
);

45 
öode_u_bmx_cou¡
(*
obj
, 
°¨toff
);

46 
öode_u_c_cou¡
(*
obj
, 
°¨toff
);

47 
öode_u_dev_cou¡
(*
obj
, 
°¨toff
);

48 
öode_u_muuid_cou¡
(*
obj
, 
°¨toff
);

49 
öode_u_sfdú2_cou¡
(*
obj
, 
°¨toff
);

50 
öode_u_sfdú3_cou¡
(*
obj
, 
°¨toff
);

51 
öode_u_symlök_cou¡
(*
obj
, 
°¨toff
);

53 c⁄° 
cmdöfo_t
 
	göode_cmd
 =

54 { "öode", 
NULL
, 
öode_f
, 0, 1, 1, "[inode#]",

55 "£àcuºíàöode", 
NULL
 };

57 c⁄° 
fõld_t
 
	göode_hÊd
[] = {

58 { "", 
FLDT_INODE
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

59 { 
NULL
 }

61 c⁄° 
fõld_t
 
	göode_¸c_hÊd
[] = {

62 { "", 
FLDT_INODE_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

63 { 
NULL
 }

67 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_döode_t
, 
di_
 ## f))

	)

68 c⁄° 
fõld_t
 
	göode_Êds
[] = {

69 { "c‹e", 
FLDT_DINODE_CORE
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

70 { "√xt_u∆öked", 
FLDT_AGINO
, 
OI
(
OFF
(
√xt_u∆öked
)), 
C1
, 0,

71 
TYP_INODE
 },

72 { "u", 
FLDT_DINODE_U
, 
öode_u_off£t
, 
C1
, 
FLD_OFFSET
, 
TYP_NONE
 },

73 { "a", 
FLDT_DINODE_A
, 
öode_a_off£t
, 
öode_a_cou¡
,

74 
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

75 { 
NULL
 }

77 c⁄° 
fõld_t
 
	göode_¸c_Êds
[] = {

78 { "c‹e", 
FLDT_DINODE_CORE
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

79 { "√xt_u∆öked", 
FLDT_AGINO
, 
OI
(
OFF
(
√xt_u∆öked
)), 
C1
, 0,

80 
TYP_INODE
 },

81 { "v3", 
FLDT_DINODE_V3
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

82 { "u3", 
FLDT_DINODE_U
, 
öode_u_off£t
, 
C1
, 
FLD_OFFSET
, 
TYP_NONE
 },

83 { "a", 
FLDT_DINODE_A
, 
öode_a_off£t
, 
öode_a_cou¡
,

84 
FLD_COUNT
|
FLD_OFFSET
, 
TYP_NONE
 },

85 { 
NULL
 }

89 
	#COFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_döode_t
, 
di_
 ## f))

	)

90 c⁄° 
fõld_t
 
	göode_c‹e_Êds
[] = {

91 { "magic", 
FLDT_UINT16X
, 
OI
(
COFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

92 { "mode", 
FLDT_UINT16O
, 
OI
(
COFF
(
mode
)), 
C1
, 0, 
TYP_NONE
 },

93 { "vîsi⁄", 
FLDT_INT8D
, 
OI
(
COFF
(
vîsi⁄
)), 
C1
, 0, 
TYP_NONE
 },

94 { "f‹m©", 
FLDT_DINODE_FMT
, 
OI
(
COFF
(
f‹m©
)), 
C1
, 0, 
TYP_NONE
 },

95 { "∆ökv1", 
FLDT_UINT16D
, 
OI
(
COFF
(
⁄lök
)), 
öode_c‹e_∆ökv1_cou¡
,

96 
FLD_COUNT
, 
TYP_NONE
 },

97 { "∆ökv2", 
FLDT_UINT32D
, 
OI
(
COFF
(
∆ök
)), 
öode_c‹e_∆ökv2_cou¡
,

98 
FLD_COUNT
, 
TYP_NONE
 },

99 { "⁄lök", 
FLDT_UINT16D
, 
OI
(
COFF
(
⁄lök
)), 
öode_c‹e_⁄lök_cou¡
,

100 
FLD_COUNT
, 
TYP_NONE
 },

101 { "¥ojid_lo", 
FLDT_UINT16D
, 
OI
(
COFF
(
¥ojid_lo
)),

102 
öode_c‹e_¥ojid_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

103 { "¥ojid_hi", 
FLDT_UINT16D
, 
OI
(
COFF
(
¥ojid_hi
)),

104 
öode_c‹e_¥ojid_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

105 { "uid", 
FLDT_UINT32D
, 
OI
(
COFF
(
uid
)), 
C1
, 0, 
TYP_NONE
 },

106 { "gid", 
FLDT_UINT32D
, 
OI
(
COFF
(
gid
)), 
C1
, 0, 
TYP_NONE
 },

107 { "Êushôî", 
FLDT_UINT16D
, 
OI
(
COFF
(
Êushôî
)), 
C1
, 0, 
TYP_NONE
 },

108 { "©ime", 
FLDT_TIMESTAMP
, 
OI
(
COFF
(
©ime
)), 
C1
, 0, 
TYP_NONE
 },

109 { "mtime", 
FLDT_TIMESTAMP
, 
OI
(
COFF
(
mtime
)), 
C1
, 0, 
TYP_NONE
 },

110 { "˘ime", 
FLDT_TIMESTAMP
, 
OI
(
COFF
(
˘ime
)), 
C1
, 0, 
TYP_NONE
 },

111 { "size", 
FLDT_FSIZE
, 
OI
(
COFF
(
size
)), 
C1
, 0, 
TYP_NONE
 },

112 { "nblocks", 
FLDT_DRFSBNO
, 
OI
(
COFF
(
nblocks
)), 
C1
, 0, 
TYP_NONE
 },

113 { "extsize", 
FLDT_EXTLEN
, 
OI
(
COFF
(
extsize
)), 
C1
, 0, 
TYP_NONE
 },

114 { "√xã¡s", 
FLDT_EXTNUM
, 
OI
(
COFF
(
√xã¡s
)), 
C1
, 0, 
TYP_NONE
 },

115 { "«exã¡s", 
FLDT_AEXTNUM
, 
OI
(
COFF
(
™exã¡s
)), 
C1
, 0, 
TYP_NONE
 },

116 { "f‹koff", 
FLDT_UINT8D
, 
OI
(
COFF
(
f‹koff
)), 
C1
, 0, 
TYP_NONE
 },

117 { "af‹m©", 
FLDT_DINODE_FMT
, 
OI
(
COFF
(
af‹m©
)), 
C1
, 0, 
TYP_NONE
 },

118 { "dmevmask", 
FLDT_UINT32X
, 
OI
(
COFF
(
dmevmask
)), 
C1
, 0, 
TYP_NONE
 },

119 { "dm°©e", 
FLDT_UINT16D
, 
OI
(
COFF
(
dm°©e
)), 
C1
, 0, 
TYP_NONE
 },

120 { "Êags", 
FLDT_UINT16X
, 
OI
(
COFF
(
Êags
)), 
C1
, 
FLD_SKIPALL
, 
TYP_NONE
 },

121 { "√wπbm", 
FLDT_UINT1
,

122 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_NEWRTBM_BIT
 - 1), 
C1
,

123 0, 
TYP_NONE
 },

124 { "¥óŒoc", 
FLDT_UINT1
,

125 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_PREALLOC_BIT
 - 1), 
C1
,

126 0, 
TYP_NONE
 },

127 { "ªÆtime", 
FLDT_UINT1
,

128 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_REALTIME_BIT
 - 1), 
C1
,

129 0, 
TYP_NONE
 },

130 { "immuèbÀ", 
FLDT_UINT1
,

131 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_IMMUTABLE_BIT
-1), 
C1
,

132 0, 
TYP_NONE
 },

133 { "≠≥nd", 
FLDT_UINT1
,

134 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_APPEND_BIT
 - 1), 
C1
,

135 0, 
TYP_NONE
 },

136 { "sync", 
FLDT_UINT1
,

137 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_SYNC_BIT
 - 1), 
C1
,

138 0, 
TYP_NONE
 },

139 { "nﬂtime", 
FLDT_UINT1
,

140 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_NOATIME_BIT
 - 1), 
C1
,

141 0, 
TYP_NONE
 },

142 { "nodump", 
FLDT_UINT1
,

143 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_NODUMP_BIT
 - 1), 
C1
,

144 0, 
TYP_NONE
 },

145 { "πöhîô", 
FLDT_UINT1
,

146 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_RTINHERIT_BIT
-1), 
C1
,

147 0, 
TYP_NONE
 },

148 { "¥ojöhîô", 
FLDT_UINT1
,

149 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_PROJINHERIT_BIT
-1),
C1
,

150 0, 
TYP_NONE
 },

151 { "nosymlöks", 
FLDT_UINT1
,

152 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_NOSYMLINKS_BIT
-1), 
C1
,

153 0, 
TYP_NONE
 },

154 { "extsz", 
FLDT_UINT1
,

155 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_EXTSIZE_BIT
-1),
C1
,

156 0, 
TYP_NONE
 },

157 { "extszöhîô", 
FLDT_UINT1
,

158 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_EXTSZINHERIT_BIT
-1),
C1
,

159 0, 
TYP_NONE
 },

160 { "node‰ag", 
FLDT_UINT1
,

161 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_NODEFRAG_BIT
-1),
C1
,

162 0, 
TYP_NONE
 },

163 { "fûe°ªam", 
FLDT_UINT1
,

164 
OI
(
COFF
(
Êags
Ë+ 
bôsz
(
__uöt16_t
Ë- 
XFS_DIFLAG_FILESTREAM_BIT
-1),
C1
,

165 0, 
TYP_NONE
 },

166 { "gí", 
FLDT_UINT32D
, 
OI
(
COFF
(
gí
)), 
C1
, 0, 
TYP_NONE
 },

167 { 
NULL
 }

170 c⁄° 
fõld_t
 
	göode_v3_Êds
[] = {

171 { "¸c", 
FLDT_CRC
, 
OI
(
COFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

172 { "ch™ge_cou¡", 
FLDT_UINT64D
, 
OI
(
COFF
(
ch™gecou¡
)), 
C1
, 0, 
TYP_NONE
 },

173 { "l¢", 
FLDT_UINT64X
, 
OI
(
COFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

174 { "Êags2", 
FLDT_UINT64X
, 
OI
(
COFF
(
Êags2
)), 
C1
, 0, 
TYP_NONE
 },

175 { "cowextsize", 
FLDT_EXTLEN
, 
OI
(
COFF
(
cowextsize
)), 
C1
, 0, 
TYP_NONE
 },

176 { "¸time", 
FLDT_TIMESTAMP
, 
OI
(
COFF
(
¸time
)), 
C1
, 0, 
TYP_NONE
 },

177 { "öumbî", 
FLDT_INO
, 
OI
(
COFF
(
öo
)), 
C1
, 0, 
TYP_NONE
 },

178 { "uuid", 
FLDT_UUID
, 
OI
(
COFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

179 { "ªÊök", 
FLDT_UINT1
,

180 
OI
(
COFF
(
Êags2
Ë+ 
bôsz
(
__uöt64_t
Ë- 
XFS_DIFLAG2_REFLINK_BIT
-1), 
C1
,

181 0, 
TYP_NONE
 },

182 { "cowextsz", 
FLDT_UINT1
,

183 
OI
(
COFF
(
Êags2
Ë+ 
bôsz
(
__uöt64_t
Ë- 
XFS_DIFLAG2_COWEXTSIZE_BIT
-1), 
C1
,

184 0, 
TYP_NONE
 },

185 { 
NULL
 }

189 
	#TOFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_time°amp_t
, 
t_
 ## f))

	)

190 c⁄° 
fõld_t
 
	gtime°amp_Êds
[] = {

191 { "£c", 
FLDT_TIME
, 
OI
(
TOFF
(
£c
)), 
C1
, 0, 
TYP_NONE
 },

192 { "n£c", 
FLDT_NSEC
, 
OI
(
TOFF
(
n£c
)), 
C1
, 0, 
TYP_NONE
 },

193 { 
NULL
 }

196 c⁄° 
fõld_t
 
	göode_u_Êds
[] = {

197 { "bmbt", 
FLDT_BMROOTD
, 
NULL
, 
öode_u_bmbt_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

198 { "bmx", 
FLDT_BMAPBTDREC
, 
NULL
, 
öode_u_bmx_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
,

199 
TYP_NONE
 },

200 { "c", 
FLDT_CHARNS
, 
NULL
, 
öode_u_c_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

201 { "dev", 
FLDT_DEV
, 
NULL
, 
öode_u_dev_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

202 { "muuid", 
FLDT_UUID
, 
NULL
, 
öode_u_muuid_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

203 { "sfdú2", 
FLDT_DIR2SF
, 
NULL
, 
öode_u_sfdú2_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

204 { "sfdú3", 
FLDT_DIR3SF
, 
NULL
, 
öode_u_sfdú3_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

205 { "symlök", 
FLDT_CHARNS
, 
NULL
, 
öode_u_symlök_cou¡
, 
FLD_COUNT
,

206 
TYP_NONE
 },

207 { 
NULL
 }

210 c⁄° 
fõld_t
 
	göode_a_Êds
[] = {

211 { "bmbt", 
FLDT_BMROOTA
, 
NULL
, 
öode_a_bmbt_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

212 { "bmx", 
FLDT_BMAPBTAREC
, 
NULL
, 
öode_a_bmx_cou¡
, 
FLD_ARRAY
|
FLD_COUNT
,

213 
TYP_NONE
 },

214 { "sÁâr", 
FLDT_ATTRSHORT
, 
NULL
, 
öode_a_sÁâr_cou¡
, 
FLD_COUNT
,

215 
TYP_NONE
 },

216 { 
NULL
 }

219 c⁄° *
	gdöode_fmt_«me
[] =

221 c⁄° 
	gdöode_fmt_«me_size
 =

222 (
döode_fmt_«me
) / (dinode_fmt_name[0]);

226 
	$Â_döode_fmt
(

227 *
obj
,

228 
bô
,

229 
cou¡
,

230 *
fmt°r
,

231 
size
,

232 
¨g
,

233 
ba£
,

234 
¨øy
)

236 
bôpos
;

237 
xfs_döode_fmt_t
 
f
;

238 
i
;

240 
i
 = 0, 
bôpos
 = 
bô
; i < 
cou¡
; i++, bôpo†+
size
) {

241 
f
 = (
xfs_döode_fmt_t
)
	`gëbôvÆ
(
obj
, 
bôpos
, 
size
, 
BVUNSIGNED
);

242 i‡(
¨øy
)

243 
	`db¥ötf
("%d:", 
i
 + 
ba£
);

244 i‡(
f
 < 0 || f >
döode_fmt_«me_size
)

245 
	`db¥ötf
("%d", ()
f
);

247 
	`db¥ötf
("%d (%s)", ()
f
, 
döode_fmt_«me
[()f]);

248 i‡(
i
 < 
cou¡
 - 1)

249 
	`db¥ötf
(" ");

252 
	}
}

255 
	$öode_a_bmbt_cou¡
(

256 *
obj
,

257 
°¨toff
)

259 
xfs_döode_t
 *
dù
;

261 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

262 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

263 
dù
 = 
obj
;

264 i‡(!
	`XFS_DFORK_Q
(
dù
))

266 
	`ASSERT
((*)
	`XFS_DFORK_APTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

267  
dù
->
di_af‹m©
 =
XFS_DINODE_FMT_BTREE
;

268 
	}
}

271 
	$öode_a_bmx_cou¡
(

272 *
obj
,

273 
°¨toff
)

275 
xfs_döode_t
 *
dù
;

277 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

278 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

279 
dù
 = 
obj
;

280 i‡(!
	`XFS_DFORK_Q
(
dù
))

282 
	`ASSERT
((*)
	`XFS_DFORK_APTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

283  
dù
->
di_af‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ?

284 
	`be16_to_˝u
(
dù
->
di_™exã¡s
) : 0;

285 
	}
}

288 
	$öode_a_cou¡
(

289 *
obj
,

290 
°¨toff
)

292 
xfs_döode_t
 *
dù
;

294 
	`ASSERT
(
°¨toff
 == 0);

295 
dù
 = 
obj
;

296  
	`XFS_DFORK_Q
(
dù
);

297 
	}
}

300 
	$öode_a_off£t
(

301 *
obj
,

302 
°¨toff
,

303 
idx
)

305 
xfs_döode_t
 *
dù
;

307 
	`ASSERT
(
°¨toff
 == 0);

308 
	`ASSERT
(
idx
 == 0);

309 
dù
 = 
obj
;

310 
	`ASSERT
(
	`XFS_DFORK_Q
(
dù
));

311  
	`bôize
(()((*)
	`XFS_DFORK_APTR
(
dù
) - (*)dip));

312 
	}
}

315 
	$öode_a_sÁâr_cou¡
(

316 *
obj
,

317 
°¨toff
)

319 
xfs_döode_t
 *
dù
;

321 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

322 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

323 
dù
 = 
obj
;

324 i‡(!
	`XFS_DFORK_Q
(
dù
))

326 
	`ASSERT
((*)
	`XFS_DFORK_APTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

327  
dù
->
di_af‹m©
 =
XFS_DINODE_FMT_LOCAL
;

328 
	}
}

331 
	$öode_a_size
(

332 *
obj
,

333 
°¨toff
,

334 
idx
)

336 
xfs_©å_sh‹tf‹m_t
 *
asf
;

337 
xfs_döode_t
 *
dù
;

339 
	`ASSERT
(
°¨toff
 == 0);

340 
	`ASSERT
(
idx
 == 0);

341 
dù
 = 
obj
;

342 
dù
->
di_af‹m©
) {

343 
XFS_DINODE_FMT_LOCAL
:

344 
asf
 = (
xfs_©å_sh‹tf‹m_t
 *)
	`XFS_DFORK_APTR
(
dù
);

345  
	`bôize
(
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
));

346 
XFS_DINODE_FMT_EXTENTS
:

347  ()
	`be16_to_˝u
(
dù
->
di_™exã¡s
) *

348 
	`bôsz
(
xfs_bmbt_ªc_t
);

349 
XFS_DINODE_FMT_BTREE
:

350  
	`bôize
(()
	`XFS_DFORK_ASIZE
(
dù
, 
mp
));

354 
	}
}

357 
	$öode_c‹e_∆ökv1_cou¡
(

358 *
obj
,

359 
°¨toff
)

361 
xfs_döode_t
 *
dic
;

363 
	`ASSERT
(
°¨toff
 == 0);

364 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

365 
dic
 = 
obj
;

366  
dic
->
di_vîsi⁄
 == 1;

367 
	}
}

370 
	$öode_c‹e_∆ökv2_cou¡
(

371 *
obj
,

372 
°¨toff
)

374 
xfs_döode_t
 *
dic
;

376 
	`ASSERT
(
°¨toff
 == 0);

377 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

378 
dic
 = 
obj
;

379  
dic
->
di_vîsi⁄
 >= 2;

380 
	}
}

383 
	$öode_c‹e_⁄lök_cou¡
(

384 *
obj
,

385 
°¨toff
)

387 
xfs_döode_t
 *
dic
;

389 
	`ASSERT
(
°¨toff
 == 0);

390 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

391 
dic
 = 
obj
;

392  
dic
->
di_vîsi⁄
 >= 2;

393 
	}
}

396 
	$öode_c‹e_¥ojid_cou¡
(

397 *
obj
,

398 
°¨toff
)

400 
xfs_döode_t
 *
dic
;

402 
	`ASSERT
(
°¨toff
 == 0);

403 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

404 
dic
 = 
obj
;

405  
dic
->
di_vîsi⁄
 >= 2;

406 
	}
}

409 
	$öode_f
(

410 
¨gc
,

411 **
¨gv
)

413 
xfs_öo_t
 
öo
;

414 *
p
;

416 i‡(
¨gc
 > 1) {

417 
öo
 = 
	`°πouŒ
(
¨gv
[1], &
p
, 0);

418 i‡(*
p
 != '\0') {

419 
	`db¥ötf
(
	`_
("bad vÆuêf‹ inodênumbî %s\n"), 
¨gv
[1]);

422 
	`£t_cur_öode
(
öo
);

423 } i‡(
iocur_t›
->
öo
 =
NULLFSINO
)

424 
	`db¥ötf
(
	`_
("no current inode\n"));

426 
	`db¥ötf
(
	`_
("cuºíàöodênumbî i†%Œd\n"), 
iocur_t›
->
öo
);

428 
	}
}

431 
	$öode_öô
()

433 
	`add_comm™d
(&
öode_cmd
);

434 
	}
}

436 
ty≤m_t


437 
	$öode_√xt_ty≥
()

439 
iocur_t›
->
mode
 & 
S_IFMT
) {

440 
S_IFDIR
:

441  
TYP_DIR2
;

442 
S_IFLNK
:

443  
TYP_SYMLINK
;

444 
S_IFREG
:

445 i‡(
iocur_t›
->
öo
 =
mp
->
m_sb
.
sb_rbmöo
)

446  
TYP_RTBITMAP
;

447 i‡(
iocur_t›
->
öo
 =
mp
->
m_sb
.
sb_rsumöo
)

448  
TYP_RTSUMMARY
;

449 i‡(
iocur_t›
->
öo
 =
mp
->
m_sb
.
sb_uquŸöo
 ||

450 
iocur_t›
->
öo
 =
mp
->
m_sb
.
sb_gquŸöo
 ||

451 
iocur_t›
->
öo
 =
mp
->
m_sb
.
sb_pquŸöo
)

452  
TYP_DQBLK
;

454  
TYP_DATA
;

456  
TYP_NONE
;

458 
	}
}

461 
	$öode_size
(

462 *
obj
,

463 
°¨toff
,

464 
idx
)

466  
	`bôize
(
mp
->
m_sb
.
sb_öodesize
);

467 
	}
}

470 
	$öode_u_off£t
(

471 *
obj
,

472 
°¨toff
,

473 
idx
)

475 
xfs_döode_t
 *
dù
;

477 
	`ASSERT
(
°¨toff
 == 0);

478 
	`ASSERT
(
idx
 == 0);

479 
dù
 = 
obj
;

480  
	`bôize
(()((*)
	`XFS_DFORK_DPTR
(
dù
) - (*)dip));

481 
	}
}

484 
	$öode_u_bmbt_cou¡
(

485 *
obj
,

486 
°¨toff
)

488 
xfs_döode_t
 *
dù
;

490 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

491 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

492 
dù
 = 
obj
;

493 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

494  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
;

495 
	}
}

498 
	$öode_u_bmx_cou¡
(

499 *
obj
,

500 
°¨toff
)

502 
xfs_döode_t
 *
dù
;

504 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

505 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

506 
dù
 = 
obj
;

507 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

508  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ?

509 
	`be32_to_˝u
(
dù
->
di_√xã¡s
) : 0;

510 
	}
}

513 
	$öode_u_c_cou¡
(

514 *
obj
,

515 
°¨toff
)

517 
xfs_döode_t
 *
dù
;

519 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

520 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

521 
dù
 = 
obj
;

522 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

523  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
 &&

524 (
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
Ë=
S_IFREG
 ?

525 ()
	`be64_to_˝u
(
dù
->
di_size
) : 0;

526 
	}
}

529 
	$öode_u_dev_cou¡
(

530 *
obj
,

531 
°¨toff
)

533 
xfs_döode_t
 *
dù
;

535 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

536 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

537 
dù
 = 
obj
;

538 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

539  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_DEV
;

540 
	}
}

543 
	$öode_u_muuid_cou¡
(

544 *
obj
,

545 
°¨toff
)

547 
xfs_döode_t
 *
dù
;

549 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

550 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

551 
dù
 = 
obj
;

552 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

553  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_UUID
;

554 
	}
}

557 
	$öode_u_sfdú2_cou¡
(

558 *
obj
,

559 
°¨toff
)

561 
xfs_döode_t
 *
dù
;

563 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

564 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

565 
dù
 = 
obj
;

566 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

567  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
 &&

568 (
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
Ë=
S_IFDIR
 &&

569 !
	`xfs_sb_vîsi⁄_has·y≥
(&
mp
->
m_sb
);

570 
	}
}

573 
	$öode_u_sfdú3_cou¡
(

574 *
obj
,

575 
°¨toff
)

577 
xfs_döode_t
 *
dù
;

579 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

580 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

581 
dù
 = 
obj
;

582 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

583  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
 &&

584 (
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
Ë=
S_IFDIR
 &&

585 
	`xfs_sb_vîsi⁄_has·y≥
(&
mp
->
m_sb
);

586 
	}
}

589 
	$öode_u_size
(

590 *
obj
,

591 
°¨toff
,

592 
idx
)

594 
xfs_döode_t
 *
dù
;

596 
	`ASSERT
(
°¨toff
 == 0);

597 
	`ASSERT
(
idx
 == 0);

598 
dù
 = 
obj
;

599 
dù
->
di_f‹m©
) {

600 
XFS_DINODE_FMT_DEV
:

601  
	`bôsz
(
xfs_dev_t
);

602 
XFS_DINODE_FMT_LOCAL
:

603  
	`bôize
(()
	`be64_to_˝u
(
dù
->
di_size
));

604 
XFS_DINODE_FMT_EXTENTS
:

605  ()
	`be32_to_˝u
(
dù
->
di_√xã¡s
) *

606 
	`bôsz
(
xfs_bmbt_ªc_t
);

607 
XFS_DINODE_FMT_BTREE
:

608  
	`bôize
(()
	`XFS_DFORK_DSIZE
(
dù
, 
mp
));

609 
XFS_DINODE_FMT_UUID
:

610  
	`bôsz
(
uuid_t
);

614 
	}
}

617 
	$öode_u_symlök_cou¡
(

618 *
obj
,

619 
°¨toff
)

621 
xfs_döode_t
 *
dù
;

623 
	`ASSERT
(
	`bôoffs
(
°¨toff
) == 0);

624 
	`ASSERT
(
obj
 =
iocur_t›
->
d©a
);

625 
dù
 = 
obj
;

626 
	`ASSERT
((*)
	`XFS_DFORK_DPTR
(
dù
Ë- (*)dù =
	`byãize
(
°¨toff
));

627  
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
 &&

628 (
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
Ë=
S_IFLNK
 ?

629 ()
	`be64_to_˝u
(
dù
->
di_size
) : 0;

630 
	}
}

641 
	$£t_cur_öode
(

642 
xfs_öo_t
 
öo
)

644 
xfs_agblock_t
 
agbno
;

645 
xfs_agöo_t
 
agöo
;

646 
xfs_agnumbî_t
 
agno
;

647 
xfs_döode_t
 *
dù
;

648 
off£t
;

649 
numblks
 = 
blkbb
;

650 
xfs_agblock_t
 
˛u°î_agbno
;

653 
agno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
öo
);

654 
agöo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
);

655 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

656 
off£t
 = 
	`XFS_AGINO_TO_OFFSET
(
mp
, 
agöo
);

657 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 || 
agbno
 >mp->m_sb.
sb_agblocks
 ||

658 
off£t
 >
mp
->
m_sb
.
sb_ö›block
 ||

659 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
Ë!
öo
) {

660 
	`db¥ötf
(
	`_
("bad inodênumbî %Œd\n"), 
öo
);

663 
cur_agno
 = 
agno
;

665 i‡(
mp
->
m_öode_˛u°î_size
 > mp->
m_sb
.
sb_blocksize
 &&

666 
mp
->
m_öﬂlign_mask
) {

667 
xfs_agblock_t
 
chunk_agbno
;

668 
xfs_agblock_t
 
off£t_agbno
;

669 
blks_≥r_˛u°î
;

671 
blks_≥r_˛u°î
 = 
mp
->
m_öode_˛u°î_size
 >>

672 
mp
->
m_sb
.
sb_blocklog
;

673 
off£t_agbno
 = 
agbno
 & 
mp
->
m_öﬂlign_mask
;

674 
chunk_agbno
 = 
agbno
 - 
off£t_agbno
;

675 
˛u°î_agbno
 = 
chunk_agbno
 +

676 ((
off£t_agbno
 / 
blks_≥r_˛u°î
) * blks_per_cluster);

677 
off£t
 +((
agbno
 - 
˛u°î_agbno
Ë* 
mp
->
m_sb
.
sb_ö›block
);

678 
numblks
 = 
	`XFS_FSB_TO_BB
(
mp
, 
blks_≥r_˛u°î
);

680 
˛u°î_agbno
 = 
agbno
;

686 
	`ASSERT
(
ty±ab
[
TYP_INODE
].
ty≤m
 == TYP_INODE);

689 
	`£t_cur
(&
ty±ab
[
TYP_INODE
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
˛u°î_agbno
),

690 
numblks
, 
DB_RING_IGN
, 
NULL
);

691 
	`off_cur
(
off£t
 << 
mp
->
m_sb
.
sb_öodñog
, mp->m_sb.
sb_öodesize
);

692 i‡(!
iocur_t›
->
d©a
)

694 
dù
 = 
iocur_t›
->
d©a
;

695 
iocur_t›
->
öo_buf
 = 1;

696 
iocur_t›
->
öo
 = ino;

697 
iocur_t›
->
mode
 = 
	`be16_to_˝u
(
dù
->
di_mode
);

698 i‡((
iocur_t›
->
mode
 & 
S_IFMT
Ë=
S_IFDIR
)

699 
iocur_t›
->
dúöo
 = 
öo
;

701 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

702 
iocur_t›
->
öo_¸c_ok
 = 
	`libxfs_vîify_cksum
((*)
dù
,

703 
mp
->
m_sb
.
sb_öodesize
,

704 
XFS_DINODE_CRC_OFF
);

705 i‡(!
iocur_t›
->
öo_¸c_ok
)

706 
	`db¥ötf
(

707 
	`_
("Metadata CRCÉrror detected for ino %lld\n"),

708 
öo
);

712 
	`rög_add
();

713 
	}
}

	@db/inode.h

19 c⁄° 
fõld
 
öode_a_Êds
[];

20 c⁄° 
fõld
 
öode_c‹e_Êds
[];

21 c⁄° 
fõld
 
öode_v3_Êds
[];

22 c⁄° 
fõld
 
öode_Êds
[];

23 c⁄° 
fõld
 
öode_¸c_Êds
[];

24 c⁄° 
fõld
 
öode_hÊd
[];

25 c⁄° 
fõld
 
öode_¸c_hÊd
[];

26 c⁄° 
fõld
 
öode_u_Êds
[];

27 c⁄° 
fõld
 
time°amp_Êds
[];

29 
Â_döode_fmt
(*
obj
, 
bô
, 
cou¡
, *
fmt°r
,

30 
size
, 
¨g
, 
ba£
, 
¨øy
);

31 
öode_a_size
(*
obj
, 
°¨toff
, 
idx
);

32 
öode_öô
();

33 
ty≤m_t
 
öode_√xt_ty≥
();

34 
öode_size
(*
obj
, 
°¨toff
, 
idx
);

35 
öode_u_size
(*
obj
, 
°¨toff
, 
idx
);

36 
£t_cur_öode
(
xfs_öo_t
 
öo
);

	@db/input.c

19 
	~"libxfs.h
"

20 
	~<sig«l.h
>

21 
	~"comm™d.h
"

22 
	~"öput.h
"

23 
	~"ouçut.h
"

24 
	~"sig.h
"

25 
	~"mÆloc.h
"

26 
	~"öô.h
"

28 #i‡
deföed
(
ENABLE_READLINE
)

29 
	~<ªadlöe/hi°‹y.h
>

30 
	~<ªadlöe/ªadlöe.h
>

31 #ñi‡
deföed
(
ENABLE_EDITLINE
)

32 
	~<hi°edô.h
>

35 
	göput°acksize
;

36 
FILE
 **
	göput°ack
;

37 
FILE
 *
	gcuröput
;

39 
p›fûe
();

40 
sour˚_f
(
¨gc
, **
¨gv
);

42 c⁄° 
cmdöfo_t
 
	gsour˚_cmd
 =

43 { "sour˚", 
NULL
, 
sour˚_f
, 1, 1, 0, 
N_
("source-file"),

44 
N_
("gë comm™d†‰om sour˚-fûe"), 
NULL
 };

49 
	$tokíize
(

50 *
öp
)

52 *
œ°_∂a˚
 = 
NULL
;

53 *
°¨t
;

54 *
wÆk
;

55 
ö_°rög
 = 0;

56 
ö_esˇ≥
 = 0;

58 i‡(
öp
) {

59 
°¨t
 = 
öp
;

61 i‡(
œ°_∂a˚
 =
NULL
)

62  
NULL
;

65 i‡(*
œ°_∂a˚
 != '\0')

66  
NULL
;

68 
°¨t
 = 
œ°_∂a˚
 + 1;

70 
œ°_∂a˚
 = 
NULL
;

73 *
°¨t
 == ' ' || *start == '\t')

74 
°¨t
++;

76 
wÆk
 = 
°¨t
;

77 ;*
wÆk
 != '\0'; walk++) {

78 i‡(
ö_esˇ≥
) {

79 
ö_esˇ≥
 = 0;

82 i‡(*
wÆk
 == '\\')

83 
ö_esˇ≥
 = 1;

84 i‡(*
wÆk
 == '\"')

85 
ö_°rög
 ^= 1;

87 i‡(!
ö_°rög
 && !
ö_esˇ≥
 &&

88 (*
wÆk
 == ' ' || *walk == '\t')) {

89 
œ°_∂a˚
 = 
wÆk
;

90 *
œ°_∂a˚
 = '\0';

94 i‡(
wÆk
 =
°¨t
)

95  
NULL
;

97  
°¨t
;

98 
	}
}

101 
	$bªaklöe
(

102 *
öput
,

103 *
cou¡
)

105 
c
;

106 *
öp
;

107 *
p
;

108 **
rvÆ
;

110 
c
 = 0;

111 
öp
 = 
öput
;

112 
rvÆ
 = 
	`xˇŒoc
((*), 1);

115 
p
 = 
	`tokíize
(
öp
);

117 i‡(
p
 =
NULL
)

119 
öp
 = 
NULL
;

120 
c
++;

121 
rvÆ
 = 
	`xªÆloc
‘vÆ, (*rvÆË* (
c
 + 1));

122 
rvÆ
[
c
 - 1] = 
p
;

123 
rvÆ
[
c
] = 
NULL
;

125 *
cou¡
 = 
c
;

126  
rvÆ
;

127 
	}
}

130 
	$d⁄ñöe
(

131 *
öput
,

132 **
vec
)

134 
	`x‰ì
(
öput
);

135 
	`x‰ì
(
vec
);

136 
	}
}

139 
	$gë_¥om±
()

141 
¥om±
[
FILENAME_MAX
 + 1];

143 i‡(!
¥om±
[0])

144 
	`¢¥ötf
(
¥om±
, ’rom±), "%s> ", 
¥og«me
);

145  
¥om±
;

146 
	}
}

149 
	$„tchlöe_öã∫Æ
()

151 
buf
[1024];

152 
isc⁄t
;

153 
size_t
 
Àn
;

154 
size_t
 
æí
;

155 *
rvÆ
;

157 
rvÆ
 = 
NULL
;

158 
æí
 = 
isc⁄t
 = 0; ; ) {

159 i‡(
curöput
 =
°dö
) {

160 i‡(
isc⁄t
)

161 
	`db¥ötf
("... ");

163 
	`db¥ötf
(
	`gë_¥om±
(), 
¥og«me
);

164 
	`fÊush
(
°dö
);

166 i‡(
	`£íöt
() ||

167 (!
	`fgës
(
buf
, (buf), 
curöput
) &&

168 
	`„º‹
(
curöput
Ë&& 
	`£íöt
())) {

169 
	`˛óröt
();

170 
	`db¥ötf
("^C\n");

171 
	`˛óªº
(
curöput
);

172 i‡(
isc⁄t
) {

173 
isc⁄t
 = 0;

174 
æí
 = 0;

175 i‡(
rvÆ
) {

176 
	`x‰ì
(
rvÆ
);

177 
rvÆ
 = 
NULL
;

182 i‡(
	`„º‹
(
curöput
Ë|| 
	`„of
(curinput) ||

183 (
Àn
 = 
	`°æí
(
buf
)) == 0) {

191 i‡(
curöput
 =
°dö
)

192 
	`db¥ötf
("\n");

194 
	`p›fûe
();

195 
isc⁄t
 = 0;

196 
æí
 = 0;

197 i‡(
rvÆ
) {

198 
	`x‰ì
(
rvÆ
);

199 
rvÆ
 = 
NULL
;

201  
NULL
;

203 i‡(
öput°acksize
 == 1)

204 
	`log¥ötf
("%s", 
buf
);

205 
rvÆ
 = 
	`xªÆloc
‘vÆ, 
æí
 + 
Àn
 + 1);

206 i‡(
æí
 == 0)

207 
rvÆ
[0] = '\0';

208 
æí
 +
Àn
;

209 
	`°rˇt
(
rvÆ
, 
buf
);

210 i‡(
buf
[
Àn
 - 1] == '\n') {

211 i‡(
Àn
 > 1 && 
buf
[len - 2] == '\\') {

212 
rvÆ
[
æí
 - 2] = ' ';

213 
rvÆ
[
æí
 - 1] = '\0';

214 
æí
--;

215 
isc⁄t
 = 1;

217 
rvÆ
[
æí
 - 1] = '\0';

218 
æí
--;

223  
rvÆ
;

224 
	}
}

226 #ifde‡
ENABLE_READLINE


228 
	$„tchlöe
()

230 *
löe
;

232 i‡(
öput°acksize
 == 1) {

233 
löe
 = 
	`ªadlöe
(
	`gë_¥om±
());

234 i‡(!
löe
)

235 
	`db¥ötf
("\n");

236 i‡(
löe
 && *line) {

237 
	`add_hi°‹y
(
löe
);

238 
	`log¥ötf
("%s", 
löe
);

241 
löe
 = 
	`„tchlöe_öã∫Æ
();

243  
löe
;

244 
	}
}

245 #ñi‡
deföed
(
ENABLE_EDITLINE
)

246 *
	$ñ_gë_¥om±
(
EdôLöe
 *
e
Ë{  
	`gë_¥om±
(); 
	}
}

248 
	$„tchlöe
()

250 
EdôLöe
 *
ñ
;

251 
Hi°‹y
 *
hi°
;

252 
Hi°Evít
 
hevít
;

253 *
löe
;

254 
cou¡
;

256 i‡(!
ñ
) {

257 
hi°
 = 
	`hi°‹y_öô
();

258 
	`hi°‹y
(
hi°
, &
hevít
, 
H_SETSIZE
, 100);

259 
ñ
 = 
	`ñ_öô
(
¥og«me
, 
°dö
, 
°dout
, 
°dîr
);

260 
	`ñ_sour˚
(
ñ
, 
NULL
);

261 
	`ñ_£t
(
ñ
, 
EL_SIGNAL
, 1);

262 
	`ñ_£t
(
ñ
, 
EL_PROMPT
, 
ñ_gë_¥om±
);

263 
	`ñ_£t
(
ñ
, 
EL_HIST
, 
hi°‹y
, (c⁄° *)
hi°
);

266 i‡(
öput°acksize
 == 1) {

267 
löe
 = 
	`x°rdup
(
	`ñ_gës
(
ñ
, &
cou¡
));

268 i‡(
löe
) {

269 i‡(
cou¡
 > 0)

270 
löe
[
cou¡
-1] = '\0';

271 i‡(*
löe
) {

272 
	`hi°‹y
(
hi°
, &
hevít
, 
H_ENTER
, 
löe
);

273 
	`log¥ötf
("%s", 
löe
);

277 
löe
 = 
	`„tchlöe_öã∫Æ
();

279  
löe
;

280 
	}
}

282 * 
	$„tchlöe
(Ë{  
	`„tchlöe_öã∫Æ
(); 
	}
}

286 
	$p›fûe
()

288 i‡(
öput°acksize
 == 0) {

289 
curöput
 = 
NULL
;

292 i‡(
curöput
 !
°dö
)

293 
	`f˛o£
(
curöput
);

295 
öput°acksize
--;

296 i‡(
öput°acksize
) {

297 
öput°ack
 =

298 
	`xªÆloc
(
öput°ack
, 
öput°acksize
 * (*inputstack));

299 
curöput
 = 
öput°ack
[
öput°acksize
 - 1];

301 
	`‰ì
(
öput°ack
);

302 
curöput
 = 
NULL
;

303 
öput°ack
 = 
NULL
;

305 
	}
}

308 
	$pushfûe
(

309 
FILE
 *
fûe
)

311 
öput°ack
 =

312 
	`xªÆloc
(
öput°ack
,

313 (
öput°acksize
 + 1Ë* (*
öput°ack
));

314 
öput°acksize
++;

315 
curöput
 = 
öput°ack
[
öput°acksize
 - 1] = 
fûe
;

316 
	}
}

320 
	$sour˚_f
(

321 
¨gc
,

322 **
¨gv
)

324 
FILE
 *
f
;

325 
c
, 
d⁄e
 = 0;

326 *
öput
;

327 **
v
;

329 
f
 = 
	`f›í
(
¨gv
[1], "r");

330 i‡(
f
 =
NULL
) {

331 
	`db¥ötf
(
	`_
("ˇn'à›í %s\n"), 
¨gv
[0]);

336 
	`pushfûe
(
f
);

337 !
d⁄e
) {

338 i‡((
öput
 = 
	`„tchlöe_öã∫Æ
()Ë=
NULL
)

340 
v
 = 
	`bªaklöe
(
öput
, &
c
);

341 i‡(
c
)

342 
d⁄e
 = 
	`comm™d
(
c
, 
v
);

343 
	`d⁄ñöe
(
öput
, 
v
);

347 
	}
}

350 
	$öput_öô
()

352 
	`add_comm™d
(&
sour˚_cmd
);

353 
	}
}

	@db/input.h

19 **
bªaklöe
(*
öput
, *
cou¡
);

20 
d⁄ñöe
(*
öput
, **
vec
);

21 *
„tchlöe
();

22 
öput_öô
();

23 
pushfûe
(
FILE
 *
fûe
);

	@db/io.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"öode.h
"

26 
	~"io.h
"

27 
	~"ouçut.h
"

28 
	~"öô.h
"

29 
	~"mÆloc.h
"

30 
	~"¸c.h
"

32 
p›_f
(
¨gc
, **
¨gv
);

33 
p›_hñp
();

34 
push_f
(
¨gc
, **
¨gv
);

35 
push_hñp
();

36 
°ack_f
(
¨gc
, **
¨gv
);

37 
°ack_hñp
();

38 
f‹w¨d_f
(
¨gc
, **
¨gv
);

39 
f‹w¨d_hñp
();

40 
back_f
(
¨gc
, **
¨gv
);

41 
back_hñp
();

42 
rög_f
(
¨gc
, **
¨gv
);

43 
rög_hñp
();

45 c⁄° 
cmdöfo_t
 
	gp›_cmd
 =

46 { "p›", 
NULL
, 
p›_f
, 0, 0, 0, NULL,

47 
N_
("p›Üoˇti⁄ fromÅhê°ack"), 
p›_hñp
 };

48 c⁄° 
cmdöfo_t
 
	gpush_cmd
 =

49 { "push", 
NULL
, 
push_f
, 0, 2, 0, 
N_
("[command]"),

50 
N_
("pushÜoˇti⁄Åÿthê°ack"), 
push_hñp
 };

51 c⁄° 
cmdöfo_t
 
	g°ack_cmd
 =

52 { "°ack", 
NULL
, 
°ack_f
, 0, 0, 0, NULL,

53 
N_
("võwÅhêloˇti⁄ sèck"), 
°ack_hñp
 };

54 c⁄° 
cmdöfo_t
 
	gf‹w¨d_cmd
 =

55 { "f‹w¨d", "f", 
f‹w¨d_f
, 0, 0, 0, 
NULL
,

56 
N_
("movêf‹w¨dÅÿ√xàíåy i¿thêposôi⁄Ñög"), 
f‹w¨d_hñp
 };

57 c⁄° 
cmdöfo_t
 
	gback_cmd
 =

58 { "back", "b", 
back_f
, 0, 0, 0, 
NULL
,

59 
N_
("movêtÿthê¥eviou†loˇti⁄ i¿thêposôi⁄Ñög"), 
back_hñp
 };

60 c⁄° 
cmdöfo_t
 
	grög_cmd
 =

61 { "rög", 
NULL
, 
rög_f
, 0, 1, 0, NULL,

62 
N_
("showÖosôi⁄Ñög o∏movêtÿ®•ecifi¯íåy"), 
rög_hñp
 };

64 
iocur_t
 *
	giocur_ba£
;

65 
iocur_t
 *
	giocur_t›
;

66 
	giocur_•
 = -1;

67 
	giocur_Àn
;

69 
	#RING_ENTRIES
 20

	)

70 
iocur_t
 
	giocur_rög
[
RING_ENTRIES
];

71 
	grög_hód
 = -1;

72 
	grög_èû
 = -1;

73 
	grög_cuºít
 = -1;

76 
	$io_öô
()

78 
	`add_comm™d
(&
p›_cmd
);

79 
	`add_comm™d
(&
push_cmd
);

80 
	`add_comm™d
(&
°ack_cmd
);

81 
	`add_comm™d
(&
f‹w¨d_cmd
);

82 
	`add_comm™d
(&
back_cmd
);

83 
	`add_comm™d
(&
rög_cmd
);

84 
	}
}

87 
	$off_cur
(

88 
off
,

89 
Àn
)

91 i‡(
iocur_t›
 =
NULL
 || 
off
 + 
Àn
 > 
	`BBTOB
(iocur_t›->
bÀn
))

92 
	`db¥ötf
(
	`_
("ˇn'à£àblock off£àtÿ%d\n"), 
off
);

94 
iocur_t›
->
boff
 = 
off
;

95 
iocur_t›
->
off
 = ((
xfs_off_t
)iocur_t›->
bb
 << 
BBSHIFT
) + off;

96 
iocur_t›
->
Àn
 =Üen;

97 
iocur_t›
->
d©a
 = (*)((*)iocur_t›->
buf
 + 
off
);

99 
	}
}

102 
	$p›_cur
()

104 i‡(
iocur_•
 < 0) {

105 
	`db¥ötf
(
	`_
("can'tÖopánything from I/O stack\n"));

108 i‡(
iocur_t›
->
bp
) {

109 
	`libxfs_putbuf
(
iocur_t›
->
bp
);

110 
iocur_t›
->
bp
 = 
NULL
;

112 i‡(
iocur_t›
->
bbm≠
) {

113 
	`‰ì
(
iocur_t›
->
bbm≠
);

114 
iocur_t›
->
bbm≠
 = 
NULL
;

116 i‡(--
iocur_•
 >= 0) {

117 
iocur_t›
 = 
iocur_ba£
 + 
iocur_•
;

118 
cur_typ
 = 
iocur_t›
->
typ
;

120 
iocur_t›
 = 
iocur_ba£
;

121 
iocur_•
 = 0;

123 
	}
}

127 
	$p›_f
(

128 
¨gc
,

129 **
¨gv
)

131 
	`p›_cur
();

133 
	}
}

136 
	$p›_hñp
()

138 
	`db¥ötf
(
	`_
(

143 
	}
}

146 
	$¥öt_iocur
(

147 *
èg
,

148 
iocur_t
 *
ioc
)

150 
i
;

152 
	`db¥ötf
("%s\n", 
èg
);

153 
	`db¥ötf
(
	`_
("\tbyã off£à%Œd,Üígth %d\n"), 
ioc
->
off
, ioc->
Àn
);

154 
	`db¥ötf
(
	`_
("\tbuf„∏block %Œd (fsbnÿ%Œd), %d bb%s\n"), 
ioc
->
bb
,

155 (
xfs_fsblock_t
)
	`XFS_DADDR_TO_FSB
(
mp
, 
ioc
->
bb
), ioc->
bÀn
,

156 
ioc
->
bÀn
 == 1 ? "" : "s");

157 i‡(
ioc
->
bbm≠
) {

158 
	`db¥ötf
(
	`_
("\tblock map"));

159 
i
 = 0; i < 
ioc
->
bbm≠
->
nm≠s
; i++)

160 
	`db¥ötf
(" %Œd:%d", 
ioc
->
bbm≠
->
b
[
i
].
bm_bn
,

161 
ioc
->
bbm≠
->
b
[
i
].
bm_Àn
);

162 
	`db¥ötf
("\n");

164 
	`db¥ötf
(
	`_
("\töodê%Œd, dú inodê%Œd,Åy≥ %s\n"), 
ioc
->
öo
,

165 
ioc
->
dúöo
, ioc->
typ
 =
NULL
 ? 
	`_
("n⁄e"Ë: ioc->typ->
«me
);

166 
	}
}

169 
	$¥öt_rög
()

171 
i
;

172 
iocur_t
 *
ioc
;

174 i‡(
rög_cuºít
 == -1) {

175 
	`db¥ötf
(
	`_
("noÉntries inÜocationÑing.\n"));

179 
	`db¥ötf
(
	`_
("Åype bblock bblen fsbno inode\n"));

181 
i
 = 
rög_hód
;

183 
ioc
 = &
iocur_rög
[
i
];

184 i‡(
i
 =
rög_cuºít
)

185 
	`¥ötf
("*%2d: ", 
i
);

187 
	`¥ötf
(" %2d: ", 
i
);

189 
	`db¥ötf
("%-7.7s %8lld %5d %8lld %9lld\n",

190 
ioc
->
typ
 =
NULL
 ? "n⁄e" : ioc->typ->
«me
,

191 
ioc
->
bb
,

192 
ioc
->
bÀn
,

193 (
xfs_fsblock_t
)
	`XFS_DADDR_TO_FSB
(
mp
, 
ioc
->
bb
),

194 
ioc
->
öo


197 i‡(
i
 =
rög_èû
)

200 
i
 = (i+(
RING_ENTRIES
-1))%RING_ENTRIES;

202 
	}
}

206 
	$push_cur
()

208 i‡(
iocur_•
 + 1 >
iocur_Àn
) {

209 
iocur_ba£
 = 
	`xªÆloc
(iocur_base,

210 (*
iocur_ba£
Ë* (
iocur_Àn
 + 1));

211 
iocur_Àn
++;

213 
iocur_•
++;

214 
iocur_t›
 = 
iocur_ba£
 + 
iocur_•
;

215 
	`mem£t
(
iocur_t›
, 0, (*
iocur_ba£
));

216 
iocur_t›
->
öo
 = 
iocur_•
 > 0 ? iocur_t›[-1].öÿ: 
NULLFSINO
;

217 
iocur_t›
->
dúöo
 = 
iocur_•
 > 0 ? iocur_t›[-1].dúöÿ: 
NULLFSINO
;

218 
iocur_t›
->
mode
 = 
iocur_•
 > 0 ? iocur_top[-1].mode : 0;

219 
cur_typ
 = 
NULL
;

220 
	}
}

223 
	$push_f
(

224 
¨gc
,

225 **
¨gv
)

227 c⁄° 
cmdöfo_t
 *
˘
;

229 i‡(
¨gc
 > 1) {

231 
˘
 = 
	`föd_comm™d
(
¨gv
[1]);

232 i‡(
˘
 =
NULL
) {

233 
	`db¥ötf
(
	`_
("nÿsuch comm™d %s\n"), 
¨gv
[1]);

236 i‡(!
˘
->
ˇ≈ush
) {

237 
	`db¥ötf
(
	`_
("nÿpush f‹máŒowed f‹ %s\n"), 
¨gv
[1]);

243 
	`push_cur
();

244 i‡(
iocur_t›
[-1].
typ
 && iocur_t›[-1].typ->
ty≤m
 =
TYP_INODE
)

245 
	`£t_cur_öode
(
iocur_t›
[-1].
öo
);

247 
	`£t_cur
(
iocur_t›
[-1].
typ
, iocur_t›[-1].
bb
,

248 
iocur_t›
[-1].
bÀn
, 
DB_RING_IGN
,

249 
iocur_t›
[-1].
bbm≠
);

252 i‡(
¨gc
>1)

253 ()
	`comm™d
(
¨gc
-1, 
¨gv
+1);

255 
	}
}

258 
	$push_hñp
()

260 
	`db¥ötf
(
	`_
(

267 
	}
}

272 
	$f‹w¨d_f
(

273 
¨gc
,

274 **
¨gv
)

276 i‡(
rög_cuºít
 == -1) {

277 
	`db¥ötf
(
	`_
("ring isÉmpty\n"));

280 i‡(
rög_cuºít
 =
rög_hód
) {

281 
	`db¥ötf
(
	`_
("no furtherÉntries\n"));

285 
rög_cuºít
 = (rög_cuºít+1)%
RING_ENTRIES
;

287 
	`£t_cur
(
iocur_rög
[
rög_cuºít
].
typ
,

288 
iocur_rög
[
rög_cuºít
].
bb
,

289 
iocur_rög
[
rög_cuºít
].
bÀn
,

290 
DB_RING_IGN
,

291 
iocur_rög
[
rög_cuºít
].
bbm≠
);

294 
	}
}

297 
	$f‹w¨d_hñp
()

299 
	`db¥ötf
(
	`_
(

307 
	}
}

312 
	$back_f
(

313 
¨gc
,

314 **
¨gv
)

316 i‡(
rög_cuºít
 == -1) {

317 
	`db¥ötf
(
	`_
("ring isÉmpty\n"));

320 i‡(
rög_cuºít
 =
rög_èû
) {

321 
	`db¥ötf
(
	`_
("noÖreviousÉntries\n"));

325 
rög_cuºít
 = (rög_cuºít+(
RING_ENTRIES
-1))%RING_ENTRIES;

327 
	`£t_cur
(
iocur_rög
[
rög_cuºít
].
typ
,

328 
iocur_rög
[
rög_cuºít
].
bb
,

329 
iocur_rög
[
rög_cuºít
].
bÀn
,

330 
DB_RING_IGN
,

331 
iocur_rög
[
rög_cuºít
].
bbm≠
);

334 
	}
}

337 
	$back_hñp
()

339 
	`db¥ötf
(
	`_
(

346 
	}
}

350 
	$rög_f
(

351 
¨gc
,

352 **
¨gv
)

354 
ödex
;

356 i‡(
¨gc
 == 1) {

357 
	`¥öt_rög
();

361 
ödex
 = ()
	`°πoul
(
¨gv
[1], 
NULL
, 0);

362 i‡(
ödex
 < 0 || index >
RING_ENTRIES
) {

363 
	`db¥ötf
(
	`_
("övÆidÉ¡ry: %d\n"), 
ödex
);

367 
rög_cuºít
 = 
ödex
;

369 
	`£t_cur
(
iocur_rög
[
ödex
].
typ
,

370 
iocur_rög
[
ödex
].
bb
,

371 
iocur_rög
[
ödex
].
bÀn
,

372 
DB_RING_IGN
,

373 
iocur_rög
[
ödex
].
bbm≠
);

376 
	}
}

379 
	$rög_hñp
()

381 
	`db¥ötf
(
	`_
(

401 
RING_ENTRIES
);

402 
	}
}

406 
	$rög_add
()

408 i‡(
rög_hód
 == -1) {

410 
rög_hód
 = 0;

411 
rög_èû
 = 0;

412 
rög_cuºít
 = 0;

413 
iocur_rög
[0] = *
iocur_t›
;

415 i‡(
rög_cuºít
 =
rög_hód
) {

416 
rög_hód
 = (rög_hód+1)%
RING_ENTRIES
;

417 
iocur_rög
[
rög_hód
] = *
iocur_t›
;

418 i‡(
rög_hód
 =
rög_èû
)

419 
rög_èû
 = (rög_èû+1)%
RING_ENTRIES
;

420 
rög_cuºít
 = 
rög_hód
;

422 
rög_cuºít
 = (rög_cuºít+1)%
RING_ENTRIES
;

423 
iocur_rög
[
rög_cuºít
] = *
iocur_t›
;

426 
	}
}

429 
	$wrôe_cur_buf
()

431 
ªt
;

433 
ªt
 = -
	`libxfs_wrôebu‰
(
iocur_t›
->
bp
);

434 i‡(
ªt
 != 0)

435 
	`db¥ötf
(
	`_
("wrôêîr‹: %s\n"), 
	`°ªº‹
(
ªt
));

438 
ªt
 = -
	`libxfs_ªadbu‰
(
mp
->
m_ddev_èrgp
, 
iocur_t›
->
bb
, iocur_t›->
bp
,

439 
iocur_t›
->
bÀn
, 0);

440 i‡(
ªt
 != 0)

441 
	`db¥ötf
(
	`_
("ªadÉº‹: %s\n"), 
	`°ªº‹
(
ªt
));

442 
	}
}

445 
	$wrôe_cur_bbs
()

447 
ªt
;

449 
ªt
 = -
	`libxfs_wrôebu‰
(
iocur_t›
->
bp
);

450 i‡(
ªt
 != 0)

451 
	`db¥ötf
(
	`_
("wrôêîr‹: %s\n"), 
	`°ªº‹
(
ªt
));

455 
ªt
 = -
	`libxfs_ªadbu‰_m≠
(
mp
->
m_ddev_èrgp
, 
iocur_t›
->
bp
, 0);

456 i‡(
ªt
 != 0)

457 
	`db¥ötf
(
	`_
("ªadÉº‹: %s\n"), 
	`°ªº‹
(
ªt
));

458 
	}
}

461 
	$xfs_dummy_vîify
(

462 
xfs_buf
 *
bp
)

465 
	}
}

468 
	$xfs_vîify_ªˇlc_¸c
(

469 
xfs_buf
 *
bp
)

471 
	`xfs_buf_upd©e_cksum
(
bp
, 
iocur_t›
->
typ
->
¸c_off
);

472 
	}
}

475 
	$wrôe_cur
()

477 
boﬁ
 
skù_¸c
 = 
Ál£
;

479 i‡(
iocur_•
 < 0) {

480 
	`db¥ötf
(
	`_
("nothingÅo write\n"));

484 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) ||

485 !
iocur_t›
->
bp
->
b_›s
 ||

486 
iocur_t›
->
bp
->
b_›s
->
vîify_wrôe
 =
xfs_dummy_vîify
)

487 
skù_¸c
 = 
åue
;

489 i‡(!
skù_¸c
) {

490 i‡(
iocur_t›
->
öo_buf
) {

491 
	`libxfs_döode_ˇlc_¸c
(
mp
, 
iocur_t›
->
d©a
);

492 
iocur_t›
->
öo_¸c_ok
 = 1;

493 } i‡(
iocur_t›
->
dquŸ_buf
) {

494 
	`xfs_upd©e_cksum
(
iocur_t›
->
d©a
,

495 (
xfs_dqblk
),

496 
XFS_DQUOT_CRC_OFF
);

499 i‡(
iocur_t›
->
bbm≠
)

500 
	`wrôe_cur_bbs
();

502 
	`wrôe_cur_buf
();

505 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

506 
skù_¸c
 && 
iocur_t›
->
öo_buf
) {

507 
iocur_t›
->
öo_¸c_ok
 = 
	`libxfs_vîify_cksum
(iocur_t›->
d©a
,

508 
mp
->
m_sb
.
sb_öodesize
,

509 
XFS_DINODE_CRC_OFF
);

512 
	}
}

515 
	$£t_cur
(

516 c⁄° 
typ_t
 *
t
,

517 
__öt64_t
 
d
,

518 
c
,

519 
rög_Êag
,

520 
bbm≠_t
 *
bbm≠
)

522 
xfs_buf
 *
bp
;

523 
xfs_öo_t
 
dúöo
;

524 
xfs_öo_t
 
öo
;

525 
__uöt16_t
 
mode
;

526 c⁄° 
xfs_buf_›s
 *
›s
 = 
t
 ?Å->
b›s
 : 
NULL
;

528 i‡(
iocur_•
 < 0) {

529 
	`db¥ötf
(
	`_
("set_curÇo stackÉlementÅo set\n"));

534 
öo
 = 
iocur_t›
->ino;

535 
dúöo
 = 
iocur_t›
->dirino;

536 
mode
 = 
iocur_t›
->mode;

537 
	`p›_cur
();

538 
	`push_cur
();

540 i‡(
bbm≠
) {

541 #ifde‡
DEBUG_BBMAP


542 
i
;

543 
	`¥ötf
(
	`_
("xfs_db gŸá bbm≠ f‹ %Œd\n"), ()
d
);

544 
	`¥ötf
(
	`_
("\tblock map"));

545 
i
 = 0; i < 
bbm≠
->
nm≠s
; i++)

546 
	`¥ötf
(" %Œd:%d", ()
bbm≠
->
b
[
i
].
bm_bn
,

547 
bbm≠
->
b
[
i
].
bm_Àn
);

548 
	`¥ötf
("\n");

550 
iocur_t›
->
bbm≠
 = 
	`mÆloc
((bbmap));

551 i‡(!
iocur_t›
->
bbm≠
)

553 
	`mem˝y
(
iocur_t›
->
bbm≠
, bbmap, (bbmap));

554 
bp
 = 
	`libxfs_ªadbuf_m≠
(
mp
->
m_ddev_èrgp
, 
bbm≠
->
b
,

555 
bbm≠
->
nm≠s
, 0, 
›s
);

557 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_ddev_èrgp
, 
d
, 
c
, 0, 
›s
);

558 
iocur_t›
->
bbm≠
 = 
NULL
;

565 i‡(!
bp
 || (bp->
b_îr‹
 && bp->b_îr‹ !-
EFSCORRUPTED
 &&

566 
bp
->
b_îr‹
 !-
EFSBADCRC
))

568 
iocur_t›
->
buf
 = 
bp
->
b_addr
;

569 
iocur_t›
->
bp
 = bp;

570 i‡(!
›s
)

571 
bp
->
b_Êags
 |
LIBXFS_B_UNCHECKED
;

573 
iocur_t›
->
bb
 = 
d
;

574 
iocur_t›
->
bÀn
 = 
c
;

575 
iocur_t›
->
boff
 = 0;

576 
iocur_t›
->
d©a
 = iocur_t›->
buf
;

577 
iocur_t›
->
Àn
 = 
	`BBTOB
(
c
);

578 
iocur_t›
->
off
 = 
d
 << 
BBSHIFT
;

579 
iocur_t›
->
typ
 = 
cur_typ
 = 
t
;

580 
iocur_t›
->
öo
 = ino;

581 
iocur_t›
->
dúöo
 = dirino;

582 
iocur_t›
->
mode
 = mode;

583 
iocur_t›
->
öo_buf
 = 0;

584 
iocur_t›
->
dquŸ_buf
 = 0;

587 i‡(
rög_Êag
)

588 
	`rög_add
();

589 
	}
}

592 
	$£t_iocur_ty≥
(

593 c⁄° 
typ_t
 *
t
)

595 
xfs_buf
 *
bp
 = 
iocur_t›
->bp;

597 
iocur_t›
->
typ
 = 
t
;

600 i‡(!
bp
)

602 i‡(!
t
->
b›s
) {

603 
bp
->
b_›s
 = 
NULL
;

604 
bp
->
b_Êags
 |
LIBXFS_B_UNCHECKED
;

607 i‡(!(
bp
->
b_Êags
 & 
LIBXFS_B_UPTODATE
))

609 
bp
->
b_îr‹
 = 0;

610 
bp
->
b_›s
 = 
t
->
b›s
;

611 
bp
->
b_›s
->
	`vîify_ªad
(bp);

612 
bp
->
b_Êags
 &~
LIBXFS_B_UNCHECKED
;

613 
	}
}

616 
	$°ack_hñp
()

618 
	`db¥ötf
(
	`_
(

629 
	}
}

633 
	$°ack_f
(

634 
¨gc
,

635 **
¨gv
)

637 
i
;

638 
ègbuf
[8];

640 
i
 = 
iocur_•
; i > 0; i--) {

641 
	`¢¥ötf
(
ègbuf
, —agbuf), "%d: ", 
i
);

642 
	`¥öt_iocur
(
ègbuf
, &
iocur_ba£
[
i
]);

645 
	}
}

	@db/io.h

19 
	gtyp
;

21 
	#BBMAP_SIZE
 (
XFS_MAX_BLOCKSIZE
 / 
BBSIZE
)

	)

22 
	sbbm≠
 {

23 
	mnm≠s
;

24 
xfs_buf_m≠
 
	mb
[
BBMAP_SIZE
];

25 } 
	tbbm≠_t
;

27 
	siocur
 {

28 
__öt64_t
 
	mbb
;

29 
	mbÀn
;

30 
	mboff
;

31 *
	mbuf
;

32 *
	md©a
;

33 
xfs_öo_t
 
	mdúöo
;

34 
xfs_öo_t
 
	möo
;

35 
	mÀn
;

36 
__uöt16_t
 
	mmode
;

37 
xfs_off_t
 
	moff
;

38 c⁄° 
typ
 *
	mtyp
;

39 
bbm≠_t
 *
	mbbm≠
;

40 
xfs_buf
 *
	mbp
;

41 
	möo_¸c_ok
:1;

42 
	möo_buf
:1;

43 
	mdquŸ_buf
:1;

44 
	m√ed_¸c
:1;

45 } 
	tiocur_t
;

47 
	#DB_RING_ADD
 1

	)

48 
	#DB_RING_IGN
 0

	)

50 
iocur_t
 *
iocur_ba£
;

51 
iocur_t
 *
iocur_t›
;

52 
iocur_•
;

53 
iocur_Àn
;

55 
io_öô
();

56 
off_cur
(
off
, 
Àn
);

57 
p›_cur
();

58 
¥öt_iocur
(*
èg
, 
iocur_t
 *
ioc
);

59 
push_cur
();

60 
ªad_buf
(
__öt64_t
 
daddr
, 
cou¡
, *
buÂ
);

61 
wrôe_cur
();

62 
£t_cur
(c⁄° 
typ
 *
t
, 
__öt64_t
 
d
, 
c
, 
rög_add
,

63 
bbm≠_t
 *
bbm≠
);

64 
rög_add
();

65 
£t_iocur_ty≥
(c⁄° 
typ
 *
t
);

66 
xfs_dummy_vîify
(
xfs_buf
 *
bp
);

67 
xfs_vîify_ªˇlc_¸c
(
xfs_buf
 *
bp
);

72 
ölöe
 

73 
	$iocur_¸c_vÆid
()

75 i‡(!
iocur_t›
->
bp
)

77 i‡(
iocur_t›
->
bp
->
b_Êags
 & 
LIBXFS_B_UNCHECKED
)

79  (
iocur_t›
->
bp
->
b_îr‹
 !-
EFSBADCRC
 &&

80 (!
iocur_t›
->
öo_buf
 || iocur_t›->
öo_¸c_ok
));

81 
	}
}

	@db/logformat.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"öô.h
"

22 
	~"ouçut.h
"

23 
	~"libxlog.h
"

25 
	#MAX_LSUNIT
 256 * 1024

	)

28 
	$logf‹m©_f
(
¨gc
, **
¨gv
)

30 
xfs_daddr_t
 
hód_blk
;

31 
xfs_daddr_t
 
èû_blk
;

32 
logvîsi⁄
;

33 
lsunô
 = -1;

34 
cy˛e
 = -1;

35 
îr‹
;

36 
c
;

38 
logvîsi⁄
 = 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
) ? 2 : 1;

40 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:s:")Ë!
EOF
) {

41 
c
) {

43 
cy˛e
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

44 i‡(
cy˛e
 == 0) {

45 
	`db¥ötf
("invalid cycle\n");

50 
lsunô
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

55 i‡(
lsunô
 > 1 &&

56 (
lsunô
 % 
mp
->
m_sb
.
sb_blocksize
 ||

57 (
logvîsi⁄
 =2 && 
lsunô
 > 
MAX_LSUNIT
))) {

58 
	`db¥ötf
("invalidÜog stripe unit\n");

63 
	`db¥ötf
("invalid option\n");

72 
	`mem£t
(
mp
->
m_log
, 0, (
xlog
));

73 
mp
->
m_log
->
l_mp
 = mp;

74 
mp
->
m_log
->
l_dev
 = mp->
m_logdev_èrgp
;

75 
mp
->
m_log
->
l_logBBsize
 = 
	`XFS_FSB_TO_BB
(mp, mp->
m_sb
.
sb_logblocks
);

76 
mp
->
m_log
->
l_logBB°¨t
 = 
	`XFS_FSB_TO_DADDR
(mp, mp->
m_sb
.
sb_log°¨t
);

77 
mp
->
m_log
->
l_£˘BBsize
 = 
BBSIZE
;

78 i‡(
	`xfs_sb_vîsi⁄_has£˘‹
(&
mp
->
m_sb
))

79 
mp
->
m_log
->
l_£˘BBsize
 <<(mp->
m_sb
.
sb_log£˘log
 - 
BBSHIFT
);

80 
mp
->
m_log
->
l_£˘BBsize
 = 
	`BTOBB
(mp->m_log->l_sectBBsize);

82 
îr‹
 = 
	`xlog_föd_èû
(
mp
->
m_log
, &
hód_blk
, &
èû_blk
);

83 i‡(
îr‹
) {

84 
	`db¥ötf
("couldÇot findÜog head/tail\n");

87 i‡(
hód_blk
 !
èû_blk
) {

88 
	`db¥ötf
(
	`_
(

97 i‡(
cy˛e
 < 0)

98 
cy˛e
 = 
mp
->
m_log
->
l_cuº_cy˛e
;

99 i‡(
lsunô
 < 0)

100 
lsunô
 = 
mp
->
m_sb
.
sb_logsunô
;

102 
	`db¥ötf
("FormattingÅheÜogÅo cycle %d, stripe unit %d bytes.\n",

103 
cy˛e
, 
lsunô
);

104 
îr‹
 = -
	`libxfs_log_˛ór
(
mp
->
m_logdev_èrgp
, 
NULL
,

105 
mp
->
m_log
->
l_logBB°¨t
,

106 
mp
->
m_log
->
l_logBBsize
,

107 &
mp
->
m_sb
.
sb_uuid
, 
logvîsi⁄
, 
lsunô
,

108 
XLOG_FMT
, 
cy˛e
, 
Ál£
);

109 i‡(
îr‹
) {

110 
	`db¥ötf
("îr‹ f‹m©tögÜog - %d\n", 
îr‹
);

111  
îr‹
;

115 
	}
}

118 
	$logf‹m©_hñp
()

120 
	`db¥ötf
(
	`_
(

128 
	}
}

130 c⁄° 
cmdöfo
 
	glogf‹m©_cmd
 = {

131 .
«me
 = "logformat",

132 .
	gÆäame
 = 
NULL
,

133 .
	gcfunc
 = 
logf‹m©_f
,

134 .
	g¨gmö
 = 0,

135 .
	g¨gmax
 = 4,

136 .
	gˇ≈ush
 = 0,

137 .
	g¨gs
 = 
N_
("[-c cycle] [-s sunit]"),

138 .
	g⁄ñöe
 = 
N_
("reformatÅheÜog"),

139 .
	ghñp
 = 
logf‹m©_hñp
,

143 
	$logf‹m©_öô
()

145 i‡(!
ex≥π_mode
)

148 
	`add_comm™d
(&
logf‹m©_cmd
);

149 
	}
}

	@db/logformat.h

19 
logf‹m©_öô
();

	@db/malloc.c

19 
	~"libxfs.h
"

20 
	~"öô.h
"

21 
	~"mÆloc.h
"

22 
	~"ouçut.h
"

25 
	$badmÆloc
()

27 
	`db¥ötf
(
	`_
("%s: ouào‡mem‹y\n"), 
¥og«me
);

28 
	`exô
(4);

29 
	}
}

32 
	$xˇŒoc
(

33 
size_t
 
√Àm
,

34 
size_t
 
ñsize
)

36 *
±r
;

38 
±r
 = 
	`ˇŒoc
(
√Àm
, 
ñsize
);

39 i‡(
±r
)

40  
±r
;

41 
	`badmÆloc
();

43  
NULL
;

44 
	}
}

47 
	$x‰ì
(

48 *
±r
)

50 
	`‰ì
(
±r
);

51 
	}
}

54 
	$xmÆloc
(

55 
size_t
 
size
)

57 *
±r
;

59 
±r
 = 
	`vÆloc
(
size
);

60 i‡(
±r
)

61  
±r
;

62 
	`badmÆloc
();

64  
NULL
;

65 
	}
}

68 
	$xªÆloc
(

69 *
±r
,

70 
size_t
 
size
)

72 
±r
 = 
	`ªÆloc
’å, 
size
);

73 i‡(
±r
 || !
size
)

74  
±r
;

75 
	`badmÆloc
();

77  
NULL
;

78 
	}
}

81 
	$x°rdup
(

82 c⁄° *
s1
)

84 *
s
;

86 
s
 = 
	`°rdup
(
s1
);

87 i‡(
s
)

88  
s
;

89 
	`badmÆloc
();

91  
NULL
;

92 
	}
}

	@db/malloc.h

19 *
xˇŒoc
(
size_t
 
√Àm
, size_à
ñsize
);

20 
x‰ì
(*
±r
);

21 *
xmÆloc
(
size_t
 
size
);

22 *
xªÆloc
(*
±r
, 
size_t
 
size
);

23 *
x°rdup
(c⁄° *
s1
);

	@db/metadump.c

19 
	~"libxfs.h
"

20 
	~"libxlog.h
"

21 
	~"bm≠.h
"

22 
	~"comm™d.h
"

23 
	~"mëadump.h
"

24 
	~"io.h
"

25 
	~"ouçut.h
"

26 
	~"ty≥.h
"

27 
	~"öô.h
"

28 
	~"sig.h
"

29 
	~"xfs_mëadump.h
"

30 
	~"Âröt.h
"

31 
	~"Áddr.h
"

32 
	~"fõld.h
"

33 
	~"dú2.h
"

35 
	#DEFAULT_MAX_EXT_SIZE
 1000

	)

43 
	#DUP_MAX
 5

	)

47 
mëadump_f
(
¨gc
, **
¨gv
);

48 
mëadump_hñp
();

58 c⁄° 
cmdöfo_t
 
	gmëadump_cmd
 =

59 { "mëadump", 
NULL
, 
mëadump_f
, 0, -1, 0,

60 
N_
("[-a] [-e] [-g] [-m max_extent] [-w] [-o] filename"),

61 
N_
("dum∞mëad©®tÿ®fûe"), 
mëadump_hñp
 };

63 
FILE
 *
	goutf
;

65 
xfs_mëablock_t
 *
	gmëablock
;

66 
__be64
 *
	gblock_ödex
;

67 *
	gblock_buf„r
;

69 
	gnum_ödi˚s
;

70 
	gcur_ödex
;

72 
xfs_öo_t
 
	gcur_öo
;

74 
	gshow_¥ogªss
 = 0;

75 
	g°›_⁄_ªad_îr‹
 = 0;

76 
	gmax_exã¡_size
 = 
DEFAULT_MAX_EXT_SIZE
;

77 
	gobfusˇã
 = 1;

78 
	gzîo_°Æe_d©a
 = 1;

79 
	gshow_w¨nögs
 = 0;

80 
	g¥ogªss_sö˚_w¨nög
 = 0;

83 
	$mëadump_öô
()

85 
	`add_comm™d
(&
mëadump_cmd
);

86 
	}
}

89 
	$mëadump_hñp
()

91 
	`db¥ötf
(
	`_
(

103 "\n"), 
DEFAULT_MAX_EXT_SIZE
);

104 
	}
}

107 
	$¥öt_w¨nög
(c⁄° *
fmt
, ...)

109 
buf
[200];

110 
va_li°
 
≠
;

112 i‡(
	`£íöt
())

115 
	`va_°¨t
(
≠
, 
fmt
);

116 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

117 
	`va_íd
(
≠
);

118 
buf
[(buf)-1] = '\0';

120 
	`Ârötf
(
°dîr
, "%s%s: %s\n", 
¥ogªss_sö˚_w¨nög
 ? "\n" : "",

121 
¥og«me
, 
buf
);

122 
¥ogªss_sö˚_w¨nög
 = 0;

123 
	}
}

126 
	$¥öt_¥ogªss
(c⁄° *
fmt
, ...)

128 
buf
[60];

129 
va_li°
 
≠
;

130 
FILE
 *
f
;

132 i‡(
	`£íöt
())

135 
	`va_°¨t
(
≠
, 
fmt
);

136 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

137 
	`va_íd
(
≠
);

138 
buf
[(buf)-1] = '\0';

140 
f
 = (
outf
 =
°dout
Ë? 
°dîr
 : stdout;

141 
	`Ârötf
(
f
, "\r%-59s", 
buf
);

142 
	`fÊush
(
f
);

143 
¥ogªss_sö˚_w¨nög
 = 1;

144 
	}
}

156 
	$wrôe_ödex
()

161 
mëablock
->
mb_cou¡
 = 
	`˝u_to_be16
(
cur_ödex
);

162 i‡(
	`fwrôe
(
mëablock
, (
cur_ödex
 + 1Ë<< 
BBSHIFT
, 1, 
outf
) != 1) {

163 
	`¥öt_w¨nög
("îr‹ wrôögÅÿfûe: %s", 
	`°ªº‹
(
î∫o
));

164  -
î∫o
;

167 
	`mem£t
(
block_ödex
, 0, 
num_ödi˚s
 * (
__be64
));

168 
cur_ödex
 = 0;

170 
	}
}

176 
	$wrôe_buf_£gmít
(

177 *
d©a
,

178 
__öt64_t
 
off
,

179 
Àn
)

181 
i
;

182 
ªt
;

184 
i
 = 0; i < 
Àn
; i++, 
off
++, 
d©a
 +
BBSIZE
) {

185 
block_ödex
[
cur_ödex
] = 
	`˝u_to_be64
(
off
);

186 
	`mem˝y
(&
block_buf„r
[
cur_ödex
 << 
BBSHIFT
], 
d©a
, 
BBSIZE
);

187 i‡(++
cur_ödex
 =
num_ödi˚s
) {

188 
ªt
 = 
	`wrôe_ödex
();

189 i‡(
ªt
)

190  -
EIO
;

194 
	}
}

208 
	$wrôe_buf
(

209 
iocur_t
 *
buf
)

211 
xfs_buf
 *
bp
 = 
buf
->bp;

212 
i
;

213 
ªt
;

220 i‡(
buf
->
√ed_¸c
 && 
bp
 && bp->
b_›s
 && !bp->
b_îr‹
) {

221 
bp
->
b_›s
->
	`vîify_wrôe
(bp);

222 i‡(
bp
->
b_îr‹
) {

223 
	`¥öt_w¨nög
(

225 
bp
->
b_›s
->
«me
,

226 ()
bp
->
b_bn
, bp->
b_bcou¡
);

231 i‡(!
buf
->
bbm≠
) {

232 
ªt
 = 
	`wrôe_buf_£gmít
(
buf
->
d©a
, buf->
bb
, buf->
bÀn
);

233 i‡(
ªt
)

234  
ªt
;

236 
Àn
 = 0;

237 
i
 = 0; i < 
buf
->
bbm≠
->
nm≠s
; i++) {

238 
ªt
 = 
	`wrôe_buf_£gmít
(
buf
->
d©a
 + 
	`BBTOB
(
Àn
),

239 
buf
->
bbm≠
->
b
[
i
].
bm_bn
,

240 
buf
->
bbm≠
->
b
[
i
].
bm_Àn
);

241 i‡(
ªt
)

242  
ªt
;

243 
Àn
 +
buf
->
bbm≠
->
b
[
i
].
bm_Àn
;

246  
	`£íöt
(Ë? -
EINTR
 : 0;

247 
	}
}

255 
	$zîo_båì_node
(

256 
xfs_båì_block
 *
block
,

257 
ty≤m_t
 
bty≥
)

259 
ƒecs
;

260 
xfs_bmbt_±r_t
 *
bµ
;

261 
xfs_bmbt_key_t
 *
bkp
;

262 
xfs_öobt_±r_t
 *
ùp
;

263 
xfs_öobt_key_t
 *
ikp
;

264 
xfs_Æloc_±r_t
 *
≠p
;

265 
xfs_Æloc_key_t
 *
akp
;

266 *
zp1
, *
zp2
;

267 *
key_íd
;

269 
ƒecs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

270 i‡(
ƒecs
 < 0)

273 
bty≥
) {

274 
TYP_BMAPBTA
:

275 
TYP_BMAPBTD
:

276 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[1])

279 
bkp
 = 
	`XFS_BMBT_KEY_ADDR
(
mp
, 
block
, 1);

280 
bµ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[1]);

281 
zp1
 = (*)&
bkp
[
ƒecs
];

282 
zp2
 = (*)&
bµ
[
ƒecs
];

283 
key_íd
 = (*)
bµ
;

285 
TYP_INOBT
:

286 
TYP_FINOBT
:

287 i‡(
ƒecs
 > 
mp
->
m_öobt_mxr
[1])

290 
ikp
 = 
	`XFS_INOBT_KEY_ADDR
(
mp
, 
block
, 1);

291 
ùp
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_öobt_mxr
[1]);

292 
zp1
 = (*)&
ikp
[
ƒecs
];

293 
zp2
 = (*)&
ùp
[
ƒecs
];

294 
key_íd
 = (*)
ùp
;

296 
TYP_BNOBT
:

297 
TYP_CNTBT
:

298 i‡(
ƒecs
 > 
mp
->
m_Æloc_mxr
[1])

301 
akp
 = 
	`XFS_ALLOC_KEY_ADDR
(
mp
, 
block
, 1);

302 
≠p
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

303 
zp1
 = (*)&
akp
[
ƒecs
];

304 
zp2
 = (*)&
≠p
[
ƒecs
];

305 
key_íd
 = (*)
≠p
;

313 
	`mem£t
(
zp1
, 0, 
key_íd
 - zp1);

316 
	`mem£t
(
zp2
, 0, (*)
block
 + 
mp
->
m_sb
.
sb_blocksize
 - zp2);

317 
	}
}

325 
	$zîo_båì_Àaf
(

326 
xfs_båì_block
 *
block
,

327 
ty≤m_t
 
bty≥
)

329 
ƒecs
;

330 
xfs_bmbt_ªc
 *
bΩ
;

331 
xfs_öobt_ªc
 *
úp
;

332 
xfs_Æloc_ªc
 *
¨p
;

333 *
zp
;

335 
ƒecs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

336 i‡(
ƒecs
 < 0)

339 
bty≥
) {

340 
TYP_BMAPBTA
:

341 
TYP_BMAPBTD
:

342 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[0])

345 
bΩ
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1);

346 
zp
 = (*)&
bΩ
[
ƒecs
];

348 
TYP_INOBT
:

349 
TYP_FINOBT
:

350 i‡(
ƒecs
 > 
mp
->
m_öobt_mxr
[0])

353 
úp
 = 
	`XFS_INOBT_REC_ADDR
(
mp
, 
block
, 1);

354 
zp
 = (*)&
úp
[
ƒecs
];

356 
TYP_BNOBT
:

357 
TYP_CNTBT
:

358 i‡(
ƒecs
 > 
mp
->
m_Æloc_mxr
[0])

361 
¨p
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

362 
zp
 = (*)&
¨p
[
ƒecs
];

369 
	`mem£t
(
zp
, 0, (*)
block
 + 
mp
->
m_sb
.
sb_blocksize
 - zp);

370 
	}
}

373 
	$zîo_båì_block
(

374 
xfs_båì_block
 *
block
,

375 
ty≤m_t
 
bty≥
)

377 
Àvñ
;

379 
Àvñ
 = 
	`be16_to_˝u
(
block
->
bb_Àvñ
);

381 i‡(
Àvñ
 > 0)

382 
	`zîo_båì_node
(
block
, 
bty≥
);

384 
	`zîo_båì_Àaf
(
block
, 
bty≥
);

385 
	}
}

388 
sˇn_båì
(

389 
xfs_agnumbî_t
 
agno
,

390 
xfs_agblock_t
 
agbno
,

391 
Àvñ
,

392 
ty≤m_t
 
bty≥
,

393 *
¨g
,

394 (*
func
)(
xfs_båì_block
 *
block
,

395 
xfs_agnumbî_t
 
agno
,

396 
xfs_agblock_t
 
agbno
,

397 
Àvñ
,

398 
ty≤m_t
 
bty≥
,

399 *
¨g
))

401 
rvÆ
 = 0;

403 
	`push_cur
();

404 
	`£t_cur
(&
ty±ab
[
bty≥
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
), 
blkbb
,

405 
DB_RING_IGN
, 
NULL
);

406 i‡(
iocur_t›
->
d©a
 =
NULL
) {

407 
	`¥öt_w¨nög
("ˇ¬ŸÑód %†block %u/%u", 
ty±ab
[
bty≥
].
«me
,

408 
agno
, 
agbno
);

409 
rvÆ
 = !
°›_⁄_ªad_îr‹
;

410 
p›_out
;

413 i‡(
zîo_°Æe_d©a
) {

414 
	`zîo_båì_block
(
iocur_t›
->
d©a
, 
bty≥
);

415 
iocur_t›
->
√ed_¸c
 = 1;

418 i‡(
	`wrôe_buf
(
iocur_t›
))

419 
p›_out
;

421 i‡(!(*
func
)(
iocur_t›
->
d©a
, 
agno
, 
agbno
, 
Àvñ
 - 1, 
bty≥
, 
¨g
))

422 
p›_out
;

423 
rvÆ
 = 1;

424 
p›_out
:

425 
	`p›_cur
();

426  
rvÆ
;

427 
	}
}

432 
	$vÆid_bno
(

433 
xfs_agnumbî_t
 
agno
,

434 
xfs_agblock_t
 
agbno
)

436 i‡(
agno
 < (
mp
->
m_sb
.
sb_agcou¡
 - 1Ë&& 
agbno
 > 0 &&

437 
agbno
 <
mp
->
m_sb
.
sb_agblocks
)

439 i‡(
agno
 =(
mp
->
m_sb
.
sb_agcou¡
 - 1Ë&& 
agbno
 > 0 &&

440 
agbno
 <(
mp
->
m_sb
.
sb_dblocks
 -

441 (
xfs_rfsblock_t
)(
mp
->
m_sb
.
sb_agcou¡
 - 1) *

442 
mp
->
m_sb
.
sb_agblocks
))

446 
	}
}

450 
	$sˇnfunc_‰ì•
(

451 
xfs_båì_block
 *
block
,

452 
xfs_agnumbî_t
 
agno
,

453 
xfs_agblock_t
 
agbno
,

454 
Àvñ
,

455 
ty≤m_t
 
bty≥
,

456 *
¨g
)

458 
xfs_Æloc_±r_t
 *
µ
;

459 
i
;

460 
numªcs
;

462 i‡(
Àvñ
 == 0)

465 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

466 i‡(
numªcs
 > 
mp
->
m_Æloc_mxr
[1]) {

467 i‡(
show_w¨nögs
)

468 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in %s block %u/%u",

469 
numªcs
, 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

473 
µ
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

474 
i
 = 0; i < 
numªcs
; i++) {

475 i‡(!
	`vÆid_bno
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]))) {

476 i‡(
show_w¨nögs
)

477 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

479 
agno
, 
	`be32_to_˝u
(
µ
[
i
]),

480 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

483 i‡(!
	`sˇn_båì
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 
bty≥
, 
¨g
,

484 
sˇnfunc_‰ì•
))

488 
	}
}

491 
	$c›y_‰ì_bno_båì
(

492 
xfs_agnumbî_t
 
agno
,

493 
xfs_agf_t
 *
agf
)

495 
xfs_agblock_t
 
roŸ
;

496 
Àvñs
;

498 
roŸ
 = 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_BNO
]);

499 
Àvñs
 = 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNO
]);

502 i‡(
roŸ
 =0 ||ÑoŸ > 
mp
->
m_sb
.
sb_agblocks
) {

503 i‡(
show_w¨nögs
)

504 
	`¥öt_w¨nög
("invalid blockÇumber (%u) in bnobt "

505 "roŸ i¿ag‡%u", 
roŸ
, 
agno
);

508 i‡(
Àvñs
 >
XFS_BTREE_MAXLEVELS
) {

509 i‡(
show_w¨nögs
)

510 
	`¥öt_w¨nög
("invalidÜevel (%u) in bnobtÑoot "

511 "öág‡%u", 
Àvñs
, 
agno
);

515  
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_BNOBT
, 
agf
, 
sˇnfunc_‰ì•
);

516 
	}
}

519 
	$c›y_‰ì_˙t_båì
(

520 
xfs_agnumbî_t
 
agno
,

521 
xfs_agf_t
 *
agf
)

523 
xfs_agblock_t
 
roŸ
;

524 
Àvñs
;

526 
roŸ
 = 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_CNT
]);

527 
Àvñs
 = 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNT
]);

530 i‡(
roŸ
 =0 ||ÑoŸ > 
mp
->
m_sb
.
sb_agblocks
) {

531 i‡(
show_w¨nögs
)

532 
	`¥öt_w¨nög
("invalid blockÇumber (%u) in cntbt "

533 "roŸ i¿ag‡%u", 
roŸ
, 
agno
);

536 i‡(
Àvñs
 >
XFS_BTREE_MAXLEVELS
) {

537 i‡(
show_w¨nögs
)

538 
	`¥öt_w¨nög
("invalidÜevel (%u) in cntbtÑoot "

539 "öág‡%u", 
Àvñs
, 
agno
);

543  
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_CNTBT
, 
agf
, 
sˇnfunc_‰ì•
);

544 
	}
}

547 
	$sˇnfunc_rm≠bt
(

548 
xfs_båì_block
 *
block
,

549 
xfs_agnumbî_t
 
agno
,

550 
xfs_agblock_t
 
agbno
,

551 
Àvñ
,

552 
ty≤m_t
 
bty≥
,

553 *
¨g
)

555 
xfs_rm≠_±r_t
 *
µ
;

556 
i
;

557 
numªcs
;

559 i‡(
Àvñ
 == 0)

562 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

563 i‡(
numªcs
 > 
mp
->
m_rm≠_mxr
[1]) {

564 i‡(
show_w¨nögs
)

565 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in %s block %u/%u",

566 
numªcs
, 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

570 
µ
 = 
	`XFS_RMAP_PTR_ADDR
(
block
, 1, 
mp
->
m_rm≠_mxr
[1]);

571 
i
 = 0; i < 
numªcs
; i++) {

572 i‡(!
	`vÆid_bno
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]))) {

573 i‡(
show_w¨nögs
)

574 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

576 
agno
, 
	`be32_to_˝u
(
µ
[
i
]),

577 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

580 i‡(!
	`sˇn_båì
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 
bty≥
, 
¨g
,

581 
sˇnfunc_rm≠bt
))

585 
	}
}

588 
	$c›y_rm≠_båì
(

589 
xfs_agnumbî_t
 
agno
,

590 
xfs_agf
 *
agf
)

592 
xfs_agblock_t
 
roŸ
;

593 
Àvñs
;

595 i‡(!
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

598 
roŸ
 = 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_RMAP
]);

599 
Àvñs
 = 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_RMAP
]);

602 i‡(
roŸ
 =0 ||ÑoŸ > 
mp
->
m_sb
.
sb_agblocks
) {

603 i‡(
show_w¨nögs
)

604 
	`¥öt_w¨nög
("invalid blockÇumber (%u) inÑmapbt "

605 "roŸ i¿ag‡%u", 
roŸ
, 
agno
);

608 i‡(
Àvñs
 >
XFS_BTREE_MAXLEVELS
) {

609 i‡(
show_w¨nögs
)

610 
	`¥öt_w¨nög
("invalidÜevel (%u) inÑmapbtÑoot "

611 "öág‡%u", 
Àvñs
, 
agno
);

615  
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_RMAPBT
, 
agf
, 
sˇnfunc_rm≠bt
);

616 
	}
}

619 
	$sˇnfunc_ªf˙tbt
(

620 
xfs_båì_block
 *
block
,

621 
xfs_agnumbî_t
 
agno
,

622 
xfs_agblock_t
 
agbno
,

623 
Àvñ
,

624 
ty≤m_t
 
bty≥
,

625 *
¨g
)

627 
xfs_ªfcou¡_±r_t
 *
µ
;

628 
i
;

629 
numªcs
;

631 i‡(
Àvñ
 == 0)

634 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

635 i‡(
numªcs
 > 
mp
->
m_ªfc_mxr
[1]) {

636 i‡(
show_w¨nögs
)

637 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in %s block %u/%u",

638 
numªcs
, 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

642 
µ
 = 
	`XFS_REFCOUNT_PTR_ADDR
(
block
, 1, 
mp
->
m_ªfc_mxr
[1]);

643 
i
 = 0; i < 
numªcs
; i++) {

644 i‡(!
	`vÆid_bno
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]))) {

645 i‡(
show_w¨nögs
)

646 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

648 
agno
, 
	`be32_to_˝u
(
µ
[
i
]),

649 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

652 i‡(!
	`sˇn_båì
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 
bty≥
, 
¨g
,

653 
sˇnfunc_ªf˙tbt
))

657 
	}
}

660 
	$c›y_ªfcou¡_båì
(

661 
xfs_agnumbî_t
 
agno
,

662 
xfs_agf
 *
agf
)

664 
xfs_agblock_t
 
roŸ
;

665 
Àvñs
;

667 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

670 
roŸ
 = 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_roŸ
);

671 
Àvñs
 = 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_Àvñ
);

674 i‡(
roŸ
 =0 ||ÑoŸ > 
mp
->
m_sb
.
sb_agblocks
) {

675 i‡(
show_w¨nögs
)

676 
	`¥öt_w¨nög
("invalid blockÇumber (%u) inÑefcntbt "

677 "roŸ i¿ag‡%u", 
roŸ
, 
agno
);

680 i‡(
Àvñs
 >
XFS_BTREE_MAXLEVELS
) {

681 i‡(
show_w¨nögs
)

682 
	`¥öt_w¨nög
("invalidÜevel (%u) inÑefcntbtÑoot "

683 "öág‡%u", 
Àvñs
, 
agno
);

687  
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_REFCBT
, 
agf
, 
sˇnfunc_ªf˙tbt
);

688 
	}
}

692 
	s«me_ít
 {

693 
«me_ít
 *
	m√xt
;

694 
xfs_dahash_t
 
	mhash
;

695 
	m«mñí
;

696 
	m«me
[1];

699 
	#NAME_TABLE_SIZE
 4096

	)

701 
«me_ít
 *
	g«mëabÀ
[
NAME_TABLE_SIZE
];

704 
	$«mëabÀ_˛ór
()

706 
i
;

707 
«me_ít
 *
ít
;

709 
i
 = 0; i < 
NAME_TABLE_SIZE
; i++) {

710 (
ít
 = 
«mëabÀ
[
i
])) {

711 
«mëabÀ
[
i
] = 
ít
->
√xt
;

712 
	`‰ì
(
ít
);

715 
	}
}

721 
«me_ít
 *

722 
	$«mëabÀ_föd
(
xfs_dahash_t
 
hash
, 
«mñí
, *
«me
)

724 
«me_ít
 *
ít
;

726 
ít
 = 
«mëabÀ
[
hash
 % 
NAME_TABLE_SIZE
];É¡;É¡ =É¡->
√xt
) {

727 i‡(
ít
->
hash
 =hash &&É¡->
«mñí
 ==Çamelen &&

728 !
	`memcmp
(
ít
->
«me
,Çame, 
«mñí
))

729  
ít
;

731  
NULL
;

732 
	}
}

738 
«me_ít
 *

739 
	$«mëabÀ_add
(
xfs_dahash_t
 
hash
, 
«mñí
, *
«me
)

741 
«me_ít
 *
ít
;

743 
ít
 = 
	`mÆloc
( *íà+ 
«mñí
);

744 i‡(!
ít
)

745  
NULL
;

747 
ít
->
«mñí
 =Çamelen;

748 
	`mem˝y
(
ít
->
«me
,Çame, 
«mñí
);

749 
ít
->
hash
 = hash;

750 
ít
->
√xt
 = 
«mëabÀ
[
hash
 % 
NAME_TABLE_SIZE
];

752 
«mëabÀ
[
hash
 % 
NAME_TABLE_SIZE
] = 
ít
;

754  
ít
;

755 
	}
}

757 
	#is_övÆid_ch¨
(
c
Ë((cË='/' || (cË='\0')

	)

758 
	#rﬁ32
(
x
,
y
Ë(((xË<< (y)Ë| ((xË>> (32 - (y))))

	)

760 
ölöe
 

761 
	$øndom_fûíame_ch¨
()

763 
fûíame_Æphabë
[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

767  
fûíame_Æphabë
[
	`øndom
() % ( filename_alphabet - 1)];

768 
	}
}

770 
	#ORPHANAGE
 "lo°+found"

	)

771 
	#ORPHANAGE_LEN
 ( (
ORPHANAGE
Ë- 1)

	)

773 
ölöe
 

774 
	$is_‹ph™age_dú
(

775 
xfs_mou¡
 *
mp
,

776 
xfs_öo_t
 
dú_öo
,

777 
size_t
 
«me_Àn
,

778 *
«me
)

780  
dú_öo
 =
mp
->
m_sb
.
sb_roŸöo
 &&

781 
«me_Àn
 =
ORPHANAGE_LEN
 &&

782 !
	`memcmp
(
«me
, 
ORPHANAGE
, 
ORPHANAGE_LEN
);

783 
	}
}

794 
	$ö_lo°_found
(

795 
xfs_öo_t
 
öo
,

796 
«mñí
,

797 *
«me
)

799 
xfs_öo_t
 
‹ph™age_öo
 = 0;

800 
s
[24];

801 
¶í
;

805 
	`ASSERT
(
öo
 != 0);

806 i‡(!
‹ph™age_öo
 && 
	`is_‹ph™age_dú
(
mp
, 
cur_öo
, 
«mñí
, 
«me
))

807 
‹ph™age_öo
 = 
öo
;

811 i‡(
öo
 =
‹ph™age_öo
)

816 i‡(
cur_öo
 !
‹ph™age_öo
)

824 
¶í
 = 
	`¢¥ötf
(
s
,  (s), "%Œu", (Ë
öo
);

826  
¶í
 =
«mñí
 && !
	`memcmp
(
«me
, 
s
,Çamelen);

827 
	}
}

835 
	$obfusˇã_«me
(

836 
xfs_dahash_t
 
hash
,

837 
size_t
 
«me_Àn
,

838 *
«me
)

840 *
√wp
 = 
«me
;

841 
i
;

842 
xfs_dahash_t
 
√w_hash
 = 0;

843 *
fú°
;

844 
high_bô
;

845 
shi·
;

854 i‡(
«me_Àn
 < 5)

862 
i
 = 0; i < 
«me_Àn
 - 5; i++) {

863 *
√wp
 = 
	`øndom_fûíame_ch¨
();

864 
√w_hash
 = *
√wp
 ^ 
	`rﬁ32
(new_hash, 7);

865 
√wp
++;

877 
√w_hash
 = 
	`rﬁ32
“ew_hash, 3Ë^ 
hash
;

879 
fú°
 = 
√wp
;

880 
high_bô
 = 0;

881 
shi·
 = 28; shift >= 0; shift -= 7) {

882 *
√wp
 = (
√w_hash
 >> 
shi·
 & 0x7fË^ 
high_bô
;

883 i‡(
	`is_övÆid_ch¨
(*
√wp
)) {

884 *
√wp
 ^= 1;

885 
high_bô
 = 0x80;

887 
high_bô
 = 0;

888 
	`ASSERT
(!
	`is_övÆid_ch¨
(*
√wp
));

889 
√wp
++;

899 i‡(
high_bô
) {

900 *
fú°
 ^= 0x10;

901 
	`ASSERT
(!
	`is_övÆid_ch¨
(*
fú°
));

903 
	`ASSERT
(
	`libxfs_da_hash«me
(
«me
, 
«me_Àn
Ë=
hash
);

904 
	}
}

991 
	$Êù_bô
(

992 
size_t
 
«me_Àn
,

993 *
«me
,

994 
uöt32_t
 
bô£q
)

996 
ödex
;

997 
size_t
 
off£t
;

998 *
p0
, *
p1
;

999 
m0
, 
m1
;

1001 
byã
;

1002 
bô
;

1003 } 
bô_to_Êù
[][2] = {

1023 
ödex
 = 0; index < 
	`ARRAY_SIZE
(
bô_to_Êù
); index++)

1024 i‡(
bô_to_Êù
[
ödex
][1].
byã
 >
«me_Àn
)

1032 i‡(
bô£q
 > --
ödex
)

1040 
off£t
 = 
«me_Àn
 - (
bô_to_Êù
[
ödex
][1].
byã
 + 1);

1041 
ödex
 -
bô£q
;

1043 
p0
 = 
«me
 + 
off£t
 + 
bô_to_Êù
[
ödex
][0].
byã
;

1044 
p1
 = 
«me
 + 
off£t
 + 
bô_to_Êù
[
ödex
][1].
byã
;

1045 
m0
 = 1 << 
bô_to_Êù
[
ödex
][0].
bô
;

1046 
m1
 = 1 << 
bô_to_Êù
[
ödex
][1].
bô
;

1050 i‡(
	`is_övÆid_ch¨
(*
p0
 ^ 
m0
Ë|| is_övÆid_ch¨(*
p1
 ^ 
m1
))

1053 *
p0
 ^
m0
;

1054 *
p1
 ^
m1
;

1057 
	}
}

1129 
	$föd_Æã∫©e
(

1130 
size_t
 
«me_Àn
,

1131 *
«me
,

1132 
uöt32_t
 
£q
)

1134 
uöt32_t
 
bô£q
 = 0;

1135 
uöt32_t
 
bôs
 = 
£q
;

1137 i‡(!
£q
)

1139 i‡(
«me_Àn
 < 2)

1142 
bô£q
 = 0; 
bôs
; bitseq++) {

1143 
uöt32_t
 
mask
 = 1 << 
bô£q
;

1144 
fb
;

1146 i‡(!(
bôs
 & 
mask
))

1149 
fb
 = 
	`Êù_bô
(
«me_Àn
, 
«me
, 
bô£q
);

1150 i‡(
fb
 < 1)

1151  
fb
 ? -1 : 0;

1152 
bôs
 ^
mask
;

1156 
	}
}

1168 
	$h™dÀ_du∂iˇã_«me
(
xfs_dahash_t
 
hash
, 
size_t
 
«me_Àn
, *
«me
)

1170 
√w_«me
[
«me_Àn
 + 1];

1171 
uöt32_t
 
£q
 = 1;

1173 i‡(!
	`«mëabÀ_föd
(
hash
, 
«me_Àn
, 
«me
))

1179 
found
;

1183 
	`mem˝y
(
√w_«me
, 
«me
, 
«me_Àn
);

1184 
found
 = 
	`föd_Æã∫©e
(
«me_Àn
, 
√w_«me
, 
£q
++);

1185 i‡(
found
 < 0)

1187 } !
found
);

1188 } 
	`«mëabÀ_föd
(
hash
, 
«me_Àn
, 
√w_«me
));

1194 
	`mem˝y
(
«me
, 
√w_«me
, 
«me_Àn
);

1197 
	}
}

1200 
	$gíî©e_obfusˇãd_«me
(

1201 
xfs_öo_t
 
öo
,

1202 
«mñí
,

1203 *
«me
)

1205 
xfs_dahash_t
 
hash
;

1213 i‡(
öo
 && 
	`ö_lo°_found
(öo, 
«mñí
, 
«me
))

1222 i‡(*
«me
 == '/')

1223 
«me
++;

1227 
hash
 = 
	`libxfs_da_hash«me
(
«me
, 
«mñí
);

1228 
	`obfusˇã_«me
(
hash
, 
«mñí
, 
«me
);

1236 i‡(!
	`h™dÀ_du∂iˇã_«me
(
hash
, 
«mñí
, 
«me
)) {

1237 
	`¥öt_w¨nög
("duplicateÇame for inode %llu "

1239 (Ë
öo
,

1240 (Ë
cur_öo
);

1246 i‡(!
	`«mëabÀ_add
(
hash
, 
«mñí
, 
«me
))

1247 
	`¥öt_w¨nög
("unableÅoÑecordÇame for inode %llu "

1249 (Ë
öo
,

1250 (Ë
cur_öo
);

1251 
	}
}

1254 
	$¥o˚ss_sf_dú
(

1255 
xfs_döode_t
 *
dù
)

1257 
xfs_dú2_sf_hdr
 *
sÂ
;

1258 
xfs_dú2_sf_íåy_t
 *
s„p
;

1259 
__uöt64_t
 
öo_dú_size
;

1260 
i
;

1262 
sÂ
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

1263 
öo_dú_size
 = 
	`be64_to_˝u
(
dù
->
di_size
);

1264 i‡(
öo_dú_size
 > 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
)) {

1265 
öo_dú_size
 = 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
);

1266 i‡(
show_w¨nögs
)

1267 
	`¥öt_w¨nög
("invalid size in dir inode %llu",

1268 ()
cur_öo
);

1271 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
);

1272 
i
 = 0; (ò< 
sÂ
->
cou¡
) &&

1273 ((*)
s„p
 - (*)
sÂ
 < 
öo_dú_size
); 
i
++) {

1279 
«mñí
 = 
s„p
->namelen;

1281 i‡(
«mñí
 == 0) {

1282 i‡(
show_w¨nögs
)

1283 
	`¥öt_w¨nög
("zeroÜengthÉntry in dir inode "

1284 "%Œu", ()
cur_öo
);

1285 i‡(
i
 !
sÂ
->
cou¡
 - 1)

1287 
«mñí
 = 
öo_dú_size
 - ((*)&
s„p
->
«me
[0] -

1288 (*)
sÂ
);

1289 } i‡((*)
s„p
 - (*)
sÂ
 +

1290 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 
s„p
->
«mñí
) >

1291 
öo_dú_size
) {

1292 i‡(
show_w¨nögs
)

1293 
	`¥öt_w¨nög
("entryÜength in dir inode %llu "

1294 "ovîÊow†•a˚", ()
cur_öo
);

1295 i‡(
i
 !
sÂ
->
cou¡
 - 1)

1297 
«mñí
 = 
öo_dú_size
 - ((*)&
s„p
->
«me
[0] -

1298 (*)
sÂ
);

1301 i‡(
obfusˇã
)

1302 
	`gíî©e_obfusˇãd_«me
(

1303 
	`M_DIROPS
(
mp
)->
	`sf_gë_öo
(
sÂ
, 
s„p
),

1304 
«mñí
, &
s„p
->
«me
[0]);

1306 
s„p
 = (
xfs_dú2_sf_íåy_t
 *)((*)sfep +

1307 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 
«mñí
));

1311 i‡(
zîo_°Æe_d©a
 && (
öo_dú_size
 < 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
)))

1312 
	`mem£t
(
s„p
, 0, 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
Ë- 
öo_dú_size
);

1313 
	}
}

1323 
	$obfusˇã_∑th_comp⁄íts
(

1324 *
buf
,

1325 
__uöt64_t
 
Àn
)

1327 *
comp
 = (*)
buf
;

1328 *
íd
 = 
comp
 + 
Àn
;

1329 
xfs_dahash_t
 
hash
;

1331 
comp
 < 
íd
) {

1332 *
¶ash
;

1333 
«mñí
;

1336 
¶ash
 = 
	`°rchr
((*)
comp
, '/');

1337 i‡(!
¶ash
) {

1339 
«mñí
 = 
	`°∫Àn
((*)
comp
, 
Àn
);

1340 
hash
 = 
	`libxfs_da_hash«me
(
comp
, 
«mñí
);

1341 
	`obfusˇã_«me
(
hash
, 
«mñí
, 
comp
);

1344 
«mñí
 = 
¶ash
 - (*)
comp
;

1346 i‡(!
«mñí
) {

1347 
comp
++;

1348 
Àn
--;

1351 
hash
 = 
	`libxfs_da_hash«me
(
comp
, 
«mñí
);

1352 
	`obfusˇã_«me
(
hash
, 
«mñí
, 
comp
);

1353 
comp
 +
«mñí
 + 1;

1354 
Àn
 -
«mñí
 + 1;

1356 
	}
}

1359 
	$¥o˚ss_sf_symlök
(

1360 
xfs_döode_t
 *
dù
)

1362 
__uöt64_t
 
Àn
;

1363 *
buf
;

1365 
Àn
 = 
	`be64_to_˝u
(
dù
->
di_size
);

1366 i‡(
Àn
 > 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
)) {

1367 i‡(
show_w¨nögs
)

1368 
	`¥öt_w¨nög
("invalid size (%d) in symlink inode %llu",

1369 
Àn
, ()
cur_öo
);

1370 
Àn
 = 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
);

1373 
buf
 = (*)
	`XFS_DFORK_DPTR
(
dù
);

1374 i‡(
obfusˇã
)

1375 
	`obfusˇã_∑th_comp⁄íts
(
buf
, 
Àn
);

1378 i‡(
zîo_°Æe_d©a
 && 
Àn
 < 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
))

1379 
	`mem£t
(&
buf
[
Àn
], 0, 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
) -Üen);

1380 
	}
}

1383 
	$¥o˚ss_sf_©å
(

1384 
xfs_döode_t
 *
dù
)

1391 
xfs_©å_sh‹tf‹m_t
 *
asÂ
;

1392 
xfs_©å_sf_íåy_t
 *
as„p
;

1393 
öo_©å_size
;

1394 
i
;

1396 
asÂ
 = (
xfs_©å_sh‹tf‹m_t
 *)
	`XFS_DFORK_APTR
(
dù
);

1397 i‡(
asÂ
->
hdr
.
cou¡
 == 0)

1400 
öo_©å_size
 = 
	`be16_to_˝u
(
asÂ
->
hdr
.
tŸsize
);

1401 i‡(
öo_©å_size
 > 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
)) {

1402 
öo_©å_size
 = 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
);

1403 i‡(
show_w¨nögs
)

1404 
	`¥öt_w¨nög
("invalidáttr size in inode %llu",

1405 ()
cur_öo
);

1408 
as„p
 = &
asÂ
->
li°
[0];

1409 
i
 = 0; (ò< 
asÂ
->
hdr
.
cou¡
) &&

1410 ((*)
as„p
 - (*)
asÂ
 < 
öo_©å_size
); 
i
++) {

1412 
«mñí
 = 
as„p
->namelen;

1414 i‡(
«mñí
 == 0) {

1415 i‡(
show_w¨nögs
)

1416 
	`¥öt_w¨nög
("zeroÜengtháttrÉntry in inode "

1417 "%Œu", ()
cur_öo
);

1419 } i‡((*)
as„p
 - (*)
asÂ
 +

1420 
	`XFS_ATTR_SF_ENTSIZE
(
as„p
Ë> 
öo_©å_size
) {

1421 i‡(
show_w¨nögs
)

1422 
	`¥öt_w¨nög
("attrÉntryÜength in inode %llu "

1423 "ovîÊow†•a˚", ()
cur_öo
);

1427 i‡(
obfusˇã
) {

1428 
	`gíî©e_obfusˇãd_«me
(0, 
as„p
->
«mñí
,

1429 &
as„p
->
«mevÆ
[0]);

1430 
	`mem£t
(&
as„p
->
«mevÆ
[as„p->
«mñí
], 'v',

1431 
as„p
->
vÆuñí
);

1434 
as„p
 = (
xfs_©å_sf_íåy_t
 *)((*)asfep +

1435 
	`XFS_ATTR_SF_ENTSIZE
(
as„p
));

1439 i‡(
zîo_°Æe_d©a
 && (
öo_©å_size
 < 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
)))

1440 
	`mem£t
(
as„p
, 0, 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
Ë- 
öo_©å_size
);

1441 
	}
}

1444 
	$¥o˚ss_dú_d©a_block
(

1445 *
block
,

1446 
xfs_fûeoff_t
 
off£t
,

1447 
is_block_f‹m©
)

1455 
dú_off£t
;

1456 *
±r
;

1457 *
íd±r
;

1458 
íd_of_d©a
;

1459 
w™tmagic
;

1460 
xfs_dú2_d©a_hdr
 *
d©ahdr
;

1462 
d©ahdr
 = (
xfs_dú2_d©a_hdr
 *)
block
;

1464 i‡(
is_block_f‹m©
) {

1465 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

1466 
xfs_dú2_block_èû_t
 *
bç
;

1468 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
d©ahdr
);

1469 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

1470 i‡((*)
bÕ
 > (*)
bç
)

1471 
bÕ
 = (
xfs_dú2_Àaf_íåy_t
 *)
bç
;

1473 
íd_of_d©a
 = (*)
bÕ
 - 
block
;

1474 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1475 
w™tmagic
 = 
XFS_DIR3_BLOCK_MAGIC
;

1477 
w™tmagic
 = 
XFS_DIR2_BLOCK_MAGIC
;

1479 
íd_of_d©a
 = 
mp
->
m_dú_geo
->
fsbcou¡
 << mp->
m_sb
.
sb_blocklog
;

1480 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1481 
w™tmagic
 = 
XFS_DIR3_DATA_MAGIC
;

1483 
w™tmagic
 = 
XFS_DIR2_DATA_MAGIC
;

1486 i‡(
	`be32_to_˝u
(
d©ahdr
->
magic
Ë!
w™tmagic
) {

1487 i‡(
show_w¨nögs
)

1488 
	`¥öt_w¨nög
(

1490 ()
cur_öo
, ()
off£t
);

1494 
dú_off£t
 = 
	`M_DIROPS
(
mp
)->
d©a_íåy_off£t
;

1495 
±r
 = 
block
 + 
dú_off£t
;

1496 
íd±r
 = 
block
 + 
mp
->
m_dú_geo
->
blksize
;

1498 
±r
 < 
íd±r
 && 
dú_off£t
 < 
íd_of_d©a
) {

1499 
xfs_dú2_d©a_íåy_t
 *
dï
;

1500 
xfs_dú2_d©a_unu£d_t
 *
dup
;

1501 
Àngth
;

1503 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

1505 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

1506 
Àngth
 = 
	`be16_to_˝u
(
dup
->length);

1507 i‡(
dú_off£t
 + 
Àngth
 > 
íd_of_d©a
 ||

1508 !
Àngth
 || (Àngth & (
XFS_DIR2_DATA_ALIGN
 - 1))) {

1509 i‡(
show_w¨nögs
)

1510 
	`¥öt_w¨nög
(

1512 ()
cur_öo
);

1515 i‡(
	`be16_to_˝u
(*
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
)) !=

1516 
dú_off£t
)

1518 
dú_off£t
 +
Àngth
;

1519 
±r
 +
Àngth
;

1525 i‡(
zîo_°Æe_d©a
) {

1526 
zÀn
 = 
Àngth
 -

1527 (
xfs_dú2_d©a_unu£d_t
);

1529 i‡(
zÀn
 > 0) {

1530 
	`mem£t
(&
dup
->
èg
, 0, 
zÀn
);

1531 
iocur_t›
->
√ed_¸c
 = 1;

1534 i‡(
dú_off£t
 >
íd_of_d©a
 || 
±r
 >
íd±r
)

1538 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
±r
;

1539 
Àngth
 = 
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

1541 i‡(
dú_off£t
 + 
Àngth
 > 
íd_of_d©a
 ||

1542 
±r
 + 
Àngth
 > 
íd±r
) {

1543 i‡(
show_w¨nögs
)

1544 
	`¥öt_w¨nög
(

1546 ()
cur_öo
);

1549 i‡(
	`be16_to_˝u
(*
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
)) !=

1550 
dú_off£t
)

1553 i‡(
obfusˇã
)

1554 
	`gíî©e_obfusˇãd_«me
(
	`be64_to_˝u
(
dï
->
öumbî
),

1555 
dï
->
«mñí
, &dï->
«me
[0]);

1556 
dú_off£t
 +
Àngth
;

1557 
±r
 +
Àngth
;

1559 i‡(
zîo_°Æe_d©a
) {

1561 
zÀn
 =

1562 (*)
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
) -

1563 (*)&
dï
->
«me
[dï->
«mñí
] - 1;

1564 i‡(
zÀn
 > 0) {

1565 
	`mem£t
(&
dï
->
«me
[dï->
«mñí
] + 1, 0, 
zÀn
);

1566 
iocur_t›
->
√ed_¸c
 = 1;

1570 
	}
}

1573 
	$¥o˚ss_symlök_block
(

1574 *
block
)

1576 *
lök
 = 
block
;

1578 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&(
mp
)->
m_sb
))

1579 
lök
 +(
xfs_dsymlök_hdr
);

1581 i‡(
obfusˇã
)

1582 
	`obfusˇã_∑th_comp⁄íts
(
lök
, 
	`XFS_SYMLINK_BUF_SPACE
(
mp
,

1583 
mp
->
m_sb
.
sb_blocksize
));

1584 i‡(
zîo_°Æe_d©a
) {

1585 
size_t
 
lökÀn
, 
zÀn
;

1587 
lökÀn
 = 
	`°æí
(
lök
);

1588 
zÀn
 = 
mp
->
m_sb
.
sb_blocksize
 - 
lökÀn
;

1589 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1590 
zÀn
 -(
xfs_dsymlök_hdr
);

1591 i‡(
zÀn
 < 
mp
->
m_sb
.
sb_blocksize
)

1592 
	`mem£t
(
lök
 + 
lökÀn
, 0, 
zÀn
);

1594 
	}
}

1596 
	#MAX_REMOTE_VALS
 4095

	)

1598 
	s©å_d©a_s
 {

1599 
	mªmŸe_vÆ_cou¡
;

1600 
xfs_dablk_t
 
	mªmŸe_vÆs
[
MAX_REMOTE_VALS
];

1601 } 
	g©å_d©a
;

1603 
ölöe
 

1604 
	$add_ªmŸe_vÆs
(

1605 
xfs_dablk_t
 
blockidx
,

1606 
Àngth
)

1608 
Àngth
 > 0 && 
©å_d©a
.
ªmŸe_vÆ_cou¡
 < 
MAX_REMOTE_VALS
) {

1609 
©å_d©a
.
ªmŸe_vÆs
[©å_d©a.
ªmŸe_vÆ_cou¡
] = 
blockidx
;

1610 
©å_d©a
.
ªmŸe_vÆ_cou¡
++;

1611 
blockidx
++;

1612 
Àngth
 -
mp
->
m_sb
.
sb_blocksize
;

1615 i‡(
©å_d©a
.
ªmŸe_vÆ_cou¡
 >
MAX_REMOTE_VALS
) {

1616 
	`¥öt_w¨nög
(

1619 
	}
}

1623 
	$¥o˚ss_©å_block
(

1624 *
block
,

1625 
xfs_fûeoff_t
 
off£t
)

1627 
xfs_©å_Àafblock
 *
Àaf
;

1628 
xfs_©å3_i˛óf_hdr
 
hdr
;

1629 
i
;

1630 
√¡rõs
;

1631 
xfs_©å_Àaf_íåy_t
 *
íåy
;

1632 
xfs_©å_Àaf_«me_loˇl_t
 *
loˇl
;

1633 
xfs_©å_Àaf_«me_ªmŸe_t
 *
ªmŸe
;

1634 
__uöt32_t
 
bs
 = 
mp
->
m_sb
.
sb_blocksize
;

1635 *
fú°_«me
;

1638 
Àaf
 = (
xfs_©å_Àafblock_t
 *)
block
;

1641 i‡((
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR_LEAF_MAGIC
) &&

1642 (
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
Ë!
XFS_ATTR3_LEAF_MAGIC
)) {

1643 
i
 = 0; i < 
©å_d©a
.
ªmŸe_vÆ_cou¡
; i++) {

1644 i‡(
obfusˇã
 && 
©å_d©a
.
ªmŸe_vÆs
[
i
] =
off£t
)

1646 
	`mem£t
(
block
 +

1647 (
bs
 - 
	`XFS_ATTR3_RMT_BUF_SPACE
(
mp
, bs)),

1648 'v', 
	`XFS_ATTR3_RMT_BUF_SPACE
(
mp
, 
bs
));

1654 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
hdr
, 
Àaf
);

1656 
√¡rõs
 = 
hdr
.
cou¡
;

1657 i‡(
√¡rõs
 == 0 ||

1658 
√¡rõs
 * (
xfs_©å_Àaf_íåy_t
) +

1659 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
) >

1660 
	`XFS_ATTR3_RMT_BUF_SPACE
(
mp
, 
bs
)) {

1661 i‡(
show_w¨nögs
)

1662 
	`¥öt_w¨nög
("invalidáttr count in inode %llu",

1663 ()
cur_öo
);

1667 
íåy
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

1669 
fú°_«me
 = 
NULL
;

1670 
i
 = 0; i < 
√¡rõs
; i++, 
íåy
++) {

1671 
∆í
, 
vÀn
, 
zÀn
;

1674 i‡(!
fú°_«me
 || 
	`xfs_©å3_Àaf_«me
(
Àaf
, 
i
) < first_name)

1675 
fú°_«me
 = 
	`xfs_©å3_Àaf_«me
(
Àaf
, 
i
);

1677 i‡(
	`be16_to_˝u
(
íåy
->
«meidx
Ë> 
mp
->
m_sb
.
sb_blocksize
) {

1678 i‡(
show_w¨nögs
)

1679 
	`¥öt_w¨nög
(

1681 ()
cur_öo
);

1684 i‡(
íåy
->
Êags
 & 
XFS_ATTR_LOCAL
) {

1685 
loˇl
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
i
);

1686 i‡(
loˇl
->
«mñí
 == 0) {

1687 i‡(
show_w¨nögs
)

1688 
	`¥öt_w¨nög
(

1690 ()
cur_öo
);

1693 i‡(
obfusˇã
) {

1694 
	`gíî©e_obfusˇãd_«me
(0, 
loˇl
->
«mñí
,

1695 &
loˇl
->
«mevÆ
[0]);

1696 
	`mem£t
(&
loˇl
->
«mevÆ
[loˇl->
«mñí
], 'v',

1697 
	`be16_to_˝u
(
loˇl
->
vÆuñí
));

1700 
∆í
 = 
loˇl
->
«mñí
;

1701 
vÀn
 = 
	`be16_to_˝u
(
loˇl
->
vÆuñí
);

1702 
zÀn
 = 
	`xfs_©å_Àaf_ítsize_loˇl
(
∆í
, 
vÀn
) -

1703 ((
xfs_©å_Àaf_«me_loˇl_t
) - 1 +

1704 
∆í
 + 
vÀn
);

1705 i‡(
zîo_°Æe_d©a
)

1706 
	`mem£t
(&
loˇl
->
«mevÆ
[
∆í
 + 
vÀn
], 0, 
zÀn
);

1708 
ªmŸe
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
i
);

1709 i‡(
ªmŸe
->
«mñí
 =0 ||ÑemŸe->
vÆueblk
 == 0) {

1710 i‡(
show_w¨nögs
)

1711 
	`¥öt_w¨nög
(

1713 ()
cur_öo
);

1716 i‡(
obfusˇã
) {

1717 
	`gíî©e_obfusˇãd_«me
(0, 
ªmŸe
->
«mñí
,

1718 &
ªmŸe
->
«me
[0]);

1719 
	`add_ªmŸe_vÆs
(
	`be32_to_˝u
(
ªmŸe
->
vÆueblk
),

1720 
	`be32_to_˝u
(
ªmŸe
->
vÆuñí
));

1723 
∆í
 = 
ªmŸe
->
«mñí
;

1724 
zÀn
 = 
	`xfs_©å_Àaf_ítsize_ªmŸe
(
∆í
) -

1725 ((
xfs_©å_Àaf_«me_ªmŸe_t
) - 1 +

1726 
∆í
);

1727 i‡(
zîo_°Æe_d©a
)

1728 
	`mem£t
(&
ªmŸe
->
«me
[
∆í
], 0, 
zÀn
);

1733 i‡(
zîo_°Æe_d©a
) {

1734 
xfs_©å_Àaf_íåy
 *
íåõs
;

1736 
íåõs
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

1737 
	`mem£t
(&
íåõs
[
√¡rõs
], 0,

1738 
fú°_«me
 - (*)&
íåõs
[
√¡rõs
]);

1740 
	}
}

1744 
	$¥o˚ss_sögÀ_fsb_obje˘s
(

1745 
xfs_fûeoff_t
 
o
,

1746 
xfs_fsblock_t
 
s
,

1747 
xfs_fûblks_t
 
c
,

1748 
ty≤m_t
 
bty≥
,

1749 
xfs_fûeoff_t
 
œ°
)

1751 *
dp
;

1752 
ªt
 = 0;

1753 
i
;

1755 
i
 = 0; i < 
c
; i++) {

1756 
	`push_cur
();

1757 
	`£t_cur
(&
ty±ab
[
bty≥
], 
	`XFS_FSB_TO_DADDR
(
mp
, 
s
), 
blkbb
,

1758 
DB_RING_IGN
, 
NULL
);

1760 i‡(!
iocur_t›
->
d©a
) {

1761 
xfs_agnumbî_t
 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
s
);

1762 
xfs_agblock_t
 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
s
);

1764 
	`¥öt_w¨nög
("cannotÑead %s block %u/%u (%llu)",

1765 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
, 
s
);

1766 i‡(
°›_⁄_ªad_îr‹
)

1767 
ªt
 = -
EIO
;

1768 
out_p›
;

1772 i‡(!
obfusˇã
 && !
zîo_°Æe_d©a
)

1773 
wrôe
;

1776 i‡(
zîo_°Æe_d©a
) {

1777 
xfs_da_öäode_t
 *
node
 = 
iocur_t›
->
d©a
;

1778 
magic
 = 
	`be16_to_˝u
(
node
->
hdr
.
öfo
.magic);

1780 i‡(
magic
 =
XFS_DA_NODE_MAGIC
 ||

1781 
magic
 =
XFS_DA3_NODE_MAGIC
) {

1782 
xfs_da3_i˙ode_hdr
 
hdr
;

1783 
u£d
;

1785 
	`M_DIROPS
(
mp
)->
	`node_hdr_‰om_disk
(&
hdr
, 
node
);

1786 
u£d
 = 
	`M_DIROPS
(
mp
)->
node_hdr_size
;

1788 
u£d
 +
hdr
.
cou¡


1789 * (
xfs_da_node_íåy
);

1791 i‡(
u£d
 < 
mp
->
m_sb
.
sb_blocksize
) {

1792 
	`mem£t
((*)
node
 + 
u£d
, 0,

1793 
mp
->
m_sb
.
sb_blocksize
 - 
u£d
);

1794 
iocur_t›
->
√ed_¸c
 = 1;

1800 
dp
 = 
iocur_t›
->
d©a
;

1801 
bty≥
) {

1802 
TYP_DIR2
:

1803 i‡(
o
 >
mp
->
m_dú_geo
->
Àafblk
)

1806 
	`¥o˚ss_dú_d©a_block
(
dp
, 
o
,

1807 
œ°
 =
mp
->
m_dú_geo
->
fsbcou¡
);

1808 
iocur_t›
->
√ed_¸c
 = 1;

1810 
TYP_SYMLINK
:

1811 
	`¥o˚ss_symlök_block
(
dp
);

1812 
iocur_t›
->
√ed_¸c
 = 1;

1814 
TYP_ATTR
:

1815 
	`¥o˚ss_©å_block
(
dp
, 
o
);

1816 
iocur_t›
->
√ed_¸c
 = 1;

1822 
wrôe
:

1823 
ªt
 = 
	`wrôe_buf
(
iocur_t›
);

1824 
out_p›
:

1825 
	`p›_cur
();

1826 i‡(
ªt
)

1828 
o
++;

1829 
s
++;

1832  
ªt
;

1833 
	}
}

1838 
bbm≠
 
	gmfsb_m≠
;

1839 
	gmfsb_Àngth
;

1842 
	$¥o˚ss_mu…i_fsb_obje˘s
(

1843 
xfs_fûeoff_t
 
o
,

1844 
xfs_fsblock_t
 
s
,

1845 
xfs_fûblks_t
 
c
,

1846 
ty≤m_t
 
bty≥
,

1847 
xfs_fûeoff_t
 
œ°
)

1849 
ªt
 = 0;

1851 
bty≥
) {

1852 
TYP_DIR2
:

1855 
	`¥öt_w¨nög
("badÅy≥ f‹ mu…i-fsb obje˘ %d", 
bty≥
);

1856  -
EINVAL
;

1859 
c
 > 0) {

1860 
bm_Àn
;

1862 i‡(
mfsb_Àngth
 + 
c
 >
mp
->
m_dú_geo
->
fsbcou¡
) {

1863 
bm_Àn
 = 
mp
->
m_dú_geo
->
fsbcou¡
 - 
mfsb_Àngth
;

1864 
mfsb_Àngth
 = 0;

1866 
mfsb_Àngth
 +
c
;

1867 
bm_Àn
 = 
c
;

1870 
mfsb_m≠
.
b
[mfsb_m≠.
nm≠s
].
bm_bn
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
s
);

1871 
mfsb_m≠
.
b
[mfsb_m≠.
nm≠s
].
bm_Àn
 = 
	`XFS_FSB_TO_BB
(
mp
, bm_len);

1872 
mfsb_m≠
.
nm≠s
++;

1874 i‡(
mfsb_Àngth
 == 0) {

1875 
	`push_cur
();

1876 
	`£t_cur
(&
ty±ab
[
bty≥
], 0, 0, 
DB_RING_IGN
, &
mfsb_m≠
);

1877 i‡(!
iocur_t›
->
d©a
) {

1878 
xfs_agnumbî_t
 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
s
);

1879 
xfs_agblock_t
 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
s
);

1881 
	`¥öt_w¨nög
("cannotÑead %s block %u/%u (%llu)",

1882 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
, 
s
);

1883 i‡(
°›_⁄_ªad_îr‹
)

1884 
ªt
 = -1;

1885 
out_p›
;

1889 i‡((!
obfusˇã
 && !
zîo_°Æe_d©a
) ||

1890 
o
 >
mp
->
m_dú_geo
->
Àafblk
) {

1891 
ªt
 = 
	`wrôe_buf
(
iocur_t›
);

1892 
out_p›
;

1895 
	`¥o˚ss_dú_d©a_block
(
iocur_t›
->
d©a
, 
o
,

1896 
œ°
 =
mp
->
m_dú_geo
->
fsbcou¡
);

1897 
iocur_t›
->
√ed_¸c
 = 1;

1898 
ªt
 = 
	`wrôe_buf
(
iocur_t›
);

1899 
out_p›
:

1900 
	`p›_cur
();

1901 
mfsb_m≠
.
nm≠s
 = 0;

1902 i‡(
ªt
)

1905 
c
 -
bm_Àn
;

1906 
s
 +
bm_Àn
;

1909  
ªt
;

1910 
	}
}

1914 
	$¥o˚ss_bmbt_ª˛i°
(

1915 
xfs_bmbt_ªc_t
 *
Ω
,

1916 
numªcs
,

1917 
ty≤m_t
 
bty≥
)

1919 
i
;

1920 
xfs_fûeoff_t
 
o
, 
›
 = 
NULLFILEOFF
;

1921 
xfs_fsblock_t
 
s
;

1922 
xfs_fûblks_t
 
c
, 
˝
 = 
NULLFILEOFF
;

1923 
f
;

1924 
xfs_fûeoff_t
 
œ°
;

1925 
xfs_agnumbî_t
 
agno
;

1926 
xfs_agblock_t
 
agbno
;

1927 
îr‹
;

1929 i‡(
bty≥
 =
TYP_DATA
)

1932 
	`c⁄vît_exã¡
(&
Ω
[
numªcs
 - 1], &
o
, &
s
, &
c
, &
f
);

1933 
œ°
 = 
o
 + 
c
;

1935 
i
 = 0; i < 
numªcs
; i++, 
Ω
++) {

1936 
	`c⁄vît_exã¡
(
Ω
, &
o
, &
s
, &
c
, &
f
);

1942 i‡(
i
 > 0 && 
›
 + 
˝
 > 
o
) {

1943 i‡(
show_w¨nögs
)

1944 
	`¥öt_w¨nög
("bmapÉxtent %d in %s ino %llu "

1946 "ídedáà%Œu", 
i
,

1947 
ty±ab
[
bty≥
].
«me
, ()
cur_öo
,

1948 
o
, 
›
 + 
˝
 - 1);

1952 i‡(
c
 > 
max_exã¡_size
) {

1958 i‡(
show_w¨nögs
)

1959 
	`¥öt_w¨nög
("suspicious count %u in bmap "

1960 "exã¡ %d i¿%†öÿ%Œu", 
c
, 
i
,

1961 
ty±ab
[
bty≥
].
«me
, ()
cur_öo
);

1965 
›
 = 
o
;

1966 
˝
 = 
c
;

1968 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
s
);

1969 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
s
);

1971 i‡(!
	`vÆid_bno
(
agno
, 
agbno
)) {

1972 i‡(
show_w¨nögs
)

1973 
	`¥öt_w¨nög
("invalid blockÇumber %u/%u "

1975 "%Œu", 
agno
, 
agbno
, 
s
, 
i
,

1976 
ty±ab
[
bty≥
].
«me
, ()
cur_öo
);

1980 i‡(!
	`vÆid_bno
(
agno
, 
agbno
 + 
c
 - 1)) {

1981 i‡(
show_w¨nögs
)

1982 
	`¥öt_w¨nög
("bmapÉxtent %i in %s inode %llu "

1983 "ovîÊow†AG (íd i†%u/%u)", 
i
,

1984 
ty±ab
[
bty≥
].
«me
, ()
cur_öo
,

1985 
agno
, 
agbno
 + 
c
 - 1);

1990 i‡(
bty≥
 !
TYP_DIR2
 || 
mp
->
m_dú_geo
->
fsbcou¡
 == 1) {

1991 
îr‹
 = 
	`¥o˚ss_sögÀ_fsb_obje˘s
(
o
, 
s
, 
c
, 
bty≥
, 
œ°
);

1993 
îr‹
 = 
	`¥o˚ss_mu…i_fsb_obje˘s
(
o
, 
s
, 
c
, 
bty≥
, 
œ°
);

1995 i‡(
îr‹
)

2000 
	}
}

2003 
	$sˇnfunc_bm≠
(

2004 
xfs_båì_block
 *
block
,

2005 
xfs_agnumbî_t
 
agno
,

2006 
xfs_agblock_t
 
agbno
,

2007 
Àvñ
,

2008 
ty≤m_t
 
bty≥
,

2009 *
¨g
)

2011 
i
;

2012 
xfs_bmbt_±r_t
 *
µ
;

2013 
ƒecs
;

2015 
ƒecs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

2017 i‡(
Àvñ
 == 0) {

2018 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[0]) {

2019 i‡(
show_w¨nögs
)

2020 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in %s "

2021 "block %u/%u", 
ƒecs
,

2022 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2025  
	`¥o˚ss_bmbt_ª˛i°
(
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1),

2026 
ƒecs
, *(
ty≤m_t
*)
¨g
);

2029 i‡(
ƒecs
 > 
mp
->
m_bm≠_dmxr
[1]) {

2030 i‡(
show_w¨nögs
)

2031 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in %s block %u/%u",

2032 
ƒecs
, 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2035 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[1]);

2036 
i
 = 0; i < 
ƒecs
; i++) {

2037 
xfs_agnumbî_t
 
ag
;

2038 
xfs_agblock_t
 
bno
;

2040 
ag
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
	`gë_u«lig√d_be64
(&
µ
[
i
]));

2041 
bno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
	`gë_u«lig√d_be64
(&
µ
[
i
]));

2043 i‡(
bno
 =0 || bnÿ> 
mp
->
m_sb
.
sb_agblocks
 ||

2044 
ag
 > 
mp
->
m_sb
.
sb_agcou¡
) {

2045 i‡(
show_w¨nögs
)

2046 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

2047 "ö %†block %u/%u", 
ag
, 
bno
,

2048 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2052 i‡(!
	`sˇn_båì
(
ag
, 
bno
, 
Àvñ
, 
bty≥
, 
¨g
, 
sˇnfunc_bm≠
))

2056 
	}
}

2059 
	$¥o˚ss_btöode
(

2060 
xfs_döode_t
 *
dù
,

2061 
ty≤m_t
 
ôy≥
)

2063 
xfs_bmdr_block_t
 *
dib
;

2064 
i
;

2065 
xfs_bmbt_±r_t
 *
µ
;

2066 
Àvñ
;

2067 
ƒecs
;

2068 
maxªcs
;

2069 
whichf‹k
;

2070 
ty≤m_t
 
bty≥
;

2072 
whichf‹k
 = (
ôy≥
 =
TYP_ATTR
Ë? 
XFS_ATTR_FORK
 : 
XFS_DATA_FORK
;

2073 
bty≥
 = (
ôy≥
 =
TYP_ATTR
Ë? 
TYP_BMAPBTA
 : 
TYP_BMAPBTD
;

2075 
dib
 = (
xfs_bmdr_block_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

2076 
Àvñ
 = 
	`be16_to_˝u
(
dib
->
bb_Àvñ
);

2077 
ƒecs
 = 
	`be16_to_˝u
(
dib
->
bb_numªcs
);

2079 i‡(
Àvñ
 > 
	`XFS_BM_MAXLEVELS
(
mp
, 
whichf‹k
)) {

2080 i‡(
show_w¨nögs
)

2081 
	`¥öt_w¨nög
("invalidÜevel (%u) in inode %lld %s "

2082 "roŸ", 
Àvñ
, ()
cur_öo
,

2083 
ty±ab
[
bty≥
].
«me
);

2087 i‡(
Àvñ
 == 0) {

2088  
	`¥o˚ss_bmbt_ª˛i°
(
	`XFS_BMDR_REC_ADDR
(
dib
, 1),

2089 
ƒecs
, 
ôy≥
);

2092 
maxªcs
 = 
	`libxfs_bmdr_maxªcs
(
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
), 0);

2093 i‡(
ƒecs
 > 
maxªcs
) {

2094 i‡(
show_w¨nögs
)

2095 
	`¥öt_w¨nög
("invalidÇumrecs (%u) in inode %lld %s "

2096 "roŸ", 
ƒecs
, ()
cur_öo
,

2097 
ty±ab
[
bty≥
].
«me
);

2101 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
dib
, 1, 
maxªcs
);

2102 
i
 = 0; i < 
ƒecs
; i++) {

2103 
xfs_agnumbî_t
 
ag
;

2104 
xfs_agblock_t
 
bno
;

2106 
ag
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
	`gë_u«lig√d_be64
(&
µ
[
i
]));

2107 
bno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
	`gë_u«lig√d_be64
(&
µ
[
i
]));

2109 i‡(
bno
 =0 || bnÿ> 
mp
->
m_sb
.
sb_agblocks
 ||

2110 
ag
 > 
mp
->
m_sb
.
sb_agcou¡
) {

2111 i‡(
show_w¨nögs
)

2112 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

2113 "ö inodê%Œu %†roŸ", 
ag
,

2114 
bno
, ()
cur_öo
,

2115 
ty±ab
[
bty≥
].
«me
);

2119 i‡(!
	`sˇn_båì
(
ag
, 
bno
, 
Àvñ
, 
bty≥
, &
ôy≥
, 
sˇnfunc_bm≠
))

2123 
	}
}

2126 
	$¥o˚ss_exöode
(

2127 
xfs_döode_t
 *
dù
,

2128 
ty≤m_t
 
ôy≥
)

2130 
whichf‹k
;

2131 
u£d
;

2132 
xfs_exäum_t
 
√x
;

2134 
whichf‹k
 = (
ôy≥
 =
TYP_ATTR
Ë? 
XFS_ATTR_FORK
 : 
XFS_DATA_FORK
;

2136 
√x
 = 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
);

2137 
u£d
 = 
√x
 * (
xfs_bmbt_ªc_t
);

2138 i‡(
√x
 < 0 || 
u£d
 > 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
)) {

2139 i‡(
show_w¨nögs
)

2140 
	`¥öt_w¨nög
("badÇumber ofÉxtents %d in inode %lld",

2141 
√x
, ()
cur_öo
);

2146 i‡(
zîo_°Æe_d©a
 && (
u£d
 < 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
)))

2147 
	`mem£t
(
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
Ë+ 
u£d
, 0,

2148 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
Ë- 
u£d
);

2151  
	`¥o˚ss_bmbt_ª˛i°
((
xfs_bmbt_ªc_t
 *)
	`XFS_DFORK_PTR
(
dù
,

2152 
whichf‹k
), 
√x
, 
ôy≥
);

2153 
	}
}

2156 
	$¥o˚ss_öode_d©a
(

2157 
xfs_döode_t
 *
dù
,

2158 
ty≤m_t
 
ôy≥
)

2160 
dù
->
di_f‹m©
) {

2161 
XFS_DINODE_FMT_LOCAL
:

2162 i‡(
obfusˇã
 || 
zîo_°Æe_d©a
)

2163 
ôy≥
) {

2164 
TYP_DIR2
:

2165 
	`¥o˚ss_sf_dú
(
dù
);

2168 
TYP_SYMLINK
:

2169 
	`¥o˚ss_sf_symlök
(
dù
);

2176 
XFS_DINODE_FMT_EXTENTS
:

2177  
	`¥o˚ss_exöode
(
dù
, 
ôy≥
);

2179 
XFS_DINODE_FMT_BTREE
:

2180  
	`¥o˚ss_btöode
(
dù
, 
ôy≥
);

2183 
	}
}

2193 
	$¥o˚ss_öode
(

2194 
xfs_agnumbî_t
 
agno
,

2195 
xfs_agöo_t
 
agöo
,

2196 
xfs_döode_t
 *
dù
,

2197 
boﬁ
 
‰ì_öode
)

2199 
suc˚ss
;

2200 
boﬁ
 
¸c_was_ok
 = 
Ál£
;

2201 
boﬁ
 
√ed_√w_¸c
 = 
Ál£
;

2203 
suc˚ss
 = 1;

2204 
cur_öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
);

2207 i‡(
obfusˇã
 || 
zîo_°Æe_d©a
) {

2208 
¸c_was_ok
 = 
	`libxfs_vîify_cksum
((*)
dù
,

2209 
mp
->
m_sb
.
sb_öodesize
,

2210 
	`off£tof
(
xfs_döode
, 
di_¸c
));

2213 i‡(
‰ì_öode
) {

2214 i‡(
zîo_°Æe_d©a
) {

2216 
	`mem£t
(
	`XFS_DFORK_DPTR
(
dù
), 0,

2217 
	`XFS_LITINO
(
mp
, 
dù
->
di_vîsi⁄
));

2219 
d⁄e
;

2223 
	`be16_to_˝u
(
dù
->
di_mode
Ë& 
S_IFMT
) {

2224 
S_IFDIR
:

2225 
suc˚ss
 = 
	`¥o˚ss_öode_d©a
(
dù
, 
TYP_DIR2
);

2226 i‡(
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
)

2227 
√ed_√w_¸c
 = 1;

2229 
S_IFLNK
:

2230 
suc˚ss
 = 
	`¥o˚ss_öode_d©a
(
dù
, 
TYP_SYMLINK
);

2231 i‡(
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
)

2232 
√ed_√w_¸c
 = 1;

2234 
S_IFREG
:

2235 
suc˚ss
 = 
	`¥o˚ss_öode_d©a
(
dù
, 
TYP_DATA
);

2239 
	`«mëabÀ_˛ór
();

2242 i‡(
suc˚ss
 &&

2243 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
Ë< 
	`XFS_LITINO
(mp, dù->
di_vîsi⁄
)) {

2244 
©å_d©a
.
ªmŸe_vÆ_cou¡
 = 0;

2245 
dù
->
di_af‹m©
) {

2246 
XFS_DINODE_FMT_LOCAL
:

2247 
√ed_√w_¸c
 = 1;

2248 i‡(
obfusˇã
 || 
zîo_°Æe_d©a
)

2249 
	`¥o˚ss_sf_©å
(
dù
);

2252 
XFS_DINODE_FMT_EXTENTS
:

2253 
suc˚ss
 = 
	`¥o˚ss_exöode
(
dù
, 
TYP_ATTR
);

2256 
XFS_DINODE_FMT_BTREE
:

2257 
suc˚ss
 = 
	`¥o˚ss_btöode
(
dù
, 
TYP_ATTR
);

2260 
	`«mëabÀ_˛ór
();

2263 
d⁄e
:

2265 i‡(
zîo_°Æe_d©a
)

2266 
√ed_√w_¸c
 = 1;

2268 i‡(
¸c_was_ok
 && 
√ed_√w_¸c
)

2269 
	`libxfs_döode_ˇlc_¸c
(
mp
, 
dù
);

2270  
suc˚ss
;

2271 
	}
}

2273 
__uöt32_t
 
	göodes_c›õd
 = 0;

2276 
	$c›y_öode_chunk
(

2277 
xfs_agnumbî_t
 
agno
,

2278 
xfs_öobt_ªc_t
 *
Ω
)

2280 
xfs_agöo_t
 
agöo
;

2281 
off
;

2282 
xfs_agblock_t
 
agbno
;

2283 
xfs_agblock_t
 
íd_agbno
;

2284 
i
;

2285 
rvÆ
 = 0;

2286 
blks_≥r_buf
;

2287 
öodes_≥r_buf
;

2288 
ioff
;

2290 
agöo
 = 
	`be32_to_˝u
(
Ω
->
ú_°¨töo
);

2291 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

2292 
íd_agbno
 = 
agbno
 + 
mp
->
m_üŒoc_blks
;

2293 
off
 = 
	`XFS_INO_TO_OFFSET
(
mp
, 
agöo
);

2303 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

2304 
blks_≥r_buf
 = 
	`xfs_i˛u°î_size_fsb
(
mp
);

2306 
blks_≥r_buf
 = 
mp
->
m_üŒoc_blks
;

2307 
öodes_≥r_buf
 = 
	`mö
(
blks_≥r_buf
 << 
mp
->
m_sb
.
sb_ö›blog
,

2308 
XFS_INODES_PER_CHUNK
);

2315 i‡(
off
 && 
öodes_≥r_buf
 !
XFS_INODES_PER_CHUNK
) {

2316 
	`¥öt_w¨nög
("bad sèπög inodêoff£à%d", 
off
);

2320 i‡(
agöo
 =0 ||ágöÿ=
NULLAGINO
 || !
	`vÆid_bno
(
agno
, 
agbno
) ||

2321 !
	`vÆid_bno
(
agno
, 
	`XFS_AGINO_TO_AGBNO
(
mp
,

2322 
agöo
 + 
XFS_INODES_PER_CHUNK
 - 1))) {

2323 i‡(
show_w¨nögs
)

2324 
	`¥öt_w¨nög
("bad inodeÇumber %llu (%u/%u)",

2325 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
),ágno,ágino);

2333 i‡((
mp
->
m_sb
.
sb_ö›block
 <
XFS_INODES_PER_CHUNK
 && 
off
 != 0) ||

2334 (
mp
->
m_sb
.
sb_ö›block
 > 
XFS_INODES_PER_CHUNK
 &&

2335 
off
 % 
XFS_INODES_PER_CHUNK
 != 0) ||

2336 (
	`xfs_sb_vîsi⁄_haßlign
(&
mp
->
m_sb
) &&

2337 
mp
->
m_sb
.
sb_öﬂlignmt
 != 0 &&

2338 
agbno
 % 
mp
->
m_sb
.
sb_öﬂlignmt
 != 0)) {

2339 i‡(
show_w¨nögs
)

2340 
	`¥öt_w¨nög
("badlyáligned inode (start = %llu)",

2341 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
));

2345 
	`push_cur
();

2346 
ioff
 = 0;

2347 
agbno
 < 
íd_agbno
 && 
ioff
 < 
XFS_INODES_PER_CHUNK
) {

2348 i‡(
	`xfs_öobt_is_•¨£_disk
(
Ω
, 
ioff
))

2349 
√xt_bp
;

2351 
	`£t_cur
(&
ty±ab
[
TYP_INODE
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

2352 
	`XFS_FSB_TO_BB
(
mp
, 
blks_≥r_buf
), 
DB_RING_IGN
, 
NULL
);

2353 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2354 
	`¥öt_w¨nög
("cannotÑead inode block %u/%u",

2355 
agno
, 
agbno
);

2356 
rvÆ
 = !
°›_⁄_ªad_îr‹
;

2357 
p›_out
;

2360 
i
 = 0; i < 
öodes_≥r_buf
; i++) {

2361 
xfs_döode_t
 *
dù
;

2363 
dù
 = (
xfs_döode_t
 *)((*)
iocur_t›
->
d©a
 +

2364 ((
off
 + 
i
Ë<< 
mp
->
m_sb
.
sb_öodñog
));

2367 i‡(!
	`¥o˚ss_öode
(
agno
, 
agöo
 + 
ioff
 + 
i
, 
dù
,

2368 
	`XFS_INOBT_IS_FREE_DISK
(
Ω
, 
ioff
 + 
i
)))

2369 
p›_out
;

2371 
öodes_c›õd
++;

2374 i‡(
	`wrôe_buf
(
iocur_t›
))

2375 
p›_out
;

2377 
√xt_bp
:

2378 
agbno
 +
blks_≥r_buf
;

2379 
ioff
 +
öodes_≥r_buf
;

2382 i‡(
show_¥ogªss
)

2383 
	`¥öt_¥ogªss
("Copied %u of %u inodes (%u of %u AGs)",

2384 
öodes_c›õd
, 
mp
->
m_sb
.
sb_icou¡
, 
agno
,

2385 
mp
->
m_sb
.
sb_agcou¡
);

2386 
rvÆ
 = 1;

2387 
p›_out
:

2388 
	`p›_cur
();

2389  
rvÆ
;

2390 
	}
}

2393 
	$sˇnfunc_öo
(

2394 
xfs_båì_block
 *
block
,

2395 
xfs_agnumbî_t
 
agno
,

2396 
xfs_agblock_t
 
agbno
,

2397 
Àvñ
,

2398 
ty≤m_t
 
bty≥
,

2399 *
¨g
)

2401 
xfs_öobt_ªc_t
 *
Ω
;

2402 
xfs_öobt_±r_t
 *
µ
;

2403 
i
;

2404 
numªcs
;

2405 
föobt
 = *(*Ë
¨g
;

2407 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

2409 i‡(
Àvñ
 == 0) {

2410 i‡(
numªcs
 > 
mp
->
m_öobt_mxr
[0]) {

2411 i‡(
show_w¨nögs
)

2412 
	`¥öt_w¨nög
("invalidÇumrecs %d in %s "

2413 "block %u/%u", 
numªcs
,

2414 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2415 
numªcs
 = 
mp
->
m_öobt_mxr
[0];

2422 i‡(
föobt
)

2425 
Ω
 = 
	`XFS_INOBT_REC_ADDR
(
mp
, 
block
, 1);

2426 
i
 = 0; i < 
numªcs
; i++, 
Ω
++) {

2427 i‡(!
	`c›y_öode_chunk
(
agno
, 
Ω
))

2433 i‡(
numªcs
 > 
mp
->
m_öobt_mxr
[1]) {

2434 i‡(
show_w¨nögs
)

2435 
	`¥öt_w¨nög
("invalidÇumrecs %d in %s block %u/%u",

2436 
numªcs
, 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2437 
numªcs
 = 
mp
->
m_öobt_mxr
[1];

2440 
µ
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_öobt_mxr
[1]);

2441 
i
 = 0; i < 
numªcs
; i++) {

2442 i‡(!
	`vÆid_bno
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]))) {

2443 i‡(
show_w¨nögs
)

2444 
	`¥öt_w¨nög
("invalid blockÇumber (%u/%u) "

2446 
agno
, 
	`be32_to_˝u
(
µ
[
i
]),

2447 
ty±ab
[
bty≥
].
«me
, 
agno
, 
agbno
);

2450 i‡(!
	`sˇn_båì
(
agno
, 
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
,

2451 
bty≥
, 
¨g
, 
sˇnfunc_öo
))

2455 
	}
}

2458 
	$c›y_öodes
(

2459 
xfs_agnumbî_t
 
agno
,

2460 
xfs_agi_t
 *
agi
)

2462 
xfs_agblock_t
 
roŸ
;

2463 
Àvñs
;

2464 
föobt
 = 0;

2466 
roŸ
 = 
	`be32_to_˝u
(
agi
->
agi_roŸ
);

2467 
Àvñs
 = 
	`be32_to_˝u
(
agi
->
agi_Àvñ
);

2470 i‡(
roŸ
 =0 ||ÑoŸ > 
mp
->
m_sb
.
sb_agblocks
) {

2471 i‡(
show_w¨nögs
)

2472 
	`¥öt_w¨nög
("invalid blockÇumber (%u) in inobt "

2473 "roŸ i¿agò%u", 
roŸ
, 
agno
);

2476 i‡(
Àvñs
 >
XFS_BTREE_MAXLEVELS
) {

2477 i‡(
show_w¨nögs
)

2478 
	`¥öt_w¨nög
("invalidÜevel (%u) in inobtÑoot "

2479 "öágò%u", 
Àvñs
, 
agno
);

2483 i‡(!
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_INOBT
, &
föobt
, 
sˇnfunc_öo
))

2486 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
)) {

2487 
roŸ
 = 
	`be32_to_˝u
(
agi
->
agi_‰ì_roŸ
);

2488 
Àvñs
 = 
	`be32_to_˝u
(
agi
->
agi_‰ì_Àvñ
);

2490 
föobt
 = 1;

2491 i‡(!
	`sˇn_båì
(
agno
, 
roŸ
, 
Àvñs
, 
TYP_INOBT
, &
föobt
,

2492 
sˇnfunc_öo
))

2497 
	}
}

2500 
	$sˇn_ag
(

2501 
xfs_agnumbî_t
 
agno
)

2503 
xfs_agf_t
 *
agf
;

2504 
xfs_agi_t
 *
agi
;

2505 
°ack_cou¡
 = 0;

2506 
rvÆ
 = 0;

2509 
	`push_cur
();

2510 
°ack_cou¡
++;

2511 
	`£t_cur
(&
ty±ab
[
TYP_SB
], 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
XFS_SB_DADDR
),

2512 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

2513 i‡(!
iocur_t›
->
d©a
) {

2514 
	`¥öt_w¨nög
("ˇ¬ŸÑód su≥rblock f‹ág %u", 
agno
);

2515 i‡(
°›_⁄_ªad_îr‹
)

2516 
p›_out
;

2519 i‡(
obfusˇã
) {

2520 
xfs_sb
 *
sb
 = 
iocur_t›
->
d©a
;

2521 
	`mem£t
(
sb
->
sb_‚ame
, 'L',

2522 
	`mö
(
	`°æí
(
sb
->
sb_‚ame
), (sb->sb_fname)));

2523 
iocur_t›
->
√ed_¸c
 = 1;

2525 i‡(
	`wrôe_buf
(
iocur_t›
))

2526 
p›_out
;

2530 
	`push_cur
();

2531 
°ack_cou¡
++;

2532 
	`£t_cur
(&
ty±ab
[
TYP_AGF
], 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

2533 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

2534 
agf
 = 
iocur_t›
->
d©a
;

2535 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2536 
	`¥öt_w¨nög
("ˇ¬ŸÑódág‡block f‹ág %u", 
agno
);

2537 i‡(
°›_⁄_ªad_îr‹
)

2538 
p›_out
;

2540 i‡(
	`wrôe_buf
(
iocur_t›
))

2541 
p›_out
;

2545 
	`push_cur
();

2546 
°ack_cou¡
++;

2547 
	`£t_cur
(&
ty±ab
[
TYP_AGI
], 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),

2548 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

2549 
agi
 = 
iocur_t›
->
d©a
;

2550 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2551 
	`¥öt_w¨nög
("ˇ¬ŸÑódágòblock f‹ág %u", 
agno
);

2552 i‡(
°›_⁄_ªad_îr‹
)

2553 
p›_out
;

2555 i‡(
	`wrôe_buf
(
iocur_t›
))

2556 
p›_out
;

2560 
	`push_cur
();

2561 
°ack_cou¡
++;

2562 
	`£t_cur
(&
ty±ab
[
TYP_AGFL
], 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGFL_DADDR
(mp)),

2563 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

2564 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2565 
	`¥öt_w¨nög
("ˇ¬ŸÑódágÊ block f‹ág %u", 
agno
);

2566 i‡(
°›_⁄_ªad_îr‹
)

2567 
p›_out
;

2569 i‡(
agf
 && 
zîo_°Æe_d©a
) {

2571 
i
;

2572 
__be32
 *
agÊ_bno
;

2574 
agÊ_bno
 = 
	`XFS_BUF_TO_AGFL_BNO
(
mp
, 
iocur_t›
->
bp
);

2575 
i
 = 
	`be32_to_˝u
(
agf
->
agf_Êœ°
);

2578 i‡(++
i
 =
	`XFS_AGFL_SIZE
(
mp
))

2579 
i
 = 0;

2580 i‡(
i
 =
	`be32_to_˝u
(
agf
->
agf_Êfú°
))

2582 
agÊ_bno
[
i
] = 
	`˝u_to_be32
(
NULLAGBLOCK
);

2584 
iocur_t›
->
√ed_¸c
 = 1;

2586 i‡(
	`wrôe_buf
(
iocur_t›
))

2587 
p›_out
;

2591 i‡(
agf
) {

2592 i‡(
show_¥ogªss
)

2593 
	`¥öt_¥ogªss
("Copying free spaceÅrees of AG %u",

2594 
agno
);

2595 i‡(!
	`c›y_‰ì_bno_båì
(
agno
, 
agf
))

2596 
p›_out
;

2597 i‡(!
	`c›y_‰ì_˙t_båì
(
agno
, 
agf
))

2598 
p›_out
;

2599 i‡(!
	`c›y_rm≠_båì
(
agno
, 
agf
))

2600 
p›_out
;

2601 i‡(!
	`c›y_ªfcou¡_båì
(
agno
, 
agf
))

2602 
p›_out
;

2606 i‡(
agi
) {

2607 i‡(!
	`c›y_öodes
(
agno
, 
agi
))

2608 
p›_out
;

2610 
rvÆ
 = 1;

2611 
p›_out
:

2612 
°ack_cou¡
--)

2613 
	`p›_cur
();

2614  
rvÆ
;

2615 
	}
}

2618 
	$c›y_öo
(

2619 
xfs_öo_t
 
öo
,

2620 
ty≤m_t
 
ôy≥
)

2622 
xfs_agnumbî_t
 
agno
;

2623 
xfs_agblock_t
 
agbno
;

2624 
xfs_agöo_t
 
agöo
;

2625 
off£t
;

2626 
rvÆ
 = 0;

2628 i‡(
öo
 =0 || inÿ=
NULLFSINO
)

2631 
agno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
öo
);

2632 
agöo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
);

2633 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

2634 
off£t
 = 
	`XFS_AGINO_TO_OFFSET
(
mp
, 
agöo
);

2636 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 || 
agbno
 >mp->m_sb.
sb_agblocks
 ||

2637 
off£t
 >
mp
->
m_sb
.
sb_ö›block
) {

2638 i‡(
show_w¨nögs
)

2639 
	`¥öt_w¨nög
("invalid %s inodeÇumber (%lld)",

2640 
ty±ab
[
ôy≥
].
«me
, ()
öo
);

2644 
	`push_cur
();

2645 
	`£t_cur
(&
ty±ab
[
TYP_INODE
], 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

2646 
blkbb
, 
DB_RING_IGN
, 
NULL
);

2647 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2648 
	`¥öt_w¨nög
("cannotÑead %s inode %lld",

2649 
ty±ab
[
ôy≥
].
«me
, ()
öo
);

2650 
rvÆ
 = !
°›_⁄_ªad_îr‹
;

2651 
p›_out
;

2653 
	`off_cur
(
off£t
 << 
mp
->
m_sb
.
sb_öodñog
, mp->m_sb.
sb_öodesize
);

2655 
cur_öo
 = 
öo
;

2656 
rvÆ
 = 
	`¥o˚ss_öode_d©a
(
iocur_t›
->
d©a
, 
ôy≥
);

2657 
p›_out
:

2658 
	`p›_cur
();

2659  
rvÆ
;

2660 
	}
}

2664 
	$c›y_sb_öodes
()

2666 i‡(!
	`c›y_öo
(
mp
->
m_sb
.
sb_rbmöo
, 
TYP_RTBITMAP
))

2669 i‡(!
	`c›y_öo
(
mp
->
m_sb
.
sb_rsumöo
, 
TYP_RTSUMMARY
))

2672 i‡(!
	`c›y_öo
(
mp
->
m_sb
.
sb_uquŸöo
, 
TYP_DQBLK
))

2675 i‡(!
	`c›y_öo
(
mp
->
m_sb
.
sb_gquŸöo
, 
TYP_DQBLK
))

2678  
	`c›y_öo
(
mp
->
m_sb
.
sb_pquŸöo
, 
TYP_DQBLK
);

2679 
	}
}

2682 
	$c›y_log
()

2684 
xlog
 
log
;

2685 
dúty
;

2686 
xfs_daddr_t
 
log°¨t
;

2687 
logblocks
;

2688 
logvîsi⁄
;

2689 
cy˛e
 = 
XLOG_INIT_CYCLE
;

2691 i‡(
show_¥ogªss
)

2692 
	`¥öt_¥ogªss
("CopyingÜog");

2694 
	`push_cur
();

2695 
	`£t_cur
(&
ty±ab
[
TYP_LOG
], 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
),

2696 
mp
->
m_sb
.
sb_logblocks
 * 
blkbb
, 
DB_RING_IGN
, 
NULL
);

2697 i‡(
iocur_t›
->
d©a
 =
NULL
) {

2698 
	`p›_cur
();

2699 
	`¥öt_w¨nög
("cannotÑeadÜog");

2700  !
°›_⁄_ªad_îr‹
;

2704 i‡(!
obfusˇã
 && !
zîo_°Æe_d©a
)

2705 
d⁄e
;

2707 
dúty
 = 
	`xlog_is_dúty
(
mp
, &
log
, &
x
, 0);

2709 
dúty
) {

2712 i‡(
show_¥ogªss
)

2713 
	`¥öt_¥ogªss
("Zeroing cleanÜog");

2715 
log°¨t
 = 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
);

2716 
logblocks
 = 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_logblocks
);

2717 
logvîsi⁄
 = 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
) ? 2 : 1;

2718 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

2719 
cy˛e
 = 
log
.
l_cuº_cy˛e
 + 1;

2721 
	`libxfs_log_˛ór
(
NULL
, 
iocur_t›
->
d©a
, 
log°¨t
, 
logblocks
,

2722 &
mp
->
m_sb
.
sb_uuid
, 
logvîsi⁄
,

2723 
mp
->
m_sb
.
sb_logsunô
, 
XLOG_FMT
, 
cy˛e
, 
åue
);

2727 i‡(
obfusˇã
)

2728 
	`¥öt_w¨nög
(

2729 
	`_
("FilesystemÜog is dirty; image will contain unobfuscated metadata inÜog."));

2733 i‡(
obfusˇã
)

2734 
	`¥öt_w¨nög
(

2735 
	`_
("CouldÇot discernÜog; image will contain unobfuscated metadata inÜog."));

2739 
d⁄e
:

2740  !
	`wrôe_buf
(
iocur_t›
);

2741 
	}
}

2744 
	$mëadump_f
(

2745 
¨gc
,

2746 **
¨gv
)

2748 
xfs_agnumbî_t
 
agno
;

2749 
c
;

2750 
°¨t_iocur_•
;

2751 *
p
;

2753 
exôcode
 = 1;

2754 
show_¥ogªss
 = 0;

2755 
show_w¨nögs
 = 0;

2756 
°›_⁄_ªad_îr‹
 = 0;

2758 i‡(
mp
->
m_sb
.
sb_magi˙um
 !
XFS_SB_MAGIC
) {

2759 
	`¥öt_w¨nög
("bad superblock magicÇumber %x, giving up",

2760 
mp
->
m_sb
.
sb_magi˙um
);

2768 i‡(
mp
->
m_sb
.
sb_agcou¡
 == 1 &&

2769 
	`XFS_MAX_DBLOCKS
(&
mp
->
m_sb
Ë< mp->m_sb.
sb_dblocks
) {

2770 
	`¥öt_w¨nög
("truncatedágcount, giving up");

2774 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "´gm:ow")Ë!
EOF
) {

2775 
c
) {

2777 
zîo_°Æe_d©a
 = 0;

2780 
°›_⁄_ªad_îr‹
 = 1;

2783 
show_¥ogªss
 = 1;

2786 
max_exã¡_size
 = ()
	`°πﬁ
(
›èrg
, &
p
, 0);

2787 i‡(*
p
 !'\0' || 
max_exã¡_size
 <= 0) {

2788 
	`¥öt_w¨nög
("bad maxÉxtent size %s",

2789 
›èrg
);

2794 
obfusˇã
 = 0;

2797 
show_w¨nögs
 = 1;

2800 
	`¥öt_w¨nög
("bad option for metadump command");

2805 i‡(
›töd
 !
¨gc
 - 1) {

2806 
	`¥öt_w¨nög
("too few options for metadump (no filename given)");

2810 
mëablock
 = (
xfs_mëablock_t
 *)
	`ˇŒoc
(
BBSIZE
 + 1, BBSIZE);

2811 i‡(
mëablock
 =
NULL
) {

2812 
	`¥öt_w¨nög
("memoryállocation failure");

2815 
mëablock
->
mb_blocklog
 = 
BBSHIFT
;

2816 
mëablock
->
mb_magic
 = 
	`˝u_to_be32
(
XFS_MD_MAGIC
);

2818 
block_ödex
 = (
__be64
 *)((*)
mëablock
 + (
xfs_mëablock_t
));

2819 
block_buf„r
 = (*)
mëablock
 + 
BBSIZE
;

2820 
num_ödi˚s
 = (
BBSIZE
 - (
xfs_mëablock_t
)Ë/ (
__be64
);

2827 i‡(
mp
->
m_sb
.
sb_£˘size
 > 
num_ödi˚s
 * 
BBSIZE
) {

2828 
	`¥öt_w¨nög
("Cannot dump filesystem with sector size %u",

2829 
mp
->
m_sb
.
sb_£˘size
);

2830 
	`‰ì
(
mëablock
);

2834 
cur_ödex
 = 0;

2835 
°¨t_iocur_•
 = 
iocur_•
;

2837 i‡(
	`°rcmp
(
¨gv
[
›töd
], "-") == 0) {

2838 i‡(
	`ißây
(
	`fûío
(
°dout
))) {

2839 
	`¥öt_w¨nög
("cannot writeÅoáÅerminal");

2840 
	`‰ì
(
mëablock
);

2843 
outf
 = 
°dout
;

2845 
outf
 = 
	`f›í
(
¨gv
[
›töd
], "wb");

2846 i‡(
outf
 =
NULL
) {

2847 
	`¥öt_w¨nög
("cannot create dump file");

2848 
	`‰ì
(
mëablock
);

2853 
exôcode
 = 0;

2855 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

2856 i‡(!
	`sˇn_ag
(
agno
)) {

2857 
exôcode
 = 1;

2863 i‡(!
exôcode
)

2864 
exôcode
 = !
	`c›y_sb_öodes
();

2867 i‡((
mp
->
m_sb
.
sb_log°¨t
 !0Ë&& !
exôcode
)

2868 
exôcode
 = !
	`c›y_log
();

2871 i‡(!
exôcode
)

2872 
exôcode
 = 
	`wrôe_ödex
() < 0;

2874 i‡(
¥ogªss_sö˚_w¨nög
)

2875 
	`Âutc
('\n', (
outf
 =
°dout
Ë? 
°dîr
 : stdout);

2877 i‡(
outf
 !
°dout
)

2878 
	`f˛o£
(
outf
);

2881 
iocur_•
 > 
°¨t_iocur_•
)

2882 
	`p›_cur
();

2884 
	`‰ì
(
mëablock
);

2887 
	}
}

	@db/metadump.h

19 
mëadump_öô
();

	@db/output.c

19 
	~"libxfs.h
"

20 
	~<°d¨g.h
>

21 
	~"comm™d.h
"

22 
	~"ouçut.h
"

23 
	~"sig.h
"

24 
	~"mÆloc.h
"

25 
	~"öô.h
"

27 
log_f
(
¨gc
, **
¨gv
);

29 c⁄° 
cmdöfo_t
 
	glog_cmd
 =

30 { "log", 
NULL
, 
log_f
, 0, 2, 0, 
N_
("[stop|start <filename>]"),

31 
N_
("°¨à‹ st›ÜoggögÅÿ®fûe"), 
NULL
 };

33 
	gdb¥efix
;

34 
FILE
 *
	glog_fûe
;

35 *
	glog_fûe_«me
;

38 
	$db¥ötf
(c⁄° *
fmt
, ...)

40 
va_li°
 
≠
;

41 
i
;

43 i‡(
	`£íöt
())

45 
	`va_°¨t
(
≠
, 
fmt
);

46 
	`blocköt
();

47 
i
 = 0;

48 i‡(
db¥efix
)

49 
i
 +
	`¥ötf
("%s: ", 
fsdevi˚
);

50 
i
 +
	`v¥ötf
(
fmt
, 
≠
);

51 
	`unblocköt
();

52 
	`va_íd
(
≠
);

53 i‡(
log_fûe
) {

54 
	`va_°¨t
(
≠
, 
fmt
);

55 
	`vÂrötf
(
log_fûe
, 
fmt
, 
≠
);

56 
	`va_íd
(
≠
);

58  
i
;

59 
	}
}

62 
	$log_f
(

63 
¨gc
,

64 **
¨gv
)

66 i‡(
¨gc
 == 1) {

67 i‡(
log_fûe
)

68 
	`db¥ötf
(
	`_
("loggögÅÿ%s\n"), 
log_fûe_«me
);

70 
	`db¥ötf
(
	`_
("noÜog file\n"));

71 } i‡(
¨gc
 =2 && 
	`°rcmp
(
¨gv
[1], "stop") == 0) {

72 i‡(
log_fûe
) {

73 
	`x‰ì
(
log_fûe_«me
);

74 
	`f˛o£
(
log_fûe
);

75 
log_fûe
 = 
NULL
;

77 
	`db¥ötf
(
	`_
("noÜog file\n"));

78 } i‡(
¨gc
 =3 && 
	`°rcmp
(
¨gv
[1], "start") == 0) {

79 i‡(
log_fûe
)

80 
	`db¥ötf
(
	`_
("ÆªadyÜoggögÅÿ%s\n"), 
log_fûe_«me
);

82 
log_fûe
 = 
	`f›í
(
¨gv
[2], "a");

83 i‡(
log_fûe
 =
NULL
)

84 
	`db¥ötf
(
	`_
("can't open %s for writing\n"),

85 
¨gv
[2]);

87 
log_fûe_«me
 = 
	`x°rdup
(
¨gv
[1]);

90 
	`db¥ötf
(
	`_
("badÜog command, ignored\n"));

92 
	}
}

95 
	$log¥ötf
(c⁄° *
fmt
, ...)

97 
va_li°
 
≠
;

99 i‡(
log_fûe
) {

100 
	`va_°¨t
(
≠
, 
fmt
);

101 ()
	`vÂrötf
(
log_fûe
, 
fmt
, 
≠
);

102 
	`va_íd
(
≠
);

104 
	}
}

107 
	$ouçut_öô
()

109 
	`add_comm™d
(&
log_cmd
);

110 
	}
}

	@db/output.h

19 
db¥efix
;

21 
db¥ötf
(const *, ...);

22 
log¥ötf
(const *, ...);

23 
ouçut_öô
();

	@db/print.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"ty≥.h
"

22 
	~"Áddr.h
"

23 
	~"Âröt.h
"

24 
	~"fõld.h
"

25 
	~"io.h
"

26 
	~"¥öt.h
"

27 
	~"bô.h
"

28 
	~"Êi°.h
"

29 
	~"°rvec.h
"

30 
	~"ouçut.h
"

31 
	~"sig.h
"

32 
	~"wrôe.h
"

34 
¥öt_Ælfõlds
(c⁄° 
fõld
 *
fõlds
);

35 
¥öt_f
(
¨gc
, **
¨gv
);

36 
¥öt_Êi°_1
(
Êi°
 *Êi°, **
pfx
, 
∑ª¡off
);

37 
¥öt_somefõlds
(c⁄° 
fõld
 *
fõlds
, 
¨gc
,

38 **
¨gv
);

40 c⁄° 
cmdöfo_t
 
	g¥öt_cmd
 =

41 { "¥öt", "p", 
¥öt_f
, 0, -1, 0, 
N_
("[value]..."),

42 
N_
("¥öàfõld vÆues"), 
NULL
 };

45 
	$¥öt_Ælfõlds
(

46 c⁄° 
fõld_t
 *
fõlds
)

48 
Êi°_t
 *
Êi°
;

49 #ifde‡
DEBUG


50 
i
;

53 
Êi°
 = 
	`Êi°_make
("");

54 
Êi°
->
Êd
 = 
fõlds
;

55 #i‚de‡
DEBUG


56 ()
	`Êi°_∑r£
(
fõlds
, 
Êi°
, 
iocur_t›
->
d©a
, 0);

58 
i
 = 
	`Êi°_∑r£
(
fõlds
, 
Êi°
, 
iocur_t›
->
d©a
, 0);

59 
	`ASSERT
(
i
 == 1);

61 
	`Êi°_¥öt
(
Êi°
);

62 
	`¥öt_Êi°
(
Êi°
);

63 
	`Êi°_‰ì
(
Êi°
);

64 
	}
}

67 
	$¥öt_f
(

68 
¨gc
,

69 **
¨gv
)

71 
pfunc_t
 
pf
;

73 i‡(
cur_typ
 =
NULL
) {

74 
	`db¥ötf
(
	`_
("no currentÅype\n"));

77 
pf
 = 
cur_typ
->
pfunc
;

78 i‡(
pf
 =
NULL
) {

79 
	`db¥ötf
(
	`_
("nÿ¥öàfun˘i⁄ f‹Åy≥ %s\n"), 
cur_typ
->
«me
);

82 
¨gc
--;

83 
¨gv
++;

84 (*
pf
)(
DB_READ
, 
cur_typ
->
fõlds
, 
¨gc
, 
¨gv
);

86 
	}
}

89 
	$¥öt_Êi°
(

90 
Êi°_t
 *
Êi°
)

92 **
pfx
;

94 
pfx
 = 
	`√w_°rvec
(0);

95 
	`¥öt_Êi°_1
(
Êi°
, 
pfx
, 0);

96 
	`‰ì_°rvec
(
pfx
);

97 
	}
}

100 
	$¥öt_Êi°_1
(

101 
Êi°_t
 *
Êi°
,

102 **
µfx
,

103 
∑ª¡off
)

105 
buf
[16];

106 c⁄° 
fõld_t
 *
f
;

107 c⁄° 
·©å_t
 *
Á
;

108 
Êi°_t
 *
Ê
;

109 
low
;

110 
cou¡
;

111 
√ed∆
;

112 **
pfx
;

114 
Ê
 = 
Êi°
; f»&& !
	`£íöt
(); f»Ê->
siblög
) {

115 
pfx
 = 
	`c›y_°rvec
(
µfx
);

116 i‡(
Ê
->
«me
[0])

117 
	`add_°rvec
(&
pfx
, 
Ê
->
«me
);

118 i‡(
Ê
->
Êags
 & 
FL_OKLOW
) {

119 
	`add_°rvec
(&
pfx
, "[");

120 
	`¢¥ötf
(
buf
, (buf), "%d", 
Ê
->
low
);

121 
	`add_°rvec
(&
pfx
, 
buf
);

122 i‡(
Ê
->
low
 !Ê->
high
) {

123 
	`add_°rvec
(&
pfx
, "-");

124 
	`¢¥ötf
(
buf
, (buf), "%d", 
Ê
->
high
);

125 
	`add_°rvec
(&
pfx
, 
buf
);

127 
	`add_°rvec
(&
pfx
, "]");

129 i‡(
Ê
->
chûd
) {

130 i‡(
Ê
->
«me
[0])

131 
	`add_°rvec
(&
pfx
, ".");

132 
	`¥öt_Êi°_1
(
Ê
->
chûd
, 
pfx
, fl->
off£t
);

134 
f
 = 
Ê
->
Êd
;

135 
Á
 = &
·©åèb
[
f
->
·yp
];

136 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

137 
	`¥öt_°rvec
(
pfx
);

138 
	`db¥ötf
(" = ");

139 i‡(
Ê
->
Êags
 & 
FL_OKLOW
)

140 
low
 = 
Ê
->low;

142 
low
 = 0;

143 
cou¡
 = 
	`fcou¡
(
f
, 
iocur_t›
->
d©a
, 
∑ª¡off
);

144 i‡(
Ê
->
Êags
 & 
FL_OKHIGH
)

145 
cou¡
 = 
	`mö
(cou¡, 
Ê
->
high
 - 
low
 + 1);

146 i‡(
Á
->
¥func
) {

147 
√ed∆
 = 
Á
->
	`¥func
(
iocur_t›
->
d©a
, 
Ê
->
off£t
,

148 
cou¡
, 
Á
->
fmt°r
,

149 
	`fsize
(
f
, 
iocur_t›
->
d©a
, 
∑ª¡off
, 0),

150 
Á
->
¨g
, 
low
,

151 (
f
->
Êags
 & 
FLD_ARRAY
) != 0);

152 i‡(
√ed∆
)

153 
	`db¥ötf
("\n");

155 
	`ASSERT
(
Á
->
¨g
 & 
FTARG_OKEMPTY
);

156 
	`db¥ötf
(
	`_
("(empty)\n"));

159 
	`‰ì_°rvec
(
pfx
);

161 
	}
}

164 
	$¥öt_öô
()

166 
	`add_comm™d
(&
¥öt_cmd
);

167 
	}
}

170 
	$¥öt_ßºay
(

171 *
obj
,

172 
bô
,

173 
cou¡
,

174 
size
,

175 
ba£
,

176 
¨øy
,

177 c⁄° 
fõld_t
 *
Êds
,

178 
skùnms
)

180 
bôoff
;

181 c⁄° 
fõld_t
 *
f
;

182 c⁄° 
·©å_t
 *
Á
;

183 
fú°
;

184 
i
;

186 
	`ASSERT
(
	`bôoffs
(
bô
) == 0);

187 i‡(
skùnms
 == 0) {

188 
f
 = 
Êds
, 
fú°
 = 1; f->
«me
; f++) {

189 i‡(
f
->
Êags
 & 
FLD_SKIPALL
)

191 
	`db¥ötf
("%c%s", 
fú°
 ? '[' : ',', 
f
->
«me
);

192 
fú°
 = 0;

194 
	`db¥ötf
("] ");

196 
i
 = 0, 
bôoff
 = 
bô
;

197 
i
 < 
cou¡
 && !
	`£íöt
();

198 
i
++, 
bôoff
 +
size
) {

199 i‡(
¨øy
)

200 
	`db¥ötf
("\n%d:", 
i
 + 
ba£
);

201 
f
 = 
Êds
, 
fú°
 = 1; f->
«me
; f++) {

202 i‡(
f
->
Êags
 & 
FLD_SKIPALL
)

204 
Á
 = &
·©åèb
[
f
->
·yp
];

205 
	`ASSERT
(
Á
->
·yp
 =
f
->ftyp);

206 
	`db¥ötf
("%c", 
fú°
 ? '[' : ',');

207 
fú°
 = 0;

208 i‡(
Á
->
¥func
)

209 
Á
->
	`¥func
(
obj
,

210 
bôoff
 +

211 
	`bôoff£t
(
f
, 
obj
, 
bôoff
, 
i
 + 
ba£
),

212 
	`fcou¡
(
f
, 
obj
, 
bôoff
), 
Á
->
fmt°r
,

213 
	`fsize
(
f
, 
obj
, 
bôoff
, 
i
 + 
ba£
),

214 
Á
->
¨g
, (
f
->
Êags
 & 
FLD_ABASE1
) != 0,

215 
f
->
Êags
 & 
FLD_ARRAY
);

217 
	`ASSERT
(
Á
->
¨g
 & 
FTARG_OKEMPTY
);

218 
	`db¥ötf
(
	`_
("(empty)"));

221 
	`db¥ötf
("]");

222 i‡(
i
 < 
cou¡
 - 1)

223 
	`db¥ötf
(" ");

225 
	}
}

228 
	$¥öt_somefõlds
(

229 c⁄° 
fõld_t
 *
fõlds
,

230 
¨gc
,

231 **
¨gv
)

233 c⁄° 
·©å_t
 *
Á
;

234 
Êi°_t
 *
Ê
;

235 
Êi°_t
 *
lÊ
;

236 
Êi°_t
 *
nÊ
;

238 
Ê
 = 
lÊ
 = 
NULL
;

239 
¨gc
 > 0) {

240 
nÊ
 = 
	`Êi°_sˇn
(*
¨gv
);

241 i‡(!
nÊ
) {

242 i‡(
Ê
)

243 
	`Êi°_‰ì
(
Ê
);

246 i‡(
lÊ
)

247 
lÊ
->
siblög
 = 
nÊ
;

249 
Ê
 = 
nÊ
;

250 
lÊ
 = 
nÊ
;

251 
¨gc
--;

252 
¨gv
++;

254 i‡(
fõlds
->
«me
[0] == '\0') {

255 
Á
 = &
·©åèb
[
fõlds
->
·yp
];

256 
	`ASSERT
(
Á
->
·yp
 =
fõlds
->ftyp);

257 
fõlds
 = 
Á
->
subÊd
;

259 i‡(!
	`Êi°_∑r£
(
fõlds
, 
Ê
, 
iocur_t›
->
d©a
, 0)) {

260 
	`Êi°_‰ì
(
Ê
);

263 
	`Êi°_¥öt
(
Ê
);

264 
	`¥öt_Êi°
(
Ê
);

265 
	`Êi°_‰ì
(
Ê
);

266 
	}
}

270 
	$¥öt_°rög
(

271 c⁄° 
fõld_t
 *
fõlds
,

272 
¨gc
,

273 **
¨gv
)

275 *
˝
;

277 i‡(
¨gc
 != 0)

278 
	`db¥ötf
(
	`_
("noárgumentsállowed\n"));

279 
	`db¥ötf
("\"");

280 
˝
 = 
iocur_t›
->
d©a
;

281 
˝
 < (*)
iocur_t›
->
d©a
 + iocur_t›->
Àn
 && *cp &&

282 !
	`£íöt
();

283 
˝
++)

284 
	`db¥ötf
("%c", *
˝
);

285 
	`db¥ötf
("\"\n");

286 
	}
}

289 
	$¥öt_°ru˘
(

290 c⁄° 
fõld_t
 *
fõlds
,

291 
¨gc
,

292 **
¨gv
)

294 i‡(
¨gc
 == 0)

295 
	`¥öt_Ælfõlds
(
fõlds
);

297 
	`¥öt_somefõlds
(
fõlds
, 
¨gc
, 
¨gv
);

298 
	}
}

	@db/print.h

19 
	gfõld
;

20 
	gÊi°
;

22 
¥öt_Êi°
(
Êi°
 *flist);

23 
¥öt_öô
();

24 
¥öt_ßºay
(*
obj
, 
bô
, 
cou¡
, 
size
, 
ba£
,

25 
¨øy
, c⁄° 
fõld_t
 *
Êds
, 
skùnms
);

26 
¥öt_°ru˘
(c⁄° 
fõld
 *
fõlds
, 
¨gc
, **
¨gv
);

27 
¥öt_°rög
(c⁄° 
fõld
 *
fõlds
, 
¨gc
, **
¨gv
);

	@db/quit.c

19 
	~"libxfs.h
"

20 
	~"comm™d.h
"

21 
	~"quô.h
"

23 
quô_f
(
¨gc
, **
¨gv
);

25 c⁄° 
cmdöfo_t
 
	gquô_cmd
 =

26 { "quô", "q", 
quô_f
, 0, 0, 0, 
NULL
,

27 
N_
("exô xfs_db"), 
NULL
 };

30 
	$quô_f
(

31 
¨gc
,

32 **
¨gv
)

35 
	}
}

38 
	$quô_öô
()

40 
	`add_comm™d
(&
quô_cmd
);

41 
	}
}

	@db/quit.h

19 
quô_öô
();

	@db/sb.c

19 
	~"libxfs.h
"

20 
	~"libxlog.h
"

21 
	~"comm™d.h
"

22 
	~"ty≥.h
"

23 
	~"Áddr.h
"

24 
	~"Âröt.h
"

25 
	~"fõld.h
"

26 
	~"io.h
"

27 
	~"sb.h
"

28 
	~"bô.h
"

29 
	~"ouçut.h
"

30 
	~"öô.h
"

32 
	#uuid_equÆ
(
s
,
d
Ë(
	`∂©f‹m_uuid_com∑ª
((s),(d)Ë=0)

	)

34 
sb_f
(
¨gc
, **
¨gv
);

35 
sb_hñp
();

36 
uuid_f
(
¨gc
, **
¨gv
);

37 
uuid_hñp
();

38 
œbñ_f
(
¨gc
, **
¨gv
);

39 
œbñ_hñp
();

40 
vîsi⁄_f
(
¨gc
, **
¨gv
);

41 
vîsi⁄_hñp
();

43 c⁄° 
cmdöfo_t
 
	gsb_cmd
 =

44 { "sb", 
NULL
, 
sb_f
, 0, 1, 1, 
N_
("[agno]"),

45 
N_
("£àcuºíàaddªs†tÿsb hódî"), 
sb_hñp
 };

46 c⁄° 
cmdöfo_t
 
	guuid_cmd
 =

47 { "uuid", 
NULL
, 
uuid_f
, 0, 1, 1, 
N_
("[uuid]"),

48 
N_
("wrôe/¥öàFS uuid"), 
uuid_hñp
 };

49 c⁄° 
cmdöfo_t
 
	gœbñ_cmd
 =

50 { "œbñ", 
NULL
, 
œbñ_f
, 0, 1, 1, 
N_
("[label]"),

51 
N_
("wrôe/¥öàFSÜabñ"), 
œbñ_hñp
 };

52 c⁄° 
cmdöfo_t
 
	gvîsi⁄_cmd
 =

53 { "vîsi⁄", 
NULL
, 
vîsi⁄_f
, 0, -1, 1, 
N_
("[feature | [vnum fnum]]"),

54 
N_
("£à„©uª bô(sËöÅhêsb vîsi⁄ fõld"), 
vîsi⁄_hñp
 };

57 
	$sb_öô
()

59 
	`add_comm™d
(&
sb_cmd
);

60 
	`add_comm™d
(&
uuid_cmd
);

61 
	`add_comm™d
(&
œbñ_cmd
);

62 
	`add_comm™d
(&
vîsi⁄_cmd
);

63 
	}
}

65 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_sb_t
, 
sb_
 ## f))

	)

66 
	#SZC
(
f
Ë
	`szcou¡
(
xfs_sb_t
, 
sb_
 ## f)

	)

67 c⁄° 
fõld_t
 
	gsb_Êds
[] = {

68 { "magi˙um", 
FLDT_UINT32X
, 
OI
(
OFF
(
magi˙um
)), 
C1
, 0, 
TYP_NONE
 },

69 { "blocksize", 
FLDT_UINT32D
, 
OI
(
OFF
(
blocksize
)), 
C1
, 0, 
TYP_NONE
 },

70 { "dblocks", 
FLDT_DRFSBNO
, 
OI
(
OFF
(
dblocks
)), 
C1
, 0, 
TYP_NONE
 },

71 { "rblocks", 
FLDT_DRFSBNO
, 
OI
(
OFF
(
rblocks
)), 
C1
, 0, 
TYP_NONE
 },

72 { "ªxã¡s", 
FLDT_DRTBNO
, 
OI
(
OFF
(
ªxã¡s
)), 
C1
, 0, 
TYP_NONE
 },

73 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

74 { "log°¨t", 
FLDT_DFSBNO
, 
OI
(
OFF
(
log°¨t
)), 
C1
, 0, 
TYP_LOG
 },

75 { "roŸöo", 
FLDT_INO
, 
OI
(
OFF
(
roŸöo
)), 
C1
, 0, 
TYP_INODE
 },

76 { "rbmöo", 
FLDT_INO
, 
OI
(
OFF
(
rbmöo
)), 
C1
, 0, 
TYP_INODE
 },

77 { "rsumöo", 
FLDT_INO
, 
OI
(
OFF
(
rsumöo
)), 
C1
, 0, 
TYP_INODE
 },

78 { "ªxtsize", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
ªxtsize
)), 
C1
, 0, 
TYP_NONE
 },

79 { "agblocks", 
FLDT_AGBLOCK
, 
OI
(
OFF
(
agblocks
)), 
C1
, 0, 
TYP_NONE
 },

80 { "agcou¡", 
FLDT_AGNUMBER
, 
OI
(
OFF
(
agcou¡
)), 
C1
, 0, 
TYP_NONE
 },

81 { "rbmblocks", 
FLDT_EXTLEN
, 
OI
(
OFF
(
rbmblocks
)), 
C1
, 0, 
TYP_NONE
 },

82 { "logblocks", 
FLDT_EXTLEN
, 
OI
(
OFF
(
logblocks
)), 
C1
, 0, 
TYP_NONE
 },

83 { "vîsi⁄num", 
FLDT_UINT16X
, 
OI
(
OFF
(
vîsi⁄num
)), 
C1
, 0, 
TYP_NONE
 },

84 { "£˘size", 
FLDT_UINT16D
, 
OI
(
OFF
(
£˘size
)), 
C1
, 0, 
TYP_NONE
 },

85 { "öodesize", 
FLDT_UINT16D
, 
OI
(
OFF
(
öodesize
)), 
C1
, 0, 
TYP_NONE
 },

86 { "ö›block", 
FLDT_UINT16D
, 
OI
(
OFF
(
ö›block
)), 
C1
, 0, 
TYP_NONE
 },

87 { "‚ame", 
FLDT_CHARNS
, 
OI
(
OFF
(
‚ame
)), 
CI
(
SZC
(‚ame)), 0, 
TYP_NONE
 },

88 { "blocklog", 
FLDT_UINT8D
, 
OI
(
OFF
(
blocklog
)), 
C1
, 0, 
TYP_NONE
 },

89 { "£˘log", 
FLDT_UINT8D
, 
OI
(
OFF
(
£˘log
)), 
C1
, 0, 
TYP_NONE
 },

90 { "öodñog", 
FLDT_UINT8D
, 
OI
(
OFF
(
öodñog
)), 
C1
, 0, 
TYP_NONE
 },

91 { "ö›blog", 
FLDT_UINT8D
, 
OI
(
OFF
(
ö›blog
)), 
C1
, 0, 
TYP_NONE
 },

92 { "agblklog", 
FLDT_UINT8D
, 
OI
(
OFF
(
agblklog
)), 
C1
, 0, 
TYP_NONE
 },

93 { "ªxt¶og", 
FLDT_UINT8D
, 
OI
(
OFF
(
ªxt¶og
)), 
C1
, 0, 
TYP_NONE
 },

94 { "ö¥ogªss", 
FLDT_UINT8D
, 
OI
(
OFF
(
ö¥ogªss
)), 
C1
, 0, 
TYP_NONE
 },

95 { "imax_p˘", 
FLDT_UINT8D
, 
OI
(
OFF
(
imax_p˘
)), 
C1
, 0, 
TYP_NONE
 },

96 { "icou¡", 
FLDT_UINT64D
, 
OI
(
OFF
(
icou¡
)), 
C1
, 0, 
TYP_NONE
 },

97 { "i‰ì", 
FLDT_UINT64D
, 
OI
(
OFF
(
i‰ì
)), 
C1
, 0, 
TYP_NONE
 },

98 { "fdblocks", 
FLDT_UINT64D
, 
OI
(
OFF
(
fdblocks
)), 
C1
, 0, 
TYP_NONE
 },

99 { "‰exã¡s", 
FLDT_UINT64D
, 
OI
(
OFF
(
‰exã¡s
)), 
C1
, 0, 
TYP_NONE
 },

100 { "uquŸöo", 
FLDT_INO
, 
OI
(
OFF
(
uquŸöo
)), 
C1
, 0, 
TYP_INODE
 },

101 { "gquŸöo", 
FLDT_INO
, 
OI
(
OFF
(
gquŸöo
)), 
C1
, 0, 
TYP_INODE
 },

102 { "qÊags", 
FLDT_UINT16X
, 
OI
(
OFF
(
qÊags
)), 
C1
, 0, 
TYP_NONE
 },

103 { "Êags", 
FLDT_UINT8X
, 
OI
(
OFF
(
Êags
)), 
C1
, 0, 
TYP_NONE
 },

104 { "sh¨ed_vn", 
FLDT_UINT8D
, 
OI
(
OFF
(
sh¨ed_vn
)), 
C1
, 0, 
TYP_NONE
 },

105 { "öﬂlignmt", 
FLDT_EXTLEN
, 
OI
(
OFF
(
öﬂlignmt
)), 
C1
, 0, 
TYP_NONE
 },

106 { "unô", 
FLDT_UINT32D
, 
OI
(
OFF
(
unô
)), 
C1
, 0, 
TYP_NONE
 },

107 { "width", 
FLDT_UINT32D
, 
OI
(
OFF
(
width
)), 
C1
, 0, 
TYP_NONE
 },

108 { "dúblklog", 
FLDT_UINT8D
, 
OI
(
OFF
(
dúblklog
)), 
C1
, 0, 
TYP_NONE
 },

109 { "log£˘log", 
FLDT_UINT8D
, 
OI
(
OFF
(
log£˘log
)), 
C1
, 0, 
TYP_NONE
 },

110 { "log£˘size", 
FLDT_UINT16D
, 
OI
(
OFF
(
log£˘size
)), 
C1
, 0, 
TYP_NONE
 },

111 { "logsunô", 
FLDT_UINT32D
, 
OI
(
OFF
(
logsunô
)), 
C1
, 0, 
TYP_NONE
 },

112 { "„©uªs2", 
FLDT_UINT32X
, 
OI
(
OFF
(
„©uªs2
)), 
C1
, 0, 
TYP_NONE
 },

113 { "bad_„©uªs2", 
FLDT_UINT32X
, 
OI
(
OFF
(
bad_„©uªs2
)),

114 
C1
, 0, 
TYP_NONE
 },

115 { "„©uªs_com∑t", 
FLDT_UINT32X
, 
OI
(
OFF
(
„©uªs_com∑t
)),

116 
C1
, 0, 
TYP_NONE
 },

117 { "„©uªs_ro_com∑t", 
FLDT_UINT32X
, 
OI
(
OFF
(
„©uªs_ro_com∑t
)),

118 
C1
, 0, 
TYP_NONE
 },

119 { "„©uªs_öcom∑t", 
FLDT_UINT32X
, 
OI
(
OFF
(
„©uªs_öcom∑t
)),

120 
C1
, 0, 
TYP_NONE
 },

121 { "„©uªs_log_öcom∑t", 
FLDT_UINT32X
, 
OI
(
OFF
(
„©uªs_log_öcom∑t
)),

122 
C1
, 0, 
TYP_NONE
 },

123 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

124 { "•öo_Æign", 
FLDT_EXTLEN
, 
OI
(
OFF
(
•öo_Æign
)), 
C1
, 0, 
TYP_NONE
 },

125 { "pquŸöo", 
FLDT_INO
, 
OI
(
OFF
(
pquŸöo
)), 
C1
, 0, 
TYP_INODE
 },

126 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

127 { "mëa_uuid", 
FLDT_UUID
, 
OI
(
OFF
(
mëa_uuid
)), 
C1
, 0, 
TYP_NONE
 },

128 { 
NULL
 }

131 c⁄° 
fõld_t
 
	gsb_hÊd
[] = {

132 { "", 
FLDT_SB
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

133 { 
NULL
 }

137 
	$sb_hñp
()

139 
	`db¥ötf
(
	`_
(

154 
	}
}

157 
	$sb_f
(

158 
¨gc
,

159 **
¨gv
)

161 
xfs_agnumbî_t
 
agno
;

162 *
p
;

164 i‡(
¨gc
 > 1) {

165 
agno
 = (
xfs_agnumbî_t
)
	`°πoul
(
¨gv
[1], &
p
, 0);

166 i‡(*
p
 !'\0' || 
agno
 >
mp
->
m_sb
.
sb_agcou¡
) {

167 
	`db¥ötf
(
	`_
("badáŒoˇti⁄ grou∞numbî %s\n"), 
¨gv
[1]);

170 
cur_agno
 = 
agno
;

171 } i‡(
cur_agno
 =
NULLAGNUMBER
)

172 
cur_agno
 = 0;

173 
	`ASSERT
(
ty±ab
[
TYP_SB
].
ty≤m
 == TYP_SB);

174 
	`£t_cur
(&
ty±ab
[
TYP_SB
],

175 
	`XFS_AG_DADDR
(
mp
, 
cur_agno
, 
XFS_SB_DADDR
),

176 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_ADD
, 
NULL
);

178 
	}
}

182 
	$sb_size
(

183 *
obj
,

184 
°¨toff
,

185 
idx
)

187  
	`bôize
(
mp
->
m_sb
.
sb_£˘size
);

188 
	}
}

191 
	$gë_sb
(
xfs_agnumbî_t
 
agno
, 
xfs_sb_t
 *
sb
)

193 
	`push_cur
();

194 
	`£t_cur
(&
ty±ab
[
TYP_SB
],

195 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
XFS_SB_DADDR
),

196 
	`XFS_FSS_TO_BB
(
mp
, 1), 
DB_RING_IGN
, 
NULL
);

198 i‡(!
iocur_t›
->
d©a
) {

199 
	`db¥ötf
(
	`_
("ˇn'àªad su≥rblock f‹ AG %u\n"), 
agno
);

200 
	`p›_cur
();

204 
	`libxfs_sb_‰om_disk
(
sb
, 
iocur_t›
->
d©a
);

206 i‡(
sb
->
sb_magi˙um
 !
XFS_SB_MAGIC
) {

207 
	`db¥ötf
(
	`_
("bad sb magic # %#x in AG %u\n"),

208 
sb
->
sb_magi˙um
, 
agno
);

211 i‡(!
	`xfs_sb_good_vîsi⁄
(
sb
)) {

212 
	`db¥ötf
(
	`_
("bad sb version # %#x in AG %u\n"),

213 
sb
->
sb_vîsi⁄num
, 
agno
);

216 i‡(
agno
 =0 && 
sb
->
sb_ö¥ogªss
 != 0) {

217 
	`db¥ötf
(
	`_
("mkfsÇot completed successfully\n"));

221 
	}
}

224 
	$xlog_ªcovî_do_å™s
(
xlog
 *
log
, 
xlog_ªcovî_t
 *
t
, 
p
)

227 
	}
}

230 
	$sb_logcheck
()

232 
dúty
;

234 i‡(
mp
->
m_sb
.
sb_log°¨t
) {

235 i‡(
x
.
logdev
 && x.logdev !x.
ddev
) {

236 
	`db¥ötf
(
	`_
("aborting -ÉxternalÜog specified for FS "

241 i‡(!
x
.
logdev
 || (x.logdev =x.
ddev
)) {

242 
	`db¥ötf
(
	`_
("aborting -ÇoÉxternalÜog specified for FS "

248 
	`libxfs_bu·¨g_öô
(
mp
, 
x
.
ddev
, x.
logdev
, x.
πdev
);

250 
dúty
 = 
	`xlog_is_dúty
(
mp
, mp->
m_log
, &
x
, 0);

251 i‡(
dúty
 == -1) {

252 
	`db¥ötf
(
	`_
("ERROR: cannot findÜog head/tail,Ñun xfs_repair\n"));

254 } i‡(
dúty
 == 1) {

255 
	`db¥ötf
(
	`_
(

261 "o‡thêfûesy°em bef‹êdoögÅhis.\n"), 
¥og«me
);

266 
	}
}

269 
	$sb_logzîo
(
uuid_t
 *
uuidp
)

271 
cy˛e
 = 
XLOG_INIT_CYCLE
;

272 
îr‹
;

274 i‡(!
	`sb_logcheck
())

281 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

282 
cy˛e
 = 
mp
->
m_log
->
l_cuº_cy˛e
 + 1;

284 
	`db¥ötf
(
	`_
("ClearingÜogánd setting UUID\n"));

286 
îr‹
 = 
	`libxfs_log_˛ór
(
mp
->
m_logdev_èrgp
, 
NULL
,

287 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
),

288 (
xfs_exéí_t
)
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_logblocks
),

289 
uuidp
,

290 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
) ? 2 : 1,

291 
mp
->
m_sb
.
sb_logsunô
, 
XLOG_FMT
, 
cy˛e
, 
åue
);

292 i‡(
îr‹
) {

293 
	`db¥ötf
(
	`_
("ERROR: cannot clearÅheÜog\n"));

298 
	}
}

302 
	$uuid_hñp
()

304 
	`db¥ötf
(
	`_
(

323 
	}
}

325 
uuid_t
 *

326 
	$do_uuid
(
xfs_agnumbî_t
 
agno
, 
uuid_t
 *
uuid
)

328 
xfs_sb_t
 
tsb
;

329 
uuid_t
 
uu
;

331 i‡(!
	`gë_sb
(
agno
, &
tsb
))

332  
NULL
;

334 i‡(!
uuid
) {

335 
	`mem˝y
(&
uu
, &
tsb
.
sb_uuid
, (
uuid_t
));

336 
	`p›_cur
();

337  &
uu
;

340 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
tsb
))

341 
wrôe
;

350 i‡(!
	`xfs_sb_vîsi⁄_hasmëauuid
(&
tsb
) &&

351 !
	`uuid_equÆ
(
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
)) {

352 
mp
->
m_sb
.
sb_„©uªs_öcom∑t
 |
XFS_SB_FEAT_INCOMPAT_META_UUID
;

353 
tsb
.
sb_„©uªs_öcom∑t
 |
XFS_SB_FEAT_INCOMPAT_META_UUID
;

354 
	`mem˝y
(&
tsb
.
sb_mëa_uuid
, &tsb.
sb_uuid
, (
uuid_t
));

355 } i‡(
	`xfs_sb_vîsi⁄_hasmëauuid
(&
tsb
) &&

356 
	`uuid_equÆ
(
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
)) {

357 
	`mem£t
(&
tsb
.
sb_mëa_uuid
, 0, (
uuid_t
));

359 
	`libxfs_sb_to_disk
(
iocur_t›
->
d©a
, &
tsb
);

360 
mp
->
m_sb
.
sb_„©uªs_öcom∑t
 &=

361 ~
XFS_SB_FEAT_INCOMPAT_META_UUID
;

362 
tsb
.
sb_„©uªs_öcom∑t
 &~
XFS_SB_FEAT_INCOMPAT_META_UUID
;

365 
wrôe
:

366 
	`mem˝y
(&
tsb
.
sb_uuid
, 
uuid
, (
uuid_t
));

367 
	`libxfs_sb_to_disk
(
iocur_t›
->
d©a
, &
tsb
);

368 
	`wrôe_cur
();

369  
uuid
;

370 
	}
}

373 
	$uuid_f
(

374 
¨gc
,

375 **
¨gv
)

377 
bp
[40];

378 
xfs_agnumbî_t
 
agno
;

379 
uuid_t
 
uu
;

380 
uuid_t
 *
uup
 = 
NULL
;

382 i‡(
¨gc
 != 1 &&árgc != 2) {

383 
	`db¥ötf
(
	`_
("invalidÖarameters\n"));

387 i‡(
¨gc
 == 2) {

389 i‡((
x
.
i§ód⁄ly
 & 
LIBXFS_ISREADONLY
Ë|| !
ex≥π_mode
) {

390 
	`db¥ötf
(
	`_
("%s:Çot inÉxpert mode, writing disabled\n"),

391 
¥og«me
);

395 i‡(!
	`°rˇ£cmp
(
¨gv
[1], "generate")) {

396 
	`∂©f‹m_uuid_gíî©e
(&
uu
);

397 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "nil")) {

398 
	`∂©f‹m_uuid_˛ór
(&
uu
);

399 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "rewrite")) {

400 
uup
 = 
	`do_uuid
(0, 
NULL
);

401 i‡(!
uup
) {

402 
	`db¥ötf
(
	`_
("failedÅoÑead UUID from AG 0\n"));

405 
	`mem˝y
(&
uu
, 
uup
, (
uuid_t
));

406 
	`∂©f‹m_uuid_u≈¨£
(&
uu
, 
bp
);

407 
	`db¥ötf
(
	`_
("ﬁd UUID = %s\n"), 
bp
);

408 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "restore")) {

409 
xfs_sb_t
 
tsb
;

411 i‡(!
	`gë_sb
(0, &
tsb
))

415 i‡(!
	`xfs_sb_vîsi⁄_hasmëauuid
(&
tsb
))

418 
	`mem˝y
(&
uu
, 
mp
->
m_sb
.
sb_mëa_uuid
, (
uuid_t
));

420 i‡(
	`∂©f‹m_uuid_∑r£
(
¨gv
[1], &
uu
)) {

421 
	`db¥ötf
(
	`_
("invalid UUID\n"));

427 i‡(!
	`sb_logzîo
(&
uu
))

430 
	`db¥ötf
(
	`_
("writingáll SBs\n"));

431 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++)

432 i‡(!
	`do_uuid
(
agno
, &
uu
)) {

433 
	`db¥ötf
(
	`_
("ÁûedÅÿ£àUUID i¿AG %d\n"), 
agno
);

437 
	`∂©f‹m_uuid_u≈¨£
(&
uu
, 
bp
);

438 
	`db¥ötf
(
	`_
("√w UUID = %s\n"), 
bp
);

443 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

444 
uup
 = 
	`do_uuid
(
agno
, 
NULL
);

445 i‡(!
uup
) {

446 
	`db¥ötf
(
	`_
("failedÅoÑead UUID from AG %d\n"),

447 
agno
);

450 i‡(
agno
) {

451 i‡(
	`memcmp
(&
uu
, 
uup
, (
uuid_t
))) {

452 
	`db¥ötf
(
	`_
("warning: UUID in AG %d "

454 
agno
);

458 
	`mem˝y
(&
uu
, 
uup
, (
uuid_t
));

461 i‡(
mp
->
m_sb
.
sb_log°¨t
) {

462 i‡(
x
.
logdev
 && x.logdev !x.
ddev
)

463 
	`db¥ötf
(
	`_
("warning -ÉxternalÜog specified "

465 } i‡(!
x
.
logdev
 || (x.logdev =x.
ddev
)) {

466 
	`db¥ötf
(
	`_
("warning -ÇoÉxternalÜog specified "

470 
	`∂©f‹m_uuid_u≈¨£
(&
uu
, 
bp
);

471 
	`db¥ötf
(
	`_
("UUID = %s\n"), 
bp
);

475 
	}
}

479 
	$œbñ_hñp
()

481 
	`db¥ötf
(
	`_
(

497 
	}
}

500 
	$do_œbñ
(
xfs_agnumbî_t
 
agno
, *
œbñ
)

502 
size_t
 
Àn
;

503 
xfs_sb_t
 
tsb
;

504 
lbl
[(
tsb
.
sb_‚ame
) + 1];

506 i‡(!
	`gë_sb
(
agno
, &
tsb
))

507  
NULL
;

509 
	`mem£t
(&
lbl
[0], 0, (lbl));

511 i‡(!
œbñ
) {

512 
	`p›_cur
();

513 
	`mem˝y
(&
lbl
[0], &
tsb
.
sb_‚ame
, (tsb.sb_fname));

514  &
lbl
[0];

517 i‡((
Àn
 = 
	`°æí
(
œbñ
)Ë> (
tsb
.
sb_‚ame
)) {

518 i‡(
agno
 == 0)

519 
	`db¥ötf
(
	`_
("%s:ÅruncatingÜabelÜength from %dÅo %d\n"),

520 
¥og«me
, ()
Àn
, ()(
tsb
.
sb_‚ame
));

521 
Àn
 = (
tsb
.
sb_‚ame
);

523 i‡–
Àn
 == 2 &&

524 (
	`°rcmp
(
œbñ
, "\"\"") == 0 ||

525 
	`°rcmp
(
œbñ
, "''") == 0 ||

526 
	`°rcmp
(
œbñ
, "--") == 0) )

527 
œbñ
[0] =Üabel[1] = '\0';

528 
	`mem£t
(&
tsb
.
sb_‚ame
, 0, (tsb.sb_fname));

529 
	`mem˝y
(&
tsb
.
sb_‚ame
, 
œbñ
, 
Àn
);

530 
	`mem˝y
(&
lbl
[0], &
tsb
.
sb_‚ame
, (tsb.sb_fname));

531 
	`libxfs_sb_to_disk
(
iocur_t›
->
d©a
, &
tsb
);

532 
	`wrôe_cur
();

533  &
lbl
[0];

534 
	}
}

537 
	$œbñ_f
(

538 
¨gc
,

539 **
¨gv
)

541 *
p
 = 
NULL
;

542 
xfs_sb_t
 
sb
;

543 
xfs_agnumbî_t
 
ag
;

545 i‡(
¨gc
 != 1 &&árgc != 2) {

546 
	`db¥ötf
(
	`_
("invalidÖarameters\n"));

550 i‡(
¨gc
 == 2) {

552 i‡((
x
.
i§ód⁄ly
 & 
LIBXFS_ISREADONLY
Ë|| !
ex≥π_mode
) {

553 
	`db¥ötf
(
	`_
("%s:Çot inÉxpert mode, writing disabled\n"),

554 
¥og«me
);

558 
	`db¥ötf
(
	`_
("writingáll SBs\n"));

559 
ag
 = 0;ág < 
mp
->
m_sb
.
sb_agcou¡
;ág++)

560 i‡((
p
 = 
	`do_œbñ
(
ag
, 
¨gv
[1])Ë=
NULL
) {

561 
	`db¥ötf
(
	`_
("ÁûedÅÿ£àœbñ i¿AG %d\n"), 
ag
);

564 
	`db¥ötf
(
	`_
("√wÜabñ = \"%s\"\n"), 
p
);

568 
ag
 = 0;ág < 
mp
->
m_sb
.
sb_agcou¡
;ág++) {

569 
p
 = 
	`do_œbñ
(
ag
, 
NULL
);

570 i‡(!
p
) {

571 
	`db¥ötf
(
	`_
("ÁûedÅÿªadÜabñ i¿AG %d\n"), 
ag
);

574 i‡(!
ag
)

575 
	`mem˝y
(&
sb
.
sb_‚ame
, 
p
, (sb.sb_fname));

576 i‡(
	`memcmp
(&
sb
.
sb_‚ame
, 
p
, (sb.sb_fname)))

577 
	`db¥ötf
(
	`_
("w¨nög: AG %dÜabñ dif„rs\n"), 
ag
);

579 
	`db¥ötf
(
	`_
("œbñ = \"%s\"\n"), 
p
);

582 
	}
}

586 
	$vîsi⁄_hñp
()

588 
	`db¥ötf
(
	`_
(

606 
	}
}

609 
	$do_vîsi⁄
(
xfs_agnumbî_t
 
agno
, 
__uöt16_t
 
vîsi⁄
, 
__uöt32_t
 
„©uªs
)

611 
xfs_sb_t
 
tsb
;

613 i‡(!
	`gë_sb
(
agno
, &
tsb
))

616 i‡(
	`xfs_sb_has_mism©ched_„©uªs2
(&
tsb
)) {

617 
	`db¥ötf
(
	`_
("Superblock has mismatched features2 fields, "

622 i‡((
vîsi⁄
 & 
XFS_SB_VERSION_LOGV2BIT
) &&

623 !
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
tsb
)) {

624 
tsb
.
sb_logsunô
 = 1;

627 
tsb
.
sb_vîsi⁄num
 = 
vîsi⁄
;

628 
tsb
.
sb_„©uªs2
 = 
„©uªs
;

629 
tsb
.
sb_bad_„©uªs2
 = 
„©uªs
;

630 
	`libxfs_sb_to_disk
(
iocur_t›
->
d©a
, &
tsb
);

631 
	`wrôe_cur
();

633 
	}
}

636 
	$vîsi⁄_°rög
(

637 
xfs_sb_t
 *
sbp
)

639 
s
[1024];

641 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_1
)

642 
	`°r˝y
(
s
, "V1");

643 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_2
)

644 
	`°r˝y
(
s
, "V2");

645 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_3
)

646 
	`°r˝y
(
s
, "V3");

647 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_4
)

648 
	`°r˝y
(
s
, "V4");

649 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
)

650 
	`°r˝y
(
s
, "V5");

656 i‡(
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_NLINKBIT
)

657 
	`°rˇt
(
s
, ",NLINK");

658 i‡(
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_SHAREDBIT
)

659 
	`°rˇt
(
s
, ",SHARED");

660 i‡(
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_DIRV2BIT
)

661 
	`°rˇt
(
s
, ",DIRV2");

663 i‡(
	`xfs_sb_vîsi⁄_haßâr
(
sbp
))

664 
	`°rˇt
(
s
, ",ATTR");

665 i‡(
	`xfs_sb_vîsi⁄_hasquŸa
(
sbp
))

666 
	`°rˇt
(
s
, ",QUOTA");

667 i‡(
	`xfs_sb_vîsi⁄_haßlign
(
sbp
))

668 
	`°rˇt
(
s
, ",ALIGN");

669 i‡(
	`xfs_sb_vîsi⁄_hasdÆign
(
sbp
))

670 
	`°rˇt
(
s
, ",DALIGN");

671 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(
sbp
))

672 
	`°rˇt
(
s
, ",LOGV2");

673 i‡(
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(
sbp
))

674 
	`°rˇt
(
s
, ",EXTFLG");

675 i‡(
	`xfs_sb_vîsi⁄_has£˘‹
(
sbp
))

676 
	`°rˇt
(
s
, ",SECTOR");

677 i‡(
	`xfs_sb_vîsi⁄_haßsciici
(
sbp
))

678 
	`°rˇt
(
s
, ",ASCII_CI");

679 i‡(
	`xfs_sb_vîsi⁄_hasm‹ebôs
(
sbp
))

680 
	`°rˇt
(
s
, ",MOREBITS");

681 i‡(
	`xfs_sb_vîsi⁄_haßâr2
(
sbp
))

682 
	`°rˇt
(
s
, ",ATTR2");

683 i‡(
	`xfs_sb_vîsi⁄_ha¶azysbcou¡
(
sbp
))

684 
	`°rˇt
(
s
, ",LAZYSBCOUNT");

685 i‡(
	`xfs_sb_vîsi⁄_ha•rojid32bô
(
sbp
))

686 
	`°rˇt
(
s
, ",PROJID32BIT");

687 i‡(
	`xfs_sb_vîsi⁄_has¸c
(
sbp
))

688 
	`°rˇt
(
s
, ",CRC");

689 i‡(
	`xfs_sb_vîsi⁄_has·y≥
(
sbp
))

690 
	`°rˇt
(
s
, ",FTYPE");

691 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(
sbp
))

692 
	`°rˇt
(
s
, ",FINOBT");

693 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(
sbp
))

694 
	`°rˇt
(
s
, ",SPARSE_INODES");

695 i‡(
	`xfs_sb_vîsi⁄_hasmëauuid
(
sbp
))

696 
	`°rˇt
(
s
, ",META_UUID");

697 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(
sbp
))

698 
	`°rˇt
(
s
, ",REFLINK");

699  
s
;

700 
	}
}

709 
	$vîsi⁄_f
(

710 
¨gc
,

711 **
¨gv
)

713 
__uöt16_t
 
vîsi⁄
 = 0;

714 
__uöt32_t
 
„©uªs
 = 0;

715 
xfs_agnumbî_t
 
ag
;

717 i‡(
¨gc
 == 2) {

719 i‡((
x
.
i§ód⁄ly
 & 
LIBXFS_ISREADONLY
Ë|| !
ex≥π_mode
) {

720 
	`db¥ötf
(
	`_
("%s:Çot inÉxpert mode, writing disabled\n"),

721 
¥og«me
);

726 i‡(!
	`°rˇ£cmp
(
¨gv
[1], "extflg")) {

727 
	`XFS_SB_VERSION_NUM
(&
mp
->
m_sb
)) {

728 
XFS_SB_VERSION_1
:

729 
vîsi⁄
 = 0x0004 | 
XFS_SB_VERSION_EXTFLGBIT
;

731 
XFS_SB_VERSION_2
:

732 
vîsi⁄
 = 0x0014 | 
XFS_SB_VERSION_EXTFLGBIT
;

734 
XFS_SB_VERSION_3
:

735 
vîsi⁄
 = 0x0034 | 
XFS_SB_VERSION_EXTFLGBIT
;

737 
XFS_SB_VERSION_4
:

738 i‡(
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(&
mp
->
m_sb
))

739 
	`db¥ötf
(

740 
	`_
("unwrittenÉxtents flag isálreadyÉnabled\n"));

742 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
 |

743 
XFS_SB_VERSION_EXTFLGBIT
;

745 
XFS_SB_VERSION_5
:

746 
	`db¥ötf
(

747 
	`_
("unwrittenÉxtentsálwaysÉnabled for v5 superblocks.\n"));

750 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "log2")) {

751 
	`XFS_SB_VERSION_NUM
(&
mp
->
m_sb
)) {

752 
XFS_SB_VERSION_1
:

753 
vîsi⁄
 = 0x0004 | 
XFS_SB_VERSION_LOGV2BIT
;

755 
XFS_SB_VERSION_2
:

756 
vîsi⁄
 = 0x0014 | 
XFS_SB_VERSION_LOGV2BIT
;

758 
XFS_SB_VERSION_3
:

759 
vîsi⁄
 = 0x0034 | 
XFS_SB_VERSION_LOGV2BIT
;

761 
XFS_SB_VERSION_4
:

762 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
))

763 
	`db¥ötf
(

764 
	`_
("version 2Üog format isálready in use\n"));

766 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
 |

767 
XFS_SB_VERSION_LOGV2BIT
;

769 
XFS_SB_VERSION_5
:

770 
	`db¥ötf
(

771 
	`_
("Version 2ÜogsálwaysÉnabled for v5 superblocks.\n"));

774 } i‡(
	`XFS_SB_VERSION_NUM
(&
mp
->
m_sb
Ë=
XFS_SB_VERSION_5
) {

775 
	`db¥ötf
(

776 
	`_
("%s: Cannot change %s on v5 superblocks.\n"),

777 
¥og«me
, 
¨gv
[1]);

779 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "attr1")) {

781 i‡(
	`xfs_sb_vîsi⁄_haßâr2
(&
mp
->
m_sb
)) {

782 i‡(!(
mp
->
m_sb
.
sb_„©uªs2
 &=

783 ~
XFS_SB_VERSION2_ATTR2BIT
))

784 
mp
->
m_sb
.
sb_vîsi⁄num
 &=

785 ~
XFS_SB_VERSION_MOREBITSBIT
;

787 
	`xfs_sb_vîsi⁄_add©å
(&
mp
->
m_sb
);

788 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
;

789 
„©uªs
 = 
mp
->
m_sb
.
sb_„©uªs2
;

790 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "attr2")) {

791 
	`xfs_sb_vîsi⁄_add©å
(&
mp
->
m_sb
);

792 
	`xfs_sb_vîsi⁄_add©å2
(&
mp
->
m_sb
);

793 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
;

794 
„©uªs
 = 
mp
->
m_sb
.
sb_„©uªs2
;

795 } i‡(!
	`°rˇ£cmp
(
¨gv
[1], "projid32bit")) {

796 
	`xfs_sb_vîsi⁄_add¥ojid32bô
(&
mp
->
m_sb
);

797 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
;

798 
„©uªs
 = 
mp
->
m_sb
.
sb_„©uªs2
;

800 
	`db¥ötf
(
	`_
("%s: invalid version change command \"%s\"\n"),

801 
¥og«me
, 
¨gv
[1]);

805 i‡(
vîsi⁄
) {

806 
	`db¥ötf
(
	`_
("writingáll SBs\n"));

807 
ag
 = 0;ág < 
mp
->
m_sb
.
sb_agcou¡
;ág++)

808 i‡(!
	`do_vîsi⁄
(
ag
, 
vîsi⁄
, 
„©uªs
)) {

809 
	`db¥ötf
(
	`_
("failedÅo set versionnum "

810 "ö AG %d\n"), 
ag
);

813 
mp
->
m_sb
.
sb_vîsi⁄num
 = 
vîsi⁄
;

814 
mp
->
m_sb
.
sb_„©uªs2
 = 
„©uªs
;

818 i‡(
¨gc
 == 3) {

819 *
•
;

821 
vîsi⁄
 = 
mp
->
m_sb
.
sb_vîsi⁄num
;

822 
„©uªs
 = 
mp
->
m_sb
.
sb_„©uªs2
;

823 
mp
->
m_sb
.
sb_vîsi⁄num
 = 
	`°πoul
(
¨gv
[1], &
•
, 0);

824 
mp
->
m_sb
.
sb_„©uªs2
 = 
	`°πoul
(
¨gv
[2], &
•
, 0);

827 
	`db¥ötf
(
	`_
("vîsi⁄num [0x%x+0x%x] = %s\n"), 
mp
->
m_sb
.
sb_vîsi⁄num
,

828 
mp
->
m_sb
.
sb_„©uªs2
, 
	`vîsi⁄_°rög
(&mp->m_sb));

830 i‡(
¨gc
 == 3) {

831 
mp
->
m_sb
.
sb_vîsi⁄num
 = 
vîsi⁄
;

832 
mp
->
m_sb
.
sb_„©uªs2
 = 
„©uªs
;

837 
	}
}

	@db/sb.h

19 c⁄° 
fõld
 
sb_Êds
[];

20 c⁄° 
fõld
 
sb_hÊd
[];

22 
sb_öô
();

23 
sb_logcheck
();

24 
sb_size
(*
obj
, 
°¨toff
, 
idx
);

	@db/sig.c

19 
	~"libxfs.h
"

20 
	~<sig«l.h
>

21 
	~"sig.h
"

23 
	ggŸöå
;

24 
sig£t_t
 
	göå£t
;

27 
	$öãºu±
(
sig
, 
sigöfo_t
 *
öfo
, *
uc
)

29 
gŸöå
 = 1;

30 
	}
}

33 
	$blocköt
()

35 
	`sig¥ocmask
(
SIG_BLOCK
, &
öå£t
, 
NULL
);

36 
	}
}

39 
	$˛óröt
()

41 
gŸöå
 = 0;

42 
	}
}

45 
	$öô_sig
()

47 
siga˘i⁄
 
ß
;

49 
	`mem£t
(&
ß
, 0, (sa));

50 
ß
.
ß_siga˘i⁄
 = 
öãºu±
;

51 
	`siga˘i⁄
(
SIGINT
, &
ß
, 
NULL
);

52 
	`sigem±y£t
(&
öå£t
);

53 
	`sigadd£t
(&
öå£t
, 
SIGINT
);

54 
	}
}

57 
	$£íöt
()

59  
gŸöå
;

60 
	}
}

63 
	$unblocköt
()

65 
	`sig¥ocmask
(
SIG_UNBLOCK
, &
öå£t
, 
NULL
);

66 
	}
}

	@db/sig.h

19 
blocköt
();

20 
˛óröt
();

21 
öô_sig
();

22 
£íöt
();

23 
unblocköt
();

	@db/strvec.c

19 
	~"libxfs.h
"

20 
	~"°rvec.h
"

21 
	~"ouçut.h
"

22 
	~"mÆloc.h
"

24 
cou¡_°rvec
(**
vec
);

27 
	$add_°rvec
(

28 ***
ve˝
,

29 *
°r
)

31 *
dup
;

32 
i
;

33 **
vec
;

35 
dup
 = 
	`x°rdup
(
°r
);

36 
vec
 = *
ve˝
;

37 
i
 = 
	`cou¡_°rvec
(
vec
);

38 
vec
 = 
	`xªÆloc
(vec, (*vecË* (
i
 + 2));

39 
vec
[
i
] = 
dup
;

40 
vec
[
i
 + 1] = 
NULL
;

41 *
ve˝
 = 
vec
;

42 
	}
}

45 
	$c›y_°rvec
(

46 **
vec
)

48 
i
;

49 **
rvÆ
;

51 
i
 = 
	`cou¡_°rvec
(
vec
);

52 
rvÆ
 = 
	`√w_°rvec
(
i
);

53 
i
 = 0; 
vec
[i] !
NULL
; i++)

54 
rvÆ
[
i
] = 
	`x°rdup
(
vec
[i]);

55  
rvÆ
;

56 
	}
}

59 
	$cou¡_°rvec
(

60 **
vec
)

62 
i
;

64 
i
 = 0; 
vec
[i] !
NULL
; i++)

66  
i
;

67 
	}
}

70 
	$‰ì_°rvec
(

71 **
vec
)

73 
i
;

75 
i
 = 0; 
vec
[i] !
NULL
; i++)

76 
	`x‰ì
(
vec
[
i
]);

77 
	`x‰ì
(
vec
);

78 
	}
}

81 
	$√w_°rvec
(

82 
cou¡
)

84 **
rvÆ
;

86 
rvÆ
 = 
	`xmÆloc
((*rvÆË* (
cou¡
 + 1));

87 
rvÆ
[
cou¡
] = 
NULL
;

88  
rvÆ
;

89 
	}
}

92 
	$¥öt_°rvec
(

93 **
vec
)

95 
i
;

97 
i
 = 0; 
vec
[i] !
NULL
; i++)

98 
	`db¥ötf
("%s", 
vec
[
i
]);

99 
	}
}

	@db/strvec.h

19 
add_°rvec
(***
ve˝
, *
°r
);

20 **
c›y_°rvec
(**
vec
);

21 
‰ì_°rvec
(**
vec
);

22 **
√w_°rvec
(
cou¡
);

23 
¥öt_°rvec
(**
vec
);

	@db/symlink.c

19 
	~"libxfs.h
"

20 
	~"ty≥.h
"

21 
	~"Áddr.h
"

22 
	~"Âröt.h
"

23 
	~"fõld.h
"

24 
	~"bô.h
"

25 
	~"öô.h
"

32 
	$symlök_cou¡
(

33 *
obj
,

34 
°¨toff
)

36 
xfs_dsymlök_hdr
 *
hdr
 = 
obj
;

38 
	`ASSERT
(
°¨toff
 == 0);

40 i‡(
hdr
->
¶_magic
 !
	`˝u_to_be32
(
XFS_SYMLINK_MAGIC
))

42 i‡(
	`be32_to_˝u
(
hdr
->
¶_byãs
Ë+ (*hdrË> 
mp
->
m_sb
.
sb_blocksize
)

43  
mp
->
m_sb
.
sb_blocksize
 - (*
hdr
);

44  
	`be32_to_˝u
(
hdr
->
¶_byãs
);

45 
	}
}

48 
	$symlök_size
(

49 *
obj
,

50 
°¨toff
,

51 
idx
)

53 
xfs_dsymlök_hdr
 *
hdr
 = 
obj
;

55 
	`ASSERT
(
°¨toff
 == 0);

56 i‡(
hdr
->
¶_magic
 !
	`˝u_to_be32
(
XFS_SYMLINK_MAGIC
))

58  
	`be32_to_˝u
(
hdr
->
¶_byãs
) + (*hdr);

59 
	}
}

61 c⁄° 
fõld
 
	gsymlök_¸c_hÊd
[] = {

62 { "", 
FLDT_SYMLINK_CRC
, 
OI
(0), 
C1
, 0, 
TYP_NONE
 },

63 { 
NULL
 }

66 
	#OFF
(
f
Ë
	`bôize
(
	`off£tof
(
xfs_dsymlök_hdr
, 
¶_
 ## f))

	)

67 
	#SZOF
(
f
Ë
	`bôize
((
xfs_dsymlök_hdr
))

	)

68 c⁄° 
fõld
 
	gsymlök_¸c_Êds
[] = {

69 { "magic", 
FLDT_UINT32X
, 
OI
(
OFF
(
magic
)), 
C1
, 0, 
TYP_NONE
 },

70 { "off£t", 
FLDT_UINT32D
, 
OI
(
OFF
(
off£t
)), 
C1
, 0, 
TYP_NONE
 },

71 { "byãs", 
FLDT_UINT32D
, 
OI
(
OFF
(
byãs
)), 
C1
, 0, 
TYP_NONE
 },

72 { "¸c", 
FLDT_CRC
, 
OI
(
OFF
(
¸c
)), 
C1
, 0, 
TYP_NONE
 },

73 { "uuid", 
FLDT_UUID
, 
OI
(
OFF
(
uuid
)), 
C1
, 0, 
TYP_NONE
 },

74 { "ow√r", 
FLDT_INO
, 
OI
(
OFF
(
ow√r
)), 
C1
, 0, 
TYP_NONE
 },

75 { "bno", 
FLDT_DFSBNO
, 
OI
(
OFF
(
blkno
)), 
C1
, 0, 
TYP_BMAPBTD
 },

76 { "l¢", 
FLDT_UINT64X
, 
OI
(
OFF
(
l¢
)), 
C1
, 0, 
TYP_NONE
 },

77 { "d©a", 
FLDT_CHARNS
, 
OI
(
bôize
((
xfs_dsymlök_hdr
))),

78 
symlök_cou¡
, 
FLD_COUNT
, 
TYP_NONE
 },

79 { 
NULL
 }

	@db/symlink.h

18 #i‚de‡
__XFS_DB_SYMLINK_H


19 
	#__XFS_DB_SYMLINK_H


	)

21 c⁄° 
fõld
 
symlök_¸c_hÊd
[];

22 c⁄° 
fõld
 
symlök_¸c_Êds
[];

24 
symlök_size
(*
obj
, 
°¨toff
, 
idx
);

	@db/text.c

19 
	~"libxfs.h
"

20 
	~<˘y≥.h
>

21 
	~"block.h
"

22 
	~"bm≠.h
"

23 
	~"comm™d.h
"

24 
	~"ty≥.h
"

25 
	~"Áddr.h
"

26 
	~"Âröt.h
"

27 
	~"fõld.h
"

28 
	~"öode.h
"

29 
	~"io.h
"

30 
	~"ouçut.h
"

31 
	~"öô.h
"

33 
¥öt_øwãxt
(*
d©a
, 
Àn
);

36 
	$¥öt_ãxt
(

37 c⁄° 
fõld_t
 *
fõlds
,

38 
¨gc
,

39 **
¨gv
)

41 
	`¥öt_øwãxt
(
iocur_t›
->
d©a
, iocur_t›->
Àn
);

42 
	}
}

45 
	$¥öt_øwãxt
(

46 *
d©a
,

47 
Àn
)

49 
i
;

50 
j
;

51 
œ°addr
;

52 
offch¨s
;

53 *
p
;

55 
œ°addr
 = (
Àn
 - 1) & ~(16 - 1);

56 i‡(
œ°addr
 < 0x10)

57 
offch¨s
 = 1;

58 i‡(
œ°addr
 < 0x100)

59 
offch¨s
 = 2;

60 i‡(
œ°addr
 < 0x1000)

61 
offch¨s
 = 3;

63 
offch¨s
 = 4;

65 
i
 = 0, 
p
 = 
d©a
; i < 
Àn
; i += 16) {

66 *
s
 = 
p
;

68 
	`db¥ötf
("%-0*.*x: ", 
offch¨s
, offch¨s, 
i
);

70 
j
 = 0; j < 16 && 
i
 + j < 
Àn
; j++, 
p
++) {

71 
	`db¥ötf
("%02x ", *
p
);

74 
	`db¥ötf
(" ");

76 
j
 = 0; j < 16 && 
i
 + j < 
Àn
; j++, 
s
++) {

77 i‡(
	`iß um
(*
s
))

78 
	`db¥ötf
("%c", *
s
);

80 
	`db¥ötf
(".", *
s
);

83 
	`db¥ötf
("\n");

85 
	}
}

	@db/text.h

19 
¥öt_ãxt
(c⁄° 
fõld
 *
fõlds
, 
¨gc
, **
¨gv
);

	@db/type.c

19 
	~"libxfs.h
"

20 
	~"block.h
"

21 
	~"comm™d.h
"

22 
	~"ty≥.h
"

23 
	~"Áddr.h
"

24 
	~"Âröt.h
"

25 
	~"fõld.h
"

26 
	~"¥öt.h
"

27 
	~"sb.h
"

28 
	~"öode.h
"

29 
	~"btblock.h
"

30 
	~"bmroŸ.h
"

31 
	~"agf.h
"

32 
	~"agÊ.h
"

33 
	~"agi.h
"

34 
	~"io.h
"

35 
	~"ouçut.h
"

36 
	~"wrôe.h
"

37 
	~"©å.h
"

38 
	~"dquŸ.h
"

39 
	~"dú2.h
"

40 
	~"ãxt.h
"

41 
	~"symlök.h
"

43 c⁄° 
typ_t
 *
födtyp
(*
«me
);

44 
ty≥_f
(
¨gc
, **
¨gv
);

46 c⁄° 
typ_t
 *
	gcur_typ
;

48 c⁄° 
cmdöfo_t
 
	gty≥_cmd
 =

49 { "ty≥", 
NULL
, 
ty≥_f
, 0, 1, 1, 
N_
("[newtype]"),

50 
N_
("£t/show cuºíàd©®ty≥"), 
NULL
 };

52 c⁄° 
typ_t
 
	g__ty±ab
[] = {

53 { 
TYP_AGF
, "agf", 
h™dÀ_°ru˘
, 
agf_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

54 { 
TYP_AGFL
, "agÊ", 
h™dÀ_°ru˘
, 
agÊ_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

55 { 
TYP_AGI
, "agi", 
h™dÀ_°ru˘
, 
agi_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

56 { 
TYP_ATTR
, "©å", 
h™dÀ_°ru˘
, 
©å_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

57 { 
TYP_BMAPBTA
, "bm≠bè", 
h™dÀ_°ru˘
, 
bm≠bè_hÊd
, 
NULL
,

58 
TYP_F_NO_CRC_OFF
 },

59 { 
TYP_BMAPBTD
, "bm≠btd", 
h™dÀ_°ru˘
, 
bm≠btd_hÊd
, 
NULL
,

60 
TYP_F_NO_CRC_OFF
 },

61 { 
TYP_BNOBT
, "bnobt", 
h™dÀ_°ru˘
, 
bnobt_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

62 { 
TYP_CNTBT
, "˙tbt", 
h™dÀ_°ru˘
, 
˙tbt_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

63 { 
TYP_RMAPBT
, 
NULL
 },

64 { 
TYP_REFCBT
, 
NULL
 },

65 { 
TYP_DATA
, "d©a", 
h™dÀ_block
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

66 { 
TYP_DIR2
, "dú2", 
h™dÀ_°ru˘
, 
dú2_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

67 { 
TYP_DQBLK
, "dqblk", 
h™dÀ_°ru˘
, 
dqblk_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

68 { 
TYP_INOBT
, "öobt", 
h™dÀ_°ru˘
, 
öobt_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

69 { 
TYP_INODATA
, "öod©a", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

70 { 
TYP_INODE
, "öode", 
h™dÀ_°ru˘
, 
öode_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

71 { 
TYP_LOG
, "log", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

72 { 
TYP_RTBITMAP
, "πbôm≠", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

73 { 
TYP_RTSUMMARY
, "πsumm¨y", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

74 { 
TYP_SB
, "sb", 
h™dÀ_°ru˘
, 
sb_hÊd
, 
NULL
, 
TYP_F_NO_CRC_OFF
 },

75 { 
TYP_SYMLINK
, "symlök", 
h™dÀ_°rög
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

76 { 
TYP_TEXT
, "ãxt", 
h™dÀ_ãxt
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

77 { 
TYP_FINOBT
, "föobt", 
h™dÀ_°ru˘
, 
öobt_hÊd
, 
NULL
,

78 
TYP_F_NO_CRC_OFF
 },

79 { 
TYP_NONE
, 
NULL
 }

82 c⁄° 
typ_t
 
	g__ty±ab_¸c
[] = {

83 { 
TYP_AGF
, "agf", 
h™dÀ_°ru˘
, 
agf_hÊd
, &
xfs_agf_buf_›s
,

84 
XFS_AGF_CRC_OFF
 },

85 { 
TYP_AGFL
, "agÊ", 
h™dÀ_°ru˘
, 
agÊ_¸c_hÊd
, &
xfs_agÊ_buf_›s
,

86 
XFS_AGFL_CRC_OFF
 },

87 { 
TYP_AGI
, "agi", 
h™dÀ_°ru˘
, 
agi_hÊd
, &
xfs_agi_buf_›s
,

88 
XFS_AGI_CRC_OFF
 },

89 { 
TYP_ATTR
, "©å3", 
h™dÀ_°ru˘
, 
©å3_hÊd
,

90 &
xfs_©å3_db_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

91 { 
TYP_BMAPBTA
, "bm≠bè", 
h™dÀ_°ru˘
, 
bm≠bè_¸c_hÊd
,

92 &
xfs_bmbt_buf_›s
, 
XFS_BTREE_LBLOCK_CRC_OFF
 },

93 { 
TYP_BMAPBTD
, "bm≠btd", 
h™dÀ_°ru˘
, 
bm≠btd_¸c_hÊd
,

94 &
xfs_bmbt_buf_›s
, 
XFS_BTREE_LBLOCK_CRC_OFF
 },

95 { 
TYP_BNOBT
, "bnobt", 
h™dÀ_°ru˘
, 
bnobt_¸c_hÊd
,

96 &
xfs_Ælocbt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

97 { 
TYP_CNTBT
, "˙tbt", 
h™dÀ_°ru˘
, 
˙tbt_¸c_hÊd
,

98 &
xfs_Ælocbt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

99 { 
TYP_RMAPBT
, "rm≠bt", 
h™dÀ_°ru˘
, 
rm≠bt_¸c_hÊd
,

100 &
xfs_rm≠bt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

101 { 
TYP_REFCBT
, "ªf˙tbt", 
h™dÀ_°ru˘
, 
ªfcbt_¸c_hÊd
,

102 &
xfs_ªfcou¡bt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

103 { 
TYP_DATA
, "d©a", 
h™dÀ_block
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

104 { 
TYP_DIR2
, "dú3", 
h™dÀ_°ru˘
, 
dú3_hÊd
,

105 &
xfs_dú3_db_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

106 { 
TYP_DQBLK
, "dqblk", 
h™dÀ_°ru˘
, 
dqblk_hÊd
,

107 &
xfs_dquŸ_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

108 { 
TYP_INOBT
, "öobt", 
h™dÀ_°ru˘
, 
öobt_¸c_hÊd
,

109 &
xfs_öobt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

110 { 
TYP_INODATA
, "öod©a", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

111 { 
TYP_INODE
, "öode", 
h™dÀ_°ru˘
, 
öode_¸c_hÊd
,

112 &
xfs_öode_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

113 { 
TYP_LOG
, "log", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

114 { 
TYP_RTBITMAP
, "πbôm≠", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

115 { 
TYP_RTSUMMARY
, "πsumm¨y", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

116 { 
TYP_SB
, "sb", 
h™dÀ_°ru˘
, 
sb_hÊd
, &
xfs_sb_buf_›s
,

117 
XFS_SB_CRC_OFF
 },

118 { 
TYP_SYMLINK
, "symlök", 
h™dÀ_°ru˘
, 
symlök_¸c_hÊd
,

119 &
xfs_symlök_buf_›s
, 
XFS_SYMLINK_CRC_OFF
 },

120 { 
TYP_TEXT
, "ãxt", 
h™dÀ_ãxt
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

121 { 
TYP_FINOBT
, "föobt", 
h™dÀ_°ru˘
, 
öobt_¸c_hÊd
,

122 &
xfs_öobt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

123 { 
TYP_NONE
, 
NULL
 }

126 c⁄° 
typ_t
 
	g__ty±ab_•¸c
[] = {

127 { 
TYP_AGF
, "agf", 
h™dÀ_°ru˘
, 
agf_hÊd
, &
xfs_agf_buf_›s
,

128 
XFS_AGF_CRC_OFF
 },

129 { 
TYP_AGFL
, "agÊ", 
h™dÀ_°ru˘
, 
agÊ_¸c_hÊd
, &
xfs_agÊ_buf_›s
 ,

130 
XFS_AGFL_CRC_OFF
 },

131 { 
TYP_AGI
, "agi", 
h™dÀ_°ru˘
, 
agi_hÊd
, &
xfs_agi_buf_›s
 ,

132 
XFS_AGI_CRC_OFF
 },

133 { 
TYP_ATTR
, "©å3", 
h™dÀ_°ru˘
, 
©å3_hÊd
,

134 &
xfs_©å3_db_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

135 { 
TYP_BMAPBTA
, "bm≠bè", 
h™dÀ_°ru˘
, 
bm≠bè_¸c_hÊd
,

136 &
xfs_bmbt_buf_›s
, 
XFS_BTREE_LBLOCK_CRC_OFF
 },

137 { 
TYP_BMAPBTD
, "bm≠btd", 
h™dÀ_°ru˘
, 
bm≠btd_¸c_hÊd
,

138 &
xfs_bmbt_buf_›s
, 
XFS_BTREE_LBLOCK_CRC_OFF
 },

139 { 
TYP_BNOBT
, "bnobt", 
h™dÀ_°ru˘
, 
bnobt_¸c_hÊd
,

140 &
xfs_Ælocbt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

141 { 
TYP_CNTBT
, "˙tbt", 
h™dÀ_°ru˘
, 
˙tbt_¸c_hÊd
,

142 &
xfs_Ælocbt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

143 { 
TYP_RMAPBT
, "rm≠bt", 
h™dÀ_°ru˘
, 
rm≠bt_¸c_hÊd
,

144 &
xfs_rm≠bt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

145 { 
TYP_REFCBT
, "ªf˙tbt", 
h™dÀ_°ru˘
, 
ªfcbt_¸c_hÊd
,

146 &
xfs_ªfcou¡bt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

147 { 
TYP_DATA
, "d©a", 
h™dÀ_block
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

148 { 
TYP_DIR2
, "dú3", 
h™dÀ_°ru˘
, 
dú3_hÊd
,

149 &
xfs_dú3_db_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

150 { 
TYP_DQBLK
, "dqblk", 
h™dÀ_°ru˘
, 
dqblk_hÊd
,

151 &
xfs_dquŸ_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

152 { 
TYP_INOBT
, "öobt", 
h™dÀ_°ru˘
, 
öobt_•¸c_hÊd
,

153 &
xfs_öobt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

154 { 
TYP_INODATA
, "öod©a", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

155 { 
TYP_INODE
, "öode", 
h™dÀ_°ru˘
, 
öode_¸c_hÊd
,

156 &
xfs_öode_buf_›s
, 
TYP_F_NO_CRC_OFF
 },

157 { 
TYP_LOG
, "log", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

158 { 
TYP_RTBITMAP
, "πbôm≠", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

159 { 
TYP_RTSUMMARY
, "πsumm¨y", 
NULL
, NULL, NULL, 
TYP_F_NO_CRC_OFF
 },

160 { 
TYP_SB
, "sb", 
h™dÀ_°ru˘
, 
sb_hÊd
, &
xfs_sb_buf_›s
,

161 
XFS_SB_CRC_OFF
 },

162 { 
TYP_SYMLINK
, "symlök", 
h™dÀ_°ru˘
, 
symlök_¸c_hÊd
,

163 &
xfs_symlök_buf_›s
, 
XFS_SYMLINK_CRC_OFF
 },

164 { 
TYP_TEXT
, "ãxt", 
h™dÀ_ãxt
, 
NULL
, NULL, 
TYP_F_NO_CRC_OFF
 },

165 { 
TYP_FINOBT
, "föobt", 
h™dÀ_°ru˘
, 
öobt_¸c_hÊd
,

166 &
xfs_öobt_buf_›s
, 
XFS_BTREE_SBLOCK_CRC_OFF
 },

167 { 
TYP_NONE
, 
NULL
 }

170 c⁄° 
typ_t
 *
	gty±ab
 = 
__ty±ab
;

173 
	$ty≥_£t_èb_¸c
()

175 
ty±ab
 = 
__ty±ab_¸c
;

176 
	}
}

179 
	$ty≥_£t_èb_•¸c
()

181 
ty±ab
 = 
__ty±ab_•¸c
;

182 
	}
}

184 c⁄° 
typ_t
 *

185 
	$födtyp
(

186 *
«me
)

188 c⁄° 
typ_t
 *
â
;

190 
â
 = 
ty±ab
;Åt->
ty≤m
 !
TYP_NONE
;Åt++) {

191 
	`ASSERT
(
â
->
ty≤m
 =(
ty≤m_t
)—à- 
ty±ab
));

192 i‡(
â
->
«me
 && 
	`°rcmp
(tt->name,Çame) == 0)

193  
â
;

195  
NULL
;

196 
	}
}

199 
	$ty≥_f
(

200 
¨gc
,

201 **
¨gv
)

203 c⁄° 
typ_t
 *
â
;

204 
cou¡
 = 0;

206 i‡(
¨gc
 == 1) {

207 i‡(
cur_typ
 =
NULL
)

208 
	`db¥ötf
(
	`_
("no currentÅype\n"));

210 
	`db¥ötf
(
	`_
("cuºíàty≥ i†\"%s\"\n"), 
cur_typ
->
«me
);

212 
	`db¥ötf
(
	`_
("\n supportedÅypesáre:\n "));

213 
â
 = 
ty±ab
, 
cou¡
 = 0;Åt->
ty≤m
 !
TYP_NONE
;Åt++) {

214 i‡(
â
->
«me
 =
NULL
)

216 i‡((
â
+1)->
«me
 !
NULL
) {

217 
	`db¥ötf
("%s, ", 
â
->
«me
);

218 i‡((++
cou¡
 % 8) == 0)

219 
	`db¥ötf
("\n ");

220 } i‡((
â
+1)->
ty≤m
 =
TYP_NONE
) {

221 
	`db¥ötf
("%s\n", 
â
->
«me
);

227 
â
 = 
	`födtyp
(
¨gv
[1]);

228 i‡(
â
 =
NULL
) {

229 
	`db¥ötf
(
	`_
("nÿsuchÅy≥ %s\n"), 
¨gv
[1]);

231 i‡(
iocur_t›
->
typ
 =
NULL
)

232 
	`db¥ötf
(
	`_
("no current object\n"));

234 
cur_typ
 = 
â
;

235 
	`£t_iocur_ty≥
(
â
);

240 
	}
}

243 
	$ty≥_öô
()

245 
	`add_comm™d
(&
ty≥_cmd
);

246 
	}
}

251 
	$h™dÀ_°ru˘
(

252 
a˘i⁄
,

253 c⁄° 
fõld_t
 *
fõlds
,

254 
¨gc
,

255 **
¨gv
)

257 i‡(
a˘i⁄
 =
DB_WRITE
)

258 
	`wrôe_°ru˘
(
fõlds
, 
¨gc
, 
¨gv
);

260 
	`¥öt_°ru˘
(
fõlds
, 
¨gc
, 
¨gv
);

261 
	}
}

264 
	$h™dÀ_°rög
(

265 
a˘i⁄
,

266 c⁄° 
fõld_t
 *
fõlds
,

267 
¨gc
,

268 **
¨gv
)

270 i‡(
a˘i⁄
 =
DB_WRITE
)

271 
	`wrôe_°rög
(
fõlds
, 
¨gc
, 
¨gv
);

273 
	`¥öt_°rög
(
fõlds
, 
¨gc
, 
¨gv
);

274 
	}
}

277 
	$h™dÀ_block
(

278 
a˘i⁄
,

279 c⁄° 
fõld_t
 *
fõlds
,

280 
¨gc
,

281 **
¨gv
)

283 i‡(
a˘i⁄
 =
DB_WRITE
)

284 
	`wrôe_block
(
fõlds
, 
¨gc
, 
¨gv
);

286 
	`¥öt_block
(
fõlds
, 
¨gc
, 
¨gv
);

287 
	}
}

290 
	$h™dÀ_ãxt
(

291 
a˘i⁄
,

292 c⁄° 
fõld_t
 *
fõlds
,

293 
¨gc
,

294 **
¨gv
)

296 i‡(
a˘i⁄
 !
DB_WRITE
)

297 
	`¥öt_ãxt
(
fõlds
, 
¨gc
, 
¨gv
);

298 
	}
}

	@db/type.h

19 
	gfõld
;

21 
	#szof
(
x
,
y
Ë(((x *)0)->y)

	)

22 
	#szcou¡
(
x
,
y
Ë(
	`szof
(x,yË/ szof(x,y[0]))

	)

24 
	ety≤m


26 
	mTYP_AGF
, 
	mTYP_AGFL
, 
	mTYP_AGI
, 
	mTYP_ATTR
, 
	mTYP_BMAPBTA
,

27 
	mTYP_BMAPBTD
, 
	mTYP_BNOBT
, 
	mTYP_CNTBT
, 
	mTYP_RMAPBT
, 
	mTYP_REFCBT
, 
	mTYP_DATA
,

28 
	mTYP_DIR2
, 
	mTYP_DQBLK
, 
	mTYP_INOBT
, 
	mTYP_INODATA
, 
	mTYP_INODE
,

29 
	mTYP_LOG
, 
	mTYP_RTBITMAP
, 
	mTYP_RTSUMMARY
, 
	mTYP_SB
, 
	mTYP_SYMLINK
,

30 
	mTYP_TEXT
, 
	mTYP_FINOBT
, 
	mTYP_NONE


31 } 
	tty≤m_t
;

33 
	#DB_WRITE
 1

	)

34 
	#DB_READ
 0

	)

36 (*
	t›func_t
)(c⁄° 
	tfõld
 *
	tÊd
, 
	t¨gc
, **
	t¨gv
);

37 (*
	tpfunc_t
)(
	ta˘i⁄
, c⁄° 
	tfõld
 *
	tÊd
, 
	t¨gc
, **
	t¨gv
);

39 
	styp


41 
ty≤m_t
 
ty≤m
;

42 *
«me
;

43 
pfunc_t
 
pfunc
;

44 c⁄° 
fõld
 *
fõlds
;

45 c⁄° 
xfs_buf_›s
 *
b›s
;

46 
¸c_off
;

47 
	#TYP_F_NO_CRC_OFF
 (-1UL)

	)

48 } 
	ttyp_t
;

49 c⁄° 
typ_t
 *
ty±ab
, *
cur_typ
;

51 
	`ty≥_öô
();

52 
	`ty≥_£t_èb_¸c
();

53 
	`ty≥_£t_èb_•¸c
();

54 
	`h™dÀ_block
(
a˘i⁄
, c⁄° 
fõld
 *
fõlds
, 
¨gc
,

55 **
¨gv
);

56 
	`h™dÀ_°rög
(
a˘i⁄
, c⁄° 
fõld
 *
fõlds
, 
¨gc
,

57 **
¨gv
);

58 
	`h™dÀ_°ru˘
(
a˘i⁄
, c⁄° 
fõld
 *
fõlds
, 
¨gc
,

59 **
¨gv
);

60 
	`h™dÀ_ãxt
(
a˘i⁄
, c⁄° 
fõld
 *
fõlds
, 
¨gc
,

61 **
¨gv
);

	@db/write.c

19 
	~"libxfs.h
"

20 
	~<˘y≥.h
>

21 
	~<time.h
>

22 
	~"bô.h
"

23 
	~"block.h
"

24 
	~"comm™d.h
"

25 
	~"ty≥.h
"

26 
	~"Áddr.h
"

27 
	~"Âröt.h
"

28 
	~"fõld.h
"

29 
	~"Êi°.h
"

30 
	~"io.h
"

31 
	~"öô.h
"

32 
	~"ouçut.h
"

33 
	~"¥öt.h
"

34 
	~"wrôe.h
"

35 
	~"mÆloc.h
"

37 
wrôe_f
(
¨gc
, **
¨gv
);

38 
wrôe_hñp
();

40 c⁄° 
cmdöfo_t
 
	gwrôe_cmd
 =

41 { "wrôe", 
NULL
, 
wrôe_f
, 0, -1, 0, 
N_
("[-c] [field or value]..."),

42 
N_
("wrôêvÆuêtÿdisk"), 
wrôe_hñp
 };

45 
	$wrôe_öô
()

47 i‡(!
ex≥π_mode
)

50 
	`add_comm™d
(&
wrôe_cmd
);

51 
	`§™d48
(
	`˛ock
());

52 
	}
}

55 
	$wrôe_hñp
()

57 
	`db¥ötf
(
	`_
(

88 
	}
}

91 
	$wrôe_f
(

92 
¨gc
,

93 **
¨gv
)

95 
pfunc_t
 
pf
;

96 *
¥og«me
;

97 
c
;

98 
boﬁ
 
c‹ru±
 = 
Ál£
;

99 
boﬁ
 
övÆid_d©a
 = 
Ál£
;

100 
xfs_buf_›s
 
loˇl_›s
;

101 c⁄° 
xfs_buf_›s
 *
°ashed_›s
 = 
NULL
;

103 i‡(
x
.
i§ód⁄ly
 & 
LIBXFS_ISREADONLY
) {

104 
	`db¥ötf
(
	`_
("%s started inÑead only mode, writing disabled\n"),

105 
¥og«me
);

109 i‡(
cur_typ
 =
NULL
) {

110 
	`db¥ötf
(
	`_
("no currentÅype\n"));

114 
pf
 = 
cur_typ
->
pfunc
;

115 i‡(
pf
 =
NULL
) {

116 
	`db¥ötf
(
	`_
("no handler function forÅype %s, write unsupported.\n"),

117 
cur_typ
->
«me
);

121 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "cd")Ë!
EOF
) {

122 
c
) {

124 
c‹ru±
 = 
åue
;

127 
övÆid_d©a
 = 
åue
;

130 
	`db¥ötf
(
	`_
("bad option for write command\n"));

135 i‡(
c‹ru±
 && 
övÆid_d©a
) {

136 
	`db¥ötf
(
	`_
("Cannot specify both -cánd -d options\n"));

140 i‡(
övÆid_d©a
 && 
iocur_t›
->
typ
->
¸c_off
 =
TYP_F_NO_CRC_OFF
) {

141 
	`db¥ötf
(
	`_
("CannotÑecalculate CRCs onÅhisÅype of object\n"));

145 
¨gc
 -
›töd
;

146 
¨gv
 +
›töd
;

152 i‡(!
iocur_t›
->
bp
->
b_›s
 ||

153 !(
c‹ru±
 || 
övÆid_d©a
)) {

154 (*
pf
)(
DB_WRITE
, 
cur_typ
->
fõlds
, 
¨gc
, 
¨gv
);

160 
°ashed_›s
 = 
iocur_t›
->
bp
->
b_›s
;

161 
loˇl_›s
.
vîify_ªad
 = 
°ashed_›s
->verify_read;

162 
iocur_t›
->
bp
->
b_›s
 = &
loˇl_›s
;

164 i‡(
c‹ru±
) {

165 
loˇl_›s
.
vîify_wrôe
 = 
xfs_dummy_vîify
;

166 
	`db¥ötf
(
	`_
("Allowing write of corrupted dataánd bad CRC\n"));

168 
loˇl_›s
.
vîify_wrôe
 = 
xfs_vîify_ªˇlc_¸c
;

169 
	`db¥ötf
(
	`_
("Allowing write of corrupted data with good CRC\n"));

172 (*
pf
)(
DB_WRITE
, 
cur_typ
->
fõlds
, 
¨gc
, 
¨gv
);

174 
iocur_t›
->
bp
->
b_›s
 = 
°ashed_›s
;

177 
	}
}

182 
	$sigcmp
(

183 *
s1
,

184 *
s2
,

185 
sig
)

187 
sig˙t
;

189 i‡(!
s1
 || !
s2
)

192 
sig˙t
 = 0; *
s1
 =*
s2
; s1++, s2++) {

193 
sig˙t
++;

194 i‡(*
s1
 == '\0')

197 i‡(*
s1
 && *
s2
)

200 i‡(
sig
 && (
sig˙t
 >= sig))

204 
	}
}

208 
	$bwrôe_lshi·
(

209 
°¨t
,

210 
Àn
,

211 
shi·
,

212 
‰om
,

213 
to
)

215 *
ba£
;

217 i‡(
shi·
 == -1)

218 
shi·
 = 1;

219 i‡(
°¨t
 == -1)

220 
°¨t
 = 0;

221 i‡(
Àn
 == -1)

222 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

224 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

225 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

226 
Àn
, 
iocur_t›
->len);

229 
ba£
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

231 
	`mem˝y
(
ba£
, ba£+
shi·
, 
Àn
-shift);

232 
	`mem£t
(
ba£
+(
Àn
-
shi·
), 0, shift);

233 
	}
}

237 
	$bwrôe_rshi·
(

238 
°¨t
,

239 
Àn
,

240 
shi·
,

241 
‰om
,

242 
to
)

244 *
ba£
;

246 i‡(
shi·
 == -1)

247 
shi·
 = 1;

248 i‡(
°¨t
 == -1)

249 
°¨t
 = 0;

250 i‡(
Àn
 == -1)

251 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

253 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

254 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

255 
Àn
, 
iocur_t›
->len);

258 
ba£
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

260 
	`mem˝y
(
ba£
+
shi·
, ba£, 
Àn
-shift);

261 
	`mem£t
(
ba£
, 0, 
shi·
);

262 
	}
}

266 
	$bwrôe_ÃŸ
(

267 
°¨t
,

268 
Àn
,

269 
shi·
,

270 
‰om
,

271 
to
)

273 *
ba£
;

274 *
hﬁd_ªgi⁄
;

276 i‡(
shi·
 == -1)

277 
shi·
 = 1;

278 i‡(
°¨t
 == -1)

279 
°¨t
 = 0;

280 i‡(
Àn
 == -1)

281 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

283 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

284 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

285 
Àn
, 
iocur_t›
->len);

288 
ba£
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

290 
hﬁd_ªgi⁄
 = 
	`xmÆloc
(
shi·
);

291 
	`mem˝y
(
hﬁd_ªgi⁄
, 
ba£
, 
shi·
);

292 
	`mem˝y
(
ba£
, ba£+
shi·
, 
Àn
-shift);

293 
	`mem˝y
(
ba£
+(
Àn
-
shi·
), 
hﬁd_ªgi⁄
, shift);

294 
	`‰ì
(
hﬁd_ªgi⁄
);

295 
	}
}

299 
	$bwrôe_ºŸ
(

300 
°¨t
,

301 
Àn
,

302 
shi·
,

303 
‰om
,

304 
to
)

306 *
ba£
;

307 *
hﬁd_ªgi⁄
;

309 i‡(
shi·
 == -1)

310 
shi·
 = 1;

311 i‡(
°¨t
 == -1)

312 
°¨t
 = 0;

313 i‡(
Àn
 == -1)

314 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

316 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

317 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

318 
Àn
, 
iocur_t›
->len);

321 
ba£
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

323 
hﬁd_ªgi⁄
 = 
	`xmÆloc
(
shi·
);

324 
	`mem˝y
(
hﬁd_ªgi⁄
, 
ba£
+(
Àn
-
shi·
), shift);

325 
	`memmove
(
ba£
+
shi·
, ba£, 
Àn
-shift);

326 
	`mem˝y
(
ba£
, 
hﬁd_ªgi⁄
, 
shi·
);

327 
	`‰ì
(
hﬁd_ªgi⁄
);

328 
	}
}

332 
	$bwrôe_£q
(

333 
°¨t
,

334 
Àn
,

335 
°ï
,

336 
‰om
,

337 
to
)

339 
i
;

340 
tmp
;

341 
ba£
;

342 
ønge
;

343 
t›
;

344 *
buf
;

346 i‡(
°¨t
 == -1)

347 
°¨t
 = 0;

349 i‡(
Àn
 == -1)

350 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

352 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

353 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

354 
Àn
, 
iocur_t›
->len);

357 i‡(
‰om
 == -1 || from > 255)

358 
‰om
 = 0;

359 i‡(
to
 == -1 ||Åo > 255)

360 
to
 = 255;

361 i‡(
°ï
 == -1)

362 
°ï
 = 1;

364 
ba£
 = 
‰om
;

365 
t›
 = 
to
;

366 i‡(
‰om
 > 
to
) {

367 
ba£
 = 
to
;

368 
t›
 = 
‰om
;

369 i‡(
°ï
 > 0)

370 
°ï
 = -step;

373 
ønge
 = 
t›
 - 
ba£
;

374 
buf
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

376 
tmp
 = 0;

377 
i
 = 
°¨t
; i < sèπ+
Àn
; i++) {

378 *
buf
++ = 
tmp
 + 
ba£
;

379 
tmp
 = (tm∞+ 
°ï
)%(
ønge
+1);

381 
	}
}

385 
	$bwrôe_øndom
(

386 
°¨t
,

387 
Àn
,

388 
shi·
,

389 
‰om
,

390 
to
)

392 
i
;

393 *
buf
;

395 i‡(
°¨t
 == -1)

396 
°¨t
 = 0;

398 i‡(
Àn
 == -1)

399 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

401 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

402 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

403 
Àn
, 
iocur_t›
->len);

406 
buf
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

408 
i
 = 
°¨t
; i < sèπ+
Àn
; i++)

409 *
buf
++ = ()
	`Ã™d48
();

410 
	}
}

414 
	$bwrôe_fûl
(

415 
°¨t
,

416 
Àn
,

417 
vÆue
,

418 
‰om
,

419 
to
)

421 *
ba£
;

423 i‡(
vÆue
 == -1)

424 
vÆue
 = 0;

425 i‡(
°¨t
 == -1)

426 
°¨t
 = 0;

427 i‡(
Àn
 == -1)

428 
Àn
 = 
iocur_t›
->À¿- 
°¨t
;

430 i‡(
Àn
+
°¨t
 > 
iocur_t›
->len) {

431 
	`db¥ötf
(
	`_
("length (%d)ÅooÜarge for data block size (%d)"),

432 
Àn
, 
iocur_t›
->len);

435 
ba£
 = (*)
iocur_t›
->
d©a
 + 
°¨t
;

437 
	`mem£t
(
ba£
, 
vÆue
, 
Àn
);

438 
	}
}

440 
	sbw_cmd
 {

441 (*
	mcmdfunc
)(,,,,);

442 *
	mcmd°r
;

443 
	msig_ch¨s
;

444 
	m¨gmö
;

445 
	m¨gmax
;

446 
	mshi·cou¡_¨g
;

447 
	m‰om_¨g
;

448 
	mto_¨g
;

449 
	m°¨t_¨g
;

450 
	mÀn_¨g
;

451 *
	mußge
;

452 } 
	gbw_cmdèb
[] = {

454 { 
bwrôe_lshi·
, "lshift", 2, 0, 3, 1, 0, 0, 2, 3,

456 { 
bwrôe_rshi·
, "rshift", 2, 0, 3, 1, 0, 0, 2, 3,

458 { 
bwrôe_ÃŸ
, "lrot", 2, 0, 3, 1, 0, 0, 2, 3,

460 { 
bwrôe_ºŸ
, "rrot", 2, 0, 3, 1, 0, 0, 2, 3,

462 { 
bwrôe_£q
, "sequence", 3, 0, 4, 0, 1, 2, 3, 4,

464 { 
bwrôe_øndom
, "random", 3, 0, 2, 0, 0, 0, 1, 2,

466 { 
bwrôe_fûl
, "fill", 1, 1, 3, 1, 0, 0, 2, 3,

470 
	#BWRITE_CMD_MAX
 ((
bw_cmdèb
)/(bw_cmdèb[0]))

	)

473 
	$c⁄vît_o˘
(

474 *
¨g
,

475 *
ªt
)

477 
cou¡
;

478 
i
;

479 
vÆ
 = 0;

483 
cou¡
 = 0; count < 3; count++) {

484 i‡(
¨g
[
cou¡
] == '\0')

487 i‡((
¨g
[
cou¡
] < '0') && (arg[count] > '7'))

491 
i
 = 0; i < 
cou¡
; i++) {

492 
vÆ
 |((
¨g
[(
cou¡
-1)-
i
]-'0')&0x07)<<(i*3);

495 *
ªt
 = 
vÆ
&0xff;

497 (
cou¡
);

498 
	}
}

500 
	#NYBBLE
(
x
Ë(
	`isdigô
(x)?(x-'0'):(
	`tﬁowî
(x)-'a'+0xa))

	)

520 
	$c⁄vît_¨g
(

521 *
¨g
,

522 
bô_Àngth
)

524 
i
;

525 
Æloc_size
;

526 
o˘vÆ
;

527 
off£t
;

528 
ªt
;

529 *
buf
 = 
NULL
;

530 *
ídp
;

531 *
rbuf
;

532 *
o°r
;

533 
__u64
 *
vÆue
;

534 
__u64
 
vÆ
 = 0;

536 i‡(
bô_Àngth
 <= 64)

537 
Æloc_size
 = 8;

539 
Æloc_size
 = (
bô_Àngth
 + 7) / 8;

541 
buf
 = 
	`xªÆloc
(buf, 
Æloc_size
);

542 
	`mem£t
(
buf
, 0, 
Æloc_size
);

543 
vÆue
 = (
__u64
 *)
buf
;

544 
rbuf
 = 
buf
;

546 i‡(*
¨g
 == '\"') {

550 
o°r
 = 
	`°ºchr
(
¨g
 + 1, '\"');

551 i‡(
o°r
)

552 *
o°r
 = '\0';

554 
o°r
 = 
¨g
 + 1;

555 
i
 = 0; i < 
Æloc_size
; i++) {

556 i‡(!*
o°r
)

560 i‡(*
o°r
 == '\\') {

561 i‡(*(
o°r
 + 1) >= '0' || *(ostr + 1) <= '7') {

562 
ªt
 = 
	`c⁄vît_o˘
(
o°r
 + 1, &
o˘vÆ
);

563 *
rbuf
++ = 
o˘vÆ
;

564 
o°r
 +
ªt
 + 1;

568 *
rbuf
++ = *
o°r
++;

570  
buf
;

573 i‡(
¨g
[0] ='#' || (◊rg[0] !'-'Ë&& 
	`°rchr
(arg,'-'))) {

582 
byãs
 = 
bô_Àngth
 / 
NBBY
;

585 i‡(
bô_Àngth
 % 
NBBY
)

586  
NULL
;

589 i‡(*
¨g
 == '#')

590 
¨g
++;

592 *
¨g
 && 
byãs
--) {

594 *
¨g
 == '-')

595 
¨g
++;

598 i‡(!
	`isxdigô
(()*
¨g
))

599  
NULL
;

600 *
rbuf
 = 
	`NYBBLE
(()*
¨g
) << 4;

601 
¨g
++;

604 *
¨g
 == '-')

605 
¨g
++;

608 i‡(!
	`isxdigô
(()*
¨g
))

609  
NULL
;

610 *
rbuf
++ |
	`NYBBLE
(()*
¨g
);

611 
¨g
++;

613 i‡(
byãs
 < 0 && *
¨g
)

614  
NULL
;

616  
buf
;

620 
vÆ
 = 
	`°πﬁl
(
¨g
, &
ídp
, 0);

622 i‡(*
ídp
 != '\0')

623  
NULL
;

626 i‡(
bô_Àngth
 < 64 && (
vÆ
 >> bit_length) > 0)

627  
NULL
;

638 
off£t
 = 
bô_Àngth
 % 
NBBY
;

639 i‡(
off£t
)

640 
vÆ
 <<(
NBBY
 - 
off£t
);

646 *
vÆue
 = 
	`˝u_to_be64
(
vÆ
);

652 
off£t
 = (
__be64
Ë- 1 - ((
bô_Àngth
 - 1) / (__be64));

653 
rbuf
 +
off£t
;

654  
rbuf
;

655 
	}
}

660 
	$wrôe_°ru˘
(

661 c⁄° 
fõld_t
 *
fõlds
,

662 
¨gc
,

663 **
¨gv
)

665 c⁄° 
·©å_t
 *
Á
;

666 
Êi°_t
 *
Ê
;

667 
Êi°_t
 *
sÊ
;

668 
bô_Àngth
;

669 *
buf
;

670 
∑ª¡off£t
;

672 i‡(
¨gc
 != 2) {

673 
	`db¥ötf
(
	`_
("usage: write fieldname value\n"));

677 
Ê
 = 
	`Êi°_sˇn
(
¨gv
[0]);

678 i‡(!
Ê
) {

679 
	`db¥ötf
(
	`_
("u«bÀÅÿ∑r£ '%s'.\n"), 
¨gv
[0]);

684 i‡(
fõlds
->
«me
[0] == '\0') {

685 
Á
 = &
·©åèb
[
fõlds
->
·yp
];

686 
	`ASSERT
(
Á
->
·yp
 =
fõlds
->ftyp);

687 
fõlds
 = 
Á
->
subÊd
;

691 i‡(!
	`Êi°_∑r£
(
fõlds
, 
Ê
, 
iocur_t›
->
d©a
, 0)) {

692 
	`Êi°_‰ì
(
Ê
);

693 
	`db¥ötf
(
	`_
("parsingÉrror\n"));

697 
sÊ
 = 
Ê
;

698 
∑ª¡off£t
 = 0;

699 
sÊ
->
chûd
) {

700 
∑ª¡off£t
 = 
sÊ
->
off£t
;

701 
sÊ
 = sÊ->
chûd
;

717 
bô_Àngth
 = 
	`fsize
(
sÊ
->
Êd
, 
iocur_t›
->
d©a
, 
∑ª¡off£t
, 0);

718 i‡(
sÊ
->
Êd
->
Êags
 & 
FLD_ARRAY
)

719 
bô_Àngth
 *
sÊ
->
high
 - sÊ->
low
 + 1;

721 
bô_Àngth
 *
	`fcou¡
(
sÊ
->
Êd
, 
iocur_t›
->
d©a
, 
∑ª¡off£t
);

726 
buf
 = 
	`c⁄vît_¨g
(
¨gv
[1], 
bô_Àngth
);

727 i‡(!
buf
) {

728 
	`db¥ötf
(
	`_
("u«bÀÅÿc⁄vîàvÆuê'%s'.\n"), 
¨gv
[1]);

729 
	`Êi°_‰ì
(
Ê
);

733 
	`£tbôvÆ
(
iocur_t›
->
d©a
, 
sÊ
->
off£t
, 
bô_Àngth
, 
buf
);

734 
	`wrôe_cur
();

736 
	`Êi°_¥öt
(
Ê
);

737 
	`¥öt_Êi°
(
Ê
);

738 
	`Êi°_‰ì
(
Ê
);

739 
	}
}

743 
	$wrôe_°rög
(

744 c⁄° 
fõld_t
 *
fõlds
,

745 
¨gc
,

746 **
¨gv
)

748 *
buf
;

749 
i
;

751 i‡(
¨gc
 != 1) {

752 
	`db¥ötf
(
	`_
("usage (in string mode): write \"string...\"\n"));

756 
buf
 = 
	`c⁄vît_¨g
(
¨gv
[0], ()((
	`°æí
(argv[0])+1)*8));

757 
i
 = 0; i < 
iocur_t›
->
Àn
; i++) {

758 ((*)
iocur_t›
->
d©a
)[
i
] = *
buf
;

759 i‡(*
buf
++ == '\0')

764 
	`wrôe_cur
();

765 
	}
}

769 
	$wrôe_block
(

770 c⁄° 
fõld_t
 *
fõlds
,

771 
¨gc
,

772 **
¨gv
)

774 
i
;

775 
shi·cou¡
 = -1;

776 
°¨t
 = -1;

777 
Àn
 = -1;

778 
‰om
 = -1;

779 
to
 = -1;

780 
bw_cmd
 *
cmd
 = 
NULL
;

782 i‡(
¨gc
 <= 1 ||árgc > 5)

783 
block_ußge
;

785 
i
 = 0; i < 
BWRITE_CMD_MAX
; i++) {

786 i‡(
	`sigcmp
(
¨gv
[0], 
bw_cmdèb
[
i
].
cmd°r
,

787 
bw_cmdèb
[
i
].
sig_ch¨s
)) {

788 
cmd
 = &
bw_cmdèb
[
i
];

793 i‡(!
cmd
) {

794 
	`db¥ötf
(
	`_
("write: invalid subcommand\n"));

795 
block_ußge
;

798 i‡((
¨gc
 < 
cmd
->
¨gmö
 + 1Ë|| (¨g¯> cmd->
¨gmax
 + 1)) {

799 
	`db¥ötf
(
	`_
("write %s: invalidÇumber ofárguments\n"),

800 
cmd
->
cmd°r
);

801 
block_ußge
;

804 i‡(
cmd
->
shi·cou¡_¨g
 && (cmd->shi·cou¡_¨g < 
¨gc
))

805 
shi·cou¡
 = ()
	`°πoul
(
¨gv
[
cmd
->
shi·cou¡_¨g
], 
NULL
, 0);

806 i‡(
cmd
->
°¨t_¨g
 && (cmd->°¨t_¨g < 
¨gc
))

807 
°¨t
 = ()
	`°πoul
(
¨gv
[
cmd
->
°¨t_¨g
], 
NULL
, 0);

808 i‡(
cmd
->
Àn_¨g
 && (cmd->Àn_¨g < 
¨gc
))

809 
Àn
 = ()
	`°πoul
(
¨gv
[
cmd
->
Àn_¨g
], 
NULL
, 0);

810 i‡(
cmd
->
‰om_¨g
 && (cmd->
Àn_¨g
 < 
¨gc
))

811 
‰om
 = ()
	`°πoul
(
¨gv
[
cmd
->
‰om_¨g
], 
NULL
, 0);

812 i‡(
cmd
->
to_¨g
 && (cmd->
Àn_¨g
 < 
¨gc
))

813 
to
 = ()
	`°πoul
(
¨gv
[
cmd
->
to_¨g
], 
NULL
, 0);

815 
cmd
->
	`cmdfunc
(
°¨t
, 
Àn
, 
shi·cou¡
, 
‰om
, 
to
);

818 
	`wrôe_cur
();

821 
block_ußge
:

823 
	`db¥ötf
(
	`_
("usage: write (in data mode)\n"));

824 
i
 = 0; i < 
BWRITE_CMD_MAX
; i++) {

825 
	`db¥ötf
(" %-9.9s %s\n",

826 
bw_cmdèb
[
i
].
cmd°r
, bw_cmdèb[i].
ußge
);

828 
	`db¥ötf
("\n");

830 
	}
}

	@db/write.h

19 
	gfõld
;

21 
wrôe_öô
();

22 
wrôe_block
(c⁄° 
fõld_t
 *
fõlds
, 
¨gc
, **
¨gv
);

23 
wrôe_°ru˘
(c⁄° 
fõld_t
 *
fõlds
, 
¨gc
, **
¨gv
);

24 
wrôe_°rög
(c⁄° 
fõld_t
 *
fõlds
, 
¨gc
, **
¨gv
);

	@estimate/xfs_estimate.c

24 
	~"libxfs.h
"

25 
	~<sys/°©.h
>

26 
	~<·w.h
>

29 
	$cväum
(*
s
)

31 
i
;

32 *
•
;

34 
i
 = 
	`°πﬁl
(
s
, &
•
, 0);

35 i‡(
i
 =0 && 
•
 =
s
)

37 i‡(*
•
 == '\0')

38  
i
;

39 i‡(*
•
 =='k' && sp[1] == '\0')

40  1024LL * 
i
;

41 i‡(*
•
 =='m' && sp[1] == '\0')

42  1024LL * 1024LL * 
i
;

43 i‡(*
•
 =='g' && sp[1] == '\0')

44  1024LL * 1024LL * 1024LL * 
i
;

46 
	}
}

48 
f‚
(c⁄° *, c⁄° 
°©
 *, , 
FTW
 *);

50 
	#BLOCKSIZE
 4096

	)

51 
	#INODESIZE
 256

	)

52 
	#PERDIRENTRY
 \

53 ((
xfs_dú2_Àaf_íåy_t
Ë+ (
xfs_dú2_d©a_íåy_t
))

	)

54 
	#LOGSIZE
 1000

	)

56 
	#FBLOCKS
(
n
Ë(“)/
blocksize
)

	)

57 
	#RFBYTES
(
n
Ë(“Ë- (
	`FBLOCKS
“Ë* 
blocksize
))

	)

59 
	gdúsize
=0;

60 
	glogsize
=
LOGSIZE
*
BLOCKSIZE
;

61 
	gfuŒblocks
=0;

62 
	gisize
=0;

63 
	gblocksize
=
BLOCKSIZE
;

64 
	gn¶öks
=0;

65 
	gnfûes
=0;

66 
	gndús
=0;

67 
	gn•ecül
=0;

68 
	gvîbo£
=0;

70 
	g__debug
 = 0;

71 
	gûog
 = 0;

72 
	gñog
 = 0;

75 
	$ußge
(*
¥og«me
)

77 
	`Ârötf
(
°dîr
,

78 
	`_
("Usage: %s [opts] directory [directory ...]\n"

87 
	`ba£«me
(
¥og«me
));

88 
	`exô
(1);

89 
	}
}

92 
	$maö
(
¨gc
, **
¨gv
)

94 
e°
;

95 
›töd
;

96 *
›èrg
;

97 
d«me
[40];

98 
c
;

100 
	`£éoˇÀ
(
LC_ALL
, "");

101 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

102 
	`ãxtdomaö
(
PACKAGE
);

104 (
c
 = 
	`gë›t
 (
¨gc
, 
¨gv
, "b:hdve:i:V")Ë!
EOF
) {

105 
c
) {

107 
blocksize
=
	`cväum
(
›èrg
);

108 i‡(
blocksize
 <= 0LL) {

109 
	`Ârötf
(
°dîr
, 
	`_
("blocksize %lluÅoo small\n"),

110 
blocksize
);

111 
	`ußge
(
¨gv
[0]);

113 i‡(
blocksize
 > 64LL * 1024LL) {

114 
	`Ârötf
(
°dîr
, 
	`_
("blocksize %lluÅooÜarge\n"),

115 
blocksize
);

116 
	`ußge
(
¨gv
[0]);

120 i‡(
ñog
) {

121 
	`Ârötf
(
°dîr
, 
	`_
("already haveÉxternalÜog "

123 
	`ußge
(
¨gv
[0]);

125 
logsize
=
	`cväum
(
›èrg
);

126 
ûog
++;

129 i‡(
ûog
) {

130 
	`Ârötf
(
°dîr
, 
	`_
("already have internalÜog "

132 
	`ußge
(
¨gv
[0]);

134 
logsize
=
	`cväum
(
›èrg
);

135 
ñog
++;

138 
vîbo£
 = 1;

141 
__debug
++;

144 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
	`ba£«me
(
¨gv
[0]), 
VERSION
);

145 
	`exô
(0);

148 
	`ußge
(
¨gv
[0]);

152 i‡(
›töd
 =
¨gc
)

153 
	`ußge
(
¨gv
[0]);

155 i‡(!
ñog
 && !
ûog
) {

156 
ûog
=1;

157 
logsize
=
LOGSIZE
 * 
blocksize
;

159 i‡(
vîbo£
)

160 
	`¥ötf
(
	`_
("directory bsize blocks megabytesÜogsize\n"));

162  ; 
›töd
 < 
¨gc
; optind++) {

163 
dúsize
=0LL;

164 
fuŒblocks
=0LL;

165 
isize
=0LL;

166 
n¶öks
=0LL;

167 
nfûes
=0LL;

168 
ndús
=0LL;

169 
n•ecül
=0LL;

171 
	`n·w
(
¨gv
[
›töd
], 
f‚
, 40, 
FTW_PHYS
 | 
FTW_MOUNT
);

173 i‡(
__debug
) {

174 
	`¥ötf
(
	`_
("dúsize=%Œu\n"), 
dúsize
);

175 
	`¥ötf
(
	`_
("fuŒblocks=%Œu\n"), 
fuŒblocks
);

176 
	`¥ötf
(
	`_
("isize=%Œu\n"), 
isize
);

178 
	`¥ötf
(
	`_
("%ŒuÑeguœ∏fûes\n"), 
nfûes
);

179 
	`¥ötf
(
	`_
("%Œu symbﬁi¯löks\n"), 
n¶öks
);

180 
	`¥ötf
(
	`_
("%Œu dúe˘‹õs\n"), 
ndús
);

181 
	`¥ötf
(
	`_
("%Œu s≥cü»fûes\n"), 
n•ecül
);

184 
e°
 = 
	`FBLOCKS
(
isize
) + 8

185 + 
	`FBLOCKS
(
dúsize
) + 1

186 + 
fuŒblocks


188 + 
	`FBLOCKS
(
isize
 / 
INODESIZE
);

190 i‡(
ûog
)

191 
e°
 +(
logsize
 / 
blocksize
);

193 i‡(!
vîbo£
) {

194 
	`¥ötf
(
	`_
("%s willÅakeábout %.1f megabytes\n"),

195 
¨gv
[
›töd
],

196 ()
e°
*()
blocksize
/(1024.0*1024.0));

199 
	`°∫˝y
(
d«me
, 
¨gv
[
›töd
], 40);

200 
d«me
[39] = '\0';

201 
	`¥ötf
(
	`_
("%-39s %5llu %8llu %10.1fMB %10llu\n"),

202 
d«me
, 
blocksize
, 
e°
,

203 ()
e°
*()
blocksize
/(1024.0*1024.0), 
logsize
);

206 i‡(!
vîbo£
 && 
ñog
) {

207 
	`¥ötf
(
	`_
("\twithÅheÉxternalÜog using %llu blocks "),

208 
logsize
/
blocksize
);

209 
	`¥ötf
(
	`_
("orábout %.1f megabytes\n"),

210 ()
logsize
/(1024.0*1024.0));

214 
	}
}

217 
	$f‚
(c⁄° *
∑th
, c⁄° 
°©
 *
°b
, 
Êags
, 
FTW
 *
f
)

220 
dúsize
+=
PERDIRENTRY
+
	`°æí
(
∑th
);

221 
isize
+=
INODESIZE
;

222 
S_IFMT
 & 
°b
->
°_mode
) {

223 
S_IFREG
:

224 
fuŒblocks
+=
	`FBLOCKS
(
°b
->
°_blocks
 * 512 + 
blocksize
-1);

225 i‡(
°b
->
°_blocks
 * 512 < stb->
°_size
)

226 
fuŒblocks
++;

227 
nfûes
++;

229 
S_IFLNK
:

230 i‡(
°b
->
°_size
 >(
INODESIZE
 - ((
xfs_döode_t
)+4)))

231 
fuŒblocks
+=
	`FBLOCKS
(
°b
->
°_size
 + 
blocksize
-1);

232 
n¶öks
++;

234 
S_IFDIR
:

235 
dúsize
+=
blocksize
;

236 i‡(
°b
->
°_size
 >
blocksize
)

237 
dúsize
+=
blocksize
;

238 
ndús
++;

240 
S_IFIFO
:

241 
S_IFCHR
:

242 
S_IFBLK
:

243 
S_IFSOCK
:

244 
n•ecül
++;

248 
	}
}

	@fsr/xfs_fsr.c

19 
	~"libxfs.h
"

20 
	~"xfs.h
"

21 
	~"xfs_ty≥s.h
"

22 
	~"jdm.h
"

23 
	~"xfs_bm≠_båì.h
"

24 
	~"xfs_©å_sf.h
"

26 
	~<f˙é.h
>

27 
	~<î∫o.h
>

28 
	~<sy¶og.h
>

29 
	~<sig«l.h
>

30 
	~<sys/io˘l.h
>

31 
	~<sys/waô.h
>

32 
	~<sys/°©vfs.h
>

33 
	~<sys/x©å.h
>

34 
	~<∑ths.h
>

36 
	#_PATH_FSRLAST
 "/v¨/tmp/.f§œ°_xfs"

	)

37 
	#_PATH_PROC_MOUNTS
 "/¥oc/mou¡s"

	)

40 *
	g¥og«me
;

42 
	gvÊag
;

43 
	ggÊag
;

44 
	gMÊag
;

46 
	gdÊag
 = 0;

48 
	g¨gv_blksz_dio
;

49 
max_ext_size
;

50 
	g≈as£s
 = 10;

51 
	g°¨çass
 = 0;

53 
gëbm≠
 *
	goutm≠
 = 
NULL
;

54 
	goutm≠_size
 = 0;

55 
	gRólUid
;

56 
	gtmp_agi
;

57 
__öt64_t
 
	gmöimum‰ì
 = 2048;

59 
	#MNTTYPE_XFS
 "xfs"

	)

61 
	#SMBUFSZ
 1024

	)

62 
	#ROOT
 0

	)

63 
	#NULLFD
 -1

	)

64 
	#GRABSZ
 64

	)

65 
	#TARGETRANGE
 10

	)

66 
	#V_NONE
 0

	)

67 
	#V_OVERVIEW
 1

	)

68 
	#V_ALL
 2

	)

69 
	#BUFFER_SIZE
 (1<<16)

	)

70 
	#BUFFER_MAX
 (1<<24)

	)

72 
time_t
 
	ghowl⁄g
 = 7200;

73 *
	gÀ·offfûe
 = 
_PATH_FSRLAST
;

74 
time_t
 
	gídtime
;

75 
time_t
 
	g°¨âime
;

76 
xfs_öo_t
 
	gÀ·offöo
 = 0;

77 
	g∑gesize
;

79 
ußge
(
ªt
);

80 
f§fûe
(*
‚ame
, 
xfs_öo_t
 
öo
);

81 
f§fûe_comm⁄
–*
‚ame
, *
äame
, *
m¡
,

82 
fd
, 
xfs_b°©_t
 *
°©p
);

83 
∑ckfûe
(*
‚ame
, *
äame
, 
fd
,

84 
xfs_b°©_t
 *
°©p
, 
fsx©å
 *
fsxp
);

85 
f§dú
(*
dú«me
);

86 
f§fs
(*
m¡dú
, 
xfs_öo_t
 
öo
, 
èrgëønge
);

87 
öôÆlfs
(*
mèb
);

88 
f§Ælfs
(*
mèb
, 
howl⁄g
, *
À·offfûe
);

89 
f§Æl_˛ónup
(
timeout
);

90 
gë√xã¡s
();

91 
xf§ãxtsize
(
fd
);

92 
xfs_gëπ
(
fd
, 
°©vfs
 *
sfbp
);

93 * 
gëtm≤ame
(*
‚ame
);

94 * 
gë∑ª¡
(*
‚ame
);

95 
f§¥ötf
(c⁄° *
fmt
, ...);

96 
ªad_fd_bm≠
(, 
xfs_b°©_t
 *, *);

97 
cmp
(const *, const *);

98 
tmp_öô
(*
m¡
);

99 * 
tmp_√xt
(*
m¡
);

100 
tmp_˛o£
(*
m¡
);

101 
xfs_gëgeom
(, 
xfs_fs›_geom_v1_t
 * );

103 
xfs_fs›_geom_v1_t
 
	gfsgeom
;

105 
	#NMOUNT
 64

	)

106 
	gnumfs
;

108 
	sfsdesc
 {

109 *
	mdev
;

110 *
	mm¡
;

111 
	m≈ass
;

112 } 
	tfsdesc_t
;

114 
fsdesc_t
 *
	gfs
, *
	gfsba£
, *
	gf£nd
;

115 
	gfsbufsize
 = 10;

116 
	gn‰ags
 = 0;

118 
	g›í›ts
 = 
O_CREAT
|
O_EXCL
|
O_RDWR
|
O_DIRECT
;

121 
	$xfs_fsgeomëry
(
fd
, 
xfs_fs›_geom_v1_t
 *
geom
)

123  
	`io˘l
(
fd
, 
XFS_IOC_FSGEOMETRY_V1
, 
geom
);

124 
	}
}

127 
	$xfs_bulk°©_sögÀ
(
fd
, 
xfs_öo_t
 *
œ°ù
, 
xfs_b°©_t
 *
ubuf„r
)

129 
xfs_fs›_bulkªq_t
 
bulkªq
;

131 
bulkªq
.
œ°ù
 = (
__u64
 *)lastip;

132 
bulkªq
.
icou¡
 = 1;

133 
bulkªq
.
ubuf„r
 = ubuffer;

134 
bulkªq
.
ocou¡
 = 
NULL
;

135  
	`io˘l
(
fd
, 
XFS_IOC_FSBULKSTAT_SINGLE
, &
bulkªq
);

136 
	}
}

139 
	$xfs_bulk°©
(
fd
, 
xfs_öo_t
 *
œ°ù
, 
icou¡
,

140 
xfs_b°©_t
 *
ubuf„r
, 
__s32
 *
ocou¡
)

142 
xfs_fs›_bulkªq_t
 
bulkªq
;

144 
bulkªq
.
œ°ù
 = (
__u64
 *)lastip;

145 
bulkªq
.
icou¡
 = icount;

146 
bulkªq
.
ubuf„r
 = ubuffer;

147 
bulkªq
.
ocou¡
 = ocount;

148  
	`io˘l
(
fd
, 
XFS_IOC_FSBULKSTAT
, &
bulkªq
);

149 
	}
}

152 
	$xfs_sw≠ext
(
fd
, 
xfs_sw≠ext_t
 *
sx
)

154  
	`io˘l
(
fd
, 
XFS_IOC_SWAPEXT
, 
sx
);

155 
	}
}

158 
	$xfs_fscou¡s
(
fd
, 
xfs_fs›_cou¡s_t
 *
cou¡s
)

160  
	`io˘l
(
fd
, 
XFS_IOC_FSCOUNTS
, 
cou¡s
);

161 
	}
}

164 
	$ab‹ãr
(
unu£d
)

166 
	`f§Æl_˛ónup
(1);

167 
	`exô
(1);

168 
	}
}

177 
	$föd_mou¡poöt_check
(
°©
 *
sb
, 
m¡ít
 *
t
)

179 
°©
 
ms
;

181 i‡(
	`S_ISDIR
(
sb
->
°_mode
)) {

182 i‡(
	`°©
(
t
->
m¡_dú
, &
ms
) < 0)

183  
NULL
;

184 i‡(
sb
->
°_öo
 !
ms
.st_ino)

185  
NULL
;

186 i‡(
sb
->
°_dev
 !
ms
.st_dev)

187  
NULL
;

188 i‡(
	`°rcmp
(
t
->
m¡_ty≥
, 
MNTTYPE_XFS
) != 0)

189  
NULL
;

191 i‡(
	`°©
(
t
->
m¡_f¢ame
, &
ms
) < 0)

192  
NULL
;

193 i‡(
sb
->
°_rdev
 !
ms
.st_rdev)

194  
NULL
;

195 i‡(
	`°rcmp
(
t
->
m¡_ty≥
, 
MNTTYPE_XFS
) != 0)

196  
NULL
;

201 i‡(
	`°©
(
t
->
m¡_dú
, &
ms
) < 0)

202  
NULL
;

205  
t
->
m¡_dú
;

206 
	}
}

209 
	$föd_mou¡poöt
(*
mèb
, *
¨g«me
, 
°©
 *
sb
)

211 
m¡ít_curs‹
 
curs‹
;

212 
m¡ít
 *
t
 = 
NULL
;

213 *
m¡p
 = 
NULL
;

215 i‡(
	`∂©f‹m_m¡ít_›í
(&
curs‹
, 
mèb
) != 0){

216 
	`Ârötf
(
°dîr
, "Error: can't get mntentÉntries.\n");

217 
	`exô
(1);

220 (
t
 = 
	`∂©f‹m_m¡ít_√xt
(&
curs‹
)Ë!
NULL
) {

221 
m¡p
 = 
	`föd_mou¡poöt_check
(
sb
, 
t
);

222 i‡(
m¡p
 =
NULL
)

226 
	`∂©f‹m_m¡ít_˛o£
(&
curs‹
);

227  
m¡p
;

228 
	}
}

231 
	$maö
(
¨gc
, **
¨gv
)

233 
°©
 
sb
;

234 *
¨g«me
;

235 
c
;

236 *
m¡p
;

237 *
mèb
 = 
NULL
;

239 
	`£éöebuf
(
°dout
);

240 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

242 
	`£éoˇÀ
(
LC_ALL
, "");

243 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

244 
	`ãxtdomaö
(
PACKAGE
);

246 
gÊag
 = ! 
	`ißây
(0);

248 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "C:p:e:MgsdnvTt:f:m:b:N:FV")) != -1) {

249 
c
) {

251 
MÊag
 = 1;

254 
gÊag
 = 1;

260 ++
vÊag
;

263 
dÊag
 = 1;

267 
	`Ârötf
(
°dîr
,

268 
	`_
("%s: StatsÇot yet supported for XFS\n"),

269 
¥og«me
);

270 
	`ußge
(1);

273 
howl⁄g
 = 
	`©oi
(
›èrg
);

276 
À·offfûe
 = 
›èrg
;

279 
mèb
 = 
›èrg
;

282 
¨gv_blksz_dio
 = 
	`©oi
(
›èrg
);

285 
≈as£s
 = 
	`©oi
(
›èrg
);

289 i‡(
	`gëív
("FSRXFSTEST"Ë!
NULL
) {

290 
n‰ags
 = 
	`©oi
(
›èrg
);

291 
›í›ts
 |
O_SYNC
;

295 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
¥og«me
, 
VERSION
);

296 
	`exô
(0);

298 
	`ußge
(1);

309 i‡(!
mèb
) {

310 i‡(
	`ac˚ss
(
_PATH_PROC_MOUNTS
, 
R_OK
) == 0)

311 
mèb
 = 
_PATH_PROC_MOUNTS
;

313 
mèb
 = 
_PATH_MOUNTED
;

316 i‡(
vÊag
)

317 
	`£tbuf
(
°dout
, 
NULL
);

319 
°¨âime
 = 
	`time
(0);

322 
RólUid
 = 
	`gëuid
();

324 
∑gesize
 = 
	`gë∑gesize
();

326 i‡(
›töd
 < 
¨gc
) {

327 ; 
›töd
 < 
¨gc
; optind++) {

328 
¨g«me
 = 
¨gv
[
›töd
];

330 i‡(
	`l°©
(
¨g«me
, &
sb
) < 0) {

331 
	`Ârötf
(
°dîr
,

332 
	`_
("%s: couldÇot stat: %s: %s\n"),

333 
¥og«me
, 
¨g«me
, 
	`°ªº‹
(
î∫o
));

337 i‡(
	`S_ISLNK
(
sb
.
°_mode
)) {

338 
°©
 
sb2
;

340 i‡(
	`°©
(
¨g«me
, &
sb2
) == 0 &&

341 (
	`S_ISBLK
(
sb2
.
°_mode
) ||

342 
	`S_ISCHR
(
sb2
.
°_mode
)))

343 
sb
 = 
sb2
;

346 
m¡p
 = 
	`föd_mou¡poöt
(
mèb
, 
¨g«me
, &
sb
);

347 i‡(
m¡p
 !
NULL
) {

348 
	`f§fs
(
m¡p
, 0, 100);

349 } i‡(
	`S_ISCHR
(
sb
.
°_mode
)) {

350 
	`Ârötf
(
°dîr
, 
	`_
(

352 
¥og«me
, 
¨g«me
);

353 
	`exô
(1);

354 } i‡(
	`S_ISDIR
(
sb
.
°_mode
Ë|| 
	`S_ISREG
(sb.st_mode)) {

355 i‡(!
	`∂©f‹m_ã°_xfs_∑th
(
¨g«me
)) {

356 
	`Ârötf
(
°dîr
, 
	`_
(

358 
¥og«me
, 
¨g«me
);

361 i‡(
	`S_ISDIR
(
sb
.
°_mode
))

362 
	`f§dú
(
¨g«me
);

364 
	`f§fûe
(
¨g«me
, 
sb
.
°_öo
);

366 
	`¥ötf
(

367 
	`_
("%s:Çot fsys dev, dir, orÑeg file, ignoring\n"),

368 
¨g«me
);

372 
	`öôÆlfs
(
mèb
);

373 
	`f§Ælfs
(
mèb
, 
howl⁄g
, 
À·offfûe
);

376 
	}
}

379 
	$ußge
(
ªt
)

381 
	`Ârötf
(
°dîr
, 
	`_
(

394 ), 
¥og«me
,Örog«me,Örog«me, 
_PATH_FSRLAST
);

395 
	`exô
(
ªt
);

396 
	}
}

402 
	$öôÆlfs
(*
mèb
)

404 
m¡ít_curs‹
 
curs‹
;

405 
m¡ít
 *
m¡

NULL
;

406 
mi
;

407 *
˝
;

408 
°©
 
sb
;

411 i‡(!(
fsba£
 = (
fsdesc_t
 *)
	`mÆloc
(
fsbufsize
 * (fsdesc_t)))) {

412 
	`f§¥ötf
(
	`_
("ouào‡mem‹y: %s\n"), 
	`°ªº‹
(
î∫o
));

413 
	`exô
(1);

415 
f£nd
 = (
fsba£
 + 
fsbufsize
 - 1);

418 
mi
 = 0;

419 
fs
 = 
fsba£
;

421 i‡(
	`∂©f‹m_m¡ít_›í
(&
curs‹
, 
mèb
) != 0){

422 
	`Ârötf
(
°dîr
, "Error: can't get mntentÉntries.\n");

423 
	`exô
(1);

426 (
m¡
 = 
	`∂©f‹m_m¡ít_√xt
(&
curs‹
)Ë!
NULL
) {

427 
rw
 = 0;

429 i‡(
	`°rcmp
(
m¡
->
m¡_ty≥
, 
MNTTYPE_XFS
 ) != 0 ||

430 
	`°©
(
m¡
->
m¡_f¢ame
, &
sb
) == -1 ||

431 !
	`S_ISBLK
(
sb
.
°_mode
))

434 
˝
 = 
	`°πok
(
m¡
->
m¡_›ts
,",");

436 i‡(
	`°rcmp
("rw", 
˝
) == 0)

437 
rw
++;

438 } (
˝
 = 
	`°πok
(
NULL
, ",")) != NULL);

439 i‡(
rw
 == 0) {

440 i‡(
dÊag
)

441 
	`f§¥ötf
(
	`_
("Skipping %s:Çot mountedÑw\n"),

442 
m¡
->
m¡_f¢ame
);

446 i‡(
mi
 =
fsbufsize
) {

447 
fsbufsize
 +
NMOUNT
;

448 i‡((
fsba£
 = (
fsdesc_t
 *)
	`ªÆloc
((*)fsbase,

449 
fsbufsize
 * (
fsdesc_t
))Ë=
NULL
) {

450 
	`f§¥ötf
(
	`_
("out of memory: %s\n"),

451 
	`°ªº‹
(
î∫o
));

452 
	`exô
(1);

454 i‡(!
fsba£
) {

455 
	`f§¥ötf
(
	`_
("out of memory onÑealloc: %s\n"),

456 
	`°ªº‹
(
î∫o
));

457 
	`exô
(1);

459 
fs
 = (
fsba£
 + 
mi
);

462 
fs
->
dev
 = 
	`°rdup
(
m¡
->
m¡_f¢ame
);

463 
fs
->
m¡
 = 
	`°rdup
(m¡->
m¡_dú
);

465 i‡(
fs
->
dev
 =
NULL
) {

466 
	`f§¥ötf
(
	`_
("°rdup(%sËÁûed\n"), 
m¡
->
m¡_f¢ame
);

467 
	`exô
(1);

469 i‡(
fs
->
m¡
 =
NULL
) {

470 
	`f§¥ötf
(
	`_
("°rdup(%sËÁûed\n"), 
m¡
->
m¡_dú
);

471 
	`exô
(1);

473 
mi
++;

474 
fs
++;

476 
	`∂©f‹m_m¡ít_˛o£
(&
curs‹
);

478 
numfs
 = 
mi
;

479 
f£nd
 = (
fsba£
 + 
numfs
);

480 i‡(
numfs
 == 0) {

481 
	`f§¥ötf
(
	`_
("nÿrw xf†fûêsy°em†ö mèb: %s\n"), 
mèb
);

482 
	`exô
(0);

484 i‡(
vÊag
 || 
dÊag
) {

485 
	`f§¥ötf
(
	`_
("Found %d mounted, writable, XFS filesystems\n"),

486 
numfs
);

487 i‡(
dÊag
)

488 
fs
 = 
fsba£
; f†< 
f£nd
; fs++)

489 
	`f§¥ötf
("\t%-30.30s%-30.30s\n", 
fs
->
dev
, fs->
m¡
);

491 
	}
}

494 
	$f§Ælfs
(*
mèb
, 
howl⁄g
, *
À·offfûe
)

496 
fd
;

497 
îr‹
;

498 
found
 = 0;

499 *
f¢ame
;

500 
buf
[
SMBUFSZ
];

501 
md⁄ly
 = 
MÊag
;

502 *
±r
;

503 
xfs_öo_t
 
°¨töo
 = 0;

504 
fsdesc_t
 *
f•
;

505 
°©
 
sb
, 
sb2
;

507 
	`f§¥ötf
("xfs_f§ -m %†-à%d -‡%†...\n", 
mèb
, 
howl⁄g
, 
À·offfûe
);

509 
ídtime
 = 
°¨âime
 + 
howl⁄g
;

510 
fs
 = 
fsba£
;

513 i‡(
	`l°©
(
À·offfûe
, &
sb
) == 0) {

514 i‡–(
fd
 = 
	`›í
(
À·offfûe
, 
O_RDONLY
)) == -1 ) {

515 
	`f§¥ötf
(
	`_
("%s: o≥¿Áûed\n"), 
À·offfûe
);

517 i‡–
	`f°©
(
fd
, &
sb2
) == 0) {

522 i‡–(
sb
.
°_dev
 !
sb2
.st_dev) ||

523 (
sb
.
°_öo
 !
sb2
.st_ino) ||

524 ((
sb
.
°_mode
 & 
S_IFMT
Ë!
S_IFREG
) ||

525 ((
sb2
.
°_mode
 & 
S_IFMT
Ë!
S_IFREG
) ||

526 (
sb2
.
°_uid
 !
ROOT
) ||

527 (
sb2
.
°_∆ök
 != 1)

530 
	`f§¥ötf
(
	`_
("Can't use %s: mode=0%o own=%d"

532 
À·offfûe
, 
sb
.
°_mode
,

533 
sb
.
°_uid
, sb.
°_∆ök
);

534 
	`˛o£
(
fd
);

535 
fd
 = 
NULLFD
;

539 
	`˛o£
(
fd
);

540 
fd
 = 
NULLFD
;

544 
fd
 = 
NULLFD
;

547 i‡(
fd
 !
NULLFD
) {

548 i‡(
	`ªad
(
fd
, 
buf
, 
SMBUFSZ
) == -1) {

549 
fs
 = 
fsba£
;

550 
	`f§¥ötf
(
	`_
("couldÇotÑead %s, starting with %s\n"),

551 
À·offfûe
, *
fs
->
dev
);

554 
buf
[
SMBUFSZ
-1] = '\0';

555 
fs
 = 
fsba£
; f†< 
f£nd
; fs++) {

556 
f¢ame
 = 
fs
->
dev
;

557 i‡((
	`°∫cmp
(
buf
,
f¢ame
,
	`°æí
(fsname)) == 0)

558 && 
buf
[
	`°æí
(
f¢ame
)] == ' ') {

559 
found
 = 1;

563 i‡(! 
found
)

564 
fs
 = 
fsba£
;

566 
±r
 = 
	`°rchr
(
buf
, ' ');

567 i‡(
±r
) {

568 
°¨çass
 = 
	`©oi
(++
±r
);

569 
±r
 = 
	`°rchr
(ptr, ' ');

570 i‡(
±r
) {

571 
°¨töo
 = 
	`°πouŒ
(++
±r
, 
NULL
, 10);

574 i‡(
°¨çass
 < 0)

575 
°¨çass
 = 0;

578 
f•
 = 
fsba£
; f• < 
fs
; fsp++) {

579 
f•
->
≈ass
 = 
°¨çass
 + 1;

581 
f•
 = 
fs
; f• <
f£nd
; fsp++) {

582 
f•
->
≈ass
 = 
°¨çass
;

585 
	`˛o£
(
fd
);

588 i‡(
vÊag
) {

589 
	`f§¥ötf
(
	`_
("START:Öass=%d ino=%llu %s %s\n"),

590 
fs
->
≈ass
, ()
°¨töo
,

591 
fs
->
dev
, fs->
m¡
);

594 
	`sig«l
(
SIGABRT
, 
ab‹ãr
);

595 
	`sig«l
(
SIGHUP
, 
ab‹ãr
);

596 
	`sig«l
(
SIGINT
, 
ab‹ãr
);

597 
	`sig«l
(
SIGQUIT
, 
ab‹ãr
);

598 
	`sig«l
(
SIGTERM
, 
ab‹ãr
);

601 
ídtime
 > 
	`time
(0)) {

602 
pid_t
 
pid
;

603 i‡(
fs
 =
f£nd
)

604 
fs
 = 
fsba£
;

605 i‡(
fs
->
≈ass
 =
≈as£s
) {

606 
	`f§¥ötf
(
	`_
("Com∂ëedáŒ %dÖas£s\n"), 
≈as£s
);

609 i‡(
≈as£s
 > 1 && !
fs
->
≈ass
)

610 
MÊag
 = 1;

612 
MÊag
 = 
md⁄ly
;

613 
pid
 = 
	`f‹k
();

614 
pid
) {

616 
	`f§¥ötf
(
	`_
("couldn't fork subÖrocess:"));

617 
	`exô
(1);

620 
îr‹
 = 
	`f§fs
(
fs
->
m¡
, 
°¨töo
, 
TARGETRANGE
);

621 
	`exô
 (
îr‹
);

624 
	`waô
(&
îr‹
);

625 i‡(
	`WIFEXITED
(
îr‹
Ë&& 
	`WEXITSTATUS
(error) == 1) {

627 
	`exô
(0);

631 
°¨töo
 = 0;

632 
fs
->
≈ass
++;

633 
fs
++;

635 
	`f§Æl_˛ónup
(
ídtime
 <
	`time
(0));

636 
	}
}

642 
	$f§Æl_˛ónup
(
timeout
)

644 
fd
;

645 
ªt
;

646 
buf
[
SMBUFSZ
];

648 
	`u∆ök
(
À·offfûe
);

650 i‡(
timeout
) {

651 
	`f§¥ötf
(
	`_
("%s startpass %d,Éndpass %d,Åime %d seconds\n"),

652 
¥og«me
, 
°¨çass
, 
fs
->
≈ass
,

653 
	`time
(0Ë- 
ídtime
 + 
howl⁄g
);

656 
fd
 = 
	`›í
(
À·offfûe
, 
O_WRONLY
|
O_CREAT
|
O_EXCL
, 0644);

657 i‡(
fd
 == -1) {

658 
	`f§¥ötf
(
	`_
("open(%s) failed: %s\n"),

659 
À·offfûe
, 
	`°ªº‹
(
î∫o
));

661 
ªt
 = 
	`•rötf
(
buf
, "%†%d %Œu\n", 
fs
->
dev
,

662 
fs
->
≈ass
, ()
À·offöo
);

663 i‡(
	`wrôe
(
fd
, 
buf
, 
ªt
Ë< 
	`°æí
(buf))

664 
	`f§¥ötf
(
	`_
("write(%s) failed: %s\n"),

665 
À·offfûe
, 
	`°ªº‹
(
î∫o
));

666 
	`˛o£
(
fd
);

669 
	}
}

675 
	$f§fs
(*
m¡dú
, 
xfs_öo_t
 
°¨töo
, 
èrgëønge
)

678 
fsfd
, 
fd
;

679 
cou¡
 = 0;

680 
ªt
;

681 
__s32
 
buÊíout
;

682 
xfs_b°©_t
 
buf
[
GRABSZ
];

683 
‚ame
[64];

684 *
äame
;

685 
jdm_fsh™dÀ_t
 *
fsh™dÀp
;

686 
xfs_öo_t
 
œ°öo
 = 
°¨töo
;

688 
	`f§¥ötf
(
	`_
("%†°¨àöode=%Œu\n"), 
m¡dú
,

689 ()
°¨töo
);

691 
fsh™dÀp
 = 
	`jdm_gëfsh™dÀ
–
m¡dú
 );

692 i‡–! 
fsh™dÀp
 ) {

693 
	`f§¥ötf
(
	`_
("unableÅo get handle: %s: %s\n"),

694 
m¡dú
, 
	`°ªº‹
–
î∫o
 ));

698 i‡((
fsfd
 = 
	`›í
(
m¡dú
, 
O_RDONLY
)) < 0) {

699 
	`f§¥ötf
(
	`_
("unableÅo open: %s: %s\n"),

700 
m¡dú
, 
	`°ªº‹
–
î∫o
 ));

701 
	`‰ì
(
fsh™dÀp
);

705 i‡(
	`xfs_gëgeom
(
fsfd
, &
fsgeom
) < 0 ) {

706 
	`f§¥ötf
(
	`_
("Skipping %s: couldÇot get XFS geometry\n"),

707 
m¡dú
);

708 
	`˛o£
(
fsfd
);

709 
	`‰ì
(
fsh™dÀp
);

713 
	`tmp_öô
(
m¡dú
);

715 (
ªt
 = 
	`xfs_bulk°©
(
fsfd
,

716 &
œ°öo
, 
GRABSZ
, &
buf
[0], &
buÊíout
)) == 0) {

717 
xfs_b°©_t
 *
p
;

718 
xfs_b°©_t
 *
ídp
;

720 i‡(
buÊíout
 == 0)

721 
out0
;

724 
cou¡
 = (
buÊíout
 * 
èrgëønge
) / 100;

726 
	`qs‹t
((*)
buf
, 
buÊíout
, (
xfs_b°©
), 
cmp
);

728 
p
 = 
buf
, 
ídp
 = (bu‡+ 
buÊíout
);Ö <Éndp ;Ö++) {

730 i‡(((
p
->
bs_mode
 & 
S_IFMT
Ë!
S_IFREG
) ||

731 (
p
->
bs_exã¡s
 < 2))

734 
fd
 = 
	`jdm_›í
(
fsh™dÀp
, 
p
, 
O_RDWR
|
O_DIRECT
);

735 i‡(
fd
 < 0) {

740 i‡(
dÊag
)

741 
	`f§¥ötf
(
	`_
("couldÇot open: "

742 "öodê%Œu\n"), 
p
->
bs_öo
);

747 
	`•rötf
(
‚ame
, "öo=%Œd", ()
p
->
bs_öo
);

750 
äame
 = 
	`tmp_√xt
(
m¡dú
);

752 
ªt
 = 
	`f§fûe_comm⁄
(
‚ame
, 
äame
, 
m¡dú
, 
fd
, 
p
);

754 
À·offöo
 = 
p
->
bs_öo
;

756 
	`˛o£
(
fd
);

758 i‡(
ªt
 == 0) {

759 i‡(--
cou¡
 <= 0)

763 i‡(
ídtime
 &&Éndtimê< 
	`time
(0)) {

764 
	`tmp_˛o£
(
m¡dú
);

765 
	`˛o£
(
fsfd
);

766 
	`f§Æl_˛ónup
(1);

767 
	`exô
(1);

770 i‡(
ªt
 < 0)

771 
	`f§¥ötf
(
	`_
("%s: xfs_bulk°©: %s\n"), 
¥og«me
, 
	`°ªº‹
(
î∫o
));

772 
out0
:

773 
	`tmp_˛o£
(
m¡dú
);

774 
	`˛o£
(
fsfd
);

775 
	`‰ì
(
fsh™dÀp
);

777 
	}
}

783 
	$cmp
(c⁄° *
s1
, c⁄° *
s2
)

785 –((
xfs_b°©_t
 *)
s2
)->
bs_exã¡s
 -

786 ((
xfs_b°©_t
 *)
s1
)->
bs_exã¡s
);

788 
	}
}

796 
	$f§dú
(*
dú«me
)

798 
	`f§¥ötf
(
	`_
("%s: Dúe˘‹y de‰agmíèti⁄ÇŸ suµ‹ãd\n"), 
dú«me
);

799 
	}
}

807 
	$f§fûe
(*
‚ame
, 
xfs_öo_t
 
öo
)

809 
xfs_b°©_t
 
°©buf
;

810 
jdm_fsh™dÀ_t
 *
fsh™dÀp
;

811 
fd
 = -1, 
fsfd
 = -1;

812 
îr‹
 = -1;

813 *
äame
;

815 
fsh™dÀp
 = 
	`jdm_gëfsh™dÀ
(
	`gë∑ª¡
 (
‚ame
) );

816 i‡(!
fsh™dÀp
) {

817 
	`f§¥ötf
(
	`_
("unableÅo construct sys handle for %s: %s\n"),

818 
‚ame
, 
	`°ªº‹
(
î∫o
));

819 
out
;

826 
fsfd
 = 
	`›í
(
	`gë∑ª¡
(
‚ame
), 
O_RDONLY
);

827 i‡(
fsfd
 < 0) {

828 
	`f§¥ötf
(
	`_
("unableÅo open sys handle for %s: %s\n"),

829 
‚ame
, 
	`°ªº‹
(
î∫o
));

830 
out
;

833 i‡((
	`xfs_bulk°©_sögÀ
(
fsfd
, &
öo
, &
°©buf
)) < 0) {

834 
	`f§¥ötf
(
	`_
("unableÅo get bstat on %s: %s\n"),

835 
‚ame
, 
	`°ªº‹
(
î∫o
));

836 
out
;

839 
fd
 = 
	`jdm_›í
(
fsh™dÀp
, &
°©buf
, 
O_RDWR
|
O_DIRECT
);

840 i‡(
fd
 < 0) {

841 
	`f§¥ötf
(
	`_
("unableÅo open handle %s: %s\n"),

842 
‚ame
, 
	`°ªº‹
(
î∫o
));

843 
out
;

847 i‡(
	`xfs_gëgeom
(
fsfd
, &
fsgeom
) < 0 ) {

848 
	`f§¥ötf
(
	`_
("U«bÀÅÿgë geom o¿f†f‹: %s\n"), 
‚ame
);

849 
out
;

852 
äame
 = 
	`gëtm≤ame
(
‚ame
);

854 i‡(
äame
)

855 
îr‹
 = 
	`f§fûe_comm⁄
(
‚ame
, 
äame
, 
NULL
, 
fd
, &
°©buf
);

857 
out
:

858 i‡(
fsfd
 >= 0)

859 
	`˛o£
(
fsfd
);

860 i‡(
fd
 >= 0)

861 
	`˛o£
(
fd
);

862 
	`‰ì
(
fsh™dÀp
);

864  
îr‹
;

865 
	}
}

883 
	$f§fûe_comm⁄
(

884 *
‚ame
,

885 *
äame
,

886 *
f¢ame
,

887 
fd
,

888 
xfs_b°©_t
 *
°©p
)

890 
îr‹
;

891 
°©vfs
 
vfss
;

892 
fsx©å
 
fsx
;

893 
bsize
;

895 i‡(
vÊag
)

896 
	`f§¥ötf
("%s\n", 
‚ame
);

898 i‡(
	`fsync
(
fd
) < 0) {

899 
	`f§¥ötf
(
	`_
("syn¯Áûed: %s: %s\n"), 
‚ame
, 
	`°ªº‹
(
î∫o
));

903 i‡(
°©p
->
bs_size
 == 0) {

904 i‡(
vÊag
)

905 
	`f§¥ötf
(
	`_
("%s: zîÿsize, ign‹ög\n"), 
‚ame
);

915 i‡–(
°©p
->
bs_mode
 & 
S_ISGID
Ë&& ( ! (°©p->bs_mode&
S_IXGRP
) ) ) {

916 
Êock
 
Ê
;

918 
Ê
.
l_ty≥
 = 
F_RDLCK
;

919 
Ê
.
l_whí˚
 = 
SEEK_SET
;

920 
Ê
.
l_°¨t
 = (
off_t
)0;

921 
Ê
.
l_Àn
 = 0;

922 i‡((
	`f˙é
(
fd
, 
F_GETLK
, &
Ê
)) < 0 ) {

923 i‡(
vÊag
)

924 
	`f§¥ötf
(
	`_
("locking check failed: %s\n"),

925 
‚ame
);

928 i‡(
Ê
.
l_ty≥
 !
F_UNLCK
) {

930 i‡(
vÊag
)

931 
	`f§¥ötf
(
	`_
("mandatoryÜock: %s: ignoring\n"),

932 
‚ame
);

943 i‡(
	`°©vfs
(
f¢ame
 ? f¢amê: 
‚ame
, &
vfss
) < 0) {

944 
	`f§¥ötf
(
	`_
("unableÅo get fs stat on %s: %s\n"),

945 
‚ame
, 
	`°ªº‹
(
î∫o
));

948 
bsize
 = 
vfss
.
f_‰size
 ? vfss.f_‰sizê: vfss.
f_bsize
;

949 i‡(
°©p
->
bs_blksize
 * sèç->
bs_blocks
 >

950 
vfss
.
f_b‰ì
 * 
bsize
 - 
möimum‰ì
) {

951 
	`f§¥ötf
(
	`_
("insufficient freespace for: %s: "

952 "size=%Œd: ign‹ög\n"), 
‚ame
,

953 
°©p
->
bs_blksize
 * sèç->
bs_blocks
);

957 i‡((
	`io˘l
(
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) < 0) {

958 
	`f§¥ötf
(
	`_
("ÁûedÅÿgë inodê©ås: %s\n"), 
‚ame
);

961 i‡(
fsx
.
fsx_xÊags
 & (
FS_XFLAG_IMMUTABLE
|
FS_XFLAG_APPEND
)) {

962 i‡(
vÊag
)

963 
	`f§¥ötf
(
	`_
("%s: immuèbÀ/≠≥nd, ign‹ög\n"), 
‚ame
);

966 i‡(
fsx
.
fsx_xÊags
 & 
FS_XFLAG_NODEFRAG
) {

967 i‡(
vÊag
)

968 
	`f§¥ötf
(
	`_
("%s: markedás don't defrag, ignoring\n"),

969 
‚ame
);

972 i‡(
fsx
.
fsx_xÊags
 & 
FS_XFLAG_REALTIME
) {

973 i‡(
	`xfs_gëπ
(
fd
, &
vfss
) < 0) {

974 
	`f§¥ötf
(
	`_
("cannot getÑealtime geometry for: %s\n"),

975 
‚ame
);

978 i‡(
°©p
->
bs_size
 > ((
vfss
.
f_b‰ì
 * 
bsize
Ë- 
möimum‰ì
)) {

979 
	`f§¥ötf
(
	`_
("low onÑealtime free space: %s: "

980 "ign‹ög fûe\n"), 
‚ame
);

985 i‡((
RólUid
 !
ROOT
Ë&& (RólUid !
°©p
->
bs_uid
)) {

986 
	`f§¥ötf
(
	`_
("ˇ¬Ÿ o≥n: %s: Pîmissi⁄ díõd\n"), 
‚ame
);

999 i‡((
îr‹
 = 
	`∑ckfûe
(
‚ame
, 
äame
, 
fd
, 
°©p
, &
fsx
)))

1000  
îr‹
;

1002 
	}
}

1020 
	$f§_£tup_©å_f‹k
(

1021 
fd
,

1022 
tfd
,

1023 
xfs_b°©_t
 *
b°©p
)

1025 #ifde‡
HAVE_FSETXATTR


1026 
°©
 
t°©buf
;

1027 
i
;

1028 
diff
 = 0;

1029 
œ°_f‹koff
 = 0;

1030 
no_ch™ge_˙t
 = 0;

1031 
ªt
;

1033 i‡(!(
b°©p
->
bs_xÊags
 & 
FS_XFLAG_HASATTR
))

1040 i‡(!(
fsgeom
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_ATTR2
) ||

1041 
b°©p
->
bs_f‹koff
 == 0) {

1043 
ªt
 = 
	`f£tx©å
(
tfd
, "u£r.X", "X", 1, 
XATTR_CREATE
);

1044 i‡(
ªt
) {

1045 
	`f§¥ötf
(
	`_
("couldÇot set ATTR\n"));

1048 
out
;

1053 i‡(
	`f°©
(
tfd
, &
t°©buf
) < 0) {

1054 
	`f§¥ötf
(
	`_
("unableÅo statÅemp file: %s\n"),

1055 
	`°ªº‹
(
î∫o
));

1059 
i
 = 0;

1061 
xfs_b°©_t
 
tb°©
;

1062 
xfs_öo_t
 
öo
;

1063 
«me
[64];

1070 
öo
 = 
t°©buf
.
°_öo
;

1071 i‡((
	`xfs_bulk°©_sögÀ
(
tfd
, &
öo
, &
tb°©
)) < 0) {

1072 
	`f§¥ötf
(
	`_
("unableÅo get bstat onÅemp file: %s\n"),

1073 
	`°ªº‹
(
î∫o
));

1076 i‡(
dÊag
)

1077 
	`f§¥ötf
(
	`_
("orig forkoff %d,Åemp forkoff %d\n"),

1078 
b°©p
->
bs_f‹koff
, 
tb°©
.bs_forkoff);

1079 
diff
 = 
tb°©
.
bs_f‹koff
 - 
b°©p
->bs_forkoff;

1082 i‡(!
diff
)

1083 
out
;

1085 
	`¢¥ötf
(
«me
, “ame), "u£r.%d", 
i
);

1091 i‡(!
tb°©
.
bs_f‹koff
) {

1092 
	`ASSERT
(
i
 == 0);

1093 
ªt
 = 
	`f£tx©å
(
tfd
, 
«me
, "XX", 2, 
XATTR_CREATE
);

1094 i‡(
ªt
) {

1095 
	`f§¥ötf
(
	`_
("couldÇot set ATTR\n"));

1099 } i‡(
i
 == 0) {

1126 i‡(
diff
 < 0) {

1127 
vÆ
[2048];

1128 
	`mem£t
(
vÆ
, 'X', 2048);

1129 i‡(
	`f£tx©å
(
tfd
, 
«me
, 
vÆ
, 2048, 0)) {

1130 
	`f§¥ötf
(
	`_
("big ATTR set failed\n"));

1142 i‡(
œ°_f‹koff
 =
tb°©
.
bs_f‹koff
) {

1143 i‡(
no_ch™ge_˙t
++ > 10)

1146 
no_ch™ge_˙t
 = 0;

1147 
œ°_f‹koff
 = 
tb°©
.
bs_f‹koff
;

1150 i‡(
	`abs
(
diff
Ë> 
fsgeom
.
öodesize
 - (
xfs_döode
)) {

1151 
	`f§¥ötf
(
	`_
("f‹kof‡dif‡%dÅoÿœrge!\n"), 
diff
);

1159 i‡(
diff
 < 0) {

1167 i‡(
dÊag
)

1168 
	`¥ötf
(
	`_
("data fork growth unimplemented\n"));

1169 
out
;

1173 
ªt
 = 
	`f£tx©å
(
tfd
, 
«me
, "XX", 2, 
XATTR_CREATE
);

1174 i‡(
ªt
) {

1175 
	`f§¥ötf
(
	`_
("couldÇot set ATTR\n"));

1179 } ++
i
 < 100);

1181 
out
:

1182 i‡(
dÊag
)

1183 
	`f§¥ötf
(
	`_
("setÅempáttr\n"));

1185 i‡(
dÊag
 && 
diff
)

1186 
	`f§¥ötf
(
	`_
("failedÅo match fork offset\n"));;

1190 
	}
}

1205 
	$∑ckfûe
(*
‚ame
, *
äame
, 
fd
,

1206 
xfs_b°©_t
 *
°©p
, 
fsx©å
 *
fsxp
)

1208 
tfd
 = -1;

1209 
§vÆ
;

1210 
ªtvÆ
 = -1;

1211 
√xã¡s
, 
exã¡
, 
cur_√xã¡s
, 
√w_√xã¡s
;

1212 
blksz_dio
;

1213 
dio_mö
;

1214 
diﬂâr
 
dio
;

1215 
xfs_sw≠ext_t
 
sx
;

1216 
xfs_Êock64
 
•a˚
;

1217 
off64_t
 
˙t
, 
pos
;

1218 *
fbuf
 = 
NULL
;

1219 
˘
, 
wc
, 
wc_b4
;

1220 
f‚ame
[
SMBUFSZ
];

1221 
ffd
 = -1;

1229 
√xã¡s
 = 
	`ªad_fd_bm≠
(
fd
, 
°©p
, &
cur_√xã¡s
);

1231 i‡(
cur_√xã¡s
 =1 || cur_√xã¡†<
√xã¡s
) {

1232 i‡(
vÊag
)

1233 
	`f§¥ötf
(
	`_
("%†Æªady fuŒy de‰agmíãd.\n"), 
‚ame
);

1234 
ªtvÆ
 = 1;

1235 
out
;

1238 i‡(
dÊag
)

1239 
	`f§¥ötf
(
	`_
("%sÉxtents=%d can_save=%dÅmp=%s\n"),

1240 
‚ame
, 
cur_√xã¡s
, (cur_√xã¡†- 
√xã¡s
),

1241 
äame
);

1243 i‡((
tfd
 = 
	`›í
(
äame
, 
›í›ts
, 0666)) < 0) {

1244 i‡(
vÊag
)

1245 
	`f§¥ötf
(
	`_
("couldÇot openÅmp file: %s: %s\n"),

1246 
äame
, 
	`°ªº‹
(
î∫o
));

1247 
out
;

1249 
	`u∆ök
(
äame
);

1252 i‡(
	`f§_£tup_©å_f‹k
(
fd
, 
tfd
, 
°©p
) != 0) {

1253 
	`f§¥ötf
(
	`_
("ÁûedÅÿ£àATTR f‹k o¿tmp: %s:\n"), 
äame
);

1254 
out
;

1258 i‡(
fsxp
->
fsx_xÊags
 || fsxp->
fsx_¥ojid
) {

1259 i‡(
	`io˘l
(
tfd
, 
FS_IOC_FSSETXATTR
, 
fsxp
) < 0) {

1260 
	`f§¥ötf
(
	`_
("couldÇot set inodeáttrs onÅmp: %s\n"),

1261 
äame
);

1262 
out
;

1266 i‡((
	`io˘l
(
tfd
, 
XFS_IOC_DIOINFO
, &
dio
)) < 0 ) {

1267 
	`f§¥ötf
(
	`_
("couldÇŸ gë Dúe˘IO infÿ⁄Åmp: %s\n"), 
äame
);

1268 
out
;

1271 
dio_mö
 = 
dio
.
d_möiosz
;

1272 i‡(
°©p
->
bs_size
 <
dio_mö
) {

1273 
blksz_dio
 = 
dio_mö
;

1275 
blksz_dio
 = 
	`mö
(
dio
.
d_maxiosz
, 
BUFFER_MAX
 - 
∑gesize
);

1276 i‡(
¨gv_blksz_dio
 != 0)

1277 
blksz_dio
 = 
	`mö
(
¨gv_blksz_dio
, blksz_dio);

1278 
blksz_dio
 = (
	`mö
(
°©p
->
bs_size
, blksz_dioË/ 
dio_mö
) * dio_min;

1281 i‡(
dÊag
) {

1282 
	`f§¥ötf
(
	`_
("DEBUG: "

1284 
°©p
->
bs_size
, 
blksz_dio
, 
dio
.
d_möiosz
,

1285 
dio
.
d_maxiosz
, 
∑gesize
);

1288 i‡(!(
fbuf
 = (*)
	`memÆign
(
dio
.
d_mem
, 
blksz_dio
))) {

1289 
	`f§¥ötf
(
	`_
("couldÇŸáŒoˇã buf: %s\n"), 
äame
);

1290 
out
;

1293 i‡(
n‰ags
) {

1295 
	`•rötf
(
f‚ame
, "%s.‰ag", 
äame
);

1298 i‡((
ffd
 = 
	`›í
(
f‚ame
, 
›í›ts
, 0666)) < 0) {

1299 
	`f§¥ötf
(
	`_
("couldÇot open fragfile: %s : %s\n"),

1300 
f‚ame
, 
	`°ªº‹
(
î∫o
));

1301 
out
;

1303 
	`u∆ök
(
f‚ame
);

1307 
exã¡
 = 0;Éxã¡ < 
√xã¡s
;Éxtent++) {

1308 
pos
 = 
outm≠
[
exã¡
].
bmv_off£t
;

1309 i‡(
outm≠
[
exã¡
].
bmv_block
 == -1) {

1310 
•a˚
.
l_whí˚
 = 
SEEK_SET
;

1311 
•a˚
.
l_°¨t
 = 
pos
;

1312 
•a˚
.
l_Àn
 = 
outm≠
[
exã¡
].
bmv_Àngth
;

1313 i‡(
	`io˘l
(
tfd
, 
XFS_IOC_UNRESVSP64
, &
•a˚
) < 0) {

1314 
	`f§¥ötf
(
	`_
("couldÇotÅruncÅmp %s\n"),

1315 
äame
);

1317 i‡(
	`l£ek
(
tfd
, 
outm≠
[
exã¡
].
bmv_Àngth
, 
SEEK_CUR
) < 0) {

1318 
	`f§¥ötf
(
	`_
("couldÇotÜseek inÅmpfile: %s : %s\n"),

1319 
äame
, 
	`°ªº‹
(
î∫o
));

1320 
out
;

1323 } i‡(
outm≠
[
exã¡
].
bmv_Àngth
 == 0) {

1327 i‡(! 
n‰ags
) {

1328 
•a˚
.
l_whí˚
 = 
SEEK_CUR
;

1329 
•a˚
.
l_°¨t
 = 0;

1330 
•a˚
.
l_Àn
 = 
outm≠
[
exã¡
].
bmv_Àngth
;

1332 i‡(
	`io˘l
(
tfd
, 
XFS_IOC_RESVSP64
, &
•a˚
) < 0) {

1333 
	`f§¥ötf
(
	`_
("couldÇotÖre-allocateÅmp space:"

1334 " %s\n"), 
äame
);

1335 
out
;

1337 i‡(
	`l£ek
(
tfd
, 
outm≠
[
exã¡
].
bmv_Àngth
, 
SEEK_CUR
) < 0) {

1338 
	`f§¥ötf
(
	`_
("couldÇotÜseek inÅmpfile: %s : %s\n"),

1339 
äame
, 
	`°ªº‹
(
î∫o
));

1340 
out
;

1345 i‡(
	`l£ek
(
tfd
, 0, 
SEEK_SET
)) {

1346 
	`f§¥ötf
(
	`_
("Couldn'tÑewind onÅemporary file\n"));

1347 
out
;

1351 
√w_√xã¡s
 = 
	`gë√xã¡s
(
tfd
);

1352 i‡(
dÊag
)

1353 
	`f§¥ötf
(
	`_
("Temp‹¨y fûêha†%dÉxã¡†(%d i¿‹igöÆ)\n"), 
√w_√xã¡s
, 
cur_√xã¡s
);

1354 i‡(
cur_√xã¡s
 <
√w_√xã¡s
) {

1355 i‡(
vÊag
)

1356 
	`f§¥ötf
(
	`_
("Nÿim¥ovemíàwû»bêmadê(skùpög): %s\n"), 
‚ame
);

1357 
ªtvÆ
 = 1;

1358 
out
;

1362 
exã¡
 = 0;Éxã¡ < 
√xã¡s
;Éxtent++) {

1363 
pos
 = 
outm≠
[
exã¡
].
bmv_off£t
;

1364 i‡(
outm≠
[
exã¡
].
bmv_block
 == -1) {

1365 i‡(
	`l£ek
(
tfd
, 
outm≠
[
exã¡
].
bmv_Àngth
, 
SEEK_CUR
) < 0) {

1366 
	`f§¥ötf
(
	`_
("couldÇotÜseek inÅmpfile: %s : %s\n"),

1367 
äame
, 
	`°ªº‹
(
î∫o
));

1368 
out
;

1370 i‡(
	`l£ek
(
fd
, 
outm≠
[
exã¡
].
bmv_Àngth
, 
SEEK_CUR
) < 0) {

1371 
	`f§¥ötf
(
	`_
("couldÇotÜseek in file: %s : %s\n"),

1372 
‚ame
, 
	`°ªº‹
(
î∫o
));

1373 
out
;

1376 } i‡(
outm≠
[
exã¡
].
bmv_Àngth
 == 0) {

1380 
˙t
 = 
outm≠
[
exã¡
].
bmv_Àngth
; cnt > 0;

1381 
˙t
 -
˘
, 
pos
 += ct) {

1382 i‡(
n‰ags
 && --nfrags) {

1383 
˘
 = 
	`mö
(
˙t
, 
dio_mö
);

1384 } i‡(
˙t
 % 
dio_mö
 == 0) {

1385 
˘
 = 
	`mö
(
˙t
, 
blksz_dio
);

1387 
˘
 = 
	`mö
(
˙t
 + 
dio_mö
 - (cnt % dio_min),

1388 
blksz_dio
);

1390 
˘
 = 
	`ªad
(
fd
, 
fbuf
, ct);

1391 i‡(
˘
 == 0) {

1393 
exã¡
 = 
√xã¡s
;

1399 i‡(
˘
 % 
dio_mö
 != 0) {

1400 
wc
 = 
˘
 + 
dio_mö
 - (ct % dio_min);

1402 
wc
 = 
˘
;

1404 
wc_b4
 = 
wc
;

1405 i‡(
˘
 < 0 || ((
wc
 = 
	`wrôe
(
tfd
, 
fbuf
, wc)Ë!
wc_b4
)) {

1406 i‡(
˘
 < 0)

1407 
	`f§¥ötf
(
	`_
("badÑead of %d bytes "

1408 "‰om %s: %s\n"), 
wc_b4
,

1409 
‚ame
, 
	`°ªº‹
(
î∫o
));

1410 i‡(
wc
 < 0)

1411 
	`f§¥ötf
(
	`_
("bad write of %d bytes "

1412 "tÿ%s: %s\n"), 
wc_b4
,

1413 
äame
, 
	`°ªº‹
(
î∫o
));

1420 
ªsid
 = 
˘
-
wc
;

1422 i‡((
wc
 = 
	`wrôe
(
tfd
, ((*)
fbuf
)+wc,

1423 
ªsid
)) ==Ñesid) {

1427 i‡(
wc
 < 0) {

1428 
	`f§¥ötf
(
	`_
("bad write2 of %d "

1430 
ªsid
, 
äame
,

1431 
	`°ªº‹
(
î∫o
));

1433 
	`f§¥ötf
(
	`_
("bad copyÅo %s\n"),

1434 
äame
);

1437 
out
;

1439 i‡(
n‰ags
) {

1441 
wc_b4
 = 
wc
;

1442 i‡(((
wc
 = 
	`wrôe
(
ffd
, 
fbuf
, wc)Ë!
wc_b4
)) {

1443 
	`f§¥ötf
(
	`_
("bad write of %d bytes "

1445 
wc_b4
, 
f‚ame
, 
	`°ªº‹
(
î∫o
));

1450 i‡(
	`·runˇã
(
tfd
, 
°©p
->
bs_size
) < 0) {

1451 
	`f§¥ötf
(
	`_
("couldÇotÅruncateÅmpfile: %s : %s\n"),

1452 
‚ame
, 
	`°ªº‹
(
î∫o
));

1453 
out
;

1455 i‡(
	`fsync
(
tfd
) < 0) {

1456 
	`f§¥ötf
(
	`_
("couldÇot fsyncÅmpfile: %s : %s\n"),

1457 
‚ame
, 
	`°ªº‹
(
î∫o
));

1458 
out
;

1461 
sx
.
sx_°©
 = *
°©p
;

1462 
sx
.
sx_vîsi⁄
 = 
XFS_SX_VERSION
;

1463 
sx
.
sx_fdèrgë
 = 
fd
;

1464 
sx
.
sx_fdtmp
 = 
tfd
;

1465 
sx
.
sx_off£t
 = 0;

1466 
sx
.
sx_Àngth
 = 
°©p
->
bs_size
;

1469 i‡(
	`fchown
(
tfd
, 
°©p
->
bs_uid
, sèç->
bs_gid
) < 0) {

1470 i‡(
vÊag
)

1471 
	`f§¥ötf
(
	`_
("failedÅo fchownÅmpfile %s: %s\n"),

1472 
äame
, 
	`°ªº‹
(
î∫o
));

1473 
out
;

1477 
§vÆ
 = 
	`xfs_sw≠ext
(
fd
, &
sx
);

1478 i‡(
§vÆ
 < 0) {

1479 i‡(
î∫o
 =
ENOTSUP
) {

1480 i‡(
vÊag
 || 
dÊag
)

1481 
	`f§¥ötf
(
	`_
("%s: fûêty≥ÇŸ suµ‹ãd\n"), 
‚ame
);

1482 } i‡(
î∫o
 =
EFAULT
) {

1484 i‡(
vÊag
 || 
dÊag
)

1485 
	`f§¥ötf
(
	`_
("%s: file modified defragáborted\n"),

1486 
‚ame
);

1487 } i‡(
î∫o
 =
EBUSY
) {

1489 i‡(
vÊag
 || 
dÊag
)

1490 
	`f§¥ötf
(
	`_
("%s: fûêbusy\n"), 
‚ame
);

1492 
	`f§¥ötf
(
	`_
("XFS_IOC_SWAPEXT failed: %s: %s\n"),

1493 
‚ame
, 
	`°ªº‹
(
î∫o
));

1495 
out
;

1499 i‡(
vÊag
)

1500 
	`f§¥ötf
(
	`_
("extents before:%dáfter:%d %s %s\n"),

1501 
cur_√xã¡s
, 
√w_√xã¡s
,

1502 (
√w_√xã¡s
 <
√xã¡s
 ? "DONE" : " " ),

1503 
‚ame
);

1504 
ªtvÆ
 = 0;

1506 
out
:

1507 
	`‰ì
(
fbuf
);

1508 i‡(
tfd
 != -1)

1509 
	`˛o£
(
tfd
);

1510 i‡(
ffd
 != -1)

1511 
	`˛o£
(
ffd
);

1512  
ªtvÆ
;

1513 
	}
}

1516 
	$gëtm≤ame
(*
‚ame
)

1518 
buf
[
PATH_MAX
+1];

1519 
sbuf
[
SMBUFSZ
];

1520 *
±r
;

1522 
	`•rötf
(
sbuf
, "/.f§%d", 
	`gëpid
());

1524 
	`°∫˝y
(
buf
, 
‚ame
, 
PATH_MAX
);

1525 
buf
[
PATH_MAX
] = '\0';

1526 
±r
 = 
	`°ºchr
(
buf
, '/');

1527 i‡(
±r
) {

1528 *
±r
 = '\0';

1530 
	`°r˝y
(
buf
, ".");

1533 i‡((
	`°æí
(
buf
Ë+ såÀ¿(
sbuf
)Ë> 
PATH_MAX
) {

1534 
	`f§¥ötf
(
	`_
("tm∞fûê«mêtoÿl⁄g: %s\n"), 
‚ame
);

1535 (
NULL
);

1538 
	`°rˇt
(
buf
, 
sbuf
);

1540 (
buf
);

1541 
	}
}

1544 
	$gë∑ª¡
(*
‚ame
)

1546 
buf
[
PATH_MAX
+1];

1547 *
±r
;

1549 
	`°∫˝y
(
buf
, 
‚ame
, 
PATH_MAX
);

1550 
buf
[
PATH_MAX
] = '\0';

1551 
±r
 = 
	`°ºchr
(
buf
, '/');

1552 i‡(
±r
) {

1553 i‡(
±r
 =&
buf
[0])

1554 ++
±r
;

1555 *
±r
 = '\0';

1557 
	`°r˝y
(
buf
, ".");

1560 (
buf
);

1561 
	}
}

1570 
	#MAPSIZE
 128

	)

1571 
	#OUTMAP_SIZE_INCREMENT
 
MAPSIZE


	)

1573 
	$ªad_fd_bm≠
(
fd
, 
xfs_b°©_t
 *
sö
, *
cur_√xã¡s
)

1575 
i
, 
˙t
;

1576 
gëbm≠
 
m≠
[
MAPSIZE
];

1578 
	#BUMP_CNT
 \

1579 i‡(++
˙t
 >
outm≠_size
) { \

1580 
outm≠_size
 +
OUTMAP_SIZE_INCREMENT
; \

1581 
outm≠
 = (
gëbm≠
 *)
	`ªÆloc
(outmap, \

1582 
outm≠_size
*(*
outm≠
)); \

1583 i‡(
outm≠
 =
NULL
) { \

1584 
	`f§¥ötf
(
	`_
("realloc failed: %s\n"), \

1585 
	`°ªº‹
(
î∫o
)); \

1586 
	`exô
(1); \

1588 }

	)

1593 i‡(
outm≠_size
 == 0) {

1594 
outm≠_size
 = 
OUTMAP_SIZE_INCREMENT
;

1595 
outm≠
 = (
gëbm≠
 *)
	`mÆloc
(
outm≠_size
*(*outmap));

1596 i‡(!
outm≠
) {

1597 
	`f§¥ötf
(
	`_
("malloc failed: %s\n"),

1598 
	`°ªº‹
(
î∫o
));

1599 
	`exô
(1);

1603 
outm≠
[0].
bmv_block
 = 0;

1604 
outm≠
[0].
bmv_off£t
 = 0;

1605 
outm≠
[0].
bmv_Àngth
 = 
sö
->
bs_size
;

1611 i‡(!
	`S_ISREG
(
sö
->
bs_mode
))

1614 
outm≠
[0].
bmv_Àngth
 = 0;

1616 
m≠
[0].
bmv_off£t
 = 0;

1617 
m≠
[0].
bmv_block
 = 0;

1618 
m≠
[0].
bmv_íåõs
 = 0;

1619 
m≠
[0].
bmv_cou¡
 = 
MAPSIZE
;

1620 
m≠
[0].
bmv_Àngth
 = -1;

1622 
˙t
 = 0;

1623 *
cur_√xã¡s
 = 0;

1626 i‡(
	`io˘l
(
fd
, 
XFS_IOC_GETBMAP
, 
m≠
) < 0) {

1627 
	`f§¥ötf
(
	`_
("failedÑeadingÉxtents: inode %llu"),

1628 ()
sö
->
bs_öo
);

1629 
	`exô
(1);

1635 *
cur_√xã¡s
 +
m≠
[0].
bmv_íåõs
;

1636 
i
 = 0; i < 
m≠
[0].
bmv_íåõs
; i++) {

1637 i‡(
m≠
[
i
 + 1].
bmv_block
 == -1) {

1638 
BUMP_CNT
;

1639 
outm≠
[
˙t
] = 
m≠
[
i
+1];

1640 } i‡(
outm≠
[
˙t
].
bmv_block
 == -1) {

1641 
BUMP_CNT
;

1642 
outm≠
[
˙t
] = 
m≠
[
i
+1];

1644 
outm≠
[
˙t
].
bmv_Àngth
 +
m≠
[
i
 + 1].bmv_length;

1647 } 
m≠
[0].
bmv_íåõs
 =(
MAPSIZE
-1));

1648 
i
 = 0; i <
˙t
; i++) {

1649 
outm≠
[
i
].
bmv_off£t
 = 
	`BBTOB
(outmap[i].bmv_offset);

1650 
outm≠
[
i
].
bmv_Àngth
 = 
	`BBTOB
(outmap[i].bmv_length);

1653 
outm≠
[
˙t
].
bmv_Àngth
 = 
sö
->
bs_size
 - outm≠[˙t].
bmv_off£t
;

1655 (
˙t
+1);

1656 
	}
}

1662 
	$gë√xã¡s
(
fd
)

1664 
√xã¡s
;

1665 
gëbm≠
 
m≠
[
MAPSIZE
];

1667 
m≠
[0].
bmv_off£t
 = 0;

1668 
m≠
[0].
bmv_block
 = 0;

1669 
m≠
[0].
bmv_íåõs
 = 0;

1670 
m≠
[0].
bmv_cou¡
 = 
MAPSIZE
;

1671 
m≠
[0].
bmv_Àngth
 = -1;

1673 
√xã¡s
 = 0;

1676 i‡(
	`io˘l
(
fd
,
XFS_IOC_GETBMAP
, 
m≠
) < 0) {

1677 
	`f§¥ötf
(
	`_
("failedÑeadingÉxtents"));

1678 
	`exô
(1);

1681 
√xã¡s
 +
m≠
[0].
bmv_íåõs
;

1682 } 
m≠
[0].
bmv_íåõs
 =(
MAPSIZE
-1));

1684 (
√xã¡s
);

1685 
	}
}

1691 
	$xfs_gëgeom
(
fd
, 
xfs_fs›_geom_v1_t
 * 
fsgeom
)

1693 i‡(
	`xfs_fsgeomëry
(
fd
, 
fsgeom
) < 0) {

1697 
	}
}

1703 
	$xfs_gëπ
(
fd
, 
°©vfs
 *
sfbp
)

1705 
bsize
;

1706 
Á˘‹
;

1707 
xfs_fs›_cou¡s_t
 
˙t
;

1709 i‡(!
fsgeom
.
πblocks
)

1712 i‡(
	`xfs_fscou¡s
(
fd
, &
˙t
) < 0) {

1713 
	`˛o£
(
fd
);

1716 
bsize
 = (
sfbp
->
f_‰size
 ? sfbp->f_‰sizê: sfbp->
f_bsize
);

1717 
Á˘‹
 = 
fsgeom
.
blocksize
 / 
bsize
;

1718 
sfbp
->
f_b‰ì
 = (
˙t
.
‰ìπx
 * 
fsgeom
.
πextsize
Ë* 
Á˘‹
;

1720 
	}
}

1723 
	$f§¥ötf
(c⁄° *
fmt
, ...)

1725 
va_li°
 
≠
;

1727 
	`va_°¨t
(
≠
, 
fmt
);

1728 i‡(
gÊag
) {

1729 
did›ílog
;

1730 i‡(!
did›ílog
) {

1731 
	`›ílog
("f§", 
LOG_PID
, 
LOG_USER
);

1732 
did›ílog
 = 1;

1734 
	`vsy¶og
(
LOG_INFO
, 
fmt
, 
≠
);

1736 
	`v¥ötf
(
fmt
, 
≠
);

1737 
	`va_íd
(
≠
);

1739 
	}
}

1752 
	$tmp_öô
(*
m¡
)

1754 
i
;

1755 
buf
[
SMBUFSZ
];

1756 
mode_t
 
mask
;

1758 
tmp_agi
 = 0;

1759 
	`•rötf
(
buf
, "%s/.f§", 
m¡
);

1761 
mask
 = 
	`umask
(0);

1762 i‡(
	`mkdú
(
buf
, 0700) < 0) {

1763 i‡(
î∫o
 =
EEXIST
) {

1764 i‡(
dÊag
)

1765 
	`f§¥ötf
(
	`_
("tmpdirálreadyÉxists: %s\n"),

1766 
buf
);

1768 
	`f§¥ötf
(
	`_
("couldÇot createÅmpdir: %s: %s\n"),

1769 
buf
, 
	`°ªº‹
(
î∫o
));

1770 
	`exô
(-1);

1773 
i
=0; i < 
fsgeom
.
agcou¡
; i++) {

1774 
	`•rötf
(
buf
, "%s/.f§/ag%d", 
m¡
, 
i
);

1775 i‡(
	`mkdú
(
buf
, 0700) < 0) {

1776 i‡(
î∫o
 =
EEXIST
) {

1777 i‡(
dÊag
)

1778 
	`f§¥ötf
(

1779 
	`_
("tmpdúáÃódyÉxi°s: %s\n"), 
buf
);

1781 
	`f§¥ötf
(
	`_
("cannot createÅmpdir: %s: %s\n"),

1782 
buf
, 
	`°ªº‹
(
î∫o
));

1783 
	`exô
(-1);

1787 ()
	`umask
(
mask
);

1789 
	}
}

1792 
	$tmp_√xt
(*
m¡
)

1794 
buf
[
SMBUFSZ
];

1796 
	`•rötf
(
buf
, "%s/.fsr/ag%d/tmp%d",

1797 –(
	`°rcmp
(
m¡
, "/") == 0) ? "" : mnt),

1798 
tmp_agi
,

1799 
	`gëpid
());

1801 i‡(++
tmp_agi
 =
fsgeom
.
agcou¡
)

1802 
tmp_agi
 = 0;

1804 (
buf
);

1805 
	}
}

1808 
	$tmp_˛o£
(*
m¡
)

1810 
buf
[
SMBUFSZ
];

1811 
i
;

1814 
i
=0; i < 
fsgeom
.
agcou¡
; i++) {

1815 
	`•rötf
(
buf
, "%s/.f§/ag%d", 
m¡
, 
i
);

1816 i‡(
	`rmdú
(
buf
) < 0) {

1817 i‡(
î∫o
 !
ENOENT
) {

1818 
	`f§¥ötf
(

1819 
	`_
("couldÇotÑemoveÅmpdir: %s: %s\n"),

1820 
buf
, 
	`°ªº‹
(
î∫o
));

1824 
	`•rötf
(
buf
, "%s/.f§", 
m¡
);

1825 i‡(
	`rmdú
(
buf
) < 0) {

1826 i‡(
î∫o
 !
ENOENT
) {

1827 
	`f§¥ötf
(
	`_
("couldÇotÑemoveÅmpdir: %s: %s\n"),

1828 
buf
, 
	`°ªº‹
(
î∫o
));

1831 
	}
}

	@growfs/xfs_growfs.c

19 
	~"libxfs.h
"

20 
	~"∑th.h
"

23 
	$ußge
()

25 
	`Ârötf
(
°dîr
, 
	`_
(

41 
¥og«me
);

42 
	`exô
(2);

43 
	}
}

46 
	$ªp‹t_öfo
(

47 
xfs_fs›_geom_t
 
geo
,

48 *
m¡poöt
,

49 
isöt
,

50 *
log«me
,

51 *
π«me
,

52 
œzycou¡
,

53 
dúvîsi⁄
,

54 
logvîsi⁄
,

55 
©åvîsi⁄
,

56 
¥ojid32bô
,

57 
¸cs_íabÀd
,

58 
cimode
,

59 
·y≥_íabÀd
,

60 
föobt_íabÀd
,

61 
•öodes
,

62 
rm≠bt_íabÀd
,

63 
ªÊök_íabÀd
)

65 
	`¥ötf
(
	`_
(

77 
m¡poöt
, 
geo
.
öodesize
, geo.
agcou¡
, geo.
agblocks
,

78 "", 
geo
.
£˘size
, 
©åvîsi⁄
, 
¥ojid32bô
,

79 "", 
¸cs_íabÀd
, 
föobt_íabÀd
, 
•öodes
, 
rm≠bt_íabÀd
,

80 "", 
ªÊök_íabÀd
,

81 "", 
geo
.
blocksize
, ()geo.
d©ablocks
,

82 
geo
.
imaxp˘
,

83 "", 
geo
.
sunô
, geo.
swidth
,

84 
dúvîsi⁄
, 
geo
.
dúblocksize
, 
cimode
, 
·y≥_íabÀd
,

85 
isöt
 ? 
	`_
("öã∫Æ"Ë: 
log«me
 ?Üogname : _("external"),

86 
geo
.
blocksize
, geo.
logblocks
, 
logvîsi⁄
,

87 "", 
geo
.
log£˘size
, geo.
logsunô
 / geo.
blocksize
, 
œzycou¡
,

88 !
geo
.
πblocks
 ? 
	`_
("n⁄e"Ë: 
π«me
 ?Ñtname : _("external"),

89 
geo
.
πextsize
 * geo.
blocksize
, ()geo.
πblocks
,

90 ()
geo
.
πexã¡s
);

91 
	}
}

94 
	$maö
(
¨gc
, **
¨gv
)

96 
aÊag
;

97 
c
;

98 
ddsize
;

99 
dÊag
;

100 
©åvîsi⁄
;

101 
dúvîsi⁄
;

102 
logvîsi⁄
;

103 
dlsize
;

104 
drsize
;

105 
dsize
;

106 
îr‹
;

107 
esize
;

108 
ffd
;

109 
xfs_fs›_geom_t
 
geo
;

110 
iÊag
;

111 
isöt
;

112 
lÊag
;

113 
lsize
;

114 
maxp˘
;

115 
mÊag
;

116 
nÊag
;

117 
xfs_fs›_geom_t
 
ngeo
;

118 
rÊag
;

119 
rsize
;

120 
ci
;

121 
œzycou¡
;

122 
xÊag
;

123 *
‚ame
;

124 *
d©adev
;

125 *
logdev
;

126 *
πdev
;

127 
fs_∑th_t
 *
fs
;

128 
libxfs_öô_t
 
xi
;

129 
¥ojid32bô
;

130 
¸cs_íabÀd
;

131 
·y≥_íabÀd
 = 0;

132 
föobt_íabÀd
;

133 
•öodes
;

134 
rm≠bt_íabÀd
;

135 
ªÊök_íabÀd
;

136 
Ω©h
[
PATH_MAX
];

138 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

139 
	`£éoˇÀ
(
LC_ALL
, "");

140 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

141 
	`ãxtdomaö
(
PACKAGE
);

143 
maxp˘
 = 
esize
 = 0;

144 
dsize
 = 
lsize
 = 
rsize
 = 0LL;

145 
aÊag
 = 
dÊag
 = 
iÊag
 = 
lÊag
 = 
mÊag
 = 
nÊag
 = 
rÊag
 = 
xÊag
 = 0;

147 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dD:e:ûL:m:≈:rR:t:xV")Ë!
EOF
) {

148 
c
) {

150 
dsize
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 10);

153 
dÊag
 = 1;

156 
esize
 = 
	`©ﬁ
(
›èrg
);

157 
rÊag
 = 1;

160 
lÊag
 = 
iÊag
 = 1;

163 
lsize
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 10);

166 
lÊag
 = 1;

169 
mÊag
 = 1;

170 
maxp˘
 = 
	`©oi
(
›èrg
);

173 
nÊag
 = 1;

176 
¥og«me
 = 
›èrg
;

179 
rsize
 = 
	`°πﬁl
(
›èrg
, 
NULL
, 10);

182 
rÊag
 = 1;

185 
mèb_fûe
 = 
›èrg
;

188 
lÊag
 = 
xÊag
 = 1;

191 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
¥og«me
, 
VERSION
);

192 
	`exô
(0);

195 
	`ußge
();

198 i‡(
¨gc
 - 
›töd
 != 1)

199 
	`ußge
();

200 i‡(
iÊag
 && 
xÊag
)

201 
	`ußge
();

202 i‡(
dÊag
 + 
lÊag
 + 
rÊag
 + 
mÊag
 == 0)

203 
aÊag
 = 1;

205 
	`fs_èbÀ_öôüli£
(0, 
NULL
, 0, NULL);

206 i‡(!
	`ªÆ∑th
(
¨gv
[
›töd
], 
Ω©h
))

208 
fs
 = 
	`fs_èbÀ_lookup2
(
Ω©h
, 
FS_MOUNT_POINT
);

209 i‡(!
fs
 ||

210 (
	`°rcmp
(
Ω©h
, 
fs
->
fs_dú
) != 0 &&

211 
	`°rcmp
(
¨gv
[
›töd
], 
fs
->
fs_dú
) !=0)) {

212 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s isÇotá mounted XFS filesystem\n"),

213 
¥og«me
, 
¨gv
[
›töd
]);

217 
‚ame
 = 
fs
->
fs_dú
;

218 
d©adev
 = 
fs
->
fs_«me
;

219 
logdev
 = 
fs
->
fs_log
;

220 
πdev
 = 
fs
->
fs_π
;

222 
ffd
 = 
	`›í
(
‚ame
, 
O_RDONLY
);

223 i‡(
ffd
 < 0) {

224 
	`≥º‹
(
‚ame
);

228 i‡(!
	`∂©f‹m_ã°_xfs_fd
(
ffd
)) {

229 
	`Ârötf
(
°dîr
, 
	`_
("%s: specified file "

231 
¥og«me
, 
‚ame
);

232 
	`exô
(1);

236 i‡(
	`xfs˘l
(
‚ame
, 
ffd
, 
XFS_IOC_FSGEOMETRY
, &
geo
) < 0) {

243 
geo
.
logsunô
 = 0;

244 i‡(
	`xfs˘l
(
‚ame
, 
ffd
, 
XFS_IOC_FSGEOMETRY_V1
, &
geo
) < 0) {

245 
	`Ârötf
(
°dîr
, 
	`_
(

248 
¥og«me
, 
‚ame
, 
	`°ªº‹
(
î∫o
));

249 
	`exô
(1);

252 
isöt
 = 
geo
.
log°¨t
 > 0;

253 
œzycou¡
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_LAZYSB
 ? 1 : 0;

254 
dúvîsi⁄
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_DIRV2
 ? 2 : 1;

255 
logvîsi⁄
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_LOGV2
 ? 2 : 1;

256 
©åvîsi⁄
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_ATTR2
 ? 2 : \

257 (
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_ATTR
 ? 1 : 0);

258 
ci
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_DIRV2CI
 ? 1 : 0;

259 
¥ojid32bô
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_PROJID32
 ? 1 : 0;

260 
¸cs_íabÀd
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_V5SB
 ? 1 : 0;

261 
·y≥_íabÀd
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_FTYPE
 ? 1 : 0;

262 
föobt_íabÀd
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_FINOBT
 ? 1 : 0;

263 
•öodes
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_SPINODES
 ? 1 : 0;

264 
rm≠bt_íabÀd
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_RMAPBT
 ? 1 : 0;

265 
ªÊök_íabÀd
 = 
geo
.
Êags
 & 
XFS_FSOP_GEOM_FLAGS_REFLINK
 ? 1 : 0;

266 i‡(
nÊag
) {

267 
	`ªp‹t_öfo
(
geo
, 
d©adev
, 
isöt
, 
logdev
, 
πdev
,

268 
œzycou¡
, 
dúvîsi⁄
, 
logvîsi⁄
,

269 
©åvîsi⁄
, 
¥ojid32bô
, 
¸cs_íabÀd
, 
ci
,

270 
·y≥_íabÀd
, 
föobt_íabÀd
, 
•öodes
,

271 
rm≠bt_íabÀd
, 
ªÊök_íabÀd
);

272 
	`exô
(0);

279 
	`mem£t
(&
xi
, 0, (xi));

280 
xi
.
d«me
 = 
d©adev
;

281 
xi
.
log«me
 = 
logdev
;

282 
xi
.
π«me
 = 
πdev
;

283 
xi
.
i§ód⁄ly
 = 
LIBXFS_ISREADONLY
;

285 i‡(!
	`libxfs_öô
(&
xi
))

286 
	`ußge
();

289 i‡(!
xi
.
ddev
) {

290 
	`Ârötf
(
°dîr
, 
	`_
("%s: failedÅoáccess data device for %s\n"),

291 
¥og«me
, 
‚ame
);

292 
	`exô
(1);

294 i‡(
lÊag
 && !
isöt
 && !
xi
.
logdev
) {

295 
	`Ârötf
(
°dîr
, 
	`_
("%s: failedÅoáccessÉxternalÜog for %s\n"),

296 
¥og«me
, 
‚ame
);

297 
	`exô
(1);

299 i‡(
rÊag
 && !
xi
.
πdev
) {

300 
	`Ârötf
(
°dîr
,

301 
	`_
("%s: failedÅoáccessÑealtime device for %s\n"),

302 
¥og«me
, 
‚ame
);

303 
	`exô
(1);

306 
	`ªp‹t_öfo
(
geo
, 
d©adev
, 
isöt
, 
logdev
, 
πdev
,

307 
œzycou¡
, 
dúvîsi⁄
, 
logvîsi⁄
,

308 
©åvîsi⁄
, 
¥ojid32bô
, 
¸cs_íabÀd
, 
ci
, 
·y≥_íabÀd
,

309 
föobt_íabÀd
, 
•öodes
, 
rm≠bt_íabÀd
,

310 
ªÊök_íabÀd
);

312 
ddsize
 = 
xi
.
dsize
;

313 
dlsize
 = ( 
xi
.
logBBsize
? xi.logBBsize :

314 
geo
.
logblocks
 * (geo.
blocksize
 / 
BBSIZE
) );

315 
drsize
 = 
xi
.
πsize
;

324 
ddsize
 -= (ddsize % 2);

325 
dlsize
 -= (dlsize % 2);

326 
drsize
 -= (drsize % 2);

328 
îr‹
 = 0;

330 i‡(
dÊag
 | 
mÊag
 | 
aÊag
) {

331 
xfs_growfs_d©a_t
 
ö
;

333 i‡(!
mÊag
)

334 
maxp˘
 = 
geo
.
imaxp˘
;

335 i‡(!
dÊag
 && !
aÊag
)

336 
dsize
 = 
geo
.
d©ablocks
;

337 i‡(!
dsize
)

338 
dsize
 = 
ddsize
 / (
geo
.
blocksize
 / 
BBSIZE
);

339 i‡(
dsize
 > 
ddsize
 / (
geo
.
blocksize
 / 
BBSIZE
)) {

340 
	`Ârötf
(
°dîr
, 
	`_
(

342 ()
dsize
,

343 ()(
ddsize
/(
geo
.
blocksize
/
BBSIZE
)));

344 
îr‹
 = 1;

347 i‡(!
îr‹
 && 
dsize
 < 
geo
.
d©ablocks
) {

348 
	`Ârötf
(
°dîr
, 
	`_
("data size %lldÅoo small,"

350 ()
dsize
, ()
geo
.
d©ablocks
);

351 
îr‹
 = 1;

352 } i‡(!
îr‹
 &&

353 
dsize
 =
geo
.
d©ablocks
 && 
maxp˘
 =geo.
imaxp˘
) {

354 i‡(
dÊag
)

355 
	`Ârötf
(
°dîr
, 
	`_
(

357 i‡(
mÊag
)

358 
	`Ârötf
(
°dîr
, 
	`_
(

360 } i‡(!
îr‹
 && !
nÊag
) {

361 
ö
.
√wblocks
 = (
__u64
)
dsize
;

362 
ö
.
imaxp˘
 = (
__u32
)
maxp˘
;

363 i‡(
	`xfs˘l
(
‚ame
, 
ffd
, 
XFS_IOC_FSGROWFSDATA
, &
ö
) < 0) {

364 i‡(
î∫o
 =
EWOULDBLOCK
)

365 
	`Ârötf
(
°dîr
, 
	`_
(

367 
¥og«me
);

369 
	`Ârötf
(
°dîr
, 
	`_
(

371 
¥og«me
, 
	`°ªº‹
(
î∫o
));

372 
îr‹
 = 1;

377 i‡(!
îr‹
 && (
rÊag
 | 
aÊag
)) {

378 
xfs_growfs_π_t
 
ö
;

380 i‡(!
esize
)

381 
esize
 = (
__u32
)
geo
.
πextsize
;

382 i‡(!
rsize
)

383 
rsize
 = 
drsize
 / (
geo
.
blocksize
 / 
BBSIZE
);

384 i‡(
rsize
 > 
drsize
 / (
geo
.
blocksize
 / 
BBSIZE
)) {

385 
	`Ârötf
(
°dîr
, 
	`_
(

387 
rsize
, 
drsize
 / (
geo
.
blocksize
 / 
BBSIZE
));

388 
îr‹
 = 1;

390 i‡(!
îr‹
 && 
rsize
 < 
geo
.
πblocks
) {

391 
	`Ârötf
(
°dîr
, 
	`_
(

393 ()
rsize
, ()
geo
.
πblocks
);

394 
îr‹
 = 1;

395 } i‡(!
îr‹
 && 
rsize
 =
geo
.
πblocks
) {

396 i‡(
rÊag
)

397 
	`Ârötf
(
°dîr
, 
	`_
(

399 } i‡(!
îr‹
 && !
nÊag
) {

400 
ö
.
√wblocks
 = (
__u64
)
rsize
;

401 
ö
.
extsize
 = (
__u32
)
esize
;

402 i‡(
	`xfs˘l
(
‚ame
, 
ffd
, 
XFS_IOC_FSGROWFSRT
, &
ö
) < 0) {

403 i‡(
î∫o
 =
EWOULDBLOCK
)

404 
	`Ârötf
(
°dîr
, 
	`_
(

406 
¥og«me
);

407 i‡(
î∫o
 =
ENOSYS
)

408 
	`Ârötf
(
°dîr
, 
	`_
(

410 
¥og«me
);

412 
	`Ârötf
(
°dîr
, 
	`_
(

414 
¥og«me
, 
	`°ªº‹
(
î∫o
));

415 
îr‹
 = 1;

420 i‡(!
îr‹
 && (
lÊag
 | 
aÊag
)) {

421 
xfs_growfs_log_t
 
ö
;

423 i‡(!
lsize
)

424 
lsize
 = 
dlsize
 / (
geo
.
blocksize
 / 
BBSIZE
);

425 i‡(
iÊag
)

426 
ö
.
isöt
 = 1;

427 i‡(
xÊag
)

428 
ö
.
isöt
 = 0;

430 
ö
.
isöt
 = 
xi
.
logBBsize
 == 0;

431 i‡(
lsize
 =
geo
.
logblocks
 && (
ö
.
isöt
 == isint)) {

432 i‡(
lÊag
)

433 
	`Ârötf
(
°dîr
,

434 
	`_
("log size unchanged, skipping\n"));

435 } i‡(!
nÊag
) {

436 
ö
.
√wblocks
 = (
__u32
)
lsize
;

437 i‡(
	`xfs˘l
(
‚ame
, 
ffd
, 
XFS_IOC_FSGROWFSLOG
, &
ö
) < 0) {

438 i‡(
î∫o
 =
EWOULDBLOCK
)

439 
	`Ârötf
(
°dîr
,

440 
	`_
("%s: growfs operation inÖrogressálready\n"),

441 
¥og«me
);

442 i‡(
î∫o
 =
ENOSYS
)

443 
	`Ârötf
(
°dîr
,

444 
	`_
("%s:Üog growthÇot supported yet\n"),

445 
¥og«me
);

447 
	`Ârötf
(
°dîr
,

448 
	`_
("%s: XFS_IOC_FSGROWFSLOG xfsctl failed: %s\n"),

449 
¥og«me
, 
	`°ªº‹
(
î∫o
));

450 
îr‹
 = 1;

455 i‡(
	`xfs˘l
(
‚ame
, 
ffd
, 
XFS_IOC_FSGEOMETRY_V1
, &
ngeo
) < 0) {

456 
	`Ârötf
(
°dîr
, 
	`_
("%s: XFS_IOC_FSGEOMETRY xfsctl failed: %s\n"),

457 
¥og«me
, 
	`°ªº‹
(
î∫o
));

458 
	`exô
(1);

460 i‡(
geo
.
d©ablocks
 !
ngeo
.datablocks)

461 
	`¥ötf
(
	`_
("data blocks changed from %lldÅo %lld\n"),

462 ()
geo
.
d©ablocks
, ()
ngeo
.datablocks);

463 i‡(
geo
.
imaxp˘
 !
ngeo
.imaxpct)

464 
	`¥ötf
(
	`_
("inode maxÖercent changed from %dÅo %d\n"),

465 
geo
.
imaxp˘
, 
ngeo
.imaxpct);

466 i‡(
geo
.
logblocks
 !
ngeo
.logblocks)

467 
	`¥ötf
(
	`_
("log blocks changed from %dÅo %d\n"),

468 
geo
.
logblocks
, 
ngeo
.logblocks);

469 i‡((
geo
.
log°¨t
 =0Ë!(
ngeo
.logstart == 0))

470 
	`¥ötf
(
	`_
("log changed from %sÅo %s\n"),

471 
geo
.
log°¨t
 ? 
	`_
("internal") : _("external"),

472 
ngeo
.
log°¨t
 ? 
	`_
("internal") : _("external"));

473 i‡(
geo
.
πblocks
 !
ngeo
.rtblocks)

474 
	`¥ötf
(
	`_
("realtime blocks changed from %lldÅo %lld\n"),

475 ()
geo
.
πblocks
, ()
ngeo
.rtblocks);

476 i‡(
geo
.
πextsize
 !
ngeo
.rtextsize)

477 
	`¥ötf
(
	`_
("realtimeÉxtent size changed from %dÅo %d\n"),

478 
geo
.
πextsize
, 
ngeo
.rtextsize);

479 
	`exô
(
îr‹
);

480 
	}
}

	@include/atomic.h

18 #i‚de‡
__ATOMIC_H__


19 
	#__ATOMIC_H__


	)

27 
öt32_t
 
	t©omic_t
;

28 
öt64_t
 
	t©omic64_t
;

30 
	#©omic_öc_ªtu∫
(
x
Ë(++(*(x)))

	)

31 
	#©omic_dec_ªtu∫
(
x
Ë(--(*(x)))

	)

33 
	#©omic64_ªad
(
x
Ë*(x)

	)

34 
	#©omic64_£t
(
x
, 
v
Ë(*(xËv)

	)

	@include/bitops.h

1 #i‚de‡
__BITOPS_H__


2 
	#__BITOPS_H__


	)

8 #i‚de‡
HAVE_FLS


9 
ölöe
 
	$Ês
(
x
)

11 
r
 = 32;

13 i‡(!
x
)

15 i‡(!(
x
 & 0xffff0000u)) {

16 
x
 <<= 16;

17 
r
 -= 16;

19 i‡(!(
x
 & 0xff000000u)) {

20 
x
 <<= 8;

21 
r
 -= 8;

23 i‡(!(
x
 & 0xf0000000u)) {

24 
x
 <<= 4;

25 
r
 -= 4;

27 i‡(!(
x
 & 0xc0000000u)) {

28 
x
 <<= 2;

29 
r
 -= 2;

31 i‡(!(
x
 & 0x80000000u)) {

32 
r
 -= 1;

34  
r
;

35 
	}
}

38 
ölöe
 
	$Ês64
(
__u64
 
x
)

40 
__u32
 
h
 = 
x
 >> 32;

41 i‡(
h
)

42  
	`Ês
(
h
) + 32;

43  
	`Ês
(
x
);

44 
	}
}

46 
ölöe
 
	$Ês_l⁄g
(
l
)

48 i‡((
l
) == 4)

49  
	`Ês
(
l
);

50  
	`Ês64
(
l
);

51 
	}
}

57 
	#ffz
(
x
Ë
	`ffs
(~(x))

	)

	@include/cache.h

18 #i‚de‡
__CACHE_H__


19 
	#__CACHE_H__


	)

29 
	#CACHE_MISCOMPARE_PURGE
 (1 << 0)

	)

35 
	mCACHE_HIT
,

36 
	mCACHE_MISS
,

37 
	mCACHE_PURGE
,

40 
	#HASH_CACHE_RATIO
 8

	)

55 
	#CACHE_BASE_PRIORITY
 0

	)

56 
	#CACHE_PREFETCH_PRIORITY
 8

	)

57 
	#CACHE_MAX_PRIORITY
 15

	)

58 
	#CACHE_DIRTY_PRIORITY
 (
CACHE_MAX_PRIORITY
 + 1)

	)

59 
	#CACHE_NR_PRIORITIES
 
CACHE_DIRTY_PRIORITY


	)

66 
	gˇche
;

67 
	gˇche_node
;

69 *
	tˇche_key_t
;

71 (*
	tˇche_wÆk_t
)(
	tˇche_node
 *);

72 
ˇche_node
 * (*
	tˇche_node_Æloc_t
)(
	tˇche_key_t
);

73 (*
	tˇche_node_Êush_t
)(
	tˇche_node
 *);

74 (*
	tˇche_node_ªl£_t
)(
	tˇche_node
 *);

75 (*
	tˇche_node_hash_t
)(
	tˇche_key_t
, ,

77 (*
	tˇche_node_com∑ª_t
)(
	tˇche_node
 *, 
	tˇche_key_t
);

78 (*
	tˇche_bulk_ªl£_t
)(
	tˇche
 *, 
	tli°_hód
 *);

80 
	sˇche_›î©i⁄s
 {

81 
ˇche_node_hash_t
 
hash
;

82 
ˇche_node_Æloc_t
 
Æloc
;

83 
ˇche_node_Êush_t
 
Êush
;

84 
ˇche_node_ªl£_t
 
ªl£
;

85 
ˇche_node_com∑ª_t
 
com∑ª
;

86 
ˇche_bulk_ªl£_t
 
bulkªl£
;

89 
	sˇche_hash
 {

90 
li°_hód
 
ch_li°
;

91 
ch_cou¡
;

92 
±hªad_muãx_t
 
ch_muãx
;

95 
	sˇche_mru
 {

96 
li°_hód
 
cm_li°
;

97 
cm_cou¡
;

98 
±hªad_muãx_t
 
cm_muãx
;

101 
	sˇche_node
 {

102 
li°_hód
 
˙_hash
;

103 
li°_hód
 
˙_mru
;

104 
˙_cou¡
;

105 
˙_hashidx
;

106 
˙_¥i‹ôy
;

107 
˙_ﬁd_¥i‹ôy
;

108 
±hªad_muãx_t
 
˙_muãx
;

111 
	sˇche
 {

112 
c_Êags
;

113 
c_maxcou¡
;

114 
c_cou¡
;

115 
±hªad_muãx_t
 
c_muãx
;

116 
ˇche_node_hash_t
 
hash
;

117 
ˇche_node_Æloc_t
 
Æloc
;

118 
ˇche_node_Êush_t
 
Êush
;

119 
ˇche_node_ªl£_t
 
ªl£
;

120 
ˇche_node_com∑ª_t
 
com∑ª
;

121 
ˇche_bulk_ªl£_t
 
bulkªl£
;

122 
c_hashsize
;

123 
c_hashshi·
;

124 
ˇche_hash
 *
c_hash
;

125 
ˇche_mru
 
c_mrus
[
CACHE_DIRTY_PRIORITY
 + 1];

126 
c_mis£s
;

127 
c_hôs
;

128 
c_max
;

131 
ˇche
 *
	`ˇche_öô
(, , 
ˇche_›î©i⁄s
 *);

132 
	`ˇche_de°roy
(
ˇche
 *);

133 
	`ˇche_wÆk
(
ˇche
 *, 
ˇche_wÆk_t
);

134 
	`ˇche_purge
(
ˇche
 *);

135 
	`ˇche_Êush
(
ˇche
 *);

137 
	`ˇche_node_gë
(
ˇche
 *, 
ˇche_key_t
, 
ˇche_node
 **);

138 
	`ˇche_node_put
(
ˇche
 *, 
ˇche_node
 *);

139 
	`ˇche_node_£t_¥i‹ôy
(
ˇche
 *, 
ˇche_node
 *, );

140 
	`ˇche_node_gë_¥i‹ôy
(
ˇche_node
 *);

141 
	`ˇche_node_purge
(
ˇche
 *, 
ˇche_key_t
, 
ˇche_node
 *);

142 
	`ˇche_ªp‹t
(
FILE
 *
Â
, c⁄° *, 
ˇche
 *);

143 
	`ˇche_ovîÊowed
(
ˇche
 *);

	@include/command.h

18 #i‚de‡
__COMMAND_H__


19 
	#__COMMAND_H__


	)

21 
	~<sys/time.h
>

28 
	#CMD_FLAG_ONESHOT
 (1<<31)

	)

29 
	#CMD_FLAG_FOREIGN_OK
 (1<<30Ë

	)

30 
	#CMD_FLAG_LIBRARY
 (1<<29Ë

	)

32 (*
	tcfunc_t
)(
	t¨gc
, **
	t¨gv
);

33 (*
	thñpfunc_t
)();

35 
	scmdöfo
 {

36 c⁄° *
«me
;

37 c⁄° *
Æäame
;

38 
cfunc_t
 
cfunc
;

39 
¨gmö
;

40 
¨gmax
;

41 
ˇ≈ush
;

42 
Êags
;

43 c⁄° *
¨gs
;

44 c⁄° *
⁄ñöe
;

45 
hñpfunc_t
 
hñp
;

46 } 
	tcmdöfo_t
;

48 
cmdöfo_t
 *
cmdèb
;

49 
ncmds
;

51 
	`hñp_öô
();

52 
	`quô_öô
();

54 (*
	tôîfunc_t
)(
	tödex
);

55 (*
	tcheckfunc_t
)(c⁄° 
	tcmdöfo_t
 *
	tci
);

57 
	`add_comm™d
(c⁄° 
cmdöfo_t
 *
ci
);

58 
	`add_u£r_comm™d
(*
›èrg
);

59 
	`add_⁄eshŸ_u£r_comm™d
(*
›èrg
);

60 
	`add_comm™d_ôî©‹
(
ôîfunc_t
 
func
);

61 
	`add_check_comm™d
(
checkfunc_t
 
cf
);

63 c⁄° 
cmdöfo_t
 *
	`föd_comm™d
(c⁄° *
cmd
);

65 
	`comm™d_lo›
();

66 
	`comm™d_ußge
(c⁄° 
cmdöfo_t
 *
ci
);

67 
	`comm™d
(c⁄° 
cmdöfo_t
 *
ci
, 
¨gc
, **
¨gv
);

69 
	`ªp‹t_io_times
(c⁄° *
vîb
, 
timevÆ
 *
t2
,

70 
off£t
, 
cou¡
,

71 
tŸÆ
, 
›s
, 
com∑˘
);

	@include/darwin.h

18 #i‚de‡
__XFS_DARWIN_H__


19 
	#__XFS_DARWIN_H__


	)

21 
	~<uni°d.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<°rög.h
>

24 
	~<uuid/uuid.h
>

25 
	~<libgí.h
>

26 
	~<sys/vm.h
>

27 
	~<sys/°©.h
>

28 
	~<sys/io˘l.h
>

29 
	~<sys/mou¡.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/time.h
>

32 
	~<·w.h
>

33 
	~<mach/mach_time.h
>

34 
	~<öây≥s.h
>

35 
	~<°dio.h
>

36 
	~<sys/mm™.h
>

38 
	~<machöe/ídün.h
>

39 
	#__BYTE_ORDER
 
BYTE_ORDER


	)

40 
	#__BIG_ENDIAN
 
BIG_ENDIAN


	)

41 
	#__LITTLE_ENDIAN
 
LITTLE_ENDIAN


	)

43 
	~<sys/sysˇŒ.h
>

44 #i‚de‡
SYS_fs˘l


45 
	#SYS_fs˘l
 242

	)

48 #i‚de‡
XATTR_LIST_MAX


49 
	#XATTR_LIST_MAX
 65536

	)

52 
__ölöe__
 
	$xfs˘l
(c⁄° *
∑th
, 
fd
, 
cmd
, *
p
)

54  
	`sysˇŒ
(
SYS_fs˘l
, 
∑th
, 
cmd
, 
p
, 0);

55 
	}
}

57 
__ölöe__
 
	$∂©f‹m_ã°_xfs_fd
(
fd
)

59 
°©fs
 
buf
;

60 i‡(
	`f°©fs
(
fd
, &
buf
) < 0)

62  
	`°∫cmp
(
buf
.
f_f°y≥«me
, "xfs", 4) == 0;

63 
	}
}

65 
__ölöe__
 
	$∂©f‹m_ã°_xfs_∑th
(c⁄° *
∑th
)

67 
°©fs
 
buf
;

68 i‡(
	`°©fs
(
∑th
, &
buf
) < 0)

70  
	`°∫cmp
(
buf
.
f_f°y≥«me
, "xfs", 4) == 0;

71 
	}
}

73 
__ölöe__
 
	$∂©f‹m_f°©fs
(
fd
, 
°©fs
 *
buf
)

75  
	`f°©fs
(
fd
, 
buf
);

76 
	}
}

78 
__ölöe__
 
	$∂©f‹m_gë›åe£t
()

80 
›åe£t
;

81 
›åe£t
 = 0;

82 
	}
}

84 
__ölöe__
 
	$∂©f‹m_uuid_com∑ª
(
uuid_t
 *
uu1
, uuid_à*
uu2
)

86  
	`uuid_com∑ª
(*
uu1
, *
uu2
);

87 
	}
}

89 
__ölöe__
 
	$∂©f‹m_uuid_u≈¨£
(
uuid_t
 *
uu
, *
buf„r
)

91 
	`uuid_u≈¨£
(*
uu
, 
buf„r
);

92 
	}
}

94 
__ölöe__
 
	$∂©f‹m_uuid_∑r£
(*
buf„r
, 
uuid_t
 *
uu
)

96  
	`uuid_∑r£
(
buf„r
, *
uu
);

97 
	}
}

99 
__ölöe__
 
	$∂©f‹m_uuid_is_nuŒ
(
uuid_t
 *
uu
)

101  
	`uuid_is_nuŒ
(*
uu
);

102 
	}
}

104 
__ölöe__
 
	$∂©f‹m_uuid_gíî©e
(
uuid_t
 *
uu
)

106 
	`uuid_gíî©e
(*
uu
);

107 
	}
}

109 
__ölöe__
 
	$∂©f‹m_uuid_˛ór
(
uuid_t
 *
uu
)

111 
	`uuid_˛ór
(*
uu
);

112 
	}
}

114 
__ölöe__
 
	$∂©f‹m_uuid_c›y
(
uuid_t
 *
d°
, uuid_à*
§c
)

116 
	`uuid_c›y
(*
d°
, *
§c
);

117 
	}
}

119 
	t__u8
;

120 sig√d 
	t__s8
;

121 
	t__u16
;

122 sig√d 
	t__s16
;

123 
	t__u32
;

124 sig√d 
	t__s32
;

125 
	t__u64
;

126 sig√d 
	t__s64
;

128 
	#__öt8_t
 
öt8_t


	)

129 
	#__öt16_t
 
öt16_t


	)

130 
	#__öt32_t
 
öt32_t


	)

131 
	#__öt32_t
 
öt32_t


	)

132 
	#__öt64_t
 
öt64_t


	)

133 
	#__uöt8_t
 
u_öt8_t


	)

134 
	#__uöt16_t
 
u_öt16_t


	)

135 
	#__uöt32_t
 
u_öt32_t


	)

136 
	#__uöt64_t
 
u_öt64_t


	)

138 
off_t
 
	txfs_off_t
;

139 
u_öt64_t
 
	txfs_öo_t
;

140 
u_öt32_t
 
	txfs_dev_t
;

141 
öt64_t
 
	txfs_daddr_t
;

142 
__u32
 
	txfs_∆ök_t
;

144 
	#fd©async
 
fsync


	)

145 
	#memÆign
(
a
,
sz
Ë
	`vÆloc
(sz)

	)

147 
	#O_LARGEFILE
 0

	)

148 #i‚de‡
O_DIRECT


149 
	#O_DIRECT
 0

	)

151 #i‚de‡
O_SYNC


152 
	#O_SYNC
 0

	)

155 
	#EFSCORRUPTED
 990

	)

156 
	#EFSBADCRC
 991

	)

158 
	#HAVE_FID
 1

	)

160 
__ölöe__
 

161 
	$∂©f‹m_disˇrd_blocks
(
fd
, 
uöt64_t
 
°¨t
, uöt64_à
Àn
)

164 
	}
}

173 
	#CLOCK_REALTIME
 
ITIMER_REAL


	)

174 
	#ôimî•ec
 
ôimîvÆ


	)

175 
uöt64_t
 
	ttimî_t
;

176 
	ttimî_c
;

177 
˛ock_id_t
 
	t˛ockid_t
;

180 
ölöe
 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

181 
sigevít
 *
__ª°ri˘
 
__evp
,

182 
timî_t
 *
__ª°ri˘
 
timî
)

185 *
timî
 = 0;

187 
	}
}

189 
ölöe
 
	$timî_£âime
 (
timî_t
 
timîid
, 
Êags
,

190 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
timî•ec
,

191 
ôimî•ec
 *
__ª°ri˘
 
ovÆue
)

193  
	`£tôimî
(
ITIMER_REAL
, 
timî•ec
, 
ovÆue
);

194 
	}
}

196 
ölöe
 
	$timî_dñëe
 (
timî_t
 
timîid
)

198 
ôimî•ec
 
time•ec
;

200 
time•ec
.
ô_öãrvÆ
.
tv_£c
=0;

201 
time•ec
.
ô_öãrvÆ
.
tv_u£c
=0;

202 
time•ec
.
ô_vÆue
.
tv_£c
=0;

203 
time•ec
.
ô_vÆue
.
tv_u£c
=0;

205  
	`£tôimî
(
ITIMER_REAL
, &
time•ec
, 
NULL
);

206 
	}
}

208 
ölöe
 
	$timî_gëtime
 (
timî_t
 
timîid
, 
ôimî•ec
 *
vÆue
)

210  
	`gëôimî
(
ITIMER_REAL
, 
vÆue
);

211 
	}
}

215 
	~<sys/mou¡.h
>

216 
	~<sys/∑øm.h
>

217 
	~<sys/u¸ed.h
>

218 
	~<î∫o.h
>

219 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

221 
	sm¡ít


223 *
	mm¡_f¢ame
;

224 *
	mm¡_dú
;

225 *
	mm¡_ty≥
;

226 *
	mm¡_›ts
;

227 
	mm¡_‰eq
;

228 
	mm¡_∑s¢o
;

231 
ölöe
 
	$m¡öfo2m¡ít
 (
°©fs
 * 
°©s
, 
m¡ít
 * 
m¡
) {

232 
m¡
->
m¡_f¢ame
 = 
°©s
->
f_m¡‰om«me
;

233 
m¡
->
m¡_dú
 = 
°©s
->
f_m¡⁄«me
;

234 
m¡
->
m¡_ty≥
 = 
°©s
->
f_f°y≥«me
;

235 
	}
}

242 
	sm¡ít_curs‹
 {

243 
FILE
 *
	mmèbp
;

244 
°©fs
 *
	m°©s
;

245 
	mcou¡
;

246 
	mi
;

252 
ölöe
 
	$∂©f‹m_m¡ít_›í
(
m¡ít_curs‹
 * 
curs‹
, *
mèb
)

254 i‡((
curs‹
->
cou¡
 = 
	`gëm¡öfo
(&curs‹->
°©s
, 0)) < 0) {

255 
	`Ârötf
(
°dîr
, "Eº‹: gëm¡öfo(ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

258 
curs‹
->
i
 = 0;

260 
	}
}

262 
ölöe
 
m¡ít
 * 
	$∂©f‹m_m¡ít_√xt
(
m¡ít_curs‹
 * 
curs‹
)

264 
m¡ít
 * 
t
 = 
NULL
;

265 i‡(
curs‹
->
i
 >curs‹->
cou¡
){

266  
NULL
;

268 
	`m¡öfo2m¡ít
(&
curs‹
->
°©s
[curs‹->
i
], 
t
);

269 
curs‹
->
i
++;

270  
t
;

271 
	}
}

273 
ölöe
 
	$∂©f‹m_m¡ít_˛o£
(
m¡ít_curs‹
 * 
curs‹
)

275 
curs‹
->
cou¡
 = 0;

276 
curs‹
->
i
 = 0;

277 
	}
}

280 #i‚de‡
HAVE_FSXATTR


281 
	sfsx©å
 {

282 
__u32
 
	mfsx_xÊags
;

283 
__u32
 
	mfsx_extsize
;

284 
__u32
 
	mfsx_√xã¡s
;

285 
__u32
 
	mfsx_¥ojid
;

286 
__u32
 
	mfsx_cowextsize
;

287 
	mfsx_∑d
[8];

293 
	#FS_XFLAG_REALTIME
 0x00000001

	)

294 
	#FS_XFLAG_PREALLOC
 0x00000002

	)

295 
	#FS_XFLAG_IMMUTABLE
 0x00000008

	)

296 
	#FS_XFLAG_APPEND
 0x00000010

	)

297 
	#FS_XFLAG_SYNC
 0x00000020

	)

298 
	#FS_XFLAG_NOATIME
 0x00000040

	)

299 
	#FS_XFLAG_NODUMP
 0x00000080

	)

300 
	#FS_XFLAG_RTINHERIT
 0x00000100

	)

301 
	#FS_XFLAG_PROJINHERIT
 0x00000200

	)

302 
	#FS_XFLAG_NOSYMLINKS
 0x00000400

	)

303 
	#FS_XFLAG_EXTSIZE
 0x00000800

	)

304 
	#FS_XFLAG_EXTSZINHERIT
 0x00001000

	)

305 
	#FS_XFLAG_NODEFRAG
 0x00002000

	)

306 
	#FS_XFLAG_FILESTREAM
 0x00004000

	)

307 
	#FS_XFLAG_DAX
 0x00008000

	)

308 
	#FS_XFLAG_HASATTR
 0x80000000

	)

310 
	#FS_IOC_FSGETXATTR
 
	`_IOR
 ('X', 31, 
fsx©å
)

	)

311 
	#FS_IOC_FSSETXATTR
 
	`_IOW
 ('X', 32, 
fsx©å
)

	)

315 #i‚de‡
FS_XFLAG_COWEXTSIZE


316 
	#FS_XFLAG_COWEXTSIZE
 0x00010000

	)

	@include/freebsd.h

18 #i‚de‡
__XFS_FREEBSD_H__


19 
	#__XFS_FREEBSD_H__


	)

21 
	~<sys/°©.h
>

22 
	~<sys/∑øm.h
>

23 
	~<sys/ioccom.h
>

24 
	~<sys/mou¡.h
>

25 
	~<˘y≥.h
>

26 
	~<libgí.h
>

27 
	~<∑ths.h
>

28 
	~<uuid.h
>

29 
	~<m¡ít.h
>

31 
	~<sys/ídün.h
>

32 
	#__BYTE_ORDER
 
BYTE_ORDER


	)

33 
	#__BIG_ENDIAN
 
BIG_ENDIAN


	)

34 
	#__LITTLE_ENDIAN
 
LITTLE_ENDIAN


	)

37 
	#fd©async
 
fsync


	)

38 
	#memÆign
(
a
,
sz
Ë
	`vÆloc
(sz)

	)

40 
	#EFSCORRUPTED
 990

	)

41 
	#EFSBADCRC
 991

	)

43 
	t__u8
;

44 sig√d 
	t__s8
;

45 
	t__u16
;

46 sig√d 
	t__s16
;

47 
	t__u32
;

48 sig√d 
	t__s32
;

49 
	t__u64
;

50 sig√d 
	t__s64
;

52 
off_t
 
	txfs_off_t
;

53 
__uöt64_t
 
	txfs_öo_t
;

54 
__uöt32_t
 
	txfs_dev_t
;

55 
__öt64_t
 
	txfs_daddr_t
;

56 
__u32
 
	txfs_∆ök_t
;

58 
	#O_LARGEFILE
 0

	)

60 
	#HAVE_FID
 1

	)

62 
__ölöe__
 
	$xfs˘l
(c⁄° *
∑th
, 
fd
, 
cmd
, *
p
)

64  
	`io˘l
(
fd
, 
cmd
, 
p
);

65 
	}
}

67 
__ölöe__
 
	$∂©f‹m_ã°_xfs_fd
(
fd
)

69 
°©fs
 
buf
;

70 i‡(
	`f°©fs
(
fd
, &
buf
) < 0)

72  
	`°∫cmp
(
buf
.
f_f°y≥«me
, "xfs", 4) == 0;

73 
	}
}

75 
__ölöe__
 
	$∂©f‹m_ã°_xfs_∑th
(c⁄° *
∑th
)

77 
°©fs
 
buf
;

78 i‡(
	`°©fs
(
∑th
, &
buf
) < 0)

80  
	`°∫cmp
(
buf
.
f_f°y≥«me
, "xfs", 4) == 0;

81 
	}
}

83 
__ölöe__
 
	$∂©f‹m_f°©fs
(
fd
, 
°©fs
 *
buf
)

85  
	`f°©fs
(
fd
, 
buf
);

86 
	}
}

88 
__ölöe__
 
	$∂©f‹m_gë›åe£t
()

90 
›töd
;

91 
›töd
 = 0;

92 
	}
}

94 
__ölöe__
 
	$∂©f‹m_uuid_com∑ª
(
uuid_t
 *
uu1
, uuid_à*
uu2
)

96  
	`uuid_com∑ª
(
uu1
, 
uu2
, 
NULL
);

97 
	}
}

99 
__ölöe__
 
	$∂©f‹m_uuid_u≈¨£
(
uuid_t
 *
uu
, *
buf„r
)

101 
uöt32_t
 
°©us
;

102 *
s
;

103 
	`uuid_to_°rög
(
uu
, &
s
, &
°©us
);

104 i‡(
°©us
 =
uuid_s_ok
)

105 
	`°r˝y
(
buf„r
, 
s
);

106 
buf„r
[0] = '\0';

107 
	`‰ì
(
s
);

108 
	}
}

110 
__ölöe__
 
	$∂©f‹m_uuid_∑r£
(*
buf„r
, 
uuid_t
 *
uu
)

112 
uöt32_t
 
°©us
;

113 
	`uuid_‰om_°rög
(
buf„r
, 
uu
, &
°©us
);

114  (
°©us
 =
uuid_s_ok
);

115 
	}
}

117 
__ölöe__
 
	$∂©f‹m_uuid_is_nuŒ
(
uuid_t
 *
uu
)

119  
	`uuid_is_nû
(
uu
, 
NULL
);

120 
	}
}

122 
__ölöe__
 
	$∂©f‹m_uuid_gíî©e
(
uuid_t
 *
uu
)

124 
	`uuid_¸óã
(
uu
, 
NULL
);

125 
	}
}

127 
__ölöe__
 
	$∂©f‹m_uuid_˛ór
(
uuid_t
 *
uu
)

129 
	`uuid_¸óã_nû
(
uu
, 
NULL
);

130 
	}
}

132 
__ölöe__
 
	$∂©f‹m_uuid_c›y
(
uuid_t
 *
d°
, uuid_à*
§c
)

134 
	`mem˝y
(
d°
, 
§c
, (
uuid_t
));

135 
	}
}

137 
__ölöe__
 

138 
	$∂©f‹m_disˇrd_blocks
(
fd
, 
uöt64_t
 
°¨t
, uöt64_à
Àn
)

141 
	}
}

146 
	sm¡ít_curs‹
 {

147 
FILE
 *
	mmèbp
;

150 
ölöe
 
	$∂©f‹m_m¡ít_›í
(
m¡ít_curs‹
 * 
curs‹
, *
mèb
)

152 
curs‹
->
mèbp
 = 
	`£tm¡ít
(
mèb
, "r");

153 i‡(!
curs‹
->
mèbp
) {

154 
	`Ârötf
(
°dîr
, "Eº‹: c™nŸÑód %s\n", 
mèb
);

158 
	}
}

160 
ölöe
 
m¡ít
 * 
	$∂©f‹m_m¡ít_√xt
(
m¡ít_curs‹
 * 
curs‹
)

162  
	`gëm¡ít
(
curs‹
->
mèbp
);

163 
	}
}

165 
ölöe
 
	$∂©f‹m_m¡ít_˛o£
(
m¡ít_curs‹
 * 
curs‹
)

167 
	`ídm¡ít
(
curs‹
->
mèbp
);

168 
	}
}

171 #i‚de‡
HAVE_FSXATTR


172 
	sfsx©å
 {

173 
__u32
 
	mfsx_xÊags
;

174 
__u32
 
	mfsx_extsize
;

175 
__u32
 
	mfsx_√xã¡s
;

176 
__u32
 
	mfsx_¥ojid
;

177 
__u32
 
	mfsx_cowextsize
;

178 
	mfsx_∑d
[8];

184 
	#FS_XFLAG_REALTIME
 0x00000001

	)

185 
	#FS_XFLAG_PREALLOC
 0x00000002

	)

186 
	#FS_XFLAG_IMMUTABLE
 0x00000008

	)

187 
	#FS_XFLAG_APPEND
 0x00000010

	)

188 
	#FS_XFLAG_SYNC
 0x00000020

	)

189 
	#FS_XFLAG_NOATIME
 0x00000040

	)

190 
	#FS_XFLAG_NODUMP
 0x00000080

	)

191 
	#FS_XFLAG_RTINHERIT
 0x00000100

	)

192 
	#FS_XFLAG_PROJINHERIT
 0x00000200

	)

193 
	#FS_XFLAG_NOSYMLINKS
 0x00000400

	)

194 
	#FS_XFLAG_EXTSIZE
 0x00000800

	)

195 
	#FS_XFLAG_EXTSZINHERIT
 0x00001000

	)

196 
	#FS_XFLAG_NODEFRAG
 0x00002000

	)

197 
	#FS_XFLAG_FILESTREAM
 0x00004000

	)

198 
	#FS_XFLAG_DAX
 0x00008000

	)

199 
	#FS_XFLAG_HASATTR
 0x80000000

	)

201 
	#FS_IOC_FSGETXATTR
 
	`_IOR
 ('X', 31, 
fsx©å
)

	)

202 
	#FS_IOC_FSSETXATTR
 
	`_IOW
 ('X', 32, 
fsx©å
)

	)

206 #i‚de‡
FS_XFLAG_COWEXTSIZE


207 
	#FS_XFLAG_COWEXTSIZE
 0x00010000

	)

	@include/gnukfreebsd.h

18 #i‚de‡
__XFS_KFREEBSD_H__


19 
	#__XFS_KFREEBSD_H__


	)

21 
	~<uuid/uuid.h
>

22 
	~<sys/vfs.h
>

23 
	~<sys/io˘l.h
>

24 
	~<sys/sysma¸os.h
>

25 
	~<mÆloc.h
>

26 
	~<gë›t.h
>

27 
	~<ídün.h
>

28 
	~<sys/°©.h
>

29 
	~<sys/∑øm.h
>

30 
	~<sys/mou¡.h
>

31 
	~<˘y≥.h
>

32 
	~<libgí.h
>

33 
	~<∑ths.h
>

34 
	~<m¡ít.h
>

36 
	#EFSCORRUPTED
 990

	)

37 
	#EFSBADCRC
 991

	)

39 
	t__u8
;

40 sig√d 
	t__s8
;

41 
	t__u16
;

42 sig√d 
	t__s16
;

43 
	t__u32
;

44 sig√d 
	t__s32
;

45 
	t__u64
;

46 sig√d 
	t__s64
;

48 
off_t
 
	txfs_off_t
;

49 
__uöt64_t
 
	txfs_öo_t
;

50 
__uöt32_t
 
	txfs_dev_t
;

51 
__öt64_t
 
	txfs_daddr_t
;

52 
__u32
 
	txfs_∆ök_t
;

54 
	#HAVE_FID
 1

	)

56 
__ölöe__
 
	$xfs˘l
(c⁄° *
∑th
, 
fd
, 
cmd
, *
p
)

58  
	`io˘l
(
fd
, 
cmd
, 
p
);

59 
	}
}

61 
__ölöe__
 
	$∂©f‹m_ã°_xfs_fd
(
fd
)

63 
°©fs
 
buf
;

64 i‡(
	`f°©fs
(
fd
, &
buf
) < 0)

66  
	`°∫cmp
(
buf
.
f_f°y≥«me
, "xfs", 4) == 0;

67 
	}
}

69 
__ölöe__
 
	$∂©f‹m_ã°_xfs_∑th
(c⁄° *
∑th
)

71 
°©fs
 
buf
;

72 i‡(
	`°©fs
(
∑th
, &
buf
) < 0)

74  
	`°∫cmp
(
buf
.
f_f°y≥«me
, "xfs", 4) == 0;

75 
	}
}

77 
__ölöe__
 
	$∂©f‹m_f°©fs
(
fd
, 
°©fs
 *
buf
)

79  
	`f°©fs
(
fd
, 
buf
);

80 
	}
}

82 
__ölöe__
 
	$∂©f‹m_gë›åe£t
()

84 
›töd
;

85 
›töd
 = 0;

86 
	}
}

88 
__ölöe__
 
	$∂©f‹m_uuid_com∑ª
(
uuid_t
 *
uu1
, uuid_à*
uu2
)

90  
	`uuid_com∑ª
(*
uu1
, *
uu2
);

91 
	}
}

93 
__ölöe__
 
	$∂©f‹m_uuid_u≈¨£
(
uuid_t
 *
uu
, *
buf„r
)

95 
	`uuid_u≈¨£
(*
uu
, 
buf„r
);

96 
	}
}

98 
__ölöe__
 
	$∂©f‹m_uuid_∑r£
(*
buf„r
, 
uuid_t
 *
uu
)

100  
	`uuid_∑r£
(
buf„r
, *
uu
);

101 
	}
}

103 
__ölöe__
 
	$∂©f‹m_uuid_is_nuŒ
(
uuid_t
 *
uu
)

105  
	`uuid_is_nuŒ
(*
uu
);

106 
	}
}

108 
__ölöe__
 
	$∂©f‹m_uuid_gíî©e
(
uuid_t
 *
uu
)

110 
	`uuid_gíî©e
(*
uu
);

111 
	}
}

113 
__ölöe__
 
	$∂©f‹m_uuid_˛ór
(
uuid_t
 *
uu
)

115 
	`uuid_˛ór
(*
uu
);

116 
	}
}

118 
__ölöe__
 
	$∂©f‹m_uuid_c›y
(
uuid_t
 *
d°
, uuid_à*
§c
)

120 
	`uuid_c›y
(*
d°
, *
§c
);

121 
	}
}

123 
__ölöe__
 

124 
	$∂©f‹m_disˇrd_blocks
(
fd
, 
uöt64_t
 
°¨t
, uöt64_à
Àn
)

127 
	}
}

132 
	sm¡ít_curs‹
 {

133 
FILE
 *
	mmèbp
;

136 
ölöe
 
	$∂©f‹m_m¡ít_›í
(
m¡ít_curs‹
 * 
curs‹
, *
mèb
)

138 
curs‹
->
mèbp
 = 
	`£tm¡ít
(
mèb
, "r");

139 i‡(!
curs‹
->
mèbp
) {

140 
	`Ârötf
(
°dîr
, "Eº‹: c™nŸÑód %s\n", 
mèb
);

144 
	}
}

146 
ölöe
 
m¡ít
 * 
	$∂©f‹m_m¡ít_√xt
(
m¡ít_curs‹
 * 
curs‹
)

148  
	`gëm¡ít
(
curs‹
->
mèbp
);

149 
	}
}

151 
ölöe
 
	$∂©f‹m_m¡ít_˛o£
(
m¡ít_curs‹
 * 
curs‹
)

153 
	`ídm¡ít
(
curs‹
->
mèbp
);

154 
	}
}

	@include/handle.h

18 #i‚de‡
__HANDLE_H__


19 
	#__HANDLE_H__


	)

21 #ifde‡
__˝lu•lus


25 
fsdmid©a
;

26 
©åli°_curs‹
;

27 
∑ª¡
;

29 
∑th_to_h™dÀ
 (*
__∑th
, **
__h™p
, 
size_t
 *
__hÀn
);

30 
∑th_to_fsh™dÀ
 (*
__∑th
, **
__fsh™p
, 
size_t
 *
__fshÀn
);

31 
fd_to_h™dÀ
 (
fd
, **
h™p
, 
size_t
 *
hÀn
);

32 
h™dÀ_to_fsh™dÀ
 (*
__h™p
, 
size_t
 
__hÀn
, **
__fsh™p
,

33 
size_t
 *
__fshÀn
);

34 
‰ì_h™dÀ
 (*
__h™p
, 
size_t
 
__hÀn
);

35 
›í_by_fsh™dÀ
 (*
__fsh™p
, 
size_t
 
__fshÀn
, 
__rw
);

36 
›í_by_h™dÀ
 (*
__h™p
, 
size_t
 
__hÀn
, 
__rw
);

37 
ªadlök_by_h™dÀ
 (*
__h™p
, 
size_t
 
__hÀn
, *
__buf
,

38 
size_t
 
__bs
);

39 
©å_mu…i_by_h™dÀ
 (*
__h™p
, 
size_t
 
__hÀn
, *
__buf
,

40 
__πrv˙t
, 
__Êags
);

41 
©å_li°_by_h™dÀ
 (*
__h™p
, 
size_t
 
__hÀn
, *
__buf
,

42 
size_t
 
__bufsize
, 
__Êags
,

43 
©åli°_curs‹
 *
__curs‹
);

44 
∑ª¡s_by_h™dÀ
(*
__h™p
, 
size_t
 
__hÀn
,

45 
∑ª¡
 *
__buf
, 
size_t
 
__bufsize
,

46 *
__cou¡
);

47 
∑ª¡∑ths_by_h™dÀ
(*
__h™p
, 
size_t
 
__hÀn
,

48 
∑ª¡
 *
__buf
, 
size_t
 
__bufsize
,

49 *
__cou¡
);

50 
fs£tdm_by_h™dÀ
 (*
__h™p
, 
size_t
 
__hÀn
,

51 
fsdmid©a
 *
__fsdmi
);

53 #ifde‡
__˝lu•lus


	@include/hlist.h

18 #i‚de‡
__HLIST_H__


19 
	#__HLIST_H__


	)

21 
	shli°_node
 {

22 
hli°_node
 *
	m√xt
;

23 
hli°_node
 **
	mµªv
;

25 
	shli°_hód
 {

26 
hli°_node
 *
	mfú°
;

29 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

30 
ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

32 
h
->
√xt
 = 
NULL
;

33 
h
->
µªv
 = 
NULL
;

34 
	}
}

36 
ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

38 
hli°_node
 *
fú°
 = 
h
->first;

39 
n
->
√xt
 = 
fú°
;

40 i‡(
fú°
)

41 
fú°
->
µªv
 = &
n
->
√xt
;

42 
h
->
fú°
 = 
n
;

43 
n
->
µªv
 = &
h
->
fú°
;

44 
	}
}

46 
ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

48 
hli°_node
 *
√xt
 = 
n
->next;

49 
hli°_node
 **
µªv
 = 
n
->pprev;

50 *
µªv
 = 
√xt
;

51 i‡(
√xt
)

52 
√xt
->
µªv
 =Öprev;

53 
	}
}

55 
ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

57 
	`__hli°_dñ
(
n
);

58 
	}
}

60 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
) ({ \

61 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

62 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

65 
	#hli°_f‹_óch
(
pos
, 
hód
) \

66 
pos
 = (
hód
)->
fú°
;Öos;Öo†pos->
√xt
)

	)

68 
	#hli°_f‹_óch_íåy
(
ços
, 
pos
, 
hód
, 
membî
) \

69 
pos
 = (
hód
)->
fú°
; \

70 
pos
 && ({ 
ços
 = 
	`hli°_íåy
’os, 
	`ty≥of
(*ços), 
membî
); 1;}); \

71 
pos
 =Öos->
√xt
)

	)

	@include/input.h

18 #i‚de‡
__INPUT_H__


19 
	#__INPUT_H__


	)

21 
	~<pwd.h
>

22 
	~<gΩ.h
>

23 
	~<sys/ty≥s.h
>

24 
	~"¥oje˘.h
"

25 
	~<°dboﬁ.h
>

27 **
bªaklöe
(*
öput
, *
cou¡
);

28 
d⁄ñöe
(*
öput
, **
vec
);

29 *
„tchlöe
();

31 
cväum
(
size_t
 
blocksize
, size_à
£˘‹size
, *
s
);

32 
cvt°r
(
vÆue
, *
°r
, 
size_t
 
sz
);

33 
cvâime
(*
s
);

35 
timevÆ
 
èdd
(timevÆ 
t1
, timevÆ 
t2
);

36 
timevÆ
 
tsub
(timevÆ 
t1
, timevÆ 
t2
);

37 
tdiv
(
vÆue
, 
timevÆ
 
tv
);

40 
	mDEFAULT_TIME
 = 0x0,

41 
	mTERSE_FIXED_TIME
 = 0x1,

42 
	mVERBOSE_FIXED_TIME
 = 0x2

45 
time°r
(
timevÆ
 *
tv
, *
°r
, 
size_t
 
sz
, 
Êags
);

47 
uid_t
 
uid_‰om_°rög
(*
u£r
);

48 
gid_t
 
gid_‰om_°rög
(*
group
);

49 
¥id_t
 
¥id_‰om_°rög
(*
¥oje˘
);

50 
boﬁ
 
isdigôs_⁄ly
(c⁄° *
°r
);

51 
time•ec_‰om_°rög
(c⁄° *
£c
, c⁄° *
n£c
, 
time•ec
 *
ts
);

53 
	#HAVE_FTW_H
 1

	)

55 #ifde‡
HAVE_FTW_H


56 
	~<·w.h
>

58 
	gFTW
;

59 
	g°©
;

60 
n·w
(

61 *
dú
,

62 (*
‚
)(c⁄° *, c⁄° 
°©
 *, , 
FTW
 *),

63 
dïth
,

64 
Êags
);

	@include/jdm.h

18 #i‚de‡
__JDM_H__


19 
	#__JDM_H__


	)

21 
	tötgí_t
;

22 
	tjdm_fsh™dÀ_t
;

23 
	tjdm_fûeh™dÀ_t
;

25 
	gxfs_b°©
;

26 
	g©åli°_curs‹
;

27 
	g∑ª¡
;

29 
jdm_fsh™dÀ_t
 *

30 
jdm_gëfsh™dÀ
–*
m¡≤t
);

33 
jdm_√w_fûeh™dÀ
–
jdm_fûeh™dÀ_t
 **
h™dÀp
,

34 
size_t
 *
hÀn
,

35 
jdm_fsh™dÀ_t
 *
fsh™dÀp
,

36 
xfs_b°©
 *
•
);

39 
jdm_dñëe_fûeh™dÀ
–
jdm_fûeh™dÀ_t
 *
h™dÀp
,

40 
size_t
 
hÀn
);

42 
ötgí_t


43 
jdm_›í
–
jdm_fsh™dÀ_t
 *
fsh™dÀp
,

44 
xfs_b°©
 *
•
,

45 
ötgí_t
 
oÊags
);

47 
ötgí_t


48 
jdm_ªadlök
–
jdm_fsh™dÀ_t
 *
fsh™dÀp
,

49 
xfs_b°©
 *
•
,

50 *
buÂ
,

51 
size_t
 
bufsz
);

53 
ötgí_t


54 
jdm_©å_mu…i
–
jdm_fsh™dÀ_t
 *
fshp
,

55 
xfs_b°©_t
 *
°©p
,

56 *
buÂ
, 
πrv˙t
, 
Êags
);

58 
ötgí_t


59 
jdm_©å_li°
–
jdm_fsh™dÀ_t
 *
fshp
,

60 
xfs_b°©_t
 *
°©p
,

61 *
buÂ
, 
size_t
 
bufsz
, 
Êags
,

62 
©åli°_curs‹
 *
curs‹
);

65 
jdm_∑ª¡s
–
jdm_fsh™dÀ_t
 *
fshp
,

66 
xfs_b°©_t
 *
°©p
,

67 
∑ª¡
 *
buÂ
, 
size_t
 
bufsz
,

68 *
cou¡
);

71 
jdm_∑ª¡∑ths
–
jdm_fsh™dÀ_t
 *
fshp
,

72 
xfs_b°©_t
 *
°©p
,

73 
∑ª¡
 *
buÂ
, 
size_t
 
bufsz
,

74 *
cou¡
);

77 
	#sizeofmembî
–
t
, 
m
 ) –––à* )0 )->m )

	)

80 
	#off£tofmembî
–
t
, 
m
 ) ( ( 
size_t
 )–* )&–––à* )0 )->m ) )

	)

	@include/kmem.h

18 #i‚de‡
__KMEM_H__


19 
	#__KMEM_H__


	)

21 
	#KM_SLEEP
 0x0001u

	)

22 
	#KM_NOSLEEP
 0x0002u

	)

23 
	#KM_NOFS
 0x0004u

	)

24 
	#KM_MAYFAIL
 0x0008u

	)

25 
	#KM_LARGE
 0x0010u

	)

27 
	skmem_z⁄e
 {

28 
	mz⁄e_unôsize
;

29 *
	mz⁄e_«me
;

30 
	mÆloˇãd
;

31 } 
	tkmem_z⁄e_t
;

33 
kmem_z⁄e_t
 *
kmem_z⁄e_öô
(, *);

34 *
kmem_z⁄e_Æloc
(
kmem_z⁄e_t
 *, );

35 *
kmem_z⁄e_zÆloc
(
kmem_z⁄e_t
 *, );

37 
ölöe
 

38 
	$kmem_z⁄e_‰ì
(
kmem_z⁄e_t
 *
z⁄e
, *
±r
)

40 
z⁄e
->
Æloˇãd
--;

41 
	`‰ì
(
±r
);

42 
	}
}

44 *
kmem_Æloc
(
size_t
, );

45 *
kmem_zÆloc
(
size_t
, );

47 
ölöe
 

48 
	$kmem_‰ì
(*
±r
) {

49 
	`‰ì
(
±r
);

50 
	}
}

52 *
kmem_ªÆloc
(*, 
size_t
, );

	@include/libxcmd.h

19 #i‚de‡
__LIBXCMD_H__


20 
	#__LIBXCMD_H__


	)

22 
	~"libxfs.h
"

23 
	~<sys/time.h
>

28 
	sfs_t›ﬁogy
 {

29 
	mdsunô
;

30 
	mdswidth
;

31 
	mπswidth
;

32 
	ml£˘‹size
;

33 
	mp£˘‹size
;

34 } 
	tfs_t›ﬁogy_t
;

37 
gë_t›ﬁogy
(

38 
libxfs_öô_t
 *
xi
,

39 
fs_t›ﬁogy
 *
·
,

40 
f‹˚_ovîwrôe
);

43 
ˇlc_deÁu…_ag_geomëry
(

44 
blocklog
,

45 
__uöt64_t
 
dblocks
,

46 
mu…idisk
,

47 
__uöt64_t
 *
agsize
,

48 
__uöt64_t
 *
agcou¡
);

51 
check_ovîwrôe
(

52 c⁄° *
devi˚
);

	@include/libxfs.h

19 #i‚de‡
__LIBXFS_H__


20 
	#__LIBXFS_H__


	)

22 
	~"libxfs_≠i_defs.h
"

23 
	~"∂©f‹m_defs.h
"

24 
	~"xfs.h
"

26 
	~"li°.h
"

27 
	~"hli°.h
"

28 
	~"ˇche.h
"

29 
	~"bô›s.h
"

30 
	~"kmem.h
"

31 
	~"ødix-åì.h
"

32 
	~"©omic.h
"

34 
	~"xfs_ty≥s.h
"

35 
	~"xfs_fs.h
"

36 
	~"xfs_¨ch.h
"

38 
	~"xfs_sh¨ed.h
"

39 
	~"xfs_f‹m©.h
"

40 
	~"xfs_log_f‹m©.h
"

41 
	~"xfs_quŸa_defs.h
"

42 
	~"xfs_å™s_ªsv.h
"

46 
uöt32_t
 
¸c32_À
(uöt32_à
¸c
, c⁄° *
p
, 
size_t
 
Àn
);

47 
uöt32_t
 
¸c32c_À
(uöt32_à
¸c
, c⁄° *
p
, 
size_t
 
Àn
);

49 
	#¸c32
(
c
,
p
,
l
Ë
	`¸c32_À
((c),(c⁄° *)’),÷))

	)

50 
	#¸c32c
(
c
,
p
,
l
Ë
	`¸c32c_À
((c),(c⁄° *)’),÷))

	)

52 
	~"xfs_cksum.h
"

58 
	~"libxfs_io.h
"

60 
	~"xfs_bô.h
"

61 
	~"xfs_sb.h
"

62 
	~"xfs_mou¡.h
"

63 
	~"xfs_de„r.h
"

64 
	~"xfs_da_f‹m©.h
"

65 
	~"xfs_da_båì.h
"

66 
	~"xfs_dú2.h
"

67 
	~"xfs_bm≠_båì.h
"

68 
	~"xfs_Æloc_båì.h
"

69 
	~"xfs_üŒoc_båì.h
"

70 
	~"xfs_©å_sf.h
"

71 
	~"xfs_öode_f‹k.h
"

72 
	~"xfs_öode_buf.h
"

73 
	~"xfs_öode.h
"

74 
	~"xfs_Æloc.h
"

75 
	~"xfs_båì.h
"

76 
	~"xfs_båì_åa˚.h
"

77 
	~"xfs_bm≠.h
"

78 
	~"xfs_åa˚.h
"

79 
	~"xfs_å™s.h
"

80 
	~"xfs_rm≠_båì.h
"

81 
	~"xfs_rm≠.h
"

82 
	~"xfs_ªfcou¡_båì.h
"

83 
	~"xfs_ªfcou¡.h
"

85 #i‚de‡
ARRAY_SIZE


86 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

89 #i‚de‡
XFS_SUPER_MAGIC


90 
	#XFS_SUPER_MAGIC
 0x58465342

	)

93 
	#xfs_is£t
(
a
,
i
Ë(◊)[(i)/((*◊))*
NBBY
)] & (1ULL<<((i)%((*◊))*NBBY))))

	)

100 *
	mvﬁ«me
;

101 *
	md«me
;

102 *
	mlog«me
;

103 *
	mπ«me
;

104 
	mi§ód⁄ly
;

105 
	misdúe˘
;

106 
	mdisfûe
;

107 
	md¸ót
;

108 
	mlisfûe
;

109 
	ml¸ót
;

110 
	mrisfûe
;

111 
	mr¸ót
;

112 
	m£tblksize
;

113 
	mu£buÊock
;

115 
dev_t
 
	mddev
;

116 
dev_t
 
	mlogdev
;

117 
dev_t
 
	mπdev
;

118 
	mdsize
;

119 
	mlogBBsize
;

122 
	mlogBB°¨t
;

123 
	mπsize
;

124 
	mdbsize
;

125 
	mlbsize
;

126 
	mπbsize
;

127 
	mdfd
;

128 
	mlogfd
;

129 
	mπfd
;

130 
	miˇche_Êags
;

131 
	mbˇche_Êags
;

132 } 
	tlibxfs_öô_t
;

134 
	#LIBXFS_EXIT_ON_FAILURE
 0x0001

	)

135 
	#LIBXFS_ISREADONLY
 0x0002

	)

136 
	#LIBXFS_ISINACTIVE
 0x0004

	)

137 
	#LIBXFS_DANGEROUSLY
 0x0008

	)

138 
	#LIBXFS_EXCLUSIVELY
 0x0010

	)

139 
	#LIBXFS_DIRECT
 0x0020

	)

141 *
¥og«me
;

142 
xfs_l¢_t
 
libxfs_max_l¢
;

143 
libxfs_öô
 (
libxfs_öô_t
 *);

144 
libxfs_de°roy
 ();

145 
libxfs_devi˚_to_fd
 (
dev_t
);

146 
dev_t
 
libxfs_devi˚_›í
 (*, , , );

147 
libxfs_devi˚_˛o£
 (
dev_t
);

148 
libxfs_devi˚_Æignmít
 ();

149 
libxfs_ªp‹t
(
FILE
 *);

150 
∂©f‹m_födsizes
(*
∑th
, 
fd
, *
sz
, *
bsz
);

151 
∂©f‹m_≈roc
();

154 *(
	tlibxfs_gë_block_t
)(*, , *);

159 
	#XLOG_INIT_CYCLE
 1

	)

160 
libxfs_log_˛ór
(
xfs_bu·¨g
 *, *, 
xfs_daddr_t
,

161 
uöt
, 
uuid_t
 *, , , , , 
boﬁ
);

162 
libxfs_log_hódî
(*, 
uuid_t
 *, , , , 
xfs_l¢_t
,

163 
xfs_l¢_t
, 
libxfs_gë_block_t
 *, *);

167 
libxfs_log2_roundup
(
i
);

169 
libxfs_Æloc_fûe_•a˚
 (
xfs_öode
 *, 
xfs_off_t
,

170 
xfs_off_t
, , );

172 
libxfs_fs_ª∑ú_cmn_îr
(, 
xfs_mou¡
 *, *, ...);

173 
libxfs_fs_cmn_îr
(, 
xfs_mou¡
 *, *, ...);

176 #i‚de‡
__LIBXFS_INTERNAL_XFS_H__


177 
cmn_îr
(, *, ...);

178 
	e˚
 { 
	mCE_DEBUG
, 
	mCE_CONT
, 
	mCE_NOTE
, 
	mCE_WARN
, 
	mCE_ALERT
, 
	mCE_PANIC
 };

182 
libxfs_≈roc
();

183 
libxfs_physmem
();

185 
	~"xfs_üŒoc.h
"

187 
	~"xfs_©å_Àaf.h
"

188 
	~"xfs_©å_ªmŸe.h
"

189 
	~"xfs_å™s_•a˚.h
"

191 
	#XFS_INOBT_IS_FREE_DISK
(
Ω
,
i
) \

192 ((
	`be64_to_˝u
((
Ω
)->
ú_‰ì
Ë& 
	`XFS_INOBT_MASK
(
i
)Ë!0)

	)

194 
ölöe
 
boﬁ


195 
	$xfs_öobt_is_•¨£_disk
(

196 
xfs_öobt_ªc
 *
Ω
,

197 
off£t
)

199 
•shi·
;

200 
uöt16_t
 
hﬁemask
;

202 
hﬁemask
 = 
	`be16_to_˝u
(
Ω
->
ú_u
.
•
.
ú_hﬁemask
);

203 
•shi·
 = 
off£t
 / 
XFS_INODES_PER_HOLEMASK_BIT
;

204 i‡((1 << 
•shi·
Ë& 
hﬁemask
)

205  
åue
;

207  
Ál£
;

208 
	}
}

210 
ölöe
 

211 
	$libxfs_bmbt_disk_gë_Æl
(

212 
xfs_bmbt_ªc
 *
Ω
,

213 
xfs_bmbt_úec
 *
úec
)

215 
xfs_bmbt_ªc_ho°
 
hªc
;

217 
hªc
.
l0
 = 
	`gë_u«lig√d_be64
(&
Ω
->l0);

218 
hªc
.
l1
 = 
	`gë_u«lig√d_be64
(&
Ω
->l1);

219 
	`libxfs_bmbt_gë_Æl
(&
hªc
, 
úec
);

220 
	}
}

224 
libxfs_π‰ì_exã¡
(
xfs_å™s
 *, 
xfs_πblock_t
, 
xfs_exéí_t
);

227 
	#LIBXFS_ATTR_ROOT
 0x0002

	)

228 
	#LIBXFS_ATTR_SECURE
 0x0008

	)

229 
	#LIBXFS_ATTR_CREATE
 0x0010

	)

230 
	#LIBXFS_ATTR_REPLACE
 0x0020

	)

232 
xfs_©å_ªmove
(
xfs_öode
 *
dp
, c⁄° *
«me
, 
Êags
);

233 
xfs_©å_£t
(
xfs_öode
 *
dp
, c⁄° *
«me
,

234 *
vÆue
, 
vÆuñí
, 
Êags
);

	@include/libxlog.h

17 #i‚de‡
LIBXLOG_H


18 
	#LIBXLOG_H


	)

25 
	sxlog
 {

26 
xfs_l¢_t
 
	ml_èû_l¢
;

27 
xfs_l¢_t
 
	ml_œ°_sync_l¢
;

28 
xfs_mou¡_t
 *
	ml_mp
;

29 
xfs_bu·¨g
 *
	ml_dev
;

30 
xfs_daddr_t
 
	ml_logBB°¨t
;

31 
	ml_logBBsize
;

32 
	ml_cuº_cy˛e
;

33 
	ml_¥ev_cy˛e
;

34 
	ml_cuº_block
;

35 
	ml_¥ev_block
;

36 
	ml_i˛og_size
;

37 
	ml_i˛og_size_log
;

38 
	ml_i˛og_bufs
;

39 
©omic64_t
 
	ml_gø¡_ª£rve_hód
;

40 
©omic64_t
 
	ml_gø¡_wrôe_hód
;

41 
uöt
 
	ml_£˘bb_log
;

42 
uöt
 
	ml_£˘bb_mask
;

44 
	ml_£˘BBsize
;

47 
	~"xfs_log_ªcovî.h
"

54 #i‚de‡
EFSCORRUPTED


55 
	#EFSCORRUPTED
 990

	)

57 
	#STATIC
 

	)

58 
	#XFS_ERROR
(
e
Ë”)

	)

59 #ifde‡
DEBUG


60 
	#XFS_ERROR_REPORT
(
e
,
l
,
mp
Ë
	`Ârötf
(
°dîr
, "ERROR: %s\n",É)

	)

62 
	#XFS_ERROR_REPORT
(
e
,
l
,
mp
Ë((Ë0)

	)

64 
	#XFS_CORRUPTION_ERROR
(
e
,
l
,
mp
,
m
Ë((Ë0)

	)

65 
	#XFS_MOUNT_WAS_CLEAN
 0x1

	)

66 
	#u∆ikñy
(
x
Ë(x)

	)

67 
	#xfs_Æît
(
mp
,
fmt
,
¨gs
...Ë
	`cmn_îr
(
CE_ALERT
,fmt, ##árgs)

	)

68 
	#xfs_w¨n
(
mp
,
fmt
,
¨gs
...Ë
	`cmn_îr
(
CE_WARN
,fmt, ##árgs)

	)

69 
	#xfs_hex_dump
(
d
,
n
Ë((Ë0)

	)

70 
	#__round_mask
(
x
, 
y
Ë((
	`__ty≥of__
(x))((y)-1))

	)

71 
	#round_up
(
x
, 
y
Ë((((x)-1Ë| 
	`__round_mask
(x, y))+1)

	)

72 
	#round_down
(
x
, 
y
Ë((xË& ~
	`__round_mask
(x, y))

	)

74 
xlog_w¨n
(*
fmt
,...);

75 
xlog_exô
(*
fmt
,...);

76 
xlog_∑nic
(*
fmt
,...);

79 
¥öt_exô
;

80 
¥öt_skù_uuid
;

81 
¥öt_ªc‹d_hódî
;

84 
libxfs_öô_t
 
x
;

87 
xlog_is_dúty
(
xfs_mou¡
 *, 
xlog
 *, 
libxfs_öô_t
 *,

89 
xfs_buf
 *
xlog_gë_bp
(
xlog
 *, );

90 
xlog_put_bp
(
xfs_buf
 *);

91 
xlog_bªad
(
xlog
 *
log
, 
xfs_daddr_t
 
blk_no
, 
nbblks
,

92 
xfs_buf_t
 *
bp
, **
off£t
);

93 
xlog_bªad_nﬂlign
(
xlog
 *
log
, 
xfs_daddr_t
 
blk_no
,

94 
nbblks
, 
xfs_buf_t
 *
bp
);

96 
xlog_föd_zî€d
(
xlog
 *
log
, 
xfs_daddr_t
 *
blk_no
);

97 
xlog_föd_cy˛e_°¨t
(
xlog
 *
log
, 
xfs_buf_t
 *
bp
,

98 
xfs_daddr_t
 
fú°_blk
, xfs_daddr_à*
œ°_blk
,

99 
uöt
 
cy˛e
);

100 
xlog_föd_èû
(
xlog
 *
log
, 
xfs_daddr_t
 *
hód_blk
,

101 
xfs_daddr_t
 *
èû_blk
);

103 
xlog_ã°_foŸî
(
xlog
 *
log
);

104 
xlog_ªcovî
(
xlog
 *
log
, 
ªad⁄ly
);

105 
xlog_ªcovî_¥öt_d©a
(*
p
, 
Àn
);

106 
xlog_ªcovî_¥öt_logôem
(
xlog_ªcovî_ôem_t
 *
ôem
);

107 
xlog_ªcovî_¥öt_å™s_hód
(
xlog_ªcovî_t
 *
å
);

108 
xlog_¥öt_föd_ﬁde°
(
xlog
 *
log
, 
xfs_daddr_t
 *
œ°_blk
);

111 
xlog_ªcovî_¥öt_å™s_hód
(
xlog_ªcovî_t
 *
å
);

112 
xlog_ªcovî_¥öt_å™s
(
xlog_ªcovî_t
 *
å™s
,

113 
li°_hód
 *
ôemq
, 
¥öt
);

114 
xlog_do_ªcovîy_∑ss
(
xlog
 *
log
, 
xfs_daddr_t
 
hód_blk
,

115 
xfs_daddr_t
 
èû_blk
, 
∑ss
);

116 
xlog_ªcovî_do_å™s
(
xlog
 *
log
, 
xlog_ªcovî_t
 *
å™s
,

117 
∑ss
);

118 
xlog_hódî_check_ªcovî
(
xfs_mou¡_t
 *
mp
,

119 
xlog_ªc_hódî_t
 *
hód
);

120 
xlog_hódî_check_mou¡
(
xfs_mou¡_t
 *
mp
,

121 
xlog_ªc_hódî_t
 *
hód
);

123 
	#xlog_assign_©omic_l¢
(
l
,
a
,
b
Ë((Ë0)

	)

124 
	#xlog_assign_gø¡_hód
(
l
,
a
,
b
Ë((Ë0)

	)

	@include/linux.h

17 #i‚de‡
__XFS_LINUX_H__


18 
	#__XFS_LINUX_H__


	)

20 
	~<uuid/uuid.h
>

21 
	~<sys/vfs.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/∑øm.h
>

24 
	~<sys/sysma¸os.h
>

25 
	~<sys/°©.h
>

26 
	~<öây≥s.h
>

27 
	~<mÆloc.h
>

28 
	~<gë›t.h
>

29 
	~<î∫o.h
>

30 
	~<ídün.h
>

31 
	~<°dboﬁ.h
>

32 
	~<°dio.h
>

33 
	~<asm/ty≥s.h
>

34 
	~<m¡ít.h
>

35 #ifde‡
OVERRIDE_SYSTEM_FSXATTR


36 
	#fsx©å
 
sys_fsx©å


	)

38 
	~<löux/fs.h
>

39 #ifde‡
OVERRIDE_SYSTEM_FSXATTR


40 #unde‡
fsx©å


43 
__ölöe__
 
	$xfs˘l
(c⁄° *
∑th
, 
fd
, 
cmd
, *
p
)

45  
	`io˘l
(
fd
, 
cmd
, 
p
);

46 
	}
}

54 
__ölöe__
 
	$∂©f‹m_ã°_xfs_fd
(
fd
)

56 
°©fs
 
°©fsbuf
;

57 
°©
 
°©buf
;

59 i‡(
	`f°©fs
(
fd
, &
°©fsbuf
) < 0)

61 i‡(
	`f°©
(
fd
, &
°©buf
) < 0)

63 i‡(!
	`S_ISREG
(
°©buf
.
°_mode
Ë&& !
	`S_ISDIR
(statbuf.st_mode))

65  (
°©fsbuf
.
f_ty≥
 == 0x58465342);

66 
	}
}

68 
__ölöe__
 
	$∂©f‹m_ã°_xfs_∑th
(c⁄° *
∑th
)

70 
°©fs
 
°©fsbuf
;

71 
°©
 
°©buf
;

73 i‡(
	`°©fs
(
∑th
, &
°©fsbuf
) < 0)

75 i‡(
	`°©
(
∑th
, &
°©buf
) < 0)

77 i‡(!
	`S_ISREG
(
°©buf
.
°_mode
Ë&& !
	`S_ISDIR
(statbuf.st_mode))

79  (
°©fsbuf
.
f_ty≥
 == 0x58465342);

80 
	}
}

82 
__ölöe__
 
	$∂©f‹m_f°©fs
(
fd
, 
°©fs
 *
buf
)

84  
	`f°©fs
(
fd
, 
buf
);

85 
	}
}

87 
__ölöe__
 
	$∂©f‹m_gë›åe£t
()

89 
›töd
;

90 
›töd
 = 0;

91 
	}
}

93 
__ölöe__
 
	$∂©f‹m_uuid_com∑ª
(
uuid_t
 *
uu1
, uuid_à*
uu2
)

95  
	`uuid_com∑ª
(*
uu1
, *
uu2
);

96 
	}
}

98 
__ölöe__
 
	$∂©f‹m_uuid_u≈¨£
(
uuid_t
 *
uu
, *
buf„r
)

100 
	`uuid_u≈¨£
(*
uu
, 
buf„r
);

101 
	}
}

103 
__ölöe__
 
	$∂©f‹m_uuid_∑r£
(*
buf„r
, 
uuid_t
 *
uu
)

105  
	`uuid_∑r£
(
buf„r
, *
uu
);

106 
	}
}

108 
__ölöe__
 
	$∂©f‹m_uuid_is_nuŒ
(
uuid_t
 *
uu
)

110  
	`uuid_is_nuŒ
(*
uu
);

111 
	}
}

113 
__ölöe__
 
	$∂©f‹m_uuid_gíî©e
(
uuid_t
 *
uu
)

115 
	`uuid_gíî©e
(*
uu
);

116 
	}
}

118 
__ölöe__
 
	$∂©f‹m_uuid_˛ór
(
uuid_t
 *
uu
)

120 
	`uuid_˛ór
(*
uu
);

121 
	}
}

123 
__ölöe__
 
	$∂©f‹m_uuid_c›y
(
uuid_t
 *
d°
, uuid_à*
§c
)

125 
	`uuid_c›y
(*
d°
, *
§c
);

126 
	}
}

128 #i‚de‡
BLKDISCARD


129 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

132 
__ölöe__
 

133 
	$∂©f‹m_disˇrd_blocks
(
fd
, 
uöt64_t
 
°¨t
, uöt64_à
Àn
)

135 
__uöt64_t
 
ønge
[2] = { 
°¨t
, 
Àn
 };

137 i‡(
	`io˘l
(
fd
, 
BLKDISCARD
, &
ønge
) < 0)

138  
î∫o
;

140 
	}
}

142 
	#ENOATTR
 
ENODATA


	)

143 
	#EFSCORRUPTED
 
EUCLEAN


	)

144 
	#EFSBADCRC
 
EBADMSG


	)

146 
off_t
 
	txfs_off_t
;

147 
__uöt64_t
 
	txfs_öo_t
;

148 
__uöt32_t
 
	txfs_dev_t
;

149 
__öt64_t
 
	txfs_daddr_t
;

150 
__u32
 
	txfs_∆ök_t
;

155 
	sm¡ít_curs‹
 {

156 
FILE
 *
	mmèbp
;

159 
ölöe
 
	$∂©f‹m_m¡ít_›í
(
m¡ít_curs‹
 * 
curs‹
, *
mèb
)

161 
curs‹
->
mèbp
 = 
	`£tm¡ít
(
mèb
, "r");

162 i‡(!
curs‹
->
mèbp
) {

163 
	`Ârötf
(
°dîr
, "Eº‹: c™nŸÑód %s\n", 
mèb
);

167 
	}
}

169 
ölöe
 
m¡ít
 * 
	$∂©f‹m_m¡ít_√xt
(
m¡ít_curs‹
 * 
curs‹
)

171  
	`gëm¡ít
(
curs‹
->
mèbp
);

172 
	}
}

174 
ölöe
 
	$∂©f‹m_m¡ít_˛o£
(
m¡ít_curs‹
 * 
curs‹
)

176 
	`ídm¡ít
(
curs‹
->
mèbp
);

177 
	}
}

184 #i‡!
deföed
 
FS_IOC_FSGETXATTR
 || deföed 
OVERRIDE_SYSTEM_FSXATTR


185 
	sfsx©å
 {

186 
__u32
 
	mfsx_xÊags
;

187 
__u32
 
	mfsx_extsize
;

188 
__u32
 
	mfsx_√xã¡s
;

189 
__u32
 
	mfsx_¥ojid
;

190 
__u32
 
	mfsx_cowextsize
;

191 
	mfsx_∑d
[8];

195 #i‚de‡
FS_IOC_FSGETXATTR


199 
	#FS_XFLAG_REALTIME
 0x00000001

	)

200 
	#FS_XFLAG_PREALLOC
 0x00000002

	)

201 
	#FS_XFLAG_IMMUTABLE
 0x00000008

	)

202 
	#FS_XFLAG_APPEND
 0x00000010

	)

203 
	#FS_XFLAG_SYNC
 0x00000020

	)

204 
	#FS_XFLAG_NOATIME
 0x00000040

	)

205 
	#FS_XFLAG_NODUMP
 0x00000080

	)

206 
	#FS_XFLAG_RTINHERIT
 0x00000100

	)

207 
	#FS_XFLAG_PROJINHERIT
 0x00000200

	)

208 
	#FS_XFLAG_NOSYMLINKS
 0x00000400

	)

209 
	#FS_XFLAG_EXTSIZE
 0x00000800

	)

210 
	#FS_XFLAG_EXTSZINHERIT
 0x00001000

	)

211 
	#FS_XFLAG_NODEFRAG
 0x00002000

	)

212 
	#FS_XFLAG_FILESTREAM
 0x00004000

	)

213 
	#FS_XFLAG_DAX
 0x00008000

	)

214 
	#FS_XFLAG_HASATTR
 0x80000000

	)

216 
	#FS_IOC_FSGETXATTR
 
	`_IOR
 ('X', 31, 
fsx©å
)

	)

217 
	#FS_IOC_FSSETXATTR
 
	`_IOW
 ('X', 32, 
fsx©å
)

	)

221 #i‚de‡
FS_XFLAG_COWEXTSIZE


222 
	#FS_XFLAG_COWEXTSIZE
 0x00010000

	)

	@include/list.h

18 #i‚de‡
__LIST_H__


19 
	#__LIST_H__


	)

32 #unde‡
LIST_HEAD


33 #unde‡
LIST_HEAD_INIT


39 
	sli°_hód
 {

40 
li°_hód
 *
	m√xt
;

41 
li°_hód
 *
	m¥ev
;

44 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

46 
	#LIST_HEAD
(
«me
) \

47 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

49 
	#INIT_LIST_HEAD
(
li°
Ë
	`li°_hód_öô
÷i°)

	)

50 
ölöe
 
	$li°_hód_öô
(
li°_hód
 *
li°
)

52 
li°
->
√xt
 =Üi°->
¥ev
 =Üist;

53 
	}
}

55 
ölöe
 
	$li°_hód_de°roy
(
li°_hód
 *
li°
)

57 
li°
->
√xt
 =Üi°->
¥ev
 = 
NULL
;

58 
	}
}

60 
ölöe
 
	$__li°_add
(
li°_hód
 *
add
,

61 
li°_hód
 *
¥ev
, li°_hód *
√xt
)

63 
√xt
->
¥ev
 = 
add
;

64 
add
->
√xt
 =Çext;

65 
add
->
¥ev
 =Örev;

66 
¥ev
->
√xt
 = 
add
;

67 
	}
}

69 
ölöe
 
	$li°_add
(
li°_hód
 *
add
, li°_hód *
hód
)

71 
	`__li°_add
(
add
, 
hód
, hód->
√xt
);

72 
	}
}

74 
ölöe
 
	$li°_add_èû
(
li°_hód
 *
add
, li°_hód *
hód
)

76 
	`__li°_add
(
add
, 
hód
->
¥ev
, head);

77 
	}
}

79 
ölöe
 
	$__li°_dñ
(
li°_hód
 *
¥ev
, li°_hód *
√xt
)

81 
√xt
->
¥ev
 =Örev;

82 
¥ev
->
√xt
 =Çext;

83 
	}
}

85 
ölöe
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

87 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

88 
	`li°_hód_öô
(
íåy
);

89 
	}
}

91 
ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
)

93 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

94 
	}
}

96 
ölöe
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

98 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

99 
	`li°_add
(
li°
, 
hód
);

100 
	}
}

102 
ölöe
 
	$li°_move_èû
(
li°_hód
 *
li°
, li°_hód *
hód
)

104 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

105 
	`li°_add_èû
(
li°
, 
hód
);

106 
	}
}

108 
ölöe
 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

110  
hód
->
√xt
 == head;

111 
	}
}

113 
ölöe
 
	$__li°_•li˚
(
li°_hód
 *
li°
,

114 
li°_hód
 *
¥ev
,

115 
li°_hód
 *
√xt
)

117 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

118 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

120 
fú°
->
¥ev
 =Örev;

121 
¥ev
->
√xt
 = 
fú°
;

123 
œ°
->
√xt
 =Çext;

124 
√xt
->
¥ev
 = 
œ°
;

125 
	}
}

127 
ölöe
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

129 i‡(!
	`li°_em±y
(
li°
))

130 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

131 
	}
}

133 
ölöe
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
,

134 
li°_hód
 *
hód
)

136 i‡(!
	`li°_em±y
(
li°
)) {

137 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

138 
	`li°_hód_öô
(
li°
);

140 
	}
}

142 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) ({ \

143 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

144 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

146 
	#li°_f‹_óch
(
pos
, 
hód
) \

147 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

149 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

150 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

151 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

153 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

154 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

155 &
pos
->
membî
 !(
hód
); \

156 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

158 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

159 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

160 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

161 &
pos
->
membî
 !(
hód
); \

162 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

164 
	#li°_fú°_íåy
(
±r
, 
ty≥
, 
membî
) \

165 
	`li°_íåy
((
±r
)->
√xt
, 
ty≥
, 
membî
)

	)

167 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

168 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

169 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

171 
li°_s‹t
(*
¥iv
, 
li°_hód
 *
hód
,

172 (*
cmp
)(*
¥iv
, 
li°_hód
 *
a
,

173 
li°_hód
 *
b
));

175 
	#ARRAY_SIZE
(
¨r
Ë(◊ºË/ (◊º)[0]))

	)

185 
ölöe
 
	$li°_•li˚_èû_öô
(
li°_hód
 *
li°
,

186 
li°_hód
 *
hód
)

188 i‡(!
	`li°_em±y
(
li°
)) {

189 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

190 
	`INIT_LIST_HEAD
(
li°
);

192 
	}
}

202 
	#li°_œ°_íåy
(
±r
, 
ty≥
, 
membî
) \

203 
	`li°_íåy
((
±r
)->
¥ev
, 
ty≥
, 
membî
)

	)

210 
	#li°_¥ev_íåy
(
pos
, 
membî
) \

211 
	`li°_íåy
((
pos
)->
membî
.
¥ev
, 
	`ty≥of
(*’os)), membî)

	)

219 
	#li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
membî
) \

220 
pos
 = 
	`li°_œ°_íåy
(
hód
, 
	`ty≥of
(*pos), 
membî
); \

221 &
pos
->
membî
 !(
hód
); \

222 
pos
 = 
	`li°_¥ev_íåy
’os, 
membî
))

	)

	@include/parent.h

18 #i‚de‡
__PARENT_H__


19 
	#__PARENT_H__


	)

21 
	s∑ª¡
 {

22 
__u64
 
	mp_öo
;

23 
__u32
 
	mp_gí
;

24 
__u16
 
	mp_ª˛í
;

25 
	mp_«me
[1];

26 } 
	t∑ª¡_t
;

28 
	s∑ª¡_curs‹
 {

29 
__u32
 
	m›aque
[4];

30 } 
	t∑ª¡_curs‹_t
;

	@include/path.h

18 #i‚de‡
__PATH_H__


19 
	#__PATH_H__


	)

21 
	~"∂©f‹m_defs.h
"

30 
	#FS_MOUNT_POINT
 (1<<0)

	)

31 
	#FS_PROJECT_PATH
 (1<<1)

	)

32 
	#FS_FOREIGN
 (1<<2)

	)

34 
	sfs_∑th
 {

35 *
	mfs_«me
;

36 
dev_t
 
	mfs_d©adev
;

37 *
	mfs_log
;

38 
dev_t
 
	mfs_logdev
;

39 *
	mfs_π
;

40 
dev_t
 
	mfs_πdev
;

41 *
	mfs_dú
;

42 
uöt
 
	mfs_Êags
;

43 
uöt
 
	mfs_¥id
;

44 } 
	tfs_∑th_t
;

46 
fs_cou¡
;

47 
xfs_fs_cou¡
;

48 
fs_∑th_t
 *
fs_èbÀ
;

49 
fs_∑th_t
 *
fs_∑th
;

50 *
mèb_fûe
;

52 
fs_èbÀ_öôüli£
(, *[], , *[]);

53 
fs_èbÀ_de°roy
();

55 
fs_èbÀ_ö£π_¥oje˘_∑th
(*
__dú
, 
uöt
 
__¥ojid
);

58 
fs_∑th_t
 *
fs_èbÀ_lookup
(c⁄° *
__dú
, 
uöt
 
__Êags
);

59 
fs_∑th_t
 *
fs_èbÀ_lookup2
(c⁄° *
__dú
, 
uöt
 
__Êags
);

61 
	sfs_curs‹
 {

62 
uöt
 
	mcou¡
;

63 
uöt
 
	mödex
;

64 
uöt
 
	mÊags
;

65 
fs_∑th_t
 *
	mèbÀ
;

66 
fs_∑th_t
 
	mloˇl
;

67 } 
	tfs_curs‹_t
;

69 
fs_curs‹_öôüli£
(*
__dú
, 
uöt
 
__Êags
, 
fs_curs‹_t
 *
__˝
);

70 
fs_∑th_t
 *
fs_curs‹_√xt_íåy
(
fs_curs‹_t
 *
__˝
);

	@include/platform_defs.h

21 #i‚de‡
__XFS_PLATFORM_DEFS_H__


22 
	#__XFS_PLATFORM_DEFS_H__


	)

24 
	~<°dio.h
>

25 
	~<î∫o.h
>

26 
	~<f˙é.h
>

27 
	~<°d¨g.h
>

28 
	~<as£π.h
>

29 
	~<°ddef.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<°döt.h
>

33 
	~<uni°d.h
>

34 
	~<±hªad.h
>

35 
	~<˘y≥.h
>

36 
	~<sys/ty≥s.h
>

37 
	~<limôs.h
>

38 
	~<°dboﬁ.h
>

39 
	~<libgí.h
>

41 
fûldú
 
	tfûldú_t
;

44 
	#SIZEOF_LONG
 8

	)

45 
	#SIZEOF_CHAR_P
 8

	)

46 
	#BITS_PER_LONG
 (
SIZEOF_LONG
 * 
CHAR_BIT
)

	)

49 #i‚de‡
HAVE_UMODE_T


50 
	tumode_t
;

55 #ifde‡
ENABLE_GETTEXT


56 
	~<liböé.h
>

57 
	#_
(
x
Ë
	`gëãxt
(x)

	)

58 
	#N_
(
x
Ë
	)
x

60 
	#_
(
x
Ë(x)

	)

61 
	#N_
(
x
Ë
	)
x

62 
	#ãxtdomaö
(
d
Ëdÿ{ } 0)

	)

63 
	#bödãxtdomaö
(
d
,
dú
Ëdÿ{ } 0)

	)

65 
	~<loˇÀ.h
>

67 
	#IRIX_DEV_BITSMAJOR
 14

	)

68 
	#IRIX_DEV_BITSMINOR
 18

	)

69 
	#IRIX_DEV_MAXMAJ
 0x1ff

	)

70 
	#IRIX_DEV_MAXMIN
 0x3ffff

	)

71 
	#IRIX_DEV_MAJOR
(
dev
Ë(()((()(devË>> 
IRIX_DEV_BITSMINOR
) \

72 & 
IRIX_DEV_MAXMAJ
))

	)

73 
	#IRIX_DEV_MINOR
(
dev
Ë(()((devË& 
IRIX_DEV_MAXMIN
))

	)

74 
	#IRIX_MKDEV
(
maj‹
,
mö‹
Ë((
xfs_dev_t
)(((maj‹Ë<< 
IRIX_DEV_BITSMINOR
) \

75 | (
mö‹
&
IRIX_DEV_MAXMIN
)))

	)

76 
	#IRIX_DEV_TO_KDEVT
(
dev
Ë
	`makedev
(
	`IRIX_DEV_MAJOR
(dev),
	`IRIX_DEV_MINOR
(dev))

	)

78 #i‚de‡
mö


79 
	#mö
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

80 
	#max
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

83 #i‚de‡
NBBY


84 
	#NBBY
 8

	)

87 #ifde‡
DEBUG


88 
	#ASSERT
(
EX
Ë
	`as£π
(EX)

	)

90 
	#ASSERT
(
EX
Ë((Ë0)

	)

	@include/project.h

18 #i‚de‡
__PROJECT_H__


19 
	#__PROJECT_H__


	)

21 
	~"∂©f‹m_defs.h
"

22 
	~"xfs.h
"

24 
£çrojid
(c⁄° *
__«me
, 
__fd
, 
¥id_t
 
__id
);

25 
gë¥ojid
(c⁄° *
__«me
, 
__fd
, 
¥id_t
 *
__id
);

27 
	sfs_¥oje˘
 {

28 
¥id_t
 
	m¥_¥id
;

29 *
	m¥_«me
;

30 } 
	tfs_¥oje˘_t
;

32 
£çª¡
();

33 
íd¥ít
();

34 
fs_¥oje˘_t
 *
gë¥ít
();

35 
fs_¥oje˘_t
 *
gë¥«m
(*
__«me
);

36 
fs_¥oje˘_t
 *
gë¥¥id
(
¥id_t
 
__id
);

38 
	sfs_¥oje˘_∑th
 {

39 
¥id_t
 
	mµ_¥id
;

40 *
	mµ_∑th«me
;

41 } 
	tfs_¥oje˘_∑th_t
;

43 
£çΩ©hít
();

44 
íd¥∑thít
();

45 
fs_¥oje˘_∑th_t
 *
gë¥∑thít
();

47 
£çrfûes
();

48 *
¥ojid_fûe
;

49 *
¥oje˘s_fûe
;

	@include/radix-tree.h

19 #i‚de‡
__XFS_SUPPORT_RADIX_TREE_H__


20 
	#__XFS_SUPPORT_RADIX_TREE_H__


	)

22 
	#RADIX_TREE_TAGS


	)

24 
	sødix_åì_roŸ
 {

25 
	mheight
;

26 
ødix_åì_node
 *
	m∫ode
;

29 
	#RADIX_TREE_INIT
(
mask
) { \

30 .
height
 = 0, \

31 .
∫ode
 = 
NULL
, \

32 }

	)

34 
	#RADIX_TREE
(
«me
, 
mask
) \

35 
ødix_åì_roŸ
 
«me
 = 
	`RADIX_TREE_INIT
(
mask
)

	)

37 
	#INIT_RADIX_TREE
(
roŸ
, 
mask
) \

39 (
roŸ
)->
height
 = 0; \

40 (
roŸ
)->
∫ode
 = 
NULL
; \

41 } 0)

	)

43 #ifde‡
RADIX_TREE_TAGS


44 
	#RADIX_TREE_MAX_TAGS
 2

	)

47 
ødix_åì_ö£π
(
ødix_åì_roŸ
 *, , *);

48 *
ødix_åì_lookup
(
ødix_åì_roŸ
 *, );

49 **
ødix_åì_lookup_¶Ÿ
(
ødix_åì_roŸ
 *, );

50 *
ødix_åì_lookup_fú°
(
ødix_åì_roŸ
 *, *);

51 *
ødix_åì_dñëe
(
ødix_åì_roŸ
 *, );

53 
ødix_åì_g™g_lookup
(
ødix_åì_roŸ
 *
roŸ
, **
ªsu…s
,

54 
fú°_ödex
, 
max_ôems
);

56 
ødix_åì_g™g_lookup_ex
(
ødix_åì_roŸ
 *
roŸ
, **
ªsu…s
,

57 
fú°_ödex
, 
œ°_ödex
,

58 
max_ôems
);

60 
ødix_åì_öô
();

62 #ifde‡
RADIX_TREE_TAGS


63 *
ødix_åì_èg_£t
(
ødix_åì_roŸ
 *
roŸ
,

64 
ödex
, 
èg
);

65 *
ødix_åì_èg_˛ór
(
ødix_åì_roŸ
 *
roŸ
,

66 
ödex
, 
èg
);

67 
ødix_åì_èg_gë
(
ødix_åì_roŸ
 *
roŸ
,

68 
ödex
, 
èg
);

70 
ødix_åì_g™g_lookup_èg
(
ødix_åì_roŸ
 *
roŸ
, **
ªsu…s
,

71 
fú°_ödex
, 
max_ôems
,

72 
èg
);

73 
ødix_åì_ègged
(
ødix_åì_roŸ
 *
roŸ
, 
èg
);

	@include/xfs.h

33 #i‚de‡
__XFS_H__


34 
	#__XFS_H__


	)

36 #i‡
deföed
(
__löux__
)

37 
	~<xfs/löux.h
>

38 #ñi‡
deföed
(
__FªeBSD__
)

39 
	~<xfs/‰ìbsd.h
>

40 #ñi‡
deföed
(
__FªeBSD_kî√l__
)

41 
	~<xfs/gnuk‰ìbsd.h
>

42 #ñi‡
deföed
(
__APPLE__
)

43 
	~<xfs/d¨wö.h
>

45 #îr‹ 
unknown
 
∂©f‹m
... 
have
 
fun
 
p‹tög
!

51 
xfs_as£π_œrgefûe
[(
off_t
)-8];

56 #i‚de‡
__u£r


57 
	#__u£r


	)

63 #i‚de‡
__∑cked


64 
	#__∑cked
 
	`__©åibuã__
((
∑cked
))

	)

67 
	~<xfs/xfs_ty≥s.h
>

68 
	~<xfs/xfs_fs.h
>

	@include/xfs_arch.h

18 #i‚de‡
__XFS_ARCH_H__


19 
	#__XFS_ARCH_H__


	)

21 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


22 
	#XFS_NATIVE_HOST
 1

	)

24 #unde‡
XFS_NATIVE_HOST


27 #ifde‡
__CHECKER__


28 #i‚de‡
__bôwi£


29 
	#__bôwi£
 
	`__©åibuã__
((
bôwi£
))

	)

31 
	#__f‹˚
 
	`__©åibuã__
((
f‹˚
))

	)

33 #i‚de‡
__bôwi£


34 
	#__bôwi£


	)

36 
	#__f‹˚


	)

39 
__u16
 
	t__bôwi£
 
	t__À16
;

40 
__u32
 
	t__bôwi£
 
	t__À32
;

41 
__u64
 
	t__bôwi£
 
	t__À64
;

43 
__u16
 
	t__bôwi£
 
	t__be16
;

44 
__u32
 
	t__bôwi£
 
	t__be32
;

45 
__u64
 
	t__bôwi£
 
	t__be64
;

51 
	#___swab16
(
x
) \

53 
__u16
 
__x
 = (
x
); \

54 ((
__u16
)( \

55 (((
__u16
)(
__x
) & (__u16)0x00ffU) << 8) | \

56 (((
__u16
)(
__x
) & (__u16)0xff00U) >> 8) )); \

57 })

	)

59 
	#___swab32
(
x
) \

61 
__u32
 
__x
 = (
x
); \

62 ((
__u32
)( \

63 (((
__u32
)(
__x
) & (__u32)0x000000ffUL) << 24) | \

64 (((
__u32
)(
__x
) & (__u32)0x0000ff00UL) << 8) | \

65 (((
__u32
)(
__x
) & (__u32)0x00ff0000UL) >> 8) | \

66 (((
__u32
)(
__x
) & (__u32)0xff000000UL) >> 24) )); \

67 })

	)

69 
	#___swab64
(
x
) \

71 
__u64
 
__x
 = (
x
); \

72 ((
__u64
)( \

73 (
__u64
)(((__u64)(
__x
) & (__u64)0x00000000000000ffULL) << 56) | \

74 (
__u64
)(((__u64)(
__x
) & (__u64)0x000000000000ff00ULL) << 40) | \

75 (
__u64
)(((__u64)(
__x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

76 (
__u64
)(((__u64)(
__x
) & (__u64)0x00000000ff000000ULL) << 8) | \

77 (
__u64
)(((__u64)(
__x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

78 (
__u64
)(((__u64)(
__x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

79 (
__u64
)(((__u64)(
__x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

80 (
__u64
)(((__u64)(
__x
) & (__u64)0xff00000000000000ULL) >> 56) )); \

81 })

	)

83 
	#___c⁄°™t_swab16
(
x
) \

84 ((
__u16
)( \

85 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

86 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8Ë))

	)

87 
	#___c⁄°™t_swab32
(
x
) \

88 ((
__u32
)( \

89 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

90 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

91 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

92 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24Ë))

	)

93 
	#___c⁄°™t_swab64
(
x
) \

94 ((
__u64
)( \

95 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

96 (
__u64
)(((__u64)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

97 (
__u64
)(((__u64)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

98 (
__u64
)(((__u64)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

99 (
__u64
)(((__u64)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

100 (
__u64
)(((__u64)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

101 (
__u64
)(((__u64)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

102 (
__u64
)(((__u64)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56Ë))

	)

107 #i‚de‡
__¨ch__swab16


108 
	#__¨ch__swab16
(
x
Ë({ 
__u16
 
__tmp
 = (xË; 
	`___swab16
(__tmp); })

	)

110 #i‚de‡
__¨ch__swab32


111 
	#__¨ch__swab32
(
x
Ë({ 
__u32
 
__tmp
 = (xË; 
	`___swab32
(__tmp); })

	)

113 #i‚de‡
__¨ch__swab64


114 
	#__¨ch__swab64
(
x
Ë({ 
__u64
 
__tmp
 = (xË; 
	`___swab64
(__tmp); })

	)

117 #i‚de‡
__¨ch__swab16p


118 
	#__¨ch__swab16p
(
x
Ë
	`__¨ch__swab16
(*(x))

	)

120 #i‚de‡
__¨ch__swab32p


121 
	#__¨ch__swab32p
(
x
Ë
	`__¨ch__swab32
(*(x))

	)

123 #i‚de‡
__¨ch__swab64p


124 
	#__¨ch__swab64p
(
x
Ë
	`__¨ch__swab64
(*(x))

	)

127 #i‚de‡
__¨ch__swab16s


128 
	#__¨ch__swab16s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab16p
((x)); } 0)

	)

130 #i‚de‡
__¨ch__swab32s


131 
	#__¨ch__swab32s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab32p
((x)); } 0)

	)

133 #i‚de‡
__¨ch__swab64s


134 
	#__¨ch__swab64s
(
x
Ëdÿ{ *(xË
	`__¨ch__swab64p
((x)); } 0)

	)

141 
	#__swab16
(
x
) \

142 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

143 
	`___c⁄°™t_swab16
((
x
)) : \

144 
	`__fswab16
((
x
)))

	)

145 
	#__swab32
(
x
) \

146 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

147 
	`___c⁄°™t_swab32
((
x
)) : \

148 
	`__fswab32
((
x
)))

	)

149 
	#__swab64
(
x
) \

150 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

151 
	`___c⁄°™t_swab64
((
x
)) : \

152 
	`__fswab64
((
x
)))

	)

155 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
x
)

157  (
__exãnsi⁄__
 
	`__¨ch__swab16
(
x
));

158 
	}
}

159 
__ölöe__
 
__u16
 
	$__swab16p
(
__u16
 *
x
)

161  (
__exãnsi⁄__
 
	`__¨ch__swab16p
(
x
));

162 
	}
}

163 
__ölöe__
 
	$__swab16s
(
__u16
 *
addr
)

165 (
	`__exãnsi⁄__
 ({
	`__¨ch__swab16s
(
addr
);}));

166 
	}
}

168 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
x
)

170  (
__exãnsi⁄__
 
	`__¨ch__swab32
(
x
));

171 
	}
}

172 
__ölöe__
 
__u32
 
	$__swab32p
(
__u32
 *
x
)

174  (
__exãnsi⁄__
 
	`__¨ch__swab32p
(
x
));

175 
	}
}

176 
__ölöe__
 
	$__swab32s
(
__u32
 *
addr
)

178 (
	`__exãnsi⁄__
 ({
	`__¨ch__swab32s
(
addr
);}));

179 
	}
}

181 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
x
)

183 #ifde‡
__SWAB_64_THRU_32__


184 
__u32
 
h
 = 
x
 >> 32;

185 
__u32
 
l
 = 
x
 & ((1ULL<<32)-1);

186  (((
__u64
)
	`__swab32
(
l
)Ë<< 32Ë| ((__u64)(__swab32(
h
)));

188  (
__exãnsi⁄__
 
	`__¨ch__swab64
(
x
));

190 
	}
}

191 
__ölöe__
 
__u64
 
	$__swab64p
(
__u64
 *
x
)

193  (
__exãnsi⁄__
 
	`__¨ch__swab64p
(
x
));

194 
	}
}

195 
__ölöe__
 
	$__swab64s
(
__u64
 *
addr
)

197 (
	`__exãnsi⁄__
 ({
	`__¨ch__swab64s
(
addr
);}));

198 
	}
}

200 #ifde‡
XFS_NATIVE_HOST


201 
	#˝u_to_be16
(
vÆ
Ë((
__f‹˚
 
__be16
)(
__u16
)(vÆ))

	)

202 
	#˝u_to_be32
(
vÆ
Ë((
__f‹˚
 
__be32
)(
__u32
)(vÆ))

	)

203 
	#˝u_to_be64
(
vÆ
Ë((
__f‹˚
 
__be64
)(
__u64
)(vÆ))

	)

204 
	#be16_to_˝u
(
vÆ
Ë((
__f‹˚
 
__u16
)(
__be16
)(vÆ))

	)

205 
	#be32_to_˝u
(
vÆ
Ë((
__f‹˚
 
__u32
)(
__be32
)(vÆ))

	)

206 
	#be64_to_˝u
(
vÆ
Ë((
__f‹˚
 
__u64
)(
__be64
)(vÆ))

	)

208 
	#˝u_to_À32
(
vÆ
Ë((
__f‹˚
 
__be32
)
	`__swab32
((
__u32
)(vÆ)))

	)

209 
	#À32_to_˝u
(
vÆ
Ë(
	`__swab32
((
__f‹˚
 
__u32
)(
__À32
)(vÆ)))

	)

211 
	#__c⁄°™t_˝u_to_À32
(
vÆ
) \

212 ((
__f‹˚
 
__À32
)
	`___c⁄°™t_swab32
((
__u32
)(
vÆ
)))

	)

213 
	#__c⁄°™t_˝u_to_be32
(
vÆ
) \

214 ((
__f‹˚
 
__be32
)(
__u32
)(
vÆ
))

	)

216 
	#˝u_to_be16
(
vÆ
Ë((
__f‹˚
 
__be16
)
	`__swab16
((
__u16
)(vÆ)))

	)

217 
	#˝u_to_be32
(
vÆ
Ë((
__f‹˚
 
__be32
)
	`__swab32
((
__u32
)(vÆ)))

	)

218 
	#˝u_to_be64
(
vÆ
Ë((
__f‹˚
 
__be64
)
	`__swab64
((
__u64
)(vÆ)))

	)

219 
	#be16_to_˝u
(
vÆ
Ë(
	`__swab16
((
__f‹˚
 
__u16
)(
__be16
)(vÆ)))

	)

220 
	#be32_to_˝u
(
vÆ
Ë(
	`__swab32
((
__f‹˚
 
__u32
)(
__be32
)(vÆ)))

	)

221 
	#be64_to_˝u
(
vÆ
Ë(
	`__swab64
((
__f‹˚
 
__u64
)(
__be64
)(vÆ)))

	)

223 
	#˝u_to_À32
(
vÆ
Ë((
__f‹˚
 
__À32
)(
__u32
)(vÆ))

	)

224 
	#À32_to_˝u
(
vÆ
Ë((
__f‹˚
 
__u32
)(
__À32
)(vÆ))

	)

226 
	#__c⁄°™t_˝u_to_À32
(
vÆ
) \

227 ((
__f‹˚
 
__À32
)(
__u32
)(
vÆ
))

	)

228 
	#__c⁄°™t_˝u_to_be32
(
vÆ
) \

229 ((
__f‹˚
 
__be32
)
	`___c⁄°™t_swab32
((
__u32
)(
vÆ
)))

	)

232 
ölöe
 
	$be16_add_˝u
(
__be16
 *
a
, 
__s16
 
b
)

234 *
a
 = 
	`˝u_to_be16
(
	`be16_to_˝u
(*aË+ 
b
);

235 
	}
}

237 
ölöe
 
	$be32_add_˝u
(
__be32
 *
a
, 
__s32
 
b
)

239 *
a
 = 
	`˝u_to_be32
(
	`be32_to_˝u
(*aË+ 
b
);

240 
	}
}

242 
ölöe
 
	$be64_add_˝u
(
__be64
 *
a
, 
__s64
 
b
)

244 *
a
 = 
	`˝u_to_be64
(
	`be64_to_˝u
(*aË+ 
b
);

245 
	}
}

247 
ölöe
 
__uöt16_t
 
	$gë_u«lig√d_be16
(*
p
)

249 
__uöt8_t
 *
__p
 = 
p
;

250  
__p
[0] << 8 | __p[1];

251 
	}
}

253 
ölöe
 
__uöt32_t
 
	$gë_u«lig√d_be32
(*
p
)

255 
__uöt8_t
 *
__p
 = 
p
;

256  
__p
[0] << 24 | __p[1] << 16 | __p[2] << 8 | __p[3];

257 
	}
}

259 
ölöe
 
__uöt64_t
 
	$gë_u«lig√d_be64
(*
p
)

261  (
__uöt64_t
)
	`gë_u«lig√d_be32
(
p
) << 32 |

262 
	`gë_u«lig√d_be32
(
p
 + 4);

263 
	}
}

265 
ölöe
 
	$put_u«lig√d_be16
(
__uöt16_t
 
vÆ
, *
p
)

267 
__uöt8_t
 *
__p
 = 
p
;

268 *
__p
++ = 
vÆ
 >> 8;

269 *
__p
++ = 
vÆ
;

270 
	}
}

272 
ölöe
 
	$put_u«lig√d_be32
(
__uöt32_t
 
vÆ
, *
p
)

274 
__uöt8_t
 *
__p
 = 
p
;

275 
	`put_u«lig√d_be16
(
vÆ
 >> 16, 
__p
);

276 
	`put_u«lig√d_be16
(
vÆ
, 
__p
 + 2);

277 
	}
}

279 
ölöe
 
	$put_u«lig√d_be64
(
__uöt64_t
 
vÆ
, *
p
)

281 
	`put_u«lig√d_be32
(
vÆ
 >> 32, 
p
);

282 
	`put_u«lig√d_be32
(
vÆ
, 
p
 + 4);

283 
	}
}

	@include/xfs_btree_trace.h

18 #i‚de‡
__XFS_BTREE_TRACE_H__


19 
	#__XFS_BTREE_TRACE_H__


	)

21 
	gxfs_båì_cur
;

22 
	gxfs_buf
;

34 #ifde‡
XFS_BTREE_TRACE


39 
	#XFS_BTREE_KTRACE_ARGBI
 1

	)

40 
	#XFS_BTREE_KTRACE_ARGBII
 2

	)

41 
	#XFS_BTREE_KTRACE_ARGFFFI
 3

	)

42 
	#XFS_BTREE_KTRACE_ARGI
 4

	)

43 
	#XFS_BTREE_KTRACE_ARGIPK
 5

	)

44 
	#XFS_BTREE_KTRACE_ARGIPR
 6

	)

45 
	#XFS_BTREE_KTRACE_ARGIK
 7

	)

46 
	#XFS_BTREE_KTRACE_ARGR
 8

	)

47 
	#XFS_BTREE_KTRACE_CUR
 9

	)

52 
	#XBT_ARGS
 0

	)

53 
	#XBT_ENTRY
 1

	)

54 
	#XBT_ERROR
 2

	)

55 
	#XBT_EXIT
 3

	)

57 
xfs_båì_åa˚_¨gbi
(c⁄° *, 
xfs_båì_cur
 *,

58 
xfs_buf
 *, , );

59 
xfs_båì_åa˚_¨gbii
(c⁄° *, 
xfs_båì_cur
 *,

60 
xfs_buf
 *, , , );

61 
xfs_båì_åa˚_¨gi
(c⁄° *, 
xfs_båì_cur
 *, , );

62 
xfs_båì_åa˚_¨gùk
(c⁄° *, 
xfs_båì_cur
 *, ,

63 
xfs_båì_±r
, 
xfs_båì_key
 *, );

64 
xfs_båì_åa˚_¨gùr
(c⁄° *, 
xfs_båì_cur
 *, ,

65 
xfs_båì_±r
, 
xfs_båì_ªc
 *, );

66 
xfs_båì_åa˚_¨gik
(c⁄° *, 
xfs_båì_cur
 *, ,

67 
xfs_båì_key
 *, );

68 
xfs_båì_åa˚_¨gr
(c⁄° *, 
xfs_båì_cur
 *,

69 
xfs_båì_ªc
 *, );

70 
xfs_båì_åa˚_curs‹
(c⁄° *, 
xfs_båì_cur
 *, , );

72 
	#XFS_BTREE_TRACE_ARGBI
(
c
, 
b
, 
i
) \

73 
	`xfs_båì_åa˚_¨gbi
(
__func__
, 
c
, 
b
, 
i
, 
__LINE__
)

	)

74 
	#XFS_BTREE_TRACE_ARGBII
(
c
, 
b
, 
i
, 
j
) \

75 
	`xfs_båì_åa˚_¨gbii
(
__func__
, 
c
, 
b
, 
i
, 
j
, 
__LINE__
)

	)

76 
	#XFS_BTREE_TRACE_ARGI
(
c
, 
i
) \

77 
	`xfs_båì_åa˚_¨gi
(
__func__
, 
c
, 
i
, 
__LINE__
)

	)

78 
	#XFS_BTREE_TRACE_ARGIPK
(
c
, 
i
, 
p
, 
k
) \

79 
	`xfs_båì_åa˚_¨gùk
(
__func__
, 
c
, 
i
, 
p
, 
k
, 
__LINE__
)

	)

80 
	#XFS_BTREE_TRACE_ARGIPR
(
c
, 
i
, 
p
, 
r
) \

81 
	`xfs_båì_åa˚_¨gùr
(
__func__
, 
c
, 
i
, 
p
, 
r
, 
__LINE__
)

	)

82 
	#XFS_BTREE_TRACE_ARGIK
(
c
, 
i
, 
k
) \

83 
	`xfs_båì_åa˚_¨gik
(
__func__
, 
c
, 
i
, 
k
, 
__LINE__
)

	)

84 
	#XFS_BTREE_TRACE_ARGR
(
c
, 
r
) \

85 
	`xfs_båì_åa˚_¨gr
(
__func__
, 
c
, 
r
, 
__LINE__
)

	)

86 
	#XFS_BTREE_TRACE_CURSOR
(
c
, 
t
) \

87 
	`xfs_båì_åa˚_curs‹
(
__func__
, 
c
, 
t
, 
__LINE__
)

	)

89 
	#XFS_BTREE_TRACE_ARGBI
(
c
, 
b
, 
i
)

	)

90 
	#XFS_BTREE_TRACE_ARGBII
(
c
, 
b
, 
i
, 
j
)

	)

91 
	#XFS_BTREE_TRACE_ARGI
(
c
, 
i
)

	)

92 
	#XFS_BTREE_TRACE_ARGIPK
(
c
, 
i
, 
p
, 
s
)

	)

93 
	#XFS_BTREE_TRACE_ARGIPR
(
c
, 
i
, 
p
, 
r
)

	)

94 
	#XFS_BTREE_TRACE_ARGIK
(
c
, 
i
, 
k
)

	)

95 
	#XFS_BTREE_TRACE_ARGR
(
c
, 
r
)

	)

96 
	#XFS_BTREE_TRACE_CURSOR
(
c
, 
t
)

	)

	@include/xfs_inode.h

19 #i‚de‡
__XFS_INODE_H__


20 
	#__XFS_INODE_H__


	)

23 
	~"xfs_öode_buf.h
"

24 
	~"xfs_öode_f‹k.h
"

26 
	gxfs_å™s
;

27 
	gxfs_mou¡
;

28 
	gxfs_öode_log_ôem
;

29 
	gxfs_dú_›s
;

36 
	söode
 {

37 
mode_t
 
	mi_mode
;

38 
uöt32_t
 
	mi_∆ök
;

39 
uöt32_t
 
	mi_gíî©i⁄
;

40 
uöt64_t
 
	mi_vîsi⁄
;

41 
time•ec
 
	mi_©ime
;

42 
time•ec
 
	mi_mtime
;

43 
time•ec
 
	mi_˘ime
;

46 
	sxfs_öode
 {

47 
ˇche_node
 
	mi_node
;

48 
xfs_mou¡
 *
	mi_mou¡
;

49 
xfs_öo_t
 
	mi_öo
;

50 
xfs_im≠
 
	mi_im≠
;

51 
xfs_bu·¨g
 
	mi_dev
;

52 
xfs_if‹k
 *
	mi_aÂ
;

53 
xfs_if‹k
 *
	mi_cowÂ
;

54 
xfs_if‹k
 
	mi_df
;

55 
xfs_å™s
 *
	mi_å™•
;

56 
xfs_öode_log_ôem
 *
	mi_ôemp
;

57 
	mi_dñayed_blks
;

58 
xfs_icdöode
 
	mi_d
;

60 
xfs_exäum_t
 
	mi_˙exã¡s
;

61 
	mi_cf‹m©
;

63 
xfs_fsize_t
 
	mi_size
;

64 c⁄° 
xfs_dú_›s
 *
	md_›s
;

65 
öode
 
	mi_vnode
;

66 } 
	txfs_öode_t
;

68 
ölöe
 
öode
 *
	$VFS_I
(
xfs_öode
 *
ù
)

70  &
ù
->
i_vnode
;

71 
	}
}

76 
ölöe
 
boﬁ
 
	$XFS_ISREG
(
xfs_öode
 *
ù
)

78  
	`S_ISREG
(
	`VFS_I
(
ù
)->
i_mode
);

79 
	}
}

81 
ölöe
 
boﬁ
 
	$XFS_ISDIR
(
xfs_öode
 *
ù
)

83  
	`S_ISDIR
(
	`VFS_I
(
ù
)->
i_mode
);

84 
	}
}

91 
ölöe
 
xfs_fsize_t
 
	$XFS_ISIZE
(
xfs_öode
 *
ù
)

93 i‡(
	`XFS_ISREG
(
ù
))

94  
ù
->
i_size
;

95  
ù
->
i_d
.
di_size
;

96 
	}
}

97 
	#XFS_IS_REALTIME_INODE
(
ù
Ë((ù)->
i_d
.
di_Êags
 & 
XFS_DIFLAG_REALTIME
)

	)

100 
ölöe
 
	$£t_∆ök
(
öode
 *öode, 
uöt32_t
 
∆ök
)

102 
öode
->
i_∆ök
 = 
∆ök
;

103 
	}
}

104 
ölöe
 
	$öc_∆ök
(
öode
 *inode)

106 
öode
->
i_∆ök
++;

107 
	}
}

117 
ölöe
 
¥id_t


118 
	$xfs_gë_¥ojid
(
xfs_icdöode
 *
id
)

120  (
¥id_t
)
id
->
di_¥ojid_hi
 << 16 | id->
di_¥ojid_lo
;

121 
	}
}

123 
ölöe
 

124 
	$xfs_£t_¥ojid
(
xfs_icdöode
 *
id
, 
¥id_t
 
¥ojid
)

126 
id
->
di_¥ojid_hi
 = (
__uöt16_t
Ë(
¥ojid
 >> 16);

127 
id
->
di_¥ojid_lo
 = (
__uöt16_t
Ë(
¥ojid
 & 0xffff);

128 
	}
}

130 
ölöe
 
boﬁ
 
	$xfs_is_ªÊök_öode
(
xfs_öode
 *
ù
)

132  
ù
->
i_d
.
di_Êags2
 & 
XFS_DIFLAG2_REFLINK
;

133 
	}
}

135 
	s¸ed
 {

136 
uid_t
 
	m¸_uid
;

137 
gid_t
 
	m¸_gid
;

138 } 
	t¸ed_t
;

140 
libxfs_öode_Æloc
 (
xfs_å™s
 **, 
xfs_öode
 *,

141 
mode_t
, 
∆ök_t
, 
xfs_dev_t
, 
¸ed
 *,

142 
fsx©å
 *, 
xfs_öode
 **);

143 
libxfs_å™s_öode_Æloc_buf
 (
xfs_å™s
 *,

144 
xfs_buf
 *);

146 
libxfs_å™s_ichgtime
(
xfs_å™s
 *,

147 
xfs_öode
 *, );

148 
libxfs_iÊush_öt
 (
xfs_öode
 *, 
xfs_buf
 *);

151 
libxfs_igë
(
xfs_mou¡
 *, 
xfs_å™s
 *, 
xfs_öo_t
,

152 
uöt
, 
xfs_öode
 **);

153 
libxfs_ùut
(
xfs_öode
 *);

155 
	#IRELE
(
ù
Ë
	`libxfs_ùut
(ù)

	)

	@include/xfs_log_recover.h

18 #i‚def 
__XFS_LOG_RECOVER_H__


19 
	#__XFS_LOG_RECOVER_H__


	)

25 
	#XLOG_RHASH_BITS
 4

	)

26 
	#XLOG_RHASH_SIZE
 16

	)

27 
	#XLOG_RHASH_SHIFT
 2

	)

28 
	#XLOG_RHASH
(
tid
) \

29 ((((
__uöt32_t
)
tid
)>>
XLOG_RHASH_SHIFT
Ë& (
XLOG_RHASH_SIZE
-1))

	)

31 
	#XLOG_MAX_REGIONS_IN_ITEM
 (
XFS_MAX_BLOCKSIZE
 / 
XFS_BLF_CHUNK
 / 2 + 1)

	)

37 
	sxlog_ªcovî_ôem
 {

38 
li°_hód
 
	mri_li°
;

39 
	mri_ty≥
;

40 
	mri_˙t
;

41 
	mri_tŸÆ
;

42 
xfs_log_iovec_t
 *
	mri_buf
;

43 } 
	txlog_ªcovî_ôem_t
;

45 
	sxlog_ªcovî
 {

46 
hli°_node
 
	mr_li°
;

47 
xlog_tid_t
 
	mr_log_tid
;

48 
xfs_å™s_hódî_t
 
	mr_thódî
;

49 
	mr_°©e
;

50 
xfs_l¢_t
 
	mr_l¢
;

51 
li°_hód
 
	mr_ôemq
;

52 } 
	txlog_ªcovî_t
;

54 
	#ITEM_TYPE
(
i
Ë(*(*)(i)->
ri_buf
[0].
i_addr
)

	)

60 
	#XLOG_BC_TABLE_SIZE
 64

	)

62 
	#XLOG_RECOVER_PASS1
 1

	)

63 
	#XLOG_RECOVER_PASS2
 2

	)

	@include/xfs_metadump.h

19 #i‚de‡
_XFS_METADUMP_H_


20 
	#_XFS_METADUMP_H_


	)

22 
	#XFS_MD_MAGIC
 0x5846534d

	)

24 
	sxfs_mëablock
 {

25 
__be32
 
	mmb_magic
;

26 
__be16
 
	mmb_cou¡
;

27 
__uöt8_t
 
	mmb_blocklog
;

28 
__uöt8_t
 
	mmb_ª£rved
;

30 } 
	txfs_mëablock_t
;

	@include/xfs_mount.h

19 #i‚de‡
__XFS_MOUNT_H__


20 
	#__XFS_MOUNT_H__


	)

22 
	gxfs_öode
;

23 
	gxfs_bu·¨g
;

24 
	gxfs_dú_›s
;

25 
	gxfs_da_geomëry
;

31 
	sxfs_mou¡
 {

32 
xfs_sb_t
 
	mm_sb
;

33 
	#m_icou¡
 
m_sb
.
sb_icou¡


	)

34 
	#m_i‰ì
 
m_sb
.
sb_i‰ì


	)

35 
	#m_fdblocks
 
m_sb
.
sb_fdblocks


	)

36 *
	mm_f¢ame
;

37 
	mm_bsize
;

38 
xfs_agnumbî_t
 
	mm_ag‰Ÿ‹
;

39 
xfs_agnumbî_t
 
	mm_agúŸ‹
;

40 
xfs_agnumbî_t
 
	mm_maxagi
;

41 
uöt
 
	mm_rsumÀvñs
;

42 
uöt
 
	mm_rsumsize
;

43 
xfs_öode
 *
	mm_rbmù
;

44 
xfs_öode
 *
	mm_rsumù
;

45 
xfs_bu·¨g
 *
	mm_ddev_èrgp
;

46 
xfs_bu·¨g
 *
	mm_logdev_èrgp
;

47 
xfs_bu·¨g
 *
	mm_πdev_èrgp
;

48 
	#m_dev
 
m_ddev_èrgp


	)

49 
	#m_logdev
 
m_logdev_èrgp


	)

50 
	#m_πdev
 
m_πdev_èrgp


	)

51 
__uöt8_t
 
	mm_dúcook_ñog
;

52 
__uöt8_t
 
	mm_blkbô_log
;

53 
__uöt8_t
 
	mm_blkbb_log
;

54 
__uöt8_t
 
	mm_£˘bb_log
;

55 
__uöt8_t
 
	mm_agno_log
;

56 
__uöt8_t
 
	mm_agöo_log
;

57 
uöt
 
	mm_öode_˛u°î_size
;

58 
uöt
 
	mm_blockmask
;

59 
uöt
 
	mm_blockwsize
;

60 
uöt
 
	mm_blockwmask
;

61 
uöt
 
	mm_Æloc_mxr
[2];

62 
uöt
 
	mm_Æloc_mƒ
[2];

63 
uöt
 
	mm_bm≠_dmxr
[2];

64 
uöt
 
	mm_bm≠_dmƒ
[2];

65 
uöt
 
	mm_öobt_mxr
[2];

66 
uöt
 
	mm_öobt_mƒ
[2];

67 
uöt
 
	mm_rm≠_mxr
[2];

68 
uöt
 
	mm_rm≠_mƒ
[2];

69 
uöt
 
	mm_ªfc_mxr
[2];

70 
uöt
 
	mm_ªfc_mƒ
[2];

71 
uöt
 
	mm_ag_maxÀvñs
;

72 
uöt
 
	mm_bm_maxÀvñs
[2];

73 
uöt
 
	mm_ö_maxÀvñs
;

74 
uöt
 
	mm_rm≠_maxÀvñs
;

75 
uöt
 
	mm_ªfc_maxÀvñs
;

76 
xfs_exéí_t
 
	mm_ag_¥óŒoc_blocks
;

77 
uöt
 
	mm_Æloc_£t_aside
;

78 
uöt
 
	mm_ag_max_ußbÀ
;

79 
ødix_åì_roŸ
 
	mm_≥øg_åì
;

80 
uöt
 
	mm_Êags
;

81 
boﬁ
 
	mm_öŸbt_n‹es
;

82 
uöt
 
	mm_qÊags
;

83 
uöt
 
	mm_©åoff£t
;

84 
	mm_üŒoc_öos
;

85 
	mm_üŒoc_blks
;

86 
	mm_üŒoc_mö_blks
;

88 
	mm_lôöo
;

89 
	mm_öﬂlign_mask
;

90 
xfs_å™s_ªsv
 
	mm_ªsv
;

91 
__uöt64_t
 
	mm_maxicou¡
;

92 
	mm_dÆign
;

93 
	mm_swidth
;

94 
	mm_söﬂlign
;

95 c⁄° 
xfs_«me›s
 *
	mm_dú«me›s
;

97 
xfs_da_geomëry
 *
	mm_dú_geo
;

98 
xfs_da_geomëry
 *
	mm_©å_geo
;

99 c⁄° 
xfs_dú_›s
 *
	mm_dú_öode_›s
;

100 c⁄° 
xfs_dú_›s
 *
	mm_n⁄dú_öode_›s
;

101 
	#M_DIROPS
(
mp
Ë((mp)->
m_dú_öode_›s
)

	)

108 
	mqi_dq≥rchunk
;

109 } *
	mm_quŸaöfo
;

116 
xlog
 *
	mm_log
;

117 } 
	txfs_mou¡_t
;

120 
	exfs_ag_ªsv_ty≥
 {

121 
	mXFS_AG_RESV_NONE
 = 0,

122 
	mXFS_AG_RESV_METADATA
,

123 
	mXFS_AG_RESV_AGFL
,

126 
	sxfs_ag_ªsv
 {

128 
xfs_exéí_t
 
	m¨_‹ig_ª£rved
;

130 
xfs_exéí_t
 
	m¨_ª£rved
;

132 
xfs_exéí_t
 
	m¨_asked
;

139 
	sxfs_≥øg
 {

140 
xfs_mou¡
 *
	m∑g_mou¡
;

141 
xfs_agnumbî_t
 
	m∑g_agno
;

142 
©omic_t
 
	m∑g_ªf
;

143 
	m∑gf_öô
;

144 
	m∑gi_öô
;

145 
	m∑gf_mëad©a
;

146 
	m∑gi_öodeok
;

147 
__uöt8_t
 
	m∑gf_Àvñs
[
XFS_BTNUM_AGF
];

149 
__uöt32_t
 
	m∑gf_Êcou¡
;

150 
xfs_exéí_t
 
	m∑gf_‰ìblks
;

151 
xfs_exéí_t
 
	m∑gf_l⁄ge°
;

152 
__uöt32_t
 
	m∑gf_båìblks
;

153 
xfs_agöo_t
 
	m∑gi_‰ìcou¡
;

154 
xfs_agöo_t
 
	m∑gi_cou¡
;

161 
xfs_agöo_t
 
	m∑gl_∑göo
;

162 
xfs_agöo_t
 
	m∑gl_À·ªc
;

163 
xfs_agöo_t
 
	m∑gl_righåec
;

164 
	m∑gb_cou¡
;

167 
xfs_ag_ªsv
 
	m∑g_mëa_ªsv
;

169 
xfs_ag_ªsv
 
	m∑g_agÊ_ªsv
;

172 
__uöt8_t
 
	m∑gf_ªfcou¡_Àvñ
;

173 } 
	txfs_≥øg_t
;

175 
ölöe
 
xfs_ag_ªsv
 *

176 
	$xfs_≥øg_ªsv
(

177 
xfs_≥øg
 *
∑g
,

178 
xfs_ag_ªsv_ty≥
 
ty≥
)

180 
ty≥
) {

181 
XFS_AG_RESV_METADATA
:

182  &
∑g
->
∑g_mëa_ªsv
;

183 
XFS_AG_RESV_AGFL
:

184  &
∑g
->
∑g_agÊ_ªsv
;

186  
NULL
;

188 
	}
}

190 
	#LIBXFS_MOUNT_DEBUGGER
 0x0001

	)

191 
	#LIBXFS_MOUNT_32BITINODES
 0x0002

	)

192 
	#LIBXFS_MOUNT_32BITINOOPT
 0x0004

	)

193 
	#LIBXFS_MOUNT_COMPAT_ATTR
 0x0008

	)

194 
	#LIBXFS_MOUNT_ATTR2
 0x0010

	)

195 
	#LIBXFS_MOUNT_WANT_CORRUPTED
 0x0020

	)

197 
	#LIBXFS_BHASHSIZE
(
sbp
Ë(1<<10)

	)

199 
xfs_mou¡_t
 *
libxfs_mou¡
 (xfs_mou¡_à*, 
xfs_sb_t
 *,

200 
dev_t
, dev_t, dev_t, );

201 
libxfs_umou¡
 (
xfs_mou¡_t
 *);

202 
libxfs_πmou¡_de°roy
 (
xfs_mou¡_t
 *);

	@include/xfs_multidisk.h

18 #i‚de‡
__XFS_MULTIDISK_H__


19 
	#__XFS_MULTIDISK_H__


	)

21 
	#XFS_DFL_SB_VERSION_BITS
 \

22 (
XFS_SB_VERSION_NLINKBIT
 | \

23 
XFS_SB_VERSION_EXTFLGBIT
 | \

24 
XFS_SB_VERSION_DIRV2BIT
)

	)

26 
	#XFS_DFL_BLOCKSIZE_LOG
 12

	)

27 
	#XFS_DINODE_DFL_LOG
 8

	)

28 
	#XFS_DINODE_DFL_CRC_LOG
 9

	)

29 
	#XFS_MIN_DATA_BLOCKS
 100

	)

30 
	#XFS_MIN_INODE_PERBLOCK
 2

	)

31 
	#XFS_DFL_IMAXIMUM_PCT
 25

	)

32 
	#XFS_IFLAG_ALIGN
 
åue


	)

33 
	#XFS_MIN_REC_DIRSIZE
 12

	)

34 
	#XFS_DFL_DIR_VERSION
 2

	)

35 
	#XFS_DFL_LOG_SIZE
 1000

	)

36 
	#XFS_DFL_LOG_FACTOR
 5

	)

38 
	#XFS_MAX_INODE_SIG_BITS
 32

	)

43 
	#XFS_AG_BYTES
(
bblog
Ë(()
BBSIZE
 << (bblog))

	)

44 
	#XFS_AG_MIN_BYTES
 ((
	`XFS_AG_BYTES
(15))Ë

	)

45 
	#XFS_AG_MAX_BYTES
 ((
	`XFS_AG_BYTES
(31))Ë

	)

46 
	#XFS_AG_MIN_BLOCKS
(
blog
Ë(
XFS_AG_MIN_BYTES
 >> (blog))

	)

47 
	#XFS_AG_MAX_BLOCKS
(
blog
Ë((
XFS_AG_MAX_BYTES
 - 1Ë>> (blog))

	)

49 
	#XFS_MAX_AGNUMBER
 ((
xfs_agnumbî_t
)(
NULLAGNUMBER
 - 1))

	)

56 
	#XFS_MULTIDISK_AGLOG
 5

	)

57 
	#XFS_NOMULTIDISK_AGLOG
 2

	)

58 
	#XFS_MULTIDISK_AGCOUNT
 (1 << 
XFS_MULTIDISK_AGLOG
)

	)

60 
cväum
(
blksize
, 
£˘size
,

61 c⁄° *
°r
);

64 *
£tup_¥Ÿo
 (*
‚ame
);

65 
∑r£_¥Ÿo
 (
xfs_mou¡_t
 *
mp
, 
fsx©å
 *
fsx
, **
µ
);

66 
ªs_Áûed
 (
îr
);

69 
max_å™s_ªs
(
agsize
, 
¸cs_íabÀd
, 
dúvîsi⁄
,

70 
£˘‹log
, 
blocklog
, 
öodñog
, 
dúblocklog
,

71 
logvîsi⁄
, 
log_sunô
, 
föobt
, 
rm≠bt
,

72 
ªÊök
);

	@include/xfs_trace.h

18 #i‚de‡
__TRACE_H__


19 
	#__TRACE_H__


	)

21 
	#åa˚_xfs_Æloc_exa˘_d⁄e
(
a
Ë((Ë0)

	)

22 
	#åa˚_xfs_Æloc_exa˘_nŸfound
(
a
Ë((Ë0)

	)

23 
	#åa˚_xfs_Æloc_exa˘_îr‹
(
a
Ë((Ë0)

	)

24 
	#åa˚_xfs_Æloc_√¨_nomöÀ·
(
a
Ë((Ë0)

	)

25 
	#åa˚_xfs_Æloc_√¨_fú°
(
a
Ë((Ë0)

	)

26 
	#åa˚_xfs_Æloc_√¨_gª©î
(
a
Ë((Ë0)

	)

27 
	#åa˚_xfs_Æloc_√¨_Às£r
(
a
Ë((Ë0)

	)

28 
	#åa˚_xfs_Æloc_√¨_îr‹
(
a
Ë((Ë0)

	)

29 
	#åa˚_xfs_Æloc_√¨_n€¡ry
(
a
Ë((Ë0)

	)

30 
	#åa˚_xfs_Æloc_√¨_busy
(
a
Ë((Ë0)

	)

31 
	#åa˚_xfs_Æloc_size_√ôhî
(
a
Ë((Ë0)

	)

32 
	#åa˚_xfs_Æloc_size_n€¡ry
(
a
Ë((Ë0)

	)

33 
	#åa˚_xfs_Æloc_size_nomöÀ·
(
a
Ë((Ë0)

	)

34 
	#åa˚_xfs_Æloc_size_d⁄e
(
a
Ë((Ë0)

	)

35 
	#åa˚_xfs_Æloc_size_îr‹
(
a
Ë((Ë0)

	)

36 
	#åa˚_xfs_Æloc_size_busy
(
a
Ë((Ë0)

	)

37 
	#åa˚_xfs_Æloc_smÆl_‰ìli°
(
a
Ë((Ë0)

	)

38 
	#åa˚_xfs_Æloc_smÆl_nŸíough
(
a
Ë((Ë0)

	)

39 
	#åa˚_xfs_Æloc_smÆl_d⁄e
(
a
Ë((Ë0)

	)

40 
	#åa˚_xfs_Æloc_smÆl_îr‹
(
a
Ë((Ë0)

	)

41 
	#åa˚_xfs_Æloc_vexã¡_bad¨gs
(
a
Ë((Ë0)

	)

42 
	#åa˚_xfs_Æloc_vexã¡_nofix
(
a
Ë((Ë0)

	)

43 
	#åa˚_xfs_Æloc_vexã¡_nﬂgbp
(
a
Ë((Ë0)

	)

44 
	#åa˚_xfs_Æloc_vexã¡_lo›Áûed
(
a
Ë((Ë0)

	)

45 
	#åa˚_xfs_Æloc_vexã¡_ÆlÁûed
(
a
Ë((Ë0)

	)

47 
	#åa˚_xfs_log_ªcovî_ôem_ª‹dî_hód
(
a
,
b
,
c
,
d
Ë((Ë0)

	)

48 
	#åa˚_xfs_log_ªcovî_ôem_ª‹dî_èû
(
a
,
b
,
c
,
d
Ë((Ë0)

	)

49 
	#åa˚_xfs_log_ªcovî_ôem_add_c⁄t
(
a
,
b
,
c
,
d
Ë((Ë0)

	)

50 
	#åa˚_xfs_log_ªcovî_ôem_add
(
a
,
b
,
c
,
d
Ë((Ë0)

	)

52 
	#åa˚_xfs_da_båì_c‹ru±
(
a
,
b
Ë((Ë0)

	)

53 
	#åa˚_xfs_båì_c‹ru±
(
a
,
b
Ë((Ë0)

	)

54 
	#åa˚_xfs_båì_updkeys
(
a
,
b
,
c
Ë((Ë0)

	)

55 
	#åa˚_xfs_båì_ovîœµed_quîy_ønge
(
a
,
b
,
c
Ë((Ë0)

	)

57 
	#åa˚_xfs_‰ì_exã¡
(
a
,
b
,
c
,
d
,
e
,
f
,
g
Ë((Ë0)

	)

58 
	#åa˚_xfs_agf
(
a
,
b
,
c
,
d
Ë((Ë0)

	)

59 
	#åa˚_xfs_ªad_agf
(
a
,
b
Ë((Ë0)

	)

60 
	#åa˚_xfs_Æloc_ªad_agf
(
a
,
b
Ë((Ë0)

	)

61 
	#åa˚_xfs_ªad_agi
(
a
,
b
Ë((Ë0)

	)

62 
	#åa˚_xfs_üŒoc_ªad_agi
(
a
,
b
Ë((Ë0)

	)

63 
	#åa˚_xfs_úec_mîge_¥e
(
a
,
b
,
c
,
d
,
e
,
f
Ë((Ë0)

	)

64 
	#åa˚_xfs_úec_mîge_po°
(
a
,
b
,
c
,
d
Ë((Ë0)

	)

66 
	#åa˚_xfs_õxt_ö£π
(
a
,
b
,
c
,
d
,
e
Ë((Ë0)

	)

67 
	#åa˚_xfs_õxt_ªmove
(
a
,
b
,
c
,
d
Ë((Ë0)

	)

69 
	#åa˚_xfs_dú2_grow_öode
(
a
,
b
Ë((Ë0)

	)

70 
	#åa˚_xfs_dú2_shrök_öode
(
a
,
b
Ë((Ë0)

	)

72 
	#åa˚_xfs_dú2_Àaf_to_node
(
a
Ë((Ë0)

	)

73 
	#åa˚_xfs_dú2_Àaf_to_block
(
a
Ë((Ë0)

	)

74 
	#åa˚_xfs_dú2_Àaf_add«me
(
a
Ë((Ë0)

	)

75 
	#åa˚_xfs_dú2_Àaf_lookup
(
a
Ë((Ë0)

	)

76 
	#åa˚_xfs_dú2_Àaf_ªmovíame
(
a
Ë((Ë0)

	)

77 
	#åa˚_xfs_dú2_Àaf_ª∂a˚
(
a
Ë((Ë0)

	)

79 
	#åa˚_xfs_dú2_block_add«me
(
a
Ë((Ë0)

	)

80 
	#åa˚_xfs_dú2_block_to_Àaf
(
a
Ë((Ë0)

	)

81 
	#åa˚_xfs_dú2_block_to_sf
(
a
Ë((Ë0)

	)

82 
	#åa˚_xfs_dú2_block_lookup
(
a
Ë((Ë0)

	)

83 
	#åa˚_xfs_dú2_block_ªmovíame
(
a
Ë((Ë0)

	)

84 
	#åa˚_xfs_dú2_block_ª∂a˚
(
a
Ë((Ë0)

	)

86 
	#åa˚_xfs_dú2_Àa‚_add
(
a
,
b
Ë((Ë0)

	)

87 
	#åa˚_xfs_dú2_Àa‚_ªmove
(
a
,
b
Ë((Ë0)

	)

88 
	#åa˚_xfs_dú2_Àa‚_movì¡s
(
a
,
b
,
c
,
d
Ë((Ë0)

	)

90 
	#åa˚_xfs_dú2_node_to_Àaf
(
a
Ë((Ë0)

	)

91 
	#åa˚_xfs_dú2_node_add«me
(
a
Ë((Ë0)

	)

92 
	#åa˚_xfs_dú2_node_lookup
(
a
Ë((Ë0)

	)

93 
	#åa˚_xfs_dú2_node_ªmovíame
(
a
Ë((Ë0)

	)

94 
	#åa˚_xfs_dú2_node_ª∂a˚
(
a
Ë((Ë0)

	)

96 
	#åa˚_xfs_dú2_sf_to_block
(
a
Ë((Ë0)

	)

97 
	#åa˚_xfs_dú2_sf_add«me
(
a
Ë((Ë0)

	)

98 
	#åa˚_xfs_dú2_sf_¸óã
(
a
Ë((Ë0)

	)

99 
	#åa˚_xfs_dú2_sf_lookup
(
a
Ë((Ë0)

	)

100 
	#åa˚_xfs_dú2_sf_ªmovíame
(
a
Ë((Ë0)

	)

101 
	#åa˚_xfs_dú2_sf_ª∂a˚
(
a
Ë((Ë0)

	)

102 
	#åa˚_xfs_dú2_sf_toöo4
(
a
Ë((Ë0)

	)

103 
	#åa˚_xfs_dú2_sf_toöo8
(
a
Ë((Ë0)

	)

105 
	#åa˚_xfs_da_node_¸óã
(
a
Ë((Ë0)

	)

106 
	#åa˚_xfs_da_•lô
(
a
Ë((Ë0)

	)

107 
	#åa˚_xfs_©å_Àaf_•lô_bef‹e
(
a
Ë((Ë0)

	)

108 
	#åa˚_xfs_©å_Àaf_•lô_a·î
(
a
Ë((Ë0)

	)

109 
	#åa˚_xfs_da_roŸ_•lô
(
a
Ë((Ë0)

	)

110 
	#åa˚_xfs_da_node_•lô
(
a
Ë((Ë0)

	)

111 
	#åa˚_xfs_da_node_ªbÆ™˚
(
a
Ë((Ë0)

	)

112 
	#åa˚_xfs_da_node_add
(
a
Ë((Ë0)

	)

113 
	#åa˚_xfs_da_joö
(
a
Ë((Ë0)

	)

114 
	#åa˚_xfs_da_roŸ_joö
(
a
Ë((Ë0)

	)

115 
	#åa˚_xfs_da_node_toosmÆl
(
a
Ë((Ë0)

	)

116 
	#åa˚_xfs_da_fixhash∑th
(
a
Ë((Ë0)

	)

117 
	#åa˚_xfs_da_node_ªmove
(
a
Ë((Ë0)

	)

118 
	#åa˚_xfs_da_node_unbÆ™˚
(
a
Ë((Ë0)

	)

119 
	#åa˚_xfs_da_lök_bef‹e
(
a
Ë((Ë0)

	)

120 
	#åa˚_xfs_da_lök_a·î
(
a
Ë((Ë0)

	)

121 
	#åa˚_xfs_da_u∆ök_back
(
a
Ë((Ë0)

	)

122 
	#åa˚_xfs_da_u∆ök_f‹w¨d
(
a
Ë((Ë0)

	)

123 
	#åa˚_xfs_da_∑th_shi·
(
a
Ë((Ë0)

	)

124 
	#åa˚_xfs_da_grow_öode
(
a
Ë((Ë0)

	)

125 
	#åa˚_xfs_da_sw≠_œ°block
(
a
Ë((Ë0)

	)

126 
	#åa˚_xfs_da_shrök_öode
(
a
Ë((Ë0)

	)

128 
	#åa˚_xfs_©å_sf_¸óã
(
a
Ë((Ë0)

	)

129 
	#åa˚_xfs_©å_sf_add
(
a
Ë((Ë0)

	)

130 
	#åa˚_xfs_©å_sf_ªmove
(
a
Ë((Ë0)

	)

131 
	#åa˚_xfs_©å_sf_lookup
(
a
Ë((Ë0)

	)

132 
	#åa˚_xfs_©å_sf_to_Àaf
(
a
Ë((Ë0)

	)

133 
	#åa˚_xfs_©å_Àaf_to_sf
(
a
Ë((Ë0)

	)

134 
	#åa˚_xfs_©å_Àaf_to_node
(
a
Ë((Ë0)

	)

135 
	#åa˚_xfs_©å_Àaf_¸óã
(
a
Ë((Ë0)

	)

136 
	#åa˚_xfs_©å_Àaf_•lô
(
a
Ë((Ë0)

	)

137 
	#åa˚_xfs_©å_Àaf_add_ﬁd
(
a
Ë((Ë0)

	)

138 
	#åa˚_xfs_©å_Àaf_add_√w
(
a
Ë((Ë0)

	)

139 
	#åa˚_xfs_©å_Àaf_add
(
a
Ë((Ë0)

	)

140 
	#åa˚_xfs_©å_Àaf_add_w‹k
(
a
Ë((Ë0)

	)

141 
	#åa˚_xfs_©å_Àaf_com∑˘
(
a
Ë((Ë0)

	)

142 
	#åa˚_xfs_©å_Àaf_ªbÆ™˚
(
a
Ë((Ë0)

	)

143 
	#åa˚_xfs_©å_Àaf_toosmÆl
(
a
Ë((Ë0)

	)

144 
	#åa˚_xfs_©å_Àaf_ªmove
(
a
Ë((Ë0)

	)

145 
	#åa˚_xfs_©å_Àaf_unbÆ™˚
(
a
Ë((Ë0)

	)

146 
	#åa˚_xfs_©å_Àaf_lookup
(
a
Ë((Ë0)

	)

147 
	#åa˚_xfs_©å_Àaf_˛órÊag
(
a
Ë((Ë0)

	)

148 
	#åa˚_xfs_©å_Àaf_£tÊag
(
a
Ë((Ë0)

	)

149 
	#åa˚_xfs_©å_Àaf_ÊùÊags
(
a
Ë((Ë0)

	)

151 
	#åa˚_xfs_©å_sf_add«me
(
a
Ë((Ë0)

	)

152 
	#åa˚_xfs_©å_Àaf_add«me
(
a
Ë((Ë0)

	)

153 
	#åa˚_xfs_©å_Àaf_ª∂a˚
(
a
Ë((Ë0)

	)

154 
	#åa˚_xfs_©å_Àaf_ªmovíame
(
a
Ë((Ë0)

	)

155 
	#åa˚_xfs_©å_Àaf_gë
(
a
Ë((Ë0)

	)

156 
	#åa˚_xfs_©å_node_add«me
(
a
Ë((Ë0)

	)

157 
	#åa˚_xfs_©å_node_ª∂a˚
(
a
Ë((Ë0)

	)

158 
	#åa˚_xfs_©å_node_ªmovíame
(
a
Ë((Ë0)

	)

159 
	#åa˚_xfs_©å_fûl°©e
(
a
Ë((Ë0)

	)

160 
	#åa˚_xfs_©å_ªfûl°©e
(
a
Ë((Ë0)

	)

161 
	#åa˚_xfs_©å_node_gë
(
a
Ë((Ë0)

	)

162 
	#åa˚_xfs_©å_rmtvÆ_gë
(
a
Ë((Ë0)

	)

163 
	#åa˚_xfs_©å_rmtvÆ_£t
(
a
Ë((Ë0)

	)

164 
	#åa˚_xfs_©å_rmtvÆ_ªmove
(
a
Ë((Ë0)

	)

166 
	#åa˚_xfs_bm≠_¥e_upd©e
(
a
,
b
,
c
,
d
Ë((Ë0)

	)

167 
	#åa˚_xfs_bm≠_po°_upd©e
(
a
,
b
,
c
,
d
Ë((Ë0)

	)

168 
	#åa˚_xfs_exéi°
(
a
,
b
,
c
,
d
Ë((Ë0)

	)

169 
	#åa˚_xfs_bunm≠
(
a
,
b
,
c
,
d
,
e
Ë((Ë0)

	)

172 
	#åa˚_xfs_≥øg_gë
(
a
,
b
,
c
,
d
Ë((cË(c))

	)

173 
	#åa˚_xfs_≥øg_gë_èg
(
a
,
b
,
c
,
d
Ë((cË(c))

	)

174 
	#åa˚_xfs_≥øg_put
(
a
,
b
,
c
,
d
Ë((cË(c))

	)

176 
	#åa˚_xfs_de„r_öô
(
a
,
b
Ë((Ë0)

	)

177 
	#åa˚_xfs_de„r_ˇn˚l
(
a
,
b
Ë((Ë0)

	)

178 
	#åa˚_xfs_de„r_öèke_w‹k
(
a
,
b
Ë((Ë0)

	)

179 
	#åa˚_xfs_de„r_öèke_ˇn˚l
(
a
,
b
Ë((Ë0)

	)

180 
	#åa˚_xfs_de„r_≥ndög_commô
(
a
,
b
Ë((Ë0)

	)

181 
	#åa˚_xfs_de„r_≥ndög_ab‹t
(
a
,
b
Ë((Ë0)

	)

182 
	#åa˚_xfs_de„r_≥ndög_ˇn˚l
(
a
,
b
Ë((Ë0)

	)

183 
	#åa˚_xfs_de„r_≥ndög_föish
(
a
,
b
Ë((Ë0)

	)

184 
	#åa˚_xfs_de„r_å™s_ab‹t
(
a
,
b
Ë((Ë0)

	)

185 
	#åa˚_xfs_de„r_å™s_rﬁl
(
a
,
b
Ë((Ë0)

	)

186 
	#åa˚_xfs_de„r_å™s_rﬁl_îr‹
(
a
,
b
,
c
Ë((Ë0)

	)

187 
	#åa˚_xfs_de„r_föish
(
a
,
b
Ë((Ë0)

	)

188 
	#åa˚_xfs_de„r_föish_îr‹
(
a
,
b
,
c
Ë((Ë0)

	)

189 
	#åa˚_xfs_de„r_föish_d⁄e
(
a
,
b
Ë((Ë0)

	)

191 
	#åa˚_xfs_bm≠_‰ì_de„r
(...Ë((Ë0)

	)

192 
	#åa˚_xfs_bm≠_‰ì_de„ºed
(...Ë((Ë0)

	)

194 
	#åa˚_xfs_rm≠_m≠
(...Ë((Ë0)

	)

195 
	#åa˚_xfs_rm≠_m≠_îr‹
(...Ë((Ë0)

	)

196 
	#åa˚_xfs_rm≠_m≠_d⁄e
(...Ë((Ë0)

	)

197 
	#åa˚_xfs_rm≠_unm≠
(...Ë((Ë0)

	)

198 
	#åa˚_xfs_rm≠_unm≠_îr‹
(...Ë((Ë0)

	)

199 
	#åa˚_xfs_rm≠_unm≠_d⁄e
(...Ë((Ë0)

	)

200 
	#åa˚_xfs_rm≠_ö£π
(...Ë((Ë0)

	)

201 
	#åa˚_xfs_rm≠_ö£π_îr‹
(...Ë((Ë0)

	)

202 
	#åa˚_xfs_rm≠_dñëe
(...Ë((Ë0)

	)

203 
	#åa˚_xfs_rm≠_c⁄vît
(...Ë((Ë0)

	)

204 
	#åa˚_xfs_rm≠_c⁄vît_°©e
(...Ë((Ë0)

	)

205 
	#åa˚_xfs_rm≠_c⁄vît_d⁄e
(...Ë((Ë0)

	)

206 
	#åa˚_xfs_rm≠_c⁄vît_îr‹
(...Ë((Ë0)

	)

207 
	#åa˚_xfs_rm≠_upd©e
(...Ë((Ë0)

	)

208 
	#åa˚_xfs_rm≠_upd©e_îr‹
(...Ë((Ë0)

	)

209 
	#åa˚_xfs_rm≠_de„r
(...Ë((Ë0)

	)

210 
	#åa˚_xfs_rm≠_de„ºed
(...Ë((Ë0)

	)

211 
	#åa˚_xfs_rm≠_föd_right_√ighb‹_ªsu…
(...Ë((Ë0)

	)

212 
	#åa˚_xfs_rm≠_föd_À·_√ighb‹_ªsu…
(...Ë((Ë0)

	)

213 
	#åa˚_xfs_rm≠_lookup_À_ønge_ªsu…
(...Ë((Ë0)

	)

215 
	#åa˚_xfs_rm≠bt_‰ì_block
(...Ë((Ë0)

	)

216 
	#åa˚_xfs_rm≠bt_Æloc_block
(...Ë((Ë0)

	)

218 
	#åa˚_xfs_ag_ªsv_¸ôiˇl
(...Ë((Ë0)

	)

219 
	#åa˚_xfs_ag_ªsv_√eded
(...Ë((Ë0)

	)

220 
	#åa˚_xfs_ag_ªsv_‰ì
(...Ë((Ë0)

	)

221 
	#åa˚_xfs_ag_ªsv_‰ì_îr‹
(...Ë((Ë0)

	)

222 
	#åa˚_xfs_ag_ªsv_öô
(...Ë((Ë0)

	)

223 
	#åa˚_xfs_ag_ªsv_öô_îr‹
(...Ë((Ë0)

	)

224 
	#åa˚_xfs_ag_ªsv_Æloc_exã¡
(...Ë((Ë0)

	)

225 
	#åa˚_xfs_ag_ªsv_‰ì_exã¡
(...Ë((Ë0)

	)

227 
	#åa˚_xfs_ªfcou¡_lookup
(...Ë((Ë0)

	)

228 
	#åa˚_xfs_ªfcou¡_gë
(...Ë((Ë0)

	)

229 
	#åa˚_xfs_ªfcou¡_upd©e
(...Ë((Ë0)

	)

230 
	#åa˚_xfs_ªfcou¡_upd©e_îr‹
(...Ë((Ë0)

	)

231 
	#åa˚_xfs_ªfcou¡_ö£π
(...Ë((Ë0)

	)

232 
	#åa˚_xfs_ªfcou¡_ö£π_îr‹
(...Ë((Ë0)

	)

233 
	#åa˚_xfs_ªfcou¡_dñëe
(...Ë((Ë0)

	)

234 
	#åa˚_xfs_ªfcou¡_dñëe_îr‹
(...Ë((Ë0)

	)

235 
	#åa˚_xfs_ªfcou¡bt_‰ì_block
(...Ë((Ë0)

	)

236 
	#åa˚_xfs_ªfcou¡bt_Æloc_block
(...Ë((Ë0)

	)

237 
	#åa˚_xfs_ªfcou¡_ªc_‹dî_îr‹
(...Ë((Ë0)

	)

239 
	#åa˚_xfs_ªfcou¡_lookup
(...Ë((Ë0)

	)

240 
	#åa˚_xfs_ªfcou¡_gë
(...Ë((Ë0)

	)

241 
	#åa˚_xfs_ªfcou¡_upd©e
(...Ë((Ë0)

	)

242 
	#åa˚_xfs_ªfcou¡_upd©e_îr‹
(...Ë((Ë0)

	)

243 
	#åa˚_xfs_ªfcou¡_ö£π
(...Ë((Ë0)

	)

244 
	#åa˚_xfs_ªfcou¡_ö£π_îr‹
(...Ë((Ë0)

	)

245 
	#åa˚_xfs_ªfcou¡_dñëe
(...Ë((Ë0)

	)

246 
	#åa˚_xfs_ªfcou¡_dñëe_îr‹
(...Ë((Ë0)

	)

247 
	#åa˚_xfs_ªfcou¡bt_‰ì_block
(...Ë((Ë0)

	)

248 
	#åa˚_xfs_ªfcou¡bt_Æloc_block
(...Ë((Ë0)

	)

249 
	#åa˚_xfs_ªfcou¡_ªc_‹dî_îr‹
(...Ë((Ë0)

	)

250 
	#åa˚_xfs_ªfcou¡_•lô_exã¡
(...Ë((Ë0)

	)

251 
	#åa˚_xfs_ªfcou¡_•lô_exã¡_îr‹
(...Ë((Ë0)

	)

252 
	#åa˚_xfs_ªfcou¡_mîge_˚¡î_exã¡s_îr‹
(...Ë((Ë0)

	)

253 
	#åa˚_xfs_ªfcou¡_mîge_À·_exã¡_îr‹
(...Ë((Ë0)

	)

254 
	#åa˚_xfs_ªfcou¡_mîge_right_exã¡_îr‹
(...Ë((Ë0)

	)

255 
	#åa˚_xfs_ªfcou¡_föd_À·_exã¡
(...Ë((Ë0)

	)

256 
	#åa˚_xfs_ªfcou¡_föd_À·_exã¡_îr‹
(...Ë((Ë0)

	)

257 
	#åa˚_xfs_ªfcou¡_föd_right_exã¡
(...Ë((Ë0)

	)

258 
	#åa˚_xfs_ªfcou¡_föd_right_exã¡_îr‹
(...Ë((Ë0)

	)

259 
	#åa˚_xfs_ªfcou¡_mîge_˚¡î_exã¡s
(...Ë((Ë0)

	)

260 
	#åa˚_xfs_ªfcou¡_mîge_À·_exã¡
(...Ë((Ë0)

	)

261 
	#åa˚_xfs_ªfcou¡_mîge_right_exã¡
(...Ë((Ë0)

	)

262 
	#åa˚_xfs_ªfcou¡_modify_exã¡
(...Ë((Ë0)

	)

263 
	#åa˚_xfs_ªfcou¡_modify_exã¡_îr‹
(...Ë((Ë0)

	)

264 
	#åa˚_xfs_ªfcou¡_adju°_îr‹
(...Ë((Ë0)

	)

265 
	#åa˚_xfs_ªfcou¡_ö¸ó£
(...Ë((Ë0)

	)

266 
	#åa˚_xfs_ªfcou¡_de¸ó£
(...Ë((Ë0)

	)

267 
	#åa˚_xfs_ªfcou¡_de„ºed
(...Ë((Ë0)

	)

268 
	#åa˚_xfs_ªfcou¡_de„r
(...Ë((Ë0)

	)

269 
	#åa˚_xfs_ªfcou¡_föish_⁄e_À·ovî
(...Ë((Ë0)

	)

270 
	#åa˚_xfs_ªfcou¡_föd_sh¨ed
(...Ë((Ë0)

	)

271 
	#åa˚_xfs_ªfcou¡_föd_sh¨ed_ªsu…
(...Ë((Ë0)

	)

272 
	#åa˚_xfs_ªfcou¡_föd_sh¨ed_îr‹
(...Ë((Ë0)

	)

274 
	#åa˚_xfs_bm≠_ªm≠_Æloc
(...Ë((Ë0)

	)

275 
	#åa˚_xfs_bm≠_ªm≠_Æloc_îr‹
(...Ë((Ë0)

	)

276 
	#åa˚_xfs_bm≠_de„ºed
(...Ë((Ë0)

	)

277 
	#åa˚_xfs_bm≠_de„r
(...Ë((Ë0)

	)

279 
	#åa˚_xfs_ªfcou¡_adju°_cow_îr‹
(...Ë((Ë0)

	)

280 
	#åa˚_xfs_ªfcou¡_cow_ö¸ó£
(...Ë((Ë0)

	)

281 
	#åa˚_xfs_ªfcou¡_cow_de¸ó£
(...Ë((Ë0)

	)

282 
	#åa˚_xfs_ªfcou¡_ªcovî_exã¡
(...Ë((Ë0)

	)

284 
	#åa˚_xfs_rm≠_föd_À·_√ighb‹_ˇndid©e
(...Ë((Ë0)

	)

285 
	#åa˚_xfs_rm≠_föd_À·_√ighb‹_quîy
(...Ë((Ë0)

	)

286 
	#åa˚_xfs_rm≠_föd_À·_√ighb‹_ªsu…
(...Ë((Ë0)

	)

287 
	#åa˚_xfs_rm≠_lookup_À_ønge_ˇndid©e
(...Ë((Ë0)

	)

288 
	#åa˚_xfs_rm≠_lookup_À_ønge
(...Ë((Ë0)

	)

289 
	#åa˚_xfs_rm≠_unm≠
(...Ë((Ë0)

	)

290 
	#åa˚_xfs_rm≠_unm≠_d⁄e
(...Ë((Ë0)

	)

291 
	#åa˚_xfs_rm≠_unm≠_îr‹
(...Ë((Ë0)

	)

292 
	#åa˚_xfs_rm≠_m≠
(...Ë((Ë0)

	)

293 
	#åa˚_xfs_rm≠_m≠_d⁄e
(...Ë((Ë0)

	)

294 
	#åa˚_xfs_rm≠_m≠_îr‹
(...Ë((Ë0)

	)

295 
	#åa˚_xfs_rm≠_dñëe_îr‹
(...Ë((Ë0)

	)

298 
	#åa˚_xfs_≥øg_gë
(
a
,
b
,
c
,
d
Ë((cË(c))

	)

299 
	#åa˚_xfs_≥øg_gë_èg
(
a
,
b
,
c
,
d
Ë((cË(c))

	)

300 
	#åa˚_xfs_≥øg_put
(
a
,
b
,
c
,
d
Ë((cË(c))

	)

	@include/xfs_trans.h

19 #i‚de‡
__XFS_TRANS_H__


20 
	#__XFS_TRANS_H__


	)

22 
	gxfs_mou¡
;

23 
	gxfs_bu·¨g
;

24 
	gxfs_buf
;

25 
	gxfs_buf_m≠
;

31 
	sxfs_log_ôem
 {

32 
xfs_log_ôem_desc
 *
	mli_desc
;

33 
xfs_mou¡
 *
	mli_mou¡p
;

34 
uöt
 
	mli_ty≥
;

35 
xfs_l¢_t
 
	mli_l¢
;

36 } 
	txfs_log_ôem_t
;

38 
	sxfs_öode_log_ôem
 {

39 
xfs_log_ôem_t
 
	mûi_ôem
;

40 
xfs_öode
 *
	mûi_öode
;

41 
	mûi_Êags
;

42 
	mûi_fõlds
;

43 
	mûi_œ°_fõlds
;

44 
xfs_öode_log_f‹m©_t
 
	mûi_f‹m©
;

45 } 
	txfs_öode_log_ôem_t
;

47 
	sxfs_buf_log_ôem
 {

48 
xfs_log_ôem_t
 
	mbli_ôem
;

49 
xfs_buf
 *
	mbli_buf
;

50 
	mbli_Êags
;

51 
	mbli_ªcur
;

52 
xfs_buf_log_f‹m©_t
 
	mbli_f‹m©
;

53 } 
	txfs_buf_log_ôem_t
;

55 
	#XFS_BLI_DIRTY
 (1<<0)

	)

56 
	#XFS_BLI_HOLD
 (1<<1)

	)

57 
	#XFS_BLI_STALE
 (1<<2)

	)

58 
	#XFS_BLI_INODE_ALLOC_BUF
 (1<<3)

	)

60 
	sxfs_dq_logôem
 {

61 
xfs_log_ôem_t
 
	mqli_ôem
;

62 
xfs_dquŸ
 *
	mqli_dquŸ
;

63 
xfs_l¢_t
 
	mqli_Êush_l¢
;

64 
xfs_dq_logf‹m©_t
 
	mqli_f‹m©
;

65 } 
	txfs_dq_logôem_t
;

67 
	sxfs_qoff_logôem
 {

68 
xfs_log_ôem_t
 
	mqql_ôem
;

69 
xfs_qoff_logôem
 *
	mqql_°¨t_lù
;

70 
xfs_qoff_logf‹m©_t
 
	mqql_f‹m©
;

71 } 
	txfs_qoff_logôem_t
;

73 
	sxfs_å™s
 {

74 
	mt_ty≥
;

75 
	mt_log_ªs
;

76 
	mt_log_cou¡
;

77 
	mt_blk_ªs
;

78 
xfs_mou¡
 *
	mt_mou¡p
;

79 
	mt_Êags
;

80 
	mt_icou¡_dñè
;

81 
	mt_i‰ì_dñè
;

82 
	mt_fdblocks_dñè
;

83 
	mt_‰exã¡s_dñè
;

84 
li°_hód
 
	mt_ôems
;

85 } 
	txfs_å™s_t
;

87 
xfs_å™s_öô
(
xfs_mou¡
 *);

88 
xfs_å™s_rﬁl
(
xfs_å™s
 **, 
xfs_öode
 *);

90 
libxfs_å™s_Æloc
(
xfs_mou¡
 *
mp
, 
xfs_å™s_ªs
 *
ª•
,

91 
uöt
 
blocks
, uöà
πexã¡s
, uöà
Êags
,

92 
xfs_å™s
 **
çp
);

93 
libxfs_å™s_commô
(
xfs_å™s
 *);

94 
libxfs_å™s_ˇn˚l
(
xfs_å™s
 *);

95 
xfs_buf
 *
libxfs_å™s_gësb
(
xfs_å™s
 *, 
xfs_mou¡
 *, );

97 
libxfs_å™s_igë
(
xfs_mou¡
 *, 
xfs_å™s
 *, 
xfs_öo_t
,

98 
uöt
, uöt, 
xfs_öode
 **);

99 
libxfs_å™s_ijoö
(
xfs_å™s
 *, 
xfs_öode
 *, 
uöt
);

100 
libxfs_å™s_ijoö_ªf
(
xfs_å™s
 *, 
xfs_öode
 *, );

101 
libxfs_å™s_log_öode
 (
xfs_å™s
 *, 
xfs_öode
 *,

102 
uöt
);

104 
libxfs_å™s_bªl£
(
xfs_å™s
 *, 
xfs_buf
 *);

105 
libxfs_å™s_bövÆ
(
xfs_å™s
 *, 
xfs_buf
 *);

106 
libxfs_å™s_bjoö
(
xfs_å™s
 *, 
xfs_buf
 *);

107 
libxfs_å™s_bhﬁd
(
xfs_å™s
 *, 
xfs_buf
 *);

108 
libxfs_å™s_log_buf
(
xfs_å™s
 *, 
xfs_buf
 *,

109 
uöt
, uint);

111 
xfs_buf
 *
libxfs_å™s_gë_buf_m≠
(
xfs_å™s
 *
ç
,

112 
xfs_bu·¨g
 *
bç
,

113 
xfs_buf_m≠
 *
m≠
, 
nm≠s
,

114 
uöt
 
Êags
);

116 
libxfs_å™s_ªad_buf_m≠
(
xfs_mou¡
 *
mp
, 
xfs_å™s
 *
ç
,

117 
xfs_bu·¨g
 *
bç
,

118 
xfs_buf_m≠
 *
m≠
, 
nm≠s
,

119 
uöt
 
Êags
, 
xfs_buf
 **
bµ
,

120 c⁄° 
xfs_buf_›s
 *
›s
);

121 
ölöe
 
xfs_buf
 *

122 
	$libxfs_å™s_gë_buf
(

123 
xfs_å™s
 *
ç
,

124 
xfs_bu·¨g
 *
bç
,

125 
xfs_daddr_t
 
blkno
,

126 
numblks
,

127 
uöt
 
Êags
)

129 
	`DEFINE_SINGLE_BUF_MAP
(
m≠
, 
blkno
, 
numblks
);

130  
	`libxfs_å™s_gë_buf_m≠
(
ç
, 
bç
, &
m≠
, 1, 
Êags
);

131 
	}
}

133 
ölöe
 

134 
	$libxfs_å™s_ªad_buf
(

135 
xfs_mou¡
 *
mp
,

136 
xfs_å™s
 *
ç
,

137 
xfs_bu·¨g
 *
bç
,

138 
xfs_daddr_t
 
blkno
,

139 
numblks
,

140 
uöt
 
Êags
,

141 
xfs_buf
 **
bµ
,

142 c⁄° 
xfs_buf_›s
 *
›s
)

144 
	`DEFINE_SINGLE_BUF_MAP
(
m≠
, 
blkno
, 
numblks
);

145  
	`libxfs_å™s_ªad_buf_m≠
(
mp
, 
ç
, 
bç
, &
m≠
, 1, 
Êags
, 
bµ
, 
›s
);

146 
	}
}

148 
xfs_exã¡_‰ì_öô_de„r_›
();

149 
xfs_rm≠_upd©e_öô_de„r_›
();

150 
xfs_ªfcou¡_upd©e_öô_de„r_›
();

151 
xfs_bm≠_upd©e_öô_de„r_›
();

	@include/xqm.h

18 #i‚de‡
__XQM_H__


19 
	#__XQM_H__


	)

21 
	~<xfs/xfs.h
>

27 
	#XQM_CMD
(
x
Ë(('X'<<8)+(x)Ë

	)

28 
	#Q_XQUOTAON
 
	`XQM_CMD
(1Ë

	)

29 
	#Q_XQUOTAOFF
 
	`XQM_CMD
(2Ë

	)

30 
	#Q_XGETQUOTA
 
	`XQM_CMD
(3Ë

	)

31 
	#Q_XSETQLIM
 
	`XQM_CMD
(4Ë

	)

32 
	#Q_XGETQSTAT
 
	`XQM_CMD
(5Ë

	)

33 
	#Q_XQUOTARM
 
	`XQM_CMD
(6Ë

	)

34 
	#Q_XQUOTASYNC
 
	`XQM_CMD
(7Ë

	)

35 
	#Q_XGETQSTATV
 
	`XQM_CMD
(8Ë

	)

36 
	#Q_XGETNEXTQUOTA
 
	`XQM_CMD
(9Ë

	)

45 
	#FS_DQUOT_VERSION
 1

	)

46 
	sfs_disk_quŸa
 {

47 
__s8
 
	md_vîsi⁄
;

48 
__s8
 
	md_Êags
;

49 
__u16
 
	md_fõldmask
;

50 
__u32
 
	md_id
;

51 
__u64
 
	md_blk_h¨dlimô
;

52 
__u64
 
	md_blk_so·limô
;

53 
__u64
 
	md_öo_h¨dlimô
;

54 
__u64
 
	md_öo_so·limô
;

55 
__u64
 
	md_bcou¡
;

56 
__u64
 
	md_icou¡
;

57 
__s32
 
	md_ôimî
;

59 
__s32
 
	md_btimî
;

60 
__u16
 
	md_iw¨ns
;

61 
__u16
 
	md_bw¨ns
;

62 
__s32
 
	md_∑ddög2
;

63 
__u64
 
	md_πb_h¨dlimô
;

64 
__u64
 
	md_πb_so·limô
;

65 
__u64
 
	md_πbcou¡
;

66 
__s32
 
	md_πbtimî
;

67 
__u16
 
	md_πbw¨ns
;

68 
__s16
 
	md_∑ddög3
;

69 
	md_∑ddög4
[8];

70 } 
	tfs_disk_quŸa_t
;

75 
	#FS_DQ_ISOFT
 (1<<0)

	)

76 
	#FS_DQ_IHARD
 (1<<1)

	)

77 
	#FS_DQ_BSOFT
 (1<<2)

	)

78 
	#FS_DQ_BHARD
 (1<<3)

	)

79 
	#FS_DQ_RTBSOFT
 (1<<4)

	)

80 
	#FS_DQ_RTBHARD
 (1<<5)

	)

81 
	#FS_DQ_LIMIT_MASK
 (
FS_DQ_ISOFT
 | 
FS_DQ_IHARD
 | 
FS_DQ_BSOFT
 | \

82 
FS_DQ_BHARD
 | 
FS_DQ_RTBSOFT
 | 
FS_DQ_RTBHARD
)

	)

90 
	#FS_DQ_BTIMER
 (1<<6)

	)

91 
	#FS_DQ_ITIMER
 (1<<7)

	)

92 
	#FS_DQ_RTBTIMER
 (1<<8)

	)

93 
	#FS_DQ_TIMER_MASK
 (
FS_DQ_BTIMER
 | 
FS_DQ_ITIMER
 | 
FS_DQ_RTBTIMER
)

	)

103 
	#FS_DQ_BWARNS
 (1<<9)

	)

104 
	#FS_DQ_IWARNS
 (1<<10)

	)

105 
	#FS_DQ_RTBWARNS
 (1<<11)

	)

106 
	#FS_DQ_WARNS_MASK
 (
FS_DQ_BWARNS
 | 
FS_DQ_IWARNS
 | 
FS_DQ_RTBWARNS
)

	)

111 
	#XFS_QUOTA_UDQ_ACCT
 (1<<0Ë

	)

112 
	#XFS_QUOTA_UDQ_ENFD
 (1<<1Ë

	)

113 
	#XFS_QUOTA_GDQ_ACCT
 (1<<2Ë

	)

114 
	#XFS_QUOTA_GDQ_ENFD
 (1<<3Ë

	)

115 
	#XFS_QUOTA_PDQ_ACCT
 (1<<4Ë

	)

116 
	#XFS_QUOTA_PDQ_ENFD
 (1<<5Ë

	)

118 
	#XFS_USER_QUOTA
 (1<<0Ë

	)

119 
	#XFS_PROJ_QUOTA
 (1<<1Ë

	)

120 
	#XFS_GROUP_QUOTA
 (1<<2Ë

	)

128 
	#FS_QSTAT_VERSION
 1

	)

133 
	sfs_qfûe°©
 {

134 
__u64
 
	mqfs_öo
;

135 
__u64
 
	mqfs_nblks
;

136 
__u32
 
	mqfs_√xã¡s
;

137 } 
	tfs_qfûe°©_t
;

139 
	sfs_quŸa_°©
 {

140 
__s8
 
	mqs_vîsi⁄
;

141 
__u16
 
	mqs_Êags
;

142 
__s8
 
	mqs_∑d
;

143 
fs_qfûe°©_t
 
	mqs_uquŸa
;

144 
fs_qfûe°©_t
 
	mqs_gquŸa
;

145 
__u32
 
	mqs_öc‹edqs
;

146 
__s32
 
	mqs_btimñimô
;

147 
__s32
 
	mqs_ôimñimô
;

148 
__s32
 
	mqs_πbtimñimô
;

149 
__u16
 
	mqs_bw¨∆imô
;

150 
__u16
 
	mqs_iw¨∆imô
;

151 } 
	tfs_quŸa_°©_t
;

154 #i‚de‡
FS_QSTATV_VERSION1


155 
	#FS_QSTATV_VERSION1
 1

	)

161 
	sfs_qfûe°©v
 {

162 
__u64
 
	mqfs_öo
;

163 
__u64
 
	mqfs_nblks
;

164 
__u32
 
	mqfs_√xã¡s
;

165 
__u32
 
	mqfs_∑d
;

168 
	sfs_quŸa_°©v
 {

169 
__s8
 
	mqs_vîsi⁄
;

170 
__u8
 
	mqs_∑d1
;

171 
__u16
 
	mqs_Êags
;

172 
__u32
 
	mqs_öc‹edqs
;

173 
fs_qfûe°©v
 
	mqs_uquŸa
;

174 
fs_qfûe°©v
 
	mqs_gquŸa
;

175 
fs_qfûe°©v
 
	mqs_pquŸa
;

176 
__s32
 
	mqs_btimñimô
;

177 
__s32
 
	mqs_ôimñimô
;

178 
__s32
 
	mqs_πbtimñimô
;

179 
__u16
 
	mqs_bw¨∆imô
;

180 
__u16
 
	mqs_iw¨∆imô
;

181 
__u64
 
	mqs_∑d2
[8];

	@io/attr.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	gch©å_cmd
;

25 
cmdöfo_t
 
	glßâr_cmd
;

26 
	g‹Êags
;

27 
	g™dÊags
;

28 
	gªcur£_Æl
;

29 
	gªcur£_dú
;

31 
	sxÊags
 {

32 
uöt
 
	mÊag
;

33 *
	msh‹äame
;

34 *
	ml⁄g«me
;

35 } 
	gxÊags
[] = {

36 { 
FS_XFLAG_REALTIME
, "r", "realtime" },

37 { 
FS_XFLAG_PREALLOC
, "p", "prealloc" },

38 { 
FS_XFLAG_IMMUTABLE
, "i", "immutable" },

39 { 
FS_XFLAG_APPEND
, "a", "append-only" },

40 { 
FS_XFLAG_SYNC
, "s", "sync" },

41 { 
FS_XFLAG_NOATIME
, "A", "no-atime" },

42 { 
FS_XFLAG_NODUMP
, "d", "no-dump" },

43 { 
FS_XFLAG_RTINHERIT
, "t", "rt-inherit" },

44 { 
FS_XFLAG_PROJINHERIT
, "P", "proj-inherit" },

45 { 
FS_XFLAG_NOSYMLINKS
, "n", "nosymlinks" },

46 { 
FS_XFLAG_EXTSIZE
, "e", "extsize" },

47 { 
FS_XFLAG_EXTSZINHERIT
, "E", "extsz-inherit" },

48 { 
FS_XFLAG_NODEFRAG
, "f", "no-defrag" },

49 { 
FS_XFLAG_FILESTREAM
, "S", "filestream" },

50 { 
FS_XFLAG_DAX
, "x", "dax" },

51 { 
FS_XFLAG_COWEXTSIZE
, "C", "cowextsize" },

52 { 0, 
NULL
, NULL }

54 
	#CHATTR_XFLAG_LIST
 "r" "üsAdtP√EfSxC"

	)

57 
	$lßâr_hñp
()

59 
	`¥ötf
(
	`_
(

87 
	}
}

90 
	$ch©å_hñp
()

92 
	`¥ötf
(
	`_
(

123 
	}
}

126 
	$¥ötx©å
(

127 
uöt
 
Êags
,

128 
vîbo£
,

129 
do‚ame
,

130 c⁄° *
‚ame
,

131 
dobø˚s
,

132 
d€ﬁ
)

134 
xÊags
 *
p
;

135 
fú°
 = 1;

137 i‡(
dobø˚s
)

138 
	`Âuts
("[", 
°dout
);

139 
p
 = 
xÊags
;Ö->
Êag
;Ö++) {

140 i‡(
Êags
 & 
p
->
Êag
) {

141 i‡(
vîbo£
) {

142 i‡(
fú°
)

143 
fú°
 = 0;

145 
	`Âuts
(", ", 
°dout
);

146 
	`Âuts
(
p
->
l⁄g«me
, 
°dout
);

148 
	`Âuts
(
p
->
sh‹äame
, 
°dout
);

150 } i‡(!
vîbo£
) {

151 
	`Âuts
("-", 
°dout
);

154 i‡(
dobø˚s
)

155 
	`Âuts
("]", 
°dout
);

156 i‡(
do‚ame
)

157 
	`¥ötf
(" %†", 
‚ame
);

158 i‡(
d€ﬁ
)

159 
	`Âuts
("\n", 
°dout
);

160 
	}
}

163 
	$lßâr_ˇŒback
(

164 c⁄° *
∑th
,

165 c⁄° 
°©
 *stat,

166 
°©us
,

167 
FTW
 *
d©a
)

169 
fsx©å
 
fsx
;

170 
fd
;

172 i‡(
ªcur£_dú
 && !
	`S_ISDIR
(
°©
->
°_mode
))

175 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) == -1)

176 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

177 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

178 i‡((
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) < 0)

179 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot get flags on %s: %s\n"),

180 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

182 
	`¥ötx©å
(
fsx
.
fsx_xÊags
, 0, 1, 
∑th
, 0, 1);

184 i‡(
fd
 != -1)

185 
	`˛o£
(
fd
);

187 
	}
}

190 
	$lßâr_f
(

191 
¨gc
,

192 **
¨gv
)

194 
fsx©å
 
fsx
;

195 *
«me
 = 
fûe
->name;

196 
c
, 
aÊag
 = 0, 
vÊag
 = 0;

198 
ªcur£_Æl
 = 
ªcur£_dú
 = 0;

199 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "DRav")Ë!
EOF
) {

200 
c
) {

202 
ªcur£_Æl
 = 0;

203 
ªcur£_dú
 = 1;

206 
ªcur£_Æl
 = 1;

207 
ªcur£_dú
 = 0;

210 
aÊag
 = 1;

211 
vÊag
 = 0;

214 
aÊag
 = 0;

215 
vÊag
 = 1;

218  
	`comm™d_ußge
(&
lßâr_cmd
);

222 i‡(
ªcur£_Æl
 || 
ªcur£_dú
) {

223 
	`n·w
(
«me
, 
lßâr_ˇŒback
,

224 100, 
FTW_PHYS
 | 
FTW_MOUNT
 | 
FTW_DEPTH
);

225 } i‡((
	`xfs˘l
(
«me
, 
fûe
->
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) < 0) {

226 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot get flags on %s: %s\n"),

227 
¥og«me
, 
«me
, 
	`°ªº‹
(
î∫o
));

229 
	`¥ötx©å
(
fsx
.
fsx_xÊags
, 
vÊag
, !
aÊag
, 
«me
, vflag, !aflag);

230 i‡(
aÊag
) {

231 
	`Âuts
("/", 
°dout
);

232 
	`¥ötx©å
(-1, 0, 1, 
«me
, 0, 1);

236 
	}
}

239 
	$ch©å_ˇŒback
(

240 c⁄° *
∑th
,

241 c⁄° 
°©
 *stat,

242 
°©us
,

243 
FTW
 *
d©a
)

245 
fsx©å
 
©å
;

246 
fd
;

248 i‡(
ªcur£_dú
 && !
	`S_ISDIR
(
°©
->
°_mode
))

251 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) == -1) {

252 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

253 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

254 } i‡(
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSGETXATTR
, &
©å
) < 0) {

255 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot get flags on %s: %s\n"),

256 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

258 
©å
.
fsx_xÊags
 |
‹Êags
;

259 
©å
.
fsx_xÊags
 &~
™dÊags
;

260 i‡(
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSSETXATTR
, &
©å
) < 0)

261 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot set flags on %s: %s\n"),

262 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

265 i‡(
fd
 != -1)

266 
	`˛o£
(
fd
);

268 
	}
}

271 
	$ch©å_f
(

272 
¨gc
,

273 **
¨gv
)

275 
fsx©å
 
©å
;

276 
xÊags
 *
p
;

277 
i
 = 0;

278 *
c
, *
«me
 = 
fûe
->name;

280 
‹Êags
 = 
™dÊags
 = 0;

281 
ªcur£_Æl
 = 
ªcur£_dú
 = 0;

282 ++
i
 < 
¨gc
) {

283 i‡(
¨gv
[
i
][0] == '-' &&árgv[i][1] == 'R') {

284 
ªcur£_Æl
 = 1;

285 } i‡(
¨gv
[
i
][0] == '-' &&árgv[i][1] == 'D') {

286 
ªcur£_dú
 = 1;

287 } i‡(
¨gv
[
i
][0] == '+') {

288 
c
 = &
¨gv
[
i
][1]; *c; c++) {

289 
p
 = 
xÊags
;Ö->
Êag
;Ö++) {

290 i‡(
	`°∫cmp
(
p
->
sh‹äame
, 
c
, 1) == 0) {

291 
‹Êags
 |
p
->
Êag
;

295 i‡(!
p
->
Êag
) {

296 
	`Ârötf
(
°dîr
, 
	`_
("%s: unknown flag\n"),

297 
¥og«me
);

301 } i‡(
¨gv
[
i
][0] == '-') {

302 
c
 = &
¨gv
[
i
][1]; *c; c++) {

303 
p
 = 
xÊags
;Ö->
Êag
;Ö++) {

304 i‡(
	`°∫cmp
(
p
->
sh‹äame
, 
c
, 1) == 0) {

305 
™dÊags
 |
p
->
Êag
;

309 i‡(!
p
->
Êag
) {

310 
	`Ârötf
(
°dîr
, 
	`_
("%s: unknown flag\n"),

311 
¥og«me
);

316 
	`Ârötf
(
°dîr
, 
	`_
("%s: bad chattr command,Çot +/-X\n"),

317 
¥og«me
);

322 i‡(
ªcur£_Æl
 || 
ªcur£_dú
) {

323 
	`n·w
(
«me
, 
ch©å_ˇŒback
,

324 100, 
FTW_PHYS
 | 
FTW_MOUNT
 | 
FTW_DEPTH
);

325 } i‡(
	`xfs˘l
(
«me
, 
fûe
->
fd
, 
FS_IOC_FSGETXATTR
, &
©å
) < 0) {

326 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot get flags on %s: %s\n"),

327 
¥og«me
, 
«me
, 
	`°ªº‹
(
î∫o
));

329 
©å
.
fsx_xÊags
 |
‹Êags
;

330 
©å
.
fsx_xÊags
 &~
™dÊags
;

331 i‡(
	`xfs˘l
(
«me
, 
fûe
->
fd
, 
FS_IOC_FSSETXATTR
, &
©å
) < 0)

332 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot set flags on %s: %s\n"),

333 
¥og«me
, 
«me
, 
	`°ªº‹
(
î∫o
));

336 
	}
}

339 
	$©å_öô
()

341 
ch©å_cmd
.
«me
 = "chattr";

342 
ch©å_cmd
.
cfunc
 = 
ch©å_f
;

343 
ch©å_cmd
.
¨gs
 = 
	`_
("[-R|-D] [+/-"
CHATTR_XFLAG_LIST
"]");

344 
ch©å_cmd
.
¨gmö
 = 1;

345 
ch©å_cmd
.
¨gmax
 = -1;

346 
ch©å_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

347 
ch©å_cmd
.
⁄ñöe
 =

348 
	`_
("changeÉxtended inode flags onÅhe currently open file");

349 
ch©å_cmd
.
hñp
 = 
ch©å_hñp
;

351 
lßâr_cmd
.
«me
 = "lsattr";

352 
lßâr_cmd
.
cfunc
 = 
lßâr_f
;

353 
lßâr_cmd
.
¨gs
 = 
	`_
("[-R|-D|-a|-v]");

354 
lßâr_cmd
.
¨gmö
 = 0;

355 
lßâr_cmd
.
¨gmax
 = 1;

356 
lßâr_cmd
.
Êags
 = 
CMD_NOMAP_OK
;

357 
lßâr_cmd
.
⁄ñöe
 =

358 
	`_
("listÉxtended inode flags set onÅhe currently open file");

359 
lßâr_cmd
.
hñp
 = 
lßâr_hñp
;

361 
	`add_comm™d
(&
ch©å_cmd
);

362 
	`add_comm™d
(&
lßâr_cmd
);

363 
	}
}

	@io/bmap.c

19 
	~"∂©f‹m_defs.h
"

20 
	~"comm™d.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	gbm≠_cmd
;

27 
	$bm≠_hñp
()

29 
	`¥ötf
(
	`_
(

54 
	}
}

57 
	$numÀn
(

58 
off64_t
 
vÆ
)

60 
off64_t
 
tmp
;

61 
Àn
;

63 
Àn
 = 0, 
tmp
 = 
vÆ
;Åmp > 0;Åmp =Åmp/10)

64 
Àn
++;

65  (
Àn
 == 0 ? 1 :Üen);

66 
	}
}

69 
	$bm≠_f
(

70 
¨gc
,

71 **
¨gv
)

73 
fsx©å
 
fsx
;

74 
gëbm≠x
 *
m≠
;

75 
xfs_fs›_geom
 
fsgeo
;

76 
m≠_size
;

77 
lo›
 = 0;

78 
Êg
 = 0;

79 
aÊag
 = 0;

80 
cÊag
 = 0;

81 
lÊag
 = 0;

82 
nÊag
 = 0;

83 
pÊag
 = 0;

84 
vÊag
 = 0;

85 
is_π
 = 0;

86 
bmv_iÊags
 = 0;

87 
i
 = 0;

88 
c
;

89 
eg˙t
;

91 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "acdñn:pv")Ë!
EOF
) {

92 
c
) {

94 
bmv_iÊags
 |
BMV_IF_ATTRFORK
;

95 
aÊag
 = 1;

98 
bmv_iÊags
 |
BMV_IF_COWFORK
 | 
BMV_IF_DELALLOC
;

99 
cÊag
 = 1;

102 
bmv_iÊags
 |
BMV_IF_DELALLOC
;

105 
lÊag
 = 1;

108 
nÊag
 = 
	`©oi
(
›èrg
);

112 
bmv_iÊags
 |
BMV_IF_NO_DMAPI_READ
;

116 
pÊag
 = 1;

117 
bmv_iÊags
 |
BMV_IF_PREALLOC
;

120 
vÊag
++;

123  
	`comm™d_ußge
(&
bm≠_cmd
);

126 i‡(
aÊag
 || 
cÊag
)

127 
bmv_iÊags
 &~(
BMV_IF_PREALLOC
|
BMV_IF_NO_DMAPI_READ
);

129 i‡(
vÊag
) {

130 
c
 = 
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_FSGEOMETRY_V1
, &
fsgeo
);

131 i‡(
c
 < 0) {

132 
	`Ârötf
(
°dîr
,

133 
	`_
("%s: can't get geometry [\"%s\"]: %s\n"),

134 
¥og«me
, 
fûe
->
«me
, 
	`°ªº‹
(
î∫o
));

135 
exôcode
 = 1;

138 
c
 = 
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
);

139 i‡(
c
 < 0) {

140 
	`Ârötf
(
°dîr
,

141 
	`_
("%s: cannotÑeadáttrs on \"%s\": %s\n"),

142 
¥og«me
, 
fûe
->
«me
, 
	`°ªº‹
(
î∫o
));

143 
exôcode
 = 1;

147 i‡(
fsx
.
fsx_xÊags
 =
FS_XFLAG_REALTIME
) {

152 
is_π
 = 1;

156 
m≠_size
 = 
nÊag
 ?Çflag+2 : 32;

157 
m≠
 = 
	`mÆloc
(
m≠_size
*(*map));

158 i‡(
m≠
 =
NULL
) {

159 
	`Ârötf
(
°dîr
, 
	`_
("%s: malloc of %d bytes failed.\n"),

160 
¥og«me
, ()(
m≠_size
 * (*
m≠
)));

161 
exôcode
 = 1;

195 
	`mem£t
(
m≠
, 0, (*map));

197 
m≠
->
bmv_Àngth
 = -1;

198 
m≠
->
bmv_cou¡
 = 
m≠_size
;

199 
m≠
->
bmv_iÊags
 = bmv_iflags;

201 
i
 = 
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_GETBMAPX
, 
m≠
);

202 i‡(
i
 < 0) {

203 i‡–
î∫o
 =
EINVAL


204 && !
aÊag
 && 
	`fûesize
() == 0) {

207 
	`Ârötf
(
°dîr
, 
	`_
("%s: xfsctl(XFS_IOC_GETBMAPX)"

209 
¥og«me
, 
m≠
->
bmv_iÊags
, 
fûe
->
«me
,

210 
	`°ªº‹
(
î∫o
));

211 
	`‰ì
(
m≠
);

212 
exôcode
 = 1;

216 i‡(
nÊag
)

218 i‡(
m≠
->
bmv_íåõs
 < m≠->
bmv_cou¡
-1)

223 
i
 = 
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
aÊag
 ?

224 
XFS_IOC_FSGETXATTRA
 : 
FS_IOC_FSGETXATTR
, &
fsx
);

225 i‡(
i
 < 0) {

226 
	`Ârötf
(
°dîr
, "%s: xfsctl(FS_IOC_FSGETXATTR%s) "

227 "[\"%s\"]: %s\n", 
¥og«me
, 
aÊag
 ? "A" : "",

228 
fûe
->
«me
, 
	`°ªº‹
(
î∫o
));

229 
	`‰ì
(
m≠
);

230 
exôcode
 = 1;

233 i‡(2 * 
fsx
.
fsx_√xã¡s
 > 
m≠_size
) {

234 
m≠_size
 = 2 * 
fsx
.
fsx_√xã¡s
 + 1;

235 
m≠
 = 
	`ªÆloc
(m≠, 
m≠_size
*(*map));

236 i‡(
m≠
 =
NULL
) {

237 
	`Ârötf
(
°dîr
,

238 
	`_
("%s: cannotÑealloc %d bytes\n"),

239 
¥og«me
, ()(
m≠_size
*(*
m≠
)));

240 
exôcode
 = 1;

244 } ++
lo›
 < 2);

245 i‡(!
nÊag
) {

246 i‡(
m≠
->
bmv_íåõs
 <= 0) {

247 
	`¥ötf
(
	`_
("%s:Çÿexã¡s\n"), 
fûe
->
«me
);

248 
	`‰ì
(
m≠
);

252 
eg˙t
 = 
nÊag
 ? 
	`mö
“Êag, 
m≠
->
bmv_íåõs
) : map->bmv_entries;

253 
	`¥ötf
("%s:\n", 
fûe
->
«me
);

254 i‡(!
vÊag
) {

255 
i
 = 0; i < 
eg˙t
; i++) {

256 
	`¥ötf
("\t%d: [%Œd..%Œd]: ", 
i
,

257 (Ë
m≠
[
i
 + 1].
bmv_off£t
,

258 ()(
m≠
[
i
 + 1].
bmv_off£t
 +

259 
m≠
[
i
 + 1].
bmv_Àngth
 - 1LL));

260 i‡(
m≠
[
i
 + 1].
bmv_block
 == -1)

261 
	`¥ötf
(
	`_
("hole"));

262 i‡(
m≠
[
i
 + 1].
bmv_block
 == -2)

263 
	`¥ötf
(
	`_
("delalloc"));

265 
	`¥ötf
("%lld..%lld",

266 (Ë
m≠
[
i
 + 1].
bmv_block
,

267 ()(
m≠
[
i
 + 1].
bmv_block
 +

268 
m≠
[
i
 + 1].
bmv_Àngth
 - 1LL));

271 i‡(
lÊag
)

272 
	`¥ötf
(
	`_
(" %lld blocks\n"),

273 ()
m≠
[
i
+1].
bmv_Àngth
);

275 
	`¥ötf
("\n");

283 
	#MINRANGE_WIDTH
 16

	)

284 
	#MINAG_WIDTH
 2

	)

285 
	#MINTOT_WIDTH
 5

	)

286 
	#NFLG
 6

	)

287 
	#FLG_NULL
 0000000

	)

288 
	#FLG_SHARED
 0100000

	)

289 
	#FLG_PRE
 0010000

	)

290 
	#FLG_BSU
 0001000

	)

291 
	#FLG_ESU
 0000100

	)

292 
	#FLG_BSW
 0000010

	)

293 
	#FLG_ESW
 0000001

	)

294 
agno
;

295 
off64_t
 
agoff
, 
bb≥øg
;

296 
foff_w
, 
boff_w
, 
aoff_w
, 
tŸ_w
, 
agno_w
;

297 
rbuf
[32], 
bbuf
[32], 
abuf
[32];

298 
sunô
, 
swidth
;

300 
foff_w
 = 
boff_w
 = 
aoff_w
 = 
MINRANGE_WIDTH
;

301 
tŸ_w
 = 
MINTOT_WIDTH
;

302 i‡(
is_π
)

303 
sunô
 = 
swidth
 = 
bb≥øg
 = 0;

305 
bb≥øg
 = (
off64_t
)
fsgeo
.
agblocks
 *

306 (
off64_t
)
fsgeo
.
blocksize
 / 
BBSIZE
;

307 
sunô
 = (
fsgeo
.sunô * fsgeo.
blocksize
Ë/ 
BBSIZE
;

308 
swidth
 = (
fsgeo
.swidth * fsgeo.
blocksize
Ë/ 
BBSIZE
;

310 
Êg
 = 
sunô
 | 
pÊag
;

316 
i
 = 0; i < 
eg˙t
; i++) {

317 
	`¢¥ötf
(
rbuf
, (rbuf), "[%lld..%lld]:",

318 (Ë
m≠
[
i
 + 1].
bmv_off£t
,

319 ()(
m≠
[
i
 + 1].
bmv_off£t
 +

320 
m≠
[
i
 + 1].
bmv_Àngth
 - 1LL));

321 i‡(
m≠
[
i
 + 1].
bmv_oÊags
 & 
BMV_OF_PREALLOC
)

322 
Êg
 = 1;

323 i‡(
m≠
[
i
 + 1].
bmv_block
 == -1) {

324 
foff_w
 = 
	`max
(foff_w, 
	`°æí
(
rbuf
));

325 
tŸ_w
 = 
	`max
(tot_w,

326 
	`numÀn
(
m≠
[
i
+1].
bmv_Àngth
));

328 
	`¢¥ötf
(
bbuf
, (bbuf), "%lld..%lld",

329 (Ë
m≠
[
i
 + 1].
bmv_block
,

330 ()(
m≠
[
i
 + 1].
bmv_block
 +

331 
m≠
[
i
 + 1].
bmv_Àngth
 - 1LL));

332 
boff_w
 = 
	`max
(boff_w, 
	`°æí
(
bbuf
));

333 i‡(!
is_π
) {

334 
agno
 = 
m≠
[
i
 + 1].
bmv_block
 / 
bb≥øg
;

335 
agoff
 = 
m≠
[
i
 + 1].
bmv_block
 -

336 (
agno
 * 
bb≥øg
);

337 
	`¢¥ötf
(
abuf
, (abuf),

339 ()
agoff
,

340 ()(
agoff
 +

341 
m≠
[
i
 + 1].
bmv_Àngth
 - 1LL));

342 
aoff_w
 = 
	`max
◊off_w, 
	`°æí
(
abuf
));

344 
aoff_w
 = 0;

345 
foff_w
 = 
	`max
(foff_w, 
	`°æí
(
rbuf
));

346 
tŸ_w
 = 
	`max
(tot_w,

347 
	`numÀn
(
m≠
[
i
+1].
bmv_Àngth
));

350 
agno_w
 = 
is_π
 ? 0 : 
	`max
(
MINAG_WIDTH
, 
	`numÀn
(
fsgeo
.
agcou¡
));

351 
	`¥ötf
("%4s: %-*s %-*s %*s %-*s %*s%s\n",

352 
	`_
("EXT"),

353 
foff_w
, 
	`_
("FILE-OFFSET"),

354 
boff_w
, 
is_π
 ? 
	`_
("RT-BLOCK-RANGE") : _("BLOCK-RANGE"),

355 
agno_w
, 
is_π
 ? "" : 
	`_
("AG"),

356 
aoff_w
, 
is_π
 ? "" : 
	`_
("AG-OFFSET"),

357 
tŸ_w
, 
	`_
("TOTAL"),

358 
Êg
 ? 
	`_
(" FLAGS") : "");

359 
i
 = 0; i < 
eg˙t
; i++) {

360 
Êg
 = 
FLG_NULL
;

361 i‡(
m≠
[
i
 + 1].
bmv_oÊags
 & 
BMV_OF_PREALLOC
) {

362 
Êg
 |
FLG_PRE
;

364 i‡(
m≠
[
i
 + 1].
bmv_oÊags
 & 
BMV_OF_SHARED
)

365 
Êg
 |
FLG_SHARED
;

366 i‡(
m≠
[
i
 + 1].
bmv_oÊags
 & 
BMV_OF_DELALLOC
)

367 
m≠
[
i
 + 1].
bmv_block
 = -2;

372 i‡(
sunô
) {

373 i‡(
m≠
[
i
 + 1].
bmv_block
 % 
sunô
 != 0) {

374 
Êg
 |
FLG_BSU
;

376 i‡(((
m≠
[
i
 + 1].
bmv_block
 +

377 
m≠
[
i
 + 1].
bmv_Àngth
 ) % 
sunô
 ) != 0) {

378 
Êg
 |
FLG_ESU
;

380 i‡(
m≠
[
i
 + 1].
bmv_block
 % 
swidth
 != 0) {

381 
Êg
 |
FLG_BSW
;

383 i‡(((
m≠
[
i
 + 1].
bmv_block
 +

384 
m≠
[
i
 + 1].
bmv_Àngth
 ) % 
swidth
 ) != 0) {

385 
Êg
 |
FLG_ESW
;

388 
	`¢¥ötf
(
rbuf
, (rbuf), "[%lld..%lld]:",

389 (Ë
m≠
[
i
 + 1].
bmv_off£t
,

390 ()(
m≠
[
i
 + 1].
bmv_off£t
 +

391 
m≠
[
i
 + 1].
bmv_Àngth
 - 1LL));

392 i‡(
m≠
[
i
 + 1].
bmv_block
 == -1) {

393 
	`¥ötf
("%4d: %-*s %-*s %*s %-*s %*lld\n",

394 
i
,

395 
foff_w
, 
rbuf
,

396 
boff_w
, 
	`_
("hole"),

397 
agno_w
, "",

398 
aoff_w
, "",

399 
tŸ_w
, ()
m≠
[
i
+1].
bmv_Àngth
);

400 } i‡(
m≠
[
i
 + 1].
bmv_block
 == -2) {

401 
	`¥ötf
("%4d: %-*s %-*s %*s %-*s %*lld\n",

402 
i
,

403 
foff_w
, 
rbuf
,

404 
boff_w
, 
	`_
("delalloc"),

405 
agno_w
, "",

406 
aoff_w
, "",

407 
tŸ_w
, ()
m≠
[
i
+1].
bmv_Àngth
);

409 
	`¢¥ötf
(
bbuf
, (bbuf), "%lld..%lld",

410 (Ë
m≠
[
i
 + 1].
bmv_block
,

411 ()(
m≠
[
i
 + 1].
bmv_block
 +

412 
m≠
[
i
 + 1].
bmv_Àngth
 - 1LL));

413 
	`¥ötf
("%4d: %-*†%-*s", 
i
, 
foff_w
, 
rbuf
,

414 
boff_w
, 
bbuf
);

415 i‡(!
is_π
) {

416 
agno
 = 
m≠
[
i
 + 1].
bmv_block
 / 
bb≥øg
;

417 
agoff
 = 
m≠
[
i
 + 1].
bmv_block
 -

418 (
agno
 * 
bb≥øg
);

419 
	`¢¥ötf
(
abuf
, (abuf),

421 ()
agoff
,

422 ()(
agoff
 +

423 
m≠
[
i
 + 1].
bmv_Àngth
 - 1LL));

424 
	`¥ötf
(" %*d %-*s", 
agno_w
, 
agno
,

425 
aoff_w
, 
abuf
);

427 
	`¥ötf
(" ");

428 
	`¥ötf
(" %*Œd", 
tŸ_w
,

429 ()
m≠
[
i
+1].
bmv_Àngth
);

430 i‡(
Êg
 =
FLG_NULL
 && !
pÊag
) {

431 
	`¥ötf
("\n");

433 
	`¥ötf
(" %-*.*o\n", 
NFLG
, NFLG, 
Êg
);

437 i‡((
Êg
 || 
pÊag
Ë&& 
vÊag
 > 1) {

438 
	`¥ötf
(
	`_
(" FLAG Values:\n"));

439 
	`¥ötf
(
	`_
(" %*.*o SharedÉxtent\n"),

440 
NFLG
+1, NFLG+1, 
FLG_SHARED
);

441 
	`¥ötf
(
	`_
(" %*.*o UnwrittenÖreallocatedÉxtent\n"),

442 
NFLG
+1, NFLG+1, 
FLG_PRE
);

443 
	`¥ötf
(
	`_
(" %*.*o Doesn't begin on stripe unit\n"),

444 
NFLG
+1, NFLG+1, 
FLG_BSU
);

445 
	`¥ötf
(
	`_
(" %*.*o Doesn'tÉnd on stripe unit\n"),

446 
NFLG
+1, NFLG+1, 
FLG_ESU
);

447 
	`¥ötf
(
	`_
(" %*.*o Doesn't begin on stripe width\n"),

448 
NFLG
+1, NFLG+1, 
FLG_BSW
);

449 
	`¥ötf
(
	`_
(" %*.*o Doesn'tÉnd on stripe width\n"),

450 
NFLG
+1, NFLG+1, 
FLG_ESW
);

453 
	`‰ì
(
m≠
);

455 
	}
}

458 
	$bm≠_öô
()

460 
bm≠_cmd
.
«me
 = "bmap";

461 
bm≠_cmd
.
cfunc
 = 
bm≠_f
;

462 
bm≠_cmd
.
¨gmö
 = 0;

463 
bm≠_cmd
.
¨gmax
 = -1;

464 
bm≠_cmd
.
Êags
 = 
CMD_NOMAP_OK
;

465 
bm≠_cmd
.
¨gs
 = 
	`_
("[-adlpv] [-nÇx]");

466 
bm≠_cmd
.
⁄ñöe
 = 
	`_
("print block mapping forán XFS file");

467 
bm≠_cmd
.
hñp
 = 
bm≠_hñp
;

469 
	`add_comm™d
(&
bm≠_cmd
);

470 
	}
}

	@io/copy_file_range.c

19 
	~<sys/sysˇŒ.h
>

20 
	~<sys/uio.h
>

21 
	~<xfs/xfs.h
>

22 
	~"comm™d.h
"

23 
	~"öput.h
"

24 
	~"öô.h
"

25 
	~"io.h
"

27 
cmdöfo_t
 
	gc›y_ønge_cmd
;

30 
	$c›y_ønge_hñp
()

32 
	`¥ötf
(
	`_
("\n\
áÑange of bytes fromá file intoÅhe open file, overwritingány data\n\
Åhere.\n\
\n\
:\n\
'copy_range -s 100 -d 200 -l 300 some_file' - copies 300 bytes from some_file\n\
 offset 100 intoÅhe open\n\
át offset 200\n\
'copy_range some_file' - copiesáll bytes from some_file intoÅhe open file\n\
Öosition 0\n\
"));

43 
	}
}

45 
loff_t


46 
	$c›y_fûe_ønge
(
fd
, 
loff_t
 *
§c
,Üoff_à*
d°
, 
size_t
 
Àn
)

48 
loff_t
 
ªt
;

51 
ªt
 = 
	`sysˇŒ
(
__NR_c›y_fûe_ønge
, 
fd
, 
§c
, 
fûe
->fd, 
d°
, 
Àn
, 0);

52 i‡(
ªt
 == -1) {

53 
	`≥º‹
("copy_range");

54  
î∫o
;

55 } i‡(
ªt
 == 0)

57 
Àn
 -
ªt
;

58 } 
Àn
 > 0);

61 
	}
}

63 
off64_t


64 
	$c›y_§c_fûesize
(
fd
)

66 
°©
 
°
;

68 i‡(
	`f°©
(
fd
, &
°
) < 0) {

69 
	`≥º‹
("fstat");

72  
°
.
°_size
;

73 
	}
}

76 
	$c›y_d°_åunˇã
()

78 
ªt
 = 
	`·runˇã
(
fûe
->
fd
, 0);

79 i‡(
ªt
 < 0)

80 
	`≥º‹
("ftruncate");

81  
ªt
;

82 
	}
}

85 
	$c›y_ønge_f
(
¨gc
, **
¨gv
)

87 
loff_t
 
§c
 = 0;

88 
loff_t
 
d°
 = 0;

89 
size_t
 
Àn
 = 0;

90 *
•
;

91 
›t
;

92 
ªt
;

93 
fd
;

95 (
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "s:d:l:")) != -1) {

96 
›t
) {

98 
§c
 = 
	`°πouŒ
(
›èrg
, &
•
, 10);

99 i‡(!
•
 || s∞=
›èrg
) {

100 
	`¥ötf
(
	`_
("övÆid sour˚ off£à-- %s\n"), 
•
);

105 
d°
 = 
	`°πouŒ
(
›èrg
, &
•
, 10);

106 i‡(!
•
 || s∞=
›èrg
) {

107 
	`¥ötf
(
	`_
("övÆid de°ö©i⁄ off£à-- %s\n"), 
•
);

112 
Àn
 = 
	`°πouŒ
(
›èrg
, &
•
, 10);

113 i‡(!
•
 || s∞=
›èrg
) {

114 
	`¥ötf
(
	`_
("övÆidÜígth -- %s\n"), 
•
);

121 i‡(
›töd
 !
¨gc
 - 1)

122  
	`comm™d_ußge
(&
c›y_ønge_cmd
);

124 
fd
 = 
	`›ífûe
(
¨gv
[
›töd
], 
NULL
, 
IO_READONLY
, 0);

125 i‡(
fd
 < 0)

128 i‡(
§c
 =0 && 
d°
 =0 && 
Àn
 == 0) {

129 
Àn
 = 
	`c›y_§c_fûesize
(
fd
);

130 
	`c›y_d°_åunˇã
();

133 
ªt
 = 
	`c›y_fûe_ønge
(
fd
, &
§c
, &
d°
, 
Àn
);

134 
	`˛o£
(
fd
);

135  
ªt
;

136 
	}
}

139 
	$c›y_ønge_öô
()

141 
c›y_ønge_cmd
.
«me
 = "copy_range";

142 
c›y_ønge_cmd
.
cfunc
 = 
c›y_ønge_f
;

143 
c›y_ønge_cmd
.
¨gmö
 = 1;

144 
c›y_ønge_cmd
.
¨gmax
 = 7;

145 
c›y_ønge_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

146 
c›y_ønge_cmd
.
¨gs
 = 
	`_
("[-s src_off] [-d dst_off] [-lÜen] src_file");

147 
c›y_ønge_cmd
.
⁄ñöe
 = 
	`_
("CopyáÑange of data betweenÅwo files");

148 
c›y_ønge_cmd
.
hñp
 = 
c›y_ønge_hñp
;

150 
	`add_comm™d
(&
c›y_ønge_cmd
);

151 
	}
}

	@io/cowextsize.c

26 
	~"∂©f‹m_defs.h
"

27 
	~"comm™d.h
"

28 
	~"öô.h
"

29 
	~"io.h
"

30 
	~"öput.h
"

31 
	~"∑th.h
"

33 
cmdöfo_t
 
	gcowextsize_cmd
;

34 
	gcowextsize
;

37 
	$cowextsize_hñp
()

39 
	`¥ötf
(
	`_
(

46 
	}
}

49 
	$gë_cowextsize
(c⁄° *
∑th
, 
fd
)

51 
fsx©å
 
fsx
;

53 i‡((
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) < 0) {

54 
	`¥ötf
("%s: XFS_IOC_FSGETXATTR %s: %s\n",

55 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

58 
	`¥ötf
("[%u] %s\n", 
fsx
.
fsx_cowextsize
, 
∑th
);

60 
	}
}

63 
	$£t_cowextsize
(c⁄° *
∑th
, 
fd
, 
extsz
)

65 
fsx©å
 
fsx
;

66 
°©64
 
°©
;

68 i‡(
	`f°©64
(
fd
, &
°©
) < 0) {

69 
	`≥º‹
("fstat64");

72 i‡((
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) < 0) {

73 
	`¥ötf
("%s: XFS_IOC_FSGETXATTR %s: %s\n",

74 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

78 i‡(
	`S_ISREG
(
°©
.
°_mode
Ë|| 
	`S_ISDIR
(stat.st_mode)) {

79 
fsx
.
fsx_xÊags
 |
FS_XFLAG_COWEXTSIZE
;

81 
	`¥ötf
(
	`_
("övÆidÅ¨gë fûêty≥ - fûê%s\n"), 
∑th
);

84 
fsx
.
fsx_cowextsize
 = 
extsz
;

86 i‡((
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSSETXATTR
, &
fsx
)) < 0) {

87 
	`¥ötf
("%s: XFS_IOC_FSSETXATTR %s: %s\n",

88 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

93 
	}
}

96 
	$gë_cowextsize_ˇŒback
(

97 c⁄° *
∑th
,

98 c⁄° 
°©
 *stat,

99 
°©us
,

100 
FTW
 *
d©a
)

102 
fd
;

104 i‡(
ªcur£_dú
 && !
	`S_ISDIR
(
°©
->
°_mode
))

107 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

108 i‡(
fd
 < 0) {

109 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

110 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

112 
	`gë_cowextsize
(
∑th
, 
fd
);

113 
	`˛o£
(
fd
);

116 
	}
}

119 
	$£t_cowextsize_ˇŒback
(

120 c⁄° *
∑th
,

121 c⁄° 
°©
 *stat,

122 
°©us
,

123 
FTW
 *
d©a
)

125 
fd
;

127 i‡(
ªcur£_dú
 && !
	`S_ISDIR
(
°©
->
°_mode
))

130 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

131 i‡(
fd
 < 0) {

132 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

133 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

135 
	`£t_cowextsize
(
∑th
, 
fd
, 
cowextsize
);

136 
	`˛o£
(
fd
);

139 
	}
}

142 
	$cowextsize_f
(

143 
¨gc
,

144 **
¨gv
)

146 
size_t
 
blocksize
, 
£˘size
;

147 
c
;

149 
ªcur£_Æl
 = 
ªcur£_dú
 = 0;

150 
	`öô_cväum
(&
blocksize
, &
£˘size
);

151 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "DR")Ë!
EOF
) {

152 
c
) {

154 
ªcur£_Æl
 = 0;

155 
ªcur£_dú
 = 1;

158 
ªcur£_Æl
 = 1;

159 
ªcur£_dú
 = 0;

162  
	`comm™d_ußge
(&
cowextsize_cmd
);

166 i‡(
›töd
 < 
¨gc
) {

167 
cowextsize
 = ()
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

168 i‡(
cowextsize
 < 0) {

169 
	`¥ötf
(
	`_
("non-numeric cowextsizeárgument -- %s\n"),

170 
¨gv
[
›töd
]);

174 
cowextsize
 = -1;

177 i‡(
ªcur£_Æl
 || 
ªcur£_dú
)

178 
	`n·w
(
fûe
->
«me
, (
cowextsize
 >= 0) ?

179 
£t_cowextsize_ˇŒback
 : 
gë_cowextsize_ˇŒback
,

180 100, 
FTW_PHYS
 | 
FTW_MOUNT
 | 
FTW_DEPTH
);

181 i‡(
cowextsize
 >= 0)

182 
	`£t_cowextsize
(
fûe
->
«me
, fûe->
fd
, 
cowextsize
);

184 
	`gë_cowextsize
(
fûe
->
«me
, fûe->
fd
);

186 
	}
}

189 
	$cowextsize_öô
()

191 
cowextsize_cmd
.
«me
 = "cowextsize";

192 
cowextsize_cmd
.
cfunc
 = 
cowextsize_f
;

193 
cowextsize_cmd
.
¨gs
 = 
	`_
("[-D | -R] [cowextsize]");

194 
cowextsize_cmd
.
¨gmö
 = 0;

195 
cowextsize_cmd
.
¨gmax
 = -1;

196 
cowextsize_cmd
.
Êags
 = 
CMD_NOMAP_OK
;

197 
cowextsize_cmd
.
⁄ñöe
 =

198 
	`_
("get/setÖreferred CoWÉxtent size (in bytes) forÅhe open file");

199 
cowextsize_cmd
.
hñp
 = 
cowextsize_hñp
;

201 
	`add_comm™d
(&
cowextsize_cmd
);

202 
	}
}

	@io/encrypt.c

20 
	~"∂©f‹m_defs.h
"

21 
	~"comm™d.h
"

22 
	~"öô.h
"

23 
	~"io.h
"

25 #i‚de‡
ARRAY_SIZE


26 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

37 #i‚de‡
FS_IOC_SET_ENCRYPTION_POLICY


38 
	#FS_KEY_DESCRIPTOR_SIZE
 8

	)

40 
	sfs¸y±_pﬁicy
 {

41 
__u8
 
	mvîsi⁄
;

42 
__u8
 
	mc⁄ã¡s_í¸y±i⁄_mode
;

43 
__u8
 
	mfûíames_í¸y±i⁄_mode
;

44 
__u8
 
	mÊags
;

45 
__u8
 
	mma°î_key_des¸ùt‹
[
FS_KEY_DESCRIPTOR_SIZE
];

46 } 
__©åibuã__
((
∑cked
));

48 
	#FS_IOC_SET_ENCRYPTION_POLICY
 
	`_IOR
('f', 19, 
fs¸y±_pﬁicy
)

	)

49 
	#FS_IOC_GET_ENCRYPTION_PWSALT
 
	`_IOW
('f', 20, 
__u8
[16])

	)

50 
	#FS_IOC_GET_ENCRYPTION_POLICY
 
	`_IOW
('f', 21, 
fs¸y±_pﬁicy
)

	)

54 #i‚de‡
FS_ENCRYPTION_MODE_AES_256_XTS


55 
	#FS_POLICY_FLAGS_PAD_4
 0x00

	)

56 
	#FS_POLICY_FLAGS_PAD_8
 0x01

	)

57 
	#FS_POLICY_FLAGS_PAD_16
 0x02

	)

58 
	#FS_POLICY_FLAGS_PAD_32
 0x03

	)

59 
	#FS_POLICY_FLAGS_PAD_MASK
 0x03

	)

60 
	#FS_POLICY_FLAGS_VALID
 0x03

	)

62 
	#FS_ENCRYPTION_MODE_INVALID
 0

	)

63 
	#FS_ENCRYPTION_MODE_AES_256_XTS
 1

	)

64 
	#FS_ENCRYPTION_MODE_AES_256_GCM
 2

	)

65 
	#FS_ENCRYPTION_MODE_AES_256_CBC
 3

	)

66 
	#FS_ENCRYPTION_MODE_AES_256_CTS
 4

	)

69 
cmdöfo_t
 
	ggë_í˝ﬁicy_cmd
;

70 
cmdöfo_t
 
	g£t_í˝ﬁicy_cmd
;

73 
	$£t_í˝ﬁicy_hñp
()

75 
	`¥ötf
(
	`_
(

95 
	}
}

98 
__u8
 
	mmode
;

99 c⁄° *
	m«me
;

100 } 
	gavaûabÀ_modes
[] = {

101 {
FS_ENCRYPTION_MODE_AES_256_XTS
, "AES-256-XTS"},

102 {
FS_ENCRYPTION_MODE_AES_256_CTS
, "AES-256-CTS"},

103 {
FS_ENCRYPTION_MODE_AES_256_GCM
, "AES-256-GCM"},

104 {
FS_ENCRYPTION_MODE_AES_256_CBC
, "AES-256-CBC"},

107 
boﬁ


108 
	$∑r£_byã_vÆue
(c⁄° *
¨g
, 
__u8
 *
vÆue_ªt
)

110 
vÆue
;

111 *
tmp
;

113 
vÆue
 = 
	`°πﬁ
(
¨g
, &
tmp
, 0);

114 i‡(
vÆue
 < 0 || vÆuê> 255 || 
tmp
 =
¨g
 || *tmp != '\0')

115  
Ál£
;

116 *
vÆue_ªt
 = 
vÆue
;

117  
åue
;

118 
	}
}

120 
boﬁ


121 
	$∑r£_mode
(c⁄° *
¨g
, 
__u8
 *
mode_ªt
)

123 
i
;

125 
i
 = 0; i < 
	`ARRAY_SIZE
(
avaûabÀ_modes
); i++) {

126 i‡(
	`°rcmp
(
¨g
, 
avaûabÀ_modes
[
i
].
«me
) == 0) {

127 *
mode_ªt
 = 
avaûabÀ_modes
[
i
].
mode
;

128  
åue
;

132  
	`∑r£_byã_vÆue
(
¨g
, 
mode_ªt
);

133 
	}
}

136 
	$mode2°r
(
__u8
 
mode
)

138 
buf
[32];

139 
i
;

141 
i
 = 0; i < 
	`ARRAY_SIZE
(
avaûabÀ_modes
); i++)

142 i‡(
mode
 =
avaûabÀ_modes
[
i
].mode)

143  
avaûabÀ_modes
[
i
].
«me
;

145 
	`•rötf
(
buf
, "0x%02x", 
mode
);

146  
buf
;

147 
	}
}

150 
	$keydesc2°r
(
__u8
 
ma°î_key_des¸ùt‹
[
FS_KEY_DESCRIPTOR_SIZE
])

152 
buf
[2 * 
FS_KEY_DESCRIPTOR_SIZE
 + 1];

153 
i
;

155 
i
 = 0; i < 
FS_KEY_DESCRIPTOR_SIZE
; i++)

156 
	`•rötf
(&
buf
[2 * 
i
], "%02x", 
ma°î_key_des¸ùt‹
[i]);

158  
buf
;

159 
	}
}

162 
	$gë_í˝ﬁicy_f
(
¨gc
, **
¨gv
)

164 
fs¸y±_pﬁicy
 
pﬁicy
;

166 i‡(
	`io˘l
(
fûe
->
fd
, 
FS_IOC_GET_ENCRYPTION_POLICY
, &
pﬁicy
) < 0) {

167 
	`Ârötf
(
°dîr
, "%s: failedÅo getÉncryptionÖolicy: %s\n",

168 
fûe
->
«me
, 
	`°ªº‹
(
î∫o
));

169 
exôcode
 = 1;

173 
	`¥ötf
("En¸y±i⁄Öﬁicy f‹ %s:\n", 
fûe
->
«me
);

174 
	`¥ötf
("\tPﬁicy vîsi⁄: %u\n", 
pﬁicy
.
vîsi⁄
);

175 
	`¥ötf
("\tMaster key descriptor: %s\n",

176 
	`keydesc2°r
(
pﬁicy
.
ma°î_key_des¸ùt‹
));

177 
	`¥ötf
("\tContentsÉncryption mode: %u (%s)\n",

178 
pﬁicy
.
c⁄ã¡s_í¸y±i⁄_mode
,

179 
	`mode2°r
(
pﬁicy
.
c⁄ã¡s_í¸y±i⁄_mode
));

180 
	`¥ötf
("\tFilenamesÉncryption mode: %u (%s)\n",

181 
pﬁicy
.
fûíames_í¸y±i⁄_mode
,

182 
	`mode2°r
(
pﬁicy
.
fûíames_í¸y±i⁄_mode
));

183 
	`¥ötf
("\tFœgs: 0x%02x\n", 
pﬁicy
.
Êags
);

185 
	}
}

188 
	$£t_í˝ﬁicy_f
(
¨gc
, **
¨gv
)

190 
c
;

191 
fs¸y±_pﬁicy
 
pﬁicy
;

194 
	`mem£t
(&
pﬁicy
, 0, (policy));

195 
pﬁicy
.
c⁄ã¡s_í¸y±i⁄_mode
 = 
FS_ENCRYPTION_MODE_AES_256_XTS
;

196 
pﬁicy
.
fûíames_í¸y±i⁄_mode
 = 
FS_ENCRYPTION_MODE_AES_256_CTS
;

197 
pﬁicy
.
Êags
 = 
FS_POLICY_FLAGS_PAD_16
;

200 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:n:f:v:")Ë!
EOF
) {

201 
c
) {

203 i‡(!
	`∑r£_mode
(
›èrg
,

204 &
pﬁicy
.
c⁄ã¡s_í¸y±i⁄_mode
)) {

205 
	`Ârötf
(
°dîr
, "invalid contentsÉncryption "

206 "mode: %s\n", 
›èrg
);

211 i‡(!
	`∑r£_mode
(
›èrg
,

212 &
pﬁicy
.
fûíames_í¸y±i⁄_mode
)) {

213 
	`Ârötf
(
°dîr
, "invalid filenamesÉncryption "

214 "mode: %s\n", 
›èrg
);

219 i‡(!
	`∑r£_byã_vÆue
(
›èrg
, &
pﬁicy
.
Êags
)) {

220 
	`Ârötf
(
°dîr
, "övÆid fœgs: %s\n", 
›èrg
);

225 i‡(!
	`∑r£_byã_vÆue
(
›èrg
, &
pﬁicy
.
vîsi⁄
)) {

226 
	`Ârötf
(
°dîr
, "invalidÖolicy version: %s\n",

227 
›èrg
);

232  
	`comm™d_ußge
(&
£t_í˝ﬁicy_cmd
);

235 
¨gc
 -
›töd
;

236 
¨gv
 +
›töd
;

238 i‡(
¨gc
 > 1)

239  
	`comm™d_ußge
(&
£t_í˝ﬁicy_cmd
);

242 i‡(
¨gc
 > 0) {

243 c⁄° *
keydesc
 = 
¨gv
[0];

244 *
tmp
;

245 
x
;

246 
i
;

248 i‡(
	`°æí
(
keydesc
Ë!
FS_KEY_DESCRIPTOR_SIZE
 * 2) {

249 
	`Ârötf
(
°dîr
, "invalid key descriptor: %s\n",

250 
keydesc
);

254 
x
 = 
	`°πouŒ
(
keydesc
, &
tmp
, 16);

255 i‡(
tmp
 =
keydesc
 || *tmp != '\0') {

256 
	`Ârötf
(
°dîr
, "invalid key descriptor: %s\n",

257 
keydesc
);

261 
i
 = 0; i < 
FS_KEY_DESCRIPTOR_SIZE
; i++) {

262 
pﬁicy
.
ma°î_key_des¸ùt‹
[
i
] = 
x
 >> 56;

263 
x
 <<= 8;

268 i‡(
	`io˘l
(
fûe
->
fd
, 
FS_IOC_SET_ENCRYPTION_POLICY
, &
pﬁicy
) < 0) {

269 
	`Ârötf
(
°dîr
, "%s: failedÅo setÉncryptionÖolicy: %s\n",

270 
fûe
->
«me
, 
	`°ªº‹
(
î∫o
));

271 
exôcode
 = 1;

276 
	}
}

279 
	$í¸y±_öô
()

281 
gë_í˝ﬁicy_cmd
.
«me
 = "get_encpolicy";

282 
gë_í˝ﬁicy_cmd
.
cfunc
 = 
gë_í˝ﬁicy_f
;

283 
gë_í˝ﬁicy_cmd
.
¨gmö
 = 0;

284 
gë_í˝ﬁicy_cmd
.
¨gmax
 = 0;

285 
gë_í˝ﬁicy_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

286 
gë_í˝ﬁicy_cmd
.
⁄ñöe
 =

287 
	`_
("displayÅheÉncryptionÖolicy ofÅhe current file");

289 
£t_í˝ﬁicy_cmd
.
«me
 = "set_encpolicy";

290 
£t_í˝ﬁicy_cmd
.
cfunc
 = 
£t_í˝ﬁicy_f
;

291 
£t_í˝ﬁicy_cmd
.
¨gs
 =

292 
	`_
("[-c mode] [-n mode] [-f flags] [-v version] [keydesc]");

293 
£t_í˝ﬁicy_cmd
.
¨gmö
 = 0;

294 
£t_í˝ﬁicy_cmd
.
¨gmax
 = -1;

295 
£t_í˝ﬁicy_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

296 
£t_í˝ﬁicy_cmd
.
⁄ñöe
 =

297 
	`_
("assignánÉncryptionÖolicyÅoÅhe current file");

298 
£t_í˝ﬁicy_cmd
.
hñp
 = 
£t_í˝ﬁicy_hñp
;

300 
	`add_comm™d
(&
gë_í˝ﬁicy_cmd
);

301 
	`add_comm™d
(&
£t_í˝ﬁicy_cmd
);

302 
	}
}

	@io/fadvise.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	gÁdvi£_cmd
;

27 
	$Ádvi£_hñp
()

29 
	`¥ötf
(
	`_
(

47 
	}
}

50 
	$Ádvi£_f
(

51 
¨gc
,

52 **
¨gv
)

54 
off64_t
 
off£t
 = 0, 
Àngth
 = 0;

55 
c
, 
ønge
 = 0, 
advi£
 = 
POSIX_FADV_NORMAL
;

57 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dƒsw")Ë!
EOF
) {

58 
c
) {

60 
advi£
 = 
POSIX_FADV_DONTNEED
;

61 
ønge
 = 1;

64 
advi£
 = 
POSIX_FADV_NOREUSE
;

65 
ønge
 = 1;

68 
advi£
 = 
POSIX_FADV_RANDOM
;

69 
ønge
 = 0;

72 
advi£
 = 
POSIX_FADV_SEQUENTIAL
;

73 
ønge
 = 0;

76 
advi£
 = 
POSIX_FADV_WILLNEED
;

77 
ønge
 = 1;

80  
	`comm™d_ußge
(&
Ádvi£_cmd
);

83 i‡(
ønge
) {

84 
size_t
 
blocksize
, 
£˘size
;

86 i‡(
›töd
 !
¨gc
 - 2)

87  
	`comm™d_ußge
(&
Ádvi£_cmd
);

88 
	`öô_cväum
(&
blocksize
, &
£˘size
);

89 
off£t
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

90 i‡(
off£t
 < 0) {

91 
	`¥ötf
(
	`_
("non-numeric offsetárgument -- %s\n"),

92 
¨gv
[
›töd
]);

95 
›töd
++;

96 
Àngth
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

97 i‡(
Àngth
 < 0) {

98 
	`¥ötf
(
	`_
("non-numericÜengthárgument -- %s\n"),

99 
¨gv
[
›töd
]);

102 } i‡(
›töd
 !
¨gc
) {

103  
	`comm™d_ußge
(&
Ádvi£_cmd
);

106 i‡(
	`posix_Ádvi£
(
fûe
->
fd
, 
off£t
, 
Àngth
, 
advi£
) < 0) {

107 
	`≥º‹
("fadvise");

111 
	}
}

114 
	$Ádvi£_öô
()

116 
Ádvi£_cmd
.
«me
 = "fadvise";

117 
Ádvi£_cmd
.
cfunc
 = 
Ádvi£_f
;

118 
Ádvi£_cmd
.
¨gmö
 = 0;

119 
Ádvi£_cmd
.
¨gmax
 = -1;

120 
Ádvi£_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

121 
Ádvi£_cmd
.
¨gs
 = 
	`_
("[-dnrsw] [offÜen]");

122 
Ádvi£_cmd
.
⁄ñöe
 = 
	`_
("advisory commands for sections ofá file");

123 
Ádvi£_cmd
.
hñp
 = 
Ádvi£_hñp
;

125 
	`add_comm™d
(&
Ádvi£_cmd
);

126 
	}
}

	@io/fiemap.c

19 
	~"∂©f‹m_defs.h
"

20 
	~"comm™d.h
"

21 
	~<löux/fõm≠.h
>

22 
	~"öô.h
"

23 
	~"io.h
"

25 
cmdöfo_t
 
	gfõm≠_cmd
;

28 
	$fõm≠_hñp
()

30 
	`¥ötf
(
	`_
(

49 
	}
}

52 
	$numÀn
(

53 
__u64
 
vÆ
,

54 
ba£
)

56 
__u64
 
tmp
;

57 
Àn
;

59 
Àn
 = 0, 
tmp
 = 
vÆ
;Åm∞> 0;Åm∞tmp/
ba£
)

60 
Àn
++;

61  (
Àn
 == 0 ? 1 :Üen);

62 
	}
}

65 
	$¥öt_vîbo£
(

66 
fõm≠_exã¡
 *
exã¡
,

67 
blocksize
,

68 
foff_w
,

69 
boff_w
,

70 
tŸ_w
,

71 
Êg_w
,

72 
max_exã¡s
,

73 *
cur_exã¡
,

74 
__u64
 *
œ°_logiˇl
)

76 
__u64
 
l°¨t
;

77 
__u64
 
Œa°
;

78 
__u64
 
Àn
;

79 
__u64
 
block
;

80 
lbuf
[48];

81 
bbuf
[48];

82 
Êgbuf
[16];

84 
Œa°
 = *
œ°_logiˇl
 / 
blocksize
;

85 
l°¨t
 = 
exã¡
->
„_logiˇl
 / 
blocksize
;

86 
Àn
 = 
exã¡
->
„_Àngth
 / 
blocksize
;

87 
block
 = 
exã¡
->
„_physiˇl
 / 
blocksize
;

89 
	`mem£t
(
lbuf
, 0, (lbuf));

90 
	`mem£t
(
bbuf
, 0, (bbuf));

92 i‡(*
cur_exã¡
 == 0) {

93 
	`¥ötf
("%4s: %-*†%-*†%*†%*s\n", 
	`_
("EXT"),

94 
foff_w
, 
	`_
("FILE-OFFSET"),

95 
boff_w
, 
	`_
("BLOCK-RANGE"),

96 
tŸ_w
, 
	`_
("TOTAL"),

97 
Êg_w
, 
	`_
("FLAGS"));

100 i‡(
l°¨t
 !
Œa°
) {

101 
	`¢¥ötf
(
lbuf
, ÷buf), "[%Œu..%Œu]:", 
Œa°
,

102 
l°¨t
 - 1ULL);

103 
	`¥ötf
("%4d: %-*†%-*†%*Œu\n", *
cur_exã¡
, 
foff_w
, 
lbuf
,

104 
boff_w
, 
	`_
("hﬁe"), 
tŸ_w
, 
l°¨t
 - 
Œa°
);

105 (*
cur_exã¡
)++;

106 
	`mem£t
(
lbuf
, 0, (lbuf));

109 i‡((*
cur_exã¡
 + 1Ë=
max_exã¡s
)

112 
	`¢¥ötf
(
lbuf
, ÷buf), "[%Œu..%Œu]:", 
l°¨t
,

113 
l°¨t
 + 
Àn
 - 1ULL);

114 
	`¢¥ötf
(
bbuf
, (bbuf), "%Œu..%Œu", 
block
, block + 
Àn
 - 1ULL);

115 
	`¢¥ötf
(
Êgbuf
, (Êgbuf), "0x%x", 
exã¡
->
„_Êags
);

116 
	`¥ötf
("%4d: %-*†%-*†%*Œu %*s\n", *
cur_exã¡
, 
foff_w
, 
lbuf
,

117 
boff_w
, 
bbuf
, 
tŸ_w
, 
Àn
, 
Êg_w
, 
Êgbuf
);

119 (*
cur_exã¡
)++;

120 *
œ°_logiˇl
 = 
exã¡
->
„_logiˇl
 +Éxã¡->
„_Àngth
;

121 
	}
}

124 
	$¥öt_∂aö
(

125 
fõm≠_exã¡
 *
exã¡
,

126 
lÊag
,

127 
blocksize
,

128 
max_exã¡s
,

129 *
cur_exã¡
,

130 
__u64
 *
œ°_logiˇl
)

132 
__u64
 
l°¨t
;

133 
__u64
 
Œa°
;

134 
__u64
 
block
;

135 
__u64
 
Àn
;

137 
Œa°
 = *
œ°_logiˇl
 / 
blocksize
;

138 
l°¨t
 = 
exã¡
->
„_logiˇl
 / 
blocksize
;

139 
Àn
 = 
exã¡
->
„_Àngth
 / 
blocksize
;

140 
block
 = 
exã¡
->
„_physiˇl
 / 
blocksize
;

142 i‡(
l°¨t
 !
Œa°
) {

143 
	`¥ötf
("\t%d: [%Œu..%Œu]: hﬁe", *
cur_exã¡
,

144 
Œa°
, 
l°¨t
 - 1ULL);

145 i‡(
lÊag
)

146 
	`¥ötf
(
	`_
(" %Œu blocks\n"), 
l°¨t
 - 
Œa°
);

148 
	`¥ötf
("\n");

149 (*
cur_exã¡
)++;

152 i‡((*
cur_exã¡
 + 1Ë=
max_exã¡s
)

155 
	`¥ötf
("\t%d: [%Œu..%Œu]: %Œu..%Œu", *
cur_exã¡
,

156 
l°¨t
,Ü°¨à+ 
Àn
 - 1ULL, 
block
,

157 
block
 + 
Àn
 - 1ULL);

159 i‡(
lÊag
)

160 
	`¥ötf
(
	`_
(" %Œu blocks\n"), 
Àn
);

162 
	`¥ötf
("\n");

163 (*
cur_exã¡
)++;

164 *
œ°_logiˇl
 = 
exã¡
->
„_logiˇl
 +Éxã¡->
„_Àngth
;

165 
	}
}

172 
	$ˇlc_¥öt_f‹m©
(

173 
fõm≠
 *fiemap,

174 
__u64
 
blocksize
,

175 *
foff_w
,

176 *
boff_w
,

177 *
tŸ_w
,

178 *
Êg_w
)

180 
i
;

181 
lbuf
[32];

182 
bbuf
[32];

183 
__u64
 
logiˇl
;

184 
__u64
 
block
;

185 
__u64
 
Àn
;

186 
fõm≠_exã¡
 *
exã¡
;

188 
i
 = 0; i < 
fõm≠
->
fm_m≠≥d_exã¡s
; i++) {

190 
exã¡
 = &
fõm≠
->
fm_exã¡s
[
i
];

191 
logiˇl
 = 
exã¡
->
„_logiˇl
 / 
blocksize
;

192 
Àn
 = 
exã¡
->
„_Àngth
 / 
blocksize
;

193 
block
 = 
exã¡
->
„_physiˇl
 / 
blocksize
;

195 
	`¢¥ötf
(
lbuf
, ÷buf), "[%Œu..%Œu]", 
logiˇl
,

196 
logiˇl
 + 
Àn
 - 1);

197 
	`¢¥ötf
(
bbuf
, (bbuf), "%Œu..%Œu", 
block
,

198 
block
 + 
Àn
 - 1);

199 *
foff_w
 = 
	`max
(*foff_w, 
	`°æí
(
lbuf
));

200 *
boff_w
 = 
	`max
(*boff_w, 
	`°æí
(
bbuf
));

201 *
tŸ_w
 = 
	`max
(*tŸ_w, 
	`numÀn
(
Àn
, 10));

202 *
Êg_w
 = 
	`max
(*Êg_w, 
	`numÀn
(
exã¡
->
„_Êags
, 16));

203 i‡(
exã¡
->
„_Êags
 & 
FIEMAP_EXTENT_LAST
)

206 
	}
}

209 
	$fõm≠_f
(

210 
¨gc
,

211 **
¨gv
)

213 
fõm≠
 *fiemap;

214 
max_exã¡s
 = 0;

215 
num_exã¡s
 = 32;

216 
œ°
 = 0;

217 
lÊag
 = 0;

218 
vÊag
 = 0;

219 
fõm≠_Êags
 = 
FIEMAP_FLAG_SYNC
;

220 
c
;

221 
i
;

222 
m≠_size
;

223 
ªt
;

224 
cur_exã¡
 = 0;

225 
foff_w
 = 16;

226 
boff_w
 = 16;

227 
tŸ_w
 = 5;

228 
Êg_w
 = 5;

229 
__u64
 
blocksize
 = 512;

230 
__u64
 
œ°_logiˇl
 = 0;

231 
°©
 
°
;

233 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "Æn:v")Ë!
EOF
) {

234 
c
) {

236 
fõm≠_Êags
 |
FIEMAP_FLAG_XATTR
;

239 
lÊag
 = 1;

242 
max_exã¡s
 = 
	`©oi
(
›èrg
);

245 
vÊag
++;

248  
	`comm™d_ußge
(&
fõm≠_cmd
);

252 i‡(
max_exã¡s
)

253 
num_exã¡s
 = 
	`mö
“um_exã¡s, 
max_exã¡s
);

254 
m≠_size
 = (
fõm≠
) +

255 (
num_exã¡s
 * (
fõm≠_exã¡
));

256 
fõm≠
 = 
	`mÆloc
(
m≠_size
);

257 i‡(!
fõm≠
) {

258 
	`Ârötf
(
°dîr
, 
	`_
("%s: malloc of %d bytes failed.\n"),

259 
¥og«me
, 
m≠_size
);

260 
exôcode
 = 1;

264 
	`¥ötf
("%s:\n", 
fûe
->
«me
);

266 !
œ°
 && ((
cur_exã¡
 + 1Ë!
max_exã¡s
)) {

267 i‡(
max_exã¡s
)

268 
num_exã¡s
 = 
	`mö
(num_extents,

269 
max_exã¡s
 - (
cur_exã¡
 + 1));

271 
	`mem£t
(
fõm≠
, 0, 
m≠_size
);

272 
fõm≠
->
fm_Êags
 = 
fõm≠_Êags
;

273 
fõm≠
->
fm_°¨t
 = 
œ°_logiˇl
;

274 
fõm≠
->
fm_Àngth
 = -1LL;

275 
fõm≠
->
fm_exã¡_cou¡
 = 
num_exã¡s
;

277 
ªt
 = 
	`io˘l
(
fûe
->
fd
, 
FS_IOC_FIEMAP
, ()
fõm≠
);

278 i‡(
ªt
 < 0) {

279 
	`Ârötf
(
°dîr
, "%s: ioctl(FS_IOC_FIEMAP) [\"%s\"]: "

280 "%s\n", 
¥og«me
, 
fûe
->
«me
, 
	`°ªº‹
(
î∫o
));

281 
	`‰ì
(
fõm≠
);

282 
exôcode
 = 1;

287 i‡(!
fõm≠
->
fm_m≠≥d_exã¡s
)

290 
i
 = 0; i < 
fõm≠
->
fm_m≠≥d_exã¡s
; i++) {

291 
fõm≠_exã¡
 *
exã¡
;

293 
exã¡
 = &
fõm≠
->
fm_exã¡s
[
i
];

294 i‡(
vÊag
) {

295 i‡(
cur_exã¡
 == 0) {

296 
	`ˇlc_¥öt_f‹m©
(
fõm≠
, 
blocksize
,

297 &
foff_w
, &
boff_w
,

298 &
tŸ_w
, &
Êg_w
);

301 
	`¥öt_vîbo£
(
exã¡
, 
blocksize
, 
foff_w
,

302 
boff_w
, 
tŸ_w
, 
Êg_w
,

303 
max_exã¡s
, &
cur_exã¡
,

304 &
œ°_logiˇl
);

306 
	`¥öt_∂aö
(
exã¡
, 
lÊag
, 
blocksize
,

307 
max_exã¡s
, &
cur_exã¡
,

308 &
œ°_logiˇl
);

310 i‡(
exã¡
->
„_Êags
 & 
FIEMAP_EXTENT_LAST
) {

311 
œ°
 = 1;

315 i‡((
cur_exã¡
 + 1Ë=
max_exã¡s
)

320 i‡((
cur_exã¡
 + 1Ë=
max_exã¡s
)

321 
out
;

323 
	`mem£t
(&
°
, 0, (st));

324 i‡(
	`f°©
(
fûe
->
fd
, &
°
)) {

325 
	`Ârötf
(
°dîr
, "%s: f°© faûed: %s\n", 
¥og«me
,

326 
	`°ªº‹
(
î∫o
));

327 
	`‰ì
(
fõm≠
);

328 
exôcode
 = 1;

332 i‡(
cur_exã¡
 && 
œ°_logiˇl
 < 
°
.
°_size
) {

333 
lbuf
[32];

335 
	`¢¥ötf
(
lbuf
, (lbuf), "[%llu..%llu]:",

336 
œ°_logiˇl
 / 
blocksize
, (
°
.
°_size
 / blocksize) - 1);

337 i‡(
vÊag
) {

338 
	`¥ötf
("%4d: %-*†%-*†%*Œu\n", 
cur_exã¡
,

339 
foff_w
, 
lbuf
, 
boff_w
, 
	`_
("hﬁe"), 
tŸ_w
,

340 (
°
.
°_size
 - 
œ°_logiˇl
Ë/ 
blocksize
);

342 
	`¥ötf
("\t%d: %†%s", 
cur_exã¡
, 
lbuf
,

343 
	`_
("hole"));

344 i‡(
lÊag
)

345 
	`¥ötf
(
	`_
(" %llu blocks\n"),

346 (
°
.
°_size
 - 
œ°_logiˇl
Ë/ 
blocksize
);

348 
	`¥ötf
("\n");

352 
out
:

353 
	`‰ì
(
fõm≠
);

355 
	}
}

358 
	$fõm≠_öô
()

360 
fõm≠_cmd
.
«me
 = "fiemap";

361 
fõm≠_cmd
.
cfunc
 = 
fõm≠_f
;

362 
fõm≠_cmd
.
¨gmö
 = 0;

363 
fõm≠_cmd
.
¨gmax
 = -1;

364 
fõm≠_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

365 
fõm≠_cmd
.
¨gs
 = 
	`_
("[-alv] [-nÇx]");

366 
fõm≠_cmd
.
⁄ñöe
 = 
	`_
("print block mapping forá file");

367 
fõm≠_cmd
.
hñp
 = 
fõm≠_hñp
;

369 
	`add_comm™d
(&
fõm≠_cmd
);

370 
	}
}

	@io/file.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~<sys/mm™.h
>

22 
	~"öô.h
"

23 
	~"io.h
"

25 
cmdöfo_t
 
	gfûe_cmd
;

26 
cmdöfo_t
 
	g¥öt_cmd
;

28 
fûeio_t
 *
	gfûëabÀ
;

29 
	gfûecou¡
;

30 
fûeio_t
 *
	gfûe
;

33 
	$¥öt_fûeio
(

34 
fûeio_t
 *
fûe
,

35 
ödex
,

36 
bø˚s
)

38 
	`¥ötf
(
	`_
("%c%03d%c %-14s (%s,%s,%s,%s%s%s%s%s)\n"),

39 
bø˚s
? '[' : ' ', 
ödex
, bø˚s? ']' : ' ', 
fûe
->
«me
,

40 
fûe
->
Êags
 & 
IO_FOREIGN
 ? 
	`_
("foreign") : _("xfs"),

41 
fûe
->
Êags
 & 
IO_OSYNC
 ? 
	`_
("sync") : _("non-sync"),

42 
fûe
->
Êags
 & 
IO_DIRECT
 ? 
	`_
("direct") : _("non-direct"),

43 
fûe
->
Êags
 & 
IO_READONLY
 ? 
	`_
("read-only") : _("read-write"),

44 
fûe
->
Êags
 & 
IO_REALTIME
 ? 
	`_
(",real-time") : "",

45 
fûe
->
Êags
 & 
IO_APPEND
 ? 
	`_
(",append-only") : "",

46 
fûe
->
Êags
 & 
IO_NONBLOCK
 ? 
	`_
(",non-block") : "",

47 
fûe
->
Êags
 & 
IO_TMPFILE
 ? 
	`_
(",tmpfile") : "");

48 
	}
}

51 
	$fûñi°_f
()

53 
i
;

55 
i
 = 0; i < 
fûecou¡
; i++)

56 
	`¥öt_fûeio
(&
fûëabÀ
[
i
], i, &fûëabÀ[i] =
fûe
);

58 
	}
}

61 
	$¥öt_f
(

62 
¨gc
,

63 **
¨gv
)

65 
	`fûñi°_f
();

66 
	`m≠li°_f
();

68 
	}
}

71 
	$fûe_f
(

72 
¨gc
,

73 **
¨gv
)

75 
i
;

77 i‡(
¨gc
 <= 1)

78  
	`fûñi°_f
();

79 
i
 = 
	`©oi
(
¨gv
[1]);

80 i‡(
i
 < 0 || i >
fûecou¡
) {

81 
	`¥ötf
(
	`_
("vÆuê%d i†ouào‡øngê(0-%d)\n"), 
i
, 
fûecou¡
-1);

83 
fûe
 = &
fûëabÀ
[
i
];

84 
	`fûñi°_f
();

87 
	}
}

90 
	$fûe_öô
()

92 
fûe_cmd
.
«me
 = "file";

93 
fûe_cmd
.
Æäame
 = "f";

94 
fûe_cmd
.
¨gs
 = 
	`_
("[N]");

95 
fûe_cmd
.
cfunc
 = 
fûe_f
;

96 
fûe_cmd
.
¨gmö
 = 0;

97 
fûe_cmd
.
¨gmax
 = 1;

98 
fûe_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
 | 
CMD_FLAG_ONESHOT
;

99 
fûe_cmd
.
⁄ñöe
 = 
	`_
("setÅhe current file");

101 
¥öt_cmd
.
«me
 = "print";

102 
¥öt_cmd
.
Æäame
 = "p";

103 
¥öt_cmd
.
cfunc
 = 
¥öt_f
;

104 
¥öt_cmd
.
¨gmö
 = 0;

105 
¥öt_cmd
.
¨gmax
 = 0;

106 
¥öt_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_NOFILE_OK
 | 
CMD_FOREIGN_OK
 |

107 
CMD_FLAG_ONESHOT
;

108 
¥öt_cmd
.
⁄ñöe
 = 
	`_
("list current open filesánd memory mappings");

110 
	`add_comm™d
(&
fûe_cmd
);

111 
	`add_comm™d
(&
¥öt_cmd
);

112 
	}
}

	@io/freeze.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	g‰ìze_cmd
;

25 
cmdöfo_t
 
	gthaw_cmd
;

28 
	$‰ìze_f
(

29 
¨gc
,

30 **
¨gv
)

32 
Àvñ
 = 1;

34 i‡(
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_FREEZE
, &
Àvñ
) < 0) {

35 
	`Ârötf
(
°dîr
,

36 
	`_
("%s: cannot freeze filesystemát %s: %s\n"),

37 
¥og«me
, 
fûe
->
«me
, 
	`°ªº‹
(
î∫o
));

38 
exôcode
 = 1;

42 
	}
}

45 
	$thaw_f
(

46 
¨gc
,

47 **
¨gv
)

49 
Àvñ
 = 1;

51 i‡(
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_THAW
, &
Àvñ
) < 0) {

52 
	`Ârötf
(
°dîr
,

53 
	`_
("%s: cannot unfreeze filesystem mountedát %s: %s\n"),

54 
¥og«me
, 
fûe
->
«me
, 
	`°ªº‹
(
î∫o
));

55 
exôcode
 = 1;

59 
	}
}

62 
	$‰ìze_öô
()

64 
‰ìze_cmd
.
«me
 = "freeze";

65 
‰ìze_cmd
.
cfunc
 = 
‰ìze_f
;

66 
‰ìze_cmd
.
¨gmö
 = 0;

67 
‰ìze_cmd
.
¨gmax
 = 0;

68 
‰ìze_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
 | 
CMD_FLAG_ONESHOT
;

69 
‰ìze_cmd
.
⁄ñöe
 = 
	`_
("freeze filesystem of current file");

71 
thaw_cmd
.
«me
 = "thaw";

72 
thaw_cmd
.
cfunc
 = 
thaw_f
;

73 
thaw_cmd
.
¨gmö
 = 0;

74 
thaw_cmd
.
¨gmax
 = 0;

75 
thaw_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
 | 
CMD_FLAG_ONESHOT
;

76 
thaw_cmd
.
⁄ñöe
 = 
	`_
("unfreeze filesystem of current file");

78 i‡(
ex≥π
) {

79 
	`add_comm™d
(&
‰ìze_cmd
);

80 
	`add_comm™d
(&
thaw_cmd
);

82 
	}
}

	@io/fsync.c

19 
	~"∂©f‹m_defs.h
"

20 
	~"comm™d.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	gfsync_cmd
;

25 
cmdöfo_t
 
	gfd©async_cmd
;

28 
	$fsync_f
(

29 
¨gc
,

30 **
¨gv
)

32 i‡(
	`fsync
(
fûe
->
fd
) < 0) {

33 
	`≥º‹
("fsync");

37 
	}
}

40 
	$fd©async_f
(

41 
¨gc
,

42 **
¨gv
)

44 i‡(
	`fd©async
(
fûe
->
fd
) < 0) {

45 
	`≥º‹
("fdatasync");

49 
	}
}

52 
	$fsync_öô
()

54 
fsync_cmd
.
«me
 = "fsync";

55 
fsync_cmd
.
Æäame
 = "s";

56 
fsync_cmd
.
cfunc
 = 
fsync_f
;

57 
fsync_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

58 
fsync_cmd
.
⁄ñöe
 =

59 
	`_
("calls fsync(2)Åo flusháll in-core file stateÅo disk");

61 
fd©async_cmd
.
«me
 = "fdatasync";

62 
fd©async_cmd
.
Æäame
 = "ds";

63 
fd©async_cmd
.
cfunc
 = 
fd©async_f
;

64 
fd©async_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

65 
fd©async_cmd
.
⁄ñöe
 =

66 
	`_
("calls fdatasync(2)Åo flushÅhe files in-core dataÅo disk");

68 
	`add_comm™d
(&
fsync_cmd
);

69 
	`add_comm™d
(&
fd©async_cmd
);

70 
	}
}

	@io/getrusage.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~<sys/time.h
>

22 
	~<sys/ªsour˚.h
>

23 
	~"öô.h
"

25 
cmdöfo_t
 
	ggërußge_cmd
;

36 
	$gërußge_f
(

37 
¨gc
,

38 **
¨gv
)

40 
timevÆ
 
wÆl˛k
, 
timíow
;

41 
rußge
Ñusage;

42 
u§time
, 
sy°ime
, 
ñ≠£d
, 
p˘_˝u
;

43 
ts
[64];

44 
CÊag
, 
vÊag
;

45 
c
;

47 
CÊag
 = 
vÊag
 = 0;

48 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "Cv")Ë!
EOF
) {

49 
c
) {

51 
CÊag
 = 1;

54 
vÊag
 = 1;

57  
	`comm™d_ußge
(&
gërußge_cmd
);

60 i‡(
›töd
 !
¨gc
)

61  
	`comm™d_ußge
(&
gërußge_cmd
);

63 i‡(
	`gërußge
(
RUSAGE_SELF
, &
rußge
) < 0) {

64 
	`≥º‹
("getrusage");

68 
	`gëtimeofday
(&
timíow
, 
NULL
);

69 
wÆl˛k
 = 
	`tsub
(
timíow
, 
°›w©ch
);

70 
ñ≠£d
 = ()
wÆl˛k
.
tv_£c
 +

71 (()
wÆl˛k
.
tv_u£c
 / 1000000.0);

72 
u§time
 = ()
rußge
.
ru_utime
.
tv_£c
 +

73 (()
rußge
.
ru_utime
.
tv_u£c
 / 1000000.0);

74 
sy°ime
 = ()
rußge
.
ru_°ime
.
tv_£c
 +

75 (()
rußge
.
ru_°ime
.
tv_u£c
 / 1000000.0);

76 i‡(
ñ≠£d
 < 
u§time
 + 
sy°ime
)

77 
p˘_˝u
 = 100.0;

79 
p˘_˝u
 = ((
u§time
 + 
sy°ime
Ë/ 
ñ≠£d
) * 100;

80 
c
 = 
CÊag
 ? 
VERBOSE_FIXED_TIME
 : 
TERSE_FIXED_TIME
;

81 
	`time°r
(&
wÆl˛k
, 
ts
, —s), 
c
);

83 i‡(
CÊag
)

84 
	`¥ötf
("%.3f,%.3f,%s,%.1f,%ld,%ld,%ld,%ld,%ld,%ld,%ld\n",

85 
u§time
, 
sy°ime
, 
ts
, 
p˘_˝u
,

86 
rußge
.
ru_majÊt
,Ñußge.
ru_möÊt
,Ñußge.
ru_nsw≠
,

87 
rußge
.
ru_öblock
,Ñußge.
ru_oublock
,

88 
rußge
.
ru_nvcsw
,Ñußge.
ru_nivcsw
);

89 i‡(
vÊag
)

90 
	`¥ötf
("%.2fuser %.2fsystem %selapsed %.0f%%CPU "

94 
u§time
, 
sy°ime
, 
ts
, 
p˘_˝u
,

95 
rußge
.
ru_ixrss
,Ñußge.
ru_idrss
,Ñußge.
ru_maxrss
,

96 
rußge
.
ru_öblock
,Ñußge.
ru_oublock
,

97 
rußge
.
ru_majÊt
,Ñußge.
ru_möÊt
,Ñußge.
ru_nsw≠
);

99 
	`¥ötf
("%.3fu %.3fs %s %.1f%%\t"

101 
u§time
, 
sy°ime
, 
ts
, 
p˘_˝u
,

102 
rußge
.
ru_maxrss
,Ñußge.
ru_ixrss
,

103 
rußge
.
ru_öblock
,Ñußge.
ru_oublock
,

104 
rußge
.
ru_majÊt
,Ñußge.
ru_nsw≠
);

106 
	}
}

109 
	$gërußge_öô
()

111 
gërußge_cmd
.
«me
 = "getrusage";

112 
gërußge_cmd
.
Æäame
 = "g";

113 
gërußge_cmd
.
¨gmö
 = 0;

114 
gërußge_cmd
.
¨gmax
 = -1;

115 
gërußge_cmd
.
cfunc
 = 
gërußge_f
;

116 
gërußge_cmd
.
Êags
 = 
CMD_NOFILE_OK
 | 
CMD_NOMAP_OK
 |

117 
CMD_FOREIGN_OK
 | 
CMD_FLAG_ONESHOT
;

118 
gërußge_cmd
.
⁄ñöe
 = 
	`_
("reportÖrocessÑesource usage");

120 i‡(
ex≥π
)

121 
	`add_comm™d
(&
gërußge_cmd
);

122 
	}
}

	@io/imap.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	gim≠_cmd
;

27 
	$im≠_f
(
¨gc
, **
¨gv
)

29 
cou¡
;

30 
√¡
;

31 
i
;

32 
__u64
 
œ°
 = 0;

33 
xfs_öogΩ_t
 *
t
;

34 
xfs_fs›_bulkªq_t
 
bulkªq
;

36 i‡(
¨gc
 != 2)

37 
√¡
 = 1;

39 
√¡
 = 
	`©oi
(
¨gv
[1]);

41 
t
 = 
	`mÆloc
(
√¡
 * (*t));

42 i‡(!
t
)

45 
bulkªq
.
œ°ù
 = &
œ°
;

46 
bulkªq
.
icou¡
 = 
√¡
;

47 
bulkªq
.
ubuf„r
 = (*)
t
;

48 
bulkªq
.
ocou¡
 = &
cou¡
;

50 
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_FSINUMBERS
, &
bulkªq
) == 0) {

51 i‡(
cou¡
 == 0)

52 
out_‰ì
;

53 
i
 = 0; i < 
cou¡
; i++) {

54 
	`¥ötf
(
	`_
("ino %10llu count %2d mask %016llx\n"),

55 ()
t
[
i
].
xi_°¨töo
,

56 
t
[
i
].
xi_Æloccou¡
,

57 ()
t
[
i
].
xi_Ælocmask
);

60 
	`≥º‹
("xfsctl(XFS_IOC_FSINUMBERS)");

61 
exôcode
 = 1;

62 
out_‰ì
:

63 
	`‰ì
(
t
);

65 
	}
}

68 
	$im≠_öô
()

70 
im≠_cmd
.
«me
 = "imap";

71 
im≠_cmd
.
cfunc
 = 
im≠_f
;

72 
im≠_cmd
.
¨gmö
 = 0;

73 
im≠_cmd
.
¨gmax
 = 1;

74 
im≠_cmd
.
¨gs
 = 
	`_
("[nentries]");

75 
im≠_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FLAG_ONESHOT
;

76 
im≠_cmd
.
⁄ñöe
 = 
	`_
("inode map for filesystem of current file");

78 i‡(
ex≥π
)

79 
	`add_comm™d
(&
im≠_cmd
);

80 
	}
}

	@io/init.c

19 
	~<±hªad.h
>

20 
	~"∂©f‹m_defs.h
"

21 
	~"comm™d.h
"

22 
	~"öput.h
"

23 
	~"öô.h
"

24 
	~"io.h
"

26 *
	g¥og«me
;

27 
	gexôcode
;

28 
	gex≥π
;

29 
	gidÀthªad
;

30 
size_t
 
	g∑gesize
;

31 
timevÆ
 
	g°›w©ch
;

34 
	$ußge
()

36 
	`Ârötf
(
°dîr
,

37 
	`_
("Usage: %s [-adfinrRstVx] [-m mode] [-pÖrog] [[-c|-C] cmd]... file\n"),

38 
¥og«me
);

39 
	`exô
(1);

40 
	}
}

43 
	$öô_cväum
(

44 
size_t
 *
blocksize
,

45 
size_t
 *
£˘size
)

47 i‡(!
fûe
 || (fûe->
Êags
 & 
IO_FOREIGN
)) {

48 *
blocksize
 = 4096;

49 *
£˘size
 = 512;

51 *
blocksize
 = 
fûe
->
geom
.blocksize;

52 *
£˘size
 = 
fûe
->
geom
.sectsize;

54 
	}
}

57 
	$öô_comm™ds
()

59 
	`©å_öô
();

60 
	`bm≠_öô
();

61 
	`c›y_ønge_öô
();

62 
	`cowextsize_öô
();

63 
	`í¸y±_öô
();

64 
	`Ádvi£_öô
();

65 
	`fõm≠_öô
();

66 
	`fûe_öô
();

67 
	`Êök_öô
();

68 
	`‰ìze_öô
();

69 
	`fsync_öô
();

70 
	`gërußge_öô
();

71 
	`hñp_öô
();

72 
	`im≠_öô
();

73 
	`öje˘_öô
();

74 
	`madvi£_öô
();

75 
	`möc‹e_öô
();

76 
	`mm≠_öô
();

77 
	`›í_öô
();

78 
	`∑ª¡_öô
();

79 
	`¥ód_öô
();

80 
	`¥óŒoc_öô
();

81 
	`pwrôe_öô
();

82 
	`quô_öô
();

83 
	`ªaddú_öô
();

84 
	`ªÊök_öô
();

85 
	`ªsblks_öô
();

86 
	`£ek_öô
();

87 
	`£ndfûe_öô
();

88 
	`shutdown_öô
();

89 
	`sync_öô
();

90 
	`sync_ønge_öô
();

91 
	`åunˇã_öô
();

92 
	`utimes_öô
();

93 
	}
}

101 
	$fûëabÀ_ôî©‹
(

102 
ödex
)

104 i‡(
ödex
 >
fûecou¡
)

106 
fûe
 = &
fûëabÀ
[
ödex
++];

107  
ödex
;

108 
	}
}

111 
	$öô_check_comm™d
(

112 c⁄° 
cmdöfo_t
 *
˘
)

114 i‡(!
fûe
 && !(
˘
->
Êags
 & 
CMD_NOFILE_OK
)) {

115 
	`Ârötf
(
°dîr
, 
	`_
("no filesáre open,Åry 'help open'\n"));

118 i‡(!
m≠pög
 && !(
˘
->
Êags
 & 
CMD_NOMAP_OK
)) {

119 
	`Ârötf
(
°dîr
, 
	`_
("no mappedÑegions,Åry 'help mmap'\n"));

122 i‡(
fûe
 && !(
˘
->
Êags
 & 
CMD_FOREIGN_OK
) &&

123 (
fûe
->
Êags
 & 
IO_FOREIGN
)) {

124 
	`Ârötf
(
°dîr
,

125 
	`_
("foreign fileáctive, %s command is for XFS filesystems only\n"),

126 
˘
->
«me
);

130 
	}
}

133 
	$öô
(

134 
¨gc
,

135 **
¨gv
)

137 
c
, 
Êags
 = 0;

138 *
•
;

139 
mode_t
 
mode
 = 0600;

140 
xfs_fs›_geom_t
 
geomëry
 = { 0 };

142 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

143 
	`£éoˇÀ
(
LC_ALL
, "");

144 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

145 
	`ãxtdomaö
(
PACKAGE
);

147 
∑gesize
 = 
	`gë∑gesize
();

148 
	`gëtimeofday
(&
°›w©ch
, 
NULL
);

150 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "ac:C:dFfim:p:ƒR°TVx")Ë!
EOF
) {

151 
c
) {

153 
Êags
 |
IO_APPEND
;

156 
	`add_u£r_comm™d
(
›èrg
);

159 
	`add_⁄eshŸ_u£r_comm™d
(
›èrg
);

162 
Êags
 |
IO_DIRECT
;

168 
Êags
 |
IO_CREAT
;

171 
idÀthªad
 = 1;

174 
mode
 = 
	`°πoul
(
›èrg
, &
•
, 0);

175 i‡(!
•
 || s∞=
›èrg
) {

176 
	`Ârötf
(
°dîr
, 
	`_
("non-numeric mode -- %s\n"),

177 
›èrg
);

178 
	`exô
(1);

182 
Êags
 |
IO_NONBLOCK
;

185 
¥og«me
 = 
›èrg
;

188 
Êags
 |
IO_READONLY
;

191 
Êags
 |
IO_OSYNC
;

194 
Êags
 |
IO_TRUNC
;

197 
Êags
 |
IO_REALTIME
;

200 
Êags
 |
IO_TMPFILE
;

203 
ex≥π
 = 1;

206 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
¥og«me
, 
VERSION
);

207 
	`exô
(0);

209 
	`ußge
();

213 
›töd
 < 
¨gc
) {

214 i‡((
c
 = 
	`›ífûe
(
¨gv
[
›töd
], &
geomëry
, 
Êags
, 
mode
)) < 0)

215 
	`exô
(1);

216 i‡(!
	`∂©f‹m_ã°_xfs_fd
(
c
))

217 
Êags
 |
IO_FOREIGN
;

218 i‡(
	`addfûe
(
¨gv
[
›töd
], 
c
, &
geomëry
, 
Êags
) < 0)

219 
	`exô
(1);

220 
›töd
++;

223 
	`öô_comm™ds
();

224 
	`add_comm™d_ôî©‹
(
fûëabÀ_ôî©‹
);

225 
	`add_check_comm™d
(
öô_check_comm™d
);

226 
	}
}

235 
	$idÀ_lo›
(*
¨g
)

238 
	`∑u£
();

239 
	}
}

242 
	$°¨t_idÀ_thªad
()

244 
±hªad_t
 
t
;

246 i‡(
	`±hªad_¸óã
(&
t
, 
NULL
, 
idÀ_lo›
, NULL)) {

247 
	`Ârötf
(
°dîr
, "Error creating idleÅhread\n");

248 
	`exô
(1);

250 
	}
}

253 
	$maö
(

254 
¨gc
,

255 **
¨gv
)

257 
	`öô
(
¨gc
, 
¨gv
);

258 i‡(
idÀthªad
)

259 
	`°¨t_idÀ_thªad
();

260 
	`comm™d_lo›
();

261  
exôcode
;

262 
	}
}

	@io/init.h

19 
	#CMD_NOFILE_OK
 (1<<0Ë

	)

20 
	#CMD_NOMAP_OK
 (1<<1Ë

	)

21 
	#CMD_FOREIGN_OK
 
CMD_FLAG_FOREIGN_OK


	)

23 *
¥og«me
;

24 
exôcode
;

25 
ex≥π
;

26 
size_t
 
∑gesize
;

27 
timevÆ
 
°›w©ch
;

29 
öô_cväum
(
size_t
 *
blocksize
, size_à*
£˘size
);

	@io/inject.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	göje˘_cmd
;

27 
	$îr‹_èg
(*
«me
)

30 
èg
;

31 *
«me
;

32 } *
e
, 
eÊags
[] = {

33 
	#XFS_ERRTAG_NOERROR
 0

	)

34 { 
XFS_ERRTAG_NOERROR
, "noerror" },

35 
	#XFS_ERRTAG_IFLUSH_1
 1

	)

36 { 
XFS_ERRTAG_IFLUSH_1
, "iflush1" },

37 
	#XFS_ERRTAG_IFLUSH_2
 2

	)

38 { 
XFS_ERRTAG_IFLUSH_2
, "iflush2" },

39 
	#XFS_ERRTAG_IFLUSH_3
 3

	)

40 { 
XFS_ERRTAG_IFLUSH_3
, "iflush3" },

41 
	#XFS_ERRTAG_IFLUSH_4
 4

	)

42 { 
XFS_ERRTAG_IFLUSH_4
, "iflush4" },

43 
	#XFS_ERRTAG_IFLUSH_5
 5

	)

44 { 
XFS_ERRTAG_IFLUSH_5
, "iflush5" },

45 
	#XFS_ERRTAG_IFLUSH_6
 6

	)

46 { 
XFS_ERRTAG_IFLUSH_6
, "iflush6" },

47 
	#XFS_ERRTAG_DA_READ_BUF
 7

	)

48 { 
XFS_ERRTAG_DA_READ_BUF
, "dareadbuf" },

49 
	#XFS_ERRTAG_BTREE_CHECK_LBLOCK
 8

	)

50 { 
XFS_ERRTAG_BTREE_CHECK_LBLOCK
, "btree_chk_lblk" },

51 
	#XFS_ERRTAG_BTREE_CHECK_SBLOCK
 9

	)

52 { 
XFS_ERRTAG_BTREE_CHECK_SBLOCK
, "btree_chk_sblk" },

53 
	#XFS_ERRTAG_ALLOC_READ_AGF
 10

	)

54 { 
XFS_ERRTAG_ALLOC_READ_AGF
, "readagf" },

55 
	#XFS_ERRTAG_IALLOC_READ_AGI
 11

	)

56 { 
XFS_ERRTAG_IALLOC_READ_AGI
, "readagi" },

57 
	#XFS_ERRTAG_ITOBP_INOTOBP
 12

	)

58 { 
XFS_ERRTAG_ITOBP_INOTOBP
, "itobp" },

59 
	#XFS_ERRTAG_IUNLINK
 13

	)

60 { 
XFS_ERRTAG_IUNLINK
, "iunlink" },

61 
	#XFS_ERRTAG_IUNLINK_REMOVE
 14

	)

62 { 
XFS_ERRTAG_IUNLINK_REMOVE
, "iunlinkrm" },

63 
	#XFS_ERRTAG_DIR_INO_VALIDATE
 15

	)

64 { 
XFS_ERRTAG_DIR_INO_VALIDATE
, "dirinovalid" },

65 
	#XFS_ERRTAG_BULKSTAT_READ_CHUNK
 16

	)

66 { 
XFS_ERRTAG_BULKSTAT_READ_CHUNK
, "bulkstat" },

67 
	#XFS_ERRTAG_IODONE_IOERR
 17

	)

68 { 
XFS_ERRTAG_IODONE_IOERR
, "logiodone" },

69 
	#XFS_ERRTAG_STRATREAD_IOERR
 18

	)

70 { 
XFS_ERRTAG_STRATREAD_IOERR
, "stratread" },

71 
	#XFS_ERRTAG_STRATCMPL_IOERR
 19

	)

72 { 
XFS_ERRTAG_STRATCMPL_IOERR
, "stratcmpl" },

73 
	#XFS_ERRTAG_DIOWRITE_IOERR
 20

	)

74 { 
XFS_ERRTAG_DIOWRITE_IOERR
, "diowrite" },

75 
	#XFS_ERRTAG_BMAPIFORMAT
 21

	)

76 { 
XFS_ERRTAG_BMAPIFORMAT
, "bmapifmt" },

77 
	#XFS_ERRTAG_FREE_EXTENT
 22

	)

78 { 
XFS_ERRTAG_FREE_EXTENT
, "free_extent" },

79 
	#XFS_ERRTAG_RMAP_FINISH_ONE
 23

	)

80 { 
XFS_ERRTAG_RMAP_FINISH_ONE
, "rmap_finish_one" },

81 
	#XFS_ERRTAG_REFCOUNT_CONTINUE_UPDATE
 24

	)

82 { 
XFS_ERRTAG_REFCOUNT_CONTINUE_UPDATE
, "refcount_continue_update" },

83 
	#XFS_ERRTAG_REFCOUNT_FINISH_ONE
 25

	)

84 { 
XFS_ERRTAG_REFCOUNT_FINISH_ONE
, "refcount_finish_one" },

85 
	#XFS_ERRTAG_BMAP_FINISH_ONE
 26

	)

86 { 
XFS_ERRTAG_BMAP_FINISH_ONE
, "bmap_finish_one" },

87 
	#XFS_ERRTAG_AG_RESV_CRITICAL
 27

	)

88 { 
XFS_ERRTAG_AG_RESV_CRITICAL
, "ag_resv_critical" },

89 
	#XFS_ERRTAG_MAX
 28

	)

90 { 
XFS_ERRTAG_MAX
, 
NULL
 }

92 
cou¡
;

95 i‡(
«me
) {

96 
e
 = 
eÊags
;É->
«me
;É++)

97 i‡(
	`°rcmp
(
«me
, 
e
->name) == 0)

98  
e
->
èg
;

103 
	`Âuts
("ègs: [ ", 
°dout
);

104 
cou¡
 = 0, 
e
 = 
eÊags
;É->
«me
;É++, count++) {

105 i‡(
cou¡
) {

106 
	`Âuts
(", ", 
°dout
);

107 i‡(!(
cou¡
 % 5))

108 
	`Âuts
("\n\t", 
°dout
);

110 
	`Âuts
(
e
->
«me
, 
°dout
);

112 
	`Âuts
(" ]\n", 
°dout
);

114 
	}
}

117 
	$öje˘_hñp
()

119 
	`¥ötf
(
	`_
(

130 
	}
}

133 
	$öje˘_f
(

134 
¨gc
,

135 **
¨gv
)

137 
xfs_îr‹_öje˘i⁄_t
 
îr‹
;

138 
comm™d
 = 
XFS_IOC_ERROR_INJECTION
;

140 i‡(
¨gc
 == 1)

141  
	`îr‹_èg
(
NULL
);

143 --
¨gc
 > 0) {

144 
îr‹
.
fd
 = 
fûe
->fd;

145 i‡((
îr‹
.
îπag
 = 
	`îr‹_èg
(
¨gv
[
¨gc
])) < 0) {

146 
	`Ârötf
(
°dîr
, 
	`_
("nÿsuchÅag -- %s\n"), 
¨gv
[1]);

149 i‡(
îr‹
.
îπag
 =
XFS_ERRTAG_NOERROR
)

150 
comm™d
 = 
XFS_IOC_ERROR_CLEARALL
;

151 i‡((
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
comm™d
, &
îr‹
)) < 0) {

152 
	`≥º‹
("XFS_IOC_ERROR_INJECTION");

157 
	}
}

160 
	$öje˘_öô
()

162 
öje˘_cmd
.
«me
 = "inject";

163 
öje˘_cmd
.
cfunc
 = 
öje˘_f
;

164 
öje˘_cmd
.
¨gmö
 = 0;

165 
öje˘_cmd
.
¨gmax
 = -1;

166 
öje˘_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FLAG_ONESHOT
;

167 
öje˘_cmd
.
¨gs
 = 
	`_
("[tag ...]");

168 
öje˘_cmd
.
⁄ñöe
 = 
	`_
("injectÉrrors intoá filesystem");

169 
öje˘_cmd
.
hñp
 = 
öje˘_hñp
;

171 i‡(
ex≥π
)

172 
	`add_comm™d
(&
öje˘_cmd
);

173 
	}
}

	@io/io.h

19 
	~"xfs.h
"

24 
	#IO_RANDOM
 ( 0)

	)

25 
	#IO_FORWARD
 ( 1)

	)

26 
	#IO_BACKWARD
 (-1)

	)

31 
	#IO_READONLY
 (1<<0)

	)

32 
	#IO_DIRECT
 (1<<1)

	)

33 
	#IO_REALTIME
 (1<<2)

	)

34 
	#IO_APPEND
 (1<<3)

	)

35 
	#IO_OSYNC
 (1<<4)

	)

36 
	#IO_CREAT
 (1<<5)

	)

37 
	#IO_TRUNC
 (1<<6)

	)

38 
	#IO_FOREIGN
 (1<<7)

	)

39 
	#IO_NONBLOCK
 (1<<8)

	)

40 
	#IO_TMPFILE
 (1<<9)

	)

45 
	sfûeio
 {

46 
	mfd
;

47 
	mÊags
;

48 *
	m«me
;

49 
xfs_fs›_geom_t
 
	mgeom
;

50 } 
	tfûeio_t
;

52 
fûeio_t
 *
fûëabÀ
;

53 
fûecou¡
;

54 
fûeio_t
 *
fûe
;

55 
fûñi°_f
();

60 
	smm≠_ªgi⁄
 {

61 *
	maddr
;

62 
size_t
 
	mÀngth
;

63 
off64_t
 
	moff£t
;

64 
	m¥Ÿ
;

65 *
	m«me
;

66 } 
	tmm≠_ªgi⁄_t
;

68 
mm≠_ªgi⁄_t
 *
m≠èbÀ
;

69 
m≠cou¡
;

70 
mm≠_ªgi⁄_t
 *
m≠pög
;

71 
m≠li°_f
();

72 *
check_m≠pög_ønge
(
mm≠_ªgi⁄_t
 *, 
off64_t
, 
size_t
, );

78 
off64_t
 
fûesize
();

79 
›ífûe
(*, 
xfs_fs›_geom_t
 *, , 
mode_t
);

80 
addfûe
(*, , 
xfs_fs›_geom_t
 *, );

81 
¥ötx©å
(
uöt
, , , const *, , );

83 
ªcur£_Æl
;

84 
ªcur£_dú
;

86 *
buf„r
;

87 
size_t
 
buf„rsize
;

88 
ve˘‹s
;

89 
iovec
 *
iov
;

90 
Æloc_buf„r
(
size_t
, , );

91 
ªad_buf„r
(, 
off64_t
, , *,

93 
dump_buf„r
(
off64_t
, 
ssize_t
);

95 
©å_öô
();

96 
bm≠_öô
();

97 
í¸y±_öô
();

98 
fûe_öô
();

99 
Êök_öô
();

100 
‰ìze_öô
();

101 
fsync_öô
();

102 
gërußge_öô
();

103 
hñp_öô
();

104 
im≠_öô
();

105 
öje˘_öô
();

106 
mm≠_öô
();

107 
›í_öô
();

108 
∑ª¡_öô
();

109 
¥ód_öô
();

110 
¥óŒoc_öô
();

111 
pwrôe_öô
();

112 
quô_öô
();

113 
£ek_öô
();

114 
shutdown_öô
();

115 
sync_öô
();

116 
åunˇã_öô
();

117 
utimes_öô
();

119 #ifde‡
HAVE_FADVISE


120 
Ádvi£_öô
();

122 
	#Ádvi£_öô
(Ëdÿ{ } 0)

	)

125 #ifde‡
HAVE_RESBLKS


126 
ªsblks_öô
();

128 
	#ªsblks_öô
(Ëdÿ{ } 0)

	)

131 #ifde‡
HAVE_SENDFILE


132 
£ndfûe_öô
();

134 
	#£ndfûe_öô
(Ëdÿ{ } 0)

	)

137 #ifde‡
HAVE_MADVISE


138 
madvi£_öô
();

140 
	#madvi£_öô
(Ëdÿ{ } 0)

	)

143 #ifde‡
HAVE_MINCORE


144 
möc‹e_öô
();

146 
	#möc‹e_öô
(Ëdÿ{ } 0)

	)

149 #ifde‡
HAVE_FIEMAP


150 
fõm≠_öô
();

152 
	#fõm≠_öô
(Ëdÿ{ } 0)

	)

155 #ifde‡
HAVE_COPY_FILE_RANGE


156 
c›y_ønge_öô
();

158 
	#c›y_ønge_öô
(Ëdÿ{ } 0)

	)

161 #ifde‡
HAVE_SYNC_FILE_RANGE


162 
sync_ønge_öô
();

164 
	#sync_ønge_öô
(Ëdÿ{ } 0)

	)

167 #ifde‡
HAVE_READDIR


168 
ªaddú_öô
();

170 
	#ªaddú_öô
(Ëdÿ{ } 0)

	)

173 
ªÊök_öô
();

175 
cowextsize_öô
();

	@io/link.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 #i‚de‡
AT_EMPTY_PATH


25 
	#AT_EMPTY_PATH
 0x1000

	)

28 
cmdöfo_t
 
	gÊök_cmd
;

31 
	$Êök_hñp
()

33 
	`¥ötf
(
	`_
(

38 
	}
}

41 
	$Êök_f
(

42 
¨gc
,

43 **
¨gv
)

45 i‡(
¨gc
 != 2)

46  
	`comm™d_ußge
(&
Êök_cmd
);

48 i‡(
	`lök©
(
fûe
->
fd
, "", 
AT_FDCWD
, 
¨gv
[1], 
AT_EMPTY_PATH
) < 0) {

49 
	`≥º‹
("flink");

53 
	}
}

56 
	$Êök_öô
()

58 
Êök_cmd
.
«me
 = "flink";

59 
Êök_cmd
.
cfunc
 = 
Êök_f
;

60 
Êök_cmd
.
¨gmö
 = 1;

61 
Êök_cmd
.
¨gmax
 = 1;

62 
Êök_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
 | 
CMD_FLAG_ONESHOT
;

63 
Êök_cmd
.
¨gs
 = 
	`_
("filename");

64 
Êök_cmd
.
⁄ñöe
 =

65 
	`_
("linkÅhe open file descriptorÅoÅhe supplied filename");

66 
Êök_cmd
.
hñp
 = 
Êök_hñp
;

68 
	`add_comm™d
(&
Êök_cmd
);

69 
	}
}

	@io/madvise.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~<sys/mm™.h
>

22 
	~"öô.h
"

23 
	~"io.h
"

25 
cmdöfo_t
 
	gmadvi£_cmd
;

28 
	$madvi£_hñp
()

30 
	`¥ötf
(
	`_
(

47 
	}
}

50 
	$madvi£_f
(

51 
¨gc
,

52 **
¨gv
)

54 
off64_t
 
off£t
, 
Œígth
;

55 
size_t
 
Àngth
;

56 *
°¨t
;

57 
advi£
 = 
MADV_NORMAL
, 
c
;

58 
size_t
 
blocksize
, 
£˘size
;

60 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "drsw")Ë!
EOF
) {

61 
c
) {

63 
advi£
 = 
MADV_DONTNEED
;

66 
advi£
 = 
MADV_RANDOM
;

69 
advi£
 = 
MADV_SEQUENTIAL
;

72 
advi£
 = 
MADV_WILLNEED
;

75  
	`comm™d_ußge
(&
madvi£_cmd
);

79 i‡(
›töd
 =
¨gc
) {

80 
off£t
 = 
m≠pög
->offset;

81 
Àngth
 = 
m≠pög
->length;

82 } i‡(
›töd
 =
¨gc
 - 2) {

83 
	`öô_cväum
(&
blocksize
, &
£˘size
);

84 
off£t
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

85 i‡(
off£t
 < 0) {

86 
	`¥ötf
(
	`_
("non-numeric offsetárgument -- %s\n"),

87 
¨gv
[
›töd
]);

90 
›töd
++;

91 
Œígth
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

92 i‡(
Œígth
 < 0) {

93 
	`¥ötf
(
	`_
("non-numericÜengthárgument -- %s\n"),

94 
¨gv
[
›töd
]);

96 } i‡(
Œígth
 > (
size_t
)llength) {

97 
	`¥ötf
(
	`_
("lengthárgumentÅooÜarge -- %lld\n"),

98 ()
Œígth
);

101 
Àngth
 = (
size_t
)
Œígth
;

103  
	`comm™d_ußge
(&
madvi£_cmd
);

106 
°¨t
 = 
	`check_m≠pög_ønge
(
m≠pög
, 
off£t
, 
Àngth
, 1);

107 i‡(!
°¨t
)

110 i‡(
	`madvi£
(
°¨t
, 
Àngth
, 
advi£
) < 0) {

111 
	`≥º‹
("madvise");

115 
	}
}

118 
	$madvi£_öô
()

120 
madvi£_cmd
.
«me
 = "madvise";

121 
madvi£_cmd
.
Æäame
 = "ma";

122 
madvi£_cmd
.
cfunc
 = 
madvi£_f
;

123 
madvi£_cmd
.
¨gmö
 = 0;

124 
madvi£_cmd
.
¨gmax
 = -1;

125 
madvi£_cmd
.
Êags
 = 
CMD_NOFILE_OK
 | 
CMD_FOREIGN_OK
;

126 
madvi£_cmd
.
¨gs
 = 
	`_
("[-drsw] [offÜen]");

127 
madvi£_cmd
.
⁄ñöe
 = 
	`_
("giveádviceábout use of memory");

128 
madvi£_cmd
.
hñp
 = 
madvi£_hñp
;

130 
	`add_comm™d
(&
madvi£_cmd
);

131 
	}
}

	@io/mincore.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~<sys/mm™.h
>

22 
	~"öô.h
"

23 
	~"io.h
"

25 
cmdöfo_t
 
	gmöc‹e_cmd
;

28 
	$möc‹e_f
(

29 
¨gc
,

30 **
¨gv
)

32 
off64_t
 
off£t
, 
Œígth
;

33 
size_t
 
Àngth
;

34 
size_t
 
blocksize
, 
£˘size
;

35 *
°¨t
;

36 *
cuºít
, *
¥evious
;

37 *
vec
;

38 
i
;

40 i‡(
¨gc
 == 1) {

41 
off£t
 = 
m≠pög
->offset;

42 
Àngth
 = 
m≠pög
->length;

43 } i‡(
¨gc
 == 3) {

44 
	`öô_cväum
(&
blocksize
, &
£˘size
);

45 
off£t
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[1]);

46 i‡(
off£t
 < 0) {

47 
	`¥ötf
(
	`_
("non-numeric offsetárgument -- %s\n"),

48 
¨gv
[1]);

51 
Œígth
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[2]);

52 i‡(
Œígth
 < 0) {

53 
	`¥ötf
(
	`_
("non-numericÜengthárgument -- %s\n"),

54 
¨gv
[2]);

56 } i‡(
Œígth
 > (
size_t
)llength) {

57 
	`¥ötf
(
	`_
("lengthárgumentÅooÜarge -- %lld\n"),

58 ()
Œígth
);

61 
Àngth
 = (
size_t
)
Œígth
;

63  
	`comm™d_ußge
(&
möc‹e_cmd
);

66 
°¨t
 = 
	`check_m≠pög_ønge
(
m≠pög
, 
off£t
, 
Àngth
, 1);

67 i‡(!
°¨t
)

70 
vec
 = 
	`ˇŒoc
(
Àngth
/
∑gesize
, ());

71 i‡(!
vec
) {

72 
	`≥º‹
("calloc");

76 i‡(
	`möc‹e
(
°¨t
, 
Àngth
, 
vec
) < 0) {

77 
	`≥º‹
("mincore");

78 
	`‰ì
(
vec
);

82 
¥evious
 = 
NULL
;

83 
cuºít
 = 
°¨t
;

84 
i
 = 0; i < 
Àngth
/
∑gesize
; i++, 
cuºít
 +=Öagesize) {

85 i‡(
vec
[
i
]) {

86 i‡(!
¥evious
) {

87 
	`¥ötf
("0x%lx - ", ()
cuºít
);

88 
¥evious
 = 
°¨t
 + (
i
 * 
∑gesize
);

90 } i‡(
¥evious
) {

91 
	`¥ötf
(
	`_
("0x%lx %luÖages (%llu : %lu)\n"),

92 ()
cuºít
,

93 ()(
cuºít
 - 
¥evious
Ë/ 
∑gesize
,

94 ()
off£t
 +

95 ()(
¥evious
 - 
°¨t
),

96 ()(
cuºít
 - 
¥evious
));

97 
¥evious
 = 
NULL
;

100 i‡(
¥evious
)

101 
	`¥ötf
(
	`_
("0x%lx %luÖages (%llu : %lu)\n"),

102 ()
cuºít
,

103 ()(
cuºít
 - 
¥evious
Ë/ 
∑gesize
,

104 ()
off£t
 +

105 ()(
¥evious
 - 
°¨t
),

106 ()(
cuºít
 - 
¥evious
));

108 
	`‰ì
(
vec
);

110 
	}
}

113 
	$möc‹e_öô
()

115 
möc‹e_cmd
.
«me
 = "mincore";

116 
möc‹e_cmd
.
Æäame
 = "mi";

117 
möc‹e_cmd
.
cfunc
 = 
möc‹e_f
;

118 
möc‹e_cmd
.
¨gmö
 = 0;

119 
möc‹e_cmd
.
¨gmax
 = 2;

120 
möc‹e_cmd
.
Êags
 = 
CMD_NOFILE_OK
 | 
CMD_FOREIGN_OK
;

121 
möc‹e_cmd
.
¨gs
 = 
	`_
("[offÜen]");

122 
möc‹e_cmd
.
⁄ñöe
 = 
	`_
("find mappingÖagesÅhatáre memoryÑesident");

124 
	`add_comm™d
(&
möc‹e_cmd
);

125 
	}
}

	@io/mmap.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~<sys/mm™.h
>

22 
	~<sig«l.h
>

23 
	~"öô.h
"

24 
	~"io.h
"

26 
cmdöfo_t
 
	gmm≠_cmd
;

27 
cmdöfo_t
 
	gmªad_cmd
;

28 
cmdöfo_t
 
	gmsync_cmd
;

29 
cmdöfo_t
 
	gmunm≠_cmd
;

30 
cmdöfo_t
 
	gmwrôe_cmd
;

31 #ifde‡
HAVE_MREMAP


32 
cmdöfo_t
 
	gmªm≠_cmd
;

35 
mm≠_ªgi⁄_t
 *
	gm≠èbÀ
;

36 
	gm≠cou¡
;

37 
mm≠_ªgi⁄_t
 *
	gm≠pög
;

40 
	$¥öt_m≠pög
(

41 
mm≠_ªgi⁄_t
 *
m≠
,

42 
ödex
,

43 
bø˚s
)

45 
buf„r
[8] = { 0 };

46 
i
;

49 
¥Ÿ
;

50 
mode
;

51 } *
p
, 
pÊags
[] = {

52 { 
PROT_READ
, 'r' },

53 { 
PROT_WRITE
, 'w' },

54 { 
PROT_EXEC
, 'x' },

55 { 
PROT_NONE
, 0 }

58 
i
 = 0, 
p
 = 
pÊags
;Ö->
¥Ÿ
 !
PROT_NONE
; i++,Ö++)

59 
buf„r
[
i
] = (
m≠
->
¥Ÿ
 & 
p
->¥ŸË?Ö->
mode
 : '-';

60 
	`¥ötf
("%c%03d%c 0x%lx - 0x%lx %s %14s (%lld : %ld)\n",

61 
bø˚s
? '[' : ' ', 
ödex
, braces? ']' : ' ',

62 ()
m≠
->
addr
,

63 ()((*)
m≠
->
addr
 + m≠->
Àngth
),

64 
buf„r
, 
m≠
->
«me
 ? map->name : "???",

65 ()
m≠
->
off£t
, ()m≠->
Àngth
);

66 
	}
}

69 
	$check_m≠pög_ønge
(

70 
mm≠_ªgi⁄_t
 *
m≠
,

71 
off64_t
 
off£t
,

72 
size_t
 
Àngth
,

73 
∑gólign
)

75 
off64_t
 
ªœtive
;

77 i‡(
off£t
 < 
m≠pög
->offset) {

78 
	`¥ötf
(
	`_
("offset (%lld) is before start of mapping (%lld)\n"),

79 ()
off£t
, ()
m≠pög
->offset);

80  
NULL
;

82 
ªœtive
 = 
off£t
 - 
m≠pög
->offset;

83 i‡(
ªœtive
 > 
m≠pög
->
Àngth
) {

84 
	`¥ötf
(
	`_
("offset (%lld) is beyondÉnd of mapping (%lld)\n"),

85 ()
ªœtive
, ()
m≠pög
->
off£t
);

86  
NULL
;

88 i‡((
ªœtive
 + 
Àngth
Ë> (
m≠pög
->
off£t
 + mapping->length)) {

89 
	`¥ötf
(
	`_
("range (%lld:%lld) is beyond mapping (%lld:%ld)\n"),

90 ()
off£t
, ()
ªœtive
,

91 ()
m≠pög
->
off£t
, ()m≠pög->
Àngth
);

92  
NULL
;

94 i‡(
∑gólign
 && ()((*)
m≠pög
->
addr
 + 
ªœtive
Ë% 
∑gesize
) {

95 
	`¥ötf
(
	`_
("offsetáddress (%p) isÇotÖageáligned\n"),

96 (*)
m≠pög
->
addr
 + 
ªœtive
);

97  
NULL
;

100  (*)
m≠pög
->
addr
 + 
ªœtive
;

101 
	}
}

104 
	$m≠li°_f
()

106 
i
;

108 
i
 = 0; i < 
m≠cou¡
; i++)

109 
	`¥öt_m≠pög
(&
m≠èbÀ
[
i
], i, &m≠èbÀ[i] =
m≠pög
);

111 
	}
}

114 
	$m≠£t_f
(

115 
¨gc
,

116 **
¨gv
)

118 
i
;

120 
	`ASSERT
(
¨gc
 == 2);

121 
i
 = 
	`©oi
(
¨gv
[1]);

122 i‡(
i
 < 0 || i >
m≠cou¡
) {

123 
	`¥ötf
("vÆuê%d i†ouào‡øngê(0-%d)\n", 
i
, 
m≠cou¡
);

125 
m≠pög
 = &
m≠èbÀ
[
i
];

126 
	`m≠li°_f
();

129 
	}
}

132 
	$mm≠_hñp
()

134 
	`¥ötf
(
	`_
(

152 
	}
}

155 
	$mm≠_f
(

156 
¨gc
,

157 **
¨gv
)

159 
off64_t
 
off£t
;

160 
ssize_t
 
Àngth
 = 0, 
Àngth2
 = 0;

161 *
addªss
 = 
NULL
;

162 *
fûíame
;

163 
size_t
 
blocksize
, 
£˘size
;

164 
c
, 
¥Ÿ
 = 0;

166 i‡(
¨gc
 == 1) {

167 i‡(
m≠pög
)

168  
	`m≠li°_f
();

169 
	`Ârötf
(
°dîr
, 
fûe
 ?

170 
	`_
("no mappedÑegions,Åry 'help mmap'\n") :

171 
	`_
("no filesáre open,Åry 'help open'\n"));

173 } i‡(
¨gc
 == 2) {

174 i‡(
m≠pög
)

175  
	`m≠£t_f
(
¨gc
, 
¨gv
);

176 
	`Ârötf
(
°dîr
, 
fûe
 ?

177 
	`_
("no mappedÑegions,Åry 'help mmap'\n") :

178 
	`_
("no filesáre open,Åry 'help open'\n"));

180 } i‡(!
fûe
) {

181 
	`Ârötf
(
°dîr
, 
	`_
("no filesáre open,Åry 'help open'\n"));

185 
	`öô_cväum
(&
blocksize
, &
£˘size
);

187 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "rwxs:")Ë!
EOF
) {

188 
c
) {

190 
¥Ÿ
 |
PROT_READ
;

193 
¥Ÿ
 |
PROT_WRITE
;

196 
¥Ÿ
 |
PROT_EXEC
;

199 
Àngth2
 = 
	`cväum
(
blocksize
, 
£˘size
, 
›èrg
);

202  
	`comm™d_ußge
(&
mm≠_cmd
);

205 i‡(!
¥Ÿ
)

206 
¥Ÿ
 = 
PROT_READ
 | 
PROT_WRITE
 | 
PROT_EXEC
;

208 i‡(
›töd
 !
¨gc
 - 2)

209  
	`comm™d_ußge
(&
mm≠_cmd
);

211 
off£t
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

212 i‡(
off£t
 < 0) {

213 
	`¥ötf
(
	`_
("n⁄-numîi¯off£à¨gumíà-- %s\n"), 
¨gv
[
›töd
]);

216 
›töd
++;

217 
Àngth
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

218 i‡(
Àngth
 < 0) {

219 
	`¥ötf
(
	`_
("n⁄-numîi¯Àngthárgumíà-- %s\n"), 
¨gv
[
›töd
]);

223 
fûíame
 = 
	`°rdup
(
fûe
->
«me
);

224 i‡(!
fûíame
) {

225 
	`≥º‹
("strdup");

236 i‡(
Àngth2
 > 
Àngth
) {

237 
addªss
 = 
	`mm≠
(
NULL
, 
Àngth2
, 
¥Ÿ
,

238 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
, -1, 0);

239 
	`munm≠
(
addªss
, 
Àngth2
);

241 
addªss
 = 
	`mm≠
◊ddªss, 
Àngth
, 
¥Ÿ
, 
MAP_SHARED
, 
fûe
->
fd
, 
off£t
);

242 i‡(
addªss
 =
MAP_FAILED
) {

243 
	`≥º‹
("mmap");

244 
	`‰ì
(
fûíame
);

249 
m≠èbÀ
 = (
mm≠_ªgi⁄_t
 *)
	`ªÆloc
(maptable,

250 ++
m≠cou¡
 * (
mm≠_ªgi⁄_t
));

251 i‡(!
m≠èbÀ
) {

252 
	`≥º‹
("realloc");

253 
m≠cou¡
 = 0;

254 
	`munm≠
(
addªss
, 
Àngth
);

255 
	`‰ì
(
fûíame
);

260 
m≠pög
 = &
m≠èbÀ
[
m≠cou¡
 - 1];

261 
m≠pög
->
addr
 = 
addªss
;

262 
m≠pög
->
Àngth
 =Üength;

263 
m≠pög
->
off£t
 = offset;

264 
m≠pög
->
«me
 = 
fûíame
;

265 
m≠pög
->
¥Ÿ
 =Örot;

267 
	}
}

270 
	$msync_hñp
()

272 
	`¥ötf
(
	`_
(

284 
	}
}

287 
	$msync_f
(

288 
¨gc
,

289 **
¨gv
)

291 
off64_t
 
off£t
;

292 
ssize_t
 
Àngth
;

293 *
°¨t
;

294 
c
, 
Êags
 = 0;

295 
size_t
 
blocksize
, 
£˘size
;

297 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "ais")Ë!
EOF
) {

298 
c
) {

300 
Êags
 |
MS_ASYNC
;

303 
Êags
 |
MS_INVALIDATE
;

306 
Êags
 |
MS_SYNC
;

309  
	`comm™d_ußge
(&
msync_cmd
);

313 i‡(
›töd
 =
¨gc
) {

314 
off£t
 = 
m≠pög
->offset;

315 
Àngth
 = 
m≠pög
->length;

316 } i‡(
›töd
 =
¨gc
 - 2) {

317 
	`öô_cväum
(&
blocksize
, &
£˘size
);

318 
off£t
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

319 i‡(
off£t
 < 0) {

320 
	`¥ötf
(
	`_
("non-numeric offsetárgument -- %s\n"),

321 
¨gv
[
›töd
]);

324 
›töd
++;

325 
Àngth
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

326 i‡(
Àngth
 < 0) {

327 
	`¥ötf
(
	`_
("non-numericÜengthárgument -- %s\n"),

328 
¨gv
[
›töd
]);

332  
	`comm™d_ußge
(&
msync_cmd
);

335 
°¨t
 = 
	`check_m≠pög_ønge
(
m≠pög
, 
off£t
, 
Àngth
, 1);

336 i‡(!
°¨t
)

339 i‡(
	`msync
(
°¨t
, 
Àngth
, 
Êags
) < 0)

340 
	`≥º‹
("msync");

343 
	}
}

346 
	$mªad_hñp
()

348 
	`¥ötf
(
	`_
(

368 
	}
}

371 
	$mªad_f
(

372 
¨gc
,

373 **
¨gv
)

375 
off64_t
 
off£t
, 
tmp
, 
dumpoff£t
, 
¥ötoff£t
;

376 
ssize_t
 
Àngth
;

377 
size_t
 
dum∂í
, 
˙t
 = 0;

378 *
bp
;

379 *
°¨t
;

380 
dump
 = 0, 
rÊag
 = 0, 
c
;

381 
size_t
 
blocksize
, 
£˘size
;

383 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "‰v")Ë!
EOF
) {

384 
c
) {

386 
dump
 = 2;

389 
rÊag
 = 1;

392 
dump
 = 1;

395  
	`comm™d_ußge
(&
mªad_cmd
);

399 i‡(
›töd
 =
¨gc
) {

400 
off£t
 = 
m≠pög
->offset;

401 
Àngth
 = 
m≠pög
->length;

402 } i‡(
›töd
 =
¨gc
 - 2) {

403 
	`öô_cväum
(&
blocksize
, &
£˘size
);

404 
off£t
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

405 i‡(
off£t
 < 0) {

406 
	`¥ötf
(
	`_
("non-numeric offsetárgument -- %s\n"),

407 
¨gv
[
›töd
]);

410 
›töd
++;

411 
Àngth
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

412 i‡(
Àngth
 < 0) {

413 
	`¥ötf
(
	`_
("non-numericÜengthárgument -- %s\n"),

414 
¨gv
[
›töd
]);

418  
	`comm™d_ußge
(&
mªad_cmd
);

421 
°¨t
 = 
	`check_m≠pög_ønge
(
m≠pög
, 
off£t
, 
Àngth
, 0);

422 i‡(!
°¨t
)

424 
dumpoff£t
 = 
off£t
 - 
m≠pög
->offset;

425 i‡(
dump
 == 2)

426 
¥ötoff£t
 = 
off£t
;

428 
¥ötoff£t
 = 
dumpoff£t
;

430 i‡(
	`Æloc_buf„r
(
∑gesize
, 0, 0) < 0)

432 
bp
 = (*)
buf„r
;

434 
dum∂í
 = 
Àngth
 % 
∑gesize
;

435 i‡(!
dum∂í
)

436 
dum∂í
 = 
∑gesize
;

438 i‡(
rÊag
) {

439 
tmp
 = 
Àngth
 - 1, 
c
 = 0;Åmp >= 0;Åmp--, c = 1) {

440 *
bp
 = *(((*)
m≠pög
->
addr
Ë+ 
dumpoff£t
 + 
tmp
);

441 
˙t
++;

442 i‡(
c
 && 
˙t
 =
dum∂í
) {

443 i‡(
dump
) {

444 
	`dump_buf„r
(
¥ötoff£t
, 
dum∂í
);

445 
¥ötoff£t
 +
dum∂í
;

447 
bp
 = (*)
buf„r
;

448 
dum∂í
 = 
∑gesize
;

449 
˙t
 = 0;

451 
bp
++;

455 
tmp
 = 0, 
c
 = 0;Åm∞< 
Àngth
;Åmp++, c = 1) {

456 *
bp
 = *(((*)
m≠pög
->
addr
Ë+ 
dumpoff£t
 + 
tmp
);

457 
˙t
++;

458 i‡(
c
 && 
˙t
 =
dum∂í
) {

459 i‡(
dump
)

460 
	`dump_buf„r
(
¥ötoff£t
 + 
tmp
 -

461 (
dum∂í
 - 1), dumplen);

462 
bp
 = (*)
buf„r
;

463 
dum∂í
 = 
∑gesize
;

464 
˙t
 = 0;

466 
bp
++;

471 
	}
}

474 
	$munm≠_f
(

475 
¨gc
,

476 **
¨gv
)

478 
ssize_t
 
Àngth
;

479 
off£t
;

481 i‡(
	`munm≠
(
m≠pög
->
addr
, m≠pög->
Àngth
) < 0) {

482 
	`≥º‹
("munmap");

485 
	`‰ì
(
m≠pög
->
«me
);

488 
off£t
 = 
m≠pög
 - &
m≠èbÀ
[0];

489 
Àngth
 = 
m≠cou¡
 * (
mm≠_ªgi⁄_t
);

490 
Àngth
 -(
off£t
 + 1Ë* (
mm≠_ªgi⁄_t
);

491 i‡(
Àngth
)

492 
	`memmove
(
m≠pög
, m≠pög + 1, 
Àngth
);

495 i‡(--
m≠cou¡
) {

496 
m≠èbÀ
 = (
mm≠_ªgi⁄_t
 *)
	`ªÆloc
(maptable,

497 
m≠cou¡
 * (
mm≠_ªgi⁄_t
));

498 i‡(
off£t
 =
m≠cou¡
)

499 
off£t
--;

500 
m≠pög
 = 
m≠èbÀ
 + 
off£t
;

502 
	`‰ì
(
m≠èbÀ
);

503 
m≠pög
 = 
m≠èbÀ
 = 
NULL
;

505 
	`m≠li°_f
();

507 
	}
}

510 
	$mwrôe_hñp
()

512 
	`¥ötf
(
	`_
(

525 
	}
}

528 
	$mwrôe_f
(

529 
¨gc
,

530 **
¨gv
)

532 
off64_t
 
off£t
, 
tmp
;

533 
ssize_t
 
Àngth
;

534 *
°¨t
;

535 *
•
;

536 
£ed
 = 'X';

537 
rÊag
 = 0;

538 
c
;

539 
size_t
 
blocksize
, 
£˘size
;

541 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "rS:")Ë!
EOF
) {

542 
c
) {

544 
rÊag
 = 1;

547 
£ed
 = ()
	`°πﬁ
(
›èrg
, &
•
, 0);

548 i‡(!
•
 || s∞=
›èrg
) {

549 
	`¥ötf
(
	`_
("n⁄-numîi¯£ed -- %s\n"), 
›èrg
);

554  
	`comm™d_ußge
(&
mwrôe_cmd
);

558 i‡(
›töd
 =
¨gc
) {

559 
off£t
 = 
m≠pög
->offset;

560 
Àngth
 = 
m≠pög
->length;

561 } i‡(
›töd
 =
¨gc
 - 2) {

562 
	`öô_cväum
(&
blocksize
, &
£˘size
);

563 
off£t
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

564 i‡(
off£t
 < 0) {

565 
	`¥ötf
(
	`_
("non-numeric offsetárgument -- %s\n"),

566 
¨gv
[
›töd
]);

569 
›töd
++;

570 
Àngth
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

571 i‡(
Àngth
 < 0) {

572 
	`¥ötf
(
	`_
("non-numericÜengthárgument -- %s\n"),

573 
¨gv
[
›töd
]);

577  
	`comm™d_ußge
(&
mwrôe_cmd
);

580 
°¨t
 = 
	`check_m≠pög_ønge
(
m≠pög
, 
off£t
, 
Àngth
, 0);

581 i‡(!
°¨t
)

584 
off£t
 -
m≠pög
->offset;

585 i‡(
rÊag
) {

586 
tmp
 = 
off£t
 + 
Àngth
 -1;Åmp >= offset;Åmp--)

587 ((*)
m≠pög
->
addr
)[
tmp
] = 
£ed
;

589 
tmp
 = 
off£t
;Åm∞< off£à+ 
Àngth
;Åmp++)

590 ((*)
m≠pög
->
addr
)[
tmp
] = 
£ed
;

594 
	}
}

596 #ifde‡
HAVE_MREMAP


598 
	$mªm≠_hñp
()

600 
	`¥ötf
(
	`_
(

612 
	}
}

615 
	$mªm≠_f
(

616 
¨gc
,

617 **
¨gv
)

619 
ssize_t
 
√w_Àngth
;

620 *
√w_addr
 = 
NULL
;

621 
Êags
 = 0;

622 
c
;

623 
size_t
 
blocksize
, 
£˘size
;

625 
	`öô_cväum
(&
blocksize
, &
£˘size
);

627 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "f:m")Ë!
EOF
) {

628 
c
) {

630 
Êags
 = 
MREMAP_FIXED
|
MREMAP_MAYMOVE
;

631 
√w_addr
 = (*)()
	`cväum
(
blocksize
,

632 
£˘size
, 
›èrg
);

635 
Êags
 = 
MREMAP_MAYMOVE
;

638  
	`comm™d_ußge
(&
mªm≠_cmd
);

642 i‡(
›töd
 !
¨gc
 - 1)

643  
	`comm™d_ußge
(&
mªm≠_cmd
);

645 
√w_Àngth
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

646 i‡(
√w_Àngth
 < 0) {

647 
	`¥ötf
(
	`_
("non-numeric offsetárgument -- %s\n"),

648 
¨gv
[
›töd
]);

652 i‡(!
√w_addr
)

653 
√w_addr
 = 
	`mªm≠
(
m≠pög
->
addr
, m≠pög->
Àngth
,

654 
√w_Àngth
, 
Êags
);

656 
√w_addr
 = 
	`mªm≠
(
m≠pög
->
addr
, m≠pög->
Àngth
,

657 
√w_Àngth
, 
Êags
, 
√w_addr
);

658 i‡(
√w_addr
 =
MAP_FAILED
)

659 
	`≥º‹
("mremap");

661 
m≠pög
->
addr
 = 
√w_addr
;

662 
m≠pög
->
Àngth
 = 
√w_Àngth
;

666 
	}
}

670 
	$mm≠_öô
()

672 
mm≠_cmd
.
«me
 = "mmap";

673 
mm≠_cmd
.
Æäame
 = "mm";

674 
mm≠_cmd
.
cfunc
 = 
mm≠_f
;

675 
mm≠_cmd
.
¨gmö
 = 0;

676 
mm≠_cmd
.
¨gmax
 = -1;

677 
mm≠_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_NOFILE_OK
 |

678 
CMD_FOREIGN_OK
 | 
CMD_FLAG_ONESHOT
;

679 
mm≠_cmd
.
¨gs
 = 
	`_
("[N] | [-rwx] [-s size] [offÜen]");

680 
mm≠_cmd
.
⁄ñöe
 =

681 
	`_
("mmapáÑange inÅhe current file, show mappings");

682 
mm≠_cmd
.
hñp
 = 
mm≠_hñp
;

684 
mªad_cmd
.
«me
 = "mread";

685 
mªad_cmd
.
Æäame
 = "mr";

686 
mªad_cmd
.
cfunc
 = 
mªad_f
;

687 
mªad_cmd
.
¨gmö
 = 0;

688 
mªad_cmd
.
¨gmax
 = -1;

689 
mªad_cmd
.
Êags
 = 
CMD_NOFILE_OK
 | 
CMD_FOREIGN_OK
;

690 
mªad_cmd
.
¨gs
 = 
	`_
("[-r] [offÜen]");

691 
mªad_cmd
.
⁄ñöe
 =

692 
	`_
("reads data fromáÑegion inÅhe current memory mapping");

693 
mªad_cmd
.
hñp
 = 
mªad_hñp
;

695 
msync_cmd
.
«me
 = "msync";

696 
msync_cmd
.
Æäame
 = "ms";

697 
msync_cmd
.
cfunc
 = 
msync_f
;

698 
msync_cmd
.
¨gmö
 = 0;

699 
msync_cmd
.
¨gmax
 = -1;

700 
msync_cmd
.
Êags
 = 
CMD_NOFILE_OK
 | 
CMD_FOREIGN_OK
;

701 
msync_cmd
.
¨gs
 = 
	`_
("[-ais] [offÜen]");

702 
msync_cmd
.
⁄ñöe
 = 
	`_
("flusháÑegion inÅhe current memory mapping");

703 
msync_cmd
.
hñp
 = 
msync_hñp
;

705 
munm≠_cmd
.
«me
 = "munmap";

706 
munm≠_cmd
.
Æäame
 = "mu";

707 
munm≠_cmd
.
cfunc
 = 
munm≠_f
;

708 
munm≠_cmd
.
¨gmö
 = 0;

709 
munm≠_cmd
.
¨gmax
 = 0;

710 
munm≠_cmd
.
Êags
 = 
CMD_NOFILE_OK
 | 
CMD_FOREIGN_OK
;

711 
munm≠_cmd
.
⁄ñöe
 = 
	`_
("unmapsÅhe current memory mapping");

713 
mwrôe_cmd
.
«me
 = "mwrite";

714 
mwrôe_cmd
.
Æäame
 = "mw";

715 
mwrôe_cmd
.
cfunc
 = 
mwrôe_f
;

716 
mwrôe_cmd
.
¨gmö
 = 0;

717 
mwrôe_cmd
.
¨gmax
 = -1;

718 
mwrôe_cmd
.
Êags
 = 
CMD_NOFILE_OK
 | 
CMD_FOREIGN_OK
;

719 
mwrôe_cmd
.
¨gs
 = 
	`_
("[-r] [-S seed] [offÜen]");

720 
mwrôe_cmd
.
⁄ñöe
 =

721 
	`_
("writes data intoáÑegion inÅhe current memory mapping");

722 
mwrôe_cmd
.
hñp
 = 
mwrôe_hñp
;

724 #ifde‡
HAVE_MREMAP


725 
mªm≠_cmd
.
«me
 = "mremap";

726 
mªm≠_cmd
.
Æäame
 = "mrm";

727 
mªm≠_cmd
.
cfunc
 = 
mªm≠_f
;

728 
mªm≠_cmd
.
¨gmö
 = 1;

729 
mªm≠_cmd
.
¨gmax
 = 3;

730 
mªm≠_cmd
.
Êags
 = 
CMD_NOFILE_OK
 | 
CMD_FOREIGN_OK
;

731 
mªm≠_cmd
.
¨gs
 = 
	`_
("[-m|-f <new_address>]Çewsize");

732 
mªm≠_cmd
.
⁄ñöe
 =

733 
	`_
("altersÅhe size ofÅhe current memory mapping");

734 
mªm≠_cmd
.
hñp
 = 
mªm≠_hñp
;

737 
	`add_comm™d
(&
mm≠_cmd
);

738 
	`add_comm™d
(&
mªad_cmd
);

739 
	`add_comm™d
(&
msync_cmd
);

740 
	`add_comm™d
(&
munm≠_cmd
);

741 
	`add_comm™d
(&
mwrôe_cmd
);

742 #ifde‡
HAVE_MREMAP


743 
	`add_comm™d
(&
mªm≠_cmd
);

745 
	}
}

	@io/open.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

23 
	~"libxfs.h
"

25 #i‚de‡
__O_TMPFILE


26 #i‡
deföed
 
__Æpha__


27 
	#__O_TMPFILE
 0100000000

	)

28 #ñi‡
deföed
(
__hµa__
)

29 
	#__O_TMPFILE
 040000000

	)

30 #ñi‡
deföed
(
__•¨c__
)

31 
	#__O_TMPFILE
 0x2000000

	)

33 
	#__O_TMPFILE
 020000000

	)

37 #i‚de‡
O_TMPFILE


38 
	#O_TMPFILE
 (
__O_TMPFILE
 | 
O_DIRECTORY
)

	)

41 
cmdöfo_t
 
	g›í_cmd
;

42 
cmdöfo_t
 
	g°©_cmd
;

43 
cmdöfo_t
 
	g˛o£_cmd
;

44 
cmdöfo_t
 
	g°©fs_cmd
;

45 
cmdöfo_t
 
	gch¥oj_cmd
;

46 
cmdöfo_t
 
	gl•roj_cmd
;

47 
cmdöfo_t
 
	gextsize_cmd
;

48 
cmdöfo_t
 
	göode_cmd
;

49 
¥id_t
 
	g¥id
;

50 
	gextsize
;

52 
off64_t


53 
	$fûesize
()

55 
°©
 
°
;

57 i‡(
	`f°©
(
fûe
->
fd
, &
°
) < 0) {

58 
	`≥º‹
("fstat");

61  
°
.
°_size
;

62 
	}
}

65 
	$fûëy≥
(
mode_t
 
mode
)

67 
mode
 & 
S_IFMT
) {

68 
S_IFSOCK
:

69  
	`_
("socket");

70 
S_IFDIR
:

71  
	`_
("directory");

72 
S_IFCHR
:

73  
	`_
("char device");

74 
S_IFBLK
:

75  
	`_
("block device");

76 
S_IFREG
:

77  
	`_
("regular file");

78 
S_IFLNK
:

79  
	`_
("symbolicÜink");

80 
S_IFIFO
:

81  
	`_
("fifo");

83  
NULL
;

84 
	}
}

87 
	$°©_f
(

88 
¨gc
,

89 **
¨gv
)

91 
diﬂâr
 
dio
;

92 
fsx©å
 
fsx
, 
fsxa
;

93 
°©
 
°
;

94 
vîbo£
 = (
¨gc
 =2 && !
	`°rcmp
(
¨gv
[1], "-v"));

96 
	`¥ötf
(
	`_
("fd.∑th = \"%s\"\n"), 
fûe
->
«me
);

97 
	`¥ötf
(
	`_
("fd.flags = %s,%s,%s%s%s%s%s\n"),

98 
fûe
->
Êags
 & 
IO_OSYNC
 ? 
	`_
("sync") : _("non-sync"),

99 
fûe
->
Êags
 & 
IO_DIRECT
 ? 
	`_
("direct") : _("non-direct"),

100 
fûe
->
Êags
 & 
IO_READONLY
 ? 
	`_
("read-only") : _("read-write"),

101 
fûe
->
Êags
 & 
IO_REALTIME
 ? 
	`_
(",real-time") : "",

102 
fûe
->
Êags
 & 
IO_APPEND
 ? 
	`_
(",append-only") : "",

103 
fûe
->
Êags
 & 
IO_NONBLOCK
 ? 
	`_
(",non-block") : "",

104 
fûe
->
Êags
 & 
IO_TMPFILE
 ? 
	`_
(",tmpfile") : "");

105 i‡(
	`f°©
(
fûe
->
fd
, &
°
) < 0) {

106 
	`≥º‹
("fstat");

108 
	`¥ötf
(
	`_
("°©.öÿ%Œd\n"), ()
°
.
°_öo
);

109 
	`¥ötf
(
	`_
("°©.ty≥ = %s\n"), 
	`fûëy≥
(
°
.
°_mode
));

110 
	`¥ötf
(
	`_
("°©.sizê%Œd\n"), ()
°
.
°_size
);

111 
	`¥ötf
(
	`_
("°©.block†%Œd\n"), ()
°
.
°_blocks
);

112 i‡(
vîbo£
) {

113 
	`¥ötf
(
	`_
("°©.©imê%s"), 
	`˘ime
(&
°
.
°_©ime
));

114 
	`¥ötf
(
	`_
("°©.mtimê%s"), 
	`˘ime
(&
°
.
°_mtime
));

115 
	`¥ötf
(
	`_
("°©.˘imê%s"), 
	`˘ime
(&
°
.
°_˘ime
));

118 i‡(
fûe
->
Êags
 & 
IO_FOREIGN
)

120 i‡((
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) < 0 ||

121 (
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_FSGETXATTRA
, &
fsxa
)) < 0) {

122 
	`≥º‹
("FS_IOC_FSGETXATTR");

124 
	`¥ötf
(
	`_
("fsx©å.xÊag†0x%x "), 
fsx
.
fsx_xÊags
);

125 
	`¥ötx©å
(
fsx
.
fsx_xÊags
, 
vîbo£
, 0, 
fûe
->
«me
, 1, 1);

126 
	`¥ötf
(
	`_
("fsx©å.¥ojid = %u\n"), 
fsx
.
fsx_¥ojid
);

127 
	`¥ötf
(
	`_
("fsx©å.extsizê%u\n"), 
fsx
.
fsx_extsize
);

128 
	`¥ötf
(
	`_
("fsx©å.cowextsizê%u\n"), 
fsx
.
fsx_cowextsize
);

129 
	`¥ötf
(
	`_
("fsx©å.√xã¡†%u\n"), 
fsx
.
fsx_√xã¡s
);

130 
	`¥ötf
(
	`_
("fsx©å.«exã¡†%u\n"), 
fsxa
.
fsx_√xã¡s
);

132 i‡((
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_DIOINFO
, &
dio
)) < 0) {

133 
	`≥º‹
("XFS_IOC_DIOINFO");

135 
	`¥ötf
(
	`_
("diﬂâr.mem = 0x%x\n"), 
dio
.
d_mem
);

136 
	`¥ötf
(
	`_
("diﬂâr.möiosz = %u\n"), 
dio
.
d_möiosz
);

137 
	`¥ötf
(
	`_
("diﬂâr.maxiosz = %u\n"), 
dio
.
d_maxiosz
);

140 
	}
}

143 
	$›ífûe
(

144 *
∑th
,

145 
xfs_fs›_geom_t
 *
geom
,

146 
Êags
,

147 
mode_t
 
mode
)

149 
fd
;

150 
oÊags
;

152 
oÊags
 = 
Êags
 & 
IO_READONLY
 ? 
O_RDONLY
 : 
O_RDWR
;

153 i‡(
Êags
 & 
IO_APPEND
)

154 
oÊags
 |
O_APPEND
;

155 i‡(
Êags
 & 
IO_CREAT
)

156 
oÊags
 |
O_CREAT
;

157 i‡(
Êags
 & 
IO_DIRECT
)

158 
oÊags
 |
O_DIRECT
;

159 i‡(
Êags
 & 
IO_OSYNC
)

160 
oÊags
 |
O_SYNC
;

161 i‡(
Êags
 & 
IO_TRUNC
)

162 
oÊags
 |
O_TRUNC
;

163 i‡(
Êags
 & 
IO_NONBLOCK
)

164 
oÊags
 |
O_NONBLOCK
;

165 i‡(
Êags
 & 
IO_TMPFILE
)

166 
oÊags
 |
O_TMPFILE
;

168 
fd
 = 
	`›í
(
∑th
, 
oÊags
, 
mode
);

169 i‡(
fd
 < 0) {

170 i‡(
î∫o
 =
EISDIR
 &&

171 ((
oÊags
 & (
O_RDWR
|
O_TMPFILE
)) == O_RDWR)) {

173 
oÊags
 &~
O_RDWR
;

174 
oÊags
 |
O_RDONLY
;

175 
Êags
 |
IO_READONLY
;

176 
fd
 = 
	`›í
(
∑th
, 
oÊags
, 
mode
);

177 i‡(
fd
 < 0) {

178 
	`≥º‹
(
∑th
);

182 
	`≥º‹
(
∑th
);

187 i‡(!
geom
 || !
	`∂©f‹m_ã°_xfs_fd
(
fd
))

188  
fd
;

190 i‡(
	`xfs˘l
(
∑th
, 
fd
, 
XFS_IOC_FSGEOMETRY
, 
geom
) < 0) {

191 
	`≥º‹
("XFS_IOC_FSGEOMETRY");

192 
	`˛o£
(
fd
);

196 i‡(!(
Êags
 & 
IO_READONLY
Ë&& (Êag†& 
IO_REALTIME
)) {

197 
fsx©å
 
©å
;

199 i‡(
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSGETXATTR
, &
©å
) < 0) {

200 
	`≥º‹
("FS_IOC_FSGETXATTR");

201 
	`˛o£
(
fd
);

204 i‡(!(
©å
.
fsx_xÊags
 & 
FS_XFLAG_REALTIME
)) {

205 
©å
.
fsx_xÊags
 |
FS_XFLAG_REALTIME
;

206 i‡(
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSSETXATTR
, &
©å
) < 0) {

207 
	`≥º‹
("FS_IOC_FSSETXATTR");

208 
	`˛o£
(
fd
);

213  
fd
;

214 
	}
}

217 
	$addfûe
(

218 *
«me
,

219 
fd
,

220 
xfs_fs›_geom_t
 *
geomëry
,

221 
Êags
)

223 *
fûíame
;

225 
fûíame
 = 
	`°rdup
(
«me
);

226 i‡(!
fûíame
) {

227 
	`≥º‹
("strdup");

228 
	`˛o£
(
fd
);

233 
fûëabÀ
 = (
fûeio_t
 *)
	`ªÆloc
(filetable,

234 ++
fûecou¡
 * (
fûeio_t
));

235 i‡(!
fûëabÀ
) {

236 
	`≥º‹
("realloc");

237 
fûecou¡
 = 0;

238 
	`‰ì
(
fûíame
);

239 
	`˛o£
(
fd
);

244 
fûe
 = &
fûëabÀ
[
fûecou¡
 - 1];

245 
fûe
->
fd
 = fd;

246 
fûe
->
Êags
 = flags;

247 
fûe
->
«me
 = 
fûíame
;

248 
fûe
->
geom
 = *
geomëry
;

250 
	}
}

253 
	$›í_hñp
()

255 
	`¥ötf
(
	`_
(

279 
	}
}

282 
	$›í_f
(

283 
¨gc
,

284 **
¨gv
)

286 
c
, 
fd
, 
Êags
 = 0;

287 *
•
;

288 
mode_t
 
mode
 = 0600;

289 
xfs_fs›_geom_t
 
geomëry
 = { 0 };

291 i‡(
¨gc
 == 1) {

292 i‡(
fûe
)

293  
	`°©_f
(
¨gc
, 
¨gv
);

294 
	`Ârötf
(
°dîr
, 
	`_
("no filesáre open,Åry 'help open'\n"));

298 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "FRTacdfm:ƒ°x")Ë!
EOF
) {

299 
c
) {

304 
Êags
 |
IO_APPEND
;

308 
Êags
 |
IO_CREAT
;

311 
Êags
 |
IO_DIRECT
;

314 
mode
 = 
	`°πoul
(
›èrg
, &
•
, 0);

315 i‡(!
•
 || s∞=
›èrg
) {

316 
	`¥ötf
(
	`_
("n⁄-numîi¯modê-- %s\n"), 
›èrg
);

321 
Êags
 |
IO_NONBLOCK
;

324 
Êags
 |
IO_READONLY
;

327 
Êags
 |
IO_OSYNC
;

330 
Êags
 |
IO_TRUNC
;

334 
Êags
 |
IO_REALTIME
;

337 
Êags
 |
IO_TMPFILE
;

340  
	`comm™d_ußge
(&
›í_cmd
);

344 i‡(
›töd
 !
¨gc
 - 1)

345  
	`comm™d_ußge
(&
›í_cmd
);

347 i‡((
Êags
 & (
IO_READONLY
|
IO_TMPFILE
)) == (IO_READONLY|IO_TMPFILE)) {

348 
	`Ârötf
(
°dîr
, 
	`_
("-Tánd -r optionsáre incompatible\n"));

352 
fd
 = 
	`›ífûe
(
¨gv
[
›töd
], &
geomëry
, 
Êags
, 
mode
);

353 i‡(
fd
 < 0)

356 i‡(!
	`∂©f‹m_ã°_xfs_fd
(
fd
))

357 
Êags
 |
IO_FOREIGN
;

359 
	`addfûe
(
¨gv
[
›töd
], 
fd
, &
geomëry
, 
Êags
);

361 
	}
}

364 
	$˛o£_f
(

365 
¨gc
,

366 **
¨gv
)

368 
size_t
 
Àngth
;

369 
off£t
;

371 i‡(
	`˛o£
(
fûe
->
fd
) < 0) {

372 
	`≥º‹
("close");

375 
	`‰ì
(
fûe
->
«me
);

378 
off£t
 = 
fûe
 - &
fûëabÀ
[0];

379 
Àngth
 = 
fûecou¡
 * (
fûeio_t
);

380 
Àngth
 -(
off£t
 + 1Ë* (
fûeio_t
);

381 i‡(
Àngth
)

382 
	`memmove
(
fûe
, fûê+ 1, 
Àngth
);

385 i‡(--
fûecou¡
) {

386 
fûëabÀ
 = (
fûeio_t
 *)
	`ªÆloc
(filetable,

387 
fûecou¡
 * (
fûeio_t
));

388 i‡(
off£t
 =
fûecou¡
)

389 
off£t
--;

390 
fûe
 = 
fûëabÀ
 + 
off£t
;

392 
	`‰ì
(
fûëabÀ
);

393 
fûe
 = 
fûëabÀ
 = 
NULL
;

395 
	`fûñi°_f
();

397 
	}
}

400 
	$l•roj_hñp
()

402 
	`¥ötf
(
	`_
(

410 
	}
}

413 
	$l•roj_ˇŒback
(

414 c⁄° *
∑th
,

415 c⁄° 
°©
 *stat,

416 
°©us
,

417 
FTW
 *
d©a
)

419 
¥id_t
 
¥ojid
;

420 
fd
;

422 i‡(
ªcur£_dú
 && !
	`S_ISDIR
(
°©
->
°_mode
))

425 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) == -1) {

426 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

427 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

429 i‡(
	`gë¥ojid
(
∑th
, 
fd
, &
¥ojid
) == 0)

430 
	`¥ötf
("[%u] %s\n", ()
¥ojid
, 
∑th
);

431 
	`˛o£
(
fd
);

434 
	}
}

437 
	$l•roj_f
(

438 
¨gc
,

439 **
¨gv
)

441 
¥id_t
 
¥ojid
;

442 
c
;

444 
ªcur£_Æl
 = 
ªcur£_dú
 = 0;

445 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "DR")Ë!
EOF
) {

446 
c
) {

448 
ªcur£_Æl
 = 0;

449 
ªcur£_dú
 = 1;

452 
ªcur£_Æl
 = 1;

453 
ªcur£_dú
 = 0;

456  
	`comm™d_ußge
(&
l•roj_cmd
);

460 i‡(
¨gc
 !
›töd
)

461  
	`comm™d_ußge
(&
l•roj_cmd
);

463 i‡(
ªcur£_Æl
 || 
ªcur£_dú
)

464 
	`n·w
(
fûe
->
«me
, 
l•roj_ˇŒback
,

465 100, 
FTW_PHYS
 | 
FTW_MOUNT
 | 
FTW_DEPTH
);

466 i‡(
	`gë¥ojid
(
fûe
->
«me
, fûe->
fd
, &
¥ojid
) < 0)

467 
	`≥º‹
("getprojid");

469 
	`¥ötf
(
	`_
("¥ojid = %u\n"), ()
¥ojid
);

471 
	}
}

474 
	$ch¥oj_hñp
()

476 
	`¥ötf
(
	`_
(

483 
	}
}

486 
	$ch¥oj_ˇŒback
(

487 c⁄° *
∑th
,

488 c⁄° 
°©
 *stat,

489 
°©us
,

490 
FTW
 *
d©a
)

492 
fd
;

494 i‡(
ªcur£_dú
 && !
	`S_ISDIR
(
°©
->
°_mode
))

497 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) == -1) {

498 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

499 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

501 i‡(
	`£çrojid
(
∑th
, 
fd
, 
¥id
) < 0)

502 
	`≥º‹
("setprojid");

503 
	`˛o£
(
fd
);

506 
	}
}

509 
	$ch¥oj_f
(

510 
¨gc
,

511 **
¨gv
)

513 
c
;

515 
ªcur£_Æl
 = 
ªcur£_dú
 = 0;

516 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "DR")Ë!
EOF
) {

517 
c
) {

519 
ªcur£_Æl
 = 0;

520 
ªcur£_dú
 = 1;

523 
ªcur£_Æl
 = 1;

524 
ªcur£_dú
 = 0;

527  
	`comm™d_ußge
(&
ch¥oj_cmd
);

531 i‡(
¨gc
 !
›töd
 + 1)

532  
	`comm™d_ußge
(&
ch¥oj_cmd
);

534 
¥id
 = 
	`¥id_‰om_°rög
(
¨gv
[
›töd
]);

535 i‡(
¥id
 == -1) {

536 
	`¥ötf
(
	`_
("övÆidÖroje˘ ID -- %s\n"), 
¨gv
[
›töd
]);

540 i‡(
ªcur£_Æl
 || 
ªcur£_dú
)

541 
	`n·w
(
fûe
->
«me
, 
ch¥oj_ˇŒback
,

542 100, 
FTW_PHYS
 | 
FTW_MOUNT
 | 
FTW_DEPTH
);

543 i‡(
	`£çrojid
(
fûe
->
«me
, fûe->
fd
, 
¥id
) < 0)

544 
	`≥º‹
("setprojid");

546 
	}
}

549 
	$extsize_hñp
()

551 
	`¥ötf
(
	`_
(

558 
	}
}

561 
	$gë_extsize
(c⁄° *
∑th
, 
fd
)

563 
fsx©å
 
fsx
;

565 i‡((
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) < 0) {

566 
	`¥ötf
("%s: FS_IOC_FSGETXATTR %s: %s\n",

567 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

570 
	`¥ötf
("[%u] %s\n", 
fsx
.
fsx_extsize
, 
∑th
);

572 
	}
}

575 
	$£t_extsize
(c⁄° *
∑th
, 
fd
, 
extsz
)

577 
fsx©å
 
fsx
;

578 
°©
 stat;

580 i‡(
	`f°©
(
fd
, &
°©
) < 0) {

581 
	`≥º‹
("fstat");

584 i‡((
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) < 0) {

585 
	`¥ötf
("%s: FS_IOC_FSGETXATTR %s: %s\n",

586 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

590 i‡(
	`S_ISREG
(
°©
.
°_mode
)) {

591 
fsx
.
fsx_xÊags
 |
FS_XFLAG_EXTSIZE
;

592 } i‡(
	`S_ISDIR
(
°©
.
°_mode
)) {

593 
fsx
.
fsx_xÊags
 |
FS_XFLAG_EXTSZINHERIT
;

595 
	`¥ötf
(
	`_
("övÆidÅ¨gë fûêty≥ - fûê%s\n"), 
∑th
);

598 
fsx
.
fsx_extsize
 = 
extsz
;

600 i‡((
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSSETXATTR
, &
fsx
)) < 0) {

601 
	`¥ötf
("%s: FS_IOC_FSSETXATTR %s: %s\n",

602 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

607 
	}
}

610 
	$gë_extsize_ˇŒback
(

611 c⁄° *
∑th
,

612 c⁄° 
°©
 *stat,

613 
°©us
,

614 
FTW
 *
d©a
)

616 
fd
;

618 i‡(
ªcur£_dú
 && !
	`S_ISDIR
(
°©
->
°_mode
))

621 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) == -1) {

622 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

623 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

625 
	`gë_extsize
(
∑th
, 
fd
);

626 
	`˛o£
(
fd
);

629 
	}
}

632 
	$£t_extsize_ˇŒback
(

633 c⁄° *
∑th
,

634 c⁄° 
°©
 *stat,

635 
°©us
,

636 
FTW
 *
d©a
)

638 
fd
;

640 i‡(
ªcur£_dú
 && !
	`S_ISDIR
(
°©
->
°_mode
))

643 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
)) == -1) {

644 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

645 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

647 
	`£t_extsize
(
∑th
, 
fd
, 
extsize
);

648 
	`˛o£
(
fd
);

651 
	}
}

654 
	$extsize_f
(

655 
¨gc
,

656 **
¨gv
)

658 
size_t
 
blocksize
, 
£˘size
;

659 
c
;

661 
ªcur£_Æl
 = 
ªcur£_dú
 = 0;

662 
	`öô_cväum
(&
blocksize
, &
£˘size
);

663 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "DR")Ë!
EOF
) {

664 
c
) {

666 
ªcur£_Æl
 = 0;

667 
ªcur£_dú
 = 1;

670 
ªcur£_Æl
 = 1;

671 
ªcur£_dú
 = 0;

674  
	`comm™d_ußge
(&
extsize_cmd
);

678 i‡(
›töd
 < 
¨gc
) {

679 
extsize
 = ()
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

680 i‡(
extsize
 < 0) {

681 
	`¥ötf
(
	`_
("non-numericÉxtsizeárgument -- %s\n"),

682 
¨gv
[
›töd
]);

686 
extsize
 = -1;

689 i‡(
ªcur£_Æl
 || 
ªcur£_dú
)

690 
	`n·w
(
fûe
->
«me
, (
extsize
 >= 0) ?

691 
£t_extsize_ˇŒback
 : 
gë_extsize_ˇŒback
,

692 100, 
FTW_PHYS
 | 
FTW_MOUNT
 | 
FTW_DEPTH
);

693 i‡(
extsize
 >= 0)

694 
	`£t_extsize
(
fûe
->
«me
, fûe->
fd
, 
extsize
);

696 
	`gë_extsize
(
fûe
->
«me
, fûe->
fd
);

698 
	}
}

701 
	$°©fs_f
(

702 
¨gc
,

703 **
¨gv
)

705 
xfs_fs›_cou¡s
 
fscou¡s
;

706 
xfs_fs›_geom
 
fsgeo
;

707 
°©fs
 
°
;

709 
	`¥ötf
(
	`_
("fd.∑th = \"%s\"\n"), 
fûe
->
«me
);

710 i‡(
	`∂©f‹m_f°©fs
(
fûe
->
fd
, &
°
) < 0) {

711 
	`≥º‹
("fstatfs");

713 
	`¥ötf
(
	`_
("°©fs.f_bsizê%Œd\n"), (Ë
°
.
f_bsize
);

714 
	`¥ötf
(
	`_
("°©fs.f_block†%Œd\n"), (Ë
°
.
f_blocks
);

715 
	`¥ötf
(
	`_
("°©fs.f_bavaû = %Œd\n"), (Ë
°
.
f_bavaû
);

716 
	`¥ötf
(
	`_
("°©fs.f_fûe†%Œd\n"), (Ë
°
.
f_fûes
);

717 
	`¥ötf
(
	`_
("°©fs.f_f‰ì = %Œd\n"), (Ë
°
.
f_f‰ì
);

719 i‡(
fûe
->
Êags
 & 
IO_FOREIGN
)

721 i‡((
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_FSGEOMETRY_V1
, &
fsgeo
)) < 0) {

722 
	`≥º‹
("XFS_IOC_FSGEOMETRY_V1");

724 
	`¥ötf
(
	`_
("geom.bsizê%u\n"), 
fsgeo
.
blocksize
);

725 
	`¥ötf
(
	`_
("geom.agcou¡ = %u\n"), 
fsgeo
.
agcou¡
);

726 
	`¥ötf
(
	`_
("geom.agblock†%u\n"), 
fsgeo
.
agblocks
);

727 
	`¥ötf
(
	`_
("geom.datablocks = %llu\n"),

728 (Ë
fsgeo
.
d©ablocks
);

729 
	`¥ötf
(
	`_
("geom.rtblocks = %llu\n"),

730 (Ë
fsgeo
.
πblocks
);

731 
	`¥ötf
(
	`_
("geom.rtextents = %llu\n"),

732 (Ë
fsgeo
.
πexã¡s
);

733 
	`¥ötf
(
	`_
("geom.πextsizê%u\n"), 
fsgeo
.
πextsize
);

734 
	`¥ötf
(
	`_
("geom.sunô = %u\n"), 
fsgeo
.
sunô
);

735 
	`¥ötf
(
	`_
("geom.swidth = %u\n"), 
fsgeo
.
swidth
);

737 i‡((
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_FSCOUNTS
, &
fscou¡s
)) < 0) {

738 
	`≥º‹
("XFS_IOC_FSCOUNTS");

740 
	`¥ötf
(
	`_
("counts.freedata = %llu\n"),

741 (Ë
fscou¡s
.
‰ìd©a
);

742 
	`¥ötf
(
	`_
("counts.freertx = %llu\n"),

743 (Ë
fscou¡s
.
‰ìπx
);

744 
	`¥ötf
(
	`_
("counts.freeino = %llu\n"),

745 (Ë
fscou¡s
.
‰ìöo
);

746 
	`¥ötf
(
	`_
("counts.allocino = %llu\n"),

747 (Ë
fscou¡s
.
Ælocöo
);

750 
	}
}

753 
	$öode_hñp
()

755 
	`¥ötf
(
	`_
(

765 
	}
}

767 
__u64


768 
	$gë_œ°_öode
()

770 
__u64
 
œ°ù
 = 0;

771 
__u64
 
œ°gΩ
 = 0;

772 
__s32
 
ocou¡
 = 0;

773 
__u64
 
œ°_öo
;

774 
xfs_öogΩ
 
igroup
[1024];

775 
xfs_fs›_bulkªq
 
bulkªq
;

777 
bulkªq
.
œ°ù
 = &lastip;

778 
bulkªq
.
ubuf„r
 = &
igroup
;

779 
bulkªq
.
icou¡
 = (
igroup
Ë/ (
xfs_öogΩ
);

780 
bulkªq
.
ocou¡
 = &ocount;

783 i‡(
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_FSINUMBERS
,

784 &
bulkªq
)) {

785 
	`≥º‹
("XFS_IOC_FSINUMBERS");

790 i‡(
ocou¡
 == 0)

794 
œ°gΩ
 = 
ocou¡
;

797 
œ°gΩ
--;

800 
œ°_öo
 = 
igroup
[
œ°gΩ
].
xi_°¨töo
 +

801 
	`libxfs_highbô64
(
igroup
[
œ°gΩ
].
xi_Ælocmask
);

803  
œ°_öo
;

804 
	}
}

807 
	$öode_f
(

808 
¨gc
,

809 **
¨gv
)

811 
__s32
 
cou¡
 = 0;

812 
__u64
 
ªsu…_öo
 = 0;

813 
__u64
 
u£röo
 = 
NULLFSINO
;

814 *
p
;

815 
c
;

816 
vîbo£
 = 0;

817 
ªt_√xt
 = 0;

818 
cmd
 = 0;

819 
xfs_fs›_bulkªq
 
bulkªq
;

820 
xfs_b°©
 
b°©
;

822 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "nv")Ë!
EOF
) {

823 
c
) {

825 
vîbo£
 = 1;

828 
ªt_√xt
 = 1;

831  
	`comm™d_ußge
(&
öode_cmd
);

836 i‡(
›töd
 < 
¨gc
) {

837 
u£röo
 = 
	`°πouŒ
(
¨gv
[
›töd
], &
p
, 10);

838 i‡((*
p
 != '\0')) {

839 
	`¥ötf
(
	`_
("%s isÇotáÇumeric inode value\n"),

840 
¨gv
[
›töd
]);

841 
exôcode
 = 1;

844 
›töd
++;

848 i‡(
›töd
 < 
¨gc
)

849  
	`comm™d_ußge
(&
öode_cmd
);

852 i‡(
ªt_√xt
 && 
u£röo
 =
NULLFSINO
)

853  
	`comm™d_ußge
(&
öode_cmd
);

855 i‡(
u£röo
 =
NULLFSINO
) {

857 
ªsu…_öo
 = 
	`gë_œ°_öode
();

858 i‡(!
ªsu…_öo
) {

859 
exôcode
 = 1;

863 i‡(
ªt_√xt
)

864 
cmd
 = 
XFS_IOC_FSBULKSTAT
;

866 
cmd
 = 
XFS_IOC_FSBULKSTAT_SINGLE
;

868 
bulkªq
.
œ°ù
 = &
u£röo
;

869 
bulkªq
.
icou¡
 = 1;

870 
bulkªq
.
ubuf„r
 = &
b°©
;

871 
bulkªq
.
ocou¡
 = &
cou¡
;

873 i‡(
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
cmd
, &
bulkªq
)) {

874 i‡(!
ªt_√xt
 && 
î∫o
 =
EINVAL
) {

876 
ªsu…_öo
 = 0;

878 
	`≥º‹
("xfsctl");

879 
exôcode
 = 1;

882 } i‡(
ªt_√xt
) {

884 i‡(*
bulkªq
.
ocou¡
)

885 
ªsu…_öo
 = 
b°©
.
bs_öo
;

887 
ªsu…_öo
 = 0;

890 
ªsu…_öo
 = 
u£röo
;

894 i‡(
vîbo£
 && 
ªsu…_öo
) {

896 
	`¥ötf
("%Œu:%d\n", 
ªsu…_öo
,

897 
ªsu…_öo
 > 
XFS_MAXINUMBER_32
 ? 64 : 32);

898 } i‡(
u£röo
 =
NULLFSINO
) {

900 
	`¥ötf
("%d\n", 
ªsu…_öo
 > 
XFS_MAXINUMBER_32
 ? 1 : 0);

903 
	`¥ötf
("%Œu\n", 
ªsu…_öo
);

907 
	}
}

910 
	$›í_öô
()

912 
›í_cmd
.
«me
 = "open";

913 
›í_cmd
.
Æäame
 = "o";

914 
›í_cmd
.
cfunc
 = 
›í_f
;

915 
›í_cmd
.
¨gmö
 = 0;

916 
›í_cmd
.
¨gmax
 = -1;

917 
›í_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_NOFILE_OK
 |

918 
CMD_FOREIGN_OK
 | 
CMD_FLAG_ONESHOT
;

919 
›í_cmd
.
¨gs
 = 
	`_
("[-acdrstxT] [-m mode] [path]");

920 
›í_cmd
.
⁄ñöe
 = 
	`_
("openÅhe file specified byÖath");

921 
›í_cmd
.
hñp
 = 
›í_hñp
;

923 
°©_cmd
.
«me
 = "stat";

924 
°©_cmd
.
cfunc
 = 
°©_f
;

925 
°©_cmd
.
¨gmö
 = 0;

926 
°©_cmd
.
¨gmax
 = 1;

927 
°©_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

928 
°©_cmd
.
¨gs
 = 
	`_
("[-v]");

929 
°©_cmd
.
⁄ñöe
 = 
	`_
("statistics onÅhe currently open file");

931 
˛o£_cmd
.
«me
 = "close";

932 
˛o£_cmd
.
Æäame
 = "c";

933 
˛o£_cmd
.
cfunc
 = 
˛o£_f
;

934 
˛o£_cmd
.
¨gmö
 = 0;

935 
˛o£_cmd
.
¨gmax
 = 0;

936 
˛o£_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
 | 
CMD_FLAG_ONESHOT
;

937 
˛o£_cmd
.
⁄ñöe
 = 
	`_
("closeÅhe current open file");

939 
°©fs_cmd
.
«me
 = "statfs";

940 
°©fs_cmd
.
cfunc
 = 
°©fs_f
;

941 
°©fs_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

942 
°©fs_cmd
.
⁄ñöe
 =

943 
	`_
("statistics onÅhe filesystem ofÅhe currently open file");

945 
ch¥oj_cmd
.
«me
 = "chproj";

946 
ch¥oj_cmd
.
cfunc
 = 
ch¥oj_f
;

947 
ch¥oj_cmd
.
¨gs
 = 
	`_
("[-D | -R]Örojid");

948 
ch¥oj_cmd
.
¨gmö
 = 1;

949 
ch¥oj_cmd
.
¨gmax
 = -1;

950 
ch¥oj_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

951 
ch¥oj_cmd
.
⁄ñöe
 =

952 
	`_
("changeÖroject identifier onÅhe currently open file");

953 
ch¥oj_cmd
.
hñp
 = 
ch¥oj_hñp
;

955 
l•roj_cmd
.
«me
 = "lsproj";

956 
l•roj_cmd
.
cfunc
 = 
l•roj_f
;

957 
l•roj_cmd
.
¨gs
 = 
	`_
("[-D | -R]");

958 
l•roj_cmd
.
¨gmö
 = 0;

959 
l•roj_cmd
.
¨gmax
 = -1;

960 
l•roj_cmd
.
Êags
 = 
CMD_NOMAP_OK
;

961 
l•roj_cmd
.
⁄ñöe
 =

962 
	`_
("listÖroject identifier set onÅhe currently open file");

963 
l•roj_cmd
.
hñp
 = 
l•roj_hñp
;

965 
extsize_cmd
.
«me
 = "extsize";

966 
extsize_cmd
.
cfunc
 = 
extsize_f
;

967 
extsize_cmd
.
¨gs
 = 
	`_
("[-D | -R] [extsize]");

968 
extsize_cmd
.
¨gmö
 = 0;

969 
extsize_cmd
.
¨gmax
 = -1;

970 
extsize_cmd
.
Êags
 = 
CMD_NOMAP_OK
;

971 
extsize_cmd
.
⁄ñöe
 =

972 
	`_
("get/setÖreferredÉxtent size (in bytes) forÅhe open file");

973 
extsize_cmd
.
hñp
 = 
extsize_hñp
;

975 
öode_cmd
.
«me
 = "inode";

976 
öode_cmd
.
cfunc
 = 
öode_f
;

977 
öode_cmd
.
¨gs
 = 
	`_
("[-nv] [num]");

978 
öode_cmd
.
¨gmö
 = 0;

979 
öode_cmd
.
¨gmax
 = 3;

980 
öode_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FLAG_ONESHOT
;

981 
öode_cmd
.
⁄ñöe
 =

982 
	`_
("Query inodeÇumber usage inÅhe filesystem");

983 
öode_cmd
.
hñp
 = 
öode_hñp
;

985 
	`add_comm™d
(&
›í_cmd
);

986 
	`add_comm™d
(&
°©_cmd
);

987 
	`add_comm™d
(&
˛o£_cmd
);

988 
	`add_comm™d
(&
°©fs_cmd
);

989 
	`add_comm™d
(&
ch¥oj_cmd
);

990 
	`add_comm™d
(&
l•roj_cmd
);

991 
	`add_comm™d
(&
extsize_cmd
);

992 
	`add_comm™d
(&
öode_cmd
);

993 
	}
}

	@io/parent.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"∑th.h
"

22 
	~"∑ª¡.h
"

23 
	~"h™dÀ.h
"

24 
	~"jdm.h
"

25 
	~"öô.h
"

26 
	~"io.h
"

28 
	#PARENTBUF_SZ
 16384

	)

29 
	#BSTATBUF_SZ
 16384

	)

31 
cmdöfo_t
 
	g∑ª¡_cmd
;

32 
	gvîbo£_Êag
;

33 
	gîr_°©us
;

34 
__u64
 
	göodes_checked
;

35 *
	gm¡±
;

41 
	$check_∑ª¡_íåy
(
xfs_b°©_t
 *
b°©p
, 
∑ª¡_t
 *
∑ª¡
)

43 
°s
;

44 
fuŒ∑th
[
PATH_MAX
];

45 
°©
 
°©buf
;

46 *
°r
;

48 
	`•rötf
(
fuŒ∑th
, 
	`_
("%s%s"), 
m¡±
, 
∑ª¡
->
p_«me
);

50 
°s
 = 
	`l°©
(
fuŒ∑th
, &
°©buf
);

51 i‡(
°s
 != 0) {

52 
	`Ârötf
(
°dîr
,

53 
	`_
("inode-path for inode: %llu is incorrect -Öath \"%s\"Çon-existent\n"),

54 (Ë
b°©p
->
bs_öo
, 
fuŒ∑th
);

55 i‡(
vîbo£_Êag
) {

56 
	`Ârötf
(
°dîr
,

57 
	`_
("path \"%s\" doesÇot stat for inode: %llu;Érr = %s\n"),

58 
fuŒ∑th
,

59 (Ë
b°©p
->
bs_öo
,

60 
	`°ªº‹
(
î∫o
));

62 
îr_°©us
++;

65 i‡(
vîbo£_Êag
 > 1) {

66 
	`¥ötf
(
	`_
("∑th \"%s\" found\n"), 
fuŒ∑th
);

70 i‡(
°©buf
.
°_öo
 !
b°©p
->
bs_öo
) {

71 
	`Ârötf
(
°dîr
,

72 
	`_
("inode-path for inode: %llu is incorrect - wrong inode#\n"),

73 (Ë
b°©p
->
bs_öo
);

74 i‡(
vîbo£_Êag
) {

75 
	`Ârötf
(
°dîr
,

76 
	`_
("ino mismatch forÖath \"%s\" %llu vs %llu\n"),

77 
fuŒ∑th
,

78 ()
°©buf
.
°_öo
,

79 ()
b°©p
->
bs_öo
);

81 
îr_°©us
++;

83 } i‡(
vîbo£_Êag
 > 1) {

84 
	`¥ötf
(
	`_
("inodeÇumber match: %llu\n"),

85 ()
°©buf
.
°_öo
);

89 
°r
 = 
	`°ºchr
(
fuŒ∑th
, '/');

90 *
°r
 = '\0';

91 
°s
 = 
	`°©
(
fuŒ∑th
, &
°©buf
);

92 i‡(
°s
 != 0) {

93 
	`Ârötf
(
°dîr
,

94 
	`_
("parentÖath \"%s\" doesÇot stat: %s\n"),

95 
fuŒ∑th
,

96 
	`°ªº‹
(
î∫o
));

97 
îr_°©us
++;

100 i‡(
∑ª¡
->
p_öo
 !
°©buf
.
°_öo
) {

101 
	`Ârötf
(
°dîr
,

102 
	`_
("inode-path for inode: %llu is incorrect - wrongÖarent inode#\n"),

103 (Ë
b°©p
->
bs_öo
);

104 i‡(
vîbo£_Êag
) {

105 
	`Ârötf
(
°dîr
,

106 
	`_
("ino mismatch forÖath \"%s\" %llu vs %llu\n"),

107 
fuŒ∑th
,

108 ()
∑ª¡
->
p_öo
,

109 ()
°©buf
.
°_öo
);

111 
îr_°©us
++;

114 i‡(
vîbo£_Êag
 > 1) {

115 
	`¥ötf
(
	`_
("parent ino match for %llu\n"),

116 (Ë
∑ª¡
->
p_öo
);

120 
	}
}

123 
	$check_∑ª¡s
(
∑ª¡_t
 *
∑ª¡buf
, 
size_t
 *
∑ª¡buf_size
,

124 
jdm_fsh™dÀ_t
 *
fsh™dÀp
, 
xfs_b°©_t
 *
°©p
)

126 
îr‹
, 
i
;

127 
__u32
 
cou¡
;

128 
∑ª¡_t
 *
íåyp
;

131 
îr‹
 = 
	`jdm_∑ª¡∑ths
(
fsh™dÀp
, 
°©p
, 
∑ª¡buf
, *
∑ª¡buf_size
, &
cou¡
);

133 i‡(
îr‹
 =
ERANGE
) {

134 *
∑ª¡buf_size
 *= 2;

135 
∑ª¡buf
 = (
∑ª¡_t
 *)
	`ªÆloc
’¨ítbuf, *
∑ª¡buf_size
);

136 } i‡(
îr‹
) {

137 
	`Ârötf
(
°dîr
, 
	`_
("parentpaths failed for ino %llu: %s\n"),

138 (Ë
°©p
->
bs_öo
,

139 
	`°ªº‹
(
î∫o
));

140 
îr_°©us
++;

143 } 
îr‹
 =
ERANGE
);

146 i‡(
cou¡
 == 0) {

148 
	`Ârötf
(
°dîr
, 
	`_
("inode-path for inode: %llu is missing\n"),

149 (Ë
°©p
->
bs_öo
);

150 
îr_°©us
++;

153 
íåyp
 = 
∑ª¡buf
;

154 
i
 = 0; i < 
cou¡
; i++) {

155 
	`check_∑ª¡_íåy
(
°©p
, 
íåyp
);

156 
íåyp
 = (
∑ª¡_t
*Ë(((*Î¡rypË+É¡ryp->
p_ª˛í
);

158 
	}
}

161 
	$do_bulk°©
(
∑ª¡_t
 *
∑ª¡buf
, 
size_t
 *
∑ª¡buf_size
, 
xfs_b°©_t
 *
b°©buf
,

162 
fsfd
, 
jdm_fsh™dÀ_t
 *
fsh™dÀp
)

164 
__s32
 
buÊíout
;

165 
__u64
 
œ°öo
 = 0;

166 
xfs_b°©_t
 *
p
;

167 
xfs_b°©_t
 *
ídp
;

168 
xfs_fs›_bulkªq_t
 
bulkªq
;

169 
°©
 
m¡°©
;

171 i‡(
	`°©
(
m¡±
, &
m¡°©
)) {

172 
	`Ârötf
(
°dîr
, 
	`_
("can't stat mountÖoint \"%s\": %s\n"),

173 
m¡±
, 
	`°ªº‹
(
î∫o
));

177 
bulkªq
.
œ°ù
 = &
œ°öo
;

178 
bulkªq
.
icou¡
 = 
BSTATBUF_SZ
;

179 
bulkªq
.
ubuf„r
 = (*)
b°©buf
;

180 
bulkªq
.
ocou¡
 = &
buÊíout
;

182 
	`xfs˘l
(
m¡±
, 
fsfd
, 
XFS_IOC_FSBULKSTAT
, &
bulkªq
) == 0) {

183 i‡(*(
bulkªq
.
ocou¡
) == 0) {

186 
p
 = 
b°©buf
, 
ídp
 = b°©bu‡+ *
bulkªq
.
ocou¡
;Ö <Éndp;Ö++) {

189 i‡–(!
p
->
bs_∆ök
 || !p->
bs_mode
Ë&&Ö->
bs_öo
 != 0 ) {

191 i‡(
	`xfs˘l
(
m¡±
, 
fsfd
, 
XFS_IOC_FSBULKSTAT_SINGLE
, &
bulkªq
) < 0) {

192 
	`Ârötf
(
°dîr
,

193 
	`_
("failedÅo get bulkstat information for inode %llu\n"),

194 (Ë
p
->
bs_öo
);

197 i‡(!
p
->
bs_∆ök
 || !p->
bs_mode
 || !p->
bs_öo
) {

198 
	`Ârötf
(
°dîr
,

199 
	`_
("failedÅo get valid bulkstat information for inode %llu\n"),

200 (Ë
p
->
bs_öo
);

206 i‡(
p
->
bs_öo
 =
m¡°©
.
°_öo
) {

210 i‡(
vîbo£_Êag
 > 1) {

211 
	`¥ötf
(
	`_
("checking inode %llu\n"),

212 (Ë
p
->
bs_öo
);

216 i‡((
öodes_checked
 % 100Ë=0 && 
vîbo£_Êag
 == 1) {

217 
	`¥ötf
("."); 
	`fÊush
(
°dout
);

219 
öodes_checked
++;

221 
	`check_∑ª¡s
(
∑ª¡buf
, 
∑ª¡buf_size
, 
fsh™dÀp
, 
p
);

226 
	`Ârötf
(
°dîr
, 
	`_
("syssgòbulk°© faûed: %s\n"), 
	`°ªº‹
(
î∫o
));

228 
	}
}

231 
	$∑ª¡_check
()

233 
fsfd
;

234 
jdm_fsh™dÀ_t
 *
fsh™dÀp
;

235 
∑ª¡_t
 *
∑ª¡buf
;

236 
size_t
 
∑ª¡buf_size
 = 
PARENTBUF_SZ
;

237 
xfs_b°©_t
 *
b°©buf
;

239 
îr_°©us
 = 0;

240 
öodes_checked
 = 0;

242 
	`sync
();

244 
fsfd
 = 
fûe
->
fd
;

246 
fsh™dÀp
 = 
	`jdm_gëfsh™dÀ
(
m¡±
);

247 i‡(
fsh™dÀp
 =
NULL
) {

248 
	`Ârötf
(
°dîr
, 
	`_
("unableÅo open \"%s\" for jdm: %s\n"),

249 
m¡±
,

250 
	`°ªº‹
(
î∫o
));

255 
b°©buf
 = (
xfs_b°©_t
 *)
	`ˇŒoc
(
BSTATBUF_SZ
, (xfs_bstat_t));

256 
∑ª¡buf
 = (
∑ª¡_t
 *)
	`mÆloc
(
∑ª¡buf_size
);

257 i‡(!
b°©buf
 || !
∑ª¡buf
) {

258 
	`Ârötf
(
°dîr
, 
	`_
("unableÅoállocate buffers: %s\n"),

259 
	`°ªº‹
(
î∫o
));

260 
îr_°©us
 = 1;

261 
out
;

264 i‡(
	`do_bulk°©
(
∑ª¡buf
, &
∑ª¡buf_size
, 
b°©buf
, 
fsfd
, 
fsh™dÀp
) != 0)

265 
îr_°©us
++;

267 i‡(
îr_°©us
 > 0)

268 
	`Ârötf
(
°dîr
, 
	`_
("numÉº‹s: %d\n"), 
îr_°©us
);

270 
	`¥ötf
(
	`_
("succeeded checking %llu inodes\n"),

271 (Ë
öodes_checked
);

273 
out
:

274 
	`‰ì
(
b°©buf
);

275 
	`‰ì
(
∑ª¡buf
);

276 
	`‰ì
(
fsh™dÀp
);

277  
îr_°©us
;

278 
	}
}

281 
	$¥öt_∑ª¡_íåy
(
∑ª¡_t
 *
∑ª¡
, 
fuŒ∑th
)

283 
	`¥ötf
(
	`_
("p_öÿ = %Œu\n"), (Ë
∑ª¡
->
p_öo
);

284 
	`¥ötf
(
	`_
("p_gí = %u\n"), 
∑ª¡
->
p_gí
);

285 
	`¥ötf
(
	`_
("p_ª˛í = %u\n"), 
∑ª¡
->
p_ª˛í
);

286 i‡(
fuŒ∑th
)

287 
	`¥ötf
(
	`_
("p_«mê = \"%s%s\"\n"), 
m¡±
, 
∑ª¡
->
p_«me
);

289 
	`¥ötf
(
	`_
("p_«mê = \"%s\"\n"), 
∑ª¡
->
p_«me
);

290 
	}
}

293 
	$∑ª¡_li°
(
fuŒ∑th
)

295 *
h™dÀp
 = 
NULL
;

296 
size_t
 
h™dÀn
;

297 
îr‹
, 
i
;

298 
ªtvÆ
 = 1;

299 
__u32
 
cou¡
;

300 
∑ª¡_t
 *
íåyp
;

301 
∑ª¡_t
 *
∑ª¡buf
 = 
NULL
;

302 *
∑th
 = 
fûe
->
«me
;

303 
pb_size
 = 
PARENTBUF_SZ
;

307 *
fsh™dÀ
;

308 
size_t
 
fshÀn
;

310 i‡(
	`∑th_to_fsh™dÀ
(
m¡±
, &
fsh™dÀ
, &
fshÀn
) != 0) {

311 
	`Ârötf
(
°dîr
, 
	`_
("%s: failedÖath_to_fshandle \"%s\": %s\n"),

312 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

313 
îr‹
;

315 
	`‰ì_h™dÀ
(
fsh™dÀ
, 
fshÀn
);

318 i‡(
	`∑th_to_h™dÀ
(
∑th
, &
h™dÀp
, &
h™dÀn
) != 0) {

319 
	`Ârötf
(
°dîr
, 
	`_
("%s:Ö©h_to_h™dÀ faûed f‹ \"%s\"\n"), 
¥og«me
, 
∑th
);

320 
îr‹
;

324 
∑ª¡buf
 = (
∑ª¡_t
 *)
	`ªÆloc
’¨ítbuf, 
pb_size
);

325 i‡(!
∑ª¡buf
) {

326 
	`Ârötf
(
°dîr
, 
	`_
("%s: unableÅoállocateÖarent buffer: %s\n"),

327 
¥og«me
, 
	`°ªº‹
(
î∫o
));

328 
îr‹
;

331 i‡(
fuŒ∑th
) {

332 
îr‹
 = 
	`∑ª¡∑ths_by_h™dÀ
(
h™dÀp
,

333 
h™dÀn
,

334 
∑ª¡buf
,

335 
pb_size
,

336 &
cou¡
);

338 
îr‹
 = 
	`∑ª¡s_by_h™dÀ
(
h™dÀp
,

339 
h™dÀn
,

340 
∑ª¡buf
,

341 
pb_size
,

342 &
cou¡
);

344 i‡(
îr‹
 =
ERANGE
) {

345 
pb_size
 *= 2;

346 } i‡(
îr‹
) {

347 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s call failed for \"%s\": %s\n"),

348 
¥og«me
, 
fuŒ∑th
 ? "parentpaths" : "parents",

349 
∑th
, 
	`°ªº‹
(
î∫o
));

350 
îr‹
;

352 } 
îr‹
 =
ERANGE
);

354 i‡(
cou¡
 == 0) {

356 
	`Ârötf
(
°dîr
, 
	`_
("%s: inode-∑th i†missög\n"), 
¥og«me
);

357 
îr‹
;

360 
íåyp
 = 
∑ª¡buf
;

361 
i
 = 0; i < 
cou¡
; i++) {

362 
	`¥öt_∑ª¡_íåy
(
íåyp
, 
fuŒ∑th
);

363 
íåyp
 = (
∑ª¡_t
*Ë(((*Î¡rypË+É¡ryp->
p_ª˛í
);

366 
ªtvÆ
 = 0;

367 
îr‹
:

368 
	`‰ì
(
h™dÀp
);

369 
	`‰ì
(
∑ª¡buf
);

370  
ªtvÆ
;

371 
	}
}

374 
	$∑ª¡_f
(
¨gc
, **
¨gv
)

376 
c
;

377 
li°∑th_Êag
 = 0;

378 
check_Êag
 = 0;

379 
fs_∑th_t
 *
fs
;

380 
èb_öô
;

382 i‡(!
èb_öô
) {

383 
èb_öô
 = 1;

384 
	`fs_èbÀ_öôüli£
(0, 
NULL
, 0, NULL);

386 
fs
 = 
	`fs_èbÀ_lookup
(
fûe
->
«me
, 
FS_MOUNT_POINT
);

387 i‡(!
fs
) {

388 
	`Ârötf
(
°dîr
, 
	`_
("fileárgument, \"%s\", isÇot iná mounted XFS filesystem\n"),

389 
fûe
->
«me
);

392 
m¡±
 = 
fs
->
fs_dú
;

394 
vîbo£_Êag
 = 0;

396 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "˝v")Ë!
EOF
) {

397 
c
) {

399 
check_Êag
 = 1;

402 
li°∑th_Êag
 = 1;

405 
vîbo£_Êag
++;

408  
	`comm™d_ußge
(&
∑ª¡_cmd
);

412 i‡(!
check_Êag
 && !
li°∑th_Êag
)

413 
exôcode
 = 
	`∑ª¡_li°
(
li°∑th_Êag
);

415 i‡(
li°∑th_Êag
)

416 
exôcode
 = 
	`∑ª¡_li°
(
li°∑th_Êag
);

417 i‡(
check_Êag
)

418 
exôcode
 = 
	`∑ª¡_check
();

422 
	}
}

425 
	$∑ª¡_hñp
()

427 
	`¥ötf
(
	`_
(

435 
	}
}

438 
	$∑ª¡_öô
()

440 
∑ª¡_cmd
.
«me
 = "parent";

441 
∑ª¡_cmd
.
cfunc
 = 
∑ª¡_f
;

442 
∑ª¡_cmd
.
¨gmö
 = 0;

443 
∑ª¡_cmd
.
¨gmax
 = -1;

444 
∑ª¡_cmd
.
¨gs
 = 
	`_
("[-cpv]");

445 
∑ª¡_cmd
.
Êags
 = 
CMD_NOMAP_OK
;

446 
∑ª¡_cmd
.
⁄ñöe
 = 
	`_
("print or checkÖarent inodes");

447 
∑ª¡_cmd
.
hñp
 = 
∑ª¡_hñp
;

449 i‡(
ex≥π
)

450 
	`add_comm™d
(&
∑ª¡_cmd
);

451 
	}
}

	@io/pread.c

19 
	~<sys/uio.h
>

20 
	~"comm™d.h
"

21 
	~"öput.h
"

22 
	~<˘y≥.h
>

23 
	~"öô.h
"

24 
	~"io.h
"

26 
cmdöfo_t
 
	g¥ód_cmd
;

29 
	$¥ód_hñp
()

31 
	`¥ötf
(
	`_
(

49 #ifde‡
HAVE_PREADV


58 
	}
}

60 *
	gbuf„r
;

61 
size_t
 
	ghighw©î
;

62 
size_t
 
	gbuf„rsize
;

63 
	gve˘‹s
;

64 
iovec
 *
	giov
;

67 
	$Æloc_iovec
(

68 
size_t
 
bsize
,

69 
uÊag
,

70 
£ed
)

72 
i
;

74 
iov
 = 
	`ˇŒoc
(
ve˘‹s
, (
iovec
));

75 i‡(!
iov
)

78 
buf„rsize
 = 0;

79 
i
 = 0; i < 
ve˘‹s
; i++) {

80 
iov
[
i
].
iov_ba£
 = 
	`memÆign
(
∑gesize
, 
bsize
);

81 i‡(!
iov
[
i
].
iov_ba£
) {

82 
	`≥º‹
("memalign");

83 
unwöd
;

85 
iov
[
i
].
iov_Àn
 = 
bsize
;

86 i‡(!
uÊag
)

87 
	`mem£t
(
iov
[
i
].
iov_ba£
, 
£ed
, 
bsize
);

89 
buf„rsize
 = 
bsize
 * 
ve˘‹s
;

91 
unwöd
:

92  ; 
i
 >= 0; i--)

93 
	`‰ì
(
iov
[
i
].
iov_ba£
);

94 
	`‰ì
(
iov
);

95 
iov
 = 
NULL
;

97 
	}
}

100 
	$Æloc_buf„r
(

101 
size_t
 
bsize
,

102 
uÊag
,

103 
£ed
)

105 i‡(
ve˘‹s
)

106  
	`Æloc_iovec
(
bsize
, 
uÊag
, 
£ed
);

108 i‡(
bsize
 > 
highw©î
) {

109 i‡(
buf„r
)

110 
	`‰ì
(
buf„r
);

111 
buf„r
 = 
	`memÆign
(
∑gesize
, 
bsize
);

112 i‡(!
buf„r
) {

113 
	`≥º‹
("memalign");

114 
highw©î
 = 
buf„rsize
 = 0;

117 
highw©î
 = 
bsize
;

119 
buf„rsize
 = 
bsize
;

120 i‡(!
uÊag
)

121 
	`mem£t
(
buf„r
, 
£ed
, 
buf„rsize
);

123 
	}
}

126 
	$__dump_buf„r
(

127 *
buf
,

128 
off64_t
 
off£t
,

129 
ssize_t
 
Àn
)

131 
i
, 
j
;

132 *
p
;

134 
i
 = 0, 
p
 = (*)
buf
; i < 
Àn
; i += 16) {

135 *
s
 = 
p
;

137 
	`¥ötf
("%08Œx: ", ()
off£t
 + 
i
);

138 
j
 = 0; j < 16 && 
i
 + j < 
Àn
; j++, 
p
++)

139 
	`¥ötf
("%02x ", *
p
);

140 
	`¥ötf
(" ");

141 
j
 = 0; j < 16 && 
i
 + j < 
Àn
; j++, 
s
++) {

142 i‡(
	`iß um
(()*
s
))

143 
	`¥ötf
("%c", *
s
);

145 
	`¥ötf
(".");

147 
	`¥ötf
("\n");

149 
	}
}

152 
	$dump_buf„r
(

153 
off64_t
 
off£t
,

154 
ssize_t
 
Àn
)

156 
i
, 
l
;

158 i‡(!
ve˘‹s
) {

159 
	`__dump_buf„r
(
buf„r
, 
off£t
, 
Àn
);

163 
i
 = 0; 
Àn
 > 0 && i < 
ve˘‹s
; i++) {

164 
l
 = 
	`mö
(
Àn
, 
iov
[
i
].
iov_Àn
);

166 
	`__dump_buf„r
(
iov
[
i
].
iov_ba£
, 
off£t
, 
l
);

167 
Àn
 -
l
;

168 
off£t
 +
l
;

170 
	}
}

172 #ifde‡
HAVE_PREADV


174 
	$do_¥ódv
(

175 
fd
,

176 
off64_t
 
off£t
,

177 
ssize_t
 
cou¡
,

178 
ssize_t
 
buf„r_size
)

180 
vecs
 = 0;

181 
ssize_t
 
ﬁdÀn
 = 0;

182 
ssize_t
 
byãs
 = 0;

185 i‡(
cou¡
 < 
buf„rsize
) {

186 
size_t
 
Àn
 = 0;

187 
Àn
 + 
iov
[
vecs
].
iov_Àn
 < 
cou¡
) {

188 
Àn
 +
iov
[
vecs
].
iov_Àn
;

189 
vecs
++;

191 
ﬁdÀn
 = 
iov
[
vecs
].
iov_Àn
;

192 
iov
[
vecs
].
iov_Àn
 = 
cou¡
 - 
Àn
;

193 
vecs
++;

195 
vecs
 = 
ve˘‹s
;

197 
byãs
 = 
	`¥ódv
(
fd
, 
iov
, 
ve˘‹s
, 
off£t
);

200 i‡(
ﬁdÀn
)

201 
iov
[
vecs
 - 1].
iov_Àn
 = 
ﬁdÀn
;

203  
byãs
;

204 
	}
}

206 
	#do_¥ódv
(
fd
, 
off£t
, 
cou¡
, 
buf„r_size
Ë(0)

	)

210 
	$do_¥ód
(

211 
fd
,

212 
off64_t
 
off£t
,

213 
ssize_t
 
cou¡
,

214 
ssize_t
 
buf„r_size
)

216 i‡(!
ve˘‹s
)

217  
	`¥ód
(
fd
, 
buf„r
, 
	`mö
(
cou¡
, 
buf„r_size
), 
off£t
);

219  
	`do_¥ódv
(
fd
, 
off£t
, 
cou¡
, 
buf„r_size
);

220 
	}
}

223 
	$ªad_øndom
(

224 
fd
,

225 
off64_t
 
off£t
,

226 
cou¡
,

227 *
tŸÆ
,

228 
£ed
,

229 
eof
)

231 
off64_t
 
íd
, 
off
, 
ønge
;

232 
ssize_t
 
byãs
;

233 
›s
 = 0;

235 
	`§™dom
(
£ed
);

236 
íd
 = 
	`l£ek
(
fd
, 0, 
SEEK_END
);

237 
off£t
 = (
eof
 || off£à> 
íd
) ?Énd : offset;

238 i‡((
byãs
 = (
off£t
 % 
buf„rsize
)))

239 
off£t
 -
byãs
;

240 
off£t
 = 
	`max
(0, offset);

241 i‡((
byãs
 = (
cou¡
 % 
buf„rsize
)))

242 
cou¡
 +
byãs
;

243 
cou¡
 = 
	`max
(
buf„rsize
, count);

244 
ønge
 = 
cou¡
 - 
buf„rsize
;

246 *
tŸÆ
 = 0;

247 
cou¡
 > 0) {

248 i‡(
ønge
)

249 
off
 = ((
off£t
 + (
	`øndom
(Ë% 
ønge
)Ë/ 
buf„rsize
) *

250 
buf„rsize
;

252 
off
 = 
off£t
;

253 
byãs
 = 
	`do_¥ód
(
fd
, 
off
, 
buf„rsize
, buffersize);

254 i‡(
byãs
 == 0)

256 i‡(
byãs
 < 0) {

257 
	`≥º‹
("pread");

260 
›s
++;

261 *
tŸÆ
 +
byãs
;

262 i‡(
byãs
 < 
buf„rsize
)

264 
cou¡
 -
byãs
;

266  
›s
;

267 
	}
}

270 
	$ªad_backw¨d
(

271 
fd
,

272 
off64_t
 *
off£t
,

273 *
cou¡
,

274 *
tŸÆ
,

275 
eof
)

277 
off64_t
 
íd
, 
off
 = *
off£t
;

278 
ssize_t
 
byãs
 = 0, 
byãs_ªque°ed
;

279 
˙t
 = *
cou¡
;

280 
›s
 = 0;

282 
íd
 = 
	`l£ek
(
fd
, 0, 
SEEK_END
);

283 
off
 = 
eof
 ? 
íd
 : 
	`mö
”nd, 
	`l£ek
(
fd
, off, 
SEEK_SET
));

284 i‡((
íd
 = 
off
 - 
˙t
) < 0) {

285 
˙t
 +
íd
;

286 
íd
 = 0;

288 *
tŸÆ
 = 0;

289 *
cou¡
 = 
˙t
;

290 *
off£t
 = 
off
;

293 i‡((
byãs_ªque°ed
 = (
off
 % 
buf„rsize
))) {

294 
off
 -
byãs_ªque°ed
;

295 
byãs
 = 
	`do_¥ód
(
fd
, 
off
, 
byãs_ªque°ed
, 
buf„rsize
);

296 i‡(
byãs
 == 0)

297  
›s
;

298 i‡(
byãs
 < 0) {

299 
	`≥º‹
("pread");

302 
›s
++;

303 *
tŸÆ
 +
byãs
;

304 i‡(
byãs
 < 
byãs_ªque°ed
)

305  
›s
;

306 
˙t
 -
byãs
;

310 
˙t
 > 
íd
) {

311 
byãs_ªque°ed
 = 
	`mö
(
˙t
, 
buf„rsize
);

312 
off
 -
byãs_ªque°ed
;

313 
byãs
 = 
	`do_¥ód
(
fd
, 
off
, 
˙t
, 
buf„rsize
);

314 i‡(
byãs
 == 0)

316 i‡(
byãs
 < 0) {

317 
	`≥º‹
("pread");

320 
›s
++;

321 *
tŸÆ
 +
byãs
;

322 i‡(
byãs
 < 
byãs_ªque°ed
)

324 
˙t
 -
byãs
;

326  
›s
;

327 
	}
}

330 
	$ªad_f‹w¨d
(

331 
fd
,

332 
off64_t
 
off£t
,

333 
cou¡
,

334 *
tŸÆ
,

335 
vîbo£
,

336 
⁄ly⁄e
,

337 
eof
)

339 
ssize_t
 
byãs
;

340 
›s
 = 0;

342 *
tŸÆ
 = 0;

343 
cou¡
 > 0 || 
eof
) {

344 
byãs
 = 
	`do_¥ód
(
fd
, 
off£t
, 
cou¡
, 
buf„rsize
);

345 i‡(
byãs
 == 0)

347 i‡(
byãs
 < 0) {

348 
	`≥º‹
("pread");

351 
›s
++;

352 i‡(
vîbo£
)

353 
	`dump_buf„r
(
off£t
, 
byãs
);

354 *
tŸÆ
 +
byãs
;

355 i‡(
⁄ly⁄e
 || 
byãs
 < 
	`mö
(
cou¡
, 
buf„rsize
))

357 
off£t
 +
byãs
;

358 
cou¡
 -
byãs
;

360  
›s
;

361 
	}
}

364 
	$ªad_buf„r
(

365 
fd
,

366 
off64_t
 
off£t
,

367 
cou¡
,

368 *
tŸÆ
,

369 
vîbo£
,

370 
⁄ly⁄e
)

372  
	`ªad_f‹w¨d
(
fd
, 
off£t
, 
cou¡
, 
tŸÆ
, 
vîbo£
, 
⁄ly⁄e
, 0);

373 
	}
}

376 
	$¥ód_f
(

377 
¨gc
,

378 **
¨gv
)

380 
size_t
 
bsize
;

381 
off64_t
 
off£t
;

382 
zìd
 = 0;

383 
cou¡
, 
tŸÆ
, 
tmp
;

384 
size_t
 
fsblocksize
, 
fs£˘size
;

385 
timevÆ
 
t1
, 
t2
;

386 *
•
;

387 
CÊag
, 
qÊag
, 
uÊag
, 
vÊag
;

388 
eof
 = 0, 
dúe˘i⁄
 = 
IO_FORWARD
;

389 
c
;

391 
CÊag
 = 
qÊag
 = 
uÊag
 = 
vÊag
 = 0;

392 
	`öô_cväum
(&
fsblocksize
, &
fs£˘size
);

393 
bsize
 = 
fsblocksize
;

395 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "b:BCFRquvV:Z:")Ë!
EOF
) {

396 
c
) {

398 
tmp
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
›èrg
);

399 i‡(
tmp
 < 0) {

400 
	`¥ötf
(
	`_
("n⁄-numîi¯bsizê-- %s\n"), 
›èrg
);

403 
bsize
 = 
tmp
;

406 
CÊag
 = 1;

409 
dúe˘i⁄
 = 
IO_FORWARD
;

412 
dúe˘i⁄
 = 
IO_BACKWARD
;

415 
dúe˘i⁄
 = 
IO_RANDOM
;

418 
qÊag
 = 1;

421 
uÊag
 = 1;

424 
vÊag
 = 1;

426 #ifde‡
HAVE_PREADV


428 
ve˘‹s
 = 
	`°πoul
(
›èrg
, &
•
, 0);

429 i‡(!
•
 || s∞=
›èrg
) {

430 
	`¥ötf
(
	`_
("non-numeric vector count == %s\n"),

431 
›èrg
);

437 
zìd
 = 
	`°πoul
(
›èrg
, &
•
, 0);

438 i‡(!
•
 || s∞=
›èrg
) {

439 
	`¥ötf
(
	`_
("n⁄-numîi¯£ed -- %s\n"), 
›èrg
);

444  
	`comm™d_ußge
(&
¥ód_cmd
);

447 i‡(
›töd
 !
¨gc
 - 2)

448  
	`comm™d_ußge
(&
¥ód_cmd
);

450 
off£t
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
¨gv
[
›töd
]);

451 i‡(
off£t
 < 0 && (
dúe˘i⁄
 & (
IO_RANDOM
|
IO_BACKWARD
))) {

452 
eof
 = -1;

453 } i‡(
off£t
 < 0) {

454 
	`¥ötf
(
	`_
("n⁄-numîi¯Àngthárgumíà-- %s\n"), 
¨gv
[
›töd
]);

457 
›töd
++;

458 
cou¡
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
¨gv
[
›töd
]);

459 i‡(
cou¡
 < 0 && (
dúe˘i⁄
 & (
IO_RANDOM
|
IO_FORWARD
))) {

460 
eof
 = -1;

461 } i‡(
cou¡
 < 0) {

462 
	`¥ötf
(
	`_
("n⁄-numîi¯Àngthárgumíà-- %s\n"), 
¨gv
[
›töd
]);

466 i‡(
	`Æloc_buf„r
(
bsize
, 
uÊag
, 0xabababab) < 0)

469 
	`gëtimeofday
(&
t1
, 
NULL
);

470 
dúe˘i⁄
) {

471 
IO_RANDOM
:

472 i‡(!
zìd
)

473 
zìd
 = 
	`time
(
NULL
);

474 
c
 = 
	`ªad_øndom
(
fûe
->
fd
, 
off£t
, 
cou¡
, &
tŸÆ
, 
zìd
, 
eof
);

476 
IO_FORWARD
:

477 
c
 = 
	`ªad_f‹w¨d
(
fûe
->
fd
, 
off£t
, 
cou¡
, &
tŸÆ
, 
vÊag
, 0, 
eof
);

478 i‡(
eof
)

479 
cou¡
 = 
tŸÆ
;

481 
IO_BACKWARD
:

482 
c
 = 
	`ªad_backw¨d
(
fûe
->
fd
, &
off£t
, &
cou¡
, &
tŸÆ
, 
eof
);

485 
	`ASSERT
(0);

487 i‡(
c
 < 0)

489 i‡(
qÊag
)

491 
	`gëtimeofday
(&
t2
, 
NULL
);

492 
t2
 = 
	`tsub
—2, 
t1
);

494 
	`ªp‹t_io_times
("ªad", &
t2
, ()
off£t
, 
cou¡
, 
tŸÆ
, 
c
, 
CÊag
);

496 
	}
}

499 
	$¥ód_öô
()

501 
¥ód_cmd
.
«me
 = "pread";

502 
¥ód_cmd
.
Æäame
 = "r";

503 
¥ód_cmd
.
cfunc
 = 
¥ód_f
;

504 
¥ód_cmd
.
¨gmö
 = 2;

505 
¥ód_cmd
.
¨gmax
 = -1;

506 
¥ód_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

507 
¥ód_cmd
.
¨gs
 = 
	`_
("[-b bs] [-v] [-i N] [-FBR [-Z N]] offÜen");

508 
¥ód_cmd
.
⁄ñöe
 = 
	`_
("readsáÇumber of bytesátá specified offset");

509 
¥ód_cmd
.
hñp
 = 
¥ód_hñp
;

511 
	`add_comm™d
(&
¥ód_cmd
);

512 
	}
}

	@io/prealloc.c

19 #i‡
deföed
(
HAVE_FALLOCATE
)

20 
	~<löux/ÁŒoc.h
>

22 
	~"comm™d.h
"

23 
	~"öput.h
"

24 
	~"öô.h
"

25 
	~"io.h
"

27 #i‚de‡
FALLOC_FL_PUNCH_HOLE


28 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

31 #i‚de‡
FALLOC_FL_COLLAPSE_RANGE


32 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

35 #i‚de‡
FALLOC_FL_ZERO_RANGE


36 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

39 #i‚de‡
FALLOC_FL_INSERT_RANGE


40 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

43 #i‚de‡
FALLOC_FL_UNSHARE_RANGE


44 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

47 
cmdöfo_t
 
	gÆloc•_cmd
;

48 
cmdöfo_t
 
	g‰ì•_cmd
;

49 
cmdöfo_t
 
	gªsv•_cmd
;

50 
cmdöfo_t
 
	guƒesv•_cmd
;

51 
cmdöfo_t
 
	gzîo_cmd
;

52 #i‡
deföed
(
HAVE_FALLOCATE
)

53 
cmdöfo_t
 
	gÁŒoc_cmd
;

54 
cmdöfo_t
 
	gÂunch_cmd
;

55 
cmdöfo_t
 
	gfcﬁœp£_cmd
;

56 
cmdöfo_t
 
	gfö£π_cmd
;

57 
cmdöfo_t
 
	gfzîo_cmd
;

61 
	$off£t_Àngth
(

62 *
off£t
,

63 *
Àngth
,

64 
xfs_Êock64_t
 *
£gmít
)

66 
size_t
 
blocksize
, 
£˘size
;

68 
	`öô_cväum
(&
blocksize
, &
£˘size
);

69 
	`mem£t
(
£gmít
, 0, (*segment));

70 
£gmít
->
l_whí˚
 = 
SEEK_SET
;

71 
£gmít
->
l_°¨t
 = 
	`cväum
(
blocksize
, 
£˘size
, 
off£t
);

72 i‡(
£gmít
->
l_°¨t
 < 0) {

73 
	`¥ötf
(
	`_
("n⁄-numîi¯off£à¨gumíà-- %s\n"), 
off£t
);

76 
£gmít
->
l_Àn
 = 
	`cväum
(
blocksize
, 
£˘size
, 
Àngth
);

77 i‡(
£gmít
->
l_Àn
 < 0) {

78 
	`¥ötf
(
	`_
("n⁄-numîi¯Àngthárgumíà-- %s\n"), 
Àngth
);

82 
	}
}

85 
	$Æloc•_f
(

86 
¨gc
,

87 **
¨gv
)

89 
xfs_Êock64_t
 
£gmít
;

91 i‡(!
	`off£t_Àngth
(
¨gv
[1],árgv[2], &
£gmít
))

94 i‡(
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_ALLOCSP64
, &
£gmít
) < 0) {

95 
	`≥º‹
("XFS_IOC_ALLOCSP64");

99 
	}
}

102 
	$‰ì•_f
(

103 
¨gc
,

104 **
¨gv
)

106 
xfs_Êock64_t
 
£gmít
;

108 i‡(!
	`off£t_Àngth
(
¨gv
[1],árgv[2], &
£gmít
))

111 i‡(
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_FREESP64
, &
£gmít
) < 0) {

112 
	`≥º‹
("XFS_IOC_FREESP64");

116 
	}
}

119 
	$ªsv•_f
(

120 
¨gc
,

121 **
¨gv
)

123 
xfs_Êock64_t
 
£gmít
;

125 i‡(!
	`off£t_Àngth
(
¨gv
[1],árgv[2], &
£gmít
))

128 i‡(
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_RESVSP64
, &
£gmít
) < 0) {

129 
	`≥º‹
("XFS_IOC_RESVSP64");

133 
	}
}

136 
	$uƒesv•_f
(

137 
¨gc
,

138 **
¨gv
)

140 
xfs_Êock64_t
 
£gmít
;

142 i‡(!
	`off£t_Àngth
(
¨gv
[1],árgv[2], &
£gmít
))

145 i‡(
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_UNRESVSP64
, &
£gmít
) < 0) {

146 
	`≥º‹
("XFS_IOC_UNRESVSP64");

150 
	}
}

153 
	$zîo_f
(

154 
¨gc
,

155 **
¨gv
)

157 
xfs_Êock64_t
 
£gmít
;

159 i‡(!
	`off£t_Àngth
(
¨gv
[1],árgv[2], &
£gmít
))

162 i‡(
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_ZERO_RANGE
, &
£gmít
) < 0) {

163 
	`≥º‹
("XFS_IOC_ZERO_RANGE");

167 
	}
}

170 #i‡
deföed
 (
HAVE_FALLOCATE
)

172 
	$ÁŒoc_hñp
()

174 
	`¥ötf
(
	`_
(

190 
	}
}

193 
	$ÁŒoˇã_f
(

194 
¨gc
,

195 **
¨gv
)

197 
xfs_Êock64_t
 
£gmít
;

198 
mode
 = 0;

199 
c
;

201 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "cikpu")Ë!
EOF
) {

202 
c
) {

204 
mode
 = 
FALLOC_FL_COLLAPSE_RANGE
;

207 
mode
 = 
FALLOC_FL_INSERT_RANGE
;

210 
mode
 = 
FALLOC_FL_KEEP_SIZE
;

213 
mode
 = 
FALLOC_FL_PUNCH_HOLE
;

216 
mode
 = 
FALLOC_FL_UNSHARE_RANGE
;

219 
	`comm™d_ußge
(&
ÁŒoc_cmd
);

222 i‡(
›töd
 !
¨gc
 - 2)

223  
	`comm™d_ußge
(&
ÁŒoc_cmd
);

225 i‡(!
	`off£t_Àngth
(
¨gv
[
›töd
],árgv[›töd+1], &
£gmít
))

228 i‡(
	`ÁŒoˇã
(
fûe
->
fd
, 
mode
,

229 
£gmít
.
l_°¨t
, segmít.
l_Àn
)) {

230 
	`≥º‹
("fallocate");

234 
	}
}

237 
	$Âunch_f
(

238 
¨gc
,

239 **
¨gv
)

241 
xfs_Êock64_t
 
£gmít
;

242 
mode
 = 
FALLOC_FL_PUNCH_HOLE
 | 
FALLOC_FL_KEEP_SIZE
;

244 i‡(!
	`off£t_Àngth
(
¨gv
[1],árgv[2], &
£gmít
))

247 i‡(
	`ÁŒoˇã
(
fûe
->
fd
, 
mode
,

248 
£gmít
.
l_°¨t
, segmít.
l_Àn
)) {

249 
	`≥º‹
("fallocate");

253 
	}
}

256 
	$fcﬁœp£_f
(

257 
¨gc
,

258 **
¨gv
)

260 
xfs_Êock64_t
 
£gmít
;

261 
mode
 = 
FALLOC_FL_COLLAPSE_RANGE
;

263 i‡(!
	`off£t_Àngth
(
¨gv
[1],árgv[2], &
£gmít
))

266 i‡(
	`ÁŒoˇã
(
fûe
->
fd
, 
mode
,

267 
£gmít
.
l_°¨t
, segmít.
l_Àn
)) {

268 
	`≥º‹
("fallocate");

272 
	}
}

275 
	$fö£π_f
(

276 
¨gc
,

277 **
¨gv
)

279 
xfs_Êock64_t
 
£gmít
;

280 
mode
 = 
FALLOC_FL_INSERT_RANGE
;

282 i‡(!
	`off£t_Àngth
(
¨gv
[1],árgv[2], &
£gmít
))

285 i‡(
	`ÁŒoˇã
(
fûe
->
fd
, 
mode
,

286 
£gmít
.
l_°¨t
, segmít.
l_Àn
)) {

287 
	`≥º‹
("fallocate");

291 
	}
}

294 
	$fzîo_f
(

295 
¨gc
,

296 **
¨gv
)

298 
xfs_Êock64_t
 
£gmít
;

299 
mode
 = 
FALLOC_FL_ZERO_RANGE
;

300 
ödex
 = 1;

302 i‡(
	`°∫cmp
(
¨gv
[
ödex
], "-k", 3) == 0) {

303 
mode
 |
FALLOC_FL_KEEP_SIZE
;

304 
ödex
++;

307 i‡(!
	`off£t_Àngth
(
¨gv
[
ödex
],árgv[ödex + 1], &
£gmít
))

310 i‡(
	`ÁŒoˇã
(
fûe
->
fd
, 
mode
,

311 
£gmít
.
l_°¨t
, segmít.
l_Àn
)) {

312 
	`≥º‹
("fallocate");

316 
	}
}

319 
	$funsh¨e_f
(

320 
¨gc
,

321 **
¨gv
)

323 
xfs_Êock64_t
 
£gmít
;

324 
mode
 = 
FALLOC_FL_UNSHARE_RANGE
;

325 
ödex
 = 1;

327 i‡(!
	`off£t_Àngth
(
¨gv
[
ödex
],árgv[ödex + 1], &
£gmít
))

330 i‡(
	`ÁŒoˇã
(
fûe
->
fd
, 
mode
,

331 
£gmít
.
l_°¨t
, segmít.
l_Àn
)) {

332 
	`≥º‹
("fallocate");

336 
	}
}

340 
	$¥óŒoc_öô
()

342 
Æloc•_cmd
.
«me
 = "allocsp";

343 
Æloc•_cmd
.
cfunc
 = 
Æloc•_f
;

344 
Æloc•_cmd
.
¨gmö
 = 2;

345 
Æloc•_cmd
.
¨gmax
 = 2;

346 
Æloc•_cmd
.
Êags
 = 
CMD_NOMAP_OK
;

347 
Æloc•_cmd
.
¨gs
 = 
	`_
("offÜen");

348 
Æloc•_cmd
.
⁄ñöe
 = 
	`_
("allocates zeroed space forÖart ofá file");

350 
‰ì•_cmd
.
«me
 = "freesp";

351 
‰ì•_cmd
.
cfunc
 = 
‰ì•_f
;

352 
‰ì•_cmd
.
¨gmö
 = 2;

353 
‰ì•_cmd
.
¨gmax
 = 2;

354 
‰ì•_cmd
.
Êags
 = 
CMD_NOMAP_OK
;

355 
‰ì•_cmd
.
¨gs
 = 
	`_
("offÜen");

356 
‰ì•_cmd
.
⁄ñöe
 = 
	`_
("frees spaceássociated withÖart ofá file");

358 
ªsv•_cmd
.
«me
 = "resvsp";

359 
ªsv•_cmd
.
cfunc
 = 
ªsv•_f
;

360 
ªsv•_cmd
.
¨gmö
 = 2;

361 
ªsv•_cmd
.
¨gmax
 = 2;

362 
ªsv•_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

363 
ªsv•_cmd
.
¨gs
 = 
	`_
("offÜen");

364 
ªsv•_cmd
.
⁄ñöe
 =

365 
	`_
("reserves spaceássociated withÖart ofá file");

367 
uƒesv•_cmd
.
«me
 = "unresvsp";

368 
uƒesv•_cmd
.
cfunc
 = 
uƒesv•_f
;

369 
uƒesv•_cmd
.
¨gmö
 = 2;

370 
uƒesv•_cmd
.
¨gmax
 = 2;

371 
uƒesv•_cmd
.
¨gs
 = 
	`_
("offÜen");

372 
uƒesv•_cmd
.
Êags
 = 
CMD_NOMAP_OK
;

373 
uƒesv•_cmd
.
⁄ñöe
 =

374 
	`_
("freesÑeserved spaceássociated withÖart ofá file");

376 
zîo_cmd
.
«me
 = "zero";

377 
zîo_cmd
.
cfunc
 = 
zîo_f
;

378 
zîo_cmd
.
¨gmö
 = 2;

379 
zîo_cmd
.
¨gmax
 = 2;

380 
zîo_cmd
.
Êags
 = 
CMD_NOMAP_OK
;

381 
zîo_cmd
.
¨gs
 = 
	`_
("offÜen");

382 
zîo_cmd
.
⁄ñöe
 =

383 
	`_
("ConvertsÅhe givenÑange ofá fileÅoállocated zeros");

385 
	`add_comm™d
(&
Æloc•_cmd
);

386 
	`add_comm™d
(&
‰ì•_cmd
);

387 
	`add_comm™d
(&
ªsv•_cmd
);

388 
	`add_comm™d
(&
uƒesv•_cmd
);

389 
	`add_comm™d
(&
zîo_cmd
);

391 #i‡
	`deföed
 (
HAVE_FALLOCATE
)

392 
ÁŒoc_cmd
.
«me
 = "falloc";

393 
ÁŒoc_cmd
.
cfunc
 = 
ÁŒoˇã_f
;

394 
ÁŒoc_cmd
.
¨gmö
 = 2;

395 
ÁŒoc_cmd
.
¨gmax
 = -1;

396 
ÁŒoc_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

397 
ÁŒoc_cmd
.
¨gs
 = 
	`_
("[-c] [-k] [-p] [-u] offÜen");

398 
ÁŒoc_cmd
.
⁄ñöe
 =

399 
	`_
("allocates spaceássociated withÖart ofá file via fallocate");

400 
ÁŒoc_cmd
.
hñp
 = 
ÁŒoc_hñp
;

401 
	`add_comm™d
(&
ÁŒoc_cmd
);

403 
Âunch_cmd
.
«me
 = "fpunch";

404 
Âunch_cmd
.
cfunc
 = 
Âunch_f
;

405 
Âunch_cmd
.
¨gmö
 = 2;

406 
Âunch_cmd
.
¨gmax
 = 2;

407 
Âunch_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

408 
Âunch_cmd
.
¨gs
 = 
	`_
("offÜen");

409 
Âunch_cmd
.
⁄ñöe
 =

410 
	`_
("de-allocates spaceássocated withÖart ofá file via fallocate");

411 
	`add_comm™d
(&
Âunch_cmd
);

413 
fcﬁœp£_cmd
.
«me
 = "fcollapse";

414 
fcﬁœp£_cmd
.
cfunc
 = 
fcﬁœp£_f
;

415 
fcﬁœp£_cmd
.
¨gmö
 = 2;

416 
fcﬁœp£_cmd
.
¨gmax
 = 2;

417 
fcﬁœp£_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

418 
fcﬁœp£_cmd
.
¨gs
 = 
	`_
("offÜen");

419 
fcﬁœp£_cmd
.
⁄ñöe
 =

420 
	`_
("de-allocates spaceándÉliminatesÅhe hole by shiftingÉxtents");

421 
	`add_comm™d
(&
fcﬁœp£_cmd
);

423 
fö£π_cmd
.
«me
 = "finsert";

424 
fö£π_cmd
.
cfunc
 = 
fö£π_f
;

425 
fö£π_cmd
.
¨gmö
 = 2;

426 
fö£π_cmd
.
¨gmax
 = 2;

427 
fö£π_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

428 
fö£π_cmd
.
¨gs
 = 
	`_
("offÜen");

429 
fö£π_cmd
.
⁄ñöe
 =

430 
	`_
("createsÇew space for writing within file by shiftingÉxtents");

431 
	`add_comm™d
(&
fö£π_cmd
);

433 
fzîo_cmd
.
«me
 = "fzero";

434 
fzîo_cmd
.
cfunc
 = 
fzîo_f
;

435 
fzîo_cmd
.
¨gmö
 = 2;

436 
fzîo_cmd
.
¨gmax
 = 3;

437 
fzîo_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

438 
fzîo_cmd
.
¨gs
 = 
	`_
("[-k] offÜen");

439 
fzîo_cmd
.
⁄ñöe
 =

440 
	`_
("zeroes spaceándÉliminates holes byÖreallocating");

441 
	`add_comm™d
(&
fzîo_cmd
);

443 
fzîo_cmd
.
«me
 = "funshare";

444 
fzîo_cmd
.
cfunc
 = 
funsh¨e_f
;

445 
fzîo_cmd
.
¨gmö
 = 2;

446 
fzîo_cmd
.
¨gmax
 = 2;

447 
fzîo_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

448 
fzîo_cmd
.
¨gs
 = 
	`_
("offÜen");

449 
fzîo_cmd
.
⁄ñöe
 =

450 
	`_
("unshares shared blocks withinÅheÑange");

451 
	`add_comm™d
(&
fzîo_cmd
);

453 
	}
}

	@io/pwrite.c

19 
	~<sys/uio.h
>

20 
	~"comm™d.h
"

21 
	~"öput.h
"

22 
	~"öô.h
"

23 
	~"io.h
"

25 
cmdöfo_t
 
	gpwrôe_cmd
;

28 
	$pwrôe_hñp
()

30 
	`¥ötf
(
	`_
(

53 #ifde‡
HAVE_PWRITEV


57 
	}
}

59 #ifde‡
HAVE_PWRITEV


61 
	$do_pwrôev
(

62 
fd
,

63 
off64_t
 
off£t
,

64 
ssize_t
 
cou¡
,

65 
ssize_t
 
buf„r_size
)

67 
vecs
 = 0;

68 
ssize_t
 
ﬁdÀn
 = 0;

69 
ssize_t
 
byãs
 = 0;

72 i‡(
cou¡
 < 
buf„rsize
) {

73 
size_t
 
Àn
 = 0;

74 
Àn
 + 
iov
[
vecs
].
iov_Àn
 < 
cou¡
) {

75 
Àn
 +
iov
[
vecs
].
iov_Àn
;

76 
vecs
++;

78 
ﬁdÀn
 = 
iov
[
vecs
].
iov_Àn
;

79 
iov
[
vecs
].
iov_Àn
 = 
cou¡
 - 
Àn
;

80 
vecs
++;

82 
vecs
 = 
ve˘‹s
;

84 
byãs
 = 
	`pwrôev
(
fd
, 
iov
, 
ve˘‹s
, 
off£t
);

87 i‡(
ﬁdÀn
)

88 
iov
[
vecs
 - 1].
iov_Àn
 = 
ﬁdÀn
;

90  
byãs
;

91 
	}
}

93 
	#do_pwrôev
(
fd
, 
off£t
, 
cou¡
, 
buf„r_size
Ë(0)

	)

97 
	$do_pwrôe
(

98 
fd
,

99 
off64_t
 
off£t
,

100 
ssize_t
 
cou¡
,

101 
ssize_t
 
buf„r_size
)

103 i‡(!
ve˘‹s
)

104  
	`pwrôe
(
fd
, 
buf„r
, 
	`mö
(
cou¡
, 
buf„r_size
), 
off£t
);

106  
	`do_pwrôev
(
fd
, 
off£t
, 
cou¡
, 
buf„r_size
);

107 
	}
}

110 
	$wrôe_øndom
(

111 
off64_t
 
off£t
,

112 
cou¡
,

113 
£ed
,

114 *
tŸÆ
)

116 
off64_t
 
off
, 
ønge
;

117 
ssize_t
 
byãs
;

118 
›s
 = 0;

120 
	`§™dom
(
£ed
);

121 i‡((
byãs
 = (
off£t
 % 
buf„rsize
)))

122 
off£t
 -
byãs
;

123 
off£t
 = 
	`max
(0, offset);

124 i‡((
byãs
 = (
cou¡
 % 
buf„rsize
)))

125 
cou¡
 +
byãs
;

126 
cou¡
 = 
	`max
(
buf„rsize
, count);

127 
ønge
 = 
cou¡
 - 
buf„rsize
;

129 *
tŸÆ
 = 0;

130 
cou¡
 > 0) {

131 i‡(
ønge
)

132 
off
 = ((
off£t
 + (
	`øndom
(Ë% 
ønge
)Ë/ 
buf„rsize
) *

133 
buf„rsize
;

135 
off
 = 
off£t
;

136 
byãs
 = 
	`do_pwrôe
(
fûe
->
fd
, 
off
, 
buf„rsize
, buffersize);

137 i‡(
byãs
 == 0)

139 i‡(
byãs
 < 0) {

140 
	`≥º‹
("pwrite");

143 
›s
++;

144 *
tŸÆ
 +
byãs
;

145 i‡(
byãs
 < 
buf„rsize
)

147 
cou¡
 -
byãs
;

149  
›s
;

150 
	}
}

153 
	$wrôe_backw¨d
(

154 
off64_t
 
off£t
,

155 *
cou¡
,

156 *
tŸÆ
)

158 
off64_t
 
íd
, 
off
 = 
off£t
;

159 
ssize_t
 
byãs
 = 0, 
byãs_ªque°ed
;

160 
˙t
 = *
cou¡
;

161 
›s
 = 0;

163 i‡((
íd
 = 
off
 - 
˙t
) < 0) {

164 
˙t
 +
íd
;

165 
íd
 = 0;

167 *
tŸÆ
 = 0;

168 *
cou¡
 = 
˙t
;

171 i‡((
byãs_ªque°ed
 = (
off
 % 
buf„rsize
))) {

172 
byãs_ªque°ed
 = 
	`mö
(
˙t
, bytes_requested);

173 
off
 -
byãs_ªque°ed
;

174 
byãs
 = 
	`do_pwrôe
(
fûe
->
fd
, 
off
, 
byãs_ªque°ed
, 
buf„rsize
);

175 i‡(
byãs
 == 0)

176  
›s
;

177 i‡(
byãs
 < 0) {

178 
	`≥º‹
("pwrite");

181 
›s
++;

182 *
tŸÆ
 +
byãs
;

183 i‡(
byãs
 < 
byãs_ªque°ed
)

184  
›s
;

185 
˙t
 -
byãs
;

189 
˙t
 > 
íd
) {

190 
byãs_ªque°ed
 = 
	`mö
(
˙t
, 
buf„rsize
);

191 
off
 -
byãs_ªque°ed
;

192 
byãs
 = 
	`do_pwrôe
(
fûe
->
fd
, 
off
, 
˙t
, 
buf„rsize
);

193 i‡(
byãs
 == 0)

195 i‡(
byãs
 < 0) {

196 
	`≥º‹
("pwrite");

199 
›s
++;

200 *
tŸÆ
 +
byãs
;

201 i‡(
byãs
 < 
byãs_ªque°ed
)

203 
˙t
 -
byãs
;

205  
›s
;

206 
	}
}

209 
	$wrôe_buf„r
(

210 
off64_t
 
off£t
,

211 
cou¡
,

212 
size_t
 
bs
,

213 
fd
,

214 
off64_t
 
skù
,

215 *
tŸÆ
)

217 
ssize_t
 
byãs
;

218 
b¨
 = 
	`mö
(
bs
, 
cou¡
);

219 
›s
 = 0;

221 *
tŸÆ
 = 0;

222 
cou¡
 >= 0) {

223 i‡(
fd
 > 0) {

224 i‡(
	`ªad_buf„r
(
fd
, 
skù
 + *
tŸÆ
, 
bs
, &
b¨
, 0, 1) < 0)

227 
byãs
 = 
	`do_pwrôe
(
fûe
->
fd
, 
off£t
, 
cou¡
, 
b¨
);

228 i‡(
byãs
 == 0)

230 i‡(
byãs
 < 0) {

231 
	`≥º‹
("pwrite");

234 
›s
++;

235 *
tŸÆ
 +
byãs
;

236 i‡(
byãs
 < 
	`mö
(
cou¡
, 
b¨
))

238 
off£t
 +
byãs
;

239 
cou¡
 -
byãs
;

240 i‡(
cou¡
 == 0)

243  
›s
;

244 
	}
}

247 
	$pwrôe_f
(

248 
¨gc
,

249 **
¨gv
)

251 
size_t
 
bsize
;

252 
off64_t
 
off£t
, 
skù
 = 0;

253 
cou¡
, 
tŸÆ
, 
tmp
;

254 
zìd
 = 0, 
£ed
 = 0xcdcdcdcd;

255 
size_t
 
fsblocksize
, 
fs£˘size
;

256 
timevÆ
 
t1
, 
t2
;

257 *
•
, *
öfûe
 = 
NULL
;

258 
CÊag
, 
qÊag
, 
uÊag
, 
dÊag
, 
wÊag
, 
WÊag
;

259 
dúe˘i⁄
 = 
IO_FORWARD
;

260 
c
, 
fd
 = -1;

262 
CÊag
 = 
qÊag
 = 
uÊag
 = 
dÊag
 = 
wÊag
 = 
WÊag
 = 0;

263 
	`öô_cväum
(&
fsblocksize
, &
fs£˘size
);

264 
bsize
 = 
fsblocksize
;

266 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "b:BCdf:Fi:qRs:S:uV:wWZ:")Ë!
EOF
) {

267 
c
) {

269 
tmp
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
›èrg
);

270 i‡(
tmp
 < 0) {

271 
	`¥ötf
(
	`_
("n⁄-numîi¯bsizê-- %s\n"), 
›èrg
);

274 
bsize
 = 
tmp
;

277 
CÊag
 = 1;

280 
dúe˘i⁄
 = 
IO_FORWARD
;

283 
dúe˘i⁄
 = 
IO_BACKWARD
;

286 
dúe˘i⁄
 = 
IO_RANDOM
;

289 
dÊag
 = 1;

293 
öfûe
 = 
›èrg
;

296 
skù
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
›èrg
);

297 i‡(
skù
 < 0) {

298 
	`¥ötf
(
	`_
("n⁄-numîi¯skù -- %s\n"), 
›èrg
);

303 
£ed
 = 
	`°πoul
(
›èrg
, &
•
, 0);

304 i‡(!
•
 || s∞=
›èrg
) {

305 
	`¥ötf
(
	`_
("n⁄-numîi¯£ed -- %s\n"), 
›èrg
);

310 
qÊag
 = 1;

313 
uÊag
 = 1;

316 
ve˘‹s
 = 
	`°πoul
(
›èrg
, &
•
, 0);

317 i‡(!
•
 || s∞=
›èrg
) {

318 
	`¥ötf
(
	`_
("non-numeric vector count == %s\n"),

319 
›èrg
);

324 
wÊag
 = 1;

327 
WÊag
 = 1;

330 
zìd
 = 
	`°πoul
(
›èrg
, &
•
, 0);

331 i‡(!
•
 || s∞=
›èrg
) {

332 
	`¥ötf
(
	`_
("n⁄-numîi¯£ed -- %s\n"), 
›èrg
);

337  
	`comm™d_ußge
(&
pwrôe_cmd
);

340 i‡(((
skù
 || 
dÊag
Ë&& !
öfûe
Ë|| (
›töd
 !
¨gc
 - 2))

341  
	`comm™d_ußge
(&
pwrôe_cmd
);

342 i‡(
öfûe
 && 
dúe˘i⁄
 !
IO_FORWARD
)

343  
	`comm™d_ußge
(&
pwrôe_cmd
);

344 
off£t
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
¨gv
[
›töd
]);

345 i‡(
off£t
 < 0) {

346 
	`¥ötf
(
	`_
("n⁄-numîi¯off£à¨gumíà-- %s\n"), 
¨gv
[
›töd
]);

349 
›töd
++;

350 
cou¡
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
¨gv
[
›töd
]);

351 i‡(
cou¡
 < 0) {

352 
	`¥ötf
(
	`_
("n⁄-numîi¯Àngthárgumíà-- %s\n"), 
¨gv
[
›töd
]);

356 i‡(
	`Æloc_buf„r
(
bsize
, 
uÊag
, 
£ed
) < 0)

359 
c
 = 
IO_READONLY
 | (
dÊag
 ? 
IO_DIRECT
 : 0);

360 i‡(
öfûe
 && ((
fd
 = 
	`›ífûe
(öfûe, 
NULL
, 
c
, 0)) < 0))

363 
	`gëtimeofday
(&
t1
, 
NULL
);

364 
dúe˘i⁄
) {

365 
IO_RANDOM
:

366 i‡(!
zìd
)

367 
zìd
 = 
	`time
(
NULL
);

368 
c
 = 
	`wrôe_øndom
(
off£t
, 
cou¡
, 
zìd
, &
tŸÆ
);

370 
IO_FORWARD
:

371 
c
 = 
	`wrôe_buf„r
(
off£t
, 
cou¡
, 
bsize
, 
fd
, 
skù
, &
tŸÆ
);

373 
IO_BACKWARD
:

374 
c
 = 
	`wrôe_backw¨d
(
off£t
, &
cou¡
, &
tŸÆ
);

377 
tŸÆ
 = 0;

378 
	`ASSERT
(0);

380 i‡(
c
 < 0)

381 
d⁄e
;

382 i‡(
WÊag
)

383 
	`fsync
(
fûe
->
fd
);

384 i‡(
wÊag
)

385 
	`fd©async
(
fûe
->
fd
);

386 i‡(
qÊag
)

387 
d⁄e
;

388 
	`gëtimeofday
(&
t2
, 
NULL
);

389 
t2
 = 
	`tsub
—2, 
t1
);

391 
	`ªp‹t_io_times
("wrŸe", &
t2
, ()
off£t
, 
cou¡
, 
tŸÆ
, 
c
,

392 
CÊag
);

393 
d⁄e
:

394 i‡(
öfûe
)

395 
	`˛o£
(
fd
);

397 
	}
}

400 
	$pwrôe_öô
()

402 
pwrôe_cmd
.
«me
 = "pwrite";

403 
pwrôe_cmd
.
Æäame
 = "w";

404 
pwrôe_cmd
.
cfunc
 = 
pwrôe_f
;

405 
pwrôe_cmd
.
¨gmö
 = 2;

406 
pwrôe_cmd
.
¨gmax
 = -1;

407 
pwrôe_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

408 
pwrôe_cmd
.
¨gs
 =

409 
	`_
("[-i infile [-d] [-s skip]] [-b bs] [-S seed] [-wW] [-FBR [-Z N]] [-V N] offÜen");

410 
pwrôe_cmd
.
⁄ñöe
 =

411 
	`_
("writesáÇumber of bytesátá specified offset");

412 
pwrôe_cmd
.
hñp
 = 
pwrôe_hñp
;

414 
	`add_comm™d
(&
pwrôe_cmd
);

415 
	}
}

	@io/readdir.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
	~<sys/ty≥s.h
>

25 
	~<dúít.h
>

27 #i‚de‡
_DIRENT_HAVE_D_RECLEN


28 
	~<°rög.h
>

31 
cmdöfo
 
	gªaddú_cmd
;

33 c⁄° *
	$d_ty≥_°r
(
ty≥
)

35 c⁄° *
°r
;

37 
ty≥
) {

38 
DT_UNKNOWN
:

39 
°r
 = "DT_UNKNOWN";

41 
DT_FIFO
:

42 
°r
 = "DT_FIFO";

44 
DT_CHR
:

45 
°r
 = "DT_CHR";

47 
DT_DIR
:

48 
°r
 = "DT_DIR";

50 
DT_BLK
:

51 
°r
 = "DT_BLK";

53 
DT_REG
:

54 
°r
 = "DT_REG";

56 
DT_LNK
:

57 
°r
 = "DT_LNK";

59 
DT_SOCK
:

60 
°r
 = "DT_SOCK";

62 
DT_WHT
:

63 
°r
 = "DT_WHT";

66 
°r
 = "ERROR!";

70  
°r
;

71 
	}
}

74 
	$dump_dúít
(

75 
off£t
,

76 
dúít
 *dirent)

78 
	`¥ötf
("%08Œx: d_öo: 0x%08Œx", 
off£t
,

79 ()
dúít
->
d_öo
);

80 #ifde‡
_DIRENT_HAVE_D_OFF


81 
	`¥ötf
(" d_off: 0x%08Œx", ()
dúít
->
d_off
);

83 #ifde‡
_DIRENT_HAVE_D_RECLEN


84 
	`¥ötf
(" d_ª˛í: 0x%x", 
dúít
->
d_ª˛í
);

86 #ifde‡
_DIRENT_HAVE_D_TYPE


87 
	`¥ötf
(" d_ty≥: %s", 
	`d_ty≥_°r
(
dúít
->
d_ty≥
));

89 
	`¥ötf
(" d_«me: %s\n", 
dúít
->
d_«me
);

90 
	}
}

93 
	$ªad_dúe˘‹y
(

94 
DIR
 *
dú
,

95 
off£t
,

96 
Àngth
,

97 
dump
,

98 *
tŸÆ
)

100 
dúít
 *dirent;

101 
cou¡
 = 0;

103 
	`£ekdú
(
dú
, 
off£t
);

105 *
tŸÆ
 = 0;

106 *
tŸÆ
 < 
Àngth
) {

107 
dúít
 = 
	`ªaddú
(
dú
);

108 i‡(!
dúít
)

111 #ifde‡
_DIRENT_HAVE_D_RECLEN


112 *
tŸÆ
 +
dúít
->
d_ª˛í
;

114 *
tŸÆ
 +
	`°æí
(
dúít
->
d_«me
) + (*dirent);

116 
cou¡
++;

118 i‡(
dump
) {

119 
	`dump_dúít
(
off£t
, 
dúít
);

120 #ifde‡
_DIRENT_HAVE_D_OFF


121 
off£t
 = 
dúít
->
d_off
;

127 
off£t
 = 0;

132  
cou¡
;

133 
	}
}

136 
	$ªaddú_f
(

137 
¨gc
,

138 **
¨gv
)

140 
˙t
;

141 
tŸÆ
;

142 
c
;

143 
size_t
 
fsblocksize
, 
fs£˘size
;

144 
timevÆ
 
t1
, 
t2
;

145 
s1
[64], 
s2
[64], 
ts
[64];

146 
off£t
 = -1;

147 
Àngth
 = -1;

148 
vîbo£
 = 0;

149 
DIR
 *
dú
;

150 
dfd
;

152 
	`öô_cväum
(&
fsblocksize
, &
fs£˘size
);

154 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "l:o:v")Ë!
EOF
) {

155 
c
) {

157 
Àngth
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
›èrg
);

160 
off£t
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
›èrg
);

163 
vîbo£
 = 1;

166  
	`comm™d_ußge
(&
ªaddú_cmd
);

170 
dfd
 = 
	`dup
(
fûe
->
fd
);

171 i‡(
dfd
 < 0)

174 
dú
 = 
	`fd›ídú
(
dfd
);

175 i‡(!
dú
) {

176 
	`˛o£
(
dfd
);

180 i‡(
off£t
 == -1) {

181 
	`ªwöddú
(
dú
);

182 
off£t
 = 
	`ãŒdú
(
dú
);

185 
	`gëtimeofday
(&
t1
, 
NULL
);

186 
˙t
 = 
	`ªad_dúe˘‹y
(
dú
, 
off£t
, 
Àngth
, 
vîbo£
, &
tŸÆ
);

187 
	`gëtimeofday
(&
t2
, 
NULL
);

189 
	`˛o£dú
(
dú
);

190 
	`˛o£
(
dfd
);

192 
t2
 = 
	`tsub
—2, 
t1
);

193 
	`time°r
(&
t2
, 
ts
, (ts), 0);

195 
	`cvt°r
(
tŸÆ
, 
s1
, (s1));

196 
	`cvt°r
(
	`tdiv
(
tŸÆ
, 
t2
), 
s2
, (s2));

198 
	`¥ötf
(
	`_
("ªad %Œu byã†‰om off£à%Œd\n"), 
tŸÆ
, 
off£t
);

199 
	`¥ötf
(
	`_
("%s, %d ops, %s (%s/secánd %.4f ops/sec)\n"),

200 
s1
, 
˙t
, 
ts
, 
s2
, 
	`tdiv
(˙t, 
t2
));

203 
	}
}

206 
	$ªaddú_öô
()

208 
ªaddú_cmd
.
«me
 = "readdir";

209 
ªaddú_cmd
.
cfunc
 = 
ªaddú_f
;

210 
ªaddú_cmd
.
¨gmax
 = 5;

211 
ªaddú_cmd
.
Êags
 = 
CMD_NOMAP_OK
|
CMD_FOREIGN_OK
;

212 
ªaddú_cmd
.
¨gs
 = 
	`_
("[-v][-o offset][-lÜength]");

213 
ªaddú_cmd
.
⁄ñöe
 = 
	`_
("read directoryÉntries");

215 
	`add_comm™d
(&
ªaddú_cmd
);

216 
	}
}

	@io/reflink.c

19 
	~<sys/uio.h
>

20 
	~<xfs/xfs.h
>

21 
	~"comm™d.h
"

22 
	~"öput.h
"

23 
	~"öô.h
"

24 
	~"io.h
"

26 
cmdöfo_t
 
	gdedu≥_cmd
;

27 
cmdöfo_t
 
	gªÊök_cmd
;

30 
	$dedu≥_hñp
()

32 
	`¥ötf
(
	`_
("\n\
áÑange of bytes (in block size increments) fromá file intoáÑange\n\
 bytes inÅhe open file. The contents of both fileÑanges must match.\n\
\n\
:\n\
'dedupe some_file 0 4096 32768' -Üinks 32768 bytes from some_fileát\n\
 0Åo intoÅhe open fileát\n\
 4096\n\
\n\
áÑange of blocks fromá given input fileÅoÅhe open file. Both\n\
 shareÅhe sameÑange ofÖhysical disk blocks;á writeÅoÅhe shared\n\
 ofÉither file shouldÑesult inÅhe writeÜanding ináÇew blockánd\n\
Ñange ofÅhe file beingÑemapped (i.e. copy-on-write). Both files\n\
Ñeside onÅhe same filesystem,ándÅhe contents of bothÑanges must\n\
.\n\
"));

48 
	}
}

50 
uöt64_t


51 
	$dedu≥_io˘l
(

52 
fd
,

53 
uöt64_t
 
soff£t
,

54 
uöt64_t
 
doff£t
,

55 
uöt64_t
 
Àn
,

56 *
›s
)

58 
xfs_exã¡_d©a
 *
¨gs
;

59 
xfs_exã¡_d©a_öfo
 *
öfo
;

60 
îr‹
;

61 
uöt64_t
 
dedu≥d
 = 0;

63 
¨gs
 = 
	`ˇŒoc
(1, (
xfs_exã¡_d©a
) +

64 (
xfs_exã¡_d©a_öfo
));

65 i‡(!
¨gs
)

66 
d⁄e
;

67 
öfo
 = (
xfs_exã¡_d©a_öfo
 *)(
¨gs
 + 1);

68 
¨gs
->
logiˇl_off£t
 = 
soff£t
;

69 
¨gs
->
Àngth
 = 
Àn
;

70 
¨gs
->
de°_cou¡
 = 1;

71 
öfo
->
fd
 = 
fûe
->fd;

72 
öfo
->
logiˇl_off£t
 = 
doff£t
;

74 
¨gs
->
Àngth
 > 0 || !*
›s
) {

75 
îr‹
 = 
	`io˘l
(
fd
, 
XFS_IOC_FILE_EXTENT_SAME
, 
¨gs
);

76 i‡(
îr‹
) {

77 
	`≥º‹
("XFS_IOC_FILE_EXTENT_SAME");

78 
d⁄e
;

80 i‡(
öfo
->
°©us
 < 0) {

81 
	`Ârötf
(
°dîr
, "XFS_IOC_FILE_EXTENT_SAME: %s\n",

82 
	`_
(
	`°ªº‹
(-
öfo
->
°©us
)));

83 
d⁄e
;

85 i‡(
öfo
->
°©us
 =
XFS_EXTENT_DATA_DIFFERS
) {

86 
	`Ârötf
(
°dîr
, "XFS_IOC_FILE_EXTENT_SAME: %s\n",

87 
	`_
("Extents didÇot match."));

88 
d⁄e
;

90 i‡(
¨gs
->
Àngth
 != 0 &&

91 (
öfo
->
byãs_dedu≥d
 == 0 ||

92 
öfo
->
byãs_dedu≥d
 > 
¨gs
->
Àngth
))

95 (*
›s
)++;

96 
¨gs
->
logiˇl_off£t
 +
öfo
->
byãs_dedu≥d
;

97 
öfo
->
logiˇl_off£t
 +öfo->
byãs_dedu≥d
;

98 i‡(
¨gs
->
Àngth
 >
öfo
->
byãs_dedu≥d
)

99 
¨gs
->
Àngth
 -
öfo
->
byãs_dedu≥d
;

100 
dedu≥d
 +
öfo
->
byãs_dedu≥d
;

102 
d⁄e
:

103 
	`‰ì
(
¨gs
);

104  
dedu≥d
;

105 
	}
}

108 
	$dedu≥_f
(

109 
¨gc
,

110 **
¨gv
)

112 
off64_t
 
soff£t
, 
doff£t
;

113 
cou¡
, 
tŸÆ
;

114 *
öfûe
;

115 
c⁄dí£d
, 
quõt_Êag
;

116 
size_t
 
fsblocksize
, 
fs£˘size
;

117 
timevÆ
 
t1
, 
t2
;

118 
c
, 
›s
 = 0, 
fd
 = -1;

120 
c⁄dí£d
 = 
quõt_Êag
 = 0;

121 
	`öô_cväum
(&
fsblocksize
, &
fs£˘size
);

123 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "Cq")Ë!
EOF
) {

124 
c
) {

126 
c⁄dí£d
 = 1;

129 
quõt_Êag
 = 1;

132  
	`comm™d_ußge
(&
dedu≥_cmd
);

135 i‡(
›töd
 !
¨gc
 - 4)

136  
	`comm™d_ußge
(&
dedu≥_cmd
);

137 
öfûe
 = 
¨gv
[
›töd
];

138 
›töd
++;

139 
soff£t
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
¨gv
[
›töd
]);

140 i‡(
soff£t
 < 0) {

141 
	`¥ötf
(
	`_
("n⁄-numîi¯§¯off£à¨gumíà-- %s\n"), 
¨gv
[
›töd
]);

144 
›töd
++;

145 
doff£t
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
¨gv
[
›töd
]);

146 i‡(
doff£t
 < 0) {

147 
	`¥ötf
(
	`_
("n⁄-numîi¯de° off£à¨gumíà-- %s\n"), 
¨gv
[
›töd
]);

150 
›töd
++;

151 
cou¡
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
¨gv
[
›töd
]);

152 i‡(
cou¡
 < 0) {

153 
	`¥ötf
(
	`_
("n⁄-posôivêÀngthárgumíà-- %s\n"), 
¨gv
[
›töd
]);

157 
fd
 = 
	`›ífûe
(
öfûe
, 
NULL
, 
IO_READONLY
, 0);

158 i‡(
fd
 < 0)

161 
	`gëtimeofday
(&
t1
, 
NULL
);

162 
tŸÆ
 = 
	`dedu≥_io˘l
(
fd
, 
soff£t
, 
doff£t
, 
cou¡
, &
›s
);

163 i‡(
›s
 =0 || 
quõt_Êag
)

164 
d⁄e
;

165 
	`gëtimeofday
(&
t2
, 
NULL
);

166 
t2
 = 
	`tsub
—2, 
t1
);

168 
	`ªp‹t_io_times
("dedu≥d", &
t2
, ()
doff£t
, 
cou¡
, 
tŸÆ
, 
›s
,

169 
c⁄dí£d
);

170 
d⁄e
:

171 
	`˛o£
(
fd
);

173 
	}
}

176 
	$ªÊök_hñp
()

178 
	`¥ötf
(
	`_
("\n\
áÑange of bytes (in block size increments) fromá file intoáÑange\n\
 bytes inÅhe open file. TheÅwoÉxtentÑangesÇeedÇot contain identical\n\
.\n\
\n\
:\n\
'reflink some_file 0 4096 32768' -Üinks 32768 bytes from some_fileát\n\
 0Åo intoÅhe open fileát\n\
 4096\n\
'reflink some_file' -Üinksáll bytes from some_file intoÅhe open file\n\
Öosition 0\n\
\n\
áÑange of blocks fromá given input fileÅoÅhe open file. Both\n\
 shareÅhe sameÑange ofÖhysical disk blocks;á writeÅoÅhe shared\n\
 ofÉither file shouldÑesult inÅhe writeÜanding ináÇew blockánd\n\
Ñange ofÅhe file beingÑemapped (i.e. copy-on-write). Both files\n\
Ñeside onÅhe same filesystem.\n\
"));

196 
	}
}

198 
uöt64_t


199 
	$ªÊök_io˘l
(

200 
fd
,

201 
uöt64_t
 
soff£t
,

202 
uöt64_t
 
doff£t
,

203 
uöt64_t
 
Àn
,

204 *
›s
)

206 
xfs_˛⁄e_¨gs
 
¨gs
;

207 
îr‹
;

209 i‡(
soff£t
 =0 && 
doff£t
 =0 && 
Àn
 == 0) {

210 
îr‹
 = 
	`io˘l
(
fûe
->
fd
, 
XFS_IOC_CLONE
, fd);

211 i‡(
îr‹
)

212 
	`≥º‹
("XFS_IOC_CLONE");

214 
¨gs
.
§c_fd
 = 
fd
;

215 
¨gs
.
§c_off£t
 = 
soff£t
;

216 
¨gs
.
§c_Àngth
 = 
Àn
;

217 
¨gs
.
de°_off£t
 = 
doff£t
;

218 
îr‹
 = 
	`io˘l
(
fûe
->
fd
, 
XFS_IOC_CLONE_RANGE
, &
¨gs
);

219 i‡(
îr‹
)

220 
	`≥º‹
("XFS_IOC_CLONE_RANGE");

222 i‡(!
îr‹
)

223 (*
›s
)++;

224  
îr‹
 ? 0 : 
Àn
;

225 
	}
}

228 
	$ªÊök_f
(

229 
¨gc
,

230 **
¨gv
)

232 
off64_t
 
soff£t
, 
doff£t
;

233 
cou¡
 = 0, 
tŸÆ
;

234 *
öfûe
 = 
NULL
;

235 
c⁄dí£d
, 
quõt_Êag
;

236 
size_t
 
fsblocksize
, 
fs£˘size
;

237 
timevÆ
 
t1
, 
t2
;

238 
c
, 
›s
 = 0, 
fd
 = -1;

240 
c⁄dí£d
 = 
quõt_Êag
 = 0;

241 
doff£t
 = 
soff£t
 = 0;

242 
	`öô_cväum
(&
fsblocksize
, &
fs£˘size
);

244 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "Cq")Ë!
EOF
) {

245 
c
) {

247 
c⁄dí£d
 = 1;

250 
quõt_Êag
 = 1;

253  
	`comm™d_ußge
(&
ªÊök_cmd
);

256 i‡(
›töd
 !
¨gc
 - 4 && optind !=árgc - 1)

257  
	`comm™d_ußge
(&
ªÊök_cmd
);

258 
öfûe
 = 
¨gv
[
›töd
];

259 
›töd
++;

260 i‡(
›töd
 =
¨gc
)

261 
˛⁄e_Æl
;

262 
soff£t
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
¨gv
[
›töd
]);

263 i‡(
soff£t
 < 0) {

264 
	`¥ötf
(
	`_
("n⁄-numîi¯§¯off£à¨gumíà-- %s\n"), 
¨gv
[
›töd
]);

267 
›töd
++;

268 
doff£t
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
¨gv
[
›töd
]);

269 i‡(
doff£t
 < 0) {

270 
	`¥ötf
(
	`_
("n⁄-numîi¯de° off£à¨gumíà-- %s\n"), 
¨gv
[
›töd
]);

273 
›töd
++;

274 
cou¡
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
¨gv
[
›töd
]);

275 i‡(
cou¡
 < 0) {

276 
	`¥ötf
(
	`_
("n⁄-posôivêÀngthárgumíà-- %s\n"), 
¨gv
[
›töd
]);

280 
˛⁄e_Æl
:

281 
fd
 = 
	`›ífûe
(
öfûe
, 
NULL
, 
IO_READONLY
, 0);

282 i‡(
fd
 < 0)

285 
	`gëtimeofday
(&
t1
, 
NULL
);

286 
tŸÆ
 = 
	`ªÊök_io˘l
(
fd
, 
soff£t
, 
doff£t
, 
cou¡
, &
›s
);

287 i‡(
›s
 =0 || 
quõt_Êag
)

288 
d⁄e
;

289 
	`gëtimeofday
(&
t2
, 
NULL
);

290 
t2
 = 
	`tsub
—2, 
t1
);

292 
	`ªp‹t_io_times
("löked", &
t2
, ()
doff£t
, 
cou¡
, 
tŸÆ
, 
›s
,

293 
c⁄dí£d
);

294 
d⁄e
:

295 
	`˛o£
(
fd
);

297 
	}
}

300 
	$ªÊök_öô
()

302 
ªÊök_cmd
.
«me
 = "reflink";

303 
ªÊök_cmd
.
Æäame
 = "rl";

304 
ªÊök_cmd
.
cfunc
 = 
ªÊök_f
;

305 
ªÊök_cmd
.
¨gmö
 = 1;

306 
ªÊök_cmd
.
¨gmax
 = -1;

307 
ªÊök_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
 | 
CMD_FLAG_ONESHOT
;

308 
ªÊök_cmd
.
¨gs
 =

309 
	`_
("infile [src_off dst_offÜen]");

310 
ªÊök_cmd
.
⁄ñöe
 =

311 
	`_
("reflinksánÉntire file, oráÇumber of bytesátá specified offset");

312 
ªÊök_cmd
.
hñp
 = 
ªÊök_hñp
;

314 
	`add_comm™d
(&
ªÊök_cmd
);

316 
dedu≥_cmd
.
«me
 = "dedupe";

317 
dedu≥_cmd
.
Æäame
 = "dd";

318 
dedu≥_cmd
.
cfunc
 = 
dedu≥_f
;

319 
dedu≥_cmd
.
¨gmö
 = 4;

320 
dedu≥_cmd
.
¨gmax
 = -1;

321 
dedu≥_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
 | 
CMD_FLAG_ONESHOT
;

322 
dedu≥_cmd
.
¨gs
 =

323 
	`_
("infile src_off dst_offÜen");

324 
dedu≥_cmd
.
⁄ñöe
 =

325 
	`_
("dedupesáÇumber of bytesátá specified offset");

326 
dedu≥_cmd
.
hñp
 = 
dedu≥_hñp
;

328 
	`add_comm™d
(&
dedu≥_cmd
);

329 
	}
}

	@io/resblks.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	gªsblks_cmd
;

25 
ªsblks_f
(
¨gc
, **
¨gv
);

28 
	$ªsblks_f
(

29 
¨gc
,

30 **
¨gv
)

32 
xfs_fs›_ªsblks_t
 
ªs
;

33 
blks
;

35 i‡(
¨gc
 == 2) {

36 
blks
 = 
	`cväum
(
fûe
->
geom
.
blocksize
, fûe->geom.
£˘size
, 
¨gv
[1]);

37 i‡(
blks
 < 0) {

38 
	`¥ötf
(
	`_
("n⁄-numîi¯¨gumíà-- %s\n"), 
¨gv
[1]);

41 
ªs
.
ªsblks
 = 
blks
;

42 i‡(
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_SET_RESBLKS
, &
ªs
) < 0) {

43 
	`≥º‹
("XFS_IOC_SET_RESBLKS");

46 } i‡(
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_GET_RESBLKS
, &
ªs
) < 0) {

47 
	`≥º‹
("XFS_IOC_GET_RESBLKS");

50 
	`¥ötf
(
	`_
("reserved blocks = %llu\n"),

51 (Ë
ªs
.
ªsblks
);

52 
	`¥ötf
(
	`_
("availableÑeserved blocks = %llu\n"),

53 (Ë
ªs
.
ªsblks_avaû
);

55 
	}
}

58 
	$ªsblks_öô
()

60 
ªsblks_cmd
.
«me
 = "resblks";

61 
ªsblks_cmd
.
cfunc
 = 
ªsblks_f
;

62 
ªsblks_cmd
.
¨gmö
 = 0;

63 
ªsblks_cmd
.
¨gmax
 = 1;

64 
ªsblks_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FLAG_ONESHOT
;

65 
ªsblks_cmd
.
¨gs
 = 
	`_
("[blocks]");

66 
ªsblks_cmd
.
⁄ñöe
 =

67 
	`_
("getánd/or set count ofÑeserved filesystem blocks");

69 i‡(
ex≥π
)

70 
	`add_comm™d
(&
ªsblks_cmd
);

71 
	}
}

	@io/seek.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~<sys/ty≥s.h
>

22 
	~<uni°d.h
>

23 
	~"öô.h
"

24 
	~"io.h
"

26 
cmdöfo_t
 
	g£ek_cmd
;

29 
	$£ek_hñp
()

31 
	`¥ötf
(
	`_
(

48 
	}
}

50 #i‚de‡
HAVE_SEEK_DATA


51 
	#SEEK_DATA
 3

	)

52 
	#SEEK_HOLE
 4

	)

56 
	#SEEK_DFLAG
 (1 << 0)

	)

57 
	#SEEK_HFLAG
 (1 << 1)

	)

58 
	#SEEK_RFLAG
 (1 << 2)

	)

61 
	#DATA
 0

	)

62 
	#HOLE
 1

	)

64 
	s£eköfo
 {

65 *
	m«me
;

66 
	m£ekty≥
;

67 
	mmask
;

68 } 
	g£eköfo
[] = {

69 {"DATA", 
SEEK_DATA
, 
SEEK_DFLAG
},

70 {"HOLE", 
SEEK_HOLE
, 
SEEK_HFLAG
}

75 
	$£ek_ouçut
(

76 
°¨tÊag
,

77 *
ty≥
,

78 
off64_t
 
°¨t
,

79 
off64_t
 
off£t
)

81 i‡(
off£t
 == -1) {

82 i‡(
î∫o
 =
ENXIO
) {

83 i‡(
°¨tÊag
)

84 
	`¥ötf
("%s %Œd EOF\n", 
ty≥
,

85 ()
°¨t
);

87 
	`¥ötf
("%s EOF\n", 
ty≥
);

89 
	`¥ötf
("ERR %Œd ", ()
°¨t
);

90 
	`fÊush
(
°dout
);

91 
	`≥º‹
("");

94 i‡(
°¨tÊag
)

95 
	`¥ötf
("%s %Œd %Œd\n", 
ty≥
,

96 ()
°¨t
, ()
off£t
);

98 
	`¥ötf
("%s %Œd\n", 
ty≥
, ()
off£t
);

100 
	}
}

103 
	$£ek_f
(

104 
¨gc
,

105 **
¨gv
)

107 
off64_t
 
off£t
, 
°¨t
;

108 
size_t
 
fsblocksize
, 
fs£˘size
;

109 
c
;

110 
cuºít
;

111 
Êag
;

112 
°¨tÊag
;

114 
Êag
 = 
°¨tÊag
 = 0;

115 
	`öô_cväum
(&
fsblocksize
, &
fs£˘size
);

117 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "adhrs")Ë!
EOF
) {

118 
c
) {

120 
Êag
 |(
SEEK_HFLAG
 | 
SEEK_DFLAG
);

123 
Êag
 |
SEEK_DFLAG
;

126 
Êag
 |
SEEK_HFLAG
;

129 
Êag
 |
SEEK_RFLAG
;

132 
°¨tÊag
 = 1;

135  
	`comm™d_ußge
(&
£ek_cmd
);

138 i‡(!(
Êag
 & (
SEEK_DFLAG
 | 
SEEK_HFLAG
)Ë|| 
›töd
 !
¨gc
 - 1)

139  
	`comm™d_ußge
(&
£ek_cmd
);

141 
°¨t
 = 
off£t
 = 
	`cväum
(
fsblocksize
, 
fs£˘size
, 
¨gv
[
›töd
]);

142 i‡(
off£t
 < 0)

143  
	`comm™d_ußge
(&
£ek_cmd
);

149 i‡(
Êag
 & 
SEEK_HFLAG
) {

150 
off£t
 = 
	`l£ek
(
fûe
->
fd
, 
°¨t
, 
SEEK_HOLE
);

151 i‡((
°¨t
 =
off£t
Ë|| !(
Êag
 & 
SEEK_DFLAG
)) {

158 
cuºít
 = 
HOLE
;

159 
found_hﬁe
;

164 
cuºít
 = 
DATA
;

165 
off£t
 = 
	`l£ek
(
fûe
->
fd
, 
°¨t
, 
SEEK_DATA
);

167 
found_hﬁe
:

177 i‡(
°¨tÊag
)

178 
	`¥ötf
("Whence Start Result\n");

180 
	`¥ötf
("Whence Result\n");

182 
c
 = 0; 
Êag
; c++) {

183 i‡(
off£t
 == -1) {

185 i‡(
î∫o
 !
ENXIO
 || 
c
 == 0 )

186 
	`£ek_ouçut
(
°¨tÊag
, 
£eköfo
[
cuºít
].
«me
,

187 
°¨t
, 
off£t
);

191 i‡(
Êag
 & 
£eköfo
[
cuºít
].
mask
)

192 
	`£ek_ouçut
(
°¨tÊag
, 
£eköfo
[
cuºít
].
«me
, 
°¨t
,

193 
off£t
);

200 i‡(!(
Êag
 & 
SEEK_RFLAG
))

201 
Êag
 &~
£eköfo
[
cuºít
].
mask
;

203 
cuºít
 ^= 1;

204 
°¨t
 = 
off£t
;

205 
off£t
 = 
	`l£ek
(
fûe
->
fd
, 
°¨t
, 
£eköfo
[
cuºít
].
£ekty≥
);

208 
	}
}

211 
	$£ek_öô
()

213 
£ek_cmd
.
«me
 = "seek";

214 
£ek_cmd
.
cfunc
 = 
£ek_f
;

215 
£ek_cmd
.
¨gmö
 = 2;

216 
£ek_cmd
.
¨gmax
 = 5;

217 
£ek_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

218 
£ek_cmd
.
¨gs
 = 
	`_
("-a | -d | -h [-r] off");

219 
£ek_cmd
.
⁄ñöe
 = 
	`_
("locateÅheÇext dataánd/or hole");

220 
£ek_cmd
.
hñp
 = 
£ek_hñp
;

222 
	`add_comm™d
(&
£ek_cmd
);

223 
	}
}

	@io/sendfile.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~<sys/£ndfûe.h
>

22 
	~"öô.h
"

23 
	~"io.h
"

25 
cmdöfo_t
 
	g£ndfûe_cmd
;

28 
	$£ndfûe_hñp
()

30 
	`¥ötf
(
	`_
(

44 
	}
}

47 
	$£nd_buf„r
(

48 
off64_t
 
off£t
,

49 
size_t
 
cou¡
,

50 
fd
,

51 *
tŸÆ
)

53 
off64_t
 
off
 = 
off£t
;

54 
ssize_t
 
byãs
, 
byãs_ªmaöög
 = 
cou¡
;

55 
›s
 = 0;

57 *
tŸÆ
 = 0;

58 
cou¡
 > 0) {

59 
byãs
 = 
	`£ndfûe
(
fûe
->
fd
, fd, &
off
, 
byãs_ªmaöög
);

60 i‡(
byãs
 == 0)

62 i‡(
byãs
 < 0) {

63 
	`≥º‹
("sendfile");

66 
›s
++;

67 *
tŸÆ
 +
byãs
;

68 i‡(
byãs
 >
byãs_ªmaöög
)

70 
byãs_ªmaöög
 -
byãs
;

72  
›s
;

73 
	}
}

76 
	$£ndfûe_f
(

77 
¨gc
,

78 **
¨gv
)

80 
off64_t
 
off£t
 = 0;

81 
cou¡
, 
tŸÆ
;

82 
size_t
 
blocksize
, 
£˘size
;

83 
timevÆ
 
t1
, 
t2
;

84 *
öfûe
 = 
NULL
;

85 
CÊag
, 
qÊag
;

86 
c
, 
fd
 = -1;

88 
CÊag
 = 
qÊag
 = 0;

89 
	`öô_cväum
(&
blocksize
, &
£˘size
);

90 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "Cf:i:q")Ë!
EOF
) {

91 
c
) {

93 
CÊag
 = 1;

96 
qÊag
 = 1;

99 
fd
 = 
	`©oi
(
¨gv
[1]);

100 i‡(
fd
 < 0 || fd >
fûecou¡
) {

101 
	`¥ötf
(
	`_
("value %d is out ofÑange (0-%d)\n"),

102 
fd
, 
fûecou¡
-1);

107 
öfûe
 = 
›èrg
;

110  
	`comm™d_ußge
(&
£ndfûe_cmd
);

113 i‡(
öfûe
 && 
fd
 != -1)

114  
	`comm™d_ußge
(&
£ndfûe_cmd
);

116 i‡(!
öfûe
)

117 
fd
 = 
fûëabÀ
[fd].fd;

118 i‡((
fd
 = 
	`›ífûe
(
öfûe
, 
NULL
, 
IO_READONLY
, 0)) < 0)

121 i‡(
›töd
 =
¨gc
 - 2) {

122 
off£t
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

123 i‡(
off£t
 < 0) {

124 
	`¥ötf
(
	`_
("non-numeric offsetárgument -- %s\n"),

125 
¨gv
[
›töd
]);

126 
d⁄e
;

128 
›töd
++;

129 
cou¡
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

130 i‡(
cou¡
 < 0) {

131 
	`¥ötf
(
	`_
("non-numericÜengthárgument -- %s\n"),

132 
¨gv
[
›töd
]);

133 
d⁄e
;

136 
°©
 stat;

138 i‡(
	`f°©
(
fd
, &
°©
) < 0) {

139 
	`≥º‹
("fstat");

140 
d⁄e
;

142 
cou¡
 = 
°©
.
°_size
;

145 
	`gëtimeofday
(&
t1
, 
NULL
);

146 
c
 = 
	`£nd_buf„r
(
off£t
, 
cou¡
, 
fd
, &
tŸÆ
);

147 i‡(
c
 < 0)

148 
d⁄e
;

149 i‡(
qÊag
)

150 
d⁄e
;

151 
	`gëtimeofday
(&
t2
, 
NULL
);

152 
t2
 = 
	`tsub
—2, 
t1
);

154 
	`ªp‹t_io_times
("£¡", &
t2
, ()
off£t
, 
cou¡
, 
tŸÆ
, 
c
, 
CÊag
);

155 
d⁄e
:

156 i‡(
öfûe
)

157 
	`˛o£
(
fd
);

159 
	}
}

162 
	$£ndfûe_öô
()

164 
£ndfûe_cmd
.
«me
 = "sendfile";

165 
£ndfûe_cmd
.
Æäame
 = "send";

166 
£ndfûe_cmd
.
cfunc
 = 
£ndfûe_f
;

167 
£ndfûe_cmd
.
¨gmö
 = 2;

168 
£ndfûe_cmd
.
¨gmax
 = -1;

169 
£ndfûe_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

170 
£ndfûe_cmd
.
¨gs
 =

171 
	`_
("-i infile | -f N [offÜen]");

172 
£ndfûe_cmd
.
⁄ñöe
 =

173 
	`_
("Transfer data directly between file descriptors");

174 
£ndfûe_cmd
.
hñp
 = 
£ndfûe_hñp
;

176 
	`add_comm™d
(&
£ndfûe_cmd
);

177 
	}
}

	@io/shutdown.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	gshutdown_cmd
;

27 
	$shutdown_f
(

28 
¨gc
,

29 **
¨gv
)

31 
c
, 
Êag
 = 
XFS_FSOP_GOING_FLAGS_NOLOGFLUSH
;

33 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "fv")) != -1) {

34 
c
) {

36 
Êag
 = 
XFS_FSOP_GOING_FLAGS_LOGFLUSH
;

39  
	`comm™d_ußge
(&
shutdown_cmd
);

43 i‡((
	`xfs˘l
(
fûe
->
«me
, fûe->
fd
, 
XFS_IOC_GOINGDOWN
, &
Êag
)) < 0) {

44 
	`≥º‹
("XFS_IOC_GOINGDOWN");

48 
	}
}

51 
	$shutdown_öô
()

53 
shutdown_cmd
.
«me
 = "shutdown";

54 
shutdown_cmd
.
cfunc
 = 
shutdown_f
;

55 
shutdown_cmd
.
¨gmö
 = 0;

56 
shutdown_cmd
.
¨gmax
 = 1;

57 
shutdown_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FLAG_ONESHOT
;

58 
shutdown_cmd
.
¨gs
 = 
	`_
("[-f]");

59 
shutdown_cmd
.
⁄ñöe
 =

60 
	`_
("shuts downÅhe filesystem whereÅhe current fileÑesides");

62 i‡(
ex≥π
)

63 
	`add_comm™d
(&
shutdown_cmd
);

64 
	}
}

	@io/sync.c

19 
	~"∂©f‹m_defs.h
"

20 
	~"comm™d.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	gsync_cmd
;

27 
	$sync_f
(

28 
¨gc
,

29 **
¨gv
)

32 
	`sync
();

34 
	}
}

36 #ifde‡
HAVE_SYNCFS


37 
cmdöfo_t
 
	gsyncfs_cmd
;

40 
	$syncfs_f
(

41 
¨gc
,

42 **
¨gv
)

45 
	`syncfs
(
fûe
->
fd
);

47 
	}
}

51 
	$sync_öô
()

53 
sync_cmd
.
«me
 = "sync";

54 
sync_cmd
.
cfunc
 = 
sync_f
;

55 
sync_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_NOFILE_OK
 |

56 
CMD_FOREIGN_OK
 | 
CMD_FLAG_ONESHOT
;

57 
sync_cmd
.
⁄ñöe
 =

58 
	`_
("calls sync(2)Åo flusháll in-core filesystem stateÅo disk");

60 
	`add_comm™d
(&
sync_cmd
);

62 #ifde‡
HAVE_SYNCFS


63 
syncfs_cmd
.
«me
 = "syncfs";

64 
syncfs_cmd
.
cfunc
 = 
syncfs_f
;

65 
syncfs_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

66 
syncfs_cmd
.
⁄ñöe
 =

67 
	`_
("calls syncfs(2)Åo flusháll in-core filesystem stateÅo disk");

69 
	`add_comm™d
(&
syncfs_cmd
);

71 
	}
}

	@io/sync_file_range.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	gsync_ønge_cmd
;

27 
	$sync_ønge_hñp
()

29 
	`¥ötf
(
	`_
(

38 
	}
}

41 
	$sync_ønge_f
(

42 
¨gc
,

43 **
¨gv
)

45 
off64_t
 
off£t
 = 0, 
Àngth
 = 0;

46 
c
, 
sync_mode
 = 0;

47 
size_t
 
blocksize
, 
£˘size
;

49 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "abw")Ë!
EOF
) {

50 
c
) {

52 
sync_mode
 = 
SYNC_FILE_RANGE_WAIT_AFTER
;

55 
sync_mode
 = 
SYNC_FILE_RANGE_WAIT_BEFORE
;

58 
sync_mode
 = 
SYNC_FILE_RANGE_WRITE
;

61  
	`comm™d_ußge
(&
sync_ønge_cmd
);

66 i‡(!
sync_mode
)

67 
sync_mode
 = 
SYNC_FILE_RANGE_WRITE
;

69 i‡(
›töd
 !
¨gc
 - 2)

70  
	`comm™d_ußge
(&
sync_ønge_cmd
);

71 
	`öô_cväum
(&
blocksize
, &
£˘size
);

72 
off£t
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

73 i‡(
off£t
 < 0) {

74 
	`¥ötf
(
	`_
("non-numeric offsetárgument -- %s\n"),

75 
¨gv
[
›töd
]);

78 
›töd
++;

79 
Àngth
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[
›töd
]);

80 i‡(
Àngth
 < 0) {

81 
	`¥ötf
(
	`_
("non-numericÜengthárgument -- %s\n"),

82 
¨gv
[
›töd
]);

86 i‡(
	`sync_fûe_ønge
(
fûe
->
fd
, 
off£t
, 
Àngth
, 
sync_mode
) < 0) {

87 
	`≥º‹
("sync_file_range");

91 
	}
}

94 
	$sync_ønge_öô
()

96 
sync_ønge_cmd
.
«me
 = "sync_range";

97 
sync_ønge_cmd
.
cfunc
 = 
sync_ønge_f
;

98 
sync_ønge_cmd
.
¨gmö
 = 2;

99 
sync_ønge_cmd
.
¨gmax
 = -1;

100 
sync_ønge_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

101 
sync_ønge_cmd
.
¨gs
 = 
	`_
("[-abw] offÜen");

102 
sync_ønge_cmd
.
⁄ñöe
 = 
	`_
("Control writeback onáÑange ofá file");

103 
sync_ønge_cmd
.
hñp
 = 
sync_ønge_hñp
;

105 
	`add_comm™d
(&
sync_ønge_cmd
);

106 
	}
}

	@io/truncate.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	gåunˇã_cmd
;

27 
	$åunˇã_f
(

28 
¨gc
,

29 **
¨gv
)

31 
off64_t
 
off£t
;

32 
size_t
 
blocksize
, 
£˘size
;

34 
	`öô_cväum
(&
blocksize
, &
£˘size
);

35 
off£t
 = 
	`cväum
(
blocksize
, 
£˘size
, 
¨gv
[1]);

36 i‡(
off£t
 < 0) {

37 
	`¥ötf
(
	`_
("n⁄-numîi¯åunˇãárgumíà-- %s\n"), 
¨gv
[1]);

41 i‡(
	`·runˇã
(
fûe
->
fd
, 
off£t
) < 0) {

42 
	`≥º‹
("ftruncate");

46 
	}
}

49 
	$åunˇã_öô
()

51 
åunˇã_cmd
.
«me
 = "truncate";

52 
åunˇã_cmd
.
Æäame
 = "t";

53 
åunˇã_cmd
.
cfunc
 = 
åunˇã_f
;

54 
åunˇã_cmd
.
¨gmö
 = 1;

55 
åunˇã_cmd
.
¨gmax
 = 1;

56 
åunˇã_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

57 
åunˇã_cmd
.
¨gs
 = 
	`_
("off");

58 
åunˇã_cmd
.
⁄ñöe
 =

59 
	`_
("truncatesÅhe current fileátÅhe given offset");

61 
	`add_comm™d
(&
åunˇã_cmd
);

62 
	}
}

	@io/utimes.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"io.h
"

24 
cmdöfo_t
 
	gutimes_cmd
;

27 
	$utimes_hñp
()

29 
	`¥ötf
(
	`_
(

37 
	}
}

40 
	$utimes_f
(

41 
¨gc
,

42 **
¨gv
)

44 
time•ec
 
t
[2];

45 
ªsu…
;

48 
ªsu…
 = 
	`time•ec_‰om_°rög
(
¨gv
[1],árgv[2], &
t
[0]);

49 i‡(
ªsu…
) {

50 
	`Ârötf
(
°dîr
, "Bad value forátime\n");

53 
ªsu…
 = 
	`time•ec_‰om_°rög
(
¨gv
[3],árgv[4], &
t
[1]);

54 i‡(
ªsu…
) {

55 
	`Ârötf
(
°dîr
, "Bad value for mtime\n");

60 i‡(
	`futimís
(
fûe
->
fd
, 
t
)) {

61 
	`≥º‹
("futimens");

66 
	}
}

69 
	$utimes_öô
()

71 
utimes_cmd
.
«me
 = "utimes";

72 
utimes_cmd
.
cfunc
 = 
utimes_f
;

73 
utimes_cmd
.
¨gmö
 = 4;

74 
utimes_cmd
.
¨gmax
 = 4;

75 
utimes_cmd
.
Êags
 = 
CMD_NOMAP_OK
 | 
CMD_FOREIGN_OK
;

76 
utimes_cmd
.
¨gs
 = 
	`_
("atime_secátime_nsec mtime_sec mtime_nsec");

77 
utimes_cmd
.
⁄ñöe
 = 
	`_
("Update fileÅimes ofÅhe current file");

78 
utimes_cmd
.
hñp
 = 
utimes_hñp
;

80 
	`add_comm™d
(&
utimes_cmd
);

81 
	}
}

	@libhandle/handle.c

19 
	~<libgí.h
>

20 
	~"∂©f‹m_defs.h
"

21 
	~"xfs.h
"

22 
	~"h™dÀ.h
"

23 
	~"∑ª¡.h
"

26 
	#MAXHANSIZ
 64

	)

36 
	#FSIDSIZE
 8

	)

39 
	mfd
;

40 *
	m∑th
;

41 } 
	tcom¨g_t
;

43 
obj_to_h™dÀ
(*, , , 
com¨g_t
, **, 
size_t
*);

44 
h™dÀ_to_fsfd
(*, **);

45 *
∑th_to_f•©h
(*
∑th
);

56 
	sfdhash
 {

57 
	mfsfd
;

58 
	mfsh
[
FSIDSIZE
];

59 
fdhash
 *
	m‚xt
;

60 
	mf•©h
[
MAXPATHLEN
];

63 
fdhash
 *
	gfdhash_hód
 = 
NULL
;

66 
	$∑th_to_fsh™dÀ
(

67 *
∑th
,

68 **
fsh™p
,

69 
size_t
 *
fshÀn
)

71 
ªsu…
;

72 
fd
;

73 
com¨g_t
 
obj
;

74 
fdhash
 *
fdhp
;

75 *
tmµ©h
;

76 *
f•©h
;

78 
f•©h
 = 
	`∑th_to_f•©h
(
∑th
);

79 i‡(
f•©h
 =
NULL
)

82 
fd
 = 
	`›í
(
f•©h
, 
O_RDONLY
);

83 i‡(
fd
 < 0)

86 
obj
.
∑th
 =Öath;

87 
ªsu…
 = 
	`obj_to_h™dÀ
(
f•©h
, 
fd
, 
XFS_IOC_PATH_TO_FSHANDLE
,

88 
obj
, 
fsh™p
, 
fshÀn
);

89 i‡(
ªsu…
 < 0) {

90 
	`˛o£
(
fd
);

91  
ªsu…
;

94 i‡(
	`h™dÀ_to_fsfd
(*
fsh™p
, &
tmµ©h
) >= 0) {

96 
	`˛o£
(
fd
);

99 
fdhp
 = 
	`mÆloc
((
fdhash
));

100 i‡(
fdhp
 =
NULL
) {

101 
	`‰ì
(*
fsh™p
);

102 
	`˛o£
(
fd
);

103 
î∫o
 = 
ENOMEM
;

107 
fdhp
->
fsfd
 = 
fd
;

108 
	`°∫˝y
(
fdhp
->
f•©h
, fspath, (fdhp->fspath));

109 
	`mem˝y
(
fdhp
->
fsh
, *
fsh™p
, 
FSIDSIZE
);

111 
fdhp
->
‚xt
 = 
fdhash_hód
;

112 
fdhash_hód
 = 
fdhp
;

115  
ªsu…
;

116 
	}
}

119 
	$∑th_to_h™dÀ
(

120 *
∑th
,

121 **
h™p
,

122 
size_t
 *
hÀn
)

124 
fd
;

125 
ªsu…
;

126 
com¨g_t
 
obj
;

127 *
f•©h
;

129 
f•©h
 = 
	`∑th_to_f•©h
(
∑th
);

130 i‡(
f•©h
 =
NULL
)

133 
fd
 = 
	`›í
(
f•©h
, 
O_RDONLY
);

134 i‡(
fd
 < 0)

137 
obj
.
∑th
 =Öath;

138 
ªsu…
 = 
	`obj_to_h™dÀ
(
f•©h
, 
fd
, 
XFS_IOC_PATH_TO_HANDLE
,

139 
obj
, 
h™p
, 
hÀn
);

140 
	`˛o£
(
fd
);

141  
ªsu…
;

142 
	}
}

153 
	$∑th_to_f•©h
(*
∑th
)

155 
dú∑th
[
MAXPATHLEN
];

156 
°©
 
°©buf
;

158 i‡(
	`l°©
(
∑th
, &
°©buf
) != 0)

159  
NULL
;

161 i‡(
	`S_ISREG
(
°©buf
.
°_mode
Ë|| 
	`S_ISDIR
(statbuf.st_mode))

162  
∑th
;

164 
	`°∫˝y
(
dú∑th
, 
∑th
, 
MAXPATHLEN
);

165 
dú∑th
[
MAXPATHLEN
-1] = '\0';

166  
	`dú«me
(
dú∑th
);

167 
	}
}

170 
	$fd_to_h™dÀ
 (

171 
fd
,

172 **
h™p
,

173 
size_t
 *
hÀn
)

175 
com¨g_t
 
obj
;

177 
obj
.
fd
 = fd;

178  
	`obj_to_h™dÀ
(
NULL
, 
fd
, 
XFS_IOC_FD_TO_HANDLE
, 
obj
, 
h™p
, 
hÀn
);

179 
	}
}

183 
	$h™dÀ_to_fsh™dÀ
(

184 *
h™p
,

185 
size_t
 
hÀn
,

186 **
fsh™p
,

187 
size_t
 *
fshÀn
)

189 i‡(
hÀn
 < 
FSIDSIZE
) {

190 
î∫o
 = 
EINVAL
;

193 *
fsh™p
 = 
	`mÆloc
(
FSIDSIZE
);

194 i‡(*
fsh™p
 =
NULL
) {

195 
î∫o
 = 
ENOMEM
;

198 *
fshÀn
 = 
FSIDSIZE
;

199 
	`mem˝y
(*
fsh™p
, 
h™p
, 
FSIDSIZE
);

201 
	}
}

204 
	$h™dÀ_to_fsfd
(*
h™p
, **
∑th
)

206 
fdhash
 *
fdhp
;

214 
fdhp
 = 
fdhash_hód
; fdh∞!
NULL
; fdh∞fdhp->
‚xt
) {

215 i‡(
	`memcmp
(
fdhp
->
fsh
, 
h™p
, 
FSIDSIZE
) == 0) {

216 *
∑th
 = 
fdhp
->
f•©h
;

217  
fdhp
->
fsfd
;

220 
î∫o
 = 
EBADF
;

222 
	}
}

225 
	$obj_to_h™dÀ
(

226 *
f•©h
,

227 
fsfd
,

228 
›code
,

229 
com¨g_t
 
obj
,

230 **
h™p
,

231 
size_t
 *
hÀn
)

233 
hbuf
 [
MAXHANSIZ
];

234 
ªt
;

235 
__uöt32_t
 
h™dÀn
;

236 
xfs_fs›_h™dÀªq_t
 
hªq
;

238 i‡(
›code
 =
XFS_IOC_FD_TO_HANDLE
) {

239 
hªq
.
fd
 = 
obj
.fd;

240 
hªq
.
∑th
 = 
NULL
;

242 
hªq
.
fd
 = 0;

243 
hªq
.
∑th
 = 
obj
.path;

246 
hªq
.
oÊags
 = 
O_LARGEFILE
;

247 
hªq
.
ih™dÀ
 = 
NULL
;

248 
hªq
.
ih™dÀn
 = 0;

249 
hªq
.
oh™dÀ
 = 
hbuf
;

250 
hªq
.
oh™dÀn
 = &
h™dÀn
;

252 
ªt
 = 
	`xfs˘l
(
f•©h
, 
fsfd
, 
›code
, &
hªq
);

253 i‡(
ªt
)

254  
ªt
;

256 *
h™p
 = 
	`mÆloc
(
h™dÀn
);

257 i‡(*
h™p
 =
NULL
) {

258 
î∫o
 = 
ENOMEM
;

262 
	`mem˝y
(*
h™p
, 
hbuf
, 
h™dÀn
);

263 *
hÀn
 = 
h™dÀn
;

265 
	}
}

268 
	$›í_by_fsh™dÀ
(

269 *
fsh™p
,

270 
size_t
 
fshÀn
,

271 
rw
)

273 
fsfd
;

274 *
∑th
;

275 
xfs_fs›_h™dÀªq_t
 
hªq
;

277 i‡((
fsfd
 = 
	`h™dÀ_to_fsfd
(
fsh™p
, &
∑th
)) < 0)

280 
hªq
.
fd
 = 0;

281 
hªq
.
∑th
 = 
NULL
;

282 
hªq
.
oÊags
 = 
rw
 | 
O_LARGEFILE
;

283 
hªq
.
ih™dÀ
 = 
fsh™p
;

284 
hªq
.
ih™dÀn
 = 
fshÀn
;

285 
hªq
.
oh™dÀ
 = 
NULL
;

286 
hªq
.
oh™dÀn
 = 
NULL
;

288  
	`xfs˘l
(
∑th
, 
fsfd
, 
XFS_IOC_OPEN_BY_HANDLE
, &
hªq
);

289 
	}
}

292 
	$›í_by_h™dÀ
(

293 *
h™p
,

294 
size_t
 
hÀn
,

295 
rw
)

297 
fsfd
;

298 *
∑th
;

299 
xfs_fs›_h™dÀªq_t
 
hªq
;

301 i‡((
fsfd
 = 
	`h™dÀ_to_fsfd
(
h™p
, &
∑th
)) < 0)

304 
hªq
.
fd
 = 0;

305 
hªq
.
∑th
 = 
NULL
;

306 
hªq
.
oÊags
 = 
rw
 | 
O_LARGEFILE
;

307 
hªq
.
ih™dÀ
 = 
h™p
;

308 
hªq
.
ih™dÀn
 = 
hÀn
;

309 
hªq
.
oh™dÀ
 = 
NULL
;

310 
hªq
.
oh™dÀn
 = 
NULL
;

312  
	`xfs˘l
(
∑th
, 
fsfd
, 
XFS_IOC_OPEN_BY_HANDLE
, &
hªq
);

313 
	}
}

316 
	$ªadlök_by_h™dÀ
(

317 *
h™p
,

318 
size_t
 
hÀn
,

319 *
buf
,

320 
size_t
 
bufsiz
)

322 
fd
;

323 
__u32
 
buÊí
 = (__u32)
bufsiz
;

324 *
∑th
;

325 
xfs_fs›_h™dÀªq_t
 
hªq
;

327 i‡((
fd
 = 
	`h™dÀ_to_fsfd
(
h™p
, &
∑th
)) < 0)

330 
hªq
.
fd
 = 0;

331 
hªq
.
∑th
 = 
NULL
;

332 
hªq
.
oÊags
 = 
O_LARGEFILE
;

333 
hªq
.
ih™dÀ
 = 
h™p
;

334 
hªq
.
ih™dÀn
 = 
hÀn
;

335 
hªq
.
oh™dÀ
 = 
buf
;

336 
hªq
.
oh™dÀn
 = &
buÊí
;

338  
	`xfs˘l
(
∑th
, 
fd
, 
XFS_IOC_READLINK_BY_HANDLE
, &
hªq
);

339 
	}
}

343 
	$©å_mu…i_by_h™dÀ
(

344 *
h™p
,

345 
size_t
 
hÀn
,

346 *
buf
,

347 
πrv˙t
,

348 
Êags
)

350 
fd
;

351 *
∑th
;

352 
xfs_fs›_©åmu…i_h™dÀªq_t
 
amhªq
;

354 i‡((
fd
 = 
	`h™dÀ_to_fsfd
(
h™p
, &
∑th
)) < 0)

357 
amhªq
.
hªq
.
fd
 = 0;

358 
amhªq
.
hªq
.
∑th
 = 
NULL
;

359 
amhªq
.
hªq
.
oÊags
 = 
O_LARGEFILE
;

360 
amhªq
.
hªq
.
ih™dÀ
 = 
h™p
;

361 
amhªq
.
hªq
.
ih™dÀn
 = 
hÀn
;

362 
amhªq
.
hªq
.
oh™dÀ
 = 
NULL
;

363 
amhªq
.
hªq
.
oh™dÀn
 = 
NULL
;

365 
amhªq
.
›cou¡
 = 
πrv˙t
;

366 
amhªq
.
›s
 = 
buf
;

368  
	`xfs˘l
(
∑th
, 
fd
, 
XFS_IOC_ATTRMULTI_BY_HANDLE
, &
amhªq
);

369 
	}
}

372 
	$©å_li°_by_h™dÀ
(

373 *
h™p
,

374 
size_t
 
hÀn
,

375 *
buf
,

376 
size_t
 
bufsize
,

377 
Êags
,

378 
©åli°_curs‹
 *
curs‹
)

380 
îr‹
, 
fd
;

381 *
∑th
;

382 
xfs_fs›_©åli°_h™dÀªq_t
 
Æhªq
;

384 i‡((
fd
 = 
	`h™dÀ_to_fsfd
(
h™p
, &
∑th
)) < 0)

387 
Æhªq
.
hªq
.
fd
 = 0;

388 
Æhªq
.
hªq
.
∑th
 = 
NULL
;

389 
Æhªq
.
hªq
.
oÊags
 = 
O_LARGEFILE
;

390 
Æhªq
.
hªq
.
ih™dÀ
 = 
h™p
;

391 
Æhªq
.
hªq
.
ih™dÀn
 = 
hÀn
;

392 
Æhªq
.
hªq
.
oh™dÀ
 = 
NULL
;

393 
Æhªq
.
hªq
.
oh™dÀn
 = 
NULL
;

395 
	`mem˝y
(&
Æhªq
.
pos
, 
curs‹
, (alhreq.pos));

396 
Æhªq
.
Êags
 = flags;

397 
Æhªq
.
buf„r
 = 
buf
;

398 
Æhªq
.
buÊí
 = 
bufsize
;

400 i‡(
Æhªq
.
buÊí
 > 
XFS_XATTR_LIST_MAX
)

401 
Æhªq
.
buÊí
 = 
XFS_XATTR_LIST_MAX
;

403 
îr‹
 = 
	`xfs˘l
(
∑th
, 
fd
, 
XFS_IOC_ATTRLIST_BY_HANDLE
, &
Æhªq
);

405 
	`mem˝y
(
curs‹
, &
Æhªq
.
pos
, (alhreq.pos));

406  
îr‹
;

407 
	}
}

410 
	$∑ª¡s_by_h™dÀ
(

411 *
h™p
,

412 
size_t
 
hÀn
,

413 
∑ª¡_t
 *
buf
,

414 
size_t
 
bufsiz
,

415 *
cou¡
)

418 
î∫o
 = 
EOPNOTSUPP
;

420 
	}
}

423 
	$∑ª¡∑ths_by_h™dÀ
(

424 *
h™p
,

425 
size_t
 
hÀn
,

426 
∑ª¡_t
 *
buf
,

427 
size_t
 
bufsiz
,

428 *
cou¡
)

430 
î∫o
 = 
EOPNOTSUPP
;

432 
	}
}

435 
	$fs£tdm_by_h™dÀ
(

436 *
h™p
,

437 
size_t
 
hÀn
,

438 
fsdmid©a
 *fsdmidata)

440 
fd
;

441 *
∑th
;

442 
xfs_fs›_£tdm_h™dÀªq_t
 
dmhªq
;

444 i‡((
fd
 = 
	`h™dÀ_to_fsfd
(
h™p
, &
∑th
)) < 0)

447 
dmhªq
.
hªq
.
fd
 = 0;

448 
dmhªq
.
hªq
.
∑th
 = 
NULL
;

449 
dmhªq
.
hªq
.
oÊags
 = 
O_LARGEFILE
;

450 
dmhªq
.
hªq
.
ih™dÀ
 = 
h™p
;

451 
dmhªq
.
hªq
.
ih™dÀn
 = 
hÀn
;

452 
dmhªq
.
hªq
.
oh™dÀ
 = 
NULL
;

453 
dmhªq
.
hªq
.
oh™dÀn
 = 
NULL
;

455 
dmhªq
.
d©a
 = 
fsdmid©a
;

457  
	`xfs˘l
(
∑th
, 
fd
, 
XFS_IOC_FSSETDM_BY_HANDLE
, &
dmhªq
);

458 
	}
}

462 
	$‰ì_h™dÀ
(

463 *
h™p
,

464 
size_t
 
hÀn
)

466 
	`‰ì
(
h™p
);

467 
	}
}

	@libhandle/jdm.c

19 
	~"∂©f‹m_defs.h
"

20 
	~"xfs.h
"

21 
	~"h™dÀ.h
"

22 
	~"jdm.h
"

23 
	~"∑ª¡.h
"

26 
	#FSHANDLE_SZ
 8

	)

27 
	sfsh™dÀ
 {

28 
	mfsh_•a˚
[
FSHANDLE_SZ
];

29 } 
	tfsh™dÀ_t
;

32 
	#FILEHANDLE_SZ
 24

	)

33 
	#FILEHANDLE_SZ_FOLLOWING
 14

	)

34 
	#FILEHANDLE_SZ_PAD
 2

	)

35 
	sfûeh™dÀ
 {

36 
fsh™dÀ_t
 
	mfh_fsh™dÀ
;

37 
öt16_t
 
	mfh_sz_fﬁlowög
;

38 
	mfh_∑d
[
FILEHANDLE_SZ_PAD
];

39 
__uöt32_t
 
	mfh_gí
;

40 
xfs_öo_t
 
	mfh_öo
;

41 } 
	tfûeh™dÀ_t
;

45 
	$jdm_fûl_fûeh™dÀ
–
fûeh™dÀ_t
 *
h™dÀp
,

46 
fsh™dÀ_t
 *
fsh™dÀp
,

47 
xfs_b°©_t
 *
°©p
 )

49 
h™dÀp
->
fh_fsh™dÀ
 = *
fsh™dÀp
;

50 
h™dÀp
->
fh_sz_fﬁlowög
 = 
FILEHANDLE_SZ_FOLLOWING
;

51 
	`mem£t
(
h™dÀp
->
fh_∑d
, 0, 
FILEHANDLE_SZ_PAD
);

52 
h™dÀp
->
fh_gí
 = 
°©p
->
bs_gí
;

53 
h™dÀp
->
fh_öo
 = 
°©p
->
bs_öo
;

54 
	}
}

56 
jdm_fsh™dÀ_t
 *

57 
	$jdm_gëfsh™dÀ
–*
m¡≤t
 )

59 
fsh™dÀ_t
 *
fsh™dÀp
;

60 
size_t
 
fsh™dÀsz
;

61 
ªsﬁved
[
MAXPATHLEN
];

64 
	`ASSERT
––
fsh™dÀ_t
 ) =
FSHANDLE_SZ
 );

65 
	`ASSERT
––
fûeh™dÀ_t
 ) =
FILEHANDLE_SZ
 );

66 
	`ASSERT
––
fûeh™dÀ_t
 )

68 
	`off£tofmembî
–
fûeh™dÀ_t
, 
fh_∑d
 )

70 
FILEHANDLE_SZ_FOLLOWING
 );

71 
	`ASSERT
–
	`sizeofmembî
–
fûeh™dÀ_t
, 
fh_∑d
 ) =
FILEHANDLE_SZ_PAD
 );

72 
	`ASSERT
–
FILEHANDLE_SZ_PAD
 =–
öt16_t
 ));

74 
fsh™dÀp
 = 
NULL
;

75 
fsh™dÀsz
 = –*
fsh™dÀp
 );

77 i‡(!
	`ªÆ∑th
–
m¡≤t
, 
ªsﬁved
 ))

78  
NULL
;

80 i‡(
	`∑th_to_fsh™dÀ
–
ªsﬁved
, ( ** )&
fsh™dÀp
, &
fsh™dÀsz
 ))

81  
NULL
;

83 
	`as£π
–
fsh™dÀsz
 =–*
fsh™dÀp
 ));

85  ( 
jdm_fsh™dÀ_t
 * )
fsh™dÀp
;

86 
	}
}

92 
	$jdm_√w_fûeh™dÀ
–
jdm_fûeh™dÀ_t
 **
h™dÀp
,

93 
size_t
 *
hÀn
,

94 
jdm_fsh™dÀ_t
 *
fsh™dÀp
,

95 
xfs_b°©_t
 *
°©p
)

98 *
hÀn
 = (
fûeh™dÀ_t
);

99 *
h™dÀp
 = (
fûeh™dÀ_t
 *Ë
	`mÆloc
(*
hÀn
);

101 i‡(*
h™dÀp
)

102 
	`jdm_fûl_fûeh™dÀ
(*
h™dÀp
, (
fsh™dÀ_t
 *Ë
fsh™dÀp
, 
°©p
);

103 
	}
}

107 
	$jdm_dñëe_fûeh™dÀ
–
jdm_fûeh™dÀ_t
 *
h™dÀp
, 
size_t
 
hÀn
 )

109 
	`‰ì
(
h™dÀp
);

110 
	}
}

112 
ötgí_t


113 
	$jdm_›í
–
jdm_fsh™dÀ_t
 *
fshp
, 
xfs_b°©_t
 *
°©p
, 
ötgí_t
 
oÊags
 )

115 
fsh™dÀ_t
 *
fsh™dÀp
 = ( fsh™dÀ_à* )
fshp
;

116 
fûeh™dÀ_t
 
fûeh™dÀ
;

117 
ötgí_t
 
fd
;

119 
	`jdm_fûl_fûeh™dÀ
–&
fûeh™dÀ
, 
fsh™dÀp
, 
°©p
 );

120 
fd
 = 
	`›í_by_fsh™dÀ
––* )&
fûeh™dÀ
,

121 –
fûeh™dÀ
 ),

122 
oÊags
 );

123  
fd
;

124 
	}
}

126 
ötgí_t


127 
	$jdm_ªadlök
–
jdm_fsh™dÀ_t
 *
fshp
,

128 
xfs_b°©_t
 *
°©p
,

129 *
buÂ
, 
size_t
 
bufsz
 )

131 
fsh™dÀ_t
 *
fsh™dÀp
 = ( fsh™dÀ_à* )
fshp
;

132 
fûeh™dÀ_t
 
fûeh™dÀ
;

133 
ötgí_t
 
rvÆ
;

135 
	`jdm_fûl_fûeh™dÀ
–&
fûeh™dÀ
, 
fsh™dÀp
, 
°©p
 );

136 
rvÆ
 = 
	`ªadlök_by_h™dÀ
––* )&
fûeh™dÀ
,

137 –
fûeh™dÀ
 ),

138 –* )
buÂ
,

139 
bufsz
 );

140  
rvÆ
;

141 
	}
}

144 
	$jdm_©å_mu…i
–
jdm_fsh™dÀ_t
 *
fshp
,

145 
xfs_b°©_t
 *
°©p
,

146 *
buÂ
, 
πrv˙t
, 
Êags
)

148 
fsh™dÀ_t
 *
fsh™dÀp
 = ( fsh™dÀ_à* )
fshp
;

149 
fûeh™dÀ_t
 
fûeh™dÀ
;

150 
rvÆ
;

152 
	`jdm_fûl_fûeh™dÀ
–&
fûeh™dÀ
, 
fsh™dÀp
, 
°©p
 );

153 
rvÆ
 = 
	`©å_mu…i_by_h™dÀ
 ( ( * )&
fûeh™dÀ
,

154 –
fûeh™dÀ
 ),

155 (*Ë
buÂ
,

156 
πrv˙t
, 
Êags
);

157  
rvÆ
;

158 
	}
}

161 
	$jdm_©å_li°
–
jdm_fsh™dÀ_t
 *
fshp
,

162 
xfs_b°©_t
 *
°©p
,

163 *
buÂ
, 
size_t
 
bufsz
, 
Êags
,

164 
©åli°_curs‹
 *
curs‹
)

166 
fsh™dÀ_t
 *
fsh™dÀp
 = ( fsh™dÀ_à* )
fshp
;

167 
fûeh™dÀ_t
 
fûeh™dÀ
;

168 
rvÆ
;

171 i‡(
bufsz
 > 
XFS_XATTR_LIST_MAX
)

172 
bufsz
 = 
XFS_XATTR_LIST_MAX
;

174 
	`jdm_fûl_fûeh™dÀ
–&
fûeh™dÀ
, 
fsh™dÀp
, 
°©p
 );

175 
rvÆ
 = 
	`©å_li°_by_h™dÀ
 (–* )&
fûeh™dÀ
,

176 –
fûeh™dÀ
 ),

177 
buÂ
, 
bufsz
, 
Êags
, 
curs‹
);

178  
rvÆ
;

179 
	}
}

182 
	$jdm_∑ª¡s
–
jdm_fsh™dÀ_t
 *
fshp
,

183 
xfs_b°©_t
 *
°©p
,

184 
∑ª¡_t
 *
buÂ
, 
size_t
 
bufsz
,

185 *
cou¡
)

187 
î∫o
 = 
EOPNOTSUPP
;

189 
	}
}

192 
	$jdm_∑ª¡∑ths
–
jdm_fsh™dÀ_t
 *
fshp
,

193 
xfs_b°©_t
 *
°©p
,

194 
∑ª¡_t
 *
buÂ
, 
size_t
 
bufsz
,

195 *
cou¡
)

197 
î∫o
 = 
EOPNOTSUPP
;

199 
	}
}

	@libxcmd/command.c

19 
	~"∂©f‹m_defs.h
"

20 
	~"comm™d.h
"

21 
	~"öput.h
"

23 
cmdöfo_t
 *
	gcmdèb
;

24 
	gncmds
;

26 
ôîfunc_t
 
	gôî_func
;

27 
checkfunc_t
 
	gcheck_func
;

29 
	scmdlöe
 {

30 *
	mcmdlöe
;

31 
boﬁ
 
	môî©e
;

34 
	gncmdlöe
;

35 
cmdlöe
 *
	gcmdlöe
;

38 
	$com∑ª
(c⁄° *
a
, c⁄° *
b
)

40  
	`°rcmp
(((c⁄° 
cmdöfo_t
 *)
a
)->
«me
,

41 ((c⁄° 
cmdöfo_t
 *)
b
)->
«me
);

42 
	}
}

45 
	$add_comm™d
(

46 c⁄° 
cmdöfo_t
 *
ci
)

48 
cmdèb
 = 
	`ªÆloc
((*)cmdèb, ++
ncmds
 * (*cmdtab));

49 
cmdèb
[
ncmds
 - 1] = *
ci
;

50 
	`qs‹t
(
cmdèb
, 
ncmds
, (*cmdèb), 
com∑ª
);

51 
	}
}

54 
	$check_comm™d
(

55 c⁄° 
cmdöfo_t
 *
ci
)

58 i‡(
ci
->
Êags
 & 
CMD_FLAG_LIBRARY
)

61 i‡(
check_func
)

62  
	`check_func
(
ci
);

64 
	}
}

67 
	$add_check_comm™d
(

68 
checkfunc_t
 
cf
)

70 
check_func
 = 
cf
;

71 
	}
}

74 
	$comm™d_ußge
(

75 c⁄° 
cmdöfo_t
 *
ci
)

77 
	`¥ötf
("%†%†-- %s\n", 
ci
->
«me
, ci->
¨gs
, ci->
⁄ñöe
);

79 
	}
}

82 
	$comm™d
(

83 c⁄° 
cmdöfo_t
 *
˘
,

84 
¨gc
,

85 **
¨gv
)

87 *
cmd
 = 
¨gv
[0];

89 i‡(!
	`check_comm™d
(
˘
))

92 i‡(
¨gc
-1 < 
˘
->
¨gmö
 || (˘->
¨gmax
 != -1 &&árgc-1 > ct->argmax)) {

93 i‡(
˘
->
¨gmax
 == -1)

94 
	`Ârötf
(
°dîr
,

95 
	`_
("badárgument count %dÅo %s,ÉxpectedátÜeast %dárguments\n"),

96 
¨gc
-1, 
cmd
, 
˘
->
¨gmö
);

97 i‡(
˘
->
¨gmö
 =˘->
¨gmax
)

98 
	`Ârötf
(
°dîr
,

99 
	`_
("badárgument count %dÅo %s,Éxpected %dárguments\n"),

100 
¨gc
-1, 
cmd
, 
˘
->
¨gmö
);

102 
	`Ârötf
(
°dîr
,

103 
	`_
("badárgument count %dÅo %s,Éxpected between %dánd %dárguments\n"),

104 
¨gc
-1, 
cmd
, 
˘
->
¨gmö
, ct->
¨gmax
);

107 
	`∂©f‹m_gë›åe£t
();

108  
˘
->
	`cfunc
(
¨gc
, 
¨gv
);

109 
	}
}

111 c⁄° 
cmdöfo_t
 *

112 
	$föd_comm™d
(

113 c⁄° *
cmd
)

115 
cmdöfo_t
 *
˘
;

117 
˘
 = 
cmdèb
; cà< &cmdèb[
ncmds
]; ct++) {

118 i‡(
	`°rcmp
(
˘
->
«me
, 
cmd
) == 0 ||

119 (
˘
->
Æäame
 && 
	`°rcmp
(˘->Æäame, 
cmd
) == 0))

120  (c⁄° 
cmdöfo_t
 *)
˘
;

122  
NULL
;

123 
	}
}

126 
	$add_u£r_comm™d
(*
›èrg
)

128 
ncmdlöe
++;

129 
cmdlöe
 = 
	`ªÆloc
(cmdlöe, (cmdlöeË* (
ncmdlöe
));

130 i‡(!
cmdlöe
) {

131 
	`≥º‹
("realloc");

132 
	`exô
(1);

134 
cmdlöe
[
ncmdlöe
-1].cmdlöê
›èrg
;

135 
cmdlöe
[
ncmdlöe
-1].
ôî©e
 = 
åue
;

137 
	}
}

140 
	$add_⁄eshŸ_u£r_comm™d
(*
›èrg
)

142 
ncmdlöe
++;

143 
cmdlöe
 = 
	`ªÆloc
(cmdlöe, (cmdlöeË* (
ncmdlöe
));

144 i‡(!
cmdlöe
) {

145 
	`≥º‹
("realloc");

146 
	`exô
(1);

148 
cmdlöe
[
ncmdlöe
-1].cmdlöê
›èrg
;

149 
cmdlöe
[
ncmdlöe
-1].
ôî©e
 = 
Ál£
;

150 
	}
}

157 
	$ôî©e_comm™d
(

158 c⁄° 
cmdöfo_t
 *
˘
,

159 
¨gc
,

160 **
¨gv
)

162 
îr‹
 = 0;

163 
j
;

166 i‡(!
ôî_func
)

169 
j
 = 
	`ôî_func
(0); j; j = iter_func(j)) {

170 
îr‹
 = 
	`comm™d
(
˘
, 
¨gc
, 
¨gv
);

171 i‡(
îr‹
)

176  
îr‹
;

177 
	}
}

180 
	$add_comm™d_ôî©‹
(

181 
ôîfunc_t
 
func
)

183 
ôî_func
 = 
func
;

184 
	}
}

187 
	$¥o˚ss_öput
(

188 *
öput
,

189 
boﬁ
 
ôî©e
)

191 **
v
;

192 c⁄° 
cmdöfo_t
 *
˘
;

193 
c
 = 0;

194 
îr‹
 = 0;

196 
v
 = 
	`bªaklöe
(
öput
, &
c
);

197 i‡(!
c
)

198 
out
;

200 
˘
 = 
	`föd_comm™d
(
v
[0]);

201 i‡(!
˘
) {

202 
	`Ârötf
(
°dîr
, 
	`_
("comm™d \"%s\"ÇŸ found\n"), 
v
[0]);

203 
out
;

207 i‡(!
ôî©e
 || (
˘
->
Êags
 & 
CMD_FLAG_ONESHOT
))

208 
îr‹
 = 
	`comm™d
(
˘
, 
c
, 
v
);

210 
îr‹
 = 
	`ôî©e_comm™d
(
˘
, 
c
, 
v
);

211 
out
:

212 
	`d⁄ñöe
(
öput
, 
v
);

213  
îr‹
;

214 
	}
}

217 
	$comm™d_lo›
()

219 *
öput
;

220 
d⁄e
 = 0;

221 
i
;

223 i‡(!
cmdlöe
) {

225 !
d⁄e
) {

226 
öput
 = 
	`„tchlöe
();

227 i‡(!
öput
)

229 
d⁄e
 = 
	`¥o˚ss_öput
(
öput
, 
Ál£
);

235 
i
 = 0; !
d⁄e
 && i < 
ncmdlöe
; i++) {

236 
öput
 = 
	`°rdup
(
cmdlöe
[
i
].cmdline);

237 i‡(!
öput
) {

238 
	`Ârötf
(
°dîr
,

239 
	`_
("cannot strdup command '%s': %s\n"),

240 
cmdlöe
[
i
].cmdlöe, 
	`°ªº‹
(
î∫o
));

241 
	`exô
(1);

243 
d⁄e
 = 
	`¥o˚ss_öput
(
öput
, 
cmdlöe
[
i
].
ôî©e
);

245 
	`‰ì
(
cmdlöe
);

247 
	}
}

250 
	$ªp‹t_io_times
(

251 c⁄° *
vîb
,

252 
timevÆ
 *
t2
,

253 
off£t
,

254 
cou¡
,

255 
tŸÆ
,

256 
›s
,

257 
com∑˘
)

259 
s1
[64], 
s2
[64], 
ts
[64];

261 
	`time°r
(
t2
, 
ts
, —s), 
com∑˘
 ? 
VERBOSE_FIXED_TIME
 : 0);

262 i‡(!
com∑˘
) {

263 
	`cvt°r
(()
tŸÆ
, 
s1
, (s1));

264 
	`cvt°r
(
	`tdiv
(()
tŸÆ
, *
t2
), 
s2
, (s2));

265 
	`¥ötf
(
	`_
("%s %lld/%lld bytesát offset %lld\n"),

266 
vîb
, 
tŸÆ
, 
cou¡
, ()
off£t
);

267 
	`¥ötf
(
	`_
("%s, %d ops; %s (%s/secánd %.4f ops/sec)\n"),

268 
s1
, 
›s
, 
ts
, 
s2
, 
	`tdiv
(()›s, *
t2
));

270 
	`¥ötf
("%lld,%d,%s,%.3f,%.3f\n",

271 
tŸÆ
, 
›s
, 
ts
,

272 
	`tdiv
(()
tŸÆ
, *
t2
),Ådiv(()
›s
, *t2));

274 
	}
}

	@libxcmd/help.c

19 
	~"∂©f‹m_defs.h
"

20 
	~"comm™d.h
"

21 
	~"../quŸa/öô.h
"

23 
cmdöfo_t
 
	ghñp_cmd
;

24 
hñp_⁄ecmd
(c⁄° *
cmd
, c⁄° 
cmdöfo_t
 *
˘
);

25 
hñp_⁄ñöe
(c⁄° *
cmd
, c⁄° 
cmdöfo_t
 *
˘
);

28 
	$hñp_Æl
()

30 c⁄° 
cmdöfo_t
 *
˘
;

32 
˘
 = 
cmdèb
; cà< &cmdèb[
ncmds
]; ct++)

33 
	`hñp_⁄ñöe
(
˘
->
«me
, ct);

34 
	`¥ötf
(
	`_
("\nUse 'help commandname' forÉxtended help.\n"));

35 
	}
}

38 
	$hñp_f
(

39 
¨gc
,

40 **
¨gv
)

42 c⁄° 
cmdöfo_t
 *
˘
;

44 i‡(
¨gc
 == 1) {

45 
	`hñp_Æl
();

48 
˘
 = 
	`föd_comm™d
(
¨gv
[1]);

49 i‡(
˘
 =
NULL
) {

50 
	`¥ötf
(
	`_
("comm™d %†nŸ found\n"), 
¨gv
[1]);

53 
	`hñp_⁄ecmd
(
¨gv
[1], 
˘
);

55 
	}
}

58 
	$hñp_⁄ecmd
(

59 c⁄° *
cmd
,

60 c⁄° 
cmdöfo_t
 *
˘
)

62 
	`hñp_⁄ñöe
(
cmd
, 
˘
);

63 i‡(
˘
->
hñp
)

64 
˘
->
	`hñp
();

65 
	}
}

68 
	$hñp_⁄ñöe
(

69 c⁄° *
cmd
,

70 c⁄° 
cmdöfo_t
 *
˘
)

72 i‡(
cmd
)

73 
	`¥ötf
("%†", 
cmd
);

75 
	`¥ötf
("%†", 
˘
->
«me
);

76 i‡(
˘
->
Æäame
)

77 
	`¥ötf
("(‹ %sË", 
˘
->
Æäame
);

79 i‡(
˘
->
¨gs
)

80 
	`¥ötf
("%†", 
˘
->
¨gs
);

81 
	`¥ötf
("-- %s\n", 
˘
->
⁄ñöe
);

82 
	}
}

85 
	$hñp_öô
()

87 
hñp_cmd
.
«me
 = "help";

88 
hñp_cmd
.
Æäame
 = "?";

89 
hñp_cmd
.
cfunc
 = 
hñp_f
;

90 
hñp_cmd
.
¨gmö
 = 0;

91 
hñp_cmd
.
¨gmax
 = 1;

92 
hñp_cmd
.
Êags
 = 
CMD_FLAG_ONESHOT
 | 
CMD_FLAG_LIBRARY
;

93 
hñp_cmd
.
¨gs
 = 
	`_
("[command]");

94 
hñp_cmd
.
⁄ñöe
 = 
	`_
("help for one oráll commands");

96 
	`add_comm™d
(&
hñp_cmd
);

97 
	}
}

	@libxcmd/input.c

19 
	~"∂©f‹m_defs.h
"

20 
	~"öput.h
"

21 
	~<˘y≥.h
>

22 
	~<°dboﬁ.h
>

24 #i‡
deföed
(
ENABLE_READLINE
)

25 
	~<ªadlöe/hi°‹y.h
>

26 
	~<ªadlöe/ªadlöe.h
>

27 #ñi‡
deföed
(
ENABLE_EDITLINE
)

28 
	~<hi°edô.h
>

31 *
¥og«me
;

34 
	$gë_¥om±
()

36 
¥om±
[
FILENAME_MAX
 + 2 + 1 ];

38 i‡(!
¥om±
[0])

39 
	`¢¥ötf
(
¥om±
, ’rom±), "%s> ", 
¥og«me
);

40  
¥om±
;

41 
	}
}

43 #i‡
deföed
(
ENABLE_READLINE
)

45 
	$„tchlöe
()

47 *
löe
;

49 
löe
 = 
	`ªadlöe
(
	`gë_¥om±
());

50 i‡(
löe
 && *line)

51 
	`add_hi°‹y
(
löe
);

52  
löe
;

53 
	}
}

54 #ñi‡
deföed
(
ENABLE_EDITLINE
)

55 *
	$ñ_gë_¥om±
(
EdôLöe
 *
e
Ë{  
	`gë_¥om±
(); 
	}
}

57 
	$„tchlöe
()

59 
EdôLöe
 *
ñ
;

60 
Hi°‹y
 *
hi°
;

61 
Hi°Evít
 
hevít
;

62 *
löe
;

63 
cou¡
;

65 i‡(!
ñ
) {

66 
hi°
 = 
	`hi°‹y_öô
();

67 
	`hi°‹y
(
hi°
, &
hevít
, 
H_SETSIZE
, 100);

68 
ñ
 = 
	`ñ_öô
(
¥og«me
, 
°dö
, 
°dout
, 
°dîr
);

69 
	`ñ_sour˚
(
ñ
, 
NULL
);

70 
	`ñ_£t
(
ñ
, 
EL_SIGNAL
, 1);

71 
	`ñ_£t
(
ñ
, 
EL_PROMPT
, 
ñ_gë_¥om±
);

72 
	`ñ_£t
(
ñ
, 
EL_HIST
, 
hi°‹y
, (c⁄° *)
hi°
);

74 
löe
 = 
	`°rdup
(
	`ñ_gës
(
ñ
, &
cou¡
));

75 i‡(
löe
) {

76 i‡(
cou¡
 > 0)

77 
löe
[
cou¡
-1] = '\0';

78 i‡(*
löe
)

79 
	`hi°‹y
(
hi°
, &
hevít
, 
H_ENTER
, 
löe
);

81  
löe
;

82 
	}
}

84 
	#MAXREADLINESZ
 1024

	)

86 
	$„tchlöe
()

88 *
p
, *
löe
 = 
	`mÆloc
(
MAXREADLINESZ
);

90 i‡(!
löe
)

91  
NULL
;

92 
	`¥ötf
("%s", 
	`gë_¥om±
());

93 
	`fÊush
(
°dout
);

94 i‡(!
	`fgës
(
löe
, 
MAXREADLINESZ
, 
°dö
)) {

95 
	`‰ì
(
löe
);

96  
NULL
;

98 
p
 = 
löe
 + 
	`°æí
(line);

99 i‡(
p
 !
löe
 &&Ö[-1] == '\n')

100 
p
[-1] = '\0';

101  
löe
;

102 
	}
}

106 
	$bªaklöe
(

107 *
öput
,

108 *
cou¡
)

110 
c
 = 0;

111 *
p
;

112 **
rvÆ
 = 
	`ˇŒoc
((*), 1);

114 
rvÆ
 && (
p
 = 
	`°r£p
(&
öput
, " ")Ë!
NULL
) {

115 i‡(!*
p
)

117 
c
++;

118 
rvÆ
 = 
	`ªÆloc
‘vÆ, (*rvÆË* (
c
 + 1));

119 i‡(!
rvÆ
) {

120 
c
 = 0;

123 
rvÆ
[
c
 - 1] = 
p
;

124 
rvÆ
[
c
] = 
NULL
;

126 *
cou¡
 = 
c
;

127  
rvÆ
;

128 
	}
}

131 
	$d⁄ñöe
(

132 *
öput
,

133 **
vec
)

135 
	`‰ì
(
öput
);

136 
	`‰ì
(
vec
);

137 
	}
}

139 
	#EXABYTES
(
x
Ë(()(xË<< 60)

	)

140 
	#PETABYTES
(
x
Ë(()(xË<< 50)

	)

141 
	#TERABYTES
(
x
Ë(()(xË<< 40)

	)

142 
	#GIGABYTES
(
x
Ë(()(xË<< 30)

	)

143 
	#MEGABYTES
(
x
Ë(()(xË<< 20)

	)

144 
	#KILOBYTES
(
x
Ë(()(xË<< 10)

	)

147 
	$cväum
(

148 
size_t
 
blocksize
,

149 
size_t
 
£˘‹size
,

150 *
s
)

152 
i
;

153 *
•
;

154 
c
;

156 
i
 = 
	`°πﬁl
(
s
, &
•
, 0);

157 i‡(
i
 =0 && 
•
 =
s
)

159 i‡(*
•
 == '\0')

160  
i
;

162 i‡(
•
[1] != '\0')

165 
c
 = 
	`tﬁowî
(*
•
);

166 
c
) {

168  
i
 * 
blocksize
;

170  
i
 * 
£˘‹size
;

172  
	`KILOBYTES
(
i
);

174  
	`MEGABYTES
(
i
);

176  
	`GIGABYTES
(
i
);

178  
	`TERABYTES
(
i
);

180  
	`PETABYTES
(
i
);

182  
	`EXABYTES
(
i
);

185 
	}
}

187 
	#TO_EXABYTES
(
x
Ë((xË/ 
	`EXABYTES
(1))

	)

188 
	#TO_PETABYTES
(
x
Ë((xË/ 
	`PETABYTES
(1))

	)

189 
	#TO_TERABYTES
(
x
Ë((xË/ 
	`TERABYTES
(1))

	)

190 
	#TO_GIGABYTES
(
x
Ë((xË/ 
	`GIGABYTES
(1))

	)

191 
	#TO_MEGABYTES
(
x
Ë((xË/ 
	`MEGABYTES
(1))

	)

192 
	#TO_KILOBYTES
(
x
Ë((xË/ 
	`KILOBYTES
(1))

	)

195 
	$cvt°r
(

196 
vÆue
,

197 *
°r
,

198 
size_t
 
size
)

200 *
fmt
;

201 
¥eci£
;

203 
¥eci£
 = (()
vÆue
 * 1000 == ()()value * 1000);

205 i‡(
vÆue
 >
	`EXABYTES
(1)) {

206 
fmt
 = 
¥eci£
 ? "%.f EiB" : "%.3f EiB";

207 
	`¢¥ötf
(
°r
, 
size
, 
fmt
, 
	`TO_EXABYTES
(
vÆue
));

208 } i‡(
vÆue
 >
	`PETABYTES
(1)) {

209 
fmt
 = 
¥eci£
 ? "%.f PiB" : "%.3f PiB";

210 
	`¢¥ötf
(
°r
, 
size
, 
fmt
, 
	`TO_PETABYTES
(
vÆue
));

211 } i‡(
vÆue
 >
	`TERABYTES
(1)) {

212 
fmt
 = 
¥eci£
 ? "%.f TiB" : "%.3f TiB";

213 
	`¢¥ötf
(
°r
, 
size
, 
fmt
, 
	`TO_TERABYTES
(
vÆue
));

214 } i‡(
vÆue
 >
	`GIGABYTES
(1)) {

215 
fmt
 = 
¥eci£
 ? "%.f GiB" : "%.3f GiB";

216 
	`¢¥ötf
(
°r
, 
size
, 
fmt
, 
	`TO_GIGABYTES
(
vÆue
));

217 } i‡(
vÆue
 >
	`MEGABYTES
(1)) {

218 
fmt
 = 
¥eci£
 ? "%.f MiB" : "%.3f MiB";

219 
	`¢¥ötf
(
°r
, 
size
, 
fmt
, 
	`TO_MEGABYTES
(
vÆue
));

220 } i‡(
vÆue
 >
	`KILOBYTES
(1)) {

221 
fmt
 = 
¥eci£
 ? "%.f KiB" : "%.3f KiB";

222 
	`¢¥ötf
(
°r
, 
size
, 
fmt
, 
	`TO_KILOBYTES
(
vÆue
));

224 
	`¢¥ötf
(
°r
, 
size
, "%‡byãs", 
vÆue
);

226 
	}
}

228 
	#MINUTES_TO_SECONDS
(
m
Ë((mË* 60)

	)

229 
	#HOURS_TO_SECONDS
(
h
Ë((hË* 
	`MINUTES_TO_SECONDS
(60))

	)

230 
	#DAYS_TO_SECONDS
(
d
Ë((dË* 
	`HOURS_TO_SECONDS
(24))

	)

231 
	#WEEKS_TO_SECONDS
(
w
Ë((wË* 
	`DAYS_TO_SECONDS
(7))

	)

234 
	$cvâime
(

235 *
s
)

237 
i
;

238 *
•
;

240 
i
 = 
	`°πoul
(
s
, &
•
, 0);

241 i‡(
i
 =0 && 
•
 =
s
)

243 i‡(*
•
 == '\0')

244  
i
;

245 i‡((*
•
 == 'm' && sp[1] == '\0') ||

246 (
	`°rcmp
(
•
, "minutes") == 0) ||

247 (
	`°rcmp
(
•
, "minute") == 0))

248  
	`MINUTES_TO_SECONDS
(
i
);

249 i‡((*
•
 == 'h' && sp[1] == '\0') ||

250 (
	`°rcmp
(
•
, "hours") == 0) ||

251 (
	`°rcmp
(
•
, "hour") == 0))

252  
	`HOURS_TO_SECONDS
(
i
);

253 i‡((*
•
 == 'd' && sp[1] == '\0') ||

254 (
	`°rcmp
(
•
, "days") == 0) ||

255 (
	`°rcmp
(
•
, "day") == 0))

256  
	`DAYS_TO_SECONDS
(
i
);

257 i‡((*
•
 == 'w' && sp[1] == '\0') ||

258 (
	`°rcmp
(
•
, "weeks") == 0) ||

259 (
	`°rcmp
(
•
, "week") == 0))

260  
	`WEEKS_TO_SECONDS
(
i
);

262 
	}
}

264 
timevÆ


265 
	$èdd
(
timevÆ
 
t1
, timevÆ 
t2
)

267 
t1
.
tv_u£c
 +
t2
.tv_usec;

268 i‡(
t1
.
tv_u£c
 > 1000000) {

269 
t1
.
tv_u£c
 -= 1000000;

270 
t1
.
tv_£c
++;

272 
t1
.
tv_£c
 +
t2
.tv_sec;

273  
t1
;

274 
	}
}

276 
timevÆ


277 
	$tsub
(
timevÆ
 
t1
, timevÆ 
t2
)

279 
t1
.
tv_u£c
 -
t2
.tv_usec;

280 i‡(
t1
.
tv_u£c
 < 0) {

281 
t1
.
tv_u£c
 += 1000000;

282 
t1
.
tv_£c
--;

284 
t1
.
tv_£c
 -
t2
.tv_sec;

285  
t1
;

286 
	}
}

289 
	$tdiv
(
vÆue
, 
timevÆ
 
tv
)

291  
vÆue
 / (()
tv
.
tv_£c
 + ((Èv.
tv_u£c
 / 1000000.0));

292 
	}
}

294 
	#HOURS
(
£c
Ë((£cË/ (60 * 60))

	)

295 
	#MINUTES
(
£c
Ë(((£cË% (60 * 60)Ë/ 60)

	)

296 
	#SECONDS
(
£c
Ë((£cË% 60)

	)

299 
	$time°r
(

300 
timevÆ
 *
tv
,

301 *
ts
,

302 
size_t
 
size
,

303 
f‹m©
)

305 
u£c
 = ()
tv
->
tv_u£c
 / 1000000.0;

307 i‡(
f‹m©
 & 
TERSE_FIXED_TIME
) {

308 i‡(!
	`HOURS
(
tv
->
tv_£c
)) {

309 
	`¢¥ötf
(
ts
, 
size
, "%u:%02u.%02u",

310 (Ë
	`MINUTES
(
tv
->
tv_£c
),

311 (Ë
	`SECONDS
(
tv
->
tv_£c
),

312 (Ë
u£c
 * 100);

315 
f‹m©
 |
VERBOSE_FIXED_TIME
;

318 i‡((
f‹m©
 & 
VERBOSE_FIXED_TIME
Ë|| 
tv
->
tv_£c
) {

319 
	`¢¥ötf
(
ts
, 
size
, "%u:%02u:%02u.%02u",

320 (Ë
	`HOURS
(
tv
->
tv_£c
),

321 (Ë
	`MINUTES
(
tv
->
tv_£c
),

322 (Ë
	`SECONDS
(
tv
->
tv_£c
),

323 (Ë
u£c
 * 100);

325 
	`¢¥ötf
(
ts
, 
size
, "0.%04u sec", (Ë
u£c
 * 10000);

327 
	}
}

334 
	$time•ec_‰om_°rög
(

335 c⁄° * 
£cs
,

336 c⁄° * 
n£cs
,

337 
time•ec
 * 
ts
)

339 * 
p
;

340 i‡(!
£cs
 || !
n£cs
 || !
ts
)

342 
ts
->
tv_£c
 = 
	`°πouŒ
(
£cs
, &
p
, 0);

343 i‡(*
p
)

345 
ts
->
tv_n£c
 = 
	`°πouŒ
(
n£cs
, &
p
, 0);

346 i‡(*
p
)

349 
	}
}

357 
¥id_t


358 
	$¥id_‰om_°rög
(

359 *
¥oje˘
)

361 
fs_¥oje˘_t
 *
¥j
;

362 
¥id_l⁄g
;

363 *
•
;

369 
¥id_l⁄g
 = 
	`°πoul
(
¥oje˘
, &
•
, 10);

370 i‡(*
¥oje˘
 !'\0' && *
•
 == '\0') {

371 i‡((
¥id_l⁄g
 =
ULONG_MAX
 && 
î∫o
 =
ERANGE
)

372 || (
¥id_l⁄g
 > (
¥id_t
)-1))

374  (
¥id_t
)
¥id_l⁄g
;

376 
¥j
 = 
	`gë¥«m
(
¥oje˘
);

377 i‡(
¥j
)

378  
¥j
->
¥_¥id
;

380 
	}
}

382 
uid_t


383 
	$uid_‰om_°rög
(

384 *
u£r
)

386 
∑sswd
 *
pwd
;

387 
uid_l⁄g
;

388 *
•
;

390 
uid_l⁄g
 = 
	`°πoul
(
u£r
, &
•
, 10);

391 i‡(
•
 !
u£r
 && *sp == '\0') {

392 i‡((
uid_l⁄g
 =
ULONG_MAX
 && 
î∫o
 =
ERANGE
)

393 || (
uid_l⁄g
 > (
uid_t
)-1))

395  (
uid_t
)
uid_l⁄g
;

397 
pwd
 = 
	`gëpw«m
(
u£r
);

398 i‡(
pwd
)

399  
pwd
->
pw_uid
;

401 
	}
}

403 
gid_t


404 
	$gid_‰om_°rög
(

405 *
group
)

407 
group
 *
gΩ
;

408 
gid_l⁄g
;

409 *
•
;

411 
gid_l⁄g
 = 
	`°πoul
(
group
, &
•
, 10);

412 i‡(
•
 !
group
 && *sp == '\0') {

413 i‡((
gid_l⁄g
 =
ULONG_MAX
 && 
î∫o
 =
ERANGE
)

414 || (
gid_l⁄g
 > (
gid_t
)-1))

416  (
gid_t
)
gid_l⁄g
;

418 
gΩ
 = 
	`gëg∫am
(
group
);

419 i‡(
gΩ
)

420  
gΩ
->
gr_gid
;

422 
	}
}

424 
boﬁ
 
	$isdigôs_⁄ly
(

425 c⁄° *
°r
)

427 
i
;

429 
i
 = 0; i < 
	`°æí
(
°r
); i++) {

430 i‡(!
	`isdigô
(
°r
[
i
]))

431  
Ál£
;

433  
åue
;

434 
	}
}

436 
	#HAVE_FTW_H
 1

	)

438 #i‚de‡
HAVE_FTW_H


440 
n·w
(

441 *
dú
,

442 (*
‚
)(c⁄° *, c⁄° 
°©
 *, , 
FTW
 *),

443 
dïth
,

444 
Êags
)

446 
	`Ârötf
(
°dîr
, "%s:Çot implemented,ÇoÑecursionávailable\n",

447 
__FUNCTION__
);

449 
	}
}

	@libxcmd/paths.c

19 
	~<∑ths.h
>

20 
	~<î∫o.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~"∑th.h
"

28 
	~"öput.h
"

29 
	~"¥oje˘.h
"

30 
	~<limôs.h
>

32 *
¥og«me
;

34 
	gfs_cou¡
;

35 
	gxfs_fs_cou¡
;

36 
fs_∑th
 *
	gfs_èbÀ
;

37 
fs_∑th
 *
	gfs_∑th
;

39 *
	gmèb_fûe
;

40 
	#PROC_MOUNTS
 "/¥oc/£lf/mou¡s"

	)

43 
	$fs_devi˚_numbî
(

44 c⁄° *
«me
,

45 
dev_t
 *
devnum
)

47 
°©
 
sbuf
;

49 i‡(
	`°©
(
«me
, &
sbuf
) < 0)

50  
î∫o
;

56 i‡(
	`S_ISBLK
(
sbuf
.
°_mode
Ë|| 
	`S_ISCHR
(sbuf.st_mode))

57 *
devnum
 = 
sbuf
.
°_rdev
;

59 *
devnum
 = 
sbuf
.
°_dev
;

62 
	}
}

69 
fs_∑th
 *

70 
	$fs_èbÀ_lookup
(

71 c⁄° *
dú
,

72 
uöt
 
Êags
)

74 
uöt
 
i
;

75 
dev_t
 
dev
 = 0;

77 i‡(
	`fs_devi˚_numbî
(
dú
, &
dev
))

78  
NULL
;

80 
i
 = 0; i < 
fs_cou¡
; i++) {

81 i‡(
Êags
 && !(Êag†& 
fs_èbÀ
[
i
].
fs_Êags
))

83 i‡(
fs_èbÀ
[
i
].
fs_d©adev
 =
dev
)

84  &
fs_èbÀ
[
i
];

86  
NULL
;

87 
	}
}

94 
fs_∑th
 *

95 
	$fs_èbÀ_lookup2
(

96 c⁄° *
dú
,

97 
uöt
 
Êags
)

99 
uöt
 
i
;

100 
dev_t
 
dev
 = 0;

102 i‡(
	`fs_devi˚_numbî
(
dú
, &
dev
))

103  
NULL
;

104 
	`¥ötf
("dú = %s\n", 
dú
);

105 
i
 = 0; i < 
fs_cou¡
; i++) {

106 
	`¥ötf
("fs_èbÀ.fs_dú = %s\n", 
fs_èbÀ
[
i
].
fs_dú
);

107 i‡(
Êags
 && !(Êag†& 
fs_èbÀ
[
i
].
fs_Êags
))

109 i‡(
	`°rcmp
(
fs_èbÀ
[
i
].
fs_dú
, 
dú
) == 0)

110  &
fs_èbÀ
[
i
];

112 
	`¥ötf
("no match\n");

113  
NULL
;

114 
	}
}

117 
	$fs_èbÀ_ö£π
(

118 *
dú
,

119 
uöt
 
¥id
,

120 
uöt
 
Êags
,

121 *
f¢ame
,

122 *
f¶og
,

123 *
f§t
)

125 
dev_t
 
d©adev
, 
logdev
, 
πdev
;

126 
fs_∑th
 *
tmp_fs_èbÀ
;

127 
îr‹
;

129 
d©adev
 = 
logdev
 = 
πdev
 = 0;

130 
îr‹
 = 
	`fs_devi˚_numbî
(
dú
, &
d©adev
);

131 i‡(
îr‹
)

132 
out_nodev
;

133 i‡(
f¶og
) {

134 
îr‹
 = 
	`fs_devi˚_numbî
(
f¶og
, &
logdev
);

135 i‡(
îr‹
)

136 
out_nodev
;

138 i‡(
f§t
) {

139 
îr‹
 = 
	`fs_devi˚_numbî
(
f§t
, &
πdev
);

140 i‡(
îr‹
)

141 
out_nodev
;

144 i‡(!
	`∂©f‹m_ã°_xfs_∑th
(
dú
))

145 
Êags
 |
FS_FOREIGN
;

156 
îr‹
 = 
ENOMEM
;

157 
dú
 = 
	`°rdup
(dir);

158 i‡(!
dú
)

159 
out_nodev
;

160 
f¢ame
 = 
	`°rdup
(fsname);

161 i‡(!
f¢ame
)

162 
out_n⁄ame
;

164 
tmp_fs_èbÀ
 = 
	`ªÆloc
(
fs_èbÀ
, (
fs_∑th_t
Ë* (
fs_cou¡
 + 1));

165 i‡(!
tmp_fs_èbÀ
)

166 
out_n‹óŒoc
;

167 
fs_èbÀ
 = 
tmp_fs_èbÀ
;

170 i‡(
Êags
 & 
FS_FOREIGN
 || 
fs_cou¡
 == 0) {

171 
fs_∑th
 = &
fs_èbÀ
[
fs_cou¡
];

174 
	`memmove
(&
fs_èbÀ
[
xfs_fs_cou¡
 + 1], &fs_table[xfs_fs_count],

175 (
fs_∑th_t
)*(
fs_cou¡
 - 
xfs_fs_cou¡
));

176 
fs_∑th
 = &
fs_èbÀ
[
xfs_fs_cou¡
];

178 
fs_∑th
->
fs_dú
 = 
dú
;

179 
fs_∑th
->
fs_¥id
 = 
¥id
;

180 
fs_∑th
->
fs_Êags
 = 
Êags
;

181 
fs_∑th
->
fs_«me
 = 
f¢ame
;

182 
fs_∑th
->
fs_log
 = 
f¶og
;

183 
fs_∑th
->
fs_π
 = 
f§t
;

184 
fs_∑th
->
fs_d©adev
 = 
d©adev
;

185 
fs_∑th
->
fs_logdev
 = 
logdev
;

186 
fs_∑th
->
fs_πdev
 = 
πdev
;

187 
fs_cou¡
++;

188 i‡(!(
Êags
 & 
FS_FOREIGN
))

189 
xfs_fs_cou¡
++;

193 
out_n‹óŒoc
:

194 
	`‰ì
(
f¢ame
);

195 
out_n⁄ame
:

196 
	`‰ì
(
dú
);

197 
out_nodev
:

199 
	`‰ì
(
f¶og
);

200 
	`‰ì
(
f§t
);

202  
îr‹
;

203 
	}
}

220 
	$fs_curs‹_öôüli£
(

221 *
dú
,

222 
uöt
 
Êags
,

223 
fs_curs‹_t
 *
cur
)

225 
fs_∑th_t
 *
∑th
;

227 
	`mem£t
(
cur
, 0, (*cur));

228 i‡(
dú
) {

229 i‡((
∑th
 = 
	`fs_èbÀ_lookup
(
dú
, 
Êags
)Ë=
NULL
)

231 
cur
->
loˇl
 = *
∑th
;

232 
cur
->
cou¡
 = 1;

233 
cur
->
èbÀ
 = &cur->
loˇl
;

235 
cur
->
cou¡
 = 
fs_cou¡
;

236 
cur
->
èbÀ
 = 
fs_èbÀ
;

238 
cur
->
Êags
 = flags;

239 
	}
}

245 
fs_∑th
 *

246 
	$fs_curs‹_√xt_íåy
(

247 
fs_curs‹_t
 *
cur
)

249 
cur
->
ödex
 < cur->
cou¡
) {

250 
fs_∑th_t
 *
√xt
 = &
cur
->
èbÀ
[cur->
ödex
++];

252 i‡(!
cur
->
Êags
 || (cur->Êag†& 
√xt
->
fs_Êags
))

253  
√xt
;

255  
NULL
;

256 
	}
}

259 #i‡
deföed
(
HAVE_GETMNTENT
)

260 
	~<m¡ít.h
>

271 
	$fs_exåa˘_mou¡_›ti⁄s
(

272 
m¡ít
 *
m¡
,

273 **
logp
,

274 **
πp
)

276 *
f¶og
, *
f§t
;

286 i‡((
f¶og
 = 
	`hasm¡›t
(
m¡
, "logdev")) && fslog[6] == '=')

287 
f¶og
 += 7;

288 i‡((
f§t
 = 
	`hasm¡›t
(
m¡
, "rtdev")) && fsrt[5] == '=')

289 
f§t
 += 6;

292 i‡(
f¶og
) {

293 
f¶og
 = 
	`°∫dup
(f¶og, 
	`°rc•n
(fslog, " ,"));

294 i‡(!
f¶og
)

295 
out_nomem
;

297 i‡(
f§t
) {

298 
f§t
 = 
	`°∫dup
(f§t, 
	`°rc•n
(fsrt, " ,"));

299 i‡(!
f§t
) {

300 
	`‰ì
(
f¶og
);

301 
out_nomem
;

304 *
logp
 = 
f¶og
;

305 *
πp
 = 
f§t
;

309 
out_nomem
:

310 *
logp
 = 
NULL
;

311 *
πp
 = 
NULL
;

312 
	`Ârötf
(
°dîr
, 
	`_
("%s: unableÅoÉxtract mount options for \"%s\"\n"),

313 
¥og«me
, 
m¡
->
m¡_dú
);

314  
ENOMEM
;

315 
	}
}

325 
	$fs_èbÀ_öôüli£_mou¡s
(

326 *
∑th
)

328 
m¡ít
 *
m¡
;

329 
FILE
 *
mç
;

330 *
f¶og
, *
f§t
;

331 
îr‹
, 
found
;

332 
Ω©h
[
PATH_MAX
], 
rm¡_f¢ame
[PATH_MAX], 
rm¡_dú
[PATH_MAX];

334 
îr‹
 = 
found
 = 0;

335 
f¶og
 = 
f§t
 = 
NULL
;

337 i‡(!
mèb_fûe
) {

338 
mèb_fûe
 = 
PROC_MOUNTS
;

339 i‡(
	`ac˚ss
(
mèb_fûe
, 
R_OK
) != 0)

340 
mèb_fûe
 = 
MOUNTED
;

343 i‡((
mç
 = 
	`£tm¡ít
(
mèb_fûe
, "r")Ë=
NULL
)

344  
ENOENT
;

347 i‡(
∑th
)

348 i‡(!
	`ªÆ∑th
(
∑th
, 
Ω©h
))

349  
î∫o
;

351 (
m¡
 = 
	`gëm¡ít
(
mç
)Ë!
NULL
) {

352 i‡(!
	`ªÆ∑th
(
m¡
->
m¡_dú
, 
rm¡_dú
))

354 i‡(!
	`ªÆ∑th
(
m¡
->
m¡_f¢ame
, 
rm¡_f¢ame
))

357 i‡(
∑th
 &&

358 ((
	`°rcmp
(
Ω©h
, 
rm¡_dú
) != 0) &&

359 (
	`°rcmp
(
Ω©h
, 
rm¡_f¢ame
) != 0)))

361 i‡(
	`fs_exåa˘_mou¡_›ti⁄s
(
m¡
, &
f¶og
, &
f§t
))

363 (Ë
	`fs_èbÀ_ö£π
(
m¡
->
m¡_dú
, 0, 
FS_MOUNT_POINT
,

364 
m¡
->
m¡_f¢ame
, 
f¶og
, 
f§t
);

365 i‡(
∑th
) {

366 
found
 = 1;

370 
	`ídm¡ít
(
mç
);

372 i‡(
∑th
 && !
found
)

373 
îr‹
 = 
ENXIO
;

375  
îr‹
;

376 
	}
}

378 #ñi‡
deföed
(
HAVE_GETMNTINFO
)

379 
	~<sys/mou¡.h
>

389 
	$fs_èbÀ_öôüli£_mou¡s
(

390 *
∑th
)

392 
°©fs
 *
°©s
;

393 
i
, 
cou¡
, 
îr‹
, 
found
;

394 
Ω©h
[
PATH_MAX
], 
rm¡‰om«me
[PATH_MAX], 
rm¡⁄«me
[PATH_MAX];

396 
îr‹
 = 
found
 = 0;

397 i‡((
cou¡
 = 
	`gëm¡öfo
(&
°©s
, 0)) < 0) {

398 
	`Ârötf
(
°dîr
, 
	`_
("%s: getmntinfo() failed: %s\n"),

399 
¥og«me
, 
	`°ªº‹
(
î∫o
));

404 i‡(
∑th
)

405 i‡(!
	`ªÆ∑th
(
∑th
, 
Ω©h
))

406  
î∫o
;

408 
i
 = 0; i < 
cou¡
; i++) {

409 i‡(!
	`ªÆ∑th
(
°©s
[
i
].
f_m¡‰om«me
, 
rm¡‰om«me
))

411 i‡(!
	`ªÆ∑th
(
°©s
[
i
].
f_m¡⁄«me
, 
rm¡⁄«me
))

414 i‡(
∑th
 &&

415 ((
	`°rcmp
(
Ω©h
, 
rm¡⁄«me
) != 0) &&

416 (
	`°rcmp
(
Ω©h
, 
rm¡‰om«me
) != 0)))

419 (Ë
	`fs_èbÀ_ö£π
(
°©s
[
i
].
f_m¡⁄«me
, 0,

420 
FS_MOUNT_POINT
, 
°©s
[
i
].
f_m¡‰om«me
,

421 
NULL
, NULL);

422 i‡(
∑th
) {

423 
found
 = 1;

427 i‡(
∑th
 && !
found
)

428 
îr‹
 = 
ENXIO
;

430  
îr‹
;

431 
	}
}

440 
fs_∑th
 *

441 
	$fs_mou¡_poöt_‰om_∑th
(

442 c⁄° *
dú
)

444 
fs_curs‹_t
 
curs‹
;

445 
fs_∑th_t
 *
fs
;

446 
dev_t
 
dev
 = 0;

448 i‡(
	`fs_devi˚_numbî
(
dú
, &
dev
))

449  
NULL
;

451 
	`fs_curs‹_öôüli£
(
NULL
, 
FS_MOUNT_POINT
, &
curs‹
);

452 (
fs
 = 
	`fs_curs‹_√xt_íåy
(&
curs‹
))) {

453 i‡(
fs
->
fs_d©adev
 =
dev
)

456  
fs
;

457 
	}
}

460 
	$fs_èbÀ_ö£π_mou¡
(

461 *
mou¡
)

463 
îr‹
;

465 
îr‹
 = 
	`fs_èbÀ_öôüli£_mou¡s
(
mou¡
);

466 i‡(
îr‹
)

467 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot setupÖath for mount %s: %s\n"),

468 
¥og«me
, 
mou¡
, 
	`°ªº‹
(
îr‹
));

469 
	}
}

472 
	$fs_èbÀ_öôüli£_¥oje˘s
(

473 *
¥oje˘
)

475 
fs_¥oje˘_∑th_t
 *
∑th
;

476 
fs_∑th_t
 *
fs
;

477 
¥id_t
 
¥id
 = 0;

478 
îr‹
 = 0, 
found
 = 0;

480 i‡(
¥oje˘
)

481 
¥id
 = 
	`¥id_‰om_°rög
(
¥oje˘
);

483 
	`£çΩ©hít
();

484 (
∑th
 = 
	`gë¥∑thít
()Ë!
NULL
) {

485 i‡(
¥oje˘
 && 
¥id
 !
∑th
->
µ_¥id
)

487 
fs
 = 
	`fs_mou¡_poöt_‰om_∑th
(
∑th
->
µ_∑th«me
);

488 i‡(!
fs
) {

489 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot find mountÖoint forÖath `%s': %s\n"),

490 
¥og«me
, 
∑th
->
µ_∑th«me
, 
	`°ªº‹
(
î∫o
));

493 (Ë
	`fs_èbÀ_ö£π
(
∑th
->
µ_∑th«me
,Ö©h->
µ_¥id
,

494 
FS_PROJECT_PATH
, 
fs
->
fs_«me
,

495 
NULL
, NULL);

496 i‡(
¥oje˘
) {

497 
found
 = 1;

501 
	`íd¥∑thít
();

503 i‡(
¥oje˘
 && !
found
)

504 
îr‹
 = 
ENOENT
;

506  
îr‹
;

507 
	}
}

510 
	$fs_èbÀ_ö£π_¥oje˘
(

511 *
¥oje˘
)

513 
îr‹
;

515 
îr‹
 = 
	`fs_èbÀ_öôüli£_¥oje˘s
(
¥oje˘
);

516 i‡(
îr‹
)

517 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot setupÖath forÖroject %s: %s\n"),

518 
¥og«me
, 
¥oje˘
, 
	`°ªº‹
(
îr‹
));

519 
	}
}

529 
	$fs_èbÀ_öôüli£
(

530 
mou¡_cou¡
,

531 *
mou¡s
[],

532 
¥oje˘_cou¡
,

533 *
¥oje˘s
[])

535 
îr‹
;

536 
i
;

538 i‡(
mou¡_cou¡
) {

539 
i
 = 0; i < 
mou¡_cou¡
; i++)

540 
	`fs_èbÀ_ö£π_mou¡
(
mou¡s
[
i
]);

542 
îr‹
 = 
	`fs_èbÀ_öôüli£_mou¡s
(
NULL
);

543 i‡(
îr‹
)

544 
out_îr‹
;

546 i‡(
¥oje˘_cou¡
) {

547 
i
 = 0; i < 
¥oje˘_cou¡
; i++)

548 
	`fs_èbÀ_ö£π_¥oje˘
(
¥oje˘s
[
i
]);

550 
îr‹
 = 
	`fs_èbÀ_öôüli£_¥oje˘s
(
NULL
);

551 i‡(
îr‹
)

552 
out_îr‹
;

557 
out_îr‹
:

558 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot initialiseÖathÅable: %s\n"),

559 
¥og«me
, 
	`°ªº‹
(
îr‹
));

560 
	}
}

563 
	$fs_èbÀ_ö£π_¥oje˘_∑th
(

564 *
dú
,

565 
¥id_t
 
¥id
)

567 
fs_∑th_t
 *
fs
;

568 
îr‹
 = 0;

570 
fs
 = 
	`fs_mou¡_poöt_‰om_∑th
(
dú
);

571 i‡(
fs
)

572 
îr‹
 = 
	`fs_èbÀ_ö£π
(
dú
, 
¥id
, 
FS_PROJECT_PATH
,

573 
fs
->
fs_«me
, 
NULL
, NULL);

575 
îr‹
 = 
ENOENT
;

577 i‡(
îr‹
) {

578 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot setupÖath forÖroject dir %s: %s\n"),

579 
¥og«me
, 
dú
, 
	`°ªº‹
(
îr‹
));

580 
	`exô
(1);

582 
	}
}

	@libxcmd/projects.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~"¥oje˘.h
"

24 
	#PROJID
 "/ëc/¥ojid"

	)

25 
	#PROJECT_PATHS
 "/ëc/¥oje˘s"

	)

26 *
	g¥ojid_fûe
;

27 *
	g¥oje˘s_fûe
;

29 
FILE
 *
	g¥oje˘s
;

30 
fs_¥oje˘_t
 
	gp
;

31 
	g¥oje˘s_buf„r
[512];

33 
FILE
 *
	g¥oje˘_∑ths
;

34 
fs_¥oje˘_∑th_t
 
	gµ
;

35 
	g¥oje˘_∑ths_buf„r
[1024];

38 
	$£çrfûes
()

40 i‡(!
¥ojid_fûe
)

41 
¥ojid_fûe
 = 
PROJID
;

42 i‡(!
¥oje˘s_fûe
)

43 
¥oje˘s_fûe
 = 
PROJECT_PATHS
;

44 
	}
}

47 
	$£çª¡
()

49 
	`£çrfûes
();

50 
¥oje˘s
 = 
	`f›í
(
¥ojid_fûe
, "r");

51 
	}
}

54 
	$£çΩ©hít
()

56 
	`£çrfûes
();

57 
¥oje˘_∑ths
 = 
	`f›í
(
¥oje˘s_fûe
, "r");

58 
	}
}

61 
	$íd¥ít
()

63 i‡(
¥oje˘s
)

64 
	`f˛o£
(
¥oje˘s
);

65 
¥oje˘s
 = 
NULL
;

66 
	}
}

69 
	$íd¥∑thít
()

71 i‡(
¥oje˘_∑ths
)

72 
	`f˛o£
(
¥oje˘_∑ths
);

73 
¥oje˘_∑ths
 = 
NULL
;

74 
	}
}

76 
fs_¥oje˘_t
 *

77 
	$gë¥ít
()

79 *
id°¨t
, *
idíd
;

80 
size_t
 
size
 = (
¥oje˘s_buf„r
) - 1;

82 i‡(!
¥oje˘s
)

83  
NULL
;

85 i‡(!
	`fgës
(
¥oje˘s_buf„r
, 
size
, 
¥oje˘s
))

90 i‡(
¥oje˘s_buf„r
[0] == '#')

92 
id°¨t
 = 
	`°rchr
(
¥oje˘s_buf„r
, ':');

93 i‡(!
id°¨t
)

95 i‡((
id°¨t
 + 1Ë- 
¥oje˘s_buf„r
 >
size
)

97 
idíd
 = 
	`°rchr
(
id°¨t
+1, ':');

98 i‡(
idíd
)

99 *
idíd
 = '\0';

100 *
id°¨t
 = '\0';

101 
p
.
¥_¥id
 = 
	`©oi
(
id°¨t
+1);

102 
p
.
¥_«me
 = &
¥oje˘s_buf„r
[0];

103  &
p
;

106  
NULL
;

107 
	}
}

109 
fs_¥oje˘_t
 *

110 
	$gë¥«m
(

111 *
«me
)

113 
fs_¥oje˘_t
 *
p
 = 
NULL
;

115 
	`£çª¡
();

116 (
p
 = 
	`gë¥ít
()Ë!
NULL
)

117 i‡(
	`°rcmp
(
p
->
¥_«me
, 
«me
) == 0)

119 
	`íd¥ít
();

120  
p
;

121 
	}
}

123 
fs_¥oje˘_t
 *

124 
	$gë¥¥id
(

125 
¥id_t
 
¥id
)

127 
fs_¥oje˘_t
 *
p
 = 
NULL
;

129 
	`£çª¡
();

130 (
p
 = 
	`gë¥ít
()Ë!
NULL
)

131 i‡(
p
->
¥_¥id
 =
¥id
)

133 
	`íd¥ít
();

134  
p
;

135 
	}
}

137 
fs_¥oje˘_∑th_t
 *

138 
	$gë¥∑thít
()

140 *
nm°¨t
, *
nmíd
;

141 
size_t
 
size
 = (
¥oje˘_∑ths_buf„r
) - 1;

143 i‡(!
¥oje˘_∑ths
)

144  
NULL
;

146 i‡(!
	`fgës
(
¥oje˘_∑ths_buf„r
, 
size
, 
¥oje˘_∑ths
))

151 i‡(
¥oje˘_∑ths_buf„r
[0] == '#')

153 
nm°¨t
 = 
	`°rchr
(
¥oje˘_∑ths_buf„r
, ':');

154 i‡(!
nm°¨t
)

156 i‡((
nm°¨t
 + 1Ë- 
¥oje˘_∑ths_buf„r
 >
size
)

158 
nmíd
 = 
	`°rchr
(
nm°¨t
 + 1, '\n');

159 i‡(
nmíd
)

160 *
nmíd
 = '\0';

161 *
nm°¨t
 = '\0';

162 
µ
.
µ_∑th«me
 = 
nm°¨t
 + 1;

163 
µ
.
µ_¥id
 = 
	`©oi
(&
¥oje˘_∑ths_buf„r
[0]);

164  &
µ
;

167  
NULL
;

168 
	}
}

172 
	$gë¥ojid
(

173 c⁄° *
«me
,

174 
fd
,

175 
¥id_t
 *
¥ojid
)

177 
fsx©å
 
fsx
;

179 i‡(
	`xfs˘l
(
«me
, 
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) {

180 
	`≥º‹
("FS_IOC_FSGETXATTR");

183 *
¥ojid
 = 
fsx
.
fsx_¥ojid
;

185 
	}
}

188 
	$£çrojid
(

189 c⁄° *
«me
,

190 
fd
,

191 
¥id_t
 
¥ojid
)

193 
fsx©å
 
fsx
;

194 
îr‹
;

196 i‡((
îr‹
 = 
	`xfs˘l
(
«me
, 
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) == 0) {

197 
fsx
.
fsx_¥ojid
 = 
¥ojid
;

198 
îr‹
 = 
	`xfs˘l
(
«me
, 
fd
, 
FS_IOC_FSSETXATTR
, &
fsx
);

200  
îr‹
;

201 
	}
}

	@libxcmd/quit.c

19 
	~"∂©f‹m_defs.h
"

20 
	~"comm™d.h
"

21 
	~"../quŸa/öô.h
"

23 
cmdöfo_t
 
	gquô_cmd
;

27 
	$quô_f
(

28 
¨gc
,

29 **
¨gv
)

32 
	}
}

35 
	$quô_öô
()

37 
quô_cmd
.
«me
 = "quit";

38 
quô_cmd
.
Æäame
 = "q";

39 
quô_cmd
.
cfunc
 = 
quô_f
;

40 
quô_cmd
.
¨gmö
 = -1;

41 
quô_cmd
.
¨gmax
 = -1;

42 
quô_cmd
.
Êags
 = 
CMD_FLAG_ONESHOT
 | 
CMD_FLAG_LIBRARY
;

43 
quô_cmd
.
⁄ñöe
 = 
	`_
("exitÅheÖrogram");

45 
	`add_comm™d
(&
quô_cmd
);

46 
	}
}

	@libxcmd/topology.c

19 
	~"libxfs.h
"

20 
	~"libxcmd.h
"

21 #ifde‡
ENABLE_BLKID


22 
	~<blkid/blkid.h
>

24 
	~"xfs_mu…idisk.h
"

26 
	#TERABYTES
(
cou¡
, 
blog
Ë((
__uöt64_t
)(cou¡Ë<< (40 - (blog)))

	)

27 
	#GIGABYTES
(
cou¡
, 
blog
Ë((
__uöt64_t
)(cou¡Ë<< (30 - (blog)))

	)

28 
	#MEGABYTES
(
cou¡
, 
blog
Ë((
__uöt64_t
)(cou¡Ë<< (20 - (blog)))

	)

31 
	$ˇlc_deÁu…_ag_geomëry
(

32 
blocklog
,

33 
__uöt64_t
 
dblocks
,

34 
mu…idisk
,

35 
__uöt64_t
 *
agsize
,

36 
__uöt64_t
 *
agcou¡
)

38 
__uöt64_t
 
blocks
 = 0;

39 
shi·
 = 0;

47 i‡(
dblocks
 >
	`TERABYTES
(32, 
blocklog
)) {

48 
blocks
 = 
	`XFS_AG_MAX_BLOCKS
(
blocklog
);

49 
d⁄e
;

57 i‡(!
mu…idisk
) {

58 i‡(
dblocks
 >
	`TERABYTES
(4, 
blocklog
)) {

59 
blocks
 = 
	`XFS_AG_MAX_BLOCKS
(
blocklog
);

60 
d⁄e
;

61 } i‡(
dblocks
 >
	`MEGABYTES
(128, 
blocklog
)) {

62 
shi·
 = 
XFS_NOMULTIDISK_AGLOG
;

63 
ˇlc_blocks
;

73 
shi·
 = 
XFS_MULTIDISK_AGLOG
;

74 i‡(
dblocks
 <
	`GIGABYTES
(512, 
blocklog
))

75 
shi·
--;

76 i‡(
dblocks
 <
	`GIGABYTES
(8, 
blocklog
))

77 
shi·
--;

78 i‡(
dblocks
 < 
	`MEGABYTES
(128, 
blocklog
))

79 
shi·
--;

80 i‡(
dblocks
 < 
	`MEGABYTES
(64, 
blocklog
))

81 
shi·
--;

82 i‡(
dblocks
 < 
	`MEGABYTES
(32, 
blocklog
))

83 
shi·
--;

91 
ˇlc_blocks
:

92 
	`ASSERT
(
shi·
 >0 && shi· <
XFS_MULTIDISK_AGLOG
);

93 
blocks
 = 
dblocks
 >> 
shi·
;

94 i‡(
dblocks
 & 
	`xfs_mask32lo
(
shi·
)) {

95 i‡(
blocks
 < 
	`XFS_AG_MAX_BLOCKS
(
blocklog
))

96 
blocks
++;

98 
d⁄e
:

99 *
agsize
 = 
blocks
;

100 *
agcou¡
 = 
dblocks
 / 
blocks
 + (dblocks % blocks != 0);

101 
	}
}

110 #ifde‡
ENABLE_BLKID


112 
	$check_ovîwrôe
(

113 c⁄° *
devi˚
)

115 c⁄° *
ty≥
;

116 
blkid_¥obe
 
¥
 = 
NULL
;

117 
ªt
;

118 
fd
;

119 
size
;

120 
bsz
;

122 i‡(!
devi˚
 || !*device)

125 
ªt
 = -1;

127 
fd
 = 
	`›í
(
devi˚
, 
O_RDONLY
);

128 i‡(
fd
 < 0)

129 
out
;

130 
	`∂©f‹m_födsizes
((*)
devi˚
, 
fd
, &
size
, &
bsz
);

131 
	`˛o£
(
fd
);

134 i‡(
size
 == 0) {

135 
ªt
 = 0;

136 
out
;

139 
¥
 = 
	`blkid_√w_¥obe_‰om_fûíame
(
devi˚
);

140 i‡(!
¥
)

141 
out
;

143 
ªt
 = 
	`blkid_¥obe_íabÀ_∑πôi⁄s
(
¥
, 1);

144 i‡(
ªt
 < 0)

145 
out
;

147 
ªt
 = 
	`blkid_do_fuŒ¥obe
(
¥
);

148 i‡(
ªt
 < 0)

149 
out
;

158 i‡(
ªt
) {

159 
ªt
 = 0;

160 
out
;

163 i‡(!
	`blkid_¥obe_lookup_vÆue
(
¥
, "TYPE", &
ty≥
, 
NULL
)) {

164 
	`Ârötf
(
°dîr
,

165 
	`_
("%s: %sáppearsÅo containánÉxisting "

166 "fûesy°em (%s).\n"), 
¥og«me
, 
devi˚
, 
ty≥
);

167 } i‡(!
	`blkid_¥obe_lookup_vÆue
(
¥
, "PTTYPE", &
ty≥
, 
NULL
)) {

168 
	`Ârötf
(
°dîr
,

169 
	`_
("%s: %sáppearsÅo containáÖartition "

170 "èbÀ (%s).\n"), 
¥og«me
, 
devi˚
, 
ty≥
);

172 
	`Ârötf
(
°dîr
,

173 
	`_
("%s: %sáppearsÅo contain something weird "

174 "acc‹dögÅÿblkid\n"), 
¥og«me
, 
devi˚
);

176 
ªt
 = 1;

177 
out
:

178 i‡(
¥
)

179 
	`blkid_‰ì_¥obe
(
¥
);

180 i‡(
ªt
 == -1)

181 
	`Ârötf
(
°dîr
,

182 
	`_
("%s:Örobe of %s failed, cannot detect "

183 "exi°ög fûesy°em.\n"), 
¥og«me
, 
devi˚
);

184  
ªt
;

185 
	}
}

187 
	$blkid_gë_t›ﬁogy
(

188 c⁄° *
devi˚
,

189 *
sunô
,

190 *
swidth
,

191 *
l£˘‹size
,

192 *
p£˘‹size
,

193 
f‹˚_ovîwrôe
)

196 
blkid_t›ﬁogy
 
ç
;

197 
blkid_¥obe
 
¥
;

198 
vÆ
;

199 
°©
 
°©buf
;

202 i‡(!
	`°©
(
devi˚
, &
°©buf
Ë&& 
	`S_ISREG
(°©buf.
°_mode
)) {

203 
	`Ârötf
(
°dîr
,

204 
	`_
("%s: Warning:ÅryingÅoÖrobeÅopology ofá file %s!\n"),

205 
¥og«me
, 
devi˚
);

209 
¥
 = 
	`blkid_√w_¥obe_‰om_fûíame
(
devi˚
);

210 i‡(!
¥
)

213 
ç
 = 
	`blkid_¥obe_gë_t›ﬁogy
(
¥
);

214 i‡(!
ç
)

215 
out_‰ì_¥obe
;

217 
vÆ
 = 
	`blkid_t›ﬁogy_gë_logiˇl_£˘‹_size
(
ç
);

218 *
l£˘‹size
 = 
vÆ
;

219 
vÆ
 = 
	`blkid_t›ﬁogy_gë_physiˇl_£˘‹_size
(
ç
);

220 *
p£˘‹size
 = 
vÆ
;

221 
vÆ
 = 
	`blkid_t›ﬁogy_gë_möimum_io_size
(
ç
);

222 *
sunô
 = 
vÆ
;

223 
vÆ
 = 
	`blkid_t›ﬁogy_gë_›timÆ_io_size
(
ç
);

224 *
swidth
 = 
vÆ
;

231 i‡(*
sunô
 =*
p£˘‹size
 || *
swidth
 == *psectorsize) {

232 *
sunô
 = 0;

233 *
swidth
 = 0;

240 *
sunô
 = *sunit >> 9;

241 *
swidth
 = *swidth >> 9;

243 i‡(
	`blkid_t›ﬁogy_gë_Æignmít_off£t
(
ç
) != 0) {

244 
	`Ârötf
(
°dîr
,

245 
	`_
("warning: device isÇotÖroperlyáligned %s\n"),

246 
devi˚
);

248 i‡(!
f‹˚_ovîwrôe
) {

249 
	`Ârötf
(
°dîr
,

250 
	`_
("Use -fÅo force usage ofá misaligned device\n"));

252 
	`exô
(
EXIT_FAILURE
);

255 *
p£˘‹size
 = *
l£˘‹size
;

258 
	`blkid_‰ì_¥obe
(
¥
);

261 
out_‰ì_¥obe
:

262 
	`blkid_‰ì_¥obe
(
¥
);

263 
	`Ârötf
(
°dîr
,

264 
	`_
("warning: unableÅoÖrobe deviceÅopology for device %s\n"),

265 
devi˚
);

266 
	}
}

273 #w¨nög 
BLKID
 
is
 
dißbÀd
, 
so
 
sig«tuª
 
dëe˘i⁄
 
™d
 
block
 
devi˚
\

274 
ac˚ss
 
¨e
 
nŸ
 
	gw‹kög
!

276 
	$check_ovîwrôe
(

277 c⁄° *
devi˚
)

280 
	}
}

282 
	$blkid_gë_t›ﬁogy
(

283 c⁄° *
devi˚
,

284 *
sunô
,

285 *
swidth
,

286 *
l£˘‹size
,

287 *
p£˘‹size
,

288 
f‹˚_ovîwrôe
)

295 *
l£˘‹size
 = *
p£˘‹size
 = 512;

296 
	}
}

300 
	$gë_t›ﬁogy
(

301 
libxfs_öô_t
 *
xi
,

302 
fs_t›ﬁogy
 *
·
,

303 
f‹˚_ovîwrôe
)

305 
°©
 
°©buf
;

306 *
dfûe
 = 
xi
->
vﬁ«me
 ? xi->vﬁ«mê: xi->
d«me
;

313 i‡(
xi
->
disfûe
 ||

314 (!
	`°©
(
dfûe
, &
°©buf
Ë&& 
	`S_ISREG
(°©buf.
°_mode
))) {

315 
fd
;

316 
Êags
 = 
O_RDONLY
;

317 
dummy
;

320 i‡(
xi
->
disfûe
)

321 
Êags
 |
O_CREAT
;

323 
fd
 = 
	`›í
(
dfûe
, 
Êags
, 0666);

324 i‡(
fd
 >= 0) {

325 
	`∂©f‹m_födsizes
(
dfûe
, 
fd
, &
dummy
, &
·
->
l£˘‹size
);

326 
	`˛o£
(
fd
);

327 
·
->
p£˘‹size
 = ft->
l£˘‹size
;

329 
·
->
p£˘‹size
 = ft->
l£˘‹size
 = 
BBSIZE
;

331 
	`blkid_gë_t›ﬁogy
(
dfûe
, &
·
->
dsunô
, &·->
dswidth
,

332 &
·
->
l£˘‹size
, &·->
p£˘‹size
,

333 
f‹˚_ovîwrôe
);

336 i‡(
xi
->
π«me
 && !xi->
risfûe
) {

337 
sunô
, 
l£˘‹size
, 
p£˘‹size
;

339 
	`blkid_gë_t›ﬁogy
(
xi
->
π«me
, &
sunô
, &
·
->
πswidth
,

340 &
l£˘‹size
, &
p£˘‹size
, 
f‹˚_ovîwrôe
);

342 
	}
}

	@libxfs/cache.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<uni°d.h
>

23 
	~<±hªad.h
>

25 
	~"libxfs_¥iv.h
"

26 
	~"xfs_fs.h
"

27 
	~"xfs_sh¨ed.h
"

28 
	~"xfs_f‹m©.h
"

29 
	~"xfs_å™s_ªsv.h
"

30 
	~"xfs_mou¡.h
"

31 
	~"xfs_bô.h
"

33 
	#CACHE_DEBUG
 1

	)

34 #unde‡
CACHE_DEBUG


35 
	#CACHE_DEBUG
 1

	)

36 #unde‡
CACHE_ABORT


39 
	#CACHE_SHAKE_COUNT
 64

	)

41 
ˇche_gíîic_bulkªl£
(
ˇche
 *, 
li°_hód
 *);

43 
ˇche
 *

44 
	$ˇche_öô
(

45 
Êags
,

46 
hashsize
,

47 
ˇche_›î©i⁄s
 *cache_operations)

49 
ˇche
 * cache;

50 
i
, 
maxcou¡
;

52 
maxcou¡
 = 
hashsize
 * 
HASH_CACHE_RATIO
;

54 i‡(!(
ˇche
 = 
	`mÆloc
((cache))))

55  
NULL
;

56 i‡(!(
ˇche
->
c_hash
 = 
	`ˇŒoc
(
hashsize
, (
ˇche_hash
)))) {

57 
	`‰ì
(
ˇche
);

58  
NULL
;

61 
ˇche
->
c_Êags
 = 
Êags
;

62 
ˇche
->
c_cou¡
 = 0;

63 
ˇche
->
c_max
 = 0;

64 
ˇche
->
c_hôs
 = 0;

65 
ˇche
->
c_mis£s
 = 0;

66 
ˇche
->
c_maxcou¡
 = 
maxcou¡
;

67 
ˇche
->
c_hashsize
 = 
hashsize
;

68 
ˇche
->
c_hashshi·
 = 
	`libxfs_highbô32
(
hashsize
);

69 
ˇche
->
hash
 = 
ˇche_›î©i⁄s
->hash;

70 
ˇche
->
Æloc
 = 
ˇche_›î©i⁄s
->alloc;

71 
ˇche
->
Êush
 = 
ˇche_›î©i⁄s
->flush;

72 
ˇche
->
ªl£
 = 
ˇche_›î©i⁄s
->relse;

73 
ˇche
->
com∑ª
 = 
ˇche_›î©i⁄s
->compare;

74 
ˇche
->
bulkªl£
 = 
ˇche_›î©i⁄s
->bulkrelse ?

75 
ˇche_›î©i⁄s
->
bulkªl£
 : 
ˇche_gíîic_bulkªl£
;

76 
	`±hªad_muãx_öô
(&
ˇche
->
c_muãx
, 
NULL
);

78 
i
 = 0; i < 
hashsize
; i++) {

79 
	`li°_hód_öô
(&
ˇche
->
c_hash
[
i
].
ch_li°
);

80 
ˇche
->
c_hash
[
i
].
ch_cou¡
 = 0;

81 
	`±hªad_muãx_öô
(&
ˇche
->
c_hash
[
i
].
ch_muãx
, 
NULL
);

84 
i
 = 0; i <
CACHE_DIRTY_PRIORITY
; i++) {

85 
	`li°_hód_öô
(&
ˇche
->
c_mrus
[
i
].
cm_li°
);

86 
ˇche
->
c_mrus
[
i
].
cm_cou¡
 = 0;

87 
	`±hªad_muãx_öô
(&
ˇche
->
c_mrus
[
i
].
cm_muãx
, 
NULL
);

89  
ˇche
;

90 
	}
}

93 
	$ˇche_ex∑nd
(

94 
ˇche
 * cache)

96 
	`±hªad_muãx_lock
(&
ˇche
->
c_muãx
);

97 #ifde‡
CACHE_DEBUG


98 
	`Ârötf
(
°dîr
, "doublög cachêsizêtÿ%d\n", 2 * 
ˇche
->
c_maxcou¡
);

100 
ˇche
->
c_maxcou¡
 *= 2;

101 
	`±hªad_muãx_u∆ock
(&
ˇche
->
c_muãx
);

102 
	}
}

105 
	$ˇche_wÆk
(

106 
ˇche
 * cache,

107 
ˇche_wÆk_t
 
visô
)

109 
ˇche_hash
 * 
hash
;

110 
li°_hód
 * 
hód
;

111 
li°_hód
 * 
pos
;

112 
i
;

114 
i
 = 0; i < 
ˇche
->
c_hashsize
; i++) {

115 
hash
 = &
ˇche
->
c_hash
[
i
];

116 
hód
 = &
hash
->
ch_li°
;

117 
	`±hªad_muãx_lock
(&
hash
->
ch_muãx
);

118 
pos
 = 
hód
->
√xt
;Öos != head;Öos =Öos->next)

119 
	`visô
((
ˇche_node
 *)
pos
);

120 
	`±hªad_muãx_u∆ock
(&
hash
->
ch_muãx
);

122 
	}
}

124 #ifde‡
CACHE_ABORT


125 
	#ˇche_ab‹t
(Ë
	`ab‹t
()

	)

127 
	#ˇche_ab‹t
(Ëdÿ{ } 0)

	)

130 #ifde‡
CACHE_DEBUG


132 
	$ˇche_zîo_check
(

133 
ˇche_node
 * 
node
)

135 i‡(
node
->
˙_cou¡
 > 0) {

136 
	`Ârötf
(
°dîr
, "%s:Ñefcount is %u,Çot zero (node=%p)\n",

137 
__FUNCTION__
, 
node
->
˙_cou¡
,Çode);

138 
	`ˇche_ab‹t
();

140 
	}
}

141 
	#ˇche_de°roy_check
(
c
Ë
	`ˇche_wÆk
((c), 
ˇche_zîo_check
)

	)

143 
	#ˇche_de°roy_check
(
c
Ëdÿ{ } 0)

	)

147 
	$ˇche_de°roy
(

148 
ˇche
 * cache)

150 
i
;

152 
	`ˇche_de°roy_check
(
ˇche
);

153 
i
 = 0; i < 
ˇche
->
c_hashsize
; i++) {

154 
	`li°_hód_de°roy
(&
ˇche
->
c_hash
[
i
].
ch_li°
);

155 
	`±hªad_muãx_de°roy
(&
ˇche
->
c_hash
[
i
].
ch_muãx
);

157 
i
 = 0; i <
CACHE_DIRTY_PRIORITY
; i++) {

158 
	`li°_hód_de°roy
(&
ˇche
->
c_mrus
[
i
].
cm_li°
);

159 
	`±hªad_muãx_de°roy
(&
ˇche
->
c_mrus
[
i
].
cm_muãx
);

161 
	`±hªad_muãx_de°roy
(&
ˇche
->
c_muãx
);

162 
	`‰ì
(
ˇche
->
c_hash
);

163 
	`‰ì
(
ˇche
);

164 
	}
}

167 
	$ˇche_gíîic_bulkªl£
(

168 
ˇche
 * cache,

169 
li°_hód
 * 
li°
)

171 
ˇche_node
 * 
node
;

172 
cou¡
 = 0;

174 !
	`li°_em±y
(
li°
)) {

175 
node
 = 
	`li°_íåy
(
li°
->
√xt
, 
ˇche_node
, 
˙_mru
);

176 
	`±hªad_muãx_de°roy
(&
node
->
˙_muãx
);

177 
	`li°_dñ_öô
(&
node
->
˙_mru
);

178 
ˇche
->
	`ªl£
(
node
);

179 
cou¡
++;

182  
cou¡
;

183 
	}
}

191 
	$ˇche_add_to_dúty_mru
(

192 
ˇche
 *cache,

193 
ˇche_node
 *
node
)

195 
ˇche_mru
 *
mru
 = &
ˇche
->
c_mrus
[
CACHE_DIRTY_PRIORITY
];

197 
	`±hªad_muãx_lock
(&
mru
->
cm_muãx
);

198 
node
->
˙_ﬁd_¥i‹ôy
 =Çode->
˙_¥i‹ôy
;

199 
node
->
˙_¥i‹ôy
 = 
CACHE_DIRTY_PRIORITY
;

200 
	`li°_add
(&
node
->
˙_mru
, &
mru
->
cm_li°
);

201 
mru
->
cm_cou¡
++;

202 
	`±hªad_muãx_u∆ock
(&
mru
->
cm_muãx
);

203 
	}
}

220 
	$ˇche_shake
(

221 
ˇche
 * cache,

222 
¥i‹ôy
,

223 
boﬁ
 
purge
)

225 
ˇche_mru
 *
mru
;

226 
ˇche_hash
 * 
hash
;

227 
li°_hód
 
ãmp
;

228 
li°_hód
 * 
hód
;

229 
li°_hód
 * 
pos
;

230 
li°_hód
 * 
n
;

231 
ˇche_node
 * 
node
;

232 
cou¡
;

234 
	`ASSERT
(
¥i‹ôy
 <
CACHE_DIRTY_PRIORITY
);

235 i‡(
¥i‹ôy
 > 
CACHE_MAX_PRIORITY
 && !
purge
)

236 
¥i‹ôy
 = 0;

238 
mru
 = &
ˇche
->
c_mrus
[
¥i‹ôy
];

239 
cou¡
 = 0;

240 
	`li°_hód_öô
(&
ãmp
);

241 
hód
 = &
mru
->
cm_li°
;

243 
	`±hªad_muãx_lock
(&
mru
->
cm_muãx
);

244 
pos
 = 
hód
->
¥ev
, 
n
 =Öos->prev;Öos != head;

245 
pos
 = 
n
,Ç =Öos->
¥ev
) {

246 
node
 = 
	`li°_íåy
(
pos
, 
ˇche_node
, 
˙_mru
);

248 i‡(
	`±hªad_muãx_åylock
(&
node
->
˙_muãx
) != 0)

252 i‡(
ˇche
->
	`Êush
(
node
Ë&& !
purge
) {

253 
	`li°_dñ
(&
node
->
˙_mru
);

254 
mru
->
cm_cou¡
--;

255 
node
->
˙_¥i‹ôy
 = -1;

256 
	`±hªad_muãx_u∆ock
(&
node
->
˙_muãx
);

257 
	`ˇche_add_to_dúty_mru
(
ˇche
, 
node
);

261 
hash
 = 
ˇche
->
c_hash
 + 
node
->
˙_hashidx
;

262 i‡(
	`±hªad_muãx_åylock
(&
hash
->
ch_muãx
) != 0) {

263 
	`±hªad_muãx_u∆ock
(&
node
->
˙_muãx
);

266 
	`ASSERT
(
node
->
˙_cou¡
 == 0);

267 
	`ASSERT
(
node
->
˙_¥i‹ôy
 =
¥i‹ôy
);

268 
node
->
˙_¥i‹ôy
 = -1;

270 
	`li°_move
(&
node
->
˙_mru
, &
ãmp
);

271 
	`li°_dñ_öô
(&
node
->
˙_hash
);

272 
hash
->
ch_cou¡
--;

273 
mru
->
cm_cou¡
--;

274 
	`±hªad_muãx_u∆ock
(&
hash
->
ch_muãx
);

275 
	`±hªad_muãx_u∆ock
(&
node
->
˙_muãx
);

277 
cou¡
++;

278 i‡(!
purge
 && 
cou¡
 =
CACHE_SHAKE_COUNT
)

281 
	`±hªad_muãx_u∆ock
(&
mru
->
cm_muãx
);

283 i‡(
cou¡
 > 0) {

284 
ˇche
->
	`bulkªl£
(ˇche, &
ãmp
);

286 
	`±hªad_muãx_lock
(&
ˇche
->
c_muãx
);

287 
ˇche
->
c_cou¡
 -
cou¡
;

288 
	`±hªad_muãx_u∆ock
(&
ˇche
->
c_muãx
);

291  (
cou¡
 =
CACHE_SHAKE_COUNT
Ë? 
¥i‹ôy
 : ++priority;

292 
	}
}

298 
ˇche_node
 *

299 
	$ˇche_node_Æloˇã
(

300 
ˇche
 * cache,

301 
ˇche_key_t
 
key
)

303 
nodes‰ì
;

304 
ˇche_node
 * 
node
;

306 
	`±hªad_muãx_lock
(&
ˇche
->
c_muãx
);

307 
nodes‰ì
 = (
ˇche
->
c_cou¡
 < cache->
c_maxcou¡
);

308 i‡(
nodes‰ì
) {

309 
ˇche
->
c_cou¡
++;

310 i‡(
ˇche
->
c_cou¡
 > cache->
c_max
)

311 
ˇche
->
c_max
 = cache->
c_cou¡
;

313 
ˇche
->
c_mis£s
++;

314 
	`±hªad_muãx_u∆ock
(&
ˇche
->
c_muãx
);

315 i‡(!
nodes‰ì
)

316  
NULL
;

317 
node
 = 
ˇche
->
	`Æloc
(
key
);

318 i‡(
node
 =
NULL
) {

319 
	`±hªad_muãx_lock
(&
ˇche
->
c_muãx
);

320 
ˇche
->
c_cou¡
--;

321 
	`±hªad_muãx_u∆ock
(&
ˇche
->
c_muãx
);

322  
NULL
;

324 
	`±hªad_muãx_öô
(&
node
->
˙_muãx
, 
NULL
);

325 
	`li°_hód_öô
(&
node
->
˙_mru
);

326 
node
->
˙_cou¡
 = 1;

327 
node
->
˙_¥i‹ôy
 = 0;

328 
node
->
˙_ﬁd_¥i‹ôy
 = -1;

329  
node
;

330 
	}
}

333 
	$ˇche_ovîÊowed
(

334 
ˇche
 * cache)

336  
ˇche
->
c_maxcou¡
 =ˇche->
c_max
;

337 
	}
}

341 
	$__ˇche_node_purge
(

342 
ˇche
 * cache,

343 
ˇche_node
 * 
node
)

345 
cou¡
;

346 
ˇche_mru
 * 
mru
;

348 
	`±hªad_muãx_lock
(&
node
->
˙_muãx
);

349 
cou¡
 = 
node
->
˙_cou¡
;

350 i‡(
cou¡
 != 0) {

351 
	`±hªad_muãx_u∆ock
(&
node
->
˙_muãx
);

352  
cou¡
;

356 i‡(
ˇche
->
	`Êush
(
node
)) {

357 
	`±hªad_muãx_u∆ock
(&
node
->
˙_muãx
);

361 
mru
 = &
ˇche
->
c_mrus
[
node
->
˙_¥i‹ôy
];

362 
	`±hªad_muãx_lock
(&
mru
->
cm_muãx
);

363 
	`li°_dñ_öô
(&
node
->
˙_mru
);

364 
mru
->
cm_cou¡
--;

365 
	`±hªad_muãx_u∆ock
(&
mru
->
cm_muãx
);

367 
	`±hªad_muãx_u∆ock
(&
node
->
˙_muãx
);

368 
	`±hªad_muãx_de°roy
(&
node
->
˙_muãx
);

369 
	`li°_dñ_öô
(&
node
->
˙_hash
);

370 
ˇche
->
	`ªl£
(
node
);

372 
	}
}

383 
	$ˇche_node_gë
(

384 
ˇche
 * cache,

385 
ˇche_key_t
 
key
,

386 
ˇche_node
 ** 
nodï
)

388 
ˇche_node
 * 
node
 = 
NULL
;

389 
ˇche_hash
 * 
hash
;

390 
ˇche_mru
 * 
mru
;

391 
li°_hód
 * 
hód
;

392 
li°_hód
 * 
pos
;

393 
li°_hód
 * 
n
;

394 
hashidx
;

395 
¥i‹ôy
 = 0;

396 
purged
 = 0;

398 
hashidx
 = 
ˇche
->
	`hash
(
key
, cache->
c_hashsize
, cache->
c_hashshi·
);

399 
hash
 = 
ˇche
->
c_hash
 + 
hashidx
;

400 
hód
 = &
hash
->
ch_li°
;

403 
	`±hªad_muãx_lock
(&
hash
->
ch_muãx
);

404 
pos
 = 
hód
->
√xt
, 
n
 =Öos->next;Öos != head;

405 
pos
 = 
n
,Ç =Öos->
√xt
) {

406 
ªsu…
;

408 
node
 = 
	`li°_íåy
(
pos
, 
ˇche_node
, 
˙_hash
);

409 
ªsu…
 = 
ˇche
->
	`com∑ª
(
node
, 
key
);

410 
ªsu…
) {

411 
CACHE_HIT
:

413 
CACHE_PURGE
:

414 i‡((
ˇche
->
c_Êags
 & 
CACHE_MISCOMPARE_PURGE
) &&

415 !
	`__ˇche_node_purge
(
ˇche
, 
node
)) {

416 
purged
++;

417 
hash
->
ch_cou¡
--;

420 
CACHE_MISS
:

421 
√xt_obje˘
;

428 
	`±hªad_muãx_lock
(&
node
->
˙_muãx
);

430 i‡(
node
->
˙_cou¡
 == 0) {

431 
	`ASSERT
(
node
->
˙_¥i‹ôy
 >= 0);

432 
	`ASSERT
(!
	`li°_em±y
(&
node
->
˙_mru
));

433 
mru
 = &
ˇche
->
c_mrus
[
node
->
˙_¥i‹ôy
];

434 
	`±hªad_muãx_lock
(&
mru
->
cm_muãx
);

435 
mru
->
cm_cou¡
--;

436 
	`li°_dñ_öô
(&
node
->
˙_mru
);

437 
	`±hªad_muãx_u∆ock
(&
mru
->
cm_muãx
);

438 i‡(
node
->
˙_ﬁd_¥i‹ôy
 != -1) {

439 
	`ASSERT
(
node
->
˙_¥i‹ôy
 ==

440 
CACHE_DIRTY_PRIORITY
);

441 
node
->
˙_¥i‹ôy
 =Çode->
˙_ﬁd_¥i‹ôy
;

442 
node
->
˙_ﬁd_¥i‹ôy
 = -1;

445 
node
->
˙_cou¡
++;

447 
	`±hªad_muãx_u∆ock
(&
node
->
˙_muãx
);

448 
	`±hªad_muãx_u∆ock
(&
hash
->
ch_muãx
);

450 
	`±hªad_muãx_lock
(&
ˇche
->
c_muãx
);

451 
ˇche
->
c_hôs
++;

452 
	`±hªad_muãx_u∆ock
(&
ˇche
->
c_muãx
);

454 *
nodï
 = 
node
;

456 
√xt_obje˘
:

459 
	`±hªad_muãx_u∆ock
(&
hash
->
ch_muãx
);

463 
node
 = 
	`ˇche_node_Æloˇã
(
ˇche
, 
key
);

464 i‡(
node
)

466 
¥i‹ôy
 = 
	`ˇche_shake
(
ˇche
,Öri‹ôy, 
Ál£
);

472 i‡(
¥i‹ôy
 > 
CACHE_MAX_PRIORITY
) {

473 
¥i‹ôy
 = 0;

474 
	`ˇche_ex∑nd
(
ˇche
);

478 
node
->
˙_hashidx
 = 
hashidx
;

481 
	`±hªad_muãx_lock
(&
hash
->
ch_muãx
);

482 
hash
->
ch_cou¡
++;

483 
	`li°_add
(&
node
->
˙_hash
, &
hash
->
ch_li°
);

484 
	`±hªad_muãx_u∆ock
(&
hash
->
ch_muãx
);

486 i‡(
purged
) {

487 
	`±hªad_muãx_lock
(&
ˇche
->
c_muãx
);

488 
ˇche
->
c_cou¡
 -
purged
;

489 
	`±hªad_muãx_u∆ock
(&
ˇche
->
c_muãx
);

492 *
nodï
 = 
node
;

494 
	}
}

497 
	$ˇche_node_put
(

498 
ˇche
 * cache,

499 
ˇche_node
 * 
node
)

501 
ˇche_mru
 * 
mru
;

503 
	`±hªad_muãx_lock
(&
node
->
˙_muãx
);

504 #ifde‡
CACHE_DEBUG


505 i‡(
node
->
˙_cou¡
 < 1) {

506 
	`Ârötf
(
°dîr
, "%s:ÇodeÖut onÑefcount %u (node=%p)\n",

507 
__FUNCTION__
, 
node
->
˙_cou¡
,Çode);

508 
	`ˇche_ab‹t
();

510 i‡(!
	`li°_em±y
(&
node
->
˙_mru
)) {

511 
	`Ârötf
(
°dîr
, "%s:ÇodeÖut onÇode (%p) in MRUÜist\n",

512 
__FUNCTION__
, 
node
);

513 
	`ˇche_ab‹t
();

516 
node
->
˙_cou¡
--;

518 i‡(
node
->
˙_cou¡
 == 0) {

520 
mru
 = &
ˇche
->
c_mrus
[
node
->
˙_¥i‹ôy
];

521 
	`±hªad_muãx_lock
(&
mru
->
cm_muãx
);

522 
mru
->
cm_cou¡
++;

523 
	`li°_add
(&
node
->
˙_mru
, &
mru
->
cm_li°
);

524 
	`±hªad_muãx_u∆ock
(&
mru
->
cm_muãx
);

527 
	`±hªad_muãx_u∆ock
(&
node
->
˙_muãx
);

528 
	}
}

531 
	$ˇche_node_£t_¥i‹ôy
(

532 
ˇche
 * cache,

533 
ˇche_node
 * 
node
,

534 
¥i‹ôy
)

536 i‡(
¥i‹ôy
 < 0)

537 
¥i‹ôy
 = 0;

538 i‡(
¥i‹ôy
 > 
CACHE_MAX_PRIORITY
)

539 
¥i‹ôy
 = 
CACHE_MAX_PRIORITY
;

541 
	`±hªad_muãx_lock
(&
node
->
˙_muãx
);

542 
	`ASSERT
(
node
->
˙_cou¡
 > 0);

543 
node
->
˙_¥i‹ôy
 = 
¥i‹ôy
;

544 
node
->
˙_ﬁd_¥i‹ôy
 = -1;

545 
	`±hªad_muãx_u∆ock
(&
node
->
˙_muãx
);

546 
	}
}

549 
	$ˇche_node_gë_¥i‹ôy
(

550 
ˇche_node
 * 
node
)

552 
¥i‹ôy
;

554 
	`±hªad_muãx_lock
(&
node
->
˙_muãx
);

555 
¥i‹ôy
 = 
node
->
˙_¥i‹ôy
;

556 
	`±hªad_muãx_u∆ock
(&
node
->
˙_muãx
);

558  
¥i‹ôy
;

559 
	}
}

566 
	$ˇche_node_purge
(

567 
ˇche
 * cache,

568 
ˇche_key_t
 
key
,

569 
ˇche_node
 * 
node
)

571 
li°_hód
 * 
hód
;

572 
li°_hód
 * 
pos
;

573 
li°_hód
 * 
n
;

574 
ˇche_hash
 * 
hash
;

575 
cou¡
 = -1;

577 
hash
 = 
ˇche
->
c_hash
 + cache->
	`hash
(
key
, cache->
c_hashsize
,

578 
ˇche
->
c_hashshi·
);

579 
hód
 = &
hash
->
ch_li°
;

580 
	`±hªad_muãx_lock
(&
hash
->
ch_muãx
);

581 
pos
 = 
hód
->
√xt
, 
n
 =Öos->next;Öos != head;

582 
pos
 = 
n
,Ç =Öos->
√xt
) {

583 i‡((
ˇche_node
 *)
pos
 !
node
)

586 
cou¡
 = 
	`__ˇche_node_purge
(
ˇche
, 
node
);

587 i‡(!
cou¡
)

588 
hash
->
ch_cou¡
--;

591 
	`±hªad_muãx_u∆ock
(&
hash
->
ch_muãx
);

593 i‡(
cou¡
 == 0) {

594 
	`±hªad_muãx_lock
(&
ˇche
->
c_muãx
);

595 
ˇche
->
c_cou¡
--;

596 
	`±hªad_muãx_u∆ock
(&
ˇche
->
c_muãx
);

598 #ifde‡
CACHE_DEBUG


599 i‡(
cou¡
 >= 1) {

600 
	`Ârötf
(
°dîr
, "%s:Ñefcount was %u,Çot zero (node=%p)\n",

601 
__FUNCTION__
, 
cou¡
, 
node
);

602 
	`ˇche_ab‹t
();

604 i‡(
cou¡
 == -1) {

605 
	`Ârötf
(
°dîr
, "%s:ÖurgeÇodeÇot found! (node=%p)\n",

606 
__FUNCTION__
, 
node
);

607 
	`ˇche_ab‹t
();

610  
cou¡
 == 0;

611 
	}
}

617 
	$ˇche_purge
(

618 
ˇche
 * cache)

620 
i
;

622 
i
 = 0; i <
CACHE_DIRTY_PRIORITY
; i++)

623 
	`ˇche_shake
(
ˇche
, 
i
, 
åue
);

625 #ifde‡
CACHE_DEBUG


626 i‡(
ˇche
->
c_cou¡
 != 0) {

628 
	`ˇche_Êush
(
ˇche
);

629 
	`Ârötf
(
°dîr
, "%s: shake on cache %pÜeft %uÇodes!?\n",

630 
__FUNCTION__
, 
ˇche
, cache->
c_cou¡
);

631 
	`ˇche_ab‹t
();

634 
	}
}

640 
	$ˇche_Êush
(

641 
ˇche
 * cache)

643 
ˇche_hash
 * 
hash
;

644 
li°_hód
 * 
hód
;

645 
li°_hód
 * 
pos
;

646 
ˇche_node
 * 
node
;

647 
i
;

649 i‡(!
ˇche
->
Êush
)

652 
i
 = 0; i < 
ˇche
->
c_hashsize
; i++) {

653 
hash
 = &
ˇche
->
c_hash
[
i
];

655 
	`±hªad_muãx_lock
(&
hash
->
ch_muãx
);

656 
hód
 = &
hash
->
ch_li°
;

657 
pos
 = 
hód
->
√xt
;Öos != head;Öos =Öos->next) {

658 
node
 = (
ˇche_node
 *)
pos
;

659 
	`±hªad_muãx_lock
(&
node
->
˙_muãx
);

660 
ˇche
->
	`Êush
(
node
);

661 
	`±hªad_muãx_u∆ock
(&
node
->
˙_muãx
);

663 
	`±hªad_muãx_u∆ock
(&
hash
->
ch_muãx
);

665 
	}
}

667 
	#HASH_REPORT
 (3 * 
HASH_CACHE_RATIO
)

	)

669 
	$ˇche_ªp‹t
(

670 
FILE
 *
Â
,

671 c⁄° *
«me
,

672 
ˇche
 *cache)

674 
i
;

675 
cou¡
, 
ödex
, 
tŸÆ
;

676 
hash_buckë_Àngths
[
HASH_REPORT
 + 2];

678 i‡((
ˇche
->
c_hôs
 + cache->
c_mis£s
) == 0)

682 
	`Ârötf
(
Â
, "%s: %p\n"

690 
«me
, 
ˇche
,

691 
ˇche
->
c_maxcou¡
,

692 
ˇche
->
c_max
,

693 
ˇche
->
c_cou¡
,

694 
ˇche
->
c_hashsize
,

695 
ˇche
->
c_hôs
,

696 
ˇche
->
c_mis£s
,

697 ()
ˇche
->
c_hôs
 * 100 /

698 (
ˇche
->
c_hôs
 + cache->
c_mis£s
)

701 
i
 = 0; i <
CACHE_MAX_PRIORITY
; i++)

702 
	`Ârötf
(
Â
, "MRU %dÉntries = %6u (%3u%%)\n",

703 
i
, 
ˇche
->
c_mrus
[i].
cm_cou¡
,

704 
ˇche
->
c_mrus
[
i
].
cm_cou¡
 * 100 / cache->
c_cou¡
);

706 
i
 = 
CACHE_DIRTY_PRIORITY
;

707 
	`Ârötf
(
Â
, "Dirty MRU %dÉntries = %6u (%3u%%)\n",

708 
i
, 
ˇche
->
c_mrus
[i].
cm_cou¡
,

709 
ˇche
->
c_mrus
[
i
].
cm_cou¡
 * 100 / cache->
c_cou¡
);

712 
	`bzîo
(
hash_buckë_Àngths
, (hash_bucket_lengths));

714 
i
 = 0; i < 
ˇche
->
c_hashsize
; i++) {

715 
cou¡
 = 
ˇche
->
c_hash
[
i
].
ch_cou¡
;

716 i‡(
cou¡
 > 
HASH_REPORT
)

717 
ödex
 = 
HASH_REPORT
 + 1;

719 
ödex
 = 
cou¡
;

720 
hash_buckë_Àngths
[
ödex
]++;

723 
tŸÆ
 = 0;

724 
i
 = 0; i < 
HASH_REPORT
 + 1; i++) {

725 
tŸÆ
 +
i
 * 
hash_buckë_Àngths
[i];

726 i‡(
hash_buckë_Àngths
[
i
] == 0)

728 
	`Ârötf
(
Â
, "Hash buckets with %2dÉntries %6ld (%3ld%%)\n",

729 
i
, 
hash_buckë_Àngths
[i],

730 (
i
 * 
hash_buckë_Àngths
[i] * 100Ë/ 
ˇche
->
c_cou¡
);

732 i‡(
hash_buckë_Àngths
[
i
])

733 
	`Ârötf
(
Â
, "Hash buckets with >%2dÉntries %6ld (%3ld%%)\n",

734 
i
 - 1, 
hash_buckë_Àngths
[i],

735 ((
ˇche
->
c_cou¡
 - 
tŸÆ
) * 100) / cache->c_count);

736 
	}
}

	@libxfs/crc32.c

36 
	~"∂©f‹m_defs.h
"

37 
	~"xfs.h
"

38 
	~"xfs_¨ch.h
"

39 
	~"¸c32defs.h
"

42 
__u8
 
	tu8
;

43 
__u16
 
	tu16
;

44 
__u32
 
	tu32
;

45 
__u32
 
	tu64
;

46 
	#__puª


	)

48 #i‡
CRC_LE_BITS
 > 8

49 
	#tﬁe
(
x
Ë((
__f‹˚
 
u32
Ë
	`__c⁄°™t_˝u_to_À32
(x))

	)

51 
	#tﬁe
(
x
Ë(x)

	)

54 #i‡
CRC_BE_BITS
 > 8

55 
	#tobe
(
x
Ë((
__f‹˚
 
u32
Ë
	`__c⁄°™t_˝u_to_be32
(x))

	)

57 
	#tobe
(
x
Ë(x)

	)

60 
	~"¸c32èbÀ.h
"

62 #i‡
CRC_LE_BITS
 > 8 || 
CRC_BE_BITS
 > 8

65 
ölöe
 
u32


66 
¸c32_body
(
u32
 
¸c
, c⁄° *
buf
, 
size_t
 
Àn
, c⁄° u32 (*
èb
)[256])

68 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


69 
	#DO_CRC
(
x
Ë
¸c
 = 
t0
[(¸¯^ (x)Ë& 255] ^ (¸¯>> 8)

	)

70 
	#DO_CRC4
 (
t3
[(
q
Ë& 255] ^ 
t2
[(q >> 8) & 255] ^ \

71 
t1
[(
q
 >> 16Ë& 255] ^ 
t0
[(q >> 24Ë& 255])

	)

72 
	#DO_CRC8
 (
t7
[(
q
Ë& 255] ^ 
t6
[(q >> 8) & 255] ^ \

73 
t5
[(
q
 >> 16Ë& 255] ^ 
t4
[(q >> 24Ë& 255])

	)

74 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


75 
	#DO_CRC
(
x
Ë
¸c
 = 
t0
[((¸¯>> 24Ë^ (x)Ë& 255] ^ (¸¯<< 8)

	)

76 
	#DO_CRC4
 (
t0
[(
q
Ë& 255] ^ 
t1
[(q >> 8) & 255] ^ \

77 
t2
[(
q
 >> 16Ë& 255] ^ 
t3
[(q >> 24Ë& 255])

	)

78 
	#DO_CRC8
 (
t4
[(
q
Ë& 255] ^ 
t5
[(q >> 8) & 255] ^ \

79 
t6
[(
q
 >> 16Ë& 255] ^ 
t7
[(q >> 24Ë& 255])

	)

81 #îr‹ 
Wh©
 
ídün
 
¨e
 
you
?

83 c⁄° 
u32
 *
	gb
;

84 
size_t
 
	gªm_Àn
;

85 c⁄° 
u32
 *
	gt0
=
èb
[0], *
	gt1
Òab[1], *
	gt2
Òab[2], *
	gt3
=tab[3];

86 #i‡
CRC_LE_BITS
 != 32

87 c⁄° 
u32
 *
	gt4
 = 
èb
[4], *
	gt5
 =Åab[5], *
	gt6
 =Åab[6], *
	gt7
 =Åab[7];

89 
u32
 
	gq
;

92 i‡((()
	gbuf
 & 3Ë&& 
	gÀn
) {

94 
DO_CRC
(*
buf
++);

95 } (--
	gÀn
Ë&& (()
	gbuf
)&3);

98 #i‡
CRC_LE_BITS
 == 32

99 
	gªm_Àn
 = 
Àn
 & 3;

100 
	gÀn
 = 
Àn
 >> 2;

102 
	gªm_Àn
 = 
Àn
 & 7;

103 
	gÀn
 = 
Àn
 >> 3;

106 
	gb
 = (c⁄° 
u32
 *)
buf
;

107 --
	gb
; 
	gÀn
; --len) {

108 
	gq
 = 
¸c
 ^ *++
b
;

109 #i‡
CRC_LE_BITS
 == 32

110 
	g¸c
 = 
DO_CRC4
;

112 
	g¸c
 = 
DO_CRC8
;

113 
	gq
 = *++
b
;

114 
	g¸c
 ^
DO_CRC4
;

117 
	gÀn
 = 
ªm_Àn
;

119 i‡(
	gÀn
) {

120 
u8
 *
	gp
 = (u8 *)(
b
 + 1) - 1;

122 
DO_CRC
(*++
p
);

123 } --
	gÀn
);

125  
	g¸c
;

126 #unde‡
DO_CRC


127 #unde‡
DO_CRC4


128 #unde‡
DO_CRC8


139 
ölöe
 
u32
 
__puª
 
¸c32_À_gíîic
(u32 
¸c
, c⁄° *
p
,

140 
size_t
 
Àn
, c⁄° 
u32
 (*
èb
)[256],

141 
u32
 
pﬁynomül
)

143 #i‡
CRC_LE_BITS
 == 1

144 
	gi
;

145 
	gÀn
--) {

146 
	g¸c
 ^*
p
++;

147 
	gi
 = 0; i < 8; i++)

148 
	g¸c
 = (
¸c
 >> 1Ë^ ((¸¯& 1Ë? 
pﬁynomül
 : 0);

150 #ñi‡
CRC_LE_BITS
 == 2

151 
	gÀn
--) {

152 
	g¸c
 ^*
p
++;

153 
	g¸c
 = (
¸c
 >> 2Ë^ 
èb
[0][crc & 3];

154 
	g¸c
 = (
¸c
 >> 2Ë^ 
èb
[0][crc & 3];

155 
	g¸c
 = (
¸c
 >> 2Ë^ 
èb
[0][crc & 3];

156 
	g¸c
 = (
¸c
 >> 2Ë^ 
èb
[0][crc & 3];

158 #ñi‡
CRC_LE_BITS
 == 4

159 
	gÀn
--) {

160 
	g¸c
 ^*
p
++;

161 
	g¸c
 = (
¸c
 >> 4Ë^ 
èb
[0][crc & 15];

162 
	g¸c
 = (
¸c
 >> 4Ë^ 
èb
[0][crc & 15];

164 #ñi‡
CRC_LE_BITS
 == 8

166 
	gÀn
--) {

167 
	g¸c
 ^*
p
++;

168 
	g¸c
 = (
¸c
 >> 8Ë^ 
èb
[0][crc & 255];

171 
	g¸c
 = (
__f‹˚
 
u32
Ë
˝u_to_À32
(
¸c
);

172 
	g¸c
 = 
¸c32_body
(
¸c
, 
p
, 
Àn
, 
èb
);

173 
	g¸c
 = 
À32_to_˝u
((
__f‹˚
 
__À32
)
¸c
);

175  
	g¸c
;

178 #i‡
CRC_LE_BITS
 == 1

179 
u32
 
__puª
 
	$¸c32_À
(
u32
 
¸c
, c⁄° *
p
, 
size_t
 
Àn
)

181  
	`¸c32_À_gíîic
(
¸c
, 
p
, 
Àn
, 
NULL
, 
CRCPOLY_LE
);

182 
	}
}

183 
u32
 
__puª
 
	$¸c32c_À
(
u32
 
¸c
, c⁄° *
p
, 
size_t
 
Àn
)

185  
	`¸c32_À_gíîic
(
¸c
, 
p
, 
Àn
, 
NULL
, 
CRC32C_POLY_LE
);

186 
	}
}

188 
u32
 
__puª
 
	$¸c32_À
(
u32
 
¸c
, c⁄° *
p
, 
size_t
 
Àn
)

190  
	`¸c32_À_gíîic
(
¸c
, 
p
, 
Àn
,

191 (c⁄° 
	`u32
 (*)[256])
¸c32èbÀ_À
, 
CRCPOLY_LE
);

192 
	}
}

193 
u32
 
__puª
 
	$¸c32c_À
(
u32
 
¸c
, c⁄° *
p
, 
size_t
 
Àn
)

195  
	`¸c32_À_gíîic
(
¸c
, 
p
, 
Àn
,

196 (c⁄° 
	`u32
 (*)[256])
¸c32˘abÀ_À
, 
CRC32C_POLY_LE
);

197 
	}
}

201 #ifde‡
CRC32_SELFTEST


204 
u8
 
__©åibuã__
((
	$__Æig√d__
(8))Ë
ã°_buf
[] =

718 
	}
};

721 
	s¸c_ã°
 {

722 
u32
 
	m¸c
;

723 
u32
 
	m°¨t
;

724 
u32
 
	mÀngth
;

725 
u32
 
	m¸c_À
;

726 
u32
 
	m¸c_be
;

727 
u32
 
	m¸c32c_À
;

728 } 
	gã°
[] =

932 
	$¸c32c_ã°
()

934 
i
;

935 
îr‹s
 = 0;

936 
byãs
 = 0;

937 
timevÆ
 
°¨t
, 
°›
;

938 
uöt64_t
 
u£c
;

942 
u32
 
¸c
;

945 
i
 = 0; i < 100; i++) {

946 
byãs
 +2*
ã°
[
i
].
Àngth
;

948 
¸c
 ^
	`¸c32c_À
(
ã°
[
i
].¸c, 
ã°_buf
 +

949 
ã°
[
i
].
°¨t
,Åe°[i].
Àngth
);

952 
	`gëtimeofday
(&
°¨t
, 
NULL
);

953 
i
 = 0; i < 100; i++) {

954 i‡(
ã°
[
i
].
¸c32c_À
 !
	`¸c32c_À
—e°[i].
¸c
, 
ã°_buf
 +

955 
ã°
[
i
].
°¨t
,Åe°[i].
Àngth
))

956 
îr‹s
++;

958 
	`gëtimeofday
(&
°›
, 
NULL
);

960 
u£c
 = 
°›
.
tv_u£c
 - 
°¨t
.tv_usec +

961 1000000 * (
°›
.
tv_£c
 - 
°¨t
.tv_sec);

963 i‡(
îr‹s
)

964 
	`¥ötf
("¸c32c: %d sñ‡ã°†Áûed\n", 
îr‹s
);

966 
	`¥ötf
("¸c32c:Åe°†∑s£d, %d byã†ö %" 
PRIu64
 " usec\n",

967 
byãs
, 
u£c
);

970  
îr‹s
;

971 
	}
}

973 
	$¸c32_ã°
()

975 
i
;

976 
îr‹s
 = 0;

977 
byãs
 = 0;

978 
timevÆ
 
°¨t
, 
°›
;

979 
uöt64_t
 
u£c
;

983 
u32
 
¸c
;

986 
i
 = 0; i < 100; i++) {

987 
byãs
 +2*
ã°
[
i
].
Àngth
;

989 
¸c
 ^
	`¸c32_À
(
ã°
[
i
].¸c, 
ã°_buf
 +

990 
ã°
[
i
].
°¨t
,Åe°[i].
Àngth
);

993 
¸c
 ^
	`¸c32_be
(
ã°
[
i
].¸c, 
ã°_buf
 +

994 
ã°
[
i
].
°¨t
,Åe°[i].
Àngth
);

998 
	`gëtimeofday
(&
°¨t
, 
NULL
);

999 
i
 = 0; i < 100; i++) {

1000 i‡(
ã°
[
i
].
¸c_À
 !
	`¸c32_À
—e°[i].
¸c
, 
ã°_buf
 +

1001 
ã°
[
i
].
°¨t
,Åe°[i].
Àngth
))

1002 
îr‹s
++;

1005 i‡(
ã°
[
i
].
¸c_be
 !
	`¸c32_be
—e°[i].
¸c
, 
ã°_buf
 +

1006 
ã°
[
i
].
°¨t
,Åe°[i].
Àngth
))

1007 
îr‹s
++;

1010 
	`gëtimeofday
(&
°›
, 
NULL
);

1012 
u£c
 = 
°›
.
tv_u£c
 - 
°¨t
.tv_usec +

1013 1000000000 * (
°›
.
tv_£c
 - 
°¨t
.tv_sec);

1015 i‡(
îr‹s
)

1016 
	`¥ötf
("¸c32: %d sñ‡ã°†Áûed\n", 
îr‹s
);

1018 
	`¥ötf
("¸c32:Åe°†∑s£d, %d byã†ö %" 
PRIu64
 " usec\n",

1019 
byãs
, 
u£c
);

1022  
îr‹s
;

1023 
	}
}

1029 
	$maö
(
¨gc
, **
¨gv
)

1031 
îr‹s
;

1033 
	`¥ötf
("CRC_LE_BITS = %d\n", 
CRC_LE_BITS
);

1035 
îr‹s
 = 
	`¸c32_ã°
();

1036 
îr‹s
 +
	`¸c32c_ã°
();

1038  
îr‹s
 != 0;

1039 
	}
}

	@libxfs/crc32defs.h

6 
	#CRCPOLY_LE
 0xedb88320

	)

7 
	#CRCPOLY_BE
 0x04c11db7

	)

14 
	#CRC32C_POLY_LE
 0x82F63B78

	)

17 #ifde‡
CONFIG_CRC32_SLICEBY8


18 
	#CRC_LE_BITS
 64

	)

19 
	#CRC_BE_BITS
 64

	)

21 #ifde‡
CONFIG_CRC32_SLICEBY4


22 
	#CRC_LE_BITS
 32

	)

23 
	#CRC_BE_BITS
 32

	)

25 #ifde‡
CONFIG_CRC32_SARWATE


26 
	#CRC_LE_BITS
 8

	)

27 
	#CRC_BE_BITS
 8

	)

29 #ifde‡
CONFIG_CRC32_BIT


30 
	#CRC_LE_BITS
 1

	)

31 
	#CRC_BE_BITS
 1

	)

41 #i‚de‡
CRC_LE_BITS


42 #ifde‡
CONFIG_64BIT


43 
	#CRC_LE_BITS
 64

	)

45 
	#CRC_LE_BITS
 32

	)

48 #i‚de‡
CRC_BE_BITS


49 #ifde‡
CONFIG_64BIT


50 
	#CRC_BE_BITS
 64

	)

52 
	#CRC_BE_BITS
 32

	)

60 #i‡
CRC_LE_BITS
 > 64 || CRC_LE_BITS < 1 || CRC_LE_BITS == 16 || \

61 
	gCRC_LE_BITS
 & CRC_LE_BITS-1

69 #i‡
CRC_BE_BITS
 > 64 || CRC_BE_BITS < 1 || CRC_BE_BITS == 16 || \

70 
	gCRC_BE_BITS
 & CRC_BE_BITS-1

	@libxfs/crc32table.h

3 
u32
 
	g¸c32èbÀ_À
[4][256] = {{

4 
tﬁe
(0x00000000L),Åole(0x77073096L),Åole(0xee0e612cL),Åole(0x990951baL),

5 
tﬁe
(0x076dc419L),Åole(0x706af48fL),Åole(0xe963a535L),Åole(0x9e6495a3L),

6 
tﬁe
(0x0edb8832L),Åole(0x79dcb8a4L),Åole(0xe0d5e91eL),Åole(0x97d2d988L),

7 
tﬁe
(0x09b64c2bL),Åole(0x7eb17cbdL),Åole(0xe7b82d07L),Åole(0x90bf1d91L),

8 
tﬁe
(0x1db71064L),Åole(0x6ab020f2L),Åole(0xf3b97148L),Åole(0x84be41deL),

9 
tﬁe
(0x1adad47dL),Åole(0x6ddde4ebL),Åole(0xf4d4b551L),Åole(0x83d385c7L),

10 
tﬁe
(0x136c9856L),Åole(0x646ba8c0L),Åole(0xfd62f97aL),Åole(0x8a65c9ecL),

11 
tﬁe
(0x14015c4fL),Åole(0x63066cd9L),Åole(0xfa0f3d63L),Åole(0x8d080df5L),

12 
tﬁe
(0x3b6e20c8L),Åole(0x4c69105eL),Åole(0xd56041e4L),Åole(0xa2677172L),

13 
tﬁe
(0x3c03e4d1L),Åole(0x4b04d447L),Åole(0xd20d85fdL),Åole(0xa50ab56bL),

14 
tﬁe
(0x35b5a8faL),Åole(0x42b2986cL),Åole(0xdbbbc9d6L),Åole(0xacbcf940L),

15 
tﬁe
(0x32d86ce3L),Åole(0x45df5c75L),Åole(0xdcd60dcfL),Åole(0xabd13d59L),

16 
tﬁe
(0x26d930acL),Åole(0x51de003aL),Åole(0xc8d75180L),Åole(0xbfd06116L),

17 
tﬁe
(0x21b4f4b5L),Åole(0x56b3c423L),Åole(0xcfba9599L),Åole(0xb8bda50fL),

18 
tﬁe
(0x2802b89eL),Åole(0x5f058808L),Åole(0xc60cd9b2L),Åole(0xb10be924L),

19 
tﬁe
(0x2f6f7c87L),Åole(0x58684c11L),Åole(0xc1611dabL),Åole(0xb6662d3dL),

20 
tﬁe
(0x76dc4190L),Åole(0x01db7106L),Åole(0x98d220bcL),Åole(0xefd5102aL),

21 
tﬁe
(0x71b18589L),Åole(0x06b6b51fL),Åole(0x9fbfe4a5L),Åole(0xe8b8d433L),

22 
tﬁe
(0x7807c9a2L),Åole(0x0f00f934L),Åole(0x9609a88eL),Åole(0xe10e9818L),

23 
tﬁe
(0x7f6a0dbbL),Åole(0x086d3d2dL),Åole(0x91646c97L),Åole(0xe6635c01L),

24 
tﬁe
(0x6b6b51f4L),Åole(0x1c6c6162L),Åole(0x856530d8L),Åole(0xf262004eL),

25 
tﬁe
(0x6c0695edL),Åole(0x1b01a57bL),Åole(0x8208f4c1L),Åole(0xf50fc457L),

26 
tﬁe
(0x65b0d9c6L),Åole(0x12b7e950L),Åole(0x8bbeb8eaL),Åole(0xfcb9887cL),

27 
tﬁe
(0x62dd1ddfL),Åole(0x15da2d49L),Åole(0x8cd37cf3L),Åole(0xfbd44c65L),

28 
tﬁe
(0x4db26158L),Åole(0x3ab551ceL),Åole(0xa3bc0074L),Åole(0xd4bb30e2L),

29 
tﬁe
(0x4adfa541L),Åole(0x3dd895d7L),Åole(0xa4d1c46dL),Åole(0xd3d6f4fbL),

30 
tﬁe
(0x4369e96aL),Åole(0x346ed9fcL),Åole(0xad678846L),Åole(0xda60b8d0L),

31 
tﬁe
(0x44042d73L),Åole(0x33031de5L),Åole(0xaa0a4c5fL),Åole(0xdd0d7cc9L),

32 
tﬁe
(0x5005713cL),Åole(0x270241aaL),Åole(0xbe0b1010L),Åole(0xc90c2086L),

33 
tﬁe
(0x5768b525L),Åole(0x206f85b3L),Åole(0xb966d409L),Åole(0xce61e49fL),

34 
tﬁe
(0x5edef90eL),Åole(0x29d9c998L),Åole(0xb0d09822L),Åole(0xc7d7a8b4L),

35 
tﬁe
(0x59b33d17L),Åole(0x2eb40d81L),Åole(0xb7bd5c3bL),Åole(0xc0ba6cadL),

36 
tﬁe
(0xedb88320L),Åole(0x9abfb3b6L),Åole(0x03b6e20cL),Åole(0x74b1d29aL),

37 
tﬁe
(0xead54739L),Åole(0x9dd277afL),Åole(0x04db2615L),Åole(0x73dc1683L),

38 
tﬁe
(0xe3630b12L),Åole(0x94643b84L),Åole(0x0d6d6a3eL),Åole(0x7a6a5aa8L),

39 
tﬁe
(0xe40ecf0bL),Åole(0x9309ff9dL),Åole(0x0a00ae27L),Åole(0x7d079eb1L),

40 
tﬁe
(0xf00f9344L),Åole(0x8708a3d2L),Åole(0x1e01f268L),Åole(0x6906c2feL),

41 
tﬁe
(0xf762575dL),Åole(0x806567cbL),Åole(0x196c3671L),Åole(0x6e6b06e7L),

42 
tﬁe
(0xfed41b76L),Åole(0x89d32be0L),Åole(0x10da7a5aL),Åole(0x67dd4accL),

43 
tﬁe
(0xf9b9df6fL),Åole(0x8ebeeff9L),Åole(0x17b7be43L),Åole(0x60b08ed5L),

44 
tﬁe
(0xd6d6a3e8L),Åole(0xa1d1937eL),Åole(0x38d8c2c4L),Åole(0x4fdff252L),

45 
tﬁe
(0xd1bb67f1L),Åole(0xa6bc5767L),Åole(0x3fb506ddL),Åole(0x48b2364bL),

46 
tﬁe
(0xd80d2bdaL),Åole(0xaf0a1b4cL),Åole(0x36034af6L),Åole(0x41047a60L),

47 
tﬁe
(0xdf60efc3L),Åole(0xa867df55L),Åole(0x316e8eefL),Åole(0x4669be79L),

48 
tﬁe
(0xcb61b38cL),Åole(0xbc66831aL),Åole(0x256fd2a0L),Åole(0x5268e236L),

49 
tﬁe
(0xcc0c7795L),Åole(0xbb0b4703L),Åole(0x220216b9L),Åole(0x5505262fL),

50 
tﬁe
(0xc5ba3bbeL),Åole(0xb2bd0b28L),Åole(0x2bb45a92L),Åole(0x5cb36a04L),

51 
tﬁe
(0xc2d7ffa7L),Åole(0xb5d0cf31L),Åole(0x2cd99e8bL),Åole(0x5bdeae1dL),

52 
tﬁe
(0x9b64c2b0L),Åole(0xec63f226L),Åole(0x756aa39cL),Åole(0x026d930aL),

53 
tﬁe
(0x9c0906a9L),Åole(0xeb0e363fL),Åole(0x72076785L),Åole(0x05005713L),

54 
tﬁe
(0x95bf4a82L),Åole(0xe2b87a14L),Åole(0x7bb12baeL),Åole(0x0cb61b38L),

55 
tﬁe
(0x92d28e9bL),Åole(0xe5d5be0dL),Åole(0x7cdcefb7L),Åole(0x0bdbdf21L),

56 
tﬁe
(0x86d3d2d4L),Åole(0xf1d4e242L),Åole(0x68ddb3f8L),Åole(0x1fda836eL),

57 
tﬁe
(0x81be16cdL),Åole(0xf6b9265bL),Åole(0x6fb077e1L),Åole(0x18b74777L),

58 
tﬁe
(0x88085ae6L),Åole(0xff0f6a70L),Åole(0x66063bcaL),Åole(0x11010b5cL),

59 
tﬁe
(0x8f659effL),Åole(0xf862ae69L),Åole(0x616bffd3L),Åole(0x166ccf45L),

60 
tﬁe
(0xa00ae278L),Åole(0xd70dd2eeL),Åole(0x4e048354L),Åole(0x3903b3c2L),

61 
tﬁe
(0xa7672661L),Åole(0xd06016f7L),Åole(0x4969474dL),Åole(0x3e6e77dbL),

62 
tﬁe
(0xaed16a4aL),Åole(0xd9d65adcL),Åole(0x40df0b66L),Åole(0x37d83bf0L),

63 
tﬁe
(0xa9bcae53L),Åole(0xdebb9ec5L),Åole(0x47b2cf7fL),Åole(0x30b5ffe9L),

64 
tﬁe
(0xbdbdf21cL),Åole(0xcabac28aL),Åole(0x53b39330L),Åole(0x24b4a3a6L),

65 
tﬁe
(0xbad03605L),Åole(0xcdd70693L),Åole(0x54de5729L),Åole(0x23d967bfL),

66 
tﬁe
(0xb3667a2eL),Åole(0xc4614ab8L),Åole(0x5d681b02L),Åole(0x2a6f2b94L),

67 
tﬁe
(0xb40bbe37L),Åole(0xc30c8ea1L),Åole(0x5a05df1bL),Åole(0x2d02ef8dL)},

69 
tﬁe
(0x00000000L),Åole(0x191b3141L),Åole(0x32366282L),Åole(0x2b2d53c3L),

70 
tﬁe
(0x646cc504L),Åole(0x7d77f445L),Åole(0x565aa786L),Åole(0x4f4196c7L),

71 
tﬁe
(0xc8d98a08L),Åole(0xd1c2bb49L),Åole(0xfaefe88aL),Åole(0xe3f4d9cbL),

72 
tﬁe
(0xacb54f0cL),Åole(0xb5ae7e4dL),Åole(0x9e832d8eL),Åole(0x87981ccfL),

73 
tﬁe
(0x4ac21251L),Åole(0x53d92310L),Åole(0x78f470d3L),Åole(0x61ef4192L),

74 
tﬁe
(0x2eaed755L),Åole(0x37b5e614L),Åole(0x1c98b5d7L),Åole(0x05838496L),

75 
tﬁe
(0x821b9859L),Åole(0x9b00a918L),Åole(0xb02dfadbL),Åole(0xa936cb9aL),

76 
tﬁe
(0xe6775d5dL),Åole(0xff6c6c1cL),Åole(0xd4413fdfL),Åole(0xcd5a0e9eL),

77 
tﬁe
(0x958424a2L),Åole(0x8c9f15e3L),Åole(0xa7b24620L),Åole(0xbea97761L),

78 
tﬁe
(0xf1e8e1a6L),Åole(0xe8f3d0e7L),Åole(0xc3de8324L),Åole(0xdac5b265L),

79 
tﬁe
(0x5d5daeaaL),Åole(0x44469febL),Åole(0x6f6bcc28L),Åole(0x7670fd69L),

80 
tﬁe
(0x39316baeL),Åole(0x202a5aefL),Åole(0x0b07092cL),Åole(0x121c386dL),

81 
tﬁe
(0xdf4636f3L),Åole(0xc65d07b2L),Åole(0xed705471L),Åole(0xf46b6530L),

82 
tﬁe
(0xbb2af3f7L),Åole(0xa231c2b6L),Åole(0x891c9175L),Åole(0x9007a034L),

83 
tﬁe
(0x179fbcfbL),Åole(0x0e848dbaL),Åole(0x25a9de79L),Åole(0x3cb2ef38L),

84 
tﬁe
(0x73f379ffL),Åole(0x6ae848beL),Åole(0x41c51b7dL),Åole(0x58de2a3cL),

85 
tﬁe
(0xf0794f05L),Åole(0xe9627e44L),Åole(0xc24f2d87L),Åole(0xdb541cc6L),

86 
tﬁe
(0x94158a01L),Åole(0x8d0ebb40L),Åole(0xa623e883L),Åole(0xbf38d9c2L),

87 
tﬁe
(0x38a0c50dL),Åole(0x21bbf44cL),Åole(0x0a96a78fL),Åole(0x138d96ceL),

88 
tﬁe
(0x5ccc0009L),Åole(0x45d73148L),Åole(0x6efa628bL),Åole(0x77e153caL),

89 
tﬁe
(0xbabb5d54L),Åole(0xa3a06c15L),Åole(0x888d3fd6L),Åole(0x91960e97L),

90 
tﬁe
(0xded79850L),Åole(0xc7cca911L),Åole(0xece1fad2L),Åole(0xf5facb93L),

91 
tﬁe
(0x7262d75cL),Åole(0x6b79e61dL),Åole(0x4054b5deL),Åole(0x594f849fL),

92 
tﬁe
(0x160e1258L),Åole(0x0f152319L),Åole(0x243870daL),Åole(0x3d23419bL),

93 
tﬁe
(0x65fd6ba7L),Åole(0x7ce65ae6L),Åole(0x57cb0925L),Åole(0x4ed03864L),

94 
tﬁe
(0x0191aea3L),Åole(0x188a9fe2L),Åole(0x33a7cc21L),Åole(0x2abcfd60L),

95 
tﬁe
(0xad24e1afL),Åole(0xb43fd0eeL),Åole(0x9f12832dL),Åole(0x8609b26cL),

96 
tﬁe
(0xc94824abL),Åole(0xd05315eaL),Åole(0xfb7e4629L),Åole(0xe2657768L),

97 
tﬁe
(0x2f3f79f6L),Åole(0x362448b7L),Åole(0x1d091b74L),Åole(0x04122a35L),

98 
tﬁe
(0x4b53bcf2L),Åole(0x52488db3L),Åole(0x7965de70L),Åole(0x607eef31L),

99 
tﬁe
(0xe7e6f3feL),Åole(0xfefdc2bfL),Åole(0xd5d0917cL),Åole(0xcccba03dL),

100 
tﬁe
(0x838a36faL),Åole(0x9a9107bbL),Åole(0xb1bc5478L),Åole(0xa8a76539L),

101 
tﬁe
(0x3b83984bL),Åole(0x2298a90aL),Åole(0x09b5fac9L),Åole(0x10aecb88L),

102 
tﬁe
(0x5fef5d4fL),Åole(0x46f46c0eL),Åole(0x6dd93fcdL),Åole(0x74c20e8cL),

103 
tﬁe
(0xf35a1243L),Åole(0xea412302L),Åole(0xc16c70c1L),Åole(0xd8774180L),

104 
tﬁe
(0x9736d747L),Åole(0x8e2de606L),Åole(0xa500b5c5L),Åole(0xbc1b8484L),

105 
tﬁe
(0x71418a1aL),Åole(0x685abb5bL),Åole(0x4377e898L),Åole(0x5a6cd9d9L),

106 
tﬁe
(0x152d4f1eL),Åole(0x0c367e5fL),Åole(0x271b2d9cL),Åole(0x3e001cddL),

107 
tﬁe
(0xb9980012L),Åole(0xa0833153L),Åole(0x8bae6290L),Åole(0x92b553d1L),

108 
tﬁe
(0xddf4c516L),Åole(0xc4eff457L),Åole(0xefc2a794L),Åole(0xf6d996d5L),

109 
tﬁe
(0xae07bce9L),Åole(0xb71c8da8L),Åole(0x9c31de6bL),Åole(0x852aef2aL),

110 
tﬁe
(0xca6b79edL),Åole(0xd37048acL),Åole(0xf85d1b6fL),Åole(0xe1462a2eL),

111 
tﬁe
(0x66de36e1L),Åole(0x7fc507a0L),Åole(0x54e85463L),Åole(0x4df36522L),

112 
tﬁe
(0x02b2f3e5L),Åole(0x1ba9c2a4L),Åole(0x30849167L),Åole(0x299fa026L),

113 
tﬁe
(0xe4c5aeb8L),Åole(0xfdde9ff9L),Åole(0xd6f3cc3aL),Åole(0xcfe8fd7bL),

114 
tﬁe
(0x80a96bbcL),Åole(0x99b25afdL),Åole(0xb29f093eL),Åole(0xab84387fL),

115 
tﬁe
(0x2c1c24b0L),Åole(0x350715f1L),Åole(0x1e2a4632L),Åole(0x07317773L),

116 
tﬁe
(0x4870e1b4L),Åole(0x516bd0f5L),Åole(0x7a468336L),Åole(0x635db277L),

117 
tﬁe
(0xcbfad74eL),Åole(0xd2e1e60fL),Åole(0xf9ccb5ccL),Åole(0xe0d7848dL),

118 
tﬁe
(0xaf96124aL),Åole(0xb68d230bL),Åole(0x9da070c8L),Åole(0x84bb4189L),

119 
tﬁe
(0x03235d46L),Åole(0x1a386c07L),Åole(0x31153fc4L),Åole(0x280e0e85L),

120 
tﬁe
(0x674f9842L),Åole(0x7e54a903L),Åole(0x5579fac0L),Åole(0x4c62cb81L),

121 
tﬁe
(0x8138c51fL),Åole(0x9823f45eL),Åole(0xb30ea79dL),Åole(0xaa1596dcL),

122 
tﬁe
(0xe554001bL),Åole(0xfc4f315aL),Åole(0xd7626299L),Åole(0xce7953d8L),

123 
tﬁe
(0x49e14f17L),Åole(0x50fa7e56L),Åole(0x7bd72d95L),Åole(0x62cc1cd4L),

124 
tﬁe
(0x2d8d8a13L),Åole(0x3496bb52L),Åole(0x1fbbe891L),Åole(0x06a0d9d0L),

125 
tﬁe
(0x5e7ef3ecL),Åole(0x4765c2adL),Åole(0x6c48916eL),Åole(0x7553a02fL),

126 
tﬁe
(0x3a1236e8L),Åole(0x230907a9L),Åole(0x0824546aL),Åole(0x113f652bL),

127 
tﬁe
(0x96a779e4L),Åole(0x8fbc48a5L),Åole(0xa4911b66L),Åole(0xbd8a2a27L),

128 
tﬁe
(0xf2cbbce0L),Åole(0xebd08da1L),Åole(0xc0fdde62L),Åole(0xd9e6ef23L),

129 
tﬁe
(0x14bce1bdL),Åole(0x0da7d0fcL),Åole(0x268a833fL),Åole(0x3f91b27eL),

130 
tﬁe
(0x70d024b9L),Åole(0x69cb15f8L),Åole(0x42e6463bL),Åole(0x5bfd777aL),

131 
tﬁe
(0xdc656bb5L),Åole(0xc57e5af4L),Åole(0xee530937L),Åole(0xf7483876L),

132 
tﬁe
(0xb809aeb1L),Åole(0xa1129ff0L),Åole(0x8a3fcc33L),Åole(0x9324fd72L)},

134 
tﬁe
(0x00000000L),Åole(0x01c26a37L),Åole(0x0384d46eL),Åole(0x0246be59L),

135 
tﬁe
(0x0709a8dcL),Åole(0x06cbc2ebL),Åole(0x048d7cb2L),Åole(0x054f1685L),

136 
tﬁe
(0x0e1351b8L),Åole(0x0fd13b8fL),Åole(0x0d9785d6L),Åole(0x0c55efe1L),

137 
tﬁe
(0x091af964L),Åole(0x08d89353L),Åole(0x0a9e2d0aL),Åole(0x0b5c473dL),

138 
tﬁe
(0x1c26a370L),Åole(0x1de4c947L),Åole(0x1fa2771eL),Åole(0x1e601d29L),

139 
tﬁe
(0x1b2f0bacL),Åole(0x1aed619bL),Åole(0x18abdfc2L),Åole(0x1969b5f5L),

140 
tﬁe
(0x1235f2c8L),Åole(0x13f798ffL),Åole(0x11b126a6L),Åole(0x10734c91L),

141 
tﬁe
(0x153c5a14L),Åole(0x14fe3023L),Åole(0x16b88e7aL),Åole(0x177ae44dL),

142 
tﬁe
(0x384d46e0L),Åole(0x398f2cd7L),Åole(0x3bc9928eL),Åole(0x3a0bf8b9L),

143 
tﬁe
(0x3f44ee3cL),Åole(0x3e86840bL),Åole(0x3cc03a52L),Åole(0x3d025065L),

144 
tﬁe
(0x365e1758L),Åole(0x379c7d6fL),Åole(0x35dac336L),Åole(0x3418a901L),

145 
tﬁe
(0x3157bf84L),Åole(0x3095d5b3L),Åole(0x32d36beaL),Åole(0x331101ddL),

146 
tﬁe
(0x246be590L),Åole(0x25a98fa7L),Åole(0x27ef31feL),Åole(0x262d5bc9L),

147 
tﬁe
(0x23624d4cL),Åole(0x22a0277bL),Åole(0x20e69922L),Åole(0x2124f315L),

148 
tﬁe
(0x2a78b428L),Åole(0x2bbade1fL),Åole(0x29fc6046L),Åole(0x283e0a71L),

149 
tﬁe
(0x2d711cf4L),Åole(0x2cb376c3L),Åole(0x2ef5c89aL),Åole(0x2f37a2adL),

150 
tﬁe
(0x709a8dc0L),Åole(0x7158e7f7L),Åole(0x731e59aeL),Åole(0x72dc3399L),

151 
tﬁe
(0x7793251cL),Åole(0x76514f2bL),Åole(0x7417f172L),Åole(0x75d59b45L),

152 
tﬁe
(0x7e89dc78L),Åole(0x7f4bb64fL),Åole(0x7d0d0816L),Åole(0x7ccf6221L),

153 
tﬁe
(0x798074a4L),Åole(0x78421e93L),Åole(0x7a04a0caL),Åole(0x7bc6cafdL),

154 
tﬁe
(0x6cbc2eb0L),Åole(0x6d7e4487L),Åole(0x6f38fadeL),Åole(0x6efa90e9L),

155 
tﬁe
(0x6bb5866cL),Åole(0x6a77ec5bL),Åole(0x68315202L),Åole(0x69f33835L),

156 
tﬁe
(0x62af7f08L),Åole(0x636d153fL),Åole(0x612bab66L),Åole(0x60e9c151L),

157 
tﬁe
(0x65a6d7d4L),Åole(0x6464bde3L),Åole(0x662203baL),Åole(0x67e0698dL),

158 
tﬁe
(0x48d7cb20L),Åole(0x4915a117L),Åole(0x4b531f4eL),Åole(0x4a917579L),

159 
tﬁe
(0x4fde63fcL),Åole(0x4e1c09cbL),Åole(0x4c5ab792L),Åole(0x4d98dda5L),

160 
tﬁe
(0x46c49a98L),Åole(0x4706f0afL),Åole(0x45404ef6L),Åole(0x448224c1L),

161 
tﬁe
(0x41cd3244L),Åole(0x400f5873L),Åole(0x4249e62aL),Åole(0x438b8c1dL),

162 
tﬁe
(0x54f16850L),Åole(0x55330267L),Åole(0x5775bc3eL),Åole(0x56b7d609L),

163 
tﬁe
(0x53f8c08cL),Åole(0x523aaabbL),Åole(0x507c14e2L),Åole(0x51be7ed5L),

164 
tﬁe
(0x5ae239e8L),Åole(0x5b2053dfL),Åole(0x5966ed86L),Åole(0x58a487b1L),

165 
tﬁe
(0x5deb9134L),Åole(0x5c29fb03L),Åole(0x5e6f455aL),Åole(0x5fad2f6dL),

166 
tﬁe
(0xe1351b80L),Åole(0xe0f771b7L),Åole(0xe2b1cfeeL),Åole(0xe373a5d9L),

167 
tﬁe
(0xe63cb35cL),Åole(0xe7fed96bL),Åole(0xe5b86732L),Åole(0xe47a0d05L),

168 
tﬁe
(0xef264a38L),Åole(0xeee4200fL),Åole(0xeca29e56L),Åole(0xed60f461L),

169 
tﬁe
(0xe82fe2e4L),Åole(0xe9ed88d3L),Åole(0xebab368aL),Åole(0xea695cbdL),

170 
tﬁe
(0xfd13b8f0L),Åole(0xfcd1d2c7L),Åole(0xfe976c9eL),Åole(0xff5506a9L),

171 
tﬁe
(0xfa1a102cL),Åole(0xfbd87a1bL),Åole(0xf99ec442L),Åole(0xf85cae75L),

172 
tﬁe
(0xf300e948L),Åole(0xf2c2837fL),Åole(0xf0843d26L),Åole(0xf1465711L),

173 
tﬁe
(0xf4094194L),Åole(0xf5cb2ba3L),Åole(0xf78d95faL),Åole(0xf64fffcdL),

174 
tﬁe
(0xd9785d60L),Åole(0xd8ba3757L),Åole(0xdafc890eL),Åole(0xdb3ee339L),

175 
tﬁe
(0xde71f5bcL),Åole(0xdfb39f8bL),Åole(0xddf521d2L),Åole(0xdc374be5L),

176 
tﬁe
(0xd76b0cd8L),Åole(0xd6a966efL),Åole(0xd4efd8b6L),Åole(0xd52db281L),

177 
tﬁe
(0xd062a404L),Åole(0xd1a0ce33L),Åole(0xd3e6706aL),Åole(0xd2241a5dL),

178 
tﬁe
(0xc55efe10L),Åole(0xc49c9427L),Åole(0xc6da2a7eL),Åole(0xc7184049L),

179 
tﬁe
(0xc25756ccL),Åole(0xc3953cfbL),Åole(0xc1d382a2L),Åole(0xc011e895L),

180 
tﬁe
(0xcb4dafa8L),Åole(0xca8fc59fL),Åole(0xc8c97bc6L),Åole(0xc90b11f1L),

181 
tﬁe
(0xcc440774L),Åole(0xcd866d43L),Åole(0xcfc0d31aL),Åole(0xce02b92dL),

182 
tﬁe
(0x91af9640L),Åole(0x906dfc77L),Åole(0x922b422eL),Åole(0x93e92819L),

183 
tﬁe
(0x96a63e9cL),Åole(0x976454abL),Åole(0x9522eaf2L),Åole(0x94e080c5L),

184 
tﬁe
(0x9fbcc7f8L),Åole(0x9e7eadcfL),Åole(0x9c381396L),Åole(0x9dfa79a1L),

185 
tﬁe
(0x98b56f24L),Åole(0x99770513L),Åole(0x9b31bb4aL),Åole(0x9af3d17dL),

186 
tﬁe
(0x8d893530L),Åole(0x8c4b5f07L),Åole(0x8e0de15eL),Åole(0x8fcf8b69L),

187 
tﬁe
(0x8a809decL),Åole(0x8b42f7dbL),Åole(0x89044982L),Åole(0x88c623b5L),

188 
tﬁe
(0x839a6488L),Åole(0x82580ebfL),Åole(0x801eb0e6L),Åole(0x81dcdad1L),

189 
tﬁe
(0x8493cc54L),Åole(0x8551a663L),Åole(0x8717183aL),Åole(0x86d5720dL),

190 
tﬁe
(0xa9e2d0a0L),Åole(0xa820ba97L),Åole(0xaa6604ceL),Åole(0xaba46ef9L),

191 
tﬁe
(0xaeeb787cL),Åole(0xaf29124bL),Åole(0xad6fac12L),Åole(0xacadc625L),

192 
tﬁe
(0xa7f18118L),Åole(0xa633eb2fL),Åole(0xa4755576L),Åole(0xa5b73f41L),

193 
tﬁe
(0xa0f829c4L),Åole(0xa13a43f3L),Åole(0xa37cfdaaL),Åole(0xa2be979dL),

194 
tﬁe
(0xb5c473d0L),Åole(0xb40619e7L),Åole(0xb640a7beL),Åole(0xb782cd89L),

195 
tﬁe
(0xb2cddb0cL),Åole(0xb30fb13bL),Åole(0xb1490f62L),Åole(0xb08b6555L),

196 
tﬁe
(0xbbd72268L),Åole(0xba15485fL),Åole(0xb853f606L),Åole(0xb9919c31L),

197 
tﬁe
(0xbcde8ab4L),Åole(0xbd1ce083L),Åole(0xbf5a5edaL),Åole(0xbe9834edL)},

199 
tﬁe
(0x00000000L),Åole(0xb8bc6765L),Åole(0xaa09c88bL),Åole(0x12b5afeeL),

200 
tﬁe
(0x8f629757L),Åole(0x37def032L),Åole(0x256b5fdcL),Åole(0x9dd738b9L),

201 
tﬁe
(0xc5b428efL),Åole(0x7d084f8aL),Åole(0x6fbde064L),Åole(0xd7018701L),

202 
tﬁe
(0x4ad6bfb8L),Åole(0xf26ad8ddL),Åole(0xe0df7733L),Åole(0x58631056L),

203 
tﬁe
(0x5019579fL),Åole(0xe8a530faL),Åole(0xfa109f14L),Åole(0x42acf871L),

204 
tﬁe
(0xdf7bc0c8L),Åole(0x67c7a7adL),Åole(0x75720843L),Åole(0xcdce6f26L),

205 
tﬁe
(0x95ad7f70L),Åole(0x2d111815L),Åole(0x3fa4b7fbL),Åole(0x8718d09eL),

206 
tﬁe
(0x1acfe827L),Åole(0xa2738f42L),Åole(0xb0c620acL),Åole(0x087a47c9L),

207 
tﬁe
(0xa032af3eL),Åole(0x188ec85bL),Åole(0x0a3b67b5L),Åole(0xb28700d0L),

208 
tﬁe
(0x2f503869L),Åole(0x97ec5f0cL),Åole(0x8559f0e2L),Åole(0x3de59787L),

209 
tﬁe
(0x658687d1L),Åole(0xdd3ae0b4L),Åole(0xcf8f4f5aL),Åole(0x7733283fL),

210 
tﬁe
(0xeae41086L),Åole(0x525877e3L),Åole(0x40edd80dL),Åole(0xf851bf68L),

211 
tﬁe
(0xf02bf8a1L),Åole(0x48979fc4L),Åole(0x5a22302aL),Åole(0xe29e574fL),

212 
tﬁe
(0x7f496ff6L),Åole(0xc7f50893L),Åole(0xd540a77dL),Åole(0x6dfcc018L),

213 
tﬁe
(0x359fd04eL),Åole(0x8d23b72bL),Åole(0x9f9618c5L),Åole(0x272a7fa0L),

214 
tﬁe
(0xbafd4719L),Åole(0x0241207cL),Åole(0x10f48f92L),Åole(0xa848e8f7L),

215 
tﬁe
(0x9b14583dL),Åole(0x23a83f58L),Åole(0x311d90b6L),Åole(0x89a1f7d3L),

216 
tﬁe
(0x1476cf6aL),Åole(0xaccaa80fL),Åole(0xbe7f07e1L),Åole(0x06c36084L),

217 
tﬁe
(0x5ea070d2L),Åole(0xe61c17b7L),Åole(0xf4a9b859L),Åole(0x4c15df3cL),

218 
tﬁe
(0xd1c2e785L),Åole(0x697e80e0L),Åole(0x7bcb2f0eL),Åole(0xc377486bL),

219 
tﬁe
(0xcb0d0fa2L),Åole(0x73b168c7L),Åole(0x6104c729L),Åole(0xd9b8a04cL),

220 
tﬁe
(0x446f98f5L),Åole(0xfcd3ff90L),Åole(0xee66507eL),Åole(0x56da371bL),

221 
tﬁe
(0x0eb9274dL),Åole(0xb6054028L),Åole(0xa4b0efc6L),Åole(0x1c0c88a3L),

222 
tﬁe
(0x81dbb01aL),Åole(0x3967d77fL),Åole(0x2bd27891L),Åole(0x936e1ff4L),

223 
tﬁe
(0x3b26f703L),Åole(0x839a9066L),Åole(0x912f3f88L),Åole(0x299358edL),

224 
tﬁe
(0xb4446054L),Åole(0x0cf80731L),Åole(0x1e4da8dfL),Åole(0xa6f1cfbaL),

225 
tﬁe
(0xfe92dfecL),Åole(0x462eb889L),Åole(0x549b1767L),Åole(0xec277002L),

226 
tﬁe
(0x71f048bbL),Åole(0xc94c2fdeL),Åole(0xdbf98030L),Åole(0x6345e755L),

227 
tﬁe
(0x6b3fa09cL),Åole(0xd383c7f9L),Åole(0xc1366817L),Åole(0x798a0f72L),

228 
tﬁe
(0xe45d37cbL),Åole(0x5ce150aeL),Åole(0x4e54ff40L),Åole(0xf6e89825L),

229 
tﬁe
(0xae8b8873L),Åole(0x1637ef16L),Åole(0x048240f8L),Åole(0xbc3e279dL),

230 
tﬁe
(0x21e91f24L),Åole(0x99557841L),Åole(0x8be0d7afL),Åole(0x335cb0caL),

231 
tﬁe
(0xed59b63bL),Åole(0x55e5d15eL),Åole(0x47507eb0L),Åole(0xffec19d5L),

232 
tﬁe
(0x623b216cL),Åole(0xda874609L),Åole(0xc832e9e7L),Åole(0x708e8e82L),

233 
tﬁe
(0x28ed9ed4L),Åole(0x9051f9b1L),Åole(0x82e4565fL),Åole(0x3a58313aL),

234 
tﬁe
(0xa78f0983L),Åole(0x1f336ee6L),Åole(0x0d86c108L),Åole(0xb53aa66dL),

235 
tﬁe
(0xbd40e1a4L),Åole(0x05fc86c1L),Åole(0x1749292fL),Åole(0xaff54e4aL),

236 
tﬁe
(0x322276f3L),Åole(0x8a9e1196L),Åole(0x982bbe78L),Åole(0x2097d91dL),

237 
tﬁe
(0x78f4c94bL),Åole(0xc048ae2eL),Åole(0xd2fd01c0L),Åole(0x6a4166a5L),

238 
tﬁe
(0xf7965e1cL),Åole(0x4f2a3979L),Åole(0x5d9f9697L),Åole(0xe523f1f2L),

239 
tﬁe
(0x4d6b1905L),Åole(0xf5d77e60L),Åole(0xe762d18eL),Åole(0x5fdeb6ebL),

240 
tﬁe
(0xc2098e52L),Åole(0x7ab5e937L),Åole(0x680046d9L),Åole(0xd0bc21bcL),

241 
tﬁe
(0x88df31eaL),Åole(0x3063568fL),Åole(0x22d6f961L),Åole(0x9a6a9e04L),

242 
tﬁe
(0x07bda6bdL),Åole(0xbf01c1d8L),Åole(0xadb46e36L),Åole(0x15080953L),

243 
tﬁe
(0x1d724e9aL),Åole(0xa5ce29ffL),Åole(0xb77b8611L),Åole(0x0fc7e174L),

244 
tﬁe
(0x9210d9cdL),Åole(0x2aacbea8L),Åole(0x38191146L),Åole(0x80a57623L),

245 
tﬁe
(0xd8c66675L),Åole(0x607a0110L),Åole(0x72cfaefeL),Åole(0xca73c99bL),

246 
tﬁe
(0x57a4f122L),Åole(0xef189647L),Åole(0xfdad39a9L),Åole(0x45115eccL),

247 
tﬁe
(0x764dee06L),Åole(0xcef18963L),Åole(0xdc44268dL),Åole(0x64f841e8L),

248 
tﬁe
(0xf92f7951L),Åole(0x41931e34L),Åole(0x5326b1daL),Åole(0xeb9ad6bfL),

249 
tﬁe
(0xb3f9c6e9L),Åole(0x0b45a18cL),Åole(0x19f00e62L),Åole(0xa14c6907L),

250 
tﬁe
(0x3c9b51beL),Åole(0x842736dbL),Åole(0x96929935L),Åole(0x2e2efe50L),

251 
tﬁe
(0x2654b999L),Åole(0x9ee8defcL),Åole(0x8c5d7112L),Åole(0x34e11677L),

252 
tﬁe
(0xa9362eceL),Åole(0x118a49abL),Åole(0x033fe645L),Åole(0xbb838120L),

253 
tﬁe
(0xe3e09176L),Åole(0x5b5cf613L),Åole(0x49e959fdL),Åole(0xf1553e98L),

254 
tﬁe
(0x6c820621L),Åole(0xd43e6144L),Åole(0xc68bceaaL),Åole(0x7e37a9cfL),

255 
tﬁe
(0xd67f4138L),Åole(0x6ec3265dL),Åole(0x7c7689b3L),Åole(0xc4caeed6L),

256 
tﬁe
(0x591dd66fL),Åole(0xe1a1b10aL),Åole(0xf3141ee4L),Åole(0x4ba87981L),

257 
tﬁe
(0x13cb69d7L),Åole(0xab770eb2L),Åole(0xb9c2a15cL),Åole(0x017ec639L),

258 
tﬁe
(0x9ca9fe80L),Åole(0x241599e5L),Åole(0x36a0360bL),Åole(0x8e1c516eL),

259 
tﬁe
(0x866616a7L),Åole(0x3eda71c2L),Åole(0x2c6fde2cL),Åole(0x94d3b949L),

260 
tﬁe
(0x090481f0L),Åole(0xb1b8e695L),Åole(0xa30d497bL),Åole(0x1bb12e1eL),

261 
tﬁe
(0x43d23e48L),Åole(0xfb6e592dL),Åole(0xe9dbf6c3L),Åole(0x516791a6L),

262 
tﬁe
(0xccb0a91fL),Åole(0x740cce7aL),Åole(0x66b96194L),Åole(0xde0506f1L)},

264 
u32
 
	g¸c32˘abÀ_À
[4][256] = {{

265 
tﬁe
(0x00000000L),Åole(0xf26b8303L),Åole(0xe13b70f7L),Åole(0x1350f3f4L),

266 
tﬁe
(0xc79a971fL),Åole(0x35f1141cL),Åole(0x26a1e7e8L),Åole(0xd4ca64ebL),

267 
tﬁe
(0x8ad958cfL),Åole(0x78b2dbccL),Åole(0x6be22838L),Åole(0x9989ab3bL),

268 
tﬁe
(0x4d43cfd0L),Åole(0xbf284cd3L),Åole(0xac78bf27L),Åole(0x5e133c24L),

269 
tﬁe
(0x105ec76fL),Åole(0xe235446cL),Åole(0xf165b798L),Åole(0x030e349bL),

270 
tﬁe
(0xd7c45070L),Åole(0x25afd373L),Åole(0x36ff2087L),Åole(0xc494a384L),

271 
tﬁe
(0x9a879fa0L),Åole(0x68ec1ca3L),Åole(0x7bbcef57L),Åole(0x89d76c54L),

272 
tﬁe
(0x5d1d08bfL),Åole(0xaf768bbcL),Åole(0xbc267848L),Åole(0x4e4dfb4bL),

273 
tﬁe
(0x20bd8edeL),Åole(0xd2d60dddL),Åole(0xc186fe29L),Åole(0x33ed7d2aL),

274 
tﬁe
(0xe72719c1L),Åole(0x154c9ac2L),Åole(0x061c6936L),Åole(0xf477ea35L),

275 
tﬁe
(0xaa64d611L),Åole(0x580f5512L),Åole(0x4b5fa6e6L),Åole(0xb93425e5L),

276 
tﬁe
(0x6dfe410eL),Åole(0x9f95c20dL),Åole(0x8cc531f9L),Åole(0x7eaeb2faL),

277 
tﬁe
(0x30e349b1L),Åole(0xc288cab2L),Åole(0xd1d83946L),Åole(0x23b3ba45L),

278 
tﬁe
(0xf779deaeL),Åole(0x05125dadL),Åole(0x1642ae59L),Åole(0xe4292d5aL),

279 
tﬁe
(0xba3a117eL),Åole(0x4851927dL),Åole(0x5b016189L),Åole(0xa96ae28aL),

280 
tﬁe
(0x7da08661L),Åole(0x8fcb0562L),Åole(0x9c9bf696L),Åole(0x6ef07595L),

281 
tﬁe
(0x417b1dbcL),Åole(0xb3109ebfL),Åole(0xa0406d4bL),Åole(0x522bee48L),

282 
tﬁe
(0x86e18aa3L),Åole(0x748a09a0L),Åole(0x67dafa54L),Åole(0x95b17957L),

283 
tﬁe
(0xcba24573L),Åole(0x39c9c670L),Åole(0x2a993584L),Åole(0xd8f2b687L),

284 
tﬁe
(0x0c38d26cL),Åole(0xfe53516fL),Åole(0xed03a29bL),Åole(0x1f682198L),

285 
tﬁe
(0x5125dad3L),Åole(0xa34e59d0L),Åole(0xb01eaa24L),Åole(0x42752927L),

286 
tﬁe
(0x96bf4dccL),Åole(0x64d4cecfL),Åole(0x77843d3bL),Åole(0x85efbe38L),

287 
tﬁe
(0xdbfc821cL),Åole(0x2997011fL),Åole(0x3ac7f2ebL),Åole(0xc8ac71e8L),

288 
tﬁe
(0x1c661503L),Åole(0xee0d9600L),Åole(0xfd5d65f4L),Åole(0x0f36e6f7L),

289 
tﬁe
(0x61c69362L),Åole(0x93ad1061L),Åole(0x80fde395L),Åole(0x72966096L),

290 
tﬁe
(0xa65c047dL),Åole(0x5437877eL),Åole(0x4767748aL),Åole(0xb50cf789L),

291 
tﬁe
(0xeb1fcbadL),Åole(0x197448aeL),Åole(0x0a24bb5aL),Åole(0xf84f3859L),

292 
tﬁe
(0x2c855cb2L),Åole(0xdeeedfb1L),Åole(0xcdbe2c45L),Åole(0x3fd5af46L),

293 
tﬁe
(0x7198540dL),Åole(0x83f3d70eL),Åole(0x90a324faL),Åole(0x62c8a7f9L),

294 
tﬁe
(0xb602c312L),Åole(0x44694011L),Åole(0x5739b3e5L),Åole(0xa55230e6L),

295 
tﬁe
(0xfb410cc2L),Åole(0x092a8fc1L),Åole(0x1a7a7c35L),Åole(0xe811ff36L),

296 
tﬁe
(0x3cdb9bddL),Åole(0xceb018deL),Åole(0xdde0eb2aL),Åole(0x2f8b6829L),

297 
tﬁe
(0x82f63b78L),Åole(0x709db87bL),Åole(0x63cd4b8fL),Åole(0x91a6c88cL),

298 
tﬁe
(0x456cac67L),Åole(0xb7072f64L),Åole(0xa457dc90L),Åole(0x563c5f93L),

299 
tﬁe
(0x082f63b7L),Åole(0xfa44e0b4L),Åole(0xe9141340L),Åole(0x1b7f9043L),

300 
tﬁe
(0xcfb5f4a8L),Åole(0x3dde77abL),Åole(0x2e8e845fL),Åole(0xdce5075cL),

301 
tﬁe
(0x92a8fc17L),Åole(0x60c37f14L),Åole(0x73938ce0L),Åole(0x81f80fe3L),

302 
tﬁe
(0x55326b08L),Åole(0xa759e80bL),Åole(0xb4091bffL),Åole(0x466298fcL),

303 
tﬁe
(0x1871a4d8L),Åole(0xea1a27dbL),Åole(0xf94ad42fL),Åole(0x0b21572cL),

304 
tﬁe
(0xdfeb33c7L),Åole(0x2d80b0c4L),Åole(0x3ed04330L),Åole(0xccbbc033L),

305 
tﬁe
(0xa24bb5a6L),Åole(0x502036a5L),Åole(0x4370c551L),Åole(0xb11b4652L),

306 
tﬁe
(0x65d122b9L),Åole(0x97baa1baL),Åole(0x84ea524eL),Åole(0x7681d14dL),

307 
tﬁe
(0x2892ed69L),Åole(0xdaf96e6aL),Åole(0xc9a99d9eL),Åole(0x3bc21e9dL),

308 
tﬁe
(0xef087a76L),Åole(0x1d63f975L),Åole(0x0e330a81L),Åole(0xfc588982L),

309 
tﬁe
(0xb21572c9L),Åole(0x407ef1caL),Åole(0x532e023eL),Åole(0xa145813dL),

310 
tﬁe
(0x758fe5d6L),Åole(0x87e466d5L),Åole(0x94b49521L),Åole(0x66df1622L),

311 
tﬁe
(0x38cc2a06L),Åole(0xcaa7a905L),Åole(0xd9f75af1L),Åole(0x2b9cd9f2L),

312 
tﬁe
(0xff56bd19L),Åole(0x0d3d3e1aL),Åole(0x1e6dcdeeL),Åole(0xec064eedL),

313 
tﬁe
(0xc38d26c4L),Åole(0x31e6a5c7L),Åole(0x22b65633L),Åole(0xd0ddd530L),

314 
tﬁe
(0x0417b1dbL),Åole(0xf67c32d8L),Åole(0xe52cc12cL),Åole(0x1747422fL),

315 
tﬁe
(0x49547e0bL),Åole(0xbb3ffd08L),Åole(0xa86f0efcL),Åole(0x5a048dffL),

316 
tﬁe
(0x8ecee914L),Åole(0x7ca56a17L),Åole(0x6ff599e3L),Åole(0x9d9e1ae0L),

317 
tﬁe
(0xd3d3e1abL),Åole(0x21b862a8L),Åole(0x32e8915cL),Åole(0xc083125fL),

318 
tﬁe
(0x144976b4L),Åole(0xe622f5b7L),Åole(0xf5720643L),Åole(0x07198540L),

319 
tﬁe
(0x590ab964L),Åole(0xab613a67L),Åole(0xb831c993L),Åole(0x4a5a4a90L),

320 
tﬁe
(0x9e902e7bL),Åole(0x6cfbad78L),Åole(0x7fab5e8cL),Åole(0x8dc0dd8fL),

321 
tﬁe
(0xe330a81aL),Åole(0x115b2b19L),Åole(0x020bd8edL),Åole(0xf0605beeL),

322 
tﬁe
(0x24aa3f05L),Åole(0xd6c1bc06L),Åole(0xc5914ff2L),Åole(0x37faccf1L),

323 
tﬁe
(0x69e9f0d5L),Åole(0x9b8273d6L),Åole(0x88d28022L),Åole(0x7ab90321L),

324 
tﬁe
(0xae7367caL),Åole(0x5c18e4c9L),Åole(0x4f48173dL),Åole(0xbd23943eL),

325 
tﬁe
(0xf36e6f75L),Åole(0x0105ec76L),Åole(0x12551f82L),Åole(0xe03e9c81L),

326 
tﬁe
(0x34f4f86aL),Åole(0xc69f7b69L),Åole(0xd5cf889dL),Åole(0x27a40b9eL),

327 
tﬁe
(0x79b737baL),Åole(0x8bdcb4b9L),Åole(0x988c474dL),Åole(0x6ae7c44eL),

328 
tﬁe
(0xbe2da0a5L),Åole(0x4c4623a6L),Åole(0x5f16d052L),Åole(0xad7d5351L)},

330 
tﬁe
(0x00000000L),Åole(0x13a29877L),Åole(0x274530eeL),Åole(0x34e7a899L),

331 
tﬁe
(0x4e8a61dcL),Åole(0x5d28f9abL),Åole(0x69cf5132L),Åole(0x7a6dc945L),

332 
tﬁe
(0x9d14c3b8L),Åole(0x8eb65bcfL),Åole(0xba51f356L),Åole(0xa9f36b21L),

333 
tﬁe
(0xd39ea264L),Åole(0xc03c3a13L),Åole(0xf4db928aL),Åole(0xe7790afdL),

334 
tﬁe
(0x3fc5f181L),Åole(0x2c6769f6L),Åole(0x1880c16fL),Åole(0x0b225918L),

335 
tﬁe
(0x714f905dL),Åole(0x62ed082aL),Åole(0x560aa0b3L),Åole(0x45a838c4L),

336 
tﬁe
(0xa2d13239L),Åole(0xb173aa4eL),Åole(0x859402d7L),Åole(0x96369aa0L),

337 
tﬁe
(0xec5b53e5L),Åole(0xfff9cb92L),Åole(0xcb1e630bL),Åole(0xd8bcfb7cL),

338 
tﬁe
(0x7f8be302L),Åole(0x6c297b75L),Åole(0x58ced3ecL),Åole(0x4b6c4b9bL),

339 
tﬁe
(0x310182deL),Åole(0x22a31aa9L),Åole(0x1644b230L),Åole(0x05e62a47L),

340 
tﬁe
(0xe29f20baL),Åole(0xf13db8cdL),Åole(0xc5da1054L),Åole(0xd6788823L),

341 
tﬁe
(0xac154166L),Åole(0xbfb7d911L),Åole(0x8b507188L),Åole(0x98f2e9ffL),

342 
tﬁe
(0x404e1283L),Åole(0x53ec8af4L),Åole(0x670b226dL),Åole(0x74a9ba1aL),

343 
tﬁe
(0x0ec4735fL),Åole(0x1d66eb28L),Åole(0x298143b1L),Åole(0x3a23dbc6L),

344 
tﬁe
(0xdd5ad13bL),Åole(0xcef8494cL),Åole(0xfa1fe1d5L),Åole(0xe9bd79a2L),

345 
tﬁe
(0x93d0b0e7L),Åole(0x80722890L),Åole(0xb4958009L),Åole(0xa737187eL),

346 
tﬁe
(0xff17c604L),Åole(0xecb55e73L),Åole(0xd852f6eaL),Åole(0xcbf06e9dL),

347 
tﬁe
(0xb19da7d8L),Åole(0xa23f3fafL),Åole(0x96d89736L),Åole(0x857a0f41L),

348 
tﬁe
(0x620305bcL),Åole(0x71a19dcbL),Åole(0x45463552L),Åole(0x56e4ad25L),

349 
tﬁe
(0x2c896460L),Åole(0x3f2bfc17L),Åole(0x0bcc548eL),Åole(0x186eccf9L),

350 
tﬁe
(0xc0d23785L),Åole(0xd370aff2L),Åole(0xe797076bL),Åole(0xf4359f1cL),

351 
tﬁe
(0x8e585659L),Åole(0x9dface2eL),Åole(0xa91d66b7L),Åole(0xbabffec0L),

352 
tﬁe
(0x5dc6f43dL),Åole(0x4e646c4aL),Åole(0x7a83c4d3L),Åole(0x69215ca4L),

353 
tﬁe
(0x134c95e1L),Åole(0x00ee0d96L),Åole(0x3409a50fL),Åole(0x27ab3d78L),

354 
tﬁe
(0x809c2506L),Åole(0x933ebd71L),Åole(0xa7d915e8L),Åole(0xb47b8d9fL),

355 
tﬁe
(0xce1644daL),Åole(0xddb4dcadL),Åole(0xe9537434L),Åole(0xfaf1ec43L),

356 
tﬁe
(0x1d88e6beL),Åole(0x0e2a7ec9L),Åole(0x3acdd650L),Åole(0x296f4e27L),

357 
tﬁe
(0x53028762L),Åole(0x40a01f15L),Åole(0x7447b78cL),Åole(0x67e52ffbL),

358 
tﬁe
(0xbf59d487L),Åole(0xacfb4cf0L),Åole(0x981ce469L),Åole(0x8bbe7c1eL),

359 
tﬁe
(0xf1d3b55bL),Åole(0xe2712d2cL),Åole(0xd69685b5L),Åole(0xc5341dc2L),

360 
tﬁe
(0x224d173fL),Åole(0x31ef8f48L),Åole(0x050827d1L),Åole(0x16aabfa6L),

361 
tﬁe
(0x6cc776e3L),Åole(0x7f65ee94L),Åole(0x4b82460dL),Åole(0x5820de7aL),

362 
tﬁe
(0xfbc3faf9L),Åole(0xe861628eL),Åole(0xdc86ca17L),Åole(0xcf245260L),

363 
tﬁe
(0xb5499b25L),Åole(0xa6eb0352L),Åole(0x920cabcbL),Åole(0x81ae33bcL),

364 
tﬁe
(0x66d73941L),Åole(0x7575a136L),Åole(0x419209afL),Åole(0x523091d8L),

365 
tﬁe
(0x285d589dL),Åole(0x3bffc0eaL),Åole(0x0f186873L),Åole(0x1cbaf004L),

366 
tﬁe
(0xc4060b78L),Åole(0xd7a4930fL),Åole(0xe3433b96L),Åole(0xf0e1a3e1L),

367 
tﬁe
(0x8a8c6aa4L),Åole(0x992ef2d3L),Åole(0xadc95a4aL),Åole(0xbe6bc23dL),

368 
tﬁe
(0x5912c8c0L),Åole(0x4ab050b7L),Åole(0x7e57f82eL),Åole(0x6df56059L),

369 
tﬁe
(0x1798a91cL),Åole(0x043a316bL),Åole(0x30dd99f2L),Åole(0x237f0185L),

370 
tﬁe
(0x844819fbL),Åole(0x97ea818cL),Åole(0xa30d2915L),Åole(0xb0afb162L),

371 
tﬁe
(0xcac27827L),Åole(0xd960e050L),Åole(0xed8748c9L),Åole(0xfe25d0beL),

372 
tﬁe
(0x195cda43L),Åole(0x0afe4234L),Åole(0x3e19eaadL),Åole(0x2dbb72daL),

373 
tﬁe
(0x57d6bb9fL),Åole(0x447423e8L),Åole(0x70938b71L),Åole(0x63311306L),

374 
tﬁe
(0xbb8de87aL),Åole(0xa82f700dL),Åole(0x9cc8d894L),Åole(0x8f6a40e3L),

375 
tﬁe
(0xf50789a6L),Åole(0xe6a511d1L),Åole(0xd242b948L),Åole(0xc1e0213fL),

376 
tﬁe
(0x26992bc2L),Åole(0x353bb3b5L),Åole(0x01dc1b2cL),Åole(0x127e835bL),

377 
tﬁe
(0x68134a1eL),Åole(0x7bb1d269L),Åole(0x4f567af0L),Åole(0x5cf4e287L),

378 
tﬁe
(0x04d43cfdL),Åole(0x1776a48aL),Åole(0x23910c13L),Åole(0x30339464L),

379 
tﬁe
(0x4a5e5d21L),Åole(0x59fcc556L),Åole(0x6d1b6dcfL),Åole(0x7eb9f5b8L),

380 
tﬁe
(0x99c0ff45L),Åole(0x8a626732L),Åole(0xbe85cfabL),Åole(0xad2757dcL),

381 
tﬁe
(0xd74a9e99L),Åole(0xc4e806eeL),Åole(0xf00fae77L),Åole(0xe3ad3600L),

382 
tﬁe
(0x3b11cd7cL),Åole(0x28b3550bL),Åole(0x1c54fd92L),Åole(0x0ff665e5L),

383 
tﬁe
(0x759baca0L),Åole(0x663934d7L),Åole(0x52de9c4eL),Åole(0x417c0439L),

384 
tﬁe
(0xa6050ec4L),Åole(0xb5a796b3L),Åole(0x81403e2aL),Åole(0x92e2a65dL),

385 
tﬁe
(0xe88f6f18L),Åole(0xfb2df76fL),Åole(0xcfca5ff6L),Åole(0xdc68c781L),

386 
tﬁe
(0x7b5fdfffL),Åole(0x68fd4788L),Åole(0x5c1aef11L),Åole(0x4fb87766L),

387 
tﬁe
(0x35d5be23L),Åole(0x26772654L),Åole(0x12908ecdL),Åole(0x013216baL),

388 
tﬁe
(0xe64b1c47L),Åole(0xf5e98430L),Åole(0xc10e2ca9L),Åole(0xd2acb4deL),

389 
tﬁe
(0xa8c17d9bL),Åole(0xbb63e5ecL),Åole(0x8f844d75L),Åole(0x9c26d502L),

390 
tﬁe
(0x449a2e7eL),Åole(0x5738b609L),Åole(0x63df1e90L),Åole(0x707d86e7L),

391 
tﬁe
(0x0a104fa2L),Åole(0x19b2d7d5L),Åole(0x2d557f4cL),Åole(0x3ef7e73bL),

392 
tﬁe
(0xd98eedc6L),Åole(0xca2c75b1L),Åole(0xfecbdd28L),Åole(0xed69455fL),

393 
tﬁe
(0x97048c1aL),Åole(0x84a6146dL),Åole(0xb041bcf4L),Åole(0xa3e32483L)},

395 
tﬁe
(0x00000000L),Åole(0xa541927eL),Åole(0x4f6f520dL),Åole(0xea2ec073L),

396 
tﬁe
(0x9edea41aL),Åole(0x3b9f3664L),Åole(0xd1b1f617L),Åole(0x74f06469L),

397 
tﬁe
(0x38513ec5L),Åole(0x9d10acbbL),Åole(0x773e6cc8L),Åole(0xd27ffeb6L),

398 
tﬁe
(0xa68f9adfL),Åole(0x03ce08a1L),Åole(0xe9e0c8d2L),Åole(0x4ca15aacL),

399 
tﬁe
(0x70a27d8aL),Åole(0xd5e3eff4L),Åole(0x3fcd2f87L),Åole(0x9a8cbdf9L),

400 
tﬁe
(0xee7cd990L),Åole(0x4b3d4beeL),Åole(0xa1138b9dL),Åole(0x045219e3L),

401 
tﬁe
(0x48f3434fL),Åole(0xedb2d131L),Åole(0x079c1142L),Åole(0xa2dd833cL),

402 
tﬁe
(0xd62de755L),Åole(0x736c752bL),Åole(0x9942b558L),Åole(0x3c032726L),

403 
tﬁe
(0xe144fb14L),Åole(0x4405696aL),Åole(0xae2ba919L),Åole(0x0b6a3b67L),

404 
tﬁe
(0x7f9a5f0eL),Åole(0xdadbcd70L),Åole(0x30f50d03L),Åole(0x95b49f7dL),

405 
tﬁe
(0xd915c5d1L),Åole(0x7c5457afL),Åole(0x967a97dcL),Åole(0x333b05a2L),

406 
tﬁe
(0x47cb61cbL),Åole(0xe28af3b5L),Åole(0x08a433c6L),Åole(0xade5a1b8L),

407 
tﬁe
(0x91e6869eL),Åole(0x34a714e0L),Åole(0xde89d493L),Åole(0x7bc846edL),

408 
tﬁe
(0x0f382284L),Åole(0xaa79b0faL),Åole(0x40577089L),Åole(0xe516e2f7L),

409 
tﬁe
(0xa9b7b85bL),Åole(0x0cf62a25L),Åole(0xe6d8ea56L),Åole(0x43997828L),

410 
tﬁe
(0x37691c41L),Åole(0x92288e3fL),Åole(0x78064e4cL),Åole(0xdd47dc32L),

411 
tﬁe
(0xc76580d9L),Åole(0x622412a7L),Åole(0x880ad2d4L),Åole(0x2d4b40aaL),

412 
tﬁe
(0x59bb24c3L),Åole(0xfcfab6bdL),Åole(0x16d476ceL),Åole(0xb395e4b0L),

413 
tﬁe
(0xff34be1cL),Åole(0x5a752c62L),Åole(0xb05bec11L),Åole(0x151a7e6fL),

414 
tﬁe
(0x61ea1a06L),Åole(0xc4ab8878L),Åole(0x2e85480bL),Åole(0x8bc4da75L),

415 
tﬁe
(0xb7c7fd53L),Åole(0x12866f2dL),Åole(0xf8a8af5eL),Åole(0x5de93d20L),

416 
tﬁe
(0x29195949L),Åole(0x8c58cb37L),Åole(0x66760b44L),Åole(0xc337993aL),

417 
tﬁe
(0x8f96c396L),Åole(0x2ad751e8L),Åole(0xc0f9919bL),Åole(0x65b803e5L),

418 
tﬁe
(0x1148678cL),Åole(0xb409f5f2L),Åole(0x5e273581L),Åole(0xfb66a7ffL),

419 
tﬁe
(0x26217bcdL),Åole(0x8360e9b3L),Åole(0x694e29c0L),Åole(0xcc0fbbbeL),

420 
tﬁe
(0xb8ffdfd7L),Åole(0x1dbe4da9L),Åole(0xf7908ddaL),Åole(0x52d11fa4L),

421 
tﬁe
(0x1e704508L),Åole(0xbb31d776L),Åole(0x511f1705L),Åole(0xf45e857bL),

422 
tﬁe
(0x80aee112L),Åole(0x25ef736cL),Åole(0xcfc1b31fL),Åole(0x6a802161L),

423 
tﬁe
(0x56830647L),Åole(0xf3c29439L),Åole(0x19ec544aL),Åole(0xbcadc634L),

424 
tﬁe
(0xc85da25dL),Åole(0x6d1c3023L),Åole(0x8732f050L),Åole(0x2273622eL),

425 
tﬁe
(0x6ed23882L),Åole(0xcb93aafcL),Åole(0x21bd6a8fL),Åole(0x84fcf8f1L),

426 
tﬁe
(0xf00c9c98L),Åole(0x554d0ee6L),Åole(0xbf63ce95L),Åole(0x1a225cebL),

427 
tﬁe
(0x8b277743L),Åole(0x2e66e53dL),Åole(0xc448254eL),Åole(0x6109b730L),

428 
tﬁe
(0x15f9d359L),Åole(0xb0b84127L),Åole(0x5a968154L),Åole(0xffd7132aL),

429 
tﬁe
(0xb3764986L),Åole(0x1637dbf8L),Åole(0xfc191b8bL),Åole(0x595889f5L),

430 
tﬁe
(0x2da8ed9cL),Åole(0x88e97fe2L),Åole(0x62c7bf91L),Åole(0xc7862defL),

431 
tﬁe
(0xfb850ac9L),Åole(0x5ec498b7L),Åole(0xb4ea58c4L),Åole(0x11abcabaL),

432 
tﬁe
(0x655baed3L),Åole(0xc01a3cadL),Åole(0x2a34fcdeL),Åole(0x8f756ea0L),

433 
tﬁe
(0xc3d4340cL),Åole(0x6695a672L),Åole(0x8cbb6601L),Åole(0x29faf47fL),

434 
tﬁe
(0x5d0a9016L),Åole(0xf84b0268L),Åole(0x1265c21bL),Åole(0xb7245065L),

435 
tﬁe
(0x6a638c57L),Åole(0xcf221e29L),Åole(0x250cde5aL),Åole(0x804d4c24L),

436 
tﬁe
(0xf4bd284dL),Åole(0x51fcba33L),Åole(0xbbd27a40L),Åole(0x1e93e83eL),

437 
tﬁe
(0x5232b292L),Åole(0xf77320ecL),Åole(0x1d5de09fL),Åole(0xb81c72e1L),

438 
tﬁe
(0xccec1688L),Åole(0x69ad84f6L),Åole(0x83834485L),Åole(0x26c2d6fbL),

439 
tﬁe
(0x1ac1f1ddL),Åole(0xbf8063a3L),Åole(0x55aea3d0L),Åole(0xf0ef31aeL),

440 
tﬁe
(0x841f55c7L),Åole(0x215ec7b9L),Åole(0xcb7007caL),Åole(0x6e3195b4L),

441 
tﬁe
(0x2290cf18L),Åole(0x87d15d66L),Åole(0x6dff9d15L),Åole(0xc8be0f6bL),

442 
tﬁe
(0xbc4e6b02L),Åole(0x190ff97cL),Åole(0xf321390fL),Åole(0x5660ab71L),

443 
tﬁe
(0x4c42f79aL),Åole(0xe90365e4L),Åole(0x032da597L),Åole(0xa66c37e9L),

444 
tﬁe
(0xd29c5380L),Åole(0x77ddc1feL),Åole(0x9df3018dL),Åole(0x38b293f3L),

445 
tﬁe
(0x7413c95fL),Åole(0xd1525b21L),Åole(0x3b7c9b52L),Åole(0x9e3d092cL),

446 
tﬁe
(0xeacd6d45L),Åole(0x4f8cff3bL),Åole(0xa5a23f48L),Åole(0x00e3ad36L),

447 
tﬁe
(0x3ce08a10L),Åole(0x99a1186eL),Åole(0x738fd81dL),Åole(0xd6ce4a63L),

448 
tﬁe
(0xa23e2e0aL),Åole(0x077fbc74L),Åole(0xed517c07L),Åole(0x4810ee79L),

449 
tﬁe
(0x04b1b4d5L),Åole(0xa1f026abL),Åole(0x4bdee6d8L),Åole(0xee9f74a6L),

450 
tﬁe
(0x9a6f10cfL),Åole(0x3f2e82b1L),Åole(0xd50042c2L),Åole(0x7041d0bcL),

451 
tﬁe
(0xad060c8eL),Åole(0x08479ef0L),Åole(0xe2695e83L),Åole(0x4728ccfdL),

452 
tﬁe
(0x33d8a894L),Åole(0x96993aeaL),Åole(0x7cb7fa99L),Åole(0xd9f668e7L),

453 
tﬁe
(0x9557324bL),Åole(0x3016a035L),Åole(0xda386046L),Åole(0x7f79f238L),

454 
tﬁe
(0x0b899651L),Åole(0xaec8042fL),Åole(0x44e6c45cL),Åole(0xe1a75622L),

455 
tﬁe
(0xdda47104L),Åole(0x78e5e37aL),Åole(0x92cb2309L),Åole(0x378ab177L),

456 
tﬁe
(0x437ad51eL),Åole(0xe63b4760L),Åole(0x0c158713L),Åole(0xa954156dL),

457 
tﬁe
(0xe5f54fc1L),Åole(0x40b4ddbfL),Åole(0xaa9a1dccL),Åole(0x0fdb8fb2L),

458 
tﬁe
(0x7b2bebdbL),Åole(0xde6a79a5L),Åole(0x3444b9d6L),Åole(0x91052ba8L)},

460 
tﬁe
(0x00000000L),Åole(0xdd45aab8L),Åole(0xbf672381L),Åole(0x62228939L),

461 
tﬁe
(0x7b2231f3L),Åole(0xa6679b4bL),Åole(0xc4451272L),Åole(0x1900b8caL),

462 
tﬁe
(0xf64463e6L),Åole(0x2b01c95eL),Åole(0x49234067L),Åole(0x9466eadfL),

463 
tﬁe
(0x8d665215L),Åole(0x5023f8adL),Åole(0x32017194L),Åole(0xef44db2cL),

464 
tﬁe
(0xe964b13dL),Åole(0x34211b85L),Åole(0x560392bcL),Åole(0x8b463804L),

465 
tﬁe
(0x924680ceL),Åole(0x4f032a76L),Åole(0x2d21a34fL),Åole(0xf06409f7L),

466 
tﬁe
(0x1f20d2dbL),Åole(0xc2657863L),Åole(0xa047f15aL),Åole(0x7d025be2L),

467 
tﬁe
(0x6402e328L),Åole(0xb9474990L),Åole(0xdb65c0a9L),Åole(0x06206a11L),

468 
tﬁe
(0xd725148bL),Åole(0x0a60be33L),Åole(0x6842370aL),Åole(0xb5079db2L),

469 
tﬁe
(0xac072578L),Åole(0x71428fc0L),Åole(0x136006f9L),Åole(0xce25ac41L),

470 
tﬁe
(0x2161776dL),Åole(0xfc24ddd5L),Åole(0x9e0654ecL),Åole(0x4343fe54L),

471 
tﬁe
(0x5a43469eL),Åole(0x8706ec26L),Åole(0xe524651fL),Åole(0x3861cfa7L),

472 
tﬁe
(0x3e41a5b6L),Åole(0xe3040f0eL),Åole(0x81268637L),Åole(0x5c632c8fL),

473 
tﬁe
(0x45639445L),Åole(0x98263efdL),Åole(0xfa04b7c4L),Åole(0x27411d7cL),

474 
tﬁe
(0xc805c650L),Åole(0x15406ce8L),Åole(0x7762e5d1L),Åole(0xaa274f69L),

475 
tﬁe
(0xb327f7a3L),Åole(0x6e625d1bL),Åole(0x0c40d422L),Åole(0xd1057e9aL),

476 
tﬁe
(0xaba65fe7L),Åole(0x76e3f55fL),Åole(0x14c17c66L),Åole(0xc984d6deL),

477 
tﬁe
(0xd0846e14L),Åole(0x0dc1c4acL),Åole(0x6fe34d95L),Åole(0xb2a6e72dL),

478 
tﬁe
(0x5de23c01L),Åole(0x80a796b9L),Åole(0xe2851f80L),Åole(0x3fc0b538L),

479 
tﬁe
(0x26c00df2L),Åole(0xfb85a74aL),Åole(0x99a72e73L),Åole(0x44e284cbL),

480 
tﬁe
(0x42c2eedaL),Åole(0x9f874462L),Åole(0xfda5cd5bL),Åole(0x20e067e3L),

481 
tﬁe
(0x39e0df29L),Åole(0xe4a57591L),Åole(0x8687fca8L),Åole(0x5bc25610L),

482 
tﬁe
(0xb4868d3cL),Åole(0x69c32784L),Åole(0x0be1aebdL),Åole(0xd6a40405L),

483 
tﬁe
(0xcfa4bccfL),Åole(0x12e11677L),Åole(0x70c39f4eL),Åole(0xad8635f6L),

484 
tﬁe
(0x7c834b6cL),Åole(0xa1c6e1d4L),Åole(0xc3e468edL),Åole(0x1ea1c255L),

485 
tﬁe
(0x07a17a9fL),Åole(0xdae4d027L),Åole(0xb8c6591eL),Åole(0x6583f3a6L),

486 
tﬁe
(0x8ac7288aL),Åole(0x57828232L),Åole(0x35a00b0bL),Åole(0xe8e5a1b3L),

487 
tﬁe
(0xf1e51979L),Åole(0x2ca0b3c1L),Åole(0x4e823af8L),Åole(0x93c79040L),

488 
tﬁe
(0x95e7fa51L),Åole(0x48a250e9L),Åole(0x2a80d9d0L),Åole(0xf7c57368L),

489 
tﬁe
(0xeec5cba2L),Åole(0x3380611aL),Åole(0x51a2e823L),Åole(0x8ce7429bL),

490 
tﬁe
(0x63a399b7L),Åole(0xbee6330fL),Åole(0xdcc4ba36L),Åole(0x0181108eL),

491 
tﬁe
(0x1881a844L),Åole(0xc5c402fcL),Åole(0xa7e68bc5L),Åole(0x7aa3217dL),

492 
tﬁe
(0x52a0c93fL),Åole(0x8fe56387L),Åole(0xedc7eabeL),Åole(0x30824006L),

493 
tﬁe
(0x2982f8ccL),Åole(0xf4c75274L),Åole(0x96e5db4dL),Åole(0x4ba071f5L),

494 
tﬁe
(0xa4e4aad9L),Åole(0x79a10061L),Åole(0x1b838958L),Åole(0xc6c623e0L),

495 
tﬁe
(0xdfc69b2aL),Åole(0x02833192L),Åole(0x60a1b8abL),Åole(0xbde41213L),

496 
tﬁe
(0xbbc47802L),Åole(0x6681d2baL),Åole(0x04a35b83L),Åole(0xd9e6f13bL),

497 
tﬁe
(0xc0e649f1L),Åole(0x1da3e349L),Åole(0x7f816a70L),Åole(0xa2c4c0c8L),

498 
tﬁe
(0x4d801be4L),Åole(0x90c5b15cL),Åole(0xf2e73865L),Åole(0x2fa292ddL),

499 
tﬁe
(0x36a22a17L),Åole(0xebe780afL),Åole(0x89c50996L),Åole(0x5480a32eL),

500 
tﬁe
(0x8585ddb4L),Åole(0x58c0770cL),Åole(0x3ae2fe35L),Åole(0xe7a7548dL),

501 
tﬁe
(0xfea7ec47L),Åole(0x23e246ffL),Åole(0x41c0cfc6L),Åole(0x9c85657eL),

502 
tﬁe
(0x73c1be52L),Åole(0xae8414eaL),Åole(0xcca69dd3L),Åole(0x11e3376bL),

503 
tﬁe
(0x08e38fa1L),Åole(0xd5a62519L),Åole(0xb784ac20L),Åole(0x6ac10698L),

504 
tﬁe
(0x6ce16c89L),Åole(0xb1a4c631L),Åole(0xd3864f08L),Åole(0x0ec3e5b0L),

505 
tﬁe
(0x17c35d7aL),Åole(0xca86f7c2L),Åole(0xa8a47efbL),Åole(0x75e1d443L),

506 
tﬁe
(0x9aa50f6fL),Åole(0x47e0a5d7L),Åole(0x25c22ceeL),Åole(0xf8878656L),

507 
tﬁe
(0xe1873e9cL),Åole(0x3cc29424L),Åole(0x5ee01d1dL),Åole(0x83a5b7a5L),

508 
tﬁe
(0xf90696d8L),Åole(0x24433c60L),Åole(0x4661b559L),Åole(0x9b241fe1L),

509 
tﬁe
(0x8224a72bL),Åole(0x5f610d93L),Åole(0x3d4384aaL),Åole(0xe0062e12L),

510 
tﬁe
(0x0f42f53eL),Åole(0xd2075f86L),Åole(0xb025d6bfL),Åole(0x6d607c07L),

511 
tﬁe
(0x7460c4cdL),Åole(0xa9256e75L),Åole(0xcb07e74cL),Åole(0x16424df4L),

512 
tﬁe
(0x106227e5L),Åole(0xcd278d5dL),Åole(0xaf050464L),Åole(0x7240aedcL),

513 
tﬁe
(0x6b401616L),Åole(0xb605bcaeL),Åole(0xd4273597L),Åole(0x09629f2fL),

514 
tﬁe
(0xe6264403L),Åole(0x3b63eebbL),Åole(0x59416782L),Åole(0x8404cd3aL),

515 
tﬁe
(0x9d0475f0L),Åole(0x4041df48L),Åole(0x22635671L),Åole(0xff26fcc9L),

516 
tﬁe
(0x2e238253L),Åole(0xf36628ebL),Åole(0x9144a1d2L),Åole(0x4c010b6aL),

517 
tﬁe
(0x5501b3a0L),Åole(0x88441918L),Åole(0xea669021L),Åole(0x37233a99L),

518 
tﬁe
(0xd867e1b5L),Åole(0x05224b0dL),Åole(0x6700c234L),Åole(0xba45688cL),

519 
tﬁe
(0xa345d046L),Åole(0x7e007afeL),Åole(0x1c22f3c7L),Åole(0xc167597fL),

520 
tﬁe
(0xc747336eL),Åole(0x1a0299d6L),Åole(0x782010efL),Åole(0xa565ba57L),

521 
tﬁe
(0xbc65029dL),Åole(0x6120a825L),Åole(0x0302211cL),Åole(0xde478ba4L),

522 
tﬁe
(0x31035088L),Åole(0xec46fa30L),Åole(0x8e647309L),Åole(0x5321d9b1L),

523 
tﬁe
(0x4a21617bL),Åole(0x9764cbc3L),Åole(0xf54642faL),Åole(0x2803e842L)},

	@libxfs/darwin.c

19 
	~<sys/disk.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/mou¡.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/sys˘l.h
>

24 
	~"libxfs.h
"

26 
	g∂©f‹m_has_uuid
 = 1;

27 *
¥og«me
;

30 
	$∂©f‹m_check_ismou¡ed
(*
«me
, *
block
, 
°©
 *
s
, 
vîbo£
)

33 
	}
}

36 
	$∂©f‹m_check_iswrôabÀ
(*
«me
, *
block
, 
°©
 *
s
)

38 
fd
, 
wrôabÀ
;

40 i‡((
fd
 = 
	`›í
(
block
, 
O_RDONLY
, 0)) < 0) {

41 
	`Ârötf
(
°dîr
, 
	`_
("%s: "

43 
¥og«me
, 
block
, 
	`°ªº‹
(
î∫o
));

44 
	`exô
(1);

47 i‡(
	`io˘l
(
fd
, 
DKIOCISWRITABLE
, &
wrôabÀ
) < 0) {

48 
	`Ârötf
(
°dîr
, 
	`_
("%s: can'tÅell if \"%s\" is writable: %s\n"),

49 
¥og«me
, 
block
, 
	`°ªº‹
(
î∫o
));

50 
	`exô
(1);

52 
	`˛o£
(
fd
);

53  
wrôabÀ
 == 0;

54 
	}
}

57 
	$∂©f‹m_£t_blocksize
(
fd
, *
∑th
, 
dev_t
 
devi˚
, 
blocksize
, 
Áèl
)

59  
Áèl
;

60 
	}
}

63 
	$∂©f‹m_Êush_devi˚
(
fd
, 
dev_t
 
devi˚
)

65 
	`io˘l
(
fd
, 
DKIOCSYNCHRONIZECACHE
, 
NULL
);

66 
	}
}

69 
	$∂©f‹m_födsizes
(*
∑th
, 
fd
, *
sz
, *
bsz
)

71 
__uöt64_t
 
size
;

72 
°©
 
°
;

74 i‡(
	`f°©
(
fd
, &
°
) < 0) {

75 
	`Ârötf
(
°dîr
,

76 
	`_
("%s: cannot statÅhe device file \"%s\": %s\n"),

77 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

78 
	`exô
(1);

80 i‡((
°
.
°_mode
 & 
S_IFMT
Ë=
S_IFREG
) {

81 *
sz
 = ()(
°
.
°_size
 >> 9);

82 *
bsz
 = 
BBSIZE
;

85 i‡(
	`io˘l
(
fd
, 
DKIOCGETBLOCKCOUNT
, &
size
) < 0) {

86 
	`Ârötf
(
°dîr
, 
	`_
("%s: can't determine device size: %s\n"),

87 
¥og«me
, 
	`°ªº‹
(
î∫o
));

88 
	`exô
(1);

90 *
sz
 = ()
size
;

91 *
bsz
 = 
BBSIZE
;

92 
	}
}

95 
	$∂©f‹m_födøw∑th
(*
∑th
)

97  
∑th
;

98 
	}
}

101 
	$∂©f‹m_födblock∑th
(*
∑th
)

103  
∑th
;

104 
	}
}

107 
	$∂©f‹m_dúe˘_blockdev
()

110 
	}
}

113 
	$∂©f‹m_Æign_blockdev
()

116 
	}
}

119 
	$∂©f‹m_≈roc
()

121 
n˝u
;

122 
size_t
 
Àn
 = (
n˝u
);

123 
mib
[2] = {
CTL_HW
, 
HW_NCPU
};

125 i‡(
	`sys˘l
(
mib
, 2, &
n˝u
, &
Àn
, 
NULL
, 0) < 0)

126 
n˝u
 = 1;

128  
n˝u
;

129 
	}
}

132 
	$∂©f‹m_physmem
()

134 
physmem
;

135 
size_t
 
Àn
 = (
physmem
);

136 
mib
[2] = {
CTL_HW
, 
HW_PHYSMEM
};

138 i‡(
	`sys˘l
(
mib
, 2, &
physmem
, &
Àn
, 
NULL
, 0) < 0) {

139 
	`Ârötf
(
°dîr
, 
	`_
("%s: can't determine memory size\n"),

140 
¥og«me
);

141 
	`exô
(1);

143  
physmem
 >> 10;

144 
	}
}

	@libxfs/defer_item.c

20 
	~"libxfs_¥iv.h
"

21 
	~"xfs_fs.h
"

22 
	~"xfs_sh¨ed.h
"

23 
	~"xfs_f‹m©.h
"

24 
	~"xfs_log_f‹m©.h
"

25 
	~"xfs_å™s_ªsv.h
"

26 
	~"xfs_bô.h
"

27 
	~"xfs_sb.h
"

28 
	~"xfs_mou¡.h
"

29 
	~"xfs_de„r.h
"

30 
	~"xfs_å™s.h
"

31 
	~"xfs_bm≠.h
"

32 
	~"xfs_Æloc.h
"

33 
	~"xfs_rm≠.h
"

34 
	~"xfs_ªfcou¡.h
"

35 
	~"xfs_bm≠.h
"

36 
	~"xfs_öode.h
"

44 
	$xfs_exã¡_‰ì_diff_ôems
(

45 *
¥iv
,

46 
li°_hód
 *
a
,

47 
li°_hód
 *
b
)

49 
xfs_mou¡
 *
mp
 = 
¥iv
;

50 
xfs_exã¡_‰ì_ôem
 *
ø
;

51 
xfs_exã¡_‰ì_ôem
 *
rb
;

53 
ø
 = 
	`c⁄èöî_of
(
a
, 
xfs_exã¡_‰ì_ôem
, 
xefi_li°
);

54 
rb
 = 
	`c⁄èöî_of
(
b
, 
xfs_exã¡_‰ì_ôem
, 
xefi_li°
);

55  
	`XFS_FSB_TO_AGNO
(
mp
, 
ø
->
xefi_°¨tblock
) -

56 
	`XFS_FSB_TO_AGNO
(
mp
, 
rb
->
xefi_°¨tblock
);

57 
	}
}

60 
STATIC
 *

61 
	$xfs_exã¡_‰ì_¸óã_öã¡
(

62 
xfs_å™s
 *
ç
,

63 
cou¡
)

65  
NULL
;

66 
	}
}

69 
STATIC
 

70 
	$xfs_exã¡_‰ì_log_ôem
(

71 
xfs_å™s
 *
ç
,

72 *
öã¡
,

73 
li°_hód
 *
ôem
)

75 
	}
}

78 
STATIC
 *

79 
	$xfs_exã¡_‰ì_¸óã_d⁄e
(

80 
xfs_å™s
 *
ç
,

81 *
öã¡
,

82 
cou¡
)

84  
NULL
;

85 
	}
}

88 
STATIC
 

89 
	$xfs_exã¡_‰ì_föish_ôem
(

90 
xfs_å™s
 *
ç
,

91 
xfs_de„r_›s
 *
d›
,

92 
li°_hód
 *
ôem
,

93 *
d⁄e_ôem
,

94 **
°©e
)

96 
xfs_exã¡_‰ì_ôem
 *
‰ì
;

97 
îr‹
;

99 
‰ì
 = 
	`c⁄èöî_of
(
ôem
, 
xfs_exã¡_‰ì_ôem
, 
xefi_li°
);

100 
îr‹
 = 
	`xfs_‰ì_exã¡
(
ç
, 
‰ì
->
xefi_°¨tblock
,

101 
‰ì
->
xefi_blockcou¡
, &‰ì->
xefi_oöfo
,

102 
XFS_AG_RESV_NONE
);

103 
	`kmem_‰ì
(
‰ì
);

104  
îr‹
;

105 
	}
}

108 
STATIC
 

109 
	$xfs_exã¡_‰ì_ab‹t_öã¡
(

110 *
öã¡
)

112 
	}
}

115 
STATIC
 

116 
	$xfs_exã¡_‰ì_ˇn˚l_ôem
(

117 
li°_hód
 *
ôem
)

119 
xfs_exã¡_‰ì_ôem
 *
‰ì
;

121 
‰ì
 = 
	`c⁄èöî_of
(
ôem
, 
xfs_exã¡_‰ì_ôem
, 
xefi_li°
);

122 
	`kmem_‰ì
(
‰ì
);

123 
	}
}

125 c⁄° 
xfs_de„r_›_ty≥
 
	gxfs_exã¡_‰ì_de„r_ty≥
 = {

126 .
ty≥
 = 
XFS_DEFER_OPS_TYPE_FREE
,

127 .
	gdiff_ôems
 = 
xfs_exã¡_‰ì_diff_ôems
,

128 .
	g¸óã_öã¡
 = 
xfs_exã¡_‰ì_¸óã_öã¡
,

129 .
	gab‹t_öã¡
 = 
xfs_exã¡_‰ì_ab‹t_öã¡
,

130 .
	glog_ôem
 = 
xfs_exã¡_‰ì_log_ôem
,

131 .
	g¸óã_d⁄e
 = 
xfs_exã¡_‰ì_¸óã_d⁄e
,

132 .
	gföish_ôem
 = 
xfs_exã¡_‰ì_föish_ôem
,

133 .
	gˇn˚l_ôem
 = 
xfs_exã¡_‰ì_ˇn˚l_ôem
,

138 
	$xfs_exã¡_‰ì_öô_de„r_›
()

140 
	`xfs_de„r_öô_›_ty≥
(&
xfs_exã¡_‰ì_de„r_ty≥
);

141 
	}
}

147 
	$xfs_rm≠_upd©e_diff_ôems
(

148 *
¥iv
,

149 
li°_hód
 *
a
,

150 
li°_hód
 *
b
)

152 
xfs_mou¡
 *
mp
 = 
¥iv
;

153 
xfs_rm≠_öã¡
 *
ø
;

154 
xfs_rm≠_öã¡
 *
rb
;

156 
ø
 = 
	`c⁄èöî_of
(
a
, 
xfs_rm≠_öã¡
, 
ri_li°
);

157 
rb
 = 
	`c⁄èöî_of
(
b
, 
xfs_rm≠_öã¡
, 
ri_li°
);

158  
	`XFS_FSB_TO_AGNO
(
mp
, 
ø
->
ri_bm≠
.
br_°¨tblock
) -

159 
	`XFS_FSB_TO_AGNO
(
mp
, 
rb
->
ri_bm≠
.
br_°¨tblock
);

160 
	}
}

163 
STATIC
 *

164 
	$xfs_rm≠_upd©e_¸óã_öã¡
(

165 
xfs_å™s
 *
ç
,

166 
cou¡
)

168  
NULL
;

169 
	}
}

172 
STATIC
 

173 
	$xfs_rm≠_upd©e_log_ôem
(

174 
xfs_å™s
 *
ç
,

175 *
öã¡
,

176 
li°_hód
 *
ôem
)

178 
	}
}

181 
STATIC
 *

182 
	$xfs_rm≠_upd©e_¸óã_d⁄e
(

183 
xfs_å™s
 *
ç
,

184 *
öã¡
,

185 
cou¡
)

187  
NULL
;

188 
	}
}

191 
STATIC
 

192 
	$xfs_rm≠_upd©e_föish_ôem
(

193 
xfs_å™s
 *
ç
,

194 
xfs_de„r_›s
 *
d›
,

195 
li°_hód
 *
ôem
,

196 *
d⁄e_ôem
,

197 **
°©e
)

199 
xfs_rm≠_öã¡
 *
rm≠
;

200 
îr‹
;

202 
rm≠
 = 
	`c⁄èöî_of
(
ôem
, 
xfs_rm≠_öã¡
, 
ri_li°
);

203 
îr‹
 = 
	`xfs_rm≠_föish_⁄e
(
ç
,

204 
rm≠
->
ri_ty≥
,

205 
rm≠
->
ri_ow√r
,Ñm≠->
ri_whichf‹k
,

206 
rm≠
->
ri_bm≠
.
br_°¨toff
,

207 
rm≠
->
ri_bm≠
.
br_°¨tblock
,

208 
rm≠
->
ri_bm≠
.
br_blockcou¡
,

209 
rm≠
->
ri_bm≠
.
br_°©e
,

210 (
xfs_båì_cur
 **)
°©e
);

211 
	`kmem_‰ì
(
rm≠
);

212  
îr‹
;

213 
	}
}

216 
STATIC
 

217 
	$xfs_rm≠_upd©e_föish_˛ónup
(

218 
xfs_å™s
 *
ç
,

219 *
°©e
,

220 
îr‹
)

222 
xfs_båì_cur
 *
rcur
 = 
°©e
;

224 
	`xfs_rm≠_föish_⁄e_˛ónup
(
ç
, 
rcur
, 
îr‹
);

225 
	}
}

228 
STATIC
 

229 
	$xfs_rm≠_upd©e_ab‹t_öã¡
(

230 *
öã¡
)

232 
	}
}

235 
STATIC
 

236 
	$xfs_rm≠_upd©e_ˇn˚l_ôem
(

237 
li°_hód
 *
ôem
)

239 
xfs_rm≠_öã¡
 *
rm≠
;

241 
rm≠
 = 
	`c⁄èöî_of
(
ôem
, 
xfs_rm≠_öã¡
, 
ri_li°
);

242 
	`kmem_‰ì
(
rm≠
);

243 
	}
}

245 c⁄° 
xfs_de„r_›_ty≥
 
	gxfs_rm≠_upd©e_de„r_ty≥
 = {

246 .
ty≥
 = 
XFS_DEFER_OPS_TYPE_RMAP
,

247 .
	gdiff_ôems
 = 
xfs_rm≠_upd©e_diff_ôems
,

248 .
	g¸óã_öã¡
 = 
xfs_rm≠_upd©e_¸óã_öã¡
,

249 .
	gab‹t_öã¡
 = 
xfs_rm≠_upd©e_ab‹t_öã¡
,

250 .
	glog_ôem
 = 
xfs_rm≠_upd©e_log_ôem
,

251 .
	g¸óã_d⁄e
 = 
xfs_rm≠_upd©e_¸óã_d⁄e
,

252 .
	gföish_ôem
 = 
xfs_rm≠_upd©e_föish_ôem
,

253 .
	gföish_˛ónup
 = 
xfs_rm≠_upd©e_föish_˛ónup
,

254 .
	gˇn˚l_ôem
 = 
xfs_rm≠_upd©e_ˇn˚l_ôem
,

259 
	$xfs_rm≠_upd©e_öô_de„r_›
()

261 
	`xfs_de„r_öô_›_ty≥
(&
xfs_rm≠_upd©e_de„r_ty≥
);

262 
	}
}

268 
	$xfs_ªfcou¡_upd©e_diff_ôems
(

269 *
¥iv
,

270 
li°_hód
 *
a
,

271 
li°_hód
 *
b
)

273 
xfs_mou¡
 *
mp
 = 
¥iv
;

274 
xfs_ªfcou¡_öã¡
 *
ø
;

275 
xfs_ªfcou¡_öã¡
 *
rb
;

277 
ø
 = 
	`c⁄èöî_of
(
a
, 
xfs_ªfcou¡_öã¡
, 
ri_li°
);

278 
rb
 = 
	`c⁄èöî_of
(
b
, 
xfs_ªfcou¡_öã¡
, 
ri_li°
);

279  
	`XFS_FSB_TO_AGNO
(
mp
, 
ø
->
ri_°¨tblock
) -

280 
	`XFS_FSB_TO_AGNO
(
mp
, 
rb
->
ri_°¨tblock
);

281 
	}
}

284 
STATIC
 *

285 
	$xfs_ªfcou¡_upd©e_¸óã_öã¡
(

286 
xfs_å™s
 *
ç
,

287 
cou¡
)

289  
NULL
;

290 
	}
}

293 
STATIC
 

294 
	$xfs_ªfcou¡_upd©e_log_ôem
(

295 
xfs_å™s
 *
ç
,

296 *
öã¡
,

297 
li°_hód
 *
ôem
)

299 
	}
}

302 
STATIC
 *

303 
	$xfs_ªfcou¡_upd©e_¸óã_d⁄e
(

304 
xfs_å™s
 *
ç
,

305 *
öã¡
,

306 
cou¡
)

308  
NULL
;

309 
	}
}

312 
STATIC
 

313 
	$xfs_ªfcou¡_upd©e_föish_ôem
(

314 
xfs_å™s
 *
ç
,

315 
xfs_de„r_›s
 *
d›
,

316 
li°_hód
 *
ôem
,

317 *
d⁄e_ôem
,

318 **
°©e
)

320 
xfs_ªfcou¡_öã¡
 *
ªfc
;

321 
xfs_fsblock_t
 
√w_fsb
;

322 
xfs_exéí_t
 
√w_agÀn
;

323 
îr‹
;

325 
ªfc
 = 
	`c⁄èöî_of
(
ôem
, 
xfs_ªfcou¡_öã¡
, 
ri_li°
);

326 
îr‹
 = 
	`xfs_ªfcou¡_föish_⁄e
(
ç
, 
d›
,

327 
ªfc
->
ri_ty≥
,

328 
ªfc
->
ri_°¨tblock
,

329 
ªfc
->
ri_blockcou¡
,

330 &
√w_fsb
, &
√w_agÀn
,

331 (
xfs_båì_cur
 **)
°©e
);

333 i‡(!
îr‹
 && 
√w_agÀn
 > 0) {

334 
	`ASSERT
(
ªfc
->
ri_ty≥
 =
XFS_REFCOUNT_INCREASE
 ||

335 
ªfc
->
ri_ty≥
 =
XFS_REFCOUNT_DECREASE
);

336 
ªfc
->
ri_°¨tblock
 = 
√w_fsb
;

337 
ªfc
->
ri_blockcou¡
 = 
√w_agÀn
;

338  -
EAGAIN
;

340 
	`kmem_‰ì
(
ªfc
);

341  
îr‹
;

342 
	}
}

345 
STATIC
 

346 
	$xfs_ªfcou¡_upd©e_föish_˛ónup
(

347 
xfs_å™s
 *
ç
,

348 *
°©e
,

349 
îr‹
)

351 
xfs_båì_cur
 *
rcur
 = 
°©e
;

353 
	`xfs_ªfcou¡_föish_⁄e_˛ónup
(
ç
, 
rcur
, 
îr‹
);

354 
	}
}

357 
STATIC
 

358 
	$xfs_ªfcou¡_upd©e_ab‹t_öã¡
(

359 *
öã¡
)

361 
	}
}

364 
STATIC
 

365 
	$xfs_ªfcou¡_upd©e_ˇn˚l_ôem
(

366 
li°_hód
 *
ôem
)

368 
xfs_ªfcou¡_öã¡
 *
ªfc
;

370 
ªfc
 = 
	`c⁄èöî_of
(
ôem
, 
xfs_ªfcou¡_öã¡
, 
ri_li°
);

371 
	`kmem_‰ì
(
ªfc
);

372 
	}
}

374 c⁄° 
xfs_de„r_›_ty≥
 
	gxfs_ªfcou¡_upd©e_de„r_ty≥
 = {

375 .
ty≥
 = 
XFS_DEFER_OPS_TYPE_REFCOUNT
,

376 .
	gdiff_ôems
 = 
xfs_ªfcou¡_upd©e_diff_ôems
,

377 .
	g¸óã_öã¡
 = 
xfs_ªfcou¡_upd©e_¸óã_öã¡
,

378 .
	gab‹t_öã¡
 = 
xfs_ªfcou¡_upd©e_ab‹t_öã¡
,

379 .
	glog_ôem
 = 
xfs_ªfcou¡_upd©e_log_ôem
,

380 .
	g¸óã_d⁄e
 = 
xfs_ªfcou¡_upd©e_¸óã_d⁄e
,

381 .
	gföish_ôem
 = 
xfs_ªfcou¡_upd©e_föish_ôem
,

382 .
	gföish_˛ónup
 = 
xfs_ªfcou¡_upd©e_föish_˛ónup
,

383 .
	gˇn˚l_ôem
 = 
xfs_ªfcou¡_upd©e_ˇn˚l_ôem
,

388 
	$xfs_ªfcou¡_upd©e_öô_de„r_›
()

390 
	`xfs_de„r_öô_›_ty≥
(&
xfs_ªfcou¡_upd©e_de„r_ty≥
);

391 
	}
}

397 
	$xfs_bm≠_upd©e_diff_ôems
(

398 *
¥iv
,

399 
li°_hód
 *
a
,

400 
li°_hód
 *
b
)

402 
xfs_bm≠_öã¡
 *
ba
;

403 
xfs_bm≠_öã¡
 *
bb
;

405 
ba
 = 
	`c⁄èöî_of
(
a
, 
xfs_bm≠_öã¡
, 
bi_li°
);

406 
bb
 = 
	`c⁄èöî_of
(
b
, 
xfs_bm≠_öã¡
, 
bi_li°
);

407  
ba
->
bi_ow√r
->
i_öo
 - 
bb
->bi_owner->i_ino;

408 
	}
}

411 
STATIC
 *

412 
	$xfs_bm≠_upd©e_¸óã_öã¡
(

413 
xfs_å™s
 *
ç
,

414 
cou¡
)

416  
NULL
;

417 
	}
}

420 
STATIC
 

421 
	$xfs_bm≠_upd©e_log_ôem
(

422 
xfs_å™s
 *
ç
,

423 *
öã¡
,

424 
li°_hód
 *
ôem
)

426 
	}
}

429 
STATIC
 *

430 
	$xfs_bm≠_upd©e_¸óã_d⁄e
(

431 
xfs_å™s
 *
ç
,

432 *
öã¡
,

433 
cou¡
)

435  
NULL
;

436 
	}
}

439 
STATIC
 

440 
	$xfs_bm≠_upd©e_föish_ôem
(

441 
xfs_å™s
 *
ç
,

442 
xfs_de„r_›s
 *
d›
,

443 
li°_hód
 *
ôem
,

444 *
d⁄e_ôem
,

445 **
°©e
)

447 
xfs_bm≠_öã¡
 *
bm≠
;

448 
îr‹
;

450 
bm≠
 = 
	`c⁄èöî_of
(
ôem
, 
xfs_bm≠_öã¡
, 
bi_li°
);

451 
îr‹
 = 
	`xfs_bm≠_föish_⁄e
(
ç
, 
d›
,

452 
bm≠
->
bi_ow√r
,

453 
bm≠
->
bi_ty≥
, bm≠->
bi_whichf‹k
,

454 
bm≠
->
bi_bm≠
.
br_°¨toff
,

455 
bm≠
->
bi_bm≠
.
br_°¨tblock
,

456 
bm≠
->
bi_bm≠
.
br_blockcou¡
,

457 
bm≠
->
bi_bm≠
.
br_°©e
);

458 
	`kmem_‰ì
(
bm≠
);

459  
îr‹
;

460 
	}
}

463 
STATIC
 

464 
	$xfs_bm≠_upd©e_ab‹t_öã¡
(

465 *
öã¡
)

467 
	}
}

470 
STATIC
 

471 
	$xfs_bm≠_upd©e_ˇn˚l_ôem
(

472 
li°_hód
 *
ôem
)

474 
xfs_bm≠_öã¡
 *
bm≠
;

476 
bm≠
 = 
	`c⁄èöî_of
(
ôem
, 
xfs_bm≠_öã¡
, 
bi_li°
);

477 
	`kmem_‰ì
(
bm≠
);

478 
	}
}

480 c⁄° 
xfs_de„r_›_ty≥
 
	gxfs_bm≠_upd©e_de„r_ty≥
 = {

481 .
ty≥
 = 
XFS_DEFER_OPS_TYPE_BMAP
,

482 .
	gdiff_ôems
 = 
xfs_bm≠_upd©e_diff_ôems
,

483 .
	g¸óã_öã¡
 = 
xfs_bm≠_upd©e_¸óã_öã¡
,

484 .
	gab‹t_öã¡
 = 
xfs_bm≠_upd©e_ab‹t_öã¡
,

485 .
	glog_ôem
 = 
xfs_bm≠_upd©e_log_ôem
,

486 .
	g¸óã_d⁄e
 = 
xfs_bm≠_upd©e_¸óã_d⁄e
,

487 .
	gföish_ôem
 = 
xfs_bm≠_upd©e_föish_ôem
,

488 .
	gˇn˚l_ôem
 = 
xfs_bm≠_upd©e_ˇn˚l_ôem
,

493 
	$xfs_bm≠_upd©e_öô_de„r_›
()

495 
	`xfs_de„r_öô_›_ty≥
(&
xfs_bm≠_upd©e_de„r_ty≥
);

496 
	}
}

	@libxfs/freebsd.c

19 
	~"libxfs.h
"

20 
	~<sys/°©.h
>

21 
	~<sys/disk.h
>

22 
	~<sys/mou¡.h
>

23 
	~<sys/io˘l.h
>

24 
	~<sys/sys˘l.h
>

26 
	g∂©f‹m_has_uuid
 = 1;

27 *
¥og«me
;

30 
	$∂©f‹m_check_ismou¡ed
(*
«me
, *
block
, 
°©
 *
s
, 
vîbo£
)

32 
°©
 
°
;

33 
˙t
, 
i
;

34 
°©fs
 *
fsöfo
;

36 i‡(!
s
) {

37 i‡(
	`°©
(
block
, &
°
) < 0)

39 
s
 = &
°
;

43 i‡(((
°
.
°_mode
 & 
S_IFMT
Ë!
S_IFBLK
) &&

44 ((
°
.
°_mode
 & 
S_IFMT
Ë!
S_IFCHR
))

47 i‡((
˙t
 = 
	`gëm¡öfo
(&
fsöfo
, 
MNT_NOWAIT
)) == 0) {

48 
	`Ârötf
(
°dîr
,

49 
	`_
("%s: %sÖossibly containsá mounted filesystem\n"),

50 
¥og«me
, 
«me
);

54 
i
 = 0; i < 
˙t
; i++) {

55 i‡(
	`°rcmp
 (
«me
, 
fsöfo
[
i
].
f_m¡‰om«me
) != 0)

58 i‡(
vîbo£
)

59 
	`Ârötf
(
°dîr
,

60 
	`_
("%s: %s containsá mounted filesystem\n"),

61 
¥og«me
, 
«me
);

65  
i
 < 
˙t
;

66 
	}
}

69 
	$∂©f‹m_check_iswrôabÀ
(*
«me
, *
block
, 
°©
 *
s
)

71 
˙t
, 
i
;

72 
°©fs
 *
fsöfo
;

74 i‡((
˙t
 = 
	`gëm¡öfo
(&
fsöfo
, 
MNT_NOWAIT
)) == 0) {

75 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s containsáÖossibly writable, "

76 "mou¡ed fûesy°em\n"), 
¥og«me
, 
«me
);

80 
i
 = 0; i < 
˙t
; i++) {

81 i‡(
	`°rcmp
 (
«me
, 
fsöfo
[
i
].
f_m¡‰om«me
) != 0)

84 i‡(
fsöfo
[
i
].
f_Êags
 &
MNT_RDONLY
)

88 i‡(
i
 =
˙t
) {

89 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s containsá mountedánd writable "

90 "fûesy°em\n"), 
¥og«me
, 
«me
);

94 
	}
}

97 
	$∂©f‹m_£t_blocksize
(
fd
, *
∑th
, 
dev_t
 
devi˚
, 
blocksize
, 
Áèl
)

99  
Áèl
;

100 
	}
}

103 
	$∂©f‹m_Êush_devi˚
(
fd
, 
dev_t
 
devi˚
)

106 
	}
}

109 
	$∂©f‹m_födsizes
(*
∑th
, 
fd
, *
sz
, *
bsz
)

111 
°©
 
°
;

112 
__öt64_t
 
size
;

113 
u_öt
 
ssize
;

115 i‡(
	`f°©
(
fd
, &
°
) < 0) {

116 
	`Ârötf
(
°dîr
, 
	`_
("%s: "

118 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

119 
	`exô
(1);

122 i‡((
°
.
°_mode
 & 
S_IFMT
Ë=
S_IFREG
) {

123 *
sz
 = ()(
°
.
°_size
 >> 9);

124 *
bsz
 = 512;

128 i‡((
°
.
°_mode
 & 
S_IFMT
Ë!
S_IFCHR
) {

129 
	`Ârötf
(
°dîr
, 
	`_
("%s: Notá device or file: \"%s\"\n"),

130 
¥og«me
, 
∑th
);

131 
	`exô
(1);

134 i‡(
	`io˘l
(
fd
, 
DIOCGMEDIASIZE
, &
size
) != 0) {

135 
	`Ârötf
(
°dîr
, 
	`_
("%s: DIOCGMEDIASIZE failed on \"%s\": %s\n"),

136 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

137 
	`exô
(1);

140 i‡(
	`io˘l
(
fd
, 
DIOCGSECTORSIZE
, &
ssize
) != 0) {

141 
	`Ârötf
(
°dîr
, 
	`_
("%s: "

143 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

144 
	`exô
(1);

147 *
sz
 = (Ë(
size
 / 
ssize
);

148 *
bsz
 = ()
ssize
;

149 
	}
}

152 
	$∂©f‹m_födøw∑th
(*
∑th
)

154  
∑th
;

155 
	}
}

158 
	$∂©f‹m_födblock∑th
(*
∑th
)

160  
∑th
;

161 
	}
}

164 
	$∂©f‹m_dúe˘_blockdev
()

167 
	}
}

170 
	$∂©f‹m_Æign_blockdev
()

173 
	}
}

176 
	$∂©f‹m_≈roc
()

178 
n˝u
;

179 
size_t
 
Àn
 = (
n˝u
);

180 
mib
[2] = {
CTL_HW
, 
HW_NCPU
};

182 i‡(
	`sys˘l
(
mib
, 2, &
n˝u
, &
Àn
, 
NULL
, 0) < 0)

183 
n˝u
 = 1;

185  
n˝u
;

186 
	}
}

189 
	$∂©f‹m_physmem
()

191 
physmem
;

192 
size_t
 
Àn
 = (
physmem
);

193 
mib
[2] = {
CTL_HW
, 
HW_PHYSMEM
};

195 i‡(
	`sys˘l
(
mib
, 2, &
physmem
, &
Àn
, 
NULL
, 0) < 0) {

196 
	`Ârötf
(
°dîr
, 
	`_
("%s: can't determine memory size\n"),

197 
¥og«me
);

198 
	`exô
(1);

200  
physmem
 >> 10;

201 
	}
}

	@libxfs/gen_crc32table.c

1 
	~<°dio.h
>

2 
	~"¸c32defs.h
"

3 
	~<öây≥s.h
>

5 
	#ENTRIES_PER_LINE
 4

	)

7 #i‡
CRC_LE_BITS
 > 8

8 
	#LE_TABLE_ROWS
 (
CRC_LE_BITS
/8)

	)

9 
	#LE_TABLE_SIZE
 256

	)

11 
	#LE_TABLE_ROWS
 1

	)

12 
	#LE_TABLE_SIZE
 (1 << 
CRC_LE_BITS
)

	)

15 #i‡
CRC_BE_BITS
 > 8

16 
	#BE_TABLE_ROWS
 (
CRC_BE_BITS
/8)

	)

17 
	#BE_TABLE_SIZE
 256

	)

19 
	#BE_TABLE_ROWS
 1

	)

20 
	#BE_TABLE_SIZE
 (1 << 
CRC_BE_BITS
)

	)

23 
uöt32_t
 
	g¸c32èbÀ_À
[
LE_TABLE_ROWS
][256];

24 
uöt32_t
 
	g¸c32˘abÀ_À
[
LE_TABLE_ROWS
][256];

38 
¸c32öô_À_gíîic
(c⁄° 
uöt32_t
 
pﬁynomül
,

39 
uöt32_t
 (*
èb
)[256])

41 
	gi
, 
	gj
;

42 
uöt32_t
 
	g¸c
 = 1;

44 
	gèb
[0][0] = 0;

46 
	gi
 = 
LE_TABLE_SIZE
 >> 1; i; i >>= 1) {

47 
¸c
 = (¸¯>> 1Ë^ ((¸¯& 1Ë? 
pﬁynomül
 : 0);

48 
	gj
 = 0; j < 
	gLE_TABLE_SIZE
; j +2 * 
i
)

49 
èb
[0][
i
 + 
j
] = 
¸c
 ^Åab[0][j];

51 
	gi
 = 0; i < 
	gLE_TABLE_SIZE
; i++) {

52 
	g¸c
 = 
èb
[0][
i
];

53 
	gj
 = 1; j < 
	gLE_TABLE_ROWS
; j++) {

54 
	g¸c
 = 
èb
[0][
¸c
 & 0xff] ^ (crc >> 8);

55 
	gèb
[
j
][
i
] = 
¸c
;

60 
	$¸c32öô_À
()

62 
	`¸c32öô_À_gíîic
(
CRCPOLY_LE
, 
¸c32èbÀ_À
);

63 
	}
}

65 
	$¸c32cöô_À
()

67 
	`¸c32öô_À_gíîic
(
CRC32C_POLY_LE
, 
¸c32˘abÀ_À
);

68 
	}
}

74 
	$¸c32öô_be
()

76 
i
, 
j
;

77 
uöt32_t
 
¸c
 = 0x80000000;

79 
¸c32èbÀ_be
[0][0] = 0;

81 
i
 = 1; i < 
BE_TABLE_SIZE
; i <<= 1) {

82 
¸c
 = (¸¯<< 1Ë^ ((¸¯& 0x80000000Ë? 
CRCPOLY_BE
 : 0);

83 
j
 = 0; j < 
i
; j++)

84 
¸c32èbÀ_be
[0][
i
 + 
j
] = 
¸c
 ^ crc32table_be[0][j];

86 
i
 = 0; i < 
BE_TABLE_SIZE
; i++) {

87 
¸c
 = 
¸c32èbÀ_be
[0][
i
];

88 
j
 = 1; j < 
BE_TABLE_ROWS
; j++) {

89 
¸c
 = 
¸c32èbÀ_be
[0][(crc >> 24) & 0xff] ^ (crc << 8);

90 
¸c32èbÀ_be
[
j
][
i
] = 
¸c
;

93 
	}
}

96 
ouçut_èbÀ
(
uöt32_t
 (*
èbÀ
)[256], 
rows
, 
Àn
, *
å™s
)

98 
	gi
, 
	gj
;

100 
	gj
 = 0 ; j < 
	grows
; j++) {

101 
¥ötf
("{");

102 
	gi
 = 0; i < 
	gÀn
 - 1; i++) {

103 i‡(
	gi
 % 
	gENTRIES_PER_LINE
 == 0)

104 
¥ötf
("\n");

105 
¥ötf
("%s(0x%8.8xL), ", 
å™s
, 
èbÀ
[
j
][
i
]);

107 
¥ötf
("%s(0x%8.8xL)},\n", 
å™s
, 
èbÀ
[
j
][
Àn
 - 1]);

111 
	$maö
(
¨gc
, ** 
¨gv
)

113 
	`¥ötf
("/*Åhis file is generated - doÇotÉdit */\n\n");

115 i‡(
CRC_LE_BITS
 > 1) {

116 
	`¸c32öô_À
();

117 
	`¥ötf
("static u32 crc32table_le[%d][%d] = {",

118 
LE_TABLE_ROWS
, 
LE_TABLE_SIZE
);

119 
	`ouçut_èbÀ
(
¸c32èbÀ_À
, 
LE_TABLE_ROWS
,

120 
LE_TABLE_SIZE
, "tole");

121 
	`¥ötf
("};\n");

125 i‡(
CRC_BE_BITS
 > 1) {

126 
	`¸c32öô_be
();

127 
	`¥ötf
("static u32 crc32table_be[%d][%d] = {",

128 
BE_TABLE_ROWS
, 
BE_TABLE_SIZE
);

129 
	`ouçut_èbÀ
(
¸c32èbÀ_be
, 
LE_TABLE_ROWS
,

130 
BE_TABLE_SIZE
, "tobe");

131 
	`¥ötf
("};\n");

134 i‡(
CRC_LE_BITS
 > 1) {

135 
	`¸c32cöô_À
();

136 
	`¥ötf
("static u32 crc32ctable_le[%d][%d] = {",

137 
LE_TABLE_ROWS
, 
LE_TABLE_SIZE
);

138 
	`ouçut_èbÀ
(
¸c32˘abÀ_À
, 
LE_TABLE_ROWS
,

139 
LE_TABLE_SIZE
, "tole");

140 
	`¥ötf
("};\n");

144 
	}
}

	@libxfs/init.c

19 
	~<sys/°©.h
>

20 
	~"öô.h
"

22 
	~"libxfs_¥iv.h
"

23 
	~"xfs_fs.h
"

24 
	~"xfs_sh¨ed.h
"

25 
	~"xfs_f‹m©.h
"

26 
	~"xfs_log_f‹m©.h
"

27 
	~"xfs_å™s_ªsv.h
"

28 
	~"xfs_mou¡.h
"

29 
	~"xfs_de„r.h
"

30 
	~"xfs_öode_buf.h
"

31 
	~"xfs_öode_f‹k.h
"

32 
	~"xfs_öode.h
"

33 
	~"xfs_å™s.h
"

34 
	~"xfs_rm≠_båì.h
"

35 
	~"xfs_ªfcou¡_båì.h
"

37 
	~"libxfs.h
"

39 *
	g¥og«me
 = "libxfs";

41 
ˇche
 *
	glibxfs_bˇche
;

42 
	glibxfs_bhash_size
;

44 
	gu£_xfs_buf_lock
;

46 
m™age_z⁄es
();

48 
kmem_z⁄e_t
 *
	gxfs_öode_z⁄e
;

53 
	#MAX_DEVS
 10

	)

54 
	g√xtÁkedev
 = -1;

55 
	sdev_to_fd
 {

56 
dev_t
 
	mdev
;

57 
	mfd
;

58 } 
	gdev_m≠
[
MAX_DEVS
]={{0}};

69 
	$check_iß˘ive
(*
«me
, *
block
, 
Áèl
)

71 
°©
 
°
;

73 i‡(
	`°©
(
block
, &
°
) < 0)

75 i‡((
°
.
°_mode
 & 
S_IFMT
Ë!
S_IFBLK
)

77 i‡(
	`∂©f‹m_check_ismou¡ed
(
«me
, 
block
, &
°
, 0) == 0)

79 i‡(
	`∂©f‹m_check_iswrôabÀ
(
«me
, 
block
, &
°
))

80  
Áèl
 ? 1 : 0;

82 
	}
}

89 
	$libxfs_devi˚_to_fd
(
dev_t
 
devi˚
)

91 
d
;

93 
d
 = 0; d < 
MAX_DEVS
; d++)

94 i‡(
dev_m≠
[
d
].
dev
 =
devi˚
)

95  
dev_m≠
[
d
].
fd
;

97 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s: device %lld isÇot open\n"),

98 
¥og«me
, 
__FUNCTION__
, ()
devi˚
);

99 
	`exô
(1);

101 
	}
}

106 
dev_t


107 
	$libxfs_devi˚_›í
(*
∑th
, 
¸ót
, 
xÊags
, 
£tblksize
)

109 
dev_t
 
dev
;

110 
fd
, 
d
, 
Êags
;

111 
ªad⁄ly
, 
dio
, 
ex˛
;

112 
°©
 
°©b
;

114 
ªad⁄ly
 = (
xÊags
 & 
LIBXFS_ISREADONLY
);

115 
ex˛
 = (
xÊags
 & 
LIBXFS_EXCLUSIVELY
Ë&& !
¸ót
;

116 
dio
 = (
xÊags
 & 
LIBXFS_DIRECT
Ë&& !
¸ót
 && 
	`∂©f‹m_dúe˘_blockdev
();

118 
ªåy
:

119 
Êags
 = (
ªad⁄ly
 ? 
O_RDONLY
 : 
O_RDWR
) | \

120 (
¸ót
 ? (
O_CREAT
|
O_TRUNC
) : 0) | \

121 (
dio
 ? 
O_DIRECT
 : 0) | \

122 (
ex˛
 ? 
O_EXCL
 : 0);

124 i‡((
fd
 = 
	`›í
(
∑th
, 
Êags
, 0666)) < 0) {

125 i‡(
î∫o
 =
EINVAL
 && --
dio
 == 0)

126 
ªåy
;

127 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

128 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

129 
	`exô
(1);

132 i‡(
	`f°©
(
fd
, &
°©b
) < 0) {

133 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot stat %s: %s\n"),

134 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

135 
	`exô
(1);

138 i‡(!
ªad⁄ly
 && 
£tblksize
 && (
°©b
.
°_mode
 & 
S_IFMT
Ë=
S_IFBLK
) {

139 i‡(
£tblksize
 == 1)

141 ()
	`∂©f‹m_£t_blocksize
(
fd
, 
∑th
, 
°©b
.
°_rdev
, 
XFS_MIN_SECTORSIZE
, 0);

144 i‡(
	`∂©f‹m_£t_blocksize
(
fd
, 
∑th
, 
°©b
.
°_rdev
, 
£tblksize
, 1))

145 
	`exô
(1);

154 
dev
 = (
°©b
.
°_rdev
Ë? (°©b.°_rdevË: (
√xtÁkedev
--);

156 
d
 = 0; d < 
MAX_DEVS
; d++)

157 i‡(
dev_m≠
[
d
].
dev
 == dev) {

158 
	`Ârötf
(
°dîr
, 
	`_
("%s: device %lld isálready open\n"),

159 
¥og«me
, ()
dev
);

160 
	`exô
(1);

163 
d
 = 0; d < 
MAX_DEVS
; d++)

164 i‡(!
dev_m≠
[
d
].
dev
) {

165 
dev_m≠
[
d
].
dev
 = dev;

166 
dev_m≠
[
d
].
fd
 = fd;

168  
dev
;

171 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s:Åoo many open devices\n"),

172 
¥og«me
, 
__FUNCTION__
);

173 
	`exô
(1);

175 
	}
}

178 
	$libxfs_devi˚_˛o£
(
dev_t
 
dev
)

180 
d
;

182 
d
 = 0; d < 
MAX_DEVS
; d++)

183 i‡(
dev_m≠
[
d
].
dev
 == dev) {

184 
fd
;

186 
fd
 = 
dev_m≠
[
d
].fd;

187 
dev_m≠
[
d
].
dev
 = dev_m≠[d].
fd
 = 0;

189 
	`fsync
(
fd
);

190 
	`∂©f‹m_Êush_devi˚
(
fd
, 
dev
);

191 
	`˛o£
(
fd
);

196 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s: device %lld isÇot open\n"),

197 
¥og«me
, 
__FUNCTION__
, ()
dev
);

198 
	`exô
(1);

199 
	}
}

202 
	$check_›í
(*
∑th
, 
Êags
, **
øwfûe
, **
blockfûe
)

204 
ªad⁄ly
 = (
Êags
 & 
LIBXFS_ISREADONLY
);

205 
öa˘ive
 = (
Êags
 & 
LIBXFS_ISINACTIVE
);

206 
d™gîou¶y
 = (
Êags
 & 
LIBXFS_DANGEROUSLY
);

207 
°©
 
°buf
;

209 i‡(
	`°©
(
∑th
, &
°buf
) < 0) {

210 
	`≥º‹
(
∑th
);

213 i‡(!(*
øwfûe
 = 
	`∂©f‹m_födøw∑th
(
∑th
))) {

214 
	`Ârötf
(
°dîr
, 
	`_
("%s: "

216 
¥og«me
, 
∑th
);

219 i‡(!(*
blockfûe
 = 
	`∂©f‹m_födblock∑th
(
∑th
))) {

220 
	`Ârötf
(
°dîr
, 
	`_
("%s: "

222 
¥og«me
, 
∑th
);

225 i‡(!
ªad⁄ly
 && !
öa˘ive
 && 
	`∂©f‹m_check_ismou¡ed
(
∑th
, *
blockfûe
, 
NULL
, 1))

228 i‡(
öa˘ive
 && 
	`check_iß˘ive
(
∑th
, *
blockfûe
, ((
ªad⁄ly
|
d™gîou¶y
)?1:0)))

232 
	}
}

239 
	$libxfs_öô
(
libxfs_öô_t
 *
a
)

241 *
blockfûe
;

242 
curdú
[
MAXPATHLEN
];

243 *
d«me
;

244 
d∑th
[25];

245 
fd
;

246 *
log«me
;

247 
log∑th
[25];

248 
√edcd
;

249 *
øwfûe
;

250 *
π«me
;

251 
π∑th
[25];

252 
rvÆ
 = 0;

253 
Êags
;

255 
d∑th
[0] = 
log∑th
[0] = 
π∑th
[0] = '\0';

256 
d«me
 = 
a
->dname;

257 
log«me
 = 
a
->logname;

258 
π«me
 = 
a
->rtname;

259 
a
->
dfd
 =á->
logfd
 =á->
πfd
 = -1;

260 
a
->
ddev
 =á->
logdev
 =á->
πdev
 = 0;

261 
a
->
dsize
 =á->
lbsize
 =á->
πbsize
 = 0;

262 
a
->
dbsize
 =á->
logBBsize
 =á->
logBB°¨t
 =á->
πsize
 = 0;

264 ()
	`gëcwd
(
curdú
,
MAXPATHLEN
);

265 
√edcd
 = 0;

266 
fd
 = -1;

267 
Êags
 = (
a
->
i§ód⁄ly
 |á->
isdúe˘
);

269 
	`xfs_exã¡_‰ì_öô_de„r_›
();

270 
	`xfs_rm≠_upd©e_öô_de„r_›
();

271 
	`xfs_ªfcou¡_upd©e_öô_de„r_›
();

272 
	`xfs_bm≠_upd©e_öô_de„r_›
();

274 
	`ødix_åì_öô
();

276 i‡(
a
->
vﬁ«me
) {

277 if(!
	`check_›í
(
a
->
vﬁ«me
,
Êags
,&
øwfûe
,&
blockfûe
))

278 
d⁄e
;

279 
√edcd
 = 1;

280 
fd
 = 
	`›í
(
øwfûe
, 
O_RDONLY
);

281 
d«me
 = 
a
->d«mêa->
vﬁ«me
;

282 
a
->
vﬁ«me
 = 
NULL
;

284 i‡(
d«me
) {

285 i‡(
d«me
[0] !'/' && 
√edcd
)

286 
	`chdú
(
curdú
);

287 i‡(
a
->
disfûe
) {

288 
a
->
ddev

	`libxfs_devi˚_›í
(
d«me
,á->
d¸ót
, 
Êags
,

289 
a
->
£tblksize
);

290 
a
->
dfd
 = 
	`libxfs_devi˚_to_fd
◊->
ddev
);

291 
	`∂©f‹m_födsizes
(
d«me
, 
a
->
dfd
, &a->
dsize
,

292 &
a
->
dbsize
);

294 i‡(!
	`check_›í
(
d«me
, 
Êags
, &
øwfûe
, &
blockfûe
))

295 
d⁄e
;

296 
a
->
ddev
 = 
	`libxfs_devi˚_›í
(
øwfûe
,

297 
a
->
d¸ót
, 
Êags
,á->
£tblksize
);

298 
a
->
dfd
 = 
	`libxfs_devi˚_to_fd
◊->
ddev
);

299 
	`∂©f‹m_födsizes
(
øwfûe
, 
a
->
dfd
,

300 &
a
->
dsize
, &a->
dbsize
);

302 
√edcd
 = 1;

304 
a
->
dsize
 = 0;

305 i‡(
log«me
) {

306 i‡(
log«me
[0] !'/' && 
√edcd
)

307 
	`chdú
(
curdú
);

308 i‡(
a
->
lisfûe
) {

309 
a
->
logdev
 = 
	`libxfs_devi˚_›í
(
log«me
,

310 
a
->
l¸ót
, 
Êags
,á->
£tblksize
);

311 
a
->
logfd
 = 
	`libxfs_devi˚_to_fd
◊->
logdev
);

312 
	`∂©f‹m_födsizes
(
d«me
, 
a
->
logfd
, &a->
logBBsize
,

313 &
a
->
lbsize
);

315 i‡(!
	`check_›í
(
log«me
, 
Êags
, &
øwfûe
, &
blockfûe
))

316 
d⁄e
;

317 
a
->
logdev
 = 
	`libxfs_devi˚_›í
(
øwfûe
,

318 
a
->
l¸ót
, 
Êags
,á->
£tblksize
);

319 
a
->
logfd
 = 
	`libxfs_devi˚_to_fd
◊->
logdev
);

320 
	`∂©f‹m_födsizes
(
øwfûe
, 
a
->
logfd
,

321 &
a
->
logBBsize
, &a->
lbsize
);

323 
√edcd
 = 1;

325 
a
->
logBBsize
 = 0;

326 i‡(
π«me
) {

327 i‡(
π«me
[0] !'/' && 
√edcd
)

328 
	`chdú
(
curdú
);

329 i‡(
a
->
risfûe
) {

330 
a
->
πdev
 = 
	`libxfs_devi˚_›í
(
π«me
,

331 
a
->
r¸ót
, 
Êags
,á->
£tblksize
);

332 
a
->
πfd
 = 
	`libxfs_devi˚_to_fd
◊->
πdev
);

333 
	`∂©f‹m_födsizes
(
d«me
, 
a
->
πfd
, &a->
πsize
,

334 &
a
->
πbsize
);

336 i‡(!
	`check_›í
(
π«me
, 
Êags
, &
øwfûe
, &
blockfûe
))

337 
d⁄e
;

338 
a
->
πdev
 = 
	`libxfs_devi˚_›í
(
øwfûe
,

339 
a
->
r¸ót
, 
Êags
,á->
£tblksize
);

340 
a
->
πfd
 = 
	`libxfs_devi˚_to_fd
◊->
πdev
);

341 
	`∂©f‹m_födsizes
(
øwfûe
, 
a
->
πfd
,

342 &
a
->
πsize
, &a->
πbsize
);

344 
√edcd
 = 1;

346 
a
->
πsize
 = 0;

347 i‡(
a
->
dsize
 < 0) {

348 
	`Ârötf
(
°dîr
, 
	`_
("%s: can't get size for data subvolume\n"),

349 
¥og«me
);

350 
d⁄e
;

352 i‡(
a
->
logBBsize
 < 0) {

353 
	`Ârötf
(
°dîr
, 
	`_
("%s: can't get size forÜog subvolume\n"),

354 
¥og«me
);

355 
d⁄e
;

357 i‡(
a
->
πsize
 < 0) {

358 
	`Ârötf
(
°dîr
, 
	`_
("%s: can't get size forÑealtime subvolume\n"),

359 
¥og«me
);

360 
d⁄e
;

362 i‡(
√edcd
)

363 
	`chdú
(
curdú
);

364 i‡(!
libxfs_bhash_size
)

365 
libxfs_bhash_size
 = 
	`LIBXFS_BHASHSIZE
(
sbp
);

366 
libxfs_bˇche
 = 
	`ˇche_öô
(
a
->
bˇche_Êags
, 
libxfs_bhash_size
,

367 &
libxfs_bˇche_›î©i⁄s
);

368 
u£_xfs_buf_lock
 = 
a
->
u£buÊock
;

369 
	`m™age_z⁄es
(0);

370 
rvÆ
 = 1;

371 
d⁄e
:

372 i‡(
d∑th
[0])

373 
	`u∆ök
(
d∑th
);

374 i‡(
log∑th
[0])

375 
	`u∆ök
(
log∑th
);

376 i‡(
π∑th
[0])

377 
	`u∆ök
(
π∑th
);

378 i‡(
fd
 >= 0)

379 
	`˛o£
(
fd
);

380 i‡(!
rvÆ
 && 
a
->
ddev
)

381 
	`libxfs_devi˚_˛o£
(
a
->
ddev
);

382 i‡(!
rvÆ
 && 
a
->
logdev
)

383 
	`libxfs_devi˚_˛o£
(
a
->
logdev
);

384 i‡(!
rvÆ
 && 
a
->
πdev
)

385 
	`libxfs_devi˚_˛o£
(
a
->
πdev
);

386  
rvÆ
;

387 
	}
}

394 
	$m™age_z⁄es
(
ªÀa£
)

396 
kmem_z⁄e_t
 *
xfs_buf_z⁄e
;

397 
kmem_z⁄e_t
 *
xfs_ûi_z⁄e
;

398 
kmem_z⁄e_t
 *
xfs_if‹k_z⁄e
;

399 
kmem_z⁄e_t
 *
xfs_buf_ôem_z⁄e
;

400 
kmem_z⁄e_t
 *
xfs_da_°©e_z⁄e
;

401 
kmem_z⁄e_t
 *
xfs_båì_cur_z⁄e
;

402 
kmem_z⁄e_t
 *
xfs_bm≠_‰ì_ôem_z⁄e
;

403 
kmem_z⁄e_t
 *
xfs_log_ôem_desc_z⁄e
;

404 
	`xfs_dú_°¨tup
();

406 i‡(
ªÀa£
) {

407 
	`kmem_‰ì
(
xfs_buf_z⁄e
);

408 
	`kmem_‰ì
(
xfs_öode_z⁄e
);

409 
	`kmem_‰ì
(
xfs_if‹k_z⁄e
);

410 
	`kmem_‰ì
(
xfs_buf_ôem_z⁄e
);

411 
	`kmem_‰ì
(
xfs_da_°©e_z⁄e
);

412 
	`kmem_‰ì
(
xfs_båì_cur_z⁄e
);

413 
	`kmem_‰ì
(
xfs_bm≠_‰ì_ôem_z⁄e
);

414 
	`kmem_‰ì
(
xfs_log_ôem_desc_z⁄e
);

418 
xfs_buf_z⁄e
 = 
	`kmem_z⁄e_öô
((
xfs_buf_t
), "xfs_buffer");

419 
xfs_öode_z⁄e
 = 
	`kmem_z⁄e_öô
((
xfs_öode
), "xfs_inode");

420 
xfs_if‹k_z⁄e
 = 
	`kmem_z⁄e_öô
((
xfs_if‹k_t
), "xfs_ifork");

421 
xfs_ûi_z⁄e
 = 
	`kmem_z⁄e_öô
(

422 (
xfs_öode_log_ôem_t
), "xfs_inode_log_item");

423 
xfs_buf_ôem_z⁄e
 = 
	`kmem_z⁄e_öô
(

424 (
xfs_buf_log_ôem_t
), "xfs_buf_log_item");

425 
xfs_da_°©e_z⁄e
 = 
	`kmem_z⁄e_öô
(

426 (
xfs_da_°©e_t
), "xfs_da_state");

427 
xfs_båì_cur_z⁄e
 = 
	`kmem_z⁄e_öô
(

428 (
xfs_båì_cur_t
), "xfs_btree_cur");

429 
xfs_bm≠_‰ì_ôem_z⁄e
 = 
	`kmem_z⁄e_öô
(

430 (
xfs_exã¡_‰ì_ôem
),

432 
xfs_log_ôem_desc_z⁄e
 = 
	`kmem_z⁄e_öô
(

433 (
xfs_log_ôem_desc
), "xfs_log_item_desc");

434 
	`xfs_dú_°¨tup
();

435 
	}
}

441 
	$πmou¡_öô
(

442 
xfs_mou¡_t
 *
mp
,

443 
Êags
)

445 
xfs_buf_t
 *
bp
;

446 
xfs_daddr_t
 
d
;

447 
xfs_sb_t
 *
sbp
;

449 
sbp
 = &
mp
->
m_sb
;

450 i‡(
sbp
->
sb_rblocks
 == 0)

452 i‡(
mp
->
m_πdev_èrgp
->
dev
 =0 && !(
Êags
 & 
LIBXFS_MOUNT_DEBUGGER
)) {

453 
	`Ârötf
(
°dîr
, 
	`_
("%s: filesystem hasáÑealtime subvolume\n"),

454 
¥og«me
);

457 
mp
->
m_rsumÀvñs
 = 
sbp
->
sb_ªxt¶og
 + 1;

458 
mp
->
m_rsumsize
 =

459 (
uöt
)(
xfs_sumöfo_t
Ë* 
mp
->
m_rsumÀvñs
 *

460 
sbp
->
sb_rbmblocks
;

461 
mp
->
m_rsumsize
 = 
	`roundup
(mp->m_rsumsize, 
sbp
->
sb_blocksize
);

462 
mp
->
m_rbmù
 = mp->
m_rsumù
 = 
NULL
;

467 i‡(
Êags
 & 
LIBXFS_MOUNT_DEBUGGER
)

473 
d
 = (
xfs_daddr_t
)
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_rblocks
);

474 i‡(
	`XFS_BB_TO_FSB
(
mp
, 
d
Ë!mp->
m_sb
.
sb_rblocks
) {

475 
	`Ârötf
(
°dîr
, 
	`_
("%s:Ñealtime init - %llu != %llu\n"),

476 
¥og«me
, (Ë
	`XFS_BB_TO_FSB
(
mp
, 
d
),

477 (Ë
mp
->
m_sb
.
sb_rblocks
);

480 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_πdev
,

481 
d
 - 
	`XFS_FSB_TO_BB
(
mp
, 1), XFS_FSB_TO_BB(mp, 1), 0, 
NULL
);

482 i‡(
bp
 =
NULL
) {

483 
	`Ârötf
(
°dîr
, 
	`_
("%s:Ñealtime size check failed\n"),

484 
¥og«me
);

487 
	`libxfs_putbuf
(
bp
);

489 
	}
}

492 
	$libxfs_öôülize_≥øg
(

493 
xfs_mou¡_t
 *
mp
,

494 
xfs_agnumbî_t
 
agcou¡
,

495 
xfs_agnumbî_t
 *
maxagi
)

497 
xfs_agnumbî_t
 
ödex
, 
max_mëad©a
;

498 
xfs_agnumbî_t
 
fú°_öôüli£d
 = 0;

499 
xfs_≥øg_t
 *
∑g
;

500 
xfs_agöo_t
 
agöo
;

501 
xfs_öo_t
 
öo
;

502 
xfs_sb_t
 *
sbp
 = &
mp
->
m_sb
;

503 
îr‹
 = -
ENOMEM
;

510 
ödex
 = 0; index < 
agcou¡
; index++) {

511 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
ödex
);

512 i‡(
∑g
) {

513 
	`xfs_≥øg_put
(
∑g
);

516 i‡(!
fú°_öôüli£d
)

517 
fú°_öôüli£d
 = 
ödex
;

519 
∑g
 = 
	`kmem_zÆloc
((*∑g), 
KM_MAYFAIL
);

520 i‡(!
∑g
)

521 
out_unwöd
;

522 
∑g
->
∑g_agno
 = 
ödex
;

523 
∑g
->
∑g_mou¡
 = 
mp
;

525 i‡(
	`ødix_åì_ö£π
(&
mp
->
m_≥øg_åì
, 
ödex
, 
∑g
)) {

526 
îr‹
 = -
EEXIST
;

527 
out_unwöd
;

535 
agöo
 = 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
sbp
->
sb_agblocks
 - 1, 0);

536 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agcou¡
 - 1, 
agöo
);

538 i‡((
mp
->
m_Êags
 & 
XFS_MOUNT_SMALL_INUMS
Ë&& 
öo
 > 
XFS_MAXINUMBER_32
)

539 
mp
->
m_Êags
 |
XFS_MOUNT_32BITINODES
;

541 
mp
->
m_Êags
 &~
XFS_MOUNT_32BITINODES
;

543 i‡(
mp
->
m_Êags
 & 
XFS_MOUNT_32BITINODES
) {

548 i‡(
mp
->
m_maxicou¡
) {

549 
__uöt64_t
 
icou¡
;

551 
icou¡
 = 
sbp
->
sb_dblocks
 * sbp->
sb_imax_p˘
;

552 
	`do_div
(
icou¡
, 100);

553 
icou¡
 +
sbp
->
sb_agblocks
 - 1;

554 
	`do_div
(
icou¡
, 
sbp
->
sb_agblocks
);

555 
max_mëad©a
 = 
icou¡
;

557 
max_mëad©a
 = 
agcou¡
;

560 
ödex
 = 0; index < 
agcou¡
; index++) {

561 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
ödex
, 
agöo
);

562 i‡(
öo
 > 
XFS_MAXINUMBER_32
) {

563 
ödex
++;

567 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
ödex
);

568 
∑g
->
∑gi_öodeok
 = 1;

569 i‡(
ödex
 < 
max_mëad©a
)

570 
∑g
->
∑gf_mëad©a
 = 1;

571 
	`xfs_≥øg_put
(
∑g
);

574 
ödex
 = 0; index < 
agcou¡
; index++) {

575 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
ödex
);

576 
∑g
->
∑gi_öodeok
 = 1;

577 
	`xfs_≥øg_put
(
∑g
);

581 i‡(
maxagi
)

582 *
maxagi
 = 
ödex
;

584 
mp
->
m_ag_¥óŒoc_blocks
 = 
	`xfs_¥óŒoc_blocks
(mp);

587 
out_unwöd
:

588 
	`kmem_‰ì
(
∑g
);

589 ; 
ödex
 > 
fú°_öôüli£d
; index--) {

590 
∑g
 = 
	`ødix_åì_dñëe
(&
mp
->
m_≥øg_åì
, 
ödex
);

591 
	`kmem_‰ì
(
∑g
);

593  
îr‹
;

594 
	}
}

596 
xfs_bu·¨g
 *

597 
	$libxfs_bu·¨g_Æloc
(

598 
xfs_mou¡
 *
mp
,

599 
dev_t
 
dev
)

601 
xfs_bu·¨g
 *
bç
;

603 
bç
 = 
	`mÆloc
((*btp));

604 i‡(!
bç
) {

605 
	`Ârötf
(
°dîr
, 
	`_
("%s: buftarg init failed\n"),

606 
¥og«me
);

607 
	`exô
(1);

609 
bç
->
bt_mou¡
 = 
mp
;

610 
bç
->
dev
 = dev;

611  
bç
;

612 
	}
}

615 
	$libxfs_bu·¨g_öô
(

616 
xfs_mou¡
 *
mp
,

617 
dev_t
 
dev
,

618 
dev_t
 
logdev
,

619 
dev_t
 
πdev
)

621 i‡(
mp
->
m_ddev_èrgp
) {

623 i‡(
mp
->
m_ddev_èrgp
->
dev
 != dev ||

624 
mp
->
m_ddev_èrgp
->
bt_mou¡
 != mp) {

625 
	`Ârötf
(
°dîr
,

626 
	`_
("%s: bad buftargÑeinit, ddev\n"),

627 
¥og«me
);

628 
	`exô
(1);

630 i‡(!
logdev
 ||Üogdev =
dev
) {

631 i‡(
mp
->
m_logdev_èrgp
 !mp->
m_ddev_èrgp
) {

632 
	`Ârötf
(
°dîr
,

633 
	`_
("%s: bad buftargÑeinit,Üdev mismatch\n"),

634 
¥og«me
);

635 
	`exô
(1);

637 } i‡(
mp
->
m_logdev_èrgp
->
dev
 !
logdev
 ||

638 
mp
->
m_logdev_èrgp
->
bt_mou¡
 != mp) {

639 
	`Ârötf
(
°dîr
,

640 
	`_
("%s: bad buftargÑeinit,Üogdev\n"),

641 
¥og«me
);

642 
	`exô
(1);

644 i‡(
πdev
 && (
mp
->
m_πdev_èrgp
->
dev
 !=Ñtdev ||

645 
mp
->
m_πdev_èrgp
->
bt_mou¡
 != mp)) {

646 
	`Ârötf
(
°dîr
,

647 
	`_
("%s: bad buftargÑeinit,Ñtdev\n"),

648 
¥og«me
);

649 
	`exô
(1);

654 
mp
->
m_ddev_èrgp
 = 
	`libxfs_bu·¨g_Æloc
(mp, 
dev
);

655 i‡(!
logdev
 ||Üogdev =
dev
)

656 
mp
->
m_logdev_èrgp
 = mp->
m_ddev_èrgp
;

658 
mp
->
m_logdev_èrgp
 = 
	`libxfs_bu·¨g_Æloc
(mp, 
logdev
);

659 
mp
->
m_πdev_èrgp
 = 
	`libxfs_bu·¨g_Æloc
(mp, 
πdev
);

660 
	}
}

667 
xfs_mou¡_t
 *

668 
	$libxfs_mou¡
(

669 
xfs_mou¡_t
 *
mp
,

670 
xfs_sb_t
 *
sb
,

671 
dev_t
 
dev
,

672 
dev_t
 
logdev
,

673 
dev_t
 
πdev
,

674 
Êags
)

676 
xfs_daddr_t
 
d
;

677 
xfs_buf_t
 *
bp
;

678 
xfs_sb_t
 *
sbp
;

679 
îr‹
;

681 
	`libxfs_bu·¨g_öô
(
mp
, 
dev
, 
logdev
, 
πdev
);

683 
mp
->
m_Êags
 = (
LIBXFS_MOUNT_32BITINODES
|
LIBXFS_MOUNT_32BITINOOPT
);

684 
mp
->
m_sb
 = *
sb
;

685 
	`INIT_RADIX_TREE
(&
mp
->
m_≥øg_åì
, 
GFP_KERNEL
);

686 
sbp
 = &(
mp
->
m_sb
);

688 
	`xfs_sb_mou¡_comm⁄
(
mp
, 
sb
);

690 
	`xfs_Æloc_compuã_maxÀvñs
(
mp
);

691 
	`xfs_bm≠_compuã_maxÀvñs
(
mp
, 
XFS_DATA_FORK
);

692 
	`xfs_bm≠_compuã_maxÀvñs
(
mp
, 
XFS_ATTR_FORK
);

693 
	`xfs_üŒoc_compuã_maxÀvñs
(
mp
);

694 
	`xfs_rm≠bt_compuã_maxÀvñs
(
mp
);

695 
	`xfs_ªfcou¡bt_compuã_maxÀvñs
(
mp
);

697 i‡(
sbp
->
sb_imax_p˘
) {

701 
mp
->
m_maxicou¡
 = (
sbp
->
sb_dblocks
 * sbp->
sb_imax_p˘
) / 100;

702 
mp
->
m_maxicou¡
 = ((mp->m_maxicou¡ / mp->
m_üŒoc_blks
) *

703 
mp
->
m_üŒoc_blks
Ë<< 
sbp
->
sb_ö›blog
;

705 
mp
->
m_maxicou¡
 = 0;

707 
mp
->
m_öode_˛u°î_size
 = 
XFS_INODE_BIG_CLUSTER_SIZE
;

712 i‡(
	`xfs_sb_vîsi⁄_hasdÆign
(&
mp
->
m_sb
)) {

713 
mp
->
m_dÆign
 = 
sbp
->
sb_unô
;

714 
mp
->
m_swidth
 = 
sbp
->
sb_width
;

720 i‡(
	`xfs_sb_vîsi⁄_haßlign
(&
mp
->
m_sb
) &&

721 
mp
->
m_sb
.
sb_öﬂlignmt
 >=

722 
	`XFS_B_TO_FSBT
(
mp
, mp->
m_öode_˛u°î_size
))

723 
mp
->
m_öﬂlign_mask
 = mp->
m_sb
.
sb_öﬂlignmt
 - 1;

725 
mp
->
m_öﬂlign_mask
 = 0;

730 i‡(
mp
->
m_dÆign
 && mp->
m_öﬂlign_mask
 &&

731 !(
mp
->
m_dÆign
 & mp->
m_öﬂlign_mask
))

732 
mp
->
m_söﬂlign
 = mp->
m_dÆign
;

734 
mp
->
m_söﬂlign
 = 0;

739 
d
 = (
xfs_daddr_t
Ë
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_dblocks
);

740 i‡(
	`XFS_BB_TO_FSB
(
mp
, 
d
Ë!mp->
m_sb
.
sb_dblocks
) {

741 
	`Ârötf
(
°dîr
, 
	`_
("%s: sizêcheck faûed\n"), 
¥og«me
);

742 i‡(!(
Êags
 & 
LIBXFS_MOUNT_DEBUGGER
))

743  
NULL
;

750 i‡(!(
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_NLINKBIT
)) {

752 
	`Ârötf
(
°dîr
, 
	`_
(

754 
¥og«me
);

755 
	`exô
(1);

759 i‡(!(
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_DIRV2BIT
)) {

761 
	`Ârötf
(
°dîr
, 
	`_
(

763 
¥og«me
);

764 
	`exô
(1);

768 i‡(!
	`xfs_sb_good_vîsi⁄
(
sbp
)) {

769 
	`Ârötf
(
°dîr
, 
	`_
(

771 
¥og«me
);

772 
	`exô
(1);

775 
	`xfs_da_mou¡
(
mp
);

777 i‡(
	`xfs_sb_vîsi⁄_haßâr2
(&
mp
->
m_sb
))

778 
mp
->
m_Êags
 |
LIBXFS_MOUNT_ATTR2
;

781 
	`xfs_å™s_öô
(
mp
);

783 i‡(
dev
 == 0)

784  
mp
;

786 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
,

787 
d
 - 
	`XFS_FSS_TO_BB
(
mp
, 1), XFS_FSS_TO_BB(mp, 1),

788 !(
Êags
 & 
LIBXFS_MOUNT_DEBUGGER
), 
NULL
);

789 i‡(!
bp
) {

790 
	`Ârötf
(
°dîr
, 
	`_
("%s: d©®sizêcheck faûed\n"), 
¥og«me
);

791 i‡(!(
Êags
 & 
LIBXFS_MOUNT_DEBUGGER
))

792  
NULL
;

794 
	`libxfs_putbuf
(
bp
);

796 i‡(
mp
->
m_logdev_èrgp
->
dev
 &&

797 
mp
->
m_logdev_èrgp
->
dev
 !mp->
m_ddev_èrgp
->dev) {

798 
d
 = (
xfs_daddr_t
Ë
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_logblocks
);

799 i‡–(
	`XFS_BB_TO_FSB
(
mp
, 
d
Ë!mp->
m_sb
.
sb_logblocks
) ||

800 (!(
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_logdev_èrgp
,

801 
d
 - 
	`XFS_FSB_TO_BB
(
mp
, 1),

802 
	`XFS_FSB_TO_BB
(
mp
, 1),

803 !(
Êags
 & 
LIBXFS_MOUNT_DEBUGGER
), 
NULL
))) ) {

804 
	`Ârötf
(
°dîr
, 
	`_
("%s:Üog size checks failed\n"),

805 
¥og«me
);

806 i‡(!(
Êags
 & 
LIBXFS_MOUNT_DEBUGGER
))

807  
NULL
;

809 i‡(
bp
)

810 
	`libxfs_putbuf
(
bp
);

814 i‡(
	`πmou¡_öô
(
mp
, 
Êags
)) {

815 
	`Ârötf
(
°dîr
, 
	`_
("%s:Ñealtime device init failed\n"),

816 
¥og«me
);

817  
NULL
;

827 i‡(
sbp
->
sb_agcou¡
 > 1000000) {

828 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
,

829 
	`XFS_AG_DADDR
(
mp
, 
sbp
->
sb_agcou¡
 - 1, 0), 1,

830 !(
Êags
 & 
LIBXFS_MOUNT_DEBUGGER
), 
NULL
);

831 i‡(
bp
->
b_îr‹
) {

832 
	`Ârötf
(
°dîr
, 
	`_
("%s:Ñead of AG %u failed\n"),

833 
¥og«me
, 
sbp
->
sb_agcou¡
);

834 i‡(!(
Êags
 & 
LIBXFS_MOUNT_DEBUGGER
))

835  
NULL
;

836 
	`Ârötf
(
°dîr
, 
	`_
("%s:ÜimitingÑeadsÅo AG 0\n"),

837 
¥og«me
);

838 
sbp
->
sb_agcou¡
 = 1;

840 
	`libxfs_putbuf
(
bp
);

843 
îr‹
 = 
	`libxfs_öôülize_≥øg
(
mp
, 
sbp
->
sb_agcou¡
, &mp->
m_maxagi
);

844 i‡(
îr‹
) {

845 
	`Ârötf
(
°dîr
, 
	`_
("%s:Öerag init failed\n"),

846 
¥og«me
);

847 
	`exô
(1);

850  
mp
;

851 
	}
}

854 
	$libxfs_πmou¡_de°roy
(
xfs_mou¡_t
 *
mp
)

856 i‡(
mp
->
m_rsumù
)

857 
	`IRELE
(
mp
->
m_rsumù
);

858 i‡(
mp
->
m_rbmù
)

859 
	`IRELE
(
mp
->
m_rbmù
);

860 
mp
->
m_rsumù
 = mp->
m_rbmù
 = 
NULL
;

861 
	}
}

867 
	$libxfs_umou¡
(
xfs_mou¡_t
 *
mp
)

869 
xfs_≥øg
 *
∑g
;

870 
agno
;

872 
	`libxfs_πmou¡_de°roy
(
mp
);

873 
	`libxfs_bˇche_purge
();

875 
agno
 = 0;ágnÿ< 
mp
->
m_maxagi
;ágno++) {

876 
∑g
 = 
	`ødix_åì_dñëe
(&
mp
->
m_≥øg_åì
, 
agno
);

877 
	`kmem_‰ì
(
∑g
);

880 
	`kmem_‰ì
(
mp
->
m_©å_geo
);

881 
	`kmem_‰ì
(
mp
->
m_dú_geo
);

883 
	`kmem_‰ì
(
mp
->
m_πdev_èrgp
);

884 i‡(
mp
->
m_logdev_èrgp
 !mp->
m_ddev_èrgp
)

885 
	`kmem_‰ì
(
mp
->
m_logdev_èrgp
);

886 
	`kmem_‰ì
(
mp
->
m_ddev_èrgp
);

888 
	}
}

894 
	$libxfs_de°roy
()

896 
	`m™age_z⁄es
(1);

897 
	`ˇche_de°roy
(
libxfs_bˇche
);

898 
	}
}

901 
	$libxfs_devi˚_Æignmít
()

903  
	`∂©f‹m_Æign_blockdev
();

904 
	}
}

907 
	$libxfs_ªp‹t
(
FILE
 *
Â
)

909 
time_t
 
t
;

910 *
c
;

912 
	`ˇche_ªp‹t
(
Â
, "libxfs_bˇche", 
libxfs_bˇche
);

914 
t
 = 
	`time
(
NULL
);

915 
c
 = 
	`as˘ime
(
	`loˇ…ime
(&
t
));

916 
	`Ârötf
(
Â
, "%s", 
c
);

917 
	}
}

920 
	$libxfs_≈roc
()

922  
	`∂©f‹m_≈roc
();

923 
	}
}

926 
	$libxfs_physmem
()

928  
	`∂©f‹m_physmem
();

929 
	}
}

	@libxfs/init.h

18 #i‚de‡
LIBXFS_INIT_H


19 
	#LIBXFS_INIT_H


	)

21 
	g°©
;

23 
∂©f‹m_check_ismou¡ed
 (*
∑th
, *
block
,

24 
°©
 *
•å
, 
vîbo£
);

25 
∂©f‹m_check_iswrôabÀ
 (*
∑th
, *
block
, 
°©
 *
•å
);

26 
∂©f‹m_£t_blocksize
 (
fd
, *
∑th
, 
dev_t
 
devi˚
, 
bsz
, 
Áèl
);

27 
∂©f‹m_Êush_devi˚
 (
fd
, 
dev_t
 
devi˚
);

28 *
∂©f‹m_födøw∑th
(*
∑th
);

29 *
∂©f‹m_födøw∑th
 (*
∑th
);

30 *
∂©f‹m_födblock∑th
 (*
∑th
);

31 
∂©f‹m_dúe˘_blockdev
 ();

32 
∂©f‹m_Æign_blockdev
 ();

33 
∂©f‹m_physmem
();

34 
∂©f‹m_has_uuid
;

	@libxfs/irix.c

19 
	~"libxfs.h
"

20 
	~<disköfo.h
>

21 
	~<sys/sysmp.h
>

23 
	g∂©f‹m_has_uuid
 = 0;

24 *
¥og«me
;

25 
__öt64_t
 
födsize
(*);

28 
	$∂©f‹m_check_ismou¡ed
(*
«me
, *
block
, 
°©
 *
s
, 
vîbo£
)

31 
	}
}

34 
	$∂©f‹m_check_iswrôabÀ
(*
«me
, *
block
, 
°©
 *
s
)

37 
	}
}

40 
	$∂©f‹m_£t_blocksize
(
fd
, *
∑th
, 
dev_t
 
devi˚
, 
blocksize
, 
Áèl
)

42  
Áèl
;

43 
	}
}

46 
	$∂©f‹m_Êush_devi˚
(
fd
, 
dev_t
 
devi˚
)

49 
	}
}

52 
	$∂©f‹m_födsizes
(*
∑th
, 
fd
, *
sz
, *
bsz
)

54 
°©
 
°
;

56 i‡(
	`f°©
(
fd
, &
°
) < 0) {

57 
	`Ârötf
(
°dîr
,

58 
	`_
("%s: cannot statÅhe device file \"%s\": %s\n"),

59 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

60 
	`exô
(1);

62 i‡((
°
.
°_mode
 & 
S_IFMT
Ë=
S_IFREG
) {

63 *
sz
 = ()(
°
.
°_size
 >> 9);

65 *
sz
 = 
	`födsize
(
∑th
);

67 *
bsz
 = 
BBSIZE
;

68 
	}
}

71 
	$∂©f‹m_födøw∑th
(*
∑th
)

73  
	`födøw∑th
(
∑th
);

74 
	}
}

77 
	$∂©f‹m_födblock∑th
(*
∑th
)

79  
	`födblock∑th
(
∑th
);

80 
	}
}

83 
	$∂©f‹m_dúe˘_blockdev
()

86 
	}
}

89 
	$∂©f‹m_Æign_blockdev
()

92 
	}
}

95 
	$∂©f‹m_≈roc
()

97  
	`sysmp
(
MP_NPROCS
);

98 
	}
}

101 
	$∂©f‹m_physmem
()

103 
rmöfo
 
ri
;

105 i‡(
	`sysmp
(
MP_SAGET
, 
MPSA_RMINFO
, &
ri
, (ri)) < 0)

106 
	`Ârötf
(
°dîr
, 
	`_
("%s: can't determine memory size\n"),

107 
¥og«me
);

108 
	`exô
(1);

109 
	}
}

110  (
	gri
.
	gphysmem
 >> 10Ë* 
gë∑gesize
();

	@libxfs/kmem.c

3 
	~"libxfs_¥iv.h
"

9 
kmem_z⁄e_t
 *

10 
	$kmem_z⁄e_öô
(
size
, *
«me
)

12 
kmem_z⁄e_t
 *
±r
 = 
	`mÆloc
((kmem_zone_t));

14 i‡(
±r
 =
NULL
) {

15 
	`Ârötf
(
°dîr
, 
	`_
("%s: zone init failed (%s, %d bytes): %s\n"),

16 
¥og«me
, 
«me
, ()(
kmem_z⁄e_t
),

17 
	`°ªº‹
(
î∫o
));

18 
	`exô
(1);

20 
±r
->
z⁄e_unôsize
 = 
size
;

21 
±r
->
z⁄e_«me
 = 
«me
;

22 
±r
->
Æloˇãd
 = 0;

23  
±r
;

24 
	}
}

27 
	$kmem_z⁄e_Æloc
(
kmem_z⁄e_t
 *
z⁄e
, 
Êags
)

29 *
±r
 = 
	`mÆloc
(
z⁄e
->
z⁄e_unôsize
);

31 i‡(
±r
 =
NULL
) {

32 
	`Ârötf
(
°dîr
, 
	`_
("%s: zoneálloc failed (%s, %d bytes): %s\n"),

33 
¥og«me
, 
z⁄e
->
z⁄e_«me
, z⁄e->
z⁄e_unôsize
,

34 
	`°ªº‹
(
î∫o
));

35 
	`exô
(1);

37 
z⁄e
->
Æloˇãd
++;

38  
±r
;

39 
	}
}

41 
	$kmem_z⁄e_zÆloc
(
kmem_z⁄e_t
 *
z⁄e
, 
Êags
)

43 *
±r
 = 
	`kmem_z⁄e_Æloc
(
z⁄e
, 
Êags
);

45 
	`mem£t
(
±r
, 0, 
z⁄e
->
z⁄e_unôsize
);

46  
±r
;

47 
	}
}

51 
	$kmem_Æloc
(
size_t
 
size
, 
Êags
)

53 *
±r
 = 
	`mÆloc
(
size
);

55 i‡(
±r
 =
NULL
) {

56 
	`Ârötf
(
°dîr
, 
	`_
("%s: malloc failed (%d bytes): %s\n"),

57 
¥og«me
, ()
size
, 
	`°ªº‹
(
î∫o
));

58 
	`exô
(1);

60  
±r
;

61 
	}
}

64 
	$kmem_zÆloc
(
size_t
 
size
, 
Êags
)

66 *
±r
 = 
	`kmem_Æloc
(
size
, 
Êags
);

68 
	`mem£t
(
±r
, 0, 
size
);

69  
±r
;

70 
	}
}

73 
	$kmem_ªÆloc
(*
±r
, 
size_t
 
√w_size
, 
Êags
)

75 
±r
 = 
	`ªÆloc
’å, 
√w_size
);

76 i‡(
±r
 =
NULL
) {

77 
	`Ârötf
(
°dîr
, 
	`_
("%s:Ñealloc failed (%d bytes): %s\n"),

78 
¥og«me
, ()
√w_size
, 
	`°ªº‹
(
î∫o
));

79 
	`exô
(1);

81  
±r
;

82 
	}
}

	@libxfs/libxfs_api_defs.h

19 #i‚de‡
__LIBXFS_API_DEFS_H__


20 
	#__LIBXFS_API_DEFS_H__


	)

28 
	#xfs_highbô32
 
libxfs_highbô32


	)

29 
	#xfs_highbô64
 
libxfs_highbô64


	)

31 
	#xfs_fs_ª∑ú_cmn_îr
 
libxfs_fs_ª∑ú_cmn_îr


	)

32 
	#xfs_fs_cmn_îr
 
libxfs_fs_cmn_îr


	)

34 
	#xfs_å™s_Æloc
 
libxfs_å™s_Æloc


	)

35 
	#xfs_å™s_add_ôem
 
libxfs_å™s_add_ôem


	)

36 
	#xfs_å™s_bhﬁd
 
libxfs_å™s_bhﬁd


	)

37 
	#xfs_å™s_bövÆ
 
libxfs_å™s_bövÆ


	)

38 
	#xfs_å™s_bjoö
 
libxfs_å™s_bjoö


	)

39 
	#xfs_å™s_bªl£
 
libxfs_å™s_bªl£


	)

40 
	#xfs_å™s_commô
 
libxfs_å™s_commô


	)

41 
	#xfs_å™s_ˇn˚l
 
libxfs_å™s_ˇn˚l


	)

42 
	#xfs_å™s_dñ_ôem
 
libxfs_å™s_dñ_ôem


	)

43 
	#xfs_å™s_gë_buf
 
libxfs_å™s_gë_buf


	)

44 
	#xfs_å™s_gësb
 
libxfs_å™s_gësb


	)

45 
	#xfs_å™s_igë
 
libxfs_å™s_igë


	)

46 
	#xfs_å™s_ichgtime
 
libxfs_å™s_ichgtime


	)

47 
	#xfs_å™s_ijoö
 
libxfs_å™s_ijoö


	)

48 
	#xfs_å™s_ijoö_ªf
 
libxfs_å™s_ijoö_ªf


	)

49 
	#xfs_å™s_öô
 
libxfs_å™s_öô


	)

50 
	#xfs_å™s_öode_Æloc_buf
 
libxfs_å™s_öode_Æloc_buf


	)

51 
	#xfs_å™s_log_buf
 
libxfs_å™s_log_buf


	)

52 
	#xfs_å™s_log_öode
 
libxfs_å™s_log_öode


	)

53 
	#xfs_å™s_mod_sb
 
libxfs_å™s_mod_sb


	)

54 
	#xfs_å™s_ªad_buf
 
libxfs_å™s_ªad_buf


	)

55 
	#xfs_å™s_ªad_buf_m≠
 
libxfs_å™s_ªad_buf_m≠


	)

56 
	#xfs_å™s_rﬁl
 
libxfs_å™s_rﬁl


	)

57 
	#xfs_å™s_gë_buf_m≠
 
libxfs_å™s_gë_buf_m≠


	)

58 
	#xfs_å™s_ªsv_ˇlc
 
libxfs_å™s_ªsv_ˇlc


	)

60 
	#xfs_©å_gë
 
libxfs_©å_gë


	)

61 
	#xfs_©å_£t
 
libxfs_©å_£t


	)

62 
	#xfs_©å_ªmove
 
libxfs_©å_ªmove


	)

63 
	#xfs_©å_Àaf_√wítsize
 
libxfs_©å_Àaf_√wítsize


	)

65 
	#xfs_Æloc_fix_‰ìli°
 
libxfs_Æloc_fix_‰ìli°


	)

66 
	#xfs_Æloc_mö_‰ìli°
 
libxfs_Æloc_mö_‰ìli°


	)

67 
	#xfs_Æloc_ªad_agf
 
libxfs_Æloc_ªad_agf


	)

68 
	#xfs_bm≠_œ°_off£t
 
libxfs_bm≠_œ°_off£t


	)

69 
	#xfs_bm≠_£¨ch_exã¡s
 
libxfs_bm≠_£¨ch_exã¡s


	)

70 
	#xfs_õxt_lookup_exã¡
 
libxfs_õxt_lookup_exã¡


	)

71 
	#xfs_bm≠i_wrôe
 
libxfs_bm≠i_wrôe


	)

72 
	#xfs_bm≠i_ªad
 
libxfs_bm≠i_ªad


	)

73 
	#xfs_bunm≠i
 
libxfs_bunm≠i


	)

74 
	#xfs_bmbt_gë_Æl
 
libxfs_bmbt_gë_Æl


	)

75 
	#xfs_π‰ì_exã¡
 
libxfs_π‰ì_exã¡


	)

76 
	#xfs_zîo_exã¡
 
libxfs_zîo_exã¡


	)

78 
	#xfs_de„r_öô
 
libxfs_de„r_öô


	)

79 
	#xfs_de„r_föish
 
libxfs_de„r_föish


	)

80 
	#xfs_de„r_ˇn˚l
 
libxfs_de„r_ˇn˚l


	)

82 
	#xfs_da_bªl£
 
libxfs_da_bªl£


	)

83 
	#xfs_da_hash«me
 
libxfs_da_hash«me


	)

84 
	#xfs_da_shrök_öode
 
libxfs_da_shrök_öode


	)

85 
	#xfs_da_ªad_buf
 
libxfs_da_ªad_buf


	)

86 
	#xfs_dú_¸óã«me
 
libxfs_dú_¸óã«me


	)

87 
	#xfs_dú_öô
 
libxfs_dú_öô


	)

88 
	#xfs_dú_lookup
 
libxfs_dú_lookup


	)

89 
	#xfs_dú_ª∂a˚
 
libxfs_dú_ª∂a˚


	)

90 
	#xfs_dú2_isblock
 
libxfs_dú2_isblock


	)

91 
	#xfs_dú2_i¶óf
 
libxfs_dú2_i¶óf


	)

92 
	#xfs_dú2_d©a_‰ìsˇn_öt
 
libxfs_dú2_d©a_‰ìsˇn_öt


	)

93 
	#xfs_dú2_d©a_log_íåy
 
libxfs_dú2_d©a_log_íåy


	)

94 
	#xfs_dú2_d©a_log_hódî
 
libxfs_dú2_d©a_log_hódî


	)

95 
	#xfs_dú2_d©a_make_‰ì
 
libxfs_dú2_d©a_make_‰ì


	)

96 
	#xfs_dú2_d©a_u£_‰ì
 
libxfs_dú2_d©a_u£_‰ì


	)

97 
	#xfs_dú2_shrök_öode
 
libxfs_dú2_shrök_öode


	)

99 
	#xfs_öode_‰om_disk
 
libxfs_öode_‰om_disk


	)

100 
	#xfs_öode_to_disk
 
libxfs_öode_to_disk


	)

101 
	#xfs_döode_ˇlc_¸c
 
libxfs_döode_ˇlc_¸c


	)

102 
	#xfs_id©a_ªÆloc
 
libxfs_id©a_ªÆloc


	)

103 
	#xfs_ide°roy_f‹k
 
libxfs_ide°roy_f‹k


	)

105 
	#xfs_rm≠_ag_ow√r
 
libxfs_rm≠_ag_ow√r


	)

106 
	#xfs_rm≠_Æloc
 
libxfs_rm≠_Æloc


	)

107 
	#xfs_rm≠_quîy_ønge
 
libxfs_rm≠_quîy_ønge


	)

108 
	#xfs_rm≠_lookup_À
 
libxfs_rm≠_lookup_À


	)

109 
	#xfs_rm≠_gë_ªc
 
libxfs_rm≠_gë_ªc


	)

110 
	#xfs_rm≠_úec_off£t_∑ck
 
libxfs_rm≠_úec_off£t_∑ck


	)

111 
	#xfs_rm≠_úec_off£t_u≈ack
 
libxfs_rm≠_úec_off£t_u≈ack


	)

112 
	#xfs_rm≠bt_öô_curs‹
 
libxfs_rm≠bt_öô_curs‹


	)

113 
	#xfs_båì_dñ_curs‹
 
libxfs_båì_dñ_curs‹


	)

116 
	#xfs_log_sb
 
libxfs_log_sb


	)

117 
	#xfs_sb_‰om_disk
 
libxfs_sb_‰om_disk


	)

118 
	#xfs_sb_quŸa_‰om_disk
 
libxfs_sb_quŸa_‰om_disk


	)

119 
	#xfs_sb_to_disk
 
libxfs_sb_to_disk


	)

121 
	#xfs_symlök_blocks
 
libxfs_symlök_blocks


	)

122 
	#xfs_symlök_hdr_ok
 
libxfs_symlök_hdr_ok


	)

124 
	#xfs_vîify_cksum
 
libxfs_vîify_cksum


	)

126 
	#xfs_Æloc_ag_max_ußbÀ
 
libxfs_Æloc_ag_max_ußbÀ


	)

127 
	#xfs_Ælocbt_maxªcs
 
libxfs_Ælocbt_maxªcs


	)

128 
	#xfs_bmbt_maxªcs
 
libxfs_bmbt_maxªcs


	)

129 
	#xfs_bmdr_maxªcs
 
libxfs_bmdr_maxªcs


	)

130 
	#xfs_båì_öô_block
 
libxfs_båì_öô_block


	)

131 
	#xfs_dú_öo_vÆid©e
 
libxfs_dú_öo_vÆid©e


	)

132 
	#xfs_öôülize_≥øg_d©a
 
libxfs_öôülize_≥øg_d©a


	)

133 
	#xfs_öobt_maxªcs
 
libxfs_öobt_maxªcs


	)

134 
	#xfs_úód_exã¡s
 
libxfs_úód_exã¡s


	)

135 
	#xfs_log_ˇlc_möimum_size
 
libxfs_log_ˇlc_möimum_size


	)

136 
	#xfs_≥øg_gë
 
libxfs_≥øg_gë


	)

137 
	#xfs_≥øg_put
 
libxfs_≥øg_put


	)

138 
	#xfs_¥óŒoc_blocks
 
libxfs_¥óŒoc_blocks


	)

139 
	#xfs_döode_good_vîsi⁄
 
libxfs_döode_good_vîsi⁄


	)

140 
	#xfs_‰ì_exã¡
 
libxfs_‰ì_exã¡


	)

142 
	#xfs_ªfcou¡bt_öô_curs‹
 
libxfs_ªfcou¡bt_öô_curs‹


	)

143 
	#xfs_ªfcou¡_lookup_À
 
libxfs_ªfcou¡_lookup_À


	)

144 
	#xfs_ªfcou¡_gë_ªc
 
libxfs_ªfcou¡_gë_ªc


	)

145 
	#xfs_rm≠_lookup_À_ønge
 
libxfs_rm≠_lookup_À_ønge


	)

146 
	#xfs_ªfc_block
 
libxfs_ªfc_block


	)

	@libxfs/libxfs_io.h

19 #i‚de‡
__LIBXFS_IO_H_


20 
	#__LIBXFS_IO_H_


	)

26 
	gxfs_buf
;

27 
	gxfs_mou¡
;

28 
	gxfs_≥øg
;

35 
	sxfs_bu·¨g
 {

36 
xfs_mou¡
 *
	mbt_mou¡
;

37 
dev_t
 
	mdev
;

40 
libxfs_bu·¨g_öô
(
xfs_mou¡
 *
mp
, 
dev_t
 
ddev
,

41 
dev_t
 
logdev
, dev_à
πdev
);

43 
	#LIBXFS_BBTOOFF64
(
bbs
Ë(((
xfs_off_t
)(bbs)Ë<< 
BBSHIFT
)

	)

45 
	#XB_PAGES
 2

	)

46 
	sxfs_buf_m≠
 {

47 
xfs_daddr_t
 
	mbm_bn
;

48 
	mbm_Àn
;

51 
	#DEFINE_SINGLE_BUF_MAP
(
m≠
, 
blkno
, 
numblk
) \

52 
	`xfs_buf_m≠
 (
m≠
Ë{ .
bm_bn
 = (
blkno
), .
bm_Àn
 = (
numblk
Ë};

	)

54 
	sxfs_buf_›s
 {

55 *
	m«me
;

56 (*
	mvîify_ªad
)(
	mxfs_buf
 *);

57 (*
	mvîify_wrôe
)(
	mxfs_buf
 *);

60 
	sxfs_buf
 {

61 
ˇche_node
 
	mb_node
;

62 
	mb_Êags
;

63 
xfs_daddr_t
 
	mb_bn
;

64 
	mb_bcou¡
;

65 
	mb_Àngth
;

66 
xfs_bu·¨g
 *
	mb_èrgë
;

67 
	#b_dev
 
b_èrgë
->
dev


	)

68 
±hªad_muãx_t
 
	mb_lock
;

69 
±hªad_t
 
	mb_hﬁdî
;

70 
	mb_ªcur
;

71 *
	mb_f•riv
;

72 *
	mb_f•riv©e2
;

73 *
	mb_f•riv©e3
;

74 *
	mb_addr
;

75 
	mb_îr‹
;

76 c⁄° 
xfs_buf_›s
 *
	mb_›s
;

77 
xfs_≥øg
 *
	mb_∑g
;

78 
xfs_buf_m≠
 *
	mb_m≠s
;

79 
	mb_nm≠s
;

80 #ifde‡
XFS_BUF_TRACING


81 
li°_hód
 
	mb_lock_li°
;

82 c⁄° *
	mb_func
;

83 c⁄° *
	mb_fûe
;

84 
	mb_löe
;

86 } 
	txfs_buf_t
;

88 
	exfs_buf_Êags_t
 {

89 
	mLIBXFS_B_EXIT
 = 0x0001,

90 
	mLIBXFS_B_DIRTY
 = 0x0002,

91 
	mLIBXFS_B_STALE
 = 0x0004,

92 
	mLIBXFS_B_UPTODATE
 = 0x0008,

93 
	mLIBXFS_B_DISCONTIG
 = 0x0010,

94 
	mLIBXFS_B_UNCHECKED
 = 0x0020,

97 
	#XFS_BUF_DADDR_NULL
 ((
xfs_daddr_t
Ë(-1LL))

	)

99 
	#XFS_BUF_PTR
(
bp
Ë((*)(bp)->
b_addr
)

	)

100 
	#xfs_buf_off£t
(
bp
, 
off£t
Ë((bp)->
b_addr
 + (off£t))

	)

101 
	#XFS_BUF_ADDR
(
bp
Ë((bp)->
b_bn
)

	)

102 
	#XFS_BUF_SIZE
(
bp
Ë((bp)->
b_bcou¡
)

	)

103 
	#XFS_BUF_COUNT
(
bp
Ë((bp)->
b_bcou¡
)

	)

104 
	#XFS_BUF_TARGET
(
bp
Ë((bp)->
b_dev
)

	)

105 
	#XFS_BUF_SET_PTR
(
bp
,
p
,
˙t
) ({ \

106 (
bp
)->
b_addr
 = (*)(
p
); \

107 
	`XFS_BUF_SET_COUNT
(
bp
,
˙t
); \

108 })

	)

110 
	#XFS_BUF_SET_ADDR
(
bp
,
blk
Ë((bp)->
b_bn
 = (blk))

	)

111 
	#XFS_BUF_SET_COUNT
(
bp
,
˙t
Ë((bp)->
b_bcou¡
 = (˙t))

	)

113 
	#XFS_BUF_FSPRIVATE
(
bp
,
ty≥
Ë(—y≥)(bp)->
b_f•riv
)

	)

114 
	#XFS_BUF_SET_FSPRIVATE
(
bp
,
vÆ
Ë(bp)->
b_f•riv
 = (*)(vÆ)

	)

115 
	#XFS_BUF_FSPRIVATE2
(
bp
,
ty≥
Ë(—y≥)(bp)->
b_f•riv©e2
)

	)

116 
	#XFS_BUF_SET_FSPRIVATE2
(
bp
,
vÆ
Ë(bp)->
b_f•riv©e2
 = (*)(vÆ)

	)

117 
	#XFS_BUF_FSPRIVATE3
(
bp
,
ty≥
Ë(—y≥)(bp)->
b_f•riv©e3
)

	)

118 
	#XFS_BUF_SET_FSPRIVATE3
(
bp
,
vÆ
Ë(bp)->
b_f•riv©e3
 = (*)(vÆ)

	)

120 
	#XFS_BUF_SET_PRIORITY
(
bp
,
¥i
Ë
	`ˇche_node_£t_¥i‹ôy
( \

121 
libxfs_bˇche
, \

122 (
ˇche_node
 *)(
bp
), \

123 (
¥i
))

	)

124 
	#XFS_BUF_PRIORITY
(
bp
Ë(
	`ˇche_node_gë_¥i‹ôy
( \

125 (
ˇche_node
 *)(
bp
)))

	)

126 
	#xfs_buf_£t_ªf
(
bp
,
ªf
Ë((Ë0)

	)

127 
	#xfs_buf_i€º‹
(
bp
,
îr
Ë((bp)->
b_îr‹
 = (îr))

	)

129 
	#xfs_daddr_to_agno
(
mp
,
d
) \

130 ((
xfs_agnumbî_t
)(
	`XFS_BB_TO_FSBT
(
mp
, 
d
Ë/ (mp)->
m_sb
.
sb_agblocks
))

	)

131 
	#xfs_daddr_to_agbno
(
mp
,
d
) \

132 ((
xfs_agblock_t
)(
	`XFS_BB_TO_FSBT
(
mp
, 
d
Ë% (mp)->
m_sb
.
sb_agblocks
))

	)

136 
ˇche
 *
libxfs_bˇche
;

137 
ˇche_›î©i⁄s
 
libxfs_bˇche_›î©i⁄s
;

139 
	#LIBXFS_GETBUF_TRYLOCK
 (1 << 0)

	)

141 #ifde‡
XFS_BUF_TRACING


143 
	#libxfs_ªadbuf
(
dev
, 
daddr
, 
Àn
, 
Êags
, 
›s
) \

144 
	`libxfs_åa˚_ªadbuf
(
__FUNCTION__
, 
__FILE__
, 
__LINE__
, \

145 (
dev
), (
daddr
), (
Àn
), (
Êags
), (
›s
))

	)

146 
	#libxfs_ªadbuf_m≠
(
dev
, 
m≠
, 
nm≠s
, 
Êags
, 
›s
) \

147 
	`libxfs_åa˚_ªadbuf_m≠
(
__FUNCTION__
, 
__FILE__
, 
__LINE__
, \

148 (
dev
), (
m≠
), (
nm≠s
), (
Êags
), (
›s
))

	)

149 
	#libxfs_wrôebuf
(
buf
, 
Êags
) \

150 
	`libxfs_åa˚_wrôebuf
(
__FUNCTION__
, 
__FILE__
, 
__LINE__
, \

151 (
buf
), (
Êags
))

	)

152 
	#libxfs_gëbuf
(
dev
, 
daddr
, 
Àn
) \

153 
	`libxfs_åa˚_gëbuf
(
__FUNCTION__
, 
__FILE__
, 
__LINE__
, \

154 (
dev
), (
daddr
), (
Àn
))

	)

155 
	#libxfs_gëbuf_m≠
(
dev
, 
m≠
, 
nm≠s
, 
Êags
) \

156 
	`libxfs_åa˚_gëbuf_m≠
(
__FUNCTION__
, 
__FILE__
, 
__LINE__
, \

157 (
dev
), (
m≠
), (
nm≠s
), (
Êags
))

	)

158 
	#libxfs_gëbuf_Êags
(
dev
, 
daddr
, 
Àn
, 
Êags
) \

159 
	`libxfs_åa˚_gëbuf_Êags
(
__FUNCTION__
, 
__FILE__
, 
__LINE__
, \

160 (
dev
), (
daddr
), (
Àn
), (
Êags
))

	)

161 
	#libxfs_putbuf
(
buf
) \

162 
	`libxfs_åa˚_putbuf
(
__FUNCTION__
, 
__FILE__
, 
__LINE__
, (
buf
))

	)

164 
xfs_buf_t
 *
libxfs_åa˚_ªadbuf
(const *, const *, ,

165 
xfs_bu·¨g
 *, 
xfs_daddr_t
, , ,

166 c⁄° 
xfs_buf_›s
 *);

167 
xfs_buf_t
 *
libxfs_åa˚_ªadbuf_m≠
(const *, const *, ,

168 
xfs_bu·¨g
 *, 
xfs_buf_m≠
 *, , ,

169 c⁄° 
xfs_buf_›s
 *);

170 
libxfs_åa˚_wrôebuf
(const *, const *, ,

171 
xfs_buf_t
 *, );

172 
xfs_buf_t
 *
libxfs_åa˚_gëbuf
(const *, const *, ,

173 
xfs_bu·¨g
 *, 
xfs_daddr_t
, );

174 
xfs_buf_t
 *
libxfs_åa˚_gëbuf_m≠
(const *, const *, ,

175 
xfs_bu·¨g
 *, 
xfs_buf_m≠
 *, , );

176 
xfs_buf_t
 *
libxfs_åa˚_gëbuf_Êags
(const *, const *, ,

177 
xfs_bu·¨g
 *, 
xfs_daddr_t
, , );

178 
libxfs_åa˚_putbuf
 (const *, const *, ,

179 
xfs_buf_t
 *);

183 
xfs_buf_t
 *
libxfs_ªadbuf
(
xfs_bu·¨g
 *, 
xfs_daddr_t
, , ,

184 c⁄° 
xfs_buf_›s
 *);

185 
xfs_buf_t
 *
libxfs_ªadbuf_m≠
(
xfs_bu·¨g
 *, 
xfs_buf_m≠
 *,

186 , , c⁄° 
xfs_buf_›s
 *);

187 
libxfs_wrôebuf
(
xfs_buf_t
 *, );

188 
xfs_buf_t
 *
libxfs_gëbuf
(
xfs_bu·¨g
 *, 
xfs_daddr_t
, );

189 
xfs_buf_t
 *
libxfs_gëbuf_m≠
(
xfs_bu·¨g
 *,

190 
xfs_buf_m≠
 *, , );

191 
xfs_buf_t
 *
libxfs_gëbuf_Êags
(
xfs_bu·¨g
 *, 
xfs_daddr_t
,

193 
libxfs_putbuf
 (
xfs_buf_t
 *);

197 
libxfs_ªadbuf_vîify
(
xfs_buf
 *
bp
,

198 c⁄° 
xfs_buf_›s
 *
›s
);

199 
xfs_buf_t
 *
libxfs_gësb
(
xfs_mou¡
 *, );

200 
libxfs_bˇche_purge
();

201 
libxfs_bˇche_Êush
();

202 
libxfs_purgebuf
(
xfs_buf_t
 *);

203 
libxfs_bˇche_ovîÊowed
();

204 
libxfs_bˇche_ußge
();

207 
xfs_buf_t
 *
libxfs_gëbu‰
(
xfs_bu·¨g
 *, 
xfs_daddr_t
, );

208 
libxfs_putbu‰
(
xfs_buf_t
 *);

210 
libxfs_wrôebuf_öt
(
xfs_buf_t
 *, );

211 
libxfs_wrôebu‰
(
xfs_buf
 *);

212 
libxfs_ªadbu‰
(
xfs_bu·¨g
 *, 
xfs_daddr_t
, 
xfs_buf_t
 *, , );

213 
libxfs_ªadbu‰_m≠
(
xfs_bu·¨g
 *, 
xfs_buf
 *, );

215 
libxfs_devi˚_zîo
(
xfs_bu·¨g
 *, 
xfs_daddr_t
, 
uöt
);

217 
libxfs_bhash_size
;

219 
	#LIBXFS_BREAD
 0x1

	)

220 
	#LIBXFS_BWRITE
 0x2

	)

221 
	#LIBXFS_BZERO
 0x4

	)

223 
libxfs_iomove
 (
xfs_buf_t
 *, 
uöt
, , *, );

225 
ölöe
 

226 
	$xfs_buf_vîify_cksum
(
xfs_buf
 *
bp
, 
cksum_off£t
)

228  
	`xfs_vîify_cksum
(
bp
->
b_addr
, 
	`BBTOB
(bp->
b_Àngth
),

229 
cksum_off£t
);

230 
	}
}

232 
ölöe
 

233 
	$xfs_buf_upd©e_cksum
(
xfs_buf
 *
bp
, 
cksum_off£t
)

235 
	`xfs_upd©e_cksum
(
bp
->
b_addr
, 
	`BBTOB
(bp->
b_Àngth
),

236 
cksum_off£t
);

237 
	}
}

	@libxfs/libxfs_priv.h

49 #i‚de‡
__LIBXFS_INTERNAL_XFS_H__


50 
	#__LIBXFS_INTERNAL_XFS_H__


	)

52 
	~"libxfs_≠i_defs.h
"

53 
	~"∂©f‹m_defs.h
"

54 
	~"xfs.h
"

56 
	~"li°.h
"

57 
	~"hli°.h
"

58 
	~"ˇche.h
"

59 
	~"bô›s.h
"

60 
	~"kmem.h
"

61 
	~"ødix-åì.h
"

62 
	~"©omic.h
"

64 
	~"xfs_ty≥s.h
"

65 
	~"xfs_¨ch.h
"

67 
	~"xfs_fs.h
"

70 
uöt32_t
 
¸c32_À
(uöt32_à
¸c
, c⁄° *
p
, 
size_t
 
Àn
);

71 
uöt32_t
 
¸c32c_À
(uöt32_à
¸c
, c⁄° *
p
, 
size_t
 
Àn
);

73 
	#¸c32
(
c
,
p
,
l
Ë
	`¸c32_À
((c),(c⁄° *)’),÷))

	)

74 
	#¸c32c
(
c
,
p
,
l
Ë
	`¸c32c_À
((c),(c⁄° *)’),÷))

	)

76 
	~"xfs_cksum.h
"

82 
	~"libxfs_io.h
"

85 *
¥og«me
;

87 #unde‡
ASSERT


88 
	#ASSERT
(
ex
Ë
	`as£π
”x)

	)

90 #i‚de‡
EWRONGFS


91 
	#EWRONGFS
 
EINVAL


	)

94 
	#xfs_îr‹_Àvñ
 0

	)

96 
	#STATIC
 

	)

99 
	#ATTR_ROOT
 0x0002

	)

100 
	#ATTR_SECURE
 0x0008

	)

101 
	#ATTR_CREATE
 0x0010

	)

102 
	#ATTR_REPLACE
 0x0020

	)

103 
	#ATTR_KERNOTIME
 0

	)

104 
	#ATTR_KERNOVAL
 0

	)

106 
	#IHOLD
(
ù
Ë((Ë0)

	)

108 
	#XFS_IGET_CREATE
 0x1

	)

109 
	#XFS_IGET_UNTRUSTED
 0x2

	)

111 
cmn_îr
(, *, ...);

112 
	e˚
 { 
	mCE_DEBUG
, 
	mCE_CONT
, 
	mCE_NOTE
, 
	mCE_WARN
, 
	mCE_ALERT
, 
	mCE_PANIC
 };

114 
	#xfs_nŸi˚
(
mp
,
fmt
,
¨gs
...Ë
	`cmn_îr
(
CE_NOTE
,fmt, ##árgs)

	)

115 
	#xfs_w¨n
(
mp
,
fmt
,
¨gs
...Ë
	`cmn_îr
(
CE_WARN
,fmt, ##árgs)

	)

116 
	#xfs_hex_dump
(
d
,
n
Ë((Ë0)

	)

118 
	#xfs_f‹˚_shutdown
(
d
,
n
Ë((Ë0)

	)

121 
	#XFS_CORRUPTION_ERROR
(
e
,
l
,
mp
,
m
) do { \

122 (
mp
) = (mp); \

123 
	`cmn_îr
(
CE_ALERT
, "%s: XFS_CORRUPTION_ERROR", (
e
)); \

124 } 0)

	)

126 
	#XFS_ERROR_REPORT
(
e
,
l
,
mp
) do { \

127 (
mp
) = (mp); \

128 
	`cmn_îr
(
CE_ALERT
, "%s: XFS_ERROR_REPORT", (
e
)); \

129 } 0)

	)

131 
	#XFS_QM_DQATTACH
(
mp
,
ù
,
Êags
Ë0

	)

132 
	#XFS_ERRLEVEL_LOW
 1

	)

133 
	#XFS_FORCED_SHUTDOWN
(
mp
Ë0

	)

134 
	#XFS_ILOCK_EXCL
 0

	)

135 
	#XFS_STATS_INC
(
mp
, 
cou¡
Ëdÿ{ (mpË(mp); } 0)

	)

136 
	#XFS_STATS_DEC
(
mp
, 
cou¡
, 
x
Ëdÿ{ (mpË(mp); } 0)

	)

137 
	#XFS_STATS_ADD
(
mp
, 
cou¡
, 
x
Ëdÿ{ (mpË(mp); } 0)

	)

138 
	#XFS_TRANS_MOD_DQUOT_BYINO
(
mp
,
ç
,
ù
,
fõld
,
dñè
Ëdÿ{ } 0)

	)

139 
	#XFS_TRANS_RESERVE_QUOTA_NBLKS
(
mp
,
ç
,
ù
,
nblks
,
nöos
,
Ê
Ë0

	)

140 
	#XFS_TRANS_UNRESERVE_QUOTA_NBLKS
(
mp
,
ç
,
ù
,
nblks
,
nöos
,
Ê
Ë0

	)

141 
	#XFS_TEST_ERROR
(
ex¥
,
a
,
b
,
c
Ë–ex¥ )

	)

142 
	#XFS_WANT_CORRUPTED_GOTO
(
mp
, 
ex¥
, 
l
) \

144 i‡(!(
ex¥
)) { \

145 i‡((
mp
)->
m_Êags
 & 
LIBXFS_MOUNT_WANT_CORRUPTED
) \

146 
	`¥ötf
("WANT_CORRUPTED_GOTOát %s:%d\n", \

147 
__func__
, 
__LINE__
); \

148 
îr‹
 = -
EFSCORRUPTED
; \

149 
l
; \

151 }

	)

152 
	#XFS_WANT_CORRUPTED_RETURN
(
mp
, 
ex¥
) \

154 i‡(!(
ex¥
)) { \

155 i‡((
mp
)->
m_Êags
 & 
LIBXFS_MOUNT_WANT_CORRUPTED
) \

156 
	`¥ötf
("WANT_CORRUPTED_RETURNát %s:%d\n", \

157 
__func__
, 
__LINE__
); \

158  -
EFSCORRUPTED
; \

160 }

	)

162 #ifde‡
__GNUC__


163 
	#__ªtu∫_addªss
 
	`__buûtö_ªtu∫_addªss
(0)

	)

166 
	#XFS_DQUOT_CLUSTER_SIZE_FSB
 (
xfs_fûblks_t
)1

	)

169 
	#down_ªad
(
a
Ë((Ë0)

	)

170 
	#up_ªad
(
a
Ë((Ë0)

	)

171 
	#•ö_lock_öô
(
a
Ë((Ë0)

	)

172 
	#•ö_lock
(
a
Ë((Ë0)

	)

173 
	#•ö_u∆ock
(
a
Ë((Ë0)

	)

174 
	#likñy
(
x
Ë(x)

	)

175 
	#u∆ikñy
(
x
Ë(x)

	)

176 
	#rcu_ªad_lock
(Ë((Ë0)

	)

177 
	#rcu_ªad_u∆ock
(Ë((Ë0)

	)

179 
ölöe
 
boﬁ
 
	$WARN_ON_ONCE
(
boﬁ
 
ex¥
) {

180  (
ex¥
);

181 
	}
}

183 
	#≥r˝u_cou¡î_ªad
(
x
Ë(*x)

	)

184 
	#≥r˝u_cou¡î_ªad_posôive
(
x
Ë((*xË> 0 ? (*xË: 0)

	)

185 
	#≥r˝u_cou¡î_sum
(
x
Ë(*x)

	)

191 
	#¥™dom_u32
(Ë0

	)

193 
	#PAGE_SIZE
 
	`gë∑gesize
()

	)

195 
ölöe
 
	$__do_div
(*
n
, 
ba£
)

197 
__ªs
;

198 
__ªs
 = ()(((Ë*
n
Ë% (Ë
ba£
);

199 *
n
 = ((Ë*nË/ (Ë
ba£
;

200  
__ªs
;

201 
	}
}

203 
	#do_div
(
n
,
ba£
Ë(
	`__do_div
((*)&“), (ba£)))

	)

204 
	#do_mod
(
a
, 
b
Ë(◊Ë% (b))

	)

205 
	#rﬁ32
(
x
,
y
Ë(((xË<< (y)Ë| ((xË>> (32 - (y))))

	)

207 
	#mö_t
(
ty≥
,
x
,
y
) \

208 ({ 
ty≥
 
__x
 = (
x
);Åy≥ 
__y
 = (
y
); __x < __y ? __x: __y; })

	)

209 
	#max_t
(
ty≥
,
x
,
y
) \

210 ({ 
ty≥
 
__x
 = (
x
);Åy≥ 
__y
 = (
y
); __x > __y ? __x: __y; })

	)

213 
	#__round_mask
(
x
, 
y
Ë((
	`__ty≥of__
(x))((y)-1))

	)

214 
	#round_up
(
x
, 
y
Ë((((x)-1Ë| 
	`__round_mask
(x, y))+1)

	)

215 
	#round_down
(
x
, 
y
Ë((xË& ~
	`__round_mask
(x, y))

	)

216 
	#DIV_ROUND_UP
(
n
,
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

221 
	#BITS_TO_LONGS
(
ƒ
Ë
	`DIV_ROUND_UP
“r, 
NBBY
 * ())

	)

222 
	#DECLARE_BITMAP
(
«me
,
bôs
) \

223 
«me
[
	`BITS_TO_LONGS
(
bôs
)]

	)

224 
	#BITMAP_FIRST_WORD_MASK
(
°¨t
Ë(~0UL << ((°¨tË& (
BITS_PER_LONG
 - 1)))

	)

231 
ölöe
 

232 
	$_föd_√xt_bô
(c⁄° *
addr
, 
nbôs
,

233 
°¨t
, 
övît
)

235 
tmp
;

237 i‡(!
nbôs
 || 
°¨t
 >=Çbits)

238  
nbôs
;

240 
tmp
 = 
addr
[
°¨t
 / 
BITS_PER_LONG
] ^ 
övît
;

243 
tmp
 &
	`BITMAP_FIRST_WORD_MASK
(
°¨t
);

244 
°¨t
 = 
	`round_down
(°¨t, 
BITS_PER_LONG
);

246 !
tmp
) {

247 
°¨t
 +
BITS_PER_LONG
;

248 i‡(
°¨t
 >
nbôs
)

249  
nbôs
;

251 
tmp
 = 
addr
[
°¨t
 / 
BITS_PER_LONG
] ^ 
övît
;

254  
	`mö
(
°¨t
 + 
	`ffs
(
tmp
), 
nbôs
);

255 
	}
}

260 
ölöe
 

261 
	$föd_√xt_bô
(c⁄° *
addr
, 
size
,

262 
off£t
)

264  
	`_föd_√xt_bô
(
addr
, 
size
, 
off£t
, 0UL);

265 
	}
}

266 
ölöe
 

267 
	$föd_√xt_zîo_bô
(c⁄° *
addr
, 
size
,

268 
off£t
)

270  
	`_föd_√xt_bô
(
addr
, 
size
, 
off£t
, ~0UL);

271 
	}
}

272 
	#föd_fú°_zîo_bô
(
addr
, 
size
Ë
	`föd_√xt_zîo_bô
(◊ddr), (size), 0)

	)

274 
ölöe
 
__©åibuã__
((const))

275 
	$is_powî_of_2
(
n
)

277  (
n
 != 0 && ((n & (n - 1)) == 0));

278 
	}
}

283 
ölöe
 
uöt


284 
	$roundup_pow_of_two
(
uöt
 
v
)

286 
i
;

287 
uöt
 
m
;

289 i‡((
v
 & (v - 1)) == 0)

290  
v
;

291 
	`ASSERT
((
v
 & 0x80000000) == 0);

292 i‡((
v
 & (v + 1)) == 0)

293  
v
 + 1;

294 
i
 = 0, 
m
 = 1; i < 31; i++, m <<= 1) {

295 i‡(
v
 & 
m
)

297 
v
 |
m
;

298 i‡((
v
 & (v + 1)) == 0)

299  
v
 + 1;

301 
	`ASSERT
(0);

303 
	}
}

305 
ölöe
 
__uöt64_t


306 
	$roundup_64
(
__uöt64_t
 
x
, 
__uöt32_t
 
y
)

308 
x
 +
y
 - 1;

309 
	`do_div
(
x
, 
y
);

310  
x
 * 
y
;

311 
	}
}

314 
	#XFS_BUF_LOCK
 0

	)

315 
	#XFS_BUF_TRYLOCK
 0

	)

316 
	#XBF_LOCK
 
XFS_BUF_LOCK


	)

317 
	#XBF_TRYLOCK
 
XFS_BUF_TRYLOCK


	)

318 
	#XBF_DONT_BLOCK
 0

	)

319 
	#XBF_UNMAPPED
 0

	)

320 
	#XBF_DONE
 0

	)

321 
	#XFS_BUF_GETERROR
(
bp
Ë0

	)

322 
	#XFS_BUF_DONE
(
bp
Ë((bp)->
b_Êags
 |
LIBXFS_B_UPTODATE
)

	)

323 
	#XFS_BUF_ISDONE
(
bp
Ë((bp)->
b_Êags
 & 
LIBXFS_B_UPTODATE
)

	)

324 
	#xfs_buf_°Æe
(
bp
Ë((bp)->
b_Êags
 |
LIBXFS_B_STALE
)

	)

325 
	#XFS_BUF_UNDELAYWRITE
(
bp
Ë((bp)->
b_Êags
 &~
LIBXFS_B_DIRTY
)

	)

326 
	#XFS_BUF_SET_VTYPE
(
a
,
b
Ë((Ë0)

	)

327 
	#XFS_BUF_SET_VTYPE_REF
(
a
,
b
,
c
Ë((Ë0)

	)

328 
	#XFS_BUF_SET_BDSTRAT_FUNC
(
a
,
b
Ë((Ë0)

	)

331 
	#xfs_öc‹e
(
bt
,
blkno
,
Àn
,
lockô
) ({ \

332 
	`ty≥of
(
blkno
Ë
__foo
 = (blkno); \

333 
	`ty≥of
(
Àn
Ë
__b¨
 = (len); \

334 (
blkno
Ë
__foo
; \

335 (
Àn
Ë
__b¨
; \

336 
NULL
; \

337 })

	)

338 
	#xfs_buf_ªl£
(
bp
Ë
	`libxfs_putbuf
(bp)

	)

339 
	#xfs_buf_gë
(
devp
,
blkno
,
Àn
,
f
Ë(
	`libxfs_gëbuf
((devp), (blkno), (Àn)))

	)

340 
	#xfs_bwrôe
(
bp
Ë
	`libxfs_wrôebuf
((bp), 0)

	)

341 
	#xfs_buf_dñwri_queue
(
bp
, 
bl
Ë
	`libxfs_wrôebuf
((bp), 0)

	)

343 
	#XBRW_READ
 
LIBXFS_BREAD


	)

344 
	#XBRW_WRITE
 
LIBXFS_BWRITE


	)

345 
	#xfs_buf_iomove
(
bp
,
off
,
Àn
,
d©a
,
f
Ë
	`libxfs_iomove
(bp,off,Àn,d©a,f)

	)

346 
	#xfs_buf_zîo
(
bp
,
off
,
Àn
Ë
	`libxfs_iomove
(bp,off,Àn,0,
LIBXFS_BZERO
)

	)

349 
	#XFS_MOUNT_32BITINODES
 
LIBXFS_MOUNT_32BITINODES


	)

350 
	#XFS_MOUNT_ATTR2
 
LIBXFS_MOUNT_ATTR2


	)

351 
	#XFS_MOUNT_SMALL_INUMS
 0

	)

352 
	#XFS_MOUNT_WSYNC
 0

	)

353 
	#XFS_MOUNT_NOALIGN
 0

	)

354 
	#XFS_MOUNT_IKEEP
 0

	)

355 
	#XFS_MOUNT_SWALLOC
 0

	)

356 
	#XFS_MOUNT_RDONLY
 0

	)

359 
	#xfs_å™s_gë_block_ªs
(
ç
Ë1

	)

360 
	#xfs_å™s_£t_sync
(
ç
Ë((Ë0)

	)

361 
	#xfs_å™s_‹dîed_buf
(
ç
, 
bp
Ë((Ë0)

	)

362 
	#xfs_å™s_agblocks_dñè
(
ç
, 
d
)

	)

363 
	#xfs_å™s_agÊi°_dñè
(
ç
, 
d
)

	)

364 
	#xfs_å™s_agbåì_dñè
(
ç
, 
d
)

	)

365 
	#xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
t
) ({ \

366 
__t
 = (
t
); \

367 
__t
 = __t; \

368 
ç
 =Åp; \

369 })

	)

371 
	#xfs_å™s_buf_c›y_ty≥
(
dbp
, 
sbp
)

	)

374 
	#xfs_buf_ªadahód
(
a
,
d
,
c
,
›s
) ({ \

375 
xfs_daddr_t
 
__d
 = 
d
; \

376 
__d
 = __d; \

377 })

	)

378 
	#xfs_buf_ªadahód_m≠
(
a
,
b
,
c
,
›s
Ë((Ë0Ë

	)

379 
	#xfs_bu·ø˚
(
x
,
y
Ë((Ë0Ë

	)

381 
	#xfs_cmn_îr
(
èg
,
Àvñ
,
mp
,
fmt
,
¨gs
...Ë
	`cmn_îr
÷evñ,fmt, ##árgs)

	)

382 
	#xfs_w¨n
(
mp
,
fmt
,
¨gs
...Ë
	`cmn_îr
(
CE_WARN
,fmt, ##árgs)

	)

383 
	#xfs_Æît
(
mp
,
fmt
,
¨gs
...Ë
	`cmn_îr
(
CE_ALERT
,fmt, ##árgs)

	)

384 
	#xfs_Æît_èg
(
mp
,
èg
,
fmt
,
¨gs
...Ë
	`cmn_îr
(
CE_ALERT
,fmt, ##árgs)

	)

386 
	#xfs_dú2_åa˚_¨gs
(
whîe
, 
¨gs
Ë((Ë0)

	)

387 
	#xfs_dú2_åa˚_¨gs_b
(
whîe
, 
¨gs
, 
bp
Ë((Ë0)

	)

388 
	#xfs_dú2_åa˚_¨gs_bb
(
whîe
, 
¨gs
, 
lbp
, 
dbp
Ë((Ë0)

	)

389 
	#xfs_dú2_åa˚_¨gs_bibii
(
whîe
, 
¨gs
, 
bs
, 
ss
, 
bd
, 
sd
, 
c
Ë((Ë0)

	)

390 
	#xfs_dú2_åa˚_¨gs_db
(
whîe
, 
¨gs
, 
db
, 
bp
Ë((Ë0)

	)

391 
	#xfs_dú2_åa˚_¨gs_i
(
whîe
, 
¨gs
, 
i
Ë((Ë0)

	)

392 
	#xfs_dú2_åa˚_¨gs_s
(
whîe
, 
¨gs
, 
s
Ë((Ë0)

	)

393 
	#xfs_dú2_åa˚_¨gs_sb
(
whîe
, 
¨gs
, 
s
, 
bp
Ë((Ë0)

	)

394 
	#xfs_s‹t
 
qs‹t


	)

396 
	#xfs_icsb_ªöô_cou¡îs
(
mp
Ëdÿ{ } 0)

	)

397 
	#xfs_öôülize_≥øg_iˇche
(
∑g
Ë((Ë0)

	)

399 
	#xfs_ûock
(
ù
,
mode
Ë((Ë0)

	)

400 
	#xfs_ûock_nowaô
(
ù
,
mode
Ë((Ë0)

	)

401 
	#xfs_ûock_demŸe
(
ù
,
mode
Ë((Ë0)

	)

402 
	#xfs_ûock_d©a_m≠_sh¨ed
(
ù
Ë(0)

	)

403 
	#xfs_ûock_©å_m≠_sh¨ed
(
ù
Ë(0)

	)

404 
	#xfs_iu∆ock
(
ù
,
mode
) ({ \

405 
	`ty≥of
(
mode
Ë
__mode
 = mode; \

406 
__mode
 = __mode; \

407 })

	)

408 
	#__xfs_Êock
(
ù
Ë((Ë0)

	)

411 
	#xfs_exã¡_busy_ªu£
(
mp
,
ag
,
bno
,
Àn
,
u£r
Ë((Ë0)

	)

413 
	#xfs_exã¡_busy_ö£π
(
ç
,
ag
,
bno
,
Àn
,
Êags
)({ \

414 
xfs_agnumbî_t
 
__foo
 = 
ag
; \

415 
__foo
 = __foo; \

416 })

	)

417 
	#xfs_exã¡_busy_åim
(
¨gs
,
bno
,
Àn
,
busy_gí
) ({ \

418 
__foo
 = *(
busy_gí
); \

419 *(
busy_gí
Ë
__foo
; \

420 
Ál£
; \

421 })

	)

422 
	#xfs_exã¡_busy_Êush
(
mp
,
∑g
,
busy_gí
Ë(0)

	)

425 
	#xfs_Æloc_busy_ö£π
(
ç
,
ag
,
b
,
Àn
) ({ \

426 
xfs_agnumbî_t
 
__foo
 = 
ag
; \

427 
__foo
 = 0; \

428 })

	)

430 
	#xfs_rŸ‹°ï
 1

	)

431 
	#xfs_bm≠_πÆloc
(
a
Ë(-
ENOSYS
)

	)

432 
	#xfs_gë_extsz_höt
(
ù
Ë(0)

	)

433 
	#xfs_gë_cowextsz_höt
(
ù
Ë(0)

	)

434 
	#xfs_öode_is_fûe°ªam
(
ù
Ë(0)

	)

435 
	#xfs_fûe°ªam_lookup_ag
(
ù
Ë(0)

	)

436 
	#xfs_fûe°ªam_√w_ag
(
ù
,
ag
Ë(0)

	)

438 
	#xfs_log_f‹˚
(
mp
,
Êags
Ë((Ë0)

	)

439 
	#XFS_LOG_SYNC
 1

	)

442 
	#xfs_å™s_mod_dquŸ_byöo
(
t
,
i
,
f
,
d
Ë((Ë0)

	)

443 
	#xfs_å™s_ª£rve_quŸa_nblks
(
t
,
i
,
b
,
n
,
f
Ë(0)

	)

444 
	#xfs_å™s_uƒe£rve_quŸa_nblks
(
t
,
i
,
b
,
n
,
f
Ë((Ë0)

	)

445 
	#xfs_qm_dq©èch
(
i
,
f
Ë(0)

	)

447 
	#uuid_c›y
(
s
,
d
Ë
	`∂©f‹m_uuid_c›y
((s),(d))

	)

448 
	#uuid_equÆ
(
s
,
d
Ë(
	`∂©f‹m_uuid_com∑ª
((s),(d)Ë=0)

	)

450 
	#xfs_i¸óã_log
(
ç
, 
agno
, 
agbno
, 
˙t
, 
isize
, 
Àn
, 
gí
Ë((Ë0)

	)

451 
	#xfs_sb_vÆid©e_fsb_cou¡
(
sbp
, 
nblks
Ë(0)

	)

457 
	gxfs_da_¨gs
;

458 
	gxfs_bm≠_‰ì
;

459 
	gxfs_bm≠_‰ì_ôem
;

460 
	gxfs_mou¡
;

461 
	gxfs_sb
;

462 
	gxfs_å™s
;

463 
	gxfs_öode
;

464 
	gxfs_log_ôem
;

465 
	gxfs_buf
;

466 
	gxfs_buf_m≠
;

467 
	gxfs_buf_log_ôem
;

468 
	gxfs_bu·¨g
;

471 
xfs_©å_rmtvÆ_gë
(
xfs_da_¨gs
 *);

474 
xfs_bm≠_dñ_‰ì
(
xfs_bm≠_‰ì
 *, 
xfs_bm≠_‰ì_ôem
 *);

477 
xfs_öôülize_≥øg_d©a
(
xfs_mou¡
 *, 
xfs_agnumbî_t
);

478 
xfs_mou¡_comm⁄
(
xfs_mou¡
 *, 
xfs_sb
 *);

483 
xfs_å™s_öô
(
xfs_mou¡
 *);

484 
xfs_å™s_rﬁl
(
xfs_å™s
 **, 
xfs_öode
 *);

487 
xfs_å™s_add_ôem
(
xfs_å™s
 *, 
xfs_log_ôem
 *);

488 
xfs_å™s_dñ_ôem
(
xfs_log_ôem
 *);

491 
xfs_öode_ôem_öô
(
xfs_öode
 *, 
xfs_mou¡
 *);

494 
xfs_buf_ôem_öô
(
xfs_buf
 *, 
xfs_mou¡
 *);

495 
xfs_buf_ôem_log
(
xfs_buf_log_ôem
 *, 
uöt
, uint);

498 
xfs_buf
 *
xfs_å™s_buf_ôem_m©ch
(
xfs_å™s
 *,

499 
xfs_bu·¨g
 *, 
xfs_buf_m≠
 *, );

502 
	#xfs_mod_fdblocks
(
mp
, 
dñè
, 
rsvd
) \

503 
	`libxfs_mod_öc‹e_sb
(
mp
, 
XFS_TRANS_SB_FDBLOCKS
, 
dñè
, 
rsvd
)

	)

504 
	#xfs_mod_‰exã¡s
(
mp
, 
dñè
) \

505 
	`libxfs_mod_öc‹e_sb
(
mp
, 
XFS_TRANS_SB_FREXTENTS
, 
dñè
, 0)

	)

506 
libxfs_mod_öc‹e_sb
(
xfs_mou¡
 *, , 
öt64_t
, );

508 
	#xfs_ªöô_≥r˝u_cou¡îs
(
mp
)

	)

510 
xfs_å™s_mod_sb
(
xfs_å™s
 *, 
uöt
, );

511 
xfs_å™s_öô
(
xfs_mou¡
 *);

512 
xfs_å™s_rﬁl
(
xfs_å™s
 **, 
xfs_öode
 *);

513 
xfs_vîifõr_îr‹
(
xfs_buf
 *
bp
);

517 
libxfs_π‰ì_exã¡
(
xfs_å™s
 *, 
xfs_πblock_t
, 
xfs_exéí_t
);

519 
libxfs_zîo_exã¡
(
xfs_öode
 *
ù
, 
xfs_fsblock_t
 
°¨t_fsb
,

520 
xfs_off_t
 
cou¡_fsb
);

522 
boﬁ
 
xfs_log_check_l¢
(
xfs_mou¡
 *, 
xfs_l¢_t
);

525 
	#xfs_öode_£t_cowblocks_èg
(
ù
)

	)

526 
	#xfs_öode_£t_eofblocks_èg
(
ù
)

	)

529 
	#XFS_STATS_CALC_INDEX
(
membî
Ë0

	)

530 
	#XFS_STATS_INC_OFF
(
mp
, 
off
)

	)

531 
	#XFS_STATS_ADD_OFF
(
mp
, 
off
, 
vÆ
)

	)

	@libxfs/linux.c

19 
	~<m¡ít.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/mou¡.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/sysöfo.h
>

25 
	~"libxfs_¥iv.h
"

26 
	~"xfs_fs.h
"

28 
	g∂©f‹m_has_uuid
 = 1;

29 *
¥og«me
;

30 
	gmax_block_Æignmít
;

32 #i‚de‡
BLKGETSIZE64


33 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
)

	)

35 #i‚de‡
BLKBSZSET


36 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

38 #i‚de‡
BLKSSZGET


39 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

42 #i‚de‡
RAMDISK_MAJOR


43 
	#RAMDISK_MAJOR
 1

	)

46 
	#PROC_MOUNTED
 "/¥oc/mou¡s"

	)

52 
	#CHECK_MOUNT_VERBOSE
 0x1

	)

53 
	#CHECK_MOUNT_WRITABLE
 0x2

	)

56 
	$∂©f‹m_check_mou¡
(*
«me
, *
block
, 
°©
 *
s
, 
Êags
)

58 
FILE
 *
f
;

59 
°©
 
°
, 
m°
;

60 
m¡ít
 *
m¡
;

61 
mou¡s
[
MAXPATHLEN
];

63 i‡(!
s
) {

65 i‡(
	`°©
(
block
, &
°
) < 0)

67 i‡((
°
.
°_mode
 & 
S_IFMT
Ë!
S_IFBLK
)

69 
s
 = &
°
;

72 
	`°r˝y
(
mou¡s
, (!
	`ac˚ss
(
PROC_MOUNTED
, 
R_OK
)Ë? PROC_MOUNTED : 
MOUNTED
);

73 i‡((
f
 = 
	`£tm¡ít
(
mou¡s
, "r")Ë=
NULL
) {

75 
	`Ârötf
(
°dîr
,

76 
	`_
("%s: %sÖossibly containsá mounted filesystem\n"),

77 
¥og«me
, 
«me
);

80 (
m¡
 = 
	`gëm¡ít
(
f
)Ë!
NULL
) {

81 i‡(
	`°©
(
m¡
->
m¡_dú
, &
m°
) < 0)

83 i‡(
m°
.
°_dev
 !
s
->
°_rdev
)

86 i‡((
Êags
 & 
CHECK_MOUNT_WRITABLE
Ë&& 
	`hasm¡›t
(
m¡
, 
MNTOPT_RO
))

91 
	`ídm¡ít
(
f
);

94 i‡(
m¡
 =
NULL
)

97 i‡(
Êags
 & 
CHECK_MOUNT_VERBOSE
) {

98 i‡(
Êags
 & 
CHECK_MOUNT_WRITABLE
) {

99 
	`Ârötf
(
°dîr
,

100 
	`_
("%s: %s containsá mountedánd writable filesystem\n"),

101 
¥og«me
, 
«me
);

103 
	`Ârötf
(
°dîr
,

104 
	`_
("%s: %s containsá mounted filesystem\n"),

105 
¥og«me
, 
«me
);

109 
	}
}

112 
	$∂©f‹m_check_ismou¡ed
(*
«me
, *
block
, 
°©
 *
s
, 
vîbo£
)

114 
Êags
;

116 
Êags
 = 
vîbo£
 ? 
CHECK_MOUNT_VERBOSE
 : 0;

117  
	`∂©f‹m_check_mou¡
(
«me
, 
block
, 
s
, 
Êags
);

118 
	}
}

121 
	$∂©f‹m_check_iswrôabÀ
(*
«me
, *
block
, 
°©
 *
s
)

123 
Êags
;

126 
Êags
 = 
CHECK_MOUNT_WRITABLE
 | 
CHECK_MOUNT_VERBOSE
;

127  
	`∂©f‹m_check_mou¡
(
«me
, 
block
, 
s
, 
Êags
);

128 
	}
}

131 
	$∂©f‹m_£t_blocksize
(
fd
, *
∑th
, 
dev_t
 
devi˚
, 
blocksize
, 
Áèl
)

133 
îr‹
 = 0;

135 i‡(
	`maj‹
(
devi˚
Ë!
RAMDISK_MAJOR
) {

136 i‡((
îr‹
 = 
	`io˘l
(
fd
, 
BLKBSZSET
, &
blocksize
)) < 0) {

137 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s - cannot set blocksize "

139 
¥og«me
, 
Áèl
 ? "error": "warning",

140 
blocksize
, 
∑th
, 
	`°ªº‹
(
î∫o
));

143  
îr‹
;

144 
	}
}

147 
	$∂©f‹m_Êush_devi˚
(
fd
, 
dev_t
 
devi˚
)

149 
°©
 
°
;

150 i‡(
	`maj‹
(
devi˚
Ë=
RAMDISK_MAJOR
)

153 i‡(
	`f°©
(
fd
, &
°
) < 0)

156 i‡(
	`S_ISREG
(
°
.
°_mode
))

157 
	`fsync
(
fd
);

159 
	`io˘l
(
fd
, 
BLKFLSBUF
, 0);

160 
	}
}

163 
	$∂©f‹m_födsizes
(*
∑th
, 
fd
, *
sz
, *
bsz
)

165 
°©
 
°
;

166 
__uöt64_t
 
size
;

167 
îr‹
;

169 i‡(
	`f°©
(
fd
, &
°
) < 0) {

170 
	`Ârötf
(
°dîr
, 
	`_
("%s: "

172 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

173 
	`exô
(1);

176 i‡((
°
.
°_mode
 & 
S_IFMT
Ë=
S_IFREG
) {

177 
diﬂâr
 
da
;

179 *
sz
 = ()(
°
.
°_size
 >> 9);

181 i‡(
	`io˘l
(
fd
, 
XFS_IOC_DIOINFO
, &
da
) < 0) {

186 *
bsz
 = 
BBSIZE
;

188 *
bsz
 = 
da
.
d_möiosz
;

190 i‡(*
bsz
 > 
max_block_Æignmít
)

191 
max_block_Æignmít
 = *
bsz
;

195 
îr‹
 = 
	`io˘l
(
fd
, 
BLKGETSIZE64
, &
size
);

196 i‡(
îr‹
 >= 0) {

198 *
sz
 = ()(
size
 >> 9);

201 
tmpsize
;

203 
îr‹
 = 
	`io˘l
(
fd
, 
BLKGETSIZE
, &
tmpsize
);

204 i‡(
îr‹
 < 0) {

205 
	`Ârötf
(
°dîr
, 
	`_
("%s: can't determine device size\n"),

206 
¥og«me
);

207 
	`exô
(1);

209 *
sz
 = ()
tmpsize
;

212 i‡(
	`io˘l
(
fd
, 
BLKSSZGET
, 
bsz
) < 0) {

213 
	`Ârötf
(
°dîr
, 
	`_
("%s: warning - cannot get sector size "

215 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

216 *
bsz
 = 
BBSIZE
;

218 i‡(*
bsz
 > 
max_block_Æignmít
)

219 
max_block_Æignmít
 = *
bsz
;

220 
	}
}

223 
	$∂©f‹m_födøw∑th
(*
∑th
)

225  
∑th
;

226 
	}
}

229 
	$∂©f‹m_födblock∑th
(*
∑th
)

231  
∑th
;

232 
	}
}

235 
	$∂©f‹m_dúe˘_blockdev
()

238 
	}
}

241 
	$∂©f‹m_Æign_blockdev
()

243 i‡(!
max_block_Æignmít
)

244  
	`gë∑gesize
();

245  
max_block_Æignmít
;

246 
	}
}

249 
	$∂©f‹m_≈roc
()

251  
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

252 
	}
}

255 
	$∂©f‹m_physmem
()

257 
sysöfo
 
si
;

259 i‡(
	`sysöfo
(&
si
) < 0) {

260 
	`Ârötf
(
°dîr
, 
	`_
("%s: can't determine memory size\n"),

261 
¥og«me
);

262 
	`exô
(1);

264  (
si
.
tŸÆøm
 >> 10Ë* si.
mem_unô
;

265 
	}
}

	@libxfs/list_sort.c

3 
	~"libxfs_¥iv.h
"

4 
	~"libxfs_io.h
"

5 
	~"öô.h
"

6 
	~"li°.h
"

8 
	#MAX_LIST_LENGTH_BITS
 20

	)

15 
li°_hód
 *
mîge
(*
¥iv
,

16 (*
cmp
)(*
¥iv
, 
li°_hód
 *
a
,

17 
li°_hód
 *
b
),

18 
li°_hód
 *
a
, li°_hód *
b
)

20 
li°_hód
 
hód
, *
èû
 = &head;

22 
a
 && 
b
) {

24 i‡((*
cmp
)(
¥iv
, 
a
, 
b
) <= 0) {

25 
èû
->
√xt
 = 
a
;

26 
a
 =á->
√xt
;

28 
èû
->
√xt
 = 
b
;

29 
b
 = b->
√xt
;

31 
èû
 =Åaû->
√xt
;

33 
èû
->
√xt
 = 
a
?:
b
;

34  
hód
.
√xt
;

35 
	}
}

44 
mîge_™d_ª°‹e_back_löks
(*
¥iv
,

45 (*
cmp
)(*
¥iv
, 
li°_hód
 *
a
,

46 
li°_hód
 *
b
),

47 
li°_hód
 *
hód
,

48 
li°_hód
 *
a
, li°_hód *
b
)

50 
li°_hód
 *
èû
 = 
hód
;

51 
cou¡
 = 0;

53 
a
 && 
b
) {

55 i‡((*
cmp
)(
¥iv
, 
a
, 
b
) <= 0) {

56 
èû
->
√xt
 = 
a
;

57 
a
->
¥ev
 = 
èû
;

58 
a
 =á->
√xt
;

60 
èû
->
√xt
 = 
b
;

61 
b
->
¥ev
 = 
èû
;

62 
b
 = b->
√xt
;

64 
èû
 =Åaû->
√xt
;

66 
èû
->
√xt
 = 
a
 ? : 
b
;

75 i‡(
	`u∆ikñy
(!(++
cou¡
)))

76 (*
cmp
)(
¥iv
, 
èû
->
√xt
,Åail->next);

78 
èû
->
√xt
->
¥ev
 =Åail;

79 
èû
 =Åaû->
√xt
;

80 } 
èû
->
√xt
);

82 
èû
->
√xt
 = 
hód
;

83 
hód
->
¥ev
 = 
èû
;

84 
	}
}

100 
li°_s‹t
(*
¥iv
, 
li°_hód
 *
hód
,

101 (*
cmp
)(*
¥iv
, 
li°_hód
 *
a
,

102 
li°_hód
 *
b
))

104 
li°_hód
 *
∑π
[
MAX_LIST_LENGTH_BITS
+1];

106 
Àv
;

107 
max_Àv
 = 0;

108 
li°_hód
 *
li°
;

110 i‡(
	`li°_em±y
(
hód
))

113 
	`mem£t
(
∑π
, 0, (part));

115 
hód
->
¥ev
->
√xt
 = 
NULL
;

116 
li°
 = 
hód
->
√xt
;

118 
li°
) {

119 
li°_hód
 *
cur
 = 
li°
;

120 
li°
 =Üi°->
√xt
;

121 
cur
->
√xt
 = 
NULL
;

123 
Àv
 = 0; 
∑π
[lev];Üev++) {

124 
cur
 = 
	`mîge
(
¥iv
, 
cmp
, 
∑π
[
Àv
], cur);

125 
∑π
[
Àv
] = 
NULL
;

127 i‡(
Àv
 > 
max_Àv
) {

128 i‡(
	`u∆ikñy
(
Àv
 >
	`ARRAY_SIZE
(
∑π
)-1)) {

129 
Àv
--;

131 
max_Àv
 = 
Àv
;

133 
∑π
[
Àv
] = 
cur
;

136 
Àv
 = 0;Üev < 
max_Àv
;Üev++)

137 i‡(
∑π
[
Àv
])

138 
li°
 = 
	`mîge
(
¥iv
, 
cmp
, 
∑π
[
Àv
],Üist);

140 
	`mîge_™d_ª°‹e_back_löks
(
¥iv
, 
cmp
, 
hód
, 
∑π
[
max_Àv
], 
li°
);

141 
	}
}

	@libxfs/logitem.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_sh¨ed.h
"

22 
	~"xfs_f‹m©.h
"

23 
	~"xfs_log_f‹m©.h
"

24 
	~"xfs_å™s_ªsv.h
"

25 
	~"xfs_mou¡.h
"

26 
	~"xfs_öode_buf.h
"

27 
	~"xfs_öode_f‹k.h
"

28 
	~"xfs_öode.h
"

29 
	~"xfs_å™s.h
"

31 
kmem_z⁄e_t
 *
	gxfs_buf_ôem_z⁄e
;

32 
kmem_z⁄e_t
 *
	gxfs_ûi_z⁄e
;

42 
xfs_buf_t
 *

43 
	$xfs_å™s_buf_ôem_m©ch
(

44 
xfs_å™s_t
 *
ç
,

45 
xfs_bu·¨g
 *
bç
,

46 
xfs_buf_m≠
 *
m≠
,

47 
nm≠s
)

49 
xfs_log_ôem_desc
 *
lidp
;

50 
xfs_buf_log_ôem
 *
blù
;

51 
Àn
 = 0;

52 
i
;

54 
i
 = 0; i < 
nm≠s
; i++)

55 
Àn
 +
m≠
[
i
].
bm_Àn
;

57 
	`li°_f‹_óch_íåy
(
lidp
, &
ç
->
t_ôems
, 
lid_å™s
) {

58 
blù
 = (
xfs_buf_log_ôem
 *)
lidp
->
lid_ôem
;

59 i‡(
blù
->
bli_ôem
.
li_ty≥
 =
XFS_LI_BUF
 &&

60 
blù
->
bli_buf
->
b_èrgë
->
dev
 =
bç
->dev &&

61 
	`XFS_BUF_ADDR
(
blù
->
bli_buf
Ë=
m≠
[0].
bm_bn
 &&

62 
blù
->
bli_buf
->
b_bcou¡
 =
	`BBTOB
(
Àn
)) {

63 
	`ASSERT
(
blù
->
bli_buf
->
b_m≠_cou¡
 =
nm≠s
);

64  
blù
->
bli_buf
;

68  
NULL
;

69 
	}
}

82 
	$xfs_buf_ôem_öô
(

83 
xfs_buf_t
 *
bp
,

84 
xfs_mou¡_t
 *
mp
)

86 
xfs_log_ôem_t
 *
lù
;

87 
xfs_buf_log_ôem_t
 *
bù
;

89 #ifde‡
LI_DEBUG


90 
	`Ârötf
(
°dîr
, "buf_ôem_öô f‹ buf„∏%p\n", 
bp
);

99 i‡(
	`XFS_BUF_FSPRIVATE3
(
bp
, 
xfs_mou¡_t
 *Ë!
mp
)

100 
	`XFS_BUF_SET_FSPRIVATE3
(
bp
, 
mp
);

101 
	`XFS_BUF_SET_BDSTRAT_FUNC
(
bp
, 
xfs_bd°øt_cb
);

102 i‡(
	`XFS_BUF_FSPRIVATE
(
bp
, *Ë!
NULL
) {

103 
lù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_log_ôem_t
 *);

104 i‡(
lù
->
li_ty≥
 =
XFS_LI_BUF
) {

105 #ifde‡
LI_DEBUG


106 
	`Ârötf
(
°dîr
,

108 
lù
, 
bp
);

114 
bù
 = (
xfs_buf_log_ôem_t
 *)
	`kmem_z⁄e_zÆloc
(
xfs_buf_ôem_z⁄e
,

115 
KM_SLEEP
);

116 #ifde‡
LI_DEBUG


117 
	`Ârötf
(
°dîr
, "adding buf item %p forÇot-logged buffer %p\n",

118 
bù
, 
bp
);

120 
bù
->
bli_ôem
.
li_ty≥
 = 
XFS_LI_BUF
;

121 
bù
->
bli_ôem
.
li_mou¡p
 = 
mp
;

122 
bù
->
bli_buf
 = 
bp
;

123 
bù
->
bli_f‹m©
.
blf_ty≥
 = 
XFS_LI_BUF
;

124 
bù
->
bli_f‹m©
.
blf_blkno
 = (
__öt64_t
)
	`XFS_BUF_ADDR
(
bp
);

125 
bù
->
bli_f‹m©
.
blf_Àn
 = ()
	`BTOBB
(
	`XFS_BUF_COUNT
(
bp
));

126 
	`XFS_BUF_SET_FSPRIVATE
(
bp
, 
bù
);

127 
	}
}

135 
	$xfs_buf_ôem_log
(

136 
xfs_buf_log_ôem_t
 *
bù
,

137 
uöt
 
fú°
,

138 
uöt
 
œ°
)

144 
bù
->
bli_Êags
 |
XFS_BLI_DIRTY
;

145 
	}
}

151 
	$xfs_öode_ôem_öô
(

152 
xfs_öode_t
 *
ù
,

153 
xfs_mou¡_t
 *
mp
)

155 
xfs_öode_log_ôem_t
 *
iù
;

157 
	`ASSERT
(
ù
->
i_ôemp
 =
NULL
);

158 
iù
 = 
ù
->
i_ôemp
 = (
xfs_öode_log_ôem_t
 *)

159 
	`kmem_z⁄e_zÆloc
(
xfs_ûi_z⁄e
, 
KM_SLEEP
);

160 #ifde‡
LI_DEBUG


161 
	`Ârötf
(
°dîr
, "inode_item_init for inode %llu, iip=%p\n",

162 
ù
->
i_öo
, 
iù
);

165 
iù
->
ûi_ôem
.
li_ty≥
 = 
XFS_LI_INODE
;

166 
iù
->
ûi_ôem
.
li_mou¡p
 = 
mp
;

167 
iù
->
ûi_öode
 = 
ù
;

168 
iù
->
ûi_f‹m©
.
ûf_ty≥
 = 
XFS_LI_INODE
;

169 
iù
->
ûi_f‹m©
.
ûf_öo
 = 
ù
->
i_öo
;

170 
iù
->
ûi_f‹m©
.
ûf_blkno
 = 
ù
->
i_im≠
.
im_blkno
;

171 
iù
->
ûi_f‹m©
.
ûf_Àn
 = 
ù
->
i_im≠
.
im_Àn
;

172 
iù
->
ûi_f‹m©
.
ûf_boff£t
 = 
ù
->
i_im≠
.
im_boff£t
;

173 
	}
}

	@libxfs/radix-tree.c

21 
	~"∂©f‹m_defs.h
"

22 
	~"xfs.h
"

23 
	~"ødix-åì.h
"

25 #i‚de‡
ARRAY_SIZE


26 
	#ARRAY_SIZE
(
x
Ë((xË/ ((x)[0]))

	)

29 
	#RADIX_TREE_MAP_SHIFT
 6

	)

30 
	#RADIX_TREE_MAP_SIZE
 (1UL << 
RADIX_TREE_MAP_SHIFT
)

	)

31 
	#RADIX_TREE_MAP_MASK
 (
RADIX_TREE_MAP_SIZE
-1)

	)

33 #ifde‡
RADIX_TREE_TAGS


34 
	#RADIX_TREE_TAG_LONGS
 \

35 ((
RADIX_TREE_MAP_SIZE
 + 
BITS_PER_LONG
 - 1Ë/ BITS_PER_LONG)

	)

38 
	sødix_åì_node
 {

39 
	mcou¡
;

40 *
	m¶Ÿs
[
RADIX_TREE_MAP_SIZE
];

41 #ifde‡
RADIX_TREE_TAGS


42 
	mègs
[
RADIX_TREE_MAX_TAGS
][
RADIX_TREE_TAG_LONGS
];

46 
	sødix_åì_∑th
 {

47 
ødix_åì_node
 *
	mnode
;

48 
	moff£t
;

51 
	#RADIX_TREE_INDEX_BITS
 (8 * ())

	)

52 
	#RADIX_TREE_MAX_PATH
 (
RADIX_TREE_INDEX_BITS
/
RADIX_TREE_MAP_SHIFT
 + 2)

	)

54 
	gheight_to_maxödex
[
RADIX_TREE_MAX_PATH
];

60 
	#ødix_åì_node_Æloc
(
r
Ë((
ødix_åì_node
 *) \

61 
	`ˇŒoc
(1, (
ødix_åì_node
)))

	)

62 
	#ødix_åì_node_‰ì
(
n
Ë
	`‰ì
“)

	)

64 #ifde‡
RADIX_TREE_TAGS


66 
ölöe
 
	$èg_£t
(
ødix_åì_node
 *
node
, 
èg
,

67 
off£t
)

69 *((
__uöt32_t
 *)
node
->
ègs
[
èg
] + (
off£t
 >> 5)) |= (1 << (offset & 31));

70 
	}
}

72 
ölöe
 
	$èg_˛ór
(
ødix_åì_node
 *
node
, 
èg
,

73 
off£t
)

75 
__uöt32_t
 *
p
 = (__uöt32_t*)
node
->
ègs
[
èg
] + (
off£t
 >> 5);

76 
__uöt32_t
 
m
 = 1 << (
off£t
 & 31);

77 *
p
 &~
m
;

78 
	}
}

80 
ölöe
 
	$èg_gë
(
ødix_åì_node
 *
node
, 
èg
,

81 
off£t
)

83  1 & (((c⁄° 
__uöt32_t
 *)
node
->
ègs
[
èg
])[
off£t
 >> 5] >> (offset & 31));

84 
	}
}

90 
ölöe
 
	$™y_èg_£t
(
ødix_åì_node
 *
node
, 
èg
)

92 
idx
;

93 
idx
 = 0; idx < 
RADIX_TREE_TAG_LONGS
; idx++) {

94 i‡(
node
->
ègs
[
èg
][
idx
])

98 
	}
}

106 
ölöe
 
	$ødix_åì_maxödex
(
height
)

108  
height_to_maxödex
[
height
];

109 
	}
}

114 
	$ødix_åì_exãnd
(
ødix_åì_roŸ
 *
roŸ
, 
ödex
)

116 
ødix_åì_node
 *
node
;

117 
height
;

118 #ifde‡
RADIX_TREE_TAGS


119 
ègs
[
RADIX_TREE_MAX_TAGS
];

120 
èg
;

124 
height
 = 
roŸ
->height + 1;

125 
ödex
 > 
	`ødix_åì_maxödex
(
height
))

126 
height
++;

128 i‡(
roŸ
->
∫ode
 =
NULL
) {

129 
roŸ
->
height
 = height;

130 
out
;

133 #ifde‡
RADIX_TREE_TAGS


138 
èg
 = 0;Åag < 
RADIX_TREE_MAX_TAGS
;Åag++) {

139 
ègs
[
èg
] = 0;

140 i‡(
	`™y_èg_£t
(
roŸ
->
∫ode
, 
èg
))

141 
ègs
[
èg
] = 1;

145 i‡(!(
node
 = 
	`ødix_åì_node_Æloc
(
roŸ
)))

146  -
ENOMEM
;

149 
node
->
¶Ÿs
[0] = 
roŸ
->
∫ode
;

151 #ifde‡
RADIX_TREE_TAGS


153 
èg
 = 0;Åag < 
RADIX_TREE_MAX_TAGS
;Åag++) {

154 i‡(
ègs
[
èg
])

155 
	`èg_£t
(
node
, 
èg
, 0);

158 
node
->
cou¡
 = 1;

159 
roŸ
->
∫ode
 = 
node
;

160 
roŸ
->
height
++;

161 } 
height
 > 
roŸ
->height);

162 
out
:

164 
	}
}

174 
	$ødix_åì_ö£π
(
ødix_åì_roŸ
 *
roŸ
,

175 
ödex
, *
ôem
)

177 
ødix_åì_node
 *
node
 = 
NULL
, *
¶Ÿ
;

178 
height
, 
shi·
;

179 
off£t
;

180 
îr‹
;

183 i‡((!
ödex
 && !
roŸ
->
∫ode
) ||

184 
ödex
 > 
	`ødix_åì_maxödex
(
roŸ
->
height
)) {

185 
îr‹
 = 
	`ødix_åì_exãnd
(
roŸ
, 
ödex
);

186 i‡(
îr‹
)

187  
îr‹
;

190 
¶Ÿ
 = 
roŸ
->
∫ode
;

191 
height
 = 
roŸ
->height;

192 
shi·
 = (
height
-1Ë* 
RADIX_TREE_MAP_SHIFT
;

194 
off£t
 = 0;

196 i‡(
¶Ÿ
 =
NULL
) {

198 i‡(!(
¶Ÿ
 = 
	`ødix_åì_node_Æloc
(
roŸ
)))

199  -
ENOMEM
;

200 i‡(
node
) {

201 
node
->
¶Ÿs
[
off£t
] = 
¶Ÿ
;

202 
node
->
cou¡
++;

204 
roŸ
->
∫ode
 = 
¶Ÿ
;

208 
off£t
 = (
ödex
 >> 
shi·
Ë& 
RADIX_TREE_MAP_MASK
;

209 
node
 = 
¶Ÿ
;

210 
¶Ÿ
 = 
node
->
¶Ÿs
[
off£t
];

211 
shi·
 -
RADIX_TREE_MAP_SHIFT
;

212 
height
--;

213 } 
height
 > 0);

215 i‡(
¶Ÿ
 !
NULL
)

216  -
EEXIST
;

218 
	`ASSERT
(
node
);

219 
node
->
cou¡
++;

220 
node
->
¶Ÿs
[
off£t
] = 
ôem
;

221 #ifde‡
RADIX_TREE_TAGS


222 
	`ASSERT
(!
	`èg_gë
(
node
, 0, 
off£t
));

223 
	`ASSERT
(!
	`èg_gë
(
node
, 1, 
off£t
));

226 
	}
}

228 
ölöe
 **
	$__lookup_¶Ÿ
(
ødix_åì_roŸ
 *
roŸ
,

229 
ödex
)

231 
height
, 
shi·
;

232 
ødix_åì_node
 **
¶Ÿ
;

234 
height
 = 
roŸ
->height;

235 i‡(
ödex
 > 
	`ødix_åì_maxödex
(
height
))

236  
NULL
;

238 
shi·
 = (
height
-1Ë* 
RADIX_TREE_MAP_SHIFT
;

239 
¶Ÿ
 = &
roŸ
->
∫ode
;

241 
height
 > 0) {

242 i‡(*
¶Ÿ
 =
NULL
)

243  
NULL
;

245 
¶Ÿ
 = (
ødix_åì_node
 **)

246 ((*
¶Ÿ
)->
¶Ÿs
 +

247 ((
ödex
 >> 
shi·
Ë& 
RADIX_TREE_MAP_MASK
));

248 
shi·
 -
RADIX_TREE_MAP_SHIFT
;

249 
height
--;

252  (**)
¶Ÿ
;

253 
	}
}

263 **
	$ødix_åì_lookup_¶Ÿ
(
ødix_åì_roŸ
 *
roŸ
, 
ödex
)

265  
	`__lookup_¶Ÿ
(
roŸ
, 
ödex
);

266 
	}
}

275 *
	$ødix_åì_lookup
(
ødix_åì_roŸ
 *
roŸ
, 
ödex
)

277 **
¶Ÿ
;

279 
¶Ÿ
 = 
	`__lookup_¶Ÿ
(
roŸ
, 
ödex
);

280  
¶Ÿ
 !
NULL
 ? *slot : NULL;

281 
	}
}

290 *
	$ødix_åì_lookup_fú°
(
ødix_åì_roŸ
 *
roŸ
, *
ödex
)

292 
height
, 
shi·
;

293 
ødix_åì_node
 *
¶Ÿ
;

294 
i
;

296 
height
 = 
roŸ
->height;

297 *
ödex
 = 0;

298 i‡(
height
 == 0)

299  
NULL
;

301 
shi·
 = (
height
-1Ë* 
RADIX_TREE_MAP_SHIFT
;

302 
¶Ÿ
 = 
roŸ
->
∫ode
;

304 ; 
height
 > 1; height--) {

305 
i
 = 0; i < 
RADIX_TREE_MAP_SIZE
; i++) {

306 i‡(
¶Ÿ
->
¶Ÿs
[
i
] !
NULL
)

309 
	`ASSERT
(
i
 < 
RADIX_TREE_MAP_SIZE
);

311 *
ödex
 |(
i
 << 
shi·
);

312 
shi·
 -
RADIX_TREE_MAP_SHIFT
;

313 
¶Ÿ
 = slŸ->
¶Ÿs
[
i
];

315 
i
 = 0; i < 
RADIX_TREE_MAP_SIZE
; i++) {

316 i‡(
¶Ÿ
->
¶Ÿs
[
i
] !
NULL
) {

317 *
ödex
 |
i
;

318  
¶Ÿ
->
¶Ÿs
[
i
];

321  
NULL
;

322 
	}
}

324 #ifde‡
RADIX_TREE_TAGS


339 *
	$ødix_åì_èg_£t
(
ødix_åì_roŸ
 *
roŸ
,

340 
ödex
, 
èg
)

342 
height
, 
shi·
;

343 
ødix_åì_node
 *
¶Ÿ
;

345 
height
 = 
roŸ
->height;

346 i‡(
ödex
 > 
	`ødix_åì_maxödex
(
height
))

347  
NULL
;

349 
shi·
 = (
height
 - 1Ë* 
RADIX_TREE_MAP_SHIFT
;

350 
¶Ÿ
 = 
roŸ
->
∫ode
;

352 
height
 > 0) {

353 
off£t
;

355 
off£t
 = (
ödex
 >> 
shi·
Ë& 
RADIX_TREE_MAP_MASK
;

356 i‡(!
	`èg_gë
(
¶Ÿ
, 
èg
, 
off£t
))

357 
	`èg_£t
(
¶Ÿ
, 
èg
, 
off£t
);

358 
¶Ÿ
 = slŸ->
¶Ÿs
[
off£t
];

359 
	`ASSERT
(
¶Ÿ
 !
NULL
);

360 
shi·
 -
RADIX_TREE_MAP_SHIFT
;

361 
height
--;

364  
¶Ÿ
;

365 
	}
}

381 *
	$ødix_åì_èg_˛ór
(
ødix_åì_roŸ
 *
roŸ
,

382 
ödex
, 
èg
)

384 
ødix_åì_∑th
 
∑th
[
RADIX_TREE_MAX_PATH
 + 1], *
∑thp
 =Öath;

385 
ødix_åì_node
 *
¶Ÿ
;

386 
height
, 
shi·
;

387 *
ªt
 = 
NULL
;

389 
height
 = 
roŸ
->height;

390 i‡(
ödex
 > 
	`ødix_åì_maxödex
(
height
))

391 
out
;

393 
shi·
 = (
height
 - 1Ë* 
RADIX_TREE_MAP_SHIFT
;

394 
∑thp
->
node
 = 
NULL
;

395 
¶Ÿ
 = 
roŸ
->
∫ode
;

397 
height
 > 0) {

398 
off£t
;

400 i‡(
¶Ÿ
 =
NULL
)

401 
out
;

403 
off£t
 = (
ödex
 >> 
shi·
Ë& 
RADIX_TREE_MAP_MASK
;

404 
∑thp
[1].
off£t
 = offset;

405 
∑thp
[1].
node
 = 
¶Ÿ
;

406 
¶Ÿ
 = slŸ->
¶Ÿs
[
off£t
];

407 
∑thp
++;

408 
shi·
 -
RADIX_TREE_MAP_SHIFT
;

409 
height
--;

412 
ªt
 = 
¶Ÿ
;

413 i‡(
ªt
 =
NULL
)

414 
out
;

417 i‡(!
	`èg_gë
(
∑thp
->
node
, 
èg
,Ö©hp->
off£t
))

418 
out
;

419 
	`èg_˛ór
(
∑thp
->
node
, 
èg
,Ö©hp->
off£t
);

420 i‡(
	`™y_èg_£t
(
∑thp
->
node
, 
èg
))

421 
out
;

422 
∑thp
--;

423 } 
∑thp
->
node
);

424 
out
:

425  
ªt
;

426 
	}
}

431 
	$__lookup
(
ødix_åì_roŸ
 *
roŸ
, **
ªsu…s
, 
ödex
,

432 
max_ôems
, *
√xt_ödex
)

434 
ƒ_found
 = 0;

435 
shi·
, 
height
;

436 
ødix_åì_node
 *
¶Ÿ
;

437 
i
;

439 
height
 = 
roŸ
->height;

440 i‡(
height
 == 0)

441 
out
;

443 
shi·
 = (
height
-1Ë* 
RADIX_TREE_MAP_SHIFT
;

444 
¶Ÿ
 = 
roŸ
->
∫ode
;

446  ; 
height
 > 1; height--) {

448 
i
 = (
ödex
 >> 
shi·
Ë& 
RADIX_TREE_MAP_MASK
 ;

449 
i
 < 
RADIX_TREE_MAP_SIZE
; i++) {

450 i‡(
¶Ÿ
->
¶Ÿs
[
i
] !
NULL
)

452 
ödex
 &~((1UL << 
shi·
) - 1);

453 
ödex
 +1UL << 
shi·
;

454 i‡(
ödex
 == 0)

455 
out
;

457 i‡(
i
 =
RADIX_TREE_MAP_SIZE
)

458 
out
;

460 
shi·
 -
RADIX_TREE_MAP_SHIFT
;

461 
¶Ÿ
 = slŸ->
¶Ÿs
[
i
];

465 
i
 = 
ödex
 & 
RADIX_TREE_MAP_MASK
; i < 
RADIX_TREE_MAP_SIZE
; i++) {

466 
ödex
++;

467 i‡(
¶Ÿ
->
¶Ÿs
[
i
]) {

468 
ªsu…s
[
ƒ_found
++] = 
¶Ÿ
->
¶Ÿs
[
i
];

469 i‡(
ƒ_found
 =
max_ôems
)

470 
out
;

473 
out
:

474 *
√xt_ödex
 = 
ödex
;

475  
ƒ_found
;

476 
	}
}

492 
	$ødix_åì_g™g_lookup
(
ødix_åì_roŸ
 *
roŸ
, **
ªsu…s
,

493 
fú°_ödex
, 
max_ôems
)

495 c⁄° 
max_ödex
 = 
	`ødix_åì_maxödex
(
roŸ
->
height
);

496 
cur_ödex
 = 
fú°_ödex
;

497 
ªt
 = 0;

499 
ªt
 < 
max_ôems
) {

500 
ƒ_found
;

501 
√xt_ödex
;

503 i‡(
cur_ödex
 > 
max_ödex
)

505 
ƒ_found
 = 
	`__lookup
(
roŸ
, 
ªsu…s
 + 
ªt
, 
cur_ödex
,

506 
max_ôems
 - 
ªt
, &
√xt_ödex
);

507 
ªt
 +
ƒ_found
;

508 i‡(
√xt_ödex
 == 0)

510 
cur_ödex
 = 
√xt_ödex
;

512  
ªt
;

513 
	}
}

531 
	$ødix_åì_g™g_lookup_ex
(
ødix_åì_roŸ
 *
roŸ
, **
ªsu…s
,

532 
fú°_ödex
, 
œ°_ödex
,

533 
max_ôems
)

535 c⁄° 
max_ödex
 = 
	`ødix_åì_maxödex
(
roŸ
->
height
);

536 
cur_ödex
 = 
fú°_ödex
;

537 
ªt
 = 0;

539 
ªt
 < 
max_ôems
 && 
cur_ödex
 < 
œ°_ödex
) {

540 
ƒ_found
;

541 
√xt_ödex
;

543 i‡(
cur_ödex
 > 
max_ödex
)

545 
ƒ_found
 = 
	`__lookup
(
roŸ
, 
ªsu…s
 + 
ªt
, 
cur_ödex
,

546 
max_ôems
 - 
ªt
, &
√xt_ödex
);

547 
ªt
 +
ƒ_found
;

548 i‡(
√xt_ödex
 == 0)

550 
cur_ödex
 = 
√xt_ödex
;

552  
ªt
;

553 
	}
}

555 #ifde‡
RADIX_TREE_TAGS


558 
	$__lookup_èg
(
ødix_åì_roŸ
 *
roŸ
, **
ªsu…s
, 
ödex
,

559 
max_ôems
, *
√xt_ödex
, 
èg
)

561 
ƒ_found
 = 0;

562 
shi·
;

563 
height
 = 
roŸ
->height;

564 
ødix_åì_node
 *
¶Ÿ
;

566 
shi·
 = (
height
 - 1Ë* 
RADIX_TREE_MAP_SHIFT
;

567 
¶Ÿ
 = 
roŸ
->
∫ode
;

569 
height
 > 0) {

570 
i
 = (
ödex
 >> 
shi·
Ë& 
RADIX_TREE_MAP_MASK
;

572  ; 
i
 < 
RADIX_TREE_MAP_SIZE
; i++) {

573 i‡(
	`èg_gë
(
¶Ÿ
, 
èg
, 
i
)) {

574 
	`ASSERT
(
¶Ÿ
->
¶Ÿs
[
i
] !
NULL
);

577 
ödex
 &~((1UL << 
shi·
) - 1);

578 
ödex
 +1UL << 
shi·
;

579 i‡(
ödex
 == 0)

580 
out
;

582 i‡(
i
 =
RADIX_TREE_MAP_SIZE
)

583 
out
;

584 
height
--;

585 i‡(
height
 == 0) {

586 
j
 = 
ödex
 & 
RADIX_TREE_MAP_MASK
;

588  ; 
j
 < 
RADIX_TREE_MAP_SIZE
; j++) {

589 
ödex
++;

590 i‡(
	`èg_gë
(
¶Ÿ
, 
èg
, 
j
)) {

591 
	`ASSERT
(
¶Ÿ
->
¶Ÿs
[
j
] !
NULL
);

592 
ªsu…s
[
ƒ_found
++] = 
¶Ÿ
->
¶Ÿs
[
j
];

593 i‡(
ƒ_found
 =
max_ôems
)

594 
out
;

598 
shi·
 -
RADIX_TREE_MAP_SHIFT
;

599 
¶Ÿ
 = slŸ->
¶Ÿs
[
i
];

601 
out
:

602 *
√xt_ödex
 = 
ödex
;

603  
ƒ_found
;

604 
	}
}

620 
	$ødix_åì_g™g_lookup_èg
(
ødix_åì_roŸ
 *
roŸ
, **
ªsu…s
,

621 
fú°_ödex
, 
max_ôems
,

622 
èg
)

624 c⁄° 
max_ödex
 = 
	`ødix_åì_maxödex
(
roŸ
->
height
);

625 
cur_ödex
 = 
fú°_ödex
;

626 
ªt
 = 0;

628 
ªt
 < 
max_ôems
) {

629 
ƒ_found
;

630 
√xt_ödex
;

632 i‡(
cur_ödex
 > 
max_ödex
)

634 
ƒ_found
 = 
	`__lookup_èg
(
roŸ
, 
ªsu…s
 + 
ªt
, 
cur_ödex
,

635 
max_ôems
 - 
ªt
, &
√xt_ödex
, 
èg
);

636 
ªt
 +
ƒ_found
;

637 i‡(
√xt_ödex
 == 0)

639 
cur_ödex
 = 
√xt_ödex
;

641  
ªt
;

642 
	}
}

650 
ölöe
 
	$ødix_åì_shrök
(
ødix_åì_roŸ
 *
roŸ
)

653 
roŸ
->
height
 > 1 &&

654 
roŸ
->
∫ode
->
cou¡
 == 1 &&

655 
roŸ
->
∫ode
->
¶Ÿs
[0]) {

656 
ødix_åì_node
 *
to_‰ì
 = 
roŸ
->
∫ode
;

658 
roŸ
->
∫ode
 = 
to_‰ì
->
¶Ÿs
[0];

659 
roŸ
->
height
--;

661 #ifde‡
RADIX_TREE_TAGS


662 
	`èg_˛ór
(
to_‰ì
, 0, 0);

663 
	`èg_˛ór
(
to_‰ì
, 1, 0);

665 
to_‰ì
->
¶Ÿs
[0] = 
NULL
;

666 
to_‰ì
->
cou¡
 = 0;

667 
	`ødix_åì_node_‰ì
(
to_‰ì
);

669 
	}
}

680 *
	$ødix_åì_dñëe
(
ødix_åì_roŸ
 *
roŸ
, 
ödex
)

682 
ødix_åì_∑th
 
∑th
[
RADIX_TREE_MAX_PATH
 + 1], *
∑thp
 =Öath;

683 
ødix_åì_∑th
 *
‹ig_∑thp
;

684 
ødix_åì_node
 *
¶Ÿ
;

685 
height
, 
shi·
;

686 *
ªt
 = 
NULL
;

687 #ifde‡
RADIX_TREE_TAGS


688 
ègs
[
RADIX_TREE_MAX_TAGS
];

689 
ƒ_˛óªd_ègs
;

690 
èg
;

692 
off£t
;

694 
height
 = 
roŸ
->height;

695 i‡(
ödex
 > 
	`ødix_åì_maxödex
(
height
))

696 
out
;

698 
shi·
 = (
height
 - 1Ë* 
RADIX_TREE_MAP_SHIFT
;

699 
∑thp
->
node
 = 
NULL
;

700 
¶Ÿ
 = 
roŸ
->
∫ode
;

702  ; 
height
 > 0; height--) {

703 i‡(
¶Ÿ
 =
NULL
)

704 
out
;

706 
∑thp
++;

707 
off£t
 = (
ödex
 >> 
shi·
Ë& 
RADIX_TREE_MAP_MASK
;

708 
∑thp
->
off£t
 = offset;

709 
∑thp
->
node
 = 
¶Ÿ
;

710 
¶Ÿ
 = slŸ->
¶Ÿs
[
off£t
];

711 
shi·
 -
RADIX_TREE_MAP_SHIFT
;

714 
ªt
 = 
¶Ÿ
;

715 i‡(
ªt
 =
NULL
)

716 
out
;

718 
‹ig_∑thp
 = 
∑thp
;

720 #ifde‡
RADIX_TREE_TAGS


724 
ƒ_˛óªd_ègs
 = 0;

725 
èg
 = 0;Åag < 
RADIX_TREE_MAX_TAGS
;Åag++) {

726 
ègs
[
èg
] = 1;

727 i‡(
	`èg_gë
(
∑thp
->
node
, 
èg
,Ö©hp->
off£t
)) {

728 
	`èg_˛ór
(
∑thp
->
node
, 
èg
,Ö©hp->
off£t
);

729 i‡(!
	`™y_èg_£t
(
∑thp
->
node
, 
èg
)) {

730 
ègs
[
èg
] = 0;

731 
ƒ_˛óªd_ègs
++;

736 
∑thp
--; 
ƒ_˛óªd_ègs
 &&Ö©hp->
node
;Öathp--) {

737 
èg
 = 0;Åag < 
RADIX_TREE_MAX_TAGS
;Åag++) {

738 i‡(
ègs
[
èg
])

741 
	`èg_˛ór
(
∑thp
->
node
, 
èg
,Ö©hp->
off£t
);

742 i‡(
	`™y_èg_£t
(
∑thp
->
node
, 
èg
)) {

743 
ègs
[
èg
] = 1;

744 
ƒ_˛óªd_ègs
--;

750 
∑thp
 = 
‹ig_∑thp
;Ö©hp->
node
;Öathp--) {

751 
∑thp
->
node
->
¶Ÿs
[∑thp->
off£t
] = 
NULL
;

752 
∑thp
->
node
->
cou¡
--;

754 i‡(
∑thp
->
node
->
cou¡
) {

755 i‡(
∑thp
->
node
 =
roŸ
->
∫ode
)

756 
	`ødix_åì_shrök
(
roŸ
);

757 
out
;

761 
	`ødix_åì_node_‰ì
(
∑thp
->
node
);

763 
roŸ
->
∫ode
 = 
NULL
;

764 
roŸ
->
height
 = 0;

765 
out
:

766  
ªt
;

767 
	}
}

769 #ifde‡
RADIX_TREE_TAGS


775 
	$ødix_åì_ègged
(
ødix_åì_roŸ
 *
roŸ
, 
èg
)

777 
ødix_åì_node
 *
∫ode
;

778 
∫ode
 = 
roŸ
->rnode;

779 i‡(!
∫ode
)

781  
	`™y_èg_£t
(
∫ode
, 
èg
);

782 
	}
}

785 
	$__maxödex
(
height
)

787 
width
 = 
height
 * 
RADIX_TREE_MAP_SHIFT
;

788 
shi·
 = 
RADIX_TREE_INDEX_BITS
 - 
width
;

790 i‡(
shi·
 < 0)

792 i‡(
shi·
 >
BITS_PER_LONG
)

794  ~0UL >> 
shi·
;

795 
	}
}

797 
	$ødix_åì_öô_maxödex
()

799 
i
;

801 
i
 = 0; i < 
	`ARRAY_SIZE
(
height_to_maxödex
); i++)

802 
height_to_maxödex
[
i
] = 
	`__maxödex
(i);

803 
	}
}

805 
	$ødix_åì_öô
()

807 
	`ødix_åì_öô_maxödex
();

808 
	}
}

	@libxfs/rdwr.c

20 
	~"libxfs_¥iv.h
"

21 
	~"öô.h
"

22 
	~"xfs_fs.h
"

23 
	~"xfs_sh¨ed.h
"

24 
	~"xfs_f‹m©.h
"

25 
	~"xfs_log_f‹m©.h
"

26 
	~"xfs_å™s_ªsv.h
"

27 
	~"xfs_mou¡.h
"

28 
	~"xfs_öode_buf.h
"

29 
	~"xfs_öode_f‹k.h
"

30 
	~"xfs_öode.h
"

31 
	~"xfs_å™s.h
"

33 
	~"libxfs.h
"

66 
	#BDSTRAT_SIZE
 (256 * 1024)

	)

68 
	#IO_BCOMPARE_CHECK


	)

72 
	$libxfs_devi˚_zîo
(
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
°¨t
, 
uöt
 
Àn
)

74 
xfs_off_t
 
°¨t_off£t
, 
íd_off£t
, 
off£t
;

75 
ssize_t
 
zsize
, 
byãs
;

76 *
z
;

77 
fd
;

79 
zsize
 = 
	`mö
(
BDSTRAT_SIZE
, 
	`BBTOB
(
Àn
));

80 i‡((
z
 = 
	`memÆign
(
	`libxfs_devi˚_Æignmít
(), 
zsize
)Ë=
NULL
) {

81 
	`Ârötf
(
°dîr
,

82 
	`_
("%s: %s can't memalign %d bytes: %s\n"),

83 
¥og«me
, 
__FUNCTION__
, ()
zsize
, 
	`°ªº‹
(
î∫o
));

84 
	`exô
(1);

86 
	`mem£t
(
z
, 0, 
zsize
);

88 
fd
 = 
	`libxfs_devi˚_to_fd
(
bç
->
dev
);

89 
°¨t_off£t
 = 
	`LIBXFS_BBTOOFF64
(
°¨t
);

91 i‡((
	`l£ek
(
fd
, 
°¨t_off£t
, 
SEEK_SET
)) < 0) {

92 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s seekÅo offset %llu failed: %s\n"),

93 
¥og«me
, 
__FUNCTION__
,

94 ()
°¨t_off£t
, 
	`°ªº‹
(
î∫o
));

95 
	`exô
(1);

98 
íd_off£t
 = 
	`LIBXFS_BBTOOFF64
(
°¨t
 + 
Àn
Ë- 
°¨t_off£t
;

99 
off£t
 = 0; off£à< 
íd_off£t
; ) {

100 
byãs
 = 
	`mö
((
ssize_t
)(
íd_off£t
 - 
off£t
), 
zsize
);

101 i‡((
byãs
 = 
	`wrôe
(
fd
, 
z
, bytes)) < 0) {

102 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s write failed: %s\n"),

103 
¥og«me
, 
__FUNCTION__
, 
	`°ªº‹
(
î∫o
));

104 
	`exô
(1);

105 } i‡(
byãs
 == 0) {

106 
	`Ârötf
(
°dîr
, 
	`_
("%s: %sÇotÖrogressing?\n"),

107 
¥og«me
, 
__FUNCTION__
);

108 
	`exô
(1);

110 
off£t
 +
byãs
;

112 
	`‰ì
(
z
);

114 
	}
}

116 
	$unmou¡_ªc‹d
(*
p
)

118 
xlog_›_hódî_t
 *
›
 = (xlog_›_hódî_à*)
p
;

121 
__uöt16_t
 
magic
;

122 
__uöt16_t
 
∑d1
;

123 
__uöt32_t
 
∑d2
;

124 } 
magic
 = { 
XLOG_UNMOUNT_TYPE
, 0, 0 };

126 
	`mem£t
(
p
, 0, 
BBSIZE
);

128 
›
->
oh_tid
 = 
	`˝u_to_be32
(0xb0c0d0d0);

129 
›
->
oh_Àn
 = 
	`˝u_to_be32
((
magic
));

130 
›
->
oh_˛õ¡id
 = 
XFS_LOG
;

131 
›
->
oh_Êags
 = 
XLOG_UNMOUNT_TRANS
;

132 
›
->
oh_ªs2
 = 0;

135 
	`mem˝y
((*)
p
 + (
xlog_›_hódî_t
), &
magic
, (magic));

136 
	}
}

138 *
	$√xt
(

139 *
±r
,

140 
off£t
,

141 *
¥iv©e
)

143 
xfs_buf
 *
buf
 = (xfs_bu‡*)
¥iv©e
;

145 i‡(
buf
 &&

146 (
	`XFS_BUF_COUNT
(
buf
Ë< ()(
±r
 - 
	`XFS_BUF_PTR
(buf)Ë+ 
off£t
))

147 
	`ab‹t
();

149  
±r
 + 
off£t
;

150 
	}
}

158 
	$libxfs_log_˛ór
(

159 
xfs_bu·¨g
 *
bç
,

160 *
d±r
,

161 
xfs_daddr_t
 
°¨t
,

162 
uöt
 
Àngth
,

163 
uuid_t
 *
fs_uuid
,

164 
vîsi⁄
,

165 
sunô
,

166 
fmt
,

167 
cy˛e
,

168 
boﬁ
 
max
)

170 
xfs_buf
 *
bp
 = 
NULL
;

171 
Àn
;

172 
xfs_l¢_t
 
l¢
;

173 
xfs_l¢_t
 
èû_l¢
;

174 
xfs_daddr_t
 
blk
;

175 
xfs_daddr_t
 
íd_blk
;

176 *
±r
;

178 i‡(((
bç
 && 
d±r
) || (!btp && !dptr)) ||

179 (
bç
 && !bç->
dev
Ë|| !
fs_uuid
)

180  -
EINVAL
;

183 i‡(
bç
)

184 
	`libxfs_devi˚_zîo
(
bç
, 
°¨t
, 
Àngth
);

186 
	`mem£t
(
d±r
, 0, 
	`BBTOB
(
Àngth
));

195 
Àn
 = ((
vîsi⁄
 =2Ë&& 
sunô
Ë? 
	`BTOBB
(sunit) : 2;

196 
Àn
 = 
	`MAX
(len, 2);

197 
l¢
 = 
	`xlog_assign_l¢
(
cy˛e
, 0);

198 i‡(
cy˛e
 =
XLOG_INIT_CYCLE
)

199 
èû_l¢
 = 
l¢
;

201 
èû_l¢
 = 
	`xlog_assign_l¢
(
cy˛e
 - 1, 
Àngth
 - 
Àn
);

204 
±r
 = 
d±r
;

205 i‡(
bç
) {

206 
bp
 = 
	`libxfs_gëbu‰
(
bç
, 
°¨t
, 
Àn
);

207 
±r
 = 
	`XFS_BUF_PTR
(
bp
);

209 
	`libxfs_log_hódî
(
±r
, 
fs_uuid
, 
vîsi⁄
, 
sunô
, 
fmt
, 
l¢
, 
èû_l¢
,

210 
√xt
, 
bp
);

211 i‡(
bp
) {

212 
bp
->
b_Êags
 |
LIBXFS_B_DIRTY
;

213 
	`libxfs_putbu‰
(
bp
);

220 i‡(
cy˛e
 =
XLOG_INIT_CYCLE
)

228 i‡(
max
)

229 
Àn
 = 
	`BTOBB
(
BDSTRAT_SIZE
);

241 
cy˛e
--;

242 
blk
 = 
°¨t
 + 
Àn
;

243 i‡(
d±r
)

244 
d±r
 +
	`BBTOB
(
Àn
);

245 
íd_blk
 = 
°¨t
 + 
Àngth
;

247 
Àn
 = 
	`mö
(
íd_blk
 - 
blk
,Üen);

248 
blk
 < 
íd_blk
) {

249 
l¢
 = 
	`xlog_assign_l¢
(
cy˛e
, 
blk
 - 
°¨t
);

250 
èû_l¢
 = 
	`xlog_assign_l¢
(
cy˛e
, 
blk
 - 
°¨t
 - 
Àn
);

252 
±r
 = 
d±r
;

253 i‡(
bç
) {

254 
bp
 = 
	`libxfs_gëbu‰
(
bç
, 
blk
, 
Àn
);

255 
±r
 = 
	`XFS_BUF_PTR
(
bp
);

261 
	`libxfs_log_hódî
(
±r
, 
fs_uuid
, 
vîsi⁄
, 
	`BBTOB
(
Àn
), 
fmt
, 
l¢
,

262 
èû_l¢
, 
√xt
, 
bp
);

263 i‡(
bp
) {

264 
bp
->
b_Êags
 |
LIBXFS_B_DIRTY
;

265 
	`libxfs_putbu‰
(
bp
);

268 
blk
 +
Àn
;

269 i‡(
d±r
)

270 
d±r
 +
	`BBTOB
(
Àn
);

271 
Àn
 = 
	`mö
(
íd_blk
 - 
blk
,Üen);

275 
	}
}

278 
	$libxfs_log_hódî
(

279 *
ˇddr
,

280 
uuid_t
 *
fs_uuid
,

281 
vîsi⁄
,

282 
sunô
,

283 
fmt
,

284 
xfs_l¢_t
 
l¢
,

285 
xfs_l¢_t
 
èû_l¢
,

286 
libxfs_gë_block_t
 *
√xtfunc
,

287 *
¥iv©e
)

289 
xlog_ªc_hódî_t
 *
hód
 = (xlog_ªc_hódî_à*)
ˇddr
;

290 *
p
 = 
ˇddr
;

291 
__be32
 
cy˛e_l¢
;

292 
i
, 
Àn
;

293 
hdrs
 = 1;

295 i‡(
l¢
 =
NULLCOMMITLSN
)

296 
l¢
 = 
	`xlog_assign_l¢
(
XLOG_INIT_CYCLE
, 0);

297 i‡(
èû_l¢
 =
NULLCOMMITLSN
)

298 
èû_l¢
 = 
l¢
;

300 
Àn
 = ((
vîsi⁄
 =2Ë&& 
sunô
Ë? 
	`BTOBB
(sunit) : 1;

302 
	`mem£t
(
p
, 0, 
BBSIZE
);

303 
hód
->
h_magi˙o
 = 
	`˝u_to_be32
(
XLOG_HEADER_MAGIC_NUM
);

304 
hód
->
h_cy˛e
 = 
	`˝u_to_be32
(
	`CYCLE_LSN
(
l¢
));

305 
hód
->
h_vîsi⁄
 = 
	`˝u_to_be32
(
vîsi⁄
);

306 
hód
->
h_¸c
 = 
	`˝u_to_À32
(0);

307 
hód
->
h_¥ev_block
 = 
	`˝u_to_be32
(-1);

308 
hód
->
h_num_log›s
 = 
	`˝u_to_be32
(1);

309 
hód
->
h_fmt
 = 
	`˝u_to_be32
(
fmt
);

310 
hód
->
h_size
 = 
	`˝u_to_be32
(
	`MAX
(
sunô
, 
XLOG_BIG_RECORD_BSIZE
));

312 
hód
->
h_l¢
 = 
	`˝u_to_be64
(
l¢
);

313 
hód
->
h_èû_l¢
 = 
	`˝u_to_be64
(
èû_l¢
);

315 
	`mem˝y
(&
hód
->
h_fs_uuid
, 
fs_uuid
, (
uuid_t
));

330 
cy˛e_l¢
 = 
	`CYCLE_LSN_DISK
(
hód
->
h_l¢
);

331 i‡(
vîsi⁄
 =2 && 
sunô
 > 
XLOG_HEADER_CYCLE_SIZE
) {

332 
hdrs
 = 
sunô
 / 
XLOG_HEADER_CYCLE_SIZE
;

333 i‡(
sunô
 % 
XLOG_HEADER_CYCLE_SIZE
)

334 
hdrs
++;

347 i‡(
hdrs
 > 1) {

348 
i
 = 1; i < 
hdrs
; i++) {

349 
p
 = 
	`√xtfunc
’, 
BBSIZE
, 
¥iv©e
);

350 
	`mem£t
(
p
, 0, 
BBSIZE
);

352 *(
__be32
 *)
p
 = 
cy˛e_l¢
;

361 
hód
->
h_Àn
 = 
	`˝u_to_be32
(
	`MAX
(
	`BBTOB
(2), 
sunô
Ë- 
hdrs
 * 
BBSIZE
);

367 
p
 = 
	`√xtfunc
’, 
BBSIZE
, 
¥iv©e
);

368 
	`unmou¡_ªc‹d
(
p
);

370 
hód
->
h_cy˛e_d©a
[0] = *(
__be32
 *)
p
;

371 *(
__be32
 *)
p
 = 
cy˛e_l¢
;

378 
Àn
 = 
	`MAX
÷í, 
hdrs
 + 1);

379 
i
 = 
hdrs
 + 1; i < 
Àn
; i++) {

380 
p
 = 
	`√xtfunc
’, 
BBSIZE
, 
¥iv©e
);

381 
	`mem£t
(
p
, 0, 
BBSIZE
);

382 *(
__be32
 *)
p
 = 
cy˛e_l¢
;

385  
	`BBTOB
(
Àn
);

386 
	}
}

393 #ifde‡
XFS_BUF_TRACING


395 #unde‡
libxfs_ªadbuf


396 #unde‡
libxfs_ªadbuf_m≠


397 #unde‡
libxfs_wrôebuf


398 #unde‡
libxfs_gëbuf


399 #unde‡
libxfs_gëbuf_m≠


400 #unde‡
libxfs_gëbuf_Êags


401 #unde‡
libxfs_putbuf


403 
xfs_buf_t
 *
libxfs_ªadbuf
(
xfs_bu·¨g
 *, 
xfs_daddr_t
, , ,

404 c⁄° 
xfs_buf_›s
 *);

405 
xfs_buf_t
 *
libxfs_ªadbuf_m≠
(
xfs_bu·¨g
 *, 
xfs_buf_m≠
 *,

406 , , c⁄° 
xfs_buf_›s
 *);

407 
libxfs_wrôebuf
(
xfs_buf_t
 *, );

408 
xfs_buf_t
 *
libxfs_gëbuf
(
xfs_bu·¨g
 *, 
xfs_daddr_t
, );

409 
xfs_buf_t
 *
libxfs_gëbuf_m≠
(
xfs_bu·¨g
 *, 
xfs_buf_m≠
 *,

411 
xfs_buf_t
 *
libxfs_gëbuf_Êags
(
xfs_bu·¨g
 *, 
xfs_daddr_t
, ,

413 
libxfs_putbuf
 (
xfs_buf_t
 *);

415 
	#__add_åa˚
(
bp
, 
func
, 
fûe
, 
löe
) \

417 i‡(
bp
) { \

418 (
bp
)->
b_func
 = (
func
); \

419 (
bp
)->
b_fûe
 = (
fûe
); \

420 (
bp
)->
b_löe
 = (
löe
); \

422 } 0)

	)

424 
xfs_buf_t
 *

425 
	$libxfs_åa˚_ªadbuf
(c⁄° *
func
, c⁄° *
fûe
, 
löe
,

426 
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
blkno
, 
Àn
, 
Êags
,

427 c⁄° 
xfs_buf_›s
 *
›s
)

429 
xfs_buf_t
 *
bp
 = 
	`libxfs_ªadbuf
(
bç
, 
blkno
, 
Àn
, 
Êags
, 
›s
);

430 
	`__add_åa˚
(
bp
, 
func
, 
fûe
, 
löe
);

431  
bp
;

432 
	}
}

434 
xfs_buf_t
 *

435 
	$libxfs_åa˚_ªadbuf_m≠
(c⁄° *
func
, c⁄° *
fûe
, 
löe
,

436 
xfs_bu·¨g
 *
bç
, 
xfs_buf_m≠
 *
m≠
, 
nm≠s
, 
Êags
,

437 c⁄° 
xfs_buf_›s
 *
›s
)

439 
xfs_buf_t
 *
bp
 = 
	`libxfs_ªadbuf_m≠
(
bç
, 
m≠
, 
nm≠s
, 
Êags
, 
›s
);

440 
	`__add_åa˚
(
bp
, 
func
, 
fûe
, 
löe
);

441  
bp
;

442 
	}
}

445 
	$libxfs_åa˚_wrôebuf
(c⁄° *
func
, c⁄° *
fûe
, 
löe
, 
xfs_buf_t
 *
bp
, 
Êags
)

447 
	`__add_åa˚
(
bp
, 
func
, 
fûe
, 
löe
);

448  
	`libxfs_wrôebuf
(
bp
, 
Êags
);

449 
	}
}

451 
xfs_buf_t
 *

452 
	$libxfs_åa˚_gëbuf
(c⁄° *
func
, c⁄° *
fûe
, 
löe
,

453 
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
blkno
, 
Àn
)

455 
xfs_buf_t
 *
bp
 = 
	`libxfs_gëbuf
(
bç
, 
blkno
, 
Àn
);

456 
	`__add_åa˚
(
bp
, 
func
, 
fûe
, 
löe
);

457  
bp
;

458 
	}
}

460 
xfs_buf_t
 *

461 
	$libxfs_åa˚_gëbuf_m≠
(c⁄° *
func
, c⁄° *
fûe
, 
löe
,

462 
xfs_bu·¨g
 *
bç
, 
xfs_buf_m≠
 *
m≠
, 
nm≠s
,

463 
Êags
)

465 
xfs_buf_t
 *
bp
 = 
	`libxfs_gëbuf_m≠
(
bç
, 
m≠
, 
nm≠s
, 
Êags
);

466 
	`__add_åa˚
(
bp
, 
func
, 
fûe
, 
löe
);

467  
bp
;

468 
	}
}

470 
xfs_buf_t
 *

471 
	$libxfs_åa˚_gëbuf_Êags
(c⁄° *
func
, c⁄° *
fûe
, 
löe
,

472 
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
blkno
, 
Àn
, 
Êags
)

474 
xfs_buf_t
 *
bp
 = 
	`libxfs_gëbuf_Êags
(
bç
, 
blkno
, 
Àn
, 
Êags
);

475 
	`__add_åa˚
(
bp
, 
func
, 
fûe
, 
löe
);

476  
bp
;

477 
	}
}

480 
	$libxfs_åa˚_putbuf
(c⁄° *
func
, c⁄° *
fûe
, 
löe
, 
xfs_buf_t
 *
bp
)

482 
	`__add_åa˚
(
bp
, 
func
, 
fûe
, 
löe
);

483 
	`libxfs_putbuf
(
bp
);

484 
	}
}

490 
xfs_buf_t
 *

491 
	$libxfs_gësb
(
xfs_mou¡_t
 *
mp
, 
Êags
)

493  
	`libxfs_ªadbuf
(
mp
->
m_ddev_èrgp
, 
XFS_SB_DADDR
,

494 
	`XFS_FSS_TO_BB
(
mp
, 1), 
Êags
, &
xfs_sb_buf_›s
);

495 
	}
}

497 
kmem_z⁄e_t
 *
	gxfs_buf_z⁄e
;

499 
ˇche_mru
 
	gxfs_buf_‰ìli°
 =

500 {{&
xfs_buf_‰ìli°
.
cm_li°
, &xfs_buf_freelist.cm_list},

501 0, 
PTHREAD_MUTEX_INITIALIZER
 };

511 
	sxfs_bufkey
 {

512 
xfs_bu·¨g
 *
	mbu·¨g
;

513 
xfs_daddr_t
 
	mblkno
;

514 
	mbbÀn
;

515 
xfs_buf_m≠
 *
	mm≠
;

516 
	mnm≠s
;

520 
	#GOLDEN_RATIO_PRIME
 0x9e37fffffffc0001UL

	)

521 
	#CACHE_LINE_SIZE
 64

	)

523 
	$libxfs_bhash
(
ˇche_key_t
 
key
, 
hashsize
, 
hashshi·
)

525 
uöt64_t
 
hashvÆ
 = ((
xfs_bufkey
 *)
key
)->
blkno
;

526 
uöt64_t
 
tmp
;

528 
tmp
 = 
hashvÆ
 ^ (
GOLDEN_RATIO_PRIME
 + hashvÆË/ 
CACHE_LINE_SIZE
;

529 
tmp
 =Åm∞^ (—m∞^ 
GOLDEN_RATIO_PRIME
Ë>> 
hashshi·
);

530  
tmp
 % 
hashsize
;

531 
	}
}

534 
	$libxfs_bcom∑ª
(
ˇche_node
 *
node
, 
ˇche_key_t
 
key
)

536 
xfs_buf
 *
bp
 = (xfs_bu‡*)
node
;

537 
xfs_bufkey
 *
bkey
 = (xfs_bufkey *)
key
;

539 i‡(
bp
->
b_èrgë
->
dev
 =
bkey
->
bu·¨g
->dev &&

540 
bp
->
b_bn
 =
bkey
->
blkno
) {

541 i‡(
bp
->
b_bcou¡
 =
	`BBTOB
(
bkey
->
bbÀn
))

542  
CACHE_HIT
;

543 #ifde‡
IO_BCOMPARE_CHECK


544 i‡(!(
libxfs_bˇche
->
c_Êags
 & 
CACHE_MISCOMPARE_PURGE
)) {

545 
	`Ârötf
(
°dîr
,

548 
	`±hªad_£lf
(),

549 ()
bp
->
b_bn
, ()bp->
b_bcou¡
,

550 ()
bkey
->
blkno
,

551 
	`BBTOB
(
bkey
->
bbÀn
));

554  
CACHE_PURGE
;

556  
CACHE_MISS
;

557 
	}
}

560 
	$libxfs_b¥öt
(
xfs_buf_t
 *
bp
)

562 
	`Ârötf
(
°dîr
, "Buffer 0x%p blkno=%llu bytes=%u flags=0x%x count=%u\n",

563 
bp
, ()bp->
b_bn
, ()bp->
b_bcou¡
,

564 
bp
->
b_Êags
, bp->
b_node
.
˙_cou¡
);

565 
	}
}

568 
	$__öôbuf
(
xfs_buf_t
 *
bp
, 
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
bno
,

569 
byãs
)

571 
bp
->
b_Êags
 = 0;

572 
bp
->
b_bn
 = 
bno
;

573 
bp
->
b_bcou¡
 = 
byãs
;

574 
bp
->
b_Àngth
 = 
	`BTOBB
(
byãs
);

575 
bp
->
b_èrgë
 = 
bç
;

576 
bp
->
b_îr‹
 = 0;

577 i‡(!
bp
->
b_addr
)

578 
bp
->
b_addr
 = 
	`memÆign
(
	`libxfs_devi˚_Æignmít
(), 
byãs
);

579 i‡(!
bp
->
b_addr
) {

580 
	`Ârötf
(
°dîr
,

581 
	`_
("%s: %s can't memalign %u bytes: %s\n"),

582 
¥og«me
, 
__FUNCTION__
, 
byãs
,

583 
	`°ªº‹
(
î∫o
));

584 
	`exô
(1);

586 
	`mem£t
(
bp
->
b_addr
, 0, 
byãs
);

587 #ifde‡
XFS_BUF_TRACING


588 
	`li°_hód_öô
(&
bp
->
b_lock_li°
);

590 
	`±hªad_muãx_öô
(&
bp
->
b_lock
, 
NULL
);

591 
bp
->
b_hﬁdî
 = 0;

592 
bp
->
b_ªcur
 = 0;

593 
bp
->
b_›s
 = 
NULL
;

594 
	}
}

597 
	$libxfs_öôbuf
(
xfs_buf_t
 *
bp
, 
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
bno
,

598 
byãs
)

600 
	`__öôbuf
(
bp
, 
bç
, 
bno
, 
byãs
);

601 
	}
}

604 
	$libxfs_öôbuf_m≠
(
xfs_buf_t
 *
bp
, 
xfs_bu·¨g
 *
bç
,

605 
xfs_buf_m≠
 *
m≠
, 
nm≠s
)

607 
byãs
 = 0;

608 
i
;

610 
byãs
 = (
xfs_buf_m≠
Ë* 
nm≠s
;

611 
bp
->
b_m≠s
 = 
	`mÆloc
(
byãs
);

612 i‡(!
bp
->
b_m≠s
) {

613 
	`Ârötf
(
°dîr
,

614 
	`_
("%s: %s can't malloc %u bytes: %s\n"),

615 
¥og«me
, 
__FUNCTION__
, 
byãs
,

616 
	`°ªº‹
(
î∫o
));

617 
	`exô
(1);

619 
bp
->
b_nm≠s
 = 
nm≠s
;

621 
byãs
 = 0;

622  
i
 = 0; i < 
nm≠s
; i++) {

623 
bp
->
b_m≠s
[
i
].
bm_bn
 = 
m≠
[i].bm_bn;

624 
bp
->
b_m≠s
[
i
].
bm_Àn
 = 
m≠
[i].bm_len;

625 
byãs
 +
	`BBTOB
(
m≠
[
i
].
bm_Àn
);

628 
	`__öôbuf
(
bp
, 
bç
, 
m≠
[0].
bm_bn
, 
byãs
);

629 
bp
->
b_Êags
 |
LIBXFS_B_DISCONTIG
;

630 
	}
}

632 
xfs_buf_t
 *

633 
	$__libxfs_gëbu‰
(
bÀn
)

635 
xfs_buf_t
 *
bp
;

643 
	`±hªad_muãx_lock
(&
xfs_buf_‰ìli°
.
cm_muãx
);

644 i‡(!
	`li°_em±y
(&
xfs_buf_‰ìli°
.
cm_li°
)) {

645 
	`li°_f‹_óch_íåy
(
bp
, &
xfs_buf_‰ìli°
.
cm_li°
, 
b_node
.
˙_mru
) {

646 i‡(
bp
->
b_bcou¡
 =
bÀn
) {

647 
	`li°_dñ_öô
(&
bp
->
b_node
.
˙_mru
);

651 i‡(&
bp
->
b_node
.
˙_mru
 =&
xfs_buf_‰ìli°
.
cm_li°
) {

652 
bp
 = 
	`li°_íåy
(
xfs_buf_‰ìli°
.
cm_li°
.
√xt
,

653 
xfs_buf_t
, 
b_node
.
˙_mru
);

654 
	`li°_dñ_öô
(&
bp
->
b_node
.
˙_mru
);

655 
	`‰ì
(
bp
->
b_addr
);

656 
bp
->
b_addr
 = 
NULL
;

657 
	`‰ì
(
bp
->
b_m≠s
);

658 
bp
->
b_m≠s
 = 
NULL
;

661 
bp
 = 
	`kmem_z⁄e_zÆloc
(
xfs_buf_z⁄e
, 0);

662 
	`±hªad_muãx_u∆ock
(&
xfs_buf_‰ìli°
.
cm_muãx
);

663 
bp
->
b_›s
 = 
NULL
;

664 i‡(
bp
->
b_Êags
 & 
LIBXFS_B_DIRTY
)

665 
	`Ârötf
(
°dîr
, "found dirty buffer (bulk) on freeÜist!");

667  
bp
;

668 
	}
}

670 
xfs_buf_t
 *

671 
	$libxfs_gëbu‰
(
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
blkno
, 
bbÀn
)

673 
xfs_buf_t
 *
bp
;

674 
bÀn
 = 
	`BBTOB
(
bbÀn
);

676 
bp
 =
	`__libxfs_gëbu‰
(
bÀn
);

677 i‡(
bp
)

678 
	`libxfs_öôbuf
(
bp
, 
bç
, 
blkno
, 
bÀn
);

679 #ifde‡
IO_DEBUG


680 
	`¥ötf
("%lx: %s:állocated %u bytes buffer, key=0x%llx(0x%llx), %p\n",

681 
	`±hªad_£lf
(), 
__FUNCTION__
, 
bÀn
,

682 ()
	`LIBXFS_BBTOOFF64
(
blkno
), ()blkno, 
bp
);

685  
bp
;

686 
	}
}

688 
xfs_buf_t
 *

689 
	$libxfs_gëbu‰_m≠
(
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
blkno
, 
bbÀn
,

690 
xfs_buf_m≠
 *
m≠
, 
nm≠s
)

692 
xfs_buf_t
 *
bp
;

693 
bÀn
 = 
	`BBTOB
(
bbÀn
);

695 i‡(!
m≠
 || !
nm≠s
) {

696 
	`Ârötf
(
°dîr
,

697 
	`_
("%s: %s invalid map %p orÇmaps %d\n"),

698 
¥og«me
, 
__FUNCTION__
, 
m≠
, 
nm≠s
);

699 
	`exô
(1);

702 i‡(
blkno
 !
m≠
[0].
bm_bn
) {

703 
	`Ârötf
(
°dîr
,

704 
	`_
("%s: %s map blkno 0x%llx doesn't match key 0x%llx\n"),

705 
¥og«me
, 
__FUNCTION__
, ()
m≠
[0].
bm_bn
,

706 ()
blkno
);

707 
	`exô
(1);

710 
bp
 =
	`__libxfs_gëbu‰
(
bÀn
);

711 i‡(
bp
)

712 
	`libxfs_öôbuf_m≠
(
bp
, 
bç
, 
m≠
, 
nm≠s
);

713 #ifde‡
IO_DEBUG


714 
	`¥ötf
("%lx: %s:állocated %u bytes buffer, key=0x%llx(0x%llx), %p\n",

715 
	`±hªad_£lf
(), 
__FUNCTION__
, 
bÀn
,

716 ()
	`LIBXFS_BBTOOFF64
(
blkno
), ()blkno, 
bp
);

719  
bp
;

720 
	}
}

722 #ifde‡
XFS_BUF_TRACING


723 
li°_hód
 
	glock_buf_li°
 = {&
lock_buf_li°
, &lock_buf_list};

724 
	glock_buf_cou¡
 = 0;

727 
u£_xfs_buf_lock
;

729 
xfs_buf
 *

730 
	$__ˇche_lookup
(
xfs_bufkey
 *
key
, 
Êags
)

732 
xfs_buf
 *
bp
;

734 
	`ˇche_node_gë
(
libxfs_bˇche
, 
key
, (
ˇche_node
 **)&
bp
);

735 i‡(!
bp
)

736  
NULL
;

738 i‡(
u£_xfs_buf_lock
) {

739 
ªt
;

741 
ªt
 = 
	`±hªad_muãx_åylock
(&
bp
->
b_lock
);

742 i‡(
ªt
) {

743 
	`ASSERT
(
ªt
 =
EAGAIN
);

744 i‡(
Êags
 & 
LIBXFS_GETBUF_TRYLOCK
)

745 
out_put
;

747 i‡(
	`±hªad_equÆ
(
bp
->
b_hﬁdî
, 
	`±hªad_£lf
())) {

748 
	`Ârötf
(
°dîr
,

749 
	`_
("W¨nög:Ñecursivêbuf„∏lockögáàblock %" 
PRIu64
 " detected\n"),

750 
key
->
blkno
);

751 
bp
->
b_ªcur
++;

752  
bp
;

754 
	`±hªad_muãx_lock
(&
bp
->
b_lock
);

758 
bp
->
b_hﬁdî
 = 
	`±hªad_£lf
();

761 
	`ˇche_node_£t_¥i‹ôy
(
libxfs_bˇche
, (
ˇche_node
 *)
bp
,

762 
	`ˇche_node_gë_¥i‹ôy
((
ˇche_node
 *)
bp
) -

763 
CACHE_PREFETCH_PRIORITY
);

764 #ifde‡
XFS_BUF_TRACING


765 
	`±hªad_muãx_lock
(&
libxfs_bˇche
->
c_muãx
);

766 
lock_buf_cou¡
++;

767 
	`li°_add
(&
bp
->
b_lock_li°
, &
lock_buf_li°
);

768 
	`±hªad_muãx_u∆ock
(&
libxfs_bˇche
->
c_muãx
);

770 #ifde‡
IO_DEBUG


771 
	`¥ötf
("%lx %s: hit buffer %p for bno = 0x%llx/0x%llx\n",

772 
	`±hªad_£lf
(), 
__FUNCTION__
,

773 
bp
, bp->
b_bn
, ()
	`LIBXFS_BBTOOFF64
(
key
->
blkno
));

776  
bp
;

777 
out_put
:

778 
	`ˇche_node_put
(
libxfs_bˇche
, (
ˇche_node
 *)
bp
);

779  
NULL
;

780 
	}
}

782 
xfs_buf
 *

783 
	$libxfs_gëbuf_Êags
(
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
blkno
, 
Àn
,

784 
Êags
)

786 
xfs_bufkey
 
key
 = {0};

788 
key
.
bu·¨g
 = 
bç
;

789 
key
.
blkno
 = blkno;

790 
key
.
bbÀn
 = 
Àn
;

792  
	`__ˇche_lookup
(&
key
, 
Êags
);

793 
	}
}

807 
	$ª£t_buf_°©e
(

808 
xfs_buf
 *
bp
)

810 i‡(
bp
 && !(bp->
b_Êags
 & 
LIBXFS_B_DIRTY
))

811 
bp
->
b_Êags
 &~(
LIBXFS_B_UNCHECKED
 | 
LIBXFS_B_STALE
 |

812 
LIBXFS_B_UPTODATE
);

813 
	}
}

815 
xfs_buf
 *

816 
	$libxfs_gëbuf
(
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
blkno
, 
Àn
)

818 
xfs_buf
 *
bp
;

820 
bp
 = 
	`libxfs_gëbuf_Êags
(
bç
, 
blkno
, 
Àn
, 0);

821 
	`ª£t_buf_°©e
(
bp
);

822  
bp
;

823 
	}
}

825 
xfs_buf
 *

826 
	$__libxfs_gëbuf_m≠
(
xfs_bu·¨g
 *
bç
, 
xfs_buf_m≠
 *
m≠
,

827 
nm≠s
, 
Êags
)

829 
xfs_bufkey
 
key
 = {0};

830 
i
;

832 i‡(
nm≠s
 == 1)

833  
	`libxfs_gëbuf_Êags
(
bç
, 
m≠
[0].
bm_bn
, m≠[0].
bm_Àn
,

834 
Êags
);

836 
key
.
bu·¨g
 = 
bç
;

837 
key
.
blkno
 = 
m≠
[0].
bm_bn
;

838 
i
 = 0; i < 
nm≠s
; i++) {

839 
key
.
bbÀn
 +
m≠
[
i
].
bm_Àn
;

841 
key
.
m≠
 = map;

842 
key
.
nm≠s
 =Çmaps;

844  
	`__ˇche_lookup
(&
key
, 
Êags
);

845 
	}
}

847 
xfs_buf
 *

848 
	$libxfs_gëbuf_m≠
(
xfs_bu·¨g
 *
bç
, 
xfs_buf_m≠
 *
m≠
,

849 
nm≠s
, 
Êags
)

851 
xfs_buf
 *
bp
;

853 
bp
 = 
	`__libxfs_gëbuf_m≠
(
bç
, 
m≠
, 
nm≠s
, 
Êags
);

854 
	`ª£t_buf_°©e
(
bp
);

855  
bp
;

856 
	}
}

859 
	$libxfs_putbuf
(
xfs_buf_t
 *
bp
)

865 
bp
->
b_îr‹
 = 0;

867 #ifde‡
XFS_BUF_TRACING


868 
	`±hªad_muãx_lock
(&
libxfs_bˇche
->
c_muãx
);

869 
lock_buf_cou¡
--;

870 
	`ASSERT
(
lock_buf_cou¡
 >= 0);

871 
	`li°_dñ_öô
(&
bp
->
b_lock_li°
);

872 
	`±hªad_muãx_u∆ock
(&
libxfs_bˇche
->
c_muãx
);

874 i‡(
u£_xfs_buf_lock
) {

875 i‡(
bp
->
b_ªcur
) {

876 
bp
->
b_ªcur
--;

878 
bp
->
b_hﬁdî
 = 0;

879 
	`±hªad_muãx_u∆ock
(&
bp
->
b_lock
);

883 
	`ˇche_node_put
(
libxfs_bˇche
, (
ˇche_node
 *)
bp
);

884 
	}
}

887 
	$libxfs_purgebuf
(
xfs_buf_t
 *
bp
)

889 
xfs_bufkey
 
key
 = {0};

891 
key
.
bu·¨g
 = 
bp
->
b_èrgë
;

892 
key
.
blkno
 = 
bp
->
b_bn
;

893 
key
.
bbÀn
 = 
bp
->
b_Àngth
;

895 
	`ˇche_node_purge
(
libxfs_bˇche
, &
key
, (
ˇche_node
 *)
bp
);

896 
	}
}

898 
ˇche_node
 *

899 
	$libxfs_bÆloc
(
ˇche_key_t
 
key
)

901 
xfs_bufkey
 *
bufkey
 = (xfs_bufkey *)
key
;

903 i‡(
bufkey
->
m≠
)

904  (
ˇche_node
 *)

905 
	`libxfs_gëbu‰_m≠
(
bufkey
->
bu·¨g
,

906 
bufkey
->
blkno
, bufkey->
bbÀn
,

907 
bufkey
->
m≠
, bufkey->
nm≠s
);

908  (
ˇche_node
 *)
	`libxfs_gëbu‰
(
bufkey
->
bu·¨g
,

909 
bufkey
->
blkno
, bufkey->
bbÀn
);

910 
	}
}

914 
	$__ªad_buf
(
fd
, *
buf
, 
Àn
, 
off64_t
 
off£t
, 
Êags
)

916 
°s
;

918 
°s
 = 
	`¥ód
(
fd
, 
buf
, 
Àn
, 
off£t
);

919 i‡(
°s
 < 0) {

920 
îr‹
 = 
î∫o
;

921 
	`Ârötf
(
°dîr
, 
	`_
("%s:Ñead failed: %s\n"),

922 
¥og«me
, 
	`°ªº‹
(
îr‹
));

923 i‡(
Êags
 & 
LIBXFS_EXIT_ON_FAILURE
)

924 
	`exô
(1);

925  -
îr‹
;

926 } i‡(
°s
 !
Àn
) {

927 
	`Ârötf
(
°dîr
, 
	`_
("%s:Érror -Ñead only %d of %d bytes\n"),

928 
¥og«me
, 
°s
, 
Àn
);

929 i‡(
Êags
 & 
LIBXFS_EXIT_ON_FAILURE
)

930 
	`exô
(1);

931  -
EIO
;

934 
	}
}

937 
	$libxfs_ªadbu‰
(
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
blkno
, 
xfs_buf_t
 *
bp
,

938 
Àn
, 
Êags
)

940 
fd
 = 
	`libxfs_devi˚_to_fd
(
bç
->
dev
);

941 
byãs
 = 
	`BBTOB
(
Àn
);

942 
îr‹
;

944 
	`ASSERT
(
	`BBTOB
(
Àn
Ë<
bp
->
b_bcou¡
);

946 
îr‹
 = 
	`__ªad_buf
(
fd
, 
bp
->
b_addr
, 
byãs
, 
	`LIBXFS_BBTOOFF64
(
blkno
), 
Êags
);

947 i‡(!
îr‹
 &&

948 
bp
->
b_èrgë
->
dev
 =
bç
->dev &&

949 
bp
->
b_bn
 =
blkno
 &&

950 
bp
->
b_bcou¡
 =
byãs
)

951 
bp
->
b_Êags
 |
LIBXFS_B_UPTODATE
;

952 #ifde‡
IO_DEBUG


953 
	`¥ötf
("%lx: %s:Ñead %u bytes,Érror %d, blkno=0x%llx(0x%llx), %p\n",

954 
	`±hªad_£lf
(), 
__FUNCTION__
, 
byãs
, 
îr‹
,

955 ()
	`LIBXFS_BBTOOFF64
(
blkno
), ()blkno, 
bp
);

957  
îr‹
;

958 
	}
}

961 
	$libxfs_ªadbuf_vîify
(
xfs_buf
 *
bp
, c⁄° 
xfs_buf_›s
 *
›s
)

963 i‡(!
›s
)

965 
bp
->
b_›s
 = 
›s
;

966 
bp
->
b_›s
->
	`vîify_ªad
(bp);

967 
bp
->
b_Êags
 &~
LIBXFS_B_UNCHECKED
;

968 
	}
}

971 
xfs_buf_t
 *

972 
	$libxfs_ªadbuf
(
xfs_bu·¨g
 *
bç
, 
xfs_daddr_t
 
blkno
, 
Àn
, 
Êags
,

973 c⁄° 
xfs_buf_›s
 *
›s
)

975 
xfs_buf_t
 *
bp
;

976 
îr‹
;

978 
bp
 = 
	`libxfs_gëbuf_Êags
(
bç
, 
blkno
, 
Àn
, 0);

979 i‡(!
bp
)

980  
NULL
;

994 
bp
->
b_îr‹
 = 0;

995 i‡((
bp
->
b_Êags
 & (
LIBXFS_B_UPTODATE
|
LIBXFS_B_DIRTY
))) {

996 i‡(
bp
->
b_Êags
 & 
LIBXFS_B_UNCHECKED
)

997 
	`libxfs_ªadbuf_vîify
(
bp
, 
›s
);

998  
bp
;

1008 
îr‹
 = 
	`libxfs_ªadbu‰
(
bç
, 
blkno
, 
bp
, 
Àn
, 
Êags
);

1009 i‡(
îr‹
)

1010 
bp
->
b_îr‹
 = 
îr‹
;

1012 
	`libxfs_ªadbuf_vîify
(
bp
, 
›s
);

1013  
bp
;

1014 
	}
}

1017 
	$libxfs_ªadbu‰_m≠
(
xfs_bu·¨g
 *
bç
, 
xfs_buf
 *
bp
, 
Êags
)

1019 
fd
;

1020 
îr‹
 = 0;

1021 *
buf
;

1022 
i
;

1024 
fd
 = 
	`libxfs_devi˚_to_fd
(
bç
->
dev
);

1025 
buf
 = 
bp
->
b_addr
;

1026 
i
 = 0; i < 
bp
->
b_nm≠s
; i++) {

1027 
off64_t
 
off£t
 = 
	`LIBXFS_BBTOOFF64
(
bp
->
b_m≠s
[
i
].
bm_bn
);

1028 
Àn
 = 
	`BBTOB
(
bp
->
b_m≠s
[
i
].
bm_Àn
);

1030 
îr‹
 = 
	`__ªad_buf
(
fd
, 
buf
, 
Àn
, 
off£t
, 
Êags
);

1031 i‡(
îr‹
) {

1032 
bp
->
b_îr‹
 = 
îr‹
;

1035 
buf
 +
Àn
;

1038 i‡(!
îr‹
)

1039 
bp
->
b_Êags
 |
LIBXFS_B_UPTODATE
;

1040 #ifde‡
IO_DEBUG


1041 
	`¥ötf
("%lx: %s:Ñead %lu bytes,Érror %d, blkno=%llu(%llu), %p\n",

1042 
	`±hªad_£lf
(), 
__FUNCTION__
, 
buf
 - (*)
bp
->
b_addr
, 
îr‹
,

1043 ()
	`LIBXFS_BBTOOFF64
(
bp
->
b_bn
), ()bp->b_bn, bp);

1045  
îr‹
;

1046 
	}
}

1048 
xfs_buf
 *

1049 
	$libxfs_ªadbuf_m≠
(
xfs_bu·¨g
 *
bç
, 
xfs_buf_m≠
 *
m≠
, 
nm≠s
,

1050 
Êags
, c⁄° 
xfs_buf_›s
 *
›s
)

1052 
xfs_buf
 *
bp
;

1053 
îr‹
 = 0;

1055 i‡(
nm≠s
 == 1)

1056  
	`libxfs_ªadbuf
(
bç
, 
m≠
[0].
bm_bn
, m≠[0].
bm_Àn
,

1057 
Êags
, 
›s
);

1059 
bp
 = 
	`__libxfs_gëbuf_m≠
(
bç
, 
m≠
, 
nm≠s
, 0);

1060 i‡(!
bp
)

1061  
NULL
;

1063 
bp
->
b_îr‹
 = 0;

1064 i‡((
bp
->
b_Êags
 & (
LIBXFS_B_UPTODATE
|
LIBXFS_B_DIRTY
))) {

1065 i‡(
bp
->
b_Êags
 & 
LIBXFS_B_UNCHECKED
)

1066 
	`libxfs_ªadbuf_vîify
(
bp
, 
›s
);

1067  
bp
;

1069 
îr‹
 = 
	`libxfs_ªadbu‰_m≠
(
bç
, 
bp
, 
Êags
);

1070 i‡(!
îr‹
)

1071 
	`libxfs_ªadbuf_vîify
(
bp
, 
›s
);

1073 #ifde‡
IO_DEBUGX


1074 
	`¥ötf
("%lx: %s:Ñead %lu bytes,Érror %d, blkno=%llu(%llu), %p\n",

1075 
	`±hªad_£lf
(), 
__FUNCTION__
, 
buf
 - (*)
bp
->
b_addr
, 
îr‹
,

1076 ()
	`LIBXFS_BBTOOFF64
(
bp
->
b_bn
), ()bp->b_bn, bp);

1078  
bp
;

1079 
	}
}

1082 
	$__wrôe_buf
(
fd
, *
buf
, 
Àn
, 
off64_t
 
off£t
, 
Êags
)

1084 
°s
;

1086 
°s
 = 
	`pwrôe
(
fd
, 
buf
, 
Àn
, 
off£t
);

1087 i‡(
°s
 < 0) {

1088 
îr‹
 = 
î∫o
;

1089 
	`Ârötf
(
°dîr
, 
	`_
("%s:Öwrite failed: %s\n"),

1090 
¥og«me
, 
	`°ªº‹
(
îr‹
));

1091 i‡(
Êags
 & 
LIBXFS_B_EXIT
)

1092 
	`exô
(1);

1093  -
îr‹
;

1094 } i‡(
°s
 !
Àn
) {

1095 
	`Ârötf
(
°dîr
, 
	`_
("%s:Érror -Öwrite only %d of %d bytes\n"),

1096 
¥og«me
, 
°s
, 
Àn
);

1097 i‡(
Êags
 & 
LIBXFS_B_EXIT
)

1098 
	`exô
(1);

1099  -
EIO
;

1102 
	}
}

1105 
	$libxfs_wrôebu‰
(
xfs_buf_t
 *
bp
)

1107 
fd
 = 
	`libxfs_devi˚_to_fd
(
bp
->
b_èrgë
->
dev
);

1115 i‡(
bp
->
b_Êags
 & 
LIBXFS_B_STALE
) {

1116 
bp
->
b_îr‹
 = -
ESTALE
;

1117  
bp
->
b_îr‹
;

1125 
bp
->
b_îr‹
 = 0;

1126 i‡(
bp
->
b_›s
) {

1127 
bp
->
b_›s
->
	`vîify_wrôe
(bp);

1128 i‡(
bp
->
b_îr‹
) {

1129 
	`Ârötf
(
°dîr
,

1130 
	`_
("%s: write verifer failed on %s bno 0x%llx/0x%x\n"),

1131 
__func__
, 
bp
->
b_›s
->
«me
,

1132 ()
bp
->
b_bn
, bp->
b_bcou¡
);

1133  
bp
->
b_îr‹
;

1137 i‡(!(
bp
->
b_Êags
 & 
LIBXFS_B_DISCONTIG
)) {

1138 
bp
->
b_îr‹
 = 
	`__wrôe_buf
(
fd
, bp->
b_addr
, bp->
b_bcou¡
,

1139 
	`LIBXFS_BBTOOFF64
(
bp
->
b_bn
), bp->
b_Êags
);

1141 
i
;

1142 *
buf
 = 
bp
->
b_addr
;

1144 
i
 = 0; i < 
bp
->
b_nm≠s
; i++) {

1145 
off64_t
 
off£t
 = 
	`LIBXFS_BBTOOFF64
(
bp
->
b_m≠s
[
i
].
bm_bn
);

1146 
Àn
 = 
	`BBTOB
(
bp
->
b_m≠s
[
i
].
bm_Àn
);

1148 
bp
->
b_îr‹
 = 
	`__wrôe_buf
(
fd
, 
buf
, 
Àn
, 
off£t
,

1149 
bp
->
b_Êags
);

1150 i‡(
bp
->
b_îr‹
)

1152 
buf
 +
Àn
;

1156 #ifde‡
IO_DEBUG


1157 
	`¥ötf
("%lx: %s: wrote %u bytes, blkno=%llu(%llu), %p,Érror %d\n",

1158 
	`±hªad_£lf
(), 
__FUNCTION__
, 
bp
->
b_bcou¡
,

1159 ()
	`LIBXFS_BBTOOFF64
(
bp
->
b_bn
),

1160 ()
bp
->
b_bn
, bp, bp->
b_îr‹
);

1162 i‡(!
bp
->
b_îr‹
) {

1163 
bp
->
b_Êags
 |
LIBXFS_B_UPTODATE
;

1164 
bp
->
b_Êags
 &~(
LIBXFS_B_DIRTY
 | 
LIBXFS_B_EXIT
 |

1165 
LIBXFS_B_UNCHECKED
);

1167  
bp
->
b_îr‹
;

1168 
	}
}

1171 
	$libxfs_wrôebuf_öt
(
xfs_buf_t
 *
bp
, 
Êags
)

1177 
bp
->
b_îr‹
 = 0;

1178 
bp
->
b_Êags
 &~
LIBXFS_B_STALE
;

1179 
bp
->
b_Êags
 |(
LIBXFS_B_DIRTY
 | 
Êags
);

1181 
	}
}

1184 
	$libxfs_wrôebuf
(
xfs_buf_t
 *
bp
, 
Êags
)

1186 #ifde‡
IO_DEBUG


1187 
	`¥ötf
("%lx: %s: dirty blkno=%llu(%llu)\n",

1188 
	`±hªad_£lf
(), 
__FUNCTION__
,

1189 ()
	`LIBXFS_BBTOOFF64
(
bp
->
b_bn
),

1190 ()
bp
->
b_bn
);

1196 
bp
->
b_îr‹
 = 0;

1197 
bp
->
b_Êags
 &~
LIBXFS_B_STALE
;

1198 
bp
->
b_Êags
 |(
LIBXFS_B_DIRTY
 | 
Êags
);

1199 
	`libxfs_putbuf
(
bp
);

1201 
	}
}

1204 
	$libxfs_iomove
(
xfs_buf_t
 *
bp
, 
uöt
 
boff
, 
Àn
, *
d©a
, 
Êags
)

1206 #ifde‡
IO_DEBUG


1207 i‡(
boff
 + 
Àn
 > 
bp
->
b_bcou¡
) {

1208 
	`¥ötf
("Badness, iomove out ofÑange!\n"

1210 ()
bp
->
b_bn
, bp->
b_bcou¡
, 
boff
, 
Àn
);

1211 
	`ab‹t
();

1214 
Êags
) {

1215 
LIBXFS_BZERO
:

1216 
	`mem£t
(
bp
->
b_addr
 + 
boff
, 0, 
Àn
);

1218 
LIBXFS_BREAD
:

1219 
	`mem˝y
(
d©a
, 
bp
->
b_addr
 + 
boff
, 
Àn
);

1221 
LIBXFS_BWRITE
:

1222 
	`mem˝y
(
bp
->
b_addr
 + 
boff
, 
d©a
, 
Àn
);

1225 
	}
}

1228 
	$libxfs_bªl£
(

1229 
ˇche_node
 *
node
)

1231 
xfs_buf
 *
bp
 = (xfs_bu‡*)
node
;

1233 i‡(!
bp
)

1235 i‡(
bp
->
b_Êags
 & 
LIBXFS_B_DIRTY
)

1236 
	`Ârötf
(
°dîr
,

1239 
	`±hªad_muãx_lock
(&
xfs_buf_‰ìli°
.
cm_muãx
);

1240 
	`li°_add
(&
bp
->
b_node
.
˙_mru
, &
xfs_buf_‰ìli°
.
cm_li°
);

1241 
	`±hªad_muãx_u∆ock
(&
xfs_buf_‰ìli°
.
cm_muãx
);

1242 
	}
}

1245 
	$libxfs_bulkªl£
(

1246 
ˇche
 *cache,

1247 
li°_hód
 *
li°
)

1249 
xfs_buf_t
 *
bp
;

1250 
cou¡
 = 0;

1252 i‡(
	`li°_em±y
(
li°
))

1255 
	`li°_f‹_óch_íåy
(
bp
, 
li°
, 
b_node
.
˙_mru
) {

1256 i‡(
bp
->
b_Êags
 & 
LIBXFS_B_DIRTY
)

1257 
	`Ârötf
(
°dîr
,

1259 
cou¡
++;

1262 
	`±hªad_muãx_lock
(&
xfs_buf_‰ìli°
.
cm_muãx
);

1263 
	`li°_•li˚
(
li°
, &
xfs_buf_‰ìli°
.
cm_li°
);

1264 
	`±hªad_muãx_u∆ock
(&
xfs_buf_‰ìli°
.
cm_muãx
);

1266  
cou¡
;

1267 
	}
}

1277 
	$libxfs_bÊush
(

1278 
ˇche_node
 *
node
)

1280 
xfs_buf
 *
bp
 = (xfs_bu‡*)
node
;

1282 i‡(!
bp
->
b_îr‹
 && bp->
b_Êags
 & 
LIBXFS_B_DIRTY
)

1283  
	`libxfs_wrôebu‰
(
bp
);

1284  
bp
->
b_îr‹
;

1285 
	}
}

1288 
	$libxfs_putbu‰
(
xfs_buf_t
 *
bp
)

1290 i‡(
bp
->
b_Êags
 & 
LIBXFS_B_DIRTY
)

1291 
	`libxfs_wrôebu‰
(
bp
);

1292 
	`libxfs_bªl£
((
ˇche_node
 *)
bp
);

1293 
	}
}

1297 
	$libxfs_bˇche_purge
()

1299 
	`ˇche_purge
(
libxfs_bˇche
);

1300 
	}
}

1303 
	$libxfs_bˇche_Êush
()

1305 
	`ˇche_Êush
(
libxfs_bˇche
);

1306 
	}
}

1309 
	$libxfs_bˇche_ovîÊowed
()

1311  
	`ˇche_ovîÊowed
(
libxfs_bˇche
);

1312 
	}
}

1314 
ˇche_›î©i⁄s
 
	glibxfs_bˇche_›î©i⁄s
 = {

1315 .
hash
 = 
libxfs_bhash
,

1316 .
	gÆloc
 = 
libxfs_bÆloc
,

1317 .
	gÊush
 = 
libxfs_bÊush
,

1318 .
	gªl£
 = 
libxfs_bªl£
,

1319 .
	gcom∑ª
 = 
libxfs_bcom∑ª
,

1320 .
	gbulkªl£
 = 
libxfs_bulkªl£


1328 
kmem_z⁄e_t
 *
xfs_ûi_z⁄e
;

1329 
kmem_z⁄e_t
 *
xfs_öode_z⁄e
;

1332 
	$libxfs_igë
(
xfs_mou¡_t
 *
mp
, 
xfs_å™s_t
 *
ç
, 
xfs_öo_t
 
öo
, 
uöt
 
lock_Êags
,

1333 
xfs_öode_t
 **
ùp
)

1335 
xfs_öode_t
 *
ù
;

1336 
îr‹
 = 0;

1338 
ù
 = 
	`kmem_z⁄e_zÆloc
(
xfs_öode_z⁄e
, 0);

1339 i‡(!
ù
)

1340  -
ENOMEM
;

1342 
ù
->
i_öo
 = 
öo
;

1343 
ù
->
i_mou¡
 = 
mp
;

1344 
îr‹
 = 
	`xfs_úód
(
mp
, 
ç
, 
ù
, 0);

1345 i‡(
îr‹
) {

1346 
	`kmem_z⁄e_‰ì
(
xfs_öode_z⁄e
, 
ù
);

1347 *
ùp
 = 
NULL
;

1348  
îr‹
;

1354 i‡(
	`XFS_ISDIR
(
ù
))

1355 
ù
->
d_›s
 = 
mp
->
m_dú_öode_›s
;

1357 
ù
->
d_›s
 = 
mp
->
m_n⁄dú_öode_›s
;

1359 *
ùp
 = 
ù
;

1361 
	}
}

1364 
	$libxfs_ide°roy
(
xfs_öode_t
 *
ù
)

1366 
	`VFS_I
(
ù
)->
i_mode
 & 
S_IFMT
) {

1367 
S_IFREG
:

1368 
S_IFDIR
:

1369 
S_IFLNK
:

1370 
	`libxfs_ide°roy_f‹k
(
ù
, 
XFS_DATA_FORK
);

1373 i‡(
ù
->
i_aÂ
)

1374 
	`libxfs_ide°roy_f‹k
(
ù
, 
XFS_ATTR_FORK
);

1375 i‡(
ù
->
i_cowÂ
)

1376 
	`xfs_ide°roy_f‹k
(
ù
, 
XFS_COW_FORK
);

1377 
	}
}

1380 
	$libxfs_ùut
(
xfs_öode_t
 *
ù
)

1382 i‡(
ù
->
i_ôemp
)

1383 
	`kmem_z⁄e_‰ì
(
xfs_ûi_z⁄e
, 
ù
->
i_ôemp
);

1384 
ù
->
i_ôemp
 = 
NULL
;

1385 
	`libxfs_ide°roy
(
ù
);

1386 
	`kmem_z⁄e_‰ì
(
xfs_öode_z⁄e
, 
ù
);

1387 
	}
}

	@libxfs/trans.c

20 
	~"libxfs_¥iv.h
"

21 
	~"xfs_fs.h
"

22 
	~"xfs_sh¨ed.h
"

23 
	~"xfs_f‹m©.h
"

24 
	~"xfs_log_f‹m©.h
"

25 
	~"xfs_å™s_ªsv.h
"

26 
	~"xfs_mou¡.h
"

27 
	~"xfs_öode_buf.h
"

28 
	~"xfs_öode_f‹k.h
"

29 
	~"xfs_öode.h
"

30 
	~"xfs_å™s.h
"

31 
	~"xfs_sb.h
"

33 
xfs_å™s_‰ì_ôems
(
xfs_å™s
 *
ç
);

39 
kmem_z⁄e_t
 *
	gxfs_log_ôem_desc_z⁄e
;

46 
	$libxfs_å™s_öô
(

47 
xfs_mou¡
 *
mp
)

49 
	`xfs_å™s_ªsv_ˇlc
(
mp
, &mp->
m_ªsv
);

50 
	}
}

58 
	$libxfs_å™s_add_ôem
(

59 
xfs_å™s
 *
ç
,

60 
xfs_log_ôem
 *
lù
)

62 
xfs_log_ôem_desc
 *
lidp
;

64 
	`ASSERT
(
lù
->
li_mou¡p
 =
ç
->
t_mou¡p
);

65 
	`ASSERT
(
lù
->
li_aûp
 =
ç
->
t_mou¡p
->
m_aû
);

67 
lidp
 = 
	`ˇŒoc
((
xfs_log_ôem_desc
), 1);

68 i‡(!
lidp
) {

69 
	`Ârötf
(
°dîr
, 
	`_
("%s:Üidp calloc failed (%d bytes): %s\n"),

70 
¥og«me
, ()(
xfs_log_ôem_desc
),

71 
	`°ªº‹
(
î∫o
));

72 
	`exô
(1);

75 
lidp
->
lid_ôem
 = 
lù
;

76 
lidp
->
lid_Êags
 = 0;

77 
	`li°_add_èû
(&
lidp
->
lid_å™s
, &
ç
->
t_ôems
);

79 
lù
->
li_desc
 = 
lidp
;

80 
	}
}

86 
	$libxfs_å™s_dñ_ôem
(

87 
xfs_log_ôem
 *
lù
)

89 
	`li°_dñ_öô
(&
lù
->
li_desc
->
lid_å™s
);

90 
	`‰ì
(
lù
->
li_desc
);

91 
lù
->
li_desc
 = 
NULL
;

92 
	}
}

102 
	$libxfs_å™s_rﬁl
(

103 
xfs_å™s
 **
çp
,

104 
xfs_öode
 *
dp
)

106 
xfs_mou¡
 *
mp
;

107 
xfs_å™s
 *
å™s
;

108 
xfs_å™s_ªs
 
åes
;

109 
îr‹
;

114 
å™s
 = *
çp
;

115 i‡(
dp
)

116 
	`xfs_å™s_log_öode
(
å™s
, 
dp
, 
XFS_ILOG_CORE
);

121 
mp
 = 
å™s
->
t_mou¡p
;

122 
åes
.
å_logªs
 = 
å™s
->
t_log_ªs
;

123 
åes
.
å_logcou¡
 = 
å™s
->
t_log_cou¡
;

132 
îr‹
 = 
	`xfs_å™s_commô
(
å™s
);

133 i‡(
îr‹
)

134  
îr‹
;

145 
åes
.
å_logÊags
 = 
XFS_TRANS_PERM_LOG_RES
;

146 
îr‹
 = 
	`libxfs_å™s_Æloc
(
mp
, &
åes
, 0, 0, 0, 
çp
);

147 
å™s
 = *
çp
;

151 i‡(
îr‹
)

152  
îr‹
;

154 i‡(
dp
)

155 
	`xfs_å™s_ijoö
(
å™s
, 
dp
, 0);

157 
	}
}

160 
	$libxfs_å™s_Æloc
(

161 
xfs_mou¡
 *
mp
,

162 
xfs_å™s_ªs
 *
ª•
,

163 
blocks
,

164 
πexã¡s
,

165 
Êags
,

166 
xfs_å™s
 **
çp
)

169 
xfs_sb
 *
sb
 = &
mp
->
m_sb
;

170 
xfs_å™s
 *
±r
;

177 i‡(
blocks
 > 0) {

178 i‡(
sb
->
sb_fdblocks
 < 
blocks
)

179  -
ENOSPC
;

182 i‡((
±r
 = 
	`ˇŒoc
((
xfs_å™s_t
), 1)Ë=
NULL
) {

183 
	`Ârötf
(
°dîr
, 
	`_
("%s: xact calloc failed (%d bytes): %s\n"),

184 
¥og«me
, ()(
xfs_å™s_t
), 
	`°ªº‹
(
î∫o
));

185 
	`exô
(1);

187 
±r
->
t_mou¡p
 = 
mp
;

188 
	`INIT_LIST_HEAD
(&
±r
->
t_ôems
);

189 #ifde‡
XACT_DEBUG


190 
	`Ârötf
(
°dîr
, "ÆloˇãdÇewÅønß˘i⁄ %p\n", 
±r
);

192 *
çp
 = 
±r
;

194 
	}
}

197 
	$libxfs_å™s_ˇn˚l
(

198 
xfs_å™s_t
 *
ç
)

200 #ifde‡
XACT_DEBUG


201 
xfs_å™s_t
 *
Ÿp
 = 
ç
;

203 i‡(
ç
 !
NULL
) {

204 
	`xfs_å™s_‰ì_ôems
(
ç
);

205 
	`‰ì
(
ç
);

206 
ç
 = 
NULL
;

208 #ifde‡
XACT_DEBUG


209 
	`Ârötf
(
°dîr
, "## c™˚ŒedÅønß˘i⁄ %p\n", 
Ÿp
);

211 
	}
}

214 
	$libxfs_å™s_igë
(

215 
xfs_mou¡_t
 *
mp
,

216 
xfs_å™s_t
 *
ç
,

217 
xfs_öo_t
 
öo
,

218 
uöt
 
Êags
,

219 
uöt
 
lock_Êags
,

220 
xfs_öode_t
 **
ùp
)

222 
îr‹
;

223 
xfs_öode_t
 *
ù
;

224 
xfs_öode_log_ôem_t
 *
iù
;

226 i‡(
ç
 =
NULL
)

227  
	`libxfs_igë
(
mp
, 
ç
, 
öo
, 
lock_Êags
, 
ùp
);

229 
îr‹
 = 
	`libxfs_igë
(
mp
, 
ç
, 
öo
, 
lock_Êags
, &
ù
);

230 i‡(
îr‹
)

231  
îr‹
;

232 
	`ASSERT
(
ù
 !
NULL
);

234 i‡(
ù
->
i_ôemp
 =
NULL
)

235 
	`xfs_öode_ôem_öô
(
ù
, 
mp
);

236 
iù
 = 
ù
->
i_ôemp
;

237 
	`xfs_å™s_add_ôem
(
ç
, (
xfs_log_ôem_t
 *)(
iù
));

240 
ù
->
i_å™•
 = 
ç
;

242 *
ùp
 = 
ù
;

244 
	}
}

247 
	$libxfs_å™s_ijoö
(

248 
xfs_å™s_t
 *
ç
,

249 
xfs_öode_t
 *
ù
,

250 
uöt
 
lock_Êags
)

252 
xfs_öode_log_ôem_t
 *
iù
;

254 
	`ASSERT
(
ù
->
i_å™•
 =
NULL
);

255 i‡(
ù
->
i_ôemp
 =
NULL
)

256 
	`xfs_öode_ôem_öô
(
ù
, ip->
i_mou¡
);

257 
iù
 = 
ù
->
i_ôemp
;

258 
	`ASSERT
(
iù
->
ûi_Êags
 == 0);

259 
	`ASSERT
(
iù
->
ûi_öode
 !
NULL
);

261 
	`xfs_å™s_add_ôem
(
ç
, (
xfs_log_ôem_t
 *)(
iù
));

263 
ù
->
i_å™•
 = 
ç
;

264 #ifde‡
XACT_DEBUG


265 
	`Ârötf
(
°dîr
, "ijoö'd inodê%Œu,Åønß˘i⁄ %p\n", 
ù
->
i_öo
, 
ç
);

267 
	}
}

270 
	$libxfs_å™s_ijoö_ªf
(

271 
xfs_å™s_t
 *
ç
,

272 
xfs_öode_t
 *
ù
,

273 
lock_Êags
)

275 
	`ASSERT
(
ù
->
i_å™•
 =
ç
);

276 
	`ASSERT
(
ù
->
i_ôemp
 !
NULL
);

278 
	`xfs_å™s_ijoö
(
ç
, 
ù
, 
lock_Êags
);

280 #ifde‡
XACT_DEBUG


281 
	`Ârötf
(
°dîr
, "ijoö_ªf'd inodê%Œu,Åønß˘i⁄ %p\n", 
ù
->
i_öo
, 
ç
);

283 
	}
}

286 
	$libxfs_å™s_öode_Æloc_buf
(

287 
xfs_å™s_t
 *
ç
,

288 
xfs_buf_t
 *
bp
)

290 
xfs_buf_log_ôem_t
 *
bù
;

292 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE2
(
bp
, 
xfs_å™s_t
 *Ë=
ç
);

293 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE
(
bp
, *Ë!
NULL
);

294 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
 *);

295 
bù
->
bli_Êags
 |
XFS_BLI_INODE_ALLOC_BUF
;

296 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_DINO_BUF
);

297 
	}
}

309 
	$xfs_å™s_log_öode
(

310 
xfs_å™s_t
 *
ç
,

311 
xfs_öode_t
 *
ù
,

312 
uöt
 
Êags
)

314 
	`ASSERT
(
ù
->
i_å™•
 =
ç
);

315 
	`ASSERT
(
ù
->
i_ôemp
 !
NULL
);

316 #ifde‡
XACT_DEBUG


317 
	`Ârötf
(
°dîr
, "dútõd inodê%Œu,Åønß˘i⁄ %p\n", 
ù
->
i_öo
, 
ç
);

320 
ç
->
t_Êags
 |
XFS_TRANS_DIRTY
;

321 
ù
->
i_ôemp
->
ûi_ôem
.
li_desc
->
lid_Êags
 |
XFS_LID_DIRTY
;

330 
Êags
 |
ù
->
i_ôemp
->
ûi_œ°_fõlds
;

331 
ù
->
i_ôemp
->
ûi_fõlds
 |
Êags
;

332 
	}
}

344 
	$libxfs_å™s_log_buf
(

345 
xfs_å™s_t
 *
ç
,

346 
xfs_buf_t
 *
bp
,

347 
uöt
 
fú°
,

348 
uöt
 
œ°
)

350 
xfs_buf_log_ôem_t
 *
bù
;

352 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE2
(
bp
, 
xfs_å™s_t
 *Ë=
ç
);

353 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE
(
bp
, *Ë!
NULL
);

354 
	`ASSERT
((
fú°
 <
œ°
Ë&& (œ° < 
	`XFS_BUF_COUNT
(
bp
)));

355 #ifde‡
XACT_DEBUG


356 
	`Ârötf
(
°dîr
, "dútõd buf„∏%p,Åønß˘i⁄ %p\n", 
bp
, 
ç
);

359 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
 *);

361 
ç
->
t_Êags
 |
XFS_TRANS_DIRTY
;

362 
bù
->
bli_ôem
.
li_desc
->
lid_Êags
 |
XFS_LID_DIRTY
;

363 
	`xfs_buf_ôem_log
(
bù
, 
fú°
, 
œ°
);

364 
	}
}

367 
	$libxfs_å™s_bªl£
(

368 
xfs_å™s_t
 *
ç
,

369 
xfs_buf_t
 *
bp
)

371 
xfs_buf_log_ôem_t
 *
bù
;

372 #ifde‡
XACT_DEBUG


373 
	`Ârötf
(
°dîr
, "ªÀa£d buf„∏%p,Åønß˘i⁄ %p\n", 
bp
, 
ç
);

376 i‡(
ç
 =
NULL
) {

377 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE2
(
bp
, *Ë=
NULL
);

378 
	`libxfs_putbuf
(
bp
);

381 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE2
(
bp
, 
xfs_å™s_t
 *Ë=
ç
);

382 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
 *);

383 
	`ASSERT
(
bù
->
bli_ôem
.
li_ty≥
 =
XFS_LI_BUF
);

384 i‡(
bù
->
bli_ªcur
 > 0) {

385 
bù
->
bli_ªcur
--;

389 i‡(
bù
->
bli_Êags
 & 
XFS_BLI_STALE
)

391 i‡(
bù
->
bli_ôem
.
li_desc
->
lid_Êags
 & 
XFS_LID_DIRTY
)

393 
	`xfs_å™s_dñ_ôem
(&
bù
->
bli_ôem
);

394 i‡(
bù
->
bli_Êags
 & 
XFS_BLI_HOLD
)

395 
bù
->
bli_Êags
 &~
XFS_BLI_HOLD
;

396 
	`XFS_BUF_SET_FSPRIVATE2
(
bp
, 
NULL
);

397 
	`libxfs_putbuf
(
bp
);

398 
	}
}

401 
	$libxfs_å™s_bövÆ
(

402 
xfs_å™s_t
 *
ç
,

403 
xfs_buf_t
 *
bp
)

405 
xfs_buf_log_ôem_t
 *
bù
;

406 #ifde‡
XACT_DEBUG


407 
	`Ârötf
(
°dîr
, "bövÆ'd buf„∏%p,Åønß˘i⁄ %p\n", 
bp
, 
ç
);

410 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE2
(
bp
, 
xfs_å™s_t
 *Ë=
ç
);

411 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE
(
bp
, *Ë!
NULL
);

413 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
 *);

414 i‡(
bù
->
bli_Êags
 & 
XFS_BLI_STALE
)

416 
	`XFS_BUF_UNDELAYWRITE
(
bp
);

417 
	`xfs_buf_°Æe
(
bp
);

418 
bù
->
bli_Êags
 |
XFS_BLI_STALE
;

419 
bù
->
bli_Êags
 &~
XFS_BLI_DIRTY
;

420 
bù
->
bli_f‹m©
.
blf_Êags
 &~
XFS_BLF_INODE_BUF
;

421 
bù
->
bli_f‹m©
.
blf_Êags
 |
XFS_BLF_CANCEL
;

422 
bù
->
bli_ôem
.
li_desc
->
lid_Êags
 |
XFS_LID_DIRTY
;

423 
ç
->
t_Êags
 |
XFS_TRANS_DIRTY
;

424 
	}
}

427 
	$libxfs_å™s_bjoö
(

428 
xfs_å™s_t
 *
ç
,

429 
xfs_buf_t
 *
bp
)

431 
xfs_buf_log_ôem_t
 *
bù
;

433 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE2
(
bp
, *Ë=
NULL
);

434 #ifde‡
XACT_DEBUG


435 
	`Ârötf
(
°dîr
, "bjoö'd buf„∏%p,Åønß˘i⁄ %p\n", 
bp
, 
ç
);

438 
	`xfs_buf_ôem_öô
(
bp
, 
ç
->
t_mou¡p
);

439 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
 *);

440 
	`xfs_å™s_add_ôem
(
ç
, (
xfs_log_ôem_t
 *)
bù
);

441 
	`XFS_BUF_SET_FSPRIVATE2
(
bp
, 
ç
);

442 
	}
}

445 
	$libxfs_å™s_bhﬁd
(

446 
xfs_å™s_t
 *
ç
,

447 
xfs_buf_t
 *
bp
)

449 
xfs_buf_log_ôem_t
 *
bù
;

451 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE2
(
bp
, 
xfs_å™s_t
 *Ë=
ç
);

452 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE
(
bp
, *Ë!
NULL
);

453 #ifde‡
XACT_DEBUG


454 
	`Ârötf
(
°dîr
, "bhﬁd'd buf„∏%p,Åønß˘i⁄ %p\n", 
bp
, 
ç
);

457 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
 *);

458 
bù
->
bli_Êags
 |
XFS_BLI_HOLD
;

459 
	}
}

461 
xfs_buf_t
 *

462 
	$libxfs_å™s_gë_buf_m≠
(

463 
xfs_å™s_t
 *
ç
,

464 
xfs_bu·¨g
 *
bç
,

465 
xfs_buf_m≠
 *
m≠
,

466 
nm≠s
,

467 
uöt
 
f
)

469 
xfs_buf_t
 *
bp
;

470 
xfs_buf_log_ôem_t
 *
bù
;

472 i‡(
ç
 =
NULL
)

473  
	`libxfs_gëbuf_m≠
(
bç
, 
m≠
, 
nm≠s
, 0);

475 
bp
 = 
	`xfs_å™s_buf_ôem_m©ch
(
ç
, 
bç
, 
m≠
, 
nm≠s
);

476 i‡(
bp
 !
NULL
) {

477 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE2
(
bp
, 
xfs_å™s_t
 *Ë=
ç
);

478 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
 *);

479 
	`ASSERT
(
bù
 !
NULL
);

480 
bù
->
bli_ªcur
++;

481  
bp
;

484 
bp
 = 
	`libxfs_gëbuf_m≠
(
bç
, 
m≠
, 
nm≠s
, 0);

485 i‡(
bp
 =
NULL
)

486  
NULL
;

487 #ifde‡
XACT_DEBUG


488 
	`Ârötf
(
°dîr
, "å™s_gë_bu‡buf„∏%p,Åønß˘i⁄ %p\n", 
bp
, 
ç
);

491 
	`xfs_buf_ôem_öô
(
bp
, 
ç
->
t_mou¡p
);

492 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
*);

493 
bù
->
bli_ªcur
 = 0;

494 
	`xfs_å™s_add_ôem
(
ç
, (
xfs_log_ôem_t
 *)
bù
);

497 
	`XFS_BUF_SET_FSPRIVATE2
(
bp
, 
ç
);

498  
bp
;

499 
	}
}

501 
xfs_buf_t
 *

502 
	$libxfs_å™s_gësb
(

503 
xfs_å™s_t
 *
ç
,

504 
xfs_mou¡_t
 *
mp
,

505 
Êags
)

507 
xfs_buf_t
 *
bp
;

508 
xfs_buf_log_ôem_t
 *
bù
;

509 
Àn
 = 
	`XFS_FSS_TO_BB
(
mp
, 1);

510 
	`DEFINE_SINGLE_BUF_MAP
(
m≠
, 
XFS_SB_DADDR
, 
Àn
);

512 i‡(
ç
 =
NULL
)

513  
	`libxfs_gësb
(
mp
, 
Êags
);

515 
bp
 = 
	`xfs_å™s_buf_ôem_m©ch
(
ç
, 
mp
->
m_dev
, &
m≠
, 1);

516 i‡(
bp
 !
NULL
) {

517 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE2
(
bp
, 
xfs_å™s_t
 *Ë=
ç
);

518 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
 *);

519 
	`ASSERT
(
bù
 !
NULL
);

520 
bù
->
bli_ªcur
++;

521  
bp
;

524 
bp
 = 
	`libxfs_gësb
(
mp
, 
Êags
);

525 #ifde‡
XACT_DEBUG


526 
	`Ârötf
(
°dîr
, "å™s_gë_sb buf„∏%p,Åønß˘i⁄ %p\n", 
bp
, 
ç
);

529 
	`xfs_buf_ôem_öô
(
bp
, 
mp
);

530 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
*);

531 
bù
->
bli_ªcur
 = 0;

532 
	`xfs_å™s_add_ôem
(
ç
, (
xfs_log_ôem_t
 *)
bù
);

535 
	`XFS_BUF_SET_FSPRIVATE2
(
bp
, 
ç
);

536  
bp
;

537 
	}
}

540 
	$libxfs_å™s_ªad_buf_m≠
(

541 
xfs_mou¡_t
 *
mp
,

542 
xfs_å™s_t
 *
ç
,

543 
xfs_bu·¨g
 *
bç
,

544 
xfs_buf_m≠
 *
m≠
,

545 
nm≠s
,

546 
uöt
 
Êags
,

547 
xfs_buf_t
 **
bµ
,

548 c⁄° 
xfs_buf_›s
 *
›s
)

550 
xfs_buf_t
 *
bp
;

551 
xfs_buf_log_ôem_t
 *
bù
;

552 
îr‹
;

554 *
bµ
 = 
NULL
;

556 i‡(
ç
 =
NULL
) {

557 
bp
 = 
	`libxfs_ªadbuf_m≠
(
bç
, 
m≠
, 
nm≠s
, 
Êags
, 
›s
);

558 i‡(!
bp
) {

559  (
Êags
 & 
XBF_TRYLOCK
Ë? -
EAGAIN
 : -
ENOMEM
;

561 i‡(
bp
->
b_îr‹
)

562 
out_ªl£
;

563 
d⁄e
;

566 
bp
 = 
	`xfs_å™s_buf_ôem_m©ch
(
ç
, 
bç
, 
m≠
, 
nm≠s
);

567 i‡(
bp
 !
NULL
) {

568 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE2
(
bp
, 
xfs_å™s_t
 *Ë=
ç
);

569 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE
(
bp
, *Ë!
NULL
);

570 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
*);

571 
bù
->
bli_ªcur
++;

572 
d⁄e
;

575 
bp
 = 
	`libxfs_ªadbuf_m≠
(
bç
, 
m≠
, 
nm≠s
, 
Êags
, 
›s
);

576 i‡(!
bp
) {

577  (
Êags
 & 
XBF_TRYLOCK
Ë? -
EAGAIN
 : -
ENOMEM
;

579 i‡(
bp
->
b_îr‹
)

580 
out_ªl£
;

582 #ifde‡
XACT_DEBUG


583 
	`Ârötf
(
°dîr
, "å™s_ªad_bu‡buf„∏%p,Åønß˘i⁄ %p\n", 
bp
, 
ç
);

586 
	`xfs_buf_ôem_öô
(
bp
, 
ç
->
t_mou¡p
);

587 
bù
 = 
	`XFS_BUF_FSPRIVATE
(
bp
, 
xfs_buf_log_ôem_t
 *);

588 
bù
->
bli_ªcur
 = 0;

589 
	`xfs_å™s_add_ôem
(
ç
, (
xfs_log_ôem_t
 *)
bù
);

592 
	`XFS_BUF_SET_FSPRIVATE2
(
bp
, 
ç
);

593 
d⁄e
:

594 *
bµ
 = 
bp
;

596 
out_ªl£
:

597 
îr‹
 = 
bp
->
b_îr‹
;

598 
	`xfs_buf_ªl£
(
bp
);

599  
îr‹
;

600 
	}
}

612 
	$libxfs_å™s_mod_sb
(

613 
xfs_å™s_t
 *
ç
,

614 
uöt
 
fõld
,

615 
dñè
)

617 
fõld
) {

618 
XFS_TRANS_SB_RES_FDBLOCKS
:

620 
XFS_TRANS_SB_FDBLOCKS
:

621 
ç
->
t_fdblocks_dñè
 +
dñè
;

623 
XFS_TRANS_SB_ICOUNT
:

624 
	`ASSERT
(
dñè
 > 0);

625 
ç
->
t_icou¡_dñè
 +
dñè
;

627 
XFS_TRANS_SB_IFREE
:

628 
ç
->
t_i‰ì_dñè
 +
dñè
;

630 
XFS_TRANS_SB_FREXTENTS
:

631 
ç
->
t_‰exã¡s_dñè
 +
dñè
;

634 
	`ASSERT
(0);

637 
ç
->
t_Êags
 |(
XFS_TRANS_SB_DIRTY
 | 
XFS_TRANS_DIRTY
);

638 
	}
}

646 
	$öode_ôem_d⁄e
(

647 
xfs_öode_log_ôem_t
 *
iù
)

649 
xfs_döode_t
 *
dù
;

650 
xfs_öode_t
 *
ù
;

651 
xfs_mou¡_t
 *
mp
;

652 
xfs_buf_t
 *
bp
;

653 
îr‹
;

655 
ù
 = 
iù
->
ûi_öode
;

656 
mp
 = 
iù
->
ûi_ôem
.
li_mou¡p
;

657 
	`ASSERT
(
ù
 !
NULL
);

659 i‡(!(
iù
->
ûi_fõlds
 & 
XFS_ILOG_ALL
)) {

660 
ù
->
i_å™•
 = 
NULL
;

661 
iù
->
ûi_Êags
 = 0;

668 
îr‹
 = 
	`xfs_im≠_to_bp
(
mp
, 
NULL
, &
ù
->
i_im≠
, &
dù
, &
bp
, 0, 0);

669 i‡(
îr‹
) {

670 
	`Ârötf
(
°dîr
, 
	`_
("%s: warning - imap_to_bp failed (%d)\n"),

671 
¥og«me
, 
îr‹
);

675 
	`XFS_BUF_SET_FSPRIVATE
(
bp
, 
iù
);

676 
îr‹
 = 
	`libxfs_iÊush_öt
(
ù
, 
bp
);

677 i‡(
îr‹
) {

678 
	`Ârötf
(
°dîr
, 
	`_
("%s: warning - iflush_int failed (%d)\n"),

679 
¥og«me
, 
îr‹
);

683 
ù
->
i_å™•
 = 
NULL
;

684 
	`XFS_BUF_SET_FSPRIVATE
(
bp
, 
NULL
);

685 
	`XFS_BUF_SET_FSPRIVATE2
(
bp
, 
NULL
);

686 
	`libxfs_wrôebuf
(
bp
, 0);

687 #ifde‡
XACT_DEBUG


688 
	`Ârötf
(
°dîr
, "flushing dirty inode %llu, buffer %p\n",

689 
ù
->
i_öo
, 
bp
);

691 
	}
}

694 
	$buf_ôem_d⁄e
(

695 
xfs_buf_log_ôem_t
 *
bù
)

697 
xfs_buf_t
 *
bp
;

698 
hﬁd
;

699 
kmem_z⁄e_t
 *
xfs_buf_ôem_z⁄e
;

701 
bp
 = 
bù
->
bli_buf
;

702 
	`ASSERT
(
bp
 !
NULL
);

703 
	`XFS_BUF_SET_FSPRIVATE
(
bp
, 
NULL
);

704 
	`XFS_BUF_SET_FSPRIVATE2
(
bp
, 
NULL
);

706 
hﬁd
 = (
bù
->
bli_Êags
 & 
XFS_BLI_HOLD
);

707 i‡(
bù
->
bli_Êags
 & 
XFS_BLI_DIRTY
) {

708 #ifde‡
XACT_DEBUG


709 
	`Ârötf
(
°dîr
, "flushing/staling buffer %p (hold=%d)\n",

710 
bp
, 
hﬁd
);

712 
	`libxfs_wrôebuf_öt
(
bp
, 0);

714 i‡(
hﬁd
)

715 
bù
->
bli_Êags
 &~
XFS_BLI_HOLD
;

717 
	`libxfs_putbuf
(
bp
);

719 
	`kmem_z⁄e_‰ì
(
xfs_buf_ôem_z⁄e
, 
bù
);

720 
	}
}

723 
	$å™s_commôãd
(

724 
xfs_å™s_t
 *
ç
)

726 
xfs_log_ôem_desc
 *
lidp
, *
√xt
;

728 
	`li°_f‹_óch_íåy_ß„
(
lidp
, 
√xt
, &
ç
->
t_ôems
, 
lid_å™s
) {

729 
xfs_log_ôem
 *
lù
 = 
lidp
->
lid_ôem
;

731 
	`xfs_å™s_dñ_ôem
(
lù
);

733 i‡(
lù
->
li_ty≥
 =
XFS_LI_BUF
)

734 
	`buf_ôem_d⁄e
((
xfs_buf_log_ôem_t
 *)
lù
);

735 i‡(
lù
->
li_ty≥
 =
XFS_LI_INODE
)

736 
	`öode_ôem_d⁄e
((
xfs_öode_log_ôem_t
 *)
lù
);

738 
	`Ârötf
(
°dîr
, 
	`_
("%s: unrecognisedÜog itemÅype\n"),

739 
¥og«me
);

740 
	`ASSERT
(0);

743 
	}
}

746 
	$buf_ôem_u∆ock
(

747 
xfs_buf_log_ôem_t
 *
bù
)

749 
xfs_buf_t
 *
bp
 = 
bù
->
bli_buf
;

750 
uöt
 
hﬁd
;

753 
	`XFS_BUF_SET_FSPRIVATE2
(
bù
->
bli_buf
, 
NULL
);

755 
hﬁd
 = 
bù
->
bli_Êags
 & 
XFS_BLI_HOLD
;

756 
bù
->
bli_Êags
 &~
XFS_BLI_HOLD
;

757 i‡(!
hﬁd
)

758 
	`libxfs_putbuf
(
bp
);

759 
	}
}

762 
	$öode_ôem_u∆ock
(

763 
xfs_öode_log_ôem_t
 *
iù
)

765 
xfs_öode_t
 *
ù
 = 
iù
->
ûi_öode
;

768 
ù
->
i_å™•
 = 
NULL
;

770 
iù
->
ûi_Êags
 = 0;

771 
	}
}

778 
	$xfs_å™s_‰ì_ôems
(

779 
xfs_å™s
 *
ç
)

781 
xfs_log_ôem_desc
 *
lidp
, *
√xt
;

783 
	`li°_f‹_óch_íåy_ß„
(
lidp
, 
√xt
, &
ç
->
t_ôems
, 
lid_å™s
) {

784 
xfs_log_ôem
 *
lù
 = 
lidp
->
lid_ôem
;

786 
	`xfs_å™s_dñ_ôem
(
lù
);

787 i‡(
lù
->
li_ty≥
 =
XFS_LI_BUF
)

788 
	`buf_ôem_u∆ock
((
xfs_buf_log_ôem_t
 *)
lù
);

789 i‡(
lù
->
li_ty≥
 =
XFS_LI_INODE
)

790 
	`öode_ôem_u∆ock
((
xfs_öode_log_ôem_t
 *)
lù
);

792 
	`Ârötf
(
°dîr
, 
	`_
("%s: unrecognisedÜog itemÅype\n"),

793 
¥og«me
);

794 
	`ASSERT
(0);

797 
	}
}

803 
	$libxfs_å™s_commô
(

804 
xfs_å™s_t
 *
ç
)

806 
xfs_sb_t
 *
sbp
;

808 i‡(
ç
 =
NULL
)

811 i‡(!(
ç
->
t_Êags
 & 
XFS_TRANS_DIRTY
)) {

812 #ifde‡
XACT_DEBUG


813 
	`Ârötf
(
°dîr
, "commôãd cÀ™Åønß˘i⁄ %p\n", 
ç
);

815 
	`xfs_å™s_‰ì_ôems
(
ç
);

816 
	`‰ì
(
ç
);

817 
ç
 = 
NULL
;

821 i‡(
ç
->
t_Êags
 & 
XFS_TRANS_SB_DIRTY
) {

822 
sbp
 = &(
ç
->
t_mou¡p
->
m_sb
);

823 i‡(
ç
->
t_icou¡_dñè
)

824 
sbp
->
sb_icou¡
 +
ç
->
t_icou¡_dñè
;

825 i‡(
ç
->
t_i‰ì_dñè
)

826 
sbp
->
sb_i‰ì
 +
ç
->
t_i‰ì_dñè
;

827 i‡(
ç
->
t_fdblocks_dñè
)

828 
sbp
->
sb_fdblocks
 +
ç
->
t_fdblocks_dñè
;

829 i‡(
ç
->
t_‰exã¡s_dñè
)

830 
sbp
->
sb_‰exã¡s
 +
ç
->
t_‰exã¡s_dñè
;

831 
	`xfs_log_sb
(
ç
);

834 #ifde‡
XACT_DEBUG


835 
	`Ârötf
(
°dîr
, "commôtög dútyÅønß˘i⁄ %p\n", 
ç
);

837 
	`å™s_commôãd
(
ç
);

840 
	`‰ì
(
ç
);

841 
ç
 = 
NULL
;

843 
	}
}

	@libxfs/util.c

19 
	~"libxfs_¥iv.h
"

20 
	~"libxfs_io.h
"

21 
	~"öô.h
"

22 
	~"xfs_fs.h
"

23 
	~"xfs_sh¨ed.h
"

24 
	~"xfs_f‹m©.h
"

25 
	~"xfs_log_f‹m©.h
"

26 
	~"xfs_å™s_ªsv.h
"

27 
	~"xfs_mou¡.h
"

28 
	~"xfs_de„r.h
"

29 
	~"xfs_öode_buf.h
"

30 
	~"xfs_öode_f‹k.h
"

31 
	~"xfs_öode.h
"

32 
	~"xfs_å™s.h
"

33 
	~"xfs_bm≠.h
"

34 
	~"xfs_bm≠_båì.h
"

35 
	~"xfs_å™s_•a˚.h
"

36 
	~"xfs_üŒoc.h
"

37 
	~"xfs_Æloc.h
"

38 
	~"xfs_bô.h
"

46 
	$xfs_log_ˇlc_unô_ªs
(

47 
xfs_mou¡
 *
mp
,

48 
unô_byãs
)

50 
i˛og_•a˚
;

51 
i˛og_hódî_size
;

52 
i˛og_size
;

53 
uöt
 
num_hódîs
;

55 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
)) {

56 
i˛og_size
 = 
XLOG_MAX_RECORD_BSIZE
;

57 
i˛og_hódî_size
 = 
	`BBTOB
(
i˛og_size
 / 
XLOG_HEADER_CYCLE_SIZE
);

59 
i˛og_size
 = 
XLOG_BIG_RECORD_BSIZE
;

60 
i˛og_hódî_size
 = 
BBSIZE
;

95 
unô_byãs
 +(
xlog_›_hódî_t
);

96 
unô_byãs
 +(
xfs_å™s_hódî_t
);

99 
unô_byãs
 +(
xlog_›_hódî_t
);

118 
i˛og_•a˚
 = 
i˛og_size
 - 
i˛og_hódî_size
;

119 
num_hódîs
 = 
	`howm™y
(
unô_byãs
, 
i˛og_•a˚
);

122 
unô_byãs
 +(
xlog_›_hódî_t
Ë* 
num_hódîs
;

125 !
num_hódîs
 ||

126 
	`howm™y
(
unô_byãs
, 
i˛og_•a˚
Ë> 
num_hódîs
) {

127 
unô_byãs
 +(
xlog_›_hódî_t
);

128 
num_hódîs
++;

130 
unô_byãs
 +
i˛og_hódî_size
 * 
num_hódîs
;

133 
unô_byãs
 +
i˛og_hódî_size
;

136 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
Ë&& mp->m_sb.
sb_logsunô
 > 1) {

138 
unô_byãs
 +2 * 
mp
->
m_sb
.
sb_logsunô
;

141 
unô_byãs
 +2 * 
BBSIZE
;

144  
unô_byãs
;

145 
	}
}

154 
	$libxfs_å™s_ichgtime
(

155 
xfs_å™s
 *
ç
,

156 
xfs_öode
 *
ù
,

157 
Êags
)

159 
time•ec
 
tv
;

160 
timevÆ
 
°v
;

162 
	`gëtimeofday
(&
°v
, (
timez⁄e
 *)0);

163 
tv
.
tv_£c
 = 
°v
.tv_sec;

164 
tv
.
tv_n£c
 = 
°v
.
tv_u£c
 * 1000;

165 i‡(
Êags
 & 
XFS_ICHGTIME_MOD
)

166 
	`VFS_I
(
ù
)->
i_mtime
 = 
tv
;

167 i‡(
Êags
 & 
XFS_ICHGTIME_CHG
)

168 
	`VFS_I
(
ù
)->
i_˘ime
 = 
tv
;

169 i‡(
Êags
 & 
XFS_ICHGTIME_CREATE
) {

170 
ù
->
i_d
.
di_¸time
.
t_£c
 = (
__öt32_t
)
tv
.
tv_£c
;

171 
ù
->
i_d
.
di_¸time
.
t_n£c
 = (
__öt32_t
)
tv
.
tv_n£c
;

173 
	}
}

185 
	$libxfs_üŒoc
(

186 
xfs_å™s_t
 *
ç
,

187 
xfs_öode_t
 *
pù
,

188 
mode_t
 
mode
,

189 
∆ök_t
 
∆ök
,

190 
xfs_dev_t
 
rdev
,

191 
¸ed
 *
¸
,

192 
fsx©å
 *
fsx
,

193 
okÆloc
,

194 
xfs_buf_t
 **
üŒoc_c⁄ãxt
,

195 
xfs_öode_t
 **
ùp
)

197 
xfs_öo_t
 
öo
;

198 
xfs_öode_t
 *
ù
;

199 
uöt
 
Êags
;

200 
îr‹
;

206 
îr‹
 = 
	`xfs_düŒoc
(
ç
, 
pù
 ?Öù->
i_öo
 : 0, 
mode
, 
okÆloc
,

207 
üŒoc_c⁄ãxt
, &
öo
);

208 i‡(
îr‹
 != 0)

209  
îr‹
;

210 i‡(*
üŒoc_c⁄ãxt
 || 
öo
 =
NULLFSINO
) {

211 *
ùp
 = 
NULL
;

214 
	`ASSERT
(*
üŒoc_c⁄ãxt
 =
NULL
);

216 
îr‹
 = 
	`xfs_å™s_igë
(
ç
->
t_mou¡p
,Åp, 
öo
, 0, 0, &
ù
);

217 i‡(
îr‹
 != 0)

218  
îr‹
;

219 
	`ASSERT
(
ù
 !
NULL
);

221 
	`VFS_I
(
ù
)->
i_mode
 = 
mode
;

222 
	`£t_∆ök
(
	`VFS_I
(
ù
), 
∆ök
);

223 
ù
->
i_d
.
di_uid
 = 
¸
->
¸_uid
;

224 
ù
->
i_d
.
di_gid
 = 
¸
->
¸_gid
;

225 
	`xfs_£t_¥ojid
(&
ù
->
i_d
, 
pù
 ? 0 : 
fsx
->
fsx_¥ojid
);

226 
	`xfs_å™s_ichgtime
(
ç
, 
ù
, 
XFS_ICHGTIME_CHG
 | 
XFS_ICHGTIME_MOD
);

234 i‡(
ù
->
i_d
.
di_vîsi⁄
 == 1) {

235 
ù
->
i_d
.
di_vîsi⁄
 = 2;

242 i‡(
pù
 && (
	`VFS_I
’ù)->
i_mode
 & 
S_ISGID
)) {

243 
ù
->
i_d
.
di_gid
 = 
pù
->i_d.di_gid;

244 i‡((
	`VFS_I
(
pù
)->
i_mode
 & 
S_ISGID
Ë&& (
mode
 & 
S_IFMT
Ë=
S_IFDIR
)

245 
	`VFS_I
(
ù
)->
i_mode
 |
S_ISGID
;

248 
ù
->
i_d
.
di_size
 = 0;

249 
ù
->
i_d
.
di_√xã¡s
 = 0;

250 
	`ASSERT
(
ù
->
i_d
.
di_nblocks
 == 0);

251 
ù
->
i_d
.
di_extsize
 = 
pù
 ? 0 : 
fsx
->
fsx_extsize
;

252 
ù
->
i_d
.
di_dmevmask
 = 0;

253 
ù
->
i_d
.
di_dm°©e
 = 0;

254 
ù
->
i_d
.
di_Êags
 = 
pù
 ? 0 : 
fsx
->
fsx_xÊags
;

256 i‡(
ù
->
i_d
.
di_vîsi⁄
 == 3) {

257 
	`ASSERT
(
ù
->
i_d
.
di_öo
 =
öo
);

258 
	`ASSERT
(
	`uuid_equÆ
(&
ù
->
i_d
.
di_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
));

259 
	`VFS_I
(
ù
)->
i_vîsi⁄
 = 1;

260 
ù
->
i_d
.
di_Êags2
 = 0;

261 
ù
->
i_d
.
di_¸time
.
t_£c
 = (
__öt32_t
)
	`VFS_I
(ù)->
i_mtime
.
tv_£c
;

262 
ù
->
i_d
.
di_¸time
.
t_n£c
 = (
__öt32_t
)
	`VFS_I
(ù)->
i_mtime
.
tv_n£c
;

265 
Êags
 = 
XFS_ILOG_CORE
;

266 
mode
 & 
S_IFMT
) {

267 
S_IFIFO
:

268 
S_IFSOCK
:

270 
rdev
 = 0;

272 
S_IFCHR
:

273 
S_IFBLK
:

274 
ù
->
i_d
.
di_f‹m©
 = 
XFS_DINODE_FMT_DEV
;

275 
ù
->
i_df
.
if_u2
.
if_rdev
 = 
rdev
;

276 
Êags
 |
XFS_ILOG_DEV
;

278 
S_IFREG
:

279 
S_IFDIR
:

280 i‡(
pù
 && (pù->
i_d
.
di_Êags
 & 
XFS_DIFLAG_ANY
)) {

281 
uöt
 
di_Êags
 = 0;

283 i‡((
mode
 & 
S_IFMT
Ë=
S_IFDIR
) {

284 i‡(
pù
->
i_d
.
di_Êags
 & 
XFS_DIFLAG_RTINHERIT
)

285 
di_Êags
 |
XFS_DIFLAG_RTINHERIT
;

286 i‡(
pù
->
i_d
.
di_Êags
 & 
XFS_DIFLAG_EXTSZINHERIT
) {

287 
di_Êags
 |
XFS_DIFLAG_EXTSZINHERIT
;

288 
ù
->
i_d
.
di_extsize
 = 
pù
->i_d.di_extsize;

291 i‡(
pù
->
i_d
.
di_Êags
 & 
XFS_DIFLAG_RTINHERIT
) {

292 
di_Êags
 |
XFS_DIFLAG_REALTIME
;

294 i‡(
pù
->
i_d
.
di_Êags
 & 
XFS_DIFLAG_EXTSZINHERIT
) {

295 
di_Êags
 |
XFS_DIFLAG_EXTSIZE
;

296 
ù
->
i_d
.
di_extsize
 = 
pù
->i_d.di_extsize;

299 i‡(
pù
->
i_d
.
di_Êags
 & 
XFS_DIFLAG_PROJINHERIT
)

300 
di_Êags
 |
XFS_DIFLAG_PROJINHERIT
;

301 
ù
->
i_d
.
di_Êags
 |= di_flags;

304 
S_IFLNK
:

305 
ù
->
i_d
.
di_f‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

306 
ù
->
i_df
.
if_Êags
 = 
XFS_IFEXTENTS
;

307 
ù
->
i_df
.
if_byãs
 = ip->i_df.
if_ªÆ_byãs
 = 0;

308 
ù
->
i_df
.
if_u1
.
if_exã¡s
 = 
NULL
;

311 
	`ASSERT
(0);

314 
ù
->
i_d
.
di_af‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

315 
ù
->
i_d
.
di_™exã¡s
 = 0;

320 i‡(
	`XFS_ISDIR
(
ù
))

321 
ù
->
d_›s
 = ip->
i_mou¡
->
m_dú_öode_›s
;

323 
ù
->
d_›s
 = ip->
i_mou¡
->
m_n⁄dú_öode_›s
;

328 
	`xfs_å™s_log_öode
(
ç
, 
ù
, 
Êags
);

329 *
ùp
 = 
ù
;

331 
	}
}

334 
	$libxfs_ùröt
(

335 
xfs_öode_t
 *
ù
)

337 
xfs_icdöode
 *
dù
;

338 
xfs_bmbt_ªc_ho°_t
 *
ï
;

339 
xfs_exäum_t
 
i
;

340 
xfs_exäum_t
 
√xã¡s
;

342 
	`¥ötf
("Inodê%lx\n", ()
ù
);

343 
	`¥ötf
(" i_öÿ%Œx\n", ()
ù
->
i_öo
);

345 i‡(
ù
->
i_df
.
if_Êags
 & 
XFS_IFEXTENTS
)

346 
	`¥ötf
("EXTENTS ");

347 
	`¥ötf
("\n");

348 
	`¥ötf
(" i_df.if_byã†%d\n", 
ù
->
i_df
.
if_byãs
);

349 
	`¥ötf
(" i_df.if_u1.if_extents/if_data %lx\n",

350 ()
ù
->
i_df
.
if_u1
.
if_exã¡s
);

351 i‡(
ù
->
i_df
.
if_Êags
 & 
XFS_IFEXTENTS
) {

352 
√xã¡s
 = 
ù
->
i_df
.
if_byãs
 / (
uöt
)(*
ï
);

353 
ï
 = 
ù
->
i_df
.
if_u1
.
if_exã¡s
, 
i
 = 0; i < 
√xã¡s
;

354 
i
++, 
ï
++) {

355 
xfs_bmbt_úec_t
 
ªc
;

357 
	`xfs_bmbt_gë_Æl
(
ï
, &
ªc
);

358 
	`¥ötf
("\t%d: startoff %llu, startblock 0x%llx,"

360 
i
, ()
ªc
.
br_°¨toff
,

361 ()
ªc
.
br_°¨tblock
,

362 ()
ªc
.
br_blockcou¡
,

363 ()
ªc
.
br_°©e
);

366 
	`¥ötf
(" i_df.if_broŸ %lx\n", ()
ù
->
i_df
.
if_broŸ
);

367 
	`¥ötf
(" i_df.if_broŸ_byã†%x\n", 
ù
->
i_df
.
if_broŸ_byãs
);

369 
dù
 = &
ù
->
i_d
;

370 
	`¥ötf
("\nOn diskÖortion\n");

371 
	`¥ötf
(" di_modê%o\n", 
	`VFS_I
(
ù
)->
i_mode
);

372 
	`¥ötf
(" di_vîsi⁄ %x\n", (
uöt
)
dù
->
di_vîsi⁄
);

373 
ù
->
i_d
.
di_f‹m©
) {

374 
XFS_DINODE_FMT_LOCAL
:

375 
	`¥ötf
(" Inline inode\n");

377 
XFS_DINODE_FMT_EXTENTS
:

378 
	`¥ötf
(" Extents inode\n");

380 
XFS_DINODE_FMT_BTREE
:

381 
	`¥ötf
(" B-tree inode\n");

384 
	`¥ötf
(" Other inode\n");

387 
	`¥ötf
(" di_∆ök %x\n", 
	`VFS_I
(
ù
)->
i_∆ök
);

388 
	`¥ötf
(" di_uid %d\n", 
dù
->
di_uid
);

389 
	`¥ötf
(" di_gid %d\n", 
dù
->
di_gid
);

390 
	`¥ötf
(" di_√xã¡†%d\n", 
dù
->
di_√xã¡s
);

391 
	`¥ötf
(" di_sizê%Œu\n", ()
dù
->
di_size
);

392 
	`¥ötf
(" di_gí %x\n", 
	`VFS_I
(
ù
)->
i_gíî©i⁄
);

393 
	`¥ötf
(" di_extsizê%d\n", 
dù
->
di_extsize
);

394 
	`¥ötf
(" di_Êag†%x\n", 
dù
->
di_Êags
);

395 
	`¥ötf
(" di_nblock†%Œu\n", ()
dù
->
di_nblocks
);

396 
	}
}

403 
	$libxfs_iÊush_öt
(
xfs_öode_t
 *
ù
, 
xfs_buf_t
 *
bp
)

405 
xfs_öode_log_ôem_t
 *
iù
;

406 
xfs_döode_t
 *
dù
;

407 
xfs_mou¡_t
 *
mp
;

409 
	`ASSERT
(
	`XFS_BUF_FSPRIVATE
(
bp
, *Ë!
NULL
);

410 
	`ASSERT
(
ù
->
i_d
.
di_f‹m©
 !
XFS_DINODE_FMT_BTREE
 ||

411 
ù
->
i_d
.
di_√xã¡s
 > ip->
i_df
.
if_ext_max
);

412 
	`ASSERT
(
ù
->
i_d
.
di_vîsi⁄
 > 1);

414 
iù
 = 
ù
->
i_ôemp
;

415 
mp
 = 
ù
->
i_mou¡
;

418 
dù
 = 
	`xfs_buf_off£t
(
bp
, 
ù
->
i_im≠
.
im_boff£t
);

420 
	`ASSERT
(
ù
->
i_d
.
di_magic
 =
XFS_DINODE_MAGIC
);

421 i‡(
	`XFS_ISREG
(
ù
)) {

422 
	`ASSERT
–(
ù
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
) ||

423 (
ù
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
) );

424 } i‡(
	`XFS_ISDIR
(
ù
)) {

425 
	`ASSERT
–(
ù
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
) ||

426 (
ù
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
) ||

427 (
ù
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
) );

429 
	`ASSERT
(
ù
->
i_d
.
di_√xã¡s
+ù->i_d.
di_™exã¡s
 <ù->i_d.
di_nblocks
);

430 
	`ASSERT
(
ù
->
i_d
.
di_f‹koff
 <
mp
->
m_sb
.
sb_öodesize
);

433 i‡(
ù
->
i_d
.
di_vîsi⁄
 == 3)

434 
	`VFS_I
(
ù
)->
i_vîsi⁄
++;

442 
	`xfs_öode_to_disk
(
ù
, 
dù
, 
iù
->
ûi_ôem
.
li_l¢
);

444 
	`xfs_iÊush_f‹k
(
ù
, 
dù
, 
iù
, 
XFS_DATA_FORK
);

445 i‡(
	`XFS_IFORK_Q
(
ù
))

446 
	`xfs_iÊush_f‹k
(
ù
, 
dù
, 
iù
, 
XFS_ATTR_FORK
);

449 
	`xfs_döode_ˇlc_¸c
(
mp
, 
dù
);

452 
	}
}

455 
	$libxfs_mod_öc‹e_sb
(

456 
xfs_mou¡
 *
mp
,

457 
fõld
,

458 
öt64_t
 
dñè
,

459 
rsvd
)

461 
lcou¡î
;

463 
fõld
) {

464 
XFS_TRANS_SB_FDBLOCKS
:

465 
lcou¡î
 = ()
mp
->
m_sb
.
sb_fdblocks
;

466 
lcou¡î
 +
dñè
;

467 i‡(
lcou¡î
 < 0)

468  -
ENOSPC
;

469 
mp
->
m_sb
.
sb_fdblocks
 = 
lcou¡î
;

472 
	`ASSERT
(0);

473  -
EINVAL
;

475 
	}
}

482 
	$libxfs_Æloc_fûe_•a˚
(

483 
xfs_öode_t
 *
ù
,

484 
xfs_off_t
 
off£t
,

485 
xfs_off_t
 
Àn
,

486 
Æloc_ty≥
,

487 
©å_Êags
)

489 
xfs_mou¡_t
 *
mp
;

490 
xfs_off_t
 
cou¡
;

491 
xfs_fûblks_t
 
d©ablocks
;

492 
xfs_fûblks_t
 
Æloˇãd_fsb
;

493 
xfs_fûblks_t
 
Æloˇãsize_fsb
;

494 
xfs_fsblock_t
 
fú°fsb
;

495 
xfs_de„r_›s
 
‰ì_li°
;

496 
xfs_bmbt_úec_t
 *
im≠p
;

497 
xfs_bmbt_úec_t
 
im≠s
[1];

498 
ªccou¡
;

499 
uöt
 
ªsblks
;

500 
xfs_fûeoff_t
 
°¨toff£t_fsb
;

501 
xfs_å™s_t
 *
ç
;

502 
xfs_bm≠i_Êags
;

503 
îr‹
;

505 i‡(
Àn
 <= 0)

506  -
EINVAL
;

508 
cou¡
 = 
Àn
;

509 
îr‹
 = 0;

510 
im≠p
 = &
im≠s
[0];

511 
ªccou¡
 = 1;

512 
xfs_bm≠i_Êags
 = 
Æloc_ty≥
 ? 
XFS_BMAPI_PREALLOC
 : 0;

513 
mp
 = 
ù
->
i_mou¡
;

514 
°¨toff£t_fsb
 = 
	`XFS_B_TO_FSBT
(
mp
, 
off£t
);

515 
Æloˇãsize_fsb
 = 
	`XFS_B_TO_FSB
(
mp
, 
cou¡
);

518 
Æloˇãsize_fsb
 && !
îr‹
) {

519 
d©ablocks
 = 
Æloˇãsize_fsb
;

521 
ªsblks
 = (
uöt
)
	`XFS_DIOSTRAT_SPACE_RES
(
mp
, 
d©ablocks
);

522 
îr‹
 = 
	`xfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_wrôe
, 
ªsblks
,

523 0, 0, &
ç
);

527 i‡(
îr‹
) {

528 
	`ASSERT
(
îr‹
 =-
ENOSPC
);

531 
	`xfs_å™s_ijoö
(
ç
, 
ù
, 0);

533 
	`xfs_de„r_öô
(&
‰ì_li°
, &
fú°fsb
);

534 
îr‹
 = 
	`xfs_bm≠i_wrôe
(
ç
, 
ù
, 
°¨toff£t_fsb
, 
Æloˇãsize_fsb
,

535 
xfs_bm≠i_Êags
, &
fú°fsb
, 0, 
im≠p
,

536 &
ªccou¡
, &
‰ì_li°
);

538 i‡(
îr‹
)

539 
îr‹0
;

542 
îr‹
 = 
	`xfs_de„r_föish
(&
ç
, &
‰ì_li°
, 
ù
);

543 i‡(
îr‹
)

544 
îr‹0
;

546 
îr‹
 = 
	`xfs_å™s_commô
(
ç
);

547 i‡(
îr‹
)

550 
Æloˇãd_fsb
 = 
im≠p
->
br_blockcou¡
;

551 i‡(
ªccou¡
 == 0)

552  -
ENOSPC
;

554 
°¨toff£t_fsb
 +
Æloˇãd_fsb
;

555 
Æloˇãsize_fsb
 -
Æloˇãd_fsb
;

557  
îr‹
;

559 
îr‹0
:

560 
	`xfs_de„r_ˇn˚l
(&
‰ì_li°
);

561 
	`xfs_å™s_ˇn˚l
(
ç
);

562  
îr‹
;

563 
	}
}

566 
	$libxfs_log2_roundup
(
i
)

568 
rvÆ
;

570 
rvÆ
 = 0;ÑvÆ < 
NBBY
 * (
i
);Ñval++) {

571 i‡((1 << 
rvÆ
Ë>
i
)

574  
rvÆ
;

575 
	}
}

585 
	$libxfs_öode_Æloc
(

586 
xfs_å™s_t
 **
ç
,

587 
xfs_öode_t
 *
pù
,

588 
mode_t
 
mode
,

589 
∆ök_t
 
∆ök
,

590 
xfs_dev_t
 
rdev
,

591 
¸ed
 *
¸
,

592 
fsx©å
 *
fsx
,

593 
xfs_öode_t
 **
ùp
)

595 
xfs_buf_t
 *
üŒoc_c⁄ãxt
;

596 
xfs_öode_t
 *
ù
;

597 
îr‹
;

599 
üŒoc_c⁄ãxt
 = (
xfs_buf_t
 *)0;

600 
îr‹
 = 
	`libxfs_üŒoc
(*
ç
, 
pù
, 
mode
, 
∆ök
, 
rdev
, 
¸
, 
fsx
,

601 1, &
üŒoc_c⁄ãxt
, &
ù
);

602 i‡(
îr‹
) {

603 *
ùp
 = 
NULL
;

604  
îr‹
;

606 i‡(!
üŒoc_c⁄ãxt
 && !
ù
) {

607 *
ùp
 = 
NULL
;

608  -
ENOSPC
;

611 i‡(
üŒoc_c⁄ãxt
) {

613 
	`xfs_å™s_bhﬁd
(*
ç
, 
üŒoc_c⁄ãxt
);

615 
îr‹
 = 
	`xfs_å™s_rﬁl
(
ç
, 
NULL
);

616 i‡(
îr‹
) {

617 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot duplicateÅransaction: %s\n"),

618 
¥og«me
, 
	`°ªº‹
(
îr‹
));

619 
	`exô
(1);

621 
	`xfs_å™s_bjoö
(*
ç
, 
üŒoc_c⁄ãxt
);

622 
îr‹
 = 
	`libxfs_üŒoc
(*
ç
, 
pù
, 
mode
, 
∆ök
, 
rdev
, 
¸
,

623 
fsx
, 1, &
üŒoc_c⁄ãxt
, &
ù
);

624 i‡(!
ù
)

625 
îr‹
 = -
ENOSPC
;

626 i‡(
îr‹
)

627  
îr‹
;

630 *
ùp
 = 
ù
;

631  
îr‹
;

632 
	}
}

638 
	$libxfs_fs_ª∑ú_cmn_îr
(
Àvñ
, 
xfs_mou¡_t
 *
mp
, *
fmt
, ...)

640 
va_li°
 
≠
;

642 
	`va_°¨t
(
≠
, 
fmt
);

643 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

644 
	`Ârötf
(
°dîr
, " This isá bug.\n");

645 
	`Ârötf
(
°dîr
, "%†vîsi⁄ %s\n", 
¥og«me
, 
VERSION
);

646 
	`Ârötf
(
°dîr
,

649 
	`va_íd
(
≠
);

650 
	}
}

653 
	$libxfs_fs_cmn_îr
(
Àvñ
, 
xfs_mou¡_t
 *
mp
, *
fmt
, ...)

655 
va_li°
 
≠
;

657 
	`va_°¨t
(
≠
, 
fmt
);

658 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

659 
	`Âuts
("\n", 
°dîr
);

660 
	`va_íd
(
≠
);

661 
	}
}

664 
	$cmn_îr
(
Àvñ
, *
fmt
, ...)

666 
va_li°
 
≠
;

668 
	`va_°¨t
(
≠
, 
fmt
);

669 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

670 
	`Âuts
("\n", 
°dîr
);

671 
	`va_íd
(
≠
);

672 
	}
}

679 
	$xfs_vîifõr_îr‹
(

680 
xfs_buf
 *
bp
)

682 
	`xfs_Æît
(
NULL
, "Metadata %s detectedát %s block 0x%llx/0x%x",

683 
bp
->
b_îr‹
 =-
EFSBADCRC
 ? "CRCÉrror" : "corruption",

684 
bp
->
b_›s
->
«me
, bp->
b_bn
, 
	`BBTOB
(bp->
b_Àngth
));

685 
	}
}

698 
xfs_l¢_t
 
	glibxfs_max_l¢
 = 0;

699 
±hªad_muãx_t
 
	glibxfs_max_l¢_lock
 = 
PTHREAD_MUTEX_INITIALIZER
;

701 
boﬁ


702 
	$xfs_log_check_l¢
(

703 
xfs_mou¡
 *
mp
,

704 
xfs_l¢_t
 
l¢
)

706 
cy˛e
 = 
	`CYCLE_LSN
(
l¢
);

707 
block
 = 
	`BLOCK_LSN
(
l¢
);

708 
max_cy˛e
;

709 
max_block
;

711 i‡(
l¢
 =
NULLCOMMITLSN
)

712  
åue
;

714 
	`±hªad_muãx_lock
(&
libxfs_max_l¢_lock
);

716 
max_cy˛e
 = 
	`CYCLE_LSN
(
libxfs_max_l¢
);

717 
max_block
 = 
	`BLOCK_LSN
(
libxfs_max_l¢
);

719 i‡((
cy˛e
 > 
max_cy˛e
) ||

720 (
cy˛e
 =
max_cy˛e
 && 
block
 > 
max_block
))

721 
libxfs_max_l¢
 = 
l¢
;

723 
	`±hªad_muãx_u∆ock
(&
libxfs_max_l¢_lock
);

725  
åue
;

726 
	}
}

728 
xfs_bu·¨g
 *

729 
	$xfs_föd_bdev_f‹_öode
(

730 
xfs_öode
 *
ù
)

732 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

734 i‡(
	`XFS_IS_REALTIME_INODE
(
ù
))

735  
mp
->
m_πdev_èrgp
;

736  
mp
->
m_ddev_èrgp
;

737 
	}
}

739 
xfs_daddr_t


740 
	$xfs_fsb_to_db
(
xfs_öode
 *
ù
, 
xfs_fsblock_t
 
fsb
)

742 i‡(
	`XFS_IS_REALTIME_INODE
(
ù
))

743  
	`XFS_FSB_TO_BB
(
ù
->
i_mou¡
, 
fsb
);

744  
	`XFS_FSB_TO_DADDR
(
ù
->
i_mou¡
, (
fsb
));

745 
	}
}

748 
	$libxfs_zîo_exã¡
(

749 
xfs_öode
 *
ù
,

750 
xfs_fsblock_t
 
°¨t_fsb
,

751 
xfs_off_t
 
cou¡_fsb
)

753 
xfs_daddr_t
 
£˘‹
 = 
	`xfs_fsb_to_db
(
ù
, 
°¨t_fsb
);

754 
ssize_t
 
size
 = 
	`XFS_FSB_TO_BB
(
ù
->
i_mou¡
, 
cou¡_fsb
);

756  
	`libxfs_devi˚_zîo
(
	`xfs_föd_bdev_f‹_öode
(
ù
), 
£˘‹
, 
size
);

757 
	}
}

	@libxfs/xfs_ag_resv.c

20 
	~"libxfs_¥iv.h
"

21 
	~"xfs_fs.h
"

22 
	~"xfs_sh¨ed.h
"

23 
	~"xfs_f‹m©.h
"

24 
	~"xfs_log_f‹m©.h
"

25 
	~"xfs_å™s_ªsv.h
"

26 
	~"xfs_sb.h
"

27 
	~"xfs_mou¡.h
"

28 
	~"xfs_de„r.h
"

29 
	~"xfs_Æloc.h
"

30 
	~"xfs_åa˚.h
"

31 
	~"xfs_cksum.h
"

32 
	~"xfs_å™s.h
"

33 
	~"xfs_bô.h
"

34 
	~"xfs_bm≠.h
"

35 
	~"xfs_bm≠_båì.h
"

36 
	~"xfs_ag_ªsv.h
"

37 
	~"xfs_å™s_•a˚.h
"

38 
	~"xfs_rm≠_båì.h
"

39 
	~"xfs_båì.h
"

40 
	~"xfs_ªfcou¡_båì.h
"

41 
	~"xfs_üŒoc_båì.h
"

86 
boﬁ


87 
	$xfs_ag_ªsv_¸ôiˇl
(

88 
xfs_≥øg
 *
∑g
,

89 
xfs_ag_ªsv_ty≥
 
ty≥
)

91 
xfs_exéí_t
 
avaû
;

92 
xfs_exéí_t
 
‹ig
;

94 
ty≥
) {

95 
XFS_AG_RESV_METADATA
:

96 
avaû
 = 
∑g
->
∑gf_‰ìblks
 -Öag->
∑g_agÊ_ªsv
.
¨_ª£rved
;

97 
‹ig
 = 
∑g
->
∑g_mëa_ªsv
.
¨_asked
;

99 
XFS_AG_RESV_AGFL
:

100 
avaû
 = 
∑g
->
∑gf_‰ìblks
 +Öag->
∑gf_Êcou¡
 -

101 
∑g
->
∑g_mëa_ªsv
.
¨_ª£rved
;

102 
‹ig
 = 
∑g
->
∑g_agÊ_ªsv
.
¨_asked
;

105 
	`ASSERT
(0);

106  
Ál£
;

109 
	`åa˚_xfs_ag_ªsv_¸ôiˇl
(
∑g
, 
ty≥
, 
avaû
);

112  
	`XFS_TEST_ERROR
(
avaû
 < 
‹ig
 / 10 ||ávaû < 
XFS_BTREE_MAXLEVELS
,

113 
∑g
->
∑g_mou¡
, 
XFS_ERRTAG_AG_RESV_CRITICAL
,

114 
XFS_RANDOM_AG_RESV_CRITICAL
);

115 
	}
}

121 
xfs_exéí_t


122 
	$xfs_ag_ªsv_√eded
(

123 
xfs_≥øg
 *
∑g
,

124 
xfs_ag_ªsv_ty≥
 
ty≥
)

126 
xfs_exéí_t
 
Àn
;

128 
Àn
 = 
∑g
->
∑g_mëa_ªsv
.
¨_ª£rved
 +Öag->
∑g_agÊ_ªsv
.ar_reserved;

129 
ty≥
) {

130 
XFS_AG_RESV_METADATA
:

131 
XFS_AG_RESV_AGFL
:

132 
Àn
 -
	`xfs_≥øg_ªsv
(
∑g
, 
ty≥
)->
¨_ª£rved
;

134 
XFS_AG_RESV_NONE
:

138 
	`ASSERT
(0);

141 
	`åa˚_xfs_ag_ªsv_√eded
(
∑g
, 
ty≥
, 
Àn
);

143  
Àn
;

144 
	}
}

148 
	$__xfs_ag_ªsv_‰ì
(

149 
xfs_≥øg
 *
∑g
,

150 
xfs_ag_ªsv_ty≥
 
ty≥
)

152 
xfs_ag_ªsv
 *
ªsv
;

153 
xfs_exéí_t
 
ﬁdªsv
;

154 
îr‹
;

156 
	`åa˚_xfs_ag_ªsv_‰ì
(
∑g
, 
ty≥
, 0);

158 
ªsv
 = 
	`xfs_≥øg_ªsv
(
∑g
, 
ty≥
);

159 
∑g
->
∑g_mou¡
->
m_ag_max_ußbÀ
 +
ªsv
->
¨_asked
;

164 i‡(
ty≥
 =
XFS_AG_RESV_AGFL
)

165 
ﬁdªsv
 = 
ªsv
->
¨_‹ig_ª£rved
;

167 
ﬁdªsv
 = 
ªsv
->
¨_ª£rved
;

168 
îr‹
 = 
	`xfs_mod_fdblocks
(
∑g
->
∑g_mou¡
, 
ﬁdªsv
, 
åue
);

169 
ªsv
->
¨_ª£rved
 = 0;

170 
ªsv
->
¨_asked
 = 0;

172 i‡(
îr‹
)

173 
	`åa˚_xfs_ag_ªsv_‰ì_îr‹
(
∑g
->
∑g_mou¡
,Öag->
∑g_agno
,

174 
îr‹
, 
_RET_IP_
);

175  
îr‹
;

176 
	}
}

180 
	$xfs_ag_ªsv_‰ì
(

181 
xfs_≥øg
 *
∑g
)

183 
îr‹
;

184 
îr2
;

186 
îr‹
 = 
	`__xfs_ag_ªsv_‰ì
(
∑g
, 
XFS_AG_RESV_AGFL
);

187 
îr2
 = 
	`__xfs_ag_ªsv_‰ì
(
∑g
, 
XFS_AG_RESV_METADATA
);

188 i‡(
îr2
 && !
îr‹
)

189 
îr‹
 = 
îr2
;

190  
îr‹
;

191 
	}
}

194 
	$__xfs_ag_ªsv_öô
(

195 
xfs_≥øg
 *
∑g
,

196 
xfs_ag_ªsv_ty≥
 
ty≥
,

197 
xfs_exéí_t
 
ask
,

198 
xfs_exéí_t
 
u£d
)

200 
xfs_mou¡
 *
mp
 = 
∑g
->
∑g_mou¡
;

201 
xfs_ag_ªsv
 *
ªsv
;

202 
îr‹
;

203 
xfs_exéí_t
 
ª£rved
;

205 i‡(
u£d
 > 
ask
)

206 
ask
 = 
u£d
;

207 
ª£rved
 = 
ask
 - 
u£d
;

209 
îr‹
 = 
	`xfs_mod_fdblocks
(
mp
, -(
öt64_t
)
ª£rved
, 
åue
);

210 i‡(
îr‹
) {

211 
	`åa˚_xfs_ag_ªsv_öô_îr‹
(
∑g
->
∑g_mou¡
,Öag->
∑g_agno
,

212 
îr‹
, 
_RET_IP_
);

213 
	`xfs_w¨n
(
mp
,

215 
∑g
->
∑g_agno
);

216  
îr‹
;

219 
mp
->
m_ag_max_ußbÀ
 -
ask
;

221 
ªsv
 = 
	`xfs_≥øg_ªsv
(
∑g
, 
ty≥
);

222 
ªsv
->
¨_asked
 = 
ask
;

223 
ªsv
->
¨_ª£rved
 =Ñesv->
¨_‹ig_ª£rved
 = 
ª£rved
;

225 
	`åa˚_xfs_ag_ªsv_öô
(
∑g
, 
ty≥
, 
ask
);

227 
	}
}

231 
	$xfs_ag_ªsv_öô
(

232 
xfs_≥øg
 *
∑g
)

234 
xfs_mou¡
 *
mp
 = 
∑g
->
∑g_mou¡
;

235 
xfs_agnumbî_t
 
agno
 = 
∑g
->
∑g_agno
;

236 
xfs_exéí_t
 
ask
;

237 
xfs_exéí_t
 
u£d
;

238 
îr‹
 = 0;

241 i‡(
∑g
->
∑g_mëa_ªsv
.
¨_asked
 == 0) {

242 
ask
 = 
u£d
 = 0;

244 
îr‹
 = 
	`xfs_ªfcou¡bt_ˇlc_ª£rves
(
mp
, 
agno
, &
ask
, &
u£d
);

245 i‡(
îr‹
)

246 
out
;

248 
îr‹
 = 
	`xfs_föobt_ˇlc_ª£rves
(
mp
, 
agno
, &
ask
, &
u£d
);

249 i‡(
îr‹
)

250 
out
;

252 
îr‹
 = 
	`__xfs_ag_ªsv_öô
(
∑g
, 
XFS_AG_RESV_METADATA
,

253 
ask
, 
u£d
);

254 i‡(
îr‹
) {

262 
ask
 = 
u£d
 = 0;

264 
mp
->
m_öŸbt_n‹es
 = 
åue
;

266 
îr‹
 = 
	`xfs_ªfcou¡bt_ˇlc_ª£rves
(
mp
, 
agno
, &
ask
,

267 &
u£d
);

268 i‡(
îr‹
)

269 
out
;

271 
îr‹
 = 
	`__xfs_ag_ªsv_öô
(
∑g
, 
XFS_AG_RESV_METADATA
,

272 
ask
, 
u£d
);

273 i‡(
îr‹
)

274 
out
;

279 i‡(
∑g
->
∑g_agÊ_ªsv
.
¨_asked
 == 0) {

280 
ask
 = 
u£d
 = 0;

282 
îr‹
 = 
	`xfs_rm≠bt_ˇlc_ª£rves
(
mp
, 
agno
, &
ask
, &
u£d
);

283 i‡(
îr‹
)

284 
out
;

286 
îr‹
 = 
	`__xfs_ag_ªsv_öô
(
∑g
, 
XFS_AG_RESV_AGFL
, 
ask
, 
u£d
);

287 i‡(
îr‹
)

288 
out
;

291 #ifde‡
DEBUG


293 
îr‹
 = 
	`xfs_Æloc_∑gf_öô
(
∑g
->
∑g_mou¡
, 
NULL
,Öag->
∑g_agno
, 0);

294 i‡(
îr‹
)

295  
îr‹
;

297 
	`ASSERT
(
	`xfs_≥øg_ªsv
(
∑g
, 
XFS_AG_RESV_METADATA
)->
¨_ª£rved
 +

298 
	`xfs_≥øg_ªsv
(
∑g
, 
XFS_AG_RESV_AGFL
)->
¨_ª£rved
 <=

299 
∑g
->
∑gf_‰ìblks
 +Öag->
∑gf_Êcou¡
);

301 
out
:

302  
îr‹
;

303 
	}
}

307 
	$xfs_ag_ªsv_Æloc_exã¡
(

308 
xfs_≥øg
 *
∑g
,

309 
xfs_ag_ªsv_ty≥
 
ty≥
,

310 
xfs_Æloc_¨g
 *
¨gs
)

312 
xfs_ag_ªsv
 *
ªsv
;

313 
xfs_exéí_t
 
Àn
;

314 
uöt
 
fõld
;

316 
	`åa˚_xfs_ag_ªsv_Æloc_exã¡
(
∑g
, 
ty≥
, 
¨gs
->
Àn
);

318 
ty≥
) {

319 
XFS_AG_RESV_METADATA
:

320 
XFS_AG_RESV_AGFL
:

321 
ªsv
 = 
	`xfs_≥øg_ªsv
(
∑g
, 
ty≥
);

324 
	`ASSERT
(0);

326 
XFS_AG_RESV_NONE
:

327 
fõld
 = 
¨gs
->
wasdñ
 ? 
XFS_TRANS_SB_RES_FDBLOCKS
 :

328 
XFS_TRANS_SB_FDBLOCKS
;

329 
	`xfs_å™s_mod_sb
(
¨gs
->
ç
, 
fõld
, -(
öt64_t
Ôrgs->
Àn
);

333 
Àn
 = 
	`mö_t
(
xfs_exéí_t
, 
¨gs
->Àn, 
ªsv
->
¨_ª£rved
);

334 
ªsv
->
¨_ª£rved
 -
Àn
;

335 i‡(
ty≥
 =
XFS_AG_RESV_AGFL
)

338 
	`xfs_å™s_mod_sb
(
¨gs
->
ç
, 
XFS_TRANS_SB_RES_FDBLOCKS
, -(
öt64_t
)
Àn
);

340 i‡(
¨gs
->
Àn
 >Üen)

341 
	`xfs_å™s_mod_sb
(
¨gs
->
ç
, 
XFS_TRANS_SB_FDBLOCKS
,

342 -((
öt64_t
)
¨gs
->
Àn
 -Üen));

343 
	}
}

347 
	$xfs_ag_ªsv_‰ì_exã¡
(

348 
xfs_≥øg
 *
∑g
,

349 
xfs_ag_ªsv_ty≥
 
ty≥
,

350 
xfs_å™s
 *
ç
,

351 
xfs_exéí_t
 
Àn
)

353 
xfs_exéí_t
 
À·ovî
;

354 
xfs_ag_ªsv
 *
ªsv
;

356 
	`åa˚_xfs_ag_ªsv_‰ì_exã¡
(
∑g
, 
ty≥
, 
Àn
);

358 
ty≥
) {

359 
XFS_AG_RESV_METADATA
:

360 
XFS_AG_RESV_AGFL
:

361 
ªsv
 = 
	`xfs_≥øg_ªsv
(
∑g
, 
ty≥
);

364 
	`ASSERT
(0);

366 
XFS_AG_RESV_NONE
:

367 
	`xfs_å™s_mod_sb
(
ç
, 
XFS_TRANS_SB_FDBLOCKS
, (
öt64_t
)
Àn
);

371 
À·ovî
 = 
	`mö_t
(
xfs_exéí_t
, 
Àn
, 
ªsv
->
¨_asked
 -Ñesv->
¨_ª£rved
);

372 
ªsv
->
¨_ª£rved
 +
À·ovî
;

373 i‡(
ty≥
 =
XFS_AG_RESV_AGFL
)

376 
	`xfs_å™s_mod_sb
(
ç
, 
XFS_TRANS_SB_RES_FDBLOCKS
, 
Àn
);

378 i‡(
Àn
 > 
À·ovî
)

379 
	`xfs_å™s_mod_sb
(
ç
, 
XFS_TRANS_SB_FDBLOCKS
, 
Àn
 - 
À·ovî
);

380 
	}
}

	@libxfs/xfs_ag_resv.h

20 #i‚de‡
__XFS_AG_RESV_H__


21 
	#__XFS_AG_RESV_H__


	)

23 
xfs_ag_ªsv_‰ì
(
xfs_≥øg
 *
∑g
);

24 
xfs_ag_ªsv_öô
(
xfs_≥øg
 *
∑g
);

26 
boﬁ
 
xfs_ag_ªsv_¸ôiˇl
(
xfs_≥øg
 *
∑g
, 
xfs_ag_ªsv_ty≥
 
ty≥
);

27 
xfs_exéí_t
 
xfs_ag_ªsv_√eded
(
xfs_≥øg
 *
∑g
,

28 
xfs_ag_ªsv_ty≥
 
ty≥
);

30 
xfs_ag_ªsv_Æloc_exã¡
(
xfs_≥øg
 *
∑g
, 
xfs_ag_ªsv_ty≥
 
ty≥
,

31 
xfs_Æloc_¨g
 *
¨gs
);

32 
xfs_ag_ªsv_‰ì_exã¡
(
xfs_≥øg
 *
∑g
, 
xfs_ag_ªsv_ty≥
 
ty≥
,

33 
xfs_å™s
 *
ç
, 
xfs_exéí_t
 
Àn
);

	@libxfs/xfs_alloc.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_f‹m©.h
"

21 
	~"xfs_log_f‹m©.h
"

22 
	~"xfs_sh¨ed.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_bô.h
"

25 
	~"xfs_sb.h
"

26 
	~"xfs_mou¡.h
"

27 
	~"xfs_de„r.h
"

28 
	~"xfs_öode.h
"

29 
	~"xfs_båì.h
"

30 
	~"xfs_rm≠.h
"

31 
	~"xfs_Æloc_båì.h
"

32 
	~"xfs_Æloc.h
"

33 
	~"xfs_cksum.h
"

34 
	~"xfs_åa˚.h
"

35 
	~"xfs_å™s.h
"

36 
	~"xfs_ag_ªsv.h
"

38 
w‹kqueue_°ru˘
 *
	gxfs_Æloc_wq
;

40 
	#XFS_ABSDIFF
(
a
,
b
Ë((◊Ë<(b)Ë? ((bË- (a)Ë: (◊Ë- (b)))

	)

42 
	#XFSA_FIXUP_BNO_OK
 1

	)

43 
	#XFSA_FIXUP_CNT_OK
 2

	)

45 
STATIC
 
xfs_Æloc_ag_vexã¡_exa˘
(
xfs_Æloc_¨g_t
 *);

46 
STATIC
 
xfs_Æloc_ag_vexã¡_√¨
(
xfs_Æloc_¨g_t
 *);

47 
STATIC
 
xfs_Æloc_ag_vexã¡_size
(
xfs_Æloc_¨g_t
 *);

48 
STATIC
 
xfs_Æloc_ag_vexã¡_smÆl
(
xfs_Æloc_¨g_t
 *,

49 
xfs_båì_cur_t
 *, 
xfs_agblock_t
 *, 
xfs_exéí_t
 *, *);

52 
	$xfs_ªfc_block
(

53 
xfs_mou¡
 *
mp
)

55 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

56  
	`XFS_RMAP_BLOCK
(
mp
) + 1;

57 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
))

58  
	`XFS_FIBT_BLOCK
(
mp
) + 1;

59  
	`XFS_IBT_BLOCK
(
mp
) + 1;

60 
	}
}

62 
xfs_exéí_t


63 
	$xfs_¥óŒoc_blocks
(

64 
xfs_mou¡
 *
mp
)

66 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

67  
	`xfs_ªfc_block
(
mp
) + 1;

68 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

69  
	`XFS_RMAP_BLOCK
(
mp
) + 1;

70 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
))

71  
	`XFS_FIBT_BLOCK
(
mp
) + 1;

72  
	`XFS_IBT_BLOCK
(
mp
) + 1;

73 
	}
}

91 
	$xfs_Æloc_£t_aside
(

92 
xfs_mou¡
 *
mp
)

94  
mp
->
m_sb
.
sb_agcou¡
 * (
XFS_ALLOC_AGFL_RESERVE
 + 4);

95 
	}
}

112 
	$xfs_Æloc_ag_max_ußbÀ
(

113 
xfs_mou¡
 *
mp
)

115 
blocks
;

117 
blocks
 = 
	`XFS_BB_TO_FSB
(
mp
, 
	`XFS_FSS_TO_BB
(mp, 4));

118 
blocks
 +
XFS_ALLOC_AGFL_RESERVE
;

119 
blocks
 += 3;

120 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
))

121 
blocks
++;

122 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

123 
blocks
++;

124 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

125 
blocks
++;

127  
mp
->
m_sb
.
sb_agblocks
 - 
blocks
;

128 
	}
}

133 
STATIC
 

134 
	$xfs_Æloc_lookup_eq
(

135 
xfs_båì_cur
 *
cur
,

136 
xfs_agblock_t
 
bno
,

137 
xfs_exéí_t
 
Àn
,

138 *
°©
)

140 
cur
->
bc_ªc
.
a
.
¨_°¨tblock
 = 
bno
;

141 
cur
->
bc_ªc
.
a
.
¨_blockcou¡
 = 
Àn
;

142  
	`xfs_båì_lookup
(
cur
, 
XFS_LOOKUP_EQ
, 
°©
);

143 
	}
}

150 
	$xfs_Æloc_lookup_ge
(

151 
xfs_båì_cur
 *
cur
,

152 
xfs_agblock_t
 
bno
,

153 
xfs_exéí_t
 
Àn
,

154 *
°©
)

156 
cur
->
bc_ªc
.
a
.
¨_°¨tblock
 = 
bno
;

157 
cur
->
bc_ªc
.
a
.
¨_blockcou¡
 = 
Àn
;

158  
	`xfs_båì_lookup
(
cur
, 
XFS_LOOKUP_GE
, 
°©
);

159 
	}
}

166 
	$xfs_Æloc_lookup_À
(

167 
xfs_båì_cur
 *
cur
,

168 
xfs_agblock_t
 
bno
,

169 
xfs_exéí_t
 
Àn
,

170 *
°©
)

172 
cur
->
bc_ªc
.
a
.
¨_°¨tblock
 = 
bno
;

173 
cur
->
bc_ªc
.
a
.
¨_blockcou¡
 = 
Àn
;

174  
	`xfs_båì_lookup
(
cur
, 
XFS_LOOKUP_LE
, 
°©
);

175 
	}
}

182 
STATIC
 

183 
	$xfs_Æloc_upd©e
(

184 
xfs_båì_cur
 *
cur
,

185 
xfs_agblock_t
 
bno
,

186 
xfs_exéí_t
 
Àn
)

188 
xfs_båì_ªc
 
ªc
;

190 
ªc
.
Æloc
.
¨_°¨tblock
 = 
	`˝u_to_be32
(
bno
);

191 
ªc
.
Æloc
.
¨_blockcou¡
 = 
	`˝u_to_be32
(
Àn
);

192  
	`xfs_båì_upd©e
(
cur
, &
ªc
);

193 
	}
}

199 
	$xfs_Æloc_gë_ªc
(

200 
xfs_båì_cur
 *
cur
,

201 
xfs_agblock_t
 *
bno
,

202 
xfs_exéí_t
 *
Àn
,

203 *
°©
)

205 
xfs_båì_ªc
 *
ªc
;

206 
îr‹
;

208 
îr‹
 = 
	`xfs_båì_gë_ªc
(
cur
, &
ªc
, 
°©
);

209 i‡(!
îr‹
 && *
°©
 == 1) {

210 *
bno
 = 
	`be32_to_˝u
(
ªc
->
Æloc
.
¨_°¨tblock
);

211 *
Àn
 = 
	`be32_to_˝u
(
ªc
->
Æloc
.
¨_blockcou¡
);

213  
îr‹
;

214 
	}
}

220 
STATIC
 
boﬁ


221 
	$xfs_Æloc_compuã_Æig√d
(

222 
xfs_Æloc_¨g_t
 *
¨gs
,

223 
xfs_agblock_t
 
foundbno
,

224 
xfs_exéí_t
 
foundÀn
,

225 
xfs_agblock_t
 *
ªsbno
,

226 
xfs_exéí_t
 *
ª¶í
,

227 *
busy_gí
)

229 
xfs_agblock_t
 
bno
 = 
foundbno
;

230 
xfs_exéí_t
 
Àn
 = 
foundÀn
;

231 
xfs_exéí_t
 
diff
;

232 
boﬁ
 
busy
;

235 
busy
 = 
	`xfs_exã¡_busy_åim
(
¨gs
, &
bno
, &
Àn
, 
busy_gí
);

241 i‡(
bno
 < 
¨gs
->
mö_agbno
 && bnÿ+ 
Àn
 >árgs->min_agbno) {

242 
diff
 = 
¨gs
->
mö_agbno
 - 
bno
;

243 i‡(
Àn
 > 
diff
) {

244 
bno
 +
diff
;

245 
Àn
 -
diff
;

249 i‡(
¨gs
->
Æignmít
 > 1 && 
Àn
 >¨gs->
möÀn
) {

250 
xfs_agblock_t
 
Æig√d_bno
 = 
	`roundup
(
bno
, 
¨gs
->
Æignmít
);

252 
diff
 = 
Æig√d_bno
 - 
bno
;

254 *
ªsbno
 = 
Æig√d_bno
;

255 *
ª¶í
 = 
diff
 >
Àn
 ? 0 :Üen - diff;

257 *
ªsbno
 = 
bno
;

258 *
ª¶í
 = 
Àn
;

261  
busy
;

262 
	}
}

268 
STATIC
 
xfs_exéí_t


269 
	$xfs_Æloc_compuã_diff
(

270 
xfs_agblock_t
 
w™tbno
,

271 
xfs_exéí_t
 
w™éí
,

272 
xfs_exéí_t
 
Æignmít
,

273 
d©©y≥
,

274 
xfs_agblock_t
 
‰ìbno
,

275 
xfs_exéí_t
 
‰ìÀn
,

276 
xfs_agblock_t
 *
√wbn›
)

278 
xfs_agblock_t
 
‰ìíd
;

279 
xfs_agblock_t
 
√wbno1
;

280 
xfs_agblock_t
 
√wbno2
;

281 
xfs_exéí_t
 
√wÀn1
=0;

282 
xfs_exéí_t
 
√wÀn2
=0;

283 
xfs_agblock_t
 
w™ãnd
;

284 
boﬁ
 
u£rd©a
 = 
	`xfs_Æloc_is_u£rd©a
(
d©©y≥
);

286 
	`ASSERT
(
‰ìÀn
 >
w™éí
);

287 
‰ìíd
 = 
‰ìbno
 + 
‰ìÀn
;

288 
w™ãnd
 = 
w™tbno
 + 
w™éí
;

296 i‡(
‰ìbno
 >
w™tbno
 || (
u£rd©a
 && 
‰ìíd
 < 
w™ãnd
)) {

297 i‡((
√wbno1
 = 
	`roundup
(
‰ìbno
, 
Æignmít
)Ë>
‰ìíd
)

298 
√wbno1
 = 
NULLAGBLOCK
;

299 } i‡(
‰ìíd
 >
w™ãnd
 && 
Æignmít
 > 1) {

300 
√wbno1
 = 
	`roundup
(
w™tbno
, 
Æignmít
);

301 
√wbno2
 = 
√wbno1
 - 
Æignmít
;

302 i‡(
√wbno1
 >
‰ìíd
)

303 
√wbno1
 = 
NULLAGBLOCK
;

305 
√wÀn1
 = 
	`XFS_EXTLEN_MIN
(
w™éí
, 
‰ìíd
 - 
√wbno1
);

306 i‡(
√wbno2
 < 
‰ìbno
)

307 
√wbno2
 = 
NULLAGBLOCK
;

309 
√wÀn2
 = 
	`XFS_EXTLEN_MIN
(
w™éí
, 
‰ìíd
 - 
√wbno2
);

310 i‡(
√wbno1
 !
NULLAGBLOCK
 && 
√wbno2
 != NULLAGBLOCK) {

311 i‡(
√wÀn1
 < 
√wÀn2
 ||

312 (
√wÀn1
 =
√wÀn2
 &&

313 
	`XFS_ABSDIFF
(
√wbno1
, 
w™tbno
) >

314 
	`XFS_ABSDIFF
(
√wbno2
, 
w™tbno
)))

315 
√wbno1
 = 
√wbno2
;

316 } i‡(
√wbno2
 !
NULLAGBLOCK
)

317 
√wbno1
 = 
√wbno2
;

318 } i‡(
‰ìíd
 >
w™ãnd
) {

319 
√wbno1
 = 
w™tbno
;

320 } i‡(
Æignmít
 > 1) {

321 
√wbno1
 = 
	`roundup
(
‰ìíd
 - 
w™éí
, 
Æignmít
);

322 i‡(
√wbno1
 > 
‰ìíd
 - 
w™éí
 &&

323 
√wbno1
 - 
Æignmít
 >
‰ìbno
)

324 
√wbno1
 -
Æignmít
;

325 i‡(
√wbno1
 >
‰ìíd
)

326 
√wbno1
 = 
NULLAGBLOCK
;

328 
√wbno1
 = 
‰ìíd
 - 
w™éí
;

329 *
√wbn›
 = 
√wbno1
;

330  
√wbno1
 =
NULLAGBLOCK
 ? 0 : 
	`XFS_ABSDIFF
“ewbno1, 
w™tbno
);

331 
	}
}

339 
STATIC
 

340 
	$xfs_Æloc_fix_Àn
(

341 
xfs_Æloc_¨g_t
 *
¨gs
)

343 
xfs_exéí_t
 
k
;

344 
xfs_exéí_t
 
æí
;

346 
	`ASSERT
(
¨gs
->
mod
 <árgs->
¥od
);

347 
æí
 = 
¨gs
->
Àn
;

348 
	`ASSERT
(
æí
 >
¨gs
->
möÀn
);

349 
	`ASSERT
(
æí
 <
¨gs
->
maxÀn
);

350 i‡(
¨gs
->
¥od
 <1 || 
æí
 <árgs->
mod
 ||ÑÀ¿=¨gs->
maxÀn
 ||

351 (
¨gs
->
mod
 =0 && 
æí
 <árgs->
¥od
))

353 
k
 = 
æí
 % 
¨gs
->
¥od
;

354 i‡(
k
 =
¨gs
->
mod
)

356 i‡(
k
 > 
¨gs
->
mod
)

357 
æí
 =ÑÀ¿- (
k
 - 
¨gs
->
mod
);

359 
æí
 =ÑÀ¿- 
¨gs
->
¥od
 + (¨gs->
mod
 - 
k
);

361 i‡(()
æí
 < ()
¨gs
->
möÀn
)

363 
	`ASSERT
(
æí
 >
¨gs
->
möÀn
 &&ÑÀ¿<¨gs->
maxÀn
);

364 
	`ASSERT
(
æí
 % 
¨gs
->
¥od
 =¨gs->
mod
);

365 
	`ASSERT
(
¨gs
->
∑g
->
∑gf_‰ìblks
 +árgs->∑g->
∑gf_Êcou¡
 >=

366 
æí
 + 
¨gs
->
möÀ·
);

367 
¨gs
->
Àn
 = 
æí
;

368 
	}
}

377 
STATIC
 

378 
	$xfs_Æloc_fixup_åìs
(

379 
xfs_båì_cur_t
 *
˙t_cur
,

380 
xfs_båì_cur_t
 *
bno_cur
,

381 
xfs_agblock_t
 
fbno
,

382 
xfs_exéí_t
 
Êí
,

383 
xfs_agblock_t
 
rbno
,

384 
xfs_exéí_t
 
æí
,

385 
Êags
)

387 
îr‹
;

388 
i
;

389 
xfs_agblock_t
 
nfbno1
;

390 
xfs_agblock_t
 
nfbno2
;

391 
xfs_exéí_t
 
nÊí1
=0;

392 
xfs_exéí_t
 
nÊí2
=0;

393 
xfs_mou¡
 *
mp
;

395 
mp
 = 
˙t_cur
->
bc_mp
;

400 i‡(
Êags
 & 
XFSA_FIXUP_CNT_OK
) {

401 #ifde‡
DEBUG


402 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
˙t_cur
, &
nfbno1
, &
nÊí1
, &
i
)))

403  
îr‹
;

404 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

405 
i
 =1 && 
nfbno1
 =
fbno
 && 
nÊí1
 =
Êí
);

408 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_eq
(
˙t_cur
, 
fbno
, 
Êí
, &
i
)))

409  
îr‹
;

410 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 1);

415 i‡(
Êags
 & 
XFSA_FIXUP_BNO_OK
) {

416 #ifde‡
DEBUG


417 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
bno_cur
, &
nfbno1
, &
nÊí1
, &
i
)))

418  
îr‹
;

419 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

420 
i
 =1 && 
nfbno1
 =
fbno
 && 
nÊí1
 =
Êí
);

423 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_eq
(
bno_cur
, 
fbno
, 
Êí
, &
i
)))

424  
îr‹
;

425 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 1);

428 #ifde‡
DEBUG


429 i‡(
bno_cur
->
bc_∆evñs
 =1 && 
˙t_cur
->bc_nlevels == 1) {

430 
xfs_båì_block
 *
bnoblock
;

431 
xfs_båì_block
 *
˙tblock
;

433 
bnoblock
 = 
	`XFS_BUF_TO_BLOCK
(
bno_cur
->
bc_bufs
[0]);

434 
˙tblock
 = 
	`XFS_BUF_TO_BLOCK
(
˙t_cur
->
bc_bufs
[0]);

436 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

437 
bnoblock
->
bb_numªcs
 =
˙tblock
->bb_numrecs);

446 i‡(
rbno
 =
fbno
 && 
æí
 =
Êí
)

447 
nfbno1
 = 
nfbno2
 = 
NULLAGBLOCK
;

448 i‡(
rbno
 =
fbno
) {

449 
nfbno1
 = 
rbno
 + 
æí
;

450 
nÊí1
 = 
Êí
 - 
æí
;

451 
nfbno2
 = 
NULLAGBLOCK
;

452 } i‡(
rbno
 + 
æí
 =
fbno
 + 
Êí
) {

453 
nfbno1
 = 
fbno
;

454 
nÊí1
 = 
Êí
 - 
æí
;

455 
nfbno2
 = 
NULLAGBLOCK
;

457 
nfbno1
 = 
fbno
;

458 
nÊí1
 = 
rbno
 - 
fbno
;

459 
nfbno2
 = 
rbno
 + 
æí
;

460 
nÊí2
 = (
fbno
 + 
Êí
Ë- 
nfbno2
;

465 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
˙t_cur
, &
i
)))

466  
îr‹
;

467 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 1);

471 i‡(
nfbno1
 !
NULLAGBLOCK
) {

472 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_eq
(
˙t_cur
, 
nfbno1
, 
nÊí1
, &
i
)))

473  
îr‹
;

474 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 0);

475 i‡((
îr‹
 = 
	`xfs_båì_ö£π
(
˙t_cur
, &
i
)))

476  
îr‹
;

477 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 1);

479 i‡(
nfbno2
 !
NULLAGBLOCK
) {

480 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_eq
(
˙t_cur
, 
nfbno2
, 
nÊí2
, &
i
)))

481  
îr‹
;

482 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 0);

483 i‡((
îr‹
 = 
	`xfs_båì_ö£π
(
˙t_cur
, &
i
)))

484  
îr‹
;

485 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 1);

490 i‡(
nfbno1
 =
NULLAGBLOCK
) {

494 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
bno_cur
, &
i
)))

495  
îr‹
;

496 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 1);

501 i‡((
îr‹
 = 
	`xfs_Æloc_upd©e
(
bno_cur
, 
nfbno1
, 
nÊí1
)))

502  
îr‹
;

504 i‡(
nfbno2
 !
NULLAGBLOCK
) {

508 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_eq
(
bno_cur
, 
nfbno2
, 
nÊí2
, &
i
)))

509  
îr‹
;

510 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 0);

511 i‡((
îr‹
 = 
	`xfs_båì_ö£π
(
bno_cur
, &
i
)))

512  
îr‹
;

513 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 1);

516 
	}
}

518 
boﬁ


519 
	$xfs_agÊ_vîify
(

520 
xfs_buf
 *
bp
)

522 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

523 
xfs_agÊ
 *
agÊ
 = 
	`XFS_BUF_TO_AGFL
(
bp
);

524 
i
;

526 i‡(!
	`uuid_equÆ
(&
agÊ
->
agÊ_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

527  
Ál£
;

528 i‡(
	`be32_to_˝u
(
agÊ
->
agÊ_magi˙um
Ë!
XFS_AGFL_MAGIC
)

529  
Ál£
;

536 i‡(
bp
->
b_∑g
 && 
	`be32_to_˝u
(
agÊ
->
agÊ_£qno
Ë!bp->b_∑g->
∑g_agno
)

537  
Ál£
;

539 
i
 = 0; i < 
	`XFS_AGFL_SIZE
(
mp
); i++) {

540 i‡(
	`be32_to_˝u
(
agÊ
->
agÊ_bno
[
i
]Ë!
NULLAGBLOCK
 &&

541 
	`be32_to_˝u
(
agÊ
->
agÊ_bno
[
i
]Ë>
mp
->
m_sb
.
sb_agblocks
)

542  
Ál£
;

545  
	`xfs_log_check_l¢
(
mp
,

546 
	`be64_to_˝u
(
	`XFS_BUF_TO_AGFL
(
bp
)->
agÊ_l¢
));

547 
	}
}

550 
	$xfs_agÊ_ªad_vîify
(

551 
xfs_buf
 *
bp
)

553 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

561 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

564 i‡(!
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_AGFL_CRC_OFF
))

565 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

566 i‡(!
	`xfs_agÊ_vîify
(
bp
))

567 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

569 i‡(
bp
->
b_îr‹
)

570 
	`xfs_vîifõr_îr‹
(
bp
);

571 
	}
}

574 
	$xfs_agÊ_wrôe_vîify
(

575 
xfs_buf
 *
bp
)

577 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

578 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

581 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

584 i‡(!
	`xfs_agÊ_vîify
(
bp
)) {

585 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

586 
	`xfs_vîifõr_îr‹
(
bp
);

590 i‡(
bù
)

591 
	`XFS_BUF_TO_AGFL
(
bp
)->
agÊ_l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

593 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_AGFL_CRC_OFF
);

594 
	}
}

596 c⁄° 
xfs_buf_›s
 
	gxfs_agÊ_buf_›s
 = {

597 .
«me
 = "xfs_agfl",

598 .
	gvîify_ªad
 = 
xfs_agÊ_ªad_vîify
,

599 .
	gvîify_wrôe
 = 
xfs_agÊ_wrôe_vîify
,

605 
STATIC
 

606 
	$xfs_Æloc_ªad_agÊ
(

607 
xfs_mou¡_t
 *
mp
,

608 
xfs_å™s_t
 *
ç
,

609 
xfs_agnumbî_t
 
agno
,

610 
xfs_buf_t
 **
bµ
)

612 
xfs_buf_t
 *
bp
;

613 
îr‹
;

615 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

616 
îr‹
 = 
	`xfs_å™s_ªad_buf
(

617 
mp
, 
ç
, mp->
m_ddev_èrgp
,

618 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGFL_DADDR
(mp)),

619 
	`XFS_FSS_TO_BB
(
mp
, 1), 0, &
bp
, &
xfs_agÊ_buf_›s
);

620 i‡(
îr‹
)

621  
îr‹
;

622 
	`xfs_buf_£t_ªf
(
bp
, 
XFS_AGFL_REF
);

623 *
bµ
 = 
bp
;

625 
	}
}

627 
STATIC
 

628 
	$xfs_Æloc_upd©e_cou¡îs
(

629 
xfs_å™s
 *
ç
,

630 
xfs_≥øg
 *
∑g
,

631 
xfs_buf
 *
agbp
,

632 
Àn
)

634 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

636 
∑g
->
∑gf_‰ìblks
 +
Àn
;

637 
	`be32_add_˝u
(&
agf
->
agf_‰ìblks
, 
Àn
);

639 
	`xfs_å™s_agblocks_dñè
(
ç
, 
Àn
);

640 i‡(
	`u∆ikñy
(
	`be32_to_˝u
(
agf
->
agf_‰ìblks
) >

641 
	`be32_to_˝u
(
agf
->
agf_Àngth
)))

642  -
EFSCORRUPTED
;

644 
	`xfs_Æloc_log_agf
(
ç
, 
agbp
, 
XFS_AGF_FREEBLKS
);

646 
	}
}

660 
STATIC
 

661 
	$xfs_Æloc_ag_vexã¡
(

662 
xfs_Æloc_¨g_t
 *
¨gs
)

664 
îr‹
=0;

666 
	`ASSERT
(
¨gs
->
möÀn
 > 0);

667 
	`ASSERT
(
¨gs
->
maxÀn
 > 0);

668 
	`ASSERT
(
¨gs
->
möÀn
 <¨gs->
maxÀn
);

669 
	`ASSERT
(
¨gs
->
mod
 <árgs->
¥od
);

670 
	`ASSERT
(
¨gs
->
Æignmít
 > 0);

675 
¨gs
->
was‰omÊ
 = 0;

676 
¨gs
->
ty≥
) {

677 
XFS_ALLOCTYPE_THIS_AG
:

678 
îr‹
 = 
	`xfs_Æloc_ag_vexã¡_size
(
¨gs
);

680 
XFS_ALLOCTYPE_NEAR_BNO
:

681 
îr‹
 = 
	`xfs_Æloc_ag_vexã¡_√¨
(
¨gs
);

683 
XFS_ALLOCTYPE_THIS_BNO
:

684 
îr‹
 = 
	`xfs_Æloc_ag_vexã¡_exa˘
(
¨gs
);

687 
	`ASSERT
(0);

691 i‡(
îr‹
 || 
¨gs
->
agbno
 =
NULLAGBLOCK
)

692  
îr‹
;

694 
	`ASSERT
(
¨gs
->
Àn
 >¨gs->
möÀn
);

695 
	`ASSERT
(
¨gs
->
Àn
 <¨gs->
maxÀn
);

696 
	`ASSERT
(!
¨gs
->
was‰omÊ
 ||árgs->
ªsv
 !
XFS_AG_RESV_AGFL
);

697 
	`ASSERT
(
¨gs
->
agbno
 %árgs->
Æignmít
 == 0);

700 i‡(
¨gs
->
oöfo
.
oi_ow√r
 !
XFS_RMAP_OWN_UNKNOWN
) {

701 
îr‹
 = 
	`xfs_rm≠_Æloc
(
¨gs
->
ç
,árgs->
agbp
,árgs->
agno
,

702 
¨gs
->
agbno
,árgs->
Àn
, &¨gs->
oöfo
);

703 i‡(
îr‹
)

704  
îr‹
;

707 i‡(!
¨gs
->
was‰omÊ
) {

708 
îr‹
 = 
	`xfs_Æloc_upd©e_cou¡îs
(
¨gs
->
ç
,árgs->
∑g
,

709 
¨gs
->
agbp
,

710 -(()(
¨gs
->
Àn
)));

711 i‡(
îr‹
)

712  
îr‹
;

714 
	`ASSERT
(!
	`xfs_exã¡_busy_£¨ch
(
¨gs
->
mp
,árgs->
agno
,

715 
¨gs
->
agbno
,árgs->
Àn
));

718 
	`xfs_ag_ªsv_Æloc_exã¡
(
¨gs
->
∑g
,árgs->
ªsv
,árgs);

720 
	`XFS_STATS_INC
(
¨gs
->
mp
, 
xs_Ælocx
);

721 
	`XFS_STATS_ADD
(
¨gs
->
mp
, 
xs_Ælocb
,árgs->
Àn
);

722  
îr‹
;

723 
	}
}

731 
STATIC
 

732 
	$xfs_Æloc_ag_vexã¡_exa˘
(

733 
xfs_Æloc_¨g_t
 *
¨gs
)

735 
xfs_båì_cur_t
 *
bno_cur
;

736 
xfs_båì_cur_t
 *
˙t_cur
;

737 
îr‹
;

738 
xfs_agblock_t
 
fbno
;

739 
xfs_exéí_t
 
Êí
;

740 
xfs_agblock_t
 
tbno
;

741 
xfs_exéí_t
 
éí
;

742 
xfs_agblock_t
 
ãnd
;

743 
i
;

744 
busy_gí
;

746 
	`ASSERT
(
¨gs
->
Æignmít
 == 1);

751 
bno_cur
 = 
	`xfs_Ælocbt_öô_curs‹
(
¨gs
->
mp
,árgs->
ç
,árgs->
agbp
,

752 
¨gs
->
agno
, 
XFS_BTNUM_BNO
);

759 
îr‹
 = 
	`xfs_Æloc_lookup_À
(
bno_cur
, 
¨gs
->
agbno
,árgs->
möÀn
, &
i
);

760 i‡(
îr‹
)

761 
îr‹0
;

762 i‡(!
i
)

763 
nŸ_found
;

768 
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
bno_cur
, &
fbno
, &
Êí
, &
i
);

769 i‡(
îr‹
)

770 
îr‹0
;

771 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
i
 =1, 
îr‹0
);

772 
	`ASSERT
(
fbno
 <
¨gs
->
agbno
);

777 
tbno
 = 
fbno
;

778 
éí
 = 
Êí
;

779 
	`xfs_exã¡_busy_åim
(
¨gs
, &
tbno
, &
éí
, &
busy_gí
);

785 i‡(
tbno
 > 
¨gs
->
agbno
)

786 
nŸ_found
;

787 i‡(
éí
 < 
¨gs
->
möÀn
)

788 
nŸ_found
;

789 
ãnd
 = 
tbno
 + 
éí
;

790 i‡(
ãnd
 < 
¨gs
->
agbno
 +árgs->
möÀn
)

791 
nŸ_found
;

799 
¨gs
->
Àn
 = 
	`XFS_AGBLOCK_MIN
(
ãnd
,árgs->
agbno
 +árgs->
maxÀn
)

800 - 
¨gs
->
agbno
;

801 
	`xfs_Æloc_fix_Àn
(
¨gs
);

802 
	`ASSERT
(
¨gs
->
agbno
 +árgs->
Àn
 <
ãnd
);

808 
˙t_cur
 = 
	`xfs_Ælocbt_öô_curs‹
(
¨gs
->
mp
,árgs->
ç
,árgs->
agbp
,

809 
¨gs
->
agno
, 
XFS_BTNUM_CNT
);

810 
	`ASSERT
(
¨gs
->
agbno
 +árgs->
Àn
 <=

811 
	`be32_to_˝u
(
	`XFS_BUF_TO_AGF
(
¨gs
->
agbp
)->
agf_Àngth
));

812 
îr‹
 = 
	`xfs_Æloc_fixup_åìs
(
˙t_cur
, 
bno_cur
, 
fbno
, 
Êí
, 
¨gs
->
agbno
,

813 
¨gs
->
Àn
, 
XFSA_FIXUP_BNO_OK
);

814 i‡(
îr‹
) {

815 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_ERROR
);

816 
îr‹0
;

819 
	`xfs_båì_dñ_curs‹
(
bno_cur
, 
XFS_BTREE_NOERROR
);

820 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_NOERROR
);

822 
¨gs
->
was‰omÊ
 = 0;

823 
	`åa˚_xfs_Æloc_exa˘_d⁄e
(
¨gs
);

826 
nŸ_found
:

828 
	`xfs_båì_dñ_curs‹
(
bno_cur
, 
XFS_BTREE_NOERROR
);

829 
¨gs
->
agbno
 = 
NULLAGBLOCK
;

830 
	`åa˚_xfs_Æloc_exa˘_nŸfound
(
¨gs
);

833 
îr‹0
:

834 
	`xfs_båì_dñ_curs‹
(
bno_cur
, 
XFS_BTREE_ERROR
);

835 
	`åa˚_xfs_Æloc_exa˘_îr‹
(
¨gs
);

836  
îr‹
;

837 
	}
}

843 
STATIC
 

844 
	$xfs_Æloc_föd_be°_exã¡
(

845 
xfs_Æloc_¨g
 *
¨gs
,

846 
xfs_båì_cur
 **
gcur
,

847 
xfs_båì_cur
 **
scur
,

848 
xfs_agblock_t
 
gdiff
,

849 
xfs_agblock_t
 *
sbno
,

850 
xfs_exéí_t
 *
¶í
,

851 
xfs_agblock_t
 *
sbnﬂ
,

852 
xfs_exéí_t
 *
¶ía
,

853 
dú
)

855 
xfs_agblock_t
 
√w
;

856 
xfs_agblock_t
 
sdiff
;

857 
îr‹
;

858 
i
;

859 
busy_gí
;

862 i‡(!
gdiff
)

863 
out_u£_good
;

869 
îr‹
 = 
	`xfs_Æloc_gë_ªc
(*
scur
, 
sbno
, 
¶í
, &
i
);

870 i‡(
îr‹
)

871 
îr‹0
;

872 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
i
 =1, 
îr‹0
);

873 
	`xfs_Æloc_compuã_Æig√d
(
¨gs
, *
sbno
, *
¶í
,

874 
sbnﬂ
, 
¶ía
, &
busy_gí
);

879 i‡(!
dú
) {

880 i‡(*
sbnﬂ
 > 
¨gs
->
max_agbno
)

881 
out_u£_good
;

882 i‡(*
sbnﬂ
 >
¨gs
->
agbno
 + 
gdiff
)

883 
out_u£_good
;

885 i‡(*
sbnﬂ
 < 
¨gs
->
mö_agbno
)

886 
out_u£_good
;

887 i‡(*
sbnﬂ
 <
¨gs
->
agbno
 - 
gdiff
)

888 
out_u£_good
;

894 i‡(*
¶ía
 >
¨gs
->
möÀn
) {

895 
¨gs
->
Àn
 = 
	`XFS_EXTLEN_MIN
(*
¶ía
,árgs->
maxÀn
);

896 
	`xfs_Æloc_fix_Àn
(
¨gs
);

898 
sdiff
 = 
	`xfs_Æloc_compuã_diff
(
¨gs
->
agbno
,árgs->
Àn
,

899 
¨gs
->
Æignmít
,

900 
¨gs
->
d©©y≥
, *
sbnﬂ
,

901 *
¶ía
, &
√w
);

906 i‡(
sdiff
 < 
gdiff
)

907 
out_u£_£¨ch
;

908 
out_u£_good
;

911 i‡(!
dú
)

912 
îr‹
 = 
	`xfs_båì_ö¸emít
(*
scur
, 0, &
i
);

914 
îr‹
 = 
	`xfs_båì_de¸emít
(*
scur
, 0, &
i
);

915 i‡(
îr‹
)

916 
îr‹0
;

917 } 
i
);

919 
out_u£_good
:

920 
	`xfs_båì_dñ_curs‹
(*
scur
, 
XFS_BTREE_NOERROR
);

921 *
scur
 = 
NULL
;

924 
out_u£_£¨ch
:

925 
	`xfs_båì_dñ_curs‹
(*
gcur
, 
XFS_BTREE_NOERROR
);

926 *
gcur
 = 
NULL
;

929 
îr‹0
:

931  
îr‹
;

932 
	}
}

940 
STATIC
 

941 
	$xfs_Æloc_ag_vexã¡_√¨
(

942 
xfs_Æloc_¨g_t
 *
¨gs
)

944 
xfs_båì_cur_t
 *
bno_cur_gt
;

945 
xfs_båì_cur_t
 *
bno_cur_…
;

946 
xfs_båì_cur_t
 *
˙t_cur
;

947 
xfs_agblock_t
 
gtbno
;

948 
xfs_agblock_t
 
gtbnﬂ
;

949 
xfs_exéí_t
 
gtdiff
;

950 
xfs_exéí_t
 
géí
;

951 
xfs_exéí_t
 
géía
;

952 
xfs_agblock_t
 
gäew
;

953 
îr‹
;

954 
i
;

955 
j
;

956 
xfs_agblock_t
 
…bno
;

957 
xfs_agblock_t
 
…bnﬂ
;

958 
xfs_exéí_t
 
…diff
;

959 
xfs_exéí_t
 
…Àn
;

960 
xfs_exéí_t
 
…À«
;

961 
xfs_agblock_t
 
…√w
;

962 
xfs_exéí_t
 
æí
;

963 
boﬁ
 
busy
;

964 
busy_gí
;

965 #ifde‡
DEBUG


969 
dofú°
;

971 
dofú°
 = 
	`¥™dom_u32
() & 1;

975 i‡(!
¨gs
->
mö_agbno
 && !¨gs->
max_agbno
)

976 
¨gs
->
max_agbno
 =árgs->
mp
->
m_sb
.
sb_agblocks
 - 1;

977 
	`ASSERT
(
¨gs
->
mö_agbno
 <¨gs->
max_agbno
);

980 i‡(
¨gs
->
agbno
 <árgs->
mö_agbno
)

981 
¨gs
->
agbno
 =árgs->
mö_agbno
;

982 i‡(
¨gs
->
agbno
 >árgs->
max_agbno
)

983 
¨gs
->
agbno
 =árgs->
max_agbno
;

985 
ª°¨t
:

986 
bno_cur_…
 = 
NULL
;

987 
bno_cur_gt
 = 
NULL
;

988 
…Àn
 = 0;

989 
géía
 = 0;

990 
…À«
 = 0;

991 
busy
 = 
Ál£
;

996 
˙t_cur
 = 
	`xfs_Ælocbt_öô_curs‹
(
¨gs
->
mp
,árgs->
ç
,árgs->
agbp
,

997 
¨gs
->
agno
, 
XFS_BTNUM_CNT
);

1002 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_ge
(
˙t_cur
, 0, 
¨gs
->
maxÀn
, &
i
)))

1003 
îr‹0
;

1008 i‡(!
i
) {

1009 i‡((
îr‹
 = 
	`xfs_Æloc_ag_vexã¡_smÆl
(
¨gs
, 
˙t_cur
, &
…bno
,

1010 &
…Àn
, &
i
)))

1011 
îr‹0
;

1012 i‡(
i
 =0 || 
…Àn
 == 0) {

1013 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_NOERROR
);

1014 
	`åa˚_xfs_Æloc_√¨_n€¡ry
(
¨gs
);

1017 
	`ASSERT
(
i
 == 1);

1019 
¨gs
->
was‰omÊ
 = 0;

1031 
	`xfs_båì_i¶a°block
(
˙t_cur
, 0)) {

1032 
xfs_exéí_t
 
bdiff
;

1033 
be°i
=0;

1034 
xfs_exéí_t
 
bÀn
=0;

1035 
xfs_agblock_t
 
b√w
=0;

1037 #ifde‡
DEBUG


1038 i‡(
dofú°
)

1047 i‡(
…Àn
 || 
¨gs
->
Æignmít
 > 1) {

1048 
˙t_cur
->
bc_±rs
[0] = 1;

1050 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
˙t_cur
, &
…bno
,

1051 &
…Àn
, &
i
)))

1052 
îr‹0
;

1053 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
i
 =1, 
îr‹0
);

1054 i‡(
…Àn
 >
¨gs
->
möÀn
)

1056 i‡((
îr‹
 = 
	`xfs_båì_ö¸emít
(
˙t_cur
, 0, &
i
)))

1057 
îr‹0
;

1058 } 
i
);

1059 
	`ASSERT
(
…Àn
 >
¨gs
->
möÀn
);

1060 i‡(!
i
)

1063 
i
 = 
˙t_cur
->
bc_±rs
[0];

1064 
j
 = 1, 
bÀn
 = 0, 
bdiff
 = 0;

1065 !
îr‹
 && 
j
 && (
bÀn
 < 
¨gs
->
maxÀn
 || 
bdiff
 > 0);

1066 
îr‹
 = 
	`xfs_båì_ö¸emít
(
˙t_cur
, 0, &
j
)) {

1071 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
˙t_cur
, &
…bno
, &
…Àn
, &
i
)))

1072 
îr‹0
;

1073 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
i
 =1, 
îr‹0
);

1074 
busy
 = 
	`xfs_Æloc_compuã_Æig√d
(
¨gs
, 
…bno
, 
…Àn
,

1075 &
…bnﬂ
, &
…À«
, &
busy_gí
);

1076 i‡(
…À«
 < 
¨gs
->
möÀn
)

1078 i‡(
…bnﬂ
 < 
¨gs
->
mö_agbno
 ||Ütbnﬂ >árgs->
max_agbno
)

1080 
¨gs
->
Àn
 = 
	`XFS_EXTLEN_MIN
(
…À«
,árgs->
maxÀn
);

1081 
	`xfs_Æloc_fix_Àn
(
¨gs
);

1082 
	`ASSERT
(
¨gs
->
Àn
 >¨gs->
möÀn
);

1083 i‡(
¨gs
->
Àn
 < 
bÀn
)

1085 
…diff
 = 
	`xfs_Æloc_compuã_diff
(
¨gs
->
agbno
,árgs->
Àn
,

1086 
¨gs
->
Æignmít
,árgs->
d©©y≥
, 
…bnﬂ
,

1087 
…À«
, &
…√w
);

1088 i‡(
…√w
 !
NULLAGBLOCK
 &&

1089 (
¨gs
->
Àn
 > 
bÀn
 || 
…diff
 < 
bdiff
)) {

1090 
bdiff
 = 
…diff
;

1091 
b√w
 = 
…√w
;

1092 
bÀn
 = 
¨gs
->
Àn
;

1093 
be°i
 = 
˙t_cur
->
bc_±rs
[0];

1100 i‡(
bÀn
 == 0)

1105 
˙t_cur
->
bc_±rs
[0] = 
be°i
;

1106 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
˙t_cur
, &
…bno
, &
…Àn
, &
i
)))

1107 
îr‹0
;

1108 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
i
 =1, 
îr‹0
);

1109 
	`ASSERT
(
…bno
 + 
…Àn
 <
	`be32_to_˝u
(
	`XFS_BUF_TO_AGF
(
¨gs
->
agbp
)->
agf_Àngth
));

1110 
¨gs
->
Àn
 = 
bÀn
;

1115 
¨gs
->
agbno
 = 
b√w
;

1116 
	`ASSERT
(
b√w
 >
…bno
);

1117 
	`ASSERT
(
b√w
 + 
bÀn
 <
…bno
 + 
…Àn
);

1121 
bno_cur_…
 = 
	`xfs_Ælocbt_öô_curs‹
(
¨gs
->
mp
,árgs->
ç
,

1122 
¨gs
->
agbp
,árgs->
agno
, 
XFS_BTNUM_BNO
);

1126 i‡((
îr‹
 = 
	`xfs_Æloc_fixup_åìs
(
˙t_cur
, 
bno_cur_…
, 
…bno
,

1127 
…Àn
, 
b√w
, 
bÀn
, 
XFSA_FIXUP_CNT_OK
)))

1128 
îr‹0
;

1129 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_NOERROR
);

1130 
	`xfs_båì_dñ_curs‹
(
bno_cur_…
, 
XFS_BTREE_NOERROR
);

1132 
	`åa˚_xfs_Æloc_√¨_fú°
(
¨gs
);

1150 
bno_cur_…
 = 
	`xfs_Ælocbt_öô_curs‹
(
¨gs
->
mp
,árgs->
ç
,árgs->
agbp
,

1151 
¨gs
->
agno
, 
XFS_BTNUM_BNO
);

1155 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_À
(
bno_cur_…
, 
¨gs
->
agbno
,árgs->
maxÀn
, &
i
)))

1156 
îr‹0
;

1157 i‡(!
i
) {

1162 
bno_cur_gt
 = 
bno_cur_…
;

1163 
bno_cur_…
 = 
NULL
;

1168 i‡((
îr‹
 = 
	`xfs_båì_dup_curs‹
(
bno_cur_…
, &
bno_cur_gt
)))

1169 
îr‹0
;

1174 i‡((
îr‹
 = 
	`xfs_båì_ö¸emít
(
bno_cur_gt
, 0, &
i
)))

1175 
îr‹0
;

1176 i‡(!
i
) {

1180 
	`xfs_båì_dñ_curs‹
(
bno_cur_gt
, 
XFS_BTREE_NOERROR
);

1181 
bno_cur_gt
 = 
NULL
;

1189 i‡(
bno_cur_…
) {

1190 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
bno_cur_…
, &
…bno
, &
…Àn
, &
i
)))

1191 
îr‹0
;

1192 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
i
 =1, 
îr‹0
);

1193 
busy
 |
	`xfs_Æloc_compuã_Æig√d
(
¨gs
, 
…bno
, 
…Àn
,

1194 &
…bnﬂ
, &
…À«
, &
busy_gí
);

1195 i‡(
…À«
 >
¨gs
->
möÀn
 && 
…bnﬂ
 >¨gs->
mö_agbno
)

1197 i‡((
îr‹
 = 
	`xfs_båì_de¸emít
(
bno_cur_…
, 0, &
i
)))

1198 
îr‹0
;

1199 i‡(!
i
 || 
…bnﬂ
 < 
¨gs
->
mö_agbno
) {

1200 
	`xfs_båì_dñ_curs‹
(
bno_cur_…
,

1201 
XFS_BTREE_NOERROR
);

1202 
bno_cur_…
 = 
NULL
;

1205 i‡(
bno_cur_gt
) {

1206 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
bno_cur_gt
, &
gtbno
, &
géí
, &
i
)))

1207 
îr‹0
;

1208 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
i
 =1, 
îr‹0
);

1209 
busy
 |
	`xfs_Æloc_compuã_Æig√d
(
¨gs
, 
gtbno
, 
géí
,

1210 &
gtbnﬂ
, &
géía
, &
busy_gí
);

1211 i‡(
géía
 >
¨gs
->
möÀn
 && 
gtbnﬂ
 <¨gs->
max_agbno
)

1213 i‡((
îr‹
 = 
	`xfs_båì_ö¸emít
(
bno_cur_gt
, 0, &
i
)))

1214 
îr‹0
;

1215 i‡(!
i
 || 
gtbnﬂ
 > 
¨gs
->
max_agbno
) {

1216 
	`xfs_båì_dñ_curs‹
(
bno_cur_gt
,

1217 
XFS_BTREE_NOERROR
);

1218 
bno_cur_gt
 = 
NULL
;

1221 } 
bno_cur_…
 || 
bno_cur_gt
);

1226 i‡(
bno_cur_…
 && 
bno_cur_gt
) {

1227 i‡(
…À«
 >
¨gs
->
möÀn
) {

1231 
¨gs
->
Àn
 = 
	`XFS_EXTLEN_MIN
(
…À«
,árgs->
maxÀn
);

1232 
	`xfs_Æloc_fix_Àn
(
¨gs
);

1233 
…diff
 = 
	`xfs_Æloc_compuã_diff
(
¨gs
->
agbno
,árgs->
Àn
,

1234 
¨gs
->
Æignmít
,árgs->
d©©y≥
, 
…bnﬂ
,

1235 
…À«
, &
…√w
);

1237 
îr‹
 = 
	`xfs_Æloc_föd_be°_exã¡
(
¨gs
,

1238 &
bno_cur_…
, &
bno_cur_gt
,

1239 
…diff
, &
gtbno
, &
géí
,

1240 &
gtbnﬂ
, &
géía
,

1243 
	`ASSERT
(
géía
 >
¨gs
->
möÀn
);

1248 
¨gs
->
Àn
 = 
	`XFS_EXTLEN_MIN
(
géía
,árgs->
maxÀn
);

1249 
	`xfs_Æloc_fix_Àn
(
¨gs
);

1250 
gtdiff
 = 
	`xfs_Æloc_compuã_diff
(
¨gs
->
agbno
,árgs->
Àn
,

1251 
¨gs
->
Æignmít
,árgs->
d©©y≥
, 
gtbnﬂ
,

1252 
géía
, &
gäew
);

1254 
îr‹
 = 
	`xfs_Æloc_föd_be°_exã¡
(
¨gs
,

1255 &
bno_cur_gt
, &
bno_cur_…
,

1256 
gtdiff
, &
…bno
, &
…Àn
,

1257 &
…bnﬂ
, &
…À«
,

1261 i‡(
îr‹
)

1262 
îr‹0
;

1268 i‡(
bno_cur_…
 =
NULL
 && 
bno_cur_gt
 == NULL) {

1269 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_NOERROR
);

1271 i‡(
busy
) {

1272 
	`åa˚_xfs_Æloc_√¨_busy
(
¨gs
);

1273 
	`xfs_exã¡_busy_Êush
(
¨gs
->
mp
,árgs->
∑g
, 
busy_gí
);

1274 
ª°¨t
;

1276 
	`åa˚_xfs_Æloc_size_√ôhî
(
¨gs
);

1277 
¨gs
->
agbno
 = 
NULLAGBLOCK
;

1287 i‡(
bno_cur_gt
) {

1288 
bno_cur_…
 = 
bno_cur_gt
;

1289 
bno_cur_gt
 = 
NULL
;

1290 
…bno
 = 
gtbno
;

1291 
…bnﬂ
 = 
gtbnﬂ
;

1292 
…Àn
 = 
géí
;

1293 
…À«
 = 
géía
;

1294 
j
 = 1;

1296 
j
 = 0;

1301 
¨gs
->
Àn
 = 
	`XFS_EXTLEN_MIN
(
…À«
,árgs->
maxÀn
);

1302 
	`xfs_Æloc_fix_Àn
(
¨gs
);

1303 
æí
 = 
¨gs
->
Àn
;

1304 ()
	`xfs_Æloc_compuã_diff
(
¨gs
->
agbno
, 
æí
,árgs->
Æignmít
,

1305 
¨gs
->
d©©y≥
, 
…bnﬂ
, 
…À«
, &
…√w
);

1306 
	`ASSERT
(
…√w
 >
…bno
);

1307 
	`ASSERT
(
…√w
 + 
æí
 <
…bnﬂ
 + 
…À«
);

1308 
	`ASSERT
(
…√w
 + 
æí
 <
	`be32_to_˝u
(
	`XFS_BUF_TO_AGF
(
¨gs
->
agbp
)->
agf_Àngth
));

1309 
	`ASSERT
(
…√w
 >
¨gs
->
mö_agbno
 &&Üäew <¨gs->
max_agbno
);

1310 
¨gs
->
agbno
 = 
…√w
;

1312 i‡((
îr‹
 = 
	`xfs_Æloc_fixup_åìs
(
˙t_cur
, 
bno_cur_…
, 
…bno
, 
…Àn
,

1313 
…√w
, 
æí
, 
XFSA_FIXUP_BNO_OK
)))

1314 
îr‹0
;

1316 i‡(
j
)

1317 
	`åa˚_xfs_Æloc_√¨_gª©î
(
¨gs
);

1319 
	`åa˚_xfs_Æloc_√¨_Às£r
(
¨gs
);

1321 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_NOERROR
);

1322 
	`xfs_båì_dñ_curs‹
(
bno_cur_…
, 
XFS_BTREE_NOERROR
);

1325 
îr‹0
:

1326 
	`åa˚_xfs_Æloc_√¨_îr‹
(
¨gs
);

1327 i‡(
˙t_cur
 !
NULL
)

1328 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_ERROR
);

1329 i‡(
bno_cur_…
 !
NULL
)

1330 
	`xfs_båì_dñ_curs‹
(
bno_cur_…
, 
XFS_BTREE_ERROR
);

1331 i‡(
bno_cur_gt
 !
NULL
)

1332 
	`xfs_båì_dñ_curs‹
(
bno_cur_gt
, 
XFS_BTREE_ERROR
);

1333  
îr‹
;

1334 
	}
}

1342 
STATIC
 

1343 
	$xfs_Æloc_ag_vexã¡_size
(

1344 
xfs_Æloc_¨g_t
 *
¨gs
)

1346 
xfs_båì_cur_t
 *
bno_cur
;

1347 
xfs_båì_cur_t
 *
˙t_cur
;

1348 
îr‹
;

1349 
xfs_agblock_t
 
fbno
;

1350 
xfs_exéí_t
 
Êí
;

1351 
i
;

1352 
xfs_agblock_t
 
rbno
;

1353 
xfs_exéí_t
 
æí
;

1354 
boﬁ
 
busy
;

1355 
busy_gí
;

1357 
ª°¨t
:

1361 
˙t_cur
 = 
	`xfs_Ælocbt_öô_curs‹
(
¨gs
->
mp
,árgs->
ç
,árgs->
agbp
,

1362 
¨gs
->
agno
, 
XFS_BTNUM_CNT
);

1363 
bno_cur
 = 
NULL
;

1364 
busy
 = 
Ál£
;

1369 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_ge
(
˙t_cur
, 0,

1370 
¨gs
->
maxÀn
 +árgs->
Æignmít
 - 1, &
i
)))

1371 
îr‹0
;

1380 i‡(!
i
) {

1381 
îr‹
 = 
	`xfs_Æloc_ag_vexã¡_smÆl
(
¨gs
, 
˙t_cur
,

1382 &
fbno
, &
Êí
, &
i
);

1383 i‡(
îr‹
)

1384 
îr‹0
;

1385 i‡(
i
 =0 || 
Êí
 == 0) {

1386 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_NOERROR
);

1387 
	`åa˚_xfs_Æloc_size_n€¡ry
(
¨gs
);

1390 
	`ASSERT
(
i
 == 1);

1391 
busy
 = 
	`xfs_Æloc_compuã_Æig√d
(
¨gs
, 
fbno
, 
Êí
, &
rbno
,

1392 &
æí
, &
busy_gí
);

1398 
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
˙t_cur
, &
fbno
, &
Êí
, &
i
);

1399 i‡(
îr‹
)

1400 
îr‹0
;

1401 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
i
 =1, 
îr‹0
);

1403 
busy
 = 
	`xfs_Æloc_compuã_Æig√d
(
¨gs
, 
fbno
, 
Êí
,

1404 &
rbno
, &
æí
, &
busy_gí
);

1406 i‡(
æí
 >
¨gs
->
maxÀn
)

1409 
îr‹
 = 
	`xfs_båì_ö¸emít
(
˙t_cur
, 0, &
i
);

1410 i‡(
îr‹
)

1411 
îr‹0
;

1412 i‡(
i
 == 0) {

1418 
	`xfs_båì_dñ_curs‹
(
˙t_cur
,

1419 
XFS_BTREE_NOERROR
);

1420 
	`åa˚_xfs_Æloc_size_busy
(
¨gs
);

1421 
	`xfs_exã¡_busy_Êush
(
¨gs
->
mp
,

1422 
¨gs
->
∑g
, 
busy_gí
);

1423 
ª°¨t
;

1434 
æí
 = 
	`XFS_EXTLEN_MIN
(
¨gs
->
maxÀn
,Ñlen);

1435 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
æí
 == 0 ||

1436 (
æí
 <
Êí
 && 
rbno
 +ÑÀ¿<
fbno
 + fÀn), 
îr‹0
);

1437 i‡(
æí
 < 
¨gs
->
maxÀn
) {

1438 
xfs_agblock_t
 
be°fbno
;

1439 
xfs_exéí_t
 
be°Êí
;

1440 
xfs_agblock_t
 
be°rbno
;

1441 
xfs_exéí_t
 
be°æí
;

1443 
be°æí
 = 
æí
;

1444 
be°rbno
 = 
rbno
;

1445 
be°Êí
 = 
Êí
;

1446 
be°fbno
 = 
fbno
;

1448 i‡((
îr‹
 = 
	`xfs_båì_de¸emít
(
˙t_cur
, 0, &
i
)))

1449 
îr‹0
;

1450 i‡(
i
 == 0)

1452 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
˙t_cur
, &
fbno
, &
Êí
,

1453 &
i
)))

1454 
îr‹0
;

1455 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
i
 =1, 
îr‹0
);

1456 i‡(
Êí
 < 
be°æí
)

1458 
busy
 = 
	`xfs_Æloc_compuã_Æig√d
(
¨gs
, 
fbno
, 
Êí
,

1459 &
rbno
, &
æí
, &
busy_gí
);

1460 
æí
 = 
	`XFS_EXTLEN_MIN
(
¨gs
->
maxÀn
,Ñlen);

1461 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
æí
 == 0 ||

1462 (
æí
 <
Êí
 && 
rbno
 +ÑÀ¿<
fbno
 + flen),

1463 
îr‹0
);

1464 i‡(
æí
 > 
be°æí
) {

1465 
be°æí
 = 
æí
;

1466 
be°rbno
 = 
rbno
;

1467 
be°Êí
 = 
Êí
;

1468 
be°fbno
 = 
fbno
;

1469 i‡(
æí
 =
¨gs
->
maxÀn
)

1473 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_eq
(
˙t_cur
, 
be°fbno
, 
be°Êí
,

1474 &
i
)))

1475 
îr‹0
;

1476 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
i
 =1, 
îr‹0
);

1477 
æí
 = 
be°æí
;

1478 
rbno
 = 
be°rbno
;

1479 
Êí
 = 
be°Êí
;

1480 
fbno
 = 
be°fbno
;

1482 
¨gs
->
was‰omÊ
 = 0;

1486 
¨gs
->
Àn
 = 
æí
;

1487 i‡(
æí
 < 
¨gs
->
möÀn
) {

1488 i‡(
busy
) {

1489 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_NOERROR
);

1490 
	`åa˚_xfs_Æloc_size_busy
(
¨gs
);

1491 
	`xfs_exã¡_busy_Êush
(
¨gs
->
mp
,árgs->
∑g
, 
busy_gí
);

1492 
ª°¨t
;

1494 
out_nomöÀ·
;

1496 
	`xfs_Æloc_fix_Àn
(
¨gs
);

1498 
æí
 = 
¨gs
->
Àn
;

1499 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
æí
 <
Êí
, 
îr‹0
);

1503 
bno_cur
 = 
	`xfs_Ælocbt_öô_curs‹
(
¨gs
->
mp
,árgs->
ç
,árgs->
agbp
,

1504 
¨gs
->
agno
, 
XFS_BTNUM_BNO
);

1505 i‡((
îr‹
 = 
	`xfs_Æloc_fixup_åìs
(
˙t_cur
, 
bno_cur
, 
fbno
, 
Êí
,

1506 
rbno
, 
æí
, 
XFSA_FIXUP_CNT_OK
)))

1507 
îr‹0
;

1508 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_NOERROR
);

1509 
	`xfs_båì_dñ_curs‹
(
bno_cur
, 
XFS_BTREE_NOERROR
);

1510 
˙t_cur
 = 
bno_cur
 = 
NULL
;

1511 
¨gs
->
Àn
 = 
æí
;

1512 
¨gs
->
agbno
 = 
rbno
;

1513 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
,

1514 
¨gs
->
agbno
 +árgs->
Àn
 <=

1515 
	`be32_to_˝u
(
	`XFS_BUF_TO_AGF
(
¨gs
->
agbp
)->
agf_Àngth
),

1516 
îr‹0
);

1517 
	`åa˚_xfs_Æloc_size_d⁄e
(
¨gs
);

1520 
îr‹0
:

1521 
	`åa˚_xfs_Æloc_size_îr‹
(
¨gs
);

1522 i‡(
˙t_cur
)

1523 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_ERROR
);

1524 i‡(
bno_cur
)

1525 
	`xfs_båì_dñ_curs‹
(
bno_cur
, 
XFS_BTREE_ERROR
);

1526  
îr‹
;

1528 
out_nomöÀ·
:

1529 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_NOERROR
);

1530 
	`åa˚_xfs_Æloc_size_nomöÀ·
(
¨gs
);

1531 
¨gs
->
agbno
 = 
NULLAGBLOCK
;

1533 
	}
}

1540 
STATIC
 

1541 
	$xfs_Æloc_ag_vexã¡_smÆl
(

1542 
xfs_Æloc_¨g_t
 *
¨gs
,

1543 
xfs_båì_cur_t
 *
ccur
,

1544 
xfs_agblock_t
 *
fbn›
,

1545 
xfs_exéí_t
 *
Êíp
,

1546 *
°©
)

1548 
xfs_ow√r_öfo
 
oöfo
;

1549 
xfs_≥øg
 *
∑g
;

1550 
îr‹
;

1551 
xfs_agblock_t
 
fbno
;

1552 
xfs_exéí_t
 
Êí
;

1553 
i
;

1555 i‡((
îr‹
 = 
	`xfs_båì_de¸emít
(
ccur
, 0, &
i
)))

1556 
îr‹0
;

1557 i‡(
i
) {

1558 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
ccur
, &
fbno
, &
Êí
, &
i
)))

1559 
îr‹0
;

1560 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
, 
i
 =1, 
îr‹0
);

1567 i‡(
¨gs
->
möÀn
 =1 &&árgs->
Æignmít
 == 1 &&

1568 
¨gs
->
ªsv
 !
XFS_AG_RESV_AGFL
 &&

1569 (
	`be32_to_˝u
(
	`XFS_BUF_TO_AGF
(
¨gs
->
agbp
)->
agf_Êcou¡
)

1570 > 
¨gs
->
möÀ·
)) {

1571 
îr‹
 = 
	`xfs_Æloc_gë_‰ìli°
(
¨gs
->
ç
,árgs->
agbp
, &
fbno
, 0);

1572 i‡(
îr‹
)

1573 
îr‹0
;

1574 i‡(
fbno
 !
NULLAGBLOCK
) {

1575 
	`xfs_exã¡_busy_ªu£
(
¨gs
->
mp
,árgs->
agno
, 
fbno
, 1,

1576 
	`xfs_Æloc_Ælow_busy_ªu£
(
¨gs
->
d©©y≥
));

1578 i‡(
	`xfs_Æloc_is_u£rd©a
(
¨gs
->
d©©y≥
)) {

1579 
xfs_buf_t
 *
bp
;

1581 
bp
 = 
	`xfs_båì_gë_bufs
(
¨gs
->
mp
,árgs->
ç
,

1582 
¨gs
->
agno
, 
fbno
, 0);

1583 
	`xfs_å™s_bövÆ
(
¨gs
->
ç
, 
bp
);

1585 
¨gs
->
Àn
 = 1;

1586 
¨gs
->
agbno
 = 
fbno
;

1587 
	`XFS_WANT_CORRUPTED_GOTO
(
¨gs
->
mp
,

1588 
¨gs
->
agbno
 +árgs->
Àn
 <=

1589 
	`be32_to_˝u
(
	`XFS_BUF_TO_AGF
(
¨gs
->
agbp
)->
agf_Àngth
),

1590 
îr‹0
);

1591 
¨gs
->
was‰omÊ
 = 1;

1592 
	`åa˚_xfs_Æloc_smÆl_‰ìli°
(
¨gs
);

1600 
	`xfs_rm≠_ag_ow√r
(&
oöfo
, 
XFS_RMAP_OWN_AG
);

1601 
îr‹
 = 
	`xfs_rm≠_‰ì
(
¨gs
->
ç
,árgs->
agbp
,árgs->
agno
,

1602 
fbno
, 1, &
oöfo
);

1603 i‡(
îr‹
)

1604 
îr‹0
;

1605 
∑g
 = 
	`xfs_≥øg_gë
(
¨gs
->
mp
,árgs->
agno
);

1606 
	`xfs_ag_ªsv_‰ì_exã¡
(
∑g
, 
XFS_AG_RESV_AGFL
,

1607 
¨gs
->
ç
, 1);

1608 
	`xfs_≥øg_put
(
∑g
);

1610 *
°©
 = 0;

1617 
Êí
 = 0;

1623 
fbno
 = 
NULLAGBLOCK
;

1624 
Êí
 = 0;

1629 i‡(
Êí
 < 
¨gs
->
möÀn
) {

1630 
¨gs
->
agbno
 = 
NULLAGBLOCK
;

1631 
	`åa˚_xfs_Æloc_smÆl_nŸíough
(
¨gs
);

1632 
Êí
 = 0;

1634 *
fbn›
 = 
fbno
;

1635 *
Êíp
 = 
Êí
;

1636 *
°©
 = 1;

1637 
	`åa˚_xfs_Æloc_smÆl_d⁄e
(
¨gs
);

1640 
îr‹0
:

1641 
	`åa˚_xfs_Æloc_smÆl_îr‹
(
¨gs
);

1642  
îr‹
;

1643 
	}
}

1648 
STATIC
 

1649 
	$xfs_‰ì_ag_exã¡
(

1650 
xfs_å™s_t
 *
ç
,

1651 
xfs_buf_t
 *
agbp
,

1652 
xfs_agnumbî_t
 
agno
,

1653 
xfs_agblock_t
 
bno
,

1654 
xfs_exéí_t
 
Àn
,

1655 
xfs_ow√r_öfo
 *
oöfo
,

1656 
xfs_ag_ªsv_ty≥
 
ty≥
)

1658 
xfs_båì_cur_t
 *
bno_cur
;

1659 
xfs_båì_cur_t
 *
˙t_cur
;

1660 
îr‹
;

1661 
xfs_agblock_t
 
gtbno
;

1662 
xfs_exéí_t
 
géí
;

1663 
havñe·
;

1664 
havîight
;

1665 
i
;

1666 
xfs_agblock_t
 
…bno
;

1667 
xfs_exéí_t
 
…Àn
;

1668 
xfs_mou¡_t
 *
mp
;

1669 
xfs_agblock_t
 
nbno
;

1670 
xfs_exéí_t
 
∆í
;

1671 
xfs_≥øg_t
 *
∑g
;

1673 
bno_cur
 = 
˙t_cur
 = 
NULL
;

1674 
mp
 = 
ç
->
t_mou¡p
;

1676 i‡(
oöfo
->
oi_ow√r
 !
XFS_RMAP_OWN_UNKNOWN
) {

1677 
îr‹
 = 
	`xfs_rm≠_‰ì
(
ç
, 
agbp
, 
agno
, 
bno
, 
Àn
, 
oöfo
);

1678 i‡(
îr‹
)

1679 
îr‹0
;

1685 
bno_cur
 = 
	`xfs_Ælocbt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
, 
XFS_BTNUM_BNO
);

1690 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_À
(
bno_cur
, 
bno
, 
Àn
, &
havñe·
)))

1691 
îr‹0
;

1692 i‡(
havñe·
) {

1696 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
bno_cur
, &
…bno
, &
…Àn
, &
i
)))

1697 
îr‹0
;

1698 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1702 i‡(
…bno
 + 
…Àn
 < 
bno
)

1703 
havñe·
 = 0;

1710 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

1711 
…bno
 + 
…Àn
 <
bno
, 
îr‹0
);

1718 i‡((
îr‹
 = 
	`xfs_båì_ö¸emít
(
bno_cur
, 0, &
havîight
)))

1719 
îr‹0
;

1720 i‡(
havîight
) {

1724 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
bno_cur
, &
gtbno
, &
géí
, &
i
)))

1725 
îr‹0
;

1726 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1730 i‡(
bno
 + 
Àn
 < 
gtbno
)

1731 
havîight
 = 0;

1738 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
gtbno
 >
bno
 + 
Àn
, 
îr‹0
);

1744 
˙t_cur
 = 
	`xfs_Ælocbt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
, 
XFS_BTNUM_CNT
);

1749 i‡(
havñe·
 && 
havîight
) {

1753 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_eq
(
˙t_cur
, 
…bno
, 
…Àn
, &
i
)))

1754 
îr‹0
;

1755 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1756 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
˙t_cur
, &
i
)))

1757 
îr‹0
;

1758 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1762 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_eq
(
˙t_cur
, 
gtbno
, 
géí
, &
i
)))

1763 
îr‹0
;

1764 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1765 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
˙t_cur
, &
i
)))

1766 
îr‹0
;

1767 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1771 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
bno_cur
, &
i
)))

1772 
îr‹0
;

1773 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1777 i‡((
îr‹
 = 
	`xfs_båì_de¸emít
(
bno_cur
, 0, &
i
)))

1778 
îr‹0
;

1779 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1780 #ifde‡
DEBUG


1786 
xfs_agblock_t
 
xxbno
;

1787 
xfs_exéí_t
 
xxÀn
;

1789 i‡((
îr‹
 = 
	`xfs_Æloc_gë_ªc
(
bno_cur
, &
xxbno
, &
xxÀn
,

1790 &
i
)))

1791 
îr‹0
;

1792 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

1793 
i
 =1 && 
xxbno
 =
…bno
 && 
xxÀn
 =
…Àn
,

1794 
îr‹0
);

1800 
nbno
 = 
…bno
;

1801 
∆í
 = 
Àn
 + 
…Àn
 + 
géí
;

1802 i‡((
îr‹
 = 
	`xfs_Æloc_upd©e
(
bno_cur
, 
nbno
, 
∆í
)))

1803 
îr‹0
;

1809 i‡(
havñe·
) {

1813 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_eq
(
˙t_cur
, 
…bno
, 
…Àn
, &
i
)))

1814 
îr‹0
;

1815 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1816 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
˙t_cur
, &
i
)))

1817 
îr‹0
;

1818 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1823 i‡((
îr‹
 = 
	`xfs_båì_de¸emít
(
bno_cur
, 0, &
i
)))

1824 
îr‹0
;

1825 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1826 
nbno
 = 
…bno
;

1827 
∆í
 = 
Àn
 + 
…Àn
;

1828 i‡((
îr‹
 = 
	`xfs_Æloc_upd©e
(
bno_cur
, 
nbno
, 
∆í
)))

1829 
îr‹0
;

1835 i‡(
havîight
) {

1839 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_eq
(
˙t_cur
, 
gtbno
, 
géí
, &
i
)))

1840 
îr‹0
;

1841 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1842 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
˙t_cur
, &
i
)))

1843 
îr‹0
;

1844 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1849 
nbno
 = 
bno
;

1850 
∆í
 = 
Àn
 + 
géí
;

1851 i‡((
îr‹
 = 
	`xfs_Æloc_upd©e
(
bno_cur
, 
nbno
, 
∆í
)))

1852 
îr‹0
;

1859 
nbno
 = 
bno
;

1860 
∆í
 = 
Àn
;

1861 i‡((
îr‹
 = 
	`xfs_båì_ö£π
(
bno_cur
, &
i
)))

1862 
îr‹0
;

1863 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1865 
	`xfs_båì_dñ_curs‹
(
bno_cur
, 
XFS_BTREE_NOERROR
);

1866 
bno_cur
 = 
NULL
;

1870 i‡((
îr‹
 = 
	`xfs_Æloc_lookup_eq
(
˙t_cur
, 
nbno
, 
∆í
, &
i
)))

1871 
îr‹0
;

1872 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =0, 
îr‹0
);

1873 i‡((
îr‹
 = 
	`xfs_båì_ö£π
(
˙t_cur
, &
i
)))

1874 
îr‹0
;

1875 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1876 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_NOERROR
);

1877 
˙t_cur
 = 
NULL
;

1882 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
agno
);

1883 
îr‹
 = 
	`xfs_Æloc_upd©e_cou¡îs
(
ç
, 
∑g
, 
agbp
, 
Àn
);

1884 
	`xfs_ag_ªsv_‰ì_exã¡
(
∑g
, 
ty≥
, 
ç
, 
Àn
);

1885 
	`xfs_≥øg_put
(
∑g
);

1886 i‡(
îr‹
)

1887 
îr‹0
;

1889 
	`XFS_STATS_INC
(
mp
, 
xs_‰ìx
);

1890 
	`XFS_STATS_ADD
(
mp
, 
xs_‰ìb
, 
Àn
);

1892 
	`åa˚_xfs_‰ì_exã¡
(
mp
, 
agno
, 
bno
, 
Àn
, 
ty≥
 =
XFS_AG_RESV_AGFL
,

1893 
havñe·
, 
havîight
);

1897 
îr‹0
:

1898 
	`åa˚_xfs_‰ì_exã¡
(
mp
, 
agno
, 
bno
, 
Àn
, 
ty≥
 =
XFS_AG_RESV_AGFL
,

1900 i‡(
bno_cur
)

1901 
	`xfs_båì_dñ_curs‹
(
bno_cur
, 
XFS_BTREE_ERROR
);

1902 i‡(
˙t_cur
)

1903 
	`xfs_båì_dñ_curs‹
(
˙t_cur
, 
XFS_BTREE_ERROR
);

1904  
îr‹
;

1905 
	}
}

1916 
	$xfs_Æloc_compuã_maxÀvñs
(

1917 
xfs_mou¡_t
 *
mp
)

1919 
mp
->
m_ag_maxÀvñs
 = 
	`xfs_båì_compuã_maxÀvñs
(mp, mp->
m_Æloc_mƒ
,

1920 (
mp
->
m_sb
.
sb_agblocks
 + 1) / 2);

1921 
	}
}

1929 
xfs_exéí_t


1930 
	$xfs_Æloc_l⁄ge°_‰ì_exã¡
(

1931 
xfs_mou¡
 *
mp
,

1932 
xfs_≥øg
 *
∑g
,

1933 
xfs_exéí_t
 
√ed
,

1934 
xfs_exéí_t
 
ª£rved
)

1936 
xfs_exéí_t
 
dñè
 = 0;

1942 i‡(
√ed
 > 
∑g
->
∑gf_Êcou¡
)

1943 
dñè
 = 
√ed
 - 
∑g
->
∑gf_Êcou¡
;

1950 i‡(
∑g
->
∑gf_‰ìblks
 -Öag->
∑gf_l⁄ge°
 < 
ª£rved
)

1951 
dñè
 +
ª£rved
 - (
∑g
->
∑gf_‰ìblks
 -Öag->
∑gf_l⁄ge°
);

1957 i‡(
∑g
->
∑gf_l⁄ge°
 > 
dñè
)

1958  
∑g
->
∑gf_l⁄ge°
 - 
dñè
;

1961  
∑g
->
∑gf_Êcou¡
 > 0 ||Öag->
∑gf_l⁄ge°
 > 0;

1962 
	}
}

1965 
	$xfs_Æloc_mö_‰ìli°
(

1966 
xfs_mou¡
 *
mp
,

1967 
xfs_≥øg
 *
∑g
)

1969 
mö_‰ì
;

1972 
mö_‰ì
 = 
	`mö_t
(, 
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_BNOi
] + 1,

1973 
mp
->
m_ag_maxÀvñs
);

1975 
mö_‰ì
 +
	`mö_t
(, 
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_CNTi
] + 1,

1976 
mp
->
m_ag_maxÀvñs
);

1978 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

1979 
mö_‰ì
 +
	`mö_t
(,

1980 
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_RMAPi
] + 1,

1981 
mp
->
m_rm≠_maxÀvñs
);

1983  
mö_‰ì
;

1984 
	}
}

1992 
boﬁ


1993 
	$xfs_Æloc_•a˚_avaûabÀ
(

1994 
xfs_Æloc_¨g
 *
¨gs
,

1995 
xfs_exéí_t
 
mö_‰ì
,

1996 
Êags
)

1998 
xfs_≥øg
 *
∑g
 = 
¨gs
->pag;

1999 
xfs_exéí_t
 
Æloc_Àn
, 
l⁄ge°
;

2000 
xfs_exéí_t
 
ª£rv©i⁄
;

2001 
avaûabÀ
;

2003 i‡(
Êags
 & 
XFS_ALLOC_FLAG_FREEING
)

2004  
åue
;

2006 
ª£rv©i⁄
 = 
	`xfs_ag_ªsv_√eded
(
∑g
, 
¨gs
->
ªsv
);

2009 
Æloc_Àn
 = 
¨gs
->
möÀn
 + (¨gs->
Æignmít
 - 1Ë+árgs->
möÆign¶›
;

2010 
l⁄ge°
 = 
	`xfs_Æloc_l⁄ge°_‰ì_exã¡
(
¨gs
->
mp
, 
∑g
, 
mö_‰ì
,

2011 
ª£rv©i⁄
);

2012 i‡(
l⁄ge°
 < 
Æloc_Àn
)

2013  
Ál£
;

2016 
avaûabÀ
 = ()(
∑g
->
∑gf_‰ìblks
 +Öag->
∑gf_Êcou¡
 -

2017 
ª£rv©i⁄
 - 
mö_‰ì
 - 
¨gs
->
möÀ·
);

2018 i‡(
avaûabÀ
 < ()
	`max
(
¨gs
->
tŸÆ
, 
Æloc_Àn
))

2019  
Ál£
;

2025 i‡(
avaûabÀ
 < ()
¨gs
->
maxÀn
 && !(
Êags
 & 
XFS_ALLOC_FLAG_CHECK
)) {

2026 
¨gs
->
maxÀn
 = 
avaûabÀ
;

2027 
	`ASSERT
(
¨gs
->
maxÀn
 > 0);

2028 
	`ASSERT
(
¨gs
->
maxÀn
 >¨gs->
möÀn
);

2031  
åue
;

2032 
	}
}

2039 
	$xfs_Æloc_fix_‰ìli°
(

2040 
xfs_Æloc_¨g
 *
¨gs
,

2041 
Êags
)

2043 
xfs_mou¡
 *
mp
 = 
¨gs
->mp;

2044 
xfs_≥øg
 *
∑g
 = 
¨gs
->pag;

2045 
xfs_å™s
 *
ç
 = 
¨gs
->tp;

2046 
xfs_buf
 *
agbp
 = 
NULL
;

2047 
xfs_buf
 *
agÊbp
 = 
NULL
;

2048 
xfs_Æloc_¨g
 
èrgs
;

2049 
xfs_agblock_t
 
bno
;

2050 
xfs_exéí_t
 
√ed
;

2051 
îr‹
 = 0;

2053 i‡(!
∑g
->
∑gf_öô
) {

2054 
îr‹
 = 
	`xfs_Æloc_ªad_agf
(
mp
, 
ç
, 
¨gs
->
agno
, 
Êags
, &
agbp
);

2055 i‡(
îr‹
)

2056 
out_no_agbp
;

2057 i‡(!
∑g
->
∑gf_öô
) {

2058 
	`ASSERT
(
Êags
 & 
XFS_ALLOC_FLAG_TRYLOCK
);

2059 
	`ASSERT
(!(
Êags
 & 
XFS_ALLOC_FLAG_FREEING
));

2060 
out_agbp_ªl£
;

2069 i‡(
∑g
->
∑gf_mëad©a
 && 
	`xfs_Æloc_is_u£rd©a
(
¨gs
->
d©©y≥
) &&

2070 (
Êags
 & 
XFS_ALLOC_FLAG_TRYLOCK
)) {

2071 
	`ASSERT
(!(
Êags
 & 
XFS_ALLOC_FLAG_FREEING
));

2072 
out_agbp_ªl£
;

2075 
√ed
 = 
	`xfs_Æloc_mö_‰ìli°
(
mp
, 
∑g
);

2076 i‡(!
	`xfs_Æloc_•a˚_avaûabÀ
(
¨gs
, 
√ed
, 
Êags
 |

2077 
XFS_ALLOC_FLAG_CHECK
))

2078 
out_agbp_ªl£
;

2084 i‡(!
agbp
) {

2085 
îr‹
 = 
	`xfs_Æloc_ªad_agf
(
mp
, 
ç
, 
¨gs
->
agno
, 
Êags
, &
agbp
);

2086 i‡(
îr‹
)

2087 
out_no_agbp
;

2088 i‡(!
agbp
) {

2089 
	`ASSERT
(
Êags
 & 
XFS_ALLOC_FLAG_TRYLOCK
);

2090 
	`ASSERT
(!(
Êags
 & 
XFS_ALLOC_FLAG_FREEING
));

2091 
out_no_agbp
;

2096 
√ed
 = 
	`xfs_Æloc_mö_‰ìli°
(
mp
, 
∑g
);

2097 i‡(!
	`xfs_Æloc_•a˚_avaûabÀ
(
¨gs
, 
√ed
, 
Êags
))

2098 
out_agbp_ªl£
;

2124 
	`mem£t
(&
èrgs
, 0, (targs));

2125 i‡(
Êags
 & 
XFS_ALLOC_FLAG_NORMAP
)

2126 
	`xfs_rm≠_skù_ow√r_upd©e
(&
èrgs
.
oöfo
);

2128 
	`xfs_rm≠_ag_ow√r
(&
èrgs
.
oöfo
, 
XFS_RMAP_OWN_AG
);

2129 !(
Êags
 & 
XFS_ALLOC_FLAG_NOSHRINK
Ë&& 
∑g
->
∑gf_Êcou¡
 > 
√ed
) {

2130 
xfs_buf
 *
bp
;

2132 
îr‹
 = 
	`xfs_Æloc_gë_‰ìli°
(
ç
, 
agbp
, &
bno
, 0);

2133 i‡(
îr‹
)

2134 
out_agbp_ªl£
;

2135 
îr‹
 = 
	`xfs_‰ì_ag_exã¡
(
ç
, 
agbp
, 
¨gs
->
agno
, 
bno
, 1,

2136 &
èrgs
.
oöfo
, 
XFS_AG_RESV_AGFL
);

2137 i‡(
îr‹
)

2138 
out_agbp_ªl£
;

2139 
bp
 = 
	`xfs_båì_gë_bufs
(
mp
, 
ç
, 
¨gs
->
agno
, 
bno
, 0);

2140 
	`xfs_å™s_bövÆ
(
ç
, 
bp
);

2143 
èrgs
.
ç
 =Åp;

2144 
èrgs
.
mp
 = mp;

2145 
èrgs
.
agbp
 =ágbp;

2146 
èrgs
.
agno
 = 
¨gs
->agno;

2147 
èrgs
.
Æignmít
 =Å¨gs.
möÀn
 =Å¨gs.
¥od
 = 1;

2148 
èrgs
.
ty≥
 = 
XFS_ALLOCTYPE_THIS_AG
;

2149 
èrgs
.
∑g
 =Öag;

2150 
îr‹
 = 
	`xfs_Æloc_ªad_agÊ
(
mp
, 
ç
, 
èrgs
.
agno
, &
agÊbp
);

2151 i‡(
îr‹
)

2152 
out_agbp_ªl£
;

2155 
∑g
->
∑gf_Êcou¡
 < 
√ed
) {

2156 
èrgs
.
agbno
 = 0;

2157 
èrgs
.
maxÀn
 = 
√ed
 - 
∑g
->
∑gf_Êcou¡
;

2158 
èrgs
.
ªsv
 = 
XFS_AG_RESV_AGFL
;

2161 
îr‹
 = 
	`xfs_Æloc_ag_vexã¡
(&
èrgs
);

2162 i‡(
îr‹
)

2163 
out_agÊbp_ªl£
;

2170 i‡(
èrgs
.
agbno
 =
NULLAGBLOCK
) {

2171 i‡(
Êags
 & 
XFS_ALLOC_FLAG_FREEING
)

2173 
out_agÊbp_ªl£
;

2178 
bno
 = 
èrgs
.
agbno
; bnÿ<Å¨gs.agbnÿ+Å¨gs.
Àn
; bno++) {

2179 
îr‹
 = 
	`xfs_Æloc_put_‰ìli°
(
ç
, 
agbp
,

2180 
agÊbp
, 
bno
, 0);

2181 i‡(
îr‹
)

2182 
out_agÊbp_ªl£
;

2185 
	`xfs_å™s_bªl£
(
ç
, 
agÊbp
);

2186 
¨gs
->
agbp
 =ágbp;

2189 
out_agÊbp_ªl£
:

2190 
	`xfs_å™s_bªl£
(
ç
, 
agÊbp
);

2191 
out_agbp_ªl£
:

2192 i‡(
agbp
)

2193 
	`xfs_å™s_bªl£
(
ç
, 
agbp
);

2194 
out_no_agbp
:

2195 
¨gs
->
agbp
 = 
NULL
;

2196  
îr‹
;

2197 
	}
}

2204 
	$xfs_Æloc_gë_‰ìli°
(

2205 
xfs_å™s_t
 *
ç
,

2206 
xfs_buf_t
 *
agbp
,

2207 
xfs_agblock_t
 *
bn›
,

2208 
båìblk
)

2210 
xfs_agf_t
 *
agf
;

2211 
xfs_buf_t
 *
agÊbp
;

2212 
xfs_agblock_t
 
bno
;

2213 
__be32
 *
agÊ_bno
;

2214 
îr‹
;

2215 
logÊags
;

2216 
xfs_mou¡_t
 *
mp
 = 
ç
->
t_mou¡p
;

2217 
xfs_≥øg_t
 *
∑g
;

2222 
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

2223 i‡(!
agf
->
agf_Êcou¡
) {

2224 *
bn›
 = 
NULLAGBLOCK
;

2230 
îr‹
 = 
	`xfs_Æloc_ªad_agÊ
(
mp
, 
ç
, 
	`be32_to_˝u
(
agf
->
agf_£qno
),

2231 &
agÊbp
);

2232 i‡(
îr‹
)

2233  
îr‹
;

2239 
agÊ_bno
 = 
	`XFS_BUF_TO_AGFL_BNO
(
mp
, 
agÊbp
);

2240 
bno
 = 
	`be32_to_˝u
(
agÊ_bno
[be32_to_˝u(
agf
->
agf_Êfú°
)]);

2241 
	`be32_add_˝u
(&
agf
->
agf_Êfú°
, 1);

2242 
	`xfs_å™s_bªl£
(
ç
, 
agÊbp
);

2243 i‡(
	`be32_to_˝u
(
agf
->
agf_Êfú°
Ë=
	`XFS_AGFL_SIZE
(
mp
))

2244 
agf
->
agf_Êfú°
 = 0;

2246 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
	`be32_to_˝u
(
agf
->
agf_£qno
));

2247 
	`be32_add_˝u
(&
agf
->
agf_Êcou¡
, -1);

2248 
	`xfs_å™s_agÊi°_dñè
(
ç
, -1);

2249 
∑g
->
∑gf_Êcou¡
--;

2250 
	`xfs_≥øg_put
(
∑g
);

2252 
logÊags
 = 
XFS_AGF_FLFIRST
 | 
XFS_AGF_FLCOUNT
;

2253 i‡(
båìblk
) {

2254 
	`be32_add_˝u
(&
agf
->
agf_båìblks
, 1);

2255 
∑g
->
∑gf_båìblks
++;

2256 
logÊags
 |
XFS_AGF_BTREEBLKS
;

2259 
	`xfs_Æloc_log_agf
(
ç
, 
agbp
, 
logÊags
);

2260 *
bn›
 = 
bno
;

2263 
	}
}

2269 
	$xfs_Æloc_log_agf
(

2270 
xfs_å™s_t
 *
ç
,

2271 
xfs_buf_t
 *
bp
,

2272 
fõlds
)

2274 
fú°
;

2275 
œ°
;

2276 c⁄° 
off£ts
[] = {

2277 
	`off£tof
(
xfs_agf_t
, 
agf_magi˙um
),

2278 
	`off£tof
(
xfs_agf_t
, 
agf_vîsi⁄num
),

2279 
	`off£tof
(
xfs_agf_t
, 
agf_£qno
),

2280 
	`off£tof
(
xfs_agf_t
, 
agf_Àngth
),

2281 
	`off£tof
(
xfs_agf_t
, 
agf_roŸs
[0]),

2282 
	`off£tof
(
xfs_agf_t
, 
agf_Àvñs
[0]),

2283 
	`off£tof
(
xfs_agf_t
, 
agf_Êfú°
),

2284 
	`off£tof
(
xfs_agf_t
, 
agf_Êœ°
),

2285 
	`off£tof
(
xfs_agf_t
, 
agf_Êcou¡
),

2286 
	`off£tof
(
xfs_agf_t
, 
agf_‰ìblks
),

2287 
	`off£tof
(
xfs_agf_t
, 
agf_l⁄ge°
),

2288 
	`off£tof
(
xfs_agf_t
, 
agf_båìblks
),

2289 
	`off£tof
(
xfs_agf_t
, 
agf_uuid
),

2290 
	`off£tof
(
xfs_agf_t
, 
agf_rm≠_blocks
),

2291 
	`off£tof
(
xfs_agf_t
, 
agf_ªfcou¡_blocks
),

2292 
	`off£tof
(
xfs_agf_t
, 
agf_ªfcou¡_roŸ
),

2293 
	`off£tof
(
xfs_agf_t
, 
agf_ªfcou¡_Àvñ
),

2295 
	`off£tof
(
xfs_agf_t
, 
agf_•¨e64
),

2296 (
xfs_agf_t
)

2299 
	`åa˚_xfs_agf
(
ç
->
t_mou¡p
, 
	`XFS_BUF_TO_AGF
(
bp
), 
fõlds
, 
_RET_IP_
);

2301 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_AGF_BUF
);

2303 
	`xfs_båì_off£ts
(
fõlds
, 
off£ts
, 
XFS_AGF_NUM_BITS
, &
fú°
, &
œ°
);

2304 
	`xfs_å™s_log_buf
(
ç
, 
bp
, (
uöt
)
fú°
, (uöt)
œ°
);

2305 
	}
}

2311 
	$xfs_Æloc_∑gf_öô
(

2312 
xfs_mou¡_t
 *
mp
,

2313 
xfs_å™s_t
 *
ç
,

2314 
xfs_agnumbî_t
 
agno
,

2315 
Êags
)

2317 
xfs_buf_t
 *
bp
;

2318 
îr‹
;

2320 i‡((
îr‹
 = 
	`xfs_Æloc_ªad_agf
(
mp
, 
ç
, 
agno
, 
Êags
, &
bp
)))

2321  
îr‹
;

2322 i‡(
bp
)

2323 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

2325 
	}
}

2331 
	$xfs_Æloc_put_‰ìli°
(

2332 
xfs_å™s_t
 *
ç
,

2333 
xfs_buf_t
 *
agbp
,

2334 
xfs_buf_t
 *
agÊbp
,

2335 
xfs_agblock_t
 
bno
,

2336 
båìblk
)

2338 
xfs_agf_t
 *
agf
;

2339 
__be32
 *
blockp
;

2340 
îr‹
;

2341 
logÊags
;

2342 
xfs_mou¡_t
 *
mp
;

2343 
xfs_≥øg_t
 *
∑g
;

2344 
__be32
 *
agÊ_bno
;

2345 
°¨toff
;

2347 
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

2348 
mp
 = 
ç
->
t_mou¡p
;

2350 i‡(!
agÊbp
 && (
îr‹
 = 
	`xfs_Æloc_ªad_agÊ
(
mp
, 
ç
,

2351 
	`be32_to_˝u
(
agf
->
agf_£qno
), &
agÊbp
)))

2352  
îr‹
;

2353 
	`be32_add_˝u
(&
agf
->
agf_Êœ°
, 1);

2354 i‡(
	`be32_to_˝u
(
agf
->
agf_Êœ°
Ë=
	`XFS_AGFL_SIZE
(
mp
))

2355 
agf
->
agf_Êœ°
 = 0;

2357 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
	`be32_to_˝u
(
agf
->
agf_£qno
));

2358 
	`be32_add_˝u
(&
agf
->
agf_Êcou¡
, 1);

2359 
	`xfs_å™s_agÊi°_dñè
(
ç
, 1);

2360 
∑g
->
∑gf_Êcou¡
++;

2362 
logÊags
 = 
XFS_AGF_FLLAST
 | 
XFS_AGF_FLCOUNT
;

2363 i‡(
båìblk
) {

2364 
	`be32_add_˝u
(&
agf
->
agf_båìblks
, -1);

2365 
∑g
->
∑gf_båìblks
--;

2366 
logÊags
 |
XFS_AGF_BTREEBLKS
;

2368 
	`xfs_≥øg_put
(
∑g
);

2370 
	`xfs_Æloc_log_agf
(
ç
, 
agbp
, 
logÊags
);

2372 
	`ASSERT
(
	`be32_to_˝u
(
agf
->
agf_Êcou¡
Ë<
	`XFS_AGFL_SIZE
(
mp
));

2374 
agÊ_bno
 = 
	`XFS_BUF_TO_AGFL_BNO
(
mp
, 
agÊbp
);

2375 
blockp
 = &
agÊ_bno
[
	`be32_to_˝u
(
agf
->
agf_Êœ°
)];

2376 *
blockp
 = 
	`˝u_to_be32
(
bno
);

2377 
°¨toff
 = (*)
blockp
 - (*)
agÊbp
->
b_addr
;

2379 
	`xfs_Æloc_log_agf
(
ç
, 
agbp
, 
logÊags
);

2381 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
agÊbp
, 
XFS_BLFT_AGFL_BUF
);

2382 
	`xfs_å™s_log_buf
(
ç
, 
agÊbp
, 
°¨toff
,

2383 
°¨toff
 + (
xfs_agblock_t
) - 1);

2385 
	}
}

2387 
boﬁ


2388 
	$xfs_agf_vîify
(

2389 
xfs_mou¡
 *
mp
,

2390 
xfs_buf
 *
bp
)

2392 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
bp
);

2394 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

2395 i‡(!
	`uuid_equÆ
(&
agf
->
agf_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

2396  
Ál£
;

2397 i‡(!
	`xfs_log_check_l¢
(
mp
,

2398 
	`be64_to_˝u
(
	`XFS_BUF_TO_AGF
(
bp
)->
agf_l¢
)))

2399  
Ál£
;

2402 i‡(!(
agf
->
agf_magi˙um
 =
	`˝u_to_be32
(
XFS_AGF_MAGIC
) &&

2403 
	`XFS_AGF_GOOD_VERSION
(
	`be32_to_˝u
(
agf
->
agf_vîsi⁄num
)) &&

2404 
	`be32_to_˝u
(
agf
->
agf_‰ìblks
Ë<be32_to_˝u◊gf->
agf_Àngth
) &&

2405 
	`be32_to_˝u
(
agf
->
agf_Êfú°
Ë< 
	`XFS_AGFL_SIZE
(
mp
) &&

2406 
	`be32_to_˝u
(
agf
->
agf_Êœ°
Ë< 
	`XFS_AGFL_SIZE
(
mp
) &&

2407 
	`be32_to_˝u
(
agf
->
agf_Êcou¡
Ë<
	`XFS_AGFL_SIZE
(
mp
)))

2408  
Ál£
;

2410 i‡(
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNO
]) < 1 ||

2411 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNT
]) < 1 ||

2412 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNO
]Ë> 
XFS_BTREE_MAXLEVELS
 ||

2413 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNT
]Ë> 
XFS_BTREE_MAXLEVELS
)

2414  
Ál£
;

2416 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
) &&

2417 (
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_RMAP
]) < 1 ||

2418 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_RMAP
]Ë> 
XFS_BTREE_MAXLEVELS
))

2419  
Ál£
;

2427 i‡(
bp
->
b_∑g
 && 
	`be32_to_˝u
(
agf
->
agf_£qno
Ë!bp->b_∑g->
∑g_agno
)

2428  
Ál£
;

2430 i‡(
	`xfs_sb_vîsi⁄_ha¶azysbcou¡
(&
mp
->
m_sb
) &&

2431 
	`be32_to_˝u
(
agf
->
agf_båìblks
Ë> be32_to_˝u◊gf->
agf_Àngth
))

2432  
Ál£
;

2434 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
) &&

2435 (
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_Àvñ
) < 1 ||

2436 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_Àvñ
Ë> 
XFS_BTREE_MAXLEVELS
))

2437  
Ál£
;

2439  
åue
;;

2441 
	}
}

2444 
	$xfs_agf_ªad_vîify
(

2445 
xfs_buf
 *
bp
)

2447 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

2449 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

2450 !
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_AGF_CRC_OFF
))

2451 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

2452 i‡(
	`XFS_TEST_ERROR
(!
	`xfs_agf_vîify
(
mp
, 
bp
), mp,

2453 
XFS_ERRTAG_ALLOC_READ_AGF
,

2454 
XFS_RANDOM_ALLOC_READ_AGF
))

2455 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

2457 i‡(
bp
->
b_îr‹
)

2458 
	`xfs_vîifõr_îr‹
(
bp
);

2459 
	}
}

2462 
	$xfs_agf_wrôe_vîify
(

2463 
xfs_buf
 *
bp
)

2465 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

2466 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

2468 i‡(!
	`xfs_agf_vîify
(
mp
, 
bp
)) {

2469 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

2470 
	`xfs_vîifõr_îr‹
(
bp
);

2474 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

2477 i‡(
bù
)

2478 
	`XFS_BUF_TO_AGF
(
bp
)->
agf_l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

2480 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_AGF_CRC_OFF
);

2481 
	}
}

2483 c⁄° 
xfs_buf_›s
 
	gxfs_agf_buf_›s
 = {

2484 .
«me
 = "xfs_agf",

2485 .
	gvîify_ªad
 = 
xfs_agf_ªad_vîify
,

2486 .
	gvîify_wrôe
 = 
xfs_agf_wrôe_vîify
,

2493 
	$xfs_ªad_agf
(

2494 
xfs_mou¡
 *
mp
,

2495 
xfs_å™s
 *
ç
,

2496 
xfs_agnumbî_t
 
agno
,

2497 
Êags
,

2498 
xfs_buf
 **
bµ
)

2500 
îr‹
;

2502 
	`åa˚_xfs_ªad_agf
(
mp
, 
agno
);

2504 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

2505 
îr‹
 = 
	`xfs_å™s_ªad_buf
(

2506 
mp
, 
ç
, mp->
m_ddev_èrgp
,

2507 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

2508 
	`XFS_FSS_TO_BB
(
mp
, 1), 
Êags
, 
bµ
, &
xfs_agf_buf_›s
);

2509 i‡(
îr‹
)

2510  
îr‹
;

2511 i‡(!*
bµ
)

2514 
	`ASSERT
(!(*
bµ
)->
b_îr‹
);

2515 
	`xfs_buf_£t_ªf
(*
bµ
, 
XFS_AGF_REF
);

2517 
	}
}

2523 
	$xfs_Æloc_ªad_agf
(

2524 
xfs_mou¡
 *
mp
,

2525 
xfs_å™s
 *
ç
,

2526 
xfs_agnumbî_t
 
agno
,

2527 
Êags
,

2528 
xfs_buf
 **
bµ
)

2530 
xfs_agf
 *
agf
;

2531 
xfs_≥øg
 *
∑g
;

2532 
îr‹
;

2534 
	`åa˚_xfs_Æloc_ªad_agf
(
mp
, 
agno
);

2536 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

2537 
îr‹
 = 
	`xfs_ªad_agf
(
mp
, 
ç
, 
agno
,

2538 (
Êags
 & 
XFS_ALLOC_FLAG_TRYLOCK
Ë? 
XBF_TRYLOCK
 : 0,

2539 
bµ
);

2540 i‡(
îr‹
)

2541  
îr‹
;

2542 i‡(!*
bµ
)

2544 
	`ASSERT
(!(*
bµ
)->
b_îr‹
);

2546 
agf
 = 
	`XFS_BUF_TO_AGF
(*
bµ
);

2547 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
agno
);

2548 i‡(!
∑g
->
∑gf_öô
) {

2549 
∑g
->
∑gf_‰ìblks
 = 
	`be32_to_˝u
(
agf
->
agf_‰ìblks
);

2550 
∑g
->
∑gf_båìblks
 = 
	`be32_to_˝u
(
agf
->
agf_båìblks
);

2551 
∑g
->
∑gf_Êcou¡
 = 
	`be32_to_˝u
(
agf
->
agf_Êcou¡
);

2552 
∑g
->
∑gf_l⁄ge°
 = 
	`be32_to_˝u
(
agf
->
agf_l⁄ge°
);

2553 
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_BNOi
] =

2554 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNOi
]);

2555 
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_CNTi
] =

2556 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNTi
]);

2557 
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_RMAPi
] =

2558 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_RMAPi
]);

2559 
∑g
->
∑gf_ªfcou¡_Àvñ
 = 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_Àvñ
);

2560 
	`•ö_lock_öô
(&
∑g
->
∑gb_lock
);

2561 
∑g
->
∑gb_cou¡
 = 0;

2564 
∑g
->
∑gf_öô
 = 1;

2566 #ifde‡
DEBUG


2567 i‡(!
	`XFS_FORCED_SHUTDOWN
(
mp
)) {

2568 
	`ASSERT
(
∑g
->
∑gf_‰ìblks
 =
	`be32_to_˝u
(
agf
->
agf_‰ìblks
));

2569 
	`ASSERT
(
∑g
->
∑gf_båìblks
 =
	`be32_to_˝u
(
agf
->
agf_båìblks
));

2570 
	`ASSERT
(
∑g
->
∑gf_Êcou¡
 =
	`be32_to_˝u
(
agf
->
agf_Êcou¡
));

2571 
	`ASSERT
(
∑g
->
∑gf_l⁄ge°
 =
	`be32_to_˝u
(
agf
->
agf_l⁄ge°
));

2572 
	`ASSERT
(
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_BNOi
] ==

2573 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNOi
]));

2574 
	`ASSERT
(
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_CNTi
] ==

2575 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNTi
]));

2578 
	`xfs_≥øg_put
(
∑g
);

2580 
	}
}

2588 
	$xfs_Æloc_vexã¡
(

2589 
xfs_Æloc_¨g_t
 *
¨gs
)

2591 
xfs_agblock_t
 
agsize
;

2592 
îr‹
;

2593 
Êags
;

2594 
xfs_mou¡_t
 *
mp
;

2595 
xfs_agnumbî_t
 
ßgno
;

2596 
xfs_Ælo˘y≥_t
 
ty≥
;

2597 
bump_rŸ‹
 = 0;

2598 
xfs_agnumbî_t
 
rŸ‹°ï
 = 
xfs_rŸ‹°ï
;

2600 
mp
 = 
¨gs
->mp;

2601 
ty≥
 = 
¨gs
->
Ÿy≥
 =árgs->type;

2602 
¨gs
->
agbno
 = 
NULLAGBLOCK
;

2608 
agsize
 = 
mp
->
m_sb
.
sb_agblocks
;

2609 i‡(
¨gs
->
maxÀn
 > 
agsize
)

2610 
¨gs
->
maxÀn
 = 
agsize
;

2611 i‡(
¨gs
->
Æignmít
 == 0)

2612 
¨gs
->
Æignmít
 = 1;

2613 
	`ASSERT
(
	`XFS_FSB_TO_AGNO
(
mp
, 
¨gs
->
fsbno
Ë< mp->
m_sb
.
sb_agcou¡
);

2614 
	`ASSERT
(
	`XFS_FSB_TO_AGBNO
(
mp
, 
¨gs
->
fsbno
Ë< 
agsize
);

2615 
	`ASSERT
(
¨gs
->
möÀn
 <¨gs->
maxÀn
);

2616 
	`ASSERT
(
¨gs
->
möÀn
 <
agsize
);

2617 
	`ASSERT
(
¨gs
->
mod
 <árgs->
¥od
);

2618 i‡(
	`XFS_FSB_TO_AGNO
(
mp
, 
¨gs
->
fsbno
Ë>mp->
m_sb
.
sb_agcou¡
 ||

2619 
	`XFS_FSB_TO_AGBNO
(
mp
, 
¨gs
->
fsbno
Ë>
agsize
 ||

2620 
¨gs
->
möÀn
 >árgs->
maxÀn
 ||árgs->möÀ¿> 
agsize
 ||

2621 
¨gs
->
mod
 >¨gs->
¥od
) {

2622 
¨gs
->
fsbno
 = 
NULLFSBLOCK
;

2623 
	`åa˚_xfs_Æloc_vexã¡_bad¨gs
(
¨gs
);

2627 
ty≥
) {

2628 
XFS_ALLOCTYPE_THIS_AG
:

2629 
XFS_ALLOCTYPE_NEAR_BNO
:

2630 
XFS_ALLOCTYPE_THIS_BNO
:

2634 
¨gs
->
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
,árgs->
fsbno
);

2635 
¨gs
->
∑g
 = 
	`xfs_≥øg_gë
(
mp
,árgs->
agno
);

2636 
îr‹
 = 
	`xfs_Æloc_fix_‰ìli°
(
¨gs
, 0);

2637 i‡(
îr‹
) {

2638 
	`åa˚_xfs_Æloc_vexã¡_nofix
(
¨gs
);

2639 
îr‹0
;

2641 i‡(!
¨gs
->
agbp
) {

2642 
	`åa˚_xfs_Æloc_vexã¡_nﬂgbp
(
¨gs
);

2645 
¨gs
->
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
,árgs->
fsbno
);

2646 i‡((
îr‹
 = 
	`xfs_Æloc_ag_vexã¡
(
¨gs
)))

2647 
îr‹0
;

2649 
XFS_ALLOCTYPE_START_BNO
:

2654 i‡((
¨gs
->
d©©y≥
 & 
XFS_ALLOC_INITIAL_USER_DATA
) &&

2655 (
mp
->
m_Êags
 & 
XFS_MOUNT_32BITINODES
)) {

2656 
¨gs
->
fsbno
 = 
	`XFS_AGB_TO_FSB
(
mp
,

2657 ((
mp
->
m_ag‰Ÿ‹
 / 
rŸ‹°ï
) %

2658 
mp
->
m_sb
.
sb_agcou¡
), 0);

2659 
bump_rŸ‹
 = 1;

2661 
¨gs
->
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
,árgs->
fsbno
);

2662 
¨gs
->
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

2664 
XFS_ALLOCTYPE_FIRST_AG
:

2668 i‡(
ty≥
 =
XFS_ALLOCTYPE_FIRST_AG
) {

2672 
¨gs
->
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
,árgs->
fsbno
);

2673 
¨gs
->
ty≥
 = 
XFS_ALLOCTYPE_THIS_AG
;

2674 
ßgno
 = 0;

2675 
Êags
 = 0;

2680 
¨gs
->
agno
 = 
ßgno
 = 
	`XFS_FSB_TO_AGNO
(
mp
,árgs->
fsbno
);

2681 
Êags
 = 
XFS_ALLOC_FLAG_TRYLOCK
;

2688 
¨gs
->
∑g
 = 
	`xfs_≥øg_gë
(
mp
,árgs->
agno
);

2689 
îr‹
 = 
	`xfs_Æloc_fix_‰ìli°
(
¨gs
, 
Êags
);

2690 i‡(
îr‹
) {

2691 
	`åa˚_xfs_Æloc_vexã¡_nofix
(
¨gs
);

2692 
îr‹0
;

2697 i‡(
¨gs
->
agbp
) {

2698 i‡((
îr‹
 = 
	`xfs_Æloc_ag_vexã¡
(
¨gs
)))

2699 
îr‹0
;

2703 
	`åa˚_xfs_Æloc_vexã¡_lo›Áûed
(
¨gs
);

2708 i‡(
¨gs
->
agno
 =
ßgno
 &&

2709 
ty≥
 =
XFS_ALLOCTYPE_START_BNO
)

2710 
¨gs
->
ty≥
 = 
XFS_ALLOCTYPE_THIS_AG
;

2718 i‡(++(
¨gs
->
agno
Ë=
mp
->
m_sb
.
sb_agcou¡
) {

2719 i‡(
¨gs
->
fú°block
 !
NULLFSBLOCK
)

2720 
¨gs
->
agno
 = 
ßgno
;

2722 
¨gs
->
agno
 = 0;

2728 i‡(
¨gs
->
agno
 =
ßgno
) {

2729 i‡(
Êags
 == 0) {

2730 
¨gs
->
agbno
 = 
NULLAGBLOCK
;

2731 
	`åa˚_xfs_Æloc_vexã¡_ÆlÁûed
(
¨gs
);

2735 
Êags
 = 0;

2736 i‡(
ty≥
 =
XFS_ALLOCTYPE_START_BNO
) {

2737 
¨gs
->
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
,

2738 
¨gs
->
fsbno
);

2739 
¨gs
->
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

2742 
	`xfs_≥øg_put
(
¨gs
->
∑g
);

2744 i‡(
bump_rŸ‹
) {

2745 i‡(
¨gs
->
agno
 =
ßgno
)

2746 
mp
->
m_ag‰Ÿ‹
 = (mp->m_agfrotor + 1) %

2747 (
mp
->
m_sb
.
sb_agcou¡
 * 
rŸ‹°ï
);

2749 
mp
->
m_ag‰Ÿ‹
 = (
¨gs
->
agno
 * 
rŸ‹°ï
 + 1) %

2750 (
mp
->
m_sb
.
sb_agcou¡
 * 
rŸ‹°ï
);

2754 
	`ASSERT
(0);

2757 i‡(
¨gs
->
agbno
 =
NULLAGBLOCK
)

2758 
¨gs
->
fsbno
 = 
NULLFSBLOCK
;

2760 
¨gs
->
fsbno
 = 
	`XFS_AGB_TO_FSB
(
mp
,árgs->
agno
,árgs->
agbno
);

2761 #ifde‡
DEBUG


2762 
	`ASSERT
(
¨gs
->
Àn
 >¨gs->
möÀn
);

2763 
	`ASSERT
(
¨gs
->
Àn
 <¨gs->
maxÀn
);

2764 
	`ASSERT
(
¨gs
->
agbno
 %árgs->
Æignmít
 == 0);

2765 
	`XFS_AG_CHECK_DADDR
(
mp
, 
	`XFS_FSB_TO_DADDR
(mp, 
¨gs
->
fsbno
),

2766 
¨gs
->
Àn
);

2770 i‡(
¨gs
->
d©©y≥
 & 
XFS_ALLOC_USERDATA_ZERO
) {

2771 
îr‹
 = 
	`xfs_zîo_exã¡
(
¨gs
->
ù
,árgs->
fsbno
,árgs->
Àn
);

2772 i‡(
îr‹
)

2773 
îr‹0
;

2777 
	`xfs_≥øg_put
(
¨gs
->
∑g
);

2779 
îr‹0
:

2780 
	`xfs_≥øg_put
(
¨gs
->
∑g
);

2781  
îr‹
;

2782 
	}
}

2786 
	$xfs_‰ì_exã¡_fix_‰ìli°
(

2787 
xfs_å™s
 *
ç
,

2788 
xfs_agnumbî_t
 
agno
,

2789 
xfs_buf
 **
agbp
)

2791 
xfs_Æloc_¨g
 
¨gs
;

2792 
îr‹
;

2794 
	`mem£t
(&
¨gs
, 0, (
xfs_Æloc_¨g
));

2795 
¨gs
.
ç
 =Åp;

2796 
¨gs
.
mp
 = 
ç
->
t_mou¡p
;

2797 
¨gs
.
agno
 =ágno;

2803 i‡(
¨gs
.
agno
 >¨gs.
mp
->
m_sb
.
sb_agcou¡
)

2804  -
EFSCORRUPTED
;

2806 
¨gs
.
∑g
 = 
	`xfs_≥øg_gë
◊rgs.
mp
,árgs.
agno
);

2807 
	`ASSERT
(
¨gs
.
∑g
);

2809 
îr‹
 = 
	`xfs_Æloc_fix_‰ìli°
(&
¨gs
, 
XFS_ALLOC_FLAG_FREEING
);

2810 i‡(
îr‹
)

2811 
out
;

2813 *
agbp
 = 
¨gs
.agbp;

2814 
out
:

2815 
	`xfs_≥øg_put
(
¨gs
.
∑g
);

2816  
îr‹
;

2817 
	}
}

2825 
	$xfs_‰ì_exã¡
(

2826 
xfs_å™s
 *
ç
,

2827 
xfs_fsblock_t
 
bno
,

2828 
xfs_exéí_t
 
Àn
,

2829 
xfs_ow√r_öfo
 *
oöfo
,

2830 
xfs_ag_ªsv_ty≥
 
ty≥
)

2832 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

2833 
xfs_buf
 *
agbp
;

2834 
xfs_agnumbî_t
 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
bno
);

2835 
xfs_agblock_t
 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
bno
);

2836 
îr‹
;

2838 
	`ASSERT
(
Àn
 != 0);

2839 
	`ASSERT
(
ty≥
 !
XFS_AG_RESV_AGFL
);

2841 i‡(
	`XFS_TEST_ERROR
(
Ál£
, 
mp
,

2842 
XFS_ERRTAG_FREE_EXTENT
,

2843 
XFS_RANDOM_FREE_EXTENT
))

2844  -
EIO
;

2846 
îr‹
 = 
	`xfs_‰ì_exã¡_fix_‰ìli°
(
ç
, 
agno
, &
agbp
);

2847 i‡(
îr‹
)

2848  
îr‹
;

2850 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
agbno
 < mp->
m_sb
.
sb_agblocks
, 
îr
);

2853 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

2854 
agbno
 + 
Àn
 <
	`be32_to_˝u
(
	`XFS_BUF_TO_AGF
(
agbp
)->
agf_Àngth
),

2855 
îr
);

2857 
îr‹
 = 
	`xfs_‰ì_ag_exã¡
(
ç
, 
agbp
, 
agno
, 
agbno
, 
Àn
, 
oöfo
, 
ty≥
);

2858 i‡(
îr‹
)

2859 
îr
;

2861 
	`xfs_exã¡_busy_ö£π
(
ç
, 
agno
, 
agbno
, 
Àn
, 0);

2864 
îr
:

2865 
	`xfs_å™s_bªl£
(
ç
, 
agbp
);

2866  
îr‹
;

2867 
	}
}

	@libxfs/xfs_alloc.h

18 #i‚de‡
__XFS_ALLOC_H__


19 
	#__XFS_ALLOC_H__


	)

21 
	gxfs_buf
;

22 
	gxfs_båì_cur
;

23 
	gxfs_mou¡
;

24 
	gxfs_≥øg
;

25 
	gxfs_å™s
;

27 
w‹kqueue_°ru˘
 *
xfs_Æloc_wq
;

32 
	#XFS_ALLOCTYPE_FIRST_AG
 0x02

	)

33 
	#XFS_ALLOCTYPE_THIS_AG
 0x08

	)

34 
	#XFS_ALLOCTYPE_START_BNO
 0x10

	)

35 
	#XFS_ALLOCTYPE_NEAR_BNO
 0x20

	)

36 
	#XFS_ALLOCTYPE_THIS_BNO
 0x40

	)

39 
	txfs_Ælo˘y≥_t
;

41 
	#XFS_ALLOC_TYPES
 \

42 { 
XFS_ALLOCTYPE_FIRST_AG
, "FIRST_AG" }, \

43 { 
XFS_ALLOCTYPE_THIS_AG
, "THIS_AG" }, \

44 { 
XFS_ALLOCTYPE_START_BNO
, "START_BNO" }, \

45 { 
XFS_ALLOCTYPE_NEAR_BNO
, "NEAR_BNO" }, \

46 { 
XFS_ALLOCTYPE_THIS_BNO
, "THIS_BNO" }

	)

51 
	#XFS_ALLOC_FLAG_TRYLOCK
 0x00000001

	)

52 
	#XFS_ALLOC_FLAG_FREEING
 0x00000002

	)

53 
	#XFS_ALLOC_FLAG_NORMAP
 0x00000004

	)

54 
	#XFS_ALLOC_FLAG_NOSHRINK
 0x00000008

	)

55 
	#XFS_ALLOC_FLAG_CHECK
 0x00000010

	)

62 
	sxfs_Æloc_¨g
 {

63 
xfs_å™s
 *
	mç
;

64 
xfs_mou¡
 *
	mmp
;

65 
xfs_buf
 *
	magbp
;

66 
xfs_≥øg
 *
	m∑g
;

67 
xfs_öode
 *
	mù
;

68 
xfs_fsblock_t
 
	mfsbno
;

69 
xfs_agnumbî_t
 
	magno
;

70 
xfs_agblock_t
 
	magbno
;

71 
xfs_exéí_t
 
	mmöÀn
;

72 
xfs_exéí_t
 
	mmaxÀn
;

73 
xfs_exéí_t
 
	mmod
;

74 
xfs_exéí_t
 
	m¥od
;

75 
xfs_exéí_t
 
	mmöÀ·
;

76 
xfs_exéí_t
 
	mtŸÆ
;

77 
xfs_exéí_t
 
	mÆignmít
;

78 
xfs_exéí_t
 
	mmöÆign¶›
;

79 
xfs_agblock_t
 
	mmö_agbno
;

80 
xfs_agblock_t
 
	mmax_agbno
;

81 
xfs_exéí_t
 
	mÀn
;

82 
xfs_Ælo˘y≥_t
 
	mty≥
;

83 
xfs_Ælo˘y≥_t
 
	mŸy≥
;

84 
	md©©y≥
;

85 
	mwasdñ
;

86 
	mwas‰omÊ
;

87 
xfs_fsblock_t
 
	mfú°block
;

88 
xfs_ow√r_öfo
 
	moöfo
;

89 
xfs_ag_ªsv_ty≥
 
	mªsv
;

90 } 
	txfs_Æloc_¨g_t
;

95 
	#XFS_ALLOC_USERDATA
 (1 << 0)

	)

96 
	#XFS_ALLOC_INITIAL_USER_DATA
 (1 << 1)

	)

97 
	#XFS_ALLOC_USERDATA_ZERO
 (1 << 2)

	)

98 
	#XFS_ALLOC_NOBUSY
 (1 << 3)

	)

100 
ölöe
 
boﬁ


101 
	$xfs_Æloc_is_u£rd©a
(
d©©y≥
)

103  (
d©©y≥
 & ~
XFS_ALLOC_NOBUSY
) != 0;

104 
	}
}

106 
ölöe
 
boﬁ


107 
	$xfs_Æloc_Ælow_busy_ªu£
(
d©©y≥
)

109  (
d©©y≥
 & 
XFS_ALLOC_NOBUSY
) == 0;

110 
	}
}

113 
	#XFS_ALLOC_AGFL_RESERVE
 4

	)

114 
xfs_Æloc_£t_aside
(
xfs_mou¡
 *
mp
);

115 
xfs_Æloc_ag_max_ußbÀ
(
xfs_mou¡
 *
mp
);

117 
xfs_exéí_t
 
xfs_Æloc_l⁄ge°_‰ì_exã¡
(
xfs_mou¡
 *
mp
,

118 
xfs_≥øg
 *
∑g
, 
xfs_exéí_t
 
√ed
,

119 
xfs_exéí_t
 
ª£rved
);

120 
xfs_Æloc_mö_‰ìli°
(
xfs_mou¡
 *
mp
,

121 
xfs_≥øg
 *
∑g
);

127 
xfs_Æloc_compuã_maxÀvñs
(

128 
xfs_mou¡
 *
mp
);

135 
xfs_Æloc_gë_‰ìli°
(

136 
xfs_å™s
 *
ç
,

137 
xfs_buf
 *
agbp
,

138 
xfs_agblock_t
 *
bn›
,

139 
båìblk
);

145 
xfs_Æloc_log_agf
(

146 
xfs_å™s
 *
ç
,

147 
xfs_buf
 *
bp
,

148 
fõlds
);

154 
xfs_Æloc_∑gf_öô
(

155 
xfs_mou¡
 *
mp
,

156 
xfs_å™s
 *
ç
,

157 
xfs_agnumbî_t
 
agno
,

158 
Êags
);

164 
xfs_Æloc_put_‰ìli°
(

165 
xfs_å™s
 *
ç
,

166 
xfs_buf
 *
agbp
,

167 
xfs_buf
 *
agÊbp
,

168 
xfs_agblock_t
 
bno
,

169 
båìblk
);

175 
xfs_Æloc_ªad_agf
(

176 
xfs_mou¡
 *
mp
,

177 
xfs_å™s
 *
ç
,

178 
xfs_agnumbî_t
 
agno
,

179 
Êags
,

180 
xfs_buf
 **
bµ
);

186 
xfs_Æloc_vexã¡
(

187 
xfs_Æloc_¨g_t
 *
¨gs
);

193 
xfs_‰ì_exã¡
(

194 
xfs_å™s
 *
ç
,

195 
xfs_fsblock_t
 
bno
,

196 
xfs_exéí_t
 
Àn
,

197 
xfs_ow√r_öfo
 *
oöfo
,

198 
xfs_ag_ªsv_ty≥
 
ty≥
);

201 
xfs_Æloc_lookup_ge
(

202 
xfs_båì_cur
 *
cur
,

203 
xfs_agblock_t
 
bno
,

204 
xfs_exéí_t
 
Àn
,

205 *
°©
);

208 
xfs_Æloc_gë_ªc
(

209 
xfs_båì_cur
 *
cur
,

210 
xfs_agblock_t
 *
bno
,

211 
xfs_exéí_t
 *
Àn
,

212 *
°©
);

214 
xfs_ªad_agf
(
xfs_mou¡
 *
mp
, 
xfs_å™s
 *
ç
,

215 
xfs_agnumbî_t
 
agno
, 
Êags
, 
xfs_buf
 **
bµ
);

216 
xfs_Æloc_fix_‰ìli°
(
xfs_Æloc_¨g
 *
¨gs
, 
Êags
);

217 
xfs_‰ì_exã¡_fix_‰ìli°
(
xfs_å™s
 *
ç
, 
xfs_agnumbî_t
 
agno
,

218 
xfs_buf
 **
agbp
);

220 
xfs_exéí_t
 
xfs_¥óŒoc_blocks
(
xfs_mou¡
 *
mp
);

	@libxfs/xfs_alloc_btree.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_sb.h
"

25 
	~"xfs_mou¡.h
"

26 
	~"xfs_båì.h
"

27 
	~"xfs_Æloc_båì.h
"

28 
	~"xfs_Æloc.h
"

29 
	~"xfs_åa˚.h
"

30 
	~"xfs_cksum.h
"

31 
	~"xfs_å™s.h
"

34 
STATIC
 
xfs_båì_cur
 *

35 
	$xfs_Ælocbt_dup_curs‹
(

36 
xfs_båì_cur
 *
cur
)

38  
	`xfs_Ælocbt_öô_curs‹
(
cur
->
bc_mp
, cur->
bc_ç
,

39 
cur
->
bc_¥iv©e
.
a
.
agbp
, cur->bc_¥iv©e.a.
agno
,

40 
cur
->
bc_bäum
);

41 
	}
}

43 
STATIC
 

44 
	$xfs_Ælocbt_£t_roŸ
(

45 
xfs_båì_cur
 *
cur
,

46 
xfs_båì_±r
 *
±r
,

47 
öc
)

49 
xfs_buf
 *
agbp
 = 
cur
->
bc_¥iv©e
.
a
.agbp;

50 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

51 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

52 
bäum
 = 
cur
->
bc_bäum
;

53 
xfs_≥øg
 *
∑g
 = 
	`xfs_≥øg_gë
(
cur
->
bc_mp
, 
£qno
);

55 
	`ASSERT
(
±r
->
s
 != 0);

57 
agf
->
agf_roŸs
[
bäum
] = 
±r
->
s
;

58 
	`be32_add_˝u
(&
agf
->
agf_Àvñs
[
bäum
], 
öc
);

59 
∑g
->
∑gf_Àvñs
[
bäum
] +
öc
;

60 
	`xfs_≥øg_put
(
∑g
);

62 
	`xfs_Æloc_log_agf
(
cur
->
bc_ç
, 
agbp
, 
XFS_AGF_ROOTS
 | 
XFS_AGF_LEVELS
);

63 
	}
}

65 
STATIC
 

66 
	$xfs_Ælocbt_Æloc_block
(

67 
xfs_båì_cur
 *
cur
,

68 
xfs_båì_±r
 *
°¨t
,

69 
xfs_båì_±r
 *
√w
,

70 *
°©
)

72 
îr‹
;

73 
xfs_agblock_t
 
bno
;

75 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

78 
îr‹
 = 
	`xfs_Æloc_gë_‰ìli°
(
cur
->
bc_ç
, cur->
bc_¥iv©e
.
a
.
agbp
,

79 &
bno
, 1);

80 i‡(
îr‹
) {

81 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

82  
îr‹
;

85 i‡(
bno
 =
NULLAGBLOCK
) {

86 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

87 *
°©
 = 0;

91 
	`xfs_exã¡_busy_ªu£
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
, 
bno
, 1, 
Ál£
);

93 
	`xfs_å™s_agbåì_dñè
(
cur
->
bc_ç
, 1);

94 
√w
->
s
 = 
	`˝u_to_be32
(
bno
);

96 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

97 *
°©
 = 1;

99 
	}
}

101 
STATIC
 

102 
	$xfs_Ælocbt_‰ì_block
(

103 
xfs_båì_cur
 *
cur
,

104 
xfs_buf
 *
bp
)

106 
xfs_buf
 *
agbp
 = 
cur
->
bc_¥iv©e
.
a
.agbp;

107 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

108 
xfs_agblock_t
 
bno
;

109 
îr‹
;

111 
bno
 = 
	`xfs_daddr_to_agbno
(
cur
->
bc_mp
, 
	`XFS_BUF_ADDR
(
bp
));

112 
îr‹
 = 
	`xfs_Æloc_put_‰ìli°
(
cur
->
bc_ç
, 
agbp
, 
NULL
, 
bno
, 1);

113 i‡(
îr‹
)

114  
îr‹
;

116 
	`xfs_exã¡_busy_ö£π
(
cur
->
bc_ç
, 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
bno
, 1,

117 
XFS_EXTENT_BUSY_SKIP_DISCARD
);

118 
	`xfs_å™s_agbåì_dñè
(
cur
->
bc_ç
, -1);

120 
	}
}

125 
STATIC
 

126 
	$xfs_Ælocbt_upd©e_œ°ªc
(

127 
xfs_båì_cur
 *
cur
,

128 
xfs_båì_block
 *
block
,

129 
xfs_båì_ªc
 *
ªc
,

130 
±r
,

131 
ªas⁄
)

133 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
cur
->
bc_¥iv©e
.
a
.
agbp
);

134 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

135 
xfs_≥øg
 *
∑g
;

136 
__be32
 
Àn
;

137 
numªcs
;

139 
	`ASSERT
(
cur
->
bc_bäum
 =
XFS_BTNUM_CNT
);

141 
ªas⁄
) {

142 
LASTREC_UPDATE
:

147 i‡(
±r
 !
	`xfs_båì_gë_numªcs
(
block
))

149 
Àn
 = 
ªc
->
Æloc
.
¨_blockcou¡
;

151 
LASTREC_INSREC
:

152 i‡(
	`be32_to_˝u
(
ªc
->
Æloc
.
¨_blockcou¡
) <=

153 
	`be32_to_˝u
(
agf
->
agf_l⁄ge°
))

155 
Àn
 = 
ªc
->
Æloc
.
¨_blockcou¡
;

157 
LASTREC_DELREC
:

158 
numªcs
 = 
	`xfs_båì_gë_numªcs
(
block
);

159 i‡(
±r
 <
numªcs
)

161 
	`ASSERT
(
±r
 =
numªcs
 + 1);

163 i‡(
numªcs
) {

164 
xfs_Æloc_ªc_t
 *
ºp
;

166 
ºp
 = 
	`XFS_ALLOC_REC_ADDR
(
cur
->
bc_mp
, 
block
, 
numªcs
);

167 
Àn
 = 
ºp
->
¨_blockcou¡
;

169 
Àn
 = 0;

174 
	`ASSERT
(0);

178 
agf
->
agf_l⁄ge°
 = 
Àn
;

179 
∑g
 = 
	`xfs_≥øg_gë
(
cur
->
bc_mp
, 
£qno
);

180 
∑g
->
∑gf_l⁄ge°
 = 
	`be32_to_˝u
(
Àn
);

181 
	`xfs_≥øg_put
(
∑g
);

182 
	`xfs_Æloc_log_agf
(
cur
->
bc_ç
, cur->
bc_¥iv©e
.
a
.
agbp
, 
XFS_AGF_LONGEST
);

183 
	}
}

185 
STATIC
 

186 
	$xfs_Ælocbt_gë_möªcs
(

187 
xfs_båì_cur
 *
cur
,

188 
Àvñ
)

190  
cur
->
bc_mp
->
m_Æloc_mƒ
[
Àvñ
 != 0];

191 
	}
}

193 
STATIC
 

194 
	$xfs_Ælocbt_gë_maxªcs
(

195 
xfs_båì_cur
 *
cur
,

196 
Àvñ
)

198  
cur
->
bc_mp
->
m_Æloc_mxr
[
Àvñ
 != 0];

199 
	}
}

201 
STATIC
 

202 
	$xfs_Ælocbt_öô_key_‰om_ªc
(

203 
xfs_båì_key
 *
key
,

204 
xfs_båì_ªc
 *
ªc
)

206 
	`ASSERT
(
ªc
->
Æloc
.
¨_°¨tblock
 != 0);

208 
key
->
Æloc
.
¨_°¨tblock
 = 
ªc
->alloc.ar_startblock;

209 
key
->
Æloc
.
¨_blockcou¡
 = 
ªc
->alloc.ar_blockcount;

210 
	}
}

212 
STATIC
 

213 
	$xfs_Ælocbt_öô_ªc_‰om_cur
(

214 
xfs_båì_cur
 *
cur
,

215 
xfs_båì_ªc
 *
ªc
)

217 
	`ASSERT
(
cur
->
bc_ªc
.
a
.
¨_°¨tblock
 != 0);

219 
ªc
->
Æloc
.
¨_°¨tblock
 = 
	`˝u_to_be32
(
cur
->
bc_ªc
.
a
.ar_startblock);

220 
ªc
->
Æloc
.
¨_blockcou¡
 = 
	`˝u_to_be32
(
cur
->
bc_ªc
.
a
.ar_blockcount);

221 
	}
}

223 
STATIC
 

224 
	$xfs_Ælocbt_öô_±r_‰om_cur
(

225 
xfs_båì_cur
 *
cur
,

226 
xfs_båì_±r
 *
±r
)

228 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
cur
->
bc_¥iv©e
.
a
.
agbp
);

230 
	`ASSERT
(
cur
->
bc_¥iv©e
.
a
.
agno
 =
	`be32_to_˝u
(
agf
->
agf_£qno
));

231 
	`ASSERT
(
agf
->
agf_roŸs
[
cur
->
bc_bäum
] != 0);

233 
±r
->
s
 = 
agf
->
agf_roŸs
[
cur
->
bc_bäum
];

234 
	}
}

236 
STATIC
 
__öt64_t


237 
	$xfs_Ælocbt_key_diff
(

238 
xfs_båì_cur
 *
cur
,

239 
xfs_båì_key
 *
key
)

241 
xfs_Æloc_ªc_öc‹e_t
 *
ªc
 = &
cur
->
bc_ªc
.
a
;

242 
xfs_Æloc_key_t
 *
kp
 = &
key
->
Æloc
;

243 
__öt64_t
 
diff
;

245 i‡(
cur
->
bc_bäum
 =
XFS_BTNUM_BNO
) {

246  (
__öt64_t
)
	`be32_to_˝u
(
kp
->
¨_°¨tblock
) -

247 
ªc
->
¨_°¨tblock
;

250 
diff
 = (
__öt64_t
)
	`be32_to_˝u
(
kp
->
¨_blockcou¡
Ë- 
ªc
->ar_blockcount;

251 i‡(
diff
)

252  
diff
;

254  (
__öt64_t
)
	`be32_to_˝u
(
kp
->
¨_°¨tblock
Ë- 
ªc
->ar_startblock;

255 
	}
}

257 
boﬁ


258 
	$xfs_Ælocbt_vîify
(

259 
xfs_buf
 *
bp
)

261 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

262 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

263 
xfs_≥øg
 *
∑g
 = 
bp
->
b_∑g
;

264 
Àvñ
;

278 
Àvñ
 = 
	`be16_to_˝u
(
block
->
bb_Àvñ
);

279 
block
->
bb_magic
) {

280 
	`˝u_to_be32
(
XFS_ABTB_CRC_MAGIC
):

281 i‡(!
	`xfs_båì_sblock_v5hdr_vîify
(
bp
))

282  
Ál£
;

284 
	`˝u_to_be32
(
XFS_ABTB_MAGIC
):

285 i‡(
∑g
 &&Öag->
∑gf_öô
) {

286 i‡(
Àvñ
 >
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_BNOi
])

287  
Ál£
;

288 } i‡(
Àvñ
 >
mp
->
m_ag_maxÀvñs
)

289  
Ál£
;

291 
	`˝u_to_be32
(
XFS_ABTC_CRC_MAGIC
):

292 i‡(!
	`xfs_båì_sblock_v5hdr_vîify
(
bp
))

293  
Ál£
;

295 
	`˝u_to_be32
(
XFS_ABTC_MAGIC
):

296 i‡(
∑g
 &&Öag->
∑gf_öô
) {

297 i‡(
Àvñ
 >
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_CNTi
])

298  
Ál£
;

299 } i‡(
Àvñ
 >
mp
->
m_ag_maxÀvñs
)

300  
Ál£
;

303  
Ál£
;

306  
	`xfs_båì_sblock_vîify
(
bp
, 
mp
->
m_Æloc_mxr
[
Àvñ
 != 0]);

307 
	}
}

310 
	$xfs_Ælocbt_ªad_vîify
(

311 
xfs_buf
 *
bp
)

313 i‡(!
	`xfs_båì_sblock_vîify_¸c
(
bp
))

314 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

315 i‡(!
	`xfs_Ælocbt_vîify
(
bp
))

316 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

318 i‡(
bp
->
b_îr‹
) {

319 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

320 
	`xfs_vîifõr_îr‹
(
bp
);

322 
	}
}

325 
	$xfs_Ælocbt_wrôe_vîify
(

326 
xfs_buf
 *
bp
)

328 i‡(!
	`xfs_Ælocbt_vîify
(
bp
)) {

329 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

330 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

331 
	`xfs_vîifõr_îr‹
(
bp
);

334 
	`xfs_båì_sblock_ˇlc_¸c
(
bp
);

336 
	}
}

338 c⁄° 
xfs_buf_›s
 
	gxfs_Ælocbt_buf_›s
 = {

339 .
«me
 = "xfs_allocbt",

340 .
	gvîify_ªad
 = 
xfs_Ælocbt_ªad_vîify
,

341 .
	gvîify_wrôe
 = 
xfs_Ælocbt_wrôe_vîify
,

345 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

346 
STATIC
 

347 
	$xfs_Ælocbt_keys_ö‹dî
(

348 
xfs_båì_cur
 *
cur
,

349 
xfs_båì_key
 *
k1
,

350 
xfs_båì_key
 *
k2
)

352 i‡(
cur
->
bc_bäum
 =
XFS_BTNUM_BNO
) {

353  
	`be32_to_˝u
(
k1
->
Æloc
.
¨_°¨tblock
) <

354 
	`be32_to_˝u
(
k2
->
Æloc
.
¨_°¨tblock
);

356  
	`be32_to_˝u
(
k1
->
Æloc
.
¨_blockcou¡
) <

357 
	`be32_to_˝u
(
k2
->
Æloc
.
¨_blockcou¡
) ||

358 (
k1
->
Æloc
.
¨_blockcou¡
 =
k2
->alloc.ar_blockcount &&

359 
	`be32_to_˝u
(
k1
->
Æloc
.
¨_°¨tblock
) <

360 
	`be32_to_˝u
(
k2
->
Æloc
.
¨_°¨tblock
));

362 
	}
}

364 
STATIC
 

365 
	$xfs_Ælocbt_ªcs_ö‹dî
(

366 
xfs_båì_cur
 *
cur
,

367 
xfs_båì_ªc
 *
r1
,

368 
xfs_båì_ªc
 *
r2
)

370 i‡(
cur
->
bc_bäum
 =
XFS_BTNUM_BNO
) {

371  
	`be32_to_˝u
(
r1
->
Æloc
.
¨_°¨tblock
) +

372 
	`be32_to_˝u
(
r1
->
Æloc
.
¨_blockcou¡
) <=

373 
	`be32_to_˝u
(
r2
->
Æloc
.
¨_°¨tblock
);

375  
	`be32_to_˝u
(
r1
->
Æloc
.
¨_blockcou¡
) <

376 
	`be32_to_˝u
(
r2
->
Æloc
.
¨_blockcou¡
) ||

377 (
r1
->
Æloc
.
¨_blockcou¡
 =
r2
->alloc.ar_blockcount &&

378 
	`be32_to_˝u
(
r1
->
Æloc
.
¨_°¨tblock
) <

379 
	`be32_to_˝u
(
r2
->
Æloc
.
¨_°¨tblock
));

381 
	}
}

384 c⁄° 
xfs_båì_›s
 
	gxfs_Ælocbt_›s
 = {

385 .
ªc_Àn
 = (
xfs_Æloc_ªc_t
),

386 .
	gkey_Àn
 = (
xfs_Æloc_key_t
),

388 .
	gdup_curs‹
 = 
xfs_Ælocbt_dup_curs‹
,

389 .
	g£t_roŸ
 = 
xfs_Ælocbt_£t_roŸ
,

390 .
	gÆloc_block
 = 
xfs_Ælocbt_Æloc_block
,

391 .
	g‰ì_block
 = 
xfs_Ælocbt_‰ì_block
,

392 .
	gupd©e_œ°ªc
 = 
xfs_Ælocbt_upd©e_œ°ªc
,

393 .
	ggë_möªcs
 = 
xfs_Ælocbt_gë_möªcs
,

394 .
	ggë_maxªcs
 = 
xfs_Ælocbt_gë_maxªcs
,

395 .
	göô_key_‰om_ªc
 = 
xfs_Ælocbt_öô_key_‰om_ªc
,

396 .
	göô_ªc_‰om_cur
 = 
xfs_Ælocbt_öô_ªc_‰om_cur
,

397 .
	göô_±r_‰om_cur
 = 
xfs_Ælocbt_öô_±r_‰om_cur
,

398 .
	gkey_diff
 = 
xfs_Ælocbt_key_diff
,

399 .
	gbuf_›s
 = &
xfs_Ælocbt_buf_›s
,

400 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

401 .
	gkeys_ö‹dî
 = 
xfs_Ælocbt_keys_ö‹dî
,

402 .
	gªcs_ö‹dî
 = 
xfs_Ælocbt_ªcs_ö‹dî
,

409 
xfs_båì_cur
 *

410 
	$xfs_Ælocbt_öô_curs‹
(

411 
xfs_mou¡
 *
mp
,

412 
xfs_å™s
 *
ç
,

413 
xfs_buf
 *
agbp
,

414 
xfs_agnumbî_t
 
agno
,

415 
xfs_bäum_t
 
bäum
)

417 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

418 
xfs_båì_cur
 *
cur
;

420 
	`ASSERT
(
bäum
 =
XFS_BTNUM_BNO
 || bäum =
XFS_BTNUM_CNT
);

422 
cur
 = 
	`kmem_z⁄e_zÆloc
(
xfs_båì_cur_z⁄e
, 
KM_NOFS
);

424 
cur
->
bc_ç
 = 
ç
;

425 
cur
->
bc_mp
 = 
mp
;

426 
cur
->
bc_bäum
 = 
bäum
;

427 
cur
->
bc_blocklog
 = 
mp
->
m_sb
.
sb_blocklog
;

428 
cur
->
bc_›s
 = &
xfs_Ælocbt_›s
;

429 i‡(
bäum
 =
XFS_BTNUM_BNO
)

430 
cur
->
bc_°©off
 = 
	`XFS_STATS_CALC_INDEX
(
xs_abtb_2
);

432 
cur
->
bc_°©off
 = 
	`XFS_STATS_CALC_INDEX
(
xs_abtc_2
);

434 i‡(
bäum
 =
XFS_BTNUM_CNT
) {

435 
cur
->
bc_∆evñs
 = 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNT
]);

436 
cur
->
bc_Êags
 = 
XFS_BTREE_LASTREC_UPDATE
;

438 
cur
->
bc_∆evñs
 = 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNO
]);

441 
cur
->
bc_¥iv©e
.
a
.
agbp
 =ágbp;

442 
cur
->
bc_¥iv©e
.
a
.
agno
 =ágno;

444 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

445 
cur
->
bc_Êags
 |
XFS_BTREE_CRC_BLOCKS
;

447  
cur
;

448 
	}
}

454 
	$xfs_Ælocbt_maxªcs
(

455 
xfs_mou¡
 *
mp
,

456 
blockÀn
,

457 
Àaf
)

459 
blockÀn
 -
	`XFS_ALLOC_BLOCK_LEN
(
mp
);

461 i‡(
Àaf
)

462  
blockÀn
 / (
xfs_Æloc_ªc_t
);

463  
blockÀn
 / ((
xfs_Æloc_key_t
Ë+ (
xfs_Æloc_±r_t
));

464 
	}
}

	@libxfs/xfs_alloc_btree.h

18 #i‚de‡
__XFS_ALLOC_BTREE_H__


19 
	#__XFS_ALLOC_BTREE_H__


	)

25 
	gxfs_buf
;

26 
	gxfs_båì_cur
;

27 
	gxfs_mou¡
;

32 
	#XFS_ALLOC_BLOCK_LEN
(
mp
) \

33 (
	`xfs_sb_vîsi⁄_has¸c
(&((
mp
)->
m_sb
)) ? \

34 
XFS_BTREE_SBLOCK_CRC_LEN
 : 
XFS_BTREE_SBLOCK_LEN
)

	)

41 
	#XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 
ödex
) \

42 ((
xfs_Æloc_ªc_t
 *) \

43 ((*)(
block
) + \

44 
	`XFS_ALLOC_BLOCK_LEN
(
mp
) + \

45 (((
ödex
Ë- 1Ë* (
xfs_Æloc_ªc_t
))))

	)

47 
	#XFS_ALLOC_KEY_ADDR
(
mp
, 
block
, 
ödex
) \

48 ((
xfs_Æloc_key_t
 *) \

49 ((*)(
block
) + \

50 
	`XFS_ALLOC_BLOCK_LEN
(
mp
) + \

51 ((
ödex
Ë- 1Ë* (
xfs_Æloc_key_t
)))

	)

53 
	#XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 
ödex
, 
maxªcs
) \

54 ((
xfs_Æloc_±r_t
 *) \

55 ((*)(
block
) + \

56 
	`XFS_ALLOC_BLOCK_LEN
(
mp
) + \

57 (
maxªcs
Ë* (
xfs_Æloc_key_t
) + \

58 ((
ödex
Ë- 1Ë* (
xfs_Æloc_±r_t
)))

	)

60 
xfs_båì_cur
 *
xfs_Ælocbt_öô_curs‹
(
xfs_mou¡
 *,

61 
xfs_å™s
 *, 
xfs_buf
 *,

62 
xfs_agnumbî_t
, 
xfs_bäum_t
);

63 
xfs_Ælocbt_maxªcs
(
xfs_mou¡
 *, , );

	@libxfs/xfs_attr.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_bô.h
"

25 
	~"xfs_mou¡.h
"

26 
	~"xfs_de„r.h
"

27 
	~"xfs_da_f‹m©.h
"

28 
	~"xfs_da_båì.h
"

29 
	~"xfs_©å_sf.h
"

30 
	~"xfs_öode.h
"

31 
	~"xfs_Æloc.h
"

32 
	~"xfs_å™s.h
"

33 
	~"xfs_bm≠.h
"

34 
	~"xfs_bm≠_båì.h
"

35 
	~"xfs_©å_Àaf.h
"

36 
	~"xfs_©å_ªmŸe.h
"

37 
	~"xfs_å™s_•a˚.h
"

38 
	~"xfs_åa˚.h
"

53 
STATIC
 
xfs_©å_sh‹tf‹m_add«me
(
xfs_da_¨gs_t
 *
¨gs
);

58 
STATIC
 
xfs_©å_Àaf_gë
(
xfs_da_¨gs_t
 *
¨gs
);

59 
STATIC
 
xfs_©å_Àaf_add«me
(
xfs_da_¨gs_t
 *
¨gs
);

60 
STATIC
 
xfs_©å_Àaf_ªmovíame
(
xfs_da_¨gs_t
 *
¨gs
);

65 
STATIC
 
xfs_©å_node_gë
(
xfs_da_¨gs_t
 *
¨gs
);

66 
STATIC
 
xfs_©å_node_add«me
(
xfs_da_¨gs_t
 *
¨gs
);

67 
STATIC
 
xfs_©å_node_ªmovíame
(
xfs_da_¨gs_t
 *
¨gs
);

68 
STATIC
 
xfs_©å_fûl°©e
(
xfs_da_°©e_t
 *
°©e
);

69 
STATIC
 
xfs_©å_ªfûl°©e
(
xfs_da_°©e_t
 *
°©e
);

72 
STATIC
 

73 
	$xfs_©å_¨gs_öô
(

74 
xfs_da_¨gs
 *
¨gs
,

75 
xfs_öode
 *
dp
,

76 c⁄° *
«me
,

77 
Êags
)

80 i‡(!
«me
)

81  -
EINVAL
;

83 
	`mem£t
(
¨gs
, 0, (*args));

84 
¨gs
->
geo
 = 
dp
->
i_mou¡
->
m_©å_geo
;

85 
¨gs
->
whichf‹k
 = 
XFS_ATTR_FORK
;

86 
¨gs
->
dp
 = dp;

87 
¨gs
->
Êags
 = flags;

88 
¨gs
->
«me
 =Çame;

89 
¨gs
->
«mñí
 = 
	`°æí
((c⁄° *)
«me
);

90 i‡(
¨gs
->
«mñí
 >
MAXNAMELEN
)

91  -
EFAULT
;

93 
¨gs
->
hashvÆ
 = 
	`xfs_da_hash«me
◊rgs->
«me
,árgs->
«mñí
);

95 
	}
}

98 
	$xfs_öode_haßâr
(

99 
xfs_öode
 *
ù
)

101 i‡(!
	`XFS_IFORK_Q
(
ù
) ||

102 (
ù
->
i_d
.
di_af‹m©
 =
XFS_DINODE_FMT_EXTENTS
 &&

103 
ù
->
i_d
.
di_™exã¡s
 == 0))

106 
	}
}

113 
	$xfs_©å_gë
(

114 
xfs_öode
 *
ù
,

115 c⁄° *
«me
,

116 *
vÆue
,

117 *
vÆuñíp
,

118 
Êags
)

120 
xfs_da_¨gs
 
¨gs
;

121 
uöt
 
lock_mode
;

122 
îr‹
;

124 
	`XFS_STATS_INC
(
ù
->
i_mou¡
, 
xs_©å_gë
);

126 i‡(
	`XFS_FORCED_SHUTDOWN
(
ù
->
i_mou¡
))

127  -
EIO
;

129 
îr‹
 = 
	`xfs_©å_¨gs_öô
(&
¨gs
, 
ù
, 
«me
, 
Êags
);

130 i‡(
îr‹
)

131  
îr‹
;

133 
¨gs
.
vÆue
 = value;

134 
¨gs
.
vÆuñí
 = *
vÆuñíp
;

136 
¨gs
.
›_Êags
 = 
XFS_DA_OP_OKNOENT
;

138 
lock_mode
 = 
	`xfs_ûock_©å_m≠_sh¨ed
(
ù
);

139 i‡(!
	`xfs_öode_haßâr
(
ù
))

140 
îr‹
 = -
ENOATTR
;

141 i‡(
ù
->
i_d
.
di_af‹m©
 =
XFS_DINODE_FMT_LOCAL
)

142 
îr‹
 = 
	`xfs_©å_sh‹tf‹m_gëvÆue
(&
¨gs
);

143 i‡(
	`xfs_bm≠_⁄e_block
(
ù
, 
XFS_ATTR_FORK
))

144 
îr‹
 = 
	`xfs_©å_Àaf_gë
(&
¨gs
);

146 
îr‹
 = 
	`xfs_©å_node_gë
(&
¨gs
);

147 
	`xfs_iu∆ock
(
ù
, 
lock_mode
);

149 *
vÆuñíp
 = 
¨gs
.
vÆuñí
;

150  
îr‹
 =-
EEXIST
 ? 0 :Érror;

151 
	}
}

156 
STATIC
 

157 
	$xfs_©å_ˇlc_size
(

158 
xfs_da_¨gs
 *
¨gs
,

159 *
loˇl
)

161 
xfs_mou¡
 *
mp
 = 
¨gs
->
dp
->
i_mou¡
;

162 
size
;

163 
nblks
;

169 
size
 = 
	`xfs_©å_Àaf_√wítsize
(
¨gs
, 
loˇl
);

170 
nblks
 = 
	`XFS_DAENTER_SPACE_RES
(
mp
, 
XFS_ATTR_FORK
);

171 i‡(*
loˇl
) {

172 i‡(
size
 > (
¨gs
->
geo
->
blksize
 / 2)) {

174 
nblks
 *= 2;

181 
uöt
 
dblocks
 = 
	`xfs_©å3_rmt_blocks
(
mp
, 
¨gs
->
vÆuñí
);

182 
nblks
 +
dblocks
;

183 
nblks
 +
	`XFS_NEXTENTADD_SPACE_RES
(
mp
, 
dblocks
, 
XFS_ATTR_FORK
);

186  
nblks
;

187 
	}
}

190 
	$xfs_©å_£t
(

191 
xfs_öode
 *
dp
,

192 c⁄° *
«me
,

193 *
vÆue
,

194 
vÆuñí
,

195 
Êags
)

197 
xfs_mou¡
 *
mp
 = 
dp
->
i_mou¡
;

198 
xfs_da_¨gs
 
¨gs
;

199 
xfs_de„r_›s
 
df›s
;

200 
xfs_å™s_ªs
 
åes
;

201 
xfs_fsblock_t
 
fú°block
;

202 
rsvd
 = (
Êags
 & 
ATTR_ROOT
) != 0;

203 
îr‹
, 
îr2
, 
loˇl
;

205 
	`XFS_STATS_INC
(
mp
, 
xs_©å_£t
);

207 i‡(
	`XFS_FORCED_SHUTDOWN
(
dp
->
i_mou¡
))

208  -
EIO
;

210 
îr‹
 = 
	`xfs_©å_¨gs_öô
(&
¨gs
, 
dp
, 
«me
, 
Êags
);

211 i‡(
îr‹
)

212  
îr‹
;

214 
¨gs
.
vÆue
 = value;

215 
¨gs
.
vÆuñí
 = valuelen;

216 
¨gs
.
fú°block
 = &firstblock;

217 
¨gs
.
df›s
 = &dfops;

218 
¨gs
.
›_Êags
 = 
XFS_DA_OP_ADDNAME
 | 
XFS_DA_OP_OKNOENT
;

219 
¨gs
.
tŸÆ
 = 
	`xfs_©å_ˇlc_size
(&¨gs, &
loˇl
);

221 
îr‹
 = 
	`xfs_qm_dq©èch
(
dp
, 0);

222 i‡(
îr‹
)

223  
îr‹
;

229 i‡(
	`XFS_IFORK_Q
(
dp
) == 0) {

230 
sf_size
 = (
xfs_©å_sf_hdr_t
) +

231 
	`XFS_ATTR_SF_ENTSIZE_BYNAME
(
¨gs
.
«mñí
, 
vÆuñí
);

233 
îr‹
 = 
	`xfs_bm≠_add_©åf‹k
(
dp
, 
sf_size
, 
rsvd
);

234 i‡(
îr‹
)

235  
îr‹
;

238 
åes
.
å_logªs
 = 
	`M_RES
(
mp
)->
å_©å£tm
.tr_logres +

239 
	`M_RES
(
mp
)->
å_©å£åt
.
å_logªs
 * 
¨gs
.
tŸÆ
;

240 
åes
.
å_logcou¡
 = 
XFS_ATTRSET_LOG_COUNT
;

241 
åes
.
å_logÊags
 = 
XFS_TRANS_PERM_LOG_RES
;

247 
îr‹
 = 
	`xfs_å™s_Æloc
(
mp
, &
åes
, 
¨gs
.
tŸÆ
, 0,

248 
rsvd
 ? 
XFS_TRANS_RESERVE
 : 0, &
¨gs
.
å™s
);

249 i‡(
îr‹
)

250  
îr‹
;

252 
	`xfs_ûock
(
dp
, 
XFS_ILOCK_EXCL
);

253 
îr‹
 = 
	`xfs_å™s_ª£rve_quŸa_nblks
(
¨gs
.
å™s
, 
dp
,árgs.
tŸÆ
, 0,

254 
rsvd
 ? 
XFS_QMOPT_RES_REGBLKS
 | 
XFS_QMOPT_FORCE_RES
 :

255 
XFS_QMOPT_RES_REGBLKS
);

256 i‡(
îr‹
) {

257 
	`xfs_iu∆ock
(
dp
, 
XFS_ILOCK_EXCL
);

258 
	`xfs_å™s_ˇn˚l
(
¨gs
.
å™s
);

259  
îr‹
;

262 
	`xfs_å™s_ijoö
(
¨gs
.
å™s
, 
dp
, 0);

268 i‡(
dp
->
i_d
.
di_af‹m©
 =
XFS_DINODE_FMT_LOCAL
 ||

269 (
dp
->
i_d
.
di_af‹m©
 =
XFS_DINODE_FMT_EXTENTS
 &&

270 
dp
->
i_d
.
di_™exã¡s
 == 0)) {

275 i‡(
dp
->
i_d
.
di_af‹m©
 =
XFS_DINODE_FMT_EXTENTS
)

276 
	`xfs_©å_sh‹tf‹m_¸óã
(&
¨gs
);

282 
îr‹
 = 
	`xfs_©å_sh‹tf‹m_add«me
(&
¨gs
);

283 i‡(
îr‹
 !-
ENOSPC
) {

288 
	`ASSERT
(
¨gs
.
å™s
 !
NULL
);

295 i‡(
mp
->
m_Êags
 & 
XFS_MOUNT_WSYNC
)

296 
	`xfs_å™s_£t_sync
(
¨gs
.
å™s
);

298 i‡(!
îr‹
 && (
Êags
 & 
ATTR_KERNOTIME
) == 0) {

299 
	`xfs_å™s_ichgtime
(
¨gs
.
å™s
, 
dp
,

300 
XFS_ICHGTIME_CHG
);

302 
îr2
 = 
	`xfs_å™s_commô
(
¨gs
.
å™s
);

303 
	`xfs_iu∆ock
(
dp
, 
XFS_ILOCK_EXCL
);

305  
îr‹
 ?Éº‹ : 
îr2
;

312 
	`xfs_de„r_öô
(
¨gs
.
df›s
,árgs.
fú°block
);

313 
îr‹
 = 
	`xfs_©å_sh‹tf‹m_to_Àaf
(&
¨gs
);

314 i‡(!
îr‹
)

315 
îr‹
 = 
	`xfs_de„r_föish
(&
¨gs
.
å™s
,árgs.
df›s
, 
dp
);

316 i‡(
îr‹
) {

317 
¨gs
.
å™s
 = 
NULL
;

318 
	`xfs_de„r_ˇn˚l
(&
df›s
);

319 
out
;

327 
îr‹
 = 
	`xfs_å™s_rﬁl
(&
¨gs
.
å™s
, 
dp
);

328 i‡(
îr‹
)

329 
out
;

333 i‡(
	`xfs_bm≠_⁄e_block
(
dp
, 
XFS_ATTR_FORK
))

334 
îr‹
 = 
	`xfs_©å_Àaf_add«me
(&
¨gs
);

336 
îr‹
 = 
	`xfs_©å_node_add«me
(&
¨gs
);

337 i‡(
îr‹
)

338 
out
;

344 i‡(
mp
->
m_Êags
 & 
XFS_MOUNT_WSYNC
)

345 
	`xfs_å™s_£t_sync
(
¨gs
.
å™s
);

347 i‡((
Êags
 & 
ATTR_KERNOTIME
) == 0)

348 
	`xfs_å™s_ichgtime
(
¨gs
.
å™s
, 
dp
, 
XFS_ICHGTIME_CHG
);

353 
	`xfs_å™s_log_öode
(
¨gs
.
å™s
, 
dp
, 
XFS_ILOG_CORE
);

354 
îr‹
 = 
	`xfs_å™s_commô
(
¨gs
.
å™s
);

355 
	`xfs_iu∆ock
(
dp
, 
XFS_ILOCK_EXCL
);

357  
îr‹
;

359 
out
:

360 i‡(
¨gs
.
å™s
)

361 
	`xfs_å™s_ˇn˚l
(
¨gs
.
å™s
);

362 
	`xfs_iu∆ock
(
dp
, 
XFS_ILOCK_EXCL
);

363  
îr‹
;

364 
	}
}

371 
	$xfs_©å_ªmove
(

372 
xfs_öode
 *
dp
,

373 c⁄° *
«me
,

374 
Êags
)

376 
xfs_mou¡
 *
mp
 = 
dp
->
i_mou¡
;

377 
xfs_da_¨gs
 
¨gs
;

378 
xfs_de„r_›s
 
df›s
;

379 
xfs_fsblock_t
 
fú°block
;

380 
îr‹
;

382 
	`XFS_STATS_INC
(
mp
, 
xs_©å_ªmove
);

384 i‡(
	`XFS_FORCED_SHUTDOWN
(
dp
->
i_mou¡
))

385  -
EIO
;

387 
îr‹
 = 
	`xfs_©å_¨gs_öô
(&
¨gs
, 
dp
, 
«me
, 
Êags
);

388 i‡(
îr‹
)

389  
îr‹
;

391 
¨gs
.
fú°block
 = &firstblock;

392 
¨gs
.
df›s
 = &dfops;

399 
¨gs
.
›_Êags
 = 
XFS_DA_OP_OKNOENT
;

401 
îr‹
 = 
	`xfs_qm_dq©èch
(
dp
, 0);

402 i‡(
îr‹
)

403  
îr‹
;

409 
îr‹
 = 
	`xfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_©årm
,

410 
	`XFS_ATTRRM_SPACE_RES
(
mp
), 0,

411 (
Êags
 & 
ATTR_ROOT
Ë? 
XFS_TRANS_RESERVE
 : 0,

412 &
¨gs
.
å™s
);

413 i‡(
îr‹
)

414  
îr‹
;

416 
	`xfs_ûock
(
dp
, 
XFS_ILOCK_EXCL
);

421 
	`xfs_å™s_ijoö
(
¨gs
.
å™s
, 
dp
, 0);

423 i‡(!
	`xfs_öode_haßâr
(
dp
)) {

424 
îr‹
 = -
ENOATTR
;

425 } i‡(
dp
->
i_d
.
di_af‹m©
 =
XFS_DINODE_FMT_LOCAL
) {

426 
	`ASSERT
(
dp
->
i_aÂ
->
if_Êags
 & 
XFS_IFINLINE
);

427 
îr‹
 = 
	`xfs_©å_sh‹tf‹m_ªmove
(&
¨gs
);

428 } i‡(
	`xfs_bm≠_⁄e_block
(
dp
, 
XFS_ATTR_FORK
)) {

429 
îr‹
 = 
	`xfs_©å_Àaf_ªmovíame
(&
¨gs
);

431 
îr‹
 = 
	`xfs_©å_node_ªmovíame
(&
¨gs
);

434 i‡(
îr‹
)

435 
out
;

441 i‡(
mp
->
m_Êags
 & 
XFS_MOUNT_WSYNC
)

442 
	`xfs_å™s_£t_sync
(
¨gs
.
å™s
);

444 i‡((
Êags
 & 
ATTR_KERNOTIME
) == 0)

445 
	`xfs_å™s_ichgtime
(
¨gs
.
å™s
, 
dp
, 
XFS_ICHGTIME_CHG
);

450 
	`xfs_å™s_log_öode
(
¨gs
.
å™s
, 
dp
, 
XFS_ILOG_CORE
);

451 
îr‹
 = 
	`xfs_å™s_commô
(
¨gs
.
å™s
);

452 
	`xfs_iu∆ock
(
dp
, 
XFS_ILOCK_EXCL
);

454  
îr‹
;

456 
out
:

457 i‡(
¨gs
.
å™s
)

458 
	`xfs_å™s_ˇn˚l
(
¨gs
.
å™s
);

459 
	`xfs_iu∆ock
(
dp
, 
XFS_ILOCK_EXCL
);

460  
îr‹
;

461 
	}
}

471 
STATIC
 

472 
	$xfs_©å_sh‹tf‹m_add«me
(
xfs_da_¨gs_t
 *
¨gs
)

474 
√wsize
, 
f‹koff
, 
ªtvÆ
;

476 
	`åa˚_xfs_©å_sf_add«me
(
¨gs
);

478 
ªtvÆ
 = 
	`xfs_©å_sh‹tf‹m_lookup
(
¨gs
);

479 i‡((
¨gs
->
Êags
 & 
ATTR_REPLACE
Ë&& (
ªtvÆ
 =-
ENOATTR
)) {

480  
ªtvÆ
;

481 } i‡(
ªtvÆ
 =-
EEXIST
) {

482 i‡(
¨gs
->
Êags
 & 
ATTR_CREATE
)

483  
ªtvÆ
;

484 
ªtvÆ
 = 
	`xfs_©å_sh‹tf‹m_ªmove
(
¨gs
);

485 
	`ASSERT
(
ªtvÆ
 == 0);

488 i‡(
¨gs
->
«mñí
 >
XFS_ATTR_SF_ENTSIZE_MAX
 ||

489 
¨gs
->
vÆuñí
 >
XFS_ATTR_SF_ENTSIZE_MAX
)

490  -
ENOSPC
;

492 
√wsize
 = 
	`XFS_ATTR_SF_TOTSIZE
(
¨gs
->
dp
);

493 
√wsize
 +
	`XFS_ATTR_SF_ENTSIZE_BYNAME
(
¨gs
->
«mñí
,árgs->
vÆuñí
);

495 
f‹koff
 = 
	`xfs_©å_sh‹tf‹m_byãsfô
(
¨gs
->
dp
, 
√wsize
);

496 i‡(!
f‹koff
)

497  -
ENOSPC
;

499 
	`xfs_©å_sh‹tf‹m_add
(
¨gs
, 
f‹koff
);

501 
	}
}

514 
STATIC
 

515 
	$xfs_©å_Àaf_add«me
(
xfs_da_¨gs_t
 *
¨gs
)

517 
xfs_öode_t
 *
dp
;

518 
xfs_buf
 *
bp
;

519 
ªtvÆ
, 
îr‹
, 
f‹koff
;

521 
	`åa˚_xfs_©å_Àaf_add«me
(
¨gs
);

526 
dp
 = 
¨gs
->dp;

527 
¨gs
->
blkno
 = 0;

528 
îr‹
 = 
	`xfs_©å3_Àaf_ªad
(
¨gs
->
å™s
,árgs->
dp
,árgs->
blkno
, -1, &
bp
);

529 i‡(
îr‹
)

530  
îr‹
;

536 
ªtvÆ
 = 
	`xfs_©å3_Àaf_lookup_öt
(
bp
, 
¨gs
);

537 i‡((
¨gs
->
Êags
 & 
ATTR_REPLACE
Ë&& (
ªtvÆ
 =-
ENOATTR
)) {

538 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
bp
);

539  
ªtvÆ
;

540 } i‡(
ªtvÆ
 =-
EEXIST
) {

541 i‡(
¨gs
->
Êags
 & 
ATTR_CREATE
) {

542 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
bp
);

543  
ªtvÆ
;

546 
	`åa˚_xfs_©å_Àaf_ª∂a˚
(
¨gs
);

549 
¨gs
->
›_Êags
 |
XFS_DA_OP_RENAME
;

550 
¨gs
->
blkno2
 =árgs->
blkno
;

551 
¨gs
->
ödex2
 =árgs->
ödex
;

552 
¨gs
->
rmtblkno2
 =árgs->
rmtblkno
;

553 
¨gs
->
rmtblk˙t2
 =árgs->
rmtblk˙t
;

554 
¨gs
->
rmtvÆuñí2
 =árgs->
rmtvÆuñí
;

561 
¨gs
->
rmtblkno
 = 0;

562 
¨gs
->
rmtblk˙t
 = 0;

563 
¨gs
->
rmtvÆuñí
 = 0;

570 
ªtvÆ
 = 
	`xfs_©å3_Àaf_add
(
bp
, 
¨gs
);

571 i‡(
ªtvÆ
 =-
ENOSPC
) {

577 
	`xfs_de„r_öô
(
¨gs
->
df›s
,árgs->
fú°block
);

578 
îr‹
 = 
	`xfs_©å3_Àaf_to_node
(
¨gs
);

579 i‡(!
îr‹
)

580 
îr‹
 = 
	`xfs_de„r_föish
(&
¨gs
->
å™s
,árgs->
df›s
, 
dp
);

581 i‡(
îr‹
) {

582 
¨gs
->
å™s
 = 
NULL
;

583 
	`xfs_de„r_ˇn˚l
(
¨gs
->
df›s
);

584  
îr‹
;

591 
îr‹
 = 
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
, 
dp
);

592 i‡(
îr‹
)

593  
îr‹
;

598 
îr‹
 = 
	`xfs_©å_node_add«me
(
¨gs
);

599  
îr‹
;

606 
îr‹
 = 
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
, 
dp
);

607 i‡(
îr‹
)

608  
îr‹
;

616 i‡(
¨gs
->
rmtblkno
 > 0) {

617 
îr‹
 = 
	`xfs_©å_rmtvÆ_£t
(
¨gs
);

618 i‡(
îr‹
)

619  
îr‹
;

628 i‡(
¨gs
->
›_Êags
 & 
XFS_DA_OP_RENAME
) {

633 
îr‹
 = 
	`xfs_©å3_Àaf_ÊùÊags
(
¨gs
);

634 i‡(
îr‹
)

635  
îr‹
;

641 
¨gs
->
ödex
 =árgs->
ödex2
;

642 
¨gs
->
blkno
 =árgs->
blkno2
;

643 
¨gs
->
rmtblkno
 =árgs->
rmtblkno2
;

644 
¨gs
->
rmtblk˙t
 =árgs->
rmtblk˙t2
;

645 
¨gs
->
rmtvÆuñí
 =árgs->
rmtvÆuñí2
;

646 i‡(
¨gs
->
rmtblkno
) {

647 
îr‹
 = 
	`xfs_©å_rmtvÆ_ªmove
(
¨gs
);

648 i‡(
îr‹
)

649  
îr‹
;

656 
îr‹
 = 
	`xfs_©å3_Àaf_ªad
(
¨gs
->
å™s
,árgs->
dp
,árgs->
blkno
,

657 -1, &
bp
);

658 i‡(
îr‹
)

659  
îr‹
;

661 
	`xfs_©å3_Àaf_ªmove
(
bp
, 
¨gs
);

666 i‡((
f‹koff
 = 
	`xfs_©å_sh‹tf‹m_Ælfô
(
bp
, 
dp
))) {

667 
	`xfs_de„r_öô
(
¨gs
->
df›s
,árgs->
fú°block
);

668 
îr‹
 = 
	`xfs_©å3_Àaf_to_sh‹tf‹m
(
bp
, 
¨gs
, 
f‹koff
);

670 i‡(!
îr‹
)

671 
îr‹
 = 
	`xfs_de„r_föish
(&
¨gs
->
å™s
,

672 
¨gs
->
df›s
, 
dp
);

673 i‡(
îr‹
) {

674 
¨gs
->
å™s
 = 
NULL
;

675 
	`xfs_de„r_ˇn˚l
(
¨gs
->
df›s
);

676  
îr‹
;

683 
îr‹
 = 
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
, 
dp
);

685 } i‡(
¨gs
->
rmtblkno
 > 0) {

689 
îr‹
 = 
	`xfs_©å3_Àaf_˛órÊag
(
¨gs
);

691  
îr‹
;

692 
	}
}

700 
STATIC
 

701 
	$xfs_©å_Àaf_ªmovíame
(
xfs_da_¨gs_t
 *
¨gs
)

703 
xfs_öode_t
 *
dp
;

704 
xfs_buf
 *
bp
;

705 
îr‹
, 
f‹koff
;

707 
	`åa˚_xfs_©å_Àaf_ªmovíame
(
¨gs
);

712 
dp
 = 
¨gs
->dp;

713 
¨gs
->
blkno
 = 0;

714 
îr‹
 = 
	`xfs_©å3_Àaf_ªad
(
¨gs
->
å™s
,árgs->
dp
,árgs->
blkno
, -1, &
bp
);

715 i‡(
îr‹
)

716  
îr‹
;

718 
îr‹
 = 
	`xfs_©å3_Àaf_lookup_öt
(
bp
, 
¨gs
);

719 i‡(
îr‹
 =-
ENOATTR
) {

720 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
bp
);

721  
îr‹
;

724 
	`xfs_©å3_Àaf_ªmove
(
bp
, 
¨gs
);

729 i‡((
f‹koff
 = 
	`xfs_©å_sh‹tf‹m_Ælfô
(
bp
, 
dp
))) {

730 
	`xfs_de„r_öô
(
¨gs
->
df›s
,árgs->
fú°block
);

731 
îr‹
 = 
	`xfs_©å3_Àaf_to_sh‹tf‹m
(
bp
, 
¨gs
, 
f‹koff
);

733 i‡(!
îr‹
)

734 
îr‹
 = 
	`xfs_de„r_föish
(&
¨gs
->
å™s
,árgs->
df›s
, 
dp
);

735 i‡(
îr‹
) {

736 
¨gs
->
å™s
 = 
NULL
;

737 
	`xfs_de„r_ˇn˚l
(
¨gs
->
df›s
);

738  
îr‹
;

742 
	}
}

750 
STATIC
 

751 
	$xfs_©å_Àaf_gë
(
xfs_da_¨gs_t
 *
¨gs
)

753 
xfs_buf
 *
bp
;

754 
îr‹
;

756 
	`åa˚_xfs_©å_Àaf_gë
(
¨gs
);

758 
¨gs
->
blkno
 = 0;

759 
îr‹
 = 
	`xfs_©å3_Àaf_ªad
(
¨gs
->
å™s
,árgs->
dp
,árgs->
blkno
, -1, &
bp
);

760 i‡(
îr‹
)

761  
îr‹
;

763 
îr‹
 = 
	`xfs_©å3_Àaf_lookup_öt
(
bp
, 
¨gs
);

764 i‡(
îr‹
 !-
EEXIST
) {

765 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
bp
);

766  
îr‹
;

768 
îr‹
 = 
	`xfs_©å3_Àaf_gëvÆue
(
bp
, 
¨gs
);

769 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
bp
);

770 i‡(!
îr‹
 && (
¨gs
->
rmtblkno
 > 0Ë&& !◊rgs->
Êags
 & 
ATTR_KERNOVAL
)) {

771 
îr‹
 = 
	`xfs_©å_rmtvÆ_gë
(
¨gs
);

773  
îr‹
;

774 
	}
}

790 
STATIC
 

791 
	$xfs_©å_node_add«me
(
xfs_da_¨gs_t
 *
¨gs
)

793 
xfs_da_°©e_t
 *
°©e
;

794 
xfs_da_°©e_blk_t
 *
blk
;

795 
xfs_öode_t
 *
dp
;

796 
xfs_mou¡_t
 *
mp
;

797 
ªtvÆ
, 
îr‹
;

799 
	`åa˚_xfs_©å_node_add«me
(
¨gs
);

804 
dp
 = 
¨gs
->dp;

805 
mp
 = 
dp
->
i_mou¡
;

806 
ª°¨t
:

807 
°©e
 = 
	`xfs_da_°©e_Æloc
();

808 
°©e
->
¨gs
 =árgs;

809 
°©e
->
mp
 = mp;

815 
îr‹
 = 
	`xfs_da3_node_lookup_öt
(
°©e
, &
ªtvÆ
);

816 i‡(
îr‹
)

817 
out
;

818 
blk
 = &
°©e
->
∑th
.blk[ sèã->∑th.
a˘ive
-1 ];

819 
	`ASSERT
(
blk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
);

820 i‡((
¨gs
->
Êags
 & 
ATTR_REPLACE
Ë&& (
ªtvÆ
 =-
ENOATTR
)) {

821 
out
;

822 } i‡(
ªtvÆ
 =-
EEXIST
) {

823 i‡(
¨gs
->
Êags
 & 
ATTR_CREATE
)

824 
out
;

826 
	`åa˚_xfs_©å_node_ª∂a˚
(
¨gs
);

829 
¨gs
->
›_Êags
 |
XFS_DA_OP_RENAME
;

830 
¨gs
->
blkno2
 =árgs->
blkno
;

831 
¨gs
->
ödex2
 =árgs->
ödex
;

832 
¨gs
->
rmtblkno2
 =árgs->
rmtblkno
;

833 
¨gs
->
rmtblk˙t2
 =árgs->
rmtblk˙t
;

834 
¨gs
->
rmtvÆuñí2
 =árgs->
rmtvÆuñí
;

841 
¨gs
->
rmtblkno
 = 0;

842 
¨gs
->
rmtblk˙t
 = 0;

843 
¨gs
->
rmtvÆuñí
 = 0;

846 
ªtvÆ
 = 
	`xfs_©å3_Àaf_add
(
blk
->
bp
, 
°©e
->
¨gs
);

847 i‡(
ªtvÆ
 =-
ENOSPC
) {

848 i‡(
°©e
->
∑th
.
a˘ive
 == 1) {

854 
	`xfs_da_°©e_‰ì
(
°©e
);

855 
°©e
 = 
NULL
;

856 
	`xfs_de„r_öô
(
¨gs
->
df›s
,árgs->
fú°block
);

857 
îr‹
 = 
	`xfs_©å3_Àaf_to_node
(
¨gs
);

858 i‡(!
îr‹
)

859 
îr‹
 = 
	`xfs_de„r_föish
(&
¨gs
->
å™s
,

860 
¨gs
->
df›s
, 
dp
);

861 i‡(
îr‹
) {

862 
¨gs
->
å™s
 = 
NULL
;

863 
	`xfs_de„r_ˇn˚l
(
¨gs
->
df›s
);

864 
out
;

871 
îr‹
 = 
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
, 
dp
);

872 i‡(
îr‹
)

873 
out
;

875 
ª°¨t
;

884 
	`xfs_de„r_öô
(
¨gs
->
df›s
,árgs->
fú°block
);

885 
îr‹
 = 
	`xfs_da3_•lô
(
°©e
);

886 i‡(!
îr‹
)

887 
îr‹
 = 
	`xfs_de„r_föish
(&
¨gs
->
å™s
,árgs->
df›s
, 
dp
);

888 i‡(
îr‹
) {

889 
¨gs
->
å™s
 = 
NULL
;

890 
	`xfs_de„r_ˇn˚l
(
¨gs
->
df›s
);

891 
out
;

897 
	`xfs_da3_fixhash∑th
(
°©e
, &°©e->
∑th
);

904 
	`xfs_da_°©e_‰ì
(
°©e
);

905 
°©e
 = 
NULL
;

911 
îr‹
 = 
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
, 
dp
);

912 i‡(
îr‹
)

913 
out
;

921 i‡(
¨gs
->
rmtblkno
 > 0) {

922 
îr‹
 = 
	`xfs_©å_rmtvÆ_£t
(
¨gs
);

923 i‡(
îr‹
)

924  
îr‹
;

933 i‡(
¨gs
->
›_Êags
 & 
XFS_DA_OP_RENAME
) {

938 
îr‹
 = 
	`xfs_©å3_Àaf_ÊùÊags
(
¨gs
);

939 i‡(
îr‹
)

940 
out
;

946 
¨gs
->
ödex
 =árgs->
ödex2
;

947 
¨gs
->
blkno
 =árgs->
blkno2
;

948 
¨gs
->
rmtblkno
 =árgs->
rmtblkno2
;

949 
¨gs
->
rmtblk˙t
 =árgs->
rmtblk˙t2
;

950 
¨gs
->
rmtvÆuñí
 =árgs->
rmtvÆuñí2
;

951 i‡(
¨gs
->
rmtblkno
) {

952 
îr‹
 = 
	`xfs_©å_rmtvÆ_ªmove
(
¨gs
);

953 i‡(
îr‹
)

954  
îr‹
;

962 
¨gs
->
Êags
 |
XFS_ATTR_INCOMPLETE
;

963 
°©e
 = 
	`xfs_da_°©e_Æloc
();

964 
°©e
->
¨gs
 =árgs;

965 
°©e
->
mp
 = mp;

966 
°©e
->
öÀaf
 = 0;

967 
îr‹
 = 
	`xfs_da3_node_lookup_öt
(
°©e
, &
ªtvÆ
);

968 i‡(
îr‹
)

969 
out
;

974 
blk
 = &
°©e
->
∑th
.blk[ sèã->∑th.
a˘ive
-1 ];

975 
	`ASSERT
(
blk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
);

976 
îr‹
 = 
	`xfs_©å3_Àaf_ªmove
(
blk
->
bp
, 
¨gs
);

977 
	`xfs_da3_fixhash∑th
(
°©e
, &°©e->
∑th
);

982 i‡(
ªtvÆ
 && (
°©e
->
∑th
.
a˘ive
 > 1)) {

983 
	`xfs_de„r_öô
(
¨gs
->
df›s
,árgs->
fú°block
);

984 
îr‹
 = 
	`xfs_da3_joö
(
°©e
);

985 i‡(!
îr‹
)

986 
îr‹
 = 
	`xfs_de„r_föish
(&
¨gs
->
å™s
,

987 
¨gs
->
df›s
, 
dp
);

988 i‡(
îr‹
) {

989 
¨gs
->
å™s
 = 
NULL
;

990 
	`xfs_de„r_ˇn˚l
(
¨gs
->
df›s
);

991 
out
;

998 
îr‹
 = 
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
, 
dp
);

999 i‡(
îr‹
)

1000 
out
;

1002 } i‡(
¨gs
->
rmtblkno
 > 0) {

1006 
îr‹
 = 
	`xfs_©å3_Àaf_˛órÊag
(
¨gs
);

1007 i‡(
îr‹
)

1008 
out
;

1010 
ªtvÆ
 = 
îr‹
 = 0;

1012 
out
:

1013 i‡(
°©e
)

1014 
	`xfs_da_°©e_‰ì
(
°©e
);

1015 i‡(
îr‹
)

1016  
îr‹
;

1017  
ªtvÆ
;

1018 
	}
}

1027 
STATIC
 

1028 
	$xfs_©å_node_ªmovíame
(
xfs_da_¨gs_t
 *
¨gs
)

1030 
xfs_da_°©e_t
 *
°©e
;

1031 
xfs_da_°©e_blk_t
 *
blk
;

1032 
xfs_öode_t
 *
dp
;

1033 
xfs_buf
 *
bp
;

1034 
ªtvÆ
, 
îr‹
, 
f‹koff
;

1036 
	`åa˚_xfs_©å_node_ªmovíame
(
¨gs
);

1041 
dp
 = 
¨gs
->dp;

1042 
°©e
 = 
	`xfs_da_°©e_Æloc
();

1043 
°©e
->
¨gs
 =árgs;

1044 
°©e
->
mp
 = 
dp
->
i_mou¡
;

1049 
îr‹
 = 
	`xfs_da3_node_lookup_öt
(
°©e
, &
ªtvÆ
);

1050 i‡(
îr‹
 || (
ªtvÆ
 !-
EEXIST
)) {

1051 i‡(
îr‹
 == 0)

1052 
îr‹
 = 
ªtvÆ
;

1053 
out
;

1061 
blk
 = &
°©e
->
∑th
.blk[ sèã->∑th.
a˘ive
-1 ];

1062 
	`ASSERT
(
blk
->
bp
 !
NULL
);

1063 
	`ASSERT
(
blk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
);

1064 i‡(
¨gs
->
rmtblkno
 > 0) {

1070 
îr‹
 = 
	`xfs_©å_fûl°©e
(
°©e
);

1071 i‡(
îr‹
)

1072 
out
;

1078 
îr‹
 = 
	`xfs_©å3_Àaf_£tÊag
(
¨gs
);

1079 i‡(
îr‹
)

1080 
out
;

1081 
îr‹
 = 
	`xfs_©å_rmtvÆ_ªmove
(
¨gs
);

1082 i‡(
îr‹
)

1083 
out
;

1089 
îr‹
 = 
	`xfs_©å_ªfûl°©e
(
°©e
);

1090 i‡(
îr‹
)

1091 
out
;

1097 
blk
 = &
°©e
->
∑th
.blk[ sèã->∑th.
a˘ive
-1 ];

1098 
	`ASSERT
(
blk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
);

1099 
ªtvÆ
 = 
	`xfs_©å3_Àaf_ªmove
(
blk
->
bp
, 
¨gs
);

1100 
	`xfs_da3_fixhash∑th
(
°©e
, &°©e->
∑th
);

1105 i‡(
ªtvÆ
 && (
°©e
->
∑th
.
a˘ive
 > 1)) {

1106 
	`xfs_de„r_öô
(
¨gs
->
df›s
,árgs->
fú°block
);

1107 
îr‹
 = 
	`xfs_da3_joö
(
°©e
);

1108 i‡(!
îr‹
)

1109 
îr‹
 = 
	`xfs_de„r_föish
(&
¨gs
->
å™s
,árgs->
df›s
, 
dp
);

1110 i‡(
îr‹
) {

1111 
¨gs
->
å™s
 = 
NULL
;

1112 
	`xfs_de„r_ˇn˚l
(
¨gs
->
df›s
);

1113 
out
;

1118 
îr‹
 = 
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
, 
dp
);

1119 i‡(
îr‹
)

1120 
out
;

1126 i‡(
	`xfs_bm≠_⁄e_block
(
dp
, 
XFS_ATTR_FORK
)) {

1130 
	`ASSERT
(
°©e
->
∑th
.
a˘ive
 == 1);

1131 
	`ASSERT
(
°©e
->
∑th
.
blk
[0].
bp
);

1132 
°©e
->
∑th
.
blk
[0].
bp
 = 
NULL
;

1134 
îr‹
 = 
	`xfs_©å3_Àaf_ªad
(
¨gs
->
å™s
,árgs->
dp
, 0, -1, &
bp
);

1135 i‡(
îr‹
)

1136 
out
;

1138 i‡((
f‹koff
 = 
	`xfs_©å_sh‹tf‹m_Ælfô
(
bp
, 
dp
))) {

1139 
	`xfs_de„r_öô
(
¨gs
->
df›s
,árgs->
fú°block
);

1140 
îr‹
 = 
	`xfs_©å3_Àaf_to_sh‹tf‹m
(
bp
, 
¨gs
, 
f‹koff
);

1142 i‡(!
îr‹
)

1143 
îr‹
 = 
	`xfs_de„r_föish
(&
¨gs
->
å™s
,

1144 
¨gs
->
df›s
, 
dp
);

1145 i‡(
îr‹
) {

1146 
¨gs
->
å™s
 = 
NULL
;

1147 
	`xfs_de„r_ˇn˚l
(
¨gs
->
df›s
);

1148 
out
;

1151 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
bp
);

1153 
îr‹
 = 0;

1155 
out
:

1156 
	`xfs_da_°©e_‰ì
(
°©e
);

1157  
îr‹
;

1158 
	}
}

1166 
STATIC
 

1167 
	$xfs_©å_fûl°©e
(
xfs_da_°©e_t
 *
°©e
)

1169 
xfs_da_°©e_∑th_t
 *
∑th
;

1170 
xfs_da_°©e_blk_t
 *
blk
;

1171 
Àvñ
;

1173 
	`åa˚_xfs_©å_fûl°©e
(
°©e
->
¨gs
);

1179 
∑th
 = &
°©e
->path;

1180 
	`ASSERT
((
∑th
->
a˘ive
 >0Ë&& (∑th->a˘ivê< 
XFS_DA_NODE_MAXDEPTH
));

1181 
blk
 = 
∑th
->blk, 
Àvñ
 = 0;Üevñ <Ö©h->
a˘ive
; blk++,Üevel++) {

1182 i‡(
blk
->
bp
) {

1183 
blk
->
disk_blkno
 = 
	`XFS_BUF_ADDR
(blk->
bp
);

1184 
blk
->
bp
 = 
NULL
;

1186 
blk
->
disk_blkno
 = 0;

1194 
∑th
 = &
°©e
->
Æç©h
;

1195 
	`ASSERT
((
∑th
->
a˘ive
 >0Ë&& (∑th->a˘ivê< 
XFS_DA_NODE_MAXDEPTH
));

1196 
blk
 = 
∑th
->blk, 
Àvñ
 = 0;Üevñ <Ö©h->
a˘ive
; blk++,Üevel++) {

1197 i‡(
blk
->
bp
) {

1198 
blk
->
disk_blkno
 = 
	`XFS_BUF_ADDR
(blk->
bp
);

1199 
blk
->
bp
 = 
NULL
;

1201 
blk
->
disk_blkno
 = 0;

1206 
	}
}

1214 
STATIC
 

1215 
	$xfs_©å_ªfûl°©e
(
xfs_da_°©e_t
 *
°©e
)

1217 
xfs_da_°©e_∑th_t
 *
∑th
;

1218 
xfs_da_°©e_blk_t
 *
blk
;

1219 
Àvñ
, 
îr‹
;

1221 
	`åa˚_xfs_©å_ªfûl°©e
(
°©e
->
¨gs
);

1227 
∑th
 = &
°©e
->path;

1228 
	`ASSERT
((
∑th
->
a˘ive
 >0Ë&& (∑th->a˘ivê< 
XFS_DA_NODE_MAXDEPTH
));

1229 
blk
 = 
∑th
->blk, 
Àvñ
 = 0;Üevñ <Ö©h->
a˘ive
; blk++,Üevel++) {

1230 i‡(
blk
->
disk_blkno
) {

1231 
îr‹
 = 
	`xfs_da3_node_ªad
(
°©e
->
¨gs
->
å™s
,

1232 
°©e
->
¨gs
->
dp
,

1233 
blk
->
blkno
, blk->
disk_blkno
,

1234 &
blk
->
bp
, 
XFS_ATTR_FORK
);

1235 i‡(
îr‹
)

1236  
îr‹
;

1238 
blk
->
bp
 = 
NULL
;

1246 
∑th
 = &
°©e
->
Æç©h
;

1247 
	`ASSERT
((
∑th
->
a˘ive
 >0Ë&& (∑th->a˘ivê< 
XFS_DA_NODE_MAXDEPTH
));

1248 
blk
 = 
∑th
->blk, 
Àvñ
 = 0;Üevñ <Ö©h->
a˘ive
; blk++,Üevel++) {

1249 i‡(
blk
->
disk_blkno
) {

1250 
îr‹
 = 
	`xfs_da3_node_ªad
(
°©e
->
¨gs
->
å™s
,

1251 
°©e
->
¨gs
->
dp
,

1252 
blk
->
blkno
, blk->
disk_blkno
,

1253 &
blk
->
bp
, 
XFS_ATTR_FORK
);

1254 i‡(
îr‹
)

1255  
îr‹
;

1257 
blk
->
bp
 = 
NULL
;

1262 
	}
}

1271 
STATIC
 

1272 
	$xfs_©å_node_gë
(
xfs_da_¨gs_t
 *
¨gs
)

1274 
xfs_da_°©e_t
 *
°©e
;

1275 
xfs_da_°©e_blk_t
 *
blk
;

1276 
îr‹
, 
ªtvÆ
;

1277 
i
;

1279 
	`åa˚_xfs_©å_node_gë
(
¨gs
);

1281 
°©e
 = 
	`xfs_da_°©e_Æloc
();

1282 
°©e
->
¨gs
 =árgs;

1283 
°©e
->
mp
 = 
¨gs
->
dp
->
i_mou¡
;

1288 
îr‹
 = 
	`xfs_da3_node_lookup_öt
(
°©e
, &
ªtvÆ
);

1289 i‡(
îr‹
) {

1290 
ªtvÆ
 = 
îr‹
;

1291 } i‡(
ªtvÆ
 =-
EEXIST
) {

1292 
blk
 = &
°©e
->
∑th
.blk[ sèã->∑th.
a˘ive
-1 ];

1293 
	`ASSERT
(
blk
->
bp
 !
NULL
);

1294 
	`ASSERT
(
blk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
);

1299 
ªtvÆ
 = 
	`xfs_©å3_Àaf_gëvÆue
(
blk
->
bp
, 
¨gs
);

1300 i‡(!
ªtvÆ
 && (
¨gs
->
rmtblkno
 > 0)

1301 && !(
¨gs
->
Êags
 & 
ATTR_KERNOVAL
)) {

1302 
ªtvÆ
 = 
	`xfs_©å_rmtvÆ_gë
(
¨gs
);

1309 
i
 = 0; i < 
°©e
->
∑th
.
a˘ive
; i++) {

1310 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
°©e
->
∑th
.
blk
[
i
].
bp
);

1311 
°©e
->
∑th
.
blk
[
i
].
bp
 = 
NULL
;

1314 
	`xfs_da_°©e_‰ì
(
°©e
);

1315  
ªtvÆ
;

1316 
	}
}

	@libxfs/xfs_attr_leaf.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_sh¨ed.h
"

22 
	~"xfs_f‹m©.h
"

23 
	~"xfs_log_f‹m©.h
"

24 
	~"xfs_å™s_ªsv.h
"

25 
	~"xfs_bô.h
"

26 
	~"xfs_sb.h
"

27 
	~"xfs_mou¡.h
"

28 
	~"xfs_da_f‹m©.h
"

29 
	~"xfs_da_båì.h
"

30 
	~"xfs_öode.h
"

31 
	~"xfs_å™s.h
"

32 
	~"xfs_bm≠_båì.h
"

33 
	~"xfs_bm≠.h
"

34 
	~"xfs_©å_sf.h
"

35 
	~"xfs_©å_ªmŸe.h
"

36 
	~"xfs_©å_Àaf.h
"

37 
	~"xfs_åa˚.h
"

38 
	~"xfs_cksum.h
"

39 
	~"xfs_dú2.h
"

55 
STATIC
 
xfs_©å3_Àaf_¸óã
(
xfs_da_¨gs
 *
¨gs
,

56 
xfs_dablk_t
 
which_block
, 
xfs_buf
 **
bµ
);

57 
STATIC
 
xfs_©å3_Àaf_add_w‹k
(
xfs_buf
 *
Àaf_buf„r
,

58 
xfs_©å3_i˛óf_hdr
 *
ichdr
,

59 
xfs_da_¨gs
 *
¨gs
, 
‰ìm≠_ödex
);

60 
STATIC
 
xfs_©å3_Àaf_com∑˘
(
xfs_da_¨gs
 *
¨gs
,

61 
xfs_©å3_i˛óf_hdr
 *
ichdr
,

62 
xfs_buf
 *
Àaf_buf„r
);

63 
STATIC
 
xfs_©å3_Àaf_ªbÆ™˚
(
xfs_da_°©e_t
 *
°©e
,

64 
xfs_da_°©e_blk_t
 *
blk1
,

65 
xfs_da_°©e_blk_t
 *
blk2
);

66 
STATIC
 
xfs_©å3_Àaf_figuª_bÆ™˚
(
xfs_da_°©e_t
 *
°©e
,

67 
xfs_da_°©e_blk_t
 *
Àaf_blk_1
,

68 
xfs_©å3_i˛óf_hdr
 *
ichdr1
,

69 
xfs_da_°©e_blk_t
 *
Àaf_blk_2
,

70 
xfs_©å3_i˛óf_hdr
 *
ichdr2
,

71 *
numbî_íåõs_ö_blk1
,

72 *
numbî_u£dbyãs_ö_blk1
);

77 
STATIC
 
xfs_©å3_Àaf_movì¡s
(
xfs_da_¨gs
 *
¨gs
,

78 
xfs_©å_Àafblock
 *
§c_Àaf
,

79 
xfs_©å3_i˛óf_hdr
 *
§c_ichdr
, 
§c_°¨t
,

80 
xfs_©å_Àafblock
 *
d°_Àaf
,

81 
xfs_©å3_i˛óf_hdr
 *
d°_ichdr
, 
d°_°¨t
,

82 
move_cou¡
);

83 
STATIC
 
xfs_©å_Àaf_ítsize
(
xfs_©å_Àafblock_t
 *
Àaf
, 
ödex
);

102 
	$xfs_©å3_Àaf_fú°u£d_‰om_disk
(

103 
xfs_da_geomëry
 *
geo
,

104 
xfs_©å3_i˛óf_hdr
 *
to
,

105 
xfs_©å_Àafblock
 *
‰om
)

107 
xfs_©å3_Àaf_hdr
 *
hdr3
;

109 i‡(
‰om
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_ATTR3_LEAF_MAGIC
)) {

110 
hdr3
 = (
xfs_©å3_Àaf_hdr
 *Ë
‰om
;

111 
to
->
fú°u£d
 = 
	`be16_to_˝u
(
hdr3
->firstused);

113 
to
->
fú°u£d
 = 
	`be16_to_˝u
(
‰om
->
hdr
.firstused);

121 i‡(
to
->
fú°u£d
 =
XFS_ATTR3_LEAF_NULLOFF
) {

122 
	`ASSERT
(!
to
->
cou¡
 && !to->
u£dbyãs
);

123 
	`ASSERT
(
geo
->
blksize
 > 
USHRT_MAX
);

124 
to
->
fú°u£d
 = 
geo
->
blksize
;

126 
	}
}

129 
	$xfs_©å3_Àaf_fú°u£d_to_disk
(

130 
xfs_da_geomëry
 *
geo
,

131 
xfs_©å_Àafblock
 *
to
,

132 
xfs_©å3_i˛óf_hdr
 *
‰om
)

134 
xfs_©å3_Àaf_hdr
 *
hdr3
;

135 
uöt32_t
 
fú°u£d
;

138 
	`ASSERT
(
‰om
->
fú°u£d
 !
XFS_ATTR3_LEAF_NULLOFF
);

145 
fú°u£d
 = 
‰om
->firstused;

146 i‡(
fú°u£d
 > 
USHRT_MAX
) {

147 
	`ASSERT
(
‰om
->
fú°u£d
 =
geo
->
blksize
);

148 
fú°u£d
 = 
XFS_ATTR3_LEAF_NULLOFF
;

151 i‡(
‰om
->
magic
 =
XFS_ATTR3_LEAF_MAGIC
) {

152 
hdr3
 = (
xfs_©å3_Àaf_hdr
 *Ë
to
;

153 
hdr3
->
fú°u£d
 = 
	`˝u_to_be16
(firstused);

155 
to
->
hdr
.
fú°u£d
 = 
	`˝u_to_be16
(firstused);

157 
	}
}

160 
	$xfs_©å3_Àaf_hdr_‰om_disk
(

161 
xfs_da_geomëry
 *
geo
,

162 
xfs_©å3_i˛óf_hdr
 *
to
,

163 
xfs_©å_Àafblock
 *
‰om
)

165 
i
;

167 
	`ASSERT
(
‰om
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_ATTR_LEAF_MAGIC
) ||

168 
‰om
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_ATTR3_LEAF_MAGIC
));

170 i‡(
‰om
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_ATTR3_LEAF_MAGIC
)) {

171 
xfs_©å3_Àaf_hdr
 *
hdr3
 = (xfs_©å3_Àaf_hd∏*)
‰om
;

173 
to
->
f‹w
 = 
	`be32_to_˝u
(
hdr3
->
öfo
.
hdr
.forw);

174 
to
->
back
 = 
	`be32_to_˝u
(
hdr3
->
öfo
.
hdr
.back);

175 
to
->
magic
 = 
	`be16_to_˝u
(
hdr3
->
öfo
.
hdr
.magic);

176 
to
->
cou¡
 = 
	`be16_to_˝u
(
hdr3
->count);

177 
to
->
u£dbyãs
 = 
	`be16_to_˝u
(
hdr3
->usedbytes);

178 
	`xfs_©å3_Àaf_fú°u£d_‰om_disk
(
geo
, 
to
, 
‰om
);

179 
to
->
hﬁes
 = 
hdr3
->holes;

181 
i
 = 0; i < 
XFS_ATTR_LEAF_MAPSIZE
; i++) {

182 
to
->
‰ìm≠
[
i
].
ba£
 = 
	`be16_to_˝u
(
hdr3
->freemap[i].base);

183 
to
->
‰ìm≠
[
i
].
size
 = 
	`be16_to_˝u
(
hdr3
->freemap[i].size);

187 
to
->
f‹w
 = 
	`be32_to_˝u
(
‰om
->
hdr
.
öfo
.forw);

188 
to
->
back
 = 
	`be32_to_˝u
(
‰om
->
hdr
.
öfo
.back);

189 
to
->
magic
 = 
	`be16_to_˝u
(
‰om
->
hdr
.
öfo
.magic);

190 
to
->
cou¡
 = 
	`be16_to_˝u
(
‰om
->
hdr
.count);

191 
to
->
u£dbyãs
 = 
	`be16_to_˝u
(
‰om
->
hdr
.usedbytes);

192 
	`xfs_©å3_Àaf_fú°u£d_‰om_disk
(
geo
, 
to
, 
‰om
);

193 
to
->
hﬁes
 = 
‰om
->
hdr
.holes;

195 
i
 = 0; i < 
XFS_ATTR_LEAF_MAPSIZE
; i++) {

196 
to
->
‰ìm≠
[
i
].
ba£
 = 
	`be16_to_˝u
(
‰om
->
hdr
.freemap[i].base);

197 
to
->
‰ìm≠
[
i
].
size
 = 
	`be16_to_˝u
(
‰om
->
hdr
.freemap[i].size);

199 
	}
}

202 
	$xfs_©å3_Àaf_hdr_to_disk
(

203 
xfs_da_geomëry
 *
geo
,

204 
xfs_©å_Àafblock
 *
to
,

205 
xfs_©å3_i˛óf_hdr
 *
‰om
)

207 
i
;

209 
	`ASSERT
(
‰om
->
magic
 =
XFS_ATTR_LEAF_MAGIC
 ||

210 
‰om
->
magic
 =
XFS_ATTR3_LEAF_MAGIC
);

212 i‡(
‰om
->
magic
 =
XFS_ATTR3_LEAF_MAGIC
) {

213 
xfs_©å3_Àaf_hdr
 *
hdr3
 = (xfs_©å3_Àaf_hd∏*)
to
;

215 
hdr3
->
öfo
.
hdr
.
f‹w
 = 
	`˝u_to_be32
(
‰om
->forw);

216 
hdr3
->
öfo
.
hdr
.
back
 = 
	`˝u_to_be32
(
‰om
->back);

217 
hdr3
->
öfo
.
hdr
.
magic
 = 
	`˝u_to_be16
(
‰om
->magic);

218 
hdr3
->
cou¡
 = 
	`˝u_to_be16
(
‰om
->count);

219 
hdr3
->
u£dbyãs
 = 
	`˝u_to_be16
(
‰om
->usedbytes);

220 
	`xfs_©å3_Àaf_fú°u£d_to_disk
(
geo
, 
to
, 
‰om
);

221 
hdr3
->
hﬁes
 = 
‰om
->holes;

222 
hdr3
->
∑d1
 = 0;

224 
i
 = 0; i < 
XFS_ATTR_LEAF_MAPSIZE
; i++) {

225 
hdr3
->
‰ìm≠
[
i
].
ba£
 = 
	`˝u_to_be16
(
‰om
->freemap[i].base);

226 
hdr3
->
‰ìm≠
[
i
].
size
 = 
	`˝u_to_be16
(
‰om
->freemap[i].size);

230 
to
->
hdr
.
öfo
.
f‹w
 = 
	`˝u_to_be32
(
‰om
->forw);

231 
to
->
hdr
.
öfo
.
back
 = 
	`˝u_to_be32
(
‰om
->back);

232 
to
->
hdr
.
öfo
.
magic
 = 
	`˝u_to_be16
(
‰om
->magic);

233 
to
->
hdr
.
cou¡
 = 
	`˝u_to_be16
(
‰om
->count);

234 
to
->
hdr
.
u£dbyãs
 = 
	`˝u_to_be16
(
‰om
->usedbytes);

235 
	`xfs_©å3_Àaf_fú°u£d_to_disk
(
geo
, 
to
, 
‰om
);

236 
to
->
hdr
.
hﬁes
 = 
‰om
->holes;

237 
to
->
hdr
.
∑d1
 = 0;

239 
i
 = 0; i < 
XFS_ATTR_LEAF_MAPSIZE
; i++) {

240 
to
->
hdr
.
‰ìm≠
[
i
].
ba£
 = 
	`˝u_to_be16
(
‰om
->freemap[i].base);

241 
to
->
hdr
.
‰ìm≠
[
i
].
size
 = 
	`˝u_to_be16
(
‰om
->freemap[i].size);

243 
	}
}

245 
boﬁ


246 
	$xfs_©å3_Àaf_vîify
(

247 
xfs_buf
 *
bp
)

249 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

250 
xfs_©å_Àafblock
 *
Àaf
 = 
bp
->
b_addr
;

251 
xfs_≥øg
 *
∑g
 = 
bp
->
b_∑g
;

252 
xfs_©å3_i˛óf_hdr
 
ichdr
;

254 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
ichdr
, 
Àaf
);

256 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

257 
xfs_da3_node_hdr
 *
hdr3
 = 
bp
->
b_addr
;

259 i‡(
ichdr
.
magic
 !
XFS_ATTR3_LEAF_MAGIC
)

260  
Ál£
;

262 i‡(!
	`uuid_equÆ
(&
hdr3
->
öfo
.
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

263  
Ál£
;

264 i‡(
	`be64_to_˝u
(
hdr3
->
öfo
.
blkno
Ë!
bp
->
b_bn
)

265  
Ál£
;

266 i‡(!
	`xfs_log_check_l¢
(
mp
, 
	`be64_to_˝u
(
hdr3
->
öfo
.
l¢
)))

267  
Ál£
;

269 i‡(
ichdr
.
magic
 !
XFS_ATTR_LEAF_MAGIC
)

270  
Ál£
;

277 i‡(
∑g
 &&Öag->
∑gf_öô
 && 
ichdr
.
cou¡
 == 0)

278  
Ál£
;

283  
åue
;

284 
	}
}

287 
	$xfs_©å3_Àaf_wrôe_vîify
(

288 
xfs_buf
 *
bp
)

290 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

291 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

292 
xfs_©å3_Àaf_hdr
 *
hdr3
 = 
bp
->
b_addr
;

294 i‡(!
	`xfs_©å3_Àaf_vîify
(
bp
)) {

295 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

296 
	`xfs_vîifõr_îr‹
(
bp
);

300 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

303 i‡(
bù
)

304 
hdr3
->
öfo
.
l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

306 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_ATTR3_LEAF_CRC_OFF
);

307 
	}
}

316 
	$xfs_©å3_Àaf_ªad_vîify
(

317 
xfs_buf
 *
bp
)

319 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

321 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

322 !
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_ATTR3_LEAF_CRC_OFF
))

323 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

324 i‡(!
	`xfs_©å3_Àaf_vîify
(
bp
))

325 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

327 i‡(
bp
->
b_îr‹
)

328 
	`xfs_vîifõr_îr‹
(
bp
);

329 
	}
}

331 c⁄° 
xfs_buf_›s
 
	gxfs_©å3_Àaf_buf_›s
 = {

332 .
«me
 = "xfs_attr3_leaf",

333 .
	gvîify_ªad
 = 
xfs_©å3_Àaf_ªad_vîify
,

334 .
	gvîify_wrôe
 = 
xfs_©å3_Àaf_wrôe_vîify
,

338 
	$xfs_©å3_Àaf_ªad
(

339 
xfs_å™s
 *
ç
,

340 
xfs_öode
 *
dp
,

341 
xfs_dablk_t
 
bno
,

342 
xfs_daddr_t
 
m≠≥dbno
,

343 
xfs_buf
 **
bµ
)

345 
îr
;

347 
îr
 = 
	`xfs_da_ªad_buf
(
ç
, 
dp
, 
bno
, 
m≠≥dbno
, 
bµ
,

348 
XFS_ATTR_FORK
, &
xfs_©å3_Àaf_buf_›s
);

349 i‡(!
îr
 && 
ç
)

350 
	`xfs_å™s_buf_£t_ty≥
(
ç
, *
bµ
, 
XFS_BLFT_ATTR_LEAF_BUF
);

351  
îr
;

352 
	}
}

362 
STATIC
 

363 
	$xfs_©å_«me•_m©ch
(
¨g_Êags
, 
⁄disk_Êags
)

365  
	`XFS_ATTR_NSP_ONDISK
(
⁄disk_Êags
Ë=
	`XFS_ATTR_NSP_ARGS_TO_ONDISK
(
¨g_Êags
);

366 
	}
}

384 
	$xfs_©å_sh‹tf‹m_byãsfô
(
xfs_öode_t
 *
dp
, 
byãs
)

386 
off£t
;

387 
möf‹koff
;

388 
maxf‹koff
;

389 
dsize
;

390 
xfs_mou¡_t
 *
mp
 = 
dp
->
i_mou¡
;

393 
off£t
 = (
	`XFS_LITINO
(
mp
, 
dp
->
i_d
.
di_vîsi⁄
Ë- 
byãs
) >> 3;

395 
dp
->
i_d
.
di_f‹m©
) {

396 
XFS_DINODE_FMT_DEV
:

397 
möf‹koff
 = 
	`roundup
((
xfs_dev_t
), 8) >> 3;

398  (
off£t
 >
möf‹koff
) ? minforkoff : 0;

399 
XFS_DINODE_FMT_UUID
:

400 
möf‹koff
 = 
	`roundup
((
uuid_t
), 8) >> 3;

401  (
off£t
 >
möf‹koff
) ? minforkoff : 0;

414 i‡(
byãs
 <
	`XFS_IFORK_ASIZE
(
dp
))

415  
dp
->
i_d
.
di_f‹koff
;

422 i‡(!(
mp
->
m_Êags
 & 
XFS_MOUNT_ATTR2
))

425 
dsize
 = 
dp
->
i_df
.
if_byãs
;

427 
dp
->
i_d
.
di_f‹m©
) {

428 
XFS_DINODE_FMT_EXTENTS
:

436 i‡(!
dp
->
i_d
.
di_f‹koff
 && dp->
i_df
.
if_byãs
 >

437 
	`xfs_deÁu…_©åoff£t
(
dp
))

438 
dsize
 = 
	`XFS_BMDR_SPACE_CALC
(
MINDBTPTRS
);

440 
XFS_DINODE_FMT_BTREE
:

447 i‡(
dp
->
i_d
.
di_f‹koff
) {

448 i‡(
off£t
 < 
dp
->
i_d
.
di_f‹koff
)

450  
dp
->
i_d
.
di_f‹koff
;

452 
dsize
 = 
	`XFS_BMAP_BROOT_SPACE
(
mp
, 
dp
->
i_df
.
if_broŸ
);

460 
möf‹koff
 = 
	`MAX
(
dsize
, 
	`XFS_BMDR_SPACE_CALC
(
MINDBTPTRS
));

461 
möf‹koff
 = 
	`roundup
(minforkoff, 8) >> 3;

464 
maxf‹koff
 = 
	`XFS_LITINO
(
mp
, 
dp
->
i_d
.
di_vîsi⁄
) -

465 
	`XFS_BMDR_SPACE_CALC
(
MINABTPTRS
);

466 
maxf‹koff
 = maxforkoff >> 3;

468 i‡(
off£t
 >
maxf‹koff
)

469  
maxf‹koff
;

470 i‡(
off£t
 >
möf‹koff
)

471  
off£t
;

473 
	}
}

478 
STATIC
 

479 
	$xfs_sbvîsi⁄_add_©å2
(
xfs_mou¡_t
 *
mp
, 
xfs_å™s_t
 *
ç
)

481 i‡((
mp
->
m_Êags
 & 
XFS_MOUNT_ATTR2
) &&

482 !(
	`xfs_sb_vîsi⁄_haßâr2
(&
mp
->
m_sb
))) {

483 
	`•ö_lock
(&
mp
->
m_sb_lock
);

484 i‡(!
	`xfs_sb_vîsi⁄_haßâr2
(&
mp
->
m_sb
)) {

485 
	`xfs_sb_vîsi⁄_add©å2
(&
mp
->
m_sb
);

486 
	`•ö_u∆ock
(&
mp
->
m_sb_lock
);

487 
	`xfs_log_sb
(
ç
);

489 
	`•ö_u∆ock
(&
mp
->
m_sb_lock
);

491 
	}
}

497 
	$xfs_©å_sh‹tf‹m_¸óã
(
xfs_da_¨gs_t
 *
¨gs
)

499 
xfs_©å_sf_hdr_t
 *
hdr
;

500 
xfs_öode_t
 *
dp
;

501 
xfs_if‹k_t
 *
iÂ
;

503 
	`åa˚_xfs_©å_sf_¸óã
(
¨gs
);

505 
dp
 = 
¨gs
->dp;

506 
	`ASSERT
(
dp
 !
NULL
);

507 
iÂ
 = 
dp
->
i_aÂ
;

508 
	`ASSERT
(
iÂ
 !
NULL
);

509 
	`ASSERT
(
iÂ
->
if_byãs
 == 0);

510 i‡(
dp
->
i_d
.
di_af‹m©
 =
XFS_DINODE_FMT_EXTENTS
) {

511 
iÂ
->
if_Êags
 &~
XFS_IFEXTENTS
;

512 
dp
->
i_d
.
di_af‹m©
 = 
XFS_DINODE_FMT_LOCAL
;

513 
iÂ
->
if_Êags
 |
XFS_IFINLINE
;

515 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFINLINE
);

517 
	`xfs_id©a_ªÆloc
(
dp
, (*
hdr
), 
XFS_ATTR_FORK
);

518 
hdr
 = (
xfs_©å_sf_hdr_t
 *)
iÂ
->
if_u1
.
if_d©a
;

519 
hdr
->
cou¡
 = 0;

520 
hdr
->
tŸsize
 = 
	`˝u_to_be16
((*hdr));

521 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
, 
XFS_ILOG_CORE
 | 
XFS_ILOG_ADATA
);

522 
	}
}

529 
	$xfs_©å_sh‹tf‹m_add
(
xfs_da_¨gs_t
 *
¨gs
, 
f‹koff
)

531 
xfs_©å_sh‹tf‹m_t
 *
sf
;

532 
xfs_©å_sf_íåy_t
 *
s„
;

533 
i
, 
off£t
, 
size
;

534 
xfs_mou¡_t
 *
mp
;

535 
xfs_öode_t
 *
dp
;

536 
xfs_if‹k_t
 *
iÂ
;

538 
	`åa˚_xfs_©å_sf_add
(
¨gs
);

540 
dp
 = 
¨gs
->dp;

541 
mp
 = 
dp
->
i_mou¡
;

542 
dp
->
i_d
.
di_f‹koff
 = 
f‹koff
;

544 
iÂ
 = 
dp
->
i_aÂ
;

545 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFINLINE
);

546 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)
iÂ
->
if_u1
.
if_d©a
;

547 
s„
 = &
sf
->
li°
[0];

548 
i
 = 0; i < 
sf
->
hdr
.
cou¡
; 
s„
 = 
	`XFS_ATTR_SF_NEXTENTRY
(sfe), i++) {

549 #ifde‡
DEBUG


550 i‡(
s„
->
«mñí
 !
¨gs
->namelen)

552 i‡(
	`memcmp
(
¨gs
->
«me
, 
s„
->
«mevÆ
,árgs->
«mñí
) != 0)

554 i‡(!
	`xfs_©å_«me•_m©ch
(
¨gs
->
Êags
, 
s„
->flags))

556 
	`ASSERT
(0);

560 
off£t
 = (*)
s„
 - (*)
sf
;

561 
size
 = 
	`XFS_ATTR_SF_ENTSIZE_BYNAME
(
¨gs
->
«mñí
,árgs->
vÆuñí
);

562 
	`xfs_id©a_ªÆloc
(
dp
, 
size
, 
XFS_ATTR_FORK
);

563 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)
iÂ
->
if_u1
.
if_d©a
;

564 
s„
 = (
xfs_©å_sf_íåy_t
 *)((*)
sf
 + 
off£t
);

566 
s„
->
«mñí
 = 
¨gs
->namelen;

567 
s„
->
vÆuñí
 = 
¨gs
->valuelen;

568 
s„
->
Êags
 = 
	`XFS_ATTR_NSP_ARGS_TO_ONDISK
(
¨gs
->flags);

569 
	`mem˝y
(
s„
->
«mevÆ
, 
¨gs
->
«me
,árgs->
«mñí
);

570 
	`mem˝y
(&
s„
->
«mevÆ
[
¨gs
->
«mñí
],árgs->
vÆue
,árgs->
vÆuñí
);

571 
sf
->
hdr
.
cou¡
++;

572 
	`be16_add_˝u
(&
sf
->
hdr
.
tŸsize
, 
size
);

573 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
, 
XFS_ILOG_CORE
 | 
XFS_ILOG_ADATA
);

575 
	`xfs_sbvîsi⁄_add_©å2
(
mp
, 
¨gs
->
å™s
);

576 
	}
}

583 
	$xfs_©å_f‹k_ªmove
(

584 
xfs_öode
 *
ù
,

585 
xfs_å™s
 *
ç
)

587 
	`xfs_ide°roy_f‹k
(
ù
, 
XFS_ATTR_FORK
);

588 
ù
->
i_d
.
di_f‹koff
 = 0;

589 
ù
->
i_d
.
di_af‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

591 
	`ASSERT
(
ù
->
i_d
.
di_™exã¡s
 == 0);

592 
	`ASSERT
(
ù
->
i_aÂ
 =
NULL
);

594 
	`xfs_å™s_log_öode
(
ç
, 
ù
, 
XFS_ILOG_CORE
);

595 
	}
}

601 
	$xfs_©å_sh‹tf‹m_ªmove
(
xfs_da_¨gs_t
 *
¨gs
)

603 
xfs_©å_sh‹tf‹m_t
 *
sf
;

604 
xfs_©å_sf_íåy_t
 *
s„
;

605 
ba£
, 
size
=0, 
íd
, 
tŸsize
, 
i
;

606 
xfs_mou¡_t
 *
mp
;

607 
xfs_öode_t
 *
dp
;

609 
	`åa˚_xfs_©å_sf_ªmove
(
¨gs
);

611 
dp
 = 
¨gs
->dp;

612 
mp
 = 
dp
->
i_mou¡
;

613 
ba£
 = (
xfs_©å_sf_hdr_t
);

614 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)
dp
->
i_aÂ
->
if_u1
.
if_d©a
;

615 
s„
 = &
sf
->
li°
[0];

616 
íd
 = 
sf
->
hdr
.
cou¡
;

617 
i
 = 0; i < 
íd
; 
s„
 = 
	`XFS_ATTR_SF_NEXTENTRY
(sfe),

618 
ba£
 +
size
, 
i
++) {

619 
size
 = 
	`XFS_ATTR_SF_ENTSIZE
(
s„
);

620 i‡(
s„
->
«mñí
 !
¨gs
->namelen)

622 i‡(
	`memcmp
(
s„
->
«mevÆ
, 
¨gs
->
«me
,árgs->
«mñí
) != 0)

624 i‡(!
	`xfs_©å_«me•_m©ch
(
¨gs
->
Êags
, 
s„
->flags))

628 i‡(
i
 =
íd
)

629  -
ENOATTR
;

634 
íd
 = 
ba£
 + 
size
;

635 
tŸsize
 = 
	`be16_to_˝u
(
sf
->
hdr
.totsize);

636 i‡(
íd
 !
tŸsize
)

637 
	`memmove
(&((*)
sf
)[
ba£
], &((*)sf)[
íd
], 
tŸsize
 -Énd);

638 
sf
->
hdr
.
cou¡
--;

639 
	`be16_add_˝u
(&
sf
->
hdr
.
tŸsize
, -
size
);

644 
tŸsize
 -
size
;

645 i‡(
tŸsize
 =(
xfs_©å_sf_hdr_t
) &&

646 (
mp
->
m_Êags
 & 
XFS_MOUNT_ATTR2
) &&

647 (
dp
->
i_d
.
di_f‹m©
 !
XFS_DINODE_FMT_BTREE
) &&

648 !(
¨gs
->
›_Êags
 & 
XFS_DA_OP_ADDNAME
)) {

649 
	`xfs_©å_f‹k_ªmove
(
dp
, 
¨gs
->
å™s
);

651 
	`xfs_id©a_ªÆloc
(
dp
, -
size
, 
XFS_ATTR_FORK
);

652 
dp
->
i_d
.
di_f‹koff
 = 
	`xfs_©å_sh‹tf‹m_byãsfô
(dp, 
tŸsize
);

653 
	`ASSERT
(
dp
->
i_d
.
di_f‹koff
);

654 
	`ASSERT
(
tŸsize
 > (
xfs_©å_sf_hdr_t
) ||

655 (
¨gs
->
›_Êags
 & 
XFS_DA_OP_ADDNAME
) ||

656 !(
mp
->
m_Êags
 & 
XFS_MOUNT_ATTR2
) ||

657 
dp
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
);

658 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
,

659 
XFS_ILOG_CORE
 | 
XFS_ILOG_ADATA
);

662 
	`xfs_sbvîsi⁄_add_©å2
(
mp
, 
¨gs
->
å™s
);

665 
	}
}

672 
	$xfs_©å_sh‹tf‹m_lookup
(
xfs_da_¨gs_t
 *
¨gs
)

674 
xfs_©å_sh‹tf‹m_t
 *
sf
;

675 
xfs_©å_sf_íåy_t
 *
s„
;

676 
i
;

677 
xfs_if‹k_t
 *
iÂ
;

679 
	`åa˚_xfs_©å_sf_lookup
(
¨gs
);

681 
iÂ
 = 
¨gs
->
dp
->
i_aÂ
;

682 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFINLINE
);

683 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)
iÂ
->
if_u1
.
if_d©a
;

684 
s„
 = &
sf
->
li°
[0];

685 
i
 = 0; i < 
sf
->
hdr
.
cou¡
;

686 
s„
 = 
	`XFS_ATTR_SF_NEXTENTRY
(s„), 
i
++) {

687 i‡(
s„
->
«mñí
 !
¨gs
->namelen)

689 i‡(
	`memcmp
(
¨gs
->
«me
, 
s„
->
«mevÆ
,árgs->
«mñí
) != 0)

691 i‡(!
	`xfs_©å_«me•_m©ch
(
¨gs
->
Êags
, 
s„
->flags))

693  -
EEXIST
;

695  -
ENOATTR
;

696 
	}
}

703 
	$xfs_©å_sh‹tf‹m_gëvÆue
(
xfs_da_¨gs_t
 *
¨gs
)

705 
xfs_©å_sh‹tf‹m_t
 *
sf
;

706 
xfs_©å_sf_íåy_t
 *
s„
;

707 
i
;

709 
	`ASSERT
(
¨gs
->
dp
->
i_aÂ
->
if_Êags
 =
XFS_IFINLINE
);

710 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)
¨gs
->
dp
->
i_aÂ
->
if_u1
.
if_d©a
;

711 
s„
 = &
sf
->
li°
[0];

712 
i
 = 0; i < 
sf
->
hdr
.
cou¡
;

713 
s„
 = 
	`XFS_ATTR_SF_NEXTENTRY
(s„), 
i
++) {

714 i‡(
s„
->
«mñí
 !
¨gs
->namelen)

716 i‡(
	`memcmp
(
¨gs
->
«me
, 
s„
->
«mevÆ
,árgs->
«mñí
) != 0)

718 i‡(!
	`xfs_©å_«me•_m©ch
(
¨gs
->
Êags
, 
s„
->flags))

720 i‡(
¨gs
->
Êags
 & 
ATTR_KERNOVAL
) {

721 
¨gs
->
vÆuñí
 = 
s„
->valuelen;

722  -
EEXIST
;

724 i‡(
¨gs
->
vÆuñí
 < 
s„
->valuelen) {

725 
¨gs
->
vÆuñí
 = 
s„
->valuelen;

726  -
ERANGE
;

728 
¨gs
->
vÆuñí
 = 
s„
->valuelen;

729 
	`mem˝y
(
¨gs
->
vÆue
, &
s„
->
«mevÆ
[¨gs->
«mñí
],

730 
¨gs
->
vÆuñí
);

731  -
EEXIST
;

733  -
ENOATTR
;

734 
	}
}

740 
	$xfs_©å_sh‹tf‹m_to_Àaf
(
xfs_da_¨gs_t
 *
¨gs
)

742 
xfs_öode_t
 *
dp
;

743 
xfs_©å_sh‹tf‹m_t
 *
sf
;

744 
xfs_©å_sf_íåy_t
 *
s„
;

745 
xfs_da_¨gs_t
 
«rgs
;

746 *
tmpbuf„r
;

747 
îr‹
, 
i
, 
size
;

748 
xfs_dablk_t
 
blkno
;

749 
xfs_buf
 *
bp
;

750 
xfs_if‹k_t
 *
iÂ
;

752 
	`åa˚_xfs_©å_sf_to_Àaf
(
¨gs
);

754 
dp
 = 
¨gs
->dp;

755 
iÂ
 = 
dp
->
i_aÂ
;

756 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)
iÂ
->
if_u1
.
if_d©a
;

757 
size
 = 
	`be16_to_˝u
(
sf
->
hdr
.
tŸsize
);

758 
tmpbuf„r
 = 
	`kmem_Æloc
(
size
, 
KM_SLEEP
);

759 
	`ASSERT
(
tmpbuf„r
 !
NULL
);

760 
	`mem˝y
(
tmpbuf„r
, 
iÂ
->
if_u1
.
if_d©a
, 
size
);

761 
sf
 = (
xfs_©å_sh‹tf‹m_t
 *)
tmpbuf„r
;

763 
	`xfs_id©a_ªÆloc
(
dp
, -
size
, 
XFS_ATTR_FORK
);

764 
	`xfs_bm≠_loˇl_to_exã¡s_em±y
(
dp
, 
XFS_ATTR_FORK
);

766 
bp
 = 
NULL
;

767 
îr‹
 = 
	`xfs_da_grow_öode
(
¨gs
, &
blkno
);

768 i‡(
îr‹
) {

773 i‡(
îr‹
 =-
EIO
)

774 
out
;

775 
	`xfs_id©a_ªÆloc
(
dp
, 
size
, 
XFS_ATTR_FORK
);

776 
	`mem˝y
(
iÂ
->
if_u1
.
if_d©a
, 
tmpbuf„r
, 
size
);

777 
out
;

780 
	`ASSERT
(
blkno
 == 0);

781 
îr‹
 = 
	`xfs_©å3_Àaf_¸óã
(
¨gs
, 
blkno
, &
bp
);

782 i‡(
îr‹
) {

783 
îr‹
 = 
	`xfs_da_shrök_öode
(
¨gs
, 0, 
bp
);

784 
bp
 = 
NULL
;

785 i‡(
îr‹
)

786 
out
;

787 
	`xfs_id©a_ªÆloc
(
dp
, 
size
, 
XFS_ATTR_FORK
);

788 
	`mem˝y
(
iÂ
->
if_u1
.
if_d©a
, 
tmpbuf„r
, 
size
);

789 
out
;

792 
	`mem£t
((*)&
«rgs
, 0, (nargs));

793 
«rgs
.
dp
 = dp;

794 
«rgs
.
geo
 = 
¨gs
->geo;

795 
«rgs
.
fú°block
 = 
¨gs
->firstblock;

796 
«rgs
.
df›s
 = 
¨gs
->dfops;

797 
«rgs
.
tŸÆ
 = 
¨gs
->total;

798 
«rgs
.
whichf‹k
 = 
XFS_ATTR_FORK
;

799 
«rgs
.
å™s
 = 
¨gs
->trans;

800 
«rgs
.
›_Êags
 = 
XFS_DA_OP_OKNOENT
;

802 
s„
 = &
sf
->
li°
[0];

803 
i
 = 0; i < 
sf
->
hdr
.
cou¡
; i++) {

804 
«rgs
.
«me
 = 
s„
->
«mevÆ
;

805 
«rgs
.
«mñí
 = 
s„
->namelen;

806 
«rgs
.
vÆue
 = &
s„
->
«mevÆ
[«rgs.
«mñí
];

807 
«rgs
.
vÆuñí
 = 
s„
->valuelen;

808 
«rgs
.
hashvÆ
 = 
	`xfs_da_hash«me
(
s„
->
«mevÆ
,

809 
s„
->
«mñí
);

810 
«rgs
.
Êags
 = 
	`XFS_ATTR_NSP_ONDISK_TO_ARGS
(
s„
->flags);

811 
îr‹
 = 
	`xfs_©å3_Àaf_lookup_öt
(
bp
, &
«rgs
);

812 
	`ASSERT
(
îr‹
 =-
ENOATTR
);

813 
îr‹
 = 
	`xfs_©å3_Àaf_add
(
bp
, &
«rgs
);

814 
	`ASSERT
(
îr‹
 !-
ENOSPC
);

815 i‡(
îr‹
)

816 
out
;

817 
s„
 = 
	`XFS_ATTR_SF_NEXTENTRY
(sfe);

819 
îr‹
 = 0;

821 
out
:

822 
	`kmem_‰ì
(
tmpbuf„r
);

823  
îr‹
;

824 
	}
}

831 
	$xfs_©å_sh‹tf‹m_Ælfô
(

832 
xfs_buf
 *
bp
,

833 
xfs_öode
 *
dp
)

835 
xfs_©å_Àafblock
 *
Àaf
;

836 
xfs_©å_Àaf_íåy
 *
íåy
;

837 
xfs_©å_Àaf_«me_loˇl_t
 *
«me_loc
;

838 
xfs_©å3_i˛óf_hdr
 
Àafhdr
;

839 
byãs
;

840 
i
;

841 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

843 
Àaf
 = 
bp
->
b_addr
;

844 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
Àafhdr
, 
Àaf
);

845 
íåy
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

847 
byãs
 = (
xfs_©å_sf_hdr
);

848 
i
 = 0; i < 
Àafhdr
.
cou¡
; 
íåy
++, i++) {

849 i‡(
íåy
->
Êags
 & 
XFS_ATTR_INCOMPLETE
)

851 i‡(!(
íåy
->
Êags
 & 
XFS_ATTR_LOCAL
))

853 
«me_loc
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
i
);

854 i‡(
«me_loc
->
«mñí
 >
XFS_ATTR_SF_ENTSIZE_MAX
)

856 i‡(
	`be16_to_˝u
(
«me_loc
->
vÆuñí
Ë>
XFS_ATTR_SF_ENTSIZE_MAX
)

858 
byãs
 +(
xfs_©å_sf_íåy
) - 1

859 + 
«me_loc
->
«mñí


860 + 
	`be16_to_˝u
(
«me_loc
->
vÆuñí
);

862 i‡((
dp
->
i_mou¡
->
m_Êags
 & 
XFS_MOUNT_ATTR2
) &&

863 (
dp
->
i_d
.
di_f‹m©
 !
XFS_DINODE_FMT_BTREE
) &&

864 (
byãs
 =(
xfs_©å_sf_hdr
)))

866  
	`xfs_©å_sh‹tf‹m_byãsfô
(
dp
, 
byãs
);

867 
	}
}

873 
	$xfs_©å3_Àaf_to_sh‹tf‹m
(

874 
xfs_buf
 *
bp
,

875 
xfs_da_¨gs
 *
¨gs
,

876 
f‹koff
)

878 
xfs_©å_Àafblock
 *
Àaf
;

879 
xfs_©å3_i˛óf_hdr
 
ichdr
;

880 
xfs_©å_Àaf_íåy
 *
íåy
;

881 
xfs_©å_Àaf_«me_loˇl
 *
«me_loc
;

882 
xfs_da_¨gs
 
«rgs
;

883 
xfs_öode
 *
dp
 = 
¨gs
->dp;

884 *
tmpbuf„r
;

885 
îr‹
;

886 
i
;

888 
	`åa˚_xfs_©å_Àaf_to_sf
(
¨gs
);

890 
tmpbuf„r
 = 
	`kmem_Æloc
(
¨gs
->
geo
->
blksize
, 
KM_SLEEP
);

891 i‡(!
tmpbuf„r
)

892  -
ENOMEM
;

894 
	`mem˝y
(
tmpbuf„r
, 
bp
->
b_addr
, 
¨gs
->
geo
->
blksize
);

896 
Àaf
 = (
xfs_©å_Àafblock_t
 *)
tmpbuf„r
;

897 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
¨gs
->
geo
, &
ichdr
, 
Àaf
);

898 
íåy
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

901 
	`mem£t
(
bp
->
b_addr
, 0, 
¨gs
->
geo
->
blksize
);

906 
îr‹
 = 
	`xfs_da_shrök_öode
(
¨gs
, 0, 
bp
);

907 i‡(
îr‹
)

908 
out
;

910 i‡(
f‹koff
 == -1) {

911 
	`ASSERT
(
dp
->
i_mou¡
->
m_Êags
 & 
XFS_MOUNT_ATTR2
);

912 
	`ASSERT
(
dp
->
i_d
.
di_f‹m©
 !
XFS_DINODE_FMT_BTREE
);

913 
	`xfs_©å_f‹k_ªmove
(
dp
, 
¨gs
->
å™s
);

914 
out
;

917 
	`xfs_©å_sh‹tf‹m_¸óã
(
¨gs
);

922 
	`mem£t
((*)&
«rgs
, 0, (nargs));

923 
«rgs
.
geo
 = 
¨gs
->geo;

924 
«rgs
.
dp
 = dp;

925 
«rgs
.
fú°block
 = 
¨gs
->firstblock;

926 
«rgs
.
df›s
 = 
¨gs
->dfops;

927 
«rgs
.
tŸÆ
 = 
¨gs
->total;

928 
«rgs
.
whichf‹k
 = 
XFS_ATTR_FORK
;

929 
«rgs
.
å™s
 = 
¨gs
->trans;

930 
«rgs
.
›_Êags
 = 
XFS_DA_OP_OKNOENT
;

932 
i
 = 0; i < 
ichdr
.
cou¡
; 
íåy
++, i++) {

933 i‡(
íåy
->
Êags
 & 
XFS_ATTR_INCOMPLETE
)

935 i‡(!
íåy
->
«meidx
)

937 
	`ASSERT
(
íåy
->
Êags
 & 
XFS_ATTR_LOCAL
);

938 
«me_loc
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
i
);

939 
«rgs
.
«me
 = 
«me_loc
->
«mevÆ
;

940 
«rgs
.
«mñí
 = 
«me_loc
->namelen;

941 
«rgs
.
vÆue
 = &
«me_loc
->
«mevÆ
[«rgs.
«mñí
];

942 
«rgs
.
vÆuñí
 = 
	`be16_to_˝u
(
«me_loc
->valuelen);

943 
«rgs
.
hashvÆ
 = 
	`be32_to_˝u
(
íåy
->hashval);

944 
«rgs
.
Êags
 = 
	`XFS_ATTR_NSP_ONDISK_TO_ARGS
(
íåy
->flags);

945 
	`xfs_©å_sh‹tf‹m_add
(&
«rgs
, 
f‹koff
);

947 
îr‹
 = 0;

949 
out
:

950 
	`kmem_‰ì
(
tmpbuf„r
);

951  
îr‹
;

952 
	}
}

958 
	$xfs_©å3_Àaf_to_node
(

959 
xfs_da_¨gs
 *
¨gs
)

961 
xfs_©å_Àafblock
 *
Àaf
;

962 
xfs_©å3_i˛óf_hdr
 
i˛ófhdr
;

963 
xfs_©å_Àaf_íåy
 *
íåõs
;

964 
xfs_da_node_íåy
 *
båì
;

965 
xfs_da3_i˙ode_hdr
 
i˙odehdr
;

966 
xfs_da_öäode
 *
node
;

967 
xfs_öode
 *
dp
 = 
¨gs
->dp;

968 
xfs_mou¡
 *
mp
 = 
dp
->
i_mou¡
;

969 
xfs_buf
 *
bp1
 = 
NULL
;

970 
xfs_buf
 *
bp2
 = 
NULL
;

971 
xfs_dablk_t
 
blkno
;

972 
îr‹
;

974 
	`åa˚_xfs_©å_Àaf_to_node
(
¨gs
);

976 
îr‹
 = 
	`xfs_da_grow_öode
(
¨gs
, &
blkno
);

977 i‡(
îr‹
)

978 
out
;

979 
îr‹
 = 
	`xfs_©å3_Àaf_ªad
(
¨gs
->
å™s
, 
dp
, 0, -1, &
bp1
);

980 i‡(
îr‹
)

981 
out
;

983 
îr‹
 = 
	`xfs_da_gë_buf
(
¨gs
->
å™s
, 
dp
, 
blkno
, -1, &
bp2
, 
XFS_ATTR_FORK
);

984 i‡(
îr‹
)

985 
out
;

988 
	`xfs_å™s_buf_£t_ty≥
(
¨gs
->
å™s
, 
bp2
, 
XFS_BLFT_ATTR_LEAF_BUF
);

989 
bp2
->
b_›s
 = 
bp1
->b_ops;

990 
	`mem˝y
(
bp2
->
b_addr
, 
bp1
->b_addr, 
¨gs
->
geo
->
blksize
);

991 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

992 
xfs_da3_blköfo
 *
hdr3
 = 
bp2
->
b_addr
;

993 
hdr3
->
blkno
 = 
	`˝u_to_be64
(
bp2
->
b_bn
);

995 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp2
, 0,árgs->
geo
->
blksize
 - 1);

1000 
îr‹
 = 
	`xfs_da3_node_¸óã
(
¨gs
, 0, 1, &
bp1
, 
XFS_ATTR_FORK
);

1001 i‡(
îr‹
)

1002 
out
;

1003 
node
 = 
bp1
->
b_addr
;

1004 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
i˙odehdr
, 
node
);

1005 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
node
);

1007 
Àaf
 = 
bp2
->
b_addr
;

1008 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
¨gs
->
geo
, &
i˛ófhdr
, 
Àaf
);

1009 
íåõs
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

1012 
båì
[0].
hashvÆ
 = 
íåõs
[
i˛ófhdr
.
cou¡
 - 1].hashval;

1013 
båì
[0].
bef‹e
 = 
	`˝u_to_be32
(
blkno
);

1014 
i˙odehdr
.
cou¡
 = 1;

1015 
dp
->
d_›s
->
	`node_hdr_to_disk
(
node
, &
i˙odehdr
);

1016 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp1
, 0,árgs->
geo
->
blksize
 - 1);

1017 
îr‹
 = 0;

1018 
out
:

1019  
îr‹
;

1020 
	}
}

1030 
STATIC
 

1031 
	$xfs_©å3_Àaf_¸óã
(

1032 
xfs_da_¨gs
 *
¨gs
,

1033 
xfs_dablk_t
 
blkno
,

1034 
xfs_buf
 **
bµ
)

1036 
xfs_©å_Àafblock
 *
Àaf
;

1037 
xfs_©å3_i˛óf_hdr
 
ichdr
;

1038 
xfs_öode
 *
dp
 = 
¨gs
->dp;

1039 
xfs_mou¡
 *
mp
 = 
dp
->
i_mou¡
;

1040 
xfs_buf
 *
bp
;

1041 
îr‹
;

1043 
	`åa˚_xfs_©å_Àaf_¸óã
(
¨gs
);

1045 
îr‹
 = 
	`xfs_da_gë_buf
(
¨gs
->
å™s
,árgs->
dp
, 
blkno
, -1, &
bp
,

1046 
XFS_ATTR_FORK
);

1047 i‡(
îr‹
)

1048  
îr‹
;

1049 
bp
->
b_›s
 = &
xfs_©å3_Àaf_buf_›s
;

1050 
	`xfs_å™s_buf_£t_ty≥
(
¨gs
->
å™s
, 
bp
, 
XFS_BLFT_ATTR_LEAF_BUF
);

1051 
Àaf
 = 
bp
->
b_addr
;

1052 
	`mem£t
(
Àaf
, 0, 
¨gs
->
geo
->
blksize
);

1054 
	`mem£t
(&
ichdr
, 0, (ichdr));

1055 
ichdr
.
fú°u£d
 = 
¨gs
->
geo
->
blksize
;

1057 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

1058 
xfs_da3_blköfo
 *
hdr3
 = 
bp
->
b_addr
;

1060 
ichdr
.
magic
 = 
XFS_ATTR3_LEAF_MAGIC
;

1062 
hdr3
->
blkno
 = 
	`˝u_to_be64
(
bp
->
b_bn
);

1063 
hdr3
->
ow√r
 = 
	`˝u_to_be64
(
dp
->
i_öo
);

1064 
	`uuid_c›y
(&
hdr3
->
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

1066 
ichdr
.
‰ìm≠
[0].
ba£
 = (
xfs_©å3_Àaf_hdr
);

1068 
ichdr
.
magic
 = 
XFS_ATTR_LEAF_MAGIC
;

1069 
ichdr
.
‰ìm≠
[0].
ba£
 = (
xfs_©å_Àaf_hdr
);

1071 
ichdr
.
‰ìm≠
[0].
size
 = ichdr.
fú°u£d
 - ichdr.‰ìm≠[0].
ba£
;

1073 
	`xfs_©å3_Àaf_hdr_to_disk
(
¨gs
->
geo
, 
Àaf
, &
ichdr
);

1074 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
, 0,árgs->
geo
->
blksize
 - 1);

1076 *
bµ
 = 
bp
;

1078 
	}
}

1084 
	$xfs_©å3_Àaf_•lô
(

1085 
xfs_da_°©e
 *
°©e
,

1086 
xfs_da_°©e_blk
 *
ﬁdblk
,

1087 
xfs_da_°©e_blk
 *
√wblk
)

1089 
xfs_dablk_t
 
blkno
;

1090 
îr‹
;

1092 
	`åa˚_xfs_©å_Àaf_•lô
(
°©e
->
¨gs
);

1097 
	`ASSERT
(
ﬁdblk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
);

1098 
îr‹
 = 
	`xfs_da_grow_öode
(
°©e
->
¨gs
, &
blkno
);

1099 i‡(
îr‹
)

1100  
îr‹
;

1101 
îr‹
 = 
	`xfs_©å3_Àaf_¸óã
(
°©e
->
¨gs
, 
blkno
, &
√wblk
->
bp
);

1102 i‡(
îr‹
)

1103  
îr‹
;

1104 
√wblk
->
blkno
 = blkno;

1105 
√wblk
->
magic
 = 
XFS_ATTR_LEAF_MAGIC
;

1111 
	`xfs_©å3_Àaf_ªbÆ™˚
(
°©e
, 
ﬁdblk
, 
√wblk
);

1112 
îr‹
 = 
	`xfs_da3_blk_lök
(
°©e
, 
ﬁdblk
, 
√wblk
);

1113 i‡(
îr‹
)

1114  
îr‹
;

1123 i‡(
°©e
->
öÀaf
) {

1124 
	`åa˚_xfs_©å_Àaf_add_ﬁd
(
°©e
->
¨gs
);

1125 
îr‹
 = 
	`xfs_©å3_Àaf_add
(
ﬁdblk
->
bp
, 
°©e
->
¨gs
);

1127 
	`åa˚_xfs_©å_Àaf_add_√w
(
°©e
->
¨gs
);

1128 
îr‹
 = 
	`xfs_©å3_Àaf_add
(
√wblk
->
bp
, 
°©e
->
¨gs
);

1134 
ﬁdblk
->
hashvÆ
 = 
	`xfs_©å_Àaf_œ°hash
(ﬁdblk->
bp
, 
NULL
);

1135 
√wblk
->
hashvÆ
 = 
	`xfs_©å_Àaf_œ°hash
“ewblk->
bp
, 
NULL
);

1136  
îr‹
;

1137 
	}
}

1143 
	$xfs_©å3_Àaf_add
(

1144 
xfs_buf
 *
bp
,

1145 
xfs_da_¨gs
 *
¨gs
)

1147 
xfs_©å_Àafblock
 *
Àaf
;

1148 
xfs_©å3_i˛óf_hdr
 
ichdr
;

1149 
èbÀsize
;

1150 
ítsize
;

1151 
sum
;

1152 
tmp
;

1153 
i
;

1155 
	`åa˚_xfs_©å_Àaf_add
(
¨gs
);

1157 
Àaf
 = 
bp
->
b_addr
;

1158 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
¨gs
->
geo
, &
ichdr
, 
Àaf
);

1159 
	`ASSERT
(
¨gs
->
ödex
 >0 &&árgs->ödex <
ichdr
.
cou¡
);

1160 
ítsize
 = 
	`xfs_©å_Àaf_√wítsize
(
¨gs
, 
NULL
);

1166 
èbÀsize
 = (
ichdr
.
cou¡
 + 1Ë* (
xfs_©å_Àaf_íåy_t
)

1167 + 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
);

1168 
sum
 = 0, 
i
 = 
XFS_ATTR_LEAF_MAPSIZE
 - 1; i >= 0; i--) {

1169 i‡(
èbÀsize
 > 
ichdr
.
fú°u£d
) {

1170 
sum
 +
ichdr
.
‰ìm≠
[
i
].
size
;

1173 i‡(!
ichdr
.
‰ìm≠
[
i
].
size
)

1175 
tmp
 = 
ítsize
;

1176 i‡(
ichdr
.
‰ìm≠
[
i
].
ba£
 < ichdr.
fú°u£d
)

1177 
tmp
 +(
xfs_©å_Àaf_íåy_t
);

1178 i‡(
ichdr
.
‰ìm≠
[
i
].
size
 >
tmp
) {

1179 
tmp
 = 
	`xfs_©å3_Àaf_add_w‹k
(
bp
, &
ichdr
, 
¨gs
, 
i
);

1180 
out_log_hdr
;

1182 
sum
 +
ichdr
.
‰ìm≠
[
i
].
size
;

1190 i‡(!
ichdr
.
hﬁes
 && 
sum
 < 
ítsize
)

1191  -
ENOSPC
;

1197 
	`xfs_©å3_Àaf_com∑˘
(
¨gs
, &
ichdr
, 
bp
);

1203 i‡(
ichdr
.
‰ìm≠
[0].
size
 < (
ítsize
 + (
xfs_©å_Àaf_íåy_t
))) {

1204 
tmp
 = -
ENOSPC
;

1205 
out_log_hdr
;

1208 
tmp
 = 
	`xfs_©å3_Àaf_add_w‹k
(
bp
, &
ichdr
, 
¨gs
, 0);

1210 
out_log_hdr
:

1211 
	`xfs_©å3_Àaf_hdr_to_disk
(
¨gs
->
geo
, 
Àaf
, &
ichdr
);

1212 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

1213 
	`XFS_DA_LOGRANGE
(
Àaf
, &Àaf->
hdr
,

1214 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
)));

1215  
tmp
;

1216 
	}
}

1221 
STATIC
 

1222 
	$xfs_©å3_Àaf_add_w‹k
(

1223 
xfs_buf
 *
bp
,

1224 
xfs_©å3_i˛óf_hdr
 *
ichdr
,

1225 
xfs_da_¨gs
 *
¨gs
,

1226 
m≠ödex
)

1228 
xfs_©å_Àafblock
 *
Àaf
;

1229 
xfs_©å_Àaf_íåy
 *
íåy
;

1230 
xfs_©å_Àaf_«me_loˇl
 *
«me_loc
;

1231 
xfs_©å_Àaf_«me_ªmŸe
 *
«me_rmt
;

1232 
xfs_mou¡
 *
mp
;

1233 
tmp
;

1234 
i
;

1236 
	`åa˚_xfs_©å_Àaf_add_w‹k
(
¨gs
);

1238 
Àaf
 = 
bp
->
b_addr
;

1239 
	`ASSERT
(
m≠ödex
 >0 && m≠ödex < 
XFS_ATTR_LEAF_MAPSIZE
);

1240 
	`ASSERT
(
¨gs
->
ödex
 >0 &&árgs->ödex <
ichdr
->
cou¡
);

1245 
íåy
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf
)[
¨gs
->
ödex
];

1246 i‡(
¨gs
->
ödex
 < 
ichdr
->
cou¡
) {

1247 
tmp
 = 
ichdr
->
cou¡
 - 
¨gs
->
ödex
;

1248 
tmp
 *(
xfs_©å_Àaf_íåy_t
);

1249 
	`memmove
(
íåy
 + 1,É¡ry, 
tmp
);

1250 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

1251 
	`XFS_DA_LOGRANGE
(
Àaf
, 
íåy
, 
tmp
 + (*entry)));

1253 
ichdr
->
cou¡
++;

1258 
mp
 = 
¨gs
->
å™s
->
t_mou¡p
;

1259 
	`ASSERT
(
ichdr
->
‰ìm≠
[
m≠ödex
].
ba£
 < 
¨gs
->
geo
->
blksize
);

1260 
	`ASSERT
((
ichdr
->
‰ìm≠
[
m≠ödex
].
ba£
 & 0x3) == 0);

1261 
	`ASSERT
(
ichdr
->
‰ìm≠
[
m≠ödex
].
size
 >=

1262 
	`xfs_©å_Àaf_√wítsize
(
¨gs
, 
NULL
));

1263 
	`ASSERT
(
ichdr
->
‰ìm≠
[
m≠ödex
].
size
 < 
¨gs
->
geo
->
blksize
);

1264 
	`ASSERT
((
ichdr
->
‰ìm≠
[
m≠ödex
].
size
 & 0x3) == 0);

1266 
ichdr
->
‰ìm≠
[
m≠ödex
].
size
 -
	`xfs_©å_Àaf_√wítsize
(
¨gs
, &
tmp
);

1268 
íåy
->
«meidx
 = 
	`˝u_to_be16
(
ichdr
->
‰ìm≠
[
m≠ödex
].
ba£
 +

1269 
ichdr
->
‰ìm≠
[
m≠ödex
].
size
);

1270 
íåy
->
hashvÆ
 = 
	`˝u_to_be32
(
¨gs
->hashval);

1271 
íåy
->
Êags
 = 
tmp
 ? 
XFS_ATTR_LOCAL
 : 0;

1272 
íåy
->
Êags
 |
	`XFS_ATTR_NSP_ARGS_TO_ONDISK
(
¨gs
->flags);

1273 i‡(
¨gs
->
›_Êags
 & 
XFS_DA_OP_RENAME
) {

1274 
íåy
->
Êags
 |
XFS_ATTR_INCOMPLETE
;

1275 i‡((
¨gs
->
blkno2
 =¨gs->
blkno
) &&

1276 (
¨gs
->
ödex2
 <¨gs->
ödex
)) {

1277 
¨gs
->
ödex2
++;

1280 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

1281 
	`XFS_DA_LOGRANGE
(
Àaf
, 
íåy
, (*entry)));

1282 
	`ASSERT
((
¨gs
->
ödex
 == 0) ||

1283 (
	`be32_to_˝u
(
íåy
->
hashvÆ
) >= be32_to_cpu((entry-1)->hashval)));

1284 
	`ASSERT
((
¨gs
->
ödex
 =
ichdr
->
cou¡
 - 1) ||

1285 (
	`be32_to_˝u
(
íåy
->
hashvÆ
) <= be32_to_cpu((entry+1)->hashval)));

1294 i‡(
íåy
->
Êags
 & 
XFS_ATTR_LOCAL
) {

1295 
«me_loc
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
¨gs
->
ödex
);

1296 
«me_loc
->
«mñí
 = 
¨gs
->namelen;

1297 
«me_loc
->
vÆuñí
 = 
	`˝u_to_be16
(
¨gs
->valuelen);

1298 
	`mem˝y
((*)
«me_loc
->
«mevÆ
, 
¨gs
->
«me
,árgs->
«mñí
);

1299 
	`mem˝y
((*)&
«me_loc
->
«mevÆ
[
¨gs
->
«mñí
],árgs->
vÆue
,

1300 
	`be16_to_˝u
(
«me_loc
->
vÆuñí
));

1302 
«me_rmt
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
¨gs
->
ödex
);

1303 
«me_rmt
->
«mñí
 = 
¨gs
->namelen;

1304 
	`mem˝y
((*)
«me_rmt
->
«me
, 
¨gs
->«me,árgs->
«mñí
);

1305 
íåy
->
Êags
 |
XFS_ATTR_INCOMPLETE
;

1307 
«me_rmt
->
vÆuñí
 = 0;

1308 
«me_rmt
->
vÆueblk
 = 0;

1309 
¨gs
->
rmtblkno
 = 1;

1310 
¨gs
->
rmtblk˙t
 = 
	`xfs_©å3_rmt_blocks
(
mp
,árgs->
vÆuñí
);

1311 
¨gs
->
rmtvÆuñí
 =árgs->
vÆuñí
;

1313 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

1314 
	`XFS_DA_LOGRANGE
(
Àaf
, 
	`xfs_©å3_Àaf_«me
÷óf, 
¨gs
->
ödex
),

1315 
	`xfs_©å_Àaf_ítsize
(
Àaf
, 
¨gs
->
ödex
)));

1320 i‡(
	`be16_to_˝u
(
íåy
->
«meidx
Ë< 
ichdr
->
fú°u£d
)

1321 
ichdr
->
fú°u£d
 = 
	`be16_to_˝u
(
íåy
->
«meidx
);

1323 
	`ASSERT
(
ichdr
->
fú°u£d
 >ichdr->
cou¡
 * (
xfs_©å_Àaf_íåy_t
)

1324 + 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
));

1325 
tmp
 = (
ichdr
->
cou¡
 - 1Ë* (
xfs_©å_Àaf_íåy_t
)

1326 + 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
);

1328 
i
 = 0; i < 
XFS_ATTR_LEAF_MAPSIZE
; i++) {

1329 i‡(
ichdr
->
‰ìm≠
[
i
].
ba£
 =
tmp
) {

1330 
ichdr
->
‰ìm≠
[
i
].
ba£
 +(
xfs_©å_Àaf_íåy_t
);

1331 
ichdr
->
‰ìm≠
[
i
].
size
 -(
xfs_©å_Àaf_íåy_t
);

1334 
ichdr
->
u£dbyãs
 +
	`xfs_©å_Àaf_ítsize
(
Àaf
, 
¨gs
->
ödex
);

1336 
	}
}

1341 
STATIC
 

1342 
	$xfs_©å3_Àaf_com∑˘
(

1343 
xfs_da_¨gs
 *
¨gs
,

1344 
xfs_©å3_i˛óf_hdr
 *
ichdr_d°
,

1345 
xfs_buf
 *
bp
)

1347 
xfs_©å_Àafblock
 *
Àaf_§c
;

1348 
xfs_©å_Àafblock
 *
Àaf_d°
;

1349 
xfs_©å3_i˛óf_hdr
 
ichdr_§c
;

1350 
xfs_å™s
 *
å™s
 = 
¨gs
->trans;

1351 *
tmpbuf„r
;

1353 
	`åa˚_xfs_©å_Àaf_com∑˘
(
¨gs
);

1355 
tmpbuf„r
 = 
	`kmem_Æloc
(
¨gs
->
geo
->
blksize
, 
KM_SLEEP
);

1356 
	`mem˝y
(
tmpbuf„r
, 
bp
->
b_addr
, 
¨gs
->
geo
->
blksize
);

1357 
	`mem£t
(
bp
->
b_addr
, 0, 
¨gs
->
geo
->
blksize
);

1358 
Àaf_§c
 = (
xfs_©å_Àafblock_t
 *)
tmpbuf„r
;

1359 
Àaf_d°
 = 
bp
->
b_addr
;

1366 
	`mem˝y
(
bp
->
b_addr
, 
tmpbuf„r
, 
	`xfs_©å3_Àaf_hdr_size
(
Àaf_§c
));

1369 
ichdr_§c
 = *
ichdr_d°
;

1370 
ichdr_d°
->
fú°u£d
 = 
¨gs
->
geo
->
blksize
;

1371 
ichdr_d°
->
u£dbyãs
 = 0;

1372 
ichdr_d°
->
cou¡
 = 0;

1373 
ichdr_d°
->
hﬁes
 = 0;

1374 
ichdr_d°
->
‰ìm≠
[0].
ba£
 = 
	`xfs_©å3_Àaf_hdr_size
(
Àaf_§c
);

1375 
ichdr_d°
->
‰ìm≠
[0].
size
 = ichdr_d°->
fú°u£d
 -

1376 
ichdr_d°
->
‰ìm≠
[0].
ba£
;

1379 
	`xfs_©å3_Àaf_hdr_to_disk
(
¨gs
->
geo
, 
Àaf_d°
, 
ichdr_d°
);

1385 
	`xfs_©å3_Àaf_movì¡s
(
¨gs
, 
Àaf_§c
, &
ichdr_§c
, 0,

1386 
Àaf_d°
, 
ichdr_d°
, 0, 
ichdr_§c
.
cou¡
);

1391 
	`xfs_å™s_log_buf
(
å™s
, 
bp
, 0, 
¨gs
->
geo
->
blksize
 - 1);

1393 
	`kmem_‰ì
(
tmpbuf„r
);

1394 
	}
}

1401 
	$xfs_©å3_Àaf_‹dî
(

1402 
xfs_buf
 *
Àaf1_bp
,

1403 
xfs_©å3_i˛óf_hdr
 *
Àaf1hdr
,

1404 
xfs_buf
 *
Àaf2_bp
,

1405 
xfs_©å3_i˛óf_hdr
 *
Àaf2hdr
)

1407 
xfs_©å_Àaf_íåy
 *
íåõs1
;

1408 
xfs_©å_Àaf_íåy
 *
íåõs2
;

1410 
íåõs1
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf1_bp
->
b_addr
);

1411 
íåõs2
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf2_bp
->
b_addr
);

1412 i‡(
Àaf1hdr
->
cou¡
 > 0 && 
Àaf2hdr
->count > 0 &&

1413 ((
	`be32_to_˝u
(
íåõs2
[0].
hashvÆ
) <

1414 
	`be32_to_˝u
(
íåõs1
[0].
hashvÆ
)) ||

1415 (
	`be32_to_˝u
(
íåõs2
[
Àaf2hdr
->
cou¡
 - 1].
hashvÆ
) <

1416 
	`be32_to_˝u
(
íåõs1
[
Àaf1hdr
->
cou¡
 - 1].
hashvÆ
)))) {

1420 
	}
}

1423 
	$xfs_©å_Àaf_‹dî
(

1424 
xfs_buf
 *
Àaf1_bp
,

1425 
xfs_buf
 *
Àaf2_bp
)

1427 
xfs_©å3_i˛óf_hdr
 
ichdr1
;

1428 
xfs_©å3_i˛óf_hdr
 
ichdr2
;

1429 
xfs_mou¡
 *
mp
 = 
Àaf1_bp
->
b_èrgë
->
bt_mou¡
;

1431 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
ichdr1
, 
Àaf1_bp
->
b_addr
);

1432 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
ichdr2
, 
Àaf2_bp
->
b_addr
);

1433  
	`xfs_©å3_Àaf_‹dî
(
Àaf1_bp
, &
ichdr1
, 
Àaf2_bp
, &
ichdr2
);

1434 
	}
}

1448 
STATIC
 

1449 
	$xfs_©å3_Àaf_ªbÆ™˚
(

1450 
xfs_da_°©e
 *
°©e
,

1451 
xfs_da_°©e_blk
 *
blk1
,

1452 
xfs_da_°©e_blk
 *
blk2
)

1454 
xfs_da_¨gs
 *
¨gs
;

1455 
xfs_©å_Àafblock
 *
Àaf1
;

1456 
xfs_©å_Àafblock
 *
Àaf2
;

1457 
xfs_©å3_i˛óf_hdr
 
ichdr1
;

1458 
xfs_©å3_i˛óf_hdr
 
ichdr2
;

1459 
xfs_©å_Àaf_íåy
 *
íåõs1
;

1460 
xfs_©å_Àaf_íåy
 *
íåõs2
;

1461 
cou¡
;

1462 
tŸÆÀn
;

1463 
max
;

1464 
•a˚
;

1465 
sw≠
;

1470 
	`ASSERT
(
blk1
->
magic
 =
XFS_ATTR_LEAF_MAGIC
);

1471 
	`ASSERT
(
blk2
->
magic
 =
XFS_ATTR_LEAF_MAGIC
);

1472 
Àaf1
 = 
blk1
->
bp
->
b_addr
;

1473 
Àaf2
 = 
blk2
->
bp
->
b_addr
;

1474 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
°©e
->
¨gs
->
geo
, &
ichdr1
, 
Àaf1
);

1475 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
°©e
->
¨gs
->
geo
, &
ichdr2
, 
Àaf2
);

1476 
	`ASSERT
(
ichdr2
.
cou¡
 == 0);

1477 
¨gs
 = 
°©e
->args;

1479 
	`åa˚_xfs_©å_Àaf_ªbÆ™˚
(
¨gs
);

1487 
sw≠
 = 0;

1488 i‡(
	`xfs_©å3_Àaf_‹dî
(
blk1
->
bp
, &
ichdr1
, 
blk2
->bp, &
ichdr2
)) {

1489 
xfs_da_°©e_blk
 *
tmp_blk
;

1490 
xfs_©å3_i˛óf_hdr
 
tmp_ichdr
;

1492 
tmp_blk
 = 
blk1
;

1493 
blk1
 = 
blk2
;

1494 
blk2
 = 
tmp_blk
;

1497 
tmp_ichdr
 = 
ichdr1
;

1498 
ichdr1
 = 
ichdr2
;

1499 
ichdr2
 = 
tmp_ichdr
;

1501 
Àaf1
 = 
blk1
->
bp
->
b_addr
;

1502 
Àaf2
 = 
blk2
->
bp
->
b_addr
;

1503 
sw≠
 = 1;

1514 
°©e
->
öÀaf
 = 
	`xfs_©å3_Àaf_figuª_bÆ™˚
(°©e, 
blk1
, &
ichdr1
,

1515 
blk2
, &
ichdr2
,

1516 &
cou¡
, &
tŸÆÀn
);

1517 i‡(
sw≠
)

1518 
°©e
->
öÀaf
 = !state->inleaf;

1523 i‡(
cou¡
 < 
ichdr1
.count) {

1528 
cou¡
 = 
ichdr1
.count - count;

1529 
•a˚
 = 
ichdr1
.
u£dbyãs
 - 
tŸÆÀn
;

1530 
•a˚
 +
cou¡
 * (
xfs_©å_Àaf_íåy_t
);

1535 
max
 = 
ichdr2
.
fú°u£d
 - 
	`xfs_©å3_Àaf_hdr_size
(
Àaf1
);

1536 
max
 -
ichdr2
.
cou¡
 * (
xfs_©å_Àaf_íåy_t
);

1537 i‡(
•a˚
 > 
max
)

1538 
	`xfs_©å3_Àaf_com∑˘
(
¨gs
, &
ichdr2
, 
blk2
->
bp
);

1543 
	`xfs_©å3_Àaf_movì¡s
(
¨gs
, 
Àaf1
, &
ichdr1
,

1544 
ichdr1
.
cou¡
 - cou¡, 
Àaf2
, &
ichdr2
, 0, count);

1546 } i‡(
cou¡
 > 
ichdr1
.count) {

1551 
	`ASSERT
(0);

1557 
cou¡
 -
ichdr1
.count;

1558 
•a˚
 = 
tŸÆÀn
 - 
ichdr1
.
u£dbyãs
;

1559 
•a˚
 +
cou¡
 * (
xfs_©å_Àaf_íåy_t
);

1564 
max
 = 
ichdr1
.
fú°u£d
 - 
	`xfs_©å3_Àaf_hdr_size
(
Àaf1
);

1565 
max
 -
ichdr1
.
cou¡
 * (
xfs_©å_Àaf_íåy_t
);

1566 i‡(
•a˚
 > 
max
)

1567 
	`xfs_©å3_Àaf_com∑˘
(
¨gs
, &
ichdr1
, 
blk1
->
bp
);

1572 
	`xfs_©å3_Àaf_movì¡s
(
¨gs
, 
Àaf2
, &
ichdr2
, 0, 
Àaf1
, &
ichdr1
,

1573 
ichdr1
.
cou¡
, count);

1576 
	`xfs_©å3_Àaf_hdr_to_disk
(
°©e
->
¨gs
->
geo
, 
Àaf1
, &
ichdr1
);

1577 
	`xfs_©å3_Àaf_hdr_to_disk
(
°©e
->
¨gs
->
geo
, 
Àaf2
, &
ichdr2
);

1578 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
blk1
->
bp
, 0,árgs->
geo
->
blksize
 - 1);

1579 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
blk2
->
bp
, 0,árgs->
geo
->
blksize
 - 1);

1584 
íåõs1
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf1
);

1585 
íåõs2
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf2
);

1586 
blk1
->
hashvÆ
 = 
	`be32_to_˝u
(
íåõs1
[
ichdr1
.
cou¡
 - 1].hashval);

1587 
blk2
->
hashvÆ
 = 
	`be32_to_˝u
(
íåõs2
[
ichdr2
.
cou¡
 - 1].hashval);

1601 i‡(
blk1
->
ödex
 > 
ichdr1
.
cou¡
) {

1602 
	`ASSERT
(
°©e
->
öÀaf
 == 0);

1603 
blk2
->
ödex
 = 
blk1
->ödex - 
ichdr1
.
cou¡
;

1604 
¨gs
->
ödex
 =árgs->
ödex2
 = 
blk2
->index;

1605 
¨gs
->
blkno
 =árgs->
blkno2
 = 
blk2
->blkno;

1606 } i‡(
blk1
->
ödex
 =
ichdr1
.
cou¡
) {

1607 i‡(
°©e
->
öÀaf
) {

1608 
¨gs
->
ödex
 = 
blk1
->index;

1609 
¨gs
->
blkno
 = 
blk1
->blkno;

1610 
¨gs
->
ödex2
 = 0;

1611 
¨gs
->
blkno2
 = 
blk2
->
blkno
;

1618 
blk2
->
ödex
 = 
blk1
->ödex - 
ichdr1
.
cou¡
;

1619 
¨gs
->
ödex
 = 
blk2
->index;

1620 
¨gs
->
blkno
 = 
blk2
->blkno;

1621 i‡(!
°©e
->
exåavÆid
) {

1627 
¨gs
->
ödex2
 = 
blk2
->
ödex
;

1628 
¨gs
->
blkno2
 = 
blk2
->
blkno
;

1632 
	`ASSERT
(
°©e
->
öÀaf
 == 1);

1633 
¨gs
->
ödex
 =árgs->
ödex2
 = 
blk1
->index;

1634 
¨gs
->
blkno
 =árgs->
blkno2
 = 
blk1
->blkno;

1636 
	}
}

1645 
STATIC
 

1646 
	$xfs_©å3_Àaf_figuª_bÆ™˚
(

1647 
xfs_da_°©e
 *
°©e
,

1648 
xfs_da_°©e_blk
 *
blk1
,

1649 
xfs_©å3_i˛óf_hdr
 *
ichdr1
,

1650 
xfs_da_°©e_blk
 *
blk2
,

1651 
xfs_©å3_i˛óf_hdr
 *
ichdr2
,

1652 *
cou¡¨g
,

1653 *
u£dbyãßrg
)

1655 
xfs_©å_Àafblock
 *
Àaf1
 = 
blk1
->
bp
->
b_addr
;

1656 
xfs_©å_Àafblock
 *
Àaf2
 = 
blk2
->
bp
->
b_addr
;

1657 
xfs_©å_Àaf_íåy
 *
íåy
;

1658 
cou¡
;

1659 
max
;

1660 
ödex
;

1661 
tŸÆÀn
 = 0;

1662 
hÆf
;

1663 
œ°dñè
;

1664 
foundô
 = 0;

1665 
tmp
;

1671 
max
 = 
ichdr1
->
cou¡
 + 
ichdr2
->count;

1672 
hÆf
 = (
max
 + 1Ë* (*
íåy
);

1673 
hÆf
 +
ichdr1
->
u£dbyãs
 + 
ichdr2
->usedbytes +

1674 
	`xfs_©å_Àaf_√wítsize
(
°©e
->
¨gs
, 
NULL
);

1675 
hÆf
 /= 2;

1676 
œ°dñè
 = 
°©e
->
¨gs
->
geo
->
blksize
;

1677 
íåy
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf1
);

1678 
cou¡
 = 
ödex
 = 0; cou¡ < 
max
; 
íåy
++, index++, count++) {

1680 
	#XFS_ATTR_ABS
(
A
Ë(((AË< 0Ë? -(AË: (A))

	)

1684 i‡(
cou¡
 =
blk1
->
ödex
) {

1685 
tmp
 = 
tŸÆÀn
 + (*
íåy
) +

1686 
	`xfs_©å_Àaf_√wítsize
(
°©e
->
¨gs
, 
NULL
);

1687 i‡(
	`XFS_ATTR_ABS
(
hÆf
 - 
tmp
Ë> 
œ°dñè
)

1689 
œ°dñè
 = 
	`XFS_ATTR_ABS
(
hÆf
 - 
tmp
);

1690 
tŸÆÀn
 = 
tmp
;

1691 
foundô
 = 1;

1697 i‡(
cou¡
 =
ichdr1
->count) {

1698 
Àaf1
 = 
Àaf2
;

1699 
íåy
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf1
);

1700 
ödex
 = 0;

1706 
tmp
 = 
tŸÆÀn
 + (*
íåy
Ë+ 
	`xfs_©å_Àaf_ítsize
(
Àaf1
,

1707 
ödex
);

1708 i‡(
	`XFS_ATTR_ABS
(
hÆf
 - 
tmp
Ë> 
œ°dñè
)

1710 
œ°dñè
 = 
	`XFS_ATTR_ABS
(
hÆf
 - 
tmp
);

1711 
tŸÆÀn
 = 
tmp
;

1712 #unde‡
XFS_ATTR_ABS


1719 
tŸÆÀn
 -
cou¡
 * (*
íåy
);

1720 i‡(
foundô
) {

1721 
tŸÆÀn
 -(*
íåy
) +

1722 
	`xfs_©å_Àaf_√wítsize
(
°©e
->
¨gs
, 
NULL
);

1725 *
cou¡¨g
 = 
cou¡
;

1726 *
u£dbyãßrg
 = 
tŸÆÀn
;

1727  
foundô
;

1728 
	}
}

1746 
	$xfs_©å3_Àaf_toosmÆl
(

1747 
xfs_da_°©e
 *
°©e
,

1748 *
a˘i⁄
)

1750 
xfs_©å_Àafblock
 *
Àaf
;

1751 
xfs_da_°©e_blk
 *
blk
;

1752 
xfs_©å3_i˛óf_hdr
 
ichdr
;

1753 
xfs_buf
 *
bp
;

1754 
xfs_dablk_t
 
blkno
;

1755 
byãs
;

1756 
f‹w¨d
;

1757 
îr‹
;

1758 
ªtvÆ
;

1759 
i
;

1761 
	`åa˚_xfs_©å_Àaf_toosmÆl
(
°©e
->
¨gs
);

1768 
blk
 = &
°©e
->
∑th
.blk[ sèã->∑th.
a˘ive
-1 ];

1769 
Àaf
 = 
blk
->
bp
->
b_addr
;

1770 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
°©e
->
¨gs
->
geo
, &
ichdr
, 
Àaf
);

1771 
byãs
 = 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
) +

1772 
ichdr
.
cou¡
 * (
xfs_©å_Àaf_íåy_t
) +

1773 
ichdr
.
u£dbyãs
;

1774 i‡(
byãs
 > (
°©e
->
¨gs
->
geo
->
blksize
 >> 1)) {

1775 *
a˘i⁄
 = 0;

1785 i‡(
ichdr
.
cou¡
 == 0) {

1790 
f‹w¨d
 = (
ichdr
.
f‹w
 != 0);

1791 
	`mem˝y
(&
°©e
->
Æç©h
, &°©e->
∑th
, (state->path));

1792 
îr‹
 = 
	`xfs_da3_∑th_shi·
(
°©e
, &°©e->
Æç©h
, 
f‹w¨d
,

1793 0, &
ªtvÆ
);

1794 i‡(
îr‹
)

1795  
îr‹
;

1796 i‡(
ªtvÆ
) {

1797 *
a˘i⁄
 = 0;

1799 *
a˘i⁄
 = 2;

1812 
f‹w¨d
 = 
ichdr
.
f‹w
 < ichdr.
back
;

1813 
i
 = 0; i < 2; 
f‹w¨d
 = !forward, i++) {

1814 
xfs_©å3_i˛óf_hdr
 
ichdr2
;

1815 i‡(
f‹w¨d
)

1816 
blkno
 = 
ichdr
.
f‹w
;

1818 
blkno
 = 
ichdr
.
back
;

1819 i‡(
blkno
 == 0)

1821 
îr‹
 = 
	`xfs_©å3_Àaf_ªad
(
°©e
->
¨gs
->
å™s
, sèã->¨gs->
dp
,

1822 
blkno
, -1, &
bp
);

1823 i‡(
îr‹
)

1824  
îr‹
;

1826 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
°©e
->
¨gs
->
geo
, &
ichdr2
, 
bp
->
b_addr
);

1828 
byãs
 = 
°©e
->
¨gs
->
geo
->
blksize
 -

1829 (
°©e
->
¨gs
->
geo
->
blksize
 >> 2) -

1830 
ichdr
.
u£dbyãs
 - 
ichdr2
.usedbytes -

1831 ((
ichdr
.
cou¡
 + 
ichdr2
.count) *

1832 (
xfs_©å_Àaf_íåy_t
)) -

1833 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
);

1835 
	`xfs_å™s_bªl£
(
°©e
->
¨gs
->
å™s
, 
bp
);

1836 i‡(
byãs
 >= 0)

1839 i‡(
i
 >= 2) {

1840 *
a˘i⁄
 = 0;

1848 
	`mem˝y
(&
°©e
->
Æç©h
, &°©e->
∑th
, (state->path));

1849 i‡(
blkno
 < 
blk
->blkno) {

1850 
îr‹
 = 
	`xfs_da3_∑th_shi·
(
°©e
, &°©e->
Æç©h
, 
f‹w¨d
,

1851 0, &
ªtvÆ
);

1853 
îr‹
 = 
	`xfs_da3_∑th_shi·
(
°©e
, &°©e->
∑th
, 
f‹w¨d
,

1854 0, &
ªtvÆ
);

1856 i‡(
îr‹
)

1857  
îr‹
;

1858 i‡(
ªtvÆ
) {

1859 *
a˘i⁄
 = 0;

1861 *
a˘i⁄
 = 1;

1864 
	}
}

1873 
	$xfs_©å3_Àaf_ªmove
(

1874 
xfs_buf
 *
bp
,

1875 
xfs_da_¨gs
 *
¨gs
)

1877 
xfs_©å_Àafblock
 *
Àaf
;

1878 
xfs_©å3_i˛óf_hdr
 
ichdr
;

1879 
xfs_©å_Àaf_íåy
 *
íåy
;

1880 
bef‹e
;

1881 
a·î
;

1882 
smÆÀ°
;

1883 
ítsize
;

1884 
èbÀsize
;

1885 
tmp
;

1886 
i
;

1888 
	`åa˚_xfs_©å_Àaf_ªmove
(
¨gs
);

1890 
Àaf
 = 
bp
->
b_addr
;

1891 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
¨gs
->
geo
, &
ichdr
, 
Àaf
);

1893 
	`ASSERT
(
ichdr
.
cou¡
 > 0 && ichdr.cou¡ < 
¨gs
->
geo
->
blksize
 / 8);

1894 
	`ASSERT
(
¨gs
->
ödex
 >0 &&árgs->ödex < 
ichdr
.
cou¡
);

1895 
	`ASSERT
(
ichdr
.
fú°u£d
 >ichdr.
cou¡
 * (*
íåy
) +

1896 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
));

1898 
íåy
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf
)[
¨gs
->
ödex
];

1900 
	`ASSERT
(
	`be16_to_˝u
(
íåy
->
«meidx
Ë>
ichdr
.
fú°u£d
);

1901 
	`ASSERT
(
	`be16_to_˝u
(
íåy
->
«meidx
Ë< 
¨gs
->
geo
->
blksize
);

1909 
èbÀsize
 = 
ichdr
.
cou¡
 * (
xfs_©å_Àaf_íåy_t
)

1910 + 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
);

1911 
tmp
 = 
ichdr
.
‰ìm≠
[0].
size
;

1912 
bef‹e
 = 
a·î
 = -1;

1913 
smÆÀ°
 = 
XFS_ATTR_LEAF_MAPSIZE
 - 1;

1914 
ítsize
 = 
	`xfs_©å_Àaf_ítsize
(
Àaf
, 
¨gs
->
ödex
);

1915 
i
 = 0; i < 
XFS_ATTR_LEAF_MAPSIZE
; i++) {

1916 
	`ASSERT
(
ichdr
.
‰ìm≠
[
i
].
ba£
 < 
¨gs
->
geo
->
blksize
);

1917 
	`ASSERT
(
ichdr
.
‰ìm≠
[
i
].
size
 < 
¨gs
->
geo
->
blksize
);

1918 i‡(
ichdr
.
‰ìm≠
[
i
].
ba£
 =
èbÀsize
) {

1919 
ichdr
.
‰ìm≠
[
i
].
ba£
 -(
xfs_©å_Àaf_íåy_t
);

1920 
ichdr
.
‰ìm≠
[
i
].
size
 +(
xfs_©å_Àaf_íåy_t
);

1923 i‡(
ichdr
.
‰ìm≠
[
i
].
ba£
 + ichdr.‰ìm≠[i].
size
 ==

1924 
	`be16_to_˝u
(
íåy
->
«meidx
)) {

1925 
bef‹e
 = 
i
;

1926 } i‡(
ichdr
.
‰ìm≠
[
i
].
ba£
 ==

1927 (
	`be16_to_˝u
(
íåy
->
«meidx
Ë+ 
ítsize
)) {

1928 
a·î
 = 
i
;

1929 } i‡(
ichdr
.
‰ìm≠
[
i
].
size
 < 
tmp
) {

1930 
tmp
 = 
ichdr
.
‰ìm≠
[
i
].
size
;

1931 
smÆÀ°
 = 
i
;

1939 i‡((
bef‹e
 >0Ë|| (
a·î
 >= 0)) {

1940 i‡((
bef‹e
 >0Ë&& (
a·î
 >= 0)) {

1941 
ichdr
.
‰ìm≠
[
bef‹e
].
size
 +
ítsize
;

1942 
ichdr
.
‰ìm≠
[
bef‹e
].
size
 +ichdr.‰ìm≠[
a·î
].size;

1943 
ichdr
.
‰ìm≠
[
a·î
].
ba£
 = 0;

1944 
ichdr
.
‰ìm≠
[
a·î
].
size
 = 0;

1945 } i‡(
bef‹e
 >= 0) {

1946 
ichdr
.
‰ìm≠
[
bef‹e
].
size
 +
ítsize
;

1948 
ichdr
.
‰ìm≠
[
a·î
].
ba£
 = 
	`be16_to_˝u
(
íåy
->
«meidx
);

1949 
ichdr
.
‰ìm≠
[
a·î
].
size
 +
ítsize
;

1955 i‡(
ichdr
.
‰ìm≠
[
smÆÀ°
].
size
 < 
ítsize
) {

1956 
ichdr
.
‰ìm≠
[
smÆÀ°
].
ba£
 = 
	`be16_to_˝u
(
íåy
->
«meidx
);

1957 
ichdr
.
‰ìm≠
[
smÆÀ°
].
size
 = 
ítsize
;

1964 i‡(
	`be16_to_˝u
(
íåy
->
«meidx
Ë=
ichdr
.
fú°u£d
)

1965 
smÆÀ°
 = 1;

1967 
smÆÀ°
 = 0;

1972 
	`mem£t
(
	`xfs_©å3_Àaf_«me
(
Àaf
, 
¨gs
->
ödex
), 0, 
ítsize
);

1973 
ichdr
.
u£dbyãs
 -
ítsize
;

1974 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

1975 
	`XFS_DA_LOGRANGE
(
Àaf
, 
	`xfs_©å3_Àaf_«me
÷óf, 
¨gs
->
ödex
),

1976 
ítsize
));

1978 
tmp
 = (
ichdr
.
cou¡
 - 
¨gs
->
ödex
Ë* (
xfs_©å_Àaf_íåy_t
);

1979 
	`memmove
(
íåy
,É¡ry + 1, 
tmp
);

1980 
ichdr
.
cou¡
--;

1981 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

1982 
	`XFS_DA_LOGRANGE
(
Àaf
, 
íåy
, 
tmp
 + (
xfs_©å_Àaf_íåy_t
)));

1984 
íåy
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf
)[
ichdr
.
cou¡
];

1985 
	`mem£t
(
íåy
, 0, (
xfs_©å_Àaf_íåy_t
));

1993 i‡(
smÆÀ°
) {

1994 
tmp
 = 
¨gs
->
geo
->
blksize
;

1995 
íåy
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

1996 
i
 = 
ichdr
.
cou¡
 - 1; i >0; 
íåy
++, i--) {

1997 
	`ASSERT
(
	`be16_to_˝u
(
íåy
->
«meidx
Ë>
ichdr
.
fú°u£d
);

1998 
	`ASSERT
(
	`be16_to_˝u
(
íåy
->
«meidx
Ë< 
¨gs
->
geo
->
blksize
);

2000 i‡(
	`be16_to_˝u
(
íåy
->
«meidx
Ë< 
tmp
)

2001 
tmp
 = 
	`be16_to_˝u
(
íåy
->
«meidx
);

2003 
ichdr
.
fú°u£d
 = 
tmp
;

2004 
	`ASSERT
(
ichdr
.
fú°u£d
 != 0);

2006 
ichdr
.
hﬁes
 = 1;

2008 
	`xfs_©å3_Àaf_hdr_to_disk
(
¨gs
->
geo
, 
Àaf
, &
ichdr
);

2009 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

2010 
	`XFS_DA_LOGRANGE
(
Àaf
, &Àaf->
hdr
,

2011 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
)));

2017 
tmp
 = 
ichdr
.
u£dbyãs
 + 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
) +

2018 
ichdr
.
cou¡
 * (
xfs_©å_Àaf_íåy_t
);

2020  
tmp
 < 
¨gs
->
geo
->
magi˝˘
;

2021 
	}
}

2027 
	$xfs_©å3_Àaf_unbÆ™˚
(

2028 
xfs_da_°©e
 *
°©e
,

2029 
xfs_da_°©e_blk
 *
dr›_blk
,

2030 
xfs_da_°©e_blk
 *
ßve_blk
)

2032 
xfs_©å_Àafblock
 *
dr›_Àaf
 = 
dr›_blk
->
bp
->
b_addr
;

2033 
xfs_©å_Àafblock
 *
ßve_Àaf
 = 
ßve_blk
->
bp
->
b_addr
;

2034 
xfs_©å3_i˛óf_hdr
 
dr›hdr
;

2035 
xfs_©å3_i˛óf_hdr
 
ßvehdr
;

2036 
xfs_©å_Àaf_íåy
 *
íåy
;

2038 
	`åa˚_xfs_©å_Àaf_unbÆ™˚
(
°©e
->
¨gs
);

2040 
dr›_Àaf
 = 
dr›_blk
->
bp
->
b_addr
;

2041 
ßve_Àaf
 = 
ßve_blk
->
bp
->
b_addr
;

2042 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
°©e
->
¨gs
->
geo
, &
dr›hdr
, 
dr›_Àaf
);

2043 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
°©e
->
¨gs
->
geo
, &
ßvehdr
, 
ßve_Àaf
);

2044 
íåy
 = 
	`xfs_©å3_Àaf_íåyp
(
dr›_Àaf
);

2049 
dr›_blk
->
hashvÆ
 = 
	`be32_to_˝u
(
íåy
[
dr›hdr
.
cou¡
 - 1].hashval);

2056 i‡(
ßvehdr
.
hﬁes
 == 0) {

2061 i‡(
	`xfs_©å3_Àaf_‹dî
(
ßve_blk
->
bp
, &
ßvehdr
,

2062 
dr›_blk
->
bp
, &
dr›hdr
)) {

2063 
	`xfs_©å3_Àaf_movì¡s
(
°©e
->
¨gs
,

2064 
dr›_Àaf
, &
dr›hdr
, 0,

2065 
ßve_Àaf
, &
ßvehdr
, 0,

2066 
dr›hdr
.
cou¡
);

2068 
	`xfs_©å3_Àaf_movì¡s
(
°©e
->
¨gs
,

2069 
dr›_Àaf
, &
dr›hdr
, 0,

2070 
ßve_Àaf
, &
ßvehdr
,

2071 
ßvehdr
.
cou¡
, 
dr›hdr
.count);

2078 
xfs_©å_Àafblock
 *
tmp_Àaf
;

2079 
xfs_©å3_i˛óf_hdr
 
tmphdr
;

2081 
tmp_Àaf
 = 
	`kmem_zÆloc
(
°©e
->
¨gs
->
geo
->
blksize
, 
KM_SLEEP
);

2088 
	`mem˝y
(
tmp_Àaf
, 
ßve_Àaf
, 
	`xfs_©å3_Àaf_hdr_size
(save_leaf));

2090 
	`mem£t
(&
tmphdr
, 0, (tmphdr));

2091 
tmphdr
.
magic
 = 
ßvehdr
.magic;

2092 
tmphdr
.
f‹w
 = 
ßvehdr
.forw;

2093 
tmphdr
.
back
 = 
ßvehdr
.back;

2094 
tmphdr
.
fú°u£d
 = 
°©e
->
¨gs
->
geo
->
blksize
;

2097 
	`xfs_©å3_Àaf_hdr_to_disk
(
°©e
->
¨gs
->
geo
, 
tmp_Àaf
, &
tmphdr
);

2099 i‡(
	`xfs_©å3_Àaf_‹dî
(
ßve_blk
->
bp
, &
ßvehdr
,

2100 
dr›_blk
->
bp
, &
dr›hdr
)) {

2101 
	`xfs_©å3_Àaf_movì¡s
(
°©e
->
¨gs
,

2102 
dr›_Àaf
, &
dr›hdr
, 0,

2103 
tmp_Àaf
, &
tmphdr
, 0,

2104 
dr›hdr
.
cou¡
);

2105 
	`xfs_©å3_Àaf_movì¡s
(
°©e
->
¨gs
,

2106 
ßve_Àaf
, &
ßvehdr
, 0,

2107 
tmp_Àaf
, &
tmphdr
,Åmphdr.
cou¡
,

2108 
ßvehdr
.
cou¡
);

2110 
	`xfs_©å3_Àaf_movì¡s
(
°©e
->
¨gs
,

2111 
ßve_Àaf
, &
ßvehdr
, 0,

2112 
tmp_Àaf
, &
tmphdr
, 0,

2113 
ßvehdr
.
cou¡
);

2114 
	`xfs_©å3_Àaf_movì¡s
(
°©e
->
¨gs
,

2115 
dr›_Àaf
, &
dr›hdr
, 0,

2116 
tmp_Àaf
, &
tmphdr
,Åmphdr.
cou¡
,

2117 
dr›hdr
.
cou¡
);

2119 
	`mem˝y
(
ßve_Àaf
, 
tmp_Àaf
, 
°©e
->
¨gs
->
geo
->
blksize
);

2120 
ßvehdr
 = 
tmphdr
;

2121 
	`kmem_‰ì
(
tmp_Àaf
);

2124 
	`xfs_©å3_Àaf_hdr_to_disk
(
°©e
->
¨gs
->
geo
, 
ßve_Àaf
, &
ßvehdr
);

2125 
	`xfs_å™s_log_buf
(
°©e
->
¨gs
->
å™s
, 
ßve_blk
->
bp
, 0,

2126 
°©e
->
¨gs
->
geo
->
blksize
 - 1);

2131 
íåy
 = 
	`xfs_©å3_Àaf_íåyp
(
ßve_Àaf
);

2132 
ßve_blk
->
hashvÆ
 = 
	`be32_to_˝u
(
íåy
[
ßvehdr
.
cou¡
 - 1].hashval);

2133 
	}
}

2153 
	$xfs_©å3_Àaf_lookup_öt
(

2154 
xfs_buf
 *
bp
,

2155 
xfs_da_¨gs
 *
¨gs
)

2157 
xfs_©å_Àafblock
 *
Àaf
;

2158 
xfs_©å3_i˛óf_hdr
 
ichdr
;

2159 
xfs_©å_Àaf_íåy
 *
íåy
;

2160 
xfs_©å_Àaf_íåy
 *
íåõs
;

2161 
xfs_©å_Àaf_«me_loˇl
 *
«me_loc
;

2162 
xfs_©å_Àaf_«me_ªmŸe
 *
«me_rmt
;

2163 
xfs_dahash_t
 
hashvÆ
;

2164 
¥obe
;

2165 
•™
;

2167 
	`åa˚_xfs_©å_Àaf_lookup
(
¨gs
);

2169 
Àaf
 = 
bp
->
b_addr
;

2170 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
¨gs
->
geo
, &
ichdr
, 
Àaf
);

2171 
íåõs
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

2172 
	`ASSERT
(
ichdr
.
cou¡
 < 
¨gs
->
geo
->
blksize
 / 8);

2177 
hashvÆ
 = 
¨gs
->hashval;

2178 
¥obe
 = 
•™
 = 
ichdr
.
cou¡
 / 2;

2179 
íåy
 = &
íåõs
[
¥obe
]; 
•™
 > 4;Éntry = &entries[probe]) {

2180 
•™
 /= 2;

2181 i‡(
	`be32_to_˝u
(
íåy
->
hashvÆ
) < hashval)

2182 
¥obe
 +
•™
;

2183 i‡(
	`be32_to_˝u
(
íåy
->
hashvÆ
) > hashval)

2184 
¥obe
 -
•™
;

2188 
	`ASSERT
(
¥obe
 >0 && (!
ichdr
.
cou¡
 ||Örobe < ichdr.count));

2189 
	`ASSERT
(
•™
 <4 || 
	`be32_to_˝u
(
íåy
->
hashvÆ
) == hashval);

2195 
¥obe
 > 0 && 
	`be32_to_˝u
(
íåy
->
hashvÆ
) >= hashval) {

2196 
íåy
--;

2197 
¥obe
--;

2199 
¥obe
 < 
ichdr
.
cou¡
 &&

2200 
	`be32_to_˝u
(
íåy
->
hashvÆ
) < hashval) {

2201 
íåy
++;

2202 
¥obe
++;

2204 i‡(
¥obe
 =
ichdr
.
cou¡
 || 
	`be32_to_˝u
(
íåy
->
hashvÆ
) != hashval) {

2205 
¨gs
->
ödex
 = 
¥obe
;

2206  -
ENOATTR
;

2212 ; 
¥obe
 < 
ichdr
.
cou¡
 && (
	`be32_to_˝u
(
íåy
->
hashvÆ
) == hashval);

2213 
íåy
++, 
¥obe
++) {

2221 i‡((
¨gs
->
Êags
 & 
XFS_ATTR_INCOMPLETE
) !=

2222 (
íåy
->
Êags
 & 
XFS_ATTR_INCOMPLETE
)) {

2225 i‡(
íåy
->
Êags
 & 
XFS_ATTR_LOCAL
) {

2226 
«me_loc
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
¥obe
);

2227 i‡(
«me_loc
->
«mñí
 !
¨gs
->namelen)

2229 i‡(
	`memcmp
(
¨gs
->
«me
, 
«me_loc
->
«mevÆ
,

2230 
¨gs
->
«mñí
) != 0)

2232 i‡(!
	`xfs_©å_«me•_m©ch
(
¨gs
->
Êags
, 
íåy
->flags))

2234 
¨gs
->
ödex
 = 
¥obe
;

2235  -
EEXIST
;

2237 
«me_rmt
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
¥obe
);

2238 i‡(
«me_rmt
->
«mñí
 !
¨gs
->namelen)

2240 i‡(
	`memcmp
(
¨gs
->
«me
, 
«me_rmt
->name,

2241 
¨gs
->
«mñí
) != 0)

2243 i‡(!
	`xfs_©å_«me•_m©ch
(
¨gs
->
Êags
, 
íåy
->flags))

2245 
¨gs
->
ödex
 = 
¥obe
;

2246 
¨gs
->
rmtvÆuñí
 = 
	`be32_to_˝u
(
«me_rmt
->
vÆuñí
);

2247 
¨gs
->
rmtblkno
 = 
	`be32_to_˝u
(
«me_rmt
->
vÆueblk
);

2248 
¨gs
->
rmtblk˙t
 = 
	`xfs_©å3_rmt_blocks
(

2249 
¨gs
->
dp
->
i_mou¡
,

2250 
¨gs
->
rmtvÆuñí
);

2251  -
EEXIST
;

2254 
¨gs
->
ödex
 = 
¥obe
;

2255  -
ENOATTR
;

2256 
	}
}

2263 
	$xfs_©å3_Àaf_gëvÆue
(

2264 
xfs_buf
 *
bp
,

2265 
xfs_da_¨gs
 *
¨gs
)

2267 
xfs_©å_Àafblock
 *
Àaf
;

2268 
xfs_©å3_i˛óf_hdr
 
ichdr
;

2269 
xfs_©å_Àaf_íåy
 *
íåy
;

2270 
xfs_©å_Àaf_«me_loˇl
 *
«me_loc
;

2271 
xfs_©å_Àaf_«me_ªmŸe
 *
«me_rmt
;

2272 
vÆuñí
;

2274 
Àaf
 = 
bp
->
b_addr
;

2275 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
¨gs
->
geo
, &
ichdr
, 
Àaf
);

2276 
	`ASSERT
(
ichdr
.
cou¡
 < 
¨gs
->
geo
->
blksize
 / 8);

2277 
	`ASSERT
(
¨gs
->
ödex
 < 
ichdr
.
cou¡
);

2279 
íåy
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf
)[
¨gs
->
ödex
];

2280 i‡(
íåy
->
Êags
 & 
XFS_ATTR_LOCAL
) {

2281 
«me_loc
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
¨gs
->
ödex
);

2282 
	`ASSERT
(
«me_loc
->
«mñí
 =
¨gs
->namelen);

2283 
	`ASSERT
(
	`memcmp
(
¨gs
->
«me
, 
«me_loc
->
«mevÆ
,árgs->
«mñí
) == 0);

2284 
vÆuñí
 = 
	`be16_to_˝u
(
«me_loc
->valuelen);

2285 i‡(
¨gs
->
Êags
 & 
ATTR_KERNOVAL
) {

2286 
¨gs
->
vÆuñí
 = valuelen;

2289 i‡(
¨gs
->
vÆuñí
 < valuelen) {

2290 
¨gs
->
vÆuñí
 = valuelen;

2291  -
ERANGE
;

2293 
¨gs
->
vÆuñí
 = valuelen;

2294 
	`mem˝y
(
¨gs
->
vÆue
, &
«me_loc
->
«mevÆ
[¨gs->
«mñí
], 
vÆuñí
);

2296 
«me_rmt
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
¨gs
->
ödex
);

2297 
	`ASSERT
(
«me_rmt
->
«mñí
 =
¨gs
->namelen);

2298 
	`ASSERT
(
	`memcmp
(
¨gs
->
«me
, 
«me_rmt
->«me,árgs->
«mñí
) == 0);

2299 
¨gs
->
rmtvÆuñí
 = 
	`be32_to_˝u
(
«me_rmt
->
vÆuñí
);

2300 
¨gs
->
rmtblkno
 = 
	`be32_to_˝u
(
«me_rmt
->
vÆueblk
);

2301 
¨gs
->
rmtblk˙t
 = 
	`xfs_©å3_rmt_blocks
◊rgs->
dp
->
i_mou¡
,

2302 
¨gs
->
rmtvÆuñí
);

2303 i‡(
¨gs
->
Êags
 & 
ATTR_KERNOVAL
) {

2304 
¨gs
->
vÆuñí
 =árgs->
rmtvÆuñí
;

2307 i‡(
¨gs
->
vÆuñí
 <árgs->
rmtvÆuñí
) {

2308 
¨gs
->
vÆuñí
 =árgs->
rmtvÆuñí
;

2309  -
ERANGE
;

2311 
¨gs
->
vÆuñí
 =árgs->
rmtvÆuñí
;

2314 
	}
}

2325 
STATIC
 

2326 
	$xfs_©å3_Àaf_movì¡s
(

2327 
xfs_da_¨gs
 *
¨gs
,

2328 
xfs_©å_Àafblock
 *
Àaf_s
,

2329 
xfs_©å3_i˛óf_hdr
 *
ichdr_s
,

2330 
°¨t_s
,

2331 
xfs_©å_Àafblock
 *
Àaf_d
,

2332 
xfs_©å3_i˛óf_hdr
 *
ichdr_d
,

2333 
°¨t_d
,

2334 
cou¡
)

2336 
xfs_©å_Àaf_íåy
 *
íåy_s
;

2337 
xfs_©å_Àaf_íåy
 *
íåy_d
;

2338 
de°i
;

2339 
tmp
;

2340 
i
;

2345 i‡(
cou¡
 == 0)

2351 
	`ASSERT
(
ichdr_s
->
magic
 =
XFS_ATTR_LEAF_MAGIC
 ||

2352 
ichdr_s
->
magic
 =
XFS_ATTR3_LEAF_MAGIC
);

2353 
	`ASSERT
(
ichdr_s
->
magic
 =
ichdr_d
->magic);

2354 
	`ASSERT
(
ichdr_s
->
cou¡
 > 0 && ichdr_s->cou¡ < 
¨gs
->
geo
->
blksize
 / 8);

2355 
	`ASSERT
(
ichdr_s
->
fú°u£d
 >(ichdr_s->
cou¡
 * (*
íåy_s
))

2356 + 
	`xfs_©å3_Àaf_hdr_size
(
Àaf_s
));

2357 
	`ASSERT
(
ichdr_d
->
cou¡
 < 
¨gs
->
geo
->
blksize
 / 8);

2358 
	`ASSERT
(
ichdr_d
->
fú°u£d
 >(ichdr_d->
cou¡
 * (*
íåy_d
))

2359 + 
	`xfs_©å3_Àaf_hdr_size
(
Àaf_d
));

2361 
	`ASSERT
(
°¨t_s
 < 
ichdr_s
->
cou¡
);

2362 
	`ASSERT
(
°¨t_d
 <
ichdr_d
->
cou¡
);

2363 
	`ASSERT
(
cou¡
 <
ichdr_s
->count);

2369 i‡(
°¨t_d
 < 
ichdr_d
->
cou¡
) {

2370 
tmp
 = 
ichdr_d
->
cou¡
 - 
°¨t_d
;

2371 
tmp
 *(
xfs_©å_Àaf_íåy_t
);

2372 
íåy_s
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf_d
)[
°¨t_d
];

2373 
íåy_d
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf_d
)[
°¨t_d
 + 
cou¡
];

2374 
	`memmove
(
íåy_d
, 
íåy_s
, 
tmp
);

2381 
íåy_s
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf_s
)[
°¨t_s
];

2382 
íåy_d
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf_d
)[
°¨t_d
];

2383 
de°i
 = 
°¨t_d
;

2384 
i
 = 0; i < 
cou¡
; 
íåy_s
++, 
íåy_d
++, 
de°i
++, i++) {

2385 
	`ASSERT
(
	`be16_to_˝u
(
íåy_s
->
«meidx
Ë>
ichdr_s
->
fú°u£d
);

2386 
tmp
 = 
	`xfs_©å_Àaf_ítsize
(
Àaf_s
, 
°¨t_s
 + 
i
);

2387 #ifde‡
GROT


2393 i‡(
íåy_s
->
Êags
 & 
XFS_ATTR_INCOMPLETE
) {

2394 
	`mem£t
(
	`xfs_©å3_Àaf_«me
(
Àaf_s
, 
°¨t_s
 + 
i
), 0, 
tmp
);

2395 
ichdr_s
->
u£dbyãs
 -
tmp
;

2396 
ichdr_s
->
cou¡
 -= 1;

2397 
íåy_d
--;

2398 
de°i
--;

2399 i‡((
°¨t_s
 + 
i
Ë< 
off£t
)

2400 
ªsu…
++;

2403 
ichdr_d
->
fú°u£d
 -
tmp
;

2405 
íåy_d
->
hashvÆ
 = 
íåy_s
->hashval;

2406 
íåy_d
->
«meidx
 = 
	`˝u_to_be16
(
ichdr_d
->
fú°u£d
);

2407 
íåy_d
->
Êags
 = 
íåy_s
->flags;

2408 
	`ASSERT
(
	`be16_to_˝u
(
íåy_d
->
«meidx
Ë+ 
tmp


2409 <
¨gs
->
geo
->
blksize
);

2410 
	`memmove
(
	`xfs_©å3_Àaf_«me
(
Àaf_d
, 
de°i
),

2411 
	`xfs_©å3_Àaf_«me
(
Àaf_s
, 
°¨t_s
 + 
i
), 
tmp
);

2412 
	`ASSERT
(
	`be16_to_˝u
(
íåy_s
->
«meidx
Ë+ 
tmp


2413 <
¨gs
->
geo
->
blksize
);

2414 
	`mem£t
(
	`xfs_©å3_Àaf_«me
(
Àaf_s
, 
°¨t_s
 + 
i
), 0, 
tmp
);

2415 
ichdr_s
->
u£dbyãs
 -
tmp
;

2416 
ichdr_d
->
u£dbyãs
 +
tmp
;

2417 
ichdr_s
->
cou¡
 -= 1;

2418 
ichdr_d
->
cou¡
 += 1;

2419 
tmp
 = 
ichdr_d
->
cou¡
 * (
xfs_©å_Àaf_íåy_t
)

2420 + 
	`xfs_©å3_Àaf_hdr_size
(
Àaf_d
);

2421 
	`ASSERT
(
ichdr_d
->
fú°u£d
 >
tmp
);

2422 #ifde‡
GROT


2430 i‡(
°¨t_s
 =
ichdr_s
->
cou¡
) {

2431 
tmp
 = 
cou¡
 * (
xfs_©å_Àaf_íåy_t
);

2432 
íåy_s
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf_s
)[
°¨t_s
];

2433 
	`ASSERT
(((*)
íåy_s
 + 
tmp
) <=

2434 ((*)
Àaf_s
 + 
¨gs
->
geo
->
blksize
));

2435 
	`mem£t
(
íåy_s
, 0, 
tmp
);

2441 
tmp
 = (
ichdr_s
->
cou¡
 - cou¡Ë* (
xfs_©å_Àaf_íåy_t
);

2442 
íåy_s
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf_s
)[
°¨t_s
 + 
cou¡
];

2443 
íåy_d
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf_s
)[
°¨t_s
];

2444 
	`memmove
(
íåy_d
, 
íåy_s
, 
tmp
);

2446 
tmp
 = 
cou¡
 * (
xfs_©å_Àaf_íåy_t
);

2447 
íåy_s
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf_s
)[
ichdr_s
->
cou¡
];

2448 
	`ASSERT
(((*)
íåy_s
 + 
tmp
) <=

2449 ((*)
Àaf_s
 + 
¨gs
->
geo
->
blksize
));

2450 
	`mem£t
(
íåy_s
, 0, 
tmp
);

2456 
ichdr_d
->
‰ìm≠
[0].
ba£
 = 
	`xfs_©å3_Àaf_hdr_size
(
Àaf_d
);

2457 
ichdr_d
->
‰ìm≠
[0].
ba£
 +ichdr_d->
cou¡
 * (
xfs_©å_Àaf_íåy_t
);

2458 
ichdr_d
->
‰ìm≠
[0].
size
 = ichdr_d->
fú°u£d
 - ichdr_d->‰ìm≠[0].
ba£
;

2459 
ichdr_d
->
‰ìm≠
[1].
ba£
 = 0;

2460 
ichdr_d
->
‰ìm≠
[2].
ba£
 = 0;

2461 
ichdr_d
->
‰ìm≠
[1].
size
 = 0;

2462 
ichdr_d
->
‰ìm≠
[2].
size
 = 0;

2463 
ichdr_s
->
hﬁes
 = 1;

2464 
	}
}

2469 
xfs_dahash_t


2470 
	$xfs_©å_Àaf_œ°hash
(

2471 
xfs_buf
 *
bp
,

2472 *
cou¡
)

2474 
xfs_©å3_i˛óf_hdr
 
ichdr
;

2475 
xfs_©å_Àaf_íåy
 *
íåõs
;

2476 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

2478 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
ichdr
, 
bp
->
b_addr
);

2479 
íåõs
 = 
	`xfs_©å3_Àaf_íåyp
(
bp
->
b_addr
);

2480 i‡(
cou¡
)

2481 *
cou¡
 = 
ichdr
.count;

2482 i‡(!
ichdr
.
cou¡
)

2484  
	`be32_to_˝u
(
íåõs
[
ichdr
.
cou¡
 - 1].
hashvÆ
);

2485 
	}
}

2491 
STATIC
 

2492 
	$xfs_©å_Àaf_ítsize
(
xfs_©å_Àafblock_t
 *
Àaf
, 
ödex
)

2494 
xfs_©å_Àaf_íåy
 *
íåõs
;

2495 
xfs_©å_Àaf_«me_loˇl_t
 *
«me_loc
;

2496 
xfs_©å_Àaf_«me_ªmŸe_t
 *
«me_rmt
;

2497 
size
;

2499 
íåõs
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

2500 i‡(
íåõs
[
ödex
].
Êags
 & 
XFS_ATTR_LOCAL
) {

2501 
«me_loc
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
ödex
);

2502 
size
 = 
	`xfs_©å_Àaf_ítsize_loˇl
(
«me_loc
->
«mñí
,

2503 
	`be16_to_˝u
(
«me_loc
->
vÆuñí
));

2505 
«me_rmt
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
ödex
);

2506 
size
 = 
	`xfs_©å_Àaf_ítsize_ªmŸe
(
«me_rmt
->
«mñí
);

2508  
size
;

2509 
	}
}

2518 
	$xfs_©å_Àaf_√wítsize
(

2519 
xfs_da_¨gs
 *
¨gs
,

2520 *
loˇl
)

2522 
size
;

2524 
size
 = 
	`xfs_©å_Àaf_ítsize_loˇl
(
¨gs
->
«mñí
,árgs->
vÆuñí
);

2525 i‡(
size
 < 
	`xfs_©å_Àaf_ítsize_loˇl_max
(
¨gs
->
geo
->
blksize
)) {

2526 i‡(
loˇl
)

2527 *
loˇl
 = 1;

2528  
size
;

2530 i‡(
loˇl
)

2531 *
loˇl
 = 0;

2532  
	`xfs_©å_Àaf_ítsize_ªmŸe
(
¨gs
->
«mñí
);

2533 
	}
}

2544 
	$xfs_©å3_Àaf_˛órÊag
(

2545 
xfs_da_¨gs
 *
¨gs
)

2547 
xfs_©å_Àafblock
 *
Àaf
;

2548 
xfs_©å_Àaf_íåy
 *
íåy
;

2549 
xfs_©å_Àaf_«me_ªmŸe
 *
«me_rmt
;

2550 
xfs_buf
 *
bp
;

2551 
îr‹
;

2552 #ifde‡
DEBUG


2553 
xfs_©å3_i˛óf_hdr
 
ichdr
;

2554 
xfs_©å_Àaf_«me_loˇl_t
 *
«me_loc
;

2555 
«mñí
;

2556 *
«me
;

2559 
	`åa˚_xfs_©å_Àaf_˛órÊag
(
¨gs
);

2563 
îr‹
 = 
	`xfs_©å3_Àaf_ªad
(
¨gs
->
å™s
,árgs->
dp
,árgs->
blkno
, -1, &
bp
);

2564 i‡(
îr‹
)

2565  
îr‹
;

2567 
Àaf
 = 
bp
->
b_addr
;

2568 
íåy
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf
)[
¨gs
->
ödex
];

2569 
	`ASSERT
(
íåy
->
Êags
 & 
XFS_ATTR_INCOMPLETE
);

2571 #ifde‡
DEBUG


2572 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
¨gs
->
geo
, &
ichdr
, 
Àaf
);

2573 
	`ASSERT
(
¨gs
->
ödex
 < 
ichdr
.
cou¡
);

2574 
	`ASSERT
(
¨gs
->
ödex
 >= 0);

2576 i‡(
íåy
->
Êags
 & 
XFS_ATTR_LOCAL
) {

2577 
«me_loc
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
¨gs
->
ödex
);

2578 
«mñí
 = 
«me_loc
->namelen;

2579 
«me
 = (*)
«me_loc
->
«mevÆ
;

2581 
«me_rmt
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
¨gs
->
ödex
);

2582 
«mñí
 = 
«me_rmt
->namelen;

2583 
«me
 = (*)
«me_rmt
->name;

2585 
	`ASSERT
(
	`be32_to_˝u
(
íåy
->
hashvÆ
Ë=
¨gs
->hashval);

2586 
	`ASSERT
(
«mñí
 =
¨gs
->namelen);

2587 
	`ASSERT
(
	`memcmp
(
«me
, 
¨gs
->«me, 
«mñí
) == 0);

2590 
íåy
->
Êags
 &~
XFS_ATTR_INCOMPLETE
;

2591 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

2592 
	`XFS_DA_LOGRANGE
(
Àaf
, 
íåy
, (*entry)));

2594 i‡(
¨gs
->
rmtblkno
) {

2595 
	`ASSERT
((
íåy
->
Êags
 & 
XFS_ATTR_LOCAL
) == 0);

2596 
«me_rmt
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
¨gs
->
ödex
);

2597 
«me_rmt
->
vÆueblk
 = 
	`˝u_to_be32
(
¨gs
->
rmtblkno
);

2598 
«me_rmt
->
vÆuñí
 = 
	`˝u_to_be32
(
¨gs
->
rmtvÆuñí
);

2599 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

2600 
	`XFS_DA_LOGRANGE
(
Àaf
, 
«me_rmt
, (*name_rmt)));

2606  
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
,árgs->
dp
);

2607 
	}
}

2613 
	$xfs_©å3_Àaf_£tÊag
(

2614 
xfs_da_¨gs
 *
¨gs
)

2616 
xfs_©å_Àafblock
 *
Àaf
;

2617 
xfs_©å_Àaf_íåy
 *
íåy
;

2618 
xfs_©å_Àaf_«me_ªmŸe
 *
«me_rmt
;

2619 
xfs_buf
 *
bp
;

2620 
îr‹
;

2621 #ifde‡
DEBUG


2622 
xfs_©å3_i˛óf_hdr
 
ichdr
;

2625 
	`åa˚_xfs_©å_Àaf_£tÊag
(
¨gs
);

2630 
îr‹
 = 
	`xfs_©å3_Àaf_ªad
(
¨gs
->
å™s
,árgs->
dp
,árgs->
blkno
, -1, &
bp
);

2631 i‡(
îr‹
)

2632  
îr‹
;

2634 
Àaf
 = 
bp
->
b_addr
;

2635 #ifde‡
DEBUG


2636 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
¨gs
->
geo
, &
ichdr
, 
Àaf
);

2637 
	`ASSERT
(
¨gs
->
ödex
 < 
ichdr
.
cou¡
);

2638 
	`ASSERT
(
¨gs
->
ödex
 >= 0);

2640 
íåy
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf
)[
¨gs
->
ödex
];

2642 
	`ASSERT
((
íåy
->
Êags
 & 
XFS_ATTR_INCOMPLETE
) == 0);

2643 
íåy
->
Êags
 |
XFS_ATTR_INCOMPLETE
;

2644 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

2645 
	`XFS_DA_LOGRANGE
(
Àaf
, 
íåy
, (*entry)));

2646 i‡((
íåy
->
Êags
 & 
XFS_ATTR_LOCAL
) == 0) {

2647 
«me_rmt
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
¨gs
->
ödex
);

2648 
«me_rmt
->
vÆueblk
 = 0;

2649 
«me_rmt
->
vÆuñí
 = 0;

2650 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

2651 
	`XFS_DA_LOGRANGE
(
Àaf
, 
«me_rmt
, (*name_rmt)));

2657  
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
,árgs->
dp
);

2658 
	}
}

2668 
	$xfs_©å3_Àaf_ÊùÊags
(

2669 
xfs_da_¨gs
 *
¨gs
)

2671 
xfs_©å_Àafblock
 *
Àaf1
;

2672 
xfs_©å_Àafblock
 *
Àaf2
;

2673 
xfs_©å_Àaf_íåy
 *
íåy1
;

2674 
xfs_©å_Àaf_íåy
 *
íåy2
;

2675 
xfs_©å_Àaf_«me_ªmŸe
 *
«me_rmt
;

2676 
xfs_buf
 *
bp1
;

2677 
xfs_buf
 *
bp2
;

2678 
îr‹
;

2679 #ifde‡
DEBUG


2680 
xfs_©å3_i˛óf_hdr
 
ichdr1
;

2681 
xfs_©å3_i˛óf_hdr
 
ichdr2
;

2682 
xfs_©å_Àaf_«me_loˇl_t
 *
«me_loc
;

2683 
«mñí1
, 
«mñí2
;

2684 *
«me1
, *
«me2
;

2687 
	`åa˚_xfs_©å_Àaf_ÊùÊags
(
¨gs
);

2692 
îr‹
 = 
	`xfs_©å3_Àaf_ªad
(
¨gs
->
å™s
,árgs->
dp
,árgs->
blkno
, -1, &
bp1
);

2693 i‡(
îr‹
)

2694  
îr‹
;

2699 i‡(
¨gs
->
blkno2
 !¨gs->
blkno
) {

2700 
îr‹
 = 
	`xfs_©å3_Àaf_ªad
(
¨gs
->
å™s
,árgs->
dp
,árgs->
blkno2
,

2701 -1, &
bp2
);

2702 i‡(
îr‹
)

2703  
îr‹
;

2705 
bp2
 = 
bp1
;

2708 
Àaf1
 = 
bp1
->
b_addr
;

2709 
íåy1
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf1
)[
¨gs
->
ödex
];

2711 
Àaf2
 = 
bp2
->
b_addr
;

2712 
íåy2
 = &
	`xfs_©å3_Àaf_íåyp
(
Àaf2
)[
¨gs
->
ödex2
];

2714 #ifde‡
DEBUG


2715 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
¨gs
->
geo
, &
ichdr1
, 
Àaf1
);

2716 
	`ASSERT
(
¨gs
->
ödex
 < 
ichdr1
.
cou¡
);

2717 
	`ASSERT
(
¨gs
->
ödex
 >= 0);

2719 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
¨gs
->
geo
, &
ichdr2
, 
Àaf2
);

2720 
	`ASSERT
(
¨gs
->
ödex2
 < 
ichdr2
.
cou¡
);

2721 
	`ASSERT
(
¨gs
->
ödex2
 >= 0);

2723 i‡(
íåy1
->
Êags
 & 
XFS_ATTR_LOCAL
) {

2724 
«me_loc
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf1
, 
¨gs
->
ödex
);

2725 
«mñí1
 = 
«me_loc
->
«mñí
;

2726 
«me1
 = (*)
«me_loc
->
«mevÆ
;

2728 
«me_rmt
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf1
, 
¨gs
->
ödex
);

2729 
«mñí1
 = 
«me_rmt
->
«mñí
;

2730 
«me1
 = (*)
«me_rmt
->
«me
;

2732 i‡(
íåy2
->
Êags
 & 
XFS_ATTR_LOCAL
) {

2733 
«me_loc
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf2
, 
¨gs
->
ödex2
);

2734 
«mñí2
 = 
«me_loc
->
«mñí
;

2735 
«me2
 = (*)
«me_loc
->
«mevÆ
;

2737 
«me_rmt
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf2
, 
¨gs
->
ödex2
);

2738 
«mñí2
 = 
«me_rmt
->
«mñí
;

2739 
«me2
 = (*)
«me_rmt
->
«me
;

2741 
	`ASSERT
(
	`be32_to_˝u
(
íåy1
->
hashvÆ
Ë=be32_to_˝u(
íåy2
->hashval));

2742 
	`ASSERT
(
«mñí1
 =
«mñí2
);

2743 
	`ASSERT
(
	`memcmp
(
«me1
, 
«me2
, 
«mñí1
) == 0);

2746 
	`ASSERT
(
íåy1
->
Êags
 & 
XFS_ATTR_INCOMPLETE
);

2747 
	`ASSERT
((
íåy2
->
Êags
 & 
XFS_ATTR_INCOMPLETE
) == 0);

2749 
íåy1
->
Êags
 &~
XFS_ATTR_INCOMPLETE
;

2750 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp1
,

2751 
	`XFS_DA_LOGRANGE
(
Àaf1
, 
íåy1
, (*entry1)));

2752 i‡(
¨gs
->
rmtblkno
) {

2753 
	`ASSERT
((
íåy1
->
Êags
 & 
XFS_ATTR_LOCAL
) == 0);

2754 
«me_rmt
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf1
, 
¨gs
->
ödex
);

2755 
«me_rmt
->
vÆueblk
 = 
	`˝u_to_be32
(
¨gs
->
rmtblkno
);

2756 
«me_rmt
->
vÆuñí
 = 
	`˝u_to_be32
(
¨gs
->
rmtvÆuñí
);

2757 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp1
,

2758 
	`XFS_DA_LOGRANGE
(
Àaf1
, 
«me_rmt
, (*name_rmt)));

2761 
íåy2
->
Êags
 |
XFS_ATTR_INCOMPLETE
;

2762 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp2
,

2763 
	`XFS_DA_LOGRANGE
(
Àaf2
, 
íåy2
, (*entry2)));

2764 i‡((
íåy2
->
Êags
 & 
XFS_ATTR_LOCAL
) == 0) {

2765 
«me_rmt
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf2
, 
¨gs
->
ödex2
);

2766 
«me_rmt
->
vÆueblk
 = 0;

2767 
«me_rmt
->
vÆuñí
 = 0;

2768 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp2
,

2769 
	`XFS_DA_LOGRANGE
(
Àaf2
, 
«me_rmt
, (*name_rmt)));

2775 
îr‹
 = 
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
,árgs->
dp
);

2777  
îr‹
;

2778 
	}
}

	@libxfs/xfs_attr_leaf.h

19 #i‚de‡
__XFS_ATTR_LEAF_H__


20 
	#__XFS_ATTR_LEAF_H__


	)

22 
	g©åli°
;

23 
	g©åli°_curs‹_kîn
;

24 
	gxfs_©å_li°_c⁄ãxt
;

25 
	gxfs_da_¨gs
;

26 
	gxfs_da_°©e
;

27 
	gxfs_da_°©e_blk
;

28 
	gxfs_öode
;

29 
	gxfs_å™s
;

34 
	sxfs_©å_öa˘ive_li°
 {

35 
xfs_dablk_t
 
	mvÆueblk
;

36 
	mvÆuñí
;

37 } 
	txfs_©å_öa˘ive_li°_t
;

47 
xfs_©å_sh‹tf‹m_¸óã
(
xfs_da_¨gs
 *
¨gs
);

48 
xfs_©å_sh‹tf‹m_add
(
xfs_da_¨gs
 *
¨gs
, 
f‹koff
);

49 
xfs_©å_sh‹tf‹m_lookup
(
xfs_da_¨gs
 *
¨gs
);

50 
xfs_©å_sh‹tf‹m_gëvÆue
(
xfs_da_¨gs
 *
¨gs
);

51 
xfs_©å_sh‹tf‹m_to_Àaf
(
xfs_da_¨gs
 *
¨gs
);

52 
xfs_©å_sh‹tf‹m_ªmove
(
xfs_da_¨gs
 *
¨gs
);

53 
xfs_©å_sh‹tf‹m_Ælfô
(
xfs_buf
 *
bp
, 
xfs_öode
 *
dp
);

54 
xfs_©å_sh‹tf‹m_byãsfô
(
xfs_öode
 *
dp
, 
byãs
);

55 
xfs_©å_f‹k_ªmove
(
xfs_öode
 *
ù
, 
xfs_å™s
 *
ç
);

60 
xfs_©å3_Àaf_to_node
(
xfs_da_¨gs
 *
¨gs
);

61 
xfs_©å3_Àaf_to_sh‹tf‹m
(
xfs_buf
 *
bp
,

62 
xfs_da_¨gs
 *
¨gs
, 
f‹koff
);

63 
xfs_©å3_Àaf_˛órÊag
(
xfs_da_¨gs
 *
¨gs
);

64 
xfs_©å3_Àaf_£tÊag
(
xfs_da_¨gs
 *
¨gs
);

65 
xfs_©å3_Àaf_ÊùÊags
(
xfs_da_¨gs
 *
¨gs
);

70 
xfs_©å3_Àaf_•lô
(
xfs_da_°©e
 *
°©e
,

71 
xfs_da_°©e_blk
 *
ﬁdblk
,

72 
xfs_da_°©e_blk
 *
√wblk
);

73 
xfs_©å3_Àaf_lookup_öt
(
xfs_buf
 *
Àaf
,

74 
xfs_da_¨gs
 *
¨gs
);

75 
xfs_©å3_Àaf_gëvÆue
(
xfs_buf
 *
bp
, 
xfs_da_¨gs
 *
¨gs
);

76 
xfs_©å3_Àaf_add
(
xfs_buf
 *
Àaf_buf„r
,

77 
xfs_da_¨gs
 *
¨gs
);

78 
xfs_©å3_Àaf_ªmove
(
xfs_buf
 *
Àaf_buf„r
,

79 
xfs_da_¨gs
 *
¨gs
);

80 
xfs_©å3_Àaf_li°_öt
(
xfs_buf
 *
bp
,

81 
xfs_©å_li°_c⁄ãxt
 *
c⁄ãxt
);

86 
xfs_©å3_Àaf_toosmÆl
(
xfs_da_°©e
 *
°©e
, *
ªtvÆ
);

87 
xfs_©å3_Àaf_unbÆ™˚
(
xfs_da_°©e
 *
°©e
,

88 
xfs_da_°©e_blk
 *
dr›_blk
,

89 
xfs_da_°©e_blk
 *
ßve_blk
);

93 
xfs_dahash_t
 
xfs_©å_Àaf_œ°hash
(
xfs_buf
 *
bp
, *
cou¡
);

94 
xfs_©å_Àaf_‹dî
(
xfs_buf
 *
Àaf1_bp
,

95 
xfs_buf
 *
Àaf2_bp
);

96 
xfs_©å_Àaf_√wítsize
(
xfs_da_¨gs
 *
¨gs
, *
loˇl
);

97 
xfs_©å3_Àaf_ªad
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

98 
xfs_dablk_t
 
bno
, 
xfs_daddr_t
 
m≠≥dbno
,

99 
xfs_buf
 **
bµ
);

100 
xfs_©å3_Àaf_hdr_‰om_disk
(
xfs_da_geomëry
 *
geo
,

101 
xfs_©å3_i˛óf_hdr
 *
to
,

102 
xfs_©å_Àafblock
 *
‰om
);

103 
xfs_©å3_Àaf_hdr_to_disk
(
xfs_da_geomëry
 *
geo
,

104 
xfs_©å_Àafblock
 *
to
,

105 
xfs_©å3_i˛óf_hdr
 *
‰om
);

	@libxfs/xfs_attr_remote.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_sh¨ed.h
"

22 
	~"xfs_f‹m©.h
"

23 
	~"xfs_log_f‹m©.h
"

24 
	~"xfs_å™s_ªsv.h
"

25 
	~"xfs_bô.h
"

26 
	~"xfs_mou¡.h
"

27 
	~"xfs_de„r.h
"

28 
	~"xfs_da_f‹m©.h
"

29 
	~"xfs_da_båì.h
"

30 
	~"xfs_öode.h
"

31 
	~"xfs_Æloc.h
"

32 
	~"xfs_å™s.h
"

33 
	~"xfs_bm≠.h
"

34 
	~"xfs_©å_Àaf.h
"

35 
	~"xfs_©å_ªmŸe.h
"

36 
	~"xfs_å™s_•a˚.h
"

37 
	~"xfs_åa˚.h
"

38 
	~"xfs_cksum.h
"

40 
	#ATTR_RMTVALUE_MAPSIZE
 1

	)

47 
	$xfs_©å3_rmt_blocks
(

48 
xfs_mou¡
 *
mp
,

49 
©åÀn
)

51 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

52 
buÊí
 = 
	`XFS_ATTR3_RMT_BUF_SPACE
(
mp
, mp->
m_sb
.
sb_blocksize
);

53  (
©åÀn
 + 
buÊí
 - 1) / buflen;

55  
	`XFS_B_TO_FSB
(
mp
, 
©åÀn
);

56 
	}
}

63 
boﬁ


64 
	$xfs_©å3_rmt_hdr_ok
(

65 *
±r
,

66 
xfs_öo_t
 
öo
,

67 
uöt32_t
 
off£t
,

68 
uöt32_t
 
size
,

69 
xfs_daddr_t
 
bno
)

71 
xfs_©å3_rmt_hdr
 *
rmt
 = 
±r
;

73 i‡(
bno
 !
	`be64_to_˝u
(
rmt
->
rm_blkno
))

74  
Ál£
;

75 i‡(
off£t
 !
	`be32_to_˝u
(
rmt
->
rm_off£t
))

76  
Ál£
;

77 i‡(
size
 !
	`be32_to_˝u
(
rmt
->
rm_byãs
))

78  
Ál£
;

79 i‡(
öo
 !
	`be64_to_˝u
(
rmt
->
rm_ow√r
))

80  
Ál£
;

83  
åue
;

84 
	}
}

86 
boﬁ


87 
	$xfs_©å3_rmt_vîify
(

88 
xfs_mou¡
 *
mp
,

89 *
±r
,

90 
fsbsize
,

91 
xfs_daddr_t
 
bno
)

93 
xfs_©å3_rmt_hdr
 *
rmt
 = 
±r
;

95 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

96  
Ál£
;

97 i‡(
rmt
->
rm_magic
 !
	`˝u_to_be32
(
XFS_ATTR3_RMT_MAGIC
))

98  
Ál£
;

99 i‡(!
	`uuid_equÆ
(&
rmt
->
rm_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

100  
Ál£
;

101 i‡(
	`be64_to_˝u
(
rmt
->
rm_blkno
Ë!
bno
)

102  
Ál£
;

103 i‡(
	`be32_to_˝u
(
rmt
->
rm_byãs
Ë> 
fsbsize
 - (*rmt))

104  
Ál£
;

105 i‡(
	`be32_to_˝u
(
rmt
->
rm_off£t
) +

106 
	`be32_to_˝u
(
rmt
->
rm_byãs
Ë> 
XFS_XATTR_SIZE_MAX
)

107  
Ál£
;

108 i‡(
rmt
->
rm_ow√r
 == 0)

109  
Ál£
;

111  
åue
;

112 
	}
}

115 
	$xfs_©å3_rmt_ªad_vîify
(

116 
xfs_buf
 *
bp
)

118 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

119 *
±r
;

120 
Àn
;

121 
xfs_daddr_t
 
bno
;

122 
blksize
 = 
mp
->
m_©å_geo
->blksize;

125 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

128 
±r
 = 
bp
->
b_addr
;

129 
bno
 = 
bp
->
b_bn
;

130 
Àn
 = 
	`BBTOB
(
bp
->
b_Àngth
);

131 
	`ASSERT
(
Àn
 >
blksize
);

133 
Àn
 > 0) {

134 i‡(!
	`xfs_vîify_cksum
(
±r
, 
blksize
, 
XFS_ATTR3_RMT_CRC_OFF
)) {

135 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

138 i‡(!
	`xfs_©å3_rmt_vîify
(
mp
, 
±r
, 
blksize
, 
bno
)) {

139 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

142 
Àn
 -
blksize
;

143 
±r
 +
blksize
;

144 
bno
 +
	`BTOBB
(
blksize
);

147 i‡(
bp
->
b_îr‹
)

148 
	`xfs_vîifõr_îr‹
(
bp
);

150 
	`ASSERT
(
Àn
 == 0);

151 
	}
}

154 
	$xfs_©å3_rmt_wrôe_vîify
(

155 
xfs_buf
 *
bp
)

157 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

158 
blksize
 = 
mp
->
m_©å_geo
->blksize;

159 *
±r
;

160 
Àn
;

161 
xfs_daddr_t
 
bno
;

164 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

167 
±r
 = 
bp
->
b_addr
;

168 
bno
 = 
bp
->
b_bn
;

169 
Àn
 = 
	`BBTOB
(
bp
->
b_Àngth
);

170 
	`ASSERT
(
Àn
 >
blksize
);

172 
Àn
 > 0) {

173 
xfs_©å3_rmt_hdr
 *
rmt
 = (xfs_©å3_rmt_hd∏*)
±r
;

175 i‡(!
	`xfs_©å3_rmt_vîify
(
mp
, 
±r
, 
blksize
, 
bno
)) {

176 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

177 
	`xfs_vîifõr_îr‹
(
bp
);

185 i‡(
rmt
->
rm_l¢
 !
	`˝u_to_be64
(
NULLCOMMITLSN
)) {

186 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

187 
	`xfs_vîifõr_îr‹
(
bp
);

190 
	`xfs_upd©e_cksum
(
±r
, 
blksize
, 
XFS_ATTR3_RMT_CRC_OFF
);

192 
Àn
 -
blksize
;

193 
±r
 +
blksize
;

194 
bno
 +
	`BTOBB
(
blksize
);

196 
	`ASSERT
(
Àn
 == 0);

197 
	}
}

199 c⁄° 
xfs_buf_›s
 
	gxfs_©å3_rmt_buf_›s
 = {

200 .
«me
 = "xfs_attr3_rmt",

201 .
	gvîify_ªad
 = 
xfs_©å3_rmt_ªad_vîify
,

202 .
	gvîify_wrôe
 = 
xfs_©å3_rmt_wrôe_vîify
,

205 
STATIC
 

206 
	$xfs_©å3_rmt_hdr_£t
(

207 
xfs_mou¡
 *
mp
,

208 *
±r
,

209 
xfs_öo_t
 
öo
,

210 
uöt32_t
 
off£t
,

211 
uöt32_t
 
size
,

212 
xfs_daddr_t
 
bno
)

214 
xfs_©å3_rmt_hdr
 *
rmt
 = 
±r
;

216 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

219 
rmt
->
rm_magic
 = 
	`˝u_to_be32
(
XFS_ATTR3_RMT_MAGIC
);

220 
rmt
->
rm_off£t
 = 
	`˝u_to_be32
(
off£t
);

221 
rmt
->
rm_byãs
 = 
	`˝u_to_be32
(
size
);

222 
	`uuid_c›y
(&
rmt
->
rm_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

223 
rmt
->
rm_ow√r
 = 
	`˝u_to_be64
(
öo
);

224 
rmt
->
rm_blkno
 = 
	`˝u_to_be64
(
bno
);

236 
rmt
->
rm_l¢
 = 
	`˝u_to_be64
(
NULLCOMMITLSN
);

238  (
xfs_©å3_rmt_hdr
);

239 
	}
}

244 
STATIC
 

245 
	$xfs_©å_rmtvÆ_c›yout
(

246 
xfs_mou¡
 *
mp
,

247 
xfs_buf
 *
bp
,

248 
xfs_öo_t
 
öo
,

249 *
off£t
,

250 *
vÆuñí
,

251 
__uöt8_t
 **
d°
)

253 *
§c
 = 
bp
->
b_addr
;

254 
xfs_daddr_t
 
bno
 = 
bp
->
b_bn
;

255 
Àn
 = 
	`BBTOB
(
bp
->
b_Àngth
);

256 
blksize
 = 
mp
->
m_©å_geo
->blksize;

258 
	`ASSERT
(
Àn
 >
blksize
);

260 
Àn
 > 0 && *
vÆuñí
 > 0) {

261 
hdr_size
 = 0;

262 
byã_˙t
 = 
	`XFS_ATTR3_RMT_BUF_SPACE
(
mp
, 
blksize
);

264 
byã_˙t
 = 
	`mö
(*
vÆuñí
, byte_cnt);

266 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

267 i‡(!
	`xfs_©å3_rmt_hdr_ok
(
§c
, 
öo
, *
off£t
,

268 
byã_˙t
, 
bno
)) {

269 
	`xfs_Æît
(
mp
,

271 
bno
, *
off£t
, 
byã_˙t
, 
öo
);

272  -
EFSCORRUPTED
;

274 
hdr_size
 = (
xfs_©å3_rmt_hdr
);

277 
	`mem˝y
(*
d°
, 
§c
 + 
hdr_size
, 
byã_˙t
);

280 
Àn
 -
blksize
;

281 
§c
 +
blksize
;

282 
bno
 +
	`BTOBB
(
blksize
);

285 *
vÆuñí
 -
byã_˙t
;

286 *
d°
 +
byã_˙t
;

287 *
off£t
 +
byã_˙t
;

290 
	}
}

292 
STATIC
 

293 
	$xfs_©å_rmtvÆ_c›yö
(

294 
xfs_mou¡
 *
mp
,

295 
xfs_buf
 *
bp
,

296 
xfs_öo_t
 
öo
,

297 *
off£t
,

298 *
vÆuñí
,

299 
__uöt8_t
 **
§c
)

301 *
d°
 = 
bp
->
b_addr
;

302 
xfs_daddr_t
 
bno
 = 
bp
->
b_bn
;

303 
Àn
 = 
	`BBTOB
(
bp
->
b_Àngth
);

304 
blksize
 = 
mp
->
m_©å_geo
->blksize;

306 
	`ASSERT
(
Àn
 >
blksize
);

308 
Àn
 > 0 && *
vÆuñí
 > 0) {

309 
hdr_size
;

310 
byã_˙t
 = 
	`XFS_ATTR3_RMT_BUF_SPACE
(
mp
, 
blksize
);

312 
byã_˙t
 = 
	`mö
(*
vÆuñí
, byte_cnt);

313 
hdr_size
 = 
	`xfs_©å3_rmt_hdr_£t
(
mp
, 
d°
, 
öo
, *
off£t
,

314 
byã_˙t
, 
bno
);

316 
	`mem˝y
(
d°
 + 
hdr_size
, *
§c
, 
byã_˙t
);

322 i‡(
byã_˙t
 + 
hdr_size
 < 
blksize
) {

323 
	`ASSERT
(*
vÆuñí
 - 
byã_˙t
 == 0);

324 
	`ASSERT
(
Àn
 =
blksize
);

325 
	`mem£t
(
d°
 + 
hdr_size
 + 
byã_˙t
, 0,

326 
blksize
 - 
hdr_size
 - 
byã_˙t
);

330 
Àn
 -
blksize
;

331 
d°
 +
blksize
;

332 
bno
 +
	`BTOBB
(
blksize
);

335 *
vÆuñí
 -
byã_˙t
;

336 *
§c
 +
byã_˙t
;

337 *
off£t
 +
byã_˙t
;

339 
	}
}

346 
	$xfs_©å_rmtvÆ_gë
(

347 
xfs_da_¨gs
 *
¨gs
)

349 
xfs_bmbt_úec
 
m≠
[
ATTR_RMTVALUE_MAPSIZE
];

350 
xfs_mou¡
 *
mp
 = 
¨gs
->
dp
->
i_mou¡
;

351 
xfs_buf
 *
bp
;

352 
xfs_dablk_t
 
lblkno
 = 
¨gs
->
rmtblkno
;

353 
__uöt8_t
 *
d°
 = 
¨gs
->
vÆue
;

354 
vÆuñí
;

355 
nm≠
;

356 
îr‹
;

357 
blk˙t
 = 
¨gs
->
rmtblk˙t
;

358 
i
;

359 
off£t
 = 0;

361 
	`åa˚_xfs_©å_rmtvÆ_gë
(
¨gs
);

363 
	`ASSERT
(!(
¨gs
->
Êags
 & 
ATTR_KERNOVAL
));

364 
	`ASSERT
(
¨gs
->
rmtvÆuñí
 =¨gs->
vÆuñí
);

366 
vÆuñí
 = 
¨gs
->
rmtvÆuñí
;

367 
vÆuñí
 > 0) {

368 
nm≠
 = 
ATTR_RMTVALUE_MAPSIZE
;

369 
îr‹
 = 
	`xfs_bm≠i_ªad
(
¨gs
->
dp
, (
xfs_fûeoff_t
)
lblkno
,

370 
blk˙t
, 
m≠
, &
nm≠
,

371 
XFS_BMAPI_ATTRFORK
);

372 i‡(
îr‹
)

373  
îr‹
;

374 
	`ASSERT
(
nm≠
 >= 1);

376 
i
 = 0; (ò< 
nm≠
Ë&& (
vÆuñí
 > 0); i++) {

377 
xfs_daddr_t
 
dblkno
;

378 
dblk˙t
;

380 
	`ASSERT
((
m≠
[
i
].
br_°¨tblock
 !
DELAYSTARTBLOCK
) &&

381 (
m≠
[
i
].
br_°¨tblock
 !
HOLESTARTBLOCK
));

382 
dblkno
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
m≠
[
i
].
br_°¨tblock
);

383 
dblk˙t
 = 
	`XFS_FSB_TO_BB
(
mp
, 
m≠
[
i
].
br_blockcou¡
);

384 
îr‹
 = 
	`xfs_å™s_ªad_buf
(
mp
, 
NULL
, mp->
m_ddev_èrgp
,

385 
dblkno
, 
dblk˙t
, 0, &
bp
,

386 &
xfs_©å3_rmt_buf_›s
);

387 i‡(
îr‹
)

388  
îr‹
;

390 
îr‹
 = 
	`xfs_©å_rmtvÆ_c›yout
(
mp
, 
bp
, 
¨gs
->
dp
->
i_öo
,

391 &
off£t
, &
vÆuñí
,

392 &
d°
);

393 
	`xfs_buf_ªl£
(
bp
);

394 i‡(
îr‹
)

395  
îr‹
;

398 
lblkno
 +
m≠
[
i
].
br_blockcou¡
;

399 
blk˙t
 -
m≠
[
i
].
br_blockcou¡
;

402 
	`ASSERT
(
vÆuñí
 == 0);

404 
	}
}

411 
	$xfs_©å_rmtvÆ_£t
(

412 
xfs_da_¨gs
 *
¨gs
)

414 
xfs_öode
 *
dp
 = 
¨gs
->dp;

415 
xfs_mou¡
 *
mp
 = 
dp
->
i_mou¡
;

416 
xfs_bmbt_úec
 
m≠
;

417 
xfs_dablk_t
 
lblkno
;

418 
xfs_fûeoff_t
 
lfûeoff
 = 0;

419 
__uöt8_t
 *
§c
 = 
¨gs
->
vÆue
;

420 
blk˙t
;

421 
vÆuñí
;

422 
nm≠
;

423 
îr‹
;

424 
off£t
 = 0;

426 
	`åa˚_xfs_©å_rmtvÆ_£t
(
¨gs
);

434 
blk˙t
 = 
	`xfs_©å3_rmt_blocks
(
mp
, 
¨gs
->
rmtvÆuñí
);

435 
îr‹
 = 
	`xfs_bm≠_fú°_unu£d
(
¨gs
->
å™s
,árgs->
dp
, 
blk˙t
, &
lfûeoff
,

436 
XFS_ATTR_FORK
);

437 i‡(
îr‹
)

438  
îr‹
;

440 
¨gs
->
rmtblkno
 = 
lblkno
 = (
xfs_dablk_t
)
lfûeoff
;

441 
¨gs
->
rmtblk˙t
 = 
blk˙t
;

446 
blk˙t
 > 0) {

459 
	`xfs_de„r_öô
(
¨gs
->
df›s
,árgs->
fú°block
);

460 
nm≠
 = 1;

461 
îr‹
 = 
	`xfs_bm≠i_wrôe
(
¨gs
->
å™s
, 
dp
, (
xfs_fûeoff_t
)
lblkno
,

462 
blk˙t
, 
XFS_BMAPI_ATTRFORK
, 
¨gs
->
fú°block
,

463 
¨gs
->
tŸÆ
, &
m≠
, &
nm≠
,árgs->
df›s
);

464 i‡(!
îr‹
)

465 
îr‹
 = 
	`xfs_de„r_föish
(&
¨gs
->
å™s
,árgs->
df›s
, 
dp
);

466 i‡(
îr‹
) {

467 
¨gs
->
å™s
 = 
NULL
;

468 
	`xfs_de„r_ˇn˚l
(
¨gs
->
df›s
);

469  
îr‹
;

472 
	`ASSERT
(
nm≠
 == 1);

473 
	`ASSERT
((
m≠
.
br_°¨tblock
 !
DELAYSTARTBLOCK
) &&

474 (
m≠
.
br_°¨tblock
 !
HOLESTARTBLOCK
));

475 
lblkno
 +
m≠
.
br_blockcou¡
;

476 
blk˙t
 -
m≠
.
br_blockcou¡
;

481 
îr‹
 = 
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
, 
dp
);

482 i‡(
îr‹
)

483  
îr‹
;

492 
lblkno
 = 
¨gs
->
rmtblkno
;

493 
blk˙t
 = 
¨gs
->
rmtblk˙t
;

494 
vÆuñí
 = 
¨gs
->
rmtvÆuñí
;

495 
vÆuñí
 > 0) {

496 
xfs_buf
 *
bp
;

497 
xfs_daddr_t
 
dblkno
;

498 
dblk˙t
;

500 
	`ASSERT
(
blk˙t
 > 0);

502 
	`xfs_de„r_öô
(
¨gs
->
df›s
,árgs->
fú°block
);

503 
nm≠
 = 1;

504 
îr‹
 = 
	`xfs_bm≠i_ªad
(
dp
, (
xfs_fûeoff_t
)
lblkno
,

505 
blk˙t
, &
m≠
, &
nm≠
,

506 
XFS_BMAPI_ATTRFORK
);

507 i‡(
îr‹
)

508  
îr‹
;

509 
	`ASSERT
(
nm≠
 == 1);

510 
	`ASSERT
((
m≠
.
br_°¨tblock
 !
DELAYSTARTBLOCK
) &&

511 (
m≠
.
br_°¨tblock
 !
HOLESTARTBLOCK
));

513 
dblkno
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
m≠
.
br_°¨tblock
),

514 
dblk˙t
 = 
	`XFS_FSB_TO_BB
(
mp
, 
m≠
.
br_blockcou¡
);

516 
bp
 = 
	`xfs_buf_gë
(
mp
->
m_ddev_èrgp
, 
dblkno
, 
dblk˙t
, 0);

517 i‡(!
bp
)

518  -
ENOMEM
;

519 
bp
->
b_›s
 = &
xfs_©å3_rmt_buf_›s
;

521 
	`xfs_©å_rmtvÆ_c›yö
(
mp
, 
bp
, 
¨gs
->
dp
->
i_öo
, &
off£t
,

522 &
vÆuñí
, &
§c
);

524 
îr‹
 = 
	`xfs_bwrôe
(
bp
);

525 
	`xfs_buf_ªl£
(
bp
);

526 i‡(
îr‹
)

527  
îr‹
;

531 
lblkno
 +
m≠
.
br_blockcou¡
;

532 
blk˙t
 -
m≠
.
br_blockcou¡
;

534 
	`ASSERT
(
vÆuñí
 == 0);

536 
	}
}

543 
	$xfs_©å_rmtvÆ_ªmove
(

544 
xfs_da_¨gs
 *
¨gs
)

546 
xfs_mou¡
 *
mp
 = 
¨gs
->
dp
->
i_mou¡
;

547 
xfs_dablk_t
 
lblkno
;

548 
blk˙t
;

549 
îr‹
;

550 
d⁄e
;

552 
	`åa˚_xfs_©å_rmtvÆ_ªmove
(
¨gs
);

557 
lblkno
 = 
¨gs
->
rmtblkno
;

558 
blk˙t
 = 
¨gs
->
rmtblk˙t
;

559 
blk˙t
 > 0) {

560 
xfs_bmbt_úec
 
m≠
;

561 
xfs_buf
 *
bp
;

562 
xfs_daddr_t
 
dblkno
;

563 
dblk˙t
;

564 
nm≠
;

569 
nm≠
 = 1;

570 
îr‹
 = 
	`xfs_bm≠i_ªad
(
¨gs
->
dp
, (
xfs_fûeoff_t
)
lblkno
,

571 
blk˙t
, &
m≠
, &
nm≠
, 
XFS_BMAPI_ATTRFORK
);

572 i‡(
îr‹
)

573  
îr‹
;

574 
	`ASSERT
(
nm≠
 == 1);

575 
	`ASSERT
((
m≠
.
br_°¨tblock
 !
DELAYSTARTBLOCK
) &&

576 (
m≠
.
br_°¨tblock
 !
HOLESTARTBLOCK
));

578 
dblkno
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
m≠
.
br_°¨tblock
),

579 
dblk˙t
 = 
	`XFS_FSB_TO_BB
(
mp
, 
m≠
.
br_blockcou¡
);

584 
bp
 = 
	`xfs_öc‹e
(
mp
->
m_ddev_èrgp
, 
dblkno
, 
dblk˙t
, 
XBF_TRYLOCK
);

585 i‡(
bp
) {

586 
	`xfs_buf_°Æe
(
bp
);

587 
	`xfs_buf_ªl£
(
bp
);

588 
bp
 = 
NULL
;

591 
lblkno
 +
m≠
.
br_blockcou¡
;

592 
blk˙t
 -
m≠
.
br_blockcou¡
;

598 
lblkno
 = 
¨gs
->
rmtblkno
;

599 
blk˙t
 = 
¨gs
->
rmtblk˙t
;

600 
d⁄e
 = 0;

601 !
d⁄e
) {

602 
	`xfs_de„r_öô
(
¨gs
->
df›s
,árgs->
fú°block
);

603 
îr‹
 = 
	`xfs_bunm≠i
(
¨gs
->
å™s
,árgs->
dp
, 
lblkno
, 
blk˙t
,

604 
XFS_BMAPI_ATTRFORK
, 1, 
¨gs
->
fú°block
,

605 
¨gs
->
df›s
, &
d⁄e
);

606 i‡(!
îr‹
)

607 
îr‹
 = 
	`xfs_de„r_föish
(&
¨gs
->
å™s
,árgs->
df›s
,

608 
¨gs
->
dp
);

609 i‡(
îr‹
) {

610 
¨gs
->
å™s
 = 
NULL
;

611 
	`xfs_de„r_ˇn˚l
(
¨gs
->
df›s
);

612  
îr‹
;

618 
îr‹
 = 
	`xfs_å™s_rﬁl
(&
¨gs
->
å™s
,árgs->
dp
);

619 i‡(
îr‹
)

620  
îr‹
;

623 
	}
}

	@libxfs/xfs_attr_remote.h

18 #i‚de‡
__XFS_ATTR_REMOTE_H__


19 
	#__XFS_ATTR_REMOTE_H__


	)

21 
xfs_©å3_rmt_blocks
(
xfs_mou¡
 *
mp
, 
©åÀn
);

23 
xfs_©å_rmtvÆ_gë
(
xfs_da_¨gs
 *
¨gs
);

24 
xfs_©å_rmtvÆ_£t
(
xfs_da_¨gs
 *
¨gs
);

25 
xfs_©å_rmtvÆ_ªmove
(
xfs_da_¨gs
 *
¨gs
);

	@libxfs/xfs_attr_sf.h

18 #i‚de‡
__XFS_ATTR_SF_H__


19 
	#__XFS_ATTR_SF_H__


	)

27 
xfs_©å_sf_hdr
 
	txfs_©å_sf_hdr_t
;

28 
xfs_©å_sf_íåy
 
	txfs_©å_sf_íåy_t
;

33 
	sxfs_©å_sf_s‹t
 {

34 
__uöt8_t
 
	míäo
;

35 
__uöt8_t
 
	m«mñí
;

36 
__uöt8_t
 
	mvÆuñí
;

37 
__uöt8_t
 
	mÊags
;

38 
xfs_dahash_t
 
	mhash
;

39 *
	m«me
;

40 } 
	txfs_©å_sf_s‹t_t
;

42 
	#XFS_ATTR_SF_ENTSIZE_BYNAME
(
∆í
,
vÀn
) \

43 ((()(
xfs_©å_sf_íåy_t
)-1 + (
∆í
)+(
vÀn
)))

	)

44 
	#XFS_ATTR_SF_ENTSIZE_MAX
 \

45 ((1 << (
NBBY
*()(
__uöt8_t
))Ë- 1)

	)

46 
	#XFS_ATTR_SF_ENTSIZE
(
s„p
) \

47 (()(
xfs_©å_sf_íåy_t
)-1 + (
s„p
)->
«mñí
+(s„p)->
vÆuñí
)

	)

48 
	#XFS_ATTR_SF_NEXTENTRY
(
s„p
) \

49 ((
xfs_©å_sf_íåy_t
 *)((*)(
s„p
Ë+ 
	`XFS_ATTR_SF_ENTSIZE
(s„p)))

	)

50 
	#XFS_ATTR_SF_TOTSIZE
(
dp
) \

51 (
	`be16_to_˝u
(((
xfs_©å_sh‹tf‹m_t
 *) \

52 ((
dp
)->
i_aÂ
->
if_u1
.
if_d©a
))->
hdr
.
tŸsize
))

	)

	@libxfs/xfs_bit.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_log_f‹m©.h
"

20 
	~"xfs_bô.h
"

32 
	$xfs_bôm≠_em±y
(
uöt
 *
m≠
, uöà
size
)

34 
uöt
 
i
;

36 
i
 = 0; i < 
size
; i++) {

37 i‡(
m≠
[
i
] != 0)

42 
	}
}

49 
	$xfs_c⁄tig_bôs
(
uöt
 *
m≠
, uöà
size
, uöà
°¨t_bô
)

51 
uöt
 * 
p
 = ((*Ë
m≠
Ë+ (
°¨t_bô
 >> 
BIT_TO_WORD_SHIFT
);

52 
uöt
 
ªsu…
 = 0;

53 
uöt
 
tmp
;

55 
size
 <<
BIT_TO_WORD_SHIFT
;

57 
	`ASSERT
(
°¨t_bô
 < 
size
);

58 
size
 -
°¨t_bô
 & ~(
NBWORD
 - 1);

59 
°¨t_bô
 &(
NBWORD
 - 1);

60 i‡(
°¨t_bô
) {

61 
tmp
 = *
p
++;

63 
tmp
 |(~0U >> (
NBWORD
-
°¨t_bô
));

64 i‡(
tmp
 != ~0U)

65 
found
;

66 
ªsu…
 +
NBWORD
;

67 
size
 -
NBWORD
;

69 
size
) {

70 i‡((
tmp
 = *
p
++) != ~0U)

71 
found
;

72 
ªsu…
 +
NBWORD
;

73 
size
 -
NBWORD
;

75  
ªsu…
 - 
°¨t_bô
;

76 
found
:

77  
ªsu…
 + 
	`ffz
(
tmp
Ë- 
°¨t_bô
;

78 
	}
}

88 
	$xfs_√xt_bô
(
uöt
 *
m≠
, uöà
size
, uöà
°¨t_bô
)

90 
uöt
 * 
p
 = ((*Ë
m≠
Ë+ (
°¨t_bô
 >> 
BIT_TO_WORD_SHIFT
);

91 
uöt
 
ªsu…
 = 
°¨t_bô
 & ~(
NBWORD
 - 1);

92 
uöt
 
tmp
;

94 
size
 <<
BIT_TO_WORD_SHIFT
;

96 i‡(
°¨t_bô
 >
size
)

98 
size
 -
ªsu…
;

99 
°¨t_bô
 &(
NBWORD
 - 1);

100 i‡(
°¨t_bô
) {

101 
tmp
 = *
p
++;

103 
tmp
 &(~0U << 
°¨t_bô
);

104 i‡(
tmp
 != 0U)

105 
found
;

106 
ªsu…
 +
NBWORD
;

107 
size
 -
NBWORD
;

109 
size
) {

110 i‡((
tmp
 = *
p
++) != 0U)

111 
found
;

112 
ªsu…
 +
NBWORD
;

113 
size
 -
NBWORD
;

116 
found
:

117  
ªsu…
 + 
	`ffs
(
tmp
) - 1;

118 
	}
}

	@libxfs/xfs_bit.h

18 #i‚de‡
__XFS_BIT_H__


19 
	#__XFS_BIT_H__


	)

28 
ölöe
 
__uöt64_t
 
	$xfs_mask64hi
(
n
)

30  (
__uöt64_t
)-1 << (64 - (
n
));

31 
	}
}

32 
ölöe
 
__uöt32_t
 
	$xfs_mask32lo
(
n
)

34  ((
__uöt32_t
)1 << (
n
)) - 1;

35 
	}
}

36 
ölöe
 
__uöt64_t
 
	$xfs_mask64lo
(
n
)

38  ((
__uöt64_t
)1 << (
n
)) - 1;

39 
	}
}

42 
ölöe
 
	$xfs_highbô32
(
__uöt32_t
 
v
)

44  
	`Ês
(
v
) - 1;

45 
	}
}

48 
ölöe
 
	$xfs_highbô64
(
__uöt64_t
 
v
)

50  
	`Ês64
(
v
) - 1;

51 
	}
}

54 
ölöe
 
	$xfs_lowbô32
(
__uöt32_t
 
v
)

56  
	`ffs
(
v
) - 1;

57 
	}
}

60 
ölöe
 
	$xfs_lowbô64
(
__uöt64_t
 
v
)

62 
__uöt32_t
 
w
 = (__uöt32_t)
v
;

63 
n
 = 0;

65 i‡(
w
) {

66 
n
 = 
	`ffs
(
w
);

68 
w
 = (
__uöt32_t
)(
v
 >> 32);

69 i‡(
w
) {

70 
n
 = 
	`ffs
(
w
);

71 i‡(
n
)

72 
n
 += 32;

75  
n
 - 1;

76 
	}
}

79 
xfs_bôm≠_em±y
(
uöt
 *
m≠
, uöà
size
);

82 
xfs_c⁄tig_bôs
(
uöt
 *
m≠
, uöà
size
, uöà
°¨t_bô
);

85 
xfs_√xt_bô
(
uöt
 *
m≠
, uöà
size
, uöà
°¨t_bô
);

	@libxfs/xfs_bmap.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_bô.h
"

25 
	~"xfs_sb.h
"

26 
	~"xfs_mou¡.h
"

27 
	~"xfs_de„r.h
"

28 
	~"xfs_da_f‹m©.h
"

29 
	~"xfs_da_båì.h
"

30 
	~"xfs_dú2.h
"

31 
	~"xfs_öode.h
"

32 
	~"xfs_båì.h
"

33 
	~"xfs_å™s.h
"

34 
	~"xfs_Æloc.h
"

35 
	~"xfs_bm≠.h
"

36 
	~"xfs_bm≠_båì.h
"

37 
	~"xfs_å™s_•a˚.h
"

38 
	~"xfs_åa˚.h
"

39 
	~"xfs_©å_Àaf.h
"

40 
	~"xfs_quŸa_defs.h
"

41 
	~"xfs_rm≠.h
"

42 
	~"xfs_ag_ªsv.h
"

43 
	~"xfs_ªfcou¡.h
"

44 
	~"xfs_rm≠_båì.h
"

47 
kmem_z⁄e_t
 *
	gxfs_bm≠_‰ì_ôem_z⁄e
;

58 
	$xfs_bm≠_compuã_maxÀvñs
(

59 
xfs_mou¡_t
 *
mp
,

60 
whichf‹k
)

62 
Àvñ
;

63 
uöt
 
maxblocks
;

64 
uöt
 
maxÀa„¡s
;

65 
maxroŸªcs
;

66 
möÀa‰ecs
;

67 
mönodîecs
;

68 
sz
;

84 i‡(
whichf‹k
 =
XFS_DATA_FORK
) {

85 
maxÀa„¡s
 = 
MAXEXTNUM
;

86 
sz
 = 
	`XFS_BMDR_SPACE_CALC
(
MINDBTPTRS
);

88 
maxÀa„¡s
 = 
MAXAEXTNUM
;

89 
sz
 = 
	`XFS_BMDR_SPACE_CALC
(
MINABTPTRS
);

91 
maxroŸªcs
 = 
	`xfs_bmdr_maxªcs
(
sz
, 0);

92 
möÀa‰ecs
 = 
mp
->
m_bm≠_dmƒ
[0];

93 
mönodîecs
 = 
mp
->
m_bm≠_dmƒ
[1];

94 
maxblocks
 = (
maxÀa„¡s
 + 
möÀa‰ecs
 - 1) / minleafrecs;

95 
Àvñ
 = 1; 
maxblocks
 > 1;Üevel++) {

96 i‡(
maxblocks
 <
maxroŸªcs
)

97 
maxblocks
 = 1;

99 
maxblocks
 = (maxblock†+ 
mönodîecs
 - 1) / minnoderecs;

101 
mp
->
m_bm_maxÀvñs
[
whichf‹k
] = 
Àvñ
;

102 
	}
}

104 
STATIC
 

105 
	$xfs_bmbt_lookup_eq
(

106 
xfs_båì_cur
 *
cur
,

107 
xfs_fûeoff_t
 
off
,

108 
xfs_fsblock_t
 
bno
,

109 
xfs_fûblks_t
 
Àn
,

110 *
°©
)

112 
cur
->
bc_ªc
.
b
.
br_°¨toff
 = 
off
;

113 
cur
->
bc_ªc
.
b
.
br_°¨tblock
 = 
bno
;

114 
cur
->
bc_ªc
.
b
.
br_blockcou¡
 = 
Àn
;

115  
	`xfs_båì_lookup
(
cur
, 
XFS_LOOKUP_EQ
, 
°©
);

116 
	}
}

118 
STATIC
 

119 
	$xfs_bmbt_lookup_ge
(

120 
xfs_båì_cur
 *
cur
,

121 
xfs_fûeoff_t
 
off
,

122 
xfs_fsblock_t
 
bno
,

123 
xfs_fûblks_t
 
Àn
,

124 *
°©
)

126 
cur
->
bc_ªc
.
b
.
br_°¨toff
 = 
off
;

127 
cur
->
bc_ªc
.
b
.
br_°¨tblock
 = 
bno
;

128 
cur
->
bc_ªc
.
b
.
br_blockcou¡
 = 
Àn
;

129  
	`xfs_båì_lookup
(
cur
, 
XFS_LOOKUP_GE
, 
°©
);

130 
	}
}

135 
ölöe
 
boﬁ
 
	$xfs_bm≠_√eds_båì
(
xfs_öode
 *
ù
, 
whichf‹k
)

137  
whichf‹k
 !
XFS_COW_FORK
 &&

138 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_EXTENTS
 &&

139 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) >

140 
	`XFS_IFORK_MAXEXT
(
ù
, 
whichf‹k
);

141 
	}
}

146 
ölöe
 
boﬁ
 
	$xfs_bm≠_w™ts_exã¡s
(
xfs_öode
 *
ù
, 
whichf‹k
)

148  
whichf‹k
 !
XFS_COW_FORK
 &&

149 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_BTREE
 &&

150 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) <=

151 
	`XFS_IFORK_MAXEXT
(
ù
, 
whichf‹k
);

152 
	}
}

159 
STATIC
 

160 
	$xfs_bmbt_upd©e
(

161 
xfs_båì_cur
 *
cur
,

162 
xfs_fûeoff_t
 
off
,

163 
xfs_fsblock_t
 
bno
,

164 
xfs_fûblks_t
 
Àn
,

165 
xfs_ex¡°_t
 
°©e
)

167 
xfs_båì_ªc
 
ªc
;

169 
	`xfs_bmbt_disk_£t_Ælf
(&
ªc
.
bmbt
, 
off
, 
bno
, 
Àn
, 
°©e
);

170  
	`xfs_båì_upd©e
(
cur
, &
ªc
);

171 
	}
}

177 
STATIC
 
xfs_fûblks_t


178 
	$xfs_bm≠_w‹°_ödÀn
(

179 
xfs_öode_t
 *
ù
,

180 
xfs_fûblks_t
 
Àn
)

182 
Àvñ
;

183 
maxªcs
;

184 
xfs_mou¡_t
 *
mp
;

185 
xfs_fûblks_t
 
rvÆ
;

186 
xfs_fûblks_t
 
‹ig_Àn
;

188 
mp
 = 
ù
->
i_mou¡
;

191 
‹ig_Àn
 = 
Àn
;

192 
maxªcs
 = 
mp
->
m_bm≠_dmxr
[0];

193 
Àvñ
 = 0, 
rvÆ
 = 0;

194 
Àvñ
 < 
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_DATA_FORK
);

195 
Àvñ
++) {

196 
Àn
 +
maxªcs
 - 1;

197 
	`do_div
(
Àn
, 
maxªcs
);

198 
rvÆ
 +
Àn
;

199 i‡(
Àn
 == 1) {

200 
rvÆ
 +
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_DATA_FORK
) -

201 
Àvñ
 - 1;

204 i‡(
Àvñ
 == 0)

205 
maxªcs
 = 
mp
->
m_bm≠_dmxr
[1];

209 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

210 
rvÆ
 +1 + 
	`xfs_rm≠bt_ˇlc_size
(
mp
, 
‹ig_Àn
) +

211 
mp
->
m_rm≠_maxÀvñs
;

213  
rvÆ
;

214 
	}
}

219 
uöt


220 
	$xfs_deÁu…_©åoff£t
(

221 
xfs_öode
 *
ù
)

223 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

224 
uöt
 
off£t
;

226 i‡(
mp
->
m_sb
.
sb_öodesize
 == 256) {

227 
off£t
 = 
	`XFS_LITINO
(
mp
, 
ù
->
i_d
.
di_vîsi⁄
) -

228 
	`XFS_BMDR_SPACE_CALC
(
MINABTPTRS
);

230 
off£t
 = 
	`XFS_BMDR_SPACE_CALC
(6 * 
MINABTPTRS
);

233 
	`ASSERT
(
off£t
 < 
	`XFS_LITINO
(
mp
, 
ù
->
i_d
.
di_vîsi⁄
));

234  
off£t
;

235 
	}
}

242 
STATIC
 

243 
	$xfs_bm≠_f‹koff_ª£t
(

244 
xfs_öode_t
 *
ù
,

245 
whichf‹k
)

247 i‡(
whichf‹k
 =
XFS_ATTR_FORK
 &&

248 
ù
->
i_d
.
di_f‹m©
 !
XFS_DINODE_FMT_DEV
 &&

249 
ù
->
i_d
.
di_f‹m©
 !
XFS_DINODE_FMT_UUID
 &&

250 
ù
->
i_d
.
di_f‹m©
 !
XFS_DINODE_FMT_BTREE
) {

251 
uöt
 
dÊ_f‹koff
 = 
	`xfs_deÁu…_©åoff£t
(
ù
) >> 3;

253 i‡(
dÊ_f‹koff
 > 
ù
->
i_d
.
di_f‹koff
)

254 
ù
->
i_d
.
di_f‹koff
 = 
dÊ_f‹koff
;

256 
	}
}

258 #ifde‡
DEBUG


259 
STATIC
 
xfs_buf
 *

260 
	$xfs_bm≠_gë_bp
(

261 
xfs_båì_cur
 *
cur
,

262 
xfs_fsblock_t
 
bno
)

264 
xfs_log_ôem_desc
 *
lidp
;

265 
i
;

267 i‡(!
cur
)

268  
NULL
;

270 
i
 = 0; i < 
XFS_BTREE_MAXLEVELS
; i++) {

271 i‡(!
cur
->
bc_bufs
[
i
])

273 i‡(
	`XFS_BUF_ADDR
(
cur
->
bc_bufs
[
i
]Ë=
bno
)

274  
cur
->
bc_bufs
[
i
];

278 
	`li°_f‹_óch_íåy
(
lidp
, &
cur
->
bc_ç
->
t_ôems
, 
lid_å™s
) {

279 
xfs_buf_log_ôem
 *
bù
;

280 
bù
 = (
xfs_buf_log_ôem
 *)
lidp
->
lid_ôem
;

281 i‡(
bù
->
bli_ôem
.
li_ty≥
 =
XFS_LI_BUF
 &&

282 
	`XFS_BUF_ADDR
(
bù
->
bli_buf
Ë=
bno
)

283  
bù
->
bli_buf
;

286  
NULL
;

287 
	}
}

289 
STATIC
 

290 
	$xfs_check_block
(

291 
xfs_båì_block
 *
block
,

292 
xfs_mou¡_t
 *
mp
,

293 
roŸ
,

294 
sz
)

296 
i
, 
j
, 
dmxr
;

297 
__be64
 *
µ
, *
thi•a
;

298 
xfs_bmbt_key_t
 *
¥evp
, *
keyp
;

300 
	`ASSERT
(
	`be16_to_˝u
(
block
->
bb_Àvñ
) > 0);

302 
¥evp
 = 
NULL
;

303  
i
 = 1; i <
	`xfs_båì_gë_numªcs
(
block
); i++) {

304 
dmxr
 = 
mp
->
m_bm≠_dmxr
[0];

305 
keyp
 = 
	`XFS_BMBT_KEY_ADDR
(
mp
, 
block
, 
i
);

307 i‡(
¥evp
) {

308 
	`ASSERT
(
	`be64_to_˝u
(
¥evp
->
br_°¨toff
) <

309 
	`be64_to_˝u
(
keyp
->
br_°¨toff
));

311 
¥evp
 = 
keyp
;

316 i‡(
roŸ
)

317 
µ
 = 
	`XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
block
, 
i
, 
sz
);

319 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 
i
, 
dmxr
);

321 
j
 = 
i
+1; j <
	`be16_to_˝u
(
block
->
bb_numªcs
); j++) {

322 i‡(
roŸ
)

323 
thi•a
 = 
	`XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
block
, 
j
, 
sz
);

325 
thi•a
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 
j
, 
dmxr
);

326 i‡(*
thi•a
 =*
µ
) {

327 
	`xfs_w¨n
(
mp
, "%s:Åhispa(%d) ==Öp(%d) %Ld",

328 
__func__
, 
j
, 
i
,

329 ()
	`be64_to_˝u
(*
thi•a
));

330 
	`∑nic
("%s:ÖtrsáreÉqual inÇode\n",

331 
__func__
);

335 
	}
}

344 
STATIC
 

345 
	$xfs_bm≠_check_Àaf_exã¡s
(

346 
xfs_båì_cur_t
 *
cur
,

347 
xfs_öode_t
 *
ù
,

348 
whichf‹k
)

350 
xfs_båì_block
 *
block
;

351 
xfs_fsblock_t
 
bno
;

352 
xfs_buf_t
 *
bp
;

353 
îr‹
;

354 
xfs_exäum_t
 
i
=0, 
j
;

355 
xfs_if‹k_t
 *
iÂ
;

356 
Àvñ
;

357 
xfs_mou¡_t
 *
mp
;

358 
__be64
 *
µ
;

359 
xfs_bmbt_ªc_t
 *
ï
;

360 
xfs_bmbt_ªc_t
 
œ°
 = {0, 0};

361 
xfs_bmbt_ªc_t
 *
√xç
;

362 
bp_ªÀa£
 = 0;

364 i‡(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
) {

369 i‡(
ù
->
i_d
.
di_√xã¡s
 > 10000)

372 
bno
 = 
NULLFSBLOCK
;

373 
mp
 = 
ù
->
i_mou¡
;

374 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

375 
block
 = 
iÂ
->
if_broŸ
;

379 
Àvñ
 = 
	`be16_to_˝u
(
block
->
bb_Àvñ
);

380 
	`ASSERT
(
Àvñ
 > 0);

381 
	`xfs_check_block
(
block
, 
mp
, 1, 
iÂ
->
if_broŸ_byãs
);

382 
µ
 = 
	`XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
block
, 1, 
iÂ
->
if_broŸ_byãs
);

383 
bno
 = 
	`be64_to_˝u
(*
µ
);

385 
	`ASSERT
(
bno
 !
NULLFSBLOCK
);

386 
	`ASSERT
(
	`XFS_FSB_TO_AGNO
(
mp
, 
bno
Ë< mp->
m_sb
.
sb_agcou¡
);

387 
	`ASSERT
(
	`XFS_FSB_TO_AGBNO
(
mp
, 
bno
Ë< mp->
m_sb
.
sb_agblocks
);

393 
Àvñ
-- > 0) {

395 
bp_ªÀa£
 = 0;

396 
bp
 = 
	`xfs_bm≠_gë_bp
(
cur
, 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
));

397 i‡(!
bp
) {

398 
bp_ªÀa£
 = 1;

399 
îr‹
 = 
	`xfs_båì_ªad_buÊ
(
mp
, 
NULL
, 
bno
, 0, &
bp
,

400 
XFS_BMAP_BTREE_REF
,

401 &
xfs_bmbt_buf_›s
);

402 i‡(
îr‹
)

403 
îr‹_n‹ñ£
;

405 
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

406 i‡(
Àvñ
 == 0)

414 
	`xfs_check_block
(
block
, 
mp
, 0, 0);

415 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[1]);

416 
bno
 = 
	`be64_to_˝u
(*
µ
);

417 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

418 
	`XFS_FSB_SANITY_CHECK
(
mp
, 
bno
), 
îr‹0
);

419 i‡(
bp_ªÀa£
) {

420 
bp_ªÀa£
 = 0;

421 
	`xfs_å™s_bªl£
(
NULL
, 
bp
);

428 
i
 = 0;

434 
xfs_fsblock_t
 
√xtbno
;

435 
xfs_exäum_t
 
num_ªcs
;

438 
num_ªcs
 = 
	`xfs_båì_gë_numªcs
(
block
);

444 
√xtbno
 = 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_rightsib
);

452 
ï
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1);

453 i‡(
i
) {

454 
	`ASSERT
(
	`xfs_bmbt_disk_gë_°¨toff
(&
œ°
) +

455 
	`xfs_bmbt_disk_gë_blockcou¡
(&
œ°
) <=

456 
	`xfs_bmbt_disk_gë_°¨toff
(
ï
));

458 
j
 = 1; j < 
num_ªcs
; j++) {

459 
√xç
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 
j
 + 1);

460 
	`ASSERT
(
	`xfs_bmbt_disk_gë_°¨toff
(
ï
) +

461 
	`xfs_bmbt_disk_gë_blockcou¡
(
ï
) <=

462 
	`xfs_bmbt_disk_gë_°¨toff
(
√xç
));

463 
ï
 = 
√xç
;

466 
œ°
 = *
ï
;

467 
i
 +
num_ªcs
;

468 i‡(
bp_ªÀa£
) {

469 
bp_ªÀa£
 = 0;

470 
	`xfs_å™s_bªl£
(
NULL
, 
bp
);

472 
bno
 = 
√xtbno
;

476 i‡(
bno
 =
NULLFSBLOCK
)

479 
bp_ªÀa£
 = 0;

480 
bp
 = 
	`xfs_bm≠_gë_bp
(
cur
, 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
));

481 i‡(!
bp
) {

482 
bp_ªÀa£
 = 1;

483 
îr‹
 = 
	`xfs_båì_ªad_buÊ
(
mp
, 
NULL
, 
bno
, 0, &
bp
,

484 
XFS_BMAP_BTREE_REF
,

485 &
xfs_bmbt_buf_›s
);

486 i‡(
îr‹
)

487 
îr‹_n‹ñ£
;

489 
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

494 
îr‹0
:

495 
	`xfs_w¨n
(
mp
, "%s:áàîr‹0", 
__func__
);

496 i‡(
bp_ªÀa£
)

497 
	`xfs_å™s_bªl£
(
NULL
, 
bp
);

498 
îr‹_n‹ñ£
:

499 
	`xfs_w¨n
(
mp
, "%s: BADáfter btreeÜeaves for %dÉxtents",

500 
__func__
, 
i
);

501 
	`∑nic
("%s: CORRUPTED BTREE OR SOMETHING", 
__func__
);

503 
	}
}

509 
	$xfs_bm≠_åa˚_exli°
(

510 
xfs_öode_t
 *
ù
,

511 
xfs_exäum_t
 
˙t
,

512 
whichf‹k
,

513 
ˇŒî_ù
)

515 
xfs_exäum_t
 
idx
;

516 
xfs_if‹k_t
 *
iÂ
;

517 
°©e
 = 0;

519 i‡(
whichf‹k
 =
XFS_ATTR_FORK
)

520 
°©e
 |
BMAP_ATTRFORK
;

521 i‡(
whichf‹k
 =
XFS_COW_FORK
)

522 
°©e
 |
BMAP_COWFORK
;

524 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

525 
	`ASSERT
(
˙t
 =
	`xfs_õxt_cou¡
(
iÂ
));

526 
idx
 = 0; idx < 
˙t
; idx++)

527 
	`åa˚_xfs_exéi°
(
ù
, 
idx
, 
°©e
, 
ˇŒî_ù
);

528 
	}
}

536 
STATIC
 

537 
	$xfs_bm≠_vÆid©e_ªt
(

538 
xfs_fûeoff_t
 
bno
,

539 
xfs_fûblks_t
 
Àn
,

540 
Êags
,

541 
xfs_bmbt_úec_t
 *
mvÆ
,

542 
nm≠
,

543 
ªt_nm≠
)

545 
i
;

547 
	`ASSERT
(
ªt_nm≠
 <
nm≠
);

549 
i
 = 0; i < 
ªt_nm≠
; i++) {

550 
	`ASSERT
(
mvÆ
[
i
].
br_blockcou¡
 > 0);

551 i‡(!(
Êags
 & 
XFS_BMAPI_ENTIRE
)) {

552 
	`ASSERT
(
mvÆ
[
i
].
br_°¨toff
 >
bno
);

553 
	`ASSERT
(
mvÆ
[
i
].
br_blockcou¡
 <
Àn
);

554 
	`ASSERT
(
mvÆ
[
i
].
br_°¨toff
 + mvÆ[i].
br_blockcou¡
 <=

555 
bno
 + 
Àn
);

557 
	`ASSERT
(
mvÆ
[
i
].
br_°¨toff
 < 
bno
 + 
Àn
);

558 
	`ASSERT
(
mvÆ
[
i
].
br_°¨toff
 + mvÆ[i].
br_blockcou¡
 >

559 
bno
);

561 
	`ASSERT
(
i
 == 0 ||

562 
mvÆ
[
i
 - 1].
br_°¨toff
 + mvÆ[ò- 1].
br_blockcou¡
 ==

563 
mvÆ
[
i
].
br_°¨toff
);

564 
	`ASSERT
(
mvÆ
[
i
].
br_°¨tblock
 !
DELAYSTARTBLOCK
 &&

565 
mvÆ
[
i
].
br_°¨tblock
 !
HOLESTARTBLOCK
);

566 
	`ASSERT
(
mvÆ
[
i
].
br_°©e
 =
XFS_EXT_NORM
 ||

567 
mvÆ
[
i
].
br_°©e
 =
XFS_EXT_UNWRITTEN
);

569 
	}
}

572 
	#xfs_bm≠_check_Àaf_exã¡s
(
cur
, 
ù
, 
whichf‹k
Ëdÿ{ } 0)

	)

573 
	#xfs_bm≠_vÆid©e_ªt
(
bno
,
Àn
,
Êags
,
mvÆ
,
⁄m≠
,
nm≠
)

	)

585 
	$xfs_bm≠_add_‰ì
(

586 
xfs_mou¡
 *
mp
,

587 
xfs_de„r_›s
 *
df›s
,

588 
xfs_fsblock_t
 
bno
,

589 
xfs_fûblks_t
 
Àn
,

590 
xfs_ow√r_öfo
 *
oöfo
)

592 
xfs_exã¡_‰ì_ôem
 *
√w
;

593 #ifde‡
DEBUG


594 
xfs_agnumbî_t
 
agno
;

595 
xfs_agblock_t
 
agbno
;

597 
	`ASSERT
(
bno
 !
NULLFSBLOCK
);

598 
	`ASSERT
(
Àn
 > 0);

599 
	`ASSERT
(
Àn
 <
MAXEXTLEN
);

600 
	`ASSERT
(!
	`i¢uŒ°¨tblock
(
bno
));

601 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
bno
);

602 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
bno
);

603 
	`ASSERT
(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
);

604 
	`ASSERT
(
agbno
 < 
mp
->
m_sb
.
sb_agblocks
);

605 
	`ASSERT
(
Àn
 < 
mp
->
m_sb
.
sb_agblocks
);

606 
	`ASSERT
(
agbno
 + 
Àn
 <
mp
->
m_sb
.
sb_agblocks
);

608 
	`ASSERT
(
xfs_bm≠_‰ì_ôem_z⁄e
 !
NULL
);

610 
√w
 = 
	`kmem_z⁄e_Æloc
(
xfs_bm≠_‰ì_ôem_z⁄e
, 
KM_SLEEP
);

611 
√w
->
xefi_°¨tblock
 = 
bno
;

612 
√w
->
xefi_blockcou¡
 = (
xfs_exéí_t
)
Àn
;

613 i‡(
oöfo
)

614 
√w
->
xefi_oöfo
 = *
oöfo
;

616 
	`xfs_rm≠_skù_ow√r_upd©e
(&
√w
->
xefi_oöfo
);

617 
	`åa˚_xfs_bm≠_‰ì_de„r
(
mp
, 
	`XFS_FSB_TO_AGNO
(mp, 
bno
), 0,

618 
	`XFS_FSB_TO_AGBNO
(
mp
, 
bno
), 
Àn
);

619 
	`xfs_de„r_add
(
df›s
, 
XFS_DEFER_OPS_TYPE_FREE
, &
√w
->
xefi_li°
);

620 
	}
}

632 
STATIC
 

633 
	$xfs_bm≠_båì_to_exã¡s
(

634 
xfs_å™s_t
 *
ç
,

635 
xfs_öode_t
 *
ù
,

636 
xfs_båì_cur_t
 *
cur
,

637 *
logÊag•
,

638 
whichf‹k
)

641 
xfs_båì_block
 *
cblock
;

642 
xfs_fsblock_t
 
cbno
;

643 
xfs_buf_t
 *
cbp
;

644 
îr‹
;

645 
xfs_if‹k_t
 *
iÂ
;

646 
xfs_mou¡_t
 *
mp
;

647 
__be64
 *
µ
;

648 
xfs_båì_block
 *
rblock
;

649 
xfs_ow√r_öfo
 
oöfo
;

651 
mp
 = 
ù
->
i_mou¡
;

652 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

653 
	`ASSERT
(
whichf‹k
 !
XFS_COW_FORK
);

654 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
);

655 
	`ASSERT
(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_BTREE
);

656 
rblock
 = 
iÂ
->
if_broŸ
;

657 
	`ASSERT
(
	`be16_to_˝u
(
rblock
->
bb_Àvñ
) == 1);

658 
	`ASSERT
(
	`be16_to_˝u
(
rblock
->
bb_numªcs
) == 1);

659 
	`ASSERT
(
	`xfs_bmbt_maxªcs
(
mp
, 
iÂ
->
if_broŸ_byãs
, 0) == 1);

660 
µ
 = 
	`XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
rblock
, 1, 
iÂ
->
if_broŸ_byãs
);

661 
cbno
 = 
	`be64_to_˝u
(*
µ
);

662 *
logÊag•
 = 0;

663 #ifde‡
DEBUG


664 i‡((
îr‹
 = 
	`xfs_båì_check_Õå
(
cur
, 
cbno
, 1)))

665  
îr‹
;

667 
îr‹
 = 
	`xfs_båì_ªad_buÊ
(
mp
, 
ç
, 
cbno
, 0, &
cbp
, 
XFS_BMAP_BTREE_REF
,

668 &
xfs_bmbt_buf_›s
);

669 i‡(
îr‹
)

670  
îr‹
;

671 
cblock
 = 
	`XFS_BUF_TO_BLOCK
(
cbp
);

672 i‡((
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
cblock
, 0, 
cbp
)))

673  
îr‹
;

674 
	`xfs_rm≠_öo_bmbt_ow√r
(&
oöfo
, 
ù
->
i_öo
, 
whichf‹k
);

675 
	`xfs_bm≠_add_‰ì
(
mp
, 
cur
->
bc_¥iv©e
.
b
.
df›s
, 
cbno
, 1, &
oöfo
);

676 
ù
->
i_d
.
di_nblocks
--;

677 
	`xfs_å™s_mod_dquŸ_byöo
(
ç
, 
ù
, 
XFS_TRANS_DQ_BCOUNT
, -1L);

678 
	`xfs_å™s_bövÆ
(
ç
, 
cbp
);

679 i‡(
cur
->
bc_bufs
[0] =
cbp
)

680 
cur
->
bc_bufs
[0] = 
NULL
;

681 
	`xfs_úoŸ_ªÆloc
(
ù
, -1, 
whichf‹k
);

682 
	`ASSERT
(
iÂ
->
if_broŸ
 =
NULL
);

683 
	`ASSERT
((
iÂ
->
if_Êags
 & 
XFS_IFBROOT
) == 0);

684 
	`XFS_IFORK_FMT_SET
(
ù
, 
whichf‹k
, 
XFS_DINODE_FMT_EXTENTS
);

685 *
logÊag•
 = 
XFS_ILOG_CORE
 | 
	`xfs_ûog_„xt
(
whichf‹k
);

687 
	}
}

693 
STATIC
 

694 
	$xfs_bm≠_exã¡s_to_båì
(

695 
xfs_å™s_t
 *
ç
,

696 
xfs_öode_t
 *
ù
,

697 
xfs_fsblock_t
 *
fú°block
,

698 
xfs_de„r_›s
 *
df›s
,

699 
xfs_båì_cur_t
 **
cuΩ
,

700 
wasdñ
,

701 *
logÊag•
,

702 
whichf‹k
)

704 
xfs_båì_block
 *
ablock
;

705 
xfs_buf_t
 *
abp
;

706 
xfs_Æloc_¨g_t
 
¨gs
;

707 
xfs_bmbt_ªc_t
 *
¨p
;

708 
xfs_båì_block
 *
block
;

709 
xfs_båì_cur_t
 *
cur
;

710 
xfs_bmbt_ªc_ho°_t
 *
ï
;

711 
îr‹
;

712 
xfs_exäum_t
 
i
, 
˙t
;

713 
xfs_if‹k_t
 *
iÂ
;

714 
xfs_bmbt_key_t
 *
kp
;

715 
xfs_mou¡_t
 *
mp
;

716 
xfs_exäum_t
 
√xã¡s
;

717 
xfs_bmbt_±r_t
 *
µ
;

719 
mp
 = 
ù
->
i_mou¡
;

720 
	`ASSERT
(
whichf‹k
 !
XFS_COW_FORK
);

721 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

722 
	`ASSERT
(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_EXTENTS
);

727 
	`xfs_úoŸ_ªÆloc
(
ù
, 1, 
whichf‹k
);

728 
iÂ
->
if_Êags
 |
XFS_IFBROOT
;

733 
block
 = 
iÂ
->
if_broŸ
;

734 
	`xfs_båì_öô_block_öt
(
mp
, 
block
, 
XFS_BUF_DADDR_NULL
,

735 
XFS_BTNUM_BMAP
, 1, 1, 
ù
->
i_öo
,

736 
XFS_BTREE_LONG_PTRS
);

740 
cur
 = 
	`xfs_bmbt_öô_curs‹
(
mp
, 
ç
, 
ù
, 
whichf‹k
);

741 
cur
->
bc_¥iv©e
.
b
.
fú°block
 = *firstblock;

742 
cur
->
bc_¥iv©e
.
b
.
df›s
 = dfops;

743 
cur
->
bc_¥iv©e
.
b
.
Êags
 = 
wasdñ
 ? 
XFS_BTCUR_BPRV_WASDEL
 : 0;

747 
	`XFS_IFORK_FMT_SET
(
ù
, 
whichf‹k
, 
XFS_DINODE_FMT_BTREE
);

748 
	`mem£t
(&
¨gs
, 0, (args));

749 
¨gs
.
ç
 =Åp;

750 
¨gs
.
mp
 = mp;

751 
	`xfs_rm≠_öo_bmbt_ow√r
(&
¨gs
.
oöfo
, 
ù
->
i_öo
, 
whichf‹k
);

752 
¨gs
.
fú°block
 = *firstblock;

753 i‡(*
fú°block
 =
NULLFSBLOCK
) {

754 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_START_BNO
;

755 
¨gs
.
fsbno
 = 
	`XFS_INO_TO_FSB
(
mp
, 
ù
->
i_öo
);

756 } i‡(
df›s
->
d›_low
) {

757 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_START_BNO
;

758 
åy_™Ÿhî_ag
:

759 
¨gs
.
fsbno
 = *
fú°block
;

761 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

762 
¨gs
.
fsbno
 = *
fú°block
;

764 
¨gs
.
möÀn
 =árgs.
maxÀn
 =árgs.
¥od
 = 1;

765 
¨gs
.
wasdñ
 = wasdel;

766 *
logÊag•
 = 0;

767 i‡((
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
))) {

768 
	`xfs_úoŸ_ªÆloc
(
ù
, -1, 
whichf‹k
);

769 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

770  
îr‹
;

781 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
cur
->
bc_mp
->
m_sb
) &&

782 
¨gs
.
fsbno
 =
NULLFSBLOCK
 &&

783 
¨gs
.
ty≥
 =
XFS_ALLOCTYPE_NEAR_BNO
) {

784 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_FIRST_AG
;

785 
åy_™Ÿhî_ag
;

787 i‡(
	`WARN_ON_ONCE
(
¨gs
.
fsbno
 =
NULLFSBLOCK
)) {

788 
	`xfs_úoŸ_ªÆloc
(
ù
, -1, 
whichf‹k
);

789 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

790  -
ENOSPC
;

795 
	`ASSERT
(*
fú°block
 =
NULLFSBLOCK
 ||

796 
¨gs
.
agno
 >
	`XFS_FSB_TO_AGNO
(
mp
, *
fú°block
));

797 *
fú°block
 = 
cur
->
bc_¥iv©e
.
b
.fú°block = 
¨gs
.
fsbno
;

798 
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
++;

799 
ù
->
i_d
.
di_nblocks
++;

800 
	`xfs_å™s_mod_dquŸ_byöo
(
ç
, 
ù
, 
XFS_TRANS_DQ_BCOUNT
, 1L);

801 
abp
 = 
	`xfs_båì_gë_buÊ
(
mp
, 
ç
, 
¨gs
.
fsbno
, 0);

805 
abp
->
b_›s
 = &
xfs_bmbt_buf_›s
;

806 
ablock
 = 
	`XFS_BUF_TO_BLOCK
(
abp
);

807 
	`xfs_båì_öô_block_öt
(
mp
, 
ablock
, 
abp
->
b_bn
,

808 
XFS_BTNUM_BMAP
, 0, 0, 
ù
->
i_öo
,

809 
XFS_BTREE_LONG_PTRS
);

811 
¨p
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
ablock
, 1);

812 
√xã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

813 
˙t
 = 
i
 = 0; i < 
√xã¡s
; i++) {

814 
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
i
);

815 i‡(!
	`i¢uŒ°¨tblock
(
	`xfs_bmbt_gë_°¨tblock
(
ï
))) {

816 
¨p
->
l0
 = 
	`˝u_to_be64
(
ï
->l0);

817 
¨p
->
l1
 = 
	`˝u_to_be64
(
ï
->l1);

818 
¨p
++; 
˙t
++;

821 
	`ASSERT
(
˙t
 =
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
));

822 
	`xfs_båì_£t_numªcs
(
ablock
, 
˙t
);

827 
kp
 = 
	`XFS_BMBT_KEY_ADDR
(
mp
, 
block
, 1);

828 
¨p
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
ablock
, 1);

829 
kp
->
br_°¨toff
 = 
	`˝u_to_be64
(
	`xfs_bmbt_disk_gë_°¨toff
(
¨p
));

830 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, 
	`xfs_bmbt_gë_maxªcs
(
cur
,

831 
	`be16_to_˝u
(
block
->
bb_Àvñ
)));

832 *
µ
 = 
	`˝u_to_be64
(
¨gs
.
fsbno
);

838 
	`xfs_båì_log_block
(
cur
, 
abp
, 
XFS_BB_ALL_BITS
);

839 
	`xfs_båì_log_ªcs
(
cur
, 
abp
, 1, 
	`be16_to_˝u
(
ablock
->
bb_numªcs
));

840 
	`ASSERT
(*
cuΩ
 =
NULL
);

841 *
cuΩ
 = 
cur
;

842 *
logÊag•
 = 
XFS_ILOG_CORE
 | 
	`xfs_ûog_fbroŸ
(
whichf‹k
);

844 
	}
}

853 
	$xfs_bm≠_loˇl_to_exã¡s_em±y
(

854 
xfs_öode
 *
ù
,

855 
whichf‹k
)

857 
xfs_if‹k
 *
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

859 
	`ASSERT
(
whichf‹k
 !
XFS_COW_FORK
);

860 
	`ASSERT
(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_LOCAL
);

861 
	`ASSERT
(
iÂ
->
if_byãs
 == 0);

862 
	`ASSERT
(
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) == 0);

864 
	`xfs_bm≠_f‹koff_ª£t
(
ù
, 
whichf‹k
);

865 
iÂ
->
if_Êags
 &~
XFS_IFINLINE
;

866 
iÂ
->
if_Êags
 |
XFS_IFEXTENTS
;

867 
	`XFS_IFORK_FMT_SET
(
ù
, 
whichf‹k
, 
XFS_DINODE_FMT_EXTENTS
);

868 
	}
}

871 
STATIC
 

872 
xfs_bm≠_loˇl_to_exã¡s
(

873 
xfs_å™s_t
 *
ç
,

874 
xfs_öode_t
 *
ù
,

875 
xfs_fsblock_t
 *
fú°block
,

876 
xfs_exéí_t
 
tŸÆ
,

877 *
logÊag•
,

878 
whichf‹k
,

879 (*
öô_‚
)(
xfs_å™s
 *
ç
,

880 
xfs_buf
 *
bp
,

881 
xfs_öode
 *
ù
,

882 
xfs_if‹k
 *
iÂ
))

884 
îr‹
 = 0;

885 
Êags
;

886 
xfs_if‹k_t
 *
iÂ
;

887 
xfs_Æloc_¨g_t
 
¨gs
;

888 
xfs_buf_t
 *
bp
;

889 
xfs_bmbt_ªc_ho°_t
 *
ï
;

895 
	`ASSERT
(!(
	`S_ISREG
(
	`VFS_I
(
ù
)->
i_mode
Ë&& 
whichf‹k
 =
XFS_DATA_FORK
));

896 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

897 
	`ASSERT
(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_LOCAL
);

899 i‡(!
iÂ
->
if_byãs
) {

900 
	`xfs_bm≠_loˇl_to_exã¡s_em±y
(
ù
, 
whichf‹k
);

901 
Êags
 = 
XFS_ILOG_CORE
;

902 
d⁄e
;

905 
Êags
 = 0;

906 
îr‹
 = 0;

907 
	`ASSERT
((
iÂ
->
if_Êags
 & (
XFS_IFINLINE
|
XFS_IFEXTENTS
|
XFS_IFEXTIREC
)) ==

908 
XFS_IFINLINE
);

909 
	`mem£t
(&
¨gs
, 0, (args));

910 
¨gs
.
ç
 =Åp;

911 
¨gs
.
mp
 = 
ù
->
i_mou¡
;

912 
	`xfs_rm≠_öo_ow√r
(&
¨gs
.
oöfo
, 
ù
->
i_öo
, 
whichf‹k
, 0);

913 
¨gs
.
fú°block
 = *firstblock;

918 i‡(*
fú°block
 =
NULLFSBLOCK
) {

919 
åy_™Ÿhî_ag
:

920 
¨gs
.
fsbno
 = 
	`XFS_INO_TO_FSB
◊rgs.
mp
, 
ù
->
i_öo
);

921 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_START_BNO
;

923 
¨gs
.
fsbno
 = *
fú°block
;

924 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

926 
¨gs
.
tŸÆ
 =Åotal;

927 
¨gs
.
möÀn
 =árgs.
maxÀn
 =árgs.
¥od
 = 1;

928 
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
);

929 i‡(
îr‹
)

930 
d⁄e
;

940 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
ù
->
i_mou¡
->
m_sb
) &&

941 
¨gs
.
fsbno
 =
NULLFSBLOCK
 &&

942 
¨gs
.
ty≥
 =
XFS_ALLOCTYPE_NEAR_BNO
) {

943 
åy_™Ÿhî_ag
;

946 
	`ASSERT
(
¨gs
.
fsbno
 !
NULLFSBLOCK
);

947 
	`ASSERT
(
¨gs
.
Àn
 == 1);

948 *
fú°block
 = 
¨gs
.
fsbno
;

949 
bp
 = 
	`xfs_båì_gë_buÊ
(
¨gs
.
mp
, 
ç
,árgs.
fsbno
, 0);

959 
	`öô_‚
(
ç
, 
bp
, 
ù
, 
iÂ
);

962 
	`xfs_id©a_ªÆloc
(
ù
, -
iÂ
->
if_byãs
, 
whichf‹k
);

963 
	`xfs_bm≠_loˇl_to_exã¡s_em±y
(
ù
, 
whichf‹k
);

964 
Êags
 |
XFS_ILOG_CORE
;

966 
	`xfs_õxt_add
(
iÂ
, 0, 1);

967 
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 0);

968 
	`xfs_bmbt_£t_Ælf
(
ï
, 0, 
¨gs
.
fsbno
, 1, 
XFS_EXT_NORM
);

969 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, 0,

970 
whichf‹k
 =
XFS_ATTR_FORK
 ? 
BMAP_ATTRFORK
 : 0,

971 
_THIS_IP_
);

972 
	`XFS_IFORK_NEXT_SET
(
ù
, 
whichf‹k
, 1);

973 
ù
->
i_d
.
di_nblocks
 = 1;

974 
	`xfs_å™s_mod_dquŸ_byöo
(
ç
, 
ù
,

975 
XFS_TRANS_DQ_BCOUNT
, 1L);

976 
Êags
 |
	`xfs_ûog_„xt
(
whichf‹k
);

978 
d⁄e
:

979 *
logÊag•
 = 
Êags
;

980  
îr‹
;

981 
	}
}

986 
STATIC
 

987 
	$xfs_bm≠_add_©åf‹k_båì
(

988 
xfs_å™s_t
 *
ç
,

989 
xfs_öode_t
 *
ù
,

990 
xfs_fsblock_t
 *
fú°block
,

991 
xfs_de„r_›s
 *
df›s
,

992 *
Êags
)

994 
xfs_båì_cur_t
 *
cur
;

995 
îr‹
;

996 
xfs_mou¡_t
 *
mp
;

997 
°©
;

999 
mp
 = 
ù
->
i_mou¡
;

1000 i‡(
ù
->
i_df
.
if_broŸ_byãs
 <
	`XFS_IFORK_DSIZE
(ip))

1001 *
Êags
 |
XFS_ILOG_DBROOT
;

1003 
cur
 = 
	`xfs_bmbt_öô_curs‹
(
mp
, 
ç
, 
ù
, 
XFS_DATA_FORK
);

1004 
cur
->
bc_¥iv©e
.
b
.
df›s
 = dfops;

1005 
cur
->
bc_¥iv©e
.
b
.
fú°block
 = *firstblock;

1006 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_ge
(
cur
, 0, 0, 0, &
°©
)))

1007 
îr‹0
;

1009 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
°©
 =1, 
îr‹0
);

1010 i‡((
îr‹
 = 
	`xfs_båì_√w_úoŸ
(
cur
, 
Êags
, &
°©
)))

1011 
îr‹0
;

1012 i‡(
°©
 == 0) {

1013 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

1014  -
ENOSPC
;

1016 *
fú°block
 = 
cur
->
bc_¥iv©e
.
b
.firstblock;

1017 
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
 = 0;

1018 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

1021 
îr‹0
:

1022 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

1023  
îr‹
;

1024 
	}
}

1029 
STATIC
 

1030 
	$xfs_bm≠_add_©åf‹k_exã¡s
(

1031 
xfs_å™s_t
 *
ç
,

1032 
xfs_öode_t
 *
ù
,

1033 
xfs_fsblock_t
 *
fú°block
,

1034 
xfs_de„r_›s
 *
df›s
,

1035 *
Êags
)

1037 
xfs_båì_cur_t
 *
cur
;

1038 
îr‹
;

1040 i‡(
ù
->
i_d
.
di_√xã¡s
 * (
xfs_bmbt_ªc_t
Ë<
	`XFS_IFORK_DSIZE
(ip))

1042 
cur
 = 
NULL
;

1043 
îr‹
 = 
	`xfs_bm≠_exã¡s_to_båì
(
ç
, 
ù
, 
fú°block
, 
df›s
, &
cur
, 0,

1044 
Êags
, 
XFS_DATA_FORK
);

1045 i‡(
cur
) {

1046 
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
 = 0;

1047 
	`xfs_båì_dñ_curs‹
(
cur
,

1048 
îr‹
 ? 
XFS_BTREE_ERROR
 : 
XFS_BTREE_NOERROR
);

1050  
îr‹
;

1051 
	}
}

1064 
STATIC
 

1065 
	$xfs_bm≠_add_©åf‹k_loˇl
(

1066 
xfs_å™s_t
 *
ç
,

1067 
xfs_öode_t
 *
ù
,

1068 
xfs_fsblock_t
 *
fú°block
,

1069 
xfs_de„r_›s
 *
df›s
,

1070 *
Êags
)

1072 
xfs_da_¨gs_t
 
d¨gs
;

1074 i‡(
ù
->
i_df
.
if_byãs
 <
	`XFS_IFORK_DSIZE
(ip))

1077 i‡(
	`S_ISDIR
(
	`VFS_I
(
ù
)->
i_mode
)) {

1078 
	`mem£t
(&
d¨gs
, 0, (dargs));

1079 
d¨gs
.
geo
 = 
ù
->
i_mou¡
->
m_dú_geo
;

1080 
d¨gs
.
dp
 = 
ù
;

1081 
d¨gs
.
fú°block
 = firstblock;

1082 
d¨gs
.
df›s
 = dfops;

1083 
d¨gs
.
tŸÆ
 = d¨gs.
geo
->
fsbcou¡
;

1084 
d¨gs
.
whichf‹k
 = 
XFS_DATA_FORK
;

1085 
d¨gs
.
å™s
 = 
ç
;

1086  
	`xfs_dú2_sf_to_block
(&
d¨gs
);

1089 i‡(
	`S_ISLNK
(
	`VFS_I
(
ù
)->
i_mode
))

1090  
	`xfs_bm≠_loˇl_to_exã¡s
(
ç
, 
ù
, 
fú°block
, 1,

1091 
Êags
, 
XFS_DATA_FORK
,

1092 
xfs_symlök_loˇl_to_ªmŸe
);

1095 
	`ASSERT
(0);

1096  -
EFSCORRUPTED
;

1097 
	}
}

1104 
	$xfs_bm≠_add_©åf‹k
(

1105 
xfs_öode_t
 *
ù
,

1106 
size
,

1107 
rsvd
)

1109 
xfs_fsblock_t
 
fú°block
;

1110 
xfs_de„r_›s
 
df›s
;

1111 
xfs_mou¡_t
 *
mp
;

1112 
xfs_å™s_t
 *
ç
;

1113 
blks
;

1114 
vîsi⁄
 = 1;

1115 
logÊags
;

1116 
îr‹
;

1118 
	`ASSERT
(
	`XFS_IFORK_Q
(
ù
) == 0);

1120 
mp
 = 
ù
->
i_mou¡
;

1121 
	`ASSERT
(!
	`XFS_NOT_DQATTACHED
(
mp
, 
ù
));

1123 
blks
 = 
	`XFS_ADDAFORK_SPACE_RES
(
mp
);

1125 
îr‹
 = 
	`xfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_addaf‹k
, 
blks
, 0,

1126 
rsvd
 ? 
XFS_TRANS_RESERVE
 : 0, &
ç
);

1127 i‡(
îr‹
)

1128  
îr‹
;

1130 
	`xfs_ûock
(
ù
, 
XFS_ILOCK_EXCL
);

1131 
îr‹
 = 
	`xfs_å™s_ª£rve_quŸa_nblks
(
ç
, 
ù
, 
blks
, 0, 
rsvd
 ?

1132 
XFS_QMOPT_RES_REGBLKS
 | 
XFS_QMOPT_FORCE_RES
 :

1133 
XFS_QMOPT_RES_REGBLKS
);

1134 i‡(
îr‹
)

1135 
å™s_ˇn˚l
;

1136 i‡(
	`XFS_IFORK_Q
(
ù
))

1137 
å™s_ˇn˚l
;

1138 i‡(
ù
->
i_d
.
di_™exã¡s
 != 0) {

1139 
îr‹
 = -
EFSCORRUPTED
;

1140 
å™s_ˇn˚l
;

1142 i‡(
ù
->
i_d
.
di_af‹m©
 !
XFS_DINODE_FMT_EXTENTS
) {

1146 
	`ASSERT
(
ù
->
i_d
.
di_af‹m©
 == 0);

1147 
ù
->
i_d
.
di_af‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

1150 
	`xfs_å™s_ijoö
(
ç
, 
ù
, 0);

1151 
	`xfs_å™s_log_öode
(
ç
, 
ù
, 
XFS_ILOG_CORE
);

1153 
ù
->
i_d
.
di_f‹m©
) {

1154 
XFS_DINODE_FMT_DEV
:

1155 
ù
->
i_d
.
di_f‹koff
 = 
	`roundup
((
xfs_dev_t
), 8) >> 3;

1157 
XFS_DINODE_FMT_UUID
:

1158 
ù
->
i_d
.
di_f‹koff
 = 
	`roundup
((
uuid_t
), 8) >> 3;

1160 
XFS_DINODE_FMT_LOCAL
:

1161 
XFS_DINODE_FMT_EXTENTS
:

1162 
XFS_DINODE_FMT_BTREE
:

1163 
ù
->
i_d
.
di_f‹koff
 = 
	`xfs_©å_sh‹tf‹m_byãsfô
(ù, 
size
);

1164 i‡(!
ù
->
i_d
.
di_f‹koff
)

1165 
ù
->
i_d
.
di_f‹koff
 = 
	`xfs_deÁu…_©åoff£t
(ip) >> 3;

1166 i‡(
mp
->
m_Êags
 & 
XFS_MOUNT_ATTR2
)

1167 
vîsi⁄
 = 2;

1170 
	`ASSERT
(0);

1171 
îr‹
 = -
EINVAL
;

1172 
å™s_ˇn˚l
;

1175 
	`ASSERT
(
ù
->
i_aÂ
 =
NULL
);

1176 
ù
->
i_aÂ
 = 
	`kmem_z⁄e_zÆloc
(
xfs_if‹k_z⁄e
, 
KM_SLEEP
);

1177 
ù
->
i_aÂ
->
if_Êags
 = 
XFS_IFEXTENTS
;

1178 
logÊags
 = 0;

1179 
	`xfs_de„r_öô
(&
df›s
, &
fú°block
);

1180 
ù
->
i_d
.
di_f‹m©
) {

1181 
XFS_DINODE_FMT_LOCAL
:

1182 
îr‹
 = 
	`xfs_bm≠_add_©åf‹k_loˇl
(
ç
, 
ù
, &
fú°block
, &
df›s
,

1183 &
logÊags
);

1185 
XFS_DINODE_FMT_EXTENTS
:

1186 
îr‹
 = 
	`xfs_bm≠_add_©åf‹k_exã¡s
(
ç
, 
ù
, &
fú°block
,

1187 &
df›s
, &
logÊags
);

1189 
XFS_DINODE_FMT_BTREE
:

1190 
îr‹
 = 
	`xfs_bm≠_add_©åf‹k_båì
(
ç
, 
ù
, &
fú°block
, &
df›s
,

1191 &
logÊags
);

1194 
îr‹
 = 0;

1197 i‡(
logÊags
)

1198 
	`xfs_å™s_log_öode
(
ç
, 
ù
, 
logÊags
);

1199 i‡(
îr‹
)

1200 
bm≠_ˇn˚l
;

1201 i‡(!
	`xfs_sb_vîsi⁄_haßâr
(&
mp
->
m_sb
) ||

1202 (!
	`xfs_sb_vîsi⁄_haßâr2
(&
mp
->
m_sb
Ë&& 
vîsi⁄
 == 2)) {

1203 
boﬁ
 
log_sb
 = 
Ál£
;

1205 
	`•ö_lock
(&
mp
->
m_sb_lock
);

1206 i‡(!
	`xfs_sb_vîsi⁄_haßâr
(&
mp
->
m_sb
)) {

1207 
	`xfs_sb_vîsi⁄_add©å
(&
mp
->
m_sb
);

1208 
log_sb
 = 
åue
;

1210 i‡(!
	`xfs_sb_vîsi⁄_haßâr2
(&
mp
->
m_sb
Ë&& 
vîsi⁄
 == 2) {

1211 
	`xfs_sb_vîsi⁄_add©å2
(&
mp
->
m_sb
);

1212 
log_sb
 = 
åue
;

1214 
	`•ö_u∆ock
(&
mp
->
m_sb_lock
);

1215 i‡(
log_sb
)

1216 
	`xfs_log_sb
(
ç
);

1219 
îr‹
 = 
	`xfs_de„r_föish
(&
ç
, &
df›s
, 
NULL
);

1220 i‡(
îr‹
)

1221 
bm≠_ˇn˚l
;

1222 
îr‹
 = 
	`xfs_å™s_commô
(
ç
);

1223 
	`xfs_iu∆ock
(
ù
, 
XFS_ILOCK_EXCL
);

1224  
îr‹
;

1226 
bm≠_ˇn˚l
:

1227 
	`xfs_de„r_ˇn˚l
(&
df›s
);

1228 
å™s_ˇn˚l
:

1229 
	`xfs_å™s_ˇn˚l
(
ç
);

1230 
	`xfs_iu∆ock
(
ù
, 
XFS_ILOCK_EXCL
);

1231  
îr‹
;

1232 
	}
}

1245 
	$xfs_bm≠_ªad_exã¡s
(

1246 
xfs_å™s_t
 *
ç
,

1247 
xfs_öode_t
 *
ù
,

1248 
whichf‹k
)

1250 
xfs_båì_block
 *
block
;

1251 
xfs_fsblock_t
 
bno
;

1252 
xfs_buf_t
 *
bp
;

1253 
îr‹
;

1254 
xfs_ex¡fmt_t
 
ex¡f
;

1255 
xfs_exäum_t
 
i
, 
j
;

1256 
xfs_if‹k_t
 *
iÂ
;

1257 
Àvñ
;

1258 
xfs_mou¡_t
 *
mp
;

1259 
__be64
 *
µ
;

1261 
xfs_exäum_t
 
room
;

1263 
mp
 = 
ù
->
i_mou¡
;

1264 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

1265 
ex¡f
 = (
whichf‹k
 !
XFS_DATA_FORK
Ë? 
XFS_EXTFMT_NOSTATE
 :

1266 
	`XFS_EXTFMT_INODE
(
ù
);

1267 
block
 = 
iÂ
->
if_broŸ
;

1271 
Àvñ
 = 
	`be16_to_˝u
(
block
->
bb_Àvñ
);

1272 
	`ASSERT
(
Àvñ
 > 0);

1273 
µ
 = 
	`XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
block
, 1, 
iÂ
->
if_broŸ_byãs
);

1274 
bno
 = 
	`be64_to_˝u
(*
µ
);

1280 
Àvñ
-- > 0) {

1281 
îr‹
 = 
	`xfs_båì_ªad_buÊ
(
mp
, 
ç
, 
bno
, 0, &
bp
,

1282 
XFS_BMAP_BTREE_REF
, &
xfs_bmbt_buf_›s
);

1283 i‡(
îr‹
)

1284  
îr‹
;

1285 
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

1286 i‡(
Àvñ
 == 0)

1288 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[1]);

1289 
bno
 = 
	`be64_to_˝u
(*
µ
);

1290 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

1291 
	`XFS_FSB_SANITY_CHECK
(
mp
, 
bno
), 
îr‹0
);

1292 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

1297 
room
 = 
	`xfs_õxt_cou¡
(
iÂ
);

1298 
i
 = 0;

1303 
xfs_bmbt_ªc_t
 *
‰p
;

1304 
xfs_fsblock_t
 
√xtbno
;

1305 
xfs_exäum_t
 
num_ªcs
;

1306 
xfs_exäum_t
 
°¨t
;

1308 
num_ªcs
 = 
	`xfs_båì_gë_numªcs
(
block
);

1309 i‡(
	`u∆ikñy
(
i
 + 
num_ªcs
 > 
room
)) {

1310 
	`ASSERT
(
i
 + 
num_ªcs
 <
room
);

1311 
	`xfs_w¨n
(
ù
->
i_mou¡
,

1313 (Ë
ù
->
i_öo
);

1314 
	`XFS_CORRUPTION_ERROR
("xfs_bmap_read_extents(1)",

1315 
XFS_ERRLEVEL_LOW
, 
ù
->
i_mou¡
, 
block
);

1316 
îr‹0
;

1321 
√xtbno
 = 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_rightsib
);

1322 i‡(
√xtbno
 !
NULLFSBLOCK
)

1323 
	`xfs_båì_ªada_buÊ
(
mp
, 
√xtbno
, 1,

1324 &
xfs_bmbt_buf_›s
);

1328 
‰p
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1);

1329 
°¨t
 = 
i
;

1330 
j
 = 0; j < 
num_ªcs
; j++, 
i
++, 
‰p
++) {

1331 
xfs_bmbt_ªc_ho°_t
 *
åp
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
i
);

1332 
åp
->
l0
 = 
	`be64_to_˝u
(
‰p
->l0);

1333 
åp
->
l1
 = 
	`be64_to_˝u
(
‰p
->l1);

1335 i‡(
ex¡f
 =
XFS_EXTFMT_NOSTATE
) {

1341 i‡(
	`u∆ikñy
(
	`xfs_check_no°©e_exã¡s
(
iÂ
,

1342 
°¨t
, 
num_ªcs
))) {

1343 
	`XFS_ERROR_REPORT
("xfs_bmap_read_extents(2)",

1344 
XFS_ERRLEVEL_LOW
,

1345 
ù
->
i_mou¡
);

1346 
îr‹0
;

1349 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

1350 
bno
 = 
√xtbno
;

1354 i‡(
bno
 =
NULLFSBLOCK
)

1356 
îr‹
 = 
	`xfs_båì_ªad_buÊ
(
mp
, 
ç
, 
bno
, 0, &
bp
,

1357 
XFS_BMAP_BTREE_REF
, &
xfs_bmbt_buf_›s
);

1358 i‡(
îr‹
)

1359  
îr‹
;

1360 
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

1362 i‡(
i
 !
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
))

1363  -
EFSCORRUPTED
;

1364 
	`ASSERT
(
i
 =
	`xfs_õxt_cou¡
(
iÂ
));

1365 
	`XFS_BMAP_TRACE_EXLIST
(
ù
, 
i
, 
whichf‹k
);

1367 
îr‹0
:

1368 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

1369  -
EFSCORRUPTED
;

1370 
	}
}

1380 
	$xfs_bm≠_fú°_unu£d
(

1381 
xfs_å™s_t
 *
ç
,

1382 
xfs_öode_t
 *
ù
,

1383 
xfs_exéí_t
 
Àn
,

1384 
xfs_fûeoff_t
 *
fú°_unu£d
,

1385 
whichf‹k
)

1387 
îr‹
;

1388 
idx
;

1389 
xfs_if‹k_t
 *
iÂ
;

1390 
xfs_fûeoff_t
 
œ°addr
;

1391 
xfs_fûeoff_t
 
lowe°
;

1392 
xfs_fûeoff_t
 
max
;

1393 
xfs_fûeoff_t
 
off
;

1394 
xfs_exäum_t
 
√xã¡s
;

1396 
	`ASSERT
(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_BTREE
 ||

1397 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_EXTENTS
 ||

1398 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_LOCAL
);

1399 i‡(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_LOCAL
) {

1400 *
fú°_unu£d
 = 0;

1403 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

1404 i‡(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
) &&

1405 (
îr‹
 = 
	`xfs_úód_exã¡s
(
ç
, 
ù
, 
whichf‹k
)))

1406  
îr‹
;

1407 
lowe°
 = *
fú°_unu£d
;

1408 
√xã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

1409 
idx
 = 0, 
œ°addr
 = 0, 
max
 = 
lowe°
; idx < 
√xã¡s
; idx++) {

1410 
xfs_bmbt_ªc_ho°_t
 *
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
idx
);

1411 
off
 = 
	`xfs_bmbt_gë_°¨toff
(
ï
);

1415 i‡(
off
 >
lowe°
 + 
Àn
 && of‡- 
max
 >=Üen) {

1416 *
fú°_unu£d
 = 
max
;

1419 
œ°addr
 = 
off
 + 
	`xfs_bmbt_gë_blockcou¡
(
ï
);

1420 
max
 = 
	`XFS_FILEOFF_MAX
(
œ°addr
, 
lowe°
);

1422 *
fú°_unu£d
 = 
max
;

1424 
	}
}

1433 
	$xfs_bm≠_œ°_bef‹e
(

1434 
xfs_å™s
 *
ç
,

1435 
xfs_öode
 *
ù
,

1436 
xfs_fûeoff_t
 *
œ°_block
,

1437 
whichf‹k
)

1439 
xfs_if‹k
 *
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

1440 
xfs_bmbt_úec
 
gŸ
;

1441 
xfs_exäum_t
 
idx
;

1442 
îr‹
;

1444 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
)) {

1445 
XFS_DINODE_FMT_LOCAL
:

1446 *
œ°_block
 = 0;

1448 
XFS_DINODE_FMT_BTREE
:

1449 
XFS_DINODE_FMT_EXTENTS
:

1452  -
EIO
;

1455 i‡(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
)) {

1456 
îr‹
 = 
	`xfs_úód_exã¡s
(
ç
, 
ù
, 
whichf‹k
);

1457 i‡(
îr‹
)

1458  
îr‹
;

1461 i‡(
	`xfs_õxt_lookup_exã¡
(
ù
, 
iÂ
, *
œ°_block
 - 1, &
idx
, &
gŸ
)) {

1462 i‡(
gŸ
.
br_°¨toff
 <*
œ°_block
 - 1)

1466 i‡(
	`xfs_õxt_gë_exã¡
(
iÂ
, 
idx
 - 1, &
gŸ
)) {

1467 *
œ°_block
 = 
gŸ
.
br_°¨toff
 + gŸ.
br_blockcou¡
;

1471 *
œ°_block
 = 0;

1473 
	}
}

1476 
	$xfs_bm≠_œ°_exã¡
(

1477 
xfs_å™s
 *
ç
,

1478 
xfs_öode
 *
ù
,

1479 
whichf‹k
,

1480 
xfs_bmbt_úec
 *
ªc
,

1481 *
is_em±y
)

1483 
xfs_if‹k
 *
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

1484 
îr‹
;

1485 
√xã¡s
;

1487 i‡(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
)) {

1488 
îr‹
 = 
	`xfs_úód_exã¡s
(
ç
, 
ù
, 
whichf‹k
);

1489 i‡(
îr‹
)

1490  
îr‹
;

1493 
√xã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

1494 i‡(
√xã¡s
 == 0) {

1495 *
is_em±y
 = 1;

1499 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, 
√xã¡s
 - 1), 
ªc
);

1500 *
is_em±y
 = 0;

1502 
	}
}

1513 
STATIC
 

1514 
	$xfs_bm≠_ißeof
(

1515 
xfs_bmÆloˇ
 *
bma
,

1516 
whichf‹k
)

1518 
xfs_bmbt_úec
 
ªc
;

1519 
is_em±y
;

1520 
îr‹
;

1522 
bma
->
´of
 = 0;

1523 
îr‹
 = 
	`xfs_bm≠_œ°_exã¡
(
NULL
, 
bma
->
ù
, 
whichf‹k
, &
ªc
,

1524 &
is_em±y
);

1525 i‡(
îr‹
)

1526  
îr‹
;

1528 i‡(
is_em±y
) {

1529 
bma
->
´of
 = 1;

1537 
bma
->
´of
 = bma->
off£t
 >
ªc
.
br_°¨toff
 +Ñec.
br_blockcou¡
 ||

1538 (
bma
->
off£t
 >
ªc
.
br_°¨toff
 &&

1539 
	`i¢uŒ°¨tblock
(
ªc
.
br_°¨tblock
));

1541 
	}
}

1549 
	$xfs_bm≠_œ°_off£t
(

1550 
xfs_öode
 *
ù
,

1551 
xfs_fûeoff_t
 *
œ°_block
,

1552 
whichf‹k
)

1554 
xfs_bmbt_úec
 
ªc
;

1555 
is_em±y
;

1556 
îr‹
;

1558 *
œ°_block
 = 0;

1560 i‡(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_LOCAL
)

1563 i‡(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
 &&

1564 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_EXTENTS
)

1565  -
EIO
;

1567 
îr‹
 = 
	`xfs_bm≠_œ°_exã¡
(
NULL
, 
ù
, 
whichf‹k
, &
ªc
, &
is_em±y
);

1568 i‡(
îr‹
 || 
is_em±y
)

1569  
îr‹
;

1571 *
œ°_block
 = 
ªc
.
br_°¨toff
 +Ñec.
br_blockcou¡
;

1573 
	}
}

1581 
	$xfs_bm≠_⁄e_block
(

1582 
xfs_öode_t
 *
ù
,

1583 
whichf‹k
)

1585 
xfs_bmbt_ªc_ho°_t
 *
ï
;

1586 
xfs_if‹k_t
 *
iÂ
;

1587 
rvÆ
;

1588 
xfs_bmbt_úec_t
 
s
;

1590 #i‚de‡
DEBUG


1591 i‡(
whichf‹k
 =
XFS_DATA_FORK
)

1592  
	`XFS_ISIZE
(
ù
Ë=ù->
i_mou¡
->
m_sb
.
sb_blocksize
;

1594 i‡(
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) != 1)

1596 i‡(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_EXTENTS
)

1598 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

1599 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
);

1600 
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 0);

1601 
	`xfs_bmbt_gë_Æl
(
ï
, &
s
);

1602 
rvÆ
 = 
s
.
br_°¨toff
 =0 && s.
br_blockcou¡
 == 1;

1603 i‡(
rvÆ
 && 
whichf‹k
 =
XFS_DATA_FORK
)

1604 
	`ASSERT
(
	`XFS_ISIZE
(
ù
Ë=ù->
i_mou¡
->
m_sb
.
sb_blocksize
);

1605  
rvÆ
;

1606 
	}
}

1615 
STATIC
 

1616 
	$xfs_bm≠_add_exã¡_dñay_ªÆ
(

1617 
xfs_bmÆloˇ
 *
bma
,

1618 
whichf‹k
)

1620 
xfs_bmbt_úec
 *
√w
 = &
bma
->
gŸ
;

1621 
diff
;

1622 
xfs_bmbt_ªc_ho°_t
 *
ï
;

1623 
îr‹
;

1624 
i
;

1625 
xfs_if‹k_t
 *
iÂ
;

1626 
xfs_fûeoff_t
 
√w_ídoff
;

1627 
xfs_bmbt_úec_t
 
r
[3];

1629 
rvÆ
=0;

1630 
°©e
 = 0;

1631 
xfs_fûblks_t
 
da_√w
;

1632 
xfs_fûblks_t
 
da_ﬁd
;

1633 
xfs_fûblks_t
 
ãmp
=0;

1634 
xfs_fûblks_t
 
ãmp2
=0;

1635 
tmp_rvÆ
;

1636 
xfs_mou¡
 *
mp
;

1637 
xfs_exäum_t
 *
√xã¡s
;

1639 
mp
 = 
bma
->
ù
->
i_mou¡
;

1640 
iÂ
 = 
	`XFS_IFORK_PTR
(
bma
->
ù
, 
whichf‹k
);

1641 
	`ASSERT
(
whichf‹k
 !
XFS_ATTR_FORK
);

1642 
√xã¡s
 = (
whichf‹k
 =
XFS_COW_FORK
 ? &
bma
->
ù
->
i_˙exã¡s
 :

1643 &
bma
->
ù
->
i_d
.
di_√xã¡s
);

1645 
	`ASSERT
(
bma
->
idx
 >= 0);

1646 
	`ASSERT
(
bma
->
idx
 <
	`xfs_õxt_cou¡
(
iÂ
));

1647 
	`ASSERT
(!
	`i¢uŒ°¨tblock
(
√w
->
br_°¨tblock
));

1648 
	`ASSERT
(!
bma
->
cur
 ||

1649 (
bma
->
cur
->
bc_¥iv©e
.
b
.
Êags
 & 
XFS_BTCUR_BPRV_WASDEL
));

1651 
	`XFS_STATS_INC
(
mp
, 
xs_add_exli°
);

1653 
	#LEFT
 
r
[0]

	)

1654 
	#RIGHT
 
r
[1]

	)

1655 
	#PREV
 
r
[2]

	)

1657 i‡(
whichf‹k
 =
XFS_COW_FORK
)

1658 
°©e
 |
BMAP_COWFORK
;

1663 
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
);

1664 
	`xfs_bmbt_gë_Æl
(
ï
, &
PREV
);

1665 
√w_ídoff
 = 
√w
->
br_°¨toff
 +Çew->
br_blockcou¡
;

1666 
	`ASSERT
(
PREV
.
br_°¨toff
 <
√w
->br_startoff);

1667 
	`ASSERT
(
PREV
.
br_°¨toff
 + PREV.
br_blockcou¡
 >
√w_ídoff
);

1669 
da_ﬁd
 = 
	`°¨tblockvÆ
(
PREV
.
br_°¨tblock
);

1670 
da_√w
 = 0;

1676 i‡(
PREV
.
br_°¨toff
 =
√w
->br_startoff)

1677 
°©e
 |
BMAP_LEFT_FILLING
;

1678 i‡(
PREV
.
br_°¨toff
 + PREV.
br_blockcou¡
 =
√w_ídoff
)

1679 
°©e
 |
BMAP_RIGHT_FILLING
;

1685 i‡(
bma
->
idx
 > 0) {

1686 
°©e
 |
BMAP_LEFT_VALID
;

1687 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
 - 1), &
LEFT
);

1689 i‡(
	`i¢uŒ°¨tblock
(
LEFT
.
br_°¨tblock
))

1690 
°©e
 |
BMAP_LEFT_DELAY
;

1693 i‡((
°©e
 & 
BMAP_LEFT_VALID
Ë&& !(°©ê& 
BMAP_LEFT_DELAY
) &&

1694 
LEFT
.
br_°¨toff
 + LEFT.
br_blockcou¡
 =
√w
->br_startoff &&

1695 
LEFT
.
br_°¨tblock
 + LEFT.
br_blockcou¡
 =
√w
->br_startblock &&

1696 
LEFT
.
br_°©e
 =
√w
->br_state &&

1697 
LEFT
.
br_blockcou¡
 + 
√w
->br_blockcou¡ <
MAXEXTLEN
)

1698 
°©e
 |
BMAP_LEFT_CONTIG
;

1705 i‡(
bma
->
idx
 < 
	`xfs_õxt_cou¡
(
iÂ
) - 1) {

1706 
°©e
 |
BMAP_RIGHT_VALID
;

1707 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
 + 1), &
RIGHT
);

1709 i‡(
	`i¢uŒ°¨tblock
(
RIGHT
.
br_°¨tblock
))

1710 
°©e
 |
BMAP_RIGHT_DELAY
;

1713 i‡((
°©e
 & 
BMAP_RIGHT_VALID
Ë&& !(°©ê& 
BMAP_RIGHT_DELAY
) &&

1714 
√w_ídoff
 =
RIGHT
.
br_°¨toff
 &&

1715 
√w
->
br_°¨tblock
 +Çew->
br_blockcou¡
 =
RIGHT
.br_startblock &&

1716 
√w
->
br_°©e
 =
RIGHT
.br_state &&

1717 
√w
->
br_blockcou¡
 + 
RIGHT
.br_blockcou¡ <
MAXEXTLEN
 &&

1718 ((
°©e
 & (
BMAP_LEFT_CONTIG
 | 
BMAP_LEFT_FILLING
 |

1719 
BMAP_RIGHT_FILLING
)) !=

1720 (
BMAP_LEFT_CONTIG
 | 
BMAP_LEFT_FILLING
 |

1721 
BMAP_RIGHT_FILLING
) ||

1722 
LEFT
.
br_blockcou¡
 + 
√w
->br_blockcou¡ + 
RIGHT
.br_blockcount

1723 <
MAXEXTLEN
))

1724 
°©e
 |
BMAP_RIGHT_CONTIG
;

1726 
îr‹
 = 0;

1730 
°©e
 & (
BMAP_LEFT_FILLING
 | 
BMAP_LEFT_CONTIG
 |

1731 
BMAP_RIGHT_FILLING
 | 
BMAP_RIGHT_CONTIG
)) {

1732 
BMAP_LEFT_FILLING
 | 
BMAP_LEFT_CONTIG
 |

1733 
BMAP_RIGHT_FILLING
 | 
BMAP_RIGHT_CONTIG
:

1738 
bma
->
idx
--;

1739 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1740 
	`xfs_bmbt_£t_blockcou¡
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
),

1741 
LEFT
.
br_blockcou¡
 + 
PREV
.br_blockcount +

1742 
RIGHT
.
br_blockcou¡
);

1743 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1745 
	`xfs_õxt_ªmove
(
bma
->
ù
, bma->
idx
 + 1, 2, 
°©e
);

1746 (*
√xã¡s
)--;

1747 i‡(
bma
->
cur
 =
NULL
)

1748 
rvÆ
 = 
XFS_ILOG_CORE
 | 
XFS_ILOG_DEXT
;

1750 
rvÆ
 = 
XFS_ILOG_CORE
;

1751 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
, 
RIGHT
.
br_°¨toff
,

1752 
RIGHT
.
br_°¨tblock
,

1753 
RIGHT
.
br_blockcou¡
, &
i
);

1754 i‡(
îr‹
)

1755 
d⁄e
;

1756 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1757 
îr‹
 = 
	`xfs_båì_dñëe
(
bma
->
cur
, &
i
);

1758 i‡(
îr‹
)

1759 
d⁄e
;

1760 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1761 
îr‹
 = 
	`xfs_båì_de¸emít
(
bma
->
cur
, 0, &
i
);

1762 i‡(
îr‹
)

1763 
d⁄e
;

1764 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1765 
îr‹
 = 
	`xfs_bmbt_upd©e
(
bma
->
cur
, 
LEFT
.
br_°¨toff
,

1766 
LEFT
.
br_°¨tblock
,

1767 
LEFT
.
br_blockcou¡
 +

1768 
PREV
.
br_blockcou¡
 +

1769 
RIGHT
.
br_blockcou¡
, 
LEFT
.
br_°©e
);

1770 i‡(
îr‹
)

1771 
d⁄e
;

1775 
BMAP_LEFT_FILLING
 | 
BMAP_RIGHT_FILLING
 | 
BMAP_LEFT_CONTIG
:

1780 
bma
->
idx
--;

1782 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1783 
	`xfs_bmbt_£t_blockcou¡
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
),

1784 
LEFT
.
br_blockcou¡
 + 
PREV
.br_blockcount);

1785 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1787 
	`xfs_õxt_ªmove
(
bma
->
ù
, bma->
idx
 + 1, 1, 
°©e
);

1788 i‡(
bma
->
cur
 =
NULL
)

1789 
rvÆ
 = 
XFS_ILOG_DEXT
;

1791 
rvÆ
 = 0;

1792 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
, 
LEFT
.
br_°¨toff
,

1793 
LEFT
.
br_°¨tblock
, LEFT.
br_blockcou¡
,

1794 &
i
);

1795 i‡(
îr‹
)

1796 
d⁄e
;

1797 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1798 
îr‹
 = 
	`xfs_bmbt_upd©e
(
bma
->
cur
, 
LEFT
.
br_°¨toff
,

1799 
LEFT
.
br_°¨tblock
,

1800 
LEFT
.
br_blockcou¡
 +

1801 
PREV
.
br_blockcou¡
, 
LEFT
.
br_°©e
);

1802 i‡(
îr‹
)

1803 
d⁄e
;

1807 
BMAP_LEFT_FILLING
 | 
BMAP_RIGHT_FILLING
 | 
BMAP_RIGHT_CONTIG
:

1812 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1813 
	`xfs_bmbt_£t_°¨tblock
(
ï
, 
√w
->
br_°¨tblock
);

1814 
	`xfs_bmbt_£t_blockcou¡
(
ï
,

1815 
PREV
.
br_blockcou¡
 + 
RIGHT
.br_blockcount);

1816 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1818 
	`xfs_õxt_ªmove
(
bma
->
ù
, bma->
idx
 + 1, 1, 
°©e
);

1819 i‡(
bma
->
cur
 =
NULL
)

1820 
rvÆ
 = 
XFS_ILOG_DEXT
;

1822 
rvÆ
 = 0;

1823 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
, 
RIGHT
.
br_°¨toff
,

1824 
RIGHT
.
br_°¨tblock
,

1825 
RIGHT
.
br_blockcou¡
, &
i
);

1826 i‡(
îr‹
)

1827 
d⁄e
;

1828 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1829 
îr‹
 = 
	`xfs_bmbt_upd©e
(
bma
->
cur
, 
PREV
.
br_°¨toff
,

1830 
√w
->
br_°¨tblock
,

1831 
PREV
.
br_blockcou¡
 +

1832 
RIGHT
.
br_blockcou¡
, 
PREV
.
br_°©e
);

1833 i‡(
îr‹
)

1834 
d⁄e
;

1838 
BMAP_LEFT_FILLING
 | 
BMAP_RIGHT_FILLING
:

1844 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1845 
	`xfs_bmbt_£t_°¨tblock
(
ï
, 
√w
->
br_°¨tblock
);

1846 
	`xfs_bmbt_£t_°©e
(
ï
, 
√w
->
br_°©e
);

1847 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1849 (*
√xã¡s
)++;

1850 i‡(
bma
->
cur
 =
NULL
)

1851 
rvÆ
 = 
XFS_ILOG_CORE
 | 
XFS_ILOG_DEXT
;

1853 
rvÆ
 = 
XFS_ILOG_CORE
;

1854 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
, 
√w
->
br_°¨toff
,

1855 
√w
->
br_°¨tblock
,Çew->
br_blockcou¡
,

1856 &
i
);

1857 i‡(
îr‹
)

1858 
d⁄e
;

1859 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =0, 
d⁄e
);

1860 
bma
->
cur
->
bc_ªc
.
b
.
br_°©e
 = 
XFS_EXT_NORM
;

1861 
îr‹
 = 
	`xfs_båì_ö£π
(
bma
->
cur
, &
i
);

1862 i‡(
îr‹
)

1863 
d⁄e
;

1864 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1868 
BMAP_LEFT_FILLING
 | 
BMAP_LEFT_CONTIG
:

1873 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
 - 1, 
°©e
, 
_THIS_IP_
);

1874 
	`xfs_bmbt_£t_blockcou¡
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
 - 1),

1875 
LEFT
.
br_blockcou¡
 + 
√w
->br_blockcount);

1876 
	`xfs_bmbt_£t_°¨toff
(
ï
,

1877 
PREV
.
br_°¨toff
 + 
√w
->
br_blockcou¡
);

1878 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
 - 1, 
°©e
, 
_THIS_IP_
);

1880 
ãmp
 = 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount;

1881 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1882 
	`xfs_bmbt_£t_blockcou¡
(
ï
, 
ãmp
);

1883 i‡(
bma
->
cur
 =
NULL
)

1884 
rvÆ
 = 
XFS_ILOG_DEXT
;

1886 
rvÆ
 = 0;

1887 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
, 
LEFT
.
br_°¨toff
,

1888 
LEFT
.
br_°¨tblock
, LEFT.
br_blockcou¡
,

1889 &
i
);

1890 i‡(
îr‹
)

1891 
d⁄e
;

1892 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1893 
îr‹
 = 
	`xfs_bmbt_upd©e
(
bma
->
cur
, 
LEFT
.
br_°¨toff
,

1894 
LEFT
.
br_°¨tblock
,

1895 
LEFT
.
br_blockcou¡
 +

1896 
√w
->
br_blockcou¡
,

1897 
LEFT
.
br_°©e
);

1898 i‡(
îr‹
)

1899 
d⁄e
;

1901 
da_√w
 = 
	`XFS_FILBLKS_MIN
(
	`xfs_bm≠_w‹°_ödÀn
(
bma
->
ù
, 
ãmp
),

1902 
	`°¨tblockvÆ
(
PREV
.
br_°¨tblock
));

1903 
	`xfs_bmbt_£t_°¨tblock
(
ï
, 
	`nuŒ°¨tblock
(
da_√w
));

1904 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1906 
bma
->
idx
--;

1909 
BMAP_LEFT_FILLING
:

1914 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1915 
	`xfs_bmbt_£t_°¨toff
(
ï
, 
√w_ídoff
);

1916 
ãmp
 = 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount;

1917 
	`xfs_bmbt_£t_blockcou¡
(
ï
, 
ãmp
);

1918 
	`xfs_õxt_ö£π
(
bma
->
ù
, bma->
idx
, 1, 
√w
, 
°©e
);

1919 (*
√xã¡s
)++;

1920 i‡(
bma
->
cur
 =
NULL
)

1921 
rvÆ
 = 
XFS_ILOG_CORE
 | 
XFS_ILOG_DEXT
;

1923 
rvÆ
 = 
XFS_ILOG_CORE
;

1924 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
, 
√w
->
br_°¨toff
,

1925 
√w
->
br_°¨tblock
,Çew->
br_blockcou¡
,

1926 &
i
);

1927 i‡(
îr‹
)

1928 
d⁄e
;

1929 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =0, 
d⁄e
);

1930 
bma
->
cur
->
bc_ªc
.
b
.
br_°©e
 = 
XFS_EXT_NORM
;

1931 
îr‹
 = 
	`xfs_båì_ö£π
(
bma
->
cur
, &
i
);

1932 i‡(
îr‹
)

1933 
d⁄e
;

1934 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1937 i‡(
	`xfs_bm≠_√eds_båì
(
bma
->
ù
, 
whichf‹k
)) {

1938 
îr‹
 = 
	`xfs_bm≠_exã¡s_to_båì
(
bma
->
ç
, bma->
ù
,

1939 
bma
->
fú°block
, bma->
df›s
,

1940 &
bma
->
cur
, 1, &
tmp_rvÆ
, 
whichf‹k
);

1941 
rvÆ
 |
tmp_rvÆ
;

1942 i‡(
îr‹
)

1943 
d⁄e
;

1945 
da_√w
 = 
	`XFS_FILBLKS_MIN
(
	`xfs_bm≠_w‹°_ödÀn
(
bma
->
ù
, 
ãmp
),

1946 
	`°¨tblockvÆ
(
PREV
.
br_°¨tblock
) -

1947 (
bma
->
cur
 ? bma->cur->
bc_¥iv©e
.
b
.
Æloˇãd
 : 0));

1948 
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
 + 1);

1949 
	`xfs_bmbt_£t_°¨tblock
(
ï
, 
	`nuŒ°¨tblock
(
da_√w
));

1950 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
 + 1, 
°©e
, 
_THIS_IP_
);

1953 
BMAP_RIGHT_FILLING
 | 
BMAP_RIGHT_CONTIG
:

1958 
ãmp
 = 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount;

1959 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
 + 1, 
°©e
, 
_THIS_IP_
);

1960 
	`xfs_bmbt_£t_blockcou¡
(
ï
, 
ãmp
);

1961 
	`xfs_bmbt_£t_Ælf
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
 + 1),

1962 
√w
->
br_°¨toff
,Çew->
br_°¨tblock
,

1963 
√w
->
br_blockcou¡
 + 
RIGHT
.br_blockcount,

1964 
RIGHT
.
br_°©e
);

1965 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
 + 1, 
°©e
, 
_THIS_IP_
);

1966 i‡(
bma
->
cur
 =
NULL
)

1967 
rvÆ
 = 
XFS_ILOG_DEXT
;

1969 
rvÆ
 = 0;

1970 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
, 
RIGHT
.
br_°¨toff
,

1971 
RIGHT
.
br_°¨tblock
,

1972 
RIGHT
.
br_blockcou¡
, &
i
);

1973 i‡(
îr‹
)

1974 
d⁄e
;

1975 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1976 
îr‹
 = 
	`xfs_bmbt_upd©e
(
bma
->
cur
, 
√w
->
br_°¨toff
,

1977 
√w
->
br_°¨tblock
,

1978 
√w
->
br_blockcou¡
 +

1979 
RIGHT
.
br_blockcou¡
,

1980 
RIGHT
.
br_°©e
);

1981 i‡(
îr‹
)

1982 
d⁄e
;

1985 
da_√w
 = 
	`XFS_FILBLKS_MIN
(
	`xfs_bm≠_w‹°_ödÀn
(
bma
->
ù
, 
ãmp
),

1986 
	`°¨tblockvÆ
(
PREV
.
br_°¨tblock
));

1987 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1988 
	`xfs_bmbt_£t_°¨tblock
(
ï
, 
	`nuŒ°¨tblock
(
da_√w
));

1989 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

1991 
bma
->
idx
++;

1994 
BMAP_RIGHT_FILLING
:

1999 
ãmp
 = 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount;

2000 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

2001 
	`xfs_bmbt_£t_blockcou¡
(
ï
, 
ãmp
);

2002 
	`xfs_õxt_ö£π
(
bma
->
ù
, bma->
idx
 + 1, 1, 
√w
, 
°©e
);

2003 (*
√xã¡s
)++;

2004 i‡(
bma
->
cur
 =
NULL
)

2005 
rvÆ
 = 
XFS_ILOG_CORE
 | 
XFS_ILOG_DEXT
;

2007 
rvÆ
 = 
XFS_ILOG_CORE
;

2008 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
, 
√w
->
br_°¨toff
,

2009 
√w
->
br_°¨tblock
,Çew->
br_blockcou¡
,

2010 &
i
);

2011 i‡(
îr‹
)

2012 
d⁄e
;

2013 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =0, 
d⁄e
);

2014 
bma
->
cur
->
bc_ªc
.
b
.
br_°©e
 = 
XFS_EXT_NORM
;

2015 
îr‹
 = 
	`xfs_båì_ö£π
(
bma
->
cur
, &
i
);

2016 i‡(
îr‹
)

2017 
d⁄e
;

2018 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2021 i‡(
	`xfs_bm≠_√eds_båì
(
bma
->
ù
, 
whichf‹k
)) {

2022 
îr‹
 = 
	`xfs_bm≠_exã¡s_to_båì
(
bma
->
ç
, bma->
ù
,

2023 
bma
->
fú°block
, bma->
df›s
, &bma->
cur
, 1,

2024 &
tmp_rvÆ
, 
whichf‹k
);

2025 
rvÆ
 |
tmp_rvÆ
;

2026 i‡(
îr‹
)

2027 
d⁄e
;

2029 
da_√w
 = 
	`XFS_FILBLKS_MIN
(
	`xfs_bm≠_w‹°_ödÀn
(
bma
->
ù
, 
ãmp
),

2030 
	`°¨tblockvÆ
(
PREV
.
br_°¨tblock
) -

2031 (
bma
->
cur
 ? bma->cur->
bc_¥iv©e
.
b
.
Æloˇãd
 : 0));

2032 
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
);

2033 
	`xfs_bmbt_£t_°¨tblock
(
ï
, 
	`nuŒ°¨tblock
(
da_√w
));

2034 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

2036 
bma
->
idx
++;

2060 
ãmp
 = 
√w
->
br_°¨toff
 - 
PREV
.br_startoff;

2061 
ãmp2
 = 
PREV
.
br_°¨toff
 + PREV.
br_blockcou¡
 - 
√w_ídoff
;

2062 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 0, 
_THIS_IP_
);

2063 
	`xfs_bmbt_£t_blockcou¡
(
ï
, 
ãmp
);

2064 
LEFT
 = *
√w
;

2065 
RIGHT
.
br_°©e
 = 
PREV
.br_state;

2066 
RIGHT
.
br_°¨tblock
 = 
	`nuŒ°¨tblock
(

2067 ()
	`xfs_bm≠_w‹°_ödÀn
(
bma
->
ù
, 
ãmp2
));

2068 
RIGHT
.
br_°¨toff
 = 
√w_ídoff
;

2069 
RIGHT
.
br_blockcou¡
 = 
ãmp2
;

2071 
	`xfs_õxt_ö£π
(
bma
->
ù
, bma->
idx
 + 1, 2, &
LEFT
, 
°©e
);

2072 (*
√xã¡s
)++;

2073 i‡(
bma
->
cur
 =
NULL
)

2074 
rvÆ
 = 
XFS_ILOG_CORE
 | 
XFS_ILOG_DEXT
;

2076 
rvÆ
 = 
XFS_ILOG_CORE
;

2077 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
, 
√w
->
br_°¨toff
,

2078 
√w
->
br_°¨tblock
,Çew->
br_blockcou¡
,

2079 &
i
);

2080 i‡(
îr‹
)

2081 
d⁄e
;

2082 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =0, 
d⁄e
);

2083 
bma
->
cur
->
bc_ªc
.
b
.
br_°©e
 = 
XFS_EXT_NORM
;

2084 
îr‹
 = 
	`xfs_båì_ö£π
(
bma
->
cur
, &
i
);

2085 i‡(
îr‹
)

2086 
d⁄e
;

2087 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2090 i‡(
	`xfs_bm≠_√eds_båì
(
bma
->
ù
, 
whichf‹k
)) {

2091 
îr‹
 = 
	`xfs_bm≠_exã¡s_to_båì
(
bma
->
ç
, bma->
ù
,

2092 
bma
->
fú°block
, bma->
df›s
, &bma->
cur
,

2093 1, &
tmp_rvÆ
, 
whichf‹k
);

2094 
rvÆ
 |
tmp_rvÆ
;

2095 i‡(
îr‹
)

2096 
d⁄e
;

2098 
ãmp
 = 
	`xfs_bm≠_w‹°_ödÀn
(
bma
->
ù
,Åemp);

2099 
ãmp2
 = 
	`xfs_bm≠_w‹°_ödÀn
(
bma
->
ù
,Åemp2);

2100 
diff
 = ()(
ãmp
 + 
ãmp2
 - 
	`°¨tblockvÆ
(
PREV
.
br_°¨tblock
) -

2101 (
bma
->
cur
 ? bma->cur->
bc_¥iv©e
.
b
.
Æloˇãd
 : 0));

2102 i‡(
diff
 > 0) {

2103 
îr‹
 = 
	`xfs_mod_fdblocks
(
bma
->
ù
->
i_mou¡
,

2104 -((
öt64_t
)
diff
), 
Ál£
);

2105 
	`ASSERT
(!
îr‹
);

2106 i‡(
îr‹
)

2107 
d⁄e
;

2110 
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
);

2111 
	`xfs_bmbt_£t_°¨tblock
(
ï
, 
	`nuŒ°¨tblock
(()
ãmp
));

2112 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

2113 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
 + 2, 
°©e
, 
_THIS_IP_
);

2114 
	`xfs_bmbt_£t_°¨tblock
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
 + 2),

2115 
	`nuŒ°¨tblock
(()
ãmp2
));

2116 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
 + 2, 
°©e
, 
_THIS_IP_
);

2118 
bma
->
idx
++;

2119 
da_√w
 = 
ãmp
 + 
ãmp2
;

2122 
BMAP_LEFT_FILLING
 | 
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
:

2123 
BMAP_RIGHT_FILLING
 | 
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
:

2124 
BMAP_LEFT_FILLING
 | 
BMAP_RIGHT_CONTIG
:

2125 
BMAP_RIGHT_FILLING
 | 
BMAP_LEFT_CONTIG
:

2126 
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
:

2127 
BMAP_LEFT_CONTIG
:

2128 
BMAP_RIGHT_CONTIG
:

2132 
	`ASSERT
(0);

2136 
îr‹
 = 
	`xfs_rm≠_m≠_exã¡
(
mp
, 
bma
->
df›s
, bma->
ù
, 
whichf‹k
, 
√w
);

2137 i‡(
îr‹
)

2138 
d⁄e
;

2141 i‡(
	`xfs_bm≠_√eds_båì
(
bma
->
ù
, 
whichf‹k
)) {

2142 
tmp_logÊags
;

2144 
	`ASSERT
(
bma
->
cur
 =
NULL
);

2145 
îr‹
 = 
	`xfs_bm≠_exã¡s_to_båì
(
bma
->
ç
, bma->
ù
,

2146 
bma
->
fú°block
, bma->
df›s
, &bma->
cur
,

2147 
da_ﬁd
 > 0, &
tmp_logÊags
, 
whichf‹k
);

2148 
bma
->
logÊags
 |
tmp_logÊags
;

2149 i‡(
îr‹
)

2150 
d⁄e
;

2154 i‡(
da_ﬁd
 || 
da_√w
) {

2155 
ãmp
 = 
da_√w
;

2156 i‡(
bma
->
cur
)

2157 
ãmp
 +
bma
->
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
;

2158 
	`ASSERT
(
ãmp
 <
da_ﬁd
);

2159 i‡(
ãmp
 < 
da_ﬁd
)

2160 
	`xfs_mod_fdblocks
(
bma
->
ù
->
i_mou¡
,

2161 (
öt64_t
)(
da_ﬁd
 - 
ãmp
), 
Ál£
);

2165 i‡(
bma
->
cur
)

2166 
bma
->
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
 = 0;

2168 
	`xfs_bm≠_check_Àaf_exã¡s
(
bma
->
cur
, bma->
ù
, 
whichf‹k
);

2169 
d⁄e
:

2170 i‡(
whichf‹k
 !
XFS_COW_FORK
)

2171 
bma
->
logÊags
 |
rvÆ
;

2172  
îr‹
;

2173 #unde‡
LEFT


2174 #unde‡
RIGHT


2175 #unde‡
PREV


2176 
	}
}

2181 
STATIC
 

2182 
	$xfs_bm≠_add_exã¡_unwrôãn_ªÆ
(

2183 
xfs_å™s
 *
ç
,

2184 
xfs_öode_t
 *
ù
,

2185 
whichf‹k
,

2186 
xfs_exäum_t
 *
idx
,

2187 
xfs_båì_cur_t
 **
cuΩ
,

2188 
xfs_bmbt_úec_t
 *
√w
,

2189 
xfs_fsblock_t
 *
fú°
,

2190 
xfs_de„r_›s
 *
df›s
,

2191 *
logÊag•
)

2193 
xfs_båì_cur_t
 *
cur
;

2194 
xfs_bmbt_ªc_ho°_t
 *
ï
;

2195 
îr‹
;

2196 
i
;

2197 
xfs_if‹k_t
 *
iÂ
;

2198 
xfs_fûeoff_t
 
√w_ídoff
;

2199 
xfs_ex¡°_t
 
√wext
;

2200 
xfs_ex¡°_t
 
ﬁdext
;

2201 
xfs_bmbt_úec_t
 
r
[3];

2203 
rvÆ
=0;

2204 
°©e
 = 0;

2205 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

2207 *
logÊag•
 = 0;

2209 
cur
 = *
cuΩ
;

2210 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

2211 i‡(
whichf‹k
 =
XFS_COW_FORK
)

2212 
°©e
 |
BMAP_COWFORK
;

2214 
	`ASSERT
(*
idx
 >= 0);

2215 
	`ASSERT
(*
idx
 <
	`xfs_õxt_cou¡
(
iÂ
));

2216 
	`ASSERT
(!
	`i¢uŒ°¨tblock
(
√w
->
br_°¨tblock
));

2218 
	`XFS_STATS_INC
(
mp
, 
xs_add_exli°
);

2220 
	#LEFT
 
r
[0]

	)

2221 
	#RIGHT
 
r
[1]

	)

2222 
	#PREV
 
r
[2]

	)

2227 
îr‹
 = 0;

2228 
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
);

2229 
	`xfs_bmbt_gë_Æl
(
ï
, &
PREV
);

2230 
√wext
 = 
√w
->
br_°©e
;

2231 
ﬁdext
 = (
√wext
 =
XFS_EXT_UNWRITTEN
) ?

2232 
XFS_EXT_NORM
 : 
XFS_EXT_UNWRITTEN
;

2233 
	`ASSERT
(
PREV
.
br_°©e
 =
ﬁdext
);

2234 
√w_ídoff
 = 
√w
->
br_°¨toff
 +Çew->
br_blockcou¡
;

2235 
	`ASSERT
(
PREV
.
br_°¨toff
 <
√w
->br_startoff);

2236 
	`ASSERT
(
PREV
.
br_°¨toff
 + PREV.
br_blockcou¡
 >
√w_ídoff
);

2242 i‡(
PREV
.
br_°¨toff
 =
√w
->br_startoff)

2243 
°©e
 |
BMAP_LEFT_FILLING
;

2244 i‡(
PREV
.
br_°¨toff
 + PREV.
br_blockcou¡
 =
√w_ídoff
)

2245 
°©e
 |
BMAP_RIGHT_FILLING
;

2251 i‡(*
idx
 > 0) {

2252 
°©e
 |
BMAP_LEFT_VALID
;

2253 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
 - 1), &
LEFT
);

2255 i‡(
	`i¢uŒ°¨tblock
(
LEFT
.
br_°¨tblock
))

2256 
°©e
 |
BMAP_LEFT_DELAY
;

2259 i‡((
°©e
 & 
BMAP_LEFT_VALID
Ë&& !(°©ê& 
BMAP_LEFT_DELAY
) &&

2260 
LEFT
.
br_°¨toff
 + LEFT.
br_blockcou¡
 =
√w
->br_startoff &&

2261 
LEFT
.
br_°¨tblock
 + LEFT.
br_blockcou¡
 =
√w
->br_startblock &&

2262 
LEFT
.
br_°©e
 =
√wext
 &&

2263 
LEFT
.
br_blockcou¡
 + 
√w
->br_blockcou¡ <
MAXEXTLEN
)

2264 
°©e
 |
BMAP_LEFT_CONTIG
;

2271 i‡(*
idx
 < 
	`xfs_õxt_cou¡
(
iÂ
) - 1) {

2272 
°©e
 |
BMAP_RIGHT_VALID
;

2273 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
 + 1), &
RIGHT
);

2274 i‡(
	`i¢uŒ°¨tblock
(
RIGHT
.
br_°¨tblock
))

2275 
°©e
 |
BMAP_RIGHT_DELAY
;

2278 i‡((
°©e
 & 
BMAP_RIGHT_VALID
Ë&& !(°©ê& 
BMAP_RIGHT_DELAY
) &&

2279 
√w_ídoff
 =
RIGHT
.
br_°¨toff
 &&

2280 
√w
->
br_°¨tblock
 +Çew->
br_blockcou¡
 =
RIGHT
.br_startblock &&

2281 
√wext
 =
RIGHT
.
br_°©e
 &&

2282 
√w
->
br_blockcou¡
 + 
RIGHT
.br_blockcou¡ <
MAXEXTLEN
 &&

2283 ((
°©e
 & (
BMAP_LEFT_CONTIG
 | 
BMAP_LEFT_FILLING
 |

2284 
BMAP_RIGHT_FILLING
)) !=

2285 (
BMAP_LEFT_CONTIG
 | 
BMAP_LEFT_FILLING
 |

2286 
BMAP_RIGHT_FILLING
) ||

2287 
LEFT
.
br_blockcou¡
 + 
√w
->br_blockcou¡ + 
RIGHT
.br_blockcount

2288 <
MAXEXTLEN
))

2289 
°©e
 |
BMAP_RIGHT_CONTIG
;

2294 
°©e
 & (
BMAP_LEFT_FILLING
 | 
BMAP_LEFT_CONTIG
 |

2295 
BMAP_RIGHT_FILLING
 | 
BMAP_RIGHT_CONTIG
)) {

2296 
BMAP_LEFT_FILLING
 | 
BMAP_LEFT_CONTIG
 |

2297 
BMAP_RIGHT_FILLING
 | 
BMAP_RIGHT_CONTIG
:

2302 --*
idx
;

2304 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2305 
	`xfs_bmbt_£t_blockcou¡
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
),

2306 
LEFT
.
br_blockcou¡
 + 
PREV
.br_blockcount +

2307 
RIGHT
.
br_blockcou¡
);

2308 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2310 
	`xfs_õxt_ªmove
(
ù
, *
idx
 + 1, 2, 
°©e
);

2311 
	`XFS_IFORK_NEXT_SET
(
ù
, 
whichf‹k
,

2312 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) - 2);

2313 i‡(
cur
 =
NULL
)

2314 
rvÆ
 = 
XFS_ILOG_CORE
 | 
XFS_ILOG_DEXT
;

2316 
rvÆ
 = 
XFS_ILOG_CORE
;

2317 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
RIGHT
.
br_°¨toff
,

2318 
RIGHT
.
br_°¨tblock
,

2319 
RIGHT
.
br_blockcou¡
, &
i
)))

2320 
d⁄e
;

2321 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2322 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
)))

2323 
d⁄e
;

2324 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2325 i‡((
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
)))

2326 
d⁄e
;

2327 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2328 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
)))

2329 
d⁄e
;

2330 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2331 i‡((
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
)))

2332 
d⁄e
;

2333 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2334 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
LEFT
.
br_°¨toff
,

2335 
LEFT
.
br_°¨tblock
,

2336 
LEFT
.
br_blockcou¡
 + 
PREV
.br_blockcount +

2337 
RIGHT
.
br_blockcou¡
, 
LEFT
.
br_°©e
)))

2338 
d⁄e
;

2342 
BMAP_LEFT_FILLING
 | 
BMAP_RIGHT_FILLING
 | 
BMAP_LEFT_CONTIG
:

2347 --*
idx
;

2349 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2350 
	`xfs_bmbt_£t_blockcou¡
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
),

2351 
LEFT
.
br_blockcou¡
 + 
PREV
.br_blockcount);

2352 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2354 
	`xfs_õxt_ªmove
(
ù
, *
idx
 + 1, 1, 
°©e
);

2355 
	`XFS_IFORK_NEXT_SET
(
ù
, 
whichf‹k
,

2356 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) - 1);

2357 i‡(
cur
 =
NULL
)

2358 
rvÆ
 = 
XFS_ILOG_CORE
 | 
XFS_ILOG_DEXT
;

2360 
rvÆ
 = 
XFS_ILOG_CORE
;

2361 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
PREV
.
br_°¨toff
,

2362 
PREV
.
br_°¨tblock
, PREV.
br_blockcou¡
,

2363 &
i
)))

2364 
d⁄e
;

2365 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2366 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
)))

2367 
d⁄e
;

2368 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2369 i‡((
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
)))

2370 
d⁄e
;

2371 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2372 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
LEFT
.
br_°¨toff
,

2373 
LEFT
.
br_°¨tblock
,

2374 
LEFT
.
br_blockcou¡
 + 
PREV
.br_blockcount,

2375 
LEFT
.
br_°©e
)))

2376 
d⁄e
;

2380 
BMAP_LEFT_FILLING
 | 
BMAP_RIGHT_FILLING
 | 
BMAP_RIGHT_CONTIG
:

2385 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2386 
	`xfs_bmbt_£t_blockcou¡
(
ï
,

2387 
PREV
.
br_blockcou¡
 + 
RIGHT
.br_blockcount);

2388 
	`xfs_bmbt_£t_°©e
(
ï
, 
√wext
);

2389 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2390 
	`xfs_õxt_ªmove
(
ù
, *
idx
 + 1, 1, 
°©e
);

2391 
	`XFS_IFORK_NEXT_SET
(
ù
, 
whichf‹k
,

2392 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) - 1);

2393 i‡(
cur
 =
NULL
)

2394 
rvÆ
 = 
XFS_ILOG_CORE
 | 
XFS_ILOG_DEXT
;

2396 
rvÆ
 = 
XFS_ILOG_CORE
;

2397 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
RIGHT
.
br_°¨toff
,

2398 
RIGHT
.
br_°¨tblock
,

2399 
RIGHT
.
br_blockcou¡
, &
i
)))

2400 
d⁄e
;

2401 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2402 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
)))

2403 
d⁄e
;

2404 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2405 i‡((
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
)))

2406 
d⁄e
;

2407 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2408 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
√w
->
br_°¨toff
,

2409 
√w
->
br_°¨tblock
,

2410 
√w
->
br_blockcou¡
 + 
RIGHT
.br_blockcount,

2411 
√wext
)))

2412 
d⁄e
;

2416 
BMAP_LEFT_FILLING
 | 
BMAP_RIGHT_FILLING
:

2422 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2423 
	`xfs_bmbt_£t_°©e
(
ï
, 
√wext
);

2424 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2426 i‡(
cur
 =
NULL
)

2427 
rvÆ
 = 
XFS_ILOG_DEXT
;

2429 
rvÆ
 = 0;

2430 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
√w
->
br_°¨toff
,

2431 
√w
->
br_°¨tblock
,Çew->
br_blockcou¡
,

2432 &
i
)))

2433 
d⁄e
;

2434 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2435 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
√w
->
br_°¨toff
,

2436 
√w
->
br_°¨tblock
,Çew->
br_blockcou¡
,

2437 
√wext
)))

2438 
d⁄e
;

2442 
BMAP_LEFT_FILLING
 | 
BMAP_LEFT_CONTIG
:

2447 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
 - 1, 
°©e
, 
_THIS_IP_
);

2448 
	`xfs_bmbt_£t_blockcou¡
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
 - 1),

2449 
LEFT
.
br_blockcou¡
 + 
√w
->br_blockcount);

2450 
	`xfs_bmbt_£t_°¨toff
(
ï
,

2451 
PREV
.
br_°¨toff
 + 
√w
->
br_blockcou¡
);

2452 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
 - 1, 
°©e
, 
_THIS_IP_
);

2454 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2455 
	`xfs_bmbt_£t_°¨tblock
(
ï
,

2456 
√w
->
br_°¨tblock
 +Çew->
br_blockcou¡
);

2457 
	`xfs_bmbt_£t_blockcou¡
(
ï
,

2458 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount);

2459 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2461 --*
idx
;

2463 i‡(
cur
 =
NULL
)

2464 
rvÆ
 = 
XFS_ILOG_DEXT
;

2466 
rvÆ
 = 0;

2467 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
PREV
.
br_°¨toff
,

2468 
PREV
.
br_°¨tblock
, PREV.
br_blockcou¡
,

2469 &
i
)))

2470 
d⁄e
;

2471 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2472 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
,

2473 
PREV
.
br_°¨toff
 + 
√w
->
br_blockcou¡
,

2474 
PREV
.
br_°¨tblock
 + 
√w
->
br_blockcou¡
,

2475 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount,

2476 
ﬁdext
)))

2477 
d⁄e
;

2478 i‡((
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
)))

2479 
d⁄e
;

2480 
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
LEFT
.
br_°¨toff
,

2481 
LEFT
.
br_°¨tblock
,

2482 
LEFT
.
br_blockcou¡
 + 
√w
->br_blockcount,

2483 
LEFT
.
br_°©e
);

2484 i‡(
îr‹
)

2485 
d⁄e
;

2489 
BMAP_LEFT_FILLING
:

2494 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2495 
	`ASSERT
(
ï
 && 
	`xfs_bmbt_gë_°©e
”pË=
ﬁdext
);

2496 
	`xfs_bmbt_£t_°¨toff
(
ï
, 
√w_ídoff
);

2497 
	`xfs_bmbt_£t_blockcou¡
(
ï
,

2498 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount);

2499 
	`xfs_bmbt_£t_°¨tblock
(
ï
,

2500 
√w
->
br_°¨tblock
 +Çew->
br_blockcou¡
);

2501 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2503 
	`xfs_õxt_ö£π
(
ù
, *
idx
, 1, 
√w
, 
°©e
);

2504 
	`XFS_IFORK_NEXT_SET
(
ù
, 
whichf‹k
,

2505 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) + 1);

2506 i‡(
cur
 =
NULL
)

2507 
rvÆ
 = 
XFS_ILOG_CORE
 | 
XFS_ILOG_DEXT
;

2509 
rvÆ
 = 
XFS_ILOG_CORE
;

2510 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
PREV
.
br_°¨toff
,

2511 
PREV
.
br_°¨tblock
, PREV.
br_blockcou¡
,

2512 &
i
)))

2513 
d⁄e
;

2514 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2515 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
,

2516 
PREV
.
br_°¨toff
 + 
√w
->
br_blockcou¡
,

2517 
PREV
.
br_°¨tblock
 + 
√w
->
br_blockcou¡
,

2518 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount,

2519 
ﬁdext
)))

2520 
d⁄e
;

2521 
cur
->
bc_ªc
.
b
 = *
√w
;

2522 i‡((
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
)))

2523 
d⁄e
;

2524 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2528 
BMAP_RIGHT_FILLING
 | 
BMAP_RIGHT_CONTIG
:

2533 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2534 
	`xfs_bmbt_£t_blockcou¡
(
ï
,

2535 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount);

2536 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2538 ++*
idx
;

2540 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2541 
	`xfs_bmbt_£t_Ælf
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
),

2542 
√w
->
br_°¨toff
,Çew->
br_°¨tblock
,

2543 
√w
->
br_blockcou¡
 + 
RIGHT
.br_blockcou¡, 
√wext
);

2544 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2546 i‡(
cur
 =
NULL
)

2547 
rvÆ
 = 
XFS_ILOG_DEXT
;

2549 
rvÆ
 = 0;

2550 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
PREV
.
br_°¨toff
,

2551 
PREV
.
br_°¨tblock
,

2552 
PREV
.
br_blockcou¡
, &
i
)))

2553 
d⁄e
;

2554 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2555 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
PREV
.
br_°¨toff
,

2556 
PREV
.
br_°¨tblock
,

2557 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount,

2558 
ﬁdext
)))

2559 
d⁄e
;

2560 i‡((
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
)))

2561 
d⁄e
;

2562 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
√w
->
br_°¨toff
,

2563 
√w
->
br_°¨tblock
,

2564 
√w
->
br_blockcou¡
 + 
RIGHT
.br_blockcount,

2565 
√wext
)))

2566 
d⁄e
;

2570 
BMAP_RIGHT_FILLING
:

2575 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2576 
	`xfs_bmbt_£t_blockcou¡
(
ï
,

2577 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount);

2578 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2580 ++*
idx
;

2581 
	`xfs_õxt_ö£π
(
ù
, *
idx
, 1, 
√w
, 
°©e
);

2583 
	`XFS_IFORK_NEXT_SET
(
ù
, 
whichf‹k
,

2584 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) + 1);

2585 i‡(
cur
 =
NULL
)

2586 
rvÆ
 = 
XFS_ILOG_CORE
 | 
XFS_ILOG_DEXT
;

2588 
rvÆ
 = 
XFS_ILOG_CORE
;

2589 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
PREV
.
br_°¨toff
,

2590 
PREV
.
br_°¨tblock
, PREV.
br_blockcou¡
,

2591 &
i
)))

2592 
d⁄e
;

2593 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2594 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
PREV
.
br_°¨toff
,

2595 
PREV
.
br_°¨tblock
,

2596 
PREV
.
br_blockcou¡
 - 
√w
->br_blockcount,

2597 
ﬁdext
)))

2598 
d⁄e
;

2599 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
√w
->
br_°¨toff
,

2600 
√w
->
br_°¨tblock
,Çew->
br_blockcou¡
,

2601 &
i
)))

2602 
d⁄e
;

2603 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =0, 
d⁄e
);

2604 
cur
->
bc_ªc
.
b
.
br_°©e
 = 
XFS_EXT_NORM
;

2605 i‡((
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
)))

2606 
d⁄e
;

2607 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2617 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2618 
	`xfs_bmbt_£t_blockcou¡
(
ï
,

2619 
√w
->
br_°¨toff
 - 
PREV
.br_startoff);

2620 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2622 
r
[0] = *
√w
;

2623 
r
[1].
br_°¨toff
 = 
√w_ídoff
;

2624 
r
[1].
br_blockcou¡
 =

2625 
PREV
.
br_°¨toff
 + PREV.
br_blockcou¡
 - 
√w_ídoff
;

2626 
r
[1].
br_°¨tblock
 = 
√w
->br_°¨tblock +Çew->
br_blockcou¡
;

2627 
r
[1].
br_°©e
 = 
ﬁdext
;

2629 ++*
idx
;

2630 
	`xfs_õxt_ö£π
(
ù
, *
idx
, 2, &
r
[0], 
°©e
);

2632 
	`XFS_IFORK_NEXT_SET
(
ù
, 
whichf‹k
,

2633 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) + 2);

2634 i‡(
cur
 =
NULL
)

2635 
rvÆ
 = 
XFS_ILOG_CORE
 | 
XFS_ILOG_DEXT
;

2637 
rvÆ
 = 
XFS_ILOG_CORE
;

2638 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
PREV
.
br_°¨toff
,

2639 
PREV
.
br_°¨tblock
, PREV.
br_blockcou¡
,

2640 &
i
)))

2641 
d⁄e
;

2642 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2644 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
r
[1].
br_°¨toff
,

2645 
r
[1].
br_°¨tblock
,Ñ[1].
br_blockcou¡
,

2646 
r
[1].
br_°©e
)))

2647 
d⁄e
;

2649 
cur
->
bc_ªc
.
b
 = 
PREV
;

2650 
cur
->
bc_ªc
.
b
.
br_blockcou¡
 =

2651 
√w
->
br_°¨toff
 - 
PREV
.br_startoff;

2652 i‡((
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
)))

2653 
d⁄e
;

2654 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2660 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
√w
->
br_°¨toff
,

2661 
√w
->
br_°¨tblock
,Çew->
br_blockcou¡
,

2662 &
i
)))

2663 
d⁄e
;

2664 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =0, 
d⁄e
);

2666 
cur
->
bc_ªc
.
b
.
br_°©e
 = 
√w
->br_state;

2667 i‡((
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
)))

2668 
d⁄e
;

2669 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2673 
BMAP_LEFT_FILLING
 | 
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
:

2674 
BMAP_RIGHT_FILLING
 | 
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
:

2675 
BMAP_LEFT_FILLING
 | 
BMAP_RIGHT_CONTIG
:

2676 
BMAP_RIGHT_FILLING
 | 
BMAP_LEFT_CONTIG
:

2677 
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
:

2678 
BMAP_LEFT_CONTIG
:

2679 
BMAP_RIGHT_CONTIG
:

2683 
	`ASSERT
(0);

2687 
îr‹
 = 
	`xfs_rm≠_c⁄vît_exã¡
(
mp
, 
df›s
, 
ù
, 
whichf‹k
, 
√w
);

2688 i‡(
îr‹
)

2689 
d⁄e
;

2692 i‡(
	`xfs_bm≠_√eds_båì
(
ù
, 
whichf‹k
)) {

2693 
tmp_logÊags
;

2695 
	`ASSERT
(
cur
 =
NULL
);

2696 
îr‹
 = 
	`xfs_bm≠_exã¡s_to_båì
(
ç
, 
ù
, 
fú°
, 
df›s
, &
cur
,

2697 0, &
tmp_logÊags
, 
whichf‹k
);

2698 *
logÊag•
 |
tmp_logÊags
;

2699 i‡(
îr‹
)

2700 
d⁄e
;

2704 i‡(
cur
) {

2705 
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
 = 0;

2706 *
cuΩ
 = 
cur
;

2709 
	`xfs_bm≠_check_Àaf_exã¡s
(*
cuΩ
, 
ù
, 
whichf‹k
);

2710 
d⁄e
:

2711 *
logÊag•
 |
rvÆ
;

2712  
îr‹
;

2713 #unde‡
LEFT


2714 #unde‡
RIGHT


2715 #unde‡
PREV


2716 
	}
}

2721 
STATIC
 

2722 
	$xfs_bm≠_add_exã¡_hﬁe_dñay
(

2723 
xfs_öode_t
 *
ù
,

2724 
whichf‹k
,

2725 
xfs_exäum_t
 *
idx
,

2726 
xfs_bmbt_úec_t
 *
√w
)

2728 
xfs_if‹k_t
 *
iÂ
;

2729 
xfs_bmbt_úec_t
 
À·
;

2730 
xfs_fûblks_t
 
√wÀn
=0;

2731 
xfs_fûblks_t
 
ﬁdÀn
=0;

2732 
xfs_bmbt_úec_t
 
right
;

2733 
°©e
;

2734 
xfs_fûblks_t
 
ãmp
=0;

2736 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

2737 
°©e
 = 0;

2738 i‡(
whichf‹k
 =
XFS_COW_FORK
)

2739 
°©e
 |
BMAP_COWFORK
;

2740 
	`ASSERT
(
	`i¢uŒ°¨tblock
(
√w
->
br_°¨tblock
));

2745 i‡(*
idx
 > 0) {

2746 
°©e
 |
BMAP_LEFT_VALID
;

2747 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
 - 1), &
À·
);

2749 i‡(
	`i¢uŒ°¨tblock
(
À·
.
br_°¨tblock
))

2750 
°©e
 |
BMAP_LEFT_DELAY
;

2757 i‡(*
idx
 < 
	`xfs_õxt_cou¡
(
iÂ
)) {

2758 
°©e
 |
BMAP_RIGHT_VALID
;

2759 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
), &
right
);

2761 i‡(
	`i¢uŒ°¨tblock
(
right
.
br_°¨tblock
))

2762 
°©e
 |
BMAP_RIGHT_DELAY
;

2769 i‡((
°©e
 & 
BMAP_LEFT_VALID
Ë&& (°©ê& 
BMAP_LEFT_DELAY
) &&

2770 
À·
.
br_°¨toff
 +Üe·.
br_blockcou¡
 =
√w
->br_startoff &&

2771 
À·
.
br_blockcou¡
 + 
√w
->br_blockcou¡ <
MAXEXTLEN
)

2772 
°©e
 |
BMAP_LEFT_CONTIG
;

2774 i‡((
°©e
 & 
BMAP_RIGHT_VALID
Ë&& (°©ê& 
BMAP_RIGHT_DELAY
) &&

2775 
√w
->
br_°¨toff
 +Çew->
br_blockcou¡
 =
right
.br_startoff &&

2776 
√w
->
br_blockcou¡
 + 
right
.br_blockcou¡ <
MAXEXTLEN
 &&

2777 (!(
°©e
 & 
BMAP_LEFT_CONTIG
) ||

2778 (
À·
.
br_blockcou¡
 + 
√w
->br_blockcount +

2779 
right
.
br_blockcou¡
 <
MAXEXTLEN
)))

2780 
°©e
 |
BMAP_RIGHT_CONTIG
;

2785 
°©e
 & (
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
)) {

2786 
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
:

2792 --*
idx
;

2793 
ãmp
 = 
À·
.
br_blockcou¡
 + 
√w
->br_blockcount +

2794 
right
.
br_blockcou¡
;

2796 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2797 
	`xfs_bmbt_£t_blockcou¡
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
), 
ãmp
);

2798 
ﬁdÀn
 = 
	`°¨tblockvÆ
(
À·
.
br_°¨tblock
) +

2799 
	`°¨tblockvÆ
(
√w
->
br_°¨tblock
) +

2800 
	`°¨tblockvÆ
(
right
.
br_°¨tblock
);

2801 
√wÀn
 = 
	`XFS_FILBLKS_MIN
(
	`xfs_bm≠_w‹°_ödÀn
(
ù
, 
ãmp
),

2802 
ﬁdÀn
);

2803 
	`xfs_bmbt_£t_°¨tblock
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
),

2804 
	`nuŒ°¨tblock
(()
√wÀn
));

2805 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2807 
	`xfs_õxt_ªmove
(
ù
, *
idx
 + 1, 1, 
°©e
);

2810 
BMAP_LEFT_CONTIG
:

2816 --*
idx
;

2817 
ãmp
 = 
À·
.
br_blockcou¡
 + 
√w
->br_blockcount;

2819 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2820 
	`xfs_bmbt_£t_blockcou¡
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
), 
ãmp
);

2821 
ﬁdÀn
 = 
	`°¨tblockvÆ
(
À·
.
br_°¨tblock
) +

2822 
	`°¨tblockvÆ
(
√w
->
br_°¨tblock
);

2823 
√wÀn
 = 
	`XFS_FILBLKS_MIN
(
	`xfs_bm≠_w‹°_ödÀn
(
ù
, 
ãmp
),

2824 
ﬁdÀn
);

2825 
	`xfs_bmbt_£t_°¨tblock
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
),

2826 
	`nuŒ°¨tblock
(()
√wÀn
));

2827 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2830 
BMAP_RIGHT_CONTIG
:

2836 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2837 
ãmp
 = 
√w
->
br_blockcou¡
 + 
right
.br_blockcount;

2838 
ﬁdÀn
 = 
	`°¨tblockvÆ
(
√w
->
br_°¨tblock
) +

2839 
	`°¨tblockvÆ
(
right
.
br_°¨tblock
);

2840 
√wÀn
 = 
	`XFS_FILBLKS_MIN
(
	`xfs_bm≠_w‹°_ödÀn
(
ù
, 
ãmp
),

2841 
ﬁdÀn
);

2842 
	`xfs_bmbt_£t_Ælf
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
),

2843 
√w
->
br_°¨toff
,

2844 
	`nuŒ°¨tblock
(()
√wÀn
), 
ãmp
, 
right
.
br_°©e
);

2845 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

2854 
ﬁdÀn
 = 
√wÀn
 = 0;

2855 
	`xfs_õxt_ö£π
(
ù
, *
idx
, 1, 
√w
, 
°©e
);

2858 i‡(
ﬁdÀn
 !
√wÀn
) {

2859 
	`ASSERT
(
ﬁdÀn
 > 
√wÀn
);

2860 
	`xfs_mod_fdblocks
(
ù
->
i_mou¡
, (
öt64_t
)(
ﬁdÀn
 - 
√wÀn
),

2861 
Ál£
);

2866 
	}
}

2871 
STATIC
 

2872 
	$xfs_bm≠_add_exã¡_hﬁe_ªÆ
(

2873 
xfs_bmÆloˇ
 *
bma
,

2874 
whichf‹k
)

2876 
xfs_bmbt_úec
 *
√w
 = &
bma
->
gŸ
;

2877 
îr‹
;

2878 
i
;

2879 
xfs_if‹k_t
 *
iÂ
;

2880 
xfs_bmbt_úec_t
 
À·
;

2881 
xfs_bmbt_úec_t
 
right
;

2882 
rvÆ
=0;

2883 
°©e
;

2884 
xfs_mou¡
 *
mp
;

2886 
mp
 = 
bma
->
ù
->
i_mou¡
;

2887 
iÂ
 = 
	`XFS_IFORK_PTR
(
bma
->
ù
, 
whichf‹k
);

2889 
	`ASSERT
(
bma
->
idx
 >= 0);

2890 
	`ASSERT
(
bma
->
idx
 <
	`xfs_õxt_cou¡
(
iÂ
));

2891 
	`ASSERT
(!
	`i¢uŒ°¨tblock
(
√w
->
br_°¨tblock
));

2892 
	`ASSERT
(!
bma
->
cur
 ||

2893 !(
bma
->
cur
->
bc_¥iv©e
.
b
.
Êags
 & 
XFS_BTCUR_BPRV_WASDEL
));

2895 
	`XFS_STATS_INC
(
mp
, 
xs_add_exli°
);

2897 
°©e
 = 0;

2898 i‡(
whichf‹k
 =
XFS_ATTR_FORK
)

2899 
°©e
 |
BMAP_ATTRFORK
;

2900 i‡(
whichf‹k
 =
XFS_COW_FORK
)

2901 
°©e
 |
BMAP_COWFORK
;

2906 i‡(
bma
->
idx
 > 0) {

2907 
°©e
 |
BMAP_LEFT_VALID
;

2908 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
 - 1), &
À·
);

2909 i‡(
	`i¢uŒ°¨tblock
(
À·
.
br_°¨tblock
))

2910 
°©e
 |
BMAP_LEFT_DELAY
;

2917 i‡(
bma
->
idx
 < 
	`xfs_õxt_cou¡
(
iÂ
)) {

2918 
°©e
 |
BMAP_RIGHT_VALID
;

2919 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
), &
right
);

2920 i‡(
	`i¢uŒ°¨tblock
(
right
.
br_°¨tblock
))

2921 
°©e
 |
BMAP_RIGHT_DELAY
;

2928 i‡((
°©e
 & 
BMAP_LEFT_VALID
Ë&& !(°©ê& 
BMAP_LEFT_DELAY
) &&

2929 
À·
.
br_°¨toff
 +Üe·.
br_blockcou¡
 =
√w
->br_startoff &&

2930 
À·
.
br_°¨tblock
 +Üe·.
br_blockcou¡
 =
√w
->br_startblock &&

2931 
À·
.
br_°©e
 =
√w
->br_state &&

2932 
À·
.
br_blockcou¡
 + 
√w
->br_blockcou¡ <
MAXEXTLEN
)

2933 
°©e
 |
BMAP_LEFT_CONTIG
;

2935 i‡((
°©e
 & 
BMAP_RIGHT_VALID
Ë&& !(°©ê& 
BMAP_RIGHT_DELAY
) &&

2936 
√w
->
br_°¨toff
 +Çew->
br_blockcou¡
 =
right
.br_startoff &&

2937 
√w
->
br_°¨tblock
 +Çew->
br_blockcou¡
 =
right
.br_startblock &&

2938 
√w
->
br_°©e
 =
right
.br_state &&

2939 
√w
->
br_blockcou¡
 + 
right
.br_blockcou¡ <
MAXEXTLEN
 &&

2940 (!(
°©e
 & 
BMAP_LEFT_CONTIG
) ||

2941 
À·
.
br_blockcou¡
 + 
√w
->br_blockcount +

2942 
right
.
br_blockcou¡
 <
MAXEXTLEN
))

2943 
°©e
 |
BMAP_RIGHT_CONTIG
;

2945 
îr‹
 = 0;

2949 
°©e
 & (
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
)) {

2950 
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
:

2956 --
bma
->
idx
;

2957 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

2958 
	`xfs_bmbt_£t_blockcou¡
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
),

2959 
À·
.
br_blockcou¡
 + 
√w
->br_blockcount +

2960 
right
.
br_blockcou¡
);

2961 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

2963 
	`xfs_õxt_ªmove
(
bma
->
ù
, bma->
idx
 + 1, 1, 
°©e
);

2965 
	`XFS_IFORK_NEXT_SET
(
bma
->
ù
, 
whichf‹k
,

2966 
	`XFS_IFORK_NEXTENTS
(
bma
->
ù
, 
whichf‹k
) - 1);

2967 i‡(
bma
->
cur
 =
NULL
) {

2968 
rvÆ
 = 
XFS_ILOG_CORE
 | 
	`xfs_ûog_„xt
(
whichf‹k
);

2970 
rvÆ
 = 
XFS_ILOG_CORE
;

2971 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
, 
right
.
br_°¨toff
,

2972 
right
.
br_°¨tblock
,Ñight.
br_blockcou¡
,

2973 &
i
);

2974 i‡(
îr‹
)

2975 
d⁄e
;

2976 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2977 
îr‹
 = 
	`xfs_båì_dñëe
(
bma
->
cur
, &
i
);

2978 i‡(
îr‹
)

2979 
d⁄e
;

2980 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2981 
îr‹
 = 
	`xfs_båì_de¸emít
(
bma
->
cur
, 0, &
i
);

2982 i‡(
îr‹
)

2983 
d⁄e
;

2984 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

2985 
îr‹
 = 
	`xfs_bmbt_upd©e
(
bma
->
cur
, 
À·
.
br_°¨toff
,

2986 
À·
.
br_°¨tblock
,

2987 
À·
.
br_blockcou¡
 +

2988 
√w
->
br_blockcou¡
 +

2989 
right
.
br_blockcou¡
,

2990 
À·
.
br_°©e
);

2991 i‡(
îr‹
)

2992 
d⁄e
;

2996 
BMAP_LEFT_CONTIG
:

3002 --
bma
->
idx
;

3003 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

3004 
	`xfs_bmbt_£t_blockcou¡
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
),

3005 
À·
.
br_blockcou¡
 + 
√w
->br_blockcount);

3006 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

3008 i‡(
bma
->
cur
 =
NULL
) {

3009 
rvÆ
 = 
	`xfs_ûog_„xt
(
whichf‹k
);

3011 
rvÆ
 = 0;

3012 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
, 
À·
.
br_°¨toff
,

3013 
À·
.
br_°¨tblock
,Üe·.
br_blockcou¡
,

3014 &
i
);

3015 i‡(
îr‹
)

3016 
d⁄e
;

3017 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

3018 
îr‹
 = 
	`xfs_bmbt_upd©e
(
bma
->
cur
, 
À·
.
br_°¨toff
,

3019 
À·
.
br_°¨tblock
,

3020 
À·
.
br_blockcou¡
 +

3021 
√w
->
br_blockcou¡
,

3022 
À·
.
br_°©e
);

3023 i‡(
îr‹
)

3024 
d⁄e
;

3028 
BMAP_RIGHT_CONTIG
:

3034 
	`åa˚_xfs_bm≠_¥e_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

3035 
	`xfs_bmbt_£t_Ælf
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
),

3036 
√w
->
br_°¨toff
,Çew->
br_°¨tblock
,

3037 
√w
->
br_blockcou¡
 + 
right
.br_blockcount,

3038 
right
.
br_°©e
);

3039 
	`åa˚_xfs_bm≠_po°_upd©e
(
bma
->
ù
, bma->
idx
, 
°©e
, 
_THIS_IP_
);

3041 i‡(
bma
->
cur
 =
NULL
) {

3042 
rvÆ
 = 
	`xfs_ûog_„xt
(
whichf‹k
);

3044 
rvÆ
 = 0;

3045 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
,

3046 
right
.
br_°¨toff
,

3047 
right
.
br_°¨tblock
,

3048 
right
.
br_blockcou¡
, &
i
);

3049 i‡(
îr‹
)

3050 
d⁄e
;

3051 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

3052 
îr‹
 = 
	`xfs_bmbt_upd©e
(
bma
->
cur
, 
√w
->
br_°¨toff
,

3053 
√w
->
br_°¨tblock
,

3054 
√w
->
br_blockcou¡
 +

3055 
right
.
br_blockcou¡
,

3056 
right
.
br_°©e
);

3057 i‡(
îr‹
)

3058 
d⁄e
;

3068 
	`xfs_õxt_ö£π
(
bma
->
ù
, bma->
idx
, 1, 
√w
, 
°©e
);

3069 
	`XFS_IFORK_NEXT_SET
(
bma
->
ù
, 
whichf‹k
,

3070 
	`XFS_IFORK_NEXTENTS
(
bma
->
ù
, 
whichf‹k
) + 1);

3071 i‡(
bma
->
cur
 =
NULL
) {

3072 
rvÆ
 = 
XFS_ILOG_CORE
 | 
	`xfs_ûog_„xt
(
whichf‹k
);

3074 
rvÆ
 = 
XFS_ILOG_CORE
;

3075 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
bma
->
cur
,

3076 
√w
->
br_°¨toff
,

3077 
√w
->
br_°¨tblock
,

3078 
√w
->
br_blockcou¡
, &
i
);

3079 i‡(
îr‹
)

3080 
d⁄e
;

3081 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =0, 
d⁄e
);

3082 
bma
->
cur
->
bc_ªc
.
b
.
br_°©e
 = 
√w
->br_state;

3083 
îr‹
 = 
	`xfs_båì_ö£π
(
bma
->
cur
, &
i
);

3084 i‡(
îr‹
)

3085 
d⁄e
;

3086 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

3092 
îr‹
 = 
	`xfs_rm≠_m≠_exã¡
(
mp
, 
bma
->
df›s
, bma->
ù
, 
whichf‹k
, 
√w
);

3093 i‡(
îr‹
)

3094 
d⁄e
;

3097 i‡(
	`xfs_bm≠_√eds_båì
(
bma
->
ù
, 
whichf‹k
)) {

3098 
tmp_logÊags
;

3100 
	`ASSERT
(
bma
->
cur
 =
NULL
);

3101 
îr‹
 = 
	`xfs_bm≠_exã¡s_to_båì
(
bma
->
ç
, bma->
ù
,

3102 
bma
->
fú°block
, bma->
df›s
, &bma->
cur
,

3103 0, &
tmp_logÊags
, 
whichf‹k
);

3104 
bma
->
logÊags
 |
tmp_logÊags
;

3105 i‡(
îr‹
)

3106 
d⁄e
;

3110 i‡(
bma
->
cur
)

3111 
bma
->
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
 = 0;

3113 
	`xfs_bm≠_check_Àaf_exã¡s
(
bma
->
cur
, bma->
ù
, 
whichf‹k
);

3114 
d⁄e
:

3115 
bma
->
logÊags
 |
rvÆ
;

3116  
îr‹
;

3117 
	}
}

3127 
	$xfs_bm≠_extsize_Æign
(

3128 
xfs_mou¡_t
 *
mp
,

3129 
xfs_bmbt_úec_t
 *
gŸp
,

3130 
xfs_bmbt_úec_t
 *
¥evp
,

3131 
xfs_exéí_t
 
extsz
,

3132 
π
,

3133 
eof
,

3134 
dñay
,

3135 
c⁄vît
,

3136 
xfs_fûeoff_t
 *
ofÂ
,

3137 
xfs_exéí_t
 *
À≈
)

3139 
xfs_fûeoff_t
 
‹ig_off
;

3140 
xfs_exéí_t
 
‹ig_Æí
;

3141 
xfs_fûeoff_t
 
‹ig_íd
;

3142 
xfs_fûeoff_t
 
√xto
;

3143 
xfs_fûeoff_t
 
¥evo
;

3144 
xfs_fûeoff_t
 
Æign_off
;

3145 
xfs_exéí_t
 
Æign_Æí
;

3146 
xfs_exéí_t
 
ãmp
;

3148 i‡(
c⁄vît
)

3151 
‹ig_off
 = 
Æign_off
 = *
ofÂ
;

3152 
‹ig_Æí
 = 
Æign_Æí
 = *
À≈
;

3153 
‹ig_íd
 = 
‹ig_off
 + 
‹ig_Æí
;

3159 i‡(!
dñay
 && !
eof
 &&

3160 (
‹ig_off
 >
gŸp
->
br_°¨toff
) &&

3161 (
‹ig_íd
 <
gŸp
->
br_°¨toff
 + gŸp->
br_blockcou¡
)) {

3172 
ãmp
 = 
	`do_mod
(
‹ig_off
, 
extsz
);

3173 i‡(
ãmp
) {

3174 
Æign_Æí
 +
ãmp
;

3175 
Æign_off
 -
ãmp
;

3179 
ãmp
 = (
Æign_Æí
 % 
extsz
);

3180 i‡(
ãmp
)

3181 
Æign_Æí
 +
extsz
 - 
ãmp
;

3191 
Æign_Æí
 > 
MAXEXTLEN
)

3192 
Æign_Æí
 -
extsz
;

3193 
	`ASSERT
(
Æign_Æí
 <
MAXEXTLEN
);

3199 i‡(
¥evp
->
br_°¨toff
 !
NULLFILEOFF
) {

3200 i‡(
¥evp
->
br_°¨tblock
 =
HOLESTARTBLOCK
)

3201 
¥evo
 = 
¥evp
->
br_°¨toff
;

3203 
¥evo
 = 
¥evp
->
br_°¨toff
 +Öªvp->
br_blockcou¡
;

3205 
¥evo
 = 0;

3206 i‡(
Æign_off
 !
‹ig_off
 &&álign_of‡< 
¥evo
)

3207 
Æign_off
 = 
¥evo
;

3216 i‡(!
eof
 && 
gŸp
->
br_°¨toff
 !
NULLFILEOFF
) {

3217 i‡((
dñay
 && 
gŸp
->
br_°¨tblock
 =
HOLESTARTBLOCK
) ||

3218 (!
dñay
 && 
gŸp
->
br_°¨tblock
 =
DELAYSTARTBLOCK
))

3219 
√xto
 = 
gŸp
->
br_°¨toff
 + gŸp->
br_blockcou¡
;

3221 
√xto
 = 
gŸp
->
br_°¨toff
;

3223 
√xto
 = 
NULLFILEOFF
;

3224 i‡(!
eof
 &&

3225 
Æign_off
 + 
Æign_Æí
 !
‹ig_íd
 &&

3226 
Æign_off
 + 
Æign_Æí
 > 
√xto
)

3227 
Æign_off
 = 
√xto
 > 
Æign_Æí
 ?Çexto -álign_alen : 0;

3234 i‡(
Æign_off
 !
‹ig_off
 &&álign_of‡< 
¥evo
)

3235 
Æign_off
 = 
¥evo
;

3236 i‡(
Æign_off
 + 
Æign_Æí
 !
‹ig_íd
 &&

3237 
Æign_off
 + 
Æign_Æí
 > 
√xto
 &&

3238 
√xto
 !
NULLFILEOFF
) {

3239 
	`ASSERT
(
√xto
 > 
¥evo
);

3240 
Æign_Æí
 = 
√xto
 - 
Æign_off
;

3247 i‡(
π
 && (
ãmp
 = (
Æign_Æí
 % 
mp
->
m_sb
.
sb_ªxtsize
))) {

3252 i‡(
‹ig_off
 < 
Æign_off
 ||

3253 
‹ig_íd
 > 
Æign_off
 + 
Æign_Æí
 ||

3254 
Æign_Æí
 - 
ãmp
 < 
‹ig_Æí
)

3255  -
EINVAL
;

3259 i‡(
Æign_off
 + 
ãmp
 <
‹ig_off
) {

3260 
Æign_Æí
 -
ãmp
;

3261 
Æign_off
 +
ãmp
;

3266 i‡(
Æign_off
 + 
Æign_Æí
 - 
ãmp
 >
‹ig_íd
)

3267 
Æign_Æí
 -
ãmp
;

3272 
Æign_Æí
 -
‹ig_off
 - 
Æign_off
;

3273 
Æign_off
 = 
‹ig_off
;

3274 
Æign_Æí
 -Æign_Æí % 
mp
->
m_sb
.
sb_ªxtsize
;

3279 i‡(
‹ig_off
 < 
Æign_off
 || 
‹ig_íd
 >álign_of‡+ 
Æign_Æí
)

3280  -
EINVAL
;

3282 
	`ASSERT
(
‹ig_off
 >
Æign_off
);

3284 
	`ASSERT
(
‹ig_íd
 <
Æign_off
 + 
Æign_Æí
 ||

3285 
Æign_Æí
 + 
extsz
 > 
MAXEXTLEN
);

3288 #ifde‡
DEBUG


3289 i‡(!
eof
 && 
gŸp
->
br_°¨toff
 !
NULLFILEOFF
)

3290 
	`ASSERT
(
Æign_off
 + 
Æign_Æí
 <
gŸp
->
br_°¨toff
);

3291 i‡(
¥evp
->
br_°¨toff
 !
NULLFILEOFF
)

3292 
	`ASSERT
(
Æign_off
 >
¥evp
->
br_°¨toff
 +Öªvp->
br_blockcou¡
);

3295 *
À≈
 = 
Æign_Æí
;

3296 *
ofÂ
 = 
Æign_off
;

3298 
	}
}

3300 
	#XFS_ALLOC_GAP_UNITS
 4

	)

3303 
	$xfs_bm≠_adja˚¡
(

3304 
xfs_bmÆloˇ
 *
≠
)

3306 
xfs_fsblock_t
 
adju°
;

3307 
xfs_agnumbî_t
 
fb_agno
;

3308 
xfs_mou¡_t
 *
mp
;

3309 
nuŒfb
;

3310 
π
;

3312 
	#ISVALID
(
x
,
y
) \

3313 (
π
 ? \

3314 (
x
Ë< 
mp
->
m_sb
.
sb_rblocks
 : \

3315 
	`XFS_FSB_TO_AGNO
(
mp
, 
x
Ë=XFS_FSB_TO_AGNO(mp, 
y
) && \

3316 
	`XFS_FSB_TO_AGNO
(
mp
, 
x
Ë< mp->
m_sb
.
sb_agcou¡
 && \

3317 
	`XFS_FSB_TO_AGBNO
(
mp
, 
x
Ë< mp->
m_sb
.
sb_agblocks
)

	)

3319 
mp
 = 
≠
->
ù
->
i_mou¡
;

3320 
nuŒfb
 = *
≠
->
fú°block
 =
NULLFSBLOCK
;

3321 
π
 = 
	`XFS_IS_REALTIME_INODE
(
≠
->
ù
) &&

3322 
	`xfs_Æloc_is_u£rd©a
(
≠
->
d©©y≥
);

3323 
fb_agno
 = 
nuŒfb
 ? 
NULLAGNUMBER
 : 
	`XFS_FSB_TO_AGNO
(
mp
, *
≠
->
fú°block
);

3328 i‡(
≠
->
eof
 &&áp->
¥ev
.
br_°¨toff
 !
NULLFILEOFF
 &&

3329 !
	`i¢uŒ°¨tblock
(
≠
->
¥ev
.
br_°¨tblock
) &&

3330 
	`ISVALID
(
≠
->
¥ev
.
br_°¨tblock
 +áp->¥ev.
br_blockcou¡
,

3331 
≠
->
¥ev
.
br_°¨tblock
)) {

3332 
≠
->
blkno
 =áp->
¥ev
.
br_°¨tblock
 +áp->¥ev.
br_blockcou¡
;

3336 
adju°
 = 
≠
->
off£t
 -

3337 (
≠
->
¥ev
.
br_°¨toff
 +áp->¥ev.
br_blockcou¡
);

3338 i‡(
adju°
 &&

3339 
	`ISVALID
(
≠
->
blkno
 + 
adju°
,áp->
¥ev
.
br_°¨tblock
))

3340 
≠
->
blkno
 +
adju°
;

3347 i‡(!
≠
->
eof
) {

3348 
xfs_fsblock_t
 
gŸbno
;

3349 
xfs_fsblock_t
 
gŸdiff
=0;

3350 
xfs_fsblock_t
 
¥evbno
;

3351 
xfs_fsblock_t
 
¥evdiff
=0;

3357 i‡(
≠
->
¥ev
.
br_°¨toff
 !
NULLFILEOFF
 &&

3358 !
	`i¢uŒ°¨tblock
(
≠
->
¥ev
.
br_°¨tblock
) &&

3359 (
¥evbno
 = 
≠
->
¥ev
.
br_°¨tblock
 +

3360 
≠
->
¥ev
.
br_blockcou¡
) &&

3361 
	`ISVALID
(
¥evbno
, 
≠
->
¥ev
.
br_°¨tblock
)) {

3365 
adju°
 = 
¥evdiff
 = 
≠
->
off£t
 -

3366 (
≠
->
¥ev
.
br_°¨toff
 +

3367 
≠
->
¥ev
.
br_blockcou¡
);

3376 i‡(
¥evdiff
 <
XFS_ALLOC_GAP_UNITS
 * 
≠
->
Àngth
 &&

3377 
	`ISVALID
(
¥evbno
 + 
¥evdiff
,

3378 
≠
->
¥ev
.
br_°¨tblock
))

3379 
¥evbno
 +
adju°
;

3381 
¥evdiff
 +
adju°
;

3386 i‡(!
π
 && !
nuŒfb
 &&

3387 
	`XFS_FSB_TO_AGNO
(
mp
, 
¥evbno
Ë!
fb_agno
)

3388 
¥evbno
 = 
NULLFSBLOCK
;

3394 
¥evbno
 = 
NULLFSBLOCK
;

3399 i‡(!
	`i¢uŒ°¨tblock
(
≠
->
gŸ
.
br_°¨tblock
)) {

3403 
adju°
 = 
gŸdiff
 = 
≠
->
gŸ
.
br_°¨toff
 -áp->
off£t
;

3408 
gŸbno
 = 
≠
->
gŸ
.
br_°¨tblock
;

3416 i‡(
gŸdiff
 <
XFS_ALLOC_GAP_UNITS
 * 
≠
->
Àngth
 &&

3417 
	`ISVALID
(
gŸbno
 - 
gŸdiff
, gotbno))

3418 
gŸbno
 -
adju°
;

3419 i‡(
	`ISVALID
(
gŸbno
 - 
≠
->
Àngth
, gotbno)) {

3420 
gŸbno
 -
≠
->
Àngth
;

3421 
gŸdiff
 +
adju°
 - 
≠
->
Àngth
;

3423 
gŸdiff
 +
adju°
;

3428 i‡(!
π
 && !
nuŒfb
 &&

3429 
	`XFS_FSB_TO_AGNO
(
mp
, 
gŸbno
Ë!
fb_agno
)

3430 
gŸbno
 = 
NULLFSBLOCK
;

3436 
gŸbno
 = 
NULLFSBLOCK
;

3441 i‡(
¥evbno
 !
NULLFSBLOCK
 && 
gŸbno
 != NULLFSBLOCK)

3442 
≠
->
blkno
 = 
¥evdiff
 <
gŸdiff
 ? 
¥evbno
 : 
gŸbno
;

3443 i‡(
¥evbno
 !
NULLFSBLOCK
)

3444 
≠
->
blkno
 = 
¥evbno
;

3445 i‡(
gŸbno
 !
NULLFSBLOCK
)

3446 
≠
->
blkno
 = 
gŸbno
;

3448 #unde‡
ISVALID


3449 
	}
}

3452 
	$xfs_bm≠_l⁄ge°_‰ì_exã¡
(

3453 
xfs_å™s
 *
ç
,

3454 
xfs_agnumbî_t
 
ag
,

3455 
xfs_exéí_t
 *
bÀn
,

3456 *
nŸöô
)

3458 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

3459 
xfs_≥øg
 *
∑g
;

3460 
xfs_exéí_t
 
l⁄ge°
;

3461 
îr‹
 = 0;

3463 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
ag
);

3464 i‡(!
∑g
->
∑gf_öô
) {

3465 
îr‹
 = 
	`xfs_Æloc_∑gf_öô
(
mp
, 
ç
, 
ag
, 
XFS_ALLOC_FLAG_TRYLOCK
);

3466 i‡(
îr‹
)

3467 
out
;

3469 i‡(!
∑g
->
∑gf_öô
) {

3470 *
nŸöô
 = 1;

3471 
out
;

3475 
l⁄ge°
 = 
	`xfs_Æloc_l⁄ge°_‰ì_exã¡
(
mp
, 
∑g
,

3476 
	`xfs_Æloc_mö_‰ìli°
(
mp
, 
∑g
),

3477 
	`xfs_ag_ªsv_√eded
(
∑g
, 
XFS_AG_RESV_NONE
));

3478 i‡(*
bÀn
 < 
l⁄ge°
)

3479 *
bÀn
 = 
l⁄ge°
;

3481 
out
:

3482 
	`xfs_≥øg_put
(
∑g
);

3483  
îr‹
;

3484 
	}
}

3487 
	$xfs_bm≠_£À˘_möÀn
(

3488 
xfs_bmÆloˇ
 *
≠
,

3489 
xfs_Æloc_¨g
 *
¨gs
,

3490 
xfs_exéí_t
 *
bÀn
,

3491 
nŸöô
)

3493 i‡(
nŸöô
 || *
bÀn
 < 
≠
->
möÀn
) {

3498 
¨gs
->
möÀn
 = 
≠
->minlen;

3499 } i‡(*
bÀn
 < 
¨gs
->
maxÀn
) {

3504 
¨gs
->
möÀn
 = *
bÀn
;

3510 
¨gs
->
möÀn
 =árgs->
maxÀn
;

3512 
	}
}

3514 
STATIC
 

3515 
	$xfs_bm≠_bèŒoc_nuŒfb
(

3516 
xfs_bmÆloˇ
 *
≠
,

3517 
xfs_Æloc_¨g
 *
¨gs
,

3518 
xfs_exéí_t
 *
bÀn
)

3520 
xfs_mou¡
 *
mp
 = 
≠
->
ù
->
i_mou¡
;

3521 
xfs_agnumbî_t
 
ag
, 
°¨èg
;

3522 
nŸöô
 = 0;

3523 
îr‹
;

3525 
¨gs
->
ty≥
 = 
XFS_ALLOCTYPE_START_BNO
;

3526 
¨gs
->
tŸÆ
 = 
≠
->total;

3528 
°¨èg
 = 
ag
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
¨gs
->
fsbno
);

3529 i‡(
°¨èg
 =
NULLAGNUMBER
)

3530 
°¨èg
 = 
ag
 = 0;

3532 *
bÀn
 < 
¨gs
->
maxÀn
) {

3533 
îr‹
 = 
	`xfs_bm≠_l⁄ge°_‰ì_exã¡
(
¨gs
->
ç
, 
ag
, 
bÀn
,

3534 &
nŸöô
);

3535 i‡(
îr‹
)

3536  
îr‹
;

3538 i‡(++
ag
 =
mp
->
m_sb
.
sb_agcou¡
)

3539 
ag
 = 0;

3540 i‡(
ag
 =
°¨èg
)

3544 
	`xfs_bm≠_£À˘_möÀn
(
≠
, 
¨gs
, 
bÀn
, 
nŸöô
);

3546 
	}
}

3548 
STATIC
 

3549 
	$xfs_bm≠_bèŒoc_fûe°ªams
(

3550 
xfs_bmÆloˇ
 *
≠
,

3551 
xfs_Æloc_¨g
 *
¨gs
,

3552 
xfs_exéí_t
 *
bÀn
)

3554 
xfs_mou¡
 *
mp
 = 
≠
->
ù
->
i_mou¡
;

3555 
xfs_agnumbî_t
 
ag
;

3556 
nŸöô
 = 0;

3557 
îr‹
;

3559 
¨gs
->
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

3560 
¨gs
->
tŸÆ
 = 
≠
->total;

3562 
ag
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
¨gs
->
fsbno
);

3563 i‡(
ag
 =
NULLAGNUMBER
)

3564 
ag
 = 0;

3566 
îr‹
 = 
	`xfs_bm≠_l⁄ge°_‰ì_exã¡
(
¨gs
->
ç
, 
ag
, 
bÀn
, &
nŸöô
);

3567 i‡(
îr‹
)

3568  
îr‹
;

3570 i‡(*
bÀn
 < 
¨gs
->
maxÀn
) {

3571 
îr‹
 = 
	`xfs_fûe°ªam_√w_ag
(
≠
, &
ag
);

3572 i‡(
îr‹
)

3573  
îr‹
;

3575 
îr‹
 = 
	`xfs_bm≠_l⁄ge°_‰ì_exã¡
(
¨gs
->
ç
, 
ag
, 
bÀn
,

3576 &
nŸöô
);

3577 i‡(
îr‹
)

3578  
îr‹
;

3582 
	`xfs_bm≠_£À˘_möÀn
(
≠
, 
¨gs
, 
bÀn
, 
nŸöô
);

3588 
≠
->
blkno
 = 
¨gs
->
fsbno
 = 
	`XFS_AGB_TO_FSB
(
mp
, 
ag
, 0);

3590 
	}
}

3592 
STATIC
 

3593 
	$xfs_bm≠_bèŒoc
(

3594 
xfs_bmÆloˇ
 *
≠
)

3596 
xfs_mou¡_t
 *
mp
;

3597 
xfs_Ælo˘y≥_t
 
©y≥
 = 0;

3598 
xfs_exéí_t
 
Æign
 = 0;

3599 
xfs_agnumbî_t
 
fb_agno
;

3600 
xfs_agnumbî_t
 
ag
;

3601 
xfs_Æloc_¨g_t
 
¨gs
;

3602 
xfs_exéí_t
 
bÀn
;

3603 
xfs_exéí_t
 
√xtmöÀn
 = 0;

3604 
nuŒfb
;

3605 
ißlig√d
;

3606 
åyagaö
;

3607 
îr‹
;

3608 
°rùe_Æign
;

3610 
	`ASSERT
(
≠
->
Àngth
);

3612 
mp
 = 
≠
->
ù
->
i_mou¡
;

3615 
°rùe_Æign
 = 0;

3616 i‡(
mp
->
m_swidth
 && (mp->
m_Êags
 & 
XFS_MOUNT_SWALLOC
))

3617 
°rùe_Æign
 = 
mp
->
m_swidth
;

3618 i‡(
mp
->
m_dÆign
)

3619 
°rùe_Æign
 = 
mp
->
m_dÆign
;

3621 i‡(
≠
->
Êags
 & 
XFS_BMAPI_COWFORK
)

3622 
Æign
 = 
	`xfs_gë_cowextsz_höt
(
≠
->
ù
);

3623 i‡(
	`xfs_Æloc_is_u£rd©a
(
≠
->
d©©y≥
))

3624 
Æign
 = 
	`xfs_gë_extsz_höt
(
≠
->
ù
);

3625 i‡(
Æign
) {

3626 
îr‹
 = 
	`xfs_bm≠_extsize_Æign
(
mp
, &
≠
->
gŸ
, &≠->
¥ev
,

3627 
Æign
, 0, 
≠
->
eof
, 0,áp->
c⁄v
,

3628 &
≠
->
off£t
, &≠->
Àngth
);

3629 
	`ASSERT
(!
îr‹
);

3630 
	`ASSERT
(
≠
->
Àngth
);

3634 
nuŒfb
 = *
≠
->
fú°block
 =
NULLFSBLOCK
;

3635 
fb_agno
 = 
nuŒfb
 ? 
NULLAGNUMBER
 : 
	`XFS_FSB_TO_AGNO
(
mp
, *
≠
->
fú°block
);

3636 i‡(
nuŒfb
) {

3637 i‡(
	`xfs_Æloc_is_u£rd©a
(
≠
->
d©©y≥
) &&

3638 
	`xfs_öode_is_fûe°ªam
(
≠
->
ù
)) {

3639 
ag
 = 
	`xfs_fûe°ªam_lookup_ag
(
≠
->
ù
);

3640 
ag
 = (ag !
NULLAGNUMBER
) ?ág : 0;

3641 
≠
->
blkno
 = 
	`XFS_AGB_TO_FSB
(
mp
, 
ag
, 0);

3643 
≠
->
blkno
 = 
	`XFS_INO_TO_FSB
(
mp
,áp->
ù
->
i_öo
);

3646 
≠
->
blkno
 = *≠->
fú°block
;

3648 
	`xfs_bm≠_adja˚¡
(
≠
);

3654 i‡(
nuŒfb
 || 
	`XFS_FSB_TO_AGNO
(
mp
, 
≠
->
blkno
Ë=
fb_agno
)

3657 
≠
->
blkno
 = *≠->
fú°block
;

3661 
åyagaö
 = 
ißlig√d
 = 0;

3662 
	`mem£t
(&
¨gs
, 0, (args));

3663 
¨gs
.
ç
 = 
≠
->tp;

3664 
¨gs
.
mp
 = mp;

3665 
¨gs
.
fsbno
 = 
≠
->
blkno
;

3666 
	`xfs_rm≠_skù_ow√r_upd©e
(&
¨gs
.
oöfo
);

3669 
¨gs
.
maxÀn
 = 
	`MIN
(
≠
->
Àngth
, 
mp
->
m_ag_max_ußbÀ
);

3670 
¨gs
.
fú°block
 = *
≠
->firstblock;

3671 
bÀn
 = 0;

3672 i‡(
nuŒfb
) {

3678 i‡(
	`xfs_Æloc_is_u£rd©a
(
≠
->
d©©y≥
) &&

3679 
	`xfs_öode_is_fûe°ªam
(
≠
->
ù
))

3680 
îr‹
 = 
	`xfs_bm≠_bèŒoc_fûe°ªams
(
≠
, &
¨gs
, &
bÀn
);

3682 
îr‹
 = 
	`xfs_bm≠_bèŒoc_nuŒfb
(
≠
, &
¨gs
, &
bÀn
);

3683 i‡(
îr‹
)

3684  
îr‹
;

3685 } i‡(
≠
->
df›s
->
d›_low
) {

3686 i‡(
	`xfs_öode_is_fûe°ªam
(
≠
->
ù
))

3687 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_FIRST_AG
;

3689 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_START_BNO
;

3690 
¨gs
.
tŸÆ
 =árgs.
möÀn
 = 
≠
->minlen;

3692 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

3693 
¨gs
.
tŸÆ
 = 
≠
->total;

3694 
¨gs
.
möÀn
 = 
≠
->minlen;

3697 i‡(
Æign
) {

3698 
¨gs
.
¥od
 = 
Æign
;

3699 i‡((
¨gs
.
mod
 = (
xfs_exéí_t
)
	`do_mod
(
≠
->
off£t
,árgs.
¥od
)))

3700 
¨gs
.
mod
 = (
xfs_exéí_t
)◊rgs.
¥od
 -árgs.mod);

3701 } i‡(
mp
->
m_sb
.
sb_blocksize
 >
PAGE_SIZE
) {

3702 
¨gs
.
¥od
 = 1;

3703 
¨gs
.
mod
 = 0;

3705 
¨gs
.
¥od
 = 
PAGE_SIZE
 >> 
mp
->
m_sb
.
sb_blocklog
;

3706 i‡((
¨gs
.
mod
 = (
xfs_exéí_t
)(
	`do_mod
(
≠
->
off£t
,árgs.
¥od
))))

3707 
¨gs
.
mod
 = (
xfs_exéí_t
)◊rgs.
¥od
 -árgs.mod);

3718 i‡(!
≠
->
df›s
->
d›_low
 &&áp->
´of
) {

3719 i‡(!
≠
->
off£t
) {

3720 
¨gs
.
Æignmít
 = 
°rùe_Æign
;

3721 
©y≥
 = 
¨gs
.
ty≥
;

3722 
ißlig√d
 = 1;

3726 i‡(
bÀn
 > 
¨gs
.
Æignmít
 && bÀ¿<¨gs.
maxÀn
)

3727 
¨gs
.
möÀn
 = 
bÀn
 -árgs.
Æignmít
;

3728 
¨gs
.
möÆign¶›
 = 0;

3735 
©y≥
 = 
¨gs
.
ty≥
;

3736 
åyagaö
 = 1;

3737 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_THIS_BNO
;

3738 
¨gs
.
Æignmít
 = 1;

3745 i‡(
bÀn
 > 
°rùe_Æign
 && bÀ¿<
¨gs
.
maxÀn
)

3746 
√xtmöÀn
 = 
bÀn
 - 
°rùe_Æign
;

3748 
√xtmöÀn
 = 
¨gs
.
möÀn
;

3749 i‡(
√xtmöÀn
 + 
°rùe_Æign
 > 
¨gs
.
möÀn
 + 1)

3750 
¨gs
.
möÆign¶›
 =

3751 
√xtmöÀn
 + 
°rùe_Æign
 -

3752 
¨gs
.
möÀn
 - 1;

3754 
¨gs
.
möÆign¶›
 = 0;

3757 
¨gs
.
Æignmít
 = 1;

3758 
¨gs
.
möÆign¶›
 = 0;

3760 
¨gs
.
möÀ·
 = 
≠
->minleft;

3761 
¨gs
.
wasdñ
 = 
≠
->wasdel;

3762 
¨gs
.
ªsv
 = 
XFS_AG_RESV_NONE
;

3763 
¨gs
.
d©©y≥
 = 
≠
->datatype;

3764 i‡(
≠
->
d©©y≥
 & 
XFS_ALLOC_USERDATA_ZERO
)

3765 
¨gs
.
ù
 = 
≠
->ip;

3767 
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
);

3768 i‡(
îr‹
)

3769  
îr‹
;

3771 i‡(
åyagaö
 && 
¨gs
.
fsbno
 =
NULLFSBLOCK
) {

3776 
¨gs
.
ty≥
 = 
©y≥
;

3777 
¨gs
.
fsbno
 = 
≠
->
blkno
;

3778 
¨gs
.
Æignmít
 = 
°rùe_Æign
;

3779 
¨gs
.
möÀn
 = 
√xtmöÀn
;

3780 
¨gs
.
möÆign¶›
 = 0;

3781 
ißlig√d
 = 1;

3782 i‡((
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
)))

3783  
îr‹
;

3785 i‡(
ißlig√d
 && 
¨gs
.
fsbno
 =
NULLFSBLOCK
) {

3790 
¨gs
.
ty≥
 = 
©y≥
;

3791 
¨gs
.
fsbno
 = 
≠
->
blkno
;

3792 
¨gs
.
Æignmít
 = 0;

3793 i‡((
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
)))

3794  
îr‹
;

3796 i‡(
¨gs
.
fsbno
 =
NULLFSBLOCK
 && 
nuŒfb
 &&

3797 
¨gs
.
möÀn
 > 
≠
->minlen) {

3798 
¨gs
.
möÀn
 = 
≠
->minlen;

3799 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_START_BNO
;

3800 
¨gs
.
fsbno
 = 
≠
->
blkno
;

3801 i‡((
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
)))

3802  
îr‹
;

3804 i‡(
¨gs
.
fsbno
 =
NULLFSBLOCK
 && 
nuŒfb
) {

3805 
¨gs
.
fsbno
 = 0;

3806 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_FIRST_AG
;

3807 
¨gs
.
tŸÆ
 = 
≠
->
möÀn
;

3808 i‡((
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
)))

3809  
îr‹
;

3810 
≠
->
df›s
->
d›_low
 = 
åue
;

3812 i‡(
¨gs
.
fsbno
 !
NULLFSBLOCK
) {

3817 
	`ASSERT
(*
≠
->
fú°block
 =
NULLFSBLOCK
 ||

3818 
	`XFS_FSB_TO_AGNO
(
mp
, *
≠
->
fú°block
) <=

3819 
	`XFS_FSB_TO_AGNO
(
mp
, 
¨gs
.
fsbno
));

3821 
≠
->
blkno
 = 
¨gs
.
fsbno
;

3822 i‡(*
≠
->
fú°block
 =
NULLFSBLOCK
)

3823 *
≠
->
fú°block
 = 
¨gs
.
fsbno
;

3824 
	`ASSERT
(
nuŒfb
 || 
fb_agno
 <
¨gs
.
agno
);

3825 
≠
->
Àngth
 = 
¨gs
.
Àn
;

3826 i‡(!(
≠
->
Êags
 & 
XFS_BMAPI_COWFORK
))

3827 
≠
->
ù
->
i_d
.
di_nblocks
 +
¨gs
.
Àn
;

3828 
	`xfs_å™s_log_öode
(
≠
->
ç
,áp->
ù
, 
XFS_ILOG_CORE
);

3829 i‡(
≠
->
wasdñ
)

3830 
≠
->
ù
->
i_dñayed_blks
 -
¨gs
.
Àn
;

3835 
	`xfs_å™s_mod_dquŸ_byöo
(
≠
->
ç
,áp->
ù
,

3836 
≠
->
wasdñ
 ? 
XFS_TRANS_DQ_DELBCOUNT
 :

3837 
XFS_TRANS_DQ_BCOUNT
,

3838 (Ë
¨gs
.
Àn
);

3840 
≠
->
blkno
 = 
NULLFSBLOCK
;

3841 
≠
->
Àngth
 = 0;

3844 
	}
}

3851 
STATIC
 

3852 
	$xfs_bm≠_ªm≠_Æloc
(

3853 
xfs_bmÆloˇ
 *
≠
)

3855 
xfs_å™s
 *
ç
 = 
≠
->tp;

3856 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

3857 
xfs_agblock_t
 
bno
;

3858 
xfs_Æloc_¨g
 
¨gs
;

3859 
îr‹
;

3865 
	`mem£t
(&
¨gs
, 0, (
xfs_Æloc_¨g
));

3866 
¨gs
.
ç
 = 
≠
->tp;

3867 
¨gs
.
mp
 = 
≠
->
ç
->
t_mou¡p
;

3868 
bno
 = *
≠
->
fú°block
;

3869 
¨gs
.
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
bno
);

3870 
¨gs
.
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
bno
);

3871 i‡(
¨gs
.
agno
 >
mp
->
m_sb
.
sb_agcou¡
 ||

3872 
¨gs
.
agbno
 >
mp
->
m_sb
.
sb_agblocks
)

3873  -
EFSCORRUPTED
;

3876 
	`åa˚_xfs_bm≠_ªm≠_Æloc
(
≠
->
ù
, *≠->
fú°block
,áp->
Àngth
);

3877 
≠
->
blkno
 = 
bno
;

3878 
≠
->
ù
->
i_d
.
di_nblocks
 +≠->
Àngth
;

3879 
	`xfs_å™s_log_öode
(
≠
->
ç
,áp->
ù
, 
XFS_ILOG_CORE
);

3882 
¨gs
.
d©©y≥
 = 
≠
->datatype;

3883 
¨gs
.
∑g
 = 
	`xfs_≥øg_gë
◊rgs.
mp
,árgs.
agno
);

3884 
	`ASSERT
(
¨gs
.
∑g
);

3893 
îr‹
 = 
	`xfs_Æloc_fix_‰ìli°
(&
¨gs
, 
XFS_ALLOC_FLAG_FREEING
);

3894 
	`xfs_≥øg_put
(
¨gs
.
∑g
);

3895 i‡(
îr‹
)

3896 
	`åa˚_xfs_bm≠_ªm≠_Æloc_îr‹
(
≠
->
ù
, 
îr‹
, 
_RET_IP_
);

3897  
îr‹
;

3898 
	}
}

3904 
STATIC
 

3905 
	$xfs_bm≠_Æloc
(

3906 
xfs_bmÆloˇ
 *
≠
)

3908 i‡(
≠
->
Êags
 & 
XFS_BMAPI_REMAP
)

3909  
	`xfs_bm≠_ªm≠_Æloc
(
≠
);

3910 i‡(
	`XFS_IS_REALTIME_INODE
(
≠
->
ù
) &&

3911 
	`xfs_Æloc_is_u£rd©a
(
≠
->
d©©y≥
))

3912  
	`xfs_bm≠_πÆloc
(
≠
);

3913  
	`xfs_bm≠_bèŒoc
(
≠
);

3914 
	}
}

3918 
	$xfs_åim_exã¡
(

3919 
xfs_bmbt_úec
 *
úec
,

3920 
xfs_fûeoff_t
 
bno
,

3921 
xfs_fûblks_t
 
Àn
)

3923 
xfs_fûeoff_t
 
di°™˚
;

3924 
xfs_fûeoff_t
 
íd
 = 
bno
 + 
Àn
;

3926 i‡(
úec
->
br_°¨toff
 + iªc->
br_blockcou¡
 <
bno
 ||

3927 
úec
->
br_°¨toff
 >
íd
) {

3928 
úec
->
br_blockcou¡
 = 0;

3932 i‡(
úec
->
br_°¨toff
 < 
bno
) {

3933 
di°™˚
 = 
bno
 - 
úec
->
br_°¨toff
;

3934 i‡(
	`i¢uŒ°¨tblock
(
úec
->
br_°¨tblock
))

3935 
úec
->
br_°¨tblock
 = 
DELAYSTARTBLOCK
;

3936 i‡(
úec
->
br_°¨tblock
 !
DELAYSTARTBLOCK
 &&

3937 
úec
->
br_°¨tblock
 !
HOLESTARTBLOCK
)

3938 
úec
->
br_°¨tblock
 +
di°™˚
;

3939 
úec
->
br_°¨toff
 +
di°™˚
;

3940 
úec
->
br_blockcou¡
 -
di°™˚
;

3943 i‡(
íd
 < 
úec
->
br_°¨toff
 + iªc->
br_blockcou¡
) {

3944 
di°™˚
 = 
úec
->
br_°¨toff
 + iªc->
br_blockcou¡
 - 
íd
;

3945 
úec
->
br_blockcou¡
 -
di°™˚
;

3947 
	}
}

3952 
STATIC
 

3953 
	$xfs_bm≠i_åim_m≠
(

3954 
xfs_bmbt_úec
 *
mvÆ
,

3955 
xfs_bmbt_úec
 *
gŸ
,

3956 
xfs_fûeoff_t
 *
bno
,

3957 
xfs_fûblks_t
 
Àn
,

3958 
xfs_fûeoff_t
 
obno
,

3959 
xfs_fûeoff_t
 
íd
,

3960 
n
,

3961 
Êags
)

3963 i‡((
Êags
 & 
XFS_BMAPI_ENTIRE
) ||

3964 
gŸ
->
br_°¨toff
 + gŸ->
br_blockcou¡
 <
obno
) {

3965 *
mvÆ
 = *
gŸ
;

3966 i‡(
	`i¢uŒ°¨tblock
(
gŸ
->
br_°¨tblock
))

3967 
mvÆ
->
br_°¨tblock
 = 
DELAYSTARTBLOCK
;

3971 i‡(
obno
 > *
bno
)

3972 *
bno
 = 
obno
;

3973 
	`ASSERT
((*
bno
 >
obno
Ë|| (
n
 == 0));

3974 
	`ASSERT
(*
bno
 < 
íd
);

3975 
mvÆ
->
br_°¨toff
 = *
bno
;

3976 i‡(
	`i¢uŒ°¨tblock
(
gŸ
->
br_°¨tblock
))

3977 
mvÆ
->
br_°¨tblock
 = 
DELAYSTARTBLOCK
;

3979 
mvÆ
->
br_°¨tblock
 = 
gŸ
->br_startblock +

3980 (*
bno
 - 
gŸ
->
br_°¨toff
);

3988 
mvÆ
->
br_blockcou¡
 = 
	`XFS_FILBLKS_MIN
(
íd
 - *
bno
,

3989 
gŸ
->
br_blockcou¡
 - (*
bno
 - gŸ->
br_°¨toff
));

3990 
mvÆ
->
br_°©e
 = 
gŸ
->br_state;

3991 
	`ASSERT
(
mvÆ
->
br_blockcou¡
 <
Àn
);

3993 
	}
}

3998 
STATIC
 

3999 
	$xfs_bm≠i_upd©e_m≠
(

4000 
xfs_bmbt_úec
 **
m≠
,

4001 
xfs_fûeoff_t
 *
bno
,

4002 
xfs_fûblks_t
 *
Àn
,

4003 
xfs_fûeoff_t
 
obno
,

4004 
xfs_fûeoff_t
 
íd
,

4005 *
n
,

4006 
Êags
)

4008 
xfs_bmbt_úec_t
 *
mvÆ
 = *
m≠
;

4010 
	`ASSERT
((
Êags
 & 
XFS_BMAPI_ENTIRE
) ||

4011 ((
mvÆ
->
br_°¨toff
 + mvÆ->
br_blockcou¡
Ë<
íd
));

4012 
	`ASSERT
((
Êags
 & 
XFS_BMAPI_ENTIRE
Ë|| (
mvÆ
->
br_blockcou¡
 <*
Àn
) ||

4013 (
mvÆ
->
br_°¨toff
 < 
obno
));

4015 *
bno
 = 
mvÆ
->
br_°¨toff
 + mvÆ->
br_blockcou¡
;

4016 *
Àn
 = 
íd
 - *
bno
;

4017 i‡(*
n
 > 0 && 
mvÆ
->
br_°¨toff
 == mval[-1].br_startoff) {

4019 
	`ASSERT
(
mvÆ
->
br_°¨tblock
 == mval[-1].br_startblock);

4020 
	`ASSERT
(
mvÆ
->
br_blockcou¡
 > mval[-1].br_blockcount);

4021 
	`ASSERT
(
mvÆ
->
br_°©e
 == mval[-1].br_state);

4022 
mvÆ
[-1].
br_blockcou¡
 = mval->br_blockcount;

4023 
mvÆ
[-1].
br_°©e
 = mval->br_state;

4024 } i‡(*
n
 > 0 && 
mvÆ
->
br_°¨tblock
 !
DELAYSTARTBLOCK
 &&

4025 
mvÆ
[-1].
br_°¨tblock
 !
DELAYSTARTBLOCK
 &&

4026 
mvÆ
[-1].
br_°¨tblock
 !
HOLESTARTBLOCK
 &&

4027 
mvÆ
->
br_°¨tblock
 == mval[-1].br_startblock +

4028 
mvÆ
[-1].
br_blockcou¡
 &&

4029 ((
Êags
 & 
XFS_BMAPI_IGSTATE
) ||

4030 
mvÆ
[-1].
br_°©e
 == mval->br_state)) {

4031 
	`ASSERT
(
mvÆ
->
br_°¨toff
 ==

4032 
mvÆ
[-1].
br_°¨toff
 + mvÆ[-1].
br_blockcou¡
);

4033 
mvÆ
[-1].
br_blockcou¡
 += mval->br_blockcount;

4034 } i‡(*
n
 > 0 &&

4035 
mvÆ
->
br_°¨tblock
 =
DELAYSTARTBLOCK
 &&

4036 
mvÆ
[-1].
br_°¨tblock
 =
DELAYSTARTBLOCK
 &&

4037 
mvÆ
->
br_°¨toff
 ==

4038 
mvÆ
[-1].
br_°¨toff
 + mvÆ[-1].
br_blockcou¡
) {

4039 
mvÆ
[-1].
br_blockcou¡
 += mval->br_blockcount;

4040 
mvÆ
[-1].
br_°©e
 = mval->br_state;

4041 } i‡(!((*
n
 == 0) &&

4042 ((
mvÆ
->
br_°¨toff
 + mvÆ->
br_blockcou¡
) <=

4043 
obno
))) {

4044 
mvÆ
++;

4045 (*
n
)++;

4047 *
m≠
 = 
mvÆ
;

4048 
	}
}

4054 
	$xfs_bm≠i_ªad
(

4055 
xfs_öode
 *
ù
,

4056 
xfs_fûeoff_t
 
bno
,

4057 
xfs_fûblks_t
 
Àn
,

4058 
xfs_bmbt_úec
 *
mvÆ
,

4059 *
nm≠
,

4060 
Êags
)

4062 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

4063 
xfs_if‹k
 *
iÂ
;

4064 
xfs_bmbt_úec
 
gŸ
;

4065 
xfs_fûeoff_t
 
obno
;

4066 
xfs_fûeoff_t
 
íd
;

4067 
xfs_exäum_t
 
idx
;

4068 
îr‹
;

4069 
boﬁ
 
eof
 = 
Ál£
;

4070 
n
 = 0;

4071 
whichf‹k
 = 
	`xfs_bm≠i_whichf‹k
(
Êags
);

4073 
	`ASSERT
(*
nm≠
 >= 1);

4074 
	`ASSERT
(!(
Êags
 & ~(
XFS_BMAPI_ATTRFORK
|
XFS_BMAPI_ENTIRE
|

4075 
XFS_BMAPI_IGSTATE
|
XFS_BMAPI_COWFORK
)));

4076 
	`ASSERT
(
	`xfs_isûocked
(
ù
, 
XFS_ILOCK_SHARED
|
XFS_ILOCK_EXCL
));

4078 i‡(
	`u∆ikñy
(
	`XFS_TEST_ERROR
(

4079 (
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_EXTENTS
 &&

4080 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
),

4081 
mp
, 
XFS_ERRTAG_BMAPIFORMAT
, 
XFS_RANDOM_BMAPIFORMAT
))) {

4082 
	`XFS_ERROR_REPORT
("xfs_bm≠i_ªad", 
XFS_ERRLEVEL_LOW
, 
mp
);

4083  -
EFSCORRUPTED
;

4086 i‡(
	`XFS_FORCED_SHUTDOWN
(
mp
))

4087  -
EIO
;

4089 
	`XFS_STATS_INC
(
mp
, 
xs_blk_m≠r
);

4091 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

4094 i‡(
whichf‹k
 =
XFS_COW_FORK
 && !
iÂ
) {

4095 
mvÆ
->
br_°¨toff
 = 
bno
;

4096 
mvÆ
->
br_°¨tblock
 = 
HOLESTARTBLOCK
;

4097 
mvÆ
->
br_blockcou¡
 = 
Àn
;

4098 
mvÆ
->
br_°©e
 = 
XFS_EXT_NORM
;

4099 *
nm≠
 = 1;

4103 i‡(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
)) {

4104 
îr‹
 = 
	`xfs_úód_exã¡s
(
NULL
, 
ù
, 
whichf‹k
);

4105 i‡(
îr‹
)

4106  
îr‹
;

4109 i‡(!
	`xfs_õxt_lookup_exã¡
(
ù
, 
iÂ
, 
bno
, &
idx
, &
gŸ
))

4110 
eof
 = 
åue
;

4111 
íd
 = 
bno
 + 
Àn
;

4112 
obno
 = 
bno
;

4114 
bno
 < 
íd
 && 
n
 < *
nm≠
) {

4116 i‡(
eof
)

4117 
gŸ
.
br_°¨toff
 = 
íd
;

4118 i‡(
gŸ
.
br_°¨toff
 > 
bno
) {

4120 
mvÆ
->
br_°¨toff
 = 
bno
;

4121 
mvÆ
->
br_°¨tblock
 = 
HOLESTARTBLOCK
;

4122 
mvÆ
->
br_blockcou¡
 =

4123 
	`XFS_FILBLKS_MIN
(
Àn
, 
gŸ
.
br_°¨toff
 - 
bno
);

4124 
mvÆ
->
br_°©e
 = 
XFS_EXT_NORM
;

4125 
bno
 +
mvÆ
->
br_blockcou¡
;

4126 
Àn
 -
mvÆ
->
br_blockcou¡
;

4127 
mvÆ
++;

4128 
n
++;

4133 
	`xfs_bm≠i_åim_m≠
(
mvÆ
, &
gŸ
, &
bno
, 
Àn
, 
obno
, 
íd
, 
n
, 
Êags
);

4134 
	`xfs_bm≠i_upd©e_m≠
(&
mvÆ
, &
bno
, &
Àn
, 
obno
, 
íd
, &
n
, 
Êags
);

4137 i‡(
bno
 >
íd
 || 
n
 >*
nm≠
)

4141 i‡(!
	`xfs_õxt_gë_exã¡
(
iÂ
, ++
idx
, &
gŸ
))

4142 
eof
 = 
åue
;

4144 *
nm≠
 = 
n
;

4146 
	}
}

4162 
	$xfs_bm≠i_ª£rve_dñÆloc
(

4163 
xfs_öode
 *
ù
,

4164 
whichf‹k
,

4165 
xfs_fûeoff_t
 
off
,

4166 
xfs_fûblks_t
 
Àn
,

4167 
xfs_fûblks_t
 
¥óŒoc
,

4168 
xfs_bmbt_úec
 *
gŸ
,

4169 
xfs_exäum_t
 *
œ°x
,

4170 
eof
)

4172 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

4173 
xfs_if‹k
 *
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

4174 
xfs_exéí_t
 
Æí
;

4175 
xfs_exéí_t
 
ödÀn
;

4176 
π
 = 
	`XFS_IS_REALTIME_INODE
(
ù
);

4177 
xfs_exéí_t
 
extsz
;

4178 
îr‹
;

4179 
xfs_fûeoff_t
 
aoff
 = 
off
;

4185 
Æí
 = 
	`XFS_FILBLKS_MIN
(
Àn
 + 
¥óŒoc
, 
MAXEXTLEN
);

4186 i‡(!
eof
)

4187 
Æí
 = 
	`XFS_FILBLKS_MIN
◊Àn, 
gŸ
->
br_°¨toff
 - 
aoff
);

4188 i‡(
¥óŒoc
 && 
Æí
 >
Àn
)

4189 
¥óŒoc
 = 
Æí
 - 
Àn
;

4192 i‡(
whichf‹k
 =
XFS_COW_FORK
)

4193 
extsz
 = 
	`xfs_gë_cowextsz_höt
(
ù
);

4195 
extsz
 = 
	`xfs_gë_extsz_höt
(
ù
);

4196 i‡(
extsz
) {

4197 
xfs_bmbt_úec
 
¥ev
;

4199 i‡(!
	`xfs_õxt_gë_exã¡
(
iÂ
, *
œ°x
 - 1, &
¥ev
))

4200 
¥ev
.
br_°¨toff
 = 
NULLFILEOFF
;

4202 
îr‹
 = 
	`xfs_bm≠_extsize_Æign
(
mp
, 
gŸ
, &
¥ev
, 
extsz
, 
π
, 
eof
,

4203 1, 0, &
aoff
, &
Æí
);

4204 
	`ASSERT
(!
îr‹
);

4207 i‡(
π
)

4208 
extsz
 = 
Æí
 / 
mp
->
m_sb
.
sb_ªxtsize
;

4215 
îr‹
 = 
	`xfs_å™s_ª£rve_quŸa_nblks
(
NULL
, 
ù
, ()
Æí
, 0,

4216 
π
 ? 
XFS_QMOPT_RES_RTBLKS
 : 
XFS_QMOPT_RES_REGBLKS
);

4217 i‡(
îr‹
)

4218  
îr‹
;

4224 
ödÀn
 = (
xfs_exéí_t
)
	`xfs_bm≠_w‹°_ödÀn
(
ù
, 
Æí
);

4225 
	`ASSERT
(
ödÀn
 > 0);

4227 i‡(
π
) {

4228 
îr‹
 = 
	`xfs_mod_‰exã¡s
(
mp
, -((
öt64_t
)
extsz
));

4230 
îr‹
 = 
	`xfs_mod_fdblocks
(
mp
, -((
öt64_t
)
Æí
), 
Ál£
);

4233 i‡(
îr‹
)

4234 
out_uƒe£rve_quŸa
;

4236 
îr‹
 = 
	`xfs_mod_fdblocks
(
mp
, -((
öt64_t
)
ödÀn
), 
Ál£
);

4237 i‡(
îr‹
)

4238 
out_uƒe£rve_blocks
;

4241 
ù
->
i_dñayed_blks
 +
Æí
;

4243 
gŸ
->
br_°¨toff
 = 
aoff
;

4244 
gŸ
->
br_°¨tblock
 = 
	`nuŒ°¨tblock
(
ödÀn
);

4245 
gŸ
->
br_blockcou¡
 = 
Æí
;

4246 
gŸ
->
br_°©e
 = 
XFS_EXT_NORM
;

4248 
	`xfs_bm≠_add_exã¡_hﬁe_dñay
(
ù
, 
whichf‹k
, 
œ°x
, 
gŸ
);

4255 i‡(
whichf‹k
 =
XFS_DATA_FORK
 && 
¥óŒoc
)

4256 
	`xfs_öode_£t_eofblocks_èg
(
ù
);

4257 i‡(
whichf‹k
 =
XFS_COW_FORK
 && (
¥óŒoc
 || 
aoff
 < 
off
 || 
Æí
 > 
Àn
))

4258 
	`xfs_öode_£t_cowblocks_èg
(
ù
);

4262 
out_uƒe£rve_blocks
:

4263 i‡(
π
)

4264 
	`xfs_mod_‰exã¡s
(
mp
, 
extsz
);

4266 
	`xfs_mod_fdblocks
(
mp
, 
Æí
, 
Ál£
);

4267 
out_uƒe£rve_quŸa
:

4268 i‡(
	`XFS_IS_QUOTA_ON
(
mp
))

4269 
	`xfs_å™s_uƒe£rve_quŸa_nblks
(
NULL
, 
ù
, ()
Æí
, 0, 
π
 ?

4270 
XFS_QMOPT_RES_RTBLKS
 : 
XFS_QMOPT_RES_REGBLKS
);

4271  
îr‹
;

4272 
	}
}

4275 
	$xfs_bm≠i_Æloˇã
(

4276 
xfs_bmÆloˇ
 *
bma
)

4278 
xfs_mou¡
 *
mp
 = 
bma
->
ù
->
i_mou¡
;

4279 
whichf‹k
 = 
	`xfs_bm≠i_whichf‹k
(
bma
->
Êags
);

4280 
xfs_if‹k
 *
iÂ
 = 
	`XFS_IFORK_PTR
(
bma
->
ù
, 
whichf‹k
);

4281 
tmp_logÊags
 = 0;

4282 
îr‹
;

4284 
	`ASSERT
(
bma
->
Àngth
 > 0);

4290 i‡(
bma
->
wasdñ
) {

4291 
bma
->
Àngth
 = (
xfs_exéí_t
)bma->
gŸ
.
br_blockcou¡
;

4292 
bma
->
off£t
 = bma->
gŸ
.
br_°¨toff
;

4293 i‡(
bma
->
idx
) {

4294 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
 - 1),

4295 &
bma
->
¥ev
);

4298 
bma
->
Àngth
 = 
	`XFS_FILBLKS_MIN
(bma->Àngth, 
MAXEXTLEN
);

4299 i‡(!
bma
->
eof
)

4300 
bma
->
Àngth
 = 
	`XFS_FILBLKS_MIN
(bma->length,

4301 
bma
->
gŸ
.
br_°¨toff
 - bma->
off£t
);

4310 i‡(!(
bma
->
Êags
 & 
XFS_BMAPI_METADATA
)) {

4311 
bma
->
d©©y≥
 = 
XFS_ALLOC_NOBUSY
;

4312 i‡(
whichf‹k
 =
XFS_DATA_FORK
) {

4313 i‡(
bma
->
off£t
 == 0)

4314 
bma
->
d©©y≥
 |
XFS_ALLOC_INITIAL_USER_DATA
;

4316 
bma
->
d©©y≥
 |
XFS_ALLOC_USERDATA
;

4318 i‡(
bma
->
Êags
 & 
XFS_BMAPI_ZERO
)

4319 
bma
->
d©©y≥
 |
XFS_ALLOC_USERDATA_ZERO
;

4322 
bma
->
möÀn
 = (bma->
Êags
 & 
XFS_BMAPI_CONTIG
Ë? bma->
Àngth
 : 1;

4328 i‡(
mp
->
m_dÆign
 && 
bma
->
Àngth
 >= mp->m_dalign &&

4329 !(
bma
->
Êags
 & 
XFS_BMAPI_METADATA
Ë&& 
whichf‹k
 =
XFS_DATA_FORK
) {

4330 
îr‹
 = 
	`xfs_bm≠_ißeof
(
bma
, 
whichf‹k
);

4331 i‡(
îr‹
)

4332  
îr‹
;

4335 
îr‹
 = 
	`xfs_bm≠_Æloc
(
bma
);

4336 i‡(
îr‹
)

4337  
îr‹
;

4339 i‡(
bma
->
cur
)

4340 
bma
->
cur
->
bc_¥iv©e
.
b
.
fú°block
 = *bma->firstblock;

4341 i‡(
bma
->
blkno
 =
NULLFSBLOCK
)

4343 i‡((
iÂ
->
if_Êags
 & 
XFS_IFBROOT
Ë&& !
bma
->
cur
) {

4344 
bma
->
cur
 = 
	`xfs_bmbt_öô_curs‹
(
mp
, bma->
ç
, bma->
ù
, 
whichf‹k
);

4345 
bma
->
cur
->
bc_¥iv©e
.
b
.
fú°block
 = *bma->firstblock;

4346 
bma
->
cur
->
bc_¥iv©e
.
b
.
df›s
 = bma->dfops;

4352 
bma
->
«Œocs
++;

4354 i‡(
bma
->
cur
)

4355 
bma
->
cur
->
bc_¥iv©e
.
b
.
Êags
 =

4356 
bma
->
wasdñ
 ? 
XFS_BTCUR_BPRV_WASDEL
 : 0;

4358 
bma
->
gŸ
.
br_°¨toff
 = bma->
off£t
;

4359 
bma
->
gŸ
.
br_°¨tblock
 = bma->
blkno
;

4360 
bma
->
gŸ
.
br_blockcou¡
 = bma->
Àngth
;

4361 
bma
->
gŸ
.
br_°©e
 = 
XFS_EXT_NORM
;

4372 i‡((!
bma
->
wasdñ
 || (bma->
Êags
 & 
XFS_BMAPI_COWFORK
)) &&

4373 (
bma
->
Êags
 & 
XFS_BMAPI_PREALLOC
) &&

4374 
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(&
mp
->
m_sb
))

4375 
bma
->
gŸ
.
br_°©e
 = 
XFS_EXT_UNWRITTEN
;

4377 i‡(
bma
->
wasdñ
)

4378 
îr‹
 = 
	`xfs_bm≠_add_exã¡_dñay_ªÆ
(
bma
, 
whichf‹k
);

4380 
îr‹
 = 
	`xfs_bm≠_add_exã¡_hﬁe_ªÆ
(
bma
, 
whichf‹k
);

4382 
bma
->
logÊags
 |
tmp_logÊags
;

4383 i‡(
îr‹
)

4384  
îr‹
;

4391 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
), &bma->
gŸ
);

4393 
	`ASSERT
(
bma
->
gŸ
.
br_°¨toff
 <bma->
off£t
);

4394 
	`ASSERT
(
bma
->
gŸ
.
br_°¨toff
 + bma->gŸ.
br_blockcou¡
 >=

4395 
bma
->
off£t
 + bma->
Àngth
);

4396 
	`ASSERT
(
bma
->
gŸ
.
br_°©e
 =
XFS_EXT_NORM
 ||

4397 
bma
->
gŸ
.
br_°©e
 =
XFS_EXT_UNWRITTEN
);

4399 
	}
}

4401 
STATIC
 

4402 
	$xfs_bm≠i_c⁄vît_unwrôãn
(

4403 
xfs_bmÆloˇ
 *
bma
,

4404 
xfs_bmbt_úec
 *
mvÆ
,

4405 
xfs_fûblks_t
 
Àn
,

4406 
Êags
)

4408 
whichf‹k
 = 
	`xfs_bm≠i_whichf‹k
(
Êags
);

4409 
xfs_if‹k
 *
iÂ
 = 
	`XFS_IFORK_PTR
(
bma
->
ù
, 
whichf‹k
);

4410 
tmp_logÊags
 = 0;

4411 
îr‹
;

4414 i‡(
mvÆ
->
br_°©e
 =
XFS_EXT_UNWRITTEN
 &&

4415 (
Êags
 & 
XFS_BMAPI_PREALLOC
))

4419 i‡(
mvÆ
->
br_°©e
 =
XFS_EXT_NORM
 &&

4420 (
Êags
 & (
XFS_BMAPI_PREALLOC
 | 
XFS_BMAPI_CONVERT
)) !=

4421 (
XFS_BMAPI_PREALLOC
 | 
XFS_BMAPI_CONVERT
))

4427 
	`ASSERT
(
mvÆ
->
br_blockcou¡
 <
Àn
);

4428 i‡((
iÂ
->
if_Êags
 & 
XFS_IFBROOT
Ë&& !
bma
->
cur
) {

4429 
bma
->
cur
 = 
	`xfs_bmbt_öô_curs‹
(bma->
ù
->
i_mou¡
, bma->
ç
,

4430 
bma
->
ù
, 
whichf‹k
);

4431 
bma
->
cur
->
bc_¥iv©e
.
b
.
fú°block
 = *bma->firstblock;

4432 
bma
->
cur
->
bc_¥iv©e
.
b
.
df›s
 = bma->dfops;

4434 
mvÆ
->
br_°©e
 = (mvÆ->br_°©ê=
XFS_EXT_UNWRITTEN
)

4435 ? 
XFS_EXT_NORM
 : 
XFS_EXT_UNWRITTEN
;

4441 i‡(
Êags
 & 
XFS_BMAPI_ZERO
) {

4442 
îr‹
 = 
	`xfs_zîo_exã¡
(
bma
->
ù
, 
mvÆ
->
br_°¨tblock
,

4443 
mvÆ
->
br_blockcou¡
);

4444 i‡(
îr‹
)

4445  
îr‹
;

4448 
îr‹
 = 
	`xfs_bm≠_add_exã¡_unwrôãn_ªÆ
(
bma
->
ç
, bma->
ù
, 
whichf‹k
,

4449 &
bma
->
idx
, &bma->
cur
, 
mvÆ
, bma->
fú°block
, bma->
df›s
,

4450 &
tmp_logÊags
);

4462 i‡(
whichf‹k
 !
XFS_COW_FORK
)

4463 
bma
->
logÊags
 |
tmp_logÊags
 | 
XFS_ILOG_CORE
;

4464 i‡(
îr‹
)

4465  
îr‹
;

4472 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, 
bma
->
idx
), &bma->
gŸ
);

4478 i‡(
mvÆ
->
br_blockcou¡
 < 
Àn
)

4479  -
EAGAIN
;

4481 
	}
}

4496 
	$xfs_bm≠i_wrôe
(

4497 
xfs_å™s
 *
ç
,

4498 
xfs_öode
 *
ù
,

4499 
xfs_fûeoff_t
 
bno
,

4500 
xfs_fûblks_t
 
Àn
,

4501 
Êags
,

4502 
xfs_fsblock_t
 *
fú°block
,

4504 
xfs_exéí_t
 
tŸÆ
,

4505 
xfs_bmbt_úec
 *
mvÆ
,

4506 *
nm≠
,

4507 
xfs_de„r_›s
 *
df›s
)

4509 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

4510 
xfs_if‹k
 *
iÂ
;

4511 
xfs_bmÆloˇ
 
bma
 = { 
NULL
 };

4512 
xfs_fûeoff_t
 
íd
;

4513 
boﬁ
 
eof
 = 
Ál£
;

4514 
îr‹
;

4515 
n
;

4516 
xfs_fûeoff_t
 
obno
;

4517 
whichf‹k
;

4519 #ifde‡
DEBUG


4520 
xfs_fûeoff_t
 
‹ig_bno
;

4521 
‹ig_Êags
;

4522 
xfs_fûblks_t
 
‹ig_Àn
;

4523 
xfs_bmbt_úec
 *
‹ig_mvÆ
;

4524 
‹ig_nm≠
;

4526 
‹ig_bno
 = 
bno
;

4527 
‹ig_Àn
 = 
Àn
;

4528 
‹ig_Êags
 = 
Êags
;

4529 
‹ig_mvÆ
 = 
mvÆ
;

4530 
‹ig_nm≠
 = *
nm≠
;

4532 
whichf‹k
 = 
	`xfs_bm≠i_whichf‹k
(
Êags
);

4534 
	`ASSERT
(*
nm≠
 >= 1);

4535 
	`ASSERT
(*
nm≠
 <
XFS_BMAP_MAX_NMAP
);

4536 
	`ASSERT
(!(
Êags
 & 
XFS_BMAPI_IGSTATE
));

4537 
	`ASSERT
(
ç
 !
NULL
 ||

4538 (
Êags
 & (
XFS_BMAPI_CONVERT
 | 
XFS_BMAPI_COWFORK
)) ==

4539 (
XFS_BMAPI_CONVERT
 | 
XFS_BMAPI_COWFORK
));

4540 
	`ASSERT
(
Àn
 > 0);

4541 
	`ASSERT
(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_LOCAL
);

4542 
	`ASSERT
(
	`xfs_isûocked
(
ù
, 
XFS_ILOCK_EXCL
));

4543 
	`ASSERT
(!(
Êags
 & 
XFS_BMAPI_REMAP
Ë|| 
whichf‹k
 =
XFS_DATA_FORK
);

4544 
	`ASSERT
(!(
Êags
 & 
XFS_BMAPI_PREALLOC
Ë|| !(Êag†& 
XFS_BMAPI_REMAP
));

4545 
	`ASSERT
(!(
Êags
 & 
XFS_BMAPI_CONVERT
Ë|| !(Êag†& 
XFS_BMAPI_REMAP
));

4548 
	`ASSERT
((
Êags
 & (
XFS_BMAPI_METADATA
 | 
XFS_BMAPI_ZERO
)) !=

4549 (
XFS_BMAPI_METADATA
 | 
XFS_BMAPI_ZERO
));

4556 
	`ASSERT
((
Êags
 & (
XFS_BMAPI_PREALLOC
 | 
XFS_BMAPI_ZERO
)) !=

4557 (
XFS_BMAPI_PREALLOC
 | 
XFS_BMAPI_ZERO
));

4559 i‡(
	`u∆ikñy
(
	`XFS_TEST_ERROR
(

4560 (
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_EXTENTS
 &&

4561 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
),

4562 
mp
, 
XFS_ERRTAG_BMAPIFORMAT
, 
XFS_RANDOM_BMAPIFORMAT
))) {

4563 
	`XFS_ERROR_REPORT
("xfs_bm≠i_wrôe", 
XFS_ERRLEVEL_LOW
, 
mp
);

4564  -
EFSCORRUPTED
;

4567 i‡(
	`XFS_FORCED_SHUTDOWN
(
mp
))

4568  -
EIO
;

4570 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

4572 
	`XFS_STATS_INC
(
mp
, 
xs_blk_m≠w
);

4574 i‡(*
fú°block
 =
NULLFSBLOCK
) {

4575 i‡(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_BTREE
)

4576 
bma
.
möÀ·
 = 
	`be16_to_˝u
(
iÂ
->
if_broŸ
->
bb_Àvñ
) + 1;

4578 
bma
.
möÀ·
 = 1;

4580 
bma
.
möÀ·
 = 0;

4583 i‡(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
)) {

4584 
îr‹
 = 
	`xfs_úód_exã¡s
(
ç
, 
ù
, 
whichf‹k
);

4585 i‡(
îr‹
)

4586 
îr‹0
;

4589 
n
 = 0;

4590 
íd
 = 
bno
 + 
Àn
;

4591 
obno
 = 
bno
;

4593 i‡(!
	`xfs_õxt_lookup_exã¡
(
ù
, 
iÂ
, 
bno
, &
bma
.
idx
, &bma.
gŸ
))

4594 
eof
 = 
åue
;

4595 i‡(!
	`xfs_õxt_gë_exã¡
(
iÂ
, 
bma
.
idx
 - 1, &bma.
¥ev
))

4596 
bma
.
¥ev
.
br_°¨toff
 = 
NULLFILEOFF
;

4597 
bma
.
ç
 =Åp;

4598 
bma
.
ù
 = ip;

4599 
bma
.
tŸÆ
 =Åotal;

4600 
bma
.
d©©y≥
 = 0;

4601 
bma
.
df›s
 = dfops;

4602 
bma
.
fú°block
 = firstblock;

4604 
bno
 < 
íd
 && 
n
 < *
nm≠
) {

4605 
boﬁ
 
√ed_Æloc
 = 
Ál£
, 
wasdñay
 = false;

4608 i‡(
eof
 || 
bma
.
gŸ
.
br_°¨toff
 > 
bno
) {

4609 i‡(
Êags
 & 
XFS_BMAPI_DELALLOC
) {

4618 
	`ASSERT
(
Êags
 & 
XFS_BMAPI_COWFORK
);

4619 i‡(!(
Êags
 & 
XFS_BMAPI_COWFORK
)) {

4620 
îr‹
 = -
EIO
;

4621 
îr‹0
;

4624 i‡(
eof
 || 
bno
 >
íd
)

4627 
√ed_Æloc
 = 
åue
;

4633 
	`ASSERT
(!(
Êags
 & 
XFS_BMAPI_REMAP
));

4634 i‡(
	`i¢uŒ°¨tblock
(
bma
.
gŸ
.
br_°¨tblock
))

4635 
wasdñay
 = 
åue
;

4642 i‡(
√ed_Æloc
 || 
wasdñay
) {

4643 
bma
.
eof
 =Éof;

4644 
bma
.
c⁄v
 = !!(
Êags
 & 
XFS_BMAPI_CONVERT
);

4645 
bma
.
wasdñ
 = 
wasdñay
;

4646 
bma
.
off£t
 = 
bno
;

4647 
bma
.
Êags
 = flags;

4656 i‡(
Àn
 > (
xfs_fûblks_t
)
MAXEXTLEN
)

4657 
bma
.
Àngth
 = 
MAXEXTLEN
;

4659 
bma
.
Àngth
 = 
Àn
;

4661 
	`ASSERT
(
Àn
 > 0);

4662 
	`ASSERT
(
bma
.
Àngth
 > 0);

4663 
îr‹
 = 
	`xfs_bm≠i_Æloˇã
(&
bma
);

4664 i‡(
îr‹
)

4665 
îr‹0
;

4666 i‡(
bma
.
blkno
 =
NULLFSBLOCK
)

4673 i‡(
whichf‹k
 =
XFS_COW_FORK
) {

4674 
îr‹
 = 
	`xfs_ªfcou¡_Æloc_cow_exã¡
(
mp
, 
df›s
,

4675 
bma
.
blkno
, bma.
Àngth
);

4676 i‡(
îr‹
)

4677 
îr‹0
;

4682 
	`xfs_bm≠i_åim_m≠
(
mvÆ
, &
bma
.
gŸ
, &
bno
, 
Àn
, 
obno
,

4683 
íd
, 
n
, 
Êags
);

4686 
îr‹
 = 
	`xfs_bm≠i_c⁄vît_unwrôãn
(&
bma
, 
mvÆ
, 
Àn
, 
Êags
);

4687 i‡(
îr‹
 =-
EAGAIN
)

4689 i‡(
îr‹
)

4690 
îr‹0
;

4693 
	`xfs_bm≠i_upd©e_m≠
(&
mvÆ
, &
bno
, &
Àn
, 
obno
, 
íd
, &
n
, 
Êags
);

4700 i‡(
bno
 >
íd
 || 
n
 >*
nm≠
 || 
bma
.
«Œocs
 >= *nmap)

4704 
bma
.
¥ev
 = bma.
gŸ
;

4705 i‡(!
	`xfs_õxt_gë_exã¡
(
iÂ
, ++
bma
.
idx
, &bma.
gŸ
))

4706 
eof
 = 
åue
;

4708 *
nm≠
 = 
n
;

4713 i‡(
	`xfs_bm≠_w™ts_exã¡s
(
ù
, 
whichf‹k
)) {

4714 
tmp_logÊags
 = 0;

4716 
	`ASSERT
(
bma
.
cur
);

4717 
îr‹
 = 
	`xfs_bm≠_båì_to_exã¡s
(
ç
, 
ù
, 
bma
.
cur
,

4718 &
tmp_logÊags
, 
whichf‹k
);

4719 
bma
.
logÊags
 |
tmp_logÊags
;

4720 i‡(
îr‹
)

4721 
îr‹0
;

4724 
	`ASSERT
(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
 ||

4725 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) >

4726 
	`XFS_IFORK_MAXEXT
(
ù
, 
whichf‹k
));

4727 
îr‹
 = 0;

4728 
îr‹0
:

4733 i‡((
bma
.
logÊags
 & 
	`xfs_ûog_„xt
(
whichf‹k
)) &&

4734 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_EXTENTS
)

4735 
bma
.
logÊags
 &~
	`xfs_ûog_„xt
(
whichf‹k
);

4736 i‡((
bma
.
logÊags
 & 
	`xfs_ûog_fbroŸ
(
whichf‹k
)) &&

4737 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
)

4738 
bma
.
logÊags
 &~
	`xfs_ûog_fbroŸ
(
whichf‹k
);

4744 i‡(
bma
.
logÊags
)

4745 
	`xfs_å™s_log_öode
(
ç
, 
ù
, 
bma
.
logÊags
);

4747 i‡(
bma
.
cur
) {

4748 i‡(!
îr‹
) {

4749 
	`ASSERT
(*
fú°block
 =
NULLFSBLOCK
 ||

4750 
	`XFS_FSB_TO_AGNO
(
mp
, *
fú°block
) <=

4751 
	`XFS_FSB_TO_AGNO
(
mp
,

4752 
bma
.
cur
->
bc_¥iv©e
.
b
.
fú°block
));

4753 *
fú°block
 = 
bma
.
cur
->
bc_¥iv©e
.
b
.firstblock;

4755 
	`xfs_båì_dñ_curs‹
(
bma
.
cur
,

4756 
îr‹
 ? 
XFS_BTREE_ERROR
 : 
XFS_BTREE_NOERROR
);

4758 i‡(!
îr‹
)

4759 
	`xfs_bm≠_vÆid©e_ªt
(
‹ig_bno
, 
‹ig_Àn
, 
‹ig_Êags
, 
‹ig_mvÆ
,

4760 
‹ig_nm≠
, *
nm≠
);

4761  
îr‹
;

4762 
	}
}

4776 
xfs_fûblks_t


4777 
	$xfs_bm≠_•lô_ödÀn
(

4778 
xfs_fûblks_t
 
‹es
,

4779 
xfs_fûblks_t
 *
ödÀn1
,

4780 
xfs_fûblks_t
 *
ödÀn2
,

4781 
xfs_fûblks_t
 
avaû
)

4783 
xfs_fûblks_t
 
Àn1
 = *
ödÀn1
;

4784 
xfs_fûblks_t
 
Àn2
 = *
ödÀn2
;

4785 
xfs_fûblks_t
 
ƒes
 = 
Àn1
 + 
Àn2
;

4786 
xfs_fûblks_t
 
°ﬁí
 = 0;

4787 
xfs_fûblks_t
 
ªsÁ˘‹
;

4793 i‡(
‹es
 < 
ƒes
 && 
avaû
)

4794 
°ﬁí
 = 
	`XFS_FILBLKS_MIN
(
ƒes
 - 
‹es
, 
avaû
);

4795 
‹es
 +
°ﬁí
;

4798 i‡(
‹es
 >
ƒes
)

4799  
°ﬁí
;

4809 
ªsÁ˘‹
 = (
‹es
 * 100);

4810 
	`do_div
(
ªsÁ˘‹
, 
ƒes
);

4811 
Àn1
 *
ªsÁ˘‹
;

4812 
	`do_div
(
Àn1
, 100);

4813 
Àn2
 *
ªsÁ˘‹
;

4814 
	`do_div
(
Àn2
, 100);

4815 
	`ASSERT
(
Àn1
 + 
Àn2
 <
‹es
);

4816 
	`ASSERT
(
Àn1
 < *
ödÀn1
 && 
Àn2
 < *
ödÀn2
);

4824 
‹es
 -(
Àn1
 + 
Àn2
);

4825 
	`ASSERT
((*
ödÀn1
 - 
Àn1
Ë+ (*
ödÀn2
 - 
Àn2
Ë>
‹es
);

4826 i‡(
‹es
 && !
Àn2
 && *
ödÀn2
) {

4827 
Àn2
++;

4828 
‹es
--;

4830 
‹es
) {

4831 i‡(
Àn1
 < *
ödÀn1
) {

4832 
Àn1
++;

4833 
‹es
--;

4835 i‡(!
‹es
)

4837 i‡(
Àn2
 < *
ödÀn2
) {

4838 
Àn2
++;

4839 
‹es
--;

4843 *
ödÀn1
 = 
Àn1
;

4844 *
ödÀn2
 = 
Àn2
;

4846  
°ﬁí
;

4847 
	}
}

4850 
	$xfs_bm≠_dñ_exã¡_dñay
(

4851 
xfs_öode
 *
ù
,

4852 
whichf‹k
,

4853 
xfs_exäum_t
 *
idx
,

4854 
xfs_bmbt_úec
 *
gŸ
,

4855 
xfs_bmbt_úec
 *
dñ
)

4857 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

4858 
xfs_if‹k
 *
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

4859 
xfs_bmbt_úec
 
√w
;

4860 
öt64_t
 
da_ﬁd
, 
da_√w
, 
da_diff
 = 0;

4861 
xfs_fûeoff_t
 
dñ_ídoff
, 
gŸ_ídoff
;

4862 
xfs_fûblks_t
 
gŸ_ödÀn
, 
√w_ödÀn
, 
°ﬁí
;

4863 
îr‹
 = 0, 
°©e
 = 0;

4864 
boﬁ
 
i§t
;

4866 
	`XFS_STATS_INC
(
mp
, 
xs_dñ_exli°
);

4868 
i§t
 = (
whichf‹k
 =
XFS_DATA_FORK
Ë&& 
	`XFS_IS_REALTIME_INODE
(
ù
);

4869 
dñ_ídoff
 = 
dñ
->
br_°¨toff
 + dñ->
br_blockcou¡
;

4870 
gŸ_ídoff
 = 
gŸ
->
br_°¨toff
 + gŸ->
br_blockcou¡
;

4871 
da_ﬁd
 = 
	`°¨tblockvÆ
(
gŸ
->
br_°¨tblock
);

4872 
da_√w
 = 0;

4874 
	`ASSERT
(*
idx
 >= 0);

4875 
	`ASSERT
(*
idx
 <
	`xfs_õxt_cou¡
(
iÂ
));

4876 
	`ASSERT
(
dñ
->
br_blockcou¡
 > 0);

4877 
	`ASSERT
(
gŸ
->
br_°¨toff
 <
dñ
->br_startoff);

4878 
	`ASSERT
(
gŸ_ídoff
 >
dñ_ídoff
);

4880 i‡(
i§t
) {

4881 
öt64_t
 
πexts
 = 
	`XFS_FSB_TO_B
(
mp
, 
dñ
->
br_blockcou¡
);

4883 
	`do_div
(
πexts
, 
mp
->
m_sb
.
sb_ªxtsize
);

4884 
	`xfs_mod_‰exã¡s
(
mp
, 
πexts
);

4892 
îr‹
 = 
	`xfs_å™s_ª£rve_quŸa_nblks
(
NULL
, 
ù
,

4893 -(()
dñ
->
br_blockcou¡
), 0,

4894 
i§t
 ? 
XFS_QMOPT_RES_RTBLKS
 : 
XFS_QMOPT_RES_REGBLKS
);

4895 i‡(
îr‹
)

4896  
îr‹
;

4897 
ù
->
i_dñayed_blks
 -
dñ
->
br_blockcou¡
;

4899 i‡(
whichf‹k
 =
XFS_COW_FORK
)

4900 
°©e
 |
BMAP_COWFORK
;

4902 i‡(
gŸ
->
br_°¨toff
 =
dñ
->br_startoff)

4903 
°©e
 |
BMAP_LEFT_CONTIG
;

4904 i‡(
gŸ_ídoff
 =
dñ_ídoff
)

4905 
°©e
 |
BMAP_RIGHT_CONTIG
;

4907 
°©e
 & (
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
)) {

4908 
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
:

4912 
	`xfs_õxt_ªmove
(
ù
, *
idx
, 1, 
°©e
);

4913 --*
idx
;

4915 
BMAP_LEFT_CONTIG
:

4919 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

4920 
gŸ
->
br_°¨toff
 = 
dñ_ídoff
;

4921 
gŸ
->
br_blockcou¡
 -
dñ
->br_blockcount;

4922 
da_√w
 = 
	`XFS_FILBLKS_MIN
(
	`xfs_bm≠_w‹°_ödÀn
(
ù
,

4923 
gŸ
->
br_blockcou¡
), 
da_ﬁd
);

4924 
gŸ
->
br_°¨tblock
 = 
	`nuŒ°¨tblock
(()
da_√w
);

4925 
	`xfs_bmbt_£t_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
), 
gŸ
);

4926 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

4928 
BMAP_RIGHT_CONTIG
:

4932 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

4933 
gŸ
->
br_blockcou¡
 = gŸ->br_blockcou¡ - 
dñ
->br_blockcount;

4934 
da_√w
 = 
	`XFS_FILBLKS_MIN
(
	`xfs_bm≠_w‹°_ödÀn
(
ù
,

4935 
gŸ
->
br_blockcou¡
), 
da_ﬁd
);

4936 
gŸ
->
br_°¨tblock
 = 
	`nuŒ°¨tblock
(()
da_√w
);

4937 
	`xfs_bmbt_£t_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
), 
gŸ
);

4938 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

4950 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

4952 
gŸ
->
br_blockcou¡
 = 
dñ
->
br_°¨toff
 - got->br_startoff;

4953 
gŸ_ödÀn
 = 
	`xfs_bm≠_w‹°_ödÀn
(
ù
, 
gŸ
->
br_blockcou¡
);

4955 
√w
.
br_blockcou¡
 = 
gŸ_ídoff
 - 
dñ_ídoff
;

4956 
√w_ödÀn
 = 
	`xfs_bm≠_w‹°_ödÀn
(
ù
, 
√w
.
br_blockcou¡
);

4958 
	`WARN_ON_ONCE
(!
gŸ_ödÀn
 || !
√w_ödÀn
);

4959 
°ﬁí
 = 
	`xfs_bm≠_•lô_ödÀn
(
da_ﬁd
, &
gŸ_ödÀn
, &
√w_ödÀn
,

4960 
dñ
->
br_blockcou¡
);

4962 
gŸ
->
br_°¨tblock
 = 
	`nuŒ°¨tblock
(()
gŸ_ödÀn
);

4963 
	`xfs_bmbt_£t_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
), 
gŸ
);

4964 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 0, 
_THIS_IP_
);

4966 
√w
.
br_°¨toff
 = 
dñ_ídoff
;

4967 
√w
.
br_°©e
 = 
gŸ
->br_state;

4968 
√w
.
br_°¨tblock
 = 
	`nuŒ°¨tblock
(()
√w_ödÀn
);

4970 ++*
idx
;

4971 
	`xfs_õxt_ö£π
(
ù
, *
idx
, 1, &
√w
, 
°©e
);

4973 
da_√w
 = 
gŸ_ödÀn
 + 
√w_ödÀn
 - 
°ﬁí
;

4974 
dñ
->
br_blockcou¡
 -
°ﬁí
;

4978 
	`ASSERT
(
da_ﬁd
 >
da_√w
);

4979 
da_diff
 = 
da_ﬁd
 - 
da_√w
;

4980 i‡(!
i§t
)

4981 
da_diff
 +
dñ
->
br_blockcou¡
;

4982 i‡(
da_diff
)

4983 
	`xfs_mod_fdblocks
(
mp
, 
da_diff
, 
Ál£
);

4984  
îr‹
;

4985 
	}
}

4988 
	$xfs_bm≠_dñ_exã¡_cow
(

4989 
xfs_öode
 *
ù
,

4990 
xfs_exäum_t
 *
idx
,

4991 
xfs_bmbt_úec
 *
gŸ
,

4992 
xfs_bmbt_úec
 *
dñ
)

4994 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

4995 
xfs_if‹k
 *
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
XFS_COW_FORK
);

4996 
xfs_bmbt_úec
 
√w
;

4997 
xfs_fûeoff_t
 
dñ_ídoff
, 
gŸ_ídoff
;

4998 
°©e
 = 
BMAP_COWFORK
;

5000 
	`XFS_STATS_INC
(
mp
, 
xs_dñ_exli°
);

5002 
dñ_ídoff
 = 
dñ
->
br_°¨toff
 + dñ->
br_blockcou¡
;

5003 
gŸ_ídoff
 = 
gŸ
->
br_°¨toff
 + gŸ->
br_blockcou¡
;

5005 
	`ASSERT
(*
idx
 >= 0);

5006 
	`ASSERT
(*
idx
 <
	`xfs_õxt_cou¡
(
iÂ
));

5007 
	`ASSERT
(
dñ
->
br_blockcou¡
 > 0);

5008 
	`ASSERT
(
gŸ
->
br_°¨toff
 <
dñ
->br_startoff);

5009 
	`ASSERT
(
gŸ_ídoff
 >
dñ_ídoff
);

5010 
	`ASSERT
(!
	`i¢uŒ°¨tblock
(
gŸ
->
br_°¨tblock
));

5012 i‡(
gŸ
->
br_°¨toff
 =
dñ
->br_startoff)

5013 
°©e
 |
BMAP_LEFT_CONTIG
;

5014 i‡(
gŸ_ídoff
 =
dñ_ídoff
)

5015 
°©e
 |
BMAP_RIGHT_CONTIG
;

5017 
°©e
 & (
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
)) {

5018 
BMAP_LEFT_CONTIG
 | 
BMAP_RIGHT_CONTIG
:

5022 
	`xfs_õxt_ªmove
(
ù
, *
idx
, 1, 
°©e
);

5023 --*
idx
;

5025 
BMAP_LEFT_CONTIG
:

5029 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5030 
gŸ
->
br_°¨toff
 = 
dñ_ídoff
;

5031 
gŸ
->
br_blockcou¡
 -
dñ
->br_blockcount;

5032 
gŸ
->
br_°¨tblock
 = 
dñ
->br_°¨tblock + dñ->
br_blockcou¡
;

5033 
	`xfs_bmbt_£t_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
), 
gŸ
);

5034 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5036 
BMAP_RIGHT_CONTIG
:

5040 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5041 
gŸ
->
br_blockcou¡
 -
dñ
->br_blockcount;

5042 
	`xfs_bmbt_£t_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
), 
gŸ
);

5043 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5049 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5050 
gŸ
->
br_blockcou¡
 = 
dñ
->
br_°¨toff
 - got->br_startoff;

5051 
	`xfs_bmbt_£t_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
), 
gŸ
);

5052 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5054 
√w
.
br_°¨toff
 = 
dñ_ídoff
;

5055 
√w
.
br_blockcou¡
 = 
gŸ_ídoff
 - 
dñ_ídoff
;

5056 
√w
.
br_°©e
 = 
gŸ
->br_state;

5057 
√w
.
br_°¨tblock
 = 
dñ
->br_°¨tblock + dñ->
br_blockcou¡
;

5059 ++*
idx
;

5060 
	`xfs_õxt_ö£π
(
ù
, *
idx
, 1, &
√w
, 
°©e
);

5063 
	}
}

5069 
STATIC
 

5070 
	$xfs_bm≠_dñ_exã¡
(

5071 
xfs_öode_t
 *
ù
,

5072 
xfs_å™s_t
 *
ç
,

5073 
xfs_exäum_t
 *
idx
,

5074 
xfs_de„r_›s
 *
df›s
,

5075 
xfs_båì_cur_t
 *
cur
,

5076 
xfs_bmbt_úec_t
 *
dñ
,

5077 *
logÊag•
,

5078 
whichf‹k
,

5079 
bÊags
)

5081 
xfs_fûblks_t
 
da_√w
;

5082 
xfs_fûblks_t
 
da_ﬁd
;

5083 
xfs_fsblock_t
 
dñ_ídblock
=0;

5084 
xfs_fûeoff_t
 
dñ_ídoff
;

5085 
dñay
;

5086 
do_fx
;

5087 
xfs_bmbt_ªc_ho°_t
 *
ï
;

5088 
îr‹
;

5089 
Êags
;

5090 
xfs_bmbt_úec_t
 
gŸ
;

5091 
xfs_fûeoff_t
 
gŸ_ídoff
;

5092 
i
;

5093 
xfs_if‹k_t
 *
iÂ
;

5094 
xfs_mou¡_t
 *
mp
;

5095 
xfs_fûblks_t
 
nblks
;

5096 
xfs_bmbt_úec_t
 
√w
;

5098 
uöt
 
qfõld
;

5099 
xfs_fûblks_t
 
ãmp
;

5100 
xfs_fûblks_t
 
ãmp2
;

5101 
°©e
 = 0;

5103 
mp
 = 
ù
->
i_mou¡
;

5104 
	`XFS_STATS_INC
(
mp
, 
xs_dñ_exli°
);

5106 i‡(
whichf‹k
 =
XFS_ATTR_FORK
)

5107 
°©e
 |
BMAP_ATTRFORK
;

5108 i‡(
whichf‹k
 =
XFS_COW_FORK
)

5109 
°©e
 |
BMAP_COWFORK
;

5111 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

5112 
	`ASSERT
((*
idx
 >0Ë&& (*idx < 
	`xfs_õxt_cou¡
(
iÂ
)));

5113 
	`ASSERT
(
dñ
->
br_blockcou¡
 > 0);

5114 
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, *
idx
);

5115 
	`xfs_bmbt_gë_Æl
(
ï
, &
gŸ
);

5116 
	`ASSERT
(
gŸ
.
br_°¨toff
 <
dñ
->br_startoff);

5117 
dñ_ídoff
 = 
dñ
->
br_°¨toff
 + dñ->
br_blockcou¡
;

5118 
gŸ_ídoff
 = 
gŸ
.
br_°¨toff
 + gŸ.
br_blockcou¡
;

5119 
	`ASSERT
(
gŸ_ídoff
 >
dñ_ídoff
);

5120 
dñay
 = 
	`i¢uŒ°¨tblock
(
gŸ
.
br_°¨tblock
);

5121 
	`ASSERT
(
	`i¢uŒ°¨tblock
(
dñ
->
br_°¨tblock
Ë=
dñay
);

5122 
Êags
 = 0;

5123 
qfõld
 = 0;

5124 
îr‹
 = 0;

5128 i‡(!
dñay
) {

5129 
Êags
 = 
XFS_ILOG_CORE
;

5133 i‡(
whichf‹k
 =
XFS_DATA_FORK
 && 
	`XFS_IS_REALTIME_INODE
(
ù
)) {

5134 
xfs_fsblock_t
 
bno
;

5135 
xfs_fûblks_t
 
Àn
;

5137 
	`ASSERT
(
	`do_mod
(
dñ
->
br_blockcou¡
,

5138 
mp
->
m_sb
.
sb_ªxtsize
) == 0);

5139 
	`ASSERT
(
	`do_mod
(
dñ
->
br_°¨tblock
,

5140 
mp
->
m_sb
.
sb_ªxtsize
) == 0);

5141 
bno
 = 
dñ
->
br_°¨tblock
;

5142 
Àn
 = 
dñ
->
br_blockcou¡
;

5143 
	`do_div
(
bno
, 
mp
->
m_sb
.
sb_ªxtsize
);

5144 
	`do_div
(
Àn
, 
mp
->
m_sb
.
sb_ªxtsize
);

5145 
îr‹
 = 
	`xfs_π‰ì_exã¡
(
ç
, 
bno
, (
xfs_exéí_t
)
Àn
);

5146 i‡(
îr‹
)

5147 
d⁄e
;

5148 
do_fx
 = 0;

5149 
nblks
 = 
Àn
 * 
mp
->
m_sb
.
sb_ªxtsize
;

5150 
qfõld
 = 
XFS_TRANS_DQ_RTBCOUNT
;

5156 
do_fx
 = 1;

5157 
nblks
 = 
dñ
->
br_blockcou¡
;

5158 
qfõld
 = 
XFS_TRANS_DQ_BCOUNT
;

5163 
dñ_ídblock
 = 
dñ
->
br_°¨tblock
 + dñ->
br_blockcou¡
;

5164 i‡(
cur
) {

5165 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
gŸ
.
br_°¨toff
,

5166 
gŸ
.
br_°¨tblock
, gŸ.
br_blockcou¡
,

5167 &
i
)))

5168 
d⁄e
;

5169 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

5171 
da_ﬁd
 = 
da_√w
 = 0;

5173 
da_ﬁd
 = 
	`°¨tblockvÆ
(
gŸ
.
br_°¨tblock
);

5174 
da_√w
 = 0;

5175 
nblks
 = 0;

5176 
do_fx
 = 0;

5183 ((
gŸ
.
br_°¨toff
 =
dñ
->br_startoff) << 1) |

5184 (
gŸ_ídoff
 =
dñ_ídoff
)) {

5189 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5190 
	`xfs_õxt_ªmove
(
ù
, *
idx
, 1,

5191 
whichf‹k
 =
XFS_ATTR_FORK
 ? 
BMAP_ATTRFORK
 : 0);

5192 --*
idx
;

5193 i‡(
dñay
)

5196 
	`XFS_IFORK_NEXT_SET
(
ù
, 
whichf‹k
,

5197 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) - 1);

5198 
Êags
 |
XFS_ILOG_CORE
;

5199 i‡(!
cur
) {

5200 
Êags
 |
	`xfs_ûog_„xt
(
whichf‹k
);

5203 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
)))

5204 
d⁄e
;

5205 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

5212 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5213 
	`xfs_bmbt_£t_°¨toff
(
ï
, 
dñ_ídoff
);

5214 
ãmp
 = 
gŸ
.
br_blockcou¡
 - 
dñ
->br_blockcount;

5215 
	`xfs_bmbt_£t_blockcou¡
(
ï
, 
ãmp
);

5216 i‡(
dñay
) {

5217 
ãmp
 = 
	`XFS_FILBLKS_MIN
(
	`xfs_bm≠_w‹°_ödÀn
(
ù
,Åemp),

5218 
da_ﬁd
);

5219 
	`xfs_bmbt_£t_°¨tblock
(
ï
, 
	`nuŒ°¨tblock
(()
ãmp
));

5220 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5221 
da_√w
 = 
ãmp
;

5224 
	`xfs_bmbt_£t_°¨tblock
(
ï
, 
dñ_ídblock
);

5225 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5226 i‡(!
cur
) {

5227 
Êags
 |
	`xfs_ûog_„xt
(
whichf‹k
);

5230 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
dñ_ídoff
, 
dñ_ídblock
,

5231 
gŸ
.
br_blockcou¡
 - 
dñ
->br_blockcount,

5232 
gŸ
.
br_°©e
)))

5233 
d⁄e
;

5240 
ãmp
 = 
gŸ
.
br_blockcou¡
 - 
dñ
->br_blockcount;

5241 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5242 
	`xfs_bmbt_£t_blockcou¡
(
ï
, 
ãmp
);

5243 i‡(
dñay
) {

5244 
ãmp
 = 
	`XFS_FILBLKS_MIN
(
	`xfs_bm≠_w‹°_ödÀn
(
ù
,Åemp),

5245 
da_ﬁd
);

5246 
	`xfs_bmbt_£t_°¨tblock
(
ï
, 
	`nuŒ°¨tblock
(()
ãmp
));

5247 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5248 
da_√w
 = 
ãmp
;

5251 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5252 i‡(!
cur
) {

5253 
Êags
 |
	`xfs_ûog_„xt
(
whichf‹k
);

5256 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
gŸ
.
br_°¨toff
,

5257 
gŸ
.
br_°¨tblock
,

5258 
gŸ
.
br_blockcou¡
 - 
dñ
->br_blockcount,

5259 
gŸ
.
br_°©e
)))

5260 
d⁄e
;

5267 
ãmp
 = 
dñ
->
br_°¨toff
 - 
gŸ
.br_startoff;

5268 
	`åa˚_xfs_bm≠_¥e_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5269 
	`xfs_bmbt_£t_blockcou¡
(
ï
, 
ãmp
);

5270 
√w
.
br_°¨toff
 = 
dñ_ídoff
;

5271 
ãmp2
 = 
gŸ_ídoff
 - 
dñ_ídoff
;

5272 
√w
.
br_blockcou¡
 = 
ãmp2
;

5273 
√w
.
br_°©e
 = 
gŸ
.br_state;

5274 i‡(!
dñay
) {

5275 
√w
.
br_°¨tblock
 = 
dñ_ídblock
;

5276 
Êags
 |
XFS_ILOG_CORE
;

5277 i‡(
cur
) {

5278 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
,

5279 
gŸ
.
br_°¨toff
,

5280 
gŸ
.
br_°¨tblock
, 
ãmp
,

5281 
gŸ
.
br_°©e
)))

5282 
d⁄e
;

5283 i‡((
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
)))

5284 
d⁄e
;

5285 
cur
->
bc_ªc
.
b
 = 
√w
;

5286 
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
);

5287 i‡(
îr‹
 &&Éº‹ !-
ENOSPC
)

5288 
d⁄e
;

5295 i‡(
îr‹
 =-
ENOSPC
) {

5300 i‡((
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
,

5301 
gŸ
.
br_°¨toff
,

5302 
gŸ
.
br_°¨tblock
,

5303 
ãmp
, &
i
)))

5304 
d⁄e
;

5305 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

5306 
i
 =1, 
d⁄e
);

5311 i‡((
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
,

5312 
gŸ
.
br_°¨toff
,

5313 
gŸ
.
br_°¨tblock
,

5314 
gŸ
.
br_blockcou¡
,

5315 
gŸ
.
br_°©e
)))

5316 
d⁄e
;

5321 
	`xfs_bmbt_£t_blockcou¡
(
ï
,

5322 
gŸ
.
br_blockcou¡
);

5323 
Êags
 = 0;

5324 
îr‹
 = -
ENOSPC
;

5325 
d⁄e
;

5327 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

5329 
Êags
 |
	`xfs_ûog_„xt
(
whichf‹k
);

5330 
	`XFS_IFORK_NEXT_SET
(
ù
, 
whichf‹k
,

5331 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) + 1);

5333 
xfs_fûblks_t
 
°ﬁí
;

5334 
	`ASSERT
(
whichf‹k
 =
XFS_DATA_FORK
);

5342 
ãmp
 = 
	`xfs_bm≠_w‹°_ödÀn
(
ù
, 
gŸ
.
br_blockcou¡
);

5343 
ãmp2
 = 
	`xfs_bm≠_w‹°_ödÀn
(
ù
, 
√w
.
br_blockcou¡
);

5344 
°ﬁí
 = 
	`xfs_bm≠_•lô_ödÀn
(
da_ﬁd
, &
ãmp
, &
ãmp2
,

5345 
dñ
->
br_blockcou¡
);

5346 
da_√w
 = 
ãmp
 + 
ãmp2
 - 
°ﬁí
;

5347 
dñ
->
br_blockcou¡
 -
°ﬁí
;

5353 
	`WARN_ON_ONCE
(!
ãmp
 || !
ãmp2
);

5354 
	`xfs_bmbt_£t_°¨tblock
(
ï
, 
	`nuŒ°¨tblock
(()
ãmp
));

5355 
√w
.
br_°¨tblock
 = 
	`nuŒ°¨tblock
(()
ãmp2
);

5357 
	`åa˚_xfs_bm≠_po°_upd©e
(
ù
, *
idx
, 
°©e
, 
_THIS_IP_
);

5358 
	`xfs_õxt_ö£π
(
ù
, *
idx
 + 1, 1, &
√w
, 
°©e
);

5359 ++*
idx
;

5364 i‡(!
dñay
) {

5365 
îr‹
 = 
	`xfs_rm≠_unm≠_exã¡
(
mp
, 
df›s
, 
ù
, 
whichf‹k
, 
dñ
);

5366 i‡(
îr‹
)

5367 
d⁄e
;

5373 i‡(
do_fx
 && !(
bÊags
 & 
XFS_BMAPI_REMAP
)) {

5374 i‡(
	`xfs_is_ªÊök_öode
(
ù
Ë&& 
whichf‹k
 =
XFS_DATA_FORK
) {

5375 
îr‹
 = 
	`xfs_ªfcou¡_de¸ó£_exã¡
(
mp
, 
df›s
, 
dñ
);

5376 i‡(
îr‹
)

5377 
d⁄e
;

5379 
	`xfs_bm≠_add_‰ì
(
mp
, 
df›s
, 
dñ
->
br_°¨tblock
,

5380 
dñ
->
br_blockcou¡
, 
NULL
);

5386 i‡(
nblks
)

5387 
ù
->
i_d
.
di_nblocks
 -
nblks
;

5391 i‡(
qfõld
 && !(
bÊags
 & 
XFS_BMAPI_REMAP
))

5392 
	`xfs_å™s_mod_dquŸ_byöo
(
ç
, 
ù
, 
qfõld
, ()-
nblks
);

5398 
	`ASSERT
(
da_ﬁd
 >
da_√w
);

5399 i‡(
da_ﬁd
 > 
da_√w
)

5400 
	`xfs_mod_fdblocks
(
mp
, (
öt64_t
)(
da_ﬁd
 - 
da_√w
), 
Ál£
);

5401 
d⁄e
:

5402 *
logÊag•
 = 
Êags
;

5403  
îr‹
;

5404 
	}
}

5413 
	$__xfs_bunm≠i
(

5414 
xfs_å™s_t
 *
ç
,

5415 
xfs_öode
 *
ù
,

5416 
xfs_fûeoff_t
 
bno
,

5417 
xfs_fûblks_t
 *
æí
,

5418 
Êags
,

5419 
xfs_exäum_t
 
√xts
,

5420 
xfs_fsblock_t
 *
fú°block
,

5422 
xfs_de„r_›s
 *
df›s
)

5424 
xfs_båì_cur_t
 *
cur
;

5425 
xfs_bmbt_úec_t
 
dñ
;

5426 
îr‹
;

5427 
xfs_exäum_t
 
exäo
;

5428 
xfs_bmbt_úec_t
 
gŸ
;

5429 
xfs_if‹k_t
 *
iÂ
;

5430 
i§t
;

5431 
xfs_exäum_t
 
œ°x
;

5432 
logÊags
;

5433 
xfs_exéí_t
 
mod
;

5434 
xfs_mou¡_t
 *
mp
;

5435 
xfs_fûeoff_t
 
°¨t
;

5436 
tmp_logÊags
;

5437 
wasdñ
;

5438 
whichf‹k
;

5439 
xfs_fsblock_t
 
sum
;

5440 
xfs_fûblks_t
 
Àn
 = *
æí
;

5442 
	`åa˚_xfs_bunm≠
(
ù
, 
bno
, 
Àn
, 
Êags
, 
_RET_IP_
);

5444 
whichf‹k
 = 
	`xfs_bm≠i_whichf‹k
(
Êags
);

5445 
	`ASSERT
(
whichf‹k
 !
XFS_COW_FORK
);

5446 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

5447 i‡(
	`u∆ikñy
(

5448 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_EXTENTS
 &&

5449 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
)) {

5450 
	`XFS_ERROR_REPORT
("xfs_bunm≠i", 
XFS_ERRLEVEL_LOW
,

5451 
ù
->
i_mou¡
);

5452  -
EFSCORRUPTED
;

5454 
mp
 = 
ù
->
i_mou¡
;

5455 i‡(
	`XFS_FORCED_SHUTDOWN
(
mp
))

5456  -
EIO
;

5458 
	`ASSERT
(
	`xfs_isûocked
(
ù
, 
XFS_ILOCK_EXCL
));

5459 
	`ASSERT
(
Àn
 > 0);

5460 
	`ASSERT
(
√xts
 >= 0);

5462 i‡(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
) &&

5463 (
îr‹
 = 
	`xfs_úód_exã¡s
(
ç
, 
ù
, 
whichf‹k
)))

5464  
îr‹
;

5465 i‡(
	`xfs_õxt_cou¡
(
iÂ
) == 0) {

5466 *
æí
 = 0;

5469 
	`XFS_STATS_INC
(
mp
, 
xs_blk_unm≠
);

5470 
i§t
 = (
whichf‹k
 =
XFS_DATA_FORK
Ë&& 
	`XFS_IS_REALTIME_INODE
(
ù
);

5471 
°¨t
 = 
bno
;

5472 
bno
 = 
°¨t
 + 
Àn
 - 1;

5478 i‡(!
	`xfs_õxt_lookup_exã¡
(
ù
, 
iÂ
, 
bno
, &
œ°x
, &
gŸ
)) {

5479 
	`ASSERT
(
œ°x
 > 0);

5480 
	`xfs_õxt_gë_exã¡
(
iÂ
, --
œ°x
, &
gŸ
);

5481 
bno
 = 
gŸ
.
br_°¨toff
 + gŸ.
br_blockcou¡
 - 1;

5484 
logÊags
 = 0;

5485 i‡(
iÂ
->
if_Êags
 & 
XFS_IFBROOT
) {

5486 
	`ASSERT
(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_BTREE
);

5487 
cur
 = 
	`xfs_bmbt_öô_curs‹
(
mp
, 
ç
, 
ù
, 
whichf‹k
);

5488 
cur
->
bc_¥iv©e
.
b
.
fú°block
 = *firstblock;

5489 
cur
->
bc_¥iv©e
.
b
.
df›s
 = dfops;

5490 
cur
->
bc_¥iv©e
.
b
.
Êags
 = 0;

5492 
cur
 = 
NULL
;

5494 i‡(
i§t
) {

5498 
	`xfs_ûock
(
mp
->
m_rbmù
, 
XFS_ILOCK_EXCL
|
XFS_ILOCK_RTBITMAP
);

5499 
	`xfs_å™s_ijoö
(
ç
, 
mp
->
m_rbmù
, 
XFS_ILOCK_EXCL
);

5500 
	`xfs_ûock
(
mp
->
m_rsumù
, 
XFS_ILOCK_EXCL
|
XFS_ILOCK_RTSUM
);

5501 
	`xfs_å™s_ijoö
(
ç
, 
mp
->
m_rsumù
, 
XFS_ILOCK_EXCL
);

5504 
exäo
 = 0;

5505 
bno
 !(
xfs_fûeoff_t
)-1 && bnÿ>
°¨t
 && 
œ°x
 >= 0 &&

5506 (
√xts
 =0 || 
exäo
 <Çexts)) {

5511 i‡(
gŸ
.
br_°¨toff
 > 
bno
) {

5512 i‡(--
œ°x
 < 0)

5514 
	`xfs_õxt_gë_exã¡
(
iÂ
, 
œ°x
, &
gŸ
);

5520 
bno
 = 
	`XFS_FILEOFF_MIN
(bno,

5521 
gŸ
.
br_°¨toff
 + gŸ.
br_blockcou¡
 - 1);

5522 i‡(
bno
 < 
°¨t
)

5528 
dñ
 = 
gŸ
;

5529 
wasdñ
 = 
	`i¢uŒ°¨tblock
(
dñ
.
br_°¨tblock
);

5530 i‡(
gŸ
.
br_°¨toff
 < 
°¨t
) {

5531 
dñ
.
br_°¨toff
 = 
°¨t
;

5532 
dñ
.
br_blockcou¡
 -
°¨t
 - 
gŸ
.
br_°¨toff
;

5533 i‡(!
wasdñ
)

5534 
dñ
.
br_°¨tblock
 +
°¨t
 - 
gŸ
.
br_°¨toff
;

5536 i‡(
dñ
.
br_°¨toff
 + dñ.
br_blockcou¡
 > 
bno
 + 1)

5537 
dñ
.
br_blockcou¡
 = 
bno
 + 1 - dñ.
br_°¨toff
;

5538 
sum
 = 
dñ
.
br_°¨tblock
 + dñ.
br_blockcou¡
;

5539 i‡(
i§t
 &&

5540 (
mod
 = 
	`do_mod
(
sum
, 
mp
->
m_sb
.
sb_ªxtsize
))) {

5548 i‡(
dñ
.
br_°©e
 =
XFS_EXT_UNWRITTEN
 ||

5549 !
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(&
mp
->
m_sb
)) {

5554 
	`ASSERT
(
bno
 >
mod
);

5555 
bno
 -
mod
 > 
dñ
.
br_blockcou¡
 ?

5556 
dñ
.
br_blockcou¡
 : 
mod
;

5557 i‡(
bno
 < 
gŸ
.
br_°¨toff
) {

5558 i‡(--
œ°x
 >= 0)

5559 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(

5560 
iÂ
, 
œ°x
), &
gŸ
);

5568 
	`ASSERT
(
dñ
.
br_°©e
 =
XFS_EXT_NORM
);

5569 
	`ASSERT
(
ç
->
t_blk_ªs
 > 0);

5574 i‡(
dñ
.
br_blockcou¡
 > 
mod
) {

5575 
dñ
.
br_°¨toff
 +dñ.
br_blockcou¡
 - 
mod
;

5576 
dñ
.
br_°¨tblock
 +dñ.
br_blockcou¡
 - 
mod
;

5577 
dñ
.
br_blockcou¡
 = 
mod
;

5579 
dñ
.
br_°©e
 = 
XFS_EXT_UNWRITTEN
;

5580 
îr‹
 = 
	`xfs_bm≠_add_exã¡_unwrôãn_ªÆ
(
ç
, 
ù
,

5581 
whichf‹k
, &
œ°x
, &
cur
, &
dñ
,

5582 
fú°block
, 
df›s
, &
logÊags
);

5583 i‡(
îr‹
)

5584 
îr‹0
;

5585 
nodñëe
;

5587 i‡(
i§t
 && (
mod
 = 
	`do_mod
(
dñ
.
br_°¨tblock
, 
mp
->
m_sb
.
sb_ªxtsize
))) {

5593 
mod
 = 
mp
->
m_sb
.
sb_ªxtsize
 - mod;

5594 i‡(
dñ
.
br_blockcou¡
 > 
mod
) {

5595 
dñ
.
br_blockcou¡
 -
mod
;

5596 
dñ
.
br_°¨toff
 +
mod
;

5597 
dñ
.
br_°¨tblock
 +
mod
;

5598 } i‡((
dñ
.
br_°¨toff
 =
°¨t
 &&

5599 (
dñ
.
br_°©e
 =
XFS_EXT_UNWRITTEN
 ||

5600 
ç
->
t_blk_ªs
 == 0)) ||

5601 !
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(&
mp
->
m_sb
)) {

5606 
	`ASSERT
(
bno
 >
dñ
.
br_blockcou¡
);

5607 
bno
 -
dñ
.
br_blockcou¡
;

5608 i‡(
gŸ
.
br_°¨toff
 > 
bno
 && --
œ°x
 >= 0)

5609 
	`xfs_õxt_gë_exã¡
(
iÂ
, 
œ°x
, &
gŸ
);

5611 } i‡(
dñ
.
br_°©e
 =
XFS_EXT_UNWRITTEN
) {

5612 
xfs_bmbt_úec
 
¥ev
;

5620 
	`ASSERT
(
œ°x
 > 0);

5621 
	`xfs_õxt_gë_exã¡
(
iÂ
, 
œ°x
 - 1, &
¥ev
);

5622 
	`ASSERT
(
¥ev
.
br_°©e
 =
XFS_EXT_NORM
);

5623 
	`ASSERT
(!
	`i¢uŒ°¨tblock
(
¥ev
.
br_°¨tblock
));

5624 
	`ASSERT
(
dñ
.
br_°¨tblock
 ==

5625 
¥ev
.
br_°¨tblock
 +Öªv.
br_blockcou¡
);

5626 i‡(
¥ev
.
br_°¨toff
 < 
°¨t
) {

5627 
mod
 = 
°¨t
 - 
¥ev
.
br_°¨toff
;

5628 
¥ev
.
br_blockcou¡
 -
mod
;

5629 
¥ev
.
br_°¨tblock
 +
mod
;

5630 
¥ev
.
br_°¨toff
 = 
°¨t
;

5632 
¥ev
.
br_°©e
 = 
XFS_EXT_UNWRITTEN
;

5633 
œ°x
--;

5634 
îr‹
 = 
	`xfs_bm≠_add_exã¡_unwrôãn_ªÆ
(
ç
,

5635 
ù
, 
whichf‹k
, &
œ°x
, &
cur
,

5636 &
¥ev
, 
fú°block
, 
df›s
,

5637 &
logÊags
);

5638 i‡(
îr‹
)

5639 
îr‹0
;

5640 
nodñëe
;

5642 
	`ASSERT
(
dñ
.
br_°©e
 =
XFS_EXT_NORM
);

5643 
dñ
.
br_°©e
 = 
XFS_EXT_UNWRITTEN
;

5644 
îr‹
 = 
	`xfs_bm≠_add_exã¡_unwrôãn_ªÆ
(
ç
,

5645 
ù
, 
whichf‹k
, &
œ°x
, &
cur
,

5646 &
dñ
, 
fú°block
, 
df›s
,

5647 &
logÊags
);

5648 i‡(
îr‹
)

5649 
îr‹0
;

5650 
nodñëe
;

5665 i‡(!
wasdñ
 && 
ç
->
t_blk_ªs
 == 0 &&

5666 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_EXTENTS
 &&

5667 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) >=

5668 
	`XFS_IFORK_MAXEXT
(
ù
, 
whichf‹k
) &&

5669 
dñ
.
br_°¨toff
 > 
gŸ
.br_startoff &&

5670 
dñ
.
br_°¨toff
 + dñ.
br_blockcou¡
 <

5671 
gŸ
.
br_°¨toff
 + gŸ.
br_blockcou¡
) {

5672 
îr‹
 = -
ENOSPC
;

5673 
îr‹0
;

5682 i‡(
wasdñ
) {

5683 
	`ASSERT
(
	`°¨tblockvÆ
(
dñ
.
br_°¨tblock
) > 0);

5684 i‡(
i§t
) {

5685 
xfs_fûblks_t
 
πexts
;

5687 
πexts
 = 
	`XFS_FSB_TO_B
(
mp
, 
dñ
.
br_blockcou¡
);

5688 
	`do_div
(
πexts
, 
mp
->
m_sb
.
sb_ªxtsize
);

5689 
	`xfs_mod_‰exã¡s
(
mp
, (
öt64_t
)
πexts
);

5690 ()
	`xfs_å™s_ª£rve_quŸa_nblks
(
NULL
,

5691 
ù
, -(()
dñ
.
br_blockcou¡
), 0,

5692 
XFS_QMOPT_RES_RTBLKS
);

5694 ()
	`xfs_å™s_ª£rve_quŸa_nblks
(
NULL
,

5695 
ù
, -(()
dñ
.
br_blockcou¡
), 0,

5696 
XFS_QMOPT_RES_REGBLKS
);

5698 
ù
->
i_dñayed_blks
 -
dñ
.
br_blockcou¡
;

5699 i‡(
cur
)

5700 
cur
->
bc_¥iv©e
.
b
.
Êags
 |=

5701 
XFS_BTCUR_BPRV_WASDEL
;

5702 } i‡(
cur
)

5703 
cur
->
bc_¥iv©e
.
b
.
Êags
 &~
XFS_BTCUR_BPRV_WASDEL
;

5705 
îr‹
 = 
	`xfs_bm≠_dñ_exã¡
(
ù
, 
ç
, &
œ°x
, 
df›s
, 
cur
, &
dñ
,

5706 &
tmp_logÊags
, 
whichf‹k
, 
Êags
);

5707 
logÊags
 |
tmp_logÊags
;

5708 i‡(
îr‹
)

5709 
îr‹0
;

5711 i‡(!
i§t
 && 
wasdñ
)

5712 
	`xfs_mod_fdblocks
(
mp
, (
öt64_t
)
dñ
.
br_blockcou¡
, 
Ál£
);

5714 
bno
 = 
dñ
.
br_°¨toff
 - 1;

5715 
nodñëe
:

5719 i‡(
bno
 !(
xfs_fûeoff_t
)-1 && bnÿ>
°¨t
) {

5720 i‡(
œ°x
 >= 0) {

5721 
	`xfs_õxt_gë_exã¡
(
iÂ
, 
œ°x
, &
gŸ
);

5722 i‡(
gŸ
.
br_°¨toff
 > 
bno
 && --
œ°x
 >= 0)

5723 
	`xfs_õxt_gë_exã¡
(
iÂ
, 
œ°x
, &
gŸ
);

5725 
exäo
++;

5728 i‡(
bno
 =(
xfs_fûeoff_t
)-1 || bnÿ< 
°¨t
 || 
œ°x
 < 0)

5729 *
æí
 = 0;

5731 *
æí
 = 
bno
 - 
°¨t
 + 1;

5736 i‡(
	`xfs_bm≠_√eds_båì
(
ù
, 
whichf‹k
)) {

5737 
	`ASSERT
(
cur
 =
NULL
);

5738 
îr‹
 = 
	`xfs_bm≠_exã¡s_to_båì
(
ç
, 
ù
, 
fú°block
, 
df›s
,

5739 &
cur
, 0, &
tmp_logÊags
, 
whichf‹k
);

5740 
logÊags
 |
tmp_logÊags
;

5741 i‡(
îr‹
)

5742 
îr‹0
;

5747 i‡(
	`xfs_bm≠_w™ts_exã¡s
(
ù
, 
whichf‹k
)) {

5748 
	`ASSERT
(
cur
 !
NULL
);

5749 
îr‹
 = 
	`xfs_bm≠_båì_to_exã¡s
(
ç
, 
ù
, 
cur
, &
tmp_logÊags
,

5750 
whichf‹k
);

5751 
logÊags
 |
tmp_logÊags
;

5752 i‡(
îr‹
)

5753 
îr‹0
;

5758 
îr‹
 = 0;

5759 
îr‹0
:

5764 i‡((
logÊags
 & 
	`xfs_ûog_„xt
(
whichf‹k
)) &&

5765 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_EXTENTS
)

5766 
logÊags
 &~
	`xfs_ûog_„xt
(
whichf‹k
);

5767 i‡((
logÊags
 & 
	`xfs_ûog_fbroŸ
(
whichf‹k
)) &&

5768 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
)

5769 
logÊags
 &~
	`xfs_ûog_fbroŸ
(
whichf‹k
);

5774 i‡(
logÊags
)

5775 
	`xfs_å™s_log_öode
(
ç
, 
ù
, 
logÊags
);

5776 i‡(
cur
) {

5777 i‡(!
îr‹
) {

5778 *
fú°block
 = 
cur
->
bc_¥iv©e
.
b
.firstblock;

5779 
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
 = 0;

5781 
	`xfs_båì_dñ_curs‹
(
cur
,

5782 
îr‹
 ? 
XFS_BTREE_ERROR
 : 
XFS_BTREE_NOERROR
);

5784  
îr‹
;

5785 
	}
}

5789 
	$xfs_bunm≠i
(

5790 
xfs_å™s_t
 *
ç
,

5791 
xfs_öode
 *
ù
,

5792 
xfs_fûeoff_t
 
bno
,

5793 
xfs_fûblks_t
 
Àn
,

5794 
Êags
,

5795 
xfs_exäum_t
 
√xts
,

5796 
xfs_fsblock_t
 *
fú°block
,

5797 
xfs_de„r_›s
 *
df›s
,

5798 *
d⁄e
)

5800 
îr‹
;

5802 
îr‹
 = 
	`__xfs_bunm≠i
(
ç
, 
ù
, 
bno
, &
Àn
, 
Êags
, 
√xts
, 
fú°block
,

5803 
df›s
);

5804 *
d⁄e
 = (
Àn
 == 0);

5805  
îr‹
;

5806 
	}
}

5812 
STATIC
 
boﬁ


5813 
	$xfs_bm£_ˇn_mîge
(

5814 
xfs_bmbt_úec
 *
À·
,

5815 
xfs_bmbt_úec
 *
gŸ
,

5816 
xfs_fûeoff_t
 
shi·
)

5818 
xfs_fûeoff_t
 
°¨toff
;

5820 
°¨toff
 = 
gŸ
->
br_°¨toff
 - 
shi·
;

5826 i‡((
À·
->
br_°¨toff
 +Üe·->
br_blockcou¡
 !
°¨toff
) ||

5827 (
À·
->
br_°¨tblock
 +Üe·->
br_blockcou¡
 !
gŸ
->br_startblock) ||

5828 (
À·
->
br_°©e
 !
gŸ
->br_state) ||

5829 (
À·
->
br_blockcou¡
 + 
gŸ
->br_blockcou¡ > 
MAXEXTLEN
))

5830  
Ál£
;

5832  
åue
;

5833 
	}
}

5844 
STATIC
 

5845 
	$xfs_bm£_mîge
(

5846 
xfs_öode
 *
ù
,

5847 
whichf‹k
,

5848 
xfs_fûeoff_t
 
shi·
,

5849 
cuºít_ext
,

5850 
xfs_bmbt_ªc_ho°
 *
gŸp
,

5851 
xfs_bmbt_ªc_ho°
 *
À·p
,

5852 
xfs_båì_cur
 *
cur
,

5853 *
logÊags
)

5855 
xfs_bmbt_úec
 
gŸ
;

5856 
xfs_bmbt_úec
 
À·
;

5857 
xfs_fûblks_t
 
blockcou¡
;

5858 
îr‹
, 
i
;

5859 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

5861 
	`xfs_bmbt_gë_Æl
(
gŸp
, &
gŸ
);

5862 
	`xfs_bmbt_gë_Æl
(
À·p
, &
À·
);

5863 
blockcou¡
 = 
À·
.
br_blockcou¡
 + 
gŸ
.br_blockcount;

5865 
	`ASSERT
(
	`xfs_isûocked
(
ù
, 
XFS_IOLOCK_EXCL
));

5866 
	`ASSERT
(
	`xfs_isûocked
(
ù
, 
XFS_ILOCK_EXCL
));

5867 
	`ASSERT
(
	`xfs_bm£_ˇn_mîge
(&
À·
, &
gŸ
, 
shi·
));

5874 
	`xfs_bmbt_£t_blockcou¡
(
À·p
, 
blockcou¡
);

5875 
	`xfs_õxt_ªmove
(
ù
, 
cuºít_ext
, 1, 0);

5881 
	`XFS_IFORK_NEXT_SET
(
ù
, 
whichf‹k
,

5882 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) - 1);

5883 *
logÊags
 |
XFS_ILOG_CORE
;

5884 i‡(!
cur
) {

5885 *
logÊags
 |
XFS_ILOG_DEXT
;

5890 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
gŸ
.
br_°¨toff
, gŸ.
br_°¨tblock
,

5891 
gŸ
.
br_blockcou¡
, &
i
);

5892 i‡(
îr‹
)

5893  
îr‹
;

5894 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 1);

5896 
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
);

5897 i‡(
îr‹
)

5898  
îr‹
;

5899 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 1);

5902 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
À·
.
br_°¨toff
,Üe·.
br_°¨tblock
,

5903 
À·
.
br_blockcou¡
, &
i
);

5904 i‡(
îr‹
)

5905  
îr‹
;

5906 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 1);

5908 
À·
.
br_blockcou¡
 = 
blockcou¡
;

5910  
	`xfs_bmbt_upd©e
(
cur
, 
À·
.
br_°¨toff
,Üe·.
br_°¨tblock
,

5911 
À·
.
br_blockcou¡
,Üe·.
br_°©e
);

5912 
	}
}

5917 
STATIC
 

5918 
	$xfs_bm£_shi·_⁄e
(

5919 
xfs_öode
 *
ù
,

5920 
whichf‹k
,

5921 
xfs_fûeoff_t
 
off£t_shi·_fsb
,

5922 *
cuºít_ext
,

5923 
xfs_bmbt_ªc_ho°
 *
gŸp
,

5924 
xfs_båì_cur
 *
cur
,

5925 *
logÊags
,

5926 
shi·_dúe˘i⁄
 
dúe˘i⁄
,

5927 
xfs_de„r_›s
 *
df›s
)

5929 
xfs_if‹k
 *
iÂ
;

5930 
xfs_mou¡
 *
mp
;

5931 
xfs_fûeoff_t
 
°¨toff
;

5932 
xfs_bmbt_ªc_ho°
 *
adj_úe˝
;

5933 
xfs_bmbt_úec
 
gŸ
;

5934 
xfs_bmbt_úec
 
adj_úec
;

5935 
îr‹
;

5936 
i
;

5937 
tŸÆ_exã¡s
;

5939 
mp
 = 
ù
->
i_mou¡
;

5940 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

5941 
tŸÆ_exã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

5943 
	`xfs_bmbt_gë_Æl
(
gŸp
, &
gŸ
);

5946 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, !
	`i¢uŒ°¨tblock
(
gŸ
.
br_°¨tblock
));

5948 i‡(
dúe˘i⁄
 =
SHIFT_LEFT
) {

5949 
°¨toff
 = 
gŸ
.
br_°¨toff
 - 
off£t_shi·_fsb
;

5956 i‡(!*
cuºít_ext
) {

5957 i‡(
gŸ
.
br_°¨toff
 < 
off£t_shi·_fsb
)

5958  -
EINVAL
;

5959 
upd©e_cuºít_ext
;

5965 
adj_úe˝
 = 
	`xfs_õxt_gë_ext
(
iÂ
, *
cuºít_ext
 - 1);

5966 
	`xfs_bmbt_gë_Æl
(
adj_úe˝
, &
adj_úec
);

5968 i‡(
°¨toff
 <

5969 
adj_úec
.
br_°¨toff
 +ádj_úec.
br_blockcou¡
)

5970  -
EINVAL
;

5973 i‡(
	`xfs_bm£_ˇn_mîge
(&
adj_úec
, &
gŸ
,

5974 
off£t_shi·_fsb
)) {

5975 
îr‹
 = 
	`xfs_bm£_mîge
(
ù
, 
whichf‹k
, 
off£t_shi·_fsb
,

5976 *
cuºít_ext
, 
gŸp
, 
adj_úe˝
,

5977 
cur
, 
logÊags
);

5978 i‡(
îr‹
)

5979  
îr‹
;

5980 
adj_úec
 = 
gŸ
;

5981 
upd©e_rm≠
;

5984 
°¨toff
 = 
gŸ
.
br_°¨toff
 + 
off£t_shi·_fsb
;

5986 i‡(*
cuºít_ext
 >(
tŸÆ_exã¡s
 - 1))

5987 
upd©e_cuºít_ext
;

5993 
adj_úe˝
 = 
	`xfs_õxt_gë_ext
(
iÂ
, *
cuºít_ext
 + 1);

5994 
	`xfs_bmbt_gë_Æl
(
adj_úe˝
, &
adj_úec
);

5995 i‡(
°¨toff
 + 
gŸ
.
br_blockcou¡
 > 
adj_úec
.
br_°¨toff
)

5996  -
EINVAL
;

6004 i‡(
	`xfs_bm£_ˇn_mîge
(&
gŸ
, &
adj_úec
, 
off£t_shi·_fsb
))

6005 
	`WARN_ON_ONCE
(1);

6011 
upd©e_cuºít_ext
:

6012 i‡(
dúe˘i⁄
 =
SHIFT_LEFT
)

6013 (*
cuºít_ext
)++;

6015 (*
cuºít_ext
)--;

6016 
	`xfs_bmbt_£t_°¨toff
(
gŸp
, 
°¨toff
);

6017 *
logÊags
 |
XFS_ILOG_CORE
;

6018 
adj_úec
 = 
gŸ
;

6019 i‡(!
cur
) {

6020 *
logÊags
 |
XFS_ILOG_DEXT
;

6021 
upd©e_rm≠
;

6024 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
gŸ
.
br_°¨toff
, gŸ.
br_°¨tblock
,

6025 
gŸ
.
br_blockcou¡
, &
i
);

6026 i‡(
îr‹
)

6027  
îr‹
;

6028 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i
 == 1);

6030 
gŸ
.
br_°¨toff
 = 
°¨toff
;

6031 
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
gŸ
.
br_°¨toff
, gŸ.
br_°¨tblock
,

6032 
gŸ
.
br_blockcou¡
, gŸ.
br_°©e
);

6033 i‡(
îr‹
)

6034  
îr‹
;

6036 
upd©e_rm≠
:

6038 
îr‹
 = 
	`xfs_rm≠_unm≠_exã¡
(
mp
, 
df›s
, 
ù
, 
whichf‹k
, &
adj_úec
);

6039 i‡(
îr‹
)

6040  
îr‹
;

6041 
adj_úec
.
br_°¨toff
 = 
°¨toff
;

6042  
	`xfs_rm≠_m≠_exã¡
(
mp
, 
df›s
, 
ù
, 
whichf‹k
, &
adj_úec
);

6043 
	}
}

6056 
	$xfs_bm≠_shi·_exã¡s
(

6057 
xfs_å™s
 *
ç
,

6058 
xfs_öode
 *
ù
,

6059 
xfs_fûeoff_t
 *
√xt_fsb
,

6060 
xfs_fûeoff_t
 
off£t_shi·_fsb
,

6061 *
d⁄e
,

6062 
xfs_fûeoff_t
 
°›_fsb
,

6063 
xfs_fsblock_t
 *
fú°block
,

6064 
xfs_de„r_›s
 *
df›s
,

6065 
shi·_dúe˘i⁄
 
dúe˘i⁄
,

6066 
num_exts
)

6068 
xfs_båì_cur
 *
cur
 = 
NULL
;

6069 
xfs_bmbt_ªc_ho°
 *
gŸp
;

6070 
xfs_bmbt_úec
 
gŸ
;

6071 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

6072 
xfs_if‹k
 *
iÂ
;

6073 
xfs_exäum_t
 
√xts
 = 0;

6074 
xfs_exäum_t
 
cuºít_ext
;

6075 
xfs_exäum_t
 
tŸÆ_exã¡s
;

6076 
xfs_exäum_t
 
°›_exã¡
;

6077 
îr‹
 = 0;

6078 
whichf‹k
 = 
XFS_DATA_FORK
;

6079 
logÊags
 = 0;

6081 i‡(
	`u∆ikñy
(
	`XFS_TEST_ERROR
(

6082 (
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_EXTENTS
 &&

6083 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
),

6084 
mp
, 
XFS_ERRTAG_BMAPIFORMAT
, 
XFS_RANDOM_BMAPIFORMAT
))) {

6085 
	`XFS_ERROR_REPORT
("xfs_bmap_shift_extents",

6086 
XFS_ERRLEVEL_LOW
, 
mp
);

6087  -
EFSCORRUPTED
;

6090 i‡(
	`XFS_FORCED_SHUTDOWN
(
mp
))

6091  -
EIO
;

6093 
	`ASSERT
(
	`xfs_isûocked
(
ù
, 
XFS_IOLOCK_EXCL
));

6094 
	`ASSERT
(
	`xfs_isûocked
(
ù
, 
XFS_ILOCK_EXCL
));

6095 
	`ASSERT
(
dúe˘i⁄
 =
SHIFT_LEFT
 || dúe˘i⁄ =
SHIFT_RIGHT
);

6096 
	`ASSERT
(*
√xt_fsb
 !
NULLFSBLOCK
 || 
dúe˘i⁄
 =
SHIFT_RIGHT
);

6098 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

6099 i‡(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
)) {

6101 
îr‹
 = 
	`xfs_úód_exã¡s
(
ç
, 
ù
, 
whichf‹k
);

6102 i‡(
îr‹
)

6103  
îr‹
;

6106 i‡(
iÂ
->
if_Êags
 & 
XFS_IFBROOT
) {

6107 
cur
 = 
	`xfs_bmbt_öô_curs‹
(
mp
, 
ç
, 
ù
, 
whichf‹k
);

6108 
cur
->
bc_¥iv©e
.
b
.
fú°block
 = *firstblock;

6109 
cur
->
bc_¥iv©e
.
b
.
df›s
 = dfops;

6110 
cur
->
bc_¥iv©e
.
b
.
Êags
 = 0;

6118 
tŸÆ_exã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

6119 i‡(
tŸÆ_exã¡s
 == 0) {

6120 *
d⁄e
 = 1;

6121 
dñ_curs‹
;

6127 i‡(*
√xt_fsb
 =
NULLFSBLOCK
) {

6128 
gŸp
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
tŸÆ_exã¡s
 - 1);

6129 
	`xfs_bmbt_gë_Æl
(
gŸp
, &
gŸ
);

6130 *
√xt_fsb
 = 
gŸ
.
br_°¨toff
;

6131 i‡(
°›_fsb
 > *
√xt_fsb
) {

6132 *
d⁄e
 = 1;

6133 
dñ_curs‹
;

6138 i‡(
dúe˘i⁄
 =
SHIFT_RIGHT
) {

6139 
gŸp
 = 
	`xfs_õxt_bno_to_ext
(
iÂ
, 
°›_fsb
, &
°›_exã¡
);

6141 
°›_exã¡
--;

6143 
°›_exã¡
 = 
tŸÆ_exã¡s
;

6154 
gŸp
 = 
	`xfs_õxt_bno_to_ext
(
iÂ
, *
√xt_fsb
, &
cuºít_ext
);

6155 i‡(!
gŸp
) {

6156 *
d⁄e
 = 1;

6157 
dñ_curs‹
;

6161 i‡((
dúe˘i⁄
 =
SHIFT_LEFT
 && 
cuºít_ext
 >
°›_exã¡
) ||

6162 (
dúe˘i⁄
 =
SHIFT_RIGHT
 && 
cuºít_ext
 <
°›_exã¡
)) {

6163 
îr‹
 = -
EIO
;

6164 
dñ_curs‹
;

6167 
√xts
++ < 
num_exts
) {

6168 
îr‹
 = 
	`xfs_bm£_shi·_⁄e
(
ù
, 
whichf‹k
, 
off£t_shi·_fsb
,

6169 &
cuºít_ext
, 
gŸp
, 
cur
, &
logÊags
,

6170 
dúe˘i⁄
, 
df›s
);

6171 i‡(
îr‹
)

6172 
dñ_curs‹
;

6177 i‡(
dúe˘i⁄
 =
SHIFT_LEFT
) {

6178 
tŸÆ_exã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

6179 
°›_exã¡
 = 
tŸÆ_exã¡s
;

6182 i‡(
cuºít_ext
 =
°›_exã¡
) {

6183 *
d⁄e
 = 1;

6184 *
√xt_fsb
 = 
NULLFSBLOCK
;

6187 
gŸp
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
cuºít_ext
);

6190 i‡(!*
d⁄e
) {

6191 
	`xfs_bmbt_gë_Æl
(
gŸp
, &
gŸ
);

6192 *
√xt_fsb
 = 
gŸ
.
br_°¨toff
;

6195 
dñ_curs‹
:

6196 i‡(
cur
)

6197 
	`xfs_båì_dñ_curs‹
(
cur
,

6198 
îr‹
 ? 
XFS_BTREE_ERROR
 : 
XFS_BTREE_NOERROR
);

6200 i‡(
logÊags
)

6201 
	`xfs_å™s_log_öode
(
ç
, 
ù
, 
logÊags
);

6203  
îr‹
;

6204 
	}
}

6212 
STATIC
 

6213 
	$xfs_bm≠_•lô_exã¡_©
(

6214 
xfs_å™s
 *
ç
,

6215 
xfs_öode
 *
ù
,

6216 
xfs_fûeoff_t
 
•lô_fsb
,

6217 
xfs_fsblock_t
 *
fú°fsb
,

6218 
xfs_de„r_›s
 *
df›s
)

6220 
whichf‹k
 = 
XFS_DATA_FORK
;

6221 
xfs_båì_cur
 *
cur
 = 
NULL
;

6222 
xfs_bmbt_ªc_ho°
 *
gŸp
;

6223 
xfs_bmbt_úec
 
gŸ
;

6224 
xfs_bmbt_úec
 
√w
;

6225 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

6226 
xfs_if‹k
 *
iÂ
;

6227 
xfs_fsblock_t
 
gŸblk˙t
;

6228 
xfs_exäum_t
 
cuºít_ext
;

6229 
îr‹
 = 0;

6230 
logÊags
 = 0;

6231 
i
 = 0;

6233 i‡(
	`u∆ikñy
(
	`XFS_TEST_ERROR
(

6234 (
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_EXTENTS
 &&

6235 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
),

6236 
mp
, 
XFS_ERRTAG_BMAPIFORMAT
, 
XFS_RANDOM_BMAPIFORMAT
))) {

6237 
	`XFS_ERROR_REPORT
("xfs_bmap_split_extent_at",

6238 
XFS_ERRLEVEL_LOW
, 
mp
);

6239  -
EFSCORRUPTED
;

6242 i‡(
	`XFS_FORCED_SHUTDOWN
(
mp
))

6243  -
EIO
;

6245 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

6246 i‡(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
)) {

6248 
îr‹
 = 
	`xfs_úód_exã¡s
(
ç
, 
ù
, 
whichf‹k
);

6249 i‡(
îr‹
)

6250  
îr‹
;

6258 
gŸp
 = 
	`xfs_õxt_bno_to_ext
(
iÂ
, 
•lô_fsb
, &
cuºít_ext
);

6259 i‡(!
gŸp
)

6262 
	`xfs_bmbt_gë_Æl
(
gŸp
, &
gŸ
);

6268 i‡(
gŸ
.
br_°¨toff
 >
•lô_fsb
)

6271 
gŸblk˙t
 = 
•lô_fsb
 - 
gŸ
.
br_°¨toff
;

6272 
√w
.
br_°¨toff
 = 
•lô_fsb
;

6273 
√w
.
br_°¨tblock
 = 
gŸ
.br_°¨tblock + 
gŸblk˙t
;

6274 
√w
.
br_blockcou¡
 = 
gŸ
.br_blockcou¡ - 
gŸblk˙t
;

6275 
√w
.
br_°©e
 = 
gŸ
.br_state;

6277 i‡(
iÂ
->
if_Êags
 & 
XFS_IFBROOT
) {

6278 
cur
 = 
	`xfs_bmbt_öô_curs‹
(
mp
, 
ç
, 
ù
, 
whichf‹k
);

6279 
cur
->
bc_¥iv©e
.
b
.
fú°block
 = *
fú°fsb
;

6280 
cur
->
bc_¥iv©e
.
b
.
df›s
 = dfops;

6281 
cur
->
bc_¥iv©e
.
b
.
Êags
 = 0;

6282 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
gŸ
.
br_°¨toff
,

6283 
gŸ
.
br_°¨tblock
,

6284 
gŸ
.
br_blockcou¡
,

6285 &
i
);

6286 i‡(
îr‹
)

6287 
dñ_curs‹
;

6288 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
dñ_curs‹
);

6291 
	`xfs_bmbt_£t_blockcou¡
(
gŸp
, 
gŸblk˙t
);

6292 
gŸ
.
br_blockcou¡
 = 
gŸblk˙t
;

6294 
logÊags
 = 
XFS_ILOG_CORE
;

6295 i‡(
cur
) {

6296 
îr‹
 = 
	`xfs_bmbt_upd©e
(
cur
, 
gŸ
.
br_°¨toff
,

6297 
gŸ
.
br_°¨tblock
,

6298 
gŸ
.
br_blockcou¡
,

6299 
gŸ
.
br_°©e
);

6300 i‡(
îr‹
)

6301 
dñ_curs‹
;

6303 
logÊags
 |
XFS_ILOG_DEXT
;

6306 
cuºít_ext
++;

6307 
	`xfs_õxt_ö£π
(
ù
, 
cuºít_ext
, 1, &
√w
, 0);

6308 
	`XFS_IFORK_NEXT_SET
(
ù
, 
whichf‹k
,

6309 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) + 1);

6311 i‡(
cur
) {

6312 
îr‹
 = 
	`xfs_bmbt_lookup_eq
(
cur
, 
√w
.
br_°¨toff
,

6313 
√w
.
br_°¨tblock
,Çew.
br_blockcou¡
,

6314 &
i
);

6315 i‡(
îr‹
)

6316 
dñ_curs‹
;

6317 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =0, 
dñ_curs‹
);

6318 
cur
->
bc_ªc
.
b
.
br_°©e
 = 
√w
.br_state;

6320 
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
);

6321 i‡(
îr‹
)

6322 
dñ_curs‹
;

6323 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
dñ_curs‹
);

6329 i‡(
	`xfs_bm≠_√eds_båì
(
ù
, 
whichf‹k
)) {

6330 
tmp_logÊags
;

6332 
	`ASSERT
(
cur
 =
NULL
);

6333 
îr‹
 = 
	`xfs_bm≠_exã¡s_to_båì
(
ç
, 
ù
, 
fú°fsb
, 
df›s
,

6334 &
cur
, 0, &
tmp_logÊags
, 
whichf‹k
);

6335 
logÊags
 |
tmp_logÊags
;

6338 
dñ_curs‹
:

6339 i‡(
cur
) {

6340 
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
 = 0;

6341 
	`xfs_båì_dñ_curs‹
(
cur
,

6342 
îr‹
 ? 
XFS_BTREE_ERROR
 : 
XFS_BTREE_NOERROR
);

6345 i‡(
logÊags
)

6346 
	`xfs_å™s_log_öode
(
ç
, 
ù
, 
logÊags
);

6347  
îr‹
;

6348 
	}
}

6351 
	$xfs_bm≠_•lô_exã¡
(

6352 
xfs_öode
 *
ù
,

6353 
xfs_fûeoff_t
 
•lô_fsb
)

6355 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

6356 
xfs_å™s
 *
ç
;

6357 
xfs_de„r_›s
 
df›s
;

6358 
xfs_fsblock_t
 
fú°fsb
;

6359 
îr‹
;

6361 
îr‹
 = 
	`xfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_wrôe
,

6362 
	`XFS_DIOSTRAT_SPACE_RES
(
mp
, 0), 0, 0, &
ç
);

6363 i‡(
îr‹
)

6364  
îr‹
;

6366 
	`xfs_ûock
(
ù
, 
XFS_ILOCK_EXCL
);

6367 
	`xfs_å™s_ijoö
(
ç
, 
ù
, 
XFS_ILOCK_EXCL
);

6369 
	`xfs_de„r_öô
(&
df›s
, &
fú°fsb
);

6371 
îr‹
 = 
	`xfs_bm≠_•lô_exã¡_©
(
ç
, 
ù
, 
•lô_fsb
,

6372 &
fú°fsb
, &
df›s
);

6373 i‡(
îr‹
)

6374 
out
;

6376 
îr‹
 = 
	`xfs_de„r_föish
(&
ç
, &
df›s
, 
NULL
);

6377 i‡(
îr‹
)

6378 
out
;

6380  
	`xfs_å™s_commô
(
ç
);

6382 
out
:

6383 
	`xfs_de„r_ˇn˚l
(&
df›s
);

6384 
	`xfs_å™s_ˇn˚l
(
ç
);

6385  
îr‹
;

6386 
	}
}

6389 
boﬁ


6390 
	$xfs_bm≠_is_upd©e_√eded
(

6391 
xfs_bmbt_úec
 *
bm≠
)

6393  
bm≠
->
br_°¨tblock
 !
HOLESTARTBLOCK
 &&

6394 
bm≠
->
br_°¨tblock
 !
DELAYSTARTBLOCK
;

6395 
	}
}

6399 
	$__xfs_bm≠_add
(

6400 
xfs_mou¡
 *
mp
,

6401 
xfs_de„r_›s
 *
df›s
,

6402 
xfs_bm≠_öã¡_ty≥
 
ty≥
,

6403 
xfs_öode
 *
ù
,

6404 
whichf‹k
,

6405 
xfs_bmbt_úec
 *
bm≠
)

6407 
îr‹
;

6408 
xfs_bm≠_öã¡
 *
bi
;

6410 
	`åa˚_xfs_bm≠_de„r
(
mp
,

6411 
	`XFS_FSB_TO_AGNO
(
mp
, 
bm≠
->
br_°¨tblock
),

6412 
ty≥
,

6413 
	`XFS_FSB_TO_AGBNO
(
mp
, 
bm≠
->
br_°¨tblock
),

6414 
ù
->
i_öo
, 
whichf‹k
,

6415 
bm≠
->
br_°¨toff
,

6416 
bm≠
->
br_blockcou¡
,

6417 
bm≠
->
br_°©e
);

6419 
bi
 = 
	`kmem_Æloc
((
xfs_bm≠_öã¡
), 
KM_SLEEP
 | 
KM_NOFS
);

6420 
	`INIT_LIST_HEAD
(&
bi
->
bi_li°
);

6421 
bi
->
bi_ty≥
 = 
ty≥
;

6422 
bi
->
bi_ow√r
 = 
ù
;

6423 
bi
->
bi_whichf‹k
 = 
whichf‹k
;

6424 
bi
->
bi_bm≠
 = *
bm≠
;

6426 
îr‹
 = 
	`xfs_de„r_joö
(
df›s
, 
bi
->
bi_ow√r
);

6427 i‡(
îr‹
) {

6428 
	`kmem_‰ì
(
bi
);

6429  
îr‹
;

6432 
	`xfs_de„r_add
(
df›s
, 
XFS_DEFER_OPS_TYPE_BMAP
, &
bi
->
bi_li°
);

6434 
	}
}

6438 
	$xfs_bm≠_m≠_exã¡
(

6439 
xfs_mou¡
 *
mp
,

6440 
xfs_de„r_›s
 *
df›s
,

6441 
xfs_öode
 *
ù
,

6442 
xfs_bmbt_úec
 *
PREV
)

6444 i‡(!
	`xfs_bm≠_is_upd©e_√eded
(
PREV
))

6447  
	`__xfs_bm≠_add
(
mp
, 
df›s
, 
XFS_BMAP_MAP
, 
ù
,

6448 
XFS_DATA_FORK
, 
PREV
);

6449 
	}
}

6453 
	$xfs_bm≠_unm≠_exã¡
(

6454 
xfs_mou¡
 *
mp
,

6455 
xfs_de„r_›s
 *
df›s
,

6456 
xfs_öode
 *
ù
,

6457 
xfs_bmbt_úec
 *
PREV
)

6459 i‡(!
	`xfs_bm≠_is_upd©e_√eded
(
PREV
))

6462  
	`__xfs_bm≠_add
(
mp
, 
df›s
, 
XFS_BMAP_UNMAP
, 
ù
,

6463 
XFS_DATA_FORK
, 
PREV
);

6464 
	}
}

6471 
	$xfs_bm≠_föish_⁄e
(

6472 
xfs_å™s
 *
ç
,

6473 
xfs_de„r_›s
 *
df›s
,

6474 
xfs_öode
 *
ù
,

6475 
xfs_bm≠_öã¡_ty≥
 
ty≥
,

6476 
whichf‹k
,

6477 
xfs_fûeoff_t
 
°¨toff
,

6478 
xfs_fsblock_t
 
°¨tblock
,

6479 
xfs_fûblks_t
 
blockcou¡
,

6480 
xfs_ex¡°_t
 
°©e
)

6482 
xfs_bmbt_úec
 
bm≠
;

6483 
nim≠s
 = 1;

6484 
xfs_fsblock_t
 
fú°fsb
;

6485 
Êags
 = 
XFS_BMAPI_REMAP
;

6486 
d⁄e
;

6487 
îr‹
 = 0;

6489 
bm≠
.
br_°¨tblock
 = 
°¨tblock
;

6490 
bm≠
.
br_°¨toff
 = 
°¨toff
;

6491 
bm≠
.
br_blockcou¡
 = 
blockcou¡
;

6492 
bm≠
.
br_°©e
 = 
°©e
;

6494 
	`åa˚_xfs_bm≠_de„ºed
(
ç
->
t_mou¡p
,

6495 
	`XFS_FSB_TO_AGNO
(
ç
->
t_mou¡p
, 
°¨tblock
), 
ty≥
,

6496 
	`XFS_FSB_TO_AGBNO
(
ç
->
t_mou¡p
, 
°¨tblock
),

6497 
ù
->
i_öo
, 
whichf‹k
, 
°¨toff
, 
blockcou¡
, 
°©e
);

6499 i‡(
whichf‹k
 !
XFS_DATA_FORK
 && whichf‹k !
XFS_ATTR_FORK
)

6500  -
EFSCORRUPTED
;

6501 i‡(
whichf‹k
 =
XFS_ATTR_FORK
)

6502 
Êags
 |
XFS_BMAPI_ATTRFORK
;

6504 i‡(
	`XFS_TEST_ERROR
(
Ál£
, 
ç
->
t_mou¡p
,

6505 
XFS_ERRTAG_BMAP_FINISH_ONE
,

6506 
XFS_RANDOM_BMAP_FINISH_ONE
))

6507  -
EIO
;

6509 
ty≥
) {

6510 
XFS_BMAP_MAP
:

6511 
fú°fsb
 = 
bm≠
.
br_°¨tblock
;

6512 
îr‹
 = 
	`xfs_bm≠i_wrôe
(
ç
, 
ù
, 
bm≠
.
br_°¨toff
,

6513 
bm≠
.
br_blockcou¡
, 
Êags
, &
fú°fsb
,

6514 
bm≠
.
br_blockcou¡
, &bm≠, &
nim≠s
,

6515 
df›s
);

6517 
XFS_BMAP_UNMAP
:

6518 
îr‹
 = 
	`xfs_bunm≠i
(
ç
, 
ù
, 
bm≠
.
br_°¨toff
,

6519 
bm≠
.
br_blockcou¡
, 
Êags
, 1, &
fú°fsb
,

6520 
df›s
, &
d⁄e
);

6521 
	`ASSERT
(
d⁄e
);

6524 
	`ASSERT
(0);

6525 
îr‹
 = -
EFSCORRUPTED
;

6528  
îr‹
;

6529 
	}
}

	@libxfs/xfs_bmap.h

18 #i‚de‡
__XFS_BMAP_H__


19 
	#__XFS_BMAP_H__


	)

21 
	ggëbm≠
;

22 
	gxfs_bmbt_úec
;

23 
	gxfs_if‹k
;

24 
	gxfs_öode
;

25 
	gxfs_mou¡
;

26 
	gxfs_å™s
;

28 
kmem_z⁄e_t
 *
xfs_bm≠_‰ì_ôem_z⁄e
;

33 
	sxfs_bmÆloˇ
 {

34 
xfs_fsblock_t
 *
	mfú°block
;

35 
xfs_de„r_›s
 *
	mdf›s
;

36 
xfs_å™s
 *
	mç
;

37 
xfs_öode
 *
	mù
;

38 
xfs_bmbt_úec
 
	m¥ev
;

39 
xfs_bmbt_úec
 
	mgŸ
;

41 
xfs_fûeoff_t
 
	moff£t
;

42 
xfs_exéí_t
 
	mÀngth
;

43 
xfs_fsblock_t
 
	mblkno
;

45 
xfs_båì_cur
 *
	mcur
;

46 
xfs_exäum_t
 
	midx
;

47 
	m«Œocs
;

48 
	mlogÊags
;

50 
xfs_exéí_t
 
	mtŸÆ
;

51 
xfs_exéí_t
 
	mmöÀn
;

52 
xfs_exéí_t
 
	mmöÀ·
;

53 
boﬁ
 
	meof
;

54 
boﬁ
 
	mwasdñ
;

55 
boﬁ
 
	m´of
;

56 
boﬁ
 
	mc⁄v
;

57 
	md©©y≥
;

58 
	mÊags
;

65 
	sxfs_exã¡_‰ì_ôem


67 
xfs_fsblock_t
 
	mxefi_°¨tblock
;

68 
xfs_exéí_t
 
	mxefi_blockcou¡
;

69 
li°_hód
 
	mxefi_li°
;

70 
xfs_ow√r_öfo
 
	mxefi_oöfo
;

73 
	#XFS_BMAP_MAX_NMAP
 4

	)

78 
	#XFS_BMAPI_ENTIRE
 0x001

	)

79 
	#XFS_BMAPI_METADATA
 0x002

	)

80 
	#XFS_BMAPI_ATTRFORK
 0x004

	)

81 
	#XFS_BMAPI_PREALLOC
 0x008

	)

82 
	#XFS_BMAPI_IGSTATE
 0x010

	)

84 
	#XFS_BMAPI_CONTIG
 0x020

	)

90 
	#XFS_BMAPI_CONVERT
 0x040

	)

98 
	#XFS_BMAPI_ZERO
 0x080

	)

108 
	#XFS_BMAPI_REMAP
 0x100

	)

111 
	#XFS_BMAPI_COWFORK
 0x200

	)

114 
	#XFS_BMAPI_DELALLOC
 0x400

	)

116 
	#XFS_BMAPI_FLAGS
 \

117 { 
XFS_BMAPI_ENTIRE
, "ENTIRE" }, \

118 { 
XFS_BMAPI_METADATA
, "METADATA" }, \

119 { 
XFS_BMAPI_ATTRFORK
, "ATTRFORK" }, \

120 { 
XFS_BMAPI_PREALLOC
, "PREALLOC" }, \

121 { 
XFS_BMAPI_IGSTATE
, "IGSTATE" }, \

122 { 
XFS_BMAPI_CONTIG
, "CONTIG" }, \

123 { 
XFS_BMAPI_CONVERT
, "CONVERT" }, \

124 { 
XFS_BMAPI_ZERO
, "ZERO" }, \

125 { 
XFS_BMAPI_REMAP
, "REMAP" }, \

126 { 
XFS_BMAPI_COWFORK
, "COWFORK" }, \

127 { 
XFS_BMAPI_DELALLOC
, "DELALLOC" }

	)

130 
ölöe
 
	$xfs_bm≠i_aÊag
(
w
)

132  (
w
 =
XFS_ATTR_FORK
 ? 
XFS_BMAPI_ATTRFORK
 :

133 (
w
 =
XFS_COW_FORK
 ? 
XFS_BMAPI_COWFORK
 : 0));

134 
	}
}

136 
ölöe
 
	$xfs_bm≠i_whichf‹k
(
bm≠i_Êags
)

138 i‡(
bm≠i_Êags
 & 
XFS_BMAPI_COWFORK
)

139  
XFS_COW_FORK
;

140 i‡(
bm≠i_Êags
 & 
XFS_BMAPI_ATTRFORK
)

141  
XFS_ATTR_FORK
;

142  
XFS_DATA_FORK
;

143 
	}
}

148 
	#DELAYSTARTBLOCK
 ((
xfs_fsblock_t
)-1LL)

	)

149 
	#HOLESTARTBLOCK
 ((
xfs_fsblock_t
)-2LL)

	)

154 
	#BMAP_LEFT_CONTIG
 (1 << 0)

	)

155 
	#BMAP_RIGHT_CONTIG
 (1 << 1)

	)

156 
	#BMAP_LEFT_FILLING
 (1 << 2)

	)

157 
	#BMAP_RIGHT_FILLING
 (1 << 3)

	)

158 
	#BMAP_LEFT_DELAY
 (1 << 4)

	)

159 
	#BMAP_RIGHT_DELAY
 (1 << 5)

	)

160 
	#BMAP_LEFT_VALID
 (1 << 6)

	)

161 
	#BMAP_RIGHT_VALID
 (1 << 7)

	)

162 
	#BMAP_ATTRFORK
 (1 << 8)

	)

163 
	#BMAP_COWFORK
 (1 << 9)

	)

165 
	#XFS_BMAP_EXT_FLAGS
 \

166 { 
BMAP_LEFT_CONTIG
, "LC" }, \

167 { 
BMAP_RIGHT_CONTIG
, "RC" }, \

168 { 
BMAP_LEFT_FILLING
, "LF" }, \

169 { 
BMAP_RIGHT_FILLING
, "RF" }, \

170 { 
BMAP_ATTRFORK
, "ATTR" }, \

171 { 
BMAP_COWFORK
, "COW" }

	)

181 
	#XFS_BMAP_MAX_SHIFT_EXTENTS
 1

	)

183 
	eshi·_dúe˘i⁄
 {

184 
	mSHIFT_LEFT
 = 0,

185 
	mSHIFT_RIGHT
,

188 #ifde‡
DEBUG


189 
xfs_bm≠_åa˚_exli°
(
xfs_öode
 *
ù
, 
xfs_exäum_t
 
˙t
,

190 
whichf‹k
, 
ˇŒî_ù
);

191 
	#XFS_BMAP_TRACE_EXLIST
(
ù
,
c
,
w
) \

192 
	`xfs_bm≠_åa˚_exli°
(
ù
,
c
,
w
, 
_THIS_IP_
)

	)

194 
	#XFS_BMAP_TRACE_EXLIST
(
ù
,
c
,
w
)

	)

197 
xfs_åim_exã¡
(
xfs_bmbt_úec
 *
úec
, 
xfs_fûeoff_t
 
bno
,

198 
xfs_fûblks_t
 
Àn
);

199 
xfs_bm≠_add_©åf‹k
(
xfs_öode
 *
ù
, 
size
, 
rsvd
);

200 
xfs_bm≠_loˇl_to_exã¡s_em±y
(
xfs_öode
 *
ù
, 
whichf‹k
);

201 
xfs_bm≠_add_‰ì
(
xfs_mou¡
 *
mp
, 
xfs_de„r_›s
 *
df›s
,

202 
xfs_fsblock_t
 
bno
, 
xfs_fûblks_t
 
Àn
,

203 
xfs_ow√r_öfo
 *
oöfo
);

204 
xfs_bm≠_compuã_maxÀvñs
(
xfs_mou¡
 *
mp
, 
whichf‹k
);

205 
xfs_bm≠_fú°_unu£d
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
ù
,

206 
xfs_exéí_t
 
Àn
, 
xfs_fûeoff_t
 *
unu£d
, 
whichf‹k
);

207 
xfs_bm≠_œ°_bef‹e
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
ù
,

208 
xfs_fûeoff_t
 *
œ°_block
, 
whichf‹k
);

209 
xfs_bm≠_œ°_off£t
(
xfs_öode
 *
ù
, 
xfs_fûeoff_t
 *
unu£d
,

210 
whichf‹k
);

211 
xfs_bm≠_⁄e_block
(
xfs_öode
 *
ù
, 
whichf‹k
);

212 
xfs_bm≠_ªad_exã¡s
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
ù
,

213 
whichf‹k
);

214 
xfs_bm≠i_ªad
(
xfs_öode
 *
ù
, 
xfs_fûeoff_t
 
bno
,

215 
xfs_fûblks_t
 
Àn
, 
xfs_bmbt_úec
 *
mvÆ
,

216 *
nm≠
, 
Êags
);

217 
xfs_bm≠i_wrôe
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
ù
,

218 
xfs_fûeoff_t
 
bno
, 
xfs_fûblks_t
 
Àn
, 
Êags
,

219 
xfs_fsblock_t
 *
fú°block
, 
xfs_exéí_t
 
tŸÆ
,

220 
xfs_bmbt_úec
 *
mvÆ
, *
nm≠
,

221 
xfs_de„r_›s
 *
df›s
);

222 
__xfs_bunm≠i
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
ù
,

223 
xfs_fûeoff_t
 
bno
, 
xfs_fûblks_t
 *
æí
, 
Êags
,

224 
xfs_exäum_t
 
√xts
, 
xfs_fsblock_t
 *
fú°block
,

225 
xfs_de„r_›s
 *
df›s
);

226 
xfs_bunm≠i
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
ù
,

227 
xfs_fûeoff_t
 
bno
, 
xfs_fûblks_t
 
Àn
, 
Êags
,

228 
xfs_exäum_t
 
√xts
, 
xfs_fsblock_t
 *
fú°block
,

229 
xfs_de„r_›s
 *
df›s
, *
d⁄e
);

230 
xfs_bm≠_dñ_exã¡_dñay
(
xfs_öode
 *
ù
, 
whichf‹k
,

231 
xfs_exäum_t
 *
idx
, 
xfs_bmbt_úec
 *
gŸ
,

232 
xfs_bmbt_úec
 *
dñ
);

233 
xfs_bm≠_dñ_exã¡_cow
(
xfs_öode
 *
ù
, 
xfs_exäum_t
 *
idx
,

234 
xfs_bmbt_úec
 *
gŸ
, xfs_bmbt_úe¯*
dñ
);

235 
xfs_check_no°©e_exã¡s
(
xfs_if‹k
 *
iÂ
, 
xfs_exäum_t
 
idx
,

236 
xfs_exäum_t
 
num
);

237 
uöt
 
xfs_deÁu…_©åoff£t
(
xfs_öode
 *
ù
);

238 
xfs_bm≠_shi·_exã¡s
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
ù
,

239 
xfs_fûeoff_t
 *
√xt_fsb
, xfs_fûeoff_à
off£t_shi·_fsb
,

240 *
d⁄e
, 
xfs_fûeoff_t
 
°›_fsb
, 
xfs_fsblock_t
 *
fú°block
,

241 
xfs_de„r_›s
 *
df›s
, 
shi·_dúe˘i⁄
 
dúe˘i⁄
,

242 
num_exts
);

243 
xfs_bm≠_•lô_exã¡
(
xfs_öode
 *
ù
, 
xfs_fûeoff_t
 
•lô_off£t
);

244 
xfs_bm≠i_ª£rve_dñÆloc
(
xfs_öode
 *
ù
, 
whichf‹k
,

245 
xfs_fûeoff_t
 
off
, 
xfs_fûblks_t
 
Àn
, xfs_fûblks_à
¥óŒoc
,

246 
xfs_bmbt_úec
 *
gŸ
, 
xfs_exäum_t
 *
œ°x
, 
eof
);

248 
	exfs_bm≠_öã¡_ty≥
 {

249 
	mXFS_BMAP_MAP
 = 1,

250 
	mXFS_BMAP_UNMAP
,

253 
	sxfs_bm≠_öã¡
 {

254 
li°_hód
 
	mbi_li°
;

255 
xfs_bm≠_öã¡_ty≥
 
	mbi_ty≥
;

256 
xfs_öode
 *
	mbi_ow√r
;

257 
	mbi_whichf‹k
;

258 
xfs_bmbt_úec
 
	mbi_bm≠
;

261 
xfs_bm≠_föish_⁄e
(
xfs_å™s
 *
ç
, 
xfs_de„r_›s
 *
df›s
,

262 
xfs_öode
 *
ù
, 
xfs_bm≠_öã¡_ty≥
 
ty≥
,

263 
whichf‹k
, 
xfs_fûeoff_t
 
°¨toff
, 
xfs_fsblock_t
 
°¨tblock
,

264 
xfs_fûblks_t
 
blockcou¡
, 
xfs_ex¡°_t
 
°©e
);

265 
xfs_bm≠_m≠_exã¡
(
xfs_mou¡
 *
mp
, 
xfs_de„r_›s
 *
df›s
,

266 
xfs_öode
 *
ù
, 
xfs_bmbt_úec
 *
im≠
);

267 
xfs_bm≠_unm≠_exã¡
(
xfs_mou¡
 *
mp
, 
xfs_de„r_›s
 *
df›s
,

268 
xfs_öode
 *
ù
, 
xfs_bmbt_úec
 *
im≠
);

	@libxfs/xfs_bmap_btree.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_bô.h
"

25 
	~"xfs_mou¡.h
"

26 
	~"xfs_de„r.h
"

27 
	~"xfs_öode.h
"

28 
	~"xfs_å™s.h
"

29 
	~"xfs_Æloc.h
"

30 
	~"xfs_båì.h
"

31 
	~"xfs_bm≠_båì.h
"

32 
	~"xfs_bm≠.h
"

33 
	~"xfs_åa˚.h
"

34 
	~"xfs_cksum.h
"

35 
	~"xfs_rm≠.h
"

41 
STATIC
 
xfs_ex¡°_t


42 
	$xfs_exã¡_°©e
(

43 
xfs_fûblks_t
 
blks
,

44 
exã¡_Êag
)

46 i‡(
exã¡_Êag
) {

47 
	`ASSERT
(
blks
 != 0);

48  
XFS_EXT_UNWRITTEN
;

50  
XFS_EXT_NORM
;

51 
	}
}

57 
	$xfs_bmdr_to_bmbt
(

58 
xfs_öode
 *
ù
,

59 
xfs_bmdr_block_t
 *
dblock
,

60 
dblockÀn
,

61 
xfs_båì_block
 *
rblock
,

62 
rblockÀn
)

64 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

65 
dmxr
;

66 
xfs_bmbt_key_t
 *
fkp
;

67 
__be64
 *
Âp
;

68 
xfs_bmbt_key_t
 *
tkp
;

69 
__be64
 *
çp
;

71 
	`xfs_båì_öô_block_öt
(
mp
, 
rblock
, 
XFS_BUF_DADDR_NULL
,

72 
XFS_BTNUM_BMAP
, 0, 0, 
ù
->
i_öo
,

73 
XFS_BTREE_LONG_PTRS
);

74 
rblock
->
bb_Àvñ
 = 
dblock
->bb_level;

75 
	`ASSERT
(
	`be16_to_˝u
(
rblock
->
bb_Àvñ
) > 0);

76 
rblock
->
bb_numªcs
 = 
dblock
->bb_numrecs;

77 
dmxr
 = 
	`xfs_bmdr_maxªcs
(
dblockÀn
, 0);

78 
fkp
 = 
	`XFS_BMDR_KEY_ADDR
(
dblock
, 1);

79 
tkp
 = 
	`XFS_BMBT_KEY_ADDR
(
mp
, 
rblock
, 1);

80 
Âp
 = 
	`XFS_BMDR_PTR_ADDR
(
dblock
, 1, 
dmxr
);

81 
çp
 = 
	`XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
rblock
, 1, 
rblockÀn
);

82 
dmxr
 = 
	`be16_to_˝u
(
dblock
->
bb_numªcs
);

83 
	`mem˝y
(
tkp
, 
fkp
, (*fkpË* 
dmxr
);

84 
	`mem˝y
(
çp
, 
Âp
, (*ÂpË* 
dmxr
);

85 
	}
}

92 
STATIC
 

93 
	$__xfs_bmbt_gë_Æl
(

94 
__uöt64_t
 
l0
,

95 
__uöt64_t
 
l1
,

96 
xfs_bmbt_úec_t
 *
s
)

98 
ext_Êag
;

99 
xfs_ex¡°_t
 
°
;

101 
ext_Êag
 = ()(
l0
 >> (64 - 
BMBT_EXNTFLAG_BITLEN
));

102 
s
->
br_°¨toff
 = ((
xfs_fûeoff_t
)
l0
 &

103 
	`xfs_mask64lo
(64 - 
BMBT_EXNTFLAG_BITLEN
)) >> 9;

104 
s
->
br_°¨tblock
 = (((
xfs_fsblock_t
)
l0
 & 
	`xfs_mask64lo
(9)) << 43) |

105 (((
xfs_fsblock_t
)
l1
) >> 21);

106 
s
->
br_blockcou¡
 = (
xfs_fûblks_t
)(
l1
 & 
	`xfs_mask64lo
(21));

108 i‡(
ext_Êag
) {

109 
	`ASSERT
(
s
->
br_blockcou¡
 != 0);

110 
°
 = 
XFS_EXT_UNWRITTEN
;

112 
°
 = 
XFS_EXT_NORM
;

113 
s
->
br_°©e
 = 
°
;

114 
	}
}

117 
	$xfs_bmbt_gë_Æl
(

118 
xfs_bmbt_ªc_ho°_t
 *
r
,

119 
xfs_bmbt_úec_t
 *
s
)

121 
	`__xfs_bmbt_gë_Æl
(
r
->
l0
,Ñ->
l1
, 
s
);

122 
	}
}

127 
xfs_fûblks_t


128 
	$xfs_bmbt_gë_blockcou¡
(

129 
xfs_bmbt_ªc_ho°_t
 *
r
)

131  (
xfs_fûblks_t
)(
r
->
l1
 & 
	`xfs_mask64lo
(21));

132 
	}
}

137 
xfs_fsblock_t


138 
	$xfs_bmbt_gë_°¨tblock
(

139 
xfs_bmbt_ªc_ho°_t
 *
r
)

141  (((
xfs_fsblock_t
)
r
->
l0
 & 
	`xfs_mask64lo
(9)) << 43) |

142 (((
xfs_fsblock_t
)
r
->
l1
) >> 21);

143 
	}
}

148 
xfs_fûeoff_t


149 
	$xfs_bmbt_gë_°¨toff
(

150 
xfs_bmbt_ªc_ho°_t
 *
r
)

152  ((
xfs_fûeoff_t
)
r
->
l0
 &

153 
	`xfs_mask64lo
(64 - 
BMBT_EXNTFLAG_BITLEN
)) >> 9;

154 
	}
}

156 
xfs_ex¡°_t


157 
	$xfs_bmbt_gë_°©e
(

158 
xfs_bmbt_ªc_ho°_t
 *
r
)

160 
ext_Êag
;

162 
ext_Êag
 = ()((
r
->
l0
Ë>> (64 - 
BMBT_EXNTFLAG_BITLEN
));

163  
	`xfs_exã¡_°©e
(
	`xfs_bmbt_gë_blockcou¡
(
r
),

164 
ext_Êag
);

165 
	}
}

170 
xfs_fûblks_t


171 
	$xfs_bmbt_disk_gë_blockcou¡
(

172 
xfs_bmbt_ªc_t
 *
r
)

174  (
xfs_fûblks_t
)(
	`be64_to_˝u
(
r
->
l1
Ë& 
	`xfs_mask64lo
(21));

175 
	}
}

180 
xfs_fûeoff_t


181 
	$xfs_bmbt_disk_gë_°¨toff
(

182 
xfs_bmbt_ªc_t
 *
r
)

184  ((
xfs_fûeoff_t
)
	`be64_to_˝u
(
r
->
l0
) &

185 
	`xfs_mask64lo
(64 - 
BMBT_EXNTFLAG_BITLEN
)) >> 9;

186 
	}
}

193 
	$xfs_bmbt_£t_Ælf
(

194 
xfs_bmbt_ªc_ho°_t
 *
r
,

195 
xfs_fûeoff_t
 
°¨toff
,

196 
xfs_fsblock_t
 
°¨tblock
,

197 
xfs_fûblks_t
 
blockcou¡
,

198 
xfs_ex¡°_t
 
°©e
)

200 
exã¡_Êag
 = (
°©e
 =
XFS_EXT_NORM
) ? 0 : 1;

202 
	`ASSERT
(
°©e
 =
XFS_EXT_NORM
 || sèã =
XFS_EXT_UNWRITTEN
);

203 
	`ASSERT
((
°¨toff
 & 
	`xfs_mask64hi
(64-
BMBT_STARTOFF_BITLEN
)) == 0);

204 
	`ASSERT
((
blockcou¡
 & 
	`xfs_mask64hi
(64-
BMBT_BLOCKCOUNT_BITLEN
)) == 0);

206 
	`ASSERT
((
°¨tblock
 & 
	`xfs_mask64hi
(64-
BMBT_STARTBLOCK_BITLEN
)) == 0);

208 
r
->
l0
 = ((
xfs_bmbt_ªc_ba£_t
)
exã¡_Êag
 << 63) |

209 ((
xfs_bmbt_ªc_ba£_t
)
°¨toff
 << 9) |

210 ((
xfs_bmbt_ªc_ba£_t
)
°¨tblock
 >> 43);

211 
r
->
l1
 = ((
xfs_bmbt_ªc_ba£_t
)
°¨tblock
 << 21) |

212 ((
xfs_bmbt_ªc_ba£_t
)
blockcou¡
 &

213 (
xfs_bmbt_ªc_ba£_t
)
	`xfs_mask64lo
(21));

214 
	}
}

220 
	$xfs_bmbt_£t_Æl
(

221 
xfs_bmbt_ªc_ho°_t
 *
r
,

222 
xfs_bmbt_úec_t
 *
s
)

224 
	`xfs_bmbt_£t_Ælf
(
r
, 
s
->
br_°¨toff
, s->
br_°¨tblock
,

225 
s
->
br_blockcou¡
, s->
br_°©e
);

226 
	}
}

233 
	$xfs_bmbt_disk_£t_Ælf
(

234 
xfs_bmbt_ªc_t
 *
r
,

235 
xfs_fûeoff_t
 
°¨toff
,

236 
xfs_fsblock_t
 
°¨tblock
,

237 
xfs_fûblks_t
 
blockcou¡
,

238 
xfs_ex¡°_t
 
°©e
)

240 
exã¡_Êag
 = (
°©e
 =
XFS_EXT_NORM
) ? 0 : 1;

242 
	`ASSERT
(
°©e
 =
XFS_EXT_NORM
 || sèã =
XFS_EXT_UNWRITTEN
);

243 
	`ASSERT
((
°¨toff
 & 
	`xfs_mask64hi
(64-
BMBT_STARTOFF_BITLEN
)) == 0);

244 
	`ASSERT
((
blockcou¡
 & 
	`xfs_mask64hi
(64-
BMBT_BLOCKCOUNT_BITLEN
)) == 0);

245 
	`ASSERT
((
°¨tblock
 & 
	`xfs_mask64hi
(64-
BMBT_STARTBLOCK_BITLEN
)) == 0);

247 
r
->
l0
 = 
	`˝u_to_be64
(

248 ((
xfs_bmbt_ªc_ba£_t
)
exã¡_Êag
 << 63) |

249 ((
xfs_bmbt_ªc_ba£_t
)
°¨toff
 << 9) |

250 ((
xfs_bmbt_ªc_ba£_t
)
°¨tblock
 >> 43));

251 
r
->
l1
 = 
	`˝u_to_be64
(

252 ((
xfs_bmbt_ªc_ba£_t
)
°¨tblock
 << 21) |

253 ((
xfs_bmbt_ªc_ba£_t
)
blockcou¡
 &

254 (
xfs_bmbt_ªc_ba£_t
)
	`xfs_mask64lo
(21)));

255 
	}
}

260 
STATIC
 

261 
	$xfs_bmbt_disk_£t_Æl
(

262 
xfs_bmbt_ªc_t
 *
r
,

263 
xfs_bmbt_úec_t
 *
s
)

265 
	`xfs_bmbt_disk_£t_Ælf
(
r
, 
s
->
br_°¨toff
, s->
br_°¨tblock
,

266 
s
->
br_blockcou¡
, s->
br_°©e
);

267 
	}
}

273 
	$xfs_bmbt_£t_blockcou¡
(

274 
xfs_bmbt_ªc_ho°_t
 *
r
,

275 
xfs_fûblks_t
 
v
)

277 
	`ASSERT
((
v
 & 
	`xfs_mask64hi
(43)) == 0);

278 
r
->
l1
 = (r->l1 & (
xfs_bmbt_ªc_ba£_t
)
	`xfs_mask64hi
(43)) |

279 (
xfs_bmbt_ªc_ba£_t
)(
v
 & 
	`xfs_mask64lo
(21));

280 
	}
}

286 
	$xfs_bmbt_£t_°¨tblock
(

287 
xfs_bmbt_ªc_ho°_t
 *
r
,

288 
xfs_fsblock_t
 
v
)

290 
	`ASSERT
((
v
 & 
	`xfs_mask64hi
(12)) == 0);

291 
r
->
l0
 = (r->l0 & (
xfs_bmbt_ªc_ba£_t
)
	`xfs_mask64hi
(55)) |

292 (
xfs_bmbt_ªc_ba£_t
)(
v
 >> 43);

293 
r
->
l1
 = (r->l1 & (
xfs_bmbt_ªc_ba£_t
)
	`xfs_mask64lo
(21)) |

294 (
xfs_bmbt_ªc_ba£_t
)(
v
 << 21);

295 
	}
}

301 
	$xfs_bmbt_£t_°¨toff
(

302 
xfs_bmbt_ªc_ho°_t
 *
r
,

303 
xfs_fûeoff_t
 
v
)

305 
	`ASSERT
((
v
 & 
	`xfs_mask64hi
(9)) == 0);

306 
r
->
l0
 = (r->l0 & (
xfs_bmbt_ªc_ba£_t
Ë
	`xfs_mask64hi
(1)) |

307 ((
xfs_bmbt_ªc_ba£_t
)
v
 << 9) |

308 (
r
->
l0
 & (
xfs_bmbt_ªc_ba£_t
)
	`xfs_mask64lo
(9));

309 
	}
}

315 
	$xfs_bmbt_£t_°©e
(

316 
xfs_bmbt_ªc_ho°_t
 *
r
,

317 
xfs_ex¡°_t
 
v
)

319 
	`ASSERT
(
v
 =
XFS_EXT_NORM
 || v =
XFS_EXT_UNWRITTEN
);

320 i‡(
v
 =
XFS_EXT_NORM
)

321 
r
->
l0
 &
	`xfs_mask64lo
(64 - 
BMBT_EXNTFLAG_BITLEN
);

323 
r
->
l0
 |
	`xfs_mask64hi
(
BMBT_EXNTFLAG_BITLEN
);

324 
	}
}

330 
	$xfs_bmbt_to_bmdr
(

331 
xfs_mou¡
 *
mp
,

332 
xfs_båì_block
 *
rblock
,

333 
rblockÀn
,

334 
xfs_bmdr_block_t
 *
dblock
,

335 
dblockÀn
)

337 
dmxr
;

338 
xfs_bmbt_key_t
 *
fkp
;

339 
__be64
 *
Âp
;

340 
xfs_bmbt_key_t
 *
tkp
;

341 
__be64
 *
çp
;

343 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

344 
	`ASSERT
(
rblock
->
bb_magic
 =
	`˝u_to_be32
(
XFS_BMAP_CRC_MAGIC
));

345 
	`ASSERT
(
	`uuid_equÆ
(&
rblock
->
bb_u
.
l
.
bb_uuid
,

346 &
mp
->
m_sb
.
sb_mëa_uuid
));

347 
	`ASSERT
(
rblock
->
bb_u
.
l
.
bb_blkno
 ==

348 
	`˝u_to_be64
(
XFS_BUF_DADDR_NULL
));

350 
	`ASSERT
(
rblock
->
bb_magic
 =
	`˝u_to_be32
(
XFS_BMAP_MAGIC
));

351 
	`ASSERT
(
rblock
->
bb_u
.
l
.
bb_À·sib
 =
	`˝u_to_be64
(
NULLFSBLOCK
));

352 
	`ASSERT
(
rblock
->
bb_u
.
l
.
bb_rightsib
 =
	`˝u_to_be64
(
NULLFSBLOCK
));

353 
	`ASSERT
(
rblock
->
bb_Àvñ
 != 0);

354 
dblock
->
bb_Àvñ
 = 
rblock
->bb_level;

355 
dblock
->
bb_numªcs
 = 
rblock
->bb_numrecs;

356 
dmxr
 = 
	`xfs_bmdr_maxªcs
(
dblockÀn
, 0);

357 
fkp
 = 
	`XFS_BMBT_KEY_ADDR
(
mp
, 
rblock
, 1);

358 
tkp
 = 
	`XFS_BMDR_KEY_ADDR
(
dblock
, 1);

359 
Âp
 = 
	`XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
rblock
, 1, 
rblockÀn
);

360 
çp
 = 
	`XFS_BMDR_PTR_ADDR
(
dblock
, 1, 
dmxr
);

361 
dmxr
 = 
	`be16_to_˝u
(
dblock
->
bb_numªcs
);

362 
	`mem˝y
(
tkp
, 
fkp
, (*fkpË* 
dmxr
);

363 
	`mem˝y
(
çp
, 
Âp
, (*ÂpË* 
dmxr
);

364 
	}
}

375 
	$xfs_check_no°©e_exã¡s
(

376 
xfs_if‹k_t
 *
iÂ
,

377 
xfs_exäum_t
 
idx
,

378 
xfs_exäum_t
 
num
)

380 ; 
num
 > 0;Çum--, 
idx
++) {

381 
xfs_bmbt_ªc_ho°_t
 *
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
idx
);

382 i‡((
ï
->
l0
 >>

383 (64 - 
BMBT_EXNTFLAG_BITLEN
)) != 0) {

384 
	`ASSERT
(0);

389 
	}
}

392 
STATIC
 
xfs_båì_cur
 *

393 
	$xfs_bmbt_dup_curs‹
(

394 
xfs_båì_cur
 *
cur
)

396 
xfs_båì_cur
 *
√w
;

398 
√w
 = 
	`xfs_bmbt_öô_curs‹
(
cur
->
bc_mp
, cur->
bc_ç
,

399 
cur
->
bc_¥iv©e
.
b
.
ù
, cur->bc_¥iv©e.b.
whichf‹k
);

405 
√w
->
bc_¥iv©e
.
b
.
fú°block
 = 
cur
->bc_private.b.firstblock;

406 
√w
->
bc_¥iv©e
.
b
.
df›s
 = 
cur
->bc_private.b.dfops;

407 
√w
->
bc_¥iv©e
.
b
.
Êags
 = 
cur
->bc_private.b.flags;

409  
√w
;

410 
	}
}

412 
STATIC
 

413 
	$xfs_bmbt_upd©e_curs‹
(

414 
xfs_båì_cur
 *
§c
,

415 
xfs_båì_cur
 *
d°
)

417 
	`ASSERT
((
d°
->
bc_¥iv©e
.
b
.
fú°block
 !
NULLFSBLOCK
) ||

418 (
d°
->
bc_¥iv©e
.
b
.
ù
->
i_d
.
di_Êags
 & 
XFS_DIFLAG_REALTIME
));

419 
	`ASSERT
(
d°
->
bc_¥iv©e
.
b
.
df›s
 =
§c
->bc_private.b.dfops);

421 
d°
->
bc_¥iv©e
.
b
.
Æloˇãd
 +
§c
->bc_private.b.allocated;

422 
d°
->
bc_¥iv©e
.
b
.
fú°block
 = 
§c
->bc_private.b.firstblock;

424 
§c
->
bc_¥iv©e
.
b
.
Æloˇãd
 = 0;

425 
	}
}

427 
STATIC
 

428 
	$xfs_bmbt_Æloc_block
(

429 
xfs_båì_cur
 *
cur
,

430 
xfs_båì_±r
 *
°¨t
,

431 
xfs_båì_±r
 *
√w
,

432 *
°©
)

434 
xfs_Æloc_¨g_t
 
¨gs
;

435 
îr‹
;

437 
	`mem£t
(&
¨gs
, 0, (args));

438 
¨gs
.
ç
 = 
cur
->
bc_ç
;

439 
¨gs
.
mp
 = 
cur
->
bc_mp
;

440 
¨gs
.
fsbno
 = 
cur
->
bc_¥iv©e
.
b
.
fú°block
;

441 
¨gs
.
fú°block
 =árgs.
fsbno
;

442 
	`xfs_rm≠_öo_bmbt_ow√r
(&
¨gs
.
oöfo
, 
cur
->
bc_¥iv©e
.
b
.
ù
->
i_öo
,

443 
cur
->
bc_¥iv©e
.
b
.
whichf‹k
);

445 i‡(
¨gs
.
fsbno
 =
NULLFSBLOCK
) {

446 
¨gs
.
fsbno
 = 
	`be64_to_˝u
(
°¨t
->
l
);

447 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_START_BNO
;

448 
åy_™Ÿhî_ag
:

460 
¨gs
.
möÀ·
 =árgs.
ç
->
t_blk_ªs
;

461 } i‡(
cur
->
bc_¥iv©e
.
b
.
df›s
->
d›_low
) {

462 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_START_BNO
;

464 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

467 
¨gs
.
möÀn
 =árgs.
maxÀn
 =árgs.
¥od
 = 1;

468 
¨gs
.
wasdñ
 = 
cur
->
bc_¥iv©e
.
b
.
Êags
 & 
XFS_BTCUR_BPRV_WASDEL
;

469 i‡(!
¨gs
.
wasdñ
 &&árgs.
ç
->
t_blk_ªs
 == 0) {

470 
îr‹
 = -
ENOSPC
;

471 
îr‹0
;

473 
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
);

474 i‡(
îr‹
)

475 
îr‹0
;

485 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
cur
->
bc_mp
->
m_sb
) &&

486 
¨gs
.
fsbno
 =
NULLFSBLOCK
 &&

487 
¨gs
.
ty≥
 =
XFS_ALLOCTYPE_NEAR_BNO
) {

488 
¨gs
.
fsbno
 = 
cur
->
bc_¥iv©e
.
b
.
fú°block
;

489 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_FIRST_AG
;

490 
åy_™Ÿhî_ag
;

493 i‡(
¨gs
.
fsbno
 =
NULLFSBLOCK
 &&árgs.
möÀ·
) {

499 
¨gs
.
fsbno
 = 0;

500 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_FIRST_AG
;

501 
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
);

502 i‡(
îr‹
)

503 
îr‹0
;

504 
cur
->
bc_¥iv©e
.
b
.
df›s
->
d›_low
 = 
åue
;

506 i‡(
	`WARN_ON_ONCE
(
¨gs
.
fsbno
 =
NULLFSBLOCK
)) {

507 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

508 *
°©
 = 0;

511 
	`ASSERT
(
¨gs
.
Àn
 == 1);

512 
cur
->
bc_¥iv©e
.
b
.
fú°block
 = 
¨gs
.
fsbno
;

513 
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
++;

514 
cur
->
bc_¥iv©e
.
b
.
ù
->
i_d
.
di_nblocks
++;

515 
	`xfs_å™s_log_öode
(
¨gs
.
ç
, 
cur
->
bc_¥iv©e
.
b
.
ù
, 
XFS_ILOG_CORE
);

516 
	`xfs_å™s_mod_dquŸ_byöo
(
¨gs
.
ç
, 
cur
->
bc_¥iv©e
.
b
.
ù
,

517 
XFS_TRANS_DQ_BCOUNT
, 1L);

519 
√w
->
l
 = 
	`˝u_to_be64
(
¨gs
.
fsbno
);

521 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

522 *
°©
 = 1;

525 
îr‹0
:

526 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

527  
îr‹
;

528 
	}
}

530 
STATIC
 

531 
	$xfs_bmbt_‰ì_block
(

532 
xfs_båì_cur
 *
cur
,

533 
xfs_buf
 *
bp
)

535 
xfs_mou¡
 *
mp
 = 
cur
->
bc_mp
;

536 
xfs_öode
 *
ù
 = 
cur
->
bc_¥iv©e
.
b
.ip;

537 
xfs_å™s
 *
ç
 = 
cur
->
bc_ç
;

538 
xfs_fsblock_t
 
fsbno
 = 
	`XFS_DADDR_TO_FSB
(
mp
, 
	`XFS_BUF_ADDR
(
bp
));

539 
xfs_ow√r_öfo
 
oöfo
;

541 
	`xfs_rm≠_öo_bmbt_ow√r
(&
oöfo
, 
ù
->
i_öo
, 
cur
->
bc_¥iv©e
.
b
.
whichf‹k
);

542 
	`xfs_bm≠_add_‰ì
(
mp
, 
cur
->
bc_¥iv©e
.
b
.
df›s
, 
fsbno
, 1, &
oöfo
);

543 
ù
->
i_d
.
di_nblocks
--;

545 
	`xfs_å™s_log_öode
(
ç
, 
ù
, 
XFS_ILOG_CORE
);

546 
	`xfs_å™s_mod_dquŸ_byöo
(
ç
, 
ù
, 
XFS_TRANS_DQ_BCOUNT
, -1L);

548 
	}
}

550 
STATIC
 

551 
	$xfs_bmbt_gë_möªcs
(

552 
xfs_båì_cur
 *
cur
,

553 
Àvñ
)

555 i‡(
Àvñ
 =
cur
->
bc_∆evñs
 - 1) {

556 
xfs_if‹k
 *
iÂ
;

558 
iÂ
 = 
	`XFS_IFORK_PTR
(
cur
->
bc_¥iv©e
.
b
.
ù
,

559 
cur
->
bc_¥iv©e
.
b
.
whichf‹k
);

561  
	`xfs_bmbt_maxªcs
(
cur
->
bc_mp
,

562 
iÂ
->
if_broŸ_byãs
, 
Àvñ
 == 0) / 2;

565  
cur
->
bc_mp
->
m_bm≠_dmƒ
[
Àvñ
 != 0];

566 
	}
}

569 
	$xfs_bmbt_gë_maxªcs
(

570 
xfs_båì_cur
 *
cur
,

571 
Àvñ
)

573 i‡(
Àvñ
 =
cur
->
bc_∆evñs
 - 1) {

574 
xfs_if‹k
 *
iÂ
;

576 
iÂ
 = 
	`XFS_IFORK_PTR
(
cur
->
bc_¥iv©e
.
b
.
ù
,

577 
cur
->
bc_¥iv©e
.
b
.
whichf‹k
);

579  
	`xfs_bmbt_maxªcs
(
cur
->
bc_mp
,

580 
iÂ
->
if_broŸ_byãs
, 
Àvñ
 == 0);

583  
cur
->
bc_mp
->
m_bm≠_dmxr
[
Àvñ
 != 0];

585 
	}
}

596 
STATIC
 

597 
	$xfs_bmbt_gë_dmaxªcs
(

598 
xfs_båì_cur
 *
cur
,

599 
Àvñ
)

601 i‡(
Àvñ
 !
cur
->
bc_∆evñs
 - 1)

602  
cur
->
bc_mp
->
m_bm≠_dmxr
[
Àvñ
 != 0];

603  
	`xfs_bmdr_maxªcs
(
cur
->
bc_¥iv©e
.
b
.
f‹ksize
, 
Àvñ
 == 0);

604 
	}
}

606 
STATIC
 

607 
	$xfs_bmbt_öô_key_‰om_ªc
(

608 
xfs_båì_key
 *
key
,

609 
xfs_båì_ªc
 *
ªc
)

611 
key
->
bmbt
.
br_°¨toff
 =

612 
	`˝u_to_be64
(
	`xfs_bmbt_disk_gë_°¨toff
(&
ªc
->
bmbt
));

613 
	}
}

615 
STATIC
 

616 
	$xfs_bmbt_öô_ªc_‰om_cur
(

617 
xfs_båì_cur
 *
cur
,

618 
xfs_båì_ªc
 *
ªc
)

620 
	`xfs_bmbt_disk_£t_Æl
(&
ªc
->
bmbt
, &
cur
->
bc_ªc
.
b
);

621 
	}
}

623 
STATIC
 

624 
	$xfs_bmbt_öô_±r_‰om_cur
(

625 
xfs_båì_cur
 *
cur
,

626 
xfs_båì_±r
 *
±r
)

628 
±r
->
l
 = 0;

629 
	}
}

631 
STATIC
 
__öt64_t


632 
	$xfs_bmbt_key_diff
(

633 
xfs_båì_cur
 *
cur
,

634 
xfs_båì_key
 *
key
)

636  (
__öt64_t
)
	`be64_to_˝u
(
key
->
bmbt
.
br_°¨toff
) -

637 
cur
->
bc_ªc
.
b
.
br_°¨toff
;

638 
	}
}

640 
boﬁ


641 
	$xfs_bmbt_vîify
(

642 
xfs_buf
 *
bp
)

644 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

645 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

646 
Àvñ
;

648 
block
->
bb_magic
) {

649 
	`˝u_to_be32
(
XFS_BMAP_CRC_MAGIC
):

650 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

651  
Ál£
;

652 i‡(!
	`uuid_equÆ
(&
block
->
bb_u
.
l
.
bb_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

653  
Ál£
;

654 i‡(
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_blkno
Ë!
bp
->
b_bn
)

655  
Ál£
;

660 i‡(
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_ow√r
) == 0)

661  
Ál£
;

663 
	`˝u_to_be32
(
XFS_BMAP_MAGIC
):

666  
Ál£
;

676 
Àvñ
 = 
	`be16_to_˝u
(
block
->
bb_Àvñ
);

677 i‡(
Àvñ
 > 
	`max
(
mp
->
m_bm_maxÀvñs
[0], mp->m_bm_maxlevels[1]))

678  
Ál£
;

679 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
mp
->
m_bm≠_dmxr
[
Àvñ
 != 0])

680  
Ál£
;

683 i‡(!
block
->
bb_u
.
l
.
bb_À·sib
 ||

684 (
block
->
bb_u
.
l
.
bb_À·sib
 !
	`˝u_to_be64
(
NULLFSBLOCK
) &&

685 !
	`XFS_FSB_SANITY_CHECK
(
mp
, 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_À·sib
))))

686  
Ál£
;

687 i‡(!
block
->
bb_u
.
l
.
bb_rightsib
 ||

688 (
block
->
bb_u
.
l
.
bb_rightsib
 !
	`˝u_to_be64
(
NULLFSBLOCK
) &&

689 !
	`XFS_FSB_SANITY_CHECK
(
mp
, 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_rightsib
))))

690  
Ál£
;

692  
åue
;

693 
	}
}

696 
	$xfs_bmbt_ªad_vîify
(

697 
xfs_buf
 *
bp
)

699 i‡(!
	`xfs_båì_lblock_vîify_¸c
(
bp
))

700 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

701 i‡(!
	`xfs_bmbt_vîify
(
bp
))

702 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

704 i‡(
bp
->
b_îr‹
) {

705 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

706 
	`xfs_vîifõr_îr‹
(
bp
);

708 
	}
}

711 
	$xfs_bmbt_wrôe_vîify
(

712 
xfs_buf
 *
bp
)

714 i‡(!
	`xfs_bmbt_vîify
(
bp
)) {

715 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

716 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

717 
	`xfs_vîifõr_îr‹
(
bp
);

720 
	`xfs_båì_lblock_ˇlc_¸c
(
bp
);

721 
	}
}

723 c⁄° 
xfs_buf_›s
 
	gxfs_bmbt_buf_›s
 = {

724 .
«me
 = "xfs_bmbt",

725 .
	gvîify_ªad
 = 
xfs_bmbt_ªad_vîify
,

726 .
	gvîify_wrôe
 = 
xfs_bmbt_wrôe_vîify
,

730 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

731 
STATIC
 

732 
	$xfs_bmbt_keys_ö‹dî
(

733 
xfs_båì_cur
 *
cur
,

734 
xfs_båì_key
 *
k1
,

735 
xfs_båì_key
 *
k2
)

737  
	`be64_to_˝u
(
k1
->
bmbt
.
br_°¨toff
) <

738 
	`be64_to_˝u
(
k2
->
bmbt
.
br_°¨toff
);

739 
	}
}

741 
STATIC
 

742 
	$xfs_bmbt_ªcs_ö‹dî
(

743 
xfs_båì_cur
 *
cur
,

744 
xfs_båì_ªc
 *
r1
,

745 
xfs_båì_ªc
 *
r2
)

747  
	`xfs_bmbt_disk_gë_°¨toff
(&
r1
->
bmbt
) +

748 
	`xfs_bmbt_disk_gë_blockcou¡
(&
r1
->
bmbt
) <=

749 
	`xfs_bmbt_disk_gë_°¨toff
(&
r2
->
bmbt
);

750 
	}
}

753 c⁄° 
xfs_båì_›s
 
	gxfs_bmbt_›s
 = {

754 .
ªc_Àn
 = (
xfs_bmbt_ªc_t
),

755 .
	gkey_Àn
 = (
xfs_bmbt_key_t
),

757 .
	gdup_curs‹
 = 
xfs_bmbt_dup_curs‹
,

758 .
	gupd©e_curs‹
 = 
xfs_bmbt_upd©e_curs‹
,

759 .
	gÆloc_block
 = 
xfs_bmbt_Æloc_block
,

760 .
	g‰ì_block
 = 
xfs_bmbt_‰ì_block
,

761 .
	ggë_maxªcs
 = 
xfs_bmbt_gë_maxªcs
,

762 .
	ggë_möªcs
 = 
xfs_bmbt_gë_möªcs
,

763 .
	ggë_dmaxªcs
 = 
xfs_bmbt_gë_dmaxªcs
,

764 .
	göô_key_‰om_ªc
 = 
xfs_bmbt_öô_key_‰om_ªc
,

765 .
	göô_ªc_‰om_cur
 = 
xfs_bmbt_öô_ªc_‰om_cur
,

766 .
	göô_±r_‰om_cur
 = 
xfs_bmbt_öô_±r_‰om_cur
,

767 .
	gkey_diff
 = 
xfs_bmbt_key_diff
,

768 .
	gbuf_›s
 = &
xfs_bmbt_buf_›s
,

769 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

770 .
	gkeys_ö‹dî
 = 
xfs_bmbt_keys_ö‹dî
,

771 .
	gªcs_ö‹dî
 = 
xfs_bmbt_ªcs_ö‹dî
,

778 
xfs_båì_cur
 *

779 
	$xfs_bmbt_öô_curs‹
(

780 
xfs_mou¡
 *
mp
,

781 
xfs_å™s
 *
ç
,

782 
xfs_öode
 *
ù
,

783 
whichf‹k
)

785 
xfs_if‹k
 *
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

786 
xfs_båì_cur
 *
cur
;

787 
	`ASSERT
(
whichf‹k
 !
XFS_COW_FORK
);

789 
cur
 = 
	`kmem_z⁄e_zÆloc
(
xfs_båì_cur_z⁄e
, 
KM_NOFS
);

791 
cur
->
bc_ç
 = 
ç
;

792 
cur
->
bc_mp
 = 
mp
;

793 
cur
->
bc_∆evñs
 = 
	`be16_to_˝u
(
iÂ
->
if_broŸ
->
bb_Àvñ
) + 1;

794 
cur
->
bc_bäum
 = 
XFS_BTNUM_BMAP
;

795 
cur
->
bc_blocklog
 = 
mp
->
m_sb
.
sb_blocklog
;

796 
cur
->
bc_°©off
 = 
	`XFS_STATS_CALC_INDEX
(
xs_bmbt_2
);

798 
cur
->
bc_›s
 = &
xfs_bmbt_›s
;

799 
cur
->
bc_Êags
 = 
XFS_BTREE_LONG_PTRS
 | 
XFS_BTREE_ROOT_IN_INODE
;

800 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

801 
cur
->
bc_Êags
 |
XFS_BTREE_CRC_BLOCKS
;

803 
cur
->
bc_¥iv©e
.
b
.
f‹ksize
 = 
	`XFS_IFORK_SIZE
(
ù
, 
whichf‹k
);

804 
cur
->
bc_¥iv©e
.
b
.
ù
 = ip;

805 
cur
->
bc_¥iv©e
.
b
.
fú°block
 = 
NULLFSBLOCK
;

806 
cur
->
bc_¥iv©e
.
b
.
df›s
 = 
NULL
;

807 
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
 = 0;

808 
cur
->
bc_¥iv©e
.
b
.
Êags
 = 0;

809 
cur
->
bc_¥iv©e
.
b
.
whichf‹k
 = whichfork;

811  
cur
;

812 
	}
}

818 
	$xfs_bmbt_maxªcs
(

819 
xfs_mou¡
 *
mp
,

820 
blockÀn
,

821 
Àaf
)

823 
blockÀn
 -
	`XFS_BMBT_BLOCK_LEN
(
mp
);

825 i‡(
Àaf
)

826  
blockÀn
 / (
xfs_bmbt_ªc_t
);

827  
blockÀn
 / ((
xfs_bmbt_key_t
Ë+ (
xfs_bmbt_±r_t
));

828 
	}
}

834 
	$xfs_bmdr_maxªcs
(

835 
blockÀn
,

836 
Àaf
)

838 
blockÀn
 -(
xfs_bmdr_block_t
);

840 i‡(
Àaf
)

841  
blockÀn
 / (
xfs_bmdr_ªc_t
);

842  
blockÀn
 / ((
xfs_bmdr_key_t
Ë+ (
xfs_bmdr_±r_t
));

843 
	}
}

863 
	$xfs_bmbt_ch™ge_ow√r
(

864 
xfs_å™s
 *
ç
,

865 
xfs_öode
 *
ù
,

866 
whichf‹k
,

867 
xfs_öo_t
 
√w_ow√r
,

868 
li°_hód
 *
buf„r_li°
)

870 
xfs_båì_cur
 *
cur
;

871 
îr‹
;

873 
	`ASSERT
(
ç
 || 
buf„r_li°
);

874 
	`ASSERT
(!(
ç
 && 
buf„r_li°
));

875 i‡(
whichf‹k
 =
XFS_DATA_FORK
)

876 
	`ASSERT
(
ù
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
);

878 
	`ASSERT
(
ù
->
i_d
.
di_af‹m©
 =
XFS_DINODE_FMT_BTREE
);

880 
cur
 = 
	`xfs_bmbt_öô_curs‹
(
ù
->
i_mou¡
, 
ç
, ip, 
whichf‹k
);

881 i‡(!
cur
)

882  -
ENOMEM
;

884 
îr‹
 = 
	`xfs_båì_ch™ge_ow√r
(
cur
, 
√w_ow√r
, 
buf„r_li°
);

885 
	`xfs_båì_dñ_curs‹
(
cur
, 
îr‹
 ? 
XFS_BTREE_ERROR
 : 
XFS_BTREE_NOERROR
);

886  
îr‹
;

887 
	}
}

	@libxfs/xfs_bmap_btree.h

18 #i‚de‡
__XFS_BMAP_BTREE_H__


19 
	#__XFS_BMAP_BTREE_H__


	)

21 
	gxfs_båì_cur
;

22 
	gxfs_båì_block
;

23 
	gxfs_mou¡
;

24 
	gxfs_öode
;

25 
	gxfs_å™s
;

30 
	#XFS_EXTFMT_INODE
(
x
) \

31 (
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(&((
x
)->
i_mou¡
->
m_sb
)) ? \

32 
XFS_EXTFMT_HASSTATE
 : 
XFS_EXTFMT_NOSTATE
)

	)

33 
	#ISUNWRITTEN
(
x
Ë((x)->
br_°©e
 =
XFS_EXT_UNWRITTEN
)

	)

38 
	#XFS_BMBT_BLOCK_LEN
(
mp
) \

39 (
	`xfs_sb_vîsi⁄_has¸c
(&((
mp
)->
m_sb
)) ? \

40 
XFS_BTREE_LBLOCK_CRC_LEN
 : 
XFS_BTREE_LBLOCK_LEN
)

	)

42 
	#XFS_BMBT_REC_ADDR
(
mp
, 
block
, 
ödex
) \

43 ((
xfs_bmbt_ªc_t
 *) \

44 ((*)(
block
) + \

45 
	`XFS_BMBT_BLOCK_LEN
(
mp
) + \

46 ((
ödex
Ë- 1Ë* (
xfs_bmbt_ªc_t
)))

	)

48 
	#XFS_BMBT_KEY_ADDR
(
mp
, 
block
, 
ödex
) \

49 ((
xfs_bmbt_key_t
 *) \

50 ((*)(
block
) + \

51 
	`XFS_BMBT_BLOCK_LEN
(
mp
) + \

52 ((
ödex
Ë- 1Ë* (
xfs_bmbt_key_t
)))

	)

54 
	#XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 
ödex
, 
maxªcs
) \

55 ((
xfs_bmbt_±r_t
 *) \

56 ((*)(
block
) + \

57 
	`XFS_BMBT_BLOCK_LEN
(
mp
) + \

58 (
maxªcs
Ë* (
xfs_bmbt_key_t
) + \

59 ((
ödex
Ë- 1Ë* (
xfs_bmbt_±r_t
)))

	)

61 
	#XFS_BMDR_REC_ADDR
(
block
, 
ödex
) \

62 ((
xfs_bmdr_ªc_t
 *) \

63 ((*)(
block
) + \

64 (
xfs_bmdr_block
) + \

65 ((
ödex
Ë- 1Ë* (
xfs_bmdr_ªc_t
)))

	)

67 
	#XFS_BMDR_KEY_ADDR
(
block
, 
ödex
) \

68 ((
xfs_bmdr_key_t
 *) \

69 ((*)(
block
) + \

70 (
xfs_bmdr_block
) + \

71 ((
ödex
Ë- 1Ë* (
xfs_bmdr_key_t
)))

	)

73 
	#XFS_BMDR_PTR_ADDR
(
block
, 
ödex
, 
maxªcs
) \

74 ((
xfs_bmdr_±r_t
 *) \

75 ((*)(
block
) + \

76 (
xfs_bmdr_block
) + \

77 (
maxªcs
Ë* (
xfs_bmdr_key_t
) + \

78 ((
ödex
Ë- 1Ë* (
xfs_bmdr_±r_t
)))

	)

84 
	#XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
bb
, 
i
, 
sz
) \

85 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
bb
, 
i
, 
	`xfs_bmbt_maxªcs
(mp, 
sz
, 0))

	)

87 
	#XFS_BMAP_BROOT_SPACE_CALC
(
mp
, 
ƒecs
) \

88 ()(
	`XFS_BMBT_BLOCK_LEN
(
mp
) + \

89 ((
ƒecs
Ë* ((
xfs_bmbt_key_t
Ë+ (
xfs_bmbt_±r_t
))))

	)

91 
	#XFS_BMAP_BROOT_SPACE
(
mp
, 
bb
) \

92 (
	`XFS_BMAP_BROOT_SPACE_CALC
(
mp
, 
	`be16_to_˝u
((
bb
)->
bb_numªcs
)))

	)

93 
	#XFS_BMDR_SPACE_CALC
(
ƒecs
) \

94 ()((
xfs_bmdr_block_t
) + \

95 ((
ƒecs
Ë* ((
xfs_bmbt_key_t
Ë+ (
xfs_bmbt_±r_t
))))

	)

96 
	#XFS_BMAP_BMDR_SPACE
(
bb
) \

97 (
	`XFS_BMDR_SPACE_CALC
(
	`be16_to_˝u
((
bb
)->
bb_numªcs
)))

	)

102 
	#XFS_BM_MAXLEVELS
(
mp
,
w
Ë((mp)->
m_bm_maxÀvñs
[(w)])

	)

107 
xfs_bmdr_to_bmbt
(
xfs_öode
 *, 
xfs_bmdr_block_t
 *, ,

108 
xfs_båì_block
 *, );

109 
xfs_bmbt_gë_Æl
(
xfs_bmbt_ªc_ho°_t
 *
r
, 
xfs_bmbt_úec_t
 *
s
);

110 
xfs_fûblks_t
 
xfs_bmbt_gë_blockcou¡
(
xfs_bmbt_ªc_ho°_t
 *
r
);

111 
xfs_fsblock_t
 
xfs_bmbt_gë_°¨tblock
(
xfs_bmbt_ªc_ho°_t
 *
r
);

112 
xfs_fûeoff_t
 
xfs_bmbt_gë_°¨toff
(
xfs_bmbt_ªc_ho°_t
 *
r
);

113 
xfs_ex¡°_t
 
xfs_bmbt_gë_°©e
(
xfs_bmbt_ªc_ho°_t
 *
r
);

115 
xfs_fûblks_t
 
xfs_bmbt_disk_gë_blockcou¡
(
xfs_bmbt_ªc_t
 *
r
);

116 
xfs_fûeoff_t
 
xfs_bmbt_disk_gë_°¨toff
(
xfs_bmbt_ªc_t
 *
r
);

118 
xfs_bmbt_£t_Æl
(
xfs_bmbt_ªc_ho°_t
 *
r
, 
xfs_bmbt_úec_t
 *
s
);

119 
xfs_bmbt_£t_Ælf
(
xfs_bmbt_ªc_ho°_t
 *
r
, 
xfs_fûeoff_t
 
o
,

120 
xfs_fsblock_t
 
b
, 
xfs_fûblks_t
 
c
, 
xfs_ex¡°_t
 
v
);

121 
xfs_bmbt_£t_blockcou¡
(
xfs_bmbt_ªc_ho°_t
 *
r
, 
xfs_fûblks_t
 
v
);

122 
xfs_bmbt_£t_°¨tblock
(
xfs_bmbt_ªc_ho°_t
 *
r
, 
xfs_fsblock_t
 
v
);

123 
xfs_bmbt_£t_°¨toff
(
xfs_bmbt_ªc_ho°_t
 *
r
, 
xfs_fûeoff_t
 
v
);

124 
xfs_bmbt_£t_°©e
(
xfs_bmbt_ªc_ho°_t
 *
r
, 
xfs_ex¡°_t
 
v
);

126 
xfs_bmbt_disk_£t_Ælf
(
xfs_bmbt_ªc_t
 *
r
, 
xfs_fûeoff_t
 
o
,

127 
xfs_fsblock_t
 
b
, 
xfs_fûblks_t
 
c
, 
xfs_ex¡°_t
 
v
);

129 
xfs_bmbt_to_bmdr
(
xfs_mou¡
 *, 
xfs_båì_block
 *, ,

130 
xfs_bmdr_block_t
 *, );

132 
xfs_bmbt_gë_maxªcs
(
xfs_båì_cur
 *, 
Àvñ
);

133 
xfs_bmdr_maxªcs
(
blockÀn
, 
Àaf
);

134 
xfs_bmbt_maxªcs
(
xfs_mou¡
 *, 
blockÀn
, 
Àaf
);

136 
xfs_bmbt_ch™ge_ow√r
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
ù
,

137 
whichf‹k
, 
xfs_öo_t
 
√w_ow√r
,

138 
li°_hód
 *
buf„r_li°
);

140 
xfs_båì_cur
 *
xfs_bmbt_öô_curs‹
(
xfs_mou¡
 *,

141 
xfs_å™s
 *, 
xfs_öode
 *, );

	@libxfs/xfs_btree.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_bô.h
"

25 
	~"xfs_mou¡.h
"

26 
	~"xfs_de„r.h
"

27 
	~"xfs_öode.h
"

28 
	~"xfs_å™s.h
"

29 
	~"xfs_båì.h
"

30 
	~"xfs_åa˚.h
"

31 
	~"xfs_cksum.h
"

32 
	~"xfs_Æloc.h
"

37 
kmem_z⁄e_t
 *
	gxfs_båì_cur_z⁄e
;

42 c⁄° 
__uöt32_t
 
	gxfs_magics
[2][
XFS_BTNUM_MAX
] = {

43 { 
XFS_ABTB_MAGIC
, 
XFS_ABTC_MAGIC
, 0, 
XFS_BMAP_MAGIC
, 
XFS_IBT_MAGIC
,

44 
XFS_FIBT_MAGIC
, 0 },

45 { 
XFS_ABTB_CRC_MAGIC
, 
XFS_ABTC_CRC_MAGIC
, 
XFS_RMAP_CRC_MAGIC
,

46 
XFS_BMAP_CRC_MAGIC
, 
XFS_IBT_CRC_MAGIC
, 
XFS_FIBT_CRC_MAGIC
,

47 
XFS_REFC_CRC_MAGIC
 }

50 
__uöt32_t


51 
	$xfs_båì_magic
(

52 
¸c
,

53 
xfs_bäum_t
 
bäum
)

55 
__uöt32_t
 
magic
 = 
xfs_magics
[
¸c
][
bäum
];

58 
	`ASSERT
(
magic
 != 0);

59  
magic
;

60 
	}
}

62 
STATIC
 

63 
	$xfs_båì_check_lblock
(

64 
xfs_båì_cur
 *
cur
,

65 
xfs_båì_block
 *
block
,

66 
Àvñ
,

67 
xfs_buf
 *
bp
)

69 
lblock_ok
 = 1;

70 
xfs_mou¡
 *
mp
;

71 
xfs_bäum_t
 
bäum
 = 
cur
->
bc_bäum
;

72 
¸c
;

74 
mp
 = 
cur
->
bc_mp
;

75 
¸c
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
);

77 i‡(
¸c
) {

78 
lblock_ok
 =Üblock_ok &&

79 
	`uuid_equÆ
(&
block
->
bb_u
.
l
.
bb_uuid
,

80 &
mp
->
m_sb
.
sb_mëa_uuid
) &&

81 
block
->
bb_u
.
l
.
bb_blkno
 =
	`˝u_to_be64
(

82 
bp
 ? bp->
b_bn
 : 
XFS_BUF_DADDR_NULL
);

85 
lblock_ok
 =Üblock_ok &&

86 
	`be32_to_˝u
(
block
->
bb_magic
Ë=
	`xfs_båì_magic
(
¸c
, 
bäum
) &&

87 
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë=
Àvñ
 &&

88 
	`be16_to_˝u
(
block
->
bb_numªcs
) <=

89 
cur
->
bc_›s
->
	`gë_maxªcs
(cur, 
Àvñ
) &&

90 
block
->
bb_u
.
l
.
bb_À·sib
 &&

91 (
block
->
bb_u
.
l
.
bb_À·sib
 =
	`˝u_to_be64
(
NULLFSBLOCK
) ||

92 
	`XFS_FSB_SANITY_CHECK
(
mp
,

93 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_À·sib
))) &&

94 
block
->
bb_u
.
l
.
bb_rightsib
 &&

95 (
block
->
bb_u
.
l
.
bb_rightsib
 =
	`˝u_to_be64
(
NULLFSBLOCK
) ||

96 
	`XFS_FSB_SANITY_CHECK
(
mp
,

97 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_rightsib
)));

99 i‡(
	`u∆ikñy
(
	`XFS_TEST_ERROR
(!
lblock_ok
, 
mp
,

100 
XFS_ERRTAG_BTREE_CHECK_LBLOCK
,

101 
XFS_RANDOM_BTREE_CHECK_LBLOCK
))) {

102 i‡(
bp
)

103 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

104 
	`XFS_ERROR_REPORT
(
__func__
, 
XFS_ERRLEVEL_LOW
, 
mp
);

105  -
EFSCORRUPTED
;

108 
	}
}

110 
STATIC
 

111 
	$xfs_båì_check_sblock
(

112 
xfs_båì_cur
 *
cur
,

113 
xfs_båì_block
 *
block
,

114 
Àvñ
,

115 
xfs_buf
 *
bp
)

117 
xfs_mou¡
 *
mp
;

118 
xfs_buf
 *
agbp
;

119 
xfs_agf
 *
agf
;

120 
xfs_agblock_t
 
agÊí
;

121 
sblock_ok
 = 1;

122 
xfs_bäum_t
 
bäum
 = 
cur
->
bc_bäum
;

123 
¸c
;

125 
mp
 = 
cur
->
bc_mp
;

126 
¸c
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
);

127 
agbp
 = 
cur
->
bc_¥iv©e
.
a
.agbp;

128 
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

129 
agÊí
 = 
	`be32_to_˝u
(
agf
->
agf_Àngth
);

131 i‡(
¸c
) {

132 
sblock_ok
 = sblock_ok &&

133 
	`uuid_equÆ
(&
block
->
bb_u
.
s
.
bb_uuid
,

134 &
mp
->
m_sb
.
sb_mëa_uuid
) &&

135 
block
->
bb_u
.
s
.
bb_blkno
 =
	`˝u_to_be64
(

136 
bp
 ? bp->
b_bn
 : 
XFS_BUF_DADDR_NULL
);

139 
sblock_ok
 = sblock_ok &&

140 
	`be32_to_˝u
(
block
->
bb_magic
Ë=
	`xfs_båì_magic
(
¸c
, 
bäum
) &&

141 
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë=
Àvñ
 &&

142 
	`be16_to_˝u
(
block
->
bb_numªcs
) <=

143 
cur
->
bc_›s
->
	`gë_maxªcs
(cur, 
Àvñ
) &&

144 (
block
->
bb_u
.
s
.
bb_À·sib
 =
	`˝u_to_be32
(
NULLAGBLOCK
) ||

145 
	`be32_to_˝u
(
block
->
bb_u
.
s
.
bb_À·sib
Ë< 
agÊí
) &&

146 
block
->
bb_u
.
s
.
bb_À·sib
 &&

147 (
block
->
bb_u
.
s
.
bb_rightsib
 =
	`˝u_to_be32
(
NULLAGBLOCK
) ||

148 
	`be32_to_˝u
(
block
->
bb_u
.
s
.
bb_rightsib
Ë< 
agÊí
) &&

149 
block
->
bb_u
.
s
.
bb_rightsib
;

151 i‡(
	`u∆ikñy
(
	`XFS_TEST_ERROR
(!
sblock_ok
, 
mp
,

152 
XFS_ERRTAG_BTREE_CHECK_SBLOCK
,

153 
XFS_RANDOM_BTREE_CHECK_SBLOCK
))) {

154 i‡(
bp
)

155 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

156 
	`XFS_ERROR_REPORT
(
__func__
, 
XFS_ERRLEVEL_LOW
, 
mp
);

157  -
EFSCORRUPTED
;

160 
	}
}

166 
	$xfs_båì_check_block
(

167 
xfs_båì_cur
 *
cur
,

168 
xfs_båì_block
 *
block
,

169 
Àvñ
,

170 
xfs_buf
 *
bp
)

172 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
)

173  
	`xfs_båì_check_lblock
(
cur
, 
block
, 
Àvñ
, 
bp
);

175  
	`xfs_båì_check_sblock
(
cur
, 
block
, 
Àvñ
, 
bp
);

176 
	}
}

182 
	$xfs_båì_check_Õå
(

183 
xfs_båì_cur
 *
cur
,

184 
xfs_fsblock_t
 
bno
,

185 
Àvñ
)

187 
	`XFS_WANT_CORRUPTED_RETURN
(
cur
->
bc_mp
,

188 
Àvñ
 > 0 &&

189 
bno
 !
NULLFSBLOCK
 &&

190 
	`XFS_FSB_SANITY_CHECK
(
cur
->
bc_mp
, 
bno
));

192 
	}
}

194 #ifde‡
DEBUG


198 
STATIC
 

199 
	$xfs_båì_check_•å
(

200 
xfs_båì_cur
 *
cur
,

201 
xfs_agblock_t
 
bno
,

202 
Àvñ
)

204 
xfs_agblock_t
 
agblocks
 = 
cur
->
bc_mp
->
m_sb
.
sb_agblocks
;

206 
	`XFS_WANT_CORRUPTED_RETURN
(
cur
->
bc_mp
,

207 
Àvñ
 > 0 &&

208 
bno
 !
NULLAGBLOCK
 &&

209 
bno
 != 0 &&

210 
bno
 < 
agblocks
);

212 
	}
}

217 
STATIC
 

218 
	$xfs_båì_check_±r
(

219 
xfs_båì_cur
 *
cur
,

220 
xfs_båì_±r
 *
±r
,

221 
ödex
,

222 
Àvñ
)

224 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
) {

225  
	`xfs_båì_check_Õå
(
cur
,

226 
	`be64_to_˝u
((&
±r
->
l
)[
ödex
]), 
Àvñ
);

228  
	`xfs_båì_check_•å
(
cur
,

229 
	`be32_to_˝u
((&
±r
->
s
)[
ödex
]), 
Àvñ
);

231 
	}
}

243 
	$xfs_båì_lblock_ˇlc_¸c
(

244 
xfs_buf
 *
bp
)

246 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

247 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

249 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
bp
->
b_èrgë
->
bt_mou¡
->
m_sb
))

251 i‡(
bù
)

252 
block
->
bb_u
.
l
.
bb_l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

253 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_BTREE_LBLOCK_CRC_OFF
);

254 
	}
}

256 
boﬁ


257 
	$xfs_båì_lblock_vîify_¸c
(

258 
xfs_buf
 *
bp
)

260 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

261 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

263 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

264 i‡(!
	`xfs_log_check_l¢
(
mp
, 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_l¢
)))

265  
Ál£
;

266  
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_BTREE_LBLOCK_CRC_OFF
);

269  
åue
;

270 
	}
}

281 
	$xfs_båì_sblock_ˇlc_¸c
(

282 
xfs_buf
 *
bp
)

284 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

285 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

287 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
bp
->
b_èrgë
->
bt_mou¡
->
m_sb
))

289 i‡(
bù
)

290 
block
->
bb_u
.
s
.
bb_l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

291 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_BTREE_SBLOCK_CRC_OFF
);

292 
	}
}

294 
boﬁ


295 
	$xfs_båì_sblock_vîify_¸c
(

296 
xfs_buf
 *
bp
)

298 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

299 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

301 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

302 i‡(!
	`xfs_log_check_l¢
(
mp
, 
	`be64_to_˝u
(
block
->
bb_u
.
s
.
bb_l¢
)))

303  
Ál£
;

304  
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_BTREE_SBLOCK_CRC_OFF
);

307  
åue
;

308 
	}
}

311 
	$xfs_båì_‰ì_block
(

312 
xfs_båì_cur
 *
cur
,

313 
xfs_buf
 *
bp
)

315 
îr‹
;

317 
îr‹
 = 
cur
->
bc_›s
->
	`‰ì_block
(cur, 
bp
);

318 i‡(!
îr‹
) {

319 
	`xfs_å™s_bövÆ
(
cur
->
bc_ç
, 
bp
);

320 
	`XFS_BTREE_STATS_INC
(
cur
, 
‰ì
);

322  
îr‹
;

323 
	}
}

329 
	$xfs_båì_dñ_curs‹
(

330 
xfs_båì_cur_t
 *
cur
,

331 
îr‹
)

333 
i
;

345 
i
 = 0; i < 
cur
->
bc_∆evñs
; i++) {

346 i‡(
cur
->
bc_bufs
[
i
])

347 
	`xfs_å™s_bªl£
(
cur
->
bc_ç
, cur->
bc_bufs
[
i
]);

348 i‡(!
îr‹
)

355 
	`ASSERT
(
cur
->
bc_bäum
 !
XFS_BTNUM_BMAP
 ||

356 
cur
->
bc_¥iv©e
.
b
.
Æloˇãd
 == 0);

360 
	`kmem_z⁄e_‰ì
(
xfs_båì_cur_z⁄e
, 
cur
);

361 
	}
}

368 
	$xfs_båì_dup_curs‹
(

369 
xfs_båì_cur_t
 *
cur
,

370 
xfs_båì_cur_t
 **
ncur
)

372 
xfs_buf_t
 *
bp
;

373 
îr‹
;

374 
i
;

375 
xfs_mou¡_t
 *
mp
;

376 
xfs_båì_cur_t
 *
√w
;

377 
xfs_å™s_t
 *
ç
;

379 
ç
 = 
cur
->
bc_ç
;

380 
mp
 = 
cur
->
bc_mp
;

385 
√w
 = 
cur
->
bc_›s
->
	`dup_curs‹
(cur);

390 
√w
->
bc_ªc
 = 
cur
->bc_rec;

395 
i
 = 0; i < 
√w
->
bc_∆evñs
; i++) {

396 
√w
->
bc_±rs
[
i
] = 
cur
->bc_ptrs[i];

397 
√w
->
bc_ø
[
i
] = 
cur
->bc_ra[i];

398 
bp
 = 
cur
->
bc_bufs
[
i
];

399 i‡(
bp
) {

400 
îr‹
 = 
	`xfs_å™s_ªad_buf
(
mp
, 
ç
, mp->
m_ddev_èrgp
,

401 
	`XFS_BUF_ADDR
(
bp
), 
mp
->
m_bsize
,

402 0, &
bp
,

403 
cur
->
bc_›s
->
buf_›s
);

404 i‡(
îr‹
) {

405 
	`xfs_båì_dñ_curs‹
(
√w
, 
îr‹
);

406 *
ncur
 = 
NULL
;

407  
îr‹
;

410 
√w
->
bc_bufs
[
i
] = 
bp
;

412 *
ncur
 = 
√w
;

414 
	}
}

493 
ölöe
 
size_t
 
	$xfs_båì_block_Àn
(
xfs_båì_cur
 *
cur
)

495 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
) {

496 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_CRC_BLOCKS
)

497  
XFS_BTREE_LBLOCK_CRC_LEN
;

498  
XFS_BTREE_LBLOCK_LEN
;

500 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_CRC_BLOCKS
)

501  
XFS_BTREE_SBLOCK_CRC_LEN
;

502  
XFS_BTREE_SBLOCK_LEN
;

503 
	}
}

508 
ölöe
 
size_t
 
	$xfs_båì_±r_Àn
(
xfs_båì_cur
 *
cur
)

510  (
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
) ?

511 (
__be64
Ë: (
__be32
);

512 
	}
}

517 
STATIC
 
size_t


518 
	$xfs_båì_ªc_off£t
(

519 
xfs_båì_cur
 *
cur
,

520 
n
)

522  
	`xfs_båì_block_Àn
(
cur
) +

523 (
n
 - 1Ë* 
cur
->
bc_›s
->
ªc_Àn
;

524 
	}
}

529 
STATIC
 
size_t


530 
	$xfs_båì_key_off£t
(

531 
xfs_båì_cur
 *
cur
,

532 
n
)

534  
	`xfs_båì_block_Àn
(
cur
) +

535 (
n
 - 1Ë* 
cur
->
bc_›s
->
key_Àn
;

536 
	}
}

541 
STATIC
 
size_t


542 
	$xfs_båì_high_key_off£t
(

543 
xfs_båì_cur
 *
cur
,

544 
n
)

546  
	`xfs_båì_block_Àn
(
cur
) +

547 (
n
 - 1Ë* 
cur
->
bc_›s
->
key_Àn
 + (cur->bc_ops->key_len / 2);

548 
	}
}

553 
STATIC
 
size_t


554 
	$xfs_båì_±r_off£t
(

555 
xfs_båì_cur
 *
cur
,

556 
n
,

557 
Àvñ
)

559  
	`xfs_båì_block_Àn
(
cur
) +

560 
cur
->
bc_›s
->
	`gë_maxªcs
(cur, 
Àvñ
Ë* cur->bc_›s->
key_Àn
 +

561 (
n
 - 1Ë* 
	`xfs_båì_±r_Àn
(
cur
);

562 
	}
}

567 
STATIC
 
xfs_båì_ªc
 *

568 
	$xfs_båì_ªc_addr
(

569 
xfs_båì_cur
 *
cur
,

570 
n
,

571 
xfs_båì_block
 *
block
)

573  (
xfs_båì_ªc
 *)

574 ((*)
block
 + 
	`xfs_båì_ªc_off£t
(
cur
, 
n
));

575 
	}
}

580 
STATIC
 
xfs_båì_key
 *

581 
	$xfs_båì_key_addr
(

582 
xfs_båì_cur
 *
cur
,

583 
n
,

584 
xfs_båì_block
 *
block
)

586  (
xfs_båì_key
 *)

587 ((*)
block
 + 
	`xfs_båì_key_off£t
(
cur
, 
n
));

588 
	}
}

593 
STATIC
 
xfs_båì_key
 *

594 
	$xfs_båì_high_key_addr
(

595 
xfs_båì_cur
 *
cur
,

596 
n
,

597 
xfs_båì_block
 *
block
)

599  (
xfs_båì_key
 *)

600 ((*)
block
 + 
	`xfs_båì_high_key_off£t
(
cur
, 
n
));

601 
	}
}

606 
STATIC
 
xfs_båì_±r
 *

607 
	$xfs_båì_±r_addr
(

608 
xfs_båì_cur
 *
cur
,

609 
n
,

610 
xfs_båì_block
 *
block
)

612 
Àvñ
 = 
	`xfs_båì_gë_Àvñ
(
block
);

614 
	`ASSERT
(
block
->
bb_Àvñ
 != 0);

616  (
xfs_båì_±r
 *)

617 ((*)
block
 + 
	`xfs_båì_±r_off£t
(
cur
, 
n
, 
Àvñ
));

618 
	}
}

626 
STATIC
 
xfs_båì_block
 *

627 
	$xfs_båì_gë_úoŸ
(

628 
xfs_båì_cur
 *
cur
)

630 
xfs_if‹k
 *
iÂ
;

632 
iÂ
 = 
	`XFS_IFORK_PTR
(
cur
->
bc_¥iv©e
.
b
.
ù
, cur->bc_¥iv©e.b.
whichf‹k
);

633  (
xfs_båì_block
 *)
iÂ
->
if_broŸ
;

634 
	}
}

640 
STATIC
 
xfs_båì_block
 *

641 
	$xfs_båì_gë_block
(

642 
xfs_båì_cur
 *
cur
,

643 
Àvñ
,

644 
xfs_buf
 **
bµ
)

646 i‡((
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
) &&

647 (
Àvñ
 =
cur
->
bc_∆evñs
 - 1)) {

648 *
bµ
 = 
NULL
;

649  
	`xfs_båì_gë_úoŸ
(
cur
);

652 *
bµ
 = 
cur
->
bc_bufs
[
Àvñ
];

653  
	`XFS_BUF_TO_BLOCK
(*
bµ
);

654 
	}
}

660 
xfs_buf_t
 *

661 
	$xfs_båì_gë_buÊ
(

662 
xfs_mou¡_t
 *
mp
,

663 
xfs_å™s_t
 *
ç
,

664 
xfs_fsblock_t
 
fsbno
,

665 
uöt
 
lock
)

667 
xfs_daddr_t
 
d
;

669 
	`ASSERT
(
fsbno
 !
NULLFSBLOCK
);

670 
d
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
fsbno
);

671  
	`xfs_å™s_gë_buf
(
ç
, 
mp
->
m_ddev_èrgp
, 
d
, mp->
m_bsize
, 
lock
);

672 
	}
}

678 
xfs_buf_t
 *

679 
	$xfs_båì_gë_bufs
(

680 
xfs_mou¡_t
 *
mp
,

681 
xfs_å™s_t
 *
ç
,

682 
xfs_agnumbî_t
 
agno
,

683 
xfs_agblock_t
 
agbno
,

684 
uöt
 
lock
)

686 
xfs_daddr_t
 
d
;

688 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

689 
	`ASSERT
(
agbno
 !
NULLAGBLOCK
);

690 
d
 = 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
);

691  
	`xfs_å™s_gë_buf
(
ç
, 
mp
->
m_ddev_èrgp
, 
d
, mp->
m_bsize
, 
lock
);

692 
	}
}

698 
	$xfs_båì_i¶a°block
(

699 
xfs_båì_cur_t
 *
cur
,

700 
Àvñ
)

702 
xfs_båì_block
 *
block
;

703 
xfs_buf_t
 *
bp
;

705 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

706 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

707 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
)

708  
block
->
bb_u
.
l
.
bb_rightsib
 =
	`˝u_to_be64
(
NULLFSBLOCK
);

710  
block
->
bb_u
.
s
.
bb_rightsib
 =
	`˝u_to_be32
(
NULLAGBLOCK
);

711 
	}
}

717 
STATIC
 

718 
	$xfs_båì_fú°ªc
(

719 
xfs_båì_cur_t
 *
cur
,

720 
Àvñ
)

722 
xfs_båì_block
 *
block
;

723 
xfs_buf_t
 *
bp
;

728 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

729 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

733 i‡(!
block
->
bb_numªcs
)

738 
cur
->
bc_±rs
[
Àvñ
] = 1;

740 
	}
}

746 
STATIC
 

747 
	$xfs_båì_œ°ªc
(

748 
xfs_båì_cur_t
 *
cur
,

749 
Àvñ
)

751 
xfs_båì_block
 *
block
;

752 
xfs_buf_t
 *
bp
;

757 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

758 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

762 i‡(!
block
->
bb_numªcs
)

767 
cur
->
bc_±rs
[
Àvñ
] = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

769 
	}
}

776 
	$xfs_båì_off£ts
(

777 
__öt64_t
 
fõlds
,

778 c⁄° *
off£ts
,

779 
nbôs
,

780 *
fú°
,

781 *
œ°
)

783 
i
;

784 
__öt64_t
 
imask
;

786 
	`ASSERT
(
fõlds
 != 0);

790 
i
 = 0, 
imask
 = 1LL; ; i++, imask <<= 1) {

791 i‡(
imask
 & 
fõlds
) {

792 *
fú°
 = 
off£ts
[
i
];

799 
i
 = 
nbôs
 - 1, 
imask
 = 1LL << i; ; i--, imask >>= 1) {

800 i‡(
imask
 & 
fõlds
) {

801 *
œ°
 = 
off£ts
[
i
 + 1] - 1;

805 
	}
}

812 
	$xfs_båì_ªad_buÊ
(

813 
xfs_mou¡
 *
mp
,

814 
xfs_å™s
 *
ç
,

815 
xfs_fsblock_t
 
fsbno
,

816 
uöt
 
lock
,

817 
xfs_buf
 **
bµ
,

818 
ªfvÆ
,

819 c⁄° 
xfs_buf_›s
 *
›s
)

821 
xfs_buf
 *
bp
;

822 
xfs_daddr_t
 
d
;

823 
îr‹
;

825 i‡(!
	`XFS_FSB_SANITY_CHECK
(
mp
, 
fsbno
))

826  -
EFSCORRUPTED
;

827 
d
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
fsbno
);

828 
îr‹
 = 
	`xfs_å™s_ªad_buf
(
mp
, 
ç
, mp->
m_ddev_èrgp
, 
d
,

829 
mp
->
m_bsize
, 
lock
, &
bp
, 
›s
);

830 i‡(
îr‹
)

831  
îr‹
;

832 i‡(
bp
)

833 
	`xfs_buf_£t_ªf
(
bp
, 
ªfvÆ
);

834 *
bµ
 = 
bp
;

836 
	}
}

844 
	$xfs_båì_ªada_buÊ
(

845 
xfs_mou¡
 *
mp
,

846 
xfs_fsblock_t
 
fsbno
,

847 
xfs_exéí_t
 
cou¡
,

848 c⁄° 
xfs_buf_›s
 *
›s
)

850 
xfs_daddr_t
 
d
;

852 
	`ASSERT
(
fsbno
 !
NULLFSBLOCK
);

853 
d
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
fsbno
);

854 
	`xfs_buf_ªadahód
(
mp
->
m_ddev_èrgp
, 
d
, mp->
m_bsize
 * 
cou¡
, 
›s
);

855 
	}
}

863 
	$xfs_båì_ªada_bufs
(

864 
xfs_mou¡
 *
mp
,

865 
xfs_agnumbî_t
 
agno
,

866 
xfs_agblock_t
 
agbno
,

867 
xfs_exéí_t
 
cou¡
,

868 c⁄° 
xfs_buf_›s
 *
›s
)

870 
xfs_daddr_t
 
d
;

872 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

873 
	`ASSERT
(
agbno
 !
NULLAGBLOCK
);

874 
d
 = 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
);

875 
	`xfs_buf_ªadahód
(
mp
->
m_ddev_èrgp
, 
d
, mp->
m_bsize
 * 
cou¡
, 
›s
);

876 
	}
}

878 
STATIC
 

879 
	$xfs_båì_ªadahód_lblock
(

880 
xfs_båì_cur
 *
cur
,

881 
Ã
,

882 
xfs_båì_block
 *
block
)

884 
rvÆ
 = 0;

885 
xfs_fsblock_t
 
À·
 = 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_À·sib
);

886 
xfs_fsblock_t
 
right
 = 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_rightsib
);

888 i‡((
Ã
 & 
XFS_BTCUR_LEFTRA
Ë&& 
À·
 !
NULLFSBLOCK
) {

889 
	`xfs_båì_ªada_buÊ
(
cur
->
bc_mp
, 
À·
, 1,

890 
cur
->
bc_›s
->
buf_›s
);

891 
rvÆ
++;

894 i‡((
Ã
 & 
XFS_BTCUR_RIGHTRA
Ë&& 
right
 !
NULLFSBLOCK
) {

895 
	`xfs_båì_ªada_buÊ
(
cur
->
bc_mp
, 
right
, 1,

896 
cur
->
bc_›s
->
buf_›s
);

897 
rvÆ
++;

900  
rvÆ
;

901 
	}
}

903 
STATIC
 

904 
	$xfs_båì_ªadahód_sblock
(

905 
xfs_båì_cur
 *
cur
,

906 
Ã
,

907 
xfs_båì_block
 *
block
)

909 
rvÆ
 = 0;

910 
xfs_agblock_t
 
À·
 = 
	`be32_to_˝u
(
block
->
bb_u
.
s
.
bb_À·sib
);

911 
xfs_agblock_t
 
right
 = 
	`be32_to_˝u
(
block
->
bb_u
.
s
.
bb_rightsib
);

914 i‡((
Ã
 & 
XFS_BTCUR_LEFTRA
Ë&& 
À·
 !
NULLAGBLOCK
) {

915 
	`xfs_båì_ªada_bufs
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

916 
À·
, 1, 
cur
->
bc_›s
->
buf_›s
);

917 
rvÆ
++;

920 i‡((
Ã
 & 
XFS_BTCUR_RIGHTRA
Ë&& 
right
 !
NULLAGBLOCK
) {

921 
	`xfs_båì_ªada_bufs
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

922 
right
, 1, 
cur
->
bc_›s
->
buf_›s
);

923 
rvÆ
++;

926  
rvÆ
;

927 
	}
}

933 
STATIC
 

934 
	$xfs_båì_ªadahód
(

935 
xfs_båì_cur
 *
cur
,

936 
Àv
,

937 
Ã
)

939 
xfs_båì_block
 *
block
;

945 i‡((
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
) &&

946 (
Àv
 =
cur
->
bc_∆evñs
 - 1))

949 i‡((
cur
->
bc_ø
[
Àv
] | 
Ã
) == cur->bc_ra[lev])

952 
cur
->
bc_ø
[
Àv
] |
Ã
;

953 
block
 = 
	`XFS_BUF_TO_BLOCK
(
cur
->
bc_bufs
[
Àv
]);

955 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
)

956  
	`xfs_båì_ªadahód_lblock
(
cur
, 
Ã
, 
block
);

957  
	`xfs_båì_ªadahód_sblock
(
cur
, 
Ã
, 
block
);

958 
	}
}

960 
STATIC
 
xfs_daddr_t


961 
	$xfs_båì_±r_to_daddr
(

962 
xfs_båì_cur
 *
cur
,

963 
xfs_båì_±r
 *
±r
)

965 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
) {

966 
	`ASSERT
(
±r
->
l
 !
	`˝u_to_be64
(
NULLFSBLOCK
));

968  
	`XFS_FSB_TO_DADDR
(
cur
->
bc_mp
, 
	`be64_to_˝u
(
±r
->
l
));

970 
	`ASSERT
(
cur
->
bc_¥iv©e
.
a
.
agno
 !
NULLAGNUMBER
);

971 
	`ASSERT
(
±r
->
s
 !
	`˝u_to_be32
(
NULLAGBLOCK
));

973  
	`XFS_AGB_TO_DADDR
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

974 
	`be32_to_˝u
(
±r
->
s
));

976 
	}
}

984 
STATIC
 

985 
	$xfs_båì_ªadahód_±r
(

986 
xfs_båì_cur
 *
cur
,

987 
xfs_båì_±r
 *
±r
,

988 
xfs_exéí_t
 
cou¡
)

990 
	`xfs_buf_ªadahód
(
cur
->
bc_mp
->
m_ddev_èrgp
,

991 
	`xfs_båì_±r_to_daddr
(
cur
, 
±r
),

992 
cur
->
bc_mp
->
m_bsize
 * 
cou¡
, cur->
bc_›s
->
buf_›s
);

993 
	}
}

999 
STATIC
 

1000 
	$xfs_båì_£tbuf
(

1001 
xfs_båì_cur_t
 *
cur
,

1002 
Àv
,

1003 
xfs_buf_t
 *
bp
)

1005 
xfs_båì_block
 *
b
;

1007 i‡(
cur
->
bc_bufs
[
Àv
])

1008 
	`xfs_å™s_bªl£
(
cur
->
bc_ç
, cur->
bc_bufs
[
Àv
]);

1009 
cur
->
bc_bufs
[
Àv
] = 
bp
;

1010 
cur
->
bc_ø
[
Àv
] = 0;

1012 
b
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

1013 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
) {

1014 i‡(
b
->
bb_u
.
l
.
bb_À·sib
 =
	`˝u_to_be64
(
NULLFSBLOCK
))

1015 
cur
->
bc_ø
[
Àv
] |
XFS_BTCUR_LEFTRA
;

1016 i‡(
b
->
bb_u
.
l
.
bb_rightsib
 =
	`˝u_to_be64
(
NULLFSBLOCK
))

1017 
cur
->
bc_ø
[
Àv
] |
XFS_BTCUR_RIGHTRA
;

1019 i‡(
b
->
bb_u
.
s
.
bb_À·sib
 =
	`˝u_to_be32
(
NULLAGBLOCK
))

1020 
cur
->
bc_ø
[
Àv
] |
XFS_BTCUR_LEFTRA
;

1021 i‡(
b
->
bb_u
.
s
.
bb_rightsib
 =
	`˝u_to_be32
(
NULLAGBLOCK
))

1022 
cur
->
bc_ø
[
Àv
] |
XFS_BTCUR_RIGHTRA
;

1024 
	}
}

1026 
STATIC
 

1027 
	$xfs_båì_±r_is_nuŒ
(

1028 
xfs_båì_cur
 *
cur
,

1029 
xfs_båì_±r
 *
±r
)

1031 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
)

1032  
±r
->
l
 =
	`˝u_to_be64
(
NULLFSBLOCK
);

1034  
±r
->
s
 =
	`˝u_to_be32
(
NULLAGBLOCK
);

1035 
	}
}

1037 
STATIC
 

1038 
	$xfs_båì_£t_±r_nuŒ
(

1039 
xfs_båì_cur
 *
cur
,

1040 
xfs_båì_±r
 *
±r
)

1042 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
)

1043 
±r
->
l
 = 
	`˝u_to_be64
(
NULLFSBLOCK
);

1045 
±r
->
s
 = 
	`˝u_to_be32
(
NULLAGBLOCK
);

1046 
	}
}

1051 
STATIC
 

1052 
	$xfs_båì_gë_siblög
(

1053 
xfs_båì_cur
 *
cur
,

1054 
xfs_båì_block
 *
block
,

1055 
xfs_båì_±r
 *
±r
,

1056 
Ã
)

1058 
	`ASSERT
(
Ã
 =
XFS_BB_LEFTSIB
 ||Ü∏=
XFS_BB_RIGHTSIB
);

1060 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
) {

1061 i‡(
Ã
 =
XFS_BB_RIGHTSIB
)

1062 
±r
->
l
 = 
block
->
bb_u
.l.
bb_rightsib
;

1064 
±r
->
l
 = 
block
->
bb_u
.l.
bb_À·sib
;

1066 i‡(
Ã
 =
XFS_BB_RIGHTSIB
)

1067 
±r
->
s
 = 
block
->
bb_u
.s.
bb_rightsib
;

1069 
±r
->
s
 = 
block
->
bb_u
.s.
bb_À·sib
;

1071 
	}
}

1073 
STATIC
 

1074 
	$xfs_båì_£t_siblög
(

1075 
xfs_båì_cur
 *
cur
,

1076 
xfs_båì_block
 *
block
,

1077 
xfs_båì_±r
 *
±r
,

1078 
Ã
)

1080 
	`ASSERT
(
Ã
 =
XFS_BB_LEFTSIB
 ||Ü∏=
XFS_BB_RIGHTSIB
);

1082 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
) {

1083 i‡(
Ã
 =
XFS_BB_RIGHTSIB
)

1084 
block
->
bb_u
.
l
.
bb_rightsib
 = 
±r
->l;

1086 
block
->
bb_u
.
l
.
bb_À·sib
 = 
±r
->l;

1088 i‡(
Ã
 =
XFS_BB_RIGHTSIB
)

1089 
block
->
bb_u
.
s
.
bb_rightsib
 = 
±r
->s;

1091 
block
->
bb_u
.
s
.
bb_À·sib
 = 
±r
->s;

1093 
	}
}

1096 
	$xfs_båì_öô_block_öt
(

1097 
xfs_mou¡
 *
mp
,

1098 
xfs_båì_block
 *
buf
,

1099 
xfs_daddr_t
 
blkno
,

1100 
xfs_bäum_t
 
bäum
,

1101 
__u16
 
Àvñ
,

1102 
__u16
 
numªcs
,

1103 
__u64
 
ow√r
,

1104 
Êags
)

1106 
¸c
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
);

1107 
__u32
 
magic
 = 
	`xfs_båì_magic
(
¸c
, 
bäum
);

1109 
buf
->
bb_magic
 = 
	`˝u_to_be32
(
magic
);

1110 
buf
->
bb_Àvñ
 = 
	`˝u_to_be16
(
Àvñ
);

1111 
buf
->
bb_numªcs
 = 
	`˝u_to_be16
(
numªcs
);

1113 i‡(
Êags
 & 
XFS_BTREE_LONG_PTRS
) {

1114 
buf
->
bb_u
.
l
.
bb_À·sib
 = 
	`˝u_to_be64
(
NULLFSBLOCK
);

1115 
buf
->
bb_u
.
l
.
bb_rightsib
 = 
	`˝u_to_be64
(
NULLFSBLOCK
);

1116 i‡(
¸c
) {

1117 
buf
->
bb_u
.
l
.
bb_blkno
 = 
	`˝u_to_be64
(
blkno
);

1118 
buf
->
bb_u
.
l
.
bb_ow√r
 = 
	`˝u_to_be64
(
ow√r
);

1119 
	`uuid_c›y
(&
buf
->
bb_u
.
l
.
bb_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

1120 
buf
->
bb_u
.
l
.
bb_∑d
 = 0;

1121 
buf
->
bb_u
.
l
.
bb_l¢
 = 0;

1125 
__u32
 
__ow√r
 = (__u32)
ow√r
;

1127 
buf
->
bb_u
.
s
.
bb_À·sib
 = 
	`˝u_to_be32
(
NULLAGBLOCK
);

1128 
buf
->
bb_u
.
s
.
bb_rightsib
 = 
	`˝u_to_be32
(
NULLAGBLOCK
);

1129 i‡(
¸c
) {

1130 
buf
->
bb_u
.
s
.
bb_blkno
 = 
	`˝u_to_be64
(
blkno
);

1131 
buf
->
bb_u
.
s
.
bb_ow√r
 = 
	`˝u_to_be32
(
__ow√r
);

1132 
	`uuid_c›y
(&
buf
->
bb_u
.
s
.
bb_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

1133 
buf
->
bb_u
.
s
.
bb_l¢
 = 0;

1136 
	}
}

1139 
	$xfs_båì_öô_block
(

1140 
xfs_mou¡
 *
mp
,

1141 
xfs_buf
 *
bp
,

1142 
xfs_bäum_t
 
bäum
,

1143 
__u16
 
Àvñ
,

1144 
__u16
 
numªcs
,

1145 
__u64
 
ow√r
,

1146 
Êags
)

1148 
	`xfs_båì_öô_block_öt
(
mp
, 
	`XFS_BUF_TO_BLOCK
(
bp
), bp->
b_bn
,

1149 
bäum
, 
Àvñ
, 
numªcs
, 
ow√r
, 
Êags
);

1150 
	}
}

1152 
STATIC
 

1153 
	$xfs_båì_öô_block_cur
(

1154 
xfs_båì_cur
 *
cur
,

1155 
xfs_buf
 *
bp
,

1156 
Àvñ
,

1157 
numªcs
)

1159 
__u64
 
ow√r
;

1167 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
)

1168 
ow√r
 = 
cur
->
bc_¥iv©e
.
b
.
ù
->
i_öo
;

1170 
ow√r
 = 
cur
->
bc_¥iv©e
.
a
.
agno
;

1172 
	`xfs_båì_öô_block_öt
(
cur
->
bc_mp
, 
	`XFS_BUF_TO_BLOCK
(
bp
), bp->
b_bn
,

1173 
cur
->
bc_bäum
, 
Àvñ
, 
numªcs
,

1174 
ow√r
, 
cur
->
bc_Êags
);

1175 
	}
}

1182 
STATIC
 

1183 
	$xfs_båì_is_œ°ªc
(

1184 
xfs_båì_cur
 *
cur
,

1185 
xfs_båì_block
 *
block
,

1186 
Àvñ
)

1188 
xfs_båì_±r
 
±r
;

1190 i‡(
Àvñ
 > 0)

1192 i‡(!(
cur
->
bc_Êags
 & 
XFS_BTREE_LASTREC_UPDATE
))

1195 
	`xfs_båì_gë_siblög
(
cur
, 
block
, &
±r
, 
XFS_BB_RIGHTSIB
);

1196 i‡(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
±r
))

1199 
	}
}

1201 
STATIC
 

1202 
	$xfs_båì_buf_to_±r
(

1203 
xfs_båì_cur
 *
cur
,

1204 
xfs_buf
 *
bp
,

1205 
xfs_båì_±r
 *
±r
)

1207 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
)

1208 
±r
->
l
 = 
	`˝u_to_be64
(
	`XFS_DADDR_TO_FSB
(
cur
->
bc_mp
,

1209 
	`XFS_BUF_ADDR
(
bp
)));

1211 
±r
->
s
 = 
	`˝u_to_be32
(
	`xfs_daddr_to_agbno
(
cur
->
bc_mp
,

1212 
	`XFS_BUF_ADDR
(
bp
)));

1214 
	}
}

1216 
STATIC
 

1217 
	$xfs_båì_£t_ªfs
(

1218 
xfs_båì_cur
 *
cur
,

1219 
xfs_buf
 *
bp
)

1221 
cur
->
bc_bäum
) {

1222 
XFS_BTNUM_BNO
:

1223 
XFS_BTNUM_CNT
:

1224 
	`xfs_buf_£t_ªf
(
bp
, 
XFS_ALLOC_BTREE_REF
);

1226 
XFS_BTNUM_INO
:

1227 
XFS_BTNUM_FINO
:

1228 
	`xfs_buf_£t_ªf
(
bp
, 
XFS_INO_BTREE_REF
);

1230 
XFS_BTNUM_BMAP
:

1231 
	`xfs_buf_£t_ªf
(
bp
, 
XFS_BMAP_BTREE_REF
);

1233 
XFS_BTNUM_RMAP
:

1234 
	`xfs_buf_£t_ªf
(
bp
, 
XFS_RMAP_BTREE_REF
);

1236 
XFS_BTNUM_REFC
:

1237 
	`xfs_buf_£t_ªf
(
bp
, 
XFS_REFC_BTREE_REF
);

1240 
	`ASSERT
(0);

1242 
	}
}

1244 
STATIC
 

1245 
	$xfs_båì_gë_buf_block
(

1246 
xfs_båì_cur
 *
cur
,

1247 
xfs_båì_±r
 *
±r
,

1248 
Êags
,

1249 
xfs_båì_block
 **
block
,

1250 
xfs_buf
 **
bµ
)

1252 
xfs_mou¡
 *
mp
 = 
cur
->
bc_mp
;

1253 
xfs_daddr_t
 
d
;

1256 
	`ASSERT
(!(
Êags
 & 
XBF_TRYLOCK
));

1258 
d
 = 
	`xfs_båì_±r_to_daddr
(
cur
, 
±r
);

1259 *
bµ
 = 
	`xfs_å™s_gë_buf
(
cur
->
bc_ç
, 
mp
->
m_ddev_èrgp
, 
d
,

1260 
mp
->
m_bsize
, 
Êags
);

1262 i‡(!*
bµ
)

1263  -
ENOMEM
;

1265 (*
bµ
)->
b_›s
 = 
cur
->
bc_›s
->
buf_›s
;

1266 *
block
 = 
	`XFS_BUF_TO_BLOCK
(*
bµ
);

1268 
	}
}

1274 
STATIC
 

1275 
	$xfs_båì_ªad_buf_block
(

1276 
xfs_båì_cur
 *
cur
,

1277 
xfs_båì_±r
 *
±r
,

1278 
Êags
,

1279 
xfs_båì_block
 **
block
,

1280 
xfs_buf
 **
bµ
)

1282 
xfs_mou¡
 *
mp
 = 
cur
->
bc_mp
;

1283 
xfs_daddr_t
 
d
;

1284 
îr‹
;

1287 
	`ASSERT
(!(
Êags
 & 
XBF_TRYLOCK
));

1289 
d
 = 
	`xfs_båì_±r_to_daddr
(
cur
, 
±r
);

1290 
îr‹
 = 
	`xfs_å™s_ªad_buf
(
mp
, 
cur
->
bc_ç
, mp->
m_ddev_èrgp
, 
d
,

1291 
mp
->
m_bsize
, 
Êags
, 
bµ
,

1292 
cur
->
bc_›s
->
buf_›s
);

1293 i‡(
îr‹
)

1294  
îr‹
;

1296 
	`xfs_båì_£t_ªfs
(
cur
, *
bµ
);

1297 *
block
 = 
	`XFS_BUF_TO_BLOCK
(*
bµ
);

1299 
	}
}

1304 
STATIC
 

1305 
	$xfs_båì_c›y_keys
(

1306 
xfs_båì_cur
 *
cur
,

1307 
xfs_båì_key
 *
d°_key
,

1308 
xfs_båì_key
 *
§c_key
,

1309 
numkeys
)

1311 
	`ASSERT
(
numkeys
 >= 0);

1312 
	`mem˝y
(
d°_key
, 
§c_key
, 
numkeys
 * 
cur
->
bc_›s
->
key_Àn
);

1313 
	}
}

1318 
STATIC
 

1319 
	$xfs_båì_c›y_ªcs
(

1320 
xfs_båì_cur
 *
cur
,

1321 
xfs_båì_ªc
 *
d°_ªc
,

1322 
xfs_båì_ªc
 *
§c_ªc
,

1323 
numªcs
)

1325 
	`ASSERT
(
numªcs
 >= 0);

1326 
	`mem˝y
(
d°_ªc
, 
§c_ªc
, 
numªcs
 * 
cur
->
bc_›s
->
ªc_Àn
);

1327 
	}
}

1332 
STATIC
 

1333 
	$xfs_båì_c›y_±rs
(

1334 
xfs_båì_cur
 *
cur
,

1335 
xfs_båì_±r
 *
d°_±r
,

1336 
xfs_båì_±r
 *
§c_±r
,

1337 
num±rs
)

1339 
	`ASSERT
(
num±rs
 >= 0);

1340 
	`mem˝y
(
d°_±r
, 
§c_±r
, 
num±rs
 * 
	`xfs_båì_±r_Àn
(
cur
));

1341 
	}
}

1346 
STATIC
 

1347 
	$xfs_båì_shi·_keys
(

1348 
xfs_båì_cur
 *
cur
,

1349 
xfs_båì_key
 *
key
,

1350 
dú
,

1351 
numkeys
)

1353 *
d°_key
;

1355 
	`ASSERT
(
numkeys
 >= 0);

1356 
	`ASSERT
(
dú
 == 1 || dir == -1);

1358 
d°_key
 = (*)
key
 + (
dú
 * 
cur
->
bc_›s
->
key_Àn
);

1359 
	`memmove
(
d°_key
, 
key
, 
numkeys
 * 
cur
->
bc_›s
->
key_Àn
);

1360 
	}
}

1365 
STATIC
 

1366 
	$xfs_båì_shi·_ªcs
(

1367 
xfs_båì_cur
 *
cur
,

1368 
xfs_båì_ªc
 *
ªc
,

1369 
dú
,

1370 
numªcs
)

1372 *
d°_ªc
;

1374 
	`ASSERT
(
numªcs
 >= 0);

1375 
	`ASSERT
(
dú
 == 1 || dir == -1);

1377 
d°_ªc
 = (*)
ªc
 + (
dú
 * 
cur
->
bc_›s
->
ªc_Àn
);

1378 
	`memmove
(
d°_ªc
, 
ªc
, 
numªcs
 * 
cur
->
bc_›s
->
ªc_Àn
);

1379 
	}
}

1384 
STATIC
 

1385 
	$xfs_båì_shi·_±rs
(

1386 
xfs_båì_cur
 *
cur
,

1387 
xfs_båì_±r
 *
±r
,

1388 
dú
,

1389 
num±rs
)

1391 *
d°_±r
;

1393 
	`ASSERT
(
num±rs
 >= 0);

1394 
	`ASSERT
(
dú
 == 1 || dir == -1);

1396 
d°_±r
 = (*)
±r
 + (
dú
 * 
	`xfs_båì_±r_Àn
(
cur
));

1397 
	`memmove
(
d°_±r
, 
±r
, 
num±rs
 * 
	`xfs_båì_±r_Àn
(
cur
));

1398 
	}
}

1403 
STATIC
 

1404 
	$xfs_båì_log_keys
(

1405 
xfs_båì_cur
 *
cur
,

1406 
xfs_buf
 *
bp
,

1407 
fú°
,

1408 
œ°
)

1410 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

1411 
	`XFS_BTREE_TRACE_ARGBII
(
cur
, 
bp
, 
fú°
, 
œ°
);

1413 i‡(
bp
) {

1414 
	`xfs_å™s_buf_£t_ty≥
(
cur
->
bc_ç
, 
bp
, 
XFS_BLFT_BTREE_BUF
);

1415 
	`xfs_å™s_log_buf
(
cur
->
bc_ç
, 
bp
,

1416 
	`xfs_båì_key_off£t
(
cur
, 
fú°
),

1417 
	`xfs_båì_key_off£t
(
cur
, 
œ°
 + 1) - 1);

1419 
	`xfs_å™s_log_öode
(
cur
->
bc_ç
, cur->
bc_¥iv©e
.
b
.
ù
,

1420 
	`xfs_ûog_fbroŸ
(
cur
->
bc_¥iv©e
.
b
.
whichf‹k
));

1423 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

1424 
	}
}

1430 
	$xfs_båì_log_ªcs
(

1431 
xfs_båì_cur
 *
cur
,

1432 
xfs_buf
 *
bp
,

1433 
fú°
,

1434 
œ°
)

1436 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

1437 
	`XFS_BTREE_TRACE_ARGBII
(
cur
, 
bp
, 
fú°
, 
œ°
);

1439 
	`xfs_å™s_buf_£t_ty≥
(
cur
->
bc_ç
, 
bp
, 
XFS_BLFT_BTREE_BUF
);

1440 
	`xfs_å™s_log_buf
(
cur
->
bc_ç
, 
bp
,

1441 
	`xfs_båì_ªc_off£t
(
cur
, 
fú°
),

1442 
	`xfs_båì_ªc_off£t
(
cur
, 
œ°
 + 1) - 1);

1444 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

1445 
	}
}

1450 
STATIC
 

1451 
	$xfs_båì_log_±rs
(

1452 
xfs_båì_cur
 *
cur
,

1453 
xfs_buf
 *
bp
,

1454 
fú°
,

1455 
œ°
)

1457 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

1458 
	`XFS_BTREE_TRACE_ARGBII
(
cur
, 
bp
, 
fú°
, 
œ°
);

1460 i‡(
bp
) {

1461 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

1462 
Àvñ
 = 
	`xfs_båì_gë_Àvñ
(
block
);

1464 
	`xfs_å™s_buf_£t_ty≥
(
cur
->
bc_ç
, 
bp
, 
XFS_BLFT_BTREE_BUF
);

1465 
	`xfs_å™s_log_buf
(
cur
->
bc_ç
, 
bp
,

1466 
	`xfs_båì_±r_off£t
(
cur
, 
fú°
, 
Àvñ
),

1467 
	`xfs_båì_±r_off£t
(
cur
, 
œ°
 + 1, 
Àvñ
) - 1);

1469 
	`xfs_å™s_log_öode
(
cur
->
bc_ç
, cur->
bc_¥iv©e
.
b
.
ù
,

1470 
	`xfs_ûog_fbroŸ
(
cur
->
bc_¥iv©e
.
b
.
whichf‹k
));

1473 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

1474 
	}
}

1480 
	$xfs_båì_log_block
(

1481 
xfs_båì_cur
 *
cur
,

1482 
xfs_buf
 *
bp
,

1483 
fõlds
)

1485 
fú°
;

1486 
œ°
;

1487 c⁄° 
soff£ts
[] = {

1488 
	`off£tof
(
xfs_båì_block
, 
bb_magic
),

1489 
	`off£tof
(
xfs_båì_block
, 
bb_Àvñ
),

1490 
	`off£tof
(
xfs_båì_block
, 
bb_numªcs
),

1491 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
s
.
bb_À·sib
),

1492 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
s
.
bb_rightsib
),

1493 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
s
.
bb_blkno
),

1494 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
s
.
bb_l¢
),

1495 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
s
.
bb_uuid
),

1496 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
s
.
bb_ow√r
),

1497 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
s
.
bb_¸c
),

1498 
XFS_BTREE_SBLOCK_CRC_LEN


1500 c⁄° 
loff£ts
[] = {

1501 
	`off£tof
(
xfs_båì_block
, 
bb_magic
),

1502 
	`off£tof
(
xfs_båì_block
, 
bb_Àvñ
),

1503 
	`off£tof
(
xfs_båì_block
, 
bb_numªcs
),

1504 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
l
.
bb_À·sib
),

1505 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
l
.
bb_rightsib
),

1506 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
l
.
bb_blkno
),

1507 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
l
.
bb_l¢
),

1508 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
l
.
bb_uuid
),

1509 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
l
.
bb_ow√r
),

1510 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
l
.
bb_¸c
),

1511 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
l
.
bb_∑d
),

1512 
XFS_BTREE_LBLOCK_CRC_LEN


1515 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

1516 
	`XFS_BTREE_TRACE_ARGBI
(
cur
, 
bp
, 
fõlds
);

1518 i‡(
bp
) {

1519 
nbôs
;

1521 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_CRC_BLOCKS
) {

1529 i‡(
fõlds
 =
XFS_BB_ALL_BITS
)

1530 
fõlds
 = 
XFS_BB_ALL_BITS_CRC
;

1531 
nbôs
 = 
XFS_BB_NUM_BITS_CRC
;

1533 
nbôs
 = 
XFS_BB_NUM_BITS
;

1535 
	`xfs_båì_off£ts
(
fõlds
,

1536 (
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
) ?

1537 
loff£ts
 : 
soff£ts
,

1538 
nbôs
, &
fú°
, &
œ°
);

1539 
	`xfs_å™s_buf_£t_ty≥
(
cur
->
bc_ç
, 
bp
, 
XFS_BLFT_BTREE_BUF
);

1540 
	`xfs_å™s_log_buf
(
cur
->
bc_ç
, 
bp
, 
fú°
, 
œ°
);

1542 
	`xfs_å™s_log_öode
(
cur
->
bc_ç
, cur->
bc_¥iv©e
.
b
.
ù
,

1543 
	`xfs_ûog_fbroŸ
(
cur
->
bc_¥iv©e
.
b
.
whichf‹k
));

1546 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

1547 
	}
}

1554 
	$xfs_båì_ö¸emít
(

1555 
xfs_båì_cur
 *
cur
,

1556 
Àvñ
,

1557 *
°©
)

1559 
xfs_båì_block
 *
block
;

1560 
xfs_båì_±r
 
±r
;

1561 
xfs_buf
 *
bp
;

1562 
îr‹
;

1563 
Àv
;

1565 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

1566 
	`XFS_BTREE_TRACE_ARGI
(
cur
, 
Àvñ
);

1568 
	`ASSERT
(
Àvñ
 < 
cur
->
bc_∆evñs
);

1571 
	`xfs_båì_ªadahód
(
cur
, 
Àvñ
, 
XFS_BTCUR_RIGHTRA
);

1574 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

1576 #ifde‡
DEBUG


1577 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

1578 i‡(
îr‹
)

1579 
îr‹0
;

1583 i‡(++
cur
->
bc_±rs
[
Àvñ
] <
	`xfs_båì_gë_numªcs
(
block
))

1584 
out1
;

1587 
	`xfs_båì_gë_siblög
(
cur
, 
block
, &
±r
, 
XFS_BB_RIGHTSIB
);

1588 i‡(
	`xfs_båì_±r_is_nuŒ
(
cur
, &
±r
))

1589 
out0
;

1591 
	`XFS_BTREE_STATS_INC
(
cur
, 
ö¸emít
);

1597 
Àv
 = 
Àvñ
 + 1;Üev < 
cur
->
bc_∆evñs
;Üev++) {

1598 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àv
, &
bp
);

1600 #ifde‡
DEBUG


1601 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àv
, 
bp
);

1602 i‡(
îr‹
)

1603 
îr‹0
;

1606 i‡(++
cur
->
bc_±rs
[
Àv
] <
	`xfs_båì_gë_numªcs
(
block
))

1610 
	`xfs_båì_ªadahód
(
cur
, 
Àv
, 
XFS_BTCUR_RIGHTRA
);

1617 i‡(
Àv
 =
cur
->
bc_∆evñs
) {

1618 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
)

1619 
out0
;

1620 
	`ASSERT
(0);

1621 
îr‹
 = -
EFSCORRUPTED
;

1622 
îr‹0
;

1624 
	`ASSERT
(
Àv
 < 
cur
->
bc_∆evñs
);

1630 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àv
, &
bp
);Üev > 
Àvñ
; ) {

1631 
xfs_båì_±r
 *
±Ω
;

1633 
±Ω
 = 
	`xfs_båì_±r_addr
(
cur
, cur->
bc_±rs
[
Àv
], 
block
);

1634 --
Àv
;

1635 
îr‹
 = 
	`xfs_båì_ªad_buf_block
(
cur
, 
±Ω
, 0, &
block
, &
bp
);

1636 i‡(
îr‹
)

1637 
îr‹0
;

1639 
	`xfs_båì_£tbuf
(
cur
, 
Àv
, 
bp
);

1640 
cur
->
bc_±rs
[
Àv
] = 1;

1642 
out1
:

1643 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

1644 *
°©
 = 1;

1647 
out0
:

1648 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

1649 *
°©
 = 0;

1652 
îr‹0
:

1653 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

1654  
îr‹
;

1655 
	}
}

1662 
	$xfs_båì_de¸emít
(

1663 
xfs_båì_cur
 *
cur
,

1664 
Àvñ
,

1665 *
°©
)

1667 
xfs_båì_block
 *
block
;

1668 
xfs_buf_t
 *
bp
;

1669 
îr‹
;

1670 
Àv
;

1671 
xfs_båì_±r
 
±r
;

1673 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

1674 
	`XFS_BTREE_TRACE_ARGI
(
cur
, 
Àvñ
);

1676 
	`ASSERT
(
Àvñ
 < 
cur
->
bc_∆evñs
);

1679 
	`xfs_båì_ªadahód
(
cur
, 
Àvñ
, 
XFS_BTCUR_LEFTRA
);

1682 i‡(--
cur
->
bc_±rs
[
Àvñ
] > 0)

1683 
out1
;

1686 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

1688 #ifde‡
DEBUG


1689 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

1690 i‡(
îr‹
)

1691 
îr‹0
;

1695 
	`xfs_båì_gë_siblög
(
cur
, 
block
, &
±r
, 
XFS_BB_LEFTSIB
);

1696 i‡(
	`xfs_båì_±r_is_nuŒ
(
cur
, &
±r
))

1697 
out0
;

1699 
	`XFS_BTREE_STATS_INC
(
cur
, 
de¸emít
);

1705 
Àv
 = 
Àvñ
 + 1;Üev < 
cur
->
bc_∆evñs
;Üev++) {

1706 i‡(--
cur
->
bc_±rs
[
Àv
] > 0)

1709 
	`xfs_båì_ªadahód
(
cur
, 
Àv
, 
XFS_BTCUR_LEFTRA
);

1716 i‡(
Àv
 =
cur
->
bc_∆evñs
) {

1717 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
)

1718 
out0
;

1719 
	`ASSERT
(0);

1720 
îr‹
 = -
EFSCORRUPTED
;

1721 
îr‹0
;

1723 
	`ASSERT
(
Àv
 < 
cur
->
bc_∆evñs
);

1729 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àv
, &
bp
);Üev > 
Àvñ
; ) {

1730 
xfs_båì_±r
 *
±Ω
;

1732 
±Ω
 = 
	`xfs_båì_±r_addr
(
cur
, cur->
bc_±rs
[
Àv
], 
block
);

1733 --
Àv
;

1734 
îr‹
 = 
	`xfs_båì_ªad_buf_block
(
cur
, 
±Ω
, 0, &
block
, &
bp
);

1735 i‡(
îr‹
)

1736 
îr‹0
;

1737 
	`xfs_båì_£tbuf
(
cur
, 
Àv
, 
bp
);

1738 
cur
->
bc_±rs
[
Àv
] = 
	`xfs_båì_gë_numªcs
(
block
);

1740 
out1
:

1741 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

1742 *
°©
 = 1;

1745 
out0
:

1746 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

1747 *
°©
 = 0;

1750 
îr‹0
:

1751 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

1752  
îr‹
;

1753 
	}
}

1755 
STATIC
 

1756 
	$xfs_båì_lookup_gë_block
(

1757 
xfs_båì_cur
 *
cur
,

1758 
Àvñ
,

1759 
xfs_båì_±r
 *
µ
,

1760 
xfs_båì_block
 **
blkp
)

1762 
xfs_buf
 *
bp
;

1763 
îr‹
 = 0;

1766 i‡((
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
) &&

1767 (
Àvñ
 =
cur
->
bc_∆evñs
 - 1)) {

1768 *
blkp
 = 
	`xfs_båì_gë_úoŸ
(
cur
);

1778 
bp
 = 
cur
->
bc_bufs
[
Àvñ
];

1779 i‡(
bp
 && 
	`XFS_BUF_ADDR
(bpË=
	`xfs_båì_±r_to_daddr
(
cur
, 
µ
)) {

1780 *
blkp
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

1784 
îr‹
 = 
	`xfs_båì_ªad_buf_block
(
cur
, 
µ
, 0, 
blkp
, &
bp
);

1785 i‡(
îr‹
)

1786  
îr‹
;

1789 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
cur
->
bc_mp
->
m_sb
) &&

1790 (
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
) &&

1791 
	`be64_to_˝u
((*
blkp
)->
bb_u
.
l
.
bb_ow√r
) !=

1792 
cur
->
bc_¥iv©e
.
b
.
ù
->
i_öo
)

1793 
out_bad
;

1796 i‡(
	`be16_to_˝u
((*
blkp
)->
bb_Àvñ
Ë!
Àvñ
)

1797 
out_bad
;

1800 i‡(
Àvñ
 !0 && 
	`be16_to_˝u
((*
blkp
)->
bb_numªcs
) == 0)

1801 
out_bad
;

1803 
	`xfs_båì_£tbuf
(
cur
, 
Àvñ
, 
bp
);

1806 
out_bad
:

1807 *
blkp
 = 
NULL
;

1808 
	`xfs_å™s_bªl£
(
cur
->
bc_ç
, 
bp
);

1809  -
EFSCORRUPTED
;

1810 
	}
}

1817 
STATIC
 
xfs_båì_key
 *

1818 
	$xfs_lookup_gë_£¨ch_key
(

1819 
xfs_båì_cur
 *
cur
,

1820 
Àvñ
,

1821 
keyno
,

1822 
xfs_båì_block
 *
block
,

1823 
xfs_båì_key
 *
kp
)

1825 i‡(
Àvñ
 == 0) {

1826 
cur
->
bc_›s
->
	`öô_key_‰om_ªc
(
kp
,

1827 
	`xfs_båì_ªc_addr
(
cur
, 
keyno
, 
block
));

1828  
kp
;

1831  
	`xfs_båì_key_addr
(
cur
, 
keyno
, 
block
);

1832 
	}
}

1839 
	$xfs_båì_lookup
(

1840 
xfs_båì_cur
 *
cur
,

1841 
xfs_lookup_t
 
dú
,

1842 *
°©
)

1844 
xfs_båì_block
 *
block
;

1845 
__öt64_t
 
diff
;

1846 
îr‹
;

1847 
keyno
;

1848 
Àvñ
;

1849 
xfs_båì_±r
 *
µ
;

1850 
xfs_båì_±r
 
±r
;

1852 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

1853 
	`XFS_BTREE_TRACE_ARGI
(
cur
, 
dú
);

1855 
	`XFS_BTREE_STATS_INC
(
cur
, 
lookup
);

1858 i‡(
cur
->
bc_∆evñs
 == 0)

1859  -
EFSCORRUPTED
;

1861 
block
 = 
NULL
;

1862 
keyno
 = 0;

1865 
cur
->
bc_›s
->
	`öô_±r_‰om_cur
(cur, &
±r
);

1866 
µ
 = &
±r
;

1874 
Àvñ
 = 
cur
->
bc_∆evñs
 - 1, 
diff
 = 1;Üevel >= 0;Üevel--) {

1876 
îr‹
 = 
	`xfs_båì_lookup_gë_block
(
cur
, 
Àvñ
, 
µ
, &
block
);

1877 i‡(
îr‹
)

1878 
îr‹0
;

1880 i‡(
diff
 == 0) {

1885 
keyno
 = 1;

1889 
high
;

1890 
low
;

1893 
low
 = 1;

1894 
high
 = 
	`xfs_båì_gë_numªcs
(
block
);

1895 i‡(!
high
) {

1897 
	`ASSERT
(
Àvñ
 =0 && 
cur
->
bc_∆evñs
 == 1);

1899 
cur
->
bc_±rs
[0] = 
dú
 !
XFS_LOOKUP_LE
;

1900 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

1901 *
°©
 = 0;

1906 
low
 <
high
) {

1907 
xfs_båì_key
 
key
;

1908 
xfs_båì_key
 *
kp
;

1910 
	`XFS_BTREE_STATS_INC
(
cur
, 
com∑ª
);

1913 
keyno
 = (
low
 + 
high
) >> 1;

1916 
kp
 = 
	`xfs_lookup_gë_£¨ch_key
(
cur
, 
Àvñ
,

1917 
keyno
, 
block
, &
key
);

1925 
diff
 = 
cur
->
bc_›s
->
	`key_diff
(cur, 
kp
);

1926 i‡(
diff
 < 0)

1927 
low
 = 
keyno
 + 1;

1928 i‡(
diff
 > 0)

1929 
high
 = 
keyno
 - 1;

1939 i‡(
Àvñ
 > 0) {

1944 i‡(
diff
 > 0 && --
keyno
 < 1)

1945 
keyno
 = 1;

1946 
µ
 = 
	`xfs_båì_±r_addr
(
cur
, 
keyno
, 
block
);

1948 #ifde‡
DEBUG


1949 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
µ
, 0, 
Àvñ
);

1950 i‡(
îr‹
)

1951 
îr‹0
;

1953 
cur
->
bc_±rs
[
Àvñ
] = 
keyno
;

1958 i‡(
dú
 !
XFS_LOOKUP_LE
 && 
diff
 < 0) {

1959 
keyno
++;

1964 
	`xfs_båì_gë_siblög
(
cur
, 
block
, &
±r
, 
XFS_BB_RIGHTSIB
);

1965 i‡(
dú
 =
XFS_LOOKUP_GE
 &&

1966 
keyno
 > 
	`xfs_båì_gë_numªcs
(
block
) &&

1967 !
	`xfs_båì_±r_is_nuŒ
(
cur
, &
±r
)) {

1968 
i
;

1970 
cur
->
bc_±rs
[0] = 
keyno
;

1971 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
);

1972 i‡(
îr‹
)

1973 
îr‹0
;

1974 
	`XFS_WANT_CORRUPTED_RETURN
(
cur
->
bc_mp
, 
i
 == 1);

1975 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

1976 *
°©
 = 1;

1979 } i‡(
dú
 =
XFS_LOOKUP_LE
 && 
diff
 > 0)

1980 
keyno
--;

1981 
cur
->
bc_±rs
[0] = 
keyno
;

1984 i‡(
keyno
 =0 || keynÿ> 
	`xfs_båì_gë_numªcs
(
block
))

1985 *
°©
 = 0;

1986 i‡(
dú
 !
XFS_LOOKUP_EQ
 || 
diff
 == 0)

1987 *
°©
 = 1;

1989 *
°©
 = 0;

1990 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

1993 
îr‹0
:

1994 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

1995  
îr‹
;

1996 
	}
}

1999 
STATIC
 
xfs_båì_key
 *

2000 
	$xfs_båì_high_key_‰om_key
(

2001 
xfs_båì_cur
 *
cur
,

2002 
xfs_båì_key
 *
key
)

2004 
	`ASSERT
(
cur
->
bc_Êags
 & 
XFS_BTREE_OVERLAPPING
);

2005  (
xfs_båì_key
 *)((*)
key
 +

2006 (
cur
->
bc_›s
->
key_Àn
 / 2));

2007 
	}
}

2010 
STATIC
 

2011 
	$xfs_båì_gë_Àaf_keys
(

2012 
xfs_båì_cur
 *
cur
,

2013 
xfs_båì_block
 *
block
,

2014 
xfs_båì_key
 *
key
)

2016 
xfs_båì_key
 
max_hkey
;

2017 
xfs_båì_key
 
hkey
;

2018 
xfs_båì_ªc
 *
ªc
;

2019 
xfs_båì_key
 *
high
;

2020 
n
;

2022 
ªc
 = 
	`xfs_båì_ªc_addr
(
cur
, 1, 
block
);

2023 
cur
->
bc_›s
->
	`öô_key_‰om_ªc
(
key
, 
ªc
);

2025 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_OVERLAPPING
) {

2027 
cur
->
bc_›s
->
	`öô_high_key_‰om_ªc
(&
max_hkey
, 
ªc
);

2028 
n
 = 2;Ç <
	`xfs_båì_gë_numªcs
(
block
);Ç++) {

2029 
ªc
 = 
	`xfs_båì_ªc_addr
(
cur
, 
n
, 
block
);

2030 
cur
->
bc_›s
->
	`öô_high_key_‰om_ªc
(&
hkey
, 
ªc
);

2031 i‡(
cur
->
bc_›s
->
	`diff_two_keys
(cur, &
hkey
, &
max_hkey
)

2033 
max_hkey
 = 
hkey
;

2036 
high
 = 
	`xfs_båì_high_key_‰om_key
(
cur
, 
key
);

2037 
	`mem˝y
(
high
, &
max_hkey
, 
cur
->
bc_›s
->
key_Àn
 / 2);

2039 
	}
}

2042 
STATIC
 

2043 
	$xfs_båì_gë_node_keys
(

2044 
xfs_båì_cur
 *
cur
,

2045 
xfs_båì_block
 *
block
,

2046 
xfs_båì_key
 *
key
)

2048 
xfs_båì_key
 *
hkey
;

2049 
xfs_båì_key
 *
max_hkey
;

2050 
xfs_båì_key
 *
high
;

2051 
n
;

2053 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_OVERLAPPING
) {

2054 
	`mem˝y
(
key
, 
	`xfs_båì_key_addr
(
cur
, 1, 
block
),

2055 
cur
->
bc_›s
->
key_Àn
 / 2);

2057 
max_hkey
 = 
	`xfs_båì_high_key_addr
(
cur
, 1, 
block
);

2058 
n
 = 2;Ç <
	`xfs_båì_gë_numªcs
(
block
);Ç++) {

2059 
hkey
 = 
	`xfs_båì_high_key_addr
(
cur
, 
n
, 
block
);

2060 i‡(
cur
->
bc_›s
->
	`diff_two_keys
(cur, 
hkey
, 
max_hkey
) > 0)

2061 
max_hkey
 = 
hkey
;

2064 
high
 = 
	`xfs_båì_high_key_‰om_key
(
cur
, 
key
);

2065 
	`mem˝y
(
high
, 
max_hkey
, 
cur
->
bc_›s
->
key_Àn
 / 2);

2067 
	`mem˝y
(
key
, 
	`xfs_båì_key_addr
(
cur
, 1, 
block
),

2068 
cur
->
bc_›s
->
key_Àn
);

2070 
	}
}

2073 
STATIC
 

2074 
	$xfs_båì_gë_keys
(

2075 
xfs_båì_cur
 *
cur
,

2076 
xfs_båì_block
 *
block
,

2077 
xfs_båì_key
 *
key
)

2079 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
) == 0)

2080 
	`xfs_båì_gë_Àaf_keys
(
cur
, 
block
, 
key
);

2082 
	`xfs_båì_gë_node_keys
(
cur
, 
block
, 
key
);

2083 
	}
}

2092 
ölöe
 
boﬁ


2093 
	$xfs_båì_√eds_key_upd©e
(

2094 
xfs_båì_cur
 *
cur
,

2095 
±r
)

2097  (
cur
->
bc_Êags
 & 
XFS_BTREE_OVERLAPPING
Ë|| 
±r
 == 1;

2098 
	}
}

2105 
STATIC
 

2106 
	$__xfs_båì_updkeys
(

2107 
xfs_båì_cur
 *
cur
,

2108 
Àvñ
,

2109 
xfs_båì_block
 *
block
,

2110 
xfs_buf
 *
bp0
,

2111 
boﬁ
 
f‹˚_Æl
)

2113 
xfs_båì_key
 
key
;

2114 
xfs_båì_key
 *
lkey
;

2115 
xfs_båì_key
 *
hkey
;

2116 
xfs_båì_key
 *
∆key
;

2117 
xfs_båì_key
 *
nhkey
;

2118 
xfs_buf
 *
bp
;

2119 
±r
;

2121 
	`ASSERT
(
cur
->
bc_Êags
 & 
XFS_BTREE_OVERLAPPING
);

2124 i‡(
Àvñ
 + 1 >
cur
->
bc_∆evñs
)

2127 
	`åa˚_xfs_båì_updkeys
(
cur
, 
Àvñ
, 
bp0
);

2129 
lkey
 = &
key
;

2130 
hkey
 = 
	`xfs_båì_high_key_‰om_key
(
cur
, 
lkey
);

2131 
	`xfs_båì_gë_keys
(
cur
, 
block
, 
lkey
);

2132 
Àvñ
++;Üevñ < 
cur
->
bc_∆evñs
;Üevel++) {

2133 #ifde‡
DEBUG


2134 
îr‹
;

2136 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

2137 
	`åa˚_xfs_båì_updkeys
(
cur
, 
Àvñ
, 
bp
);

2138 #ifde‡
DEBUG


2139 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

2140 i‡(
îr‹
) {

2141 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

2142  
îr‹
;

2145 
±r
 = 
cur
->
bc_±rs
[
Àvñ
];

2146 
∆key
 = 
	`xfs_båì_key_addr
(
cur
, 
±r
, 
block
);

2147 
nhkey
 = 
	`xfs_båì_high_key_addr
(
cur
, 
±r
, 
block
);

2148 i‡(!
f‹˚_Æl
 &&

2149 !(
cur
->
bc_›s
->
	`diff_two_keys
(cur, 
∆key
, 
lkey
) != 0 ||

2150 
cur
->
bc_›s
->
	`diff_two_keys
(cur, 
nhkey
, 
hkey
) != 0))

2152 
	`xfs_båì_c›y_keys
(
cur
, 
∆key
, 
lkey
, 1);

2153 
	`xfs_båì_log_keys
(
cur
, 
bp
, 
±r
,Ötr);

2154 i‡(
Àvñ
 + 1 >
cur
->
bc_∆evñs
)

2156 
	`xfs_båì_gë_node_keys
(
cur
, 
block
, 
lkey
);

2160 
	}
}

2163 
STATIC
 

2164 
	$xfs_båì_updkeys_f‹˚
(

2165 
xfs_båì_cur
 *
cur
,

2166 
Àvñ
)

2168 
xfs_buf
 *
bp
;

2169 
xfs_båì_block
 *
block
;

2171 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

2172  
	`__xfs_båì_updkeys
(
cur
, 
Àvñ
, 
block
, 
bp
, 
åue
);

2173 
	}
}

2178 
STATIC
 

2179 
	$xfs_båì_upd©e_keys
(

2180 
xfs_båì_cur
 *
cur
,

2181 
Àvñ
)

2183 
xfs_båì_block
 *
block
;

2184 
xfs_buf
 *
bp
;

2185 
xfs_båì_key
 *
kp
;

2186 
xfs_båì_key
 
key
;

2187 
±r
;

2189 
	`ASSERT
(
Àvñ
 >= 0);

2191 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

2192 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_OVERLAPPING
)

2193  
	`__xfs_båì_updkeys
(
cur
, 
Àvñ
, 
block
, 
bp
, 
Ál£
);

2195 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

2196 
	`XFS_BTREE_TRACE_ARGIK
(
cur
, 
Àvñ
, 
keyp
);

2204 
	`xfs_båì_gë_keys
(
cur
, 
block
, &
key
);

2205 
Àvñ
++, 
±r
 = 1;Öå =1 &&Üevñ < 
cur
->
bc_∆evñs
;Üevel++) {

2206 #ifde‡
DEBUG


2207 
îr‹
;

2209 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

2210 #ifde‡
DEBUG


2211 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

2212 i‡(
îr‹
) {

2213 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

2214  
îr‹
;

2217 
±r
 = 
cur
->
bc_±rs
[
Àvñ
];

2218 
kp
 = 
	`xfs_båì_key_addr
(
cur
, 
±r
, 
block
);

2219 
	`xfs_båì_c›y_keys
(
cur
, 
kp
, &
key
, 1);

2220 
	`xfs_båì_log_keys
(
cur
, 
bp
, 
±r
,Ötr);

2223 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

2225 
	}
}

2233 
	$xfs_båì_upd©e
(

2234 
xfs_båì_cur
 *
cur
,

2235 
xfs_båì_ªc
 *
ªc
)

2237 
xfs_båì_block
 *
block
;

2238 
xfs_buf
 *
bp
;

2239 
îr‹
;

2240 
±r
;

2241 
xfs_båì_ªc
 *
Ω
;

2243 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

2244 
	`XFS_BTREE_TRACE_ARGR
(
cur
, 
ªc
);

2247 
block
 = 
	`xfs_båì_gë_block
(
cur
, 0, &
bp
);

2249 #ifde‡
DEBUG


2250 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 0, 
bp
);

2251 i‡(
îr‹
)

2252 
îr‹0
;

2255 
±r
 = 
cur
->
bc_±rs
[0];

2256 
Ω
 = 
	`xfs_båì_ªc_addr
(
cur
, 
±r
, 
block
);

2259 
	`xfs_båì_c›y_ªcs
(
cur
, 
Ω
, 
ªc
, 1);

2260 
	`xfs_båì_log_ªcs
(
cur
, 
bp
, 
±r
,Ötr);

2266 i‡(
	`xfs_båì_is_œ°ªc
(
cur
, 
block
, 0)) {

2267 
cur
->
bc_›s
->
	`upd©e_œ°ªc
(cur, 
block
, 
ªc
,

2268 
±r
, 
LASTREC_UPDATE
);

2272 i‡(
	`xfs_båì_√eds_key_upd©e
(
cur
, 
±r
)) {

2273 
îr‹
 = 
	`xfs_båì_upd©e_keys
(
cur
, 0);

2274 i‡(
îr‹
)

2275 
îr‹0
;

2278 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

2281 
îr‹0
:

2282 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

2283  
îr‹
;

2284 
	}
}

2290 
STATIC
 

2291 
	$xfs_båì_lshi·
(

2292 
xfs_båì_cur
 *
cur
,

2293 
Àvñ
,

2294 *
°©
)

2296 
xfs_buf
 *
lbp
;

2297 
xfs_båì_block
 *
À·
;

2298 
Ãecs
;

2299 
xfs_buf
 *
rbp
;

2300 
xfs_båì_block
 *
right
;

2301 
xfs_båì_cur
 *
tcur
;

2302 
ºecs
;

2303 
xfs_båì_±r
 
Õå
;

2304 
xfs_båì_key
 *
rkp
 = 
NULL
;

2305 
xfs_båì_±r
 *
Ωp
 = 
NULL
;

2306 
xfs_båì_ªc
 *
ºp
 = 
NULL
;

2307 
îr‹
;

2308 
i
;

2310 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

2311 
	`XFS_BTREE_TRACE_ARGI
(
cur
, 
Àvñ
);

2313 i‡((
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
) &&

2314 
Àvñ
 =
cur
->
bc_∆evñs
 - 1)

2315 
out0
;

2318 
right
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
rbp
);

2320 #ifde‡
DEBUG


2321 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
right
, 
Àvñ
, 
rbp
);

2322 i‡(
îr‹
)

2323 
îr‹0
;

2327 
	`xfs_båì_gë_siblög
(
cur
, 
right
, &
Õå
, 
XFS_BB_LEFTSIB
);

2328 i‡(
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Õå
))

2329 
out0
;

2335 i‡(
cur
->
bc_±rs
[
Àvñ
] <= 1)

2336 
out0
;

2339 
îr‹
 = 
	`xfs_båì_ªad_buf_block
(
cur
, &
Õå
, 0, &
À·
, &
lbp
);

2340 i‡(
îr‹
)

2341 
îr‹0
;

2344 
Ãecs
 = 
	`xfs_båì_gë_numªcs
(
À·
);

2345 i‡(
Ãecs
 =
cur
->
bc_›s
->
	`gë_maxªcs
(cur, 
Àvñ
))

2346 
out0
;

2348 
ºecs
 = 
	`xfs_båì_gë_numªcs
(
right
);

2355 
Ãecs
++;

2356 
ºecs
--;

2358 
	`XFS_BTREE_STATS_INC
(
cur
, 
lshi·
);

2359 
	`XFS_BTREE_STATS_ADD
(
cur
, 
moves
, 1);

2365 i‡(
Àvñ
 > 0) {

2367 
xfs_båì_key
 *
lkp
;

2368 
xfs_båì_±r
 *
Õp
;

2370 
lkp
 = 
	`xfs_båì_key_addr
(
cur
, 
Ãecs
, 
À·
);

2371 
rkp
 = 
	`xfs_båì_key_addr
(
cur
, 1, 
right
);

2373 
Õp
 = 
	`xfs_båì_±r_addr
(
cur
, 
Ãecs
, 
À·
);

2374 
Ωp
 = 
	`xfs_båì_±r_addr
(
cur
, 1, 
right
);

2375 #ifde‡
DEBUG


2376 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
Ωp
, 0, 
Àvñ
);

2377 i‡(
îr‹
)

2378 
îr‹0
;

2380 
	`xfs_båì_c›y_keys
(
cur
, 
lkp
, 
rkp
, 1);

2381 
	`xfs_båì_c›y_±rs
(
cur
, 
Õp
, 
Ωp
, 1);

2383 
	`xfs_båì_log_keys
(
cur
, 
lbp
, 
Ãecs
,Ürecs);

2384 
	`xfs_båì_log_±rs
(
cur
, 
lbp
, 
Ãecs
,Ürecs);

2386 
	`ASSERT
(
cur
->
bc_›s
->
	`keys_ö‹dî
(cur,

2387 
	`xfs_båì_key_addr
(
cur
, 
Ãecs
 - 1, 
À·
), 
lkp
));

2390 
xfs_båì_ªc
 *
Ãp
;

2392 
Ãp
 = 
	`xfs_båì_ªc_addr
(
cur
, 
Ãecs
, 
À·
);

2393 
ºp
 = 
	`xfs_båì_ªc_addr
(
cur
, 1, 
right
);

2395 
	`xfs_båì_c›y_ªcs
(
cur
, 
Ãp
, 
ºp
, 1);

2396 
	`xfs_båì_log_ªcs
(
cur
, 
lbp
, 
Ãecs
,Ürecs);

2398 
	`ASSERT
(
cur
->
bc_›s
->
	`ªcs_ö‹dî
(cur,

2399 
	`xfs_båì_ªc_addr
(
cur
, 
Ãecs
 - 1, 
À·
), 
Ãp
));

2402 
	`xfs_båì_£t_numªcs
(
À·
, 
Ãecs
);

2403 
	`xfs_båì_log_block
(
cur
, 
lbp
, 
XFS_BB_NUMRECS
);

2405 
	`xfs_båì_£t_numªcs
(
right
, 
ºecs
);

2406 
	`xfs_båì_log_block
(
cur
, 
rbp
, 
XFS_BB_NUMRECS
);

2411 
	`XFS_BTREE_STATS_ADD
(
cur
, 
moves
, 
ºecs
 - 1);

2412 i‡(
Àvñ
 > 0) {

2414 #ifde‡
DEBUG


2415 
i
;

2417 
i
 = 0; i < 
ºecs
; i++) {

2418 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
Ωp
, 
i
 + 1, 
Àvñ
);

2419 i‡(
îr‹
)

2420 
îr‹0
;

2423 
	`xfs_båì_shi·_keys
(
cur
,

2424 
	`xfs_båì_key_addr
(
cur
, 2, 
right
),

2425 -1, 
ºecs
);

2426 
	`xfs_båì_shi·_±rs
(
cur
,

2427 
	`xfs_båì_±r_addr
(
cur
, 2, 
right
),

2428 -1, 
ºecs
);

2430 
	`xfs_båì_log_keys
(
cur
, 
rbp
, 1, 
ºecs
);

2431 
	`xfs_båì_log_±rs
(
cur
, 
rbp
, 1, 
ºecs
);

2434 
	`xfs_båì_shi·_ªcs
(
cur
,

2435 
	`xfs_båì_ªc_addr
(
cur
, 2, 
right
),

2436 -1, 
ºecs
);

2437 
	`xfs_båì_log_ªcs
(
cur
, 
rbp
, 1, 
ºecs
);

2444 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_OVERLAPPING
) {

2445 
îr‹
 = 
	`xfs_båì_dup_curs‹
(
cur
, &
tcur
);

2446 i‡(
îr‹
)

2447 
îr‹0
;

2448 
i
 = 
	`xfs_båì_fú°ªc
(
tcur
, 
Àvñ
);

2449 
	`XFS_WANT_CORRUPTED_GOTO
(
tcur
->
bc_mp
, 
i
 =1, 
îr‹0
);

2451 
îr‹
 = 
	`xfs_båì_de¸emít
(
tcur
, 
Àvñ
, &
i
);

2452 i‡(
îr‹
)

2453 
îr‹1
;

2456 
îr‹
 = 
	`xfs_båì_upd©e_keys
(
tcur
, 
Àvñ
);

2457 i‡(
îr‹
)

2458 
îr‹1
;

2460 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_NOERROR
);

2464 
îr‹
 = 
	`xfs_båì_upd©e_keys
(
cur
, 
Àvñ
);

2465 i‡(
îr‹
)

2466 
îr‹0
;

2469 
cur
->
bc_±rs
[
Àvñ
]--;

2471 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

2472 *
°©
 = 1;

2475 
out0
:

2476 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

2477 *
°©
 = 0;

2480 
îr‹0
:

2481 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

2482  
îr‹
;

2484 
îr‹1
:

2485 
	`XFS_BTREE_TRACE_CURSOR
(
tcur
, 
XBT_ERROR
);

2486 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_ERROR
);

2487  
îr‹
;

2488 
	}
}

2494 
STATIC
 

2495 
	$xfs_båì_rshi·
(

2496 
xfs_båì_cur
 *
cur
,

2497 
Àvñ
,

2498 *
°©
)

2500 
xfs_buf
 *
lbp
;

2501 
xfs_båì_block
 *
À·
;

2502 
xfs_buf
 *
rbp
;

2503 
xfs_båì_block
 *
right
;

2504 
xfs_båì_cur
 *
tcur
;

2505 
xfs_båì_±r
 
Ωå
;

2506 
xfs_båì_key
 *
rkp
;

2507 
ºecs
;

2508 
Ãecs
;

2509 
îr‹
;

2510 
i
;

2512 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

2513 
	`XFS_BTREE_TRACE_ARGI
(
cur
, 
Àvñ
);

2515 i‡((
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
) &&

2516 (
Àvñ
 =
cur
->
bc_∆evñs
 - 1))

2517 
out0
;

2520 
À·
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
lbp
);

2522 #ifde‡
DEBUG


2523 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
À·
, 
Àvñ
, 
lbp
);

2524 i‡(
îr‹
)

2525 
îr‹0
;

2529 
	`xfs_båì_gë_siblög
(
cur
, 
À·
, &
Ωå
, 
XFS_BB_RIGHTSIB
);

2530 i‡(
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Ωå
))

2531 
out0
;

2537 
Ãecs
 = 
	`xfs_båì_gë_numªcs
(
À·
);

2538 i‡(
cur
->
bc_±rs
[
Àvñ
] >
Ãecs
)

2539 
out0
;

2542 
îr‹
 = 
	`xfs_båì_ªad_buf_block
(
cur
, &
Ωå
, 0, &
right
, &
rbp
);

2543 i‡(
îr‹
)

2544 
îr‹0
;

2547 
ºecs
 = 
	`xfs_båì_gë_numªcs
(
right
);

2548 i‡(
ºecs
 =
cur
->
bc_›s
->
	`gë_maxªcs
(cur, 
Àvñ
))

2549 
out0
;

2551 
	`XFS_BTREE_STATS_INC
(
cur
, 
rshi·
);

2552 
	`XFS_BTREE_STATS_ADD
(
cur
, 
moves
, 
ºecs
);

2558 i‡(
Àvñ
 > 0) {

2560 
xfs_båì_key
 *
lkp
;

2561 
xfs_båì_±r
 *
Õp
;

2562 
xfs_båì_±r
 *
Ωp
;

2564 
lkp
 = 
	`xfs_båì_key_addr
(
cur
, 
Ãecs
, 
À·
);

2565 
Õp
 = 
	`xfs_båì_±r_addr
(
cur
, 
Ãecs
, 
À·
);

2566 
rkp
 = 
	`xfs_båì_key_addr
(
cur
, 1, 
right
);

2567 
Ωp
 = 
	`xfs_båì_±r_addr
(
cur
, 1, 
right
);

2569 #ifde‡
DEBUG


2570 
i
 = 
ºecs
 - 1; i >= 0; i--) {

2571 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
Ωp
, 
i
, 
Àvñ
);

2572 i‡(
îr‹
)

2573 
îr‹0
;

2577 
	`xfs_båì_shi·_keys
(
cur
, 
rkp
, 1, 
ºecs
);

2578 
	`xfs_båì_shi·_±rs
(
cur
, 
Ωp
, 1, 
ºecs
);

2580 #ifde‡
DEBUG


2581 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
Õp
, 0, 
Àvñ
);

2582 i‡(
îr‹
)

2583 
îr‹0
;

2587 
	`xfs_båì_c›y_keys
(
cur
, 
rkp
, 
lkp
, 1);

2588 
	`xfs_båì_c›y_±rs
(
cur
, 
Ωp
, 
Õp
, 1);

2590 
	`xfs_båì_log_keys
(
cur
, 
rbp
, 1, 
ºecs
 + 1);

2591 
	`xfs_båì_log_±rs
(
cur
, 
rbp
, 1, 
ºecs
 + 1);

2593 
	`ASSERT
(
cur
->
bc_›s
->
	`keys_ö‹dî
(cur, 
rkp
,

2594 
	`xfs_båì_key_addr
(
cur
, 2, 
right
)));

2597 
xfs_båì_ªc
 *
Ãp
;

2598 
xfs_båì_ªc
 *
ºp
;

2600 
Ãp
 = 
	`xfs_båì_ªc_addr
(
cur
, 
Ãecs
, 
À·
);

2601 
ºp
 = 
	`xfs_båì_ªc_addr
(
cur
, 1, 
right
);

2603 
	`xfs_båì_shi·_ªcs
(
cur
, 
ºp
, 1, 
ºecs
);

2606 
	`xfs_båì_c›y_ªcs
(
cur
, 
ºp
, 
Ãp
, 1);

2607 
	`xfs_båì_log_ªcs
(
cur
, 
rbp
, 1, 
ºecs
 + 1);

2613 
	`xfs_båì_£t_numªcs
(
À·
, --
Ãecs
);

2614 
	`xfs_båì_log_block
(
cur
, 
lbp
, 
XFS_BB_NUMRECS
);

2616 
	`xfs_båì_£t_numªcs
(
right
, ++
ºecs
);

2617 
	`xfs_båì_log_block
(
cur
, 
rbp
, 
XFS_BB_NUMRECS
);

2623 
îr‹
 = 
	`xfs_båì_dup_curs‹
(
cur
, &
tcur
);

2624 i‡(
îr‹
)

2625 
îr‹0
;

2626 
i
 = 
	`xfs_båì_œ°ªc
(
tcur
, 
Àvñ
);

2627 
	`XFS_WANT_CORRUPTED_GOTO
(
tcur
->
bc_mp
, 
i
 =1, 
îr‹0
);

2629 
îr‹
 = 
	`xfs_båì_ö¸emít
(
tcur
, 
Àvñ
, &
i
);

2630 i‡(
îr‹
)

2631 
îr‹1
;

2634 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_OVERLAPPING
) {

2635 
îr‹
 = 
	`xfs_båì_upd©e_keys
(
cur
, 
Àvñ
);

2636 i‡(
îr‹
)

2637 
îr‹1
;

2641 
îr‹
 = 
	`xfs_båì_upd©e_keys
(
tcur
, 
Àvñ
);

2642 i‡(
îr‹
)

2643 
îr‹1
;

2645 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_NOERROR
);

2647 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

2648 *
°©
 = 1;

2651 
out0
:

2652 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

2653 *
°©
 = 0;

2656 
îr‹0
:

2657 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

2658  
îr‹
;

2660 
îr‹1
:

2661 
	`XFS_BTREE_TRACE_CURSOR
(
tcur
, 
XBT_ERROR
);

2662 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_ERROR
);

2663  
îr‹
;

2664 
	}
}

2671 
STATIC
 

2672 
	$__xfs_båì_•lô
(

2673 
xfs_båì_cur
 *
cur
,

2674 
Àvñ
,

2675 
xfs_båì_±r
 *
±Ω
,

2676 
xfs_båì_key
 *
key
,

2677 
xfs_båì_cur
 **
cuΩ
,

2678 *
°©
)

2680 
xfs_båì_±r
 
Õå
;

2681 
xfs_buf
 *
lbp
;

2682 
xfs_båì_block
 *
À·
;

2683 
xfs_båì_±r
 
Ωå
;

2684 
xfs_buf
 *
rbp
;

2685 
xfs_båì_block
 *
right
;

2686 
xfs_båì_±r
 
º±r
;

2687 
xfs_buf
 *
ºbp
;

2688 
xfs_båì_block
 *
ºblock
;

2689 
Ãecs
;

2690 
ºecs
;

2691 
§c_ödex
;

2692 
îr‹
;

2693 #ifde‡
DEBUG


2694 
i
;

2697 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

2698 
	`XFS_BTREE_TRACE_ARGIPK
(
cur
, 
Àvñ
, *
±Ω
, 
key
);

2700 
	`XFS_BTREE_STATS_INC
(
cur
, 
•lô
);

2703 
À·
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
lbp
);

2705 #ifde‡
DEBUG


2706 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
À·
, 
Àvñ
, 
lbp
);

2707 i‡(
îr‹
)

2708 
îr‹0
;

2711 
	`xfs_båì_buf_to_±r
(
cur
, 
lbp
, &
Õå
);

2714 
îr‹
 = 
cur
->
bc_›s
->
	`Æloc_block
(cur, &
Õå
, &
Ωå
, 
°©
);

2715 i‡(
îr‹
)

2716 
îr‹0
;

2717 i‡(*
°©
 == 0)

2718 
out0
;

2719 
	`XFS_BTREE_STATS_INC
(
cur
, 
Æloc
);

2722 
îr‹
 = 
	`xfs_båì_gë_buf_block
(
cur
, &
Ωå
, 0, &
right
, &
rbp
);

2723 i‡(
îr‹
)

2724 
îr‹0
;

2727 
	`xfs_båì_öô_block_cur
(
cur
, 
rbp
, 
	`xfs_båì_gë_Àvñ
(
À·
), 0);

2734 
Ãecs
 = 
	`xfs_båì_gë_numªcs
(
À·
);

2735 
ºecs
 = 
Ãecs
 / 2;

2736 i‡((
Ãecs
 & 1Ë&& 
cur
->
bc_±rs
[
Àvñ
] <
ºecs
 + 1)

2737 
ºecs
++;

2738 
§c_ödex
 = (
Ãecs
 - 
ºecs
 + 1);

2740 
	`XFS_BTREE_STATS_ADD
(
cur
, 
moves
, 
ºecs
);

2743 
Ãecs
 -
ºecs
;

2744 
	`xfs_båì_£t_numªcs
(
À·
, 
Ãecs
);

2745 
	`xfs_båì_£t_numªcs
(
right
, 
	`xfs_båì_gë_numªcs
‘ightË+ 
ºecs
);

2752 i‡(
Àvñ
 > 0) {

2754 
xfs_båì_key
 *
lkp
;

2755 
xfs_båì_±r
 *
Õp
;

2756 
xfs_båì_key
 *
rkp
;

2757 
xfs_båì_±r
 *
Ωp
;

2759 
lkp
 = 
	`xfs_båì_key_addr
(
cur
, 
§c_ödex
, 
À·
);

2760 
Õp
 = 
	`xfs_båì_±r_addr
(
cur
, 
§c_ödex
, 
À·
);

2761 
rkp
 = 
	`xfs_båì_key_addr
(
cur
, 1, 
right
);

2762 
Ωp
 = 
	`xfs_båì_±r_addr
(
cur
, 1, 
right
);

2764 #ifde‡
DEBUG


2765 
i
 = 
§c_ödex
; i < 
ºecs
; i++) {

2766 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
Õp
, 
i
, 
Àvñ
);

2767 i‡(
îr‹
)

2768 
îr‹0
;

2773 
	`xfs_båì_c›y_keys
(
cur
, 
rkp
, 
lkp
, 
ºecs
);

2774 
	`xfs_båì_c›y_±rs
(
cur
, 
Ωp
, 
Õp
, 
ºecs
);

2776 
	`xfs_båì_log_keys
(
cur
, 
rbp
, 1, 
ºecs
);

2777 
	`xfs_båì_log_±rs
(
cur
, 
rbp
, 1, 
ºecs
);

2780 
	`xfs_båì_gë_node_keys
(
cur
, 
right
, 
key
);

2783 
xfs_båì_ªc
 *
Ãp
;

2784 
xfs_båì_ªc
 *
ºp
;

2786 
Ãp
 = 
	`xfs_båì_ªc_addr
(
cur
, 
§c_ödex
, 
À·
);

2787 
ºp
 = 
	`xfs_båì_ªc_addr
(
cur
, 1, 
right
);

2790 
	`xfs_båì_c›y_ªcs
(
cur
, 
ºp
, 
Ãp
, 
ºecs
);

2791 
	`xfs_båì_log_ªcs
(
cur
, 
rbp
, 1, 
ºecs
);

2794 
	`xfs_båì_gë_Àaf_keys
(
cur
, 
right
, 
key
);

2801 
	`xfs_båì_gë_siblög
(
cur
, 
À·
, &
º±r
, 
XFS_BB_RIGHTSIB
);

2802 
	`xfs_båì_£t_siblög
(
cur
, 
right
, &
º±r
, 
XFS_BB_RIGHTSIB
);

2803 
	`xfs_båì_£t_siblög
(
cur
, 
right
, &
Õå
, 
XFS_BB_LEFTSIB
);

2804 
	`xfs_båì_£t_siblög
(
cur
, 
À·
, &
Ωå
, 
XFS_BB_RIGHTSIB
);

2806 
	`xfs_båì_log_block
(
cur
, 
rbp
, 
XFS_BB_ALL_BITS
);

2807 
	`xfs_båì_log_block
(
cur
, 
lbp
, 
XFS_BB_NUMRECS
 | 
XFS_BB_RIGHTSIB
);

2813 i‡(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
º±r
)) {

2814 
îr‹
 = 
	`xfs_båì_ªad_buf_block
(
cur
, &
º±r
,

2815 0, &
ºblock
, &
ºbp
);

2816 i‡(
îr‹
)

2817 
îr‹0
;

2818 
	`xfs_båì_£t_siblög
(
cur
, 
ºblock
, &
Ωå
, 
XFS_BB_LEFTSIB
);

2819 
	`xfs_båì_log_block
(
cur
, 
ºbp
, 
XFS_BB_LEFTSIB
);

2823 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_OVERLAPPING
) {

2824 
îr‹
 = 
	`xfs_båì_upd©e_keys
(
cur
, 
Àvñ
);

2825 i‡(
îr‹
)

2826 
îr‹0
;

2834 i‡(
cur
->
bc_±rs
[
Àvñ
] > 
Ãecs
 + 1) {

2835 
	`xfs_båì_£tbuf
(
cur
, 
Àvñ
, 
rbp
);

2836 
cur
->
bc_±rs
[
Àvñ
] -
Ãecs
;

2842 i‡(
Àvñ
 + 1 < 
cur
->
bc_∆evñs
) {

2843 
îr‹
 = 
	`xfs_båì_dup_curs‹
(
cur
, 
cuΩ
);

2844 i‡(
îr‹
)

2845 
îr‹0
;

2846 (*
cuΩ
)->
bc_±rs
[
Àvñ
 + 1]++;

2848 *
±Ω
 = 
Ωå
;

2849 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

2850 *
°©
 = 1;

2852 
out0
:

2853 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

2854 *
°©
 = 0;

2857 
îr‹0
:

2858 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

2859  
îr‹
;

2860 
	}
}

2862 #ifde‡
__KERNEL__


2863 
	sxfs_båì_•lô_¨gs
 {

2864 
xfs_båì_cur
 *
	mcur
;

2865 
	mÀvñ
;

2866 
xfs_båì_±r
 *
	m±Ω
;

2867 
xfs_båì_key
 *
	mkey
;

2868 
xfs_båì_cur
 **
	mcuΩ
;

2869 *
	m°©
;

2870 
	mªsu…
;

2871 
boﬁ
 
	mksw≠d
;

2872 
com∂ëi⁄
 *
	md⁄e
;

2873 
w‹k_°ru˘
 
	mw‹k
;

2880 
	$xfs_båì_•lô_w‹kî
(

2881 
w‹k_°ru˘
 *
w‹k
)

2883 
xfs_båì_•lô_¨gs
 *
¨gs
 = 
	`c⁄èöî_of
(
w‹k
,

2884 
xfs_båì_•lô_¨gs
, 
w‹k
);

2885 
pÊags
;

2886 
√w_pÊags
 = 
PF_FSTRANS
;

2894 i‡(
¨gs
->
ksw≠d
)

2895 
√w_pÊags
 |
PF_MEMALLOC
 | 
PF_SWAPWRITE
 | 
PF_KSWAPD
;

2897 
	`cuºít_£t_Êags_√°ed
(&
pÊags
, 
√w_pÊags
);

2899 
¨gs
->
ªsu…
 = 
	`__xfs_båì_•lô
◊rgs->
cur
,árgs->
Àvñ
,árgs->
±Ω
,

2900 
¨gs
->
key
,árgs->
cuΩ
,árgs->
°©
);

2901 
	`com∂ëe
(
¨gs
->
d⁄e
);

2903 
	`cuºít_ª°‹e_Êags_√°ed
(&
pÊags
, 
√w_pÊags
);

2904 
	}
}

2911 
STATIC
 

2912 
	$xfs_båì_•lô
(

2913 
xfs_båì_cur
 *
cur
,

2914 
Àvñ
,

2915 
xfs_båì_±r
 *
±Ω
,

2916 
xfs_båì_key
 *
key
,

2917 
xfs_båì_cur
 **
cuΩ
,

2918 *
°©
)

2920 
xfs_båì_•lô_¨gs
 
¨gs
;

2921 
	`DECLARE_COMPLETION_ONSTACK
(
d⁄e
);

2923 i‡(
cur
->
bc_bäum
 !
XFS_BTNUM_BMAP
)

2924  
	`__xfs_båì_•lô
(
cur
, 
Àvñ
, 
±Ω
, 
key
, 
cuΩ
, 
°©
);

2926 
¨gs
.
cur
 = cur;

2927 
¨gs
.
Àvñ
 =Üevel;

2928 
¨gs
.
±Ω
 =Ötrp;

2929 
¨gs
.
key
 = key;

2930 
¨gs
.
cuΩ
 = curp;

2931 
¨gs
.
°©
 = stat;

2932 
¨gs
.
d⁄e
 = &done;

2933 
¨gs
.
ksw≠d
 = 
	`cuºít_is_ksw≠d
();

2934 
	`INIT_WORK_ONSTACK
(&
¨gs
.
w‹k
, 
xfs_båì_•lô_w‹kî
);

2935 
	`queue_w‹k
(
xfs_Æloc_wq
, &
¨gs
.
w‹k
);

2936 
	`waô_f‹_com∂ëi⁄
(&
d⁄e
);

2937 
	`de°roy_w‹k_⁄_°ack
(&
¨gs
.
w‹k
);

2938  
¨gs
.
ªsu…
;

2939 
	}
}

2941 
	#xfs_båì_•lô
 
__xfs_båì_•lô


	)

2950 
	$xfs_båì_√w_úoŸ
(

2951 
xfs_båì_cur
 *
cur
,

2952 *
logÊags
,

2953 *
°©
)

2955 
xfs_buf
 *
cbp
;

2956 
xfs_båì_block
 *
block
;

2957 
xfs_båì_block
 *
cblock
;

2958 
xfs_båì_key
 *
ckp
;

2959 
xfs_båì_±r
 *
˝p
;

2960 
xfs_båì_key
 *
kp
;

2961 
xfs_båì_±r
 *
µ
;

2962 
xfs_båì_±r
 
≈å
;

2963 
Àvñ
;

2964 
îr‹
;

2965 #ifde‡
DEBUG


2966 
i
;

2969 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

2970 
	`XFS_BTREE_STATS_INC
(
cur
, 
√wroŸ
);

2972 
	`ASSERT
(
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
);

2974 
Àvñ
 = 
cur
->
bc_∆evñs
 - 1;

2976 
block
 = 
	`xfs_båì_gë_úoŸ
(
cur
);

2977 
µ
 = 
	`xfs_båì_±r_addr
(
cur
, 1, 
block
);

2980 
îr‹
 = 
cur
->
bc_›s
->
	`Æloc_block
(cur, 
µ
, &
≈å
, 
°©
);

2981 i‡(
îr‹
)

2982 
îr‹0
;

2983 i‡(*
°©
 == 0) {

2984 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

2987 
	`XFS_BTREE_STATS_INC
(
cur
, 
Æloc
);

2990 
îr‹
 = 
	`xfs_båì_gë_buf_block
(
cur
, &
≈å
, 0, &
cblock
, &
cbp
);

2991 i‡(
îr‹
)

2992 
îr‹0
;

2998 
	`mem˝y
(
cblock
, 
block
, 
	`xfs_båì_block_Àn
(
cur
));

2999 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_CRC_BLOCKS
) {

3000 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
)

3001 
cblock
->
bb_u
.
l
.
bb_blkno
 = 
	`˝u_to_be64
(
cbp
->
b_bn
);

3003 
cblock
->
bb_u
.
s
.
bb_blkno
 = 
	`˝u_to_be64
(
cbp
->
b_bn
);

3006 
	`be16_add_˝u
(&
block
->
bb_Àvñ
, 1);

3007 
	`xfs_båì_£t_numªcs
(
block
, 1);

3008 
cur
->
bc_∆evñs
++;

3009 
cur
->
bc_±rs
[
Àvñ
 + 1] = 1;

3011 
kp
 = 
	`xfs_båì_key_addr
(
cur
, 1, 
block
);

3012 
ckp
 = 
	`xfs_båì_key_addr
(
cur
, 1, 
cblock
);

3013 
	`xfs_båì_c›y_keys
(
cur
, 
ckp
, 
kp
, 
	`xfs_båì_gë_numªcs
(
cblock
));

3015 
˝p
 = 
	`xfs_båì_±r_addr
(
cur
, 1, 
cblock
);

3016 #ifde‡
DEBUG


3017 
i
 = 0; i < 
	`be16_to_˝u
(
cblock
->
bb_numªcs
); i++) {

3018 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
µ
, 
i
, 
Àvñ
);

3019 i‡(
îr‹
)

3020 
îr‹0
;

3023 
	`xfs_båì_c›y_±rs
(
cur
, 
˝p
, 
µ
, 
	`xfs_båì_gë_numªcs
(
cblock
));

3025 #ifde‡
DEBUG


3026 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, &
≈å
, 0, 
Àvñ
);

3027 i‡(
îr‹
)

3028 
îr‹0
;

3030 
	`xfs_båì_c›y_±rs
(
cur
, 
µ
, &
≈å
, 1);

3032 
	`xfs_úoŸ_ªÆloc
(
cur
->
bc_¥iv©e
.
b
.
ù
,

3033 1 - 
	`xfs_båì_gë_numªcs
(
cblock
),

3034 
cur
->
bc_¥iv©e
.
b
.
whichf‹k
);

3036 
	`xfs_båì_£tbuf
(
cur
, 
Àvñ
, 
cbp
);

3042 
	`xfs_båì_log_block
(
cur
, 
cbp
, 
XFS_BB_ALL_BITS
);

3043 
	`xfs_båì_log_keys
(
cur
, 
cbp
, 1, 
	`be16_to_˝u
(
cblock
->
bb_numªcs
));

3044 
	`xfs_båì_log_±rs
(
cur
, 
cbp
, 1, 
	`be16_to_˝u
(
cblock
->
bb_numªcs
));

3046 *
logÊags
 |=

3047 
XFS_ILOG_CORE
 | 
	`xfs_ûog_fbroŸ
(
cur
->
bc_¥iv©e
.
b
.
whichf‹k
);

3048 *
°©
 = 1;

3049 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3051 
îr‹0
:

3052 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

3053  
îr‹
;

3054 
	}
}

3059 
STATIC
 

3060 
	$xfs_båì_√w_roŸ
(

3061 
xfs_båì_cur
 *
cur
,

3062 *
°©
)

3064 
xfs_båì_block
 *
block
;

3065 
xfs_buf
 *
bp
;

3066 
îr‹
;

3067 
xfs_buf
 *
lbp
;

3068 
xfs_båì_block
 *
À·
;

3069 
xfs_buf
 *
nbp
;

3070 
xfs_båì_block
 *
√w
;

3071 
≈å
;

3072 
xfs_buf
 *
rbp
;

3073 
xfs_båì_block
 *
right
;

3074 
xfs_båì_±r
 
Ωå
;

3075 
xfs_båì_±r
 
Õå
;

3077 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

3078 
	`XFS_BTREE_STATS_INC
(
cur
, 
√wroŸ
);

3081 
cur
->
bc_›s
->
	`öô_±r_‰om_cur
(cur, &
Ωå
);

3084 
îr‹
 = 
cur
->
bc_›s
->
	`Æloc_block
(cur, &
Ωå
, &
Õå
, 
°©
);

3085 i‡(
îr‹
)

3086 
îr‹0
;

3087 i‡(*
°©
 == 0)

3088 
out0
;

3089 
	`XFS_BTREE_STATS_INC
(
cur
, 
Æloc
);

3092 
îr‹
 = 
	`xfs_båì_gë_buf_block
(
cur
, &
Õå
, 0, &
√w
, &
nbp
);

3093 i‡(
îr‹
)

3094 
îr‹0
;

3097 
cur
->
bc_›s
->
	`£t_roŸ
(cur, &
Õå
, 1);

3105 
block
 = 
	`xfs_båì_gë_block
(
cur
, cur->
bc_∆evñs
 - 1, &
bp
);

3107 #ifde‡
DEBUG


3108 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, cur->
bc_∆evñs
 - 1, 
bp
);

3109 i‡(
îr‹
)

3110 
îr‹0
;

3113 
	`xfs_båì_gë_siblög
(
cur
, 
block
, &
Ωå
, 
XFS_BB_RIGHTSIB
);

3114 i‡(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Ωå
)) {

3116 
lbp
 = 
bp
;

3117 
	`xfs_båì_buf_to_±r
(
cur
, 
lbp
, &
Õå
);

3118 
À·
 = 
block
;

3119 
îr‹
 = 
	`xfs_båì_ªad_buf_block
(
cur
, &
Ωå
, 0, &
right
, &
rbp
);

3120 i‡(
îr‹
)

3121 
îr‹0
;

3122 
bp
 = 
rbp
;

3123 
≈å
 = 1;

3126 
rbp
 = 
bp
;

3127 
	`xfs_båì_buf_to_±r
(
cur
, 
rbp
, &
Ωå
);

3128 
right
 = 
block
;

3129 
	`xfs_båì_gë_siblög
(
cur
, 
right
, &
Õå
, 
XFS_BB_LEFTSIB
);

3130 
îr‹
 = 
	`xfs_båì_ªad_buf_block
(
cur
, &
Õå
, 0, &
À·
, &
lbp
);

3131 i‡(
îr‹
)

3132 
îr‹0
;

3133 
bp
 = 
lbp
;

3134 
≈å
 = 2;

3138 
	`xfs_båì_öô_block_cur
(
cur
, 
nbp
, cur->
bc_∆evñs
, 2);

3139 
	`xfs_båì_log_block
(
cur
, 
nbp
, 
XFS_BB_ALL_BITS
);

3140 
	`ASSERT
(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Õå
) &&

3141 !
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Ωå
));

3144 i‡(
	`xfs_båì_gë_Àvñ
(
À·
) > 0) {

3149 
	`xfs_båì_gë_node_keys
(
cur
, 
À·
,

3150 
	`xfs_båì_key_addr
(
cur
, 1, 
√w
));

3151 
	`xfs_båì_gë_node_keys
(
cur
, 
right
,

3152 
	`xfs_båì_key_addr
(
cur
, 2, 
√w
));

3159 
	`xfs_båì_gë_Àaf_keys
(
cur
, 
À·
,

3160 
	`xfs_båì_key_addr
(
cur
, 1, 
√w
));

3161 
	`xfs_båì_gë_Àaf_keys
(
cur
, 
right
,

3162 
	`xfs_båì_key_addr
(
cur
, 2, 
√w
));

3164 
	`xfs_båì_log_keys
(
cur
, 
nbp
, 1, 2);

3167 
	`xfs_båì_c›y_±rs
(
cur
,

3168 
	`xfs_båì_±r_addr
(
cur
, 1, 
√w
), &
Õå
, 1);

3169 
	`xfs_båì_c›y_±rs
(
cur
,

3170 
	`xfs_båì_±r_addr
(
cur
, 2, 
√w
), &
Ωå
, 1);

3171 
	`xfs_båì_log_±rs
(
cur
, 
nbp
, 1, 2);

3174 
	`xfs_båì_£tbuf
(
cur
, cur->
bc_∆evñs
, 
nbp
);

3175 
cur
->
bc_±rs
[cur->
bc_∆evñs
] = 
≈å
;

3176 
cur
->
bc_∆evñs
++;

3177 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3178 *
°©
 = 1;

3180 
îr‹0
:

3181 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

3182  
îr‹
;

3183 
out0
:

3184 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3185 *
°©
 = 0;

3187 
	}
}

3189 
STATIC
 

3190 
	$xfs_båì_make_block_unfuŒ
(

3191 
xfs_båì_cur
 *
cur
,

3192 
Àvñ
,

3193 
numªcs
,

3194 *
oödex
,

3195 *
ödex
,

3196 
xfs_båì_±r
 *
≈å
,

3197 
xfs_båì_cur
 **
ncur
,

3198 
xfs_båì_key
 *
key
,

3199 *
°©
)

3201 
îr‹
 = 0;

3203 i‡((
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
) &&

3204 
Àvñ
 =
cur
->
bc_∆evñs
 - 1) {

3205 
xfs_öode
 *
ù
 = 
cur
->
bc_¥iv©e
.
b
.ip;

3207 i‡(
numªcs
 < 
cur
->
bc_›s
->
	`gë_dmaxªcs
(cur, 
Àvñ
)) {

3209 
	`xfs_úoŸ_ªÆloc
(
ù
, 1, 
cur
->
bc_¥iv©e
.
b
.
whichf‹k
);

3210 *
°©
 = 1;

3213 
logÊags
 = 0;

3215 
îr‹
 = 
	`xfs_båì_√w_úoŸ
(
cur
, &
logÊags
, 
°©
);

3216 i‡(
îr‹
 || *
°©
 == 0)

3217  
îr‹
;

3219 
	`xfs_å™s_log_öode
(
cur
->
bc_ç
, 
ù
, 
logÊags
);

3226 
îr‹
 = 
	`xfs_båì_rshi·
(
cur
, 
Àvñ
, 
°©
);

3227 i‡(
îr‹
 || *
°©
)

3228  
îr‹
;

3231 
îr‹
 = 
	`xfs_båì_lshi·
(
cur
, 
Àvñ
, 
°©
);

3232 i‡(
îr‹
)

3233  
îr‹
;

3235 i‡(*
°©
) {

3236 *
oödex
 = *
ödex
 = 
cur
->
bc_±rs
[
Àvñ
];

3246 
îr‹
 = 
	`xfs_båì_•lô
(
cur
, 
Àvñ
, 
≈å
, 
key
, 
ncur
, 
°©
);

3247 i‡(
îr‹
 || *
°©
 == 0)

3248  
îr‹
;

3251 *
ödex
 = 
cur
->
bc_±rs
[
Àvñ
];

3253 
	}
}

3259 
STATIC
 

3260 
	$xfs_båì_ö§ec
(

3261 
xfs_båì_cur
 *
cur
,

3262 
Àvñ
,

3263 
xfs_båì_±r
 *
±Ω
,

3264 
xfs_båì_ªc
 *
ªc
,

3265 
xfs_båì_key
 *
key
,

3266 
xfs_båì_cur
 **
cuΩ
,

3267 *
°©
)

3269 
xfs_båì_block
 *
block
;

3270 
xfs_buf
 *
bp
;

3271 
xfs_båì_±r
 
≈å
;

3272 
xfs_båì_cur
 *
ncur
;

3273 
xfs_båì_key
 
nkey
;

3274 
xfs_båì_key
 *
lkey
;

3275 
›å
;

3276 
±r
;

3277 
numªcs
;

3278 
îr‹
;

3279 #ifde‡
DEBUG


3280 
i
;

3282 
xfs_daddr_t
 
ﬁd_bn
;

3284 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

3285 
	`XFS_BTREE_TRACE_ARGIPR
(
cur
, 
Àvñ
, *
±Ω
, &
ªc
);

3287 
ncur
 = 
NULL
;

3288 
lkey
 = &
nkey
;

3294 i‡(!(
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
) &&

3295 (
Àvñ
 >
cur
->
bc_∆evñs
)) {

3296 
îr‹
 = 
	`xfs_båì_√w_roŸ
(
cur
, 
°©
);

3297 
	`xfs_båì_£t_±r_nuŒ
(
cur
, 
±Ω
);

3299 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3300  
îr‹
;

3304 
±r
 = 
cur
->
bc_±rs
[
Àvñ
];

3305 i‡(
±r
 == 0) {

3306 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3307 *
°©
 = 0;

3311 
›å
 = 
±r
;

3313 
	`XFS_BTREE_STATS_INC
(
cur
, 
ö§ec
);

3316 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

3317 
ﬁd_bn
 = 
bp
 ? bp->
b_bn
 : 
XFS_BUF_DADDR_NULL
;

3318 
numªcs
 = 
	`xfs_båì_gë_numªcs
(
block
);

3320 #ifde‡
DEBUG


3321 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

3322 i‡(
îr‹
)

3323 
îr‹0
;

3326 i‡(
±r
 <
numªcs
) {

3327 i‡(
Àvñ
 == 0) {

3328 
	`ASSERT
(
cur
->
bc_›s
->
	`ªcs_ö‹dî
(cur, 
ªc
,

3329 
	`xfs_båì_ªc_addr
(
cur
, 
±r
, 
block
)));

3331 
	`ASSERT
(
cur
->
bc_›s
->
	`keys_ö‹dî
(cur, 
key
,

3332 
	`xfs_båì_key_addr
(
cur
, 
±r
, 
block
)));

3341 
	`xfs_båì_£t_±r_nuŒ
(
cur
, &
≈å
);

3342 i‡(
numªcs
 =
cur
->
bc_›s
->
	`gë_maxªcs
(cur, 
Àvñ
)) {

3343 
îr‹
 = 
	`xfs_båì_make_block_unfuŒ
(
cur
, 
Àvñ
, 
numªcs
,

3344 &
›å
, &
±r
, &
≈å
, &
ncur
, 
lkey
, 
°©
);

3345 i‡(
îr‹
 || *
°©
 == 0)

3346 
îr‹0
;

3353 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

3354 
numªcs
 = 
	`xfs_båì_gë_numªcs
(
block
);

3356 #ifde‡
DEBUG


3357 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

3358 i‡(
îr‹
)

3359  
îr‹
;

3366 
	`XFS_BTREE_STATS_ADD
(
cur
, 
moves
, 
numªcs
 - 
±r
 + 1);

3368 i‡(
Àvñ
 > 0) {

3370 
xfs_båì_key
 *
kp
;

3371 
xfs_båì_±r
 *
µ
;

3373 
kp
 = 
	`xfs_båì_key_addr
(
cur
, 
±r
, 
block
);

3374 
µ
 = 
	`xfs_båì_±r_addr
(
cur
, 
±r
, 
block
);

3376 #ifde‡
DEBUG


3377 
i
 = 
numªcs
 - 
±r
; i >= 0; i--) {

3378 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
µ
, 
i
, 
Àvñ
);

3379 i‡(
îr‹
)

3380  
îr‹
;

3384 
	`xfs_båì_shi·_keys
(
cur
, 
kp
, 1, 
numªcs
 - 
±r
 + 1);

3385 
	`xfs_båì_shi·_±rs
(
cur
, 
µ
, 1, 
numªcs
 - 
±r
 + 1);

3387 #ifde‡
DEBUG


3388 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
±Ω
, 0, 
Àvñ
);

3389 i‡(
îr‹
)

3390 
îr‹0
;

3394 
	`xfs_båì_c›y_keys
(
cur
, 
kp
, 
key
, 1);

3395 
	`xfs_båì_c›y_±rs
(
cur
, 
µ
, 
±Ω
, 1);

3396 
numªcs
++;

3397 
	`xfs_båì_£t_numªcs
(
block
, 
numªcs
);

3398 
	`xfs_båì_log_±rs
(
cur
, 
bp
, 
±r
, 
numªcs
);

3399 
	`xfs_båì_log_keys
(
cur
, 
bp
, 
±r
, 
numªcs
);

3400 #ifde‡
DEBUG


3401 i‡(
±r
 < 
numªcs
) {

3402 
	`ASSERT
(
cur
->
bc_›s
->
	`keys_ö‹dî
(cur, 
kp
,

3403 
	`xfs_båì_key_addr
(
cur
, 
±r
 + 1, 
block
)));

3408 
xfs_båì_ªc
 *
Ω
;

3410 
Ω
 = 
	`xfs_båì_ªc_addr
(
cur
, 
±r
, 
block
);

3412 
	`xfs_båì_shi·_ªcs
(
cur
, 
Ω
, 1, 
numªcs
 - 
±r
 + 1);

3415 
	`xfs_båì_c›y_ªcs
(
cur
, 
Ω
, 
ªc
, 1);

3416 
	`xfs_båì_£t_numªcs
(
block
, ++
numªcs
);

3417 
	`xfs_båì_log_ªcs
(
cur
, 
bp
, 
±r
, 
numªcs
);

3418 #ifde‡
DEBUG


3419 i‡(
±r
 < 
numªcs
) {

3420 
	`ASSERT
(
cur
->
bc_›s
->
	`ªcs_ö‹dî
(cur, 
Ω
,

3421 
	`xfs_båì_ªc_addr
(
cur
, 
±r
 + 1, 
block
)));

3427 
	`xfs_båì_log_block
(
cur
, 
bp
, 
XFS_BB_NUMRECS
);

3437 i‡(
bp
 && bp->
b_bn
 !
ﬁd_bn
) {

3438 
	`xfs_båì_gë_keys
(
cur
, 
block
, 
lkey
);

3439 } i‡(
	`xfs_båì_√eds_key_upd©e
(
cur
, 
›å
)) {

3440 
îr‹
 = 
	`xfs_båì_upd©e_keys
(
cur
, 
Àvñ
);

3441 i‡(
îr‹
)

3442 
îr‹0
;

3449 i‡(
	`xfs_båì_is_œ°ªc
(
cur
, 
block
, 
Àvñ
)) {

3450 
cur
->
bc_›s
->
	`upd©e_œ°ªc
(cur, 
block
, 
ªc
,

3451 
±r
, 
LASTREC_INSREC
);

3458 *
±Ω
 = 
≈å
;

3459 i‡(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
≈å
)) {

3460 
	`xfs_båì_c›y_keys
(
cur
, 
key
, 
lkey
, 1);

3461 *
cuΩ
 = 
ncur
;

3464 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3465 *
°©
 = 1;

3468 
îr‹0
:

3469 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

3470  
îr‹
;

3471 
	}
}

3481 
	$xfs_båì_ö£π
(

3482 
xfs_båì_cur
 *
cur
,

3483 *
°©
)

3485 
îr‹
;

3486 
i
;

3487 
Àvñ
;

3488 
xfs_båì_±r
 
≈å
;

3489 
xfs_båì_cur
 *
ncur
;

3490 
xfs_båì_cur
 *
pcur
;

3491 
xfs_båì_key
 
bkey
;

3492 
xfs_båì_key
 *
key
;

3493 
xfs_båì_ªc
 
ªc
;

3495 
Àvñ
 = 0;

3496 
ncur
 = 
NULL
;

3497 
pcur
 = 
cur
;

3498 
key
 = &
bkey
;

3500 
	`xfs_båì_£t_±r_nuŒ
(
cur
, &
≈å
);

3503 
cur
->
bc_›s
->
	`öô_ªc_‰om_cur
(cur, &
ªc
);

3504 
cur
->
bc_›s
->
	`öô_key_‰om_ªc
(
key
, &
ªc
);

3516 
îr‹
 = 
	`xfs_båì_ö§ec
(
pcur
, 
Àvñ
, &
≈å
, &
ªc
, 
key
,

3517 &
ncur
, &
i
);

3518 i‡(
îr‹
) {

3519 i‡(
pcur
 !
cur
)

3520 
	`xfs_båì_dñ_curs‹
(
pcur
, 
XFS_BTREE_ERROR
);

3521 
îr‹0
;

3524 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
i
 =1, 
îr‹0
);

3525 
Àvñ
++;

3532 i‡(
pcur
 !
cur
 &&

3533 (
ncur
 || 
	`xfs_båì_±r_is_nuŒ
(
cur
, &
≈å
))) {

3535 i‡(
cur
->
bc_›s
->
upd©e_curs‹
)

3536 
cur
->
bc_›s
->
	`upd©e_curs‹
(
pcur
, cur);

3537 
cur
->
bc_∆evñs
 = 
pcur
->bc_nlevels;

3538 
	`xfs_båì_dñ_curs‹
(
pcur
, 
XFS_BTREE_NOERROR
);

3541 i‡(
ncur
) {

3542 
pcur
 = 
ncur
;

3543 
ncur
 = 
NULL
;

3545 } !
	`xfs_båì_±r_is_nuŒ
(
cur
, &
≈å
));

3547 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3548 *
°©
 = 
i
;

3550 
îr‹0
:

3551 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

3552  
îr‹
;

3553 
	}
}

3563 
STATIC
 

3564 
	$xfs_båì_kûl_úoŸ
(

3565 
xfs_båì_cur
 *
cur
)

3567 
whichf‹k
 = 
cur
->
bc_¥iv©e
.
b
.whichfork;

3568 
xfs_öode
 *
ù
 = 
cur
->
bc_¥iv©e
.
b
.ip;

3569 
xfs_if‹k
 *
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

3570 
xfs_båì_block
 *
block
;

3571 
xfs_båì_block
 *
cblock
;

3572 
xfs_båì_key
 *
kp
;

3573 
xfs_båì_key
 *
ckp
;

3574 
xfs_båì_±r
 *
µ
;

3575 
xfs_båì_±r
 *
˝p
;

3576 
xfs_buf
 *
cbp
;

3577 
Àvñ
;

3578 
ödex
;

3579 
numªcs
;

3580 
îr‹
;

3581 #ifde‡
DEBUG


3582 
xfs_båì_±r
 
±r
;

3583 
i
;

3586 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

3588 
	`ASSERT
(
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
);

3589 
	`ASSERT
(
cur
->
bc_∆evñs
 > 1);

3595 
Àvñ
 = 
cur
->
bc_∆evñs
 - 1;

3596 i‡(
Àvñ
 == 1)

3597 
out0
;

3602 
block
 = 
	`xfs_båì_gë_úoŸ
(
cur
);

3603 i‡(
	`xfs_båì_gë_numªcs
(
block
) != 1)

3604 
out0
;

3606 
cblock
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
 - 1, &
cbp
);

3607 
numªcs
 = 
	`xfs_båì_gë_numªcs
(
cblock
);

3614 i‡(
numªcs
 > 
cur
->
bc_›s
->
	`gë_dmaxªcs
(cur, 
Àvñ
))

3615 
out0
;

3617 
	`XFS_BTREE_STATS_INC
(
cur
, 
kûÃoŸ
);

3619 #ifde‡
DEBUG


3620 
	`xfs_båì_gë_siblög
(
cur
, 
block
, &
±r
, 
XFS_BB_LEFTSIB
);

3621 
	`ASSERT
(
	`xfs_båì_±r_is_nuŒ
(
cur
, &
±r
));

3622 
	`xfs_båì_gë_siblög
(
cur
, 
block
, &
±r
, 
XFS_BB_RIGHTSIB
);

3623 
	`ASSERT
(
	`xfs_båì_±r_is_nuŒ
(
cur
, &
±r
));

3626 
ödex
 = 
numªcs
 - 
cur
->
bc_›s
->
	`gë_maxªcs
(cur, 
Àvñ
);

3627 i‡(
ödex
) {

3628 
	`xfs_úoŸ_ªÆloc
(
cur
->
bc_¥iv©e
.
b
.
ù
, 
ödex
,

3629 
cur
->
bc_¥iv©e
.
b
.
whichf‹k
);

3630 
block
 = 
iÂ
->
if_broŸ
;

3633 
	`be16_add_˝u
(&
block
->
bb_numªcs
, 
ödex
);

3634 
	`ASSERT
(
block
->
bb_numªcs
 =
cblock
->bb_numrecs);

3636 
kp
 = 
	`xfs_båì_key_addr
(
cur
, 1, 
block
);

3637 
ckp
 = 
	`xfs_båì_key_addr
(
cur
, 1, 
cblock
);

3638 
	`xfs_båì_c›y_keys
(
cur
, 
kp
, 
ckp
, 
numªcs
);

3640 
µ
 = 
	`xfs_båì_±r_addr
(
cur
, 1, 
block
);

3641 
˝p
 = 
	`xfs_båì_±r_addr
(
cur
, 1, 
cblock
);

3642 #ifde‡
DEBUG


3643 
i
 = 0; i < 
numªcs
; i++) {

3644 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
˝p
, 
i
, 
Àvñ
 - 1);

3645 i‡(
îr‹
) {

3646 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

3647  
îr‹
;

3651 
	`xfs_båì_c›y_±rs
(
cur
, 
µ
, 
˝p
, 
numªcs
);

3653 
îr‹
 = 
	`xfs_båì_‰ì_block
(
cur
, 
cbp
);

3654 i‡(
îr‹
) {

3655 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

3656  
îr‹
;

3659 
cur
->
bc_bufs
[
Àvñ
 - 1] = 
NULL
;

3660 
	`be16_add_˝u
(&
block
->
bb_Àvñ
, -1);

3661 
	`xfs_å™s_log_öode
(
cur
->
bc_ç
, 
ù
,

3662 
XFS_ILOG_CORE
 | 
	`xfs_ûog_fbroŸ
(
cur
->
bc_¥iv©e
.
b
.
whichf‹k
));

3663 
cur
->
bc_∆evñs
--;

3664 
out0
:

3665 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3667 
	}
}

3672 
STATIC
 

3673 
	$xfs_båì_kûl_roŸ
(

3674 
xfs_båì_cur
 *
cur
,

3675 
xfs_buf
 *
bp
,

3676 
Àvñ
,

3677 
xfs_båì_±r
 *
√wroŸ
)

3679 
îr‹
;

3681 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

3682 
	`XFS_BTREE_STATS_INC
(
cur
, 
kûÃoŸ
);

3688 
cur
->
bc_›s
->
	`£t_roŸ
(cur, 
√wroŸ
, -1);

3690 
îr‹
 = 
	`xfs_båì_‰ì_block
(
cur
, 
bp
);

3691 i‡(
îr‹
) {

3692 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

3693  
îr‹
;

3696 
cur
->
bc_bufs
[
Àvñ
] = 
NULL
;

3697 
cur
->
bc_ø
[
Àvñ
] = 0;

3698 
cur
->
bc_∆evñs
--;

3700 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3702 
	}
}

3704 
STATIC
 

3705 
	$xfs_båì_dec_curs‹
(

3706 
xfs_båì_cur
 *
cur
,

3707 
Àvñ
,

3708 *
°©
)

3710 
îr‹
;

3711 
i
;

3713 i‡(
Àvñ
 > 0) {

3714 
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 
Àvñ
, &
i
);

3715 i‡(
îr‹
)

3716  
îr‹
;

3719 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3720 *
°©
 = 1;

3722 
	}
}

3730 
STATIC
 

3731 
	$xfs_båì_dñªc
(

3732 
xfs_båì_cur
 *
cur
,

3733 
Àvñ
,

3734 *
°©
)

3736 
xfs_båì_block
 *
block
;

3737 
xfs_båì_±r
 
˝å
;

3738 
xfs_buf
 *
bp
;

3739 
îr‹
;

3740 
i
;

3741 
xfs_båì_±r
 
Õå
;

3742 
xfs_buf
 *
lbp
;

3743 
xfs_båì_block
 *
À·
;

3744 
Ãecs
 = 0;

3745 
±r
;

3746 
xfs_båì_±r
 
Ωå
;

3747 
xfs_buf
 *
rbp
;

3748 
xfs_båì_block
 *
right
;

3749 
xfs_båì_block
 *
ºblock
;

3750 
xfs_buf
 *
ºbp
;

3751 
ºecs
 = 0;

3752 
xfs_båì_cur
 *
tcur
;

3753 
numªcs
;

3755 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

3756 
	`XFS_BTREE_TRACE_ARGI
(
cur
, 
Àvñ
);

3758 
tcur
 = 
NULL
;

3761 
±r
 = 
cur
->
bc_±rs
[
Àvñ
];

3762 i‡(
±r
 == 0) {

3763 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3764 *
°©
 = 0;

3769 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

3770 
numªcs
 = 
	`xfs_båì_gë_numªcs
(
block
);

3772 #ifde‡
DEBUG


3773 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

3774 i‡(
îr‹
)

3775 
îr‹0
;

3779 i‡(
±r
 > 
numªcs
) {

3780 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

3781 *
°©
 = 0;

3785 
	`XFS_BTREE_STATS_INC
(
cur
, 
dñªc
);

3786 
	`XFS_BTREE_STATS_ADD
(
cur
, 
moves
, 
numªcs
 - 
±r
);

3789 i‡(
Àvñ
 > 0) {

3791 
xfs_båì_key
 *
lkp
;

3792 
xfs_båì_±r
 *
Õp
;

3794 
lkp
 = 
	`xfs_båì_key_addr
(
cur
, 
±r
 + 1, 
block
);

3795 
Õp
 = 
	`xfs_båì_±r_addr
(
cur
, 
±r
 + 1, 
block
);

3797 #ifde‡
DEBUG


3798 
i
 = 0; i < 
numªcs
 - 
±r
; i++) {

3799 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
Õp
, 
i
, 
Àvñ
);

3800 i‡(
îr‹
)

3801 
îr‹0
;

3805 i‡(
±r
 < 
numªcs
) {

3806 
	`xfs_båì_shi·_keys
(
cur
, 
lkp
, -1, 
numªcs
 - 
±r
);

3807 
	`xfs_båì_shi·_±rs
(
cur
, 
Õp
, -1, 
numªcs
 - 
±r
);

3808 
	`xfs_båì_log_keys
(
cur
, 
bp
, 
±r
, 
numªcs
 - 1);

3809 
	`xfs_båì_log_±rs
(
cur
, 
bp
, 
±r
, 
numªcs
 - 1);

3813 i‡(
±r
 < 
numªcs
) {

3814 
	`xfs_båì_shi·_ªcs
(
cur
,

3815 
	`xfs_båì_ªc_addr
(
cur
, 
±r
 + 1, 
block
),

3816 -1, 
numªcs
 - 
±r
);

3817 
	`xfs_båì_log_ªcs
(
cur
, 
bp
, 
±r
, 
numªcs
 - 1);

3824 
	`xfs_båì_£t_numªcs
(
block
, --
numªcs
);

3825 
	`xfs_båì_log_block
(
cur
, 
bp
, 
XFS_BB_NUMRECS
);

3831 i‡(
	`xfs_båì_is_œ°ªc
(
cur
, 
block
, 
Àvñ
)) {

3832 
cur
->
bc_›s
->
	`upd©e_œ°ªc
(cur, 
block
, 
NULL
,

3833 
±r
, 
LASTREC_DELREC
);

3841 i‡(
Àvñ
 =
cur
->
bc_∆evñs
 - 1) {

3842 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
) {

3843 
	`xfs_úoŸ_ªÆloc
(
cur
->
bc_¥iv©e
.
b
.
ù
, -1,

3844 
cur
->
bc_¥iv©e
.
b
.
whichf‹k
);

3846 
îr‹
 = 
	`xfs_båì_kûl_úoŸ
(
cur
);

3847 i‡(
îr‹
)

3848 
îr‹0
;

3850 
îr‹
 = 
	`xfs_båì_dec_curs‹
(
cur
, 
Àvñ
, 
°©
);

3851 i‡(
îr‹
)

3852 
îr‹0
;

3853 *
°©
 = 1;

3862 i‡(
numªcs
 =1 && 
Àvñ
 > 0) {

3863 
xfs_båì_±r
 *
µ
;

3868 
µ
 = 
	`xfs_båì_±r_addr
(
cur
, 1, 
block
);

3869 
îr‹
 = 
	`xfs_båì_kûl_roŸ
(
cur
, 
bp
, 
Àvñ
, 
µ
);

3870 i‡(
îr‹
)

3871 
îr‹0
;

3872 } i‡(
Àvñ
 > 0) {

3873 
îr‹
 = 
	`xfs_båì_dec_curs‹
(
cur
, 
Àvñ
, 
°©
);

3874 i‡(
îr‹
)

3875 
îr‹0
;

3877 *
°©
 = 1;

3885 i‡(
	`xfs_båì_√eds_key_upd©e
(
cur
, 
±r
)) {

3886 
îr‹
 = 
	`xfs_båì_upd©e_keys
(
cur
, 
Àvñ
);

3887 i‡(
îr‹
)

3888 
îr‹0
;

3895 i‡(
numªcs
 >
cur
->
bc_›s
->
	`gë_möªcs
(cur, 
Àvñ
)) {

3896 
îr‹
 = 
	`xfs_båì_dec_curs‹
(
cur
, 
Àvñ
, 
°©
);

3897 i‡(
îr‹
)

3898 
îr‹0
;

3907 
	`xfs_båì_gë_siblög
(
cur
, 
block
, &
Ωå
, 
XFS_BB_RIGHTSIB
);

3908 
	`xfs_båì_gë_siblög
(
cur
, 
block
, &
Õå
, 
XFS_BB_LEFTSIB
);

3910 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
) {

3916 i‡(
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Ωå
) &&

3917 
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Õå
) &&

3918 
Àvñ
 =
cur
->
bc_∆evñs
 - 2) {

3919 
îr‹
 = 
	`xfs_båì_kûl_úoŸ
(
cur
);

3920 i‡(!
îr‹
)

3921 
îr‹
 = 
	`xfs_båì_dec_curs‹
(
cur
, 
Àvñ
, 
°©
);

3922 i‡(
îr‹
)

3923 
îr‹0
;

3928 
	`ASSERT
(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Ωå
) ||

3929 !
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Õå
));

3935 
îr‹
 = 
	`xfs_båì_dup_curs‹
(
cur
, &
tcur
);

3936 i‡(
îr‹
)

3937 
îr‹0
;

3943 i‡(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Ωå
)) {

3948 
i
 = 
	`xfs_båì_œ°ªc
(
tcur
, 
Àvñ
);

3949 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
i
 =1, 
îr‹0
);

3951 
îr‹
 = 
	`xfs_båì_ö¸emít
(
tcur
, 
Àvñ
, &
i
);

3952 i‡(
îr‹
)

3953 
îr‹0
;

3954 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
i
 =1, 
îr‹0
);

3956 
i
 = 
	`xfs_båì_œ°ªc
(
tcur
, 
Àvñ
);

3957 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
i
 =1, 
îr‹0
);

3960 
right
 = 
	`xfs_båì_gë_block
(
tcur
, 
Àvñ
, &
rbp
);

3961 #ifde‡
DEBUG


3962 
îr‹
 = 
	`xfs_båì_check_block
(
tcur
, 
right
, 
Àvñ
, 
rbp
);

3963 i‡(
îr‹
)

3964 
îr‹0
;

3967 
	`xfs_båì_gë_siblög
(
tcur
, 
right
, &
˝å
, 
XFS_BB_LEFTSIB
);

3974 i‡(
	`xfs_båì_gë_numªcs
(
right
) - 1 >=

3975 
cur
->
bc_›s
->
	`gë_möªcs
(
tcur
, 
Àvñ
)) {

3976 
îr‹
 = 
	`xfs_båì_lshi·
(
tcur
, 
Àvñ
, &
i
);

3977 i‡(
îr‹
)

3978 
îr‹0
;

3979 i‡(
i
) {

3980 
	`ASSERT
(
	`xfs_båì_gë_numªcs
(
block
) >=

3981 
cur
->
bc_›s
->
	`gë_möªcs
(
tcur
, 
Àvñ
));

3983 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_NOERROR
);

3984 
tcur
 = 
NULL
;

3986 
îr‹
 = 
	`xfs_båì_dec_curs‹
(
cur
, 
Àvñ
, 
°©
);

3987 i‡(
îr‹
)

3988 
îr‹0
;

3998 
ºecs
 = 
	`xfs_båì_gë_numªcs
(
right
);

3999 i‡(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Õå
)) {

4000 
i
 = 
	`xfs_båì_fú°ªc
(
tcur
, 
Àvñ
);

4001 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
i
 =1, 
îr‹0
);

4003 
îr‹
 = 
	`xfs_båì_de¸emít
(
tcur
, 
Àvñ
, &
i
);

4004 i‡(
îr‹
)

4005 
îr‹0
;

4006 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
i
 =1, 
îr‹0
);

4014 i‡(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Õå
)) {

4019 
i
 = 
	`xfs_båì_fú°ªc
(
tcur
, 
Àvñ
);

4020 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
i
 =1, 
îr‹0
);

4022 
îr‹
 = 
	`xfs_båì_de¸emít
(
tcur
, 
Àvñ
, &
i
);

4023 i‡(
îr‹
)

4024 
îr‹0
;

4025 
i
 = 
	`xfs_båì_fú°ªc
(
tcur
, 
Àvñ
);

4026 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
i
 =1, 
îr‹0
);

4029 
À·
 = 
	`xfs_båì_gë_block
(
tcur
, 
Àvñ
, &
lbp
);

4030 #ifde‡
DEBUG


4031 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
À·
, 
Àvñ
, 
lbp
);

4032 i‡(
îr‹
)

4033 
îr‹0
;

4036 
	`xfs_båì_gë_siblög
(
tcur
, 
À·
, &
˝å
, 
XFS_BB_RIGHTSIB
);

4043 i‡(
	`xfs_båì_gë_numªcs
(
À·
) - 1 >=

4044 
cur
->
bc_›s
->
	`gë_möªcs
(
tcur
, 
Àvñ
)) {

4045 
îr‹
 = 
	`xfs_båì_rshi·
(
tcur
, 
Àvñ
, &
i
);

4046 i‡(
îr‹
)

4047 
îr‹0
;

4048 i‡(
i
) {

4049 
	`ASSERT
(
	`xfs_båì_gë_numªcs
(
block
) >=

4050 
cur
->
bc_›s
->
	`gë_möªcs
(
tcur
, 
Àvñ
));

4051 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_NOERROR
);

4052 
tcur
 = 
NULL
;

4053 i‡(
Àvñ
 == 0)

4054 
cur
->
bc_±rs
[0]++;

4055 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

4056 *
°©
 = 1;

4065 
Ãecs
 = 
	`xfs_båì_gë_numªcs
(
À·
);

4069 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_NOERROR
);

4070 
tcur
 = 
NULL
;

4073 
	`ASSERT
(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
˝å
));

4075 i‡(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Õå
) &&

4076 
Ãecs
 + 
	`xfs_båì_gë_numªcs
(
block
) <=

4077 
cur
->
bc_›s
->
	`gë_maxªcs
(cur, 
Àvñ
)) {

4082 
Ωå
 = 
˝å
;

4083 
right
 = 
block
;

4084 
rbp
 = 
bp
;

4085 
îr‹
 = 
	`xfs_båì_ªad_buf_block
(
cur
, &
Õå
, 0, &
À·
, &
lbp
);

4086 i‡(
îr‹
)

4087 
îr‹0
;

4092 } i‡(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Ωå
) &&

4093 
ºecs
 + 
	`xfs_båì_gë_numªcs
(
block
) <=

4094 
cur
->
bc_›s
->
	`gë_maxªcs
(cur, 
Àvñ
)) {

4099 
Õå
 = 
˝å
;

4100 
À·
 = 
block
;

4101 
lbp
 = 
bp
;

4102 
îr‹
 = 
	`xfs_båì_ªad_buf_block
(
cur
, &
Ωå
, 0, &
right
, &
rbp
);

4103 i‡(
îr‹
)

4104 
îr‹0
;

4111 
îr‹
 = 
	`xfs_båì_dec_curs‹
(
cur
, 
Àvñ
, 
°©
);

4112 i‡(
îr‹
)

4113 
îr‹0
;

4117 
ºecs
 = 
	`xfs_båì_gë_numªcs
(
right
);

4118 
Ãecs
 = 
	`xfs_båì_gë_numªcs
(
À·
);

4124 
	`XFS_BTREE_STATS_ADD
(
cur
, 
moves
, 
ºecs
);

4125 i‡(
Àvñ
 > 0) {

4127 
xfs_båì_key
 *
lkp
;

4128 
xfs_båì_±r
 *
Õp
;

4129 
xfs_båì_key
 *
rkp
;

4130 
xfs_båì_±r
 *
Ωp
;

4132 
lkp
 = 
	`xfs_båì_key_addr
(
cur
, 
Ãecs
 + 1, 
À·
);

4133 
Õp
 = 
	`xfs_båì_±r_addr
(
cur
, 
Ãecs
 + 1, 
À·
);

4134 
rkp
 = 
	`xfs_båì_key_addr
(
cur
, 1, 
right
);

4135 
Ωp
 = 
	`xfs_båì_±r_addr
(
cur
, 1, 
right
);

4136 #ifde‡
DEBUG


4137 
i
 = 1; i < 
ºecs
; i++) {

4138 
îr‹
 = 
	`xfs_båì_check_±r
(
cur
, 
Ωp
, 
i
, 
Àvñ
);

4139 i‡(
îr‹
)

4140 
îr‹0
;

4143 
	`xfs_båì_c›y_keys
(
cur
, 
lkp
, 
rkp
, 
ºecs
);

4144 
	`xfs_båì_c›y_±rs
(
cur
, 
Õp
, 
Ωp
, 
ºecs
);

4146 
	`xfs_båì_log_keys
(
cur
, 
lbp
, 
Ãecs
 + 1,Üªc†+ 
ºecs
);

4147 
	`xfs_båì_log_±rs
(
cur
, 
lbp
, 
Ãecs
 + 1,Üªc†+ 
ºecs
);

4150 
xfs_båì_ªc
 *
Ãp
;

4151 
xfs_båì_ªc
 *
ºp
;

4153 
Ãp
 = 
	`xfs_båì_ªc_addr
(
cur
, 
Ãecs
 + 1, 
À·
);

4154 
ºp
 = 
	`xfs_båì_ªc_addr
(
cur
, 1, 
right
);

4156 
	`xfs_båì_c›y_ªcs
(
cur
, 
Ãp
, 
ºp
, 
ºecs
);

4157 
	`xfs_båì_log_ªcs
(
cur
, 
lbp
, 
Ãecs
 + 1,Üªc†+ 
ºecs
);

4160 
	`XFS_BTREE_STATS_INC
(
cur
, 
joö
);

4166 
	`xfs_båì_£t_numªcs
(
À·
, 
Ãecs
 + 
ºecs
);

4167 
	`xfs_båì_gë_siblög
(
cur
, 
right
, &
˝å
, 
XFS_BB_RIGHTSIB
),

4168 
	`xfs_båì_£t_siblög
(
cur
, 
À·
, &
˝å
, 
XFS_BB_RIGHTSIB
);

4169 
	`xfs_båì_log_block
(
cur
, 
lbp
, 
XFS_BB_NUMRECS
 | 
XFS_BB_RIGHTSIB
);

4172 
	`xfs_båì_gë_siblög
(
cur
, 
À·
, &
˝å
, 
XFS_BB_RIGHTSIB
);

4173 i‡(!
	`xfs_båì_±r_is_nuŒ
(
cur
, &
˝å
)) {

4174 
îr‹
 = 
	`xfs_båì_ªad_buf_block
(
cur
, &
˝å
, 0, &
ºblock
, &
ºbp
);

4175 i‡(
îr‹
)

4176 
îr‹0
;

4177 
	`xfs_båì_£t_siblög
(
cur
, 
ºblock
, &
Õå
, 
XFS_BB_LEFTSIB
);

4178 
	`xfs_båì_log_block
(
cur
, 
ºbp
, 
XFS_BB_LEFTSIB
);

4182 
îr‹
 = 
	`xfs_båì_‰ì_block
(
cur
, 
rbp
);

4183 i‡(
îr‹
)

4184 
îr‹0
;

4190 i‡(
bp
 !
lbp
) {

4191 
cur
->
bc_bufs
[
Àvñ
] = 
lbp
;

4192 
cur
->
bc_±rs
[
Àvñ
] +
Ãecs
;

4193 
cur
->
bc_ø
[
Àvñ
] = 0;

4199 i‡((
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
) ||

4200 (
Àvñ
 + 1 < 
cur
->
bc_∆evñs
)) {

4201 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 
Àvñ
 + 1, &
i
);

4202 i‡(
îr‹
)

4203 
îr‹0
;

4212 i‡(
Àvñ
 > 0)

4213 
cur
->
bc_±rs
[
Àvñ
]--;

4225 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

4227 *
°©
 = 2;

4230 
îr‹0
:

4231 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

4232 i‡(
tcur
)

4233 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_ERROR
);

4234  
îr‹
;

4235 
	}
}

4243 
	$xfs_båì_dñëe
(

4244 
xfs_båì_cur
 *
cur
,

4245 *
°©
)

4247 
îr‹
;

4248 
Àvñ
;

4249 
i
;

4250 
boﬁ
 
joöed
 = 
Ál£
;

4252 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

4260 
Àvñ
 = 0, 
i
 = 2; i == 2;Üevel++) {

4261 
îr‹
 = 
	`xfs_båì_dñªc
(
cur
, 
Àvñ
, &
i
);

4262 i‡(
îr‹
)

4263 
îr‹0
;

4264 i‡(
i
 == 2)

4265 
joöed
 = 
åue
;

4272 i‡(
joöed
 && (
cur
->
bc_Êags
 & 
XFS_BTREE_OVERLAPPING
)) {

4273 
îr‹
 = 
	`xfs_båì_updkeys_f‹˚
(
cur
, 0);

4274 i‡(
îr‹
)

4275 
îr‹0
;

4278 i‡(
i
 == 0) {

4279 
Àvñ
 = 1;Üevñ < 
cur
->
bc_∆evñs
;Üevel++) {

4280 i‡(
cur
->
bc_±rs
[
Àvñ
] == 0) {

4281 
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 
Àvñ
, &
i
);

4282 i‡(
îr‹
)

4283 
îr‹0
;

4289 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

4290 *
°©
 = 
i
;

4292 
îr‹0
:

4293 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

4294  
îr‹
;

4295 
	}
}

4301 
	$xfs_båì_gë_ªc
(

4302 
xfs_båì_cur
 *
cur
,

4303 
xfs_båì_ªc
 **
ª˝
,

4304 *
°©
)

4306 
xfs_båì_block
 *
block
;

4307 
xfs_buf
 *
bp
;

4308 
±r
;

4309 #ifde‡
DEBUG


4310 
îr‹
;

4313 
±r
 = 
cur
->
bc_±rs
[0];

4314 
block
 = 
	`xfs_båì_gë_block
(
cur
, 0, &
bp
);

4316 #ifde‡
DEBUG


4317 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 0, 
bp
);

4318 i‡(
îr‹
)

4319  
îr‹
;

4325 i‡(
±r
 > 
	`xfs_båì_gë_numªcs
(
block
) ||Ötr <= 0) {

4326 *
°©
 = 0;

4333 *
ª˝
 = 
	`xfs_båì_ªc_addr
(
cur
, 
±r
, 
block
);

4334 *
°©
 = 1;

4336 
	}
}

4339 
STATIC
 

4340 
	$xfs_båì_visô_block
(

4341 
xfs_båì_cur
 *
cur
,

4342 
Àvñ
,

4343 
xfs_båì_visô_blocks_‚
 
‚
,

4344 *
d©a
)

4346 
xfs_båì_block
 *
block
;

4347 
xfs_buf
 *
bp
;

4348 
xfs_båì_±r
 
Ωå
;

4349 
îr‹
;

4352 
	`xfs_båì_ªadahód
(
cur
, 
Àvñ
, 
XFS_BTCUR_RIGHTRA
);

4353 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

4356 
îr‹
 = 
	`‚
(
cur
, 
Àvñ
, 
d©a
);

4357 i‡(
îr‹
)

4358  
îr‹
;

4361 
	`xfs_båì_gë_siblög
(
cur
, 
block
, &
Ωå
, 
XFS_BB_RIGHTSIB
);

4362 i‡(
	`xfs_båì_±r_is_nuŒ
(
cur
, &
Ωå
))

4363  -
ENOENT
;

4365  
	`xfs_båì_lookup_gë_block
(
cur
, 
Àvñ
, &
Ωå
, &
block
);

4366 
	}
}

4371 
	$xfs_båì_visô_blocks
(

4372 
xfs_båì_cur
 *
cur
,

4373 
xfs_båì_visô_blocks_‚
 
‚
,

4374 *
d©a
)

4376 
xfs_båì_±r
 
Õå
;

4377 
Àvñ
;

4378 
xfs_båì_block
 *
block
 = 
NULL
;

4379 
îr‹
 = 0;

4381 
cur
->
bc_›s
->
	`öô_±r_‰om_cur
(cur, &
Õå
);

4384 
Àvñ
 = 
cur
->
bc_∆evñs
 - 1;Üevel >= 0;Üevel--) {

4386 
îr‹
 = 
	`xfs_båì_lookup_gë_block
(
cur
, 
Àvñ
, &
Õå
, &
block
);

4387 i‡(
îr‹
)

4388  
îr‹
;

4391 i‡(
Àvñ
 > 0) {

4392 
xfs_båì_±r
 *
±r
;

4394 
±r
 = 
	`xfs_båì_±r_addr
(
cur
, 1, 
block
);

4395 
	`xfs_båì_ªadahód_±r
(
cur
, 
±r
, 1);

4398 
Õå
 = *
±r
;

4403 
îr‹
 = 
	`xfs_båì_visô_block
(
cur
, 
Àvñ
, 
‚
, 
d©a
);

4404 } !
îr‹
);

4406 i‡(
îr‹
 !-
ENOENT
)

4407  
îr‹
;

4411 
	}
}

4437 
	sxfs_båì_block_ch™ge_ow√r_öfo
 {

4438 
__uöt64_t
 
	m√w_ow√r
;

4439 
li°_hód
 *
	mbuf„r_li°
;

4443 
	$xfs_båì_block_ch™ge_ow√r
(

4444 
xfs_båì_cur
 *
cur
,

4445 
Àvñ
,

4446 *
d©a
)

4448 
xfs_båì_block_ch™ge_ow√r_öfo
 *
bbcoi
 = 
d©a
;

4449 
xfs_båì_block
 *
block
;

4450 
xfs_buf
 *
bp
;

4453 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

4454 i‡(
cur
->
bc_Êags
 & 
XFS_BTREE_LONG_PTRS
)

4455 
block
->
bb_u
.
l
.
bb_ow√r
 = 
	`˝u_to_be64
(
bbcoi
->
√w_ow√r
);

4457 
block
->
bb_u
.
s
.
bb_ow√r
 = 
	`˝u_to_be32
(
bbcoi
->
√w_ow√r
);

4466 i‡(
bp
) {

4467 i‡(
cur
->
bc_ç
) {

4468 
	`xfs_å™s_‹dîed_buf
(
cur
->
bc_ç
, 
bp
);

4469 
	`xfs_båì_log_block
(
cur
, 
bp
, 
XFS_BB_OWNER
);

4471 
	`xfs_buf_dñwri_queue
(
bp
, 
bbcoi
->
buf„r_li°
);

4474 
	`ASSERT
(
cur
->
bc_Êags
 & 
XFS_BTREE_ROOT_IN_INODE
);

4475 
	`ASSERT
(
Àvñ
 =
cur
->
bc_∆evñs
 - 1);

4479 
	}
}

4482 
	$xfs_båì_ch™ge_ow√r
(

4483 
xfs_båì_cur
 *
cur
,

4484 
__uöt64_t
 
√w_ow√r
,

4485 
li°_hód
 *
buf„r_li°
)

4487 
xfs_båì_block_ch™ge_ow√r_öfo
 
bbcoi
;

4489 
bbcoi
.
√w_ow√r
 =Çew_owner;

4490 
bbcoi
.
buf„r_li°
 = buffer_list;

4492  
	`xfs_båì_visô_blocks
(
cur
, 
xfs_båì_block_ch™ge_ow√r
,

4493 &
bbcoi
);

4494 
	}
}

4504 
boﬁ


4505 
	$xfs_båì_sblock_v5hdr_vîify
(

4506 
xfs_buf
 *
bp
)

4508 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

4509 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

4510 
xfs_≥øg
 *
∑g
 = 
bp
->
b_∑g
;

4512 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

4513  
Ál£
;

4514 i‡(!
	`uuid_equÆ
(&
block
->
bb_u
.
s
.
bb_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

4515  
Ál£
;

4516 i‡(
block
->
bb_u
.
s
.
bb_blkno
 !
	`˝u_to_be64
(
bp
->
b_bn
))

4517  
Ál£
;

4518 i‡(
∑g
 && 
	`be32_to_˝u
(
block
->
bb_u
.
s
.
bb_ow√r
Ë!∑g->
∑g_agno
)

4519  
Ál£
;

4520  
åue
;

4521 
	}
}

4529 
boﬁ


4530 
	$xfs_båì_sblock_vîify
(

4531 
xfs_buf
 *
bp
,

4532 
max_ªcs
)

4534 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

4535 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

4538 i‡(
	`be16_to_˝u
(
block
->
bb_numªcs
Ë> 
max_ªcs
)

4539  
Ál£
;

4542 i‡(!
block
->
bb_u
.
s
.
bb_À·sib
 ||

4543 (
	`be32_to_˝u
(
block
->
bb_u
.
s
.
bb_À·sib
Ë>
mp
->
m_sb
.
sb_agblocks
 &&

4544 
block
->
bb_u
.
s
.
bb_À·sib
 !
	`˝u_to_be32
(
NULLAGBLOCK
)))

4545  
Ál£
;

4546 i‡(!
block
->
bb_u
.
s
.
bb_rightsib
 ||

4547 (
	`be32_to_˝u
(
block
->
bb_u
.
s
.
bb_rightsib
Ë>
mp
->
m_sb
.
sb_agblocks
 &&

4548 
block
->
bb_u
.
s
.
bb_rightsib
 !
	`˝u_to_be32
(
NULLAGBLOCK
)))

4549  
Ál£
;

4551  
åue
;

4552 
	}
}

4558 
uöt


4559 
	$xfs_båì_compuã_maxÀvñs
(

4560 
xfs_mou¡
 *
mp
,

4561 
uöt
 *
limôs
,

4562 
Àn
)

4564 
uöt
 
Àvñ
;

4565 
maxblocks
;

4567 
maxblocks
 = (
Àn
 + 
limôs
[0] - 1) /Üimits[0];

4568 
Àvñ
 = 1; 
maxblocks
 > 1;Üevel++)

4569 
maxblocks
 = (maxblock†+ 
limôs
[1] - 1) /Üimits[1];

4570  
Àvñ
;

4571 
	}
}

4578 
STATIC
 

4579 
	$xfs_båì_sim∂e_quîy_ønge
(

4580 
xfs_båì_cur
 *
cur
,

4581 
xfs_båì_key
 *
low_key
,

4582 
xfs_båì_key
 *
high_key
,

4583 
xfs_båì_quîy_ønge_‚
 
‚
,

4584 *
¥iv
)

4586 
xfs_båì_ªc
 *
ª˝
;

4587 
xfs_båì_key
 
ªc_key
;

4588 
__öt64_t
 
diff
;

4589 
°©
;

4590 
boﬁ
 
fú°ªc
 = 
åue
;

4591 
îr‹
;

4593 
	`ASSERT
(
cur
->
bc_›s
->
öô_high_key_‰om_ªc
);

4594 
	`ASSERT
(
cur
->
bc_›s
->
diff_two_keys
);

4600 
°©
 = 0;

4601 
îr‹
 = 
	`xfs_båì_lookup
(
cur
, 
XFS_LOOKUP_LE
, &
°©
);

4602 i‡(
îr‹
)

4603 
out
;

4606 i‡(!
°©
) {

4607 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
°©
);

4608 i‡(
îr‹
)

4609 
out
;

4612 
°©
) {

4614 
îr‹
 = 
	`xfs_båì_gë_ªc
(
cur
, &
ª˝
, &
°©
);

4615 i‡(
îr‹
 || !
°©
)

4619 i‡(
fú°ªc
) {

4620 
cur
->
bc_›s
->
	`öô_high_key_‰om_ªc
(&
ªc_key
, 
ª˝
);

4621 
fú°ªc
 = 
Ál£
;

4622 
diff
 = 
cur
->
bc_›s
->
	`diff_two_keys
(cur, 
low_key
,

4623 &
ªc_key
);

4624 i‡(
diff
 > 0)

4625 
advlo›
;

4629 
cur
->
bc_›s
->
	`öô_key_‰om_ªc
(&
ªc_key
, 
ª˝
);

4630 
diff
 = 
cur
->
bc_›s
->
	`diff_two_keys
(cur, &
ªc_key
, 
high_key
);

4631 i‡(
diff
 > 0)

4635 
îr‹
 = 
	`‚
(
cur
, 
ª˝
, 
¥iv
);

4636 i‡(
îr‹
 < 0 ||Éº‹ =
XFS_BTREE_QUERY_RANGE_ABORT
)

4639 
advlo›
:

4641 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
°©
);

4642 i‡(
îr‹
)

4646 
out
:

4647  
îr‹
;

4648 
	}
}

4669 
STATIC
 

4670 
	$xfs_båì_ovîœµed_quîy_ønge
(

4671 
xfs_båì_cur
 *
cur
,

4672 
xfs_båì_key
 *
low_key
,

4673 
xfs_båì_key
 *
high_key
,

4674 
xfs_båì_quîy_ønge_‚
 
‚
,

4675 *
¥iv
)

4677 
xfs_båì_±r
 
±r
;

4678 
xfs_båì_±r
 *
µ
;

4679 
xfs_båì_key
 
ªc_key
;

4680 
xfs_båì_key
 
ªc_hkey
;

4681 
xfs_båì_key
 *
lkp
;

4682 
xfs_båì_key
 *
hkp
;

4683 
xfs_båì_ªc
 *
ª˝
;

4684 
xfs_båì_block
 *
block
;

4685 
__öt64_t
 
ldiff
;

4686 
__öt64_t
 
hdiff
;

4687 
Àvñ
;

4688 
xfs_buf
 *
bp
;

4689 
i
;

4690 
îr‹
;

4693 
Àvñ
 = 
cur
->
bc_∆evñs
 - 1;

4694 
cur
->
bc_›s
->
	`öô_±r_‰om_cur
(cur, &
±r
);

4695 
îr‹
 = 
	`xfs_båì_lookup_gë_block
(
cur
, 
Àvñ
, &
±r
, &
block
);

4696 i‡(
îr‹
)

4697  
îr‹
;

4698 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

4699 
	`åa˚_xfs_båì_ovîœµed_quîy_ønge
(
cur
, 
Àvñ
, 
bp
);

4700 #ifde‡
DEBUG


4701 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

4702 i‡(
îr‹
)

4703 
out
;

4705 
cur
->
bc_±rs
[
Àvñ
] = 1;

4707 
Àvñ
 < 
cur
->
bc_∆evñs
) {

4708 
block
 = 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

4711 i‡(
cur
->
bc_±rs
[
Àvñ
] > 
	`be16_to_˝u
(
block
->
bb_numªcs
)) {

4712 
p›_up
:

4713 i‡(
Àvñ
 < 
cur
->
bc_∆evñs
 - 1)

4714 
cur
->
bc_±rs
[
Àvñ
 + 1]++;

4715 
Àvñ
++;

4719 i‡(
Àvñ
 == 0) {

4721 
ª˝
 = 
	`xfs_båì_ªc_addr
(
cur
, cur->
bc_±rs
[0], 
block
);

4723 
cur
->
bc_›s
->
	`öô_high_key_‰om_ªc
(&
ªc_hkey
, 
ª˝
);

4724 
ldiff
 = 
cur
->
bc_›s
->
	`diff_two_keys
(cur, &
ªc_hkey
,

4725 
low_key
);

4727 
cur
->
bc_›s
->
	`öô_key_‰om_ªc
(&
ªc_key
, 
ª˝
);

4728 
hdiff
 = 
cur
->
bc_›s
->
	`diff_two_keys
(cur, 
high_key
,

4729 &
ªc_key
);

4736 i‡(
ldiff
 >0 && 
hdiff
 >= 0) {

4737 
îr‹
 = 
	`‚
(
cur
, 
ª˝
, 
¥iv
);

4738 i‡(
îr‹
 < 0 ||

4739 
îr‹
 =
XFS_BTREE_QUERY_RANGE_ABORT
)

4741 } i‡(
hdiff
 < 0) {

4743 
p›_up
;

4745 
cur
->
bc_±rs
[
Àvñ
]++;

4750 
lkp
 = 
	`xfs_båì_key_addr
(
cur
, cur->
bc_±rs
[
Àvñ
], 
block
);

4751 
hkp
 = 
	`xfs_båì_high_key_addr
(
cur
, cur->
bc_±rs
[
Àvñ
], 
block
);

4752 
µ
 = 
	`xfs_båì_±r_addr
(
cur
, cur->
bc_±rs
[
Àvñ
], 
block
);

4754 
ldiff
 = 
cur
->
bc_›s
->
	`diff_two_keys
(cur, 
hkp
, 
low_key
);

4755 
hdiff
 = 
cur
->
bc_›s
->
	`diff_two_keys
(cur, 
high_key
, 
lkp
);

4762 i‡(
ldiff
 >0 && 
hdiff
 >= 0) {

4763 
Àvñ
--;

4764 
îr‹
 = 
	`xfs_båì_lookup_gë_block
(
cur
, 
Àvñ
, 
µ
,

4765 &
block
);

4766 i‡(
îr‹
)

4767 
out
;

4768 
	`xfs_båì_gë_block
(
cur
, 
Àvñ
, &
bp
);

4769 
	`åa˚_xfs_båì_ovîœµed_quîy_ønge
(
cur
, 
Àvñ
, 
bp
);

4770 #ifde‡
DEBUG


4771 
îr‹
 = 
	`xfs_båì_check_block
(
cur
, 
block
, 
Àvñ
, 
bp
);

4772 i‡(
îr‹
)

4773 
out
;

4775 
cur
->
bc_±rs
[
Àvñ
] = 1;

4777 } i‡(
hdiff
 < 0) {

4779 
p›_up
;

4781 
cur
->
bc_±rs
[
Àvñ
]++;

4784 
out
:

4792 i‡(
cur
->
bc_bufs
[0] =
NULL
) {

4793 
i
 = 0; i < 
cur
->
bc_∆evñs
; i++) {

4794 i‡(
cur
->
bc_bufs
[
i
]) {

4795 
	`xfs_å™s_bªl£
(
cur
->
bc_ç
, cur->
bc_bufs
[
i
]);

4796 
cur
->
bc_bufs
[
i
] = 
NULL
;

4797 
cur
->
bc_±rs
[
i
] = 0;

4798 
cur
->
bc_ø
[
i
] = 0;

4803  
îr‹
;

4804 
	}
}

4814 
	$xfs_båì_quîy_ønge
(

4815 
xfs_båì_cur
 *
cur
,

4816 
xfs_båì_úec
 *
low_ªc
,

4817 
xfs_båì_úec
 *
high_ªc
,

4818 
xfs_båì_quîy_ønge_‚
 
‚
,

4819 *
¥iv
)

4821 
xfs_båì_ªc
 
ªc
;

4822 
xfs_båì_key
 
low_key
;

4823 
xfs_båì_key
 
high_key
;

4826 
cur
->
bc_ªc
 = *
high_ªc
;

4827 
cur
->
bc_›s
->
	`öô_ªc_‰om_cur
(cur, &
ªc
);

4828 
cur
->
bc_›s
->
	`öô_key_‰om_ªc
(&
high_key
, &
ªc
);

4830 
cur
->
bc_ªc
 = *
low_ªc
;

4831 
cur
->
bc_›s
->
	`öô_ªc_‰om_cur
(cur, &
ªc
);

4832 
cur
->
bc_›s
->
	`öô_key_‰om_ªc
(&
low_key
, &
ªc
);

4835 i‡(
cur
->
bc_›s
->
	`diff_two_keys
(cur, &
low_key
, &
high_key
) > 0)

4836  -
EINVAL
;

4838 i‡(!(
cur
->
bc_Êags
 & 
XFS_BTREE_OVERLAPPING
))

4839  
	`xfs_båì_sim∂e_quîy_ønge
(
cur
, &
low_key
,

4840 &
high_key
, 
‚
, 
¥iv
);

4841  
	`xfs_båì_ovîœµed_quîy_ønge
(
cur
, &
low_key
, &
high_key
,

4842 
‚
, 
¥iv
);

4843 
	}
}

4849 
xfs_exéí_t


4850 
	$xfs_båì_ˇlc_size
(

4851 
xfs_mou¡
 *
mp
,

4852 
uöt
 *
limôs
,

4853 
Àn
)

4855 
Àvñ
;

4856 
maxªcs
;

4857 
xfs_exéí_t
 
rvÆ
;

4859 
maxªcs
 = 
limôs
[0];

4860 
Àvñ
 = 0, 
rvÆ
 = 0; 
Àn
 > 1;Üevel++) {

4861 
Àn
 +
maxªcs
 - 1;

4862 
	`do_div
(
Àn
, 
maxªcs
);

4863 
maxªcs
 = 
limôs
[1];

4864 
rvÆ
 +
Àn
;

4866  
rvÆ
;

4867 
	}
}

4870 
	$xfs_båì_cou¡_blocks_hñ≥r
(

4871 
xfs_båì_cur
 *
cur
,

4872 
Àvñ
,

4873 *
d©a
)

4875 
xfs_exéí_t
 *
blocks
 = 
d©a
;

4876 (*
blocks
)++;

4879 
	}
}

4883 
	$xfs_båì_cou¡_blocks
(

4884 
xfs_båì_cur
 *
cur
,

4885 
xfs_exéí_t
 *
blocks
)

4887 *
blocks
 = 0;

4888  
	`xfs_båì_visô_blocks
(
cur
, 
xfs_båì_cou¡_blocks_hñ≥r
,

4889 
blocks
);

4890 
	}
}

	@libxfs/xfs_btree.h

18 #i‚de‡
__XFS_BTREE_H__


19 
	#__XFS_BTREE_H__


	)

21 
	gxfs_buf
;

22 
	gxfs_de„r_›s
;

23 
	gxfs_öode
;

24 
	gxfs_mou¡
;

25 
	gxfs_å™s
;

27 
kmem_z⁄e_t
 *
xfs_båì_cur_z⁄e
;

35 
	uxfs_båì_±r
 {

36 
__be32
 
	ms
;

37 
__be64
 
	ml
;

45 
	uxfs_båì_key
 {

46 
xfs_bmbt_key
 
	mbmbt
;

47 
xfs_bmdr_key_t
 
	mbmbr
;

48 
xfs_Æloc_key_t
 
	mÆloc
;

49 
xfs_öobt_key
 
	möobt
;

50 
xfs_rm≠_key
 
	mrm≠
;

51 
xfs_rm≠_key
 
	m__rm≠_bigkey
[2];

52 
xfs_ªfcou¡_key
 
	mªfc
;

55 
	uxfs_båì_ªc
 {

56 
xfs_bmbt_ªc
 
	mbmbt
;

57 
xfs_bmdr_ªc_t
 
	mbmbr
;

58 
xfs_Æloc_ªc
 
	mÆloc
;

59 
xfs_öobt_ªc
 
	möobt
;

60 
xfs_rm≠_ªc
 
	mrm≠
;

61 
xfs_ªfcou¡_ªc
 
	mªfc
;

67 
	#XFS_LOOKUP_EQ
 ((
xfs_lookup_t
)
XFS_LOOKUP_EQi
)

	)

68 
	#XFS_LOOKUP_LE
 ((
xfs_lookup_t
)
XFS_LOOKUP_LEi
)

	)

69 
	#XFS_LOOKUP_GE
 ((
xfs_lookup_t
)
XFS_LOOKUP_GEi
)

	)

71 
	#XFS_BTNUM_BNO
 ((
xfs_bäum_t
)
XFS_BTNUM_BNOi
)

	)

72 
	#XFS_BTNUM_CNT
 ((
xfs_bäum_t
)
XFS_BTNUM_CNTi
)

	)

73 
	#XFS_BTNUM_BMAP
 ((
xfs_bäum_t
)
XFS_BTNUM_BMAPi
)

	)

74 
	#XFS_BTNUM_INO
 ((
xfs_bäum_t
)
XFS_BTNUM_INOi
)

	)

75 
	#XFS_BTNUM_FINO
 ((
xfs_bäum_t
)
XFS_BTNUM_FINOi
)

	)

76 
	#XFS_BTNUM_RMAP
 ((
xfs_bäum_t
)
XFS_BTNUM_RMAPi
)

	)

77 
	#XFS_BTNUM_REFC
 ((
xfs_bäum_t
)
XFS_BTNUM_REFCi
)

	)

79 
__uöt32_t
 
xfs_båì_magic
(
¸c
, 
xfs_bäum_t
 
bäum
);

84 
	#XFS_BB_MAGIC
 (1 << 0)

	)

85 
	#XFS_BB_LEVEL
 (1 << 1)

	)

86 
	#XFS_BB_NUMRECS
 (1 << 2)

	)

87 
	#XFS_BB_LEFTSIB
 (1 << 3)

	)

88 
	#XFS_BB_RIGHTSIB
 (1 << 4)

	)

89 
	#XFS_BB_BLKNO
 (1 << 5)

	)

90 
	#XFS_BB_LSN
 (1 << 6)

	)

91 
	#XFS_BB_UUID
 (1 << 7)

	)

92 
	#XFS_BB_OWNER
 (1 << 8)

	)

93 
	#XFS_BB_NUM_BITS
 5

	)

94 
	#XFS_BB_ALL_BITS
 ((1 << 
XFS_BB_NUM_BITS
Ë- 1)

	)

95 
	#XFS_BB_NUM_BITS_CRC
 9

	)

96 
	#XFS_BB_ALL_BITS_CRC
 ((1 << 
XFS_BB_NUM_BITS_CRC
Ë- 1)

	)

101 
	#XFS_BTREE_STATS_INC
(
cur
, 
°©
) \

102 
	`XFS_STATS_INC_OFF
((
cur
)->
bc_mp
, (cur)->
bc_°©off
 + 
__XBTS_
 ## 
°©
)

	)

103 
	#XFS_BTREE_STATS_ADD
(
cur
, 
°©
, 
vÆ
) \

104 
	`XFS_STATS_ADD_OFF
((
cur
)->
bc_mp
, (cur)->
bc_°©off
 + 
__XBTS_
 ## 
°©
, 
vÆ
)

	)

106 
	#XFS_BTREE_MAXLEVELS
 9

	)

108 
	sxfs_båì_›s
 {

110 
size_t
 
	mkey_Àn
;

111 
size_t
 
	mªc_Àn
;

114 
	mxfs_båì_cur
 *(*
	mdup_curs‹
)(xfs_btree_cur *);

115 (*
	mupd©e_curs‹
)(
xfs_båì_cur
 *
	m§c
,

116 
xfs_båì_cur
 *
	md°
);

119 (*
	m£t_roŸ
)(
xfs_båì_cur
 *
	mcur
,

120 
xfs_båì_±r
 *
	m≈å
, 
	mÀvñ_ch™ge
);

123 (*
	mÆloc_block
)(
xfs_båì_cur
 *
	mcur
,

124 
xfs_båì_±r
 *
	m°¨t_bno
,

125 
xfs_båì_±r
 *
	m√w_bno
,

126 *
	m°©
);

127 (*
	m‰ì_block
)(
xfs_båì_cur
 *
	mcur
, 
xfs_buf
 *
	mbp
);

130 (*
	mupd©e_œ°ªc
)(
xfs_båì_cur
 *
	mcur
,

131 
xfs_båì_block
 *
	mblock
,

132 
xfs_båì_ªc
 *
	mªc
,

133 
	m±r
, 
	mªas⁄
);

136 (*
	mgë_möªcs
)(
xfs_båì_cur
 *
	mcur
, 
	mÀvñ
);

137 (*
	mgë_maxªcs
)(
xfs_båì_cur
 *
	mcur
, 
	mÀvñ
);

140 (*
	mgë_dmaxªcs
)(
xfs_båì_cur
 *
	mcur
, 
	mÀvñ
);

143 (*
	möô_key_‰om_ªc
)(
xfs_båì_key
 *
	mkey
,

144 
xfs_båì_ªc
 *
	mªc
);

145 (*
	möô_ªc_‰om_cur
)(
xfs_båì_cur
 *
	mcur
,

146 
xfs_båì_ªc
 *
	mªc
);

147 (*
	möô_±r_‰om_cur
)(
xfs_båì_cur
 *
	mcur
,

148 
xfs_båì_±r
 *
	m±r
);

149 (*
	möô_high_key_‰om_ªc
)(
xfs_båì_key
 *
	mkey
,

150 
xfs_båì_ªc
 *
	mªc
);

153 
__öt64_t
 (*
key_diff
)(
xfs_båì_cur
 *
	mcur
,

154 
xfs_båì_key
 *
	mkey
);

160 
__öt64_t
 (*
diff_two_keys
)(
xfs_båì_cur
 *
	mcur
,

161 
xfs_båì_key
 *
	mkey1
,

162 
xfs_båì_key
 *
	mkey2
);

164 c⁄° 
xfs_buf_›s
 *
	mbuf_›s
;

166 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

168 (*
	mkeys_ö‹dî
)(
xfs_båì_cur
 *
	mcur
,

169 
xfs_båì_key
 *
	mk1
,

170 
xfs_båì_key
 *
	mk2
);

173 (*
	mªcs_ö‹dî
)(
xfs_båì_cur
 *
	mcur
,

174 
xfs_båì_ªc
 *
	mr1
,

175 
xfs_båì_ªc
 *
	mr2
);

182 
	#LASTREC_UPDATE
 0

	)

183 
	#LASTREC_INSREC
 1

	)

184 
	#LASTREC_DELREC
 2

	)

187 
	uxfs_båì_úec
 {

188 
xfs_Æloc_ªc_öc‹e
 
	ma
;

189 
xfs_bmbt_úec
 
	mb
;

190 
xfs_öobt_ªc_öc‹e
 
	mi
;

191 
xfs_rm≠_úec
 
	mr
;

192 
xfs_ªfcou¡_úec
 
	mrc
;

196 
	uxfs_båì_cur_¥iv©e
 {

198 
	mƒ_›s
;

199 
	msh≠e_ch™ges
;

200 } 
	mªfc
;

207 
	sxfs_båì_cur


209 
xfs_å™s
 *
	mbc_ç
;

210 
xfs_mou¡
 *
	mbc_mp
;

211 c⁄° 
xfs_båì_›s
 *
	mbc_›s
;

212 
uöt
 
	mbc_Êags
;

213 
xfs_båì_úec
 
	mbc_ªc
;

214 
xfs_buf
 *
	mbc_bufs
[
XFS_BTREE_MAXLEVELS
];

215 
	mbc_±rs
[
XFS_BTREE_MAXLEVELS
];

216 
__uöt8_t
 
	mbc_ø
[
XFS_BTREE_MAXLEVELS
];

217 
	#XFS_BTCUR_LEFTRA
 1

	)

218 
	#XFS_BTCUR_RIGHTRA
 2

	)

219 
__uöt8_t
 
	mbc_∆evñs
;

220 
__uöt8_t
 
	mbc_blocklog
;

221 
xfs_bäum_t
 
	mbc_bäum
;

222 
	mbc_°©off
;

225 
xfs_buf
 *
	magbp
;

226 
xfs_de„r_›s
 *
	mdf›s
;

227 
xfs_agnumbî_t
 
	magno
;

228 
xfs_båì_cur_¥iv©e
 
	m¥iv
;

229 } 
	ma
;

231 
xfs_öode
 *
	mù
;

232 
xfs_de„r_›s
 *
	mdf›s
;

233 
xfs_fsblock_t
 
	mfú°block
;

234 
	mÆloˇãd
;

235 
	mf‹ksize
;

236 
	mwhichf‹k
;

237 
	mÊags
;

238 
	#XFS_BTCUR_BPRV_WASDEL
 1

	)

239 } 
	mb
;

240 } 
	mbc_¥iv©e
;

241 } 
	txfs_båì_cur_t
;

244 
	#XFS_BTREE_LONG_PTRS
 (1<<0Ë

	)

245 
	#XFS_BTREE_ROOT_IN_INODE
 (1<<1Ë

	)

246 
	#XFS_BTREE_LASTREC_UPDATE
 (1<<2Ë

	)

247 
	#XFS_BTREE_CRC_BLOCKS
 (1<<3Ë

	)

248 
	#XFS_BTREE_OVERLAPPING
 (1<<4Ë

	)

251 
	#XFS_BTREE_NOERROR
 0

	)

252 
	#XFS_BTREE_ERROR
 1

	)

257 
	#XFS_BUF_TO_BLOCK
(
bp
Ë((
xfs_båì_block
 *)((bp)->
b_addr
))

	)

264 
xfs_båì_check_block
(

265 
xfs_båì_cur
 *
cur
,

266 
xfs_båì_block
 *
block
,

267 
Àvñ
,

268 
xfs_buf
 *
bp
);

274 
xfs_båì_check_Õå
(

275 
xfs_båì_cur
 *
cur
,

276 
xfs_fsblock_t
 
±r
,

277 
Àvñ
);

283 
xfs_båì_dñ_curs‹
(

284 
xfs_båì_cur_t
 *
cur
,

285 
îr‹
);

292 
xfs_båì_dup_curs‹
(

293 
xfs_båì_cur_t
 *
cur
,

294 
xfs_båì_cur_t
 **
ncur
);

300 
xfs_buf
 *

301 
xfs_båì_gë_buÊ
(

302 
xfs_mou¡
 *
mp
,

303 
xfs_å™s
 *
ç
,

304 
xfs_fsblock_t
 
fsbno
,

305 
uöt
 
lock
);

311 
xfs_buf
 *

312 
xfs_båì_gë_bufs
(

313 
xfs_mou¡
 *
mp
,

314 
xfs_å™s
 *
ç
,

315 
xfs_agnumbî_t
 
agno
,

316 
xfs_agblock_t
 
agbno
,

317 
uöt
 
lock
);

323 
xfs_båì_i¶a°block
(

324 
xfs_båì_cur_t
 *
cur
,

325 
Àvñ
);

332 
xfs_båì_off£ts
(

333 
__öt64_t
 
fõlds
,

334 c⁄° *
off£ts
,

335 
nbôs
,

336 *
fú°
,

337 *
œ°
);

344 
xfs_båì_ªad_buÊ
(

345 
xfs_mou¡
 *
mp
,

346 
xfs_å™s
 *
ç
,

347 
xfs_fsblock_t
 
fsbno
,

348 
uöt
 
lock
,

349 
xfs_buf
 **
bµ
,

350 
ªfvÆ
,

351 c⁄° 
xfs_buf_›s
 *
›s
);

358 
xfs_båì_ªada_buÊ
(

359 
xfs_mou¡
 *
mp
,

360 
xfs_fsblock_t
 
fsbno
,

361 
xfs_exéí_t
 
cou¡
,

362 c⁄° 
xfs_buf_›s
 *
›s
);

369 
xfs_båì_ªada_bufs
(

370 
xfs_mou¡
 *
mp
,

371 
xfs_agnumbî_t
 
agno
,

372 
xfs_agblock_t
 
agbno
,

373 
xfs_exéí_t
 
cou¡
,

374 c⁄° 
xfs_buf_›s
 *
›s
);

380 
xfs_båì_öô_block
(

381 
xfs_mou¡
 *
mp
,

382 
xfs_buf
 *
bp
,

383 
xfs_bäum_t
 
bäum
,

384 
__u16
 
Àvñ
,

385 
__u16
 
numªcs
,

386 
__u64
 
ow√r
,

387 
Êags
);

390 
xfs_båì_öô_block_öt
(

391 
xfs_mou¡
 *
mp
,

392 
xfs_båì_block
 *
buf
,

393 
xfs_daddr_t
 
blkno
,

394 
xfs_bäum_t
 
bäum
,

395 
__u16
 
Àvñ
,

396 
__u16
 
numªcs
,

397 
__u64
 
ow√r
,

398 
Êags
);

403 
xfs_båì_ö¸emít
(
xfs_båì_cur
 *, , *);

404 
xfs_båì_de¸emít
(
xfs_båì_cur
 *, , *);

405 
xfs_båì_lookup
(
xfs_båì_cur
 *, 
xfs_lookup_t
, *);

406 
xfs_båì_upd©e
(
xfs_båì_cur
 *, 
xfs_båì_ªc
 *);

407 
xfs_båì_√w_úoŸ
(
xfs_båì_cur
 *, *, *);

408 
xfs_båì_ö£π
(
xfs_båì_cur
 *, *);

409 
xfs_båì_dñëe
(
xfs_båì_cur
 *, *);

410 
xfs_båì_gë_ªc
(
xfs_båì_cur
 *, 
xfs_båì_ªc
 **, *);

411 
xfs_båì_ch™ge_ow√r
(
xfs_båì_cur
 *
cur
, 
__uöt64_t
 
√w_ow√r
,

412 
li°_hód
 *
buf„r_li°
);

417 
xfs_båì_lblock_ˇlc_¸c
(
xfs_buf
 *);

418 
boﬁ
 
xfs_båì_lblock_vîify_¸c
(
xfs_buf
 *);

419 
xfs_båì_sblock_ˇlc_¸c
(
xfs_buf
 *);

420 
boﬁ
 
xfs_båì_sblock_vîify_¸c
(
xfs_buf
 *);

425 
xfs_båì_log_block
(
xfs_båì_cur
 *, 
xfs_buf
 *, );

426 
xfs_båì_log_ªcs
(
xfs_båì_cur
 *, 
xfs_buf
 *, , );

431 
ölöe
 
	$xfs_båì_gë_numªcs
(
xfs_båì_block
 *
block
)

433  
	`be16_to_˝u
(
block
->
bb_numªcs
);

434 
	}
}

436 
ölöe
 
	$xfs_båì_£t_numªcs
(
xfs_båì_block
 *
block
,

437 
__uöt16_t
 
numªcs
)

439 
block
->
bb_numªcs
 = 
	`˝u_to_be16
(
numªcs
);

440 
	}
}

442 
ölöe
 
	$xfs_båì_gë_Àvñ
(
xfs_båì_block
 *
block
)

444  
	`be16_to_˝u
(
block
->
bb_Àvñ
);

445 
	}
}

451 
	#XFS_EXTLEN_MIN
(
a
,
b
Ë
	`mö_t
(
xfs_exéí_t
, (a), (b))

	)

452 
	#XFS_EXTLEN_MAX
(
a
,
b
Ë
	`max_t
(
xfs_exéí_t
, (a), (b))

	)

453 
	#XFS_AGBLOCK_MIN
(
a
,
b
Ë
	`mö_t
(
xfs_agblock_t
, (a), (b))

	)

454 
	#XFS_AGBLOCK_MAX
(
a
,
b
Ë
	`max_t
(
xfs_agblock_t
, (a), (b))

	)

455 
	#XFS_FILEOFF_MIN
(
a
,
b
Ë
	`mö_t
(
xfs_fûeoff_t
, (a), (b))

	)

456 
	#XFS_FILEOFF_MAX
(
a
,
b
Ë
	`max_t
(
xfs_fûeoff_t
, (a), (b))

	)

457 
	#XFS_FILBLKS_MIN
(
a
,
b
Ë
	`mö_t
(
xfs_fûblks_t
, (a), (b))

	)

458 
	#XFS_FILBLKS_MAX
(
a
,
b
Ë
	`max_t
(
xfs_fûblks_t
, (a), (b))

	)

460 
	#XFS_FSB_SANITY_CHECK
(
mp
,
fsb
) \

461 (
fsb
 && 
	`XFS_FSB_TO_AGNO
(
mp
, fsbË< mp->
m_sb
.
sb_agcou¡
 && \

462 
	`XFS_FSB_TO_AGBNO
(
mp
, 
fsb
Ë< mp->
m_sb
.
sb_agblocks
)

	)

474 
	#XFS_BTREE_TRACE_ARGBI
(
c
, 
b
, 
i
)

	)

475 
	#XFS_BTREE_TRACE_ARGBII
(
c
, 
b
, 
i
, 
j
)

	)

476 
	#XFS_BTREE_TRACE_ARGI
(
c
, 
i
)

	)

477 
	#XFS_BTREE_TRACE_ARGIPK
(
c
, 
i
, 
p
, 
s
)

	)

478 
	#XFS_BTREE_TRACE_ARGIPR
(
c
, 
i
, 
p
, 
r
)

	)

479 
	#XFS_BTREE_TRACE_ARGIK
(
c
, 
i
, 
k
)

	)

480 
	#XFS_BTREE_TRACE_ARGR
(
c
, 
r
)

	)

481 
	#XFS_BTREE_TRACE_CURSOR
(
c
, 
t
)

	)

483 
boﬁ
 
xfs_båì_sblock_v5hdr_vîify
(
xfs_buf
 *
bp
);

484 
boﬁ
 
xfs_båì_sblock_vîify
(
xfs_buf
 *
bp
, 
max_ªcs
);

485 
uöt
 
xfs_båì_compuã_maxÀvñs
(
xfs_mou¡
 *
mp
, uöà*
limôs
,

486 
Àn
);

487 
xfs_exéí_t
 
xfs_båì_ˇlc_size
(
xfs_mou¡
 *
mp
, 
uöt
 *
limôs
,

488 
Àn
);

491 
	#XFS_BTREE_QUERY_RANGE_CONTINUE
 0

	)

492 
	#XFS_BTREE_QUERY_RANGE_ABORT
 1

	)

493 (*
	txfs_båì_quîy_ønge_‚
)(
	txfs_båì_cur
 *
	tcur
,

494 
	txfs_båì_ªc
 *
	tªc
, *
	t¥iv
);

496 
	`xfs_båì_quîy_ønge
(
xfs_båì_cur
 *
cur
,

497 
xfs_båì_úec
 *
low_ªc
, xfs_båì_úe¯*
high_ªc
,

498 
xfs_båì_quîy_ønge_‚
 
‚
, *
¥iv
);

500 (*
	txfs_båì_visô_blocks_‚
)(
	txfs_båì_cur
 *
	tcur
, 
	tÀvñ
,

501 *
	td©a
);

502 
	`xfs_båì_visô_blocks
(
xfs_båì_cur
 *
cur
,

503 
xfs_båì_visô_blocks_‚
 
‚
, *
d©a
);

505 
	`xfs_båì_cou¡_blocks
(
xfs_båì_cur
 *
cur
, 
xfs_exéí_t
 *
blocks
);

	@libxfs/xfs_cksum.h

1 #i‚de‡
_XFS_CKSUM_H


2 
	#_XFS_CKSUM_H
 1

	)

4 
	#XFS_CRC_SEED
 (~(
__uöt32_t
)0)

	)

12 
ölöe
 
__uöt32_t


13 
	$xfs_°¨t_cksum_ß„
(*
buf„r
, 
size_t
 
Àngth
, 
cksum_off£t
)

15 
__uöt32_t
 
zîo
 = 0;

16 
__uöt32_t
 
¸c
;

19 
¸c
 = 
	`¸c32c
(
XFS_CRC_SEED
, 
buf„r
, 
cksum_off£t
);

22 
¸c
 = 
	`¸c32c
(¸c, &
zîo
, (
__u32
));

25  
	`¸c32c
(
¸c
, &
buf„r
[
cksum_off£t
 + (
__be32
)],

26 
Àngth
 - (
cksum_off£t
 + (
__be32
)));

27 
	}
}

33 
ölöe
 
__uöt32_t


34 
	$xfs_°¨t_cksum_upd©e
(*
buf„r
, 
size_t
 
Àngth
, 
cksum_off£t
)

37 *(
__À32
 *)(
buf„r
 + 
cksum_off£t
) = 0;

40  
	`¸c32c
(
XFS_CRC_SEED
, 
buf„r
, 
Àngth
);

41 
	}
}

50 
ölöe
 
__À32


51 
	$xfs_íd_cksum
(
__uöt32_t
 
¸c
)

53  ~
	`˝u_to_À32
(
¸c
);

54 
	}
}

62 
ölöe
 

63 
	$xfs_upd©e_cksum
(*
buf„r
, 
size_t
 
Àngth
, 
cksum_off£t
)

65 
__uöt32_t
 
¸c
 = 
	`xfs_°¨t_cksum_upd©e
(
buf„r
, 
Àngth
, 
cksum_off£t
);

67 *(
__À32
 *)(
buf„r
 + 
cksum_off£t
Ë
	`xfs_íd_cksum
(
¸c
);

68 
	}
}

73 
ölöe
 

74 
	$xfs_vîify_cksum
(*
buf„r
, 
size_t
 
Àngth
, 
cksum_off£t
)

76 
__uöt32_t
 
¸c
 = 
	`xfs_°¨t_cksum_ß„
(
buf„r
, 
Àngth
, 
cksum_off£t
);

78  *(
__À32
 *)(
buf„r
 + 
cksum_off£t
Ë=
	`xfs_íd_cksum
(
¸c
);

79 
	}
}

	@libxfs/xfs_da_btree.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_sh¨ed.h
"

22 
	~"xfs_f‹m©.h
"

23 
	~"xfs_log_f‹m©.h
"

24 
	~"xfs_å™s_ªsv.h
"

25 
	~"xfs_bô.h
"

26 
	~"xfs_mou¡.h
"

27 
	~"xfs_da_f‹m©.h
"

28 
	~"xfs_da_båì.h
"

29 
	~"xfs_dú2.h
"

30 
	~"xfs_dú2_¥iv.h
"

31 
	~"xfs_öode.h
"

32 
	~"xfs_å™s.h
"

33 
	~"xfs_Æloc.h
"

34 
	~"xfs_bm≠.h
"

35 
	~"xfs_©å_Àaf.h
"

36 
	~"xfs_åa˚.h
"

37 
	~"xfs_cksum.h
"

52 
STATIC
 
xfs_da3_roŸ_•lô
(
xfs_da_°©e_t
 *
°©e
,

53 
xfs_da_°©e_blk_t
 *
exi°ög_roŸ
,

54 
xfs_da_°©e_blk_t
 *
√w_chûd
);

55 
STATIC
 
xfs_da3_node_•lô
(
xfs_da_°©e_t
 *
°©e
,

56 
xfs_da_°©e_blk_t
 *
exi°ög_blk
,

57 
xfs_da_°©e_blk_t
 *
•lô_blk
,

58 
xfs_da_°©e_blk_t
 *
blk_to_add
,

59 
åìÀvñ
,

60 *
ªsu…
);

61 
STATIC
 
xfs_da3_node_ªbÆ™˚
(
xfs_da_°©e_t
 *
°©e
,

62 
xfs_da_°©e_blk_t
 *
node_blk_1
,

63 
xfs_da_°©e_blk_t
 *
node_blk_2
);

64 
STATIC
 
xfs_da3_node_add
(
xfs_da_°©e_t
 *
°©e
,

65 
xfs_da_°©e_blk_t
 *
ﬁd_node_blk
,

66 
xfs_da_°©e_blk_t
 *
√w_node_blk
);

71 
STATIC
 
xfs_da3_roŸ_joö
(
xfs_da_°©e_t
 *
°©e
,

72 
xfs_da_°©e_blk_t
 *
roŸ_blk
);

73 
STATIC
 
xfs_da3_node_toosmÆl
(
xfs_da_°©e_t
 *
°©e
, *
ªtvÆ
);

74 
STATIC
 
xfs_da3_node_ªmove
(
xfs_da_°©e_t
 *
°©e
,

75 
xfs_da_°©e_blk_t
 *
dr›_blk
);

76 
STATIC
 
xfs_da3_node_unbÆ™˚
(
xfs_da_°©e_t
 *
°©e
,

77 
xfs_da_°©e_blk_t
 *
§c_node_blk
,

78 
xfs_da_°©e_blk_t
 *
d°_node_blk
);

83 
STATIC
 
xfs_da3_blk_u∆ök
(
xfs_da_°©e_t
 *
°©e
,

84 
xfs_da_°©e_blk_t
 *
dr›_blk
,

85 
xfs_da_°©e_blk_t
 *
ßve_blk
);

88 
kmem_z⁄e_t
 *
	gxfs_da_°©e_z⁄e
;

94 
xfs_da_°©e_t
 *

95 
	$xfs_da_°©e_Æloc
()

97  
	`kmem_z⁄e_zÆloc
(
xfs_da_°©e_z⁄e
, 
KM_NOFS
);

98 
	}
}

103 
STATIC
 

104 
	$xfs_da_°©e_kûl_Æç©h
(
xfs_da_°©e_t
 *
°©e
)

106 
i
;

108 
i
 = 0; i < 
°©e
->
Æç©h
.
a˘ive
; i++)

109 
°©e
->
Æç©h
.
blk
[
i
].
bp
 = 
NULL
;

110 
°©e
->
Æç©h
.
a˘ive
 = 0;

111 
	}
}

117 
	$xfs_da_°©e_‰ì
(
xfs_da_°©e_t
 *
°©e
)

119 
	`xfs_da_°©e_kûl_Æç©h
(
°©e
);

120 #ifde‡
DEBUG


121 
	`mem£t
((*)
°©e
, 0, (*state));

123 
	`kmem_z⁄e_‰ì
(
xfs_da_°©e_z⁄e
, 
°©e
);

124 
	}
}

126 
boﬁ


127 
	$xfs_da3_node_vîify
(

128 
xfs_buf
 *
bp
)

130 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

131 
xfs_da_öäode
 *
hdr
 = 
bp
->
b_addr
;

132 
xfs_da3_i˙ode_hdr
 
ichdr
;

133 c⁄° 
xfs_dú_›s
 *
›s
;

135 
›s
 = 
	`xfs_dú_gë_›s
(
mp
, 
NULL
);

137 
›s
->
	`node_hdr_‰om_disk
(&
ichdr
, 
hdr
);

139 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

140 
xfs_da3_node_hdr
 *
hdr3
 = 
bp
->
b_addr
;

142 i‡(
ichdr
.
magic
 !
XFS_DA3_NODE_MAGIC
)

143  
Ál£
;

145 i‡(!
	`uuid_equÆ
(&
hdr3
->
öfo
.
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

146  
Ál£
;

147 i‡(
	`be64_to_˝u
(
hdr3
->
öfo
.
blkno
Ë!
bp
->
b_bn
)

148  
Ál£
;

149 i‡(!
	`xfs_log_check_l¢
(
mp
, 
	`be64_to_˝u
(
hdr3
->
öfo
.
l¢
)))

150  
Ál£
;

152 i‡(
ichdr
.
magic
 !
XFS_DA_NODE_MAGIC
)

153  
Ál£
;

155 i‡(
ichdr
.
Àvñ
 == 0)

156  
Ál£
;

157 i‡(
ichdr
.
Àvñ
 > 
XFS_DA_NODE_MAXDEPTH
)

158  
Ál£
;

159 i‡(
ichdr
.
cou¡
 == 0)

160  
Ál£
;

166 i‡(
ichdr
.
cou¡
 > 
mp
->
m_dú_geo
->
node_íts
 &&

167 
ichdr
.
cou¡
 > 
mp
->
m_©å_geo
->
node_íts
)

168  
Ál£
;

172  
åue
;

173 
	}
}

176 
	$xfs_da3_node_wrôe_vîify
(

177 
xfs_buf
 *
bp
)

179 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

180 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

181 
xfs_da3_node_hdr
 *
hdr3
 = 
bp
->
b_addr
;

183 i‡(!
	`xfs_da3_node_vîify
(
bp
)) {

184 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

185 
	`xfs_vîifõr_îr‹
(
bp
);

189 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

192 i‡(
bù
)

193 
hdr3
->
öfo
.
l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

195 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_DA3_NODE_CRC_OFF
);

196 
	}
}

205 
	$xfs_da3_node_ªad_vîify
(

206 
xfs_buf
 *
bp
)

208 
xfs_da_blköfo
 *
öfo
 = 
bp
->
b_addr
;

210 
	`be16_to_˝u
(
öfo
->
magic
)) {

211 
XFS_DA3_NODE_MAGIC
:

212 i‡(!
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_DA3_NODE_CRC_OFF
)) {

213 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

217 
XFS_DA_NODE_MAGIC
:

218 i‡(!
	`xfs_da3_node_vîify
(
bp
)) {

219 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

223 
XFS_ATTR_LEAF_MAGIC
:

224 
XFS_ATTR3_LEAF_MAGIC
:

225 
bp
->
b_›s
 = &
xfs_©å3_Àaf_buf_›s
;

226 
bp
->
b_›s
->
	`vîify_ªad
(bp);

228 
XFS_DIR2_LEAFN_MAGIC
:

229 
XFS_DIR3_LEAFN_MAGIC
:

230 
bp
->
b_›s
 = &
xfs_dú3_Àa‚_buf_›s
;

231 
bp
->
b_›s
->
	`vîify_ªad
(bp);

234 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

239 
	`xfs_vîifõr_îr‹
(
bp
);

240 
	}
}

242 c⁄° 
xfs_buf_›s
 
	gxfs_da3_node_buf_›s
 = {

243 .
«me
 = "xfs_da3_node",

244 .
	gvîify_ªad
 = 
xfs_da3_node_ªad_vîify
,

245 .
	gvîify_wrôe
 = 
xfs_da3_node_wrôe_vîify
,

249 
	$xfs_da3_node_ªad
(

250 
xfs_å™s
 *
ç
,

251 
xfs_öode
 *
dp
,

252 
xfs_dablk_t
 
bno
,

253 
xfs_daddr_t
 
m≠≥dbno
,

254 
xfs_buf
 **
bµ
,

255 
which_f‹k
)

257 
îr
;

259 
îr
 = 
	`xfs_da_ªad_buf
(
ç
, 
dp
, 
bno
, 
m≠≥dbno
, 
bµ
,

260 
which_f‹k
, &
xfs_da3_node_buf_›s
);

261 i‡(!
îr
 && 
ç
) {

262 
xfs_da_blköfo
 *
öfo
 = (*
bµ
)->
b_addr
;

263 
ty≥
;

265 
	`be16_to_˝u
(
öfo
->
magic
)) {

266 
XFS_DA_NODE_MAGIC
:

267 
XFS_DA3_NODE_MAGIC
:

268 
ty≥
 = 
XFS_BLFT_DA_NODE_BUF
;

270 
XFS_ATTR_LEAF_MAGIC
:

271 
XFS_ATTR3_LEAF_MAGIC
:

272 
ty≥
 = 
XFS_BLFT_ATTR_LEAF_BUF
;

274 
XFS_DIR2_LEAFN_MAGIC
:

275 
XFS_DIR3_LEAFN_MAGIC
:

276 
ty≥
 = 
XFS_BLFT_DIR_LEAFN_BUF
;

279 
ty≥
 = 0;

280 
	`ASSERT
(0);

283 
	`xfs_å™s_buf_£t_ty≥
(
ç
, *
bµ
, 
ty≥
);

285  
îr
;

286 
	}
}

296 
	$xfs_da3_node_¸óã
(

297 
xfs_da_¨gs
 *
¨gs
,

298 
xfs_dablk_t
 
blkno
,

299 
Àvñ
,

300 
xfs_buf
 **
bµ
,

301 
whichf‹k
)

303 
xfs_da_öäode
 *
node
;

304 
xfs_å™s
 *
ç
 = 
¨gs
->
å™s
;

305 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

306 
xfs_da3_i˙ode_hdr
 
ichdr
 = {0};

307 
xfs_buf
 *
bp
;

308 
îr‹
;

309 
xfs_öode
 *
dp
 = 
¨gs
->dp;

311 
	`åa˚_xfs_da_node_¸óã
(
¨gs
);

312 
	`ASSERT
(
Àvñ
 <
XFS_DA_NODE_MAXDEPTH
);

314 
îr‹
 = 
	`xfs_da_gë_buf
(
ç
, 
dp
, 
blkno
, -1, &
bp
, 
whichf‹k
);

315 i‡(
îr‹
)

316  
îr‹
;

317 
bp
->
b_›s
 = &
xfs_da3_node_buf_›s
;

318 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_DA_NODE_BUF
);

319 
node
 = 
bp
->
b_addr
;

321 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

322 
xfs_da3_node_hdr
 *
hdr3
 = 
bp
->
b_addr
;

324 
	`mem£t
(
hdr3
, 0, (
xfs_da3_node_hdr
));

325 
ichdr
.
magic
 = 
XFS_DA3_NODE_MAGIC
;

326 
hdr3
->
öfo
.
blkno
 = 
	`˝u_to_be64
(
bp
->
b_bn
);

327 
hdr3
->
öfo
.
ow√r
 = 
	`˝u_to_be64
(
¨gs
->
dp
->
i_öo
);

328 
	`uuid_c›y
(&
hdr3
->
öfo
.
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

330 
ichdr
.
magic
 = 
XFS_DA_NODE_MAGIC
;

332 
ichdr
.
Àvñ
 =Üevel;

334 
dp
->
d_›s
->
	`node_hdr_to_disk
(
node
, &
ichdr
);

335 
	`xfs_å™s_log_buf
(
ç
, 
bp
,

336 
	`XFS_DA_LOGRANGE
(
node
, &node->
hdr
, 
dp
->
d_›s
->
node_hdr_size
));

338 *
bµ
 = 
bp
;

340 
	}
}

347 
	$xfs_da3_•lô
(

348 
xfs_da_°©e
 *
°©e
)

350 
xfs_da_°©e_blk
 *
ﬁdblk
;

351 
xfs_da_°©e_blk
 *
√wblk
;

352 
xfs_da_°©e_blk
 *
addblk
;

353 
xfs_da_öäode
 *
node
;

354 
max
;

355 
a˘i⁄
 = 0;

356 
îr‹
;

357 
i
;

359 
	`åa˚_xfs_da_•lô
(
°©e
->
¨gs
);

367 
max
 = 
°©e
->
∑th
.
a˘ive
 - 1;

368 
	`ASSERT
((
max
 >0Ë&& (max < 
XFS_DA_NODE_MAXDEPTH
));

369 
	`ASSERT
(
°©e
->
∑th
.
blk
[
max
].
magic
 =
XFS_ATTR_LEAF_MAGIC
 ||

370 
°©e
->
∑th
.
blk
[
max
].
magic
 =
XFS_DIR2_LEAFN_MAGIC
);

372 
addblk
 = &
°©e
->
∑th
.
blk
[
max
];

373 
i
 = 
max
; (ò>0Ë&& 
addblk
; 
°©e
->
∑th
.
a˘ive
--, i--) {

374 
ﬁdblk
 = &
°©e
->
∑th
.
blk
[
i
];

375 
√wblk
 = &
°©e
->
Æç©h
.
blk
[
i
];

383 
ﬁdblk
->
magic
) {

384 
XFS_ATTR_LEAF_MAGIC
:

385 
îr‹
 = 
	`xfs_©å3_Àaf_•lô
(
°©e
, 
ﬁdblk
, 
√wblk
);

386 i‡((
îr‹
 !0Ë&& (îr‹ !-
ENOSPC
)) {

387  
îr‹
;

389 i‡(!
îr‹
) {

390 
addblk
 = 
√wblk
;

398 
°©e
->
exåavÆid
 = 1;

399 i‡(
°©e
->
öÀaf
) {

400 
°©e
->
exåØ·î
 = 0;

401 
	`åa˚_xfs_©å_Àaf_•lô_bef‹e
(
°©e
->
¨gs
);

402 
îr‹
 = 
	`xfs_©å3_Àaf_•lô
(
°©e
, 
ﬁdblk
,

403 &
°©e
->
exåablk
);

405 
°©e
->
exåØ·î
 = 1;

406 
	`åa˚_xfs_©å_Àaf_•lô_a·î
(
°©e
->
¨gs
);

407 
îr‹
 = 
	`xfs_©å3_Àaf_•lô
(
°©e
, 
√wblk
,

408 &
°©e
->
exåablk
);

410 i‡(
îr‹
)

411  
îr‹
;

412 
addblk
 = 
√wblk
;

414 
XFS_DIR2_LEAFN_MAGIC
:

415 
îr‹
 = 
	`xfs_dú2_Àa‚_•lô
(
°©e
, 
ﬁdblk
, 
√wblk
);

416 i‡(
îr‹
)

417  
îr‹
;

418 
addblk
 = 
√wblk
;

420 
XFS_DA_NODE_MAGIC
:

421 
îr‹
 = 
	`xfs_da3_node_•lô
(
°©e
, 
ﬁdblk
, 
√wblk
, 
addblk
,

422 
max
 - 
i
, &
a˘i⁄
);

423 
addblk
->
bp
 = 
NULL
;

424 i‡(
îr‹
)

425  
îr‹
;

429 i‡(
a˘i⁄
)

430 
addblk
 = 
√wblk
;

432 
addblk
 = 
NULL
;

439 
	`xfs_da3_fixhash∑th
(
°©e
, &°©e->
∑th
);

441 i‡(!
addblk
)

449 
	`ASSERT
(
°©e
->
exåavÆid
 == 0 ||

450 
°©e
->
∑th
.
blk
[
max
].
magic
 =
XFS_DIR2_LEAFN_MAGIC
);

455 
	`ASSERT
(
°©e
->
∑th
.
a˘ive
 == 0);

456 
ﬁdblk
 = &
°©e
->
∑th
.
blk
[0];

457 
îr‹
 = 
	`xfs_da3_roŸ_•lô
(
°©e
, 
ﬁdblk
, 
addblk
);

458 i‡(
îr‹
) {

459 
addblk
->
bp
 = 
NULL
;

460  
îr‹
;

474 
node
 = 
ﬁdblk
->
bp
->
b_addr
;

475 i‡(
node
->
hdr
.
öfo
.
f‹w
) {

476 
	`ASSERT
(
	`be32_to_˝u
(
node
->
hdr
.
öfo
.
f‹w
Ë=
addblk
->
blkno
);

477 
node
 = 
addblk
->
bp
->
b_addr
;

478 
node
->
hdr
.
öfo
.
back
 = 
	`˝u_to_be32
(
ﬁdblk
->
blkno
);

479 
	`xfs_å™s_log_buf
(
°©e
->
¨gs
->
å™s
, 
addblk
->
bp
,

480 
	`XFS_DA_LOGRANGE
(
node
, &node->
hdr
.
öfo
,

481 (
node
->
hdr
.
öfo
)));

483 
node
 = 
ﬁdblk
->
bp
->
b_addr
;

484 i‡(
node
->
hdr
.
öfo
.
back
) {

485 
	`ASSERT
(
	`be32_to_˝u
(
node
->
hdr
.
öfo
.
back
Ë=
addblk
->
blkno
);

486 
node
 = 
addblk
->
bp
->
b_addr
;

487 
node
->
hdr
.
öfo
.
f‹w
 = 
	`˝u_to_be32
(
ﬁdblk
->
blkno
);

488 
	`xfs_å™s_log_buf
(
°©e
->
¨gs
->
å™s
, 
addblk
->
bp
,

489 
	`XFS_DA_LOGRANGE
(
node
, &node->
hdr
.
öfo
,

490 (
node
->
hdr
.
öfo
)));

492 
addblk
->
bp
 = 
NULL
;

494 
	}
}

501 
STATIC
 

502 
	$xfs_da3_roŸ_•lô
(

503 
xfs_da_°©e
 *
°©e
,

504 
xfs_da_°©e_blk
 *
blk1
,

505 
xfs_da_°©e_blk
 *
blk2
)

507 
xfs_da_öäode
 *
node
;

508 
xfs_da_öäode
 *
ﬁdroŸ
;

509 
xfs_da_node_íåy
 *
båì
;

510 
xfs_da3_i˙ode_hdr
 
nodehdr
;

511 
xfs_da_¨gs
 *
¨gs
;

512 
xfs_buf
 *
bp
;

513 
xfs_öode
 *
dp
;

514 
xfs_å™s
 *
ç
;

515 
xfs_dú2_Àaf
 *
Àaf
;

516 
xfs_dablk_t
 
blkno
;

517 
Àvñ
;

518 
îr‹
;

519 
size
;

521 
	`åa˚_xfs_da_roŸ_•lô
(
°©e
->
¨gs
);

527 
¨gs
 = 
°©e
->args;

528 
îr‹
 = 
	`xfs_da_grow_öode
(
¨gs
, &
blkno
);

529 i‡(
îr‹
)

530  
îr‹
;

532 
dp
 = 
¨gs
->dp;

533 
ç
 = 
¨gs
->
å™s
;

534 
îr‹
 = 
	`xfs_da_gë_buf
(
ç
, 
dp
, 
blkno
, -1, &
bp
, 
¨gs
->
whichf‹k
);

535 i‡(
îr‹
)

536  
îr‹
;

537 
node
 = 
bp
->
b_addr
;

538 
ﬁdroŸ
 = 
blk1
->
bp
->
b_addr
;

539 i‡(
ﬁdroŸ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DA_NODE_MAGIC
) ||

540 
ﬁdroŸ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DA3_NODE_MAGIC
)) {

541 
xfs_da3_i˙ode_hdr
 
i˙odehdr
;

543 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
i˙odehdr
, 
ﬁdroŸ
);

544 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
ﬁdroŸ
);

545 
size
 = ()((*)&
båì
[
i˙odehdr
.
cou¡
] - (*)
ﬁdroŸ
);

546 
Àvñ
 = 
i˙odehdr
.level;

552 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_DA_NODE_BUF
);

554 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

555 
xfs_dú2_Àaf_íåy
 *
íts
;

557 
Àaf
 = (
xfs_dú2_Àaf_t
 *)
ﬁdroŸ
;

558 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

559 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

561 
	`ASSERT
(
Àafhdr
.
magic
 =
XFS_DIR2_LEAFN_MAGIC
 ||

562 
Àafhdr
.
magic
 =
XFS_DIR3_LEAFN_MAGIC
);

563 
size
 = ()((*)&
íts
[
Àafhdr
.
cou¡
] - (*)
Àaf
);

564 
Àvñ
 = 0;

570 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_DIR_LEAFN_BUF
);

579 
	`mem˝y
(
node
, 
ﬁdroŸ
, 
size
);

580 i‡(
ﬁdroŸ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DA3_NODE_MAGIC
) ||

581 
ﬁdroŸ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
)) {

582 
xfs_da3_öäode
 *
node3
 = (xfs_da3_öäodê*)
node
;

584 
node3
->
hdr
.
öfo
.
blkno
 = 
	`˝u_to_be64
(
bp
->
b_bn
);

586 
	`xfs_å™s_log_buf
(
ç
, 
bp
, 0, 
size
 - 1);

588 
bp
->
b_›s
 = 
blk1
->bp->b_ops;

589 
	`xfs_å™s_buf_c›y_ty≥
(
bp
, 
blk1
->bp);

590 
blk1
->
bp
 = bp;

591 
blk1
->
blkno
 = blkno;

596 
îr‹
 = 
	`xfs_da3_node_¸óã
(
¨gs
,

597 (
¨gs
->
whichf‹k
 =
XFS_DATA_FORK
Ë?árgs->
geo
->
Àafblk
 : 0,

598 
Àvñ
 + 1, &
bp
, 
¨gs
->
whichf‹k
);

599 i‡(
îr‹
)

600  
îr‹
;

602 
node
 = 
bp
->
b_addr
;

603 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

604 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
node
);

605 
båì
[0].
hashvÆ
 = 
	`˝u_to_be32
(
blk1
->hashval);

606 
båì
[0].
bef‹e
 = 
	`˝u_to_be32
(
blk1
->
blkno
);

607 
båì
[1].
hashvÆ
 = 
	`˝u_to_be32
(
blk2
->hashval);

608 
båì
[1].
bef‹e
 = 
	`˝u_to_be32
(
blk2
->
blkno
);

609 
nodehdr
.
cou¡
 = 2;

610 
dp
->
d_›s
->
	`node_hdr_to_disk
(
node
, &
nodehdr
);

612 #ifde‡
DEBUG


613 i‡(
ﬁdroŸ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAFN_MAGIC
) ||

614 
ﬁdroŸ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
)) {

615 
	`ASSERT
(
blk1
->
blkno
 >
¨gs
->
geo
->
Àafblk
 &&

616 
blk1
->
blkno
 < 
¨gs
->
geo
->
‰ìblk
);

617 
	`ASSERT
(
blk2
->
blkno
 >
¨gs
->
geo
->
Àafblk
 &&

618 
blk2
->
blkno
 < 
¨gs
->
geo
->
‰ìblk
);

623 
	`xfs_å™s_log_buf
(
ç
, 
bp
,

624 
	`XFS_DA_LOGRANGE
(
node
, 
båì
, (
xfs_da_node_íåy_t
) * 2));

627 
	}
}

632 
STATIC
 

633 
	$xfs_da3_node_•lô
(

634 
xfs_da_°©e
 *
°©e
,

635 
xfs_da_°©e_blk
 *
ﬁdblk
,

636 
xfs_da_°©e_blk
 *
√wblk
,

637 
xfs_da_°©e_blk
 *
addblk
,

638 
åìÀvñ
,

639 *
ªsu…
)

641 
xfs_da_öäode
 *
node
;

642 
xfs_da3_i˙ode_hdr
 
nodehdr
;

643 
xfs_dablk_t
 
blkno
;

644 
√wcou¡
;

645 
îr‹
;

646 
u£exåa
;

647 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

649 
	`åa˚_xfs_da_node_•lô
(
°©e
->
¨gs
);

651 
node
 = 
ﬁdblk
->
bp
->
b_addr
;

652 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

657 
u£exåa
 = 
°©e
->
exåavÆid
 && sèã->
¨gs
->
whichf‹k
 =
XFS_ATTR_FORK
;

658 
√wcou¡
 = 1 + 
u£exåa
;

662 i‡(
nodehdr
.
cou¡
 + 
√wcou¡
 > 
°©e
->
¨gs
->
geo
->
node_íts
) {

667 
îr‹
 = 
	`xfs_da_grow_öode
(
°©e
->
¨gs
, &
blkno
);

668 i‡(
îr‹
)

669  
îr‹
;

671 
îr‹
 = 
	`xfs_da3_node_¸óã
(
°©e
->
¨gs
, 
blkno
, 
åìÀvñ
,

672 &
√wblk
->
bp
, 
°©e
->
¨gs
->
whichf‹k
);

673 i‡(
îr‹
)

674  
îr‹
;

675 
√wblk
->
blkno
 = blkno;

676 
√wblk
->
magic
 = 
XFS_DA_NODE_MAGIC
;

677 
	`xfs_da3_node_ªbÆ™˚
(
°©e
, 
ﬁdblk
, 
√wblk
);

678 
îr‹
 = 
	`xfs_da3_blk_lök
(
°©e
, 
ﬁdblk
, 
√wblk
);

679 i‡(
îr‹
)

680  
îr‹
;

681 *
ªsu…
 = 1;

683 *
ªsu…
 = 0;

698 
node
 = 
ﬁdblk
->
bp
->
b_addr
;

699 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

700 i‡(
ﬁdblk
->
ödex
 <
nodehdr
.
cou¡
) {

701 
ﬁdblk
->
ödex
++;

702 
	`xfs_da3_node_add
(
°©e
, 
ﬁdblk
, 
addblk
);

703 i‡(
u£exåa
) {

704 i‡(
°©e
->
exåØ·î
)

705 
ﬁdblk
->
ödex
++;

706 
	`xfs_da3_node_add
(
°©e
, 
ﬁdblk
, &°©e->
exåablk
);

707 
°©e
->
exåavÆid
 = 0;

710 
√wblk
->
ödex
++;

711 
	`xfs_da3_node_add
(
°©e
, 
√wblk
, 
addblk
);

712 i‡(
u£exåa
) {

713 i‡(
°©e
->
exåØ·î
)

714 
√wblk
->
ödex
++;

715 
	`xfs_da3_node_add
(
°©e
, 
√wblk
, &°©e->
exåablk
);

716 
°©e
->
exåavÆid
 = 0;

721 
	}
}

729 
STATIC
 

730 
	$xfs_da3_node_ªbÆ™˚
(

731 
xfs_da_°©e
 *
°©e
,

732 
xfs_da_°©e_blk
 *
blk1
,

733 
xfs_da_°©e_blk
 *
blk2
)

735 
xfs_da_öäode
 *
node1
;

736 
xfs_da_öäode
 *
node2
;

737 
xfs_da_öäode
 *
tm≤ode
;

738 
xfs_da_node_íåy
 *
båì1
;

739 
xfs_da_node_íåy
 *
båì2
;

740 
xfs_da_node_íåy
 *
båì_s
;

741 
xfs_da_node_íåy
 *
båì_d
;

742 
xfs_da3_i˙ode_hdr
 
nodehdr1
;

743 
xfs_da3_i˙ode_hdr
 
nodehdr2
;

744 
xfs_å™s
 *
ç
;

745 
cou¡
;

746 
tmp
;

747 
sw≠
 = 0;

748 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

750 
	`åa˚_xfs_da_node_ªbÆ™˚
(
°©e
->
¨gs
);

752 
node1
 = 
blk1
->
bp
->
b_addr
;

753 
node2
 = 
blk2
->
bp
->
b_addr
;

754 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr1
, 
node1
);

755 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr2
, 
node2
);

756 
båì1
 = 
dp
->
d_›s
->
	`node_åì_p
(
node1
);

757 
båì2
 = 
dp
->
d_›s
->
	`node_åì_p
(
node2
);

763 i‡(
nodehdr1
.
cou¡
 > 0 && 
nodehdr2
.count > 0 &&

764 ((
	`be32_to_˝u
(
båì2
[0].
hashvÆ
Ë< be32_to_˝u(
båì1
[0].hashval)) ||

765 (
	`be32_to_˝u
(
båì2
[
nodehdr2
.
cou¡
 - 1].
hashvÆ
) <

766 
	`be32_to_˝u
(
båì1
[
nodehdr1
.
cou¡
 - 1].
hashvÆ
)))) {

767 
tm≤ode
 = 
node1
;

768 
node1
 = 
node2
;

769 
node2
 = 
tm≤ode
;

770 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr1
, 
node1
);

771 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr2
, 
node2
);

772 
båì1
 = 
dp
->
d_›s
->
	`node_åì_p
(
node1
);

773 
båì2
 = 
dp
->
d_›s
->
	`node_åì_p
(
node2
);

774 
sw≠
 = 1;

777 
cou¡
 = (
nodehdr1
.cou¡ - 
nodehdr2
.count) / 2;

778 i‡(
cou¡
 == 0)

780 
ç
 = 
°©e
->
¨gs
->
å™s
;

784 i‡(
cou¡
 > 0) {

788 
tmp
 = 
nodehdr2
.
cou¡
;

789 i‡(
tmp
 > 0) {

790 
tmp
 *(
uöt
)(
xfs_da_node_íåy_t
);

791 
båì_s
 = &
båì2
[0];

792 
båì_d
 = &
båì2
[
cou¡
];

793 
	`memmove
(
båì_d
, 
båì_s
, 
tmp
);

800 
nodehdr2
.
cou¡
 += count;

801 
tmp
 = 
cou¡
 * (
uöt
)(
xfs_da_node_íåy_t
);

802 
båì_s
 = &
båì1
[
nodehdr1
.
cou¡
 - count];

803 
båì_d
 = &
båì2
[0];

804 
	`mem˝y
(
båì_d
, 
båì_s
, 
tmp
);

805 
nodehdr1
.
cou¡
 -= count;

811 
cou¡
 = -count;

812 
tmp
 = 
cou¡
 * (
uöt
)(
xfs_da_node_íåy_t
);

813 
båì_s
 = &
båì2
[0];

814 
båì_d
 = &
båì1
[
nodehdr1
.
cou¡
];

815 
	`mem˝y
(
båì_d
, 
båì_s
, 
tmp
);

816 
nodehdr1
.
cou¡
 += count;

818 
	`xfs_å™s_log_buf
(
ç
, 
blk1
->
bp
,

819 
	`XFS_DA_LOGRANGE
(
node1
, 
båì_d
, 
tmp
));

824 
tmp
 = 
nodehdr2
.
cou¡
 - count;

825 
tmp
 *(
uöt
)(
xfs_da_node_íåy_t
);

826 
båì_s
 = &
båì2
[
cou¡
];

827 
båì_d
 = &
båì2
[0];

828 
	`memmove
(
båì_d
, 
båì_s
, 
tmp
);

829 
nodehdr2
.
cou¡
 -= count;

835 
dp
->
d_›s
->
	`node_hdr_to_disk
(
node1
, &
nodehdr1
);

836 
	`xfs_å™s_log_buf
(
ç
, 
blk1
->
bp
,

837 
	`XFS_DA_LOGRANGE
(
node1
, &node1->
hdr
, 
dp
->
d_›s
->
node_hdr_size
));

839 
dp
->
d_›s
->
	`node_hdr_to_disk
(
node2
, &
nodehdr2
);

840 
	`xfs_å™s_log_buf
(
ç
, 
blk2
->
bp
,

841 
	`XFS_DA_LOGRANGE
(
node2
, &node2->
hdr
,

842 
dp
->
d_›s
->
node_hdr_size
 +

843 ((
båì2
[0]Ë* 
nodehdr2
.
cou¡
)));

849 i‡(
sw≠
) {

850 
node1
 = 
blk1
->
bp
->
b_addr
;

851 
node2
 = 
blk2
->
bp
->
b_addr
;

852 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr1
, 
node1
);

853 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr2
, 
node2
);

854 
båì1
 = 
dp
->
d_›s
->
	`node_åì_p
(
node1
);

855 
båì2
 = 
dp
->
d_›s
->
	`node_åì_p
(
node2
);

857 
blk1
->
hashvÆ
 = 
	`be32_to_˝u
(
båì1
[
nodehdr1
.
cou¡
 - 1].hashval);

858 
blk2
->
hashvÆ
 = 
	`be32_to_˝u
(
båì2
[
nodehdr2
.
cou¡
 - 1].hashval);

863 i‡(
blk1
->
ödex
 >
nodehdr1
.
cou¡
) {

864 
blk2
->
ödex
 = 
blk1
->ödex - 
nodehdr1
.
cou¡
;

865 
blk1
->
ödex
 = 
nodehdr1
.
cou¡
 + 1;

867 
	}
}

872 
STATIC
 

873 
	$xfs_da3_node_add
(

874 
xfs_da_°©e
 *
°©e
,

875 
xfs_da_°©e_blk
 *
ﬁdblk
,

876 
xfs_da_°©e_blk
 *
√wblk
)

878 
xfs_da_öäode
 *
node
;

879 
xfs_da3_i˙ode_hdr
 
nodehdr
;

880 
xfs_da_node_íåy
 *
båì
;

881 
tmp
;

882 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

884 
	`åa˚_xfs_da_node_add
(
°©e
->
¨gs
);

886 
node
 = 
ﬁdblk
->
bp
->
b_addr
;

887 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

888 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
node
);

890 
	`ASSERT
(
ﬁdblk
->
ödex
 >0 && oldblk->ödex <
nodehdr
.
cou¡
);

891 
	`ASSERT
(
√wblk
->
blkno
 != 0);

892 i‡(
°©e
->
¨gs
->
whichf‹k
 =
XFS_DATA_FORK
)

893 
	`ASSERT
(
√wblk
->
blkno
 >
°©e
->
¨gs
->
geo
->
Àafblk
 &&

894 
√wblk
->
blkno
 < 
°©e
->
¨gs
->
geo
->
‰ìblk
);

899 
tmp
 = 0;

900 i‡(
ﬁdblk
->
ödex
 < 
nodehdr
.
cou¡
) {

901 
tmp
 = (
nodehdr
.
cou¡
 - 
ﬁdblk
->
ödex
Ë* (
uöt
)(*
båì
);

902 
	`memmove
(&
båì
[
ﬁdblk
->
ödex
 + 1], &båì[ﬁdblk->ödex], 
tmp
);

904 
båì
[
ﬁdblk
->
ödex
].
hashvÆ
 = 
	`˝u_to_be32
(
√wblk
->hashval);

905 
båì
[
ﬁdblk
->
ödex
].
bef‹e
 = 
	`˝u_to_be32
(
√wblk
->
blkno
);

906 
	`xfs_å™s_log_buf
(
°©e
->
¨gs
->
å™s
, 
ﬁdblk
->
bp
,

907 
	`XFS_DA_LOGRANGE
(
node
, &
båì
[
ﬁdblk
->
ödex
],

908 
tmp
 + (*
båì
)));

910 
nodehdr
.
cou¡
 += 1;

911 
dp
->
d_›s
->
	`node_hdr_to_disk
(
node
, &
nodehdr
);

912 
	`xfs_å™s_log_buf
(
°©e
->
¨gs
->
å™s
, 
ﬁdblk
->
bp
,

913 
	`XFS_DA_LOGRANGE
(
node
, &node->
hdr
, 
dp
->
d_›s
->
node_hdr_size
));

918 
ﬁdblk
->
hashvÆ
 = 
	`be32_to_˝u
(
båì
[
nodehdr
.
cou¡
 - 1].hashval);

919 
	}
}

930 
	$xfs_da3_joö
(

931 
xfs_da_°©e
 *
°©e
)

933 
xfs_da_°©e_blk
 *
dr›_blk
;

934 
xfs_da_°©e_blk
 *
ßve_blk
;

935 
a˘i⁄
 = 0;

936 
îr‹
;

938 
	`åa˚_xfs_da_joö
(
°©e
->
¨gs
);

940 
dr›_blk
 = &
°©e
->
∑th
.
blk
[ sèã->∑th.
a˘ive
-1 ];

941 
ßve_blk
 = &
°©e
->
Æç©h
.
blk
[ sèã->
∑th
.
a˘ive
-1 ];

942 
	`ASSERT
(
°©e
->
∑th
.
blk
[0].
magic
 =
XFS_DA_NODE_MAGIC
);

943 
	`ASSERT
(
dr›_blk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
 ||

944 
dr›_blk
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
);

950  ; 
°©e
->
∑th
.
a˘ive
 >2; 
dr›_blk
--, 
ßve_blk
--,

951 
°©e
->
∑th
.
a˘ive
--) {

958 
dr›_blk
->
magic
) {

959 
XFS_ATTR_LEAF_MAGIC
:

960 
îr‹
 = 
	`xfs_©å3_Àaf_toosmÆl
(
°©e
, &
a˘i⁄
);

961 i‡(
îr‹
)

962  
îr‹
;

963 i‡(
a˘i⁄
 == 0)

965 
	`xfs_©å3_Àaf_unbÆ™˚
(
°©e
, 
dr›_blk
, 
ßve_blk
);

967 
XFS_DIR2_LEAFN_MAGIC
:

968 
îr‹
 = 
	`xfs_dú2_Àa‚_toosmÆl
(
°©e
, &
a˘i⁄
);

969 i‡(
îr‹
)

970  
îr‹
;

971 i‡(
a˘i⁄
 == 0)

973 
	`xfs_dú2_Àa‚_unbÆ™˚
(
°©e
, 
dr›_blk
, 
ßve_blk
);

975 
XFS_DA_NODE_MAGIC
:

980 
	`xfs_da3_node_ªmove
(
°©e
, 
dr›_blk
);

981 
	`xfs_da3_fixhash∑th
(
°©e
, &°©e->
∑th
);

982 
îr‹
 = 
	`xfs_da3_node_toosmÆl
(
°©e
, &
a˘i⁄
);

983 i‡(
îr‹
)

984  
îr‹
;

985 i‡(
a˘i⁄
 == 0)

987 
	`xfs_da3_node_unbÆ™˚
(
°©e
, 
dr›_blk
, 
ßve_blk
);

990 
	`xfs_da3_fixhash∑th
(
°©e
, &°©e->
Æç©h
);

991 
îr‹
 = 
	`xfs_da3_blk_u∆ök
(
°©e
, 
dr›_blk
, 
ßve_blk
);

992 
	`xfs_da_°©e_kûl_Æç©h
(
°©e
);

993 i‡(
îr‹
)

994  
îr‹
;

995 
îr‹
 = 
	`xfs_da_shrök_öode
(
°©e
->
¨gs
, 
dr›_blk
->
blkno
,

996 
dr›_blk
->
bp
);

997 
dr›_blk
->
bp
 = 
NULL
;

998 i‡(
îr‹
)

999  
îr‹
;

1006 
	`xfs_da3_node_ªmove
(
°©e
, 
dr›_blk
);

1007 
	`xfs_da3_fixhash∑th
(
°©e
, &°©e->
∑th
);

1008 
îr‹
 = 
	`xfs_da3_roŸ_joö
(
°©e
, &°©e->
∑th
.
blk
[0]);

1009  
îr‹
;

1010 
	}
}

1012 #ifdef 
DEBUG


1014 
	$xfs_da_blköfo_⁄lychûd_vÆid©e
(
xfs_da_blköfo
 *
blköfo
, 
__u16
 
Àvñ
)

1016 
__be16
 
magic
 = 
blköfo
->magic;

1018 i‡(
Àvñ
 == 1) {

1019 
	`ASSERT
(
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAFN_MAGIC
) ||

1020 
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
) ||

1021 
magic
 =
	`˝u_to_be16
(
XFS_ATTR_LEAF_MAGIC
) ||

1022 
magic
 =
	`˝u_to_be16
(
XFS_ATTR3_LEAF_MAGIC
));

1024 
	`ASSERT
(
magic
 =
	`˝u_to_be16
(
XFS_DA_NODE_MAGIC
) ||

1025 
magic
 =
	`˝u_to_be16
(
XFS_DA3_NODE_MAGIC
));

1027 
	`ASSERT
(!
blköfo
->
f‹w
);

1028 
	`ASSERT
(!
blköfo
->
back
);

1029 
	}
}

1031 
	#xfs_da_blköfo_⁄lychûd_vÆid©e
(
blköfo
, 
Àvñ
)

	)

1038 
STATIC
 

1039 
	$xfs_da3_roŸ_joö
(

1040 
xfs_da_°©e
 *
°©e
,

1041 
xfs_da_°©e_blk
 *
roŸ_blk
)

1043 
xfs_da_öäode
 *
ﬁdroŸ
;

1044 
xfs_da_¨gs
 *
¨gs
;

1045 
xfs_dablk_t
 
chûd
;

1046 
xfs_buf
 *
bp
;

1047 
xfs_da3_i˙ode_hdr
 
ﬁdroŸhdr
;

1048 
xfs_da_node_íåy
 *
båì
;

1049 
îr‹
;

1050 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

1052 
	`åa˚_xfs_da_roŸ_joö
(
°©e
->
¨gs
);

1054 
	`ASSERT
(
roŸ_blk
->
magic
 =
XFS_DA_NODE_MAGIC
);

1056 
¨gs
 = 
°©e
->args;

1057 
ﬁdroŸ
 = 
roŸ_blk
->
bp
->
b_addr
;

1058 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
ﬁdroŸhdr
, 
ﬁdroŸ
);

1059 
	`ASSERT
(
ﬁdroŸhdr
.
f‹w
 == 0);

1060 
	`ASSERT
(
ﬁdroŸhdr
.
back
 == 0);

1065 i‡(
ﬁdroŸhdr
.
cou¡
 > 1)

1072 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
ﬁdroŸ
);

1073 
chûd
 = 
	`be32_to_˝u
(
båì
[0].
bef‹e
);

1074 
	`ASSERT
(
chûd
 != 0);

1075 
îr‹
 = 
	`xfs_da3_node_ªad
(
¨gs
->
å™s
, 
dp
, 
chûd
, -1, &
bp
,

1076 
¨gs
->
whichf‹k
);

1077 i‡(
îr‹
)

1078  
îr‹
;

1079 
	`xfs_da_blköfo_⁄lychûd_vÆid©e
(
bp
->
b_addr
, 
ﬁdroŸhdr
.
Àvñ
);

1088 
	`mem˝y
(
roŸ_blk
->
bp
->
b_addr
, bp->b_addr, 
¨gs
->
geo
->
blksize
);

1089 
roŸ_blk
->
bp
->
b_›s
 = bp->b_ops;

1090 
	`xfs_å™s_buf_c›y_ty≥
(
roŸ_blk
->
bp
, bp);

1091 i‡(
ﬁdroŸhdr
.
magic
 =
XFS_DA3_NODE_MAGIC
) {

1092 
xfs_da3_blköfo
 *
da3
 = 
roŸ_blk
->
bp
->
b_addr
;

1093 
da3
->
blkno
 = 
	`˝u_to_be64
(
roŸ_blk
->
bp
->
b_bn
);

1095 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
roŸ_blk
->
bp
, 0,

1096 
¨gs
->
geo
->
blksize
 - 1);

1097 
îr‹
 = 
	`xfs_da_shrök_öode
(
¨gs
, 
chûd
, 
bp
);

1098  
îr‹
;

1099 
	}
}

1110 
STATIC
 

1111 
	$xfs_da3_node_toosmÆl
(

1112 
xfs_da_°©e
 *
°©e
,

1113 *
a˘i⁄
)

1115 
xfs_da_öäode
 *
node
;

1116 
xfs_da_°©e_blk
 *
blk
;

1117 
xfs_da_blköfo
 *
öfo
;

1118 
xfs_dablk_t
 
blkno
;

1119 
xfs_buf
 *
bp
;

1120 
xfs_da3_i˙ode_hdr
 
nodehdr
;

1121 
cou¡
;

1122 
f‹w¨d
;

1123 
îr‹
;

1124 
ªtvÆ
;

1125 
i
;

1126 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

1128 
	`åa˚_xfs_da_node_toosmÆl
(
°©e
->
¨gs
);

1135 
blk
 = &
°©e
->
∑th
.blk[ sèã->∑th.
a˘ive
-1 ];

1136 
öfo
 = 
blk
->
bp
->
b_addr
;

1137 
node
 = (
xfs_da_öäode_t
 *)
öfo
;

1138 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

1139 i‡(
nodehdr
.
cou¡
 > (
°©e
->
¨gs
->
geo
->
node_íts
 >> 1)) {

1140 *
a˘i⁄
 = 0;

1150 i‡(
nodehdr
.
cou¡
 == 0) {

1155 
f‹w¨d
 = (
öfo
->
f‹w
 != 0);

1156 
	`mem˝y
(&
°©e
->
Æç©h
, &°©e->
∑th
, (state->path));

1157 
îr‹
 = 
	`xfs_da3_∑th_shi·
(
°©e
, &°©e->
Æç©h
, 
f‹w¨d
,

1158 0, &
ªtvÆ
);

1159 i‡(
îr‹
)

1160  
îr‹
;

1161 i‡(
ªtvÆ
) {

1162 *
a˘i⁄
 = 0;

1164 *
a˘i⁄
 = 2;

1176 
cou¡
 = 
°©e
->
¨gs
->
geo
->
node_íts
;

1177 
cou¡
 -
°©e
->
¨gs
->
geo
->
node_íts
 >> 2;

1178 
cou¡
 -
nodehdr
.count;

1181 
f‹w¨d
 = 
nodehdr
.
f‹w
 <Çodehdr.
back
;

1182 
i
 = 0; i < 2; 
f‹w¨d
 = !forward, i++) {

1183 
xfs_da3_i˙ode_hdr
 
thdr
;

1184 i‡(
f‹w¨d
)

1185 
blkno
 = 
nodehdr
.
f‹w
;

1187 
blkno
 = 
nodehdr
.
back
;

1188 i‡(
blkno
 == 0)

1190 
îr‹
 = 
	`xfs_da3_node_ªad
(
°©e
->
¨gs
->
å™s
, 
dp
,

1191 
blkno
, -1, &
bp
, 
°©e
->
¨gs
->
whichf‹k
);

1192 i‡(
îr‹
)

1193  
îr‹
;

1195 
node
 = 
bp
->
b_addr
;

1196 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
thdr
, 
node
);

1197 
	`xfs_å™s_bªl£
(
°©e
->
¨gs
->
å™s
, 
bp
);

1199 i‡(
cou¡
 - 
thdr
.count >= 0)

1202 i‡(
i
 >= 2) {

1203 *
a˘i⁄
 = 0;

1211 
	`mem˝y
(&
°©e
->
Æç©h
, &°©e->
∑th
, (state->path));

1212 i‡(
blkno
 < 
blk
->blkno) {

1213 
îr‹
 = 
	`xfs_da3_∑th_shi·
(
°©e
, &°©e->
Æç©h
, 
f‹w¨d
,

1214 0, &
ªtvÆ
);

1216 
îr‹
 = 
	`xfs_da3_∑th_shi·
(
°©e
, &°©e->
∑th
, 
f‹w¨d
,

1217 0, &
ªtvÆ
);

1219 i‡(
îr‹
)

1220  
îr‹
;

1221 i‡(
ªtvÆ
) {

1222 *
a˘i⁄
 = 0;

1225 *
a˘i⁄
 = 1;

1227 
	}
}

1232 
STATIC
 
uöt


1233 
	$xfs_da3_node_œ°hash
(

1234 
xfs_öode
 *
dp
,

1235 
xfs_buf
 *
bp
,

1236 *
cou¡
)

1238 
xfs_da_öäode
 *
node
;

1239 
xfs_da_node_íåy
 *
båì
;

1240 
xfs_da3_i˙ode_hdr
 
nodehdr
;

1242 
node
 = 
bp
->
b_addr
;

1243 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

1244 i‡(
cou¡
)

1245 *
cou¡
 = 
nodehdr
.count;

1246 i‡(!
nodehdr
.
cou¡
)

1248 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
node
);

1249  
	`be32_to_˝u
(
båì
[
nodehdr
.
cou¡
 - 1].
hashvÆ
);

1250 
	}
}

1257 
	$xfs_da3_fixhash∑th
(

1258 
xfs_da_°©e
 *
°©e
,

1259 
xfs_da_°©e_∑th
 *
∑th
)

1261 
xfs_da_°©e_blk
 *
blk
;

1262 
xfs_da_öäode
 *
node
;

1263 
xfs_da_node_íåy
 *
båì
;

1264 
xfs_dahash_t
 
œ°hash
=0;

1265 
Àvñ
;

1266 
cou¡
;

1267 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

1269 
	`åa˚_xfs_da_fixhash∑th
(
°©e
->
¨gs
);

1271 
Àvñ
 = 
∑th
->
a˘ive
-1;

1272 
blk
 = &
∑th
->blk[ 
Àvñ
 ];

1273 
blk
->
magic
) {

1274 
XFS_ATTR_LEAF_MAGIC
:

1275 
œ°hash
 = 
	`xfs_©å_Àaf_œ°hash
(
blk
->
bp
, &
cou¡
);

1276 i‡(
cou¡
 == 0)

1279 
XFS_DIR2_LEAFN_MAGIC
:

1280 
œ°hash
 = 
	`xfs_dú2_Àa‚_œ°hash
(
dp
, 
blk
->
bp
, &
cou¡
);

1281 i‡(
cou¡
 == 0)

1284 
XFS_DA_NODE_MAGIC
:

1285 
œ°hash
 = 
	`xfs_da3_node_œ°hash
(
dp
, 
blk
->
bp
, &
cou¡
);

1286 i‡(
cou¡
 == 0)

1290 
blk
--, 
Àvñ
--;Üevel >= 0; blk--,Üevel--) {

1291 
xfs_da3_i˙ode_hdr
 
nodehdr
;

1293 
node
 = 
blk
->
bp
->
b_addr
;

1294 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

1295 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
node
);

1296 i‡(
	`be32_to_˝u
(
båì
[
blk
->
ödex
].
hashvÆ
Ë=
œ°hash
)

1298 
blk
->
hashvÆ
 = 
œ°hash
;

1299 
båì
[
blk
->
ödex
].
hashvÆ
 = 
	`˝u_to_be32
(
œ°hash
);

1300 
	`xfs_å™s_log_buf
(
°©e
->
¨gs
->
å™s
, 
blk
->
bp
,

1301 
	`XFS_DA_LOGRANGE
(
node
, &
båì
[
blk
->
ödex
],

1302 (*
båì
)));

1304 
œ°hash
 = 
	`be32_to_˝u
(
båì
[
nodehdr
.
cou¡
 - 1].
hashvÆ
);

1306 
	}
}

1311 
STATIC
 

1312 
	$xfs_da3_node_ªmove
(

1313 
xfs_da_°©e
 *
°©e
,

1314 
xfs_da_°©e_blk
 *
dr›_blk
)

1316 
xfs_da_öäode
 *
node
;

1317 
xfs_da3_i˙ode_hdr
 
nodehdr
;

1318 
xfs_da_node_íåy
 *
båì
;

1319 
ödex
;

1320 
tmp
;

1321 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

1323 
	`åa˚_xfs_da_node_ªmove
(
°©e
->
¨gs
);

1325 
node
 = 
dr›_blk
->
bp
->
b_addr
;

1326 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

1327 
	`ASSERT
(
dr›_blk
->
ödex
 < 
nodehdr
.
cou¡
);

1328 
	`ASSERT
(
dr›_blk
->
ödex
 >= 0);

1333 
ödex
 = 
dr›_blk
->index;

1334 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
node
);

1335 i‡(
ödex
 < 
nodehdr
.
cou¡
 - 1) {

1336 
tmp
 = 
nodehdr
.
cou¡
 - 
ödex
 - 1;

1337 
tmp
 *(
uöt
)(
xfs_da_node_íåy_t
);

1338 
	`memmove
(&
båì
[
ödex
], &båì[ödex + 1], 
tmp
);

1339 
	`xfs_å™s_log_buf
(
°©e
->
¨gs
->
å™s
, 
dr›_blk
->
bp
,

1340 
	`XFS_DA_LOGRANGE
(
node
, &
båì
[
ödex
], 
tmp
));

1341 
ödex
 = 
nodehdr
.
cou¡
 - 1;

1343 
	`mem£t
(&
båì
[
ödex
], 0, (
xfs_da_node_íåy_t
));

1344 
	`xfs_å™s_log_buf
(
°©e
->
¨gs
->
å™s
, 
dr›_blk
->
bp
,

1345 
	`XFS_DA_LOGRANGE
(
node
, &
båì
[
ödex
], (btree[index])));

1346 
nodehdr
.
cou¡
 -= 1;

1347 
dp
->
d_›s
->
	`node_hdr_to_disk
(
node
, &
nodehdr
);

1348 
	`xfs_å™s_log_buf
(
°©e
->
¨gs
->
å™s
, 
dr›_blk
->
bp
,

1349 
	`XFS_DA_LOGRANGE
(
node
, &node->
hdr
, 
dp
->
d_›s
->
node_hdr_size
));

1354 
dr›_blk
->
hashvÆ
 = 
	`be32_to_˝u
(
båì
[
ödex
 - 1].hashval);

1355 
	}
}

1361 
STATIC
 

1362 
	$xfs_da3_node_unbÆ™˚
(

1363 
xfs_da_°©e
 *
°©e
,

1364 
xfs_da_°©e_blk
 *
dr›_blk
,

1365 
xfs_da_°©e_blk
 *
ßve_blk
)

1367 
xfs_da_öäode
 *
dr›_node
;

1368 
xfs_da_öäode
 *
ßve_node
;

1369 
xfs_da_node_íåy
 *
dr›_båì
;

1370 
xfs_da_node_íåy
 *
ßve_båì
;

1371 
xfs_da3_i˙ode_hdr
 
dr›_hdr
;

1372 
xfs_da3_i˙ode_hdr
 
ßve_hdr
;

1373 
xfs_å™s
 *
ç
;

1374 
södex
;

1375 
tmp
;

1376 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

1378 
	`åa˚_xfs_da_node_unbÆ™˚
(
°©e
->
¨gs
);

1380 
dr›_node
 = 
dr›_blk
->
bp
->
b_addr
;

1381 
ßve_node
 = 
ßve_blk
->
bp
->
b_addr
;

1382 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
dr›_hdr
, 
dr›_node
);

1383 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
ßve_hdr
, 
ßve_node
);

1384 
dr›_båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
dr›_node
);

1385 
ßve_båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
ßve_node
);

1386 
ç
 = 
°©e
->
¨gs
->
å™s
;

1392 i‡((
	`be32_to_˝u
(
dr›_båì
[0].
hashvÆ
) <

1393 
	`be32_to_˝u
(
ßve_båì
[0].
hashvÆ
)) ||

1394 (
	`be32_to_˝u
(
dr›_båì
[
dr›_hdr
.
cou¡
 - 1].
hashvÆ
) <

1395 
	`be32_to_˝u
(
ßve_båì
[
ßve_hdr
.
cou¡
 - 1].
hashvÆ
))) {

1397 
tmp
 = 
ßve_hdr
.
cou¡
 * (
xfs_da_node_íåy_t
);

1398 
	`memmove
(&
ßve_båì
[
dr›_hdr
.
cou¡
], &ßve_båì[0], 
tmp
);

1400 
södex
 = 0;

1401 
	`xfs_å™s_log_buf
(
ç
, 
ßve_blk
->
bp
,

1402 
	`XFS_DA_LOGRANGE
(
ßve_node
, &
ßve_båì
[0],

1403 (
ßve_hdr
.
cou¡
 + 
dr›_hdr
.count) *

1404 (
xfs_da_node_íåy_t
)));

1406 
södex
 = 
ßve_hdr
.
cou¡
;

1407 
	`xfs_å™s_log_buf
(
ç
, 
ßve_blk
->
bp
,

1408 
	`XFS_DA_LOGRANGE
(
ßve_node
, &
ßve_båì
[
södex
],

1409 
dr›_hdr
.
cou¡
 * (
xfs_da_node_íåy_t
)));

1415 
tmp
 = 
dr›_hdr
.
cou¡
 * (
uöt
)(
xfs_da_node_íåy_t
);

1416 
	`mem˝y
(&
ßve_båì
[
södex
], &
dr›_båì
[0], 
tmp
);

1417 
ßve_hdr
.
cou¡
 +
dr›_hdr
.count;

1419 
dp
->
d_›s
->
	`node_hdr_to_disk
(
ßve_node
, &
ßve_hdr
);

1420 
	`xfs_å™s_log_buf
(
ç
, 
ßve_blk
->
bp
,

1421 
	`XFS_DA_LOGRANGE
(
ßve_node
, &ßve_node->
hdr
,

1422 
dp
->
d_›s
->
node_hdr_size
));

1427 
ßve_blk
->
hashvÆ
 = 
	`be32_to_˝u
(
ßve_båì
[
ßve_hdr
.
cou¡
 - 1].hashval);

1428 
	}
}

1446 
	$xfs_da3_node_lookup_öt
(

1447 
xfs_da_°©e
 *
°©e
,

1448 *
ªsu…
)

1450 
xfs_da_°©e_blk
 *
blk
;

1451 
xfs_da_blköfo
 *
cuº
;

1452 
xfs_da_öäode
 *
node
;

1453 
xfs_da_node_íåy
 *
båì
;

1454 
xfs_da3_i˙ode_hdr
 
nodehdr
;

1455 
xfs_da_¨gs
 *
¨gs
;

1456 
xfs_dablk_t
 
blkno
;

1457 
xfs_dahash_t
 
hashvÆ
;

1458 
xfs_dahash_t
 
båìhashvÆ
;

1459 
¥obe
;

1460 
•™
;

1461 
max
;

1462 
îr‹
;

1463 
ªtvÆ
;

1464 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

1466 
¨gs
 = 
°©e
->args;

1472 
blkno
 = (
¨gs
->
whichf‹k
 =
XFS_DATA_FORK
)?árgs->
geo
->
Àafblk
 : 0;

1473 
blk
 = &
°©e
->
∑th
.blk[0], sèã->∑th.
a˘ive
 = 1;

1474 
°©e
->
∑th
.
a˘ive
 <
XFS_DA_NODE_MAXDEPTH
;

1475 
blk
++, 
°©e
->
∑th
.
a˘ive
++) {

1479 
blk
->
blkno
 = blkno;

1480 
îr‹
 = 
	`xfs_da3_node_ªad
(
¨gs
->
å™s
,árgs->
dp
, 
blkno
,

1481 -1, &
blk
->
bp
, 
¨gs
->
whichf‹k
);

1482 i‡(
îr‹
) {

1483 
blk
->
blkno
 = 0;

1484 
°©e
->
∑th
.
a˘ive
--;

1485  
îr‹
;

1487 
cuº
 = 
blk
->
bp
->
b_addr
;

1488 
blk
->
magic
 = 
	`be16_to_˝u
(
cuº
->magic);

1490 i‡(
blk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
 ||

1491 
blk
->
magic
 =
XFS_ATTR3_LEAF_MAGIC
) {

1492 
blk
->
magic
 = 
XFS_ATTR_LEAF_MAGIC
;

1493 
blk
->
hashvÆ
 = 
	`xfs_©å_Àaf_œ°hash
(blk->
bp
, 
NULL
);

1497 i‡(
blk
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
 ||

1498 
blk
->
magic
 =
XFS_DIR3_LEAFN_MAGIC
) {

1499 
blk
->
magic
 = 
XFS_DIR2_LEAFN_MAGIC
;

1500 
blk
->
hashvÆ
 = 
	`xfs_dú2_Àa‚_œ°hash
(
¨gs
->
dp
,

1501 
blk
->
bp
, 
NULL
);

1505 
blk
->
magic
 = 
XFS_DA_NODE_MAGIC
;

1511 
node
 = 
blk
->
bp
->
b_addr
;

1512 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

1513 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
node
);

1515 
max
 = 
nodehdr
.
cou¡
;

1516 
blk
->
hashvÆ
 = 
	`be32_to_˝u
(
båì
[
max
 - 1].hashval);

1521 
¥obe
 = 
•™
 = 
max
 / 2;

1522 
hashvÆ
 = 
¨gs
->hashval;

1523 
•™
 > 4) {

1524 
•™
 /= 2;

1525 
båìhashvÆ
 = 
	`be32_to_˝u
(
båì
[
¥obe
].
hashvÆ
);

1526 i‡(
båìhashvÆ
 < 
hashvÆ
)

1527 
¥obe
 +
•™
;

1528 i‡(
båìhashvÆ
 > 
hashvÆ
)

1529 
¥obe
 -
•™
;

1533 
	`ASSERT
((
¥obe
 >0Ë&& (¥obê< 
max
));

1534 
	`ASSERT
((
•™
 <= 4) ||

1535 (
	`be32_to_˝u
(
båì
[
¥obe
].
hashvÆ
) == hashval));

1541 
¥obe
 > 0 &&

1542 
	`be32_to_˝u
(
båì
[
¥obe
].
hashvÆ
) >= hashval) {

1543 
¥obe
--;

1545 
¥obe
 < 
max
 &&

1546 
	`be32_to_˝u
(
båì
[
¥obe
].
hashvÆ
) < hashval) {

1547 
¥obe
++;

1553 i‡(
¥obe
 =
max
) {

1554 
blk
->
ödex
 = 
max
 - 1;

1555 
blkno
 = 
	`be32_to_˝u
(
båì
[
max
 - 1].
bef‹e
);

1557 
blk
->
ödex
 = 
¥obe
;

1558 
blkno
 = 
	`be32_to_˝u
(
båì
[
¥obe
].
bef‹e
);

1569 i‡(
blk
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
) {

1570 
ªtvÆ
 = 
	`xfs_dú2_Àa‚_lookup_öt
(
blk
->
bp
, 
¨gs
,

1571 &
blk
->
ödex
, 
°©e
);

1572 } i‡(
blk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
) {

1573 
ªtvÆ
 = 
	`xfs_©å3_Àaf_lookup_öt
(
blk
->
bp
, 
¨gs
);

1574 
blk
->
ödex
 = 
¨gs
->index;

1575 
¨gs
->
blkno
 = 
blk
->blkno;

1577 
	`ASSERT
(0);

1578  -
EFSCORRUPTED
;

1580 i‡(((
ªtvÆ
 =-
ENOENT
Ë|| (ªtvÆ =-
ENOATTR
)) &&

1581 (
blk
->
hashvÆ
 =
¨gs
->hashval)) {

1582 
îr‹
 = 
	`xfs_da3_∑th_shi·
(
°©e
, &°©e->
∑th
, 1, 1,

1583 &
ªtvÆ
);

1584 i‡(
îr‹
)

1585  
îr‹
;

1586 i‡(
ªtvÆ
 == 0) {

1588 } i‡(
blk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
) {

1590 
ªtvÆ
 = -
ENOATTR
;

1595 *
ªsu…
 = 
ªtvÆ
;

1597 
	}
}

1606 
STATIC
 

1607 
	$xfs_da3_node_‹dî
(

1608 
xfs_öode
 *
dp
,

1609 
xfs_buf
 *
node1_bp
,

1610 
xfs_buf
 *
node2_bp
)

1612 
xfs_da_öäode
 *
node1
;

1613 
xfs_da_öäode
 *
node2
;

1614 
xfs_da_node_íåy
 *
båì1
;

1615 
xfs_da_node_íåy
 *
båì2
;

1616 
xfs_da3_i˙ode_hdr
 
node1hdr
;

1617 
xfs_da3_i˙ode_hdr
 
node2hdr
;

1619 
node1
 = 
node1_bp
->
b_addr
;

1620 
node2
 = 
node2_bp
->
b_addr
;

1621 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
node1hdr
, 
node1
);

1622 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
node2hdr
, 
node2
);

1623 
båì1
 = 
dp
->
d_›s
->
	`node_åì_p
(
node1
);

1624 
båì2
 = 
dp
->
d_›s
->
	`node_åì_p
(
node2
);

1626 i‡(
node1hdr
.
cou¡
 > 0 && 
node2hdr
.count > 0 &&

1627 ((
	`be32_to_˝u
(
båì2
[0].
hashvÆ
Ë< be32_to_˝u(
båì1
[0].hashval)) ||

1628 (
	`be32_to_˝u
(
båì2
[
node2hdr
.
cou¡
 - 1].
hashvÆ
) <

1629 
	`be32_to_˝u
(
båì1
[
node1hdr
.
cou¡
 - 1].
hashvÆ
)))) {

1633 
	}
}

1639 
	$xfs_da3_blk_lök
(

1640 
xfs_da_°©e
 *
°©e
,

1641 
xfs_da_°©e_blk
 *
ﬁd_blk
,

1642 
xfs_da_°©e_blk
 *
√w_blk
)

1644 
xfs_da_blköfo
 *
ﬁd_öfo
;

1645 
xfs_da_blköfo
 *
√w_öfo
;

1646 
xfs_da_blköfo
 *
tmp_öfo
;

1647 
xfs_da_¨gs
 *
¨gs
;

1648 
xfs_buf
 *
bp
;

1649 
bef‹e
 = 0;

1650 
îr‹
;

1651 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

1656 
¨gs
 = 
°©e
->args;

1657 
	`ASSERT
(
¨gs
 !
NULL
);

1658 
ﬁd_öfo
 = 
ﬁd_blk
->
bp
->
b_addr
;

1659 
√w_öfo
 = 
√w_blk
->
bp
->
b_addr
;

1660 
	`ASSERT
(
ﬁd_blk
->
magic
 =
XFS_DA_NODE_MAGIC
 ||

1661 
ﬁd_blk
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
 ||

1662 
ﬁd_blk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
);

1664 
ﬁd_blk
->
magic
) {

1665 
XFS_ATTR_LEAF_MAGIC
:

1666 
bef‹e
 = 
	`xfs_©å_Àaf_‹dî
(
ﬁd_blk
->
bp
, 
√w_blk
->bp);

1668 
XFS_DIR2_LEAFN_MAGIC
:

1669 
bef‹e
 = 
	`xfs_dú2_Àa‚_‹dî
(
dp
, 
ﬁd_blk
->
bp
, 
√w_blk
->bp);

1671 
XFS_DA_NODE_MAGIC
:

1672 
bef‹e
 = 
	`xfs_da3_node_‹dî
(
dp
, 
ﬁd_blk
->
bp
, 
√w_blk
->bp);

1679 i‡(
bef‹e
) {

1683 
	`åa˚_xfs_da_lök_bef‹e
(
¨gs
);

1684 
√w_öfo
->
f‹w
 = 
	`˝u_to_be32
(
ﬁd_blk
->
blkno
);

1685 
√w_öfo
->
back
 = 
ﬁd_öfo
->back;

1686 i‡(
ﬁd_öfo
->
back
) {

1687 
îr‹
 = 
	`xfs_da3_node_ªad
(
¨gs
->
å™s
, 
dp
,

1688 
	`be32_to_˝u
(
ﬁd_öfo
->
back
),

1689 -1, &
bp
, 
¨gs
->
whichf‹k
);

1690 i‡(
îr‹
)

1691  
îr‹
;

1692 
	`ASSERT
(
bp
 !
NULL
);

1693 
tmp_öfo
 = 
bp
->
b_addr
;

1694 
	`ASSERT
(
tmp_öfo
->
magic
 =
ﬁd_öfo
->magic);

1695 
	`ASSERT
(
	`be32_to_˝u
(
tmp_öfo
->
f‹w
Ë=
ﬁd_blk
->
blkno
);

1696 
tmp_öfo
->
f‹w
 = 
	`˝u_to_be32
(
√w_blk
->
blkno
);

1697 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
, 0, (*
tmp_öfo
)-1);

1699 
ﬁd_öfo
->
back
 = 
	`˝u_to_be32
(
√w_blk
->
blkno
);

1704 
	`åa˚_xfs_da_lök_a·î
(
¨gs
);

1705 
√w_öfo
->
f‹w
 = 
ﬁd_öfo
->forw;

1706 
√w_öfo
->
back
 = 
	`˝u_to_be32
(
ﬁd_blk
->
blkno
);

1707 i‡(
ﬁd_öfo
->
f‹w
) {

1708 
îr‹
 = 
	`xfs_da3_node_ªad
(
¨gs
->
å™s
, 
dp
,

1709 
	`be32_to_˝u
(
ﬁd_öfo
->
f‹w
),

1710 -1, &
bp
, 
¨gs
->
whichf‹k
);

1711 i‡(
îr‹
)

1712  
îr‹
;

1713 
	`ASSERT
(
bp
 !
NULL
);

1714 
tmp_öfo
 = 
bp
->
b_addr
;

1715 
	`ASSERT
(
tmp_öfo
->
magic
 =
ﬁd_öfo
->magic);

1716 
	`ASSERT
(
	`be32_to_˝u
(
tmp_öfo
->
back
Ë=
ﬁd_blk
->
blkno
);

1717 
tmp_öfo
->
back
 = 
	`˝u_to_be32
(
√w_blk
->
blkno
);

1718 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
, 0, (*
tmp_öfo
)-1);

1720 
ﬁd_öfo
->
f‹w
 = 
	`˝u_to_be32
(
√w_blk
->
blkno
);

1723 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
ﬁd_blk
->
bp
, 0, (*
tmp_öfo
) - 1);

1724 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
√w_blk
->
bp
, 0, (*
tmp_öfo
) - 1);

1726 
	}
}

1731 
STATIC
 

1732 
	$xfs_da3_blk_u∆ök
(

1733 
xfs_da_°©e
 *
°©e
,

1734 
xfs_da_°©e_blk
 *
dr›_blk
,

1735 
xfs_da_°©e_blk
 *
ßve_blk
)

1737 
xfs_da_blköfo
 *
dr›_öfo
;

1738 
xfs_da_blköfo
 *
ßve_öfo
;

1739 
xfs_da_blköfo
 *
tmp_öfo
;

1740 
xfs_da_¨gs
 *
¨gs
;

1741 
xfs_buf
 *
bp
;

1742 
îr‹
;

1747 
¨gs
 = 
°©e
->args;

1748 
	`ASSERT
(
¨gs
 !
NULL
);

1749 
ßve_öfo
 = 
ßve_blk
->
bp
->
b_addr
;

1750 
dr›_öfo
 = 
dr›_blk
->
bp
->
b_addr
;

1751 
	`ASSERT
(
ßve_blk
->
magic
 =
XFS_DA_NODE_MAGIC
 ||

1752 
ßve_blk
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
 ||

1753 
ßve_blk
->
magic
 =
XFS_ATTR_LEAF_MAGIC
);

1754 
	`ASSERT
(
ßve_blk
->
magic
 =
dr›_blk
->magic);

1755 
	`ASSERT
((
	`be32_to_˝u
(
ßve_öfo
->
f‹w
Ë=
dr›_blk
->
blkno
) ||

1756 (
	`be32_to_˝u
(
ßve_öfo
->
back
Ë=
dr›_blk
->
blkno
));

1757 
	`ASSERT
((
	`be32_to_˝u
(
dr›_öfo
->
f‹w
Ë=
ßve_blk
->
blkno
) ||

1758 (
	`be32_to_˝u
(
dr›_öfo
->
back
Ë=
ßve_blk
->
blkno
));

1763 i‡(
	`be32_to_˝u
(
ßve_öfo
->
back
Ë=
dr›_blk
->
blkno
) {

1764 
	`åa˚_xfs_da_u∆ök_back
(
¨gs
);

1765 
ßve_öfo
->
back
 = 
dr›_öfo
->back;

1766 i‡(
dr›_öfo
->
back
) {

1767 
îr‹
 = 
	`xfs_da3_node_ªad
(
¨gs
->
å™s
,árgs->
dp
,

1768 
	`be32_to_˝u
(
dr›_öfo
->
back
),

1769 -1, &
bp
, 
¨gs
->
whichf‹k
);

1770 i‡(
îr‹
)

1771  
îr‹
;

1772 
	`ASSERT
(
bp
 !
NULL
);

1773 
tmp_öfo
 = 
bp
->
b_addr
;

1774 
	`ASSERT
(
tmp_öfo
->
magic
 =
ßve_öfo
->magic);

1775 
	`ASSERT
(
	`be32_to_˝u
(
tmp_öfo
->
f‹w
Ë=
dr›_blk
->
blkno
);

1776 
tmp_öfo
->
f‹w
 = 
	`˝u_to_be32
(
ßve_blk
->
blkno
);

1777 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
, 0,

1778 (*
tmp_öfo
) - 1);

1781 
	`åa˚_xfs_da_u∆ök_f‹w¨d
(
¨gs
);

1782 
ßve_öfo
->
f‹w
 = 
dr›_öfo
->forw;

1783 i‡(
dr›_öfo
->
f‹w
) {

1784 
îr‹
 = 
	`xfs_da3_node_ªad
(
¨gs
->
å™s
,árgs->
dp
,

1785 
	`be32_to_˝u
(
dr›_öfo
->
f‹w
),

1786 -1, &
bp
, 
¨gs
->
whichf‹k
);

1787 i‡(
îr‹
)

1788  
îr‹
;

1789 
	`ASSERT
(
bp
 !
NULL
);

1790 
tmp_öfo
 = 
bp
->
b_addr
;

1791 
	`ASSERT
(
tmp_öfo
->
magic
 =
ßve_öfo
->magic);

1792 
	`ASSERT
(
	`be32_to_˝u
(
tmp_öfo
->
back
Ë=
dr›_blk
->
blkno
);

1793 
tmp_öfo
->
back
 = 
	`˝u_to_be32
(
ßve_blk
->
blkno
);

1794 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
, 0,

1795 (*
tmp_öfo
) - 1);

1799 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
ßve_blk
->
bp
, 0, (*
ßve_öfo
) - 1);

1801 
	}
}

1812 
	$xfs_da3_∑th_shi·
(

1813 
xfs_da_°©e
 *
°©e
,

1814 
xfs_da_°©e_∑th
 *
∑th
,

1815 
f‹w¨d
,

1816 
ªÀa£
,

1817 *
ªsu…
)

1819 
xfs_da_°©e_blk
 *
blk
;

1820 
xfs_da_blköfo
 *
öfo
;

1821 
xfs_da_öäode
 *
node
;

1822 
xfs_da_¨gs
 *
¨gs
;

1823 
xfs_da_node_íåy
 *
båì
;

1824 
xfs_da3_i˙ode_hdr
 
nodehdr
;

1825 
xfs_buf
 *
bp
;

1826 
xfs_dablk_t
 
blkno
 = 0;

1827 
Àvñ
;

1828 
îr‹
;

1829 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

1831 
	`åa˚_xfs_da_∑th_shi·
(
°©e
->
¨gs
);

1838 
¨gs
 = 
°©e
->args;

1839 
	`ASSERT
(
¨gs
 !
NULL
);

1840 
	`ASSERT
(
∑th
 !
NULL
);

1841 
	`ASSERT
((
∑th
->
a˘ive
 > 0Ë&& (∑th->a˘ivê< 
XFS_DA_NODE_MAXDEPTH
));

1842 
Àvñ
 = (
∑th
->
a˘ive
-1) - 1;

1843 
blk
 = &
∑th
->blk[
Àvñ
];Üevel >= 0; blk--,Üevel--) {

1844 
node
 = 
blk
->
bp
->
b_addr
;

1845 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

1846 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
node
);

1848 i‡(
f‹w¨d
 && (
blk
->
ödex
 < 
nodehdr
.
cou¡
 - 1)) {

1849 
blk
->
ödex
++;

1850 
blkno
 = 
	`be32_to_˝u
(
båì
[
blk
->
ödex
].
bef‹e
);

1852 } i‡(!
f‹w¨d
 && (
blk
->
ödex
 > 0)) {

1853 
blk
->
ödex
--;

1854 
blkno
 = 
	`be32_to_˝u
(
båì
[
blk
->
ödex
].
bef‹e
);

1858 i‡(
Àvñ
 < 0) {

1859 *
ªsu…
 = -
ENOENT
;

1860 
	`ASSERT
(
¨gs
->
›_Êags
 & 
XFS_DA_OP_OKNOENT
);

1868 
blk
++, 
Àvñ
++;Üevñ < 
∑th
->
a˘ive
; blk++,Üevel++) {

1872 
îr‹
 = 
	`xfs_da3_node_ªad
(
¨gs
->
å™s
, 
dp
, 
blkno
, -1, &
bp
,

1873 
¨gs
->
whichf‹k
);

1874 i‡(
îr‹
)

1875  
îr‹
;

1883 i‡(
ªÀa£
)

1884 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
blk
->
bp
);

1885 
blk
->
blkno
 = blkno;

1886 
blk
->
bp
 = bp;

1888 
öfo
 = 
blk
->
bp
->
b_addr
;

1889 
	`ASSERT
(
öfo
->
magic
 =
	`˝u_to_be16
(
XFS_DA_NODE_MAGIC
) ||

1890 
öfo
->
magic
 =
	`˝u_to_be16
(
XFS_DA3_NODE_MAGIC
) ||

1891 
öfo
->
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAFN_MAGIC
) ||

1892 
öfo
->
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
) ||

1893 
öfo
->
magic
 =
	`˝u_to_be16
(
XFS_ATTR_LEAF_MAGIC
) ||

1894 
öfo
->
magic
 =
	`˝u_to_be16
(
XFS_ATTR3_LEAF_MAGIC
));

1901 
	`be16_to_˝u
(
öfo
->
magic
)) {

1902 
XFS_DA_NODE_MAGIC
:

1903 
XFS_DA3_NODE_MAGIC
:

1904 
blk
->
magic
 = 
XFS_DA_NODE_MAGIC
;

1905 
node
 = (
xfs_da_öäode_t
 *)
öfo
;

1906 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

1907 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
node
);

1908 
blk
->
hashvÆ
 = 
	`be32_to_˝u
(
båì
[
nodehdr
.
cou¡
 - 1].hashval);

1909 i‡(
f‹w¨d
)

1910 
blk
->
ödex
 = 0;

1912 
blk
->
ödex
 = 
nodehdr
.
cou¡
 - 1;

1913 
blkno
 = 
	`be32_to_˝u
(
båì
[
blk
->
ödex
].
bef‹e
);

1915 
XFS_ATTR_LEAF_MAGIC
:

1916 
XFS_ATTR3_LEAF_MAGIC
:

1917 
blk
->
magic
 = 
XFS_ATTR_LEAF_MAGIC
;

1918 
	`ASSERT
(
Àvñ
 =
∑th
->
a˘ive
-1);

1919 
blk
->
ödex
 = 0;

1920 
blk
->
hashvÆ
 = 
	`xfs_©å_Àaf_œ°hash
(blk->
bp
, 
NULL
);

1922 
XFS_DIR2_LEAFN_MAGIC
:

1923 
XFS_DIR3_LEAFN_MAGIC
:

1924 
blk
->
magic
 = 
XFS_DIR2_LEAFN_MAGIC
;

1925 
	`ASSERT
(
Àvñ
 =
∑th
->
a˘ive
-1);

1926 
blk
->
ödex
 = 0;

1927 
blk
->
hashvÆ
 = 
	`xfs_dú2_Àa‚_œ°hash
(
¨gs
->
dp
,

1928 
blk
->
bp
, 
NULL
);

1931 
	`ASSERT
(0);

1935 *
ªsu…
 = 0;

1937 
	}
}

1949 
xfs_dahash_t


1950 
	$xfs_da_hash«me
(c⁄° 
__uöt8_t
 *
«me
, 
«mñí
)

1952 
xfs_dahash_t
 
hash
;

1957 
hash
 = 0; 
«mñí
 >4;Çamñí -4, 
«me
 += 4)

1958 
hash
 = (
«me
[0] << 21) ^ (name[1] << 14) ^ (name[2] << 7) ^

1959 (
«me
[3] << 0Ë^ 
	`rﬁ32
(
hash
, 7 * 4);

1964 
«mñí
) {

1966  (
«me
[0] << 14) ^ (name[1] << 7) ^ (name[2] << 0) ^

1967 
	`rﬁ32
(
hash
, 7 * 3);

1969  (
«me
[0] << 7Ë^ («me[1] << 0Ë^ 
	`rﬁ32
(
hash
, 7 * 2);

1971  (
«me
[0] << 0Ë^ 
	`rﬁ32
(
hash
, 7 * 1);

1973  
hash
;

1975 
	}
}

1977 
xfs_dacmp


1978 
	$xfs_da_com≤ame
(

1979 
xfs_da_¨gs
 *
¨gs
,

1980 c⁄° *
«me
,

1981 
Àn
)

1983  (
¨gs
->
«mñí
 =
Àn
 && 
	`memcmp
◊rgs->
«me
,Çame,Üen) == 0) ?

1984 
XFS_CMP_EXACT
 : 
XFS_CMP_DIFFERENT
;

1985 
	}
}

1987 
xfs_dahash_t


1988 
	$xfs_deÁu…_hash«me
(

1989 
xfs_«me
 *
«me
)

1991  
	`xfs_da_hash«me
(
«me
->«me,Çame->
Àn
);

1992 
	}
}

1994 c⁄° 
xfs_«me›s
 
	gxfs_deÁu…_«me›s
 = {

1995 .
hash«me
 = 
xfs_deÁu…_hash«me
,

1996 .
	gcom≤ame
 = 
xfs_da_com≤ame


2000 
	$xfs_da_grow_öode_öt
(

2001 
xfs_da_¨gs
 *
¨gs
,

2002 
xfs_fûeoff_t
 *
bno
,

2003 
cou¡
)

2005 
xfs_å™s
 *
ç
 = 
¨gs
->
å™s
;

2006 
xfs_öode
 *
dp
 = 
¨gs
->dp;

2007 
w
 = 
¨gs
->
whichf‹k
;

2008 
xfs_rfsblock_t
 
nblks
 = 
dp
->
i_d
.
di_nblocks
;

2009 
xfs_bmbt_úec
 
m≠
, *
m≠p
;

2010 
nm≠
, 
îr‹
, 
gŸ
, 
i
, 
m≠i
;

2015 
îr‹
 = 
	`xfs_bm≠_fú°_unu£d
(
ç
, 
dp
, 
cou¡
, 
bno
, 
w
);

2016 i‡(
îr‹
)

2017  
îr‹
;

2022 
nm≠
 = 1;

2023 
	`ASSERT
(
¨gs
->
fú°block
 !
NULL
);

2024 
îr‹
 = 
	`xfs_bm≠i_wrôe
(
ç
, 
dp
, *
bno
, 
cou¡
,

2025 
	`xfs_bm≠i_aÊag
(
w
)|
XFS_BMAPI_METADATA
|
XFS_BMAPI_CONTIG
,

2026 
¨gs
->
fú°block
,árgs->
tŸÆ
, &
m≠
, &
nm≠
,

2027 
¨gs
->
df›s
);

2028 i‡(
îr‹
)

2029  
îr‹
;

2031 
	`ASSERT
(
nm≠
 <= 1);

2032 i‡(
nm≠
 == 1) {

2033 
m≠p
 = &
m≠
;

2034 
m≠i
 = 1;

2035 } i‡(
nm≠
 =0 && 
cou¡
 > 1) {

2036 
xfs_fûeoff_t
 
b
;

2037 
c
;

2043 
m≠p
 = 
	`kmem_Æloc
((*m≠pË* 
cou¡
, 
KM_SLEEP
);

2044 
b
 = *
bno
, 
m≠i
 = 0; b < *bnÿ+ 
cou¡
; ) {

2045 
nm≠
 = 
	`MIN
(
XFS_BMAP_MAX_NMAP
, 
cou¡
);

2046 
c
 = ()(*
bno
 + 
cou¡
 - 
b
);

2047 
îr‹
 = 
	`xfs_bm≠i_wrôe
(
ç
, 
dp
, 
b
, 
c
,

2048 
	`xfs_bm≠i_aÊag
(
w
)|
XFS_BMAPI_METADATA
,

2049 
¨gs
->
fú°block
,árgs->
tŸÆ
,

2050 &
m≠p
[
m≠i
], &
nm≠
, 
¨gs
->
df›s
);

2051 i‡(
îr‹
)

2052 
out_‰ì_m≠
;

2053 i‡(
nm≠
 < 1)

2055 
m≠i
 +
nm≠
;

2056 
b
 = 
m≠p
[
m≠i
 - 1].
br_°¨toff
 +

2057 
m≠p
[
m≠i
 - 1].
br_blockcou¡
;

2060 
m≠i
 = 0;

2061 
m≠p
 = 
NULL
;

2067 
i
 = 0, 
gŸ
 = 0; i < 
m≠i
; i++)

2068 
gŸ
 +
m≠p
[
i
].
br_blockcou¡
;

2069 i‡(
gŸ
 !
cou¡
 || 
m≠p
[0].
br_°¨toff
 !*
bno
 ||

2070 
m≠p
[
m≠i
 - 1].
br_°¨toff
 + m≠p[m≠ò- 1].
br_blockcou¡
 !=

2071 *
bno
 + 
cou¡
) {

2072 
îr‹
 = -
ENOSPC
;

2073 
out_‰ì_m≠
;

2077 
¨gs
->
tŸÆ
 -
dp
->
i_d
.
di_nblocks
 - 
nblks
;

2079 
out_‰ì_m≠
:

2080 i‡(
m≠p
 !&
m≠
)

2081 
	`kmem_‰ì
(
m≠p
);

2082  
îr‹
;

2083 
	}
}

2090 
	$xfs_da_grow_öode
(

2091 
xfs_da_¨gs
 *
¨gs
,

2092 
xfs_dablk_t
 *
√w_blkno
)

2094 
xfs_fûeoff_t
 
bno
;

2095 
îr‹
;

2097 
	`åa˚_xfs_da_grow_öode
(
¨gs
);

2099 
bno
 = 
¨gs
->
geo
->
Àafblk
;

2100 
îr‹
 = 
	`xfs_da_grow_öode_öt
(
¨gs
, &
bno
,árgs->
geo
->
fsbcou¡
);

2101 i‡(!
îr‹
)

2102 *
√w_blkno
 = (
xfs_dablk_t
)
bno
;

2103  
îr‹
;

2104 
	}
}

2114 
STATIC
 

2115 
	$xfs_da3_sw≠_œ°block
(

2116 
xfs_da_¨gs
 *
¨gs
,

2117 
xfs_dablk_t
 *
dód_blkn›
,

2118 
xfs_buf
 **
dód_buÂ
)

2120 
xfs_da_blköfo
 *
dód_öfo
;

2121 
xfs_da_blköfo
 *
sib_öfo
;

2122 
xfs_da_öäode
 *
∑r_node
;

2123 
xfs_da_öäode
 *
dód_node
;

2124 
xfs_dú2_Àaf
 *
dód_Àaf2
;

2125 
xfs_da_node_íåy
 *
båì
;

2126 
xfs_da3_i˙ode_hdr
 
∑r_hdr
;

2127 
xfs_öode
 *
dp
;

2128 
xfs_å™s
 *
ç
;

2129 
xfs_mou¡
 *
mp
;

2130 
xfs_buf
 *
dód_buf
;

2131 
xfs_buf
 *
œ°_buf
;

2132 
xfs_buf
 *
sib_buf
;

2133 
xfs_buf
 *
∑r_buf
;

2134 
xfs_dahash_t
 
dód_hash
;

2135 
xfs_fûeoff_t
 
œ°off
;

2136 
xfs_dablk_t
 
dód_blkno
;

2137 
xfs_dablk_t
 
œ°_blkno
;

2138 
xfs_dablk_t
 
sib_blkno
;

2139 
xfs_dablk_t
 
∑r_blkno
;

2140 
îr‹
;

2141 
w
;

2142 
íäo
;

2143 
Àvñ
;

2144 
dód_Àvñ
;

2146 
	`åa˚_xfs_da_sw≠_œ°block
(
¨gs
);

2148 
dód_buf
 = *
dód_buÂ
;

2149 
dód_blkno
 = *
dód_blkn›
;

2150 
ç
 = 
¨gs
->
å™s
;

2151 
dp
 = 
¨gs
->dp;

2152 
w
 = 
¨gs
->
whichf‹k
;

2153 
	`ASSERT
(
w
 =
XFS_DATA_FORK
);

2154 
mp
 = 
dp
->
i_mou¡
;

2155 
œ°off
 = 
¨gs
->
geo
->
‰ìblk
;

2156 
îr‹
 = 
	`xfs_bm≠_œ°_bef‹e
(
ç
, 
dp
, &
œ°off
, 
w
);

2157 i‡(
îr‹
)

2158  
îr‹
;

2159 i‡(
	`u∆ikñy
(
œ°off
 == 0)) {

2160 
	`XFS_ERROR_REPORT
("xfs_da_sw≠_œ°block(1)", 
XFS_ERRLEVEL_LOW
,

2161 
mp
);

2162  -
EFSCORRUPTED
;

2167 
œ°_blkno
 = (
xfs_dablk_t
)
œ°off
 - 
¨gs
->
geo
->
fsbcou¡
;

2168 
îr‹
 = 
	`xfs_da3_node_ªad
(
ç
, 
dp
, 
œ°_blkno
, -1, &
œ°_buf
, 
w
);

2169 i‡(
îr‹
)

2170  
îr‹
;

2174 
	`mem˝y
(
dód_buf
->
b_addr
, 
œ°_buf
->b_addr, 
¨gs
->
geo
->
blksize
);

2175 
	`xfs_å™s_log_buf
(
ç
, 
dód_buf
, 0, 
¨gs
->
geo
->
blksize
 - 1);

2176 
dód_öfo
 = 
dód_buf
->
b_addr
;

2180 i‡(
dód_öfo
->
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAFN_MAGIC
) ||

2181 
dód_öfo
->
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
)) {

2182 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

2183 
xfs_dú2_Àaf_íåy
 *
íts
;

2185 
dód_Àaf2
 = (
xfs_dú2_Àaf_t
 *)
dód_öfo
;

2186 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
dód_Àaf2
);

2187 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
dód_Àaf2
);

2188 
dód_Àvñ
 = 0;

2189 
dód_hash
 = 
	`be32_to_˝u
(
íts
[
Àafhdr
.
cou¡
 - 1].
hashvÆ
);

2191 
xfs_da3_i˙ode_hdr
 
dódhdr
;

2193 
dód_node
 = (
xfs_da_öäode_t
 *)
dód_öfo
;

2194 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
dódhdr
, 
dód_node
);

2195 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
dód_node
);

2196 
dód_Àvñ
 = 
dódhdr
.
Àvñ
;

2197 
dód_hash
 = 
	`be32_to_˝u
(
båì
[
dódhdr
.
cou¡
 - 1].
hashvÆ
);

2199 
sib_buf
 = 
∑r_buf
 = 
NULL
;

2203 i‡((
sib_blkno
 = 
	`be32_to_˝u
(
dód_öfo
->
back
))) {

2204 
îr‹
 = 
	`xfs_da3_node_ªad
(
ç
, 
dp
, 
sib_blkno
, -1, &
sib_buf
, 
w
);

2205 i‡(
îr‹
)

2206 
d⁄e
;

2207 
sib_öfo
 = 
sib_buf
->
b_addr
;

2208 i‡(
	`u∆ikñy
(

2209 
	`be32_to_˝u
(
sib_öfo
->
f‹w
Ë!
œ°_blkno
 ||

2210 
sib_öfo
->
magic
 !
dód_öfo
->magic)) {

2211 
	`XFS_ERROR_REPORT
("xfs_da_swap_lastblock(2)",

2212 
XFS_ERRLEVEL_LOW
, 
mp
);

2213 
îr‹
 = -
EFSCORRUPTED
;

2214 
d⁄e
;

2216 
sib_öfo
->
f‹w
 = 
	`˝u_to_be32
(
dód_blkno
);

2217 
	`xfs_å™s_log_buf
(
ç
, 
sib_buf
,

2218 
	`XFS_DA_LOGRANGE
(
sib_öfo
, &sib_öfo->
f‹w
,

2219 (
sib_öfo
->
f‹w
)));

2220 
sib_buf
 = 
NULL
;

2225 i‡((
sib_blkno
 = 
	`be32_to_˝u
(
dód_öfo
->
f‹w
))) {

2226 
îr‹
 = 
	`xfs_da3_node_ªad
(
ç
, 
dp
, 
sib_blkno
, -1, &
sib_buf
, 
w
);

2227 i‡(
îr‹
)

2228 
d⁄e
;

2229 
sib_öfo
 = 
sib_buf
->
b_addr
;

2230 i‡(
	`u∆ikñy
(

2231 
	`be32_to_˝u
(
sib_öfo
->
back
Ë!
œ°_blkno
 ||

2232 
sib_öfo
->
magic
 !
dód_öfo
->magic)) {

2233 
	`XFS_ERROR_REPORT
("xfs_da_swap_lastblock(3)",

2234 
XFS_ERRLEVEL_LOW
, 
mp
);

2235 
îr‹
 = -
EFSCORRUPTED
;

2236 
d⁄e
;

2238 
sib_öfo
->
back
 = 
	`˝u_to_be32
(
dód_blkno
);

2239 
	`xfs_å™s_log_buf
(
ç
, 
sib_buf
,

2240 
	`XFS_DA_LOGRANGE
(
sib_öfo
, &sib_öfo->
back
,

2241 (
sib_öfo
->
back
)));

2242 
sib_buf
 = 
NULL
;

2244 
∑r_blkno
 = 
¨gs
->
geo
->
Àafblk
;

2245 
Àvñ
 = -1;

2250 
îr‹
 = 
	`xfs_da3_node_ªad
(
ç
, 
dp
, 
∑r_blkno
, -1, &
∑r_buf
, 
w
);

2251 i‡(
îr‹
)

2252 
d⁄e
;

2253 
∑r_node
 = 
∑r_buf
->
b_addr
;

2254 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
∑r_hdr
, 
∑r_node
);

2255 i‡(
Àvñ
 >0 &&Üevñ !
∑r_hdr
.level + 1) {

2256 
	`XFS_ERROR_REPORT
("xfs_da_swap_lastblock(4)",

2257 
XFS_ERRLEVEL_LOW
, 
mp
);

2258 
îr‹
 = -
EFSCORRUPTED
;

2259 
d⁄e
;

2261 
Àvñ
 = 
∑r_hdr
.level;

2262 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
∑r_node
);

2263 
íäo
 = 0;

2264 
íäo
 < 
∑r_hdr
.
cou¡
 &&

2265 
	`be32_to_˝u
(
båì
[
íäo
].
hashvÆ
Ë< 
dód_hash
;

2266 
íäo
++)

2268 i‡(
íäo
 =
∑r_hdr
.
cou¡
) {

2269 
	`XFS_ERROR_REPORT
("xfs_da_swap_lastblock(5)",

2270 
XFS_ERRLEVEL_LOW
, 
mp
);

2271 
îr‹
 = -
EFSCORRUPTED
;

2272 
d⁄e
;

2274 
∑r_blkno
 = 
	`be32_to_˝u
(
båì
[
íäo
].
bef‹e
);

2275 i‡(
Àvñ
 =
dód_Àvñ
 + 1)

2277 
	`xfs_å™s_bªl£
(
ç
, 
∑r_buf
);

2278 
∑r_buf
 = 
NULL
;

2286 
íäo
 < 
∑r_hdr
.
cou¡
 &&

2287 
	`be32_to_˝u
(
båì
[
íäo
].
bef‹e
Ë!
œ°_blkno
;

2288 
íäo
++)

2290 i‡(
íäo
 < 
∑r_hdr
.
cou¡
)

2292 
∑r_blkno
 = 
∑r_hdr
.
f‹w
;

2293 
	`xfs_å™s_bªl£
(
ç
, 
∑r_buf
);

2294 
∑r_buf
 = 
NULL
;

2295 i‡(
	`u∆ikñy
(
∑r_blkno
 == 0)) {

2296 
	`XFS_ERROR_REPORT
("xfs_da_swap_lastblock(6)",

2297 
XFS_ERRLEVEL_LOW
, 
mp
);

2298 
îr‹
 = -
EFSCORRUPTED
;

2299 
d⁄e
;

2301 
îr‹
 = 
	`xfs_da3_node_ªad
(
ç
, 
dp
, 
∑r_blkno
, -1, &
∑r_buf
, 
w
);

2302 i‡(
îr‹
)

2303 
d⁄e
;

2304 
∑r_node
 = 
∑r_buf
->
b_addr
;

2305 
dp
->
d_›s
->
	`node_hdr_‰om_disk
(&
∑r_hdr
, 
∑r_node
);

2306 i‡(
∑r_hdr
.
Àvñ
 !=Üevel) {

2307 
	`XFS_ERROR_REPORT
("xfs_da_swap_lastblock(7)",

2308 
XFS_ERRLEVEL_LOW
, 
mp
);

2309 
îr‹
 = -
EFSCORRUPTED
;

2310 
d⁄e
;

2312 
båì
 = 
dp
->
d_›s
->
	`node_åì_p
(
∑r_node
);

2313 
íäo
 = 0;

2318 
båì
[
íäo
].
bef‹e
 = 
	`˝u_to_be32
(
dód_blkno
);

2319 
	`xfs_å™s_log_buf
(
ç
, 
∑r_buf
,

2320 
	`XFS_DA_LOGRANGE
(
∑r_node
, &
båì
[
íäo
].
bef‹e
,

2321 (
båì
[
íäo
].
bef‹e
)));

2322 *
dód_blkn›
 = 
œ°_blkno
;

2323 *
dód_buÂ
 = 
œ°_buf
;

2325 
d⁄e
:

2326 i‡(
∑r_buf
)

2327 
	`xfs_å™s_bªl£
(
ç
, 
∑r_buf
);

2328 i‡(
sib_buf
)

2329 
	`xfs_å™s_bªl£
(
ç
, 
sib_buf
);

2330 
	`xfs_å™s_bªl£
(
ç
, 
œ°_buf
);

2331  
îr‹
;

2332 
	}
}

2338 
	$xfs_da_shrök_öode
(

2339 
xfs_da_¨gs_t
 *
¨gs
,

2340 
xfs_dablk_t
 
dód_blkno
,

2341 
xfs_buf
 *
dód_buf
)

2343 
xfs_öode_t
 *
dp
;

2344 
d⁄e
, 
îr‹
, 
w
, 
cou¡
;

2345 
xfs_å™s_t
 *
ç
;

2347 
	`åa˚_xfs_da_shrök_öode
(
¨gs
);

2349 
dp
 = 
¨gs
->dp;

2350 
w
 = 
¨gs
->
whichf‹k
;

2351 
ç
 = 
¨gs
->
å™s
;

2352 
cou¡
 = 
¨gs
->
geo
->
fsbcou¡
;

2358 
îr‹
 = 
	`xfs_bunm≠i
(
ç
, 
dp
, 
dód_blkno
, 
cou¡
,

2359 
	`xfs_bm≠i_aÊag
(
w
), 0, 
¨gs
->
fú°block
,

2360 
¨gs
->
df›s
, &
d⁄e
);

2361 i‡(
îr‹
 =-
ENOSPC
) {

2362 i‡(
w
 !
XFS_DATA_FORK
)

2364 
îr‹
 = 
	`xfs_da3_sw≠_œ°block
(
¨gs
, &
dód_blkno
,

2365 &
dód_buf
);

2366 i‡(
îr‹
)

2372 
	`xfs_å™s_bövÆ
(
ç
, 
dód_buf
);

2373  
îr‹
;

2374 
	}
}

2380 
STATIC
 

2381 
	$xfs_da_m≠_covîs_blocks
(

2382 
nm≠
,

2383 
xfs_bmbt_úec_t
 *
m≠p
,

2384 
xfs_dablk_t
 
bno
,

2385 
cou¡
)

2387 
i
;

2388 
xfs_fûeoff_t
 
off
;

2390 
i
 = 0, 
off
 = 
bno
; i < 
nm≠
; i++) {

2391 i‡(
m≠p
[
i
].
br_°¨tblock
 =
HOLESTARTBLOCK
 ||

2392 
m≠p
[
i
].
br_°¨tblock
 =
DELAYSTARTBLOCK
) {

2395 i‡(
off
 !
m≠p
[
i
].
br_°¨toff
) {

2398 
off
 +
m≠p
[
i
].
br_blockcou¡
;

2400  
off
 =
bno
 + 
cou¡
;

2401 
	}
}

2412 
	$xfs_buf_m≠_‰om_úec
(

2413 
xfs_mou¡
 *
mp
,

2414 
xfs_buf_m≠
 **
m≠p
,

2415 *
nm≠s
,

2416 
xfs_bmbt_úec
 *
úecs
,

2417 
núecs
)

2419 
xfs_buf_m≠
 *
m≠
;

2420 
i
;

2422 
	`ASSERT
(*
nm≠s
 == 1);

2423 
	`ASSERT
(
núecs
 >= 1);

2425 i‡(
núecs
 > 1) {

2426 
m≠
 = 
	`kmem_zÆloc
(
núecs
 * (
xfs_buf_m≠
),

2427 
KM_SLEEP
 | 
KM_NOFS
);

2428 i‡(!
m≠
)

2429  -
ENOMEM
;

2430 *
m≠p
 = 
m≠
;

2433 *
nm≠s
 = 
núecs
;

2434 
m≠
 = *
m≠p
;

2435 
i
 = 0; i < *
nm≠s
; i++) {

2436 
	`ASSERT
(
úecs
[
i
].
br_°¨tblock
 !
DELAYSTARTBLOCK
 &&

2437 
úecs
[
i
].
br_°¨tblock
 !
HOLESTARTBLOCK
);

2438 
m≠
[
i
].
bm_bn
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
úecs
[i].
br_°¨tblock
);

2439 
m≠
[
i
].
bm_Àn
 = 
	`XFS_FSB_TO_BB
(
mp
, 
úecs
[i].
br_blockcou¡
);

2442 
	}
}

2453 
	$xfs_dabuf_m≠
(

2454 
xfs_öode
 *
dp
,

2455 
xfs_dablk_t
 
bno
,

2456 
xfs_daddr_t
 
m≠≥dbno
,

2457 
whichf‹k
,

2458 
xfs_buf_m≠
 **
m≠
,

2459 *
nm≠s
)

2461 
xfs_mou¡
 *
mp
 = 
dp
->
i_mou¡
;

2462 
nfsb
;

2463 
îr‹
 = 0;

2464 
xfs_bmbt_úec
 
úec
;

2465 
xfs_bmbt_úec
 *
úecs
 = &
úec
;

2466 
núecs
;

2468 
	`ASSERT
(
m≠
 && *map);

2469 
	`ASSERT
(*
nm≠s
 == 1);

2471 i‡(
whichf‹k
 =
XFS_DATA_FORK
)

2472 
nfsb
 = 
mp
->
m_dú_geo
->
fsbcou¡
;

2474 
nfsb
 = 
mp
->
m_©å_geo
->
fsbcou¡
;

2480 i‡(
m≠≥dbno
 == -1 || mappedbno == -2) {

2484 i‡(
nfsb
 != 1)

2485 
úecs
 = 
	`kmem_zÆloc
((
úec
Ë* 
nfsb
,

2486 
KM_SLEEP
 | 
KM_NOFS
);

2488 
núecs
 = 
nfsb
;

2489 
îr‹
 = 
	`xfs_bm≠i_ªad
(
dp
, (
xfs_fûeoff_t
)
bno
, 
nfsb
, 
úecs
,

2490 &
núecs
, 
	`xfs_bm≠i_aÊag
(
whichf‹k
));

2491 i‡(
îr‹
)

2492 
out
;

2494 
úecs
->
br_°¨tblock
 = 
	`XFS_DADDR_TO_FSB
(
mp
, 
m≠≥dbno
);

2495 
úecs
->
br_°¨toff
 = (
xfs_fûeoff_t
)
bno
;

2496 
úecs
->
br_blockcou¡
 = 
nfsb
;

2497 
úecs
->
br_°©e
 = 0;

2498 
núecs
 = 1;

2501 i‡(!
	`xfs_da_m≠_covîs_blocks
(
núecs
, 
úecs
, 
bno
, 
nfsb
)) {

2502 
îr‹
 = 
m≠≥dbno
 =-2 ? -1 : -
EFSCORRUPTED
;

2503 i‡(
	`u∆ikñy
(
îr‹
 =-
EFSCORRUPTED
)) {

2504 i‡(
xfs_îr‹_Àvñ
 >
XFS_ERRLEVEL_LOW
) {

2505 
i
;

2506 
	`xfs_Æît
(
mp
, "%s: bno %lld dir: inode %lld",

2507 
__func__
, ()
bno
,

2508 ()
dp
->
i_öo
);

2509 
i
 = 0; i < *
nm≠s
; i++) {

2510 
	`xfs_Æît
(
mp
,

2512 
i
,

2513 ()
úecs
[
i
].
br_°¨toff
,

2514 ()
úecs
[
i
].
br_°¨tblock
,

2515 ()
úecs
[
i
].
br_blockcou¡
,

2516 
úecs
[
i
].
br_°©e
);

2519 
	`XFS_ERROR_REPORT
("xfs_da_do_buf(1)",

2520 
XFS_ERRLEVEL_LOW
, 
mp
);

2522 
out
;

2524 
îr‹
 = 
	`xfs_buf_m≠_‰om_úec
(
mp
, 
m≠
, 
nm≠s
, 
úecs
, 
núecs
);

2525 
out
:

2526 i‡(
úecs
 !&
úec
)

2527 
	`kmem_‰ì
(
úecs
);

2528  
îr‹
;

2529 
	}
}

2535 
	$xfs_da_gë_buf
(

2536 
xfs_å™s
 *
å™s
,

2537 
xfs_öode
 *
dp
,

2538 
xfs_dablk_t
 
bno
,

2539 
xfs_daddr_t
 
m≠≥dbno
,

2540 
xfs_buf
 **
bµ
,

2541 
whichf‹k
)

2543 
xfs_buf
 *
bp
;

2544 
xfs_buf_m≠
 
m≠
;

2545 
xfs_buf_m≠
 *
m≠p
;

2546 
nm≠
;

2547 
îr‹
;

2549 *
bµ
 = 
NULL
;

2550 
m≠p
 = &
m≠
;

2551 
nm≠
 = 1;

2552 
îr‹
 = 
	`xfs_dabuf_m≠
(
dp
, 
bno
, 
m≠≥dbno
, 
whichf‹k
,

2553 &
m≠p
, &
nm≠
);

2554 i‡(
îr‹
) {

2556 i‡(
îr‹
 == -1)

2557 
îr‹
 = 0;

2558 
out_‰ì
;

2561 
bp
 = 
	`xfs_å™s_gë_buf_m≠
(
å™s
, 
dp
->
i_mou¡
->
m_ddev_èrgp
,

2562 
m≠p
, 
nm≠
, 0);

2563 
îr‹
 = 
bp
 ? bp->
b_îr‹
 : -
EIO
;

2564 i‡(
îr‹
) {

2565 i‡(
bp
)

2566 
	`xfs_å™s_bªl£
(
å™s
, 
bp
);

2567 
out_‰ì
;

2570 *
bµ
 = 
bp
;

2572 
out_‰ì
:

2573 i‡(
m≠p
 !&
m≠
)

2574 
	`kmem_‰ì
(
m≠p
);

2576  
îr‹
;

2577 
	}
}

2583 
	$xfs_da_ªad_buf
(

2584 
xfs_å™s
 *
å™s
,

2585 
xfs_öode
 *
dp
,

2586 
xfs_dablk_t
 
bno
,

2587 
xfs_daddr_t
 
m≠≥dbno
,

2588 
xfs_buf
 **
bµ
,

2589 
whichf‹k
,

2590 c⁄° 
xfs_buf_›s
 *
›s
)

2592 
xfs_buf
 *
bp
;

2593 
xfs_buf_m≠
 
m≠
;

2594 
xfs_buf_m≠
 *
m≠p
;

2595 
nm≠
;

2596 
îr‹
;

2598 *
bµ
 = 
NULL
;

2599 
m≠p
 = &
m≠
;

2600 
nm≠
 = 1;

2601 
îr‹
 = 
	`xfs_dabuf_m≠
(
dp
, 
bno
, 
m≠≥dbno
, 
whichf‹k
,

2602 &
m≠p
, &
nm≠
);

2603 i‡(
îr‹
) {

2605 i‡(
îr‹
 == -1)

2606 
îr‹
 = 0;

2607 
out_‰ì
;

2610 
îr‹
 = 
	`xfs_å™s_ªad_buf_m≠
(
dp
->
i_mou¡
, 
å™s
,

2611 
dp
->
i_mou¡
->
m_ddev_èrgp
,

2612 
m≠p
, 
nm≠
, 0, &
bp
, 
›s
);

2613 i‡(
îr‹
)

2614 
out_‰ì
;

2616 i‡(
whichf‹k
 =
XFS_ATTR_FORK
)

2617 
	`xfs_buf_£t_ªf
(
bp
, 
XFS_ATTR_BTREE_REF
);

2619 
	`xfs_buf_£t_ªf
(
bp
, 
XFS_DIR_BTREE_REF
);

2620 *
bµ
 = 
bp
;

2621 
out_‰ì
:

2622 i‡(
m≠p
 !&
m≠
)

2623 
	`kmem_‰ì
(
m≠p
);

2625  
îr‹
;

2626 
	}
}

2632 
	$xfs_da_ªada_buf
(

2633 
xfs_öode
 *
dp
,

2634 
xfs_dablk_t
 
bno
,

2635 
xfs_daddr_t
 
m≠≥dbno
,

2636 
whichf‹k
,

2637 c⁄° 
xfs_buf_›s
 *
›s
)

2639 
xfs_buf_m≠
 
m≠
;

2640 
xfs_buf_m≠
 *
m≠p
;

2641 
nm≠
;

2642 
îr‹
;

2644 
m≠p
 = &
m≠
;

2645 
nm≠
 = 1;

2646 
îr‹
 = 
	`xfs_dabuf_m≠
(
dp
, 
bno
, 
m≠≥dbno
, 
whichf‹k
,

2647 &
m≠p
, &
nm≠
);

2648 i‡(
îr‹
) {

2650 i‡(
îr‹
 == -1)

2651 
îr‹
 = 0;

2652 
out_‰ì
;

2655 
m≠≥dbno
 = 
m≠p
[0].
bm_bn
;

2656 
	`xfs_buf_ªadahód_m≠
(
dp
->
i_mou¡
->
m_ddev_èrgp
, 
m≠p
, 
nm≠
, 
›s
);

2658 
out_‰ì
:

2659 i‡(
m≠p
 !&
m≠
)

2660 
	`kmem_‰ì
(
m≠p
);

2662  
îr‹
;

2663 
	}
}

	@libxfs/xfs_da_btree.h

19 #i‚de‡
__XFS_DA_BTREE_H__


20 
	#__XFS_DA_BTREE_H__


	)

22 
	gxfs_de„r_›s
;

23 
	gxfs_öode
;

24 
	gxfs_å™s
;

25 
	gz⁄e
;

26 
	gxfs_dú_›s
;

33 
	sxfs_da_geomëry
 {

34 
	mblksize
;

35 
	mfsbcou¡
;

36 
uöt8_t
 
	mfsblog
;

37 
uöt8_t
 
	mblklog
;

38 
uöt
 
	mnode_íts
;

39 
	mmagi˝˘
;

40 
xfs_dablk_t
 
	md©ablk
;

41 
xfs_dablk_t
 
	mÀafblk
;

42 
xfs_dablk_t
 
	m‰ìblk
;

52 
	exfs_dacmp
 {

53 
	mXFS_CMP_DIFFERENT
,

54 
	mXFS_CMP_EXACT
,

55 
	mXFS_CMP_CASE


61 
	sxfs_da_¨gs
 {

62 
xfs_da_geomëry
 *
	mgeo
;

63 c⁄° 
__uöt8_t
 *
	m«me
;

64 
	m«mñí
;

65 
__uöt8_t
 
	mfûëy≥
;

66 
__uöt8_t
 *
	mvÆue
;

67 
	mvÆuñí
;

68 
	mÊags
;

69 
xfs_dahash_t
 
	mhashvÆ
;

70 
xfs_öo_t
 
	möumbî
;

71 
xfs_öode
 *
	mdp
;

72 
xfs_fsblock_t
 *
	mfú°block
;

73 
xfs_de„r_›s
 *
	mdf›s
;

74 
xfs_å™s
 *
	må™s
;

75 
xfs_exéí_t
 
	mtŸÆ
;

76 
	mwhichf‹k
;

77 
xfs_dablk_t
 
	mblkno
;

78 
	mödex
;

79 
xfs_dablk_t
 
	mrmtblkno
;

80 
	mrmtblk˙t
;

81 
	mrmtvÆuñí
;

82 
xfs_dablk_t
 
	mblkno2
;

83 
	mödex2
;

84 
xfs_dablk_t
 
	mrmtblkno2
;

85 
	mrmtblk˙t2
;

86 
	mrmtvÆuñí2
;

87 
	m›_Êags
;

88 
xfs_dacmp
 
	mcm¥esu…
;

89 } 
	txfs_da_¨gs_t
;

94 
	#XFS_DA_OP_JUSTCHECK
 0x0001

	)

95 
	#XFS_DA_OP_RENAME
 0x0002

	)

96 
	#XFS_DA_OP_ADDNAME
 0x0004

	)

97 
	#XFS_DA_OP_OKNOENT
 0x0008

	)

98 
	#XFS_DA_OP_CILOOKUP
 0x0010

	)

100 
	#XFS_DA_OP_FLAGS
 \

101 { 
XFS_DA_OP_JUSTCHECK
, "JUSTCHECK" }, \

102 { 
XFS_DA_OP_RENAME
, "RENAME" }, \

103 { 
XFS_DA_OP_ADDNAME
, "ADDNAME" }, \

104 { 
XFS_DA_OP_OKNOENT
, "OKNOENT" }, \

105 { 
XFS_DA_OP_CILOOKUP
, "CILOOKUP" }

	)

114 
	sxfs_da_°©e_blk
 {

115 
xfs_buf
 *
	mbp
;

116 
xfs_dablk_t
 
	mblkno
;

117 
xfs_daddr_t
 
	mdisk_blkno
;

118 
	mödex
;

119 
xfs_dahash_t
 
	mhashvÆ
;

120 
	mmagic
;

121 } 
	txfs_da_°©e_blk_t
;

123 
	sxfs_da_°©e_∑th
 {

124 
	ma˘ive
;

125 
xfs_da_°©e_blk_t
 
	mblk
[
XFS_DA_NODE_MAXDEPTH
];

126 } 
	txfs_da_°©e_∑th_t
;

128 
	sxfs_da_°©e
 {

129 
xfs_da_¨gs_t
 *
	m¨gs
;

130 
xfs_mou¡
 *
	mmp
;

131 
xfs_da_°©e_∑th_t
 
	m∑th
;

132 
xfs_da_°©e_∑th_t
 
	mÆç©h
;

133 
	möÀaf
;

134 
	mexåavÆid
;

135 
	mexåØ·î
;

136 
xfs_da_°©e_blk_t
 
	mexåablk
;

138 } 
	txfs_da_°©e_t
;

143 
	#XFS_DA_LOGOFF
(
BASE
, 
ADDR
Ë((*)(ADDRË- (*)(BASE))

	)

144 
	#XFS_DA_LOGRANGE
(
BASE
, 
ADDR
, 
SIZE
) \

145 (
uöt
)(
	`XFS_DA_LOGOFF
(
BASE
, 
ADDR
)), \

146 (
uöt
)(
	`XFS_DA_LOGOFF
(
BASE
, 
ADDR
)+(
SIZE
)-1)

	)

151 
	sxfs_«me›s
 {

152 
xfs_dahash_t
 (*
hash«me
)(
	mxfs_«me
 *);

153 
xfs_dacmp
 (*
com≤ame
)(
	mxfs_da_¨gs
 *,

165 
xfs_da3_node_¸óã
(
xfs_da_¨gs
 *
¨gs
, 
xfs_dablk_t
 
blkno
,

166 
Àvñ
, 
xfs_buf
 **
bµ
, 
whichf‹k
);

167 
xfs_da3_•lô
(
xfs_da_°©e_t
 *
°©e
);

172 
xfs_da3_joö
(
xfs_da_°©e_t
 *
°©e
);

173 
xfs_da3_fixhash∑th
(
xfs_da_°©e
 *
°©e
,

174 
xfs_da_°©e_∑th
 *
∑th_to_to_fix
);

179 
xfs_da3_node_lookup_öt
(
xfs_da_°©e_t
 *
°©e
, *
ªsu…
);

180 
xfs_da3_∑th_shi·
(
xfs_da_°©e_t
 *
°©e
, 
xfs_da_°©e_∑th_t
 *
∑th
,

181 
f‹w¨d
, 
ªÀa£
, *
ªsu…
);

185 
xfs_da3_blk_lök
(
xfs_da_°©e_t
 *
°©e
, 
xfs_da_°©e_blk_t
 *
ﬁd_blk
,

186 
xfs_da_°©e_blk_t
 *
√w_blk
);

187 
xfs_da3_node_ªad
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

188 
xfs_dablk_t
 
bno
, 
xfs_daddr_t
 
m≠≥dbno
,

189 
xfs_buf
 **
bµ
, 
which_f‹k
);

194 
xfs_da_grow_öode
(
xfs_da_¨gs_t
 *
¨gs
, 
xfs_dablk_t
 *
√w_blkno
);

195 
xfs_da_grow_öode_öt
(
xfs_da_¨gs
 *
¨gs
, 
xfs_fûeoff_t
 *
bno
,

196 
cou¡
);

197 
xfs_da_gë_buf
(
xfs_å™s
 *
å™s
, 
xfs_öode
 *
dp
,

198 
xfs_dablk_t
 
bno
, 
xfs_daddr_t
 
m≠≥dbno
,

199 
xfs_buf
 **
bp
, 
whichf‹k
);

200 
xfs_da_ªad_buf
(
xfs_å™s
 *
å™s
, 
xfs_öode
 *
dp
,

201 
xfs_dablk_t
 
bno
, 
xfs_daddr_t
 
m≠≥dbno
,

202 
xfs_buf
 **
bµ
, 
whichf‹k
,

203 c⁄° 
xfs_buf_›s
 *
›s
);

204 
xfs_da_ªada_buf
(
xfs_öode
 *
dp
, 
xfs_dablk_t
 
bno
,

205 
xfs_daddr_t
 
m≠≥d_bno
, 
whichf‹k
,

206 c⁄° 
xfs_buf_›s
 *
›s
);

207 
xfs_da_shrök_öode
(
xfs_da_¨gs_t
 *
¨gs
, 
xfs_dablk_t
 
dód_blkno
,

208 
xfs_buf
 *
dód_buf
);

210 
uöt
 
xfs_da_hash«me
(c⁄° 
__uöt8_t
 *
«me_°rög
, 
«me_Àngth
);

211 
xfs_dacmp
 
xfs_da_com≤ame
(
xfs_da_¨gs
 *
¨gs
,

212 c⁄° *
«me
, 
Àn
);

215 
xfs_da_°©e_t
 *
xfs_da_°©e_Æloc
();

216 
xfs_da_°©e_‰ì
(
xfs_da_°©e_t
 *
°©e
);

218 
kmem_z⁄e
 *
xfs_da_°©e_z⁄e
;

219 c⁄° 
xfs_«me›s
 
xfs_deÁu…_«me›s
;

	@libxfs/xfs_da_format.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_sh¨ed.h
"

22 
	~"xfs_f‹m©.h
"

23 
	~"xfs_log_f‹m©.h
"

24 
	~"xfs_å™s_ªsv.h
"

25 
	~"xfs_mou¡.h
"

26 
	~"xfs_da_f‹m©.h
"

27 
	~"xfs_da_båì.h
"

28 
	~"xfs_öode.h
"

29 
	~"xfs_dú2.h
"

30 
	~"xfs_dú2_¥iv.h
"

36 
	$xfs_dú2_sf_ítsize
(

37 
xfs_dú2_sf_hdr
 *
hdr
,

38 
Àn
)

40 
cou¡
 = (
xfs_dú2_sf_íåy
);

42 
cou¡
 +
Àn
;

43 
cou¡
 +
hdr
->
i8cou¡
 ? 
XFS_INO64_SIZE
 : 
XFS_INO32_SIZE
;

44  
cou¡
;

45 
	}
}

48 
	$xfs_dú3_sf_ítsize
(

49 
xfs_dú2_sf_hdr
 *
hdr
,

50 
Àn
)

52  
	`xfs_dú2_sf_ítsize
(
hdr
, 
Àn
Ë+ (
__uöt8_t
);

53 
	}
}

55 
xfs_dú2_sf_íåy
 *

56 
	$xfs_dú2_sf_√xã¡ry
(

57 
xfs_dú2_sf_hdr
 *
hdr
,

58 
xfs_dú2_sf_íåy
 *
s„p
)

60  (
xfs_dú2_sf_íåy
 *)

61 ((*)
s„p
 + 
	`xfs_dú2_sf_ítsize
(
hdr
, s„p->
«mñí
));

62 
	}
}

64 
xfs_dú2_sf_íåy
 *

65 
	$xfs_dú3_sf_√xã¡ry
(

66 
xfs_dú2_sf_hdr
 *
hdr
,

67 
xfs_dú2_sf_íåy
 *
s„p
)

69  (
xfs_dú2_sf_íåy
 *)

70 ((*)
s„p
 + 
	`xfs_dú3_sf_ítsize
(
hdr
, s„p->
«mñí
));

71 
	}
}

80 
__uöt8_t


81 
	$xfs_dú2_s„_gë_·y≥
(

82 
xfs_dú2_sf_íåy
 *
s„p
)

84  
XFS_DIR3_FT_UNKNOWN
;

85 
	}
}

88 
	$xfs_dú2_s„_put_·y≥
(

89 
xfs_dú2_sf_íåy
 *
s„p
,

90 
__uöt8_t
 
·y≥
)

92 
	`ASSERT
(
·y≥
 < 
XFS_DIR3_FT_MAX
);

93 
	}
}

95 
__uöt8_t


96 
	$xfs_dú3_s„_gë_·y≥
(

97 
xfs_dú2_sf_íåy
 *
s„p
)

99 
__uöt8_t
 
·y≥
;

101 
·y≥
 = 
s„p
->
«me
[s„p->
«mñí
];

102 i‡(
·y≥
 >
XFS_DIR3_FT_MAX
)

103  
XFS_DIR3_FT_UNKNOWN
;

104  
·y≥
;

105 
	}
}

108 
	$xfs_dú3_s„_put_·y≥
(

109 
xfs_dú2_sf_íåy
 *
s„p
,

110 
__uöt8_t
 
·y≥
)

112 
	`ASSERT
(
·y≥
 < 
XFS_DIR3_FT_MAX
);

114 
s„p
->
«me
[s„p->
«mñí
] = 
·y≥
;

115 
	}
}

124 
xfs_öo_t


125 
	$xfs_dú2_sf_gë_öo
(

126 
xfs_dú2_sf_hdr
 *
hdr
,

127 
__uöt8_t
 *
‰om
)

129 i‡(
hdr
->
i8cou¡
)

130  
	`gë_u«lig√d_be64
(
‰om
) & 0x00ffffffffffffffULL;

132  
	`gë_u«lig√d_be32
(
‰om
);

133 
	}
}

136 
	$xfs_dú2_sf_put_öo
(

137 
xfs_dú2_sf_hdr
 *
hdr
,

138 
__uöt8_t
 *
to
,

139 
xfs_öo_t
 
öo
)

141 
	`ASSERT
((
öo
 & 0xff00000000000000ULL) == 0);

143 i‡(
hdr
->
i8cou¡
)

144 
	`put_u«lig√d_be64
(
öo
, 
to
);

146 
	`put_u«lig√d_be32
(
öo
, 
to
);

147 
	}
}

149 
xfs_öo_t


150 
	$xfs_dú2_sf_gë_∑ª¡_öo
(

151 
xfs_dú2_sf_hdr
 *
hdr
)

153  
	`xfs_dú2_sf_gë_öo
(
hdr
, hdr->
∑ª¡
);

154 
	}
}

157 
	$xfs_dú2_sf_put_∑ª¡_öo
(

158 
xfs_dú2_sf_hdr
 *
hdr
,

159 
xfs_öo_t
 
öo
)

161 
	`xfs_dú2_sf_put_öo
(
hdr
, hdr->
∑ª¡
, 
öo
);

162 
	}
}

170 
xfs_öo_t


171 
	$xfs_dú2_s„_gë_öo
(

172 
xfs_dú2_sf_hdr
 *
hdr
,

173 
xfs_dú2_sf_íåy
 *
s„p
)

175  
	`xfs_dú2_sf_gë_öo
(
hdr
, &
s„p
->
«me
[s„p->
«mñí
]);

176 
	}
}

179 
	$xfs_dú2_s„_put_öo
(

180 
xfs_dú2_sf_hdr
 *
hdr
,

181 
xfs_dú2_sf_íåy
 *
s„p
,

182 
xfs_öo_t
 
öo
)

184 
	`xfs_dú2_sf_put_öo
(
hdr
, &
s„p
->
«me
[s„p->
«mñí
], 
öo
);

185 
	}
}

187 
xfs_öo_t


188 
	$xfs_dú3_s„_gë_öo
(

189 
xfs_dú2_sf_hdr
 *
hdr
,

190 
xfs_dú2_sf_íåy
 *
s„p
)

192  
	`xfs_dú2_sf_gë_öo
(
hdr
, &
s„p
->
«me
[s„p->
«mñí
 + 1]);

193 
	}
}

196 
	$xfs_dú3_s„_put_öo
(

197 
xfs_dú2_sf_hdr
 *
hdr
,

198 
xfs_dú2_sf_íåy
 *
s„p
,

199 
xfs_öo_t
 
öo
)

201 
	`xfs_dú2_sf_put_öo
(
hdr
, &
s„p
->
«me
[s„p->
«mñí
 + 1], 
öo
);

202 
	}
}

222 
	#XFS_DIR2_DATA_ENTSIZE
(
n
) \

223 
	`round_up
((
	`off£tof
(
xfs_dú2_d©a_íåy
, 
«me
[0]Ë+ (
n
) + \

224 (
xfs_dú2_d©a_off_t
)), 
XFS_DIR2_DATA_ALIGN
)

	)

226 
	#XFS_DIR3_DATA_ENTSIZE
(
n
) \

227 
	`round_up
((
	`off£tof
(
xfs_dú2_d©a_íåy
, 
«me
[0]Ë+ (
n
) + \

228 (
xfs_dú2_d©a_off_t
Ë+ (
__uöt8_t
)), \

229 
XFS_DIR2_DATA_ALIGN
)

	)

232 
	$xfs_dú2_d©a_ítsize
(

233 
n
)

235  
	`XFS_DIR2_DATA_ENTSIZE
(
n
);

236 
	}
}

239 
	$xfs_dú3_d©a_ítsize
(

240 
n
)

242  
	`XFS_DIR3_DATA_ENTSIZE
(
n
);

243 
	}
}

245 
__uöt8_t


246 
	$xfs_dú2_d©a_gë_·y≥
(

247 
xfs_dú2_d©a_íåy
 *
dï
)

249  
XFS_DIR3_FT_UNKNOWN
;

250 
	}
}

253 
	$xfs_dú2_d©a_put_·y≥
(

254 
xfs_dú2_d©a_íåy
 *
dï
,

255 
__uöt8_t
 
·y≥
)

257 
	`ASSERT
(
·y≥
 < 
XFS_DIR3_FT_MAX
);

258 
	}
}

260 
__uöt8_t


261 
	$xfs_dú3_d©a_gë_·y≥
(

262 
xfs_dú2_d©a_íåy
 *
dï
)

264 
__uöt8_t
 
·y≥
 = 
dï
->
«me
[dï->
«mñí
];

266 i‡(
·y≥
 >
XFS_DIR3_FT_MAX
)

267  
XFS_DIR3_FT_UNKNOWN
;

268  
·y≥
;

269 
	}
}

272 
	$xfs_dú3_d©a_put_·y≥
(

273 
xfs_dú2_d©a_íåy
 *
dï
,

274 
__uöt8_t
 
ty≥
)

276 
	`ASSERT
(
ty≥
 < 
XFS_DIR3_FT_MAX
);

277 
	`ASSERT
(
dï
->
«mñí
 != 0);

279 
dï
->
«me
[dï->
«mñí
] = 
ty≥
;

280 
	}
}

285 
__be16
 *

286 
	$xfs_dú2_d©a_íåy_èg_p
(

287 
xfs_dú2_d©a_íåy
 *
dï
)

289  (
__be16
 *)((*)
dï
 +

290 
	`xfs_dú2_d©a_ítsize
(
dï
->
«mñí
Ë- (
__be16
));

291 
	}
}

293 
__be16
 *

294 
	$xfs_dú3_d©a_íåy_èg_p
(

295 
xfs_dú2_d©a_íåy
 *
dï
)

297  (
__be16
 *)((*)
dï
 +

298 
	`xfs_dú3_d©a_ítsize
(
dï
->
«mñí
Ë- (
__be16
));

299 
	}
}

304 
xfs_dú2_d©a_íåy
 *

305 
	$xfs_dú2_d©a_dŸ_íåy_p
(

306 
xfs_dú2_d©a_hdr
 *
hdr
)

308  (
xfs_dú2_d©a_íåy
 *)

309 ((*)
hdr
 + (
xfs_dú2_d©a_hdr
));

310 
	}
}

312 
xfs_dú2_d©a_íåy
 *

313 
	$xfs_dú2_d©a_dŸdŸ_íåy_p
(

314 
xfs_dú2_d©a_hdr
 *
hdr
)

316  (
xfs_dú2_d©a_íåy
 *)

317 ((*)
hdr
 + (
xfs_dú2_d©a_hdr
) +

318 
	`XFS_DIR2_DATA_ENTSIZE
(1));

319 
	}
}

321 
xfs_dú2_d©a_íåy
 *

322 
	$xfs_dú2_d©a_fú°_íåy_p
(

323 
xfs_dú2_d©a_hdr
 *
hdr
)

325  (
xfs_dú2_d©a_íåy
 *)

326 ((*)
hdr
 + (
xfs_dú2_d©a_hdr
) +

327 
	`XFS_DIR2_DATA_ENTSIZE
(1) +

328 
	`XFS_DIR2_DATA_ENTSIZE
(2));

329 
	}
}

331 
xfs_dú2_d©a_íåy
 *

332 
	$xfs_dú2_·y≥_d©a_dŸdŸ_íåy_p
(

333 
xfs_dú2_d©a_hdr
 *
hdr
)

335  (
xfs_dú2_d©a_íåy
 *)

336 ((*)
hdr
 + (
xfs_dú2_d©a_hdr
) +

337 
	`XFS_DIR3_DATA_ENTSIZE
(1));

338 
	}
}

340 
xfs_dú2_d©a_íåy
 *

341 
	$xfs_dú2_·y≥_d©a_fú°_íåy_p
(

342 
xfs_dú2_d©a_hdr
 *
hdr
)

344  (
xfs_dú2_d©a_íåy
 *)

345 ((*)
hdr
 + (
xfs_dú2_d©a_hdr
) +

346 
	`XFS_DIR3_DATA_ENTSIZE
(1) +

347 
	`XFS_DIR3_DATA_ENTSIZE
(2));

348 
	}
}

350 
xfs_dú2_d©a_íåy
 *

351 
	$xfs_dú3_d©a_dŸ_íåy_p
(

352 
xfs_dú2_d©a_hdr
 *
hdr
)

354  (
xfs_dú2_d©a_íåy
 *)

355 ((*)
hdr
 + (
xfs_dú3_d©a_hdr
));

356 
	}
}

358 
xfs_dú2_d©a_íåy
 *

359 
	$xfs_dú3_d©a_dŸdŸ_íåy_p
(

360 
xfs_dú2_d©a_hdr
 *
hdr
)

362  (
xfs_dú2_d©a_íåy
 *)

363 ((*)
hdr
 + (
xfs_dú3_d©a_hdr
) +

364 
	`XFS_DIR3_DATA_ENTSIZE
(1));

365 
	}
}

367 
xfs_dú2_d©a_íåy
 *

368 
	$xfs_dú3_d©a_fú°_íåy_p
(

369 
xfs_dú2_d©a_hdr
 *
hdr
)

371  (
xfs_dú2_d©a_íåy
 *)

372 ((*)
hdr
 + (
xfs_dú3_d©a_hdr
) +

373 
	`XFS_DIR3_DATA_ENTSIZE
(1) +

374 
	`XFS_DIR3_DATA_ENTSIZE
(2));

375 
	}
}

377 
xfs_dú2_d©a_‰ì
 *

378 
	$xfs_dú2_d©a_be°‰ì_p
(
xfs_dú2_d©a_hdr
 *
hdr
)

380  
hdr
->
be°‰ì
;

381 
	}
}

383 
xfs_dú2_d©a_‰ì
 *

384 
	$xfs_dú3_d©a_be°‰ì_p
(
xfs_dú2_d©a_hdr
 *
hdr
)

386  ((
xfs_dú3_d©a_hdr
 *)
hdr
)->
be°_‰ì
;

387 
	}
}

389 
xfs_dú2_d©a_íåy
 *

390 
	$xfs_dú2_d©a_íåy_p
(
xfs_dú2_d©a_hdr
 *
hdr
)

392  (
xfs_dú2_d©a_íåy
 *)

393 ((*)
hdr
 + (
xfs_dú2_d©a_hdr
));

394 
	}
}

396 
xfs_dú2_d©a_unu£d
 *

397 
	$xfs_dú2_d©a_unu£d_p
(
xfs_dú2_d©a_hdr
 *
hdr
)

399  (
xfs_dú2_d©a_unu£d
 *)

400 ((*)
hdr
 + (
xfs_dú2_d©a_hdr
));

401 
	}
}

403 
xfs_dú2_d©a_íåy
 *

404 
	$xfs_dú3_d©a_íåy_p
(
xfs_dú2_d©a_hdr
 *
hdr
)

406  (
xfs_dú2_d©a_íåy
 *)

407 ((*)
hdr
 + (
xfs_dú3_d©a_hdr
));

408 
	}
}

410 
xfs_dú2_d©a_unu£d
 *

411 
	$xfs_dú3_d©a_unu£d_p
(
xfs_dú2_d©a_hdr
 *
hdr
)

413  (
xfs_dú2_d©a_unu£d
 *)

414 ((*)
hdr
 + (
xfs_dú3_d©a_hdr
));

415 
	}
}

422 
	$xfs_dú2_max_Àaf_íts
(
xfs_da_geomëry
 *
geo
)

424  (
geo
->
blksize
 - (
xfs_dú2_Àaf_hdr
)) /

425 (
uöt
)(
xfs_dú2_Àaf_íåy
);

426 
	}
}

428 
xfs_dú2_Àaf_íåy
 *

429 
	$xfs_dú2_Àaf_íts_p
(
xfs_dú2_Àaf
 *
Õ
)

431  
Õ
->
__íts
;

432 
	}
}

435 
	$xfs_dú3_max_Àaf_íts
(
xfs_da_geomëry
 *
geo
)

437  (
geo
->
blksize
 - (
xfs_dú3_Àaf_hdr
)) /

438 (
uöt
)(
xfs_dú2_Àaf_íåy
);

439 
	}
}

441 
xfs_dú2_Àaf_íåy
 *

442 
	$xfs_dú3_Àaf_íts_p
(
xfs_dú2_Àaf
 *
Õ
)

444  ((
xfs_dú3_Àaf
 *)
Õ
)->
__íts
;

445 
	}
}

448 
	$xfs_dú2_Àaf_hdr_‰om_disk
(

449 
xfs_dú3_i˛óf_hdr
 *
to
,

450 
xfs_dú2_Àaf
 *
‰om
)

452 
to
->
f‹w
 = 
	`be32_to_˝u
(
‰om
->
hdr
.
öfo
.forw);

453 
to
->
back
 = 
	`be32_to_˝u
(
‰om
->
hdr
.
öfo
.back);

454 
to
->
magic
 = 
	`be16_to_˝u
(
‰om
->
hdr
.
öfo
.magic);

455 
to
->
cou¡
 = 
	`be16_to_˝u
(
‰om
->
hdr
.count);

456 
to
->
°Æe
 = 
	`be16_to_˝u
(
‰om
->
hdr
.stale);

458 
	`ASSERT
(
to
->
magic
 =
XFS_DIR2_LEAF1_MAGIC
 ||

459 
to
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
);

460 
	}
}

463 
	$xfs_dú2_Àaf_hdr_to_disk
(

464 
xfs_dú2_Àaf
 *
to
,

465 
xfs_dú3_i˛óf_hdr
 *
‰om
)

467 
	`ASSERT
(
‰om
->
magic
 =
XFS_DIR2_LEAF1_MAGIC
 ||

468 
‰om
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
);

470 
to
->
hdr
.
öfo
.
f‹w
 = 
	`˝u_to_be32
(
‰om
->forw);

471 
to
->
hdr
.
öfo
.
back
 = 
	`˝u_to_be32
(
‰om
->back);

472 
to
->
hdr
.
öfo
.
magic
 = 
	`˝u_to_be16
(
‰om
->magic);

473 
to
->
hdr
.
cou¡
 = 
	`˝u_to_be16
(
‰om
->count);

474 
to
->
hdr
.
°Æe
 = 
	`˝u_to_be16
(
‰om
->stale);

475 
	}
}

478 
	$xfs_dú3_Àaf_hdr_‰om_disk
(

479 
xfs_dú3_i˛óf_hdr
 *
to
,

480 
xfs_dú2_Àaf
 *
‰om
)

482 
xfs_dú3_Àaf_hdr
 *
hdr3
 = (xfs_dú3_Àaf_hd∏*)
‰om
;

484 
to
->
f‹w
 = 
	`be32_to_˝u
(
hdr3
->
öfo
.
hdr
.forw);

485 
to
->
back
 = 
	`be32_to_˝u
(
hdr3
->
öfo
.
hdr
.back);

486 
to
->
magic
 = 
	`be16_to_˝u
(
hdr3
->
öfo
.
hdr
.magic);

487 
to
->
cou¡
 = 
	`be16_to_˝u
(
hdr3
->count);

488 
to
->
°Æe
 = 
	`be16_to_˝u
(
hdr3
->stale);

490 
	`ASSERT
(
to
->
magic
 =
XFS_DIR3_LEAF1_MAGIC
 ||

491 
to
->
magic
 =
XFS_DIR3_LEAFN_MAGIC
);

492 
	}
}

495 
	$xfs_dú3_Àaf_hdr_to_disk
(

496 
xfs_dú2_Àaf
 *
to
,

497 
xfs_dú3_i˛óf_hdr
 *
‰om
)

499 
xfs_dú3_Àaf_hdr
 *
hdr3
 = (xfs_dú3_Àaf_hd∏*)
to
;

501 
	`ASSERT
(
‰om
->
magic
 =
XFS_DIR3_LEAF1_MAGIC
 ||

502 
‰om
->
magic
 =
XFS_DIR3_LEAFN_MAGIC
);

504 
hdr3
->
öfo
.
hdr
.
f‹w
 = 
	`˝u_to_be32
(
‰om
->forw);

505 
hdr3
->
öfo
.
hdr
.
back
 = 
	`˝u_to_be32
(
‰om
->back);

506 
hdr3
->
öfo
.
hdr
.
magic
 = 
	`˝u_to_be16
(
‰om
->magic);

507 
hdr3
->
cou¡
 = 
	`˝u_to_be16
(
‰om
->count);

508 
hdr3
->
°Æe
 = 
	`˝u_to_be16
(
‰om
->stale);

509 
	}
}

515 
xfs_da_node_íåy
 *

516 
	$xfs_da2_node_åì_p
(
xfs_da_öäode
 *
d≠
)

518  
d≠
->
__båì
;

519 
	}
}

521 
xfs_da_node_íåy
 *

522 
	$xfs_da3_node_åì_p
(
xfs_da_öäode
 *
d≠
)

524  ((
xfs_da3_öäode
 *)
d≠
)->
__båì
;

525 
	}
}

528 
	$xfs_da2_node_hdr_‰om_disk
(

529 
xfs_da3_i˙ode_hdr
 *
to
,

530 
xfs_da_öäode
 *
‰om
)

532 
	`ASSERT
(
‰om
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DA_NODE_MAGIC
));

533 
to
->
f‹w
 = 
	`be32_to_˝u
(
‰om
->
hdr
.
öfo
.forw);

534 
to
->
back
 = 
	`be32_to_˝u
(
‰om
->
hdr
.
öfo
.back);

535 
to
->
magic
 = 
	`be16_to_˝u
(
‰om
->
hdr
.
öfo
.magic);

536 
to
->
cou¡
 = 
	`be16_to_˝u
(
‰om
->
hdr
.
__cou¡
);

537 
to
->
Àvñ
 = 
	`be16_to_˝u
(
‰om
->
hdr
.
__Àvñ
);

538 
	}
}

541 
	$xfs_da2_node_hdr_to_disk
(

542 
xfs_da_öäode
 *
to
,

543 
xfs_da3_i˙ode_hdr
 *
‰om
)

545 
	`ASSERT
(
‰om
->
magic
 =
XFS_DA_NODE_MAGIC
);

546 
to
->
hdr
.
öfo
.
f‹w
 = 
	`˝u_to_be32
(
‰om
->forw);

547 
to
->
hdr
.
öfo
.
back
 = 
	`˝u_to_be32
(
‰om
->back);

548 
to
->
hdr
.
öfo
.
magic
 = 
	`˝u_to_be16
(
‰om
->magic);

549 
to
->
hdr
.
__cou¡
 = 
	`˝u_to_be16
(
‰om
->
cou¡
);

550 
to
->
hdr
.
__Àvñ
 = 
	`˝u_to_be16
(
‰om
->
Àvñ
);

551 
	}
}

554 
	$xfs_da3_node_hdr_‰om_disk
(

555 
xfs_da3_i˙ode_hdr
 *
to
,

556 
xfs_da_öäode
 *
‰om
)

558 
xfs_da3_node_hdr
 *
hdr3
 = (xfs_da3_node_hd∏*)
‰om
;

560 
	`ASSERT
(
‰om
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DA3_NODE_MAGIC
));

561 
to
->
f‹w
 = 
	`be32_to_˝u
(
hdr3
->
öfo
.
hdr
.forw);

562 
to
->
back
 = 
	`be32_to_˝u
(
hdr3
->
öfo
.
hdr
.back);

563 
to
->
magic
 = 
	`be16_to_˝u
(
hdr3
->
öfo
.
hdr
.magic);

564 
to
->
cou¡
 = 
	`be16_to_˝u
(
hdr3
->
__cou¡
);

565 
to
->
Àvñ
 = 
	`be16_to_˝u
(
hdr3
->
__Àvñ
);

566 
	}
}

569 
	$xfs_da3_node_hdr_to_disk
(

570 
xfs_da_öäode
 *
to
,

571 
xfs_da3_i˙ode_hdr
 *
‰om
)

573 
xfs_da3_node_hdr
 *
hdr3
 = (xfs_da3_node_hd∏*)
to
;

575 
	`ASSERT
(
‰om
->
magic
 =
XFS_DA3_NODE_MAGIC
);

576 
hdr3
->
öfo
.
hdr
.
f‹w
 = 
	`˝u_to_be32
(
‰om
->forw);

577 
hdr3
->
öfo
.
hdr
.
back
 = 
	`˝u_to_be32
(
‰om
->back);

578 
hdr3
->
öfo
.
hdr
.
magic
 = 
	`˝u_to_be16
(
‰om
->magic);

579 
hdr3
->
__cou¡
 = 
	`˝u_to_be16
(
‰om
->
cou¡
);

580 
hdr3
->
__Àvñ
 = 
	`˝u_to_be16
(
‰om
->
Àvñ
);

581 
	}
}

588 
	$xfs_dú2_‰ì_max_be°s
(
xfs_da_geomëry
 *
geo
)

590  (
geo
->
blksize
 - (
xfs_dú2_‰ì_hdr
)) /

591 (
xfs_dú2_d©a_off_t
);

592 
	}
}

594 
__be16
 *

595 
	$xfs_dú2_‰ì_be°s_p
(
xfs_dú2_‰ì
 *
‰ì
)

597  (
__be16
 *)((*)
‰ì
 + (
xfs_dú2_‰ì_hdr
));

598 
	}
}

603 
xfs_dú2_db_t


604 
	$xfs_dú2_db_to_fdb
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_db_t
 
db
)

606  
	`xfs_dú2_byã_to_db
(
geo
, 
XFS_DIR2_FREE_OFFSET
) +

607 (
db
 / 
	`xfs_dú2_‰ì_max_be°s
(
geo
));

608 
	}
}

614 
	$xfs_dú2_db_to_fdödex
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_db_t
 
db
)

616  
db
 % 
	`xfs_dú2_‰ì_max_be°s
(
geo
);

617 
	}
}

620 
	$xfs_dú3_‰ì_max_be°s
(
xfs_da_geomëry
 *
geo
)

622  (
geo
->
blksize
 - (
xfs_dú3_‰ì_hdr
)) /

623 (
xfs_dú2_d©a_off_t
);

624 
	}
}

626 
__be16
 *

627 
	$xfs_dú3_‰ì_be°s_p
(
xfs_dú2_‰ì
 *
‰ì
)

629  (
__be16
 *)((*)
‰ì
 + (
xfs_dú3_‰ì_hdr
));

630 
	}
}

635 
xfs_dú2_db_t


636 
	$xfs_dú3_db_to_fdb
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_db_t
 
db
)

638  
	`xfs_dú2_byã_to_db
(
geo
, 
XFS_DIR2_FREE_OFFSET
) +

639 (
db
 / 
	`xfs_dú3_‰ì_max_be°s
(
geo
));

640 
	}
}

646 
	$xfs_dú3_db_to_fdödex
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_db_t
 
db
)

648  
db
 % 
	`xfs_dú3_‰ì_max_be°s
(
geo
);

649 
	}
}

652 
	$xfs_dú2_‰ì_hdr_‰om_disk
(

653 
xfs_dú3_ic‰ì_hdr
 *
to
,

654 
xfs_dú2_‰ì
 *
‰om
)

656 
to
->
magic
 = 
	`be32_to_˝u
(
‰om
->
hdr
.magic);

657 
to
->
fú°db
 = 
	`be32_to_˝u
(
‰om
->
hdr
.firstdb);

658 
to
->
nvÆid
 = 
	`be32_to_˝u
(
‰om
->
hdr
.nvalid);

659 
to
->
nu£d
 = 
	`be32_to_˝u
(
‰om
->
hdr
.nused);

660 
	`ASSERT
(
to
->
magic
 =
XFS_DIR2_FREE_MAGIC
);

661 
	}
}

664 
	$xfs_dú2_‰ì_hdr_to_disk
(

665 
xfs_dú2_‰ì
 *
to
,

666 
xfs_dú3_ic‰ì_hdr
 *
‰om
)

668 
	`ASSERT
(
‰om
->
magic
 =
XFS_DIR2_FREE_MAGIC
);

670 
to
->
hdr
.
magic
 = 
	`˝u_to_be32
(
‰om
->magic);

671 
to
->
hdr
.
fú°db
 = 
	`˝u_to_be32
(
‰om
->firstdb);

672 
to
->
hdr
.
nvÆid
 = 
	`˝u_to_be32
(
‰om
->nvalid);

673 
to
->
hdr
.
nu£d
 = 
	`˝u_to_be32
(
‰om
->nused);

674 
	}
}

677 
	$xfs_dú3_‰ì_hdr_‰om_disk
(

678 
xfs_dú3_ic‰ì_hdr
 *
to
,

679 
xfs_dú2_‰ì
 *
‰om
)

681 
xfs_dú3_‰ì_hdr
 *
hdr3
 = (xfs_dú3_‰ì_hd∏*)
‰om
;

683 
to
->
magic
 = 
	`be32_to_˝u
(
hdr3
->
hdr
.magic);

684 
to
->
fú°db
 = 
	`be32_to_˝u
(
hdr3
->firstdb);

685 
to
->
nvÆid
 = 
	`be32_to_˝u
(
hdr3
->nvalid);

686 
to
->
nu£d
 = 
	`be32_to_˝u
(
hdr3
->nused);

688 
	`ASSERT
(
to
->
magic
 =
XFS_DIR3_FREE_MAGIC
);

689 
	}
}

692 
	$xfs_dú3_‰ì_hdr_to_disk
(

693 
xfs_dú2_‰ì
 *
to
,

694 
xfs_dú3_ic‰ì_hdr
 *
‰om
)

696 
xfs_dú3_‰ì_hdr
 *
hdr3
 = (xfs_dú3_‰ì_hd∏*)
to
;

698 
	`ASSERT
(
‰om
->
magic
 =
XFS_DIR3_FREE_MAGIC
);

700 
hdr3
->
hdr
.
magic
 = 
	`˝u_to_be32
(
‰om
->magic);

701 
hdr3
->
fú°db
 = 
	`˝u_to_be32
(
‰om
->firstdb);

702 
hdr3
->
nvÆid
 = 
	`˝u_to_be32
(
‰om
->nvalid);

703 
hdr3
->
nu£d
 = 
	`˝u_to_be32
(
‰om
->nused);

704 
	}
}

706 c⁄° 
xfs_dú_›s
 
	gxfs_dú2_›s
 = {

707 .
sf_ítsize
 = 
xfs_dú2_sf_ítsize
,

708 .
	gsf_√xã¡ry
 = 
xfs_dú2_sf_√xã¡ry
,

709 .
	gsf_gë_·y≥
 = 
xfs_dú2_s„_gë_·y≥
,

710 .
	gsf_put_·y≥
 = 
xfs_dú2_s„_put_·y≥
,

711 .
	gsf_gë_öo
 = 
xfs_dú2_s„_gë_öo
,

712 .
	gsf_put_öo
 = 
xfs_dú2_s„_put_öo
,

713 .
	gsf_gë_∑ª¡_öo
 = 
xfs_dú2_sf_gë_∑ª¡_öo
,

714 .
	gsf_put_∑ª¡_öo
 = 
xfs_dú2_sf_put_∑ª¡_öo
,

716 .
	gd©a_ítsize
 = 
xfs_dú2_d©a_ítsize
,

717 .
	gd©a_gë_·y≥
 = 
xfs_dú2_d©a_gë_·y≥
,

718 .
	gd©a_put_·y≥
 = 
xfs_dú2_d©a_put_·y≥
,

719 .
	gd©a_íåy_èg_p
 = 
xfs_dú2_d©a_íåy_èg_p
,

720 .
	gd©a_be°‰ì_p
 = 
xfs_dú2_d©a_be°‰ì_p
,

722 .
	gd©a_dŸ_off£t
 = (
xfs_dú2_d©a_hdr
),

723 .
	gd©a_dŸdŸ_off£t
 = (
xfs_dú2_d©a_hdr
) +

724 
XFS_DIR2_DATA_ENTSIZE
(1),

725 .
	gd©a_fú°_off£t
 = (
xfs_dú2_d©a_hdr
) +

726 
XFS_DIR2_DATA_ENTSIZE
(1) +

727 
XFS_DIR2_DATA_ENTSIZE
(2),

728 .
	gd©a_íåy_off£t
 = (
xfs_dú2_d©a_hdr
),

730 .
	gd©a_dŸ_íåy_p
 = 
xfs_dú2_d©a_dŸ_íåy_p
,

731 .
	gd©a_dŸdŸ_íåy_p
 = 
xfs_dú2_d©a_dŸdŸ_íåy_p
,

732 .
	gd©a_fú°_íåy_p
 = 
xfs_dú2_d©a_fú°_íåy_p
,

733 .
	gd©a_íåy_p
 = 
xfs_dú2_d©a_íåy_p
,

734 .
	gd©a_unu£d_p
 = 
xfs_dú2_d©a_unu£d_p
,

736 .
	gÀaf_hdr_size
 = (
xfs_dú2_Àaf_hdr
),

737 .
	gÀaf_hdr_to_disk
 = 
xfs_dú2_Àaf_hdr_to_disk
,

738 .
	gÀaf_hdr_‰om_disk
 = 
xfs_dú2_Àaf_hdr_‰om_disk
,

739 .
	gÀaf_max_íts
 = 
xfs_dú2_max_Àaf_íts
,

740 .
	gÀaf_íts_p
 = 
xfs_dú2_Àaf_íts_p
,

742 .
	gnode_hdr_size
 = (
xfs_da_node_hdr
),

743 .
	gnode_hdr_to_disk
 = 
xfs_da2_node_hdr_to_disk
,

744 .
	gnode_hdr_‰om_disk
 = 
xfs_da2_node_hdr_‰om_disk
,

745 .
	gnode_åì_p
 = 
xfs_da2_node_åì_p
,

747 .
	g‰ì_hdr_size
 = (
xfs_dú2_‰ì_hdr
),

748 .
	g‰ì_hdr_to_disk
 = 
xfs_dú2_‰ì_hdr_to_disk
,

749 .
	g‰ì_hdr_‰om_disk
 = 
xfs_dú2_‰ì_hdr_‰om_disk
,

750 .
	g‰ì_max_be°s
 = 
xfs_dú2_‰ì_max_be°s
,

751 .
	g‰ì_be°s_p
 = 
xfs_dú2_‰ì_be°s_p
,

752 .
	gdb_to_fdb
 = 
xfs_dú2_db_to_fdb
,

753 .
	gdb_to_fdödex
 = 
xfs_dú2_db_to_fdödex
,

756 c⁄° 
xfs_dú_›s
 
	gxfs_dú2_·y≥_›s
 = {

757 .
sf_ítsize
 = 
xfs_dú3_sf_ítsize
,

758 .
	gsf_√xã¡ry
 = 
xfs_dú3_sf_√xã¡ry
,

759 .
	gsf_gë_·y≥
 = 
xfs_dú3_s„_gë_·y≥
,

760 .
	gsf_put_·y≥
 = 
xfs_dú3_s„_put_·y≥
,

761 .
	gsf_gë_öo
 = 
xfs_dú3_s„_gë_öo
,

762 .
	gsf_put_öo
 = 
xfs_dú3_s„_put_öo
,

763 .
	gsf_gë_∑ª¡_öo
 = 
xfs_dú2_sf_gë_∑ª¡_öo
,

764 .
	gsf_put_∑ª¡_öo
 = 
xfs_dú2_sf_put_∑ª¡_öo
,

766 .
	gd©a_ítsize
 = 
xfs_dú3_d©a_ítsize
,

767 .
	gd©a_gë_·y≥
 = 
xfs_dú3_d©a_gë_·y≥
,

768 .
	gd©a_put_·y≥
 = 
xfs_dú3_d©a_put_·y≥
,

769 .
	gd©a_íåy_èg_p
 = 
xfs_dú3_d©a_íåy_èg_p
,

770 .
	gd©a_be°‰ì_p
 = 
xfs_dú2_d©a_be°‰ì_p
,

772 .
	gd©a_dŸ_off£t
 = (
xfs_dú2_d©a_hdr
),

773 .
	gd©a_dŸdŸ_off£t
 = (
xfs_dú2_d©a_hdr
) +

774 
XFS_DIR3_DATA_ENTSIZE
(1),

775 .
	gd©a_fú°_off£t
 = (
xfs_dú2_d©a_hdr
) +

776 
XFS_DIR3_DATA_ENTSIZE
(1) +

777 
XFS_DIR3_DATA_ENTSIZE
(2),

778 .
	gd©a_íåy_off£t
 = (
xfs_dú2_d©a_hdr
),

780 .
	gd©a_dŸ_íåy_p
 = 
xfs_dú2_d©a_dŸ_íåy_p
,

781 .
	gd©a_dŸdŸ_íåy_p
 = 
xfs_dú2_·y≥_d©a_dŸdŸ_íåy_p
,

782 .
	gd©a_fú°_íåy_p
 = 
xfs_dú2_·y≥_d©a_fú°_íåy_p
,

783 .
	gd©a_íåy_p
 = 
xfs_dú2_d©a_íåy_p
,

784 .
	gd©a_unu£d_p
 = 
xfs_dú2_d©a_unu£d_p
,

786 .
	gÀaf_hdr_size
 = (
xfs_dú2_Àaf_hdr
),

787 .
	gÀaf_hdr_to_disk
 = 
xfs_dú2_Àaf_hdr_to_disk
,

788 .
	gÀaf_hdr_‰om_disk
 = 
xfs_dú2_Àaf_hdr_‰om_disk
,

789 .
	gÀaf_max_íts
 = 
xfs_dú2_max_Àaf_íts
,

790 .
	gÀaf_íts_p
 = 
xfs_dú2_Àaf_íts_p
,

792 .
	gnode_hdr_size
 = (
xfs_da_node_hdr
),

793 .
	gnode_hdr_to_disk
 = 
xfs_da2_node_hdr_to_disk
,

794 .
	gnode_hdr_‰om_disk
 = 
xfs_da2_node_hdr_‰om_disk
,

795 .
	gnode_åì_p
 = 
xfs_da2_node_åì_p
,

797 .
	g‰ì_hdr_size
 = (
xfs_dú2_‰ì_hdr
),

798 .
	g‰ì_hdr_to_disk
 = 
xfs_dú2_‰ì_hdr_to_disk
,

799 .
	g‰ì_hdr_‰om_disk
 = 
xfs_dú2_‰ì_hdr_‰om_disk
,

800 .
	g‰ì_max_be°s
 = 
xfs_dú2_‰ì_max_be°s
,

801 .
	g‰ì_be°s_p
 = 
xfs_dú2_‰ì_be°s_p
,

802 .
	gdb_to_fdb
 = 
xfs_dú2_db_to_fdb
,

803 .
	gdb_to_fdödex
 = 
xfs_dú2_db_to_fdödex
,

806 c⁄° 
xfs_dú_›s
 
	gxfs_dú3_›s
 = {

807 .
sf_ítsize
 = 
xfs_dú3_sf_ítsize
,

808 .
	gsf_√xã¡ry
 = 
xfs_dú3_sf_√xã¡ry
,

809 .
	gsf_gë_·y≥
 = 
xfs_dú3_s„_gë_·y≥
,

810 .
	gsf_put_·y≥
 = 
xfs_dú3_s„_put_·y≥
,

811 .
	gsf_gë_öo
 = 
xfs_dú3_s„_gë_öo
,

812 .
	gsf_put_öo
 = 
xfs_dú3_s„_put_öo
,

813 .
	gsf_gë_∑ª¡_öo
 = 
xfs_dú2_sf_gë_∑ª¡_öo
,

814 .
	gsf_put_∑ª¡_öo
 = 
xfs_dú2_sf_put_∑ª¡_öo
,

816 .
	gd©a_ítsize
 = 
xfs_dú3_d©a_ítsize
,

817 .
	gd©a_gë_·y≥
 = 
xfs_dú3_d©a_gë_·y≥
,

818 .
	gd©a_put_·y≥
 = 
xfs_dú3_d©a_put_·y≥
,

819 .
	gd©a_íåy_èg_p
 = 
xfs_dú3_d©a_íåy_èg_p
,

820 .
	gd©a_be°‰ì_p
 = 
xfs_dú3_d©a_be°‰ì_p
,

822 .
	gd©a_dŸ_off£t
 = (
xfs_dú3_d©a_hdr
),

823 .
	gd©a_dŸdŸ_off£t
 = (
xfs_dú3_d©a_hdr
) +

824 
XFS_DIR3_DATA_ENTSIZE
(1),

825 .
	gd©a_fú°_off£t
 = (
xfs_dú3_d©a_hdr
) +

826 
XFS_DIR3_DATA_ENTSIZE
(1) +

827 
XFS_DIR3_DATA_ENTSIZE
(2),

828 .
	gd©a_íåy_off£t
 = (
xfs_dú3_d©a_hdr
),

830 .
	gd©a_dŸ_íåy_p
 = 
xfs_dú3_d©a_dŸ_íåy_p
,

831 .
	gd©a_dŸdŸ_íåy_p
 = 
xfs_dú3_d©a_dŸdŸ_íåy_p
,

832 .
	gd©a_fú°_íåy_p
 = 
xfs_dú3_d©a_fú°_íåy_p
,

833 .
	gd©a_íåy_p
 = 
xfs_dú3_d©a_íåy_p
,

834 .
	gd©a_unu£d_p
 = 
xfs_dú3_d©a_unu£d_p
,

836 .
	gÀaf_hdr_size
 = (
xfs_dú3_Àaf_hdr
),

837 .
	gÀaf_hdr_to_disk
 = 
xfs_dú3_Àaf_hdr_to_disk
,

838 .
	gÀaf_hdr_‰om_disk
 = 
xfs_dú3_Àaf_hdr_‰om_disk
,

839 .
	gÀaf_max_íts
 = 
xfs_dú3_max_Àaf_íts
,

840 .
	gÀaf_íts_p
 = 
xfs_dú3_Àaf_íts_p
,

842 .
	gnode_hdr_size
 = (
xfs_da3_node_hdr
),

843 .
	gnode_hdr_to_disk
 = 
xfs_da3_node_hdr_to_disk
,

844 .
	gnode_hdr_‰om_disk
 = 
xfs_da3_node_hdr_‰om_disk
,

845 .
	gnode_åì_p
 = 
xfs_da3_node_åì_p
,

847 .
	g‰ì_hdr_size
 = (
xfs_dú3_‰ì_hdr
),

848 .
	g‰ì_hdr_to_disk
 = 
xfs_dú3_‰ì_hdr_to_disk
,

849 .
	g‰ì_hdr_‰om_disk
 = 
xfs_dú3_‰ì_hdr_‰om_disk
,

850 .
	g‰ì_max_be°s
 = 
xfs_dú3_‰ì_max_be°s
,

851 .
	g‰ì_be°s_p
 = 
xfs_dú3_‰ì_be°s_p
,

852 .
	gdb_to_fdb
 = 
xfs_dú3_db_to_fdb
,

853 .
	gdb_to_fdödex
 = 
xfs_dú3_db_to_fdödex
,

856 c⁄° 
xfs_dú_›s
 
	gxfs_dú2_n⁄dú_›s
 = {

857 .
node_hdr_size
 = (
xfs_da_node_hdr
),

858 .
	gnode_hdr_to_disk
 = 
xfs_da2_node_hdr_to_disk
,

859 .
	gnode_hdr_‰om_disk
 = 
xfs_da2_node_hdr_‰om_disk
,

860 .
	gnode_åì_p
 = 
xfs_da2_node_åì_p
,

863 c⁄° 
xfs_dú_›s
 
	gxfs_dú3_n⁄dú_›s
 = {

864 .
node_hdr_size
 = (
xfs_da3_node_hdr
),

865 .
	gnode_hdr_to_disk
 = 
xfs_da3_node_hdr_to_disk
,

866 .
	gnode_hdr_‰om_disk
 = 
xfs_da3_node_hdr_‰om_disk
,

867 .
	gnode_åì_p
 = 
xfs_da3_node_åì_p
,

875 c⁄° 
xfs_dú_›s
 *

876 
	$xfs_dú_gë_›s
(

877 
xfs_mou¡
 *
mp
,

878 
xfs_öode
 *
dp
)

880 i‡(
dp
)

881  
dp
->
d_›s
;

882 i‡(
mp
->
m_dú_öode_›s
)

883  
mp
->
m_dú_öode_›s
;

884 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

885  &
xfs_dú3_›s
;

886 i‡(
	`xfs_sb_vîsi⁄_has·y≥
(&
mp
->
m_sb
))

887  &
xfs_dú2_·y≥_›s
;

888  &
xfs_dú2_›s
;

889 
	}
}

891 c⁄° 
xfs_dú_›s
 *

892 
	$xfs_n⁄dú_gë_›s
(

893 
xfs_mou¡
 *
mp
,

894 
xfs_öode
 *
dp
)

896 i‡(
dp
)

897  
dp
->
d_›s
;

898 i‡(
mp
->
m_n⁄dú_öode_›s
)

899  
mp
->
m_n⁄dú_öode_›s
;

900 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

901  &
xfs_dú3_n⁄dú_›s
;

902  &
xfs_dú2_n⁄dú_›s
;

903 
	}
}

	@libxfs/xfs_da_format.h

19 #i‚de‡
__XFS_DA_FORMAT_H__


20 
	#__XFS_DA_FORMAT_H__


	)

28 
	#XFS_DA_NODE_MAGIC
 0x„bê

	)

29 
	#XFS_ATTR_LEAF_MAGIC
 0xfbì

	)

30 
	#XFS_DIR2_LEAF1_MAGIC
 0xd2f1

	)

31 
	#XFS_DIR2_LEAFN_MAGIC
 0xd2f‡

	)

33 
	sxfs_da_blköfo
 {

34 
__be32
 
	mf‹w
;

35 
__be32
 
	mback
;

36 
__be16
 
	mmagic
;

37 
__be16
 
	m∑d
;

38 } 
	txfs_da_blköfo_t
;

48 
	#XFS_DA3_NODE_MAGIC
 0x3ebê

	)

49 
	#XFS_ATTR3_LEAF_MAGIC
 0x3bì

	)

50 
	#XFS_DIR3_LEAF1_MAGIC
 0x3df1

	)

51 
	#XFS_DIR3_LEAFN_MAGIC
 0x3df‡

	)

53 
	sxfs_da3_blköfo
 {

59 
xfs_da_blköfo
 
	mhdr
;

60 
__be32
 
	m¸c
;

61 
__be64
 
	mblkno
;

62 
__be64
 
	ml¢
;

63 
uuid_t
 
	muuid
;

64 
__be64
 
	mow√r
;

76 
	#XFS_DA_NODE_MAXDEPTH
 5

	)

78 
	sxfs_da_node_hdr
 {

79 
xfs_da_blköfo
 
	möfo
;

80 
__be16
 
	m__cou¡
;

81 
__be16
 
	m__Àvñ
;

82 } 
	txfs_da_node_hdr_t
;

84 
	sxfs_da3_node_hdr
 {

85 
xfs_da3_blköfo
 
	möfo
;

86 
__be16
 
	m__cou¡
;

87 
__be16
 
	m__Àvñ
;

88 
__be32
 
	m__∑d32
;

91 
	#XFS_DA3_NODE_CRC_OFF
 (
	`off£tof
(
xfs_da3_node_hdr
, 
öfo
.
¸c
))

	)

93 
	sxfs_da_node_íåy
 {

94 
__be32
 
	mhashvÆ
;

95 
__be32
 
	mbef‹e
;

96 } 
	txfs_da_node_íåy_t
;

98 
	sxfs_da_öäode
 {

99 
xfs_da_node_hdr
 
	mhdr
;

100 
xfs_da_node_íåy
 
	m__båì
[];

101 } 
	txfs_da_öäode_t
;

103 
	sxfs_da3_öäode
 {

104 
xfs_da3_node_hdr
 
	mhdr
;

105 
xfs_da_node_íåy
 
	m__båì
[];

113 
	sxfs_da3_i˙ode_hdr
 {

114 
__uöt32_t
 
	mf‹w
;

115 
__uöt32_t
 
	mback
;

116 
__uöt16_t
 
	mmagic
;

117 
__uöt16_t
 
	mcou¡
;

118 
__uöt16_t
 
	mÀvñ
;

134 
	#XFS_DIR2_BLOCK_MAGIC
 0x58443242

	)

135 
	#XFS_DIR2_DATA_MAGIC
 0x58443244

	)

136 
	#XFS_DIR2_FREE_MAGIC
 0x58443246

	)

166 
	#XFS_DIR3_BLOCK_MAGIC
 0x58444233

	)

167 
	#XFS_DIR3_DATA_MAGIC
 0x58444433

	)

168 
	#XFS_DIR3_FREE_MAGIC
 0x58444633

	)

175 
	#XFS_DIR3_FT_UNKNOWN
 0

	)

176 
	#XFS_DIR3_FT_REG_FILE
 1

	)

177 
	#XFS_DIR3_FT_DIR
 2

	)

178 
	#XFS_DIR3_FT_CHRDEV
 3

	)

179 
	#XFS_DIR3_FT_BLKDEV
 4

	)

180 
	#XFS_DIR3_FT_FIFO
 5

	)

181 
	#XFS_DIR3_FT_SOCK
 6

	)

182 
	#XFS_DIR3_FT_SYMLINK
 7

	)

183 
	#XFS_DIR3_FT_WHT
 8

	)

185 
	#XFS_DIR3_FT_MAX
 9

	)

190 
__uöt16_t
 
	txfs_dú2_d©a_off_t
;

191 
	#NULLDATAOFF
 0xffffU

	)

192 
uöt
 
	txfs_dú2_d©a_aoff_t
;

197 
__uöt32_t
 
	txfs_dú2_d©≠å_t
;

198 
	#XFS_DIR2_MAX_DATAPTR
 ((
xfs_dú2_d©≠å_t
)0xffffffff)

	)

199 
	#XFS_DIR2_NULL_DATAPTR
 ((
xfs_dú2_d©≠å_t
)0)

	)

204 
xfs_off_t
 
	txfs_dú2_off_t
;

209 
__uöt32_t
 
	txfs_dú2_db_t
;

211 
	#XFS_INO32_SIZE
 4

	)

212 
	#XFS_INO64_SIZE
 8

	)

213 
	#XFS_INO64_DIFF
 (
XFS_INO64_SIZE
 - 
XFS_INO32_SIZE
)

	)

215 
	#XFS_DIR2_MAX_SHORT_INUM
 ((
xfs_öo_t
)0xffffffffULL)

	)

228 
	sxfs_dú2_sf_hdr
 {

229 
__uöt8_t
 
	mcou¡
;

230 
__uöt8_t
 
	mi8cou¡
;

231 
__uöt8_t
 
	m∑ª¡
[8];

232 } 
	t__∑cked
 
	txfs_dú2_sf_hdr_t
;

234 
	sxfs_dú2_sf_íåy
 {

235 
__u8
 
	m«mñí
;

236 
__u8
 
	moff£t
[2];

237 
__u8
 
	m«me
[];

245 } 
	txfs_dú2_sf_íåy_t
;

247 
ölöe
 
	$xfs_dú2_sf_hdr_size
(
i8cou¡
)

249  (
xfs_dú2_sf_hdr
) -

250 (
i8cou¡
 =0Ë* 
XFS_INO64_DIFF
;

251 
	}
}

253 
ölöe
 
xfs_dú2_d©a_aoff_t


254 
	$xfs_dú2_sf_gë_off£t
(
xfs_dú2_sf_íåy_t
 *
s„p
)

256  
	`gë_u«lig√d_be16
(
s„p
->
off£t
);

257 
	}
}

259 
ölöe
 

260 
	$xfs_dú2_sf_put_off£t
(
xfs_dú2_sf_íåy_t
 *
s„p
, 
xfs_dú2_d©a_aoff_t
 
off
)

262 
	`put_u«lig√d_be16
(
off
, 
s„p
->
off£t
);

263 
	}
}

265 
ölöe
 
xfs_dú2_sf_íåy
 *

266 
	$xfs_dú2_sf_fú°íåy
(
xfs_dú2_sf_hdr
 *
hdr
)

268  (
xfs_dú2_sf_íåy
 *)

269 ((*)
hdr
 + 
	`xfs_dú2_sf_hdr_size
(hdr->
i8cou¡
));

270 
	}
}

296 
	#XFS_DIR2_DATA_ALIGN_LOG
 3

	)

297 
	#XFS_DIR2_DATA_ALIGN
 (1 << 
XFS_DIR2_DATA_ALIGN_LOG
)

	)

298 
	#XFS_DIR2_DATA_FREE_TAG
 0xffff

	)

299 
	#XFS_DIR2_DATA_FD_COUNT
 3

	)

305 
	#XFS_DIR2_SPACE_SIZE
 (1ULL << (32 + 
XFS_DIR2_DATA_ALIGN_LOG
))

	)

306 
	#XFS_DIR2_DATA_SPACE
 0

	)

307 
	#XFS_DIR2_DATA_OFFSET
 (
XFS_DIR2_DATA_SPACE
 * 
XFS_DIR2_SPACE_SIZE
)

	)

314 
	sxfs_dú2_d©a_‰ì
 {

315 
__be16
 
	moff£t
;

316 
__be16
 
	mÀngth
;

317 } 
	txfs_dú2_d©a_‰ì_t
;

324 
	sxfs_dú2_d©a_hdr
 {

325 
__be32
 
	mmagic
;

327 
xfs_dú2_d©a_‰ì_t
 
	mbe°‰ì
[
XFS_DIR2_DATA_FD_COUNT
];

328 } 
	txfs_dú2_d©a_hdr_t
;

336 
	sxfs_dú3_blk_hdr
 {

337 
__be32
 
	mmagic
;

338 
__be32
 
	m¸c
;

339 
__be64
 
	mblkno
;

340 
__be64
 
	ml¢
;

341 
uuid_t
 
	muuid
;

342 
__be64
 
	mow√r
;

345 
	sxfs_dú3_d©a_hdr
 {

346 
xfs_dú3_blk_hdr
 
	mhdr
;

347 
xfs_dú2_d©a_‰ì_t
 
	mbe°_‰ì
[
XFS_DIR2_DATA_FD_COUNT
];

348 
__be32
 
	m∑d
;

351 
	#XFS_DIR3_DATA_CRC_OFF
 
	`off£tof
(
xfs_dú3_d©a_hdr
, 
hdr
.
¸c
)

	)

364 
	sxfs_dú2_d©a_íåy
 {

365 
__be64
 
	möumbî
;

366 
__u8
 
	m«mñí
;

367 
__u8
 
	m«me
[];

370 } 
	txfs_dú2_d©a_íåy_t
;

378 
	sxfs_dú2_d©a_unu£d
 {

379 
__be16
 
	m‰ìèg
;

380 
__be16
 
	mÀngth
;

382 
__be16
 
	mèg
;

383 } 
	txfs_dú2_d©a_unu£d_t
;

388 
ölöe
 
__be16
 *

389 
	$xfs_dú2_d©a_unu£d_èg_p
(
xfs_dú2_d©a_unu£d
 *
dup
)

391  (
__be16
 *)((*)
dup
 +

392 
	`be16_to_˝u
(
dup
->
Àngth
Ë- (
__be16
));

393 
	}
}

430 
	#XFS_DIR2_LEAF_SPACE
 1

	)

431 
	#XFS_DIR2_LEAF_OFFSET
 (
XFS_DIR2_LEAF_SPACE
 * 
XFS_DIR2_SPACE_SIZE
)

	)

436 
	sxfs_dú2_Àaf_hdr
 {

437 
xfs_da_blköfo_t
 
	möfo
;

438 
__be16
 
	mcou¡
;

439 
__be16
 
	m°Æe
;

440 } 
	txfs_dú2_Àaf_hdr_t
;

442 
	sxfs_dú3_Àaf_hdr
 {

443 
xfs_da3_blköfo
 
	möfo
;

444 
__be16
 
	mcou¡
;

445 
__be16
 
	m°Æe
;

446 
__be32
 
	m∑d
;

449 
	sxfs_dú3_i˛óf_hdr
 {

450 
__uöt32_t
 
	mf‹w
;

451 
__uöt32_t
 
	mback
;

452 
__uöt16_t
 
	mmagic
;

453 
__uöt16_t
 
	mcou¡
;

454 
__uöt16_t
 
	m°Æe
;

460 
	sxfs_dú2_Àaf_íåy
 {

461 
__be32
 
	mhashvÆ
;

462 
__be32
 
	maddªss
;

463 } 
	txfs_dú2_Àaf_íåy_t
;

468 
	sxfs_dú2_Àaf_èû
 {

469 
__be32
 
	mbe°cou¡
;

470 } 
	txfs_dú2_Àaf_èû_t
;

475 
	sxfs_dú2_Àaf
 {

476 
xfs_dú2_Àaf_hdr_t
 
	mhdr
;

477 
xfs_dú2_Àaf_íåy_t
 
	m__íts
[];

478 } 
	txfs_dú2_Àaf_t
;

480 
	sxfs_dú3_Àaf
 {

481 
xfs_dú3_Àaf_hdr
 
	mhdr
;

482 
xfs_dú2_Àaf_íåy
 
	m__íts
[];

485 
	#XFS_DIR3_LEAF_CRC_OFF
 
	`off£tof
(
xfs_dú3_Àaf_hdr
, 
öfo
.
¸c
)

	)

490 
ölöe
 
__be16
 *

491 
	$xfs_dú2_Àaf_be°s_p
(
xfs_dú2_Àaf_èû
 *
…p
)

493  (
__be16
 *)
…p
 - 
	`be32_to_˝u
÷ç->
be°cou¡
);

494 
	}
}

503 
	#XFS_DIR2_FREE_SPACE
 2

	)

504 
	#XFS_DIR2_FREE_OFFSET
 (
XFS_DIR2_FREE_SPACE
 * 
XFS_DIR2_SPACE_SIZE
)

	)

506 
	sxfs_dú2_‰ì_hdr
 {

507 
__be32
 
	mmagic
;

508 
__be32
 
	mfú°db
;

509 
__be32
 
	mnvÆid
;

510 
__be32
 
	mnu£d
;

511 } 
	txfs_dú2_‰ì_hdr_t
;

513 
	sxfs_dú2_‰ì
 {

514 
xfs_dú2_‰ì_hdr_t
 
	mhdr
;

515 
__be16
 
	mbe°s
[];

517 } 
	txfs_dú2_‰ì_t
;

519 
	sxfs_dú3_‰ì_hdr
 {

520 
xfs_dú3_blk_hdr
 
	mhdr
;

521 
__be32
 
	mfú°db
;

522 
__be32
 
	mnvÆid
;

523 
__be32
 
	mnu£d
;

524 
__be32
 
	m∑d
;

527 
	sxfs_dú3_‰ì
 {

528 
xfs_dú3_‰ì_hdr
 
	mhdr
;

529 
__be16
 
	mbe°s
[];

533 
	#XFS_DIR3_FREE_CRC_OFF
 
	`off£tof
(
xfs_dú3_‰ì
, 
hdr
.hdr.
¸c
)

	)

540 
	sxfs_dú3_ic‰ì_hdr
 {

541 
__uöt32_t
 
	mmagic
;

542 
__uöt32_t
 
	mfú°db
;

543 
__uöt32_t
 
	mnvÆid
;

544 
__uöt32_t
 
	mnu£d
;

574 
	sxfs_dú2_block_èû
 {

575 
__be32
 
	mcou¡
;

576 
__be32
 
	m°Æe
;

577 } 
	txfs_dú2_block_èû_t
;

582 
ölöe
 
xfs_dú2_Àaf_íåy
 *

583 
	$xfs_dú2_block_Àaf_p
(
xfs_dú2_block_èû
 *
bç
)

585  ((
xfs_dú2_Àaf_íåy
 *)
bç
Ë- 
	`be32_to_˝u
(bç->
cou¡
);

586 
	}
}

623 
	#XFS_ATTR_LEAF_MAPSIZE
 3

	)

628 
	sxfs_©å_sh‹tf‹m
 {

629 
	sxfs_©å_sf_hdr
 {

630 
__be16
 
	mtŸsize
;

631 
__u8
 
	mcou¡
;

632 
__u8
 
	m∑ddög
;

633 } 
	mhdr
;

634 
	sxfs_©å_sf_íåy
 {

635 
__uöt8_t
 
	m«mñí
;

636 
__uöt8_t
 
	mvÆuñí
;

637 
__uöt8_t
 
	mÊags
;

638 
__uöt8_t
 
	m«mevÆ
[1];

639 } 
	mli°
[1];

640 } 
	txfs_©å_sh‹tf‹m_t
;

642 
	sxfs_©å_Àaf_m≠
 {

643 
__be16
 
	mba£
;

644 
__be16
 
	msize
;

645 } 
	txfs_©å_Àaf_m≠_t
;

647 
	sxfs_©å_Àaf_hdr
 {

648 
xfs_da_blköfo_t
 
	möfo
;

649 
__be16
 
	mcou¡
;

650 
__be16
 
	mu£dbyãs
;

651 
__be16
 
	mfú°u£d
;

652 
__u8
 
	mhﬁes
;

653 
__u8
 
	m∑d1
;

654 
xfs_©å_Àaf_m≠_t
 
	m‰ìm≠
[
XFS_ATTR_LEAF_MAPSIZE
];

656 } 
	txfs_©å_Àaf_hdr_t
;

658 
	sxfs_©å_Àaf_íåy
 {

659 
__be32
 
	mhashvÆ
;

660 
__be16
 
	m«meidx
;

661 
__u8
 
	mÊags
;

662 
__u8
 
	m∑d2
;

663 } 
	txfs_©å_Àaf_íåy_t
;

665 
	sxfs_©å_Àaf_«me_loˇl
 {

666 
__be16
 
	mvÆuñí
;

667 
__u8
 
	m«mñí
;

668 
__u8
 
	m«mevÆ
[1];

669 } 
	txfs_©å_Àaf_«me_loˇl_t
;

671 
	sxfs_©å_Àaf_«me_ªmŸe
 {

672 
__be32
 
	mvÆueblk
;

673 
__be32
 
	mvÆuñí
;

674 
__u8
 
	m«mñí
;

675 
__u8
 
	m«me
[1];

676 } 
	txfs_©å_Àaf_«me_ªmŸe_t
;

678 
	sxfs_©å_Àafblock
 {

679 
xfs_©å_Àaf_hdr_t
 
	mhdr
;

680 
xfs_©å_Àaf_íåy_t
 
	míåõs
[1];

690 } 
	txfs_©å_Àafblock_t
;

697 
	sxfs_©å3_Àaf_hdr
 {

698 
xfs_da3_blköfo
 
	möfo
;

699 
__be16
 
	mcou¡
;

700 
__be16
 
	mu£dbyãs
;

701 
__be16
 
	mfú°u£d
;

702 
__u8
 
	mhﬁes
;

703 
__u8
 
	m∑d1
;

704 
xfs_©å_Àaf_m≠
 
	m‰ìm≠
[
XFS_ATTR_LEAF_MAPSIZE
];

705 
__be32
 
	m∑d2
;

708 
	#XFS_ATTR3_LEAF_CRC_OFF
 (
	`off£tof
(
xfs_©å3_Àaf_hdr
, 
öfo
.
¸c
))

	)

710 
	sxfs_©å3_Àafblock
 {

711 
xfs_©å3_Àaf_hdr
 
	mhdr
;

712 
xfs_©å_Àaf_íåy
 
	míåõs
[1];

727 
	sxfs_©å3_i˛óf_hdr
 {

728 
__uöt32_t
 
	mf‹w
;

729 
__uöt32_t
 
	mback
;

730 
__uöt16_t
 
	mmagic
;

731 
__uöt16_t
 
	mcou¡
;

732 
__uöt16_t
 
	mu£dbyãs
;

739 
__uöt32_t
 
	mfú°u£d
;

740 
__u8
 
	mhﬁes
;

742 
__uöt16_t
 
	mba£
;

743 
__uöt16_t
 
	msize
;

744 } 
	m‰ìm≠
[
XFS_ATTR_LEAF_MAPSIZE
];

751 
	#XFS_ATTR3_LEAF_NULLOFF
 0

	)

758 
	#XFS_ATTR_LOCAL_BIT
 0

	)

759 
	#XFS_ATTR_ROOT_BIT
 1

	)

760 
	#XFS_ATTR_SECURE_BIT
 2

	)

761 
	#XFS_ATTR_INCOMPLETE_BIT
 7

	)

762 
	#XFS_ATTR_LOCAL
 (1 << 
XFS_ATTR_LOCAL_BIT
)

	)

763 
	#XFS_ATTR_ROOT
 (1 << 
XFS_ATTR_ROOT_BIT
)

	)

764 
	#XFS_ATTR_SECURE
 (1 << 
XFS_ATTR_SECURE_BIT
)

	)

765 
	#XFS_ATTR_INCOMPLETE
 (1 << 
XFS_ATTR_INCOMPLETE_BIT
)

	)

771 
	#XFS_ATTR_NSP_ARGS_MASK
 (
ATTR_ROOT
 | 
ATTR_SECURE
)

	)

772 
	#XFS_ATTR_NSP_ONDISK_MASK
 (
XFS_ATTR_ROOT
 | 
XFS_ATTR_SECURE
)

	)

773 
	#XFS_ATTR_NSP_ONDISK
(
Êags
Ë((ÊagsË& 
XFS_ATTR_NSP_ONDISK_MASK
)

	)

774 
	#XFS_ATTR_NSP_ARGS
(
Êags
Ë((ÊagsË& 
XFS_ATTR_NSP_ARGS_MASK
)

	)

775 
	#XFS_ATTR_NSP_ARGS_TO_ONDISK
(
x
Ë(((xË& 
ATTR_ROOT
 ? 
XFS_ATTR_ROOT
 : 0) |\

776 ((
x
Ë& 
ATTR_SECURE
 ? 
XFS_ATTR_SECURE
 : 0))

	)

777 
	#XFS_ATTR_NSP_ONDISK_TO_ARGS
(
x
Ë(((xË& 
XFS_ATTR_ROOT
 ? 
ATTR_ROOT
 : 0) |\

778 ((
x
Ë& 
XFS_ATTR_SECURE
 ? 
ATTR_SECURE
 : 0))

	)

784 
	#XFS_ATTR_LEAF_NAME_ALIGN
 ((
uöt
)(
xfs_dablk_t
))

	)

786 
ölöe
 

787 
	$xfs_©å3_Àaf_hdr_size
(
xfs_©å_Àafblock
 *
ÀaÂ
)

789 i‡(
ÀaÂ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_ATTR3_LEAF_MAGIC
))

790  (
xfs_©å3_Àaf_hdr
);

791  (
xfs_©å_Àaf_hdr
);

792 
	}
}

794 
ölöe
 
xfs_©å_Àaf_íåy
 *

795 
	$xfs_©å3_Àaf_íåyp
(
xfs_©å_Àafblock_t
 *
ÀaÂ
)

797 i‡(
ÀaÂ
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_ATTR3_LEAF_MAGIC
))

798  &((
xfs_©å3_Àafblock
 *)
ÀaÂ
)->
íåõs
[0];

799  &
ÀaÂ
->
íåõs
[0];

800 
	}
}

805 
ölöe
 *

806 
	$xfs_©å3_Àaf_«me
(
xfs_©å_Àafblock_t
 *
ÀaÂ
, 
idx
)

808 
xfs_©å_Àaf_íåy
 *
íåõs
 = 
	`xfs_©å3_Àaf_íåyp
(
ÀaÂ
);

810  &((*)
ÀaÂ
)[
	`be16_to_˝u
(
íåõs
[
idx
].
«meidx
)];

811 
	}
}

813 
ölöe
 
xfs_©å_Àaf_«me_ªmŸe_t
 *

814 
	$xfs_©å3_Àaf_«me_ªmŸe
(
xfs_©å_Àafblock_t
 *
ÀaÂ
, 
idx
)

816  (
xfs_©å_Àaf_«me_ªmŸe_t
 *)
	`xfs_©å3_Àaf_«me
(
ÀaÂ
, 
idx
);

817 
	}
}

819 
ölöe
 
xfs_©å_Àaf_«me_loˇl_t
 *

820 
	$xfs_©å3_Àaf_«me_loˇl
(
xfs_©å_Àafblock_t
 *
ÀaÂ
, 
idx
)

822  (
xfs_©å_Àaf_«me_loˇl_t
 *)
	`xfs_©å3_Àaf_«me
(
ÀaÂ
, 
idx
);

823 
	}
}

830 
ölöe
 
	$xfs_©å_Àaf_ítsize_ªmŸe
(
∆í
)

832  ((
uöt
)(
xfs_©å_Àaf_«me_ªmŸe_t
Ë- 1 + (
∆í
) + \

833 
XFS_ATTR_LEAF_NAME_ALIGN
 - 1) & ~(XFS_ATTR_LEAF_NAME_ALIGN - 1);

834 
	}
}

836 
ölöe
 
	$xfs_©å_Àaf_ítsize_loˇl
(
∆í
, 
vÀn
)

838  ((
uöt
)(
xfs_©å_Àaf_«me_loˇl_t
Ë- 1 + (
∆í
Ë+ (
vÀn
) +

839 
XFS_ATTR_LEAF_NAME_ALIGN
 - 1) & ~(XFS_ATTR_LEAF_NAME_ALIGN - 1);

840 
	}
}

842 
ölöe
 
	$xfs_©å_Àaf_ítsize_loˇl_max
(
bsize
)

844  (((
bsize
) >> 1) + ((bsize) >> 2));

845 
	}
}

859 
	#XFS_ATTR3_RMT_MAGIC
 0x5841524d

	)

861 
	sxfs_©å3_rmt_hdr
 {

862 
__be32
 
	mrm_magic
;

863 
__be32
 
	mrm_off£t
;

864 
__be32
 
	mrm_byãs
;

865 
__be32
 
	mrm_¸c
;

866 
uuid_t
 
	mrm_uuid
;

867 
__be64
 
	mrm_ow√r
;

868 
__be64
 
	mrm_blkno
;

869 
__be64
 
	mrm_l¢
;

872 
	#XFS_ATTR3_RMT_CRC_OFF
 
	`off£tof
(
xfs_©å3_rmt_hdr
, 
rm_¸c
)

	)

874 
	#XFS_ATTR3_RMT_BUF_SPACE
(
mp
, 
bufsize
) \

875 ((
bufsize
Ë- (
	`xfs_sb_vîsi⁄_has¸c
(&(
mp
)->
m_sb
) ? \

876 (
xfs_©å3_rmt_hdr
Ë: 0))

	)

	@libxfs/xfs_defer.c

20 
	~"libxfs_¥iv.h
"

21 
	~"xfs_fs.h
"

22 
	~"xfs_sh¨ed.h
"

23 
	~"xfs_f‹m©.h
"

24 
	~"xfs_log_f‹m©.h
"

25 
	~"xfs_å™s_ªsv.h
"

26 
	~"xfs_bô.h
"

27 
	~"xfs_sb.h
"

28 
	~"xfs_mou¡.h
"

29 
	~"xfs_de„r.h
"

30 
	~"xfs_å™s.h
"

31 
	~"xfs_åa˚.h
"

186 c⁄° 
xfs_de„r_›_ty≥
 *
	gde„r_›_ty≥s
[
XFS_DEFER_OPS_TYPE_MAX
];

193 
STATIC
 

194 
	$xfs_de„r_öèke_w‹k
(

195 
xfs_å™s
 *
ç
,

196 
xfs_de„r_›s
 *
d›
)

198 
li°_hód
 *
li
;

199 
xfs_de„r_≥ndög
 *
dÂ
;

201 
	`li°_f‹_óch_íåy
(
dÂ
, &
d›
->
d›_öèke
, 
dÂ_li°
) {

202 
dÂ
->
dÂ_öã¡
 = dÂ->
dÂ_ty≥
->
	`¸óã_öã¡
(
ç
,

203 
dÂ
->
dÂ_cou¡
);

204 
	`åa˚_xfs_de„r_öèke_w‹k
(
ç
->
t_mou¡p
, 
dÂ
);

205 
	`li°_s‹t
(
ç
->
t_mou¡p
, &
dÂ
->
dÂ_w‹k
,

206 
dÂ
->
dÂ_ty≥
->
diff_ôems
);

207 
	`li°_f‹_óch
(
li
, &
dÂ
->
dÂ_w‹k
)

208 
dÂ
->
dÂ_ty≥
->
	`log_ôem
(
ç
, dÂ->
dÂ_öã¡
, 
li
);

211 
	`li°_•li˚_èû_öô
(&
d›
->
d›_öèke
, &d›->
d›_≥ndög
);

212 
	}
}

215 
STATIC
 

216 
	$xfs_de„r_å™s_ab‹t
(

217 
xfs_å™s
 *
ç
,

218 
xfs_de„r_›s
 *
d›
,

219 
îr‹
)

221 
xfs_de„r_≥ndög
 *
dÂ
;

223 
	`åa˚_xfs_de„r_å™s_ab‹t
(
ç
->
t_mou¡p
, 
d›
);

226 
	`li°_f‹_óch_íåy
(
dÂ
, &
d›
->
d›_≥ndög
, 
dÂ_li°
) {

227 
	`åa˚_xfs_de„r_≥ndög_ab‹t
(
ç
->
t_mou¡p
, 
dÂ
);

228 i‡(
dÂ
->
dÂ_öã¡
 && !dÂ->
dÂ_d⁄e
) {

229 
dÂ
->
dÂ_ty≥
->
	`ab‹t_öã¡
(dÂ->
dÂ_öã¡
);

230 
dÂ
->
dÂ_öã¡
 = 
NULL
;

235 
	`xfs_f‹˚_shutdown
(
ç
->
t_mou¡p
, (
îr‹
 =-
EFSCORRUPTED
) ?

236 
SHUTDOWN_CORRUPT_INCORE
 : 
SHUTDOWN_META_IO_ERROR
);

237 
	}
}

240 
STATIC
 

241 
	$xfs_de„r_å™s_rﬁl
(

242 
xfs_å™s
 **
ç
,

243 
xfs_de„r_›s
 *
d›
,

244 
xfs_öode
 *
ù
)

246 
i
;

247 
îr‹
;

250 
i
 = 0; i < 
XFS_DEFER_OPS_NR_INODES
 && 
d›
->
d›_öodes
[i]; i++) {

251 i‡(
d›
->
d›_öodes
[
i
] =
ù
)

253 
	`xfs_å™s_log_öode
(*
ç
, 
d›
->
d›_öodes
[
i
], 
XFS_ILOG_CORE
);

256 
	`åa˚_xfs_de„r_å™s_rﬁl
((*
ç
)->
t_mou¡p
, 
d›
);

259 
îr‹
 = 
	`xfs_å™s_rﬁl
(
ç
, 
ù
);

260 i‡(
îr‹
) {

261 
	`åa˚_xfs_de„r_å™s_rﬁl_îr‹
((*
ç
)->
t_mou¡p
, 
d›
, 
îr‹
);

262 
	`xfs_de„r_å™s_ab‹t
(*
ç
, 
d›
, 
îr‹
);

263  
îr‹
;

265 
d›
->
d›_commôãd
 = 
åue
;

268 
i
 = 0; i < 
XFS_DEFER_OPS_NR_INODES
 && 
d›
->
d›_öodes
[i]; i++) {

269 i‡(
d›
->
d›_öodes
[
i
] =
ù
)

271 
	`xfs_å™s_ijoö
(*
ç
, 
d›
->
d›_öodes
[
i
], 0);

274  
îr‹
;

275 
	}
}

278 
boﬁ


279 
	$xfs_de„r_has_unföished_w‹k
(

280 
xfs_de„r_›s
 *
d›
)

282  !
	`li°_em±y
(&
d›
->
d›_≥ndög
Ë|| !li°_em±y(&d›->
d›_öèke
);

283 
	}
}

291 
	$xfs_de„r_joö
(

292 
xfs_de„r_›s
 *
d›
,

293 
xfs_öode
 *
ù
)

295 
i
;

297 
i
 = 0; i < 
XFS_DEFER_OPS_NR_INODES
; i++) {

298 i‡(
d›
->
d›_öodes
[
i
] =
ù
)

300 i‡(
d›
->
d›_öodes
[
i
] =
NULL
) {

301 
d›
->
d›_öodes
[
i
] = 
ù
;

306  -
EFSCORRUPTED
;

307 
	}
}

318 
	$xfs_de„r_föish
(

319 
xfs_å™s
 **
ç
,

320 
xfs_de„r_›s
 *
d›
,

321 
xfs_öode
 *
ù
)

323 
xfs_de„r_≥ndög
 *
dÂ
;

324 
li°_hód
 *
li
;

325 
li°_hód
 *
n
;

326 *
°©e
;

327 
îr‹
 = 0;

328 (*
˛ónup_‚
)(
xfs_å™s
 *, *, );

330 
	`ASSERT
((*
ç
)->
t_Êags
 & 
XFS_TRANS_PERM_LOG_RES
);

332 
	`åa˚_xfs_de„r_föish
((*
ç
)->
t_mou¡p
, 
d›
);

335 
	`xfs_de„r_has_unföished_w‹k
(
d›
)) {

337 
	`xfs_de„r_öèke_w‹k
(*
ç
, 
d›
);

340 
îr‹
 = 
	`xfs_de„r_å™s_rﬁl
(
ç
, 
d›
, 
ù
);

341 i‡(
îr‹
)

342 
out
;

345 
dÂ
 = 
	`li°_fú°_íåy
(&
d›
->
d›_≥ndög
,

346 
xfs_de„r_≥ndög
, 
dÂ_li°
);

347 
	`åa˚_xfs_de„r_≥ndög_föish
((*
ç
)->
t_mou¡p
, 
dÂ
);

348 
dÂ
->
dÂ_d⁄e
 = dÂ->
dÂ_ty≥
->
	`¸óã_d⁄e
(*
ç
, dÂ->
dÂ_öã¡
,

349 
dÂ
->
dÂ_cou¡
);

350 
˛ónup_‚
 = 
dÂ
->
dÂ_ty≥
->
föish_˛ónup
;

353 
°©e
 = 
NULL
;

354 
	`li°_f‹_óch_ß„
(
li
, 
n
, &
dÂ
->
dÂ_w‹k
) {

355 
	`li°_dñ
(
li
);

356 
dÂ
->
dÂ_cou¡
--;

357 
îr‹
 = 
dÂ
->
dÂ_ty≥
->
	`föish_ôem
(*
ç
, 
d›
, 
li
,

358 
dÂ
->
dÂ_d⁄e
, &
°©e
);

359 i‡(
îr‹
 =-
EAGAIN
) {

365 
	`li°_add
(
li
, &
dÂ
->
dÂ_w‹k
);

366 
dÂ
->
dÂ_cou¡
++;

368 } i‡(
îr‹
) {

374 i‡(
˛ónup_‚
)

375 
	`˛ónup_‚
(*
ç
, 
°©e
, 
îr‹
);

376 
	`xfs_de„r_å™s_ab‹t
(*
ç
, 
d›
, 
îr‹
);

377 
out
;

380 i‡(
îr‹
 =-
EAGAIN
) {

388 
dÂ
->
dÂ_öã¡
 = dÂ->
dÂ_ty≥
->
	`¸óã_öã¡
(*
ç
,

389 
dÂ
->
dÂ_cou¡
);

390 
dÂ
->
dÂ_d⁄e
 = 
NULL
;

391 
	`li°_f‹_óch
(
li
, &
dÂ
->
dÂ_w‹k
)

392 
dÂ
->
dÂ_ty≥
->
	`log_ôem
(*
ç
, dÂ->
dÂ_öã¡
,

393 
li
);

396 
	`li°_dñ
(&
dÂ
->
dÂ_li°
);

397 
	`kmem_‰ì
(
dÂ
);

400 i‡(
˛ónup_‚
)

401 
	`˛ónup_‚
(*
ç
, 
°©e
, 
îr‹
);

404 
out
:

405 i‡(
îr‹
)

406 
	`åa˚_xfs_de„r_föish_îr‹
((*
ç
)->
t_mou¡p
, 
d›
, 
îr‹
);

408 
	`åa˚_xfs_de„r_föish_d⁄e
((*
ç
)->
t_mou¡p
, 
d›
);

409  
îr‹
;

410 
	}
}

416 
	$xfs_de„r_ˇn˚l
(

417 
xfs_de„r_›s
 *
d›
)

419 
xfs_de„r_≥ndög
 *
dÂ
;

420 
xfs_de„r_≥ndög
 *
∂i
;

421 
li°_hód
 *
pwi
;

422 
li°_hód
 *
n
;

424 
	`åa˚_xfs_de„r_ˇn˚l
(
NULL
, 
d›
);

430 
	`li°_f‹_óch_íåy_ß„
(
dÂ
, 
∂i
, &
d›
->
d›_öèke
, 
dÂ_li°
) {

431 
	`åa˚_xfs_de„r_öèke_ˇn˚l
(
NULL
, 
dÂ
);

432 
	`li°_dñ
(&
dÂ
->
dÂ_li°
);

433 
	`li°_f‹_óch_ß„
(
pwi
, 
n
, &
dÂ
->
dÂ_w‹k
) {

434 
	`li°_dñ
(
pwi
);

435 
dÂ
->
dÂ_cou¡
--;

436 
dÂ
->
dÂ_ty≥
->
	`ˇn˚l_ôem
(
pwi
);

438 
	`ASSERT
(
dÂ
->
dÂ_cou¡
 == 0);

439 
	`kmem_‰ì
(
dÂ
);

441 
	`li°_f‹_óch_íåy_ß„
(
dÂ
, 
∂i
, &
d›
->
d›_≥ndög
, 
dÂ_li°
) {

442 
	`åa˚_xfs_de„r_≥ndög_ˇn˚l
(
NULL
, 
dÂ
);

443 
	`li°_dñ
(&
dÂ
->
dÂ_li°
);

444 
	`li°_f‹_óch_ß„
(
pwi
, 
n
, &
dÂ
->
dÂ_w‹k
) {

445 
	`li°_dñ
(
pwi
);

446 
dÂ
->
dÂ_cou¡
--;

447 
dÂ
->
dÂ_ty≥
->
	`ˇn˚l_ôem
(
pwi
);

449 
	`ASSERT
(
dÂ
->
dÂ_cou¡
 == 0);

450 
	`kmem_‰ì
(
dÂ
);

452 
	}
}

456 
	$xfs_de„r_add
(

457 
xfs_de„r_›s
 *
d›
,

458 
xfs_de„r_›s_ty≥
 
ty≥
,

459 
li°_hód
 *
li
)

461 
xfs_de„r_≥ndög
 *
dÂ
 = 
NULL
;

468 i‡(!
	`li°_em±y
(&
d›
->
d›_öèke
)) {

469 
dÂ
 = 
	`li°_œ°_íåy
(&
d›
->
d›_öèke
,

470 
xfs_de„r_≥ndög
, 
dÂ_li°
);

471 i‡(
dÂ
->
dÂ_ty≥
->
ty≥
 !=Åype ||

472 (
dÂ
->
dÂ_ty≥
->
max_ôems
 &&

473 
dÂ
->
dÂ_cou¡
 >dÂ->
dÂ_ty≥
->
max_ôems
))

474 
dÂ
 = 
NULL
;

476 i‡(!
dÂ
) {

477 
dÂ
 = 
	`kmem_Æloc
((
xfs_de„r_≥ndög
),

478 
KM_SLEEP
 | 
KM_NOFS
);

479 
dÂ
->
dÂ_ty≥
 = 
de„r_›_ty≥s
[
ty≥
];

480 
dÂ
->
dÂ_öã¡
 = 
NULL
;

481 
dÂ
->
dÂ_d⁄e
 = 
NULL
;

482 
dÂ
->
dÂ_cou¡
 = 0;

483 
	`INIT_LIST_HEAD
(&
dÂ
->
dÂ_w‹k
);

484 
	`li°_add_èû
(&
dÂ
->
dÂ_li°
, &
d›
->
d›_öèke
);

487 
	`li°_add_èû
(
li
, &
dÂ
->
dÂ_w‹k
);

488 
dÂ
->
dÂ_cou¡
++;

489 
	}
}

493 
	$xfs_de„r_öô_›_ty≥
(

494 c⁄° 
xfs_de„r_›_ty≥
 *
ty≥
)

496 
de„r_›_ty≥s
[
ty≥
->type] =Åype;

497 
	}
}

501 
	$xfs_de„r_öô
(

502 
xfs_de„r_›s
 *
d›
,

503 
xfs_fsblock_t
 *
fbp
)

505 
d›
->
d›_commôãd
 = 
Ál£
;

506 
d›
->
d›_low
 = 
Ál£
;

507 
	`mem£t
(&
d›
->
d›_öodes
, 0, (dop->dop_inodes));

508 *
fbp
 = 
NULLFSBLOCK
;

509 
	`INIT_LIST_HEAD
(&
d›
->
d›_öèke
);

510 
	`INIT_LIST_HEAD
(&
d›
->
d›_≥ndög
);

511 
	`åa˚_xfs_de„r_öô
(
NULL
, 
d›
);

512 
	}
}

	@libxfs/xfs_defer.h

20 #i‚de‡
__XFS_DEFER_H__


21 
	#__XFS_DEFER_H__


	)

23 
	gxfs_de„r_›_ty≥
;

30 
	sxfs_de„r_≥ndög
 {

31 c⁄° 
xfs_de„r_›_ty≥
 *
	mdÂ_ty≥
;

32 
li°_hód
 
	mdÂ_li°
;

33 *
	mdÂ_öã¡
;

34 *
	mdÂ_d⁄e
;

35 
li°_hód
 
	mdÂ_w‹k
;

36 
	mdÂ_cou¡
;

53 
	exfs_de„r_›s_ty≥
 {

54 
	mXFS_DEFER_OPS_TYPE_BMAP
,

55 
	mXFS_DEFER_OPS_TYPE_REFCOUNT
,

56 
	mXFS_DEFER_OPS_TYPE_RMAP
,

57 
	mXFS_DEFER_OPS_TYPE_FREE
,

58 
	mXFS_DEFER_OPS_TYPE_MAX
,

61 
	#XFS_DEFER_OPS_NR_INODES
 2

	)

63 
	sxfs_de„r_›s
 {

64 
boﬁ
 
	md›_commôãd
;

65 
boﬁ
 
	md›_low
;

66 
li°_hód
 
	md›_öèke
;

67 
li°_hód
 
	md›_≥ndög
;

70 
xfs_öode
 *
	md›_öodes
[
XFS_DEFER_OPS_NR_INODES
];

73 
xfs_de„r_add
(
xfs_de„r_›s
 *
d›
, 
xfs_de„r_›s_ty≥
 
ty≥
,

74 
li°_hód
 *
h
);

75 
xfs_de„r_föish
(
xfs_å™s
 **
ç
, 
xfs_de„r_›s
 *
d›
,

76 
xfs_öode
 *
ù
);

77 
xfs_de„r_ˇn˚l
(
xfs_de„r_›s
 *
d›
);

78 
xfs_de„r_öô
(
xfs_de„r_›s
 *
d›
, 
xfs_fsblock_t
 *
fbp
);

79 
boﬁ
 
xfs_de„r_has_unföished_w‹k
(
xfs_de„r_›s
 *
d›
);

80 
xfs_de„r_joö
(
xfs_de„r_›s
 *
d›
, 
xfs_öode
 *
ù
);

83 
	sxfs_de„r_›_ty≥
 {

84 
xfs_de„r_›s_ty≥
 
	mty≥
;

85 
	mmax_ôems
;

86 (*
	mab‹t_öã¡
)(*);

87 *(*
	m¸óã_d⁄e
)(
	mxfs_å™s
 *, *, );

88 (*
	mföish_ôem
)(
	mxfs_å™s
 *, 
	mxfs_de„r_›s
 *,

89 
	mli°_hód
 *, *, **);

90 (*
	mföish_˛ónup
)(
	mxfs_å™s
 *, *, );

91 (*
	mˇn˚l_ôem
)(
	mli°_hód
 *);

92 (*
	mdiff_ôems
)(*, 
	mli°_hód
 *, list_head *);

93 *(*
	m¸óã_öã¡
)(
	mxfs_å™s
 *, 
	muöt
);

94 (*
	mlog_ôem
)(
	mxfs_å™s
 *, *, 
	mli°_hód
 *);

97 
xfs_de„r_öô_›_ty≥
(c⁄° 
xfs_de„r_›_ty≥
 *
ty≥
);

	@libxfs/xfs_dir2.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_f‹m©.h
"

21 
	~"xfs_log_f‹m©.h
"

22 
	~"xfs_å™s_ªsv.h
"

23 
	~"xfs_mou¡.h
"

24 
	~"xfs_de„r.h
"

25 
	~"xfs_da_f‹m©.h
"

26 
	~"xfs_da_båì.h
"

27 
	~"xfs_öode.h
"

28 
	~"xfs_å™s.h
"

29 
	~"xfs_bm≠.h
"

30 
	~"xfs_dú2.h
"

31 
	~"xfs_dú2_¥iv.h
"

32 
	~"xfs_åa˚.h
"

34 
xfs_«me
 
	gxfs_«me_dŸdŸ
 = { (*)"..", 2, 
XFS_DIR3_FT_DIR
 };

39 
	$xfs_mode_to_·y≥
(
mode
)

41 
mode
 & 
S_IFMT
) {

42 
S_IFREG
:

43  
XFS_DIR3_FT_REG_FILE
;

44 
S_IFDIR
:

45  
XFS_DIR3_FT_DIR
;

46 
S_IFCHR
:

47  
XFS_DIR3_FT_CHRDEV
;

48 
S_IFBLK
:

49  
XFS_DIR3_FT_BLKDEV
;

50 
S_IFIFO
:

51  
XFS_DIR3_FT_FIFO
;

52 
S_IFSOCK
:

53  
XFS_DIR3_FT_SOCK
;

54 
S_IFLNK
:

55  
XFS_DIR3_FT_SYMLINK
;

57  
XFS_DIR3_FT_UNKNOWN
;

59 
	}
}

65 
STATIC
 
xfs_dahash_t


66 
	$xfs_ascii_ci_hash«me
(

67 
xfs_«me
 *
«me
)

69 
xfs_dahash_t
 
hash
;

70 
i
;

72 
i
 = 0, 
hash
 = 0; i < 
«me
->
Àn
; i++)

73 
hash
 = 
	`tﬁowî
(
«me
->«me[
i
]Ë^ 
	`rﬁ32
(hash, 7);

75  
hash
;

76 
	}
}

78 
STATIC
 
xfs_dacmp


79 
	$xfs_ascii_ci_com≤ame
(

80 
xfs_da_¨gs
 *
¨gs
,

81 c⁄° *
«me
,

82 
Àn
)

84 
xfs_dacmp
 
ªsu…
;

85 
i
;

87 i‡(
¨gs
->
«mñí
 !
Àn
)

88  
XFS_CMP_DIFFERENT
;

90 
ªsu…
 = 
XFS_CMP_EXACT
;

91 
i
 = 0; i < 
Àn
; i++) {

92 i‡(
¨gs
->
«me
[
i
] ==Çame[i])

94 i‡(
	`tﬁowî
(
¨gs
->
«me
[
i
]) !=Åolower(name[i]))

95  
XFS_CMP_DIFFERENT
;

96 
ªsu…
 = 
XFS_CMP_CASE
;

99  
ªsu…
;

100 
	}
}

102 c⁄° 
xfs_«me›s
 
	gxfs_ascii_ci_«me›s
 = {

103 .
hash«me
 = 
xfs_ascii_ci_hash«me
,

104 .
	gcom≤ame
 = 
xfs_ascii_ci_com≤ame
,

108 
	$xfs_da_mou¡
(

109 
xfs_mou¡
 *
mp
)

111 
xfs_da_geomëry
 *
dageo
;

112 
nodehdr_size
;

115 
	`ASSERT
(
mp
->
m_sb
.
sb_vîsi⁄num
 & 
XFS_SB_VERSION_DIRV2BIT
);

116 
	`ASSERT
((1 << (
mp
->
m_sb
.
sb_blocklog
 + mp->m_sb.
sb_dúblklog
)) <=

117 
XFS_MAX_BLOCKSIZE
);

119 
mp
->
m_dú_öode_›s
 = 
	`xfs_dú_gë_›s
(mp, 
NULL
);

120 
mp
->
m_n⁄dú_öode_›s
 = 
	`xfs_n⁄dú_gë_›s
(mp, 
NULL
);

122 
nodehdr_size
 = 
mp
->
m_dú_öode_›s
->
node_hdr_size
;

123 
mp
->
m_dú_geo
 = 
	`kmem_zÆloc
((
xfs_da_geomëry
),

124 
KM_SLEEP
 | 
KM_MAYFAIL
);

125 
mp
->
m_©å_geo
 = 
	`kmem_zÆloc
((
xfs_da_geomëry
),

126 
KM_SLEEP
 | 
KM_MAYFAIL
);

127 i‡(!
mp
->
m_dú_geo
 || !mp->
m_©å_geo
) {

128 
	`kmem_‰ì
(
mp
->
m_dú_geo
);

129 
	`kmem_‰ì
(
mp
->
m_©å_geo
);

130  -
ENOMEM
;

134 
dageo
 = 
mp
->
m_dú_geo
;

135 
dageo
->
blklog
 = 
mp
->
m_sb
.
sb_blocklog
 + mp->m_sb.
sb_dúblklog
;

136 
dageo
->
fsblog
 = 
mp
->
m_sb
.
sb_blocklog
;

137 
dageo
->
blksize
 = 1 << dageo->
blklog
;

138 
dageo
->
fsbcou¡
 = 1 << 
mp
->
m_sb
.
sb_dúblklog
;

144 
dageo
->
d©ablk
 = 
	`xfs_dú2_byã_to_da
(dageo, 
XFS_DIR2_DATA_OFFSET
);

145 
dageo
->
Àafblk
 = 
	`xfs_dú2_byã_to_da
(dageo, 
XFS_DIR2_LEAF_OFFSET
);

146 
dageo
->
‰ìblk
 = 
	`xfs_dú2_byã_to_da
(dageo, 
XFS_DIR2_FREE_OFFSET
);

147 
dageo
->
node_íts
 = (dageo->
blksize
 - 
nodehdr_size
) /

148 (
uöt
)(
xfs_da_node_íåy_t
);

149 
dageo
->
magi˝˘
 = (dageo->
blksize
 * 37) / 100;

152 
dageo
 = 
mp
->
m_©å_geo
;

153 
dageo
->
blklog
 = 
mp
->
m_sb
.
sb_blocklog
;

154 
dageo
->
fsblog
 = 
mp
->
m_sb
.
sb_blocklog
;

155 
dageo
->
blksize
 = 1 << dageo->
blklog
;

156 
dageo
->
fsbcou¡
 = 1;

157 
dageo
->
node_íts
 = (dageo->
blksize
 - 
nodehdr_size
) /

158 (
uöt
)(
xfs_da_node_íåy_t
);

159 
dageo
->
magi˝˘
 = (dageo->
blksize
 * 37) / 100;

161 i‡(
	`xfs_sb_vîsi⁄_haßsciici
(&
mp
->
m_sb
))

162 
mp
->
m_dú«me›s
 = &
xfs_ascii_ci_«me›s
;

164 
mp
->
m_dú«me›s
 = &
xfs_deÁu…_«me›s
;

167 
	}
}

170 
	$xfs_da_unmou¡
(

171 
xfs_mou¡
 *
mp
)

173 
	`kmem_‰ì
(
mp
->
m_dú_geo
);

174 
	`kmem_‰ì
(
mp
->
m_©å_geo
);

175 
	}
}

181 
	$xfs_dú_i£m±y
(

182 
xfs_öode_t
 *
dp
)

184 
xfs_dú2_sf_hdr_t
 *
sÂ
;

186 
	`ASSERT
(
	`S_ISDIR
(
	`VFS_I
(
dp
)->
i_mode
));

187 i‡(
dp
->
i_d
.
di_size
 == 0)

189 i‡(
dp
->
i_d
.
di_size
 > 
	`XFS_IFORK_DSIZE
(dp))

191 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

192  !
sÂ
->
cou¡
;

193 
	}
}

199 
	$xfs_dú_öo_vÆid©e
(

200 
xfs_mou¡_t
 *
mp
,

201 
xfs_öo_t
 
öo
)

203 
xfs_agblock_t
 
agblkno
;

204 
xfs_agöo_t
 
agöo
;

205 
xfs_agnumbî_t
 
agno
;

206 
öo_ok
;

207 
ioff
;

209 
agno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
öo
);

210 
agblkno
 = 
	`XFS_INO_TO_AGBNO
(
mp
, 
öo
);

211 
ioff
 = 
	`XFS_INO_TO_OFFSET
(
mp
, 
öo
);

212 
agöo
 = 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
agblkno
, 
ioff
);

213 
öo_ok
 =

214 
agno
 < 
mp
->
m_sb
.
sb_agcou¡
 &&

215 
agblkno
 < 
mp
->
m_sb
.
sb_agblocks
 &&

216 
agblkno
 != 0 &&

217 
ioff
 < (1 << 
mp
->
m_sb
.
sb_ö›blog
) &&

218 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
Ë=
öo
;

219 i‡(
	`u∆ikñy
(
	`XFS_TEST_ERROR
(!
öo_ok
, 
mp
, 
XFS_ERRTAG_DIR_INO_VALIDATE
,

220 
XFS_RANDOM_DIR_INO_VALIDATE
))) {

221 
	`xfs_w¨n
(
mp
, "Invalid inodeÇumber 0x%Lx",

222 (Ë
öo
);

223 
	`XFS_ERROR_REPORT
("xfs_dú_öo_vÆid©e", 
XFS_ERRLEVEL_LOW
, 
mp
);

224  -
EFSCORRUPTED
;

227 
	}
}

233 
	$xfs_dú_öô
(

234 
xfs_å™s_t
 *
ç
,

235 
xfs_öode_t
 *
dp
,

236 
xfs_öode_t
 *
pdp
)

238 
xfs_da_¨gs
 *
¨gs
;

239 
îr‹
;

241 
	`ASSERT
(
	`S_ISDIR
(
	`VFS_I
(
dp
)->
i_mode
));

242 
îr‹
 = 
	`xfs_dú_öo_vÆid©e
(
ç
->
t_mou¡p
, 
pdp
->
i_öo
);

243 i‡(
îr‹
)

244  
îr‹
;

246 
¨gs
 = 
	`kmem_zÆloc
((*¨gs), 
KM_SLEEP
 | 
KM_NOFS
);

247 i‡(!
¨gs
)

248  -
ENOMEM
;

250 
¨gs
->
geo
 = 
dp
->
i_mou¡
->
m_dú_geo
;

251 
¨gs
->
dp
 = dp;

252 
¨gs
->
å™s
 = 
ç
;

253 
îr‹
 = 
	`xfs_dú2_sf_¸óã
(
¨gs
, 
pdp
->
i_öo
);

254 
	`kmem_‰ì
(
¨gs
);

255  
îr‹
;

256 
	}
}

263 
	$xfs_dú_¸óã«me
(

264 
xfs_å™s_t
 *
ç
,

265 
xfs_öode_t
 *
dp
,

266 
xfs_«me
 *
«me
,

267 
xfs_öo_t
 
öum
,

268 
xfs_fsblock_t
 *
fú°
,

269 
xfs_de„r_›s
 *
df›s
,

270 
xfs_exéí_t
 
tŸÆ
)

272 
xfs_da_¨gs
 *
¨gs
;

273 
rvÆ
;

274 
v
;

276 
	`ASSERT
(
	`S_ISDIR
(
	`VFS_I
(
dp
)->
i_mode
));

277 i‡(
öum
) {

278 
rvÆ
 = 
	`xfs_dú_öo_vÆid©e
(
ç
->
t_mou¡p
, 
öum
);

279 i‡(
rvÆ
)

280  
rvÆ
;

281 
	`XFS_STATS_INC
(
dp
->
i_mou¡
, 
xs_dú_¸óã
);

284 
¨gs
 = 
	`kmem_zÆloc
((*¨gs), 
KM_SLEEP
 | 
KM_NOFS
);

285 i‡(!
¨gs
)

286  -
ENOMEM
;

288 
¨gs
->
geo
 = 
dp
->
i_mou¡
->
m_dú_geo
;

289 
¨gs
->
«me
 =Çame->name;

290 
¨gs
->
«mñí
 = 
«me
->
Àn
;

291 
¨gs
->
fûëy≥
 = 
«me
->
ty≥
;

292 
¨gs
->
hashvÆ
 = 
dp
->
i_mou¡
->
m_dú«me›s
->
	`hash«me
(
«me
);

293 
¨gs
->
öumbî
 = 
öum
;

294 
¨gs
->
dp
 = dp;

295 
¨gs
->
fú°block
 = 
fú°
;

296 
¨gs
->
df›s
 = dfops;

297 
¨gs
->
tŸÆ
 =Åotal;

298 
¨gs
->
whichf‹k
 = 
XFS_DATA_FORK
;

299 
¨gs
->
å™s
 = 
ç
;

300 
¨gs
->
›_Êags
 = 
XFS_DA_OP_ADDNAME
 | 
XFS_DA_OP_OKNOENT
;

301 i‡(!
öum
)

302 
¨gs
->
›_Êags
 |
XFS_DA_OP_JUSTCHECK
;

304 i‡(
dp
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
) {

305 
rvÆ
 = 
	`xfs_dú2_sf_add«me
(
¨gs
);

306 
out_‰ì
;

309 
rvÆ
 = 
	`xfs_dú2_isblock
(
¨gs
, &
v
);

310 i‡(
rvÆ
)

311 
out_‰ì
;

312 i‡(
v
) {

313 
rvÆ
 = 
	`xfs_dú2_block_add«me
(
¨gs
);

314 
out_‰ì
;

317 
rvÆ
 = 
	`xfs_dú2_i¶óf
(
¨gs
, &
v
);

318 i‡(
rvÆ
)

319 
out_‰ì
;

320 i‡(
v
)

321 
rvÆ
 = 
	`xfs_dú2_Àaf_add«me
(
¨gs
);

323 
rvÆ
 = 
	`xfs_dú2_node_add«me
(
¨gs
);

325 
out_‰ì
:

326 
	`kmem_‰ì
(
¨gs
);

327  
rvÆ
;

328 
	}
}

335 
	$xfs_dú_cûookup_ªsu…
(

336 
xfs_da_¨gs
 *
¨gs
,

337 c⁄° *
«me
,

338 
Àn
)

340 i‡(
¨gs
->
cm¥esu…
 =
XFS_CMP_DIFFERENT
)

341  -
ENOENT
;

342 i‡(
¨gs
->
cm¥esu…
 !
XFS_CMP_CASE
 ||

343 !(
¨gs
->
›_Êags
 & 
XFS_DA_OP_CILOOKUP
))

344  -
EEXIST
;

346 
¨gs
->
vÆue
 = 
	`kmem_Æloc
(
Àn
, 
KM_NOFS
 | 
KM_MAYFAIL
);

347 i‡(!
¨gs
->
vÆue
)

348  -
ENOMEM
;

350 
	`mem˝y
(
¨gs
->
vÆue
, 
«me
, 
Àn
);

351 
¨gs
->
vÆuñí
 = 
Àn
;

352  -
EEXIST
;

353 
	}
}

362 
	$xfs_dú_lookup
(

363 
xfs_å™s_t
 *
ç
,

364 
xfs_öode_t
 *
dp
,

365 
xfs_«me
 *
«me
,

366 
xfs_öo_t
 *
öum
,

367 
xfs_«me
 *
ci_«me
)

369 
xfs_da_¨gs
 *
¨gs
;

370 
rvÆ
;

371 
v
;

372 
lock_mode
;

374 
	`ASSERT
(
	`S_ISDIR
(
	`VFS_I
(
dp
)->
i_mode
));

375 
	`XFS_STATS_INC
(
dp
->
i_mou¡
, 
xs_dú_lookup
);

385 
¨gs
 = 
	`kmem_zÆloc
((*¨gs), 
KM_SLEEP
 | 
KM_NOFS
);

386 
¨gs
->
geo
 = 
dp
->
i_mou¡
->
m_dú_geo
;

387 
¨gs
->
«me
 =Çame->name;

388 
¨gs
->
«mñí
 = 
«me
->
Àn
;

389 
¨gs
->
fûëy≥
 = 
«me
->
ty≥
;

390 
¨gs
->
hashvÆ
 = 
dp
->
i_mou¡
->
m_dú«me›s
->
	`hash«me
(
«me
);

391 
¨gs
->
dp
 = dp;

392 
¨gs
->
whichf‹k
 = 
XFS_DATA_FORK
;

393 
¨gs
->
å™s
 = 
ç
;

394 
¨gs
->
›_Êags
 = 
XFS_DA_OP_OKNOENT
;

395 i‡(
ci_«me
)

396 
¨gs
->
›_Êags
 |
XFS_DA_OP_CILOOKUP
;

398 
lock_mode
 = 
	`xfs_ûock_d©a_m≠_sh¨ed
(
dp
);

399 i‡(
dp
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
) {

400 
rvÆ
 = 
	`xfs_dú2_sf_lookup
(
¨gs
);

401 
out_check_rvÆ
;

404 
rvÆ
 = 
	`xfs_dú2_isblock
(
¨gs
, &
v
);

405 i‡(
rvÆ
)

406 
out_‰ì
;

407 i‡(
v
) {

408 
rvÆ
 = 
	`xfs_dú2_block_lookup
(
¨gs
);

409 
out_check_rvÆ
;

412 
rvÆ
 = 
	`xfs_dú2_i¶óf
(
¨gs
, &
v
);

413 i‡(
rvÆ
)

414 
out_‰ì
;

415 i‡(
v
)

416 
rvÆ
 = 
	`xfs_dú2_Àaf_lookup
(
¨gs
);

418 
rvÆ
 = 
	`xfs_dú2_node_lookup
(
¨gs
);

420 
out_check_rvÆ
:

421 i‡(
rvÆ
 =-
EEXIST
)

422 
rvÆ
 = 0;

423 i‡(!
rvÆ
) {

424 *
öum
 = 
¨gs
->
öumbî
;

425 i‡(
ci_«me
) {

426 
ci_«me
->
«me
 = 
¨gs
->
vÆue
;

427 
ci_«me
->
Àn
 = 
¨gs
->
vÆuñí
;

430 
out_‰ì
:

431 
	`xfs_iu∆ock
(
dp
, 
lock_mode
);

432 
	`kmem_‰ì
(
¨gs
);

433  
rvÆ
;

434 
	}
}

440 
	$xfs_dú_ªmovíame
(

441 
xfs_å™s_t
 *
ç
,

442 
xfs_öode_t
 *
dp
,

443 
xfs_«me
 *
«me
,

444 
xfs_öo_t
 
öo
,

445 
xfs_fsblock_t
 *
fú°
,

446 
xfs_de„r_›s
 *
df›s
,

447 
xfs_exéí_t
 
tŸÆ
)

449 
xfs_da_¨gs
 *
¨gs
;

450 
rvÆ
;

451 
v
;

453 
	`ASSERT
(
	`S_ISDIR
(
	`VFS_I
(
dp
)->
i_mode
));

454 
	`XFS_STATS_INC
(
dp
->
i_mou¡
, 
xs_dú_ªmove
);

456 
¨gs
 = 
	`kmem_zÆloc
((*¨gs), 
KM_SLEEP
 | 
KM_NOFS
);

457 i‡(!
¨gs
)

458  -
ENOMEM
;

460 
¨gs
->
geo
 = 
dp
->
i_mou¡
->
m_dú_geo
;

461 
¨gs
->
«me
 =Çame->name;

462 
¨gs
->
«mñí
 = 
«me
->
Àn
;

463 
¨gs
->
fûëy≥
 = 
«me
->
ty≥
;

464 
¨gs
->
hashvÆ
 = 
dp
->
i_mou¡
->
m_dú«me›s
->
	`hash«me
(
«me
);

465 
¨gs
->
öumbî
 = 
öo
;

466 
¨gs
->
dp
 = dp;

467 
¨gs
->
fú°block
 = 
fú°
;

468 
¨gs
->
df›s
 = dfops;

469 
¨gs
->
tŸÆ
 =Åotal;

470 
¨gs
->
whichf‹k
 = 
XFS_DATA_FORK
;

471 
¨gs
->
å™s
 = 
ç
;

473 i‡(
dp
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
) {

474 
rvÆ
 = 
	`xfs_dú2_sf_ªmovíame
(
¨gs
);

475 
out_‰ì
;

478 
rvÆ
 = 
	`xfs_dú2_isblock
(
¨gs
, &
v
);

479 i‡(
rvÆ
)

480 
out_‰ì
;

481 i‡(
v
) {

482 
rvÆ
 = 
	`xfs_dú2_block_ªmovíame
(
¨gs
);

483 
out_‰ì
;

486 
rvÆ
 = 
	`xfs_dú2_i¶óf
(
¨gs
, &
v
);

487 i‡(
rvÆ
)

488 
out_‰ì
;

489 i‡(
v
)

490 
rvÆ
 = 
	`xfs_dú2_Àaf_ªmovíame
(
¨gs
);

492 
rvÆ
 = 
	`xfs_dú2_node_ªmovíame
(
¨gs
);

493 
out_‰ì
:

494 
	`kmem_‰ì
(
¨gs
);

495  
rvÆ
;

496 
	}
}

502 
	$xfs_dú_ª∂a˚
(

503 
xfs_å™s_t
 *
ç
,

504 
xfs_öode_t
 *
dp
,

505 
xfs_«me
 *
«me
,

506 
xfs_öo_t
 
öum
,

507 
xfs_fsblock_t
 *
fú°
,

508 
xfs_de„r_›s
 *
df›s
,

509 
xfs_exéí_t
 
tŸÆ
)

511 
xfs_da_¨gs
 *
¨gs
;

512 
rvÆ
;

513 
v
;

515 
	`ASSERT
(
	`S_ISDIR
(
	`VFS_I
(
dp
)->
i_mode
));

517 
rvÆ
 = 
	`xfs_dú_öo_vÆid©e
(
ç
->
t_mou¡p
, 
öum
);

518 i‡(
rvÆ
)

519  
rvÆ
;

521 
¨gs
 = 
	`kmem_zÆloc
((*¨gs), 
KM_SLEEP
 | 
KM_NOFS
);

522 i‡(!
¨gs
)

523  -
ENOMEM
;

525 
¨gs
->
geo
 = 
dp
->
i_mou¡
->
m_dú_geo
;

526 
¨gs
->
«me
 =Çame->name;

527 
¨gs
->
«mñí
 = 
«me
->
Àn
;

528 
¨gs
->
fûëy≥
 = 
«me
->
ty≥
;

529 
¨gs
->
hashvÆ
 = 
dp
->
i_mou¡
->
m_dú«me›s
->
	`hash«me
(
«me
);

530 
¨gs
->
öumbî
 = 
öum
;

531 
¨gs
->
dp
 = dp;

532 
¨gs
->
fú°block
 = 
fú°
;

533 
¨gs
->
df›s
 = dfops;

534 
¨gs
->
tŸÆ
 =Åotal;

535 
¨gs
->
whichf‹k
 = 
XFS_DATA_FORK
;

536 
¨gs
->
å™s
 = 
ç
;

538 i‡(
dp
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
) {

539 
rvÆ
 = 
	`xfs_dú2_sf_ª∂a˚
(
¨gs
);

540 
out_‰ì
;

543 
rvÆ
 = 
	`xfs_dú2_isblock
(
¨gs
, &
v
);

544 i‡(
rvÆ
)

545 
out_‰ì
;

546 i‡(
v
) {

547 
rvÆ
 = 
	`xfs_dú2_block_ª∂a˚
(
¨gs
);

548 
out_‰ì
;

551 
rvÆ
 = 
	`xfs_dú2_i¶óf
(
¨gs
, &
v
);

552 i‡(
rvÆ
)

553 
out_‰ì
;

554 i‡(
v
)

555 
rvÆ
 = 
	`xfs_dú2_Àaf_ª∂a˚
(
¨gs
);

557 
rvÆ
 = 
	`xfs_dú2_node_ª∂a˚
(
¨gs
);

558 
out_‰ì
:

559 
	`kmem_‰ì
(
¨gs
);

560  
rvÆ
;

561 
	}
}

567 
	$xfs_dú_ˇ√¡î
(

568 
xfs_å™s_t
 *
ç
,

569 
xfs_öode_t
 *
dp
,

570 
xfs_«me
 *
«me
)

572  
	`xfs_dú_¸óã«me
(
ç
, 
dp
, 
«me
, 0, 
NULL
, NULL, 0);

573 
	}
}

586 
	$xfs_dú2_grow_öode
(

587 
xfs_da_¨gs
 *
¨gs
,

588 
•a˚
,

589 
xfs_dú2_db_t
 *
dbp
)

591 
xfs_öode
 *
dp
 = 
¨gs
->dp;

592 
xfs_mou¡
 *
mp
 = 
dp
->
i_mou¡
;

593 
xfs_fûeoff_t
 
bno
;

594 
cou¡
;

595 
îr‹
;

597 
	`åa˚_xfs_dú2_grow_öode
(
¨gs
, 
•a˚
);

602 
bno
 = 
	`XFS_B_TO_FSBT
(
mp
, 
•a˚
 * 
XFS_DIR2_SPACE_SIZE
);

603 
cou¡
 = 
¨gs
->
geo
->
fsbcou¡
;

605 
îr‹
 = 
	`xfs_da_grow_öode_öt
(
¨gs
, &
bno
, 
cou¡
);

606 i‡(
îr‹
)

607  
îr‹
;

609 *
dbp
 = 
	`xfs_dú2_da_to_db
(
¨gs
->
geo
, (
xfs_dablk_t
)
bno
);

614 i‡(
•a˚
 =
XFS_DIR2_DATA_SPACE
) {

615 
xfs_fsize_t
 
size
;

617 
size
 = 
	`XFS_FSB_TO_B
(
mp
, 
bno
 + 
cou¡
);

618 i‡(
size
 > 
dp
->
i_d
.
di_size
) {

619 
dp
->
i_d
.
di_size
 = 
size
;

620 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
, 
XFS_ILOG_CORE
);

624 
	}
}

630 
	$xfs_dú2_isblock
(

631 
xfs_da_¨gs
 *
¨gs
,

632 *
vp
)

634 
xfs_fûeoff_t
 
œ°
;

635 
rvÆ
;

637 i‡((
rvÆ
 = 
	`xfs_bm≠_œ°_off£t
(
¨gs
->
dp
, &
œ°
, 
XFS_DATA_FORK
)))

638  
rvÆ
;

639 
rvÆ
 = 
	`XFS_FSB_TO_B
(
¨gs
->
dp
->
i_mou¡
, 
œ°
Ë=¨gs->
geo
->
blksize
;

640 i‡(
rvÆ
 !0 && 
¨gs
->
dp
->
i_d
.
di_size
 !¨gs->
geo
->
blksize
)

641  -
EFSCORRUPTED
;

642 *
vp
 = 
rvÆ
;

644 
	}
}

650 
	$xfs_dú2_i¶óf
(

651 
xfs_da_¨gs
 *
¨gs
,

652 *
vp
)

654 
xfs_fûeoff_t
 
œ°
;

655 
rvÆ
;

657 i‡((
rvÆ
 = 
	`xfs_bm≠_œ°_off£t
(
¨gs
->
dp
, &
œ°
, 
XFS_DATA_FORK
)))

658  
rvÆ
;

659 *
vp
 = 
œ°
 =
¨gs
->
geo
->
Àafblk
 +árgs->geo->
fsbcou¡
;

661 
	}
}

669 
	$xfs_dú2_shrök_öode
(

670 
xfs_da_¨gs_t
 *
¨gs
,

671 
xfs_dú2_db_t
 
db
,

672 
xfs_buf
 *
bp
)

674 
xfs_fûeoff_t
 
bno
;

675 
xfs_dablk_t
 
da
;

676 
d⁄e
;

677 
xfs_öode_t
 *
dp
;

678 
îr‹
;

679 
xfs_mou¡_t
 *
mp
;

680 
xfs_å™s_t
 *
ç
;

682 
	`åa˚_xfs_dú2_shrök_öode
(
¨gs
, 
db
);

684 
dp
 = 
¨gs
->dp;

685 
mp
 = 
dp
->
i_mou¡
;

686 
ç
 = 
¨gs
->
å™s
;

687 
da
 = 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
db
);

690 
îr‹
 = 
	`xfs_bunm≠i
(
ç
, 
dp
, 
da
, 
¨gs
->
geo
->
fsbcou¡
, 0, 0,

691 
¨gs
->
fú°block
,árgs->
df›s
, &
d⁄e
);

692 i‡(
îr‹
) {

705  
îr‹
;

707 
	`ASSERT
(
d⁄e
);

711 
	`xfs_å™s_bövÆ
(
ç
, 
bp
);

715 i‡(
db
 >
	`xfs_dú2_byã_to_db
(
¨gs
->
geo
, 
XFS_DIR2_LEAF_OFFSET
))

720 i‡(
dp
->
i_d
.
di_size
 > 
	`xfs_dú2_db_off_to_byã
(
¨gs
->
geo
, 
db
 + 1, 0))

722 
bno
 = 
da
;

723 i‡((
îr‹
 = 
	`xfs_bm≠_œ°_bef‹e
(
ç
, 
dp
, &
bno
, 
XFS_DATA_FORK
))) {

727  
îr‹
;

729 i‡(
db
 =
¨gs
->
geo
->
d©ablk
)

730 
	`ASSERT
(
bno
 == 0);

732 
	`ASSERT
(
bno
 > 0);

736 
dp
->
i_d
.
di_size
 = 
	`XFS_FSB_TO_B
(
mp
, 
bno
);

737 
	`xfs_å™s_log_öode
(
ç
, 
dp
, 
XFS_ILOG_CORE
);

739 
	}
}

	@libxfs/xfs_dir2.h

18 #i‚de‡
__XFS_DIR2_H__


19 
	#__XFS_DIR2_H__


	)

21 
	~"xfs_da_f‹m©.h
"

22 
	~"xfs_da_båì.h
"

24 
	gxfs_de„r_›s
;

25 
	gxfs_da_¨gs
;

26 
	gxfs_öode
;

27 
	gxfs_mou¡
;

28 
	gxfs_å™s
;

29 
	gxfs_dú2_sf_hdr
;

30 
	gxfs_dú2_sf_íåy
;

31 
	gxfs_dú2_d©a_hdr
;

32 
	gxfs_dú2_d©a_íåy
;

33 
	gxfs_dú2_d©a_unu£d
;

35 
xfs_«me
 
xfs_«me_dŸdŸ
;

40 
xfs_mode_to_·y≥
(
mode
);

45 
	sxfs_dú_›s
 {

46 (*
	msf_ítsize
)(
xfs_dú2_sf_hdr
 *
	mhdr
, 
	mÀn
);

47 
	mxfs_dú2_sf_íåy
 *

48 (*
	msf_√xã¡ry
)(
xfs_dú2_sf_hdr
 *
	mhdr
,

49 
xfs_dú2_sf_íåy
 *
	ms„p
);

50 
__uöt8_t
 (*
sf_gë_·y≥
)(
xfs_dú2_sf_íåy
 *
	ms„p
);

51 (*
	msf_put_·y≥
)(
xfs_dú2_sf_íåy
 *
	ms„p
,

52 
__uöt8_t
 
	m·y≥
);

53 
xfs_öo_t
 (*
sf_gë_öo
)(
xfs_dú2_sf_hdr
 *
	mhdr
,

54 
xfs_dú2_sf_íåy
 *
	ms„p
);

55 (*
	msf_put_öo
)(
xfs_dú2_sf_hdr
 *
	mhdr
,

56 
xfs_dú2_sf_íåy
 *
	ms„p
,

57 
xfs_öo_t
 
	möo
);

58 
xfs_öo_t
 (*
sf_gë_∑ª¡_öo
)(
xfs_dú2_sf_hdr
 *
	mhdr
);

59 (*
	msf_put_∑ª¡_öo
)(
xfs_dú2_sf_hdr
 *
	mhdr
,

60 
xfs_öo_t
 
	möo
);

62 (*
	md©a_ítsize
)(
	mÀn
);

63 
__uöt8_t
 (*
d©a_gë_·y≥
)(
xfs_dú2_d©a_íåy
 *
	mdï
);

64 (*
	md©a_put_·y≥
)(
xfs_dú2_d©a_íåy
 *
	mdï
,

65 
__uöt8_t
 
	m·y≥
);

66 
	m__be16
 * (*
	md©a_íåy_èg_p
)(
xfs_dú2_d©a_íåy
 *
	mdï
);

67 
	mxfs_dú2_d©a_‰ì
 *

68 (*
	md©a_be°‰ì_p
)(
xfs_dú2_d©a_hdr
 *
	mhdr
);

70 
xfs_dú2_d©a_aoff_t
 
	md©a_dŸ_off£t
;

71 
xfs_dú2_d©a_aoff_t
 
	md©a_dŸdŸ_off£t
;

72 
xfs_dú2_d©a_aoff_t
 
	md©a_fú°_off£t
;

73 
size_t
 
	md©a_íåy_off£t
;

75 
	mxfs_dú2_d©a_íåy
 *

76 (*
	md©a_dŸ_íåy_p
)(
xfs_dú2_d©a_hdr
 *
	mhdr
);

77 
	mxfs_dú2_d©a_íåy
 *

78 (*
	md©a_dŸdŸ_íåy_p
)(
xfs_dú2_d©a_hdr
 *
	mhdr
);

79 
	mxfs_dú2_d©a_íåy
 *

80 (*
	md©a_fú°_íåy_p
)(
xfs_dú2_d©a_hdr
 *
	mhdr
);

81 
	mxfs_dú2_d©a_íåy
 *

82 (*
	md©a_íåy_p
)(
xfs_dú2_d©a_hdr
 *
	mhdr
);

83 
	mxfs_dú2_d©a_unu£d
 *

84 (*
	md©a_unu£d_p
)(
xfs_dú2_d©a_hdr
 *
	mhdr
);

86 
	mÀaf_hdr_size
;

87 (*
	mÀaf_hdr_to_disk
)(
xfs_dú2_Àaf
 *
	mto
,

88 
xfs_dú3_i˛óf_hdr
 *
	m‰om
);

89 (*
	mÀaf_hdr_‰om_disk
)(
xfs_dú3_i˛óf_hdr
 *
	mto
,

90 
xfs_dú2_Àaf
 *
	m‰om
);

91 (*
	mÀaf_max_íts
)(
xfs_da_geomëry
 *
	mgeo
);

92 
	mxfs_dú2_Àaf_íåy
 *

93 (*
	mÀaf_íts_p
)(
xfs_dú2_Àaf
 *
	mÕ
);

95 
	mnode_hdr_size
;

96 (*
	mnode_hdr_to_disk
)(
xfs_da_öäode
 *
	mto
,

97 
xfs_da3_i˙ode_hdr
 *
	m‰om
);

98 (*
	mnode_hdr_‰om_disk
)(
xfs_da3_i˙ode_hdr
 *
	mto
,

99 
xfs_da_öäode
 *
	m‰om
);

100 
	mxfs_da_node_íåy
 *

101 (*
	mnode_åì_p
)(
xfs_da_öäode
 *
	md≠
);

103 
	m‰ì_hdr_size
;

104 (*
	m‰ì_hdr_to_disk
)(
xfs_dú2_‰ì
 *
	mto
,

105 
xfs_dú3_ic‰ì_hdr
 *
	m‰om
);

106 (*
	m‰ì_hdr_‰om_disk
)(
xfs_dú3_ic‰ì_hdr
 *
	mto
,

107 
xfs_dú2_‰ì
 *
	m‰om
);

108 (*
	m‰ì_max_be°s
)(
xfs_da_geomëry
 *
	mgeo
);

109 
	m__be16
 * (*
	m‰ì_be°s_p
)(
xfs_dú2_‰ì
 *
	m‰ì
);

110 
xfs_dú2_db_t
 (*
db_to_fdb
)(
xfs_da_geomëry
 *
	mgeo
,

111 
xfs_dú2_db_t
 
	mdb
);

112 (*
	mdb_to_fdödex
)(
xfs_da_geomëry
 *
	mgeo
,

113 
xfs_dú2_db_t
 
	mdb
);

116 c⁄° 
xfs_dú_›s
 *

117 
xfs_dú_gë_›s
(
xfs_mou¡
 *
mp
, 
xfs_öode
 *
dp
);

118 c⁄° 
xfs_dú_›s
 *

119 
xfs_n⁄dú_gë_›s
(
xfs_mou¡
 *
mp
, 
xfs_öode
 *
dp
);

124 
xfs_dú_°¨tup
();

125 
xfs_da_mou¡
(
xfs_mou¡
 *
mp
);

126 
xfs_da_unmou¡
(
xfs_mou¡
 *
mp
);

128 
xfs_dú_i£m±y
(
xfs_öode
 *
dp
);

129 
xfs_dú_öô
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

130 
xfs_öode
 *
pdp
);

131 
xfs_dú_¸óã«me
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

132 
xfs_«me
 *
«me
, 
xfs_öo_t
 
öum
,

133 
xfs_fsblock_t
 *
fú°
,

134 
xfs_de„r_›s
 *
df›s
, 
xfs_exéí_t
 
tŸ
);

135 
xfs_dú_lookup
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

136 
xfs_«me
 *
«me
, 
xfs_öo_t
 *
öum
,

137 
xfs_«me
 *
ci_«me
);

138 
xfs_dú_ªmovíame
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

139 
xfs_«me
 *
«me
, 
xfs_öo_t
 
öo
,

140 
xfs_fsblock_t
 *
fú°
,

141 
xfs_de„r_›s
 *
df›s
, 
xfs_exéí_t
 
tŸ
);

142 
xfs_dú_ª∂a˚
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

143 
xfs_«me
 *
«me
, 
xfs_öo_t
 
öum
,

144 
xfs_fsblock_t
 *
fú°
,

145 
xfs_de„r_›s
 *
df›s
, 
xfs_exéí_t
 
tŸ
);

146 
xfs_dú_ˇ√¡î
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

147 
xfs_«me
 *
«me
);

152 
xfs_dú2_sf_to_block
(
xfs_da_¨gs
 *
¨gs
);

157 
xfs_dú2_isblock
(
xfs_da_¨gs
 *
¨gs
, *
r
);

158 
xfs_dú2_i¶óf
(
xfs_da_¨gs
 *
¨gs
, *
r
);

159 
xfs_dú2_shrök_öode
(
xfs_da_¨gs
 *
¨gs
, 
xfs_dú2_db_t
 
db
,

160 
xfs_buf
 *
bp
);

162 
xfs_dú2_d©a_‰ìsˇn_öt
(
xfs_da_geomëry
 *
geo
,

163 c⁄° 
xfs_dú_›s
 *
›s
,

164 
xfs_dú2_d©a_hdr
 *
hdr
, *
loghód
);

165 
xfs_dú2_d©a_‰ìsˇn
(
xfs_öode
 *
dp
,

166 
xfs_dú2_d©a_hdr
 *
hdr
, *
loghód
);

167 
xfs_dú2_d©a_log_íåy
(
xfs_da_¨gs
 *
¨gs
,

168 
xfs_buf
 *
bp
, 
xfs_dú2_d©a_íåy
 *
dï
);

169 
xfs_dú2_d©a_log_hódî
(
xfs_da_¨gs
 *
¨gs
,

170 
xfs_buf
 *
bp
);

171 
xfs_dú2_d©a_log_unu£d
(
xfs_da_¨gs
 *
¨gs
,

172 
xfs_buf
 *
bp
, 
xfs_dú2_d©a_unu£d
 *
dup
);

173 
xfs_dú2_d©a_make_‰ì
(
xfs_da_¨gs
 *
¨gs
,

174 
xfs_buf
 *
bp
, 
xfs_dú2_d©a_aoff_t
 
off£t
,

175 
xfs_dú2_d©a_aoff_t
 
Àn
, *
√edlogp
, *
√edsˇ≈
);

176 
xfs_dú2_d©a_u£_‰ì
(
xfs_da_¨gs
 *
¨gs
,

177 
xfs_buf
 *
bp
, 
xfs_dú2_d©a_unu£d
 *
dup
,

178 
xfs_dú2_d©a_aoff_t
 
off£t
, xfs_dú2_d©a_aoff_à
Àn
,

179 *
√edlogp
, *
√edsˇ≈
);

181 
xfs_dú2_d©a_‰ì
 *
xfs_dú2_d©a_‰ìföd
(

182 
xfs_dú2_d©a_hdr
 *
hdr
, 
xfs_dú2_d©a_‰ì
 *
bf
,

183 
xfs_dú2_d©a_unu£d
 *
dup
);

185 
xfs_dú_öo_vÆid©e
(
xfs_mou¡
 *
mp
, 
xfs_öo_t
 
öo
);

187 c⁄° 
xfs_buf_›s
 
xfs_dú3_block_buf_›s
;

188 c⁄° 
xfs_buf_›s
 
xfs_dú3_Àa‚_buf_›s
;

189 c⁄° 
xfs_buf_›s
 
xfs_dú3_Àaf1_buf_›s
;

190 c⁄° 
xfs_buf_›s
 
xfs_dú3_‰ì_buf_›s
;

191 c⁄° 
xfs_buf_›s
 
xfs_dú3_d©a_buf_›s
;

202 
ölöe
 
xfs_dú2_off_t


203 
	$xfs_dú2_d©≠å_to_byã
(
xfs_dú2_d©≠å_t
 
dp
)

205  (
xfs_dú2_off_t
)
dp
 << 
XFS_DIR2_DATA_ALIGN_LOG
;

206 
	}
}

211 
ölöe
 
xfs_dú2_d©≠å_t


212 
	$xfs_dú2_byã_to_d©≠å
(
xfs_dú2_off_t
 
by
)

214  (
xfs_dú2_d©≠å_t
)(
by
 >> 
XFS_DIR2_DATA_ALIGN_LOG
);

215 
	}
}

220 
ölöe
 
xfs_dú2_db_t


221 
	$xfs_dú2_byã_to_db
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_off_t
 
by
)

223  (
xfs_dú2_db_t
)(
by
 >> 
geo
->
blklog
);

224 
	}
}

229 
ölöe
 
xfs_dú2_db_t


230 
	$xfs_dú2_d©≠å_to_db
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_d©≠å_t
 
dp
)

232  
	`xfs_dú2_byã_to_db
(
geo
, 
	`xfs_dú2_d©≠å_to_byã
(
dp
));

233 
	}
}

238 
ölöe
 
xfs_dú2_d©a_aoff_t


239 
	$xfs_dú2_byã_to_off
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_off_t
 
by
)

241  (
xfs_dú2_d©a_aoff_t
)(
by
 & (
geo
->
blksize
 - 1));

242 
	}
}

247 
ölöe
 
xfs_dú2_d©a_aoff_t


248 
	$xfs_dú2_d©≠å_to_off
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_d©≠å_t
 
dp
)

250  
	`xfs_dú2_byã_to_off
(
geo
, 
	`xfs_dú2_d©≠å_to_byã
(
dp
));

251 
	}
}

256 
ölöe
 
xfs_dú2_off_t


257 
	$xfs_dú2_db_off_to_byã
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_db_t
 
db
,

258 
xfs_dú2_d©a_aoff_t
 
o
)

260  ((
xfs_dú2_off_t
)
db
 << 
geo
->
blklog
Ë+ 
o
;

261 
	}
}

266 
ölöe
 
xfs_dablk_t


267 
	$xfs_dú2_db_to_da
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_db_t
 
db
)

269  (
xfs_dablk_t
)(
db
 << (
geo
->
blklog
 - geo->
fsblog
));

270 
	}
}

275 
ölöe
 
xfs_dablk_t


276 
	$xfs_dú2_byã_to_da
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_off_t
 
by
)

278  
	`xfs_dú2_db_to_da
(
geo
, 
	`xfs_dú2_byã_to_db
(geo, 
by
));

279 
	}
}

284 
ölöe
 
xfs_dú2_d©≠å_t


285 
	$xfs_dú2_db_off_to_d©≠å
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_db_t
 
db
,

286 
xfs_dú2_d©a_aoff_t
 
o
)

288  
	`xfs_dú2_byã_to_d©≠å
(
	`xfs_dú2_db_off_to_byã
(
geo
, 
db
, 
o
));

289 
	}
}

294 
ölöe
 
xfs_dú2_db_t


295 
	$xfs_dú2_da_to_db
(
xfs_da_geomëry
 *
geo
, 
xfs_dablk_t
 
da
)

297  (
xfs_dú2_db_t
)(
da
 >> (
geo
->
blklog
 - geo->
fsblog
));

298 
	}
}

303 
ölöe
 
xfs_dú2_off_t


304 
	$xfs_dú2_da_to_byã
(
xfs_da_geomëry
 *
geo
, 
xfs_dablk_t
 
da
)

306  
	`xfs_dú2_db_off_to_byã
(
geo
, 
	`xfs_dú2_da_to_db
(geo, 
da
), 0);

307 
	}
}

312 
ölöe
 
xfs_dú2_block_èû
 *

313 
	$xfs_dú2_block_èû_p
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_d©a_hdr
 *
hdr
)

315  ((
xfs_dú2_block_èû
 *)

316 ((*)
hdr
 + 
geo
->
blksize
)) - 1;

317 
	}
}

319 
ölöe
 
xfs_dú2_Àaf_èû
 *

320 
	$xfs_dú2_Àaf_èû_p
(
xfs_da_geomëry
 *
geo
, 
xfs_dú2_Àaf
 *
Õ
)

322  (
xfs_dú2_Àaf_èû
 *)

323 ((*)
Õ
 + 
geo
->
blksize
 -

324 (
xfs_dú2_Àaf_èû
));

325 
	}
}

	@libxfs/xfs_dir2_block.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_mou¡.h
"

25 
	~"xfs_da_f‹m©.h
"

26 
	~"xfs_da_båì.h
"

27 
	~"xfs_öode.h
"

28 
	~"xfs_å™s.h
"

29 
	~"xfs_bm≠.h
"

30 
	~"xfs_dú2.h
"

31 
	~"xfs_dú2_¥iv.h
"

32 
	~"xfs_åa˚.h
"

33 
	~"xfs_cksum.h
"

38 
xfs_dú2_block_log_Àaf
(
xfs_å™s_t
 *
ç
, 
xfs_buf
 *
bp
,

39 
fú°
, 
œ°
);

40 
xfs_dú2_block_log_èû
(
xfs_å™s_t
 *
ç
, 
xfs_buf
 *
bp
);

41 
xfs_dú2_block_lookup_öt
(
xfs_da_¨gs_t
 *
¨gs
, 
xfs_buf
 **
bµ
,

42 *
íäo
);

43 
xfs_dú2_block_s‹t
(c⁄° *
a
, c⁄° *
b
);

45 
xfs_dahash_t
 
	gxfs_dú_hash_dŸ
, 
	gxfs_dú_hash_dŸdŸ
;

51 
	$xfs_dú_°¨tup
()

53 
xfs_dú_hash_dŸ
 = 
	`xfs_da_hash«me
((*)".", 1);

54 
xfs_dú_hash_dŸdŸ
 = 
	`xfs_da_hash«me
((*)"..", 2);

55 
	}
}

57 
boﬁ


58 
	$xfs_dú3_block_vîify
(

59 
xfs_buf
 *
bp
)

61 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

62 
xfs_dú3_blk_hdr
 *
hdr3
 = 
bp
->
b_addr
;

64 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

65 i‡(
hdr3
->
magic
 !
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
))

66  
Ál£
;

67 i‡(!
	`uuid_equÆ
(&
hdr3
->
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

68  
Ál£
;

69 i‡(
	`be64_to_˝u
(
hdr3
->
blkno
Ë!
bp
->
b_bn
)

70  
Ál£
;

71 i‡(!
	`xfs_log_check_l¢
(
mp
, 
	`be64_to_˝u
(
hdr3
->
l¢
)))

72  
Ál£
;

74 i‡(
hdr3
->
magic
 !
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
))

75  
Ál£
;

77 i‡(
	`__xfs_dú3_d©a_check
(
NULL
, 
bp
))

78  
Ál£
;

79  
åue
;

80 
	}
}

83 
	$xfs_dú3_block_ªad_vîify
(

84 
xfs_buf
 *
bp
)

86 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

88 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

89 !
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_DIR3_DATA_CRC_OFF
))

90 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

91 i‡(!
	`xfs_dú3_block_vîify
(
bp
))

92 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

94 i‡(
bp
->
b_îr‹
)

95 
	`xfs_vîifõr_îr‹
(
bp
);

96 
	}
}

99 
	$xfs_dú3_block_wrôe_vîify
(

100 
xfs_buf
 *
bp
)

102 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

103 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

104 
xfs_dú3_blk_hdr
 *
hdr3
 = 
bp
->
b_addr
;

106 i‡(!
	`xfs_dú3_block_vîify
(
bp
)) {

107 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

108 
	`xfs_vîifõr_îr‹
(
bp
);

112 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

115 i‡(
bù
)

116 
hdr3
->
l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

118 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_DIR3_DATA_CRC_OFF
);

119 
	}
}

121 c⁄° 
xfs_buf_›s
 
	gxfs_dú3_block_buf_›s
 = {

122 .
«me
 = "xfs_dir3_block",

123 .
	gvîify_ªad
 = 
xfs_dú3_block_ªad_vîify
,

124 .
	gvîify_wrôe
 = 
xfs_dú3_block_wrôe_vîify
,

128 
	$xfs_dú3_block_ªad
(

129 
xfs_å™s
 *
ç
,

130 
xfs_öode
 *
dp
,

131 
xfs_buf
 **
bµ
)

133 
xfs_mou¡
 *
mp
 = 
dp
->
i_mou¡
;

134 
îr
;

136 
îr
 = 
	`xfs_da_ªad_buf
(
ç
, 
dp
, 
mp
->
m_dú_geo
->
d©ablk
, -1, 
bµ
,

137 
XFS_DATA_FORK
, &
xfs_dú3_block_buf_›s
);

138 i‡(!
îr
 && 
ç
)

139 
	`xfs_å™s_buf_£t_ty≥
(
ç
, *
bµ
, 
XFS_BLFT_DIR_BLOCK_BUF
);

140  
îr
;

141 
	}
}

144 
	$xfs_dú3_block_öô
(

145 
xfs_mou¡
 *
mp
,

146 
xfs_å™s
 *
ç
,

147 
xfs_buf
 *
bp
,

148 
xfs_öode
 *
dp
)

150 
xfs_dú3_blk_hdr
 *
hdr3
 = 
bp
->
b_addr
;

152 
bp
->
b_›s
 = &
xfs_dú3_block_buf_›s
;

153 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_DIR_BLOCK_BUF
);

155 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

156 
	`mem£t
(
hdr3
, 0, (*hdr3));

157 
hdr3
->
magic
 = 
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
);

158 
hdr3
->
blkno
 = 
	`˝u_to_be64
(
bp
->
b_bn
);

159 
hdr3
->
ow√r
 = 
	`˝u_to_be64
(
dp
->
i_öo
);

160 
	`uuid_c›y
(&
hdr3
->
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

164 
hdr3
->
magic
 = 
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
);

165 
	}
}

168 
	$xfs_dú2_block_√ed_•a˚
(

169 
xfs_öode
 *
dp
,

170 
xfs_dú2_d©a_hdr
 *
hdr
,

171 
xfs_dú2_block_èû
 *
bç
,

172 
xfs_dú2_Àaf_íåy
 *
bÕ
,

173 
__be16
 **
ègµ
,

174 
xfs_dú2_d©a_unu£d
 **
duµ
,

175 
xfs_dú2_d©a_unu£d
 **
ídduµ
,

176 *
com∑˘
,

177 
Àn
)

179 
xfs_dú2_d©a_‰ì
 *
bf
;

180 
__be16
 *
ègp
 = 
NULL
;

181 
xfs_dú2_d©a_unu£d
 *
dup
 = 
NULL
;

182 
xfs_dú2_d©a_unu£d
 *
íddup
 = 
NULL
;

184 *
com∑˘
 = 0;

185 
bf
 = 
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

190 i‡(
bç
->
°Æe
) {

191 i‡(
	`be16_to_˝u
(
bf
[0].
Àngth
Ë>
Àn
) {

195 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)

196 ((*)
hdr
 + 
	`be16_to_˝u
(
bf
[0].
off£t
));

197 
out
;

204 *
com∑˘
 = 1;

205 
ègp
 = (
__be16
 *)
bÕ
 - 1;

208 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
hdr
 + 
	`be16_to_˝u
(*
ègp
));

214 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

215 i‡(
	`be16_to_˝u
(
dup
->
Àngth
Ë+ (
	`be32_to_˝u
(
bç
->
°Æe
) - 1) *

216 (
uöt
)(*
bÕ
Ë< 
Àn
)

217 
dup
 = 
NULL
;

218 } i‡((
	`be32_to_˝u
(
bç
->
°Æe
Ë- 1Ë* (
uöt
)(*
bÕ
Ë< 
Àn
)

219 
dup
 = 
NULL
;

221 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
bÕ
;

222 
out
;

229 
ègp
 = (
__be16
 *)
bÕ
 - 1;

232 
íddup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
hdr
 + 
	`be16_to_˝u
(*
ègp
));

239 i‡(
	`be16_to_˝u
(
íddup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

243 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)

244 ((*)
hdr
 + 
	`be16_to_˝u
(
bf
[0].
off£t
));

245 i‡(
dup
 !
íddup
) {

249 i‡(
	`be16_to_˝u
(
dup
->
Àngth
Ë< 
Àn
)

250 
dup
 = 
NULL
;

251 
out
;

257 i‡(
	`be16_to_˝u
(
dup
->
Àngth
Ë< 
Àn
 + (
uöt
)(*
bÕ
)) {

261 i‡(
	`be16_to_˝u
(
bf
[1].
Àngth
Ë>
Àn
)

262 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)

263 ((*)
hdr
 + 
	`be16_to_˝u
(
bf
[1].
off£t
));

265 
dup
 = 
NULL
;

268 
out
:

269 *
ègµ
 = 
ègp
;

270 *
duµ
 = 
dup
;

271 *
ídduµ
 = 
íddup
;

272 
	}
}

280 
	$xfs_dú2_block_com∑˘
(

281 
xfs_da_¨gs
 *
¨gs
,

282 
xfs_buf
 *
bp
,

283 
xfs_dú2_d©a_hdr
 *
hdr
,

284 
xfs_dú2_block_èû
 *
bç
,

285 
xfs_dú2_Àaf_íåy
 *
bÕ
,

286 *
√edlog
,

287 *
lÊoghigh
,

288 *
lÊoglow
)

290 
‰omidx
;

291 
toidx
;

292 
√edsˇn
 = 0;

293 
high°Æe
;

295 
‰omidx
 = 
toidx
 = 
	`be32_to_˝u
(
bç
->
cou¡
) - 1;

296 
high°Æe
 = *
lÊoghigh
 = -1;

297 ; 
‰omidx
 >= 0; fromidx--) {

298 i‡(
bÕ
[
‰omidx
].
addªss
 =
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
)) {

299 i‡(
high°Æe
 == -1)

300 
high°Æe
 = 
toidx
;

302 i‡(*
lÊoghigh
 == -1)

303 *
lÊoghigh
 = 
toidx
;

307 i‡(
‰omidx
 < 
toidx
)

308 
bÕ
[
toidx
] = bÕ[
‰omidx
];

309 
toidx
--;

311 *
lÊoglow
 = 
toidx
 + 1 - (
	`be32_to_˝u
(
bç
->
°Æe
) - 1);

312 *
lÊoghigh
 -
	`be32_to_˝u
(
bç
->
°Æe
) - 1;

313 
	`be32_add_˝u
(&
bç
->
cou¡
, -(
	`be32_to_˝u
(bç->
°Æe
) - 1));

314 
	`xfs_dú2_d©a_make_‰ì
(
¨gs
, 
bp
,

315 (
xfs_dú2_d©a_aoff_t
)((*)
bÕ
 - (*)
hdr
),

316 (
xfs_dú2_d©a_aoff_t
)((
	`be32_to_˝u
(
bç
->
°Æe
Ë- 1Ë* (*
bÕ
)),

317 
√edlog
, &
√edsˇn
);

318 
bç
->
°Æe
 = 
	`˝u_to_be32
(1);

323 i‡(
√edsˇn
)

324 
	`xfs_dú2_d©a_‰ìsˇn
(
¨gs
->
dp
, 
hdr
, 
√edlog
);

325 
	}
}

331 
	$xfs_dú2_block_add«me
(

332 
xfs_da_¨gs_t
 *
¨gs
)

334 
xfs_dú2_d©a_hdr_t
 *
hdr
;

335 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

336 
xfs_buf
 *
bp
;

337 
xfs_dú2_block_èû_t
 *
bç
;

338 
com∑˘
;

339 
xfs_dú2_d©a_íåy_t
 *
dï
;

340 
xfs_öode_t
 *
dp
;

341 
xfs_dú2_d©a_unu£d_t
 *
dup
;

342 
îr‹
;

343 
xfs_dú2_d©a_unu£d_t
 *
íddup
=
NULL
;

344 
xfs_dahash_t
 
hash
;

345 
high
;

346 
high°Æe
;

347 
lÊoghigh
=0;

348 
lÊoglow
=0;

349 
Àn
;

350 
low
;

351 
low°Æe
;

352 
mid
=0;

353 
√edlog
;

354 
√edsˇn
;

355 
__be16
 *
ègp
;

356 
xfs_å™s_t
 *
ç
;

358 
	`åa˚_xfs_dú2_block_add«me
(
¨gs
);

360 
dp
 = 
¨gs
->dp;

361 
ç
 = 
¨gs
->
å™s
;

364 
îr‹
 = 
	`xfs_dú3_block_ªad
(
ç
, 
dp
, &
bp
);

365 i‡(
îr‹
)

366  
îr‹
;

368 
Àn
 = 
dp
->
d_›s
->
	`d©a_ítsize
(
¨gs
->
«mñí
);

373 
hdr
 = 
bp
->
b_addr
;

374 
bç
 = 
	`xfs_dú2_block_èû_p
(
¨gs
->
geo
, 
hdr
);

375 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

381 
	`xfs_dú2_block_√ed_•a˚
(
dp
, 
hdr
, 
bç
, 
bÕ
, &
ègp
, &
dup
,

382 &
íddup
, &
com∑˘
, 
Àn
);

387 i‡(
¨gs
->
›_Êags
 & 
XFS_DA_OP_JUSTCHECK
) {

388 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

389 i‡(!
dup
)

390  -
ENOSPC
;

397 i‡(!
dup
) {

399 i‡(
¨gs
->
tŸÆ
 == 0)

400  -
ENOSPC
;

405 
îr‹
 = 
	`xfs_dú2_block_to_Àaf
(
¨gs
, 
bp
);

406 i‡(
îr‹
)

407  
îr‹
;

408  
	`xfs_dú2_Àaf_add«me
(
¨gs
);

411 
√edlog
 = 
√edsˇn
 = 0;

416 i‡(
com∑˘
) {

417 
	`xfs_dú2_block_com∑˘
(
¨gs
, 
bp
, 
hdr
, 
bç
, 
bÕ
, &
√edlog
,

418 &
lÊoghigh
, &
lÊoglow
);

420 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

421 } i‡(
bç
->
°Æe
) {

426 
lÊoglow
 = 
	`be32_to_˝u
(
bç
->
cou¡
);

427 
lÊoghigh
 = -1;

433 
low
 = 0, 
high
 = 
	`be32_to_˝u
(
bç
->
cou¡
) - 1;Üow <= high; ) {

434 
mid
 = (
low
 + 
high
) >> 1;

435 i‡((
hash
 = 
	`be32_to_˝u
(
bÕ
[
mid
].
hashvÆ
)Ë=
¨gs
->hashval)

437 i‡(
hash
 < 
¨gs
->
hashvÆ
)

438 
low
 = 
mid
 + 1;

440 
high
 = 
mid
 - 1;

442 
mid
 >0 && 
	`be32_to_˝u
(
bÕ
[mid].
hashvÆ
Ë>
¨gs
->hashval) {

443 
mid
--;

448 i‡(!
bç
->
°Æe
) {

452 
	`xfs_dú2_d©a_u£_‰ì
(
¨gs
, 
bp
, 
íddup
,

453 (
xfs_dú2_d©a_aoff_t
)

454 ((*)
íddup
 - (*)
hdr
 + 
	`be16_to_˝u
”nddup->
Àngth
) -

455 (*
bÕ
)),

456 (
xfs_dú2_d©a_aoff_t
)(*
bÕ
),

457 &
√edlog
, &
√edsˇn
);

461 
	`be32_add_˝u
(&
bç
->
cou¡
, 1);

466 i‡(
√edsˇn
) {

467 
	`xfs_dú2_d©a_‰ìsˇn
(
dp
, 
hdr
, &
√edlog
);

468 
√edsˇn
 = 0;

475 
bÕ
--;

476 
mid
++;

477 i‡(
mid
)

478 
	`memmove
(
bÕ
, &bÕ[1], 
mid
 * (*blp));

479 
lÊoglow
 = 0;

480 
lÊoghigh
 = 
mid
;

486 
low°Æe
 = 
mid
;

487 
low°Æe
 >= 0 &&

488 
bÕ
[
low°Æe
].
addªss
 !=

489 
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
);

490 
low°Æe
--)

492 
high°Æe
 = 
mid
 + 1;

493 
high°Æe
 < 
	`be32_to_˝u
(
bç
->
cou¡
) &&

494 
bÕ
[
high°Æe
].
addªss
 !=

495 
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
) &&

496 (
low°Æe
 < 0 || 
mid
 -Üow°Æê> 
high°Æe
 - mid);

497 
high°Æe
++)

502 i‡(
low°Æe
 >= 0 &&

503 (
high°Æe
 =
	`be32_to_˝u
(
bç
->
cou¡
) ||

504 
mid
 - 
low°Æe
 <
high°Æe
 - mid)) {

505 i‡(
mid
 - 
low°Æe
)

506 
	`memmove
(&
bÕ
[
low°Æe
], &blp[lowstale + 1],

507 (
mid
 - 
low°Æe
Ë* (*
bÕ
));

508 
lÊoglow
 = 
	`MIN
(
low°Æe
,Üfloglow);

509 
lÊoghigh
 = 
	`MAX
(
mid
,Üfloghigh);

515 
	`ASSERT
(
high°Æe
 < 
	`be32_to_˝u
(
bç
->
cou¡
));

516 
mid
++;

517 i‡(
high°Æe
 - 
mid
)

518 
	`memmove
(&
bÕ
[
mid
 + 1], &blp[mid],

519 (
high°Æe
 - 
mid
Ë* (*
bÕ
));

520 
lÊoglow
 = 
	`MIN
(
mid
,Üfloglow);

521 
lÊoghigh
 = 
	`MAX
(
high°Æe
,Üfloghigh);

523 
	`be32_add_˝u
(&
bç
->
°Æe
, -1);

528 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

532 
bÕ
[
mid
].
hashvÆ
 = 
	`˝u_to_be32
(
¨gs
->hashval);

533 
bÕ
[
mid
].
addªss
 = 
	`˝u_to_be32
(
	`xfs_dú2_byã_to_d©≠å
(

534 (*)
dï
 - (*)
hdr
));

535 
	`xfs_dú2_block_log_Àaf
(
ç
, 
bp
, 
lÊoglow
, 
lÊoghigh
);

539 
	`xfs_dú2_d©a_u£_‰ì
(
¨gs
, 
bp
, 
dup
,

540 (
xfs_dú2_d©a_aoff_t
)((*)
dup
 - (*)
hdr
),

541 (
xfs_dú2_d©a_aoff_t
)
Àn
, &
√edlog
, &
√edsˇn
);

545 
dï
->
öumbî
 = 
	`˝u_to_be64
(
¨gs
->inumber);

546 
dï
->
«mñí
 = 
¨gs
->namelen;

547 
	`mem˝y
(
dï
->
«me
, 
¨gs
->«me,árgs->
«mñí
);

548 
dp
->
d_›s
->
	`d©a_put_·y≥
(
dï
, 
¨gs
->
fûëy≥
);

549 
ègp
 = 
dp
->
d_›s
->
	`d©a_íåy_èg_p
(
dï
);

550 *
ègp
 = 
	`˝u_to_be16
((*)
dï
 - (*)
hdr
);

554 i‡(
√edsˇn
)

555 
	`xfs_dú2_d©a_‰ìsˇn
(
dp
, 
hdr
, &
√edlog
);

556 i‡(
√edlog
)

557 
	`xfs_dú2_d©a_log_hódî
(
¨gs
, 
bp
);

558 
	`xfs_dú2_block_log_èû
(
ç
, 
bp
);

559 
	`xfs_dú2_d©a_log_íåy
(
¨gs
, 
bp
, 
dï
);

560 
	`xfs_dú3_d©a_check
(
dp
, 
bp
);

562 
	}
}

568 
	$xfs_dú2_block_log_Àaf
(

569 
xfs_å™s_t
 *
ç
,

570 
xfs_buf
 *
bp
,

571 
fú°
,

572 
œ°
)

574 
xfs_dú2_d©a_hdr_t
 *
hdr
 = 
bp
->
b_addr
;

575 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

576 
xfs_dú2_block_èû_t
 *
bç
;

578 
bç
 = 
	`xfs_dú2_block_èû_p
(
ç
->
t_mou¡p
->
m_dú_geo
, 
hdr
);

579 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

580 
	`xfs_å™s_log_buf
(
ç
, 
bp
, (
uöt
)((*)&
bÕ
[
fú°
] - (*)
hdr
),

581 (
uöt
)((*)&
bÕ
[
œ°
 + 1] - (*)
hdr
 - 1));

582 
	}
}

588 
	$xfs_dú2_block_log_èû
(

589 
xfs_å™s_t
 *
ç
,

590 
xfs_buf
 *
bp
)

592 
xfs_dú2_d©a_hdr_t
 *
hdr
 = 
bp
->
b_addr
;

593 
xfs_dú2_block_èû_t
 *
bç
;

595 
bç
 = 
	`xfs_dú2_block_èû_p
(
ç
->
t_mou¡p
->
m_dú_geo
, 
hdr
);

596 
	`xfs_å™s_log_buf
(
ç
, 
bp
, (
uöt
)((*)
bç
 - (*)
hdr
),

597 (
uöt
)((*)(
bç
 + 1Ë- (*)
hdr
 - 1));

598 
	}
}

605 
	$xfs_dú2_block_lookup
(

606 
xfs_da_¨gs_t
 *
¨gs
)

608 
xfs_dú2_d©a_hdr_t
 *
hdr
;

609 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

610 
xfs_buf
 *
bp
;

611 
xfs_dú2_block_èû_t
 *
bç
;

612 
xfs_dú2_d©a_íåy_t
 *
dï
;

613 
xfs_öode_t
 *
dp
;

614 
ít
;

615 
îr‹
;

617 
	`åa˚_xfs_dú2_block_lookup
(
¨gs
);

623 i‡((
îr‹
 = 
	`xfs_dú2_block_lookup_öt
(
¨gs
, &
bp
, &
ít
)))

624  
îr‹
;

625 
dp
 = 
¨gs
->dp;

626 
hdr
 = 
bp
->
b_addr
;

627 
	`xfs_dú3_d©a_check
(
dp
, 
bp
);

628 
bç
 = 
	`xfs_dú2_block_èû_p
(
¨gs
->
geo
, 
hdr
);

629 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

633 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)((*)
hdr
 +

634 
	`xfs_dú2_d©≠å_to_off
(
¨gs
->
geo
,

635 
	`be32_to_˝u
(
bÕ
[
ít
].
addªss
)));

639 
¨gs
->
öumbî
 = 
	`be64_to_˝u
(
dï
->inumber);

640 
¨gs
->
fûëy≥
 = 
dp
->
d_›s
->
	`d©a_gë_·y≥
(
dï
);

641 
îr‹
 = 
	`xfs_dú_cûookup_ªsu…
(
¨gs
, 
dï
->
«me
, dï->
«mñí
);

642 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
bp
);

643  
îr‹
;

644 
	}
}

650 
	$xfs_dú2_block_lookup_öt
(

651 
xfs_da_¨gs_t
 *
¨gs
,

652 
xfs_buf
 **
bµ
,

653 *
íäo
)

655 
xfs_dú2_d©≠å_t
 
addr
;

656 
xfs_dú2_d©a_hdr_t
 *
hdr
;

657 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

658 
xfs_buf
 *
bp
;

659 
xfs_dú2_block_èû_t
 *
bç
;

660 
xfs_dú2_d©a_íåy_t
 *
dï
;

661 
xfs_öode_t
 *
dp
;

662 
îr‹
;

663 
xfs_dahash_t
 
hash
;

664 
high
;

665 
low
;

666 
mid
;

667 
xfs_mou¡_t
 *
mp
;

668 
xfs_å™s_t
 *
ç
;

669 
xfs_dacmp
 
cmp
;

671 
dp
 = 
¨gs
->dp;

672 
ç
 = 
¨gs
->
å™s
;

673 
mp
 = 
dp
->
i_mou¡
;

675 
îr‹
 = 
	`xfs_dú3_block_ªad
(
ç
, 
dp
, &
bp
);

676 i‡(
îr‹
)

677  
îr‹
;

679 
hdr
 = 
bp
->
b_addr
;

680 
	`xfs_dú3_d©a_check
(
dp
, 
bp
);

681 
bç
 = 
	`xfs_dú2_block_èû_p
(
¨gs
->
geo
, 
hdr
);

682 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

687 
low
 = 0, 
high
 = 
	`be32_to_˝u
(
bç
->
cou¡
) - 1; ; ) {

688 
	`ASSERT
(
low
 <
high
);

689 
mid
 = (
low
 + 
high
) >> 1;

690 i‡((
hash
 = 
	`be32_to_˝u
(
bÕ
[
mid
].
hashvÆ
)Ë=
¨gs
->hashval)

692 i‡(
hash
 < 
¨gs
->
hashvÆ
)

693 
low
 = 
mid
 + 1;

695 
high
 = 
mid
 - 1;

696 i‡(
low
 > 
high
) {

697 
	`ASSERT
(
¨gs
->
›_Êags
 & 
XFS_DA_OP_OKNOENT
);

698 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

699  -
ENOENT
;

705 
mid
 > 0 && 
	`be32_to_˝u
(
bÕ
[mid - 1].
hashvÆ
Ë=
¨gs
->hashval) {

706 
mid
--;

713 i‡((
addr
 = 
	`be32_to_˝u
(
bÕ
[
mid
].
addªss
)Ë=
XFS_DIR2_NULL_DATAPTR
)

718 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)

719 ((*)
hdr
 + 
	`xfs_dú2_d©≠å_to_off
(
¨gs
->
geo
, 
addr
));

725 
cmp
 = 
mp
->
m_dú«me›s
->
	`com≤ame
(
¨gs
, 
dï
->
«me
, dï->
«mñí
);

726 i‡(
cmp
 !
XFS_CMP_DIFFERENT
 && cm∞!
¨gs
->
cm¥esu…
) {

727 
¨gs
->
cm¥esu…
 = 
cmp
;

728 *
bµ
 = 
bp
;

729 *
íäo
 = 
mid
;

730 i‡(
cmp
 =
XFS_CMP_EXACT
)

733 } ++
mid
 < 
	`be32_to_˝u
(
bç
->
cou¡
) &&

734 
	`be32_to_˝u
(
bÕ
[
mid
].
hashvÆ
Ë=
hash
);

736 
	`ASSERT
(
¨gs
->
›_Êags
 & 
XFS_DA_OP_OKNOENT
);

741 i‡(
¨gs
->
cm¥esu…
 =
XFS_CMP_CASE
)

746 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

747  -
ENOENT
;

748 
	}
}

755 
	$xfs_dú2_block_ªmovíame
(

756 
xfs_da_¨gs_t
 *
¨gs
)

758 
xfs_dú2_d©a_hdr_t
 *
hdr
;

759 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

760 
xfs_buf
 *
bp
;

761 
xfs_dú2_block_èû_t
 *
bç
;

762 
xfs_dú2_d©a_íåy_t
 *
dï
;

763 
xfs_öode_t
 *
dp
;

764 
ít
;

765 
îr‹
;

766 
√edlog
;

767 
√edsˇn
;

768 
xfs_dú2_sf_hdr_t
 
sfh
;

769 
size
;

770 
xfs_å™s_t
 *
ç
;

772 
	`åa˚_xfs_dú2_block_ªmovíame
(
¨gs
);

778 i‡((
îr‹
 = 
	`xfs_dú2_block_lookup_öt
(
¨gs
, &
bp
, &
ít
))) {

779  
îr‹
;

781 
dp
 = 
¨gs
->dp;

782 
ç
 = 
¨gs
->
å™s
;

783 
hdr
 = 
bp
->
b_addr
;

784 
bç
 = 
	`xfs_dú2_block_èû_p
(
¨gs
->
geo
, 
hdr
);

785 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

789 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)((*)
hdr
 +

790 
	`xfs_dú2_d©≠å_to_off
(
¨gs
->
geo
,

791 
	`be32_to_˝u
(
bÕ
[
ít
].
addªss
)));

795 
√edlog
 = 
√edsˇn
 = 0;

796 
	`xfs_dú2_d©a_make_‰ì
(
¨gs
, 
bp
,

797 (
xfs_dú2_d©a_aoff_t
)((*)
dï
 - (*)
hdr
),

798 
dp
->
d_›s
->
	`d©a_ítsize
(
dï
->
«mñí
), &
√edlog
, &
√edsˇn
);

802 
	`be32_add_˝u
(&
bç
->
°Æe
, 1);

803 
	`xfs_dú2_block_log_èû
(
ç
, 
bp
);

807 
bÕ
[
ít
].
addªss
 = 
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
);

808 
	`xfs_dú2_block_log_Àaf
(
ç
, 
bp
, 
ít
,Ént);

812 i‡(
√edsˇn
)

813 
	`xfs_dú2_d©a_‰ìsˇn
(
dp
, 
hdr
, &
√edlog
);

814 i‡(
√edlog
)

815 
	`xfs_dú2_d©a_log_hódî
(
¨gs
, 
bp
);

816 
	`xfs_dú3_d©a_check
(
dp
, 
bp
);

820 
size
 = 
	`xfs_dú2_block_sfsize
(
dp
, 
hdr
, &
sfh
);

821 i‡(
size
 > 
	`XFS_IFORK_DSIZE
(
dp
))

827  
	`xfs_dú2_block_to_sf
(
¨gs
, 
bp
, 
size
, &
sfh
);

828 
	}
}

835 
	$xfs_dú2_block_ª∂a˚
(

836 
xfs_da_¨gs_t
 *
¨gs
)

838 
xfs_dú2_d©a_hdr_t
 *
hdr
;

839 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

840 
xfs_buf
 *
bp
;

841 
xfs_dú2_block_èû_t
 *
bç
;

842 
xfs_dú2_d©a_íåy_t
 *
dï
;

843 
xfs_öode_t
 *
dp
;

844 
ít
;

845 
îr‹
;

847 
	`åa˚_xfs_dú2_block_ª∂a˚
(
¨gs
);

853 i‡((
îr‹
 = 
	`xfs_dú2_block_lookup_öt
(
¨gs
, &
bp
, &
ít
))) {

854  
îr‹
;

856 
dp
 = 
¨gs
->dp;

857 
hdr
 = 
bp
->
b_addr
;

858 
bç
 = 
	`xfs_dú2_block_èû_p
(
¨gs
->
geo
, 
hdr
);

859 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

863 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)((*)
hdr
 +

864 
	`xfs_dú2_d©≠å_to_off
(
¨gs
->
geo
,

865 
	`be32_to_˝u
(
bÕ
[
ít
].
addªss
)));

866 
	`ASSERT
(
	`be64_to_˝u
(
dï
->
öumbî
Ë!
¨gs
->inumber);

870 
dï
->
öumbî
 = 
	`˝u_to_be64
(
¨gs
->inumber);

871 
dp
->
d_›s
->
	`d©a_put_·y≥
(
dï
, 
¨gs
->
fûëy≥
);

872 
	`xfs_dú2_d©a_log_íåy
(
¨gs
, 
bp
, 
dï
);

873 
	`xfs_dú3_d©a_check
(
dp
, 
bp
);

875 
	}
}

881 
	$xfs_dú2_block_s‹t
(

882 c⁄° *
a
,

883 c⁄° *
b
)

885 c⁄° 
xfs_dú2_Àaf_íåy_t
 *
œ
;

886 c⁄° 
xfs_dú2_Àaf_íåy_t
 *
lb
;

888 
œ
 = 
a
;

889 
lb
 = 
b
;

890  
	`be32_to_˝u
(
œ
->
hashvÆ
Ë< be32_to_˝u(
lb
->hashval) ? -1 :

891 (
	`be32_to_˝u
(
œ
->
hashvÆ
Ë> be32_to_˝u(
lb
->hashval) ? 1 : 0);

892 
	}
}

898 
	$xfs_dú2_Àaf_to_block
(

899 
xfs_da_¨gs_t
 *
¨gs
,

900 
xfs_buf
 *
lbp
,

901 
xfs_buf
 *
dbp
)

903 
__be16
 *
be°•
;

904 
xfs_dú2_d©a_hdr_t
 *
hdr
;

905 
xfs_dú2_block_èû_t
 *
bç
;

906 
xfs_öode_t
 *
dp
;

907 
xfs_dú2_d©a_unu£d_t
 *
dup
;

908 
îr‹
;

909 
‰om
;

910 
xfs_dú2_Àaf_t
 *
Àaf
;

911 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

912 
xfs_dú2_Àaf_èû_t
 *
…p
;

913 
xfs_mou¡_t
 *
mp
;

914 
√edlog
;

915 
√edsˇn
;

916 
xfs_dú2_sf_hdr_t
 
sfh
;

917 
size
;

918 
__be16
 *
ègp
;

919 
to
;

920 
xfs_å™s_t
 *
ç
;

921 
xfs_dú2_Àaf_íåy
 *
íts
;

922 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

924 
	`åa˚_xfs_dú2_Àaf_to_block
(
¨gs
);

926 
dp
 = 
¨gs
->dp;

927 
ç
 = 
¨gs
->
å™s
;

928 
mp
 = 
dp
->
i_mou¡
;

929 
Àaf
 = 
lbp
->
b_addr
;

930 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

931 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

932 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
¨gs
->
geo
, 
Àaf
);

934 
	`ASSERT
(
Àafhdr
.
magic
 =
XFS_DIR2_LEAF1_MAGIC
 ||

935 
Àafhdr
.
magic
 =
XFS_DIR3_LEAF1_MAGIC
);

942 
dp
->
i_d
.
di_size
 > 
¨gs
->
geo
->
blksize
) {

943 
hdrsz
;

945 
hdrsz
 = 
dp
->
d_›s
->
d©a_íåy_off£t
;

946 
be°•
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
);

947 i‡(
	`be16_to_˝u
(
be°•
[
	`be32_to_˝u
(
…p
->
be°cou¡
) - 1]) ==

948 
¨gs
->
geo
->
blksize
 - 
hdrsz
) {

949 i‡((
îr‹
 =

950 
	`xfs_dú2_Àaf_åim_d©a
(
¨gs
, 
lbp
,

951 (
xfs_dú2_db_t
)(
	`be32_to_˝u
(
…p
->
be°cou¡
) - 1))))

952  
îr‹
;

959 i‡(!
dbp
) {

960 
îr‹
 = 
	`xfs_dú3_d©a_ªad
(
ç
, 
dp
, 
¨gs
->
geo
->
d©ablk
, -1, &
dbp
);

961 i‡(
îr‹
)

962  
îr‹
;

964 
hdr
 = 
dbp
->
b_addr
;

965 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

966 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
));

971 
size
 = (
uöt
)(
xfs_dú2_block_èû_t
) +

972 (
uöt
)(*
Àp
Ë* (
Àafhdr
.
cou¡
 -Üófhdr.
°Æe
);

976 
ègp
 = (
__be16
 *)((*)
hdr
 + 
¨gs
->
geo
->
blksize
) - 1;

977 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
hdr
 + 
	`be16_to_˝u
(*
ègp
));

981 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë!
XFS_DIR2_DATA_FREE_TAG
 ||

982 
	`be16_to_˝u
(
dup
->
Àngth
Ë< 
size
)

988 
	`xfs_dú3_block_öô
(
mp
, 
ç
, 
dbp
, 
dp
);

990 
√edlog
 = 1;

991 
√edsˇn
 = 0;

995 
	`xfs_dú2_d©a_u£_‰ì
(
¨gs
, 
dbp
, 
dup
,árgs->
geo
->
blksize
 - 
size
, size,

996 &
√edlog
, &
√edsˇn
);

1000 
bç
 = 
	`xfs_dú2_block_èû_p
(
¨gs
->
geo
, 
hdr
);

1001 
bç
->
cou¡
 = 
	`˝u_to_be32
(
Àafhdr
.cou¡ -Üófhdr.
°Æe
);

1002 
bç
->
°Æe
 = 0;

1003 
	`xfs_dú2_block_log_èû
(
ç
, 
dbp
);

1007 
Àp
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

1008 
‰om
 = 
to
 = 0; from < 
Àafhdr
.
cou¡
; from++) {

1009 i‡(
íts
[
‰om
].
addªss
 =
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
))

1011 
Àp
[
to
++] = 
íts
[
‰om
];

1013 
	`ASSERT
(
to
 =
	`be32_to_˝u
(
bç
->
cou¡
));

1014 
	`xfs_dú2_block_log_Àaf
(
ç
, 
dbp
, 0, 
	`be32_to_˝u
(
bç
->
cou¡
) - 1);

1018 i‡(
√edsˇn
)

1019 
	`xfs_dú2_d©a_‰ìsˇn
(
dp
, 
hdr
, &
√edlog
);

1020 i‡(
√edlog
)

1021 
	`xfs_dú2_d©a_log_hódî
(
¨gs
, 
dbp
);

1025 
îr‹
 = 
	`xfs_da_shrök_öode
(
¨gs
,árgs->
geo
->
Àafblk
, 
lbp
);

1026 i‡(
îr‹
)

1027  
îr‹
;

1032 
size
 = 
	`xfs_dú2_block_sfsize
(
dp
, 
hdr
, &
sfh
);

1033 i‡(
size
 > 
	`XFS_IFORK_DSIZE
(
dp
))

1036  
	`xfs_dú2_block_to_sf
(
¨gs
, 
dbp
, 
size
, &
sfh
);

1037 
	}
}

1043 
	$xfs_dú2_sf_to_block
(

1044 
xfs_da_¨gs_t
 *
¨gs
)

1046 
xfs_dú2_db_t
 
blkno
;

1047 
xfs_dú2_d©a_hdr_t
 *
hdr
;

1048 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

1049 
xfs_buf
 *
bp
;

1050 
xfs_dú2_block_èû_t
 *
bç
;

1051 
xfs_dú2_d©a_íåy_t
 *
dï
;

1052 
xfs_öode_t
 *
dp
;

1053 
dummy
;

1054 
xfs_dú2_d©a_unu£d_t
 *
dup
;

1055 
ídoff£t
;

1056 
îr‹
;

1057 
i
;

1058 
xfs_mou¡_t
 *
mp
;

1059 
√edlog
;

1060 
√edsˇn
;

1061 
√woff£t
;

1062 
off£t
;

1063 
xfs_dú2_sf_íåy_t
 *
s„p
;

1064 
xfs_dú2_sf_hdr_t
 *
ﬁdsÂ
;

1065 
xfs_dú2_sf_hdr_t
 *
sÂ
;

1066 
__be16
 *
ègp
;

1067 
xfs_å™s_t
 *
ç
;

1068 
xfs_«me
 
«me
;

1069 
xfs_if‹k
 *
iÂ
;

1071 
	`åa˚_xfs_dú2_sf_to_block
(
¨gs
);

1073 
dp
 = 
¨gs
->dp;

1074 
ç
 = 
¨gs
->
å™s
;

1075 
mp
 = 
dp
->
i_mou¡
;

1076 
iÂ
 = 
	`XFS_IFORK_PTR
(
dp
, 
XFS_DATA_FORK
);

1077 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFINLINE
);

1081 i‡(
dp
->
i_d
.
di_size
 < 
	`off£tof
(
xfs_dú2_sf_hdr_t
, 
∑ª¡
)) {

1082 
	`ASSERT
(
	`XFS_FORCED_SHUTDOWN
(
mp
));

1083  -
EIO
;

1086 
ﬁdsÂ
 = (
xfs_dú2_sf_hdr_t
 *)
iÂ
->
if_u1
.
if_d©a
;

1088 
	`ASSERT
(
iÂ
->
if_byãs
 =
dp
->
i_d
.
di_size
);

1089 
	`ASSERT
(
iÂ
->
if_u1
.
if_d©a
 !
NULL
);

1090 
	`ASSERT
(
dp
->
i_d
.
di_size
 >
	`xfs_dú2_sf_hdr_size
(
ﬁdsÂ
->
i8cou¡
));

1091 
	`ASSERT
(
dp
->
i_d
.
di_√xã¡s
 == 0);

1097 
sÂ
 = 
	`kmem_Æloc
(
iÂ
->
if_byãs
, 
KM_SLEEP
);

1098 
	`mem˝y
(
sÂ
, 
ﬁdsÂ
, 
iÂ
->
if_byãs
);

1100 
	`xfs_id©a_ªÆloc
(
dp
, -
iÂ
->
if_byãs
, 
XFS_DATA_FORK
);

1101 
	`xfs_bm≠_loˇl_to_exã¡s_em±y
(
dp
, 
XFS_DATA_FORK
);

1102 
dp
->
i_d
.
di_size
 = 0;

1107 
îr‹
 = 
	`xfs_dú2_grow_öode
(
¨gs
, 
XFS_DIR2_DATA_SPACE
, &
blkno
);

1108 i‡(
îr‹
) {

1109 
	`kmem_‰ì
(
sÂ
);

1110  
îr‹
;

1115 
îr‹
 = 
	`xfs_dú3_d©a_öô
(
¨gs
, 
blkno
, &
bp
);

1116 i‡(
îr‹
) {

1117 
	`kmem_‰ì
(
sÂ
);

1118  
îr‹
;

1120 
	`xfs_dú3_block_öô
(
mp
, 
ç
, 
bp
, 
dp
);

1121 
hdr
 = 
bp
->
b_addr
;

1126 
i
 = (
uöt
)(*
bç
) +

1127 (
sÂ
->
cou¡
 + 2Ë* (
uöt
)(
xfs_dú2_Àaf_íåy_t
);

1132 
dup
 = 
dp
->
d_›s
->
	`d©a_unu£d_p
(
hdr
);

1133 
√edlog
 = 
√edsˇn
 = 0;

1134 
	`xfs_dú2_d©a_u£_‰ì
(
¨gs
, 
bp
, 
dup
,árgs->
geo
->
blksize
 - 
i
,

1135 
i
, &
√edlog
, &
√edsˇn
);

1136 
	`ASSERT
(
√edsˇn
 == 0);

1140 
bç
 = 
	`xfs_dú2_block_èû_p
(
¨gs
->
geo
, 
hdr
);

1141 
bç
->
cou¡
 = 
	`˝u_to_be32
(
sÂ
->count + 2);

1142 
bç
->
°Æe
 = 0;

1143 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

1144 
ídoff£t
 = (
uöt
)((*)
bÕ
 - (*)
hdr
);

1148 
	`xfs_dú2_d©a_u£_‰ì
(
¨gs
, 
bp
, 
dup
,

1149 (
xfs_dú2_d©a_aoff_t
)((*)
dup
 - (*)
hdr
),

1150 
	`be16_to_˝u
(
dup
->
Àngth
), &
√edlog
, &
√edsˇn
);

1154 
dï
 = 
dp
->
d_›s
->
	`d©a_dŸ_íåy_p
(
hdr
);

1155 
dï
->
öumbî
 = 
	`˝u_to_be64
(
dp
->
i_öo
);

1156 
dï
->
«mñí
 = 1;

1157 
dï
->
«me
[0] = '.';

1158 
dp
->
d_›s
->
	`d©a_put_·y≥
(
dï
, 
XFS_DIR3_FT_DIR
);

1159 
ègp
 = 
dp
->
d_›s
->
	`d©a_íåy_èg_p
(
dï
);

1160 *
ègp
 = 
	`˝u_to_be16
((*)
dï
 - (*)
hdr
);

1161 
	`xfs_dú2_d©a_log_íåy
(
¨gs
, 
bp
, 
dï
);

1162 
bÕ
[0].
hashvÆ
 = 
	`˝u_to_be32
(
xfs_dú_hash_dŸ
);

1163 
bÕ
[0].
addªss
 = 
	`˝u_to_be32
(
	`xfs_dú2_byã_to_d©≠å
(

1164 (*)
dï
 - (*)
hdr
));

1168 
dï
 = 
dp
->
d_›s
->
	`d©a_dŸdŸ_íåy_p
(
hdr
);

1169 
dï
->
öumbî
 = 
	`˝u_to_be64
(
dp
->
d_›s
->
	`sf_gë_∑ª¡_öo
(
sÂ
));

1170 
dï
->
«mñí
 = 2;

1171 
dï
->
«me
[0] = dep->name[1] = '.';

1172 
dp
->
d_›s
->
	`d©a_put_·y≥
(
dï
, 
XFS_DIR3_FT_DIR
);

1173 
ègp
 = 
dp
->
d_›s
->
	`d©a_íåy_èg_p
(
dï
);

1174 *
ègp
 = 
	`˝u_to_be16
((*)
dï
 - (*)
hdr
);

1175 
	`xfs_dú2_d©a_log_íåy
(
¨gs
, 
bp
, 
dï
);

1176 
bÕ
[1].
hashvÆ
 = 
	`˝u_to_be32
(
xfs_dú_hash_dŸdŸ
);

1177 
bÕ
[1].
addªss
 = 
	`˝u_to_be32
(
	`xfs_dú2_byã_to_d©≠å
(

1178 (*)
dï
 - (*)
hdr
));

1179 
off£t
 = 
dp
->
d_›s
->
d©a_fú°_off£t
;

1183 
i
 = 0;

1184 i‡(!
sÂ
->
cou¡
)

1185 
s„p
 = 
NULL
;

1187 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
);

1192 
off£t
 < 
ídoff£t
) {

1196 i‡(
s„p
 =
NULL
)

1197 
√woff£t
 = 
ídoff£t
;

1199 
√woff£t
 = 
	`xfs_dú2_sf_gë_off£t
(
s„p
);

1203 i‡(
off£t
 < 
√woff£t
) {

1204 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
hdr
 + 
off£t
);

1205 
dup
->
‰ìèg
 = 
	`˝u_to_be16
(
XFS_DIR2_DATA_FREE_TAG
);

1206 
dup
->
Àngth
 = 
	`˝u_to_be16
(
√woff£t
 - 
off£t
);

1207 *
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
Ë
	`˝u_to_be16
(

1208 ((*)
dup
 - (*)
hdr
));

1209 
	`xfs_dú2_d©a_log_unu£d
(
¨gs
, 
bp
, 
dup
);

1210 
	`xfs_dú2_d©a_‰ìö£π
(
hdr
,

1211 
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
),

1212 
dup
, &
dummy
);

1213 
off£t
 +
	`be16_to_˝u
(
dup
->
Àngth
);

1219 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)((*)
hdr
 + 
√woff£t
);

1220 
dï
->
öumbî
 = 
	`˝u_to_be64
(
dp
->
d_›s
->
	`sf_gë_öo
(
sÂ
, 
s„p
));

1221 
dï
->
«mñí
 = 
s„p
->namelen;

1222 
dp
->
d_›s
->
	`d©a_put_·y≥
(
dï
, dp->d_›s->
	`sf_gë_·y≥
(
s„p
));

1223 
	`mem˝y
(
dï
->
«me
, 
s„p
->«me, dï->
«mñí
);

1224 
ègp
 = 
dp
->
d_›s
->
	`d©a_íåy_èg_p
(
dï
);

1225 *
ègp
 = 
	`˝u_to_be16
((*)
dï
 - (*)
hdr
);

1226 
	`xfs_dú2_d©a_log_íåy
(
¨gs
, 
bp
, 
dï
);

1227 
«me
.«mê
s„p
->name;

1228 
«me
.
Àn
 = 
s„p
->
«mñí
;

1229 
bÕ
[2 + 
i
].
hashvÆ
 = 
	`˝u_to_be32
(
mp
->
m_dú«me›s
->

1230 
	`hash«me
(&
«me
));

1231 
bÕ
[2 + 
i
].
addªss
 = 
	`˝u_to_be32
(
	`xfs_dú2_byã_to_d©≠å
(

1232 (*)
dï
 - (*)
hdr
));

1233 
off£t
 = ()((*)(
ègp
 + 1Ë- (*)
hdr
);

1234 i‡(++
i
 =
sÂ
->
cou¡
)

1235 
s„p
 = 
NULL
;

1237 
s„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
sÂ
, sfep);

1240 
	`kmem_‰ì
(
sÂ
);

1244 
	`xfs_s‹t
(
bÕ
, 
	`be32_to_˝u
(
bç
->
cou¡
), (*bÕ), 
xfs_dú2_block_s‹t
);

1249 
	`ASSERT
(
√edsˇn
 == 0);

1250 
	`xfs_dú2_block_log_Àaf
(
ç
, 
bp
, 0, 
	`be32_to_˝u
(
bç
->
cou¡
) - 1);

1251 
	`xfs_dú2_block_log_èû
(
ç
, 
bp
);

1252 
	`xfs_dú3_d©a_check
(
dp
, 
bp
);

1254 
	}
}

	@libxfs/xfs_dir2_data.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_mou¡.h
"

25 
	~"xfs_da_f‹m©.h
"

26 
	~"xfs_da_båì.h
"

27 
	~"xfs_öode.h
"

28 
	~"xfs_dú2.h
"

29 
	~"xfs_dú2_¥iv.h
"

30 
	~"xfs_å™s.h
"

31 
	~"xfs_cksum.h
"

39 
	$__xfs_dú3_d©a_check
(

40 
xfs_öode
 *
dp
,

41 
xfs_buf
 *
bp
)

43 
xfs_dú2_d©≠å_t
 
addr
;

44 
xfs_dú2_d©a_‰ì_t
 *
bf
;

45 
xfs_dú2_block_èû_t
 *
bç
=
NULL
;

46 
cou¡
;

47 
xfs_dú2_d©a_hdr_t
 *
hdr
;

48 
xfs_dú2_d©a_íåy_t
 *
dï
;

49 
xfs_dú2_d©a_‰ì_t
 *
dÂ
;

50 
xfs_dú2_d©a_unu£d_t
 *
dup
;

51 *
ídp
;

52 
‰ì£í
;

53 
xfs_dahash_t
 
hash
;

54 
i
;

55 
œ°‰ì
;

56 
xfs_dú2_Àaf_íåy_t
 *
Àp
=
NULL
;

57 
xfs_mou¡_t
 *
mp
;

58 *
p
;

59 
°Æe
;

60 
xfs_«me
 
«me
;

61 c⁄° 
xfs_dú_›s
 *
›s
;

62 
xfs_da_geomëry
 *
geo
;

64 
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

65 
geo
 = 
mp
->
m_dú_geo
;

71 
›s
 = 
	`xfs_dú_gë_›s
(
mp
, 
dp
);

73 
hdr
 = 
bp
->
b_addr
;

74 
p
 = (*)
›s
->
	`d©a_íåy_p
(
hdr
);

76 
hdr
->
magic
) {

77 
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
):

78 
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
):

79 
bç
 = 
	`xfs_dú2_block_èû_p
(
geo
, 
hdr
);

80 
Àp
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

81 
ídp
 = (*)
Àp
;

90 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
	`be32_to_˝u
(
bç
->
cou¡
) <

91 ((*)
bç
 - 
p
Ë/ (
xfs_dú2_Àaf_íåy
));

93 
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
):

94 
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
):

95 
ídp
 = (*)
hdr
 + 
geo
->
blksize
;

98 
	`XFS_ERROR_REPORT
("Bad Magic", 
XFS_ERRLEVEL_LOW
, 
mp
);

99  -
EFSCORRUPTED
;

105 
bf
 = 
›s
->
	`d©a_be°‰ì_p
(
hdr
);

106 
cou¡
 = 
œ°‰ì
 = 
‰ì£í
 = 0;

107 i‡(!
bf
[0].
Àngth
) {

108 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, !
bf
[0].
off£t
);

109 
‰ì£í
 |= 1 << 0;

111 i‡(!
bf
[1].
Àngth
) {

112 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, !
bf
[1].
off£t
);

113 
‰ì£í
 |= 1 << 1;

115 i‡(!
bf
[2].
Àngth
) {

116 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, !
bf
[2].
off£t
);

117 
‰ì£í
 |= 1 << 2;

120 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
	`be16_to_˝u
(
bf
[0].
Àngth
) >=

121 
	`be16_to_˝u
(
bf
[1].
Àngth
));

122 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
	`be16_to_˝u
(
bf
[1].
Àngth
) >=

123 
	`be16_to_˝u
(
bf
[2].
Àngth
));

127 
p
 < 
ídp
) {

128 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
p
;

134 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

135 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
œ°‰ì
 == 0);

136 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

137 
	`be16_to_˝u
(*
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
)) ==

138 (*)
dup
 - (*)
hdr
);

139 
dÂ
 = 
	`xfs_dú2_d©a_‰ìföd
(
hdr
, 
bf
, 
dup
);

140 i‡(
dÂ
) {

141 
i
 = ()(
dÂ
 - 
bf
);

142 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

143 (
‰ì£í
 & (1 << 
i
)) == 0);

144 
‰ì£í
 |1 << 
i
;

146 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

147 
	`be16_to_˝u
(
dup
->
Àngth
) <=

148 
	`be16_to_˝u
(
bf
[2].
Àngth
));

150 
p
 +
	`be16_to_˝u
(
dup
->
Àngth
);

151 
œ°‰ì
 = 1;

160 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
p
;

161 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
dï
->
«mñí
 != 0);

162 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

163 !
	`xfs_dú_öo_vÆid©e
(
mp
, 
	`be64_to_˝u
(
dï
->
öumbî
)));

164 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

165 
	`be16_to_˝u
(*
›s
->
	`d©a_íåy_èg_p
(
dï
)) ==

166 (*)
dï
 - (*)
hdr
);

167 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

168 
›s
->
	`d©a_gë_·y≥
(
dï
Ë< 
XFS_DIR3_FT_MAX
);

169 
cou¡
++;

170 
œ°‰ì
 = 0;

171 i‡(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

172 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
)) {

173 
addr
 = 
	`xfs_dú2_db_off_to_d©≠å
(
geo
, geo->
d©ablk
,

174 (
xfs_dú2_d©a_aoff_t
)

175 ((*)
dï
 - (*)
hdr
));

176 
«me
.«mê
dï
->name;

177 
«me
.
Àn
 = 
dï
->
«mñí
;

178 
hash
 = 
mp
->
m_dú«me›s
->
	`hash«me
(&
«me
);

179 
i
 = 0; i < 
	`be32_to_˝u
(
bç
->
cou¡
); i++) {

180 i‡(
	`be32_to_˝u
(
Àp
[
i
].
addªss
Ë=
addr
 &&

181 
	`be32_to_˝u
(
Àp
[
i
].
hashvÆ
Ë=
hash
)

184 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

185 
i
 < 
	`be32_to_˝u
(
bç
->
cou¡
));

187 
p
 +
›s
->
	`d©a_ítsize
(
dï
->
«mñí
);

192 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
‰ì£í
 == 7);

193 i‡(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

194 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
)) {

195 
i
 = 
°Æe
 = 0; i < 
	`be32_to_˝u
(
bç
->
cou¡
); i++) {

196 i‡(
Àp
[
i
].
addªss
 ==

197 
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
))

198 
°Æe
++;

199 i‡(
i
 > 0)

200 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

201 
	`be32_to_˝u
(
Àp
[
i
].
hashvÆ
) >=

202 
	`be32_to_˝u
(
Àp
[
i
 - 1].
hashvÆ
));

204 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
cou¡
 ==

205 
	`be32_to_˝u
(
bç
->
cou¡
Ë- be32_to_˝u(bç->
°Æe
));

206 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
°Æe
 =
	`be32_to_˝u
(
bç
->stale));

209 
	}
}

211 
boﬁ


212 
	$xfs_dú3_d©a_vîify
(

213 
xfs_buf
 *
bp
)

215 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

216 
xfs_dú3_blk_hdr
 *
hdr3
 = 
bp
->
b_addr
;

218 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

219 i‡(
hdr3
->
magic
 !
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
))

220  
Ál£
;

221 i‡(!
	`uuid_equÆ
(&
hdr3
->
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

222  
Ál£
;

223 i‡(
	`be64_to_˝u
(
hdr3
->
blkno
Ë!
bp
->
b_bn
)

224  
Ál£
;

225 i‡(!
	`xfs_log_check_l¢
(
mp
, 
	`be64_to_˝u
(
hdr3
->
l¢
)))

226  
Ál£
;

228 i‡(
hdr3
->
magic
 !
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
))

229  
Ál£
;

231 i‡(
	`__xfs_dú3_d©a_check
(
NULL
, 
bp
))

232  
Ál£
;

233  
åue
;

234 
	}
}

242 
	$xfs_dú3_d©a_ªada_vîify
(

243 
xfs_buf
 *
bp
)

245 
xfs_dú2_d©a_hdr
 *
hdr
 = 
bp
->
b_addr
;

247 
hdr
->
magic
) {

248 
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
):

249 
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
):

250 
bp
->
b_›s
 = &
xfs_dú3_block_buf_›s
;

251 
bp
->
b_›s
->
	`vîify_ªad
(bp);

253 
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
):

254 
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
):

255 
bp
->
b_›s
 = &
xfs_dú3_d©a_buf_›s
;

256 
bp
->
b_›s
->
	`vîify_ªad
(bp);

259 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

260 
	`xfs_vîifõr_îr‹
(
bp
);

263 
	}
}

266 
	$xfs_dú3_d©a_ªad_vîify
(

267 
xfs_buf
 *
bp
)

269 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

271 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

272 !
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_DIR3_DATA_CRC_OFF
))

273 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

274 i‡(!
	`xfs_dú3_d©a_vîify
(
bp
))

275 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

277 i‡(
bp
->
b_îr‹
)

278 
	`xfs_vîifõr_îr‹
(
bp
);

279 
	}
}

282 
	$xfs_dú3_d©a_wrôe_vîify
(

283 
xfs_buf
 *
bp
)

285 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

286 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

287 
xfs_dú3_blk_hdr
 *
hdr3
 = 
bp
->
b_addr
;

289 i‡(!
	`xfs_dú3_d©a_vîify
(
bp
)) {

290 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

291 
	`xfs_vîifõr_îr‹
(
bp
);

295 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

298 i‡(
bù
)

299 
hdr3
->
l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

301 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_DIR3_DATA_CRC_OFF
);

302 
	}
}

304 c⁄° 
xfs_buf_›s
 
	gxfs_dú3_d©a_buf_›s
 = {

305 .
«me
 = "xfs_dir3_data",

306 .
	gvîify_ªad
 = 
xfs_dú3_d©a_ªad_vîify
,

307 .
	gvîify_wrôe
 = 
xfs_dú3_d©a_wrôe_vîify
,

310 c⁄° 
xfs_buf_›s
 
	gxfs_dú3_d©a_ªada_buf_›s
 = {

311 .
«me
 = "xfs_dir3_data_reada",

312 .
	gvîify_ªad
 = 
xfs_dú3_d©a_ªada_vîify
,

313 .
	gvîify_wrôe
 = 
xfs_dú3_d©a_wrôe_vîify
,

318 
	$xfs_dú3_d©a_ªad
(

319 
xfs_å™s
 *
ç
,

320 
xfs_öode
 *
dp
,

321 
xfs_dablk_t
 
bno
,

322 
xfs_daddr_t
 
m≠≥d_bno
,

323 
xfs_buf
 **
bµ
)

325 
îr
;

327 
îr
 = 
	`xfs_da_ªad_buf
(
ç
, 
dp
, 
bno
, 
m≠≥d_bno
, 
bµ
,

328 
XFS_DATA_FORK
, &
xfs_dú3_d©a_buf_›s
);

329 i‡(!
îr
 && 
ç
 && *
bµ
)

330 
	`xfs_å™s_buf_£t_ty≥
(
ç
, *
bµ
, 
XFS_BLFT_DIR_DATA_BUF
);

331  
îr
;

332 
	}
}

335 
	$xfs_dú3_d©a_ªadahód
(

336 
xfs_öode
 *
dp
,

337 
xfs_dablk_t
 
bno
,

338 
xfs_daddr_t
 
m≠≥d_bno
)

340  
	`xfs_da_ªada_buf
(
dp
, 
bno
, 
m≠≥d_bno
,

341 
XFS_DATA_FORK
, &
xfs_dú3_d©a_ªada_buf_›s
);

342 
	}
}

348 
xfs_dú2_d©a_‰ì_t
 *

349 
	$xfs_dú2_d©a_‰ìföd
(

350 
xfs_dú2_d©a_hdr
 *
hdr
,

351 
xfs_dú2_d©a_‰ì
 *
bf
,

352 
xfs_dú2_d©a_unu£d
 *
dup
)

354 
xfs_dú2_d©a_‰ì_t
 *
dÂ
;

355 
xfs_dú2_d©a_aoff_t
 
off
;

356 #ifde‡
DEBUG


357 
m©ched
;

358 
£ízîo
;

361 
off
 = (
xfs_dú2_d©a_aoff_t
)((*)
dup
 - (*)
hdr
);

363 #ifde‡
DEBUG


369 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

370 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
) ||

371 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

372 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
));

373 
dÂ
 = &
bf
[0], 
£ízîo
 = 
m©ched
 = 0;

374 
dÂ
 < &
bf
[
XFS_DIR2_DATA_FD_COUNT
];

375 
dÂ
++) {

376 i‡(!
dÂ
->
off£t
) {

377 
	`ASSERT
(!
dÂ
->
Àngth
);

378 
£ízîo
 = 1;

381 
	`ASSERT
(
£ízîo
 == 0);

382 i‡(
	`be16_to_˝u
(
dÂ
->
off£t
Ë=
off
) {

383 
m©ched
 = 1;

384 
	`ASSERT
(
dÂ
->
Àngth
 =
dup
->length);

385 } i‡(
off
 < 
	`be16_to_˝u
(
dÂ
->
off£t
))

386 
	`ASSERT
(
off
 + 
	`be16_to_˝u
(
dup
->
Àngth
Ë<be16_to_˝u(
dÂ
->
off£t
));

388 
	`ASSERT
(
	`be16_to_˝u
(
dÂ
->
off£t
Ë+ be16_to_˝u(dÂ->
Àngth
Ë<
off
);

389 
	`ASSERT
(
m©ched
 || 
	`be16_to_˝u
(
dÂ
->
Àngth
Ë>be16_to_˝u(
dup
->length));

390 i‡(
dÂ
 > &
bf
[0])

391 
	`ASSERT
(
	`be16_to_˝u
(
dÂ
[-1].
Àngth
) >= be16_to_cpu(dfp[0].length));

398 i‡(
	`be16_to_˝u
(
dup
->
Àngth
) <

399 
	`be16_to_˝u
(
bf
[
XFS_DIR2_DATA_FD_COUNT
 - 1].
Àngth
))

400  
NULL
;

404 
dÂ
 = &
bf
[0]; dÂ < &bf[
XFS_DIR2_DATA_FD_COUNT
]; dfp++) {

405 i‡(!
dÂ
->
off£t
)

406  
NULL
;

407 i‡(
	`be16_to_˝u
(
dÂ
->
off£t
Ë=
off
)

408  
dÂ
;

413  
NULL
;

414 
	}
}

419 
xfs_dú2_d©a_‰ì_t
 *

420 
	$xfs_dú2_d©a_‰ìö£π
(

421 
xfs_dú2_d©a_hdr
 *
hdr
,

422 
xfs_dú2_d©a_‰ì
 *
dÂ
,

423 
xfs_dú2_d©a_unu£d
 *
dup
,

424 *
loghód
)

426 
xfs_dú2_d©a_‰ì_t
 
√w
;

428 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

429 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

430 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
) ||

431 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
));

433 
√w
.
Àngth
 = 
dup
->length;

434 
√w
.
off£t
 = 
	`˝u_to_be16
((*)
dup
 - (*)
hdr
);

439 i‡(
	`be16_to_˝u
(
√w
.
Àngth
Ë> be16_to_˝u(
dÂ
[0].length)) {

440 
dÂ
[2] = dfp[1];

441 
dÂ
[1] = dfp[0];

442 
dÂ
[0] = 
√w
;

443 *
loghód
 = 1;

444  &
dÂ
[0];

446 i‡(
	`be16_to_˝u
(
√w
.
Àngth
Ë> be16_to_˝u(
dÂ
[1].length)) {

447 
dÂ
[2] = dfp[1];

448 
dÂ
[1] = 
√w
;

449 *
loghód
 = 1;

450  &
dÂ
[1];

452 i‡(
	`be16_to_˝u
(
√w
.
Àngth
Ë> be16_to_˝u(
dÂ
[2].length)) {

453 
dÂ
[2] = 
√w
;

454 *
loghód
 = 1;

455  &
dÂ
[2];

457  
NULL
;

458 
	}
}

463 
STATIC
 

464 
	$xfs_dú2_d©a_‰ìªmove
(

465 
xfs_dú2_d©a_hdr
 *
hdr
,

466 
xfs_dú2_d©a_‰ì
 *
bf
,

467 
xfs_dú2_d©a_‰ì
 *
dÂ
,

468 *
loghód
)

471 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

472 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

473 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
) ||

474 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
));

479 i‡(
dÂ
 =&
bf
[0]) {

480 
bf
[0] = bf[1];

481 
bf
[1] = bf[2];

486 i‡(
dÂ
 =&
bf
[1])

487 
bf
[1] = bf[2];

492 
	`ASSERT
(
dÂ
 =&
bf
[2]);

496 
bf
[2].
Àngth
 = 0;

497 
bf
[2].
off£t
 = 0;

498 *
loghód
 = 1;

499 
	}
}

505 
	$xfs_dú2_d©a_‰ìsˇn_öt
(

506 
xfs_da_geomëry
 *
geo
,

507 c⁄° 
xfs_dú_›s
 *
›s
,

508 
xfs_dú2_d©a_hdr
 *
hdr
,

509 *
loghód
)

511 
xfs_dú2_block_èû_t
 *
bç
;

512 
xfs_dú2_d©a_íåy_t
 *
dï
;

513 
xfs_dú2_d©a_unu£d_t
 *
dup
;

514 
xfs_dú2_d©a_‰ì
 *
bf
;

515 *
ídp
;

516 *
p
;

518 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

519 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
) ||

520 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

521 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
));

526 
bf
 = 
›s
->
	`d©a_be°‰ì_p
(
hdr
);

527 
	`mem£t
(
bf
, 0, (*bfË* 
XFS_DIR2_DATA_FD_COUNT
);

528 *
loghód
 = 1;

532 
p
 = (*)
›s
->
	`d©a_íåy_p
(
hdr
);

533 i‡(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

534 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
)) {

535 
bç
 = 
	`xfs_dú2_block_èû_p
(
geo
, 
hdr
);

536 
ídp
 = (*)
	`xfs_dú2_block_Àaf_p
(
bç
);

538 
ídp
 = (*)
hdr
 + 
geo
->
blksize
;

542 
p
 < 
ídp
) {

543 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
p
;

547 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

548 
	`ASSERT
((*)
dup
 - (*)
hdr
 ==

549 
	`be16_to_˝u
(*
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
)));

550 
	`xfs_dú2_d©a_‰ìö£π
(
hdr
, 
bf
, 
dup
, 
loghód
);

551 
p
 +
	`be16_to_˝u
(
dup
->
Àngth
);

557 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
p
;

558 
	`ASSERT
((*)
dï
 - (*)
hdr
 ==

559 
	`be16_to_˝u
(*
›s
->
	`d©a_íåy_èg_p
(
dï
)));

560 
p
 +
›s
->
	`d©a_ítsize
(
dï
->
«mñí
);

563 
	}
}

566 
	$xfs_dú2_d©a_‰ìsˇn
(

567 
xfs_öode
 *
dp
,

568 
xfs_dú2_d©a_hdr
 *
hdr
,

569 *
loghód
)

571  
	`xfs_dú2_d©a_‰ìsˇn_öt
(
dp
->
i_mou¡
->
m_dú_geo
, dp->
d_›s
,

572 
hdr
, 
loghód
);

573 
	}
}

580 
	$xfs_dú3_d©a_öô
(

581 
xfs_da_¨gs_t
 *
¨gs
,

582 
xfs_dú2_db_t
 
blkno
,

583 
xfs_buf
 **
bµ
)

585 
xfs_buf
 *
bp
;

586 
xfs_dú2_d©a_hdr_t
 *
hdr
;

587 
xfs_öode_t
 *
dp
;

588 
xfs_dú2_d©a_unu£d_t
 *
dup
;

589 
xfs_dú2_d©a_‰ì
 *
bf
;

590 
îr‹
;

591 
i
;

592 
xfs_mou¡_t
 *
mp
;

593 
xfs_å™s_t
 *
ç
;

594 
t
;

596 
dp
 = 
¨gs
->dp;

597 
mp
 = 
dp
->
i_mou¡
;

598 
ç
 = 
¨gs
->
å™s
;

602 
îr‹
 = 
	`xfs_da_gë_buf
(
ç
, 
dp
, 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
blkno
),

603 -1, &
bp
, 
XFS_DATA_FORK
);

604 i‡(
îr‹
)

605  
îr‹
;

606 
bp
->
b_›s
 = &
xfs_dú3_d©a_buf_›s
;

607 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_DIR_DATA_BUF
);

612 
hdr
 = 
bp
->
b_addr
;

613 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

614 
xfs_dú3_blk_hdr
 *
hdr3
 = 
bp
->
b_addr
;

616 
	`mem£t
(
hdr3
, 0, (*hdr3));

617 
hdr3
->
magic
 = 
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
);

618 
hdr3
->
blkno
 = 
	`˝u_to_be64
(
bp
->
b_bn
);

619 
hdr3
->
ow√r
 = 
	`˝u_to_be64
(
dp
->
i_öo
);

620 
	`uuid_c›y
(&
hdr3
->
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

623 
hdr
->
magic
 = 
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
);

625 
bf
 = 
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

626 
bf
[0].
off£t
 = 
	`˝u_to_be16
(
dp
->
d_›s
->
d©a_íåy_off£t
);

627 
i
 = 1; i < 
XFS_DIR2_DATA_FD_COUNT
; i++) {

628 
bf
[
i
].
Àngth
 = 0;

629 
bf
[
i
].
off£t
 = 0;

635 
dup
 = 
dp
->
d_›s
->
	`d©a_unu£d_p
(
hdr
);

636 
dup
->
‰ìèg
 = 
	`˝u_to_be16
(
XFS_DIR2_DATA_FREE_TAG
);

638 
t
 = 
¨gs
->
geo
->
blksize
 - (
uöt
)
dp
->
d_›s
->
d©a_íåy_off£t
;

639 
bf
[0].
Àngth
 = 
	`˝u_to_be16
(
t
);

640 
dup
->
Àngth
 = 
	`˝u_to_be16
(
t
);

641 *
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
Ë
	`˝u_to_be16
((*)du∞- (*)
hdr
);

645 
	`xfs_dú2_d©a_log_hódî
(
¨gs
, 
bp
);

646 
	`xfs_dú2_d©a_log_unu£d
(
¨gs
, 
bp
, 
dup
);

647 *
bµ
 = 
bp
;

649 
	}
}

655 
	$xfs_dú2_d©a_log_íåy
(

656 
xfs_da_¨gs
 *
¨gs
,

657 
xfs_buf
 *
bp
,

658 
xfs_dú2_d©a_íåy_t
 *
dï
)

660 
xfs_dú2_d©a_hdr
 *
hdr
 = 
bp
->
b_addr
;

662 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

663 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
) ||

664 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

665 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
));

667 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
, (
uöt
)((*)
dï
 - (*)
hdr
),

668 (
uöt
)((*)(
¨gs
->
dp
->
d_›s
->
	`d©a_íåy_èg_p
(
dï
) + 1) -

669 (*)
hdr
 - 1));

670 
	}
}

676 
	$xfs_dú2_d©a_log_hódî
(

677 
xfs_da_¨gs
 *
¨gs
,

678 
xfs_buf
 *
bp
)

680 #ifde‡
DEBUG


681 
xfs_dú2_d©a_hdr
 *
hdr
 = 
bp
->
b_addr
;

683 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

684 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
) ||

685 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

686 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
));

689 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
, 0,

690 
¨gs
->
dp
->
d_›s
->
d©a_íåy_off£t
 - 1);

691 
	}
}

697 
	$xfs_dú2_d©a_log_unu£d
(

698 
xfs_da_¨gs
 *
¨gs
,

699 
xfs_buf
 *
bp
,

700 
xfs_dú2_d©a_unu£d_t
 *
dup
)

702 
xfs_dú2_d©a_hdr_t
 *
hdr
 = 
bp
->
b_addr
;

704 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

705 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
) ||

706 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

707 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
));

712 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
, (
uöt
)((*)
dup
 - (*)
hdr
),

713 (
uöt
)((*)&
dup
->
Àngth
 + (dup->length) -

714 1 - (*)
hdr
));

718 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

719 (
uöt
)((*)
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
Ë- (*)
hdr
),

720 (
uöt
)((*)
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
Ë- (*)
hdr
 +

721 (
xfs_dú2_d©a_off_t
) - 1));

722 
	}
}

729 
	$xfs_dú2_d©a_make_‰ì
(

730 
xfs_da_¨gs
 *
¨gs
,

731 
xfs_buf
 *
bp
,

732 
xfs_dú2_d©a_aoff_t
 
off£t
,

733 
xfs_dú2_d©a_aoff_t
 
Àn
,

734 *
√edlogp
,

735 *
√edsˇ≈
)

737 
xfs_dú2_d©a_hdr_t
 *
hdr
;

738 
xfs_dú2_d©a_‰ì_t
 *
dÂ
;

739 *
íd±r
;

740 
√edsˇn
;

741 
xfs_dú2_d©a_unu£d_t
 *
√wdup
;

742 
xfs_dú2_d©a_unu£d_t
 *
po°dup
;

743 
xfs_dú2_d©a_unu£d_t
 *
¥evdup
;

744 
xfs_dú2_d©a_‰ì
 *
bf
;

746 
hdr
 = 
bp
->
b_addr
;

751 i‡(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

752 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
))

753 
íd±r
 = (*)
hdr
 + 
¨gs
->
geo
->
blksize
;

755 
xfs_dú2_block_èû_t
 *
bç
;

757 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

758 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
));

759 
bç
 = 
	`xfs_dú2_block_èû_p
(
¨gs
->
geo
, 
hdr
);

760 
íd±r
 = (*)
	`xfs_dú2_block_Àaf_p
(
bç
);

766 i‡(
off£t
 > 
¨gs
->
dp
->
d_›s
->
d©a_íåy_off£t
) {

767 
__be16
 *
ègp
;

769 
ègp
 = (
__be16
 *)((*)
hdr
 + 
off£t
) - 1;

770 
¥evdup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
hdr
 + 
	`be16_to_˝u
(*
ègp
));

771 i‡(
	`be16_to_˝u
(
¥evdup
->
‰ìèg
Ë!
XFS_DIR2_DATA_FREE_TAG
)

772 
¥evdup
 = 
NULL
;

774 
¥evdup
 = 
NULL
;

779 i‡((*)
hdr
 + 
off£t
 + 
Àn
 < 
íd±r
) {

780 
po°dup
 =

781 (
xfs_dú2_d©a_unu£d_t
 *)((*)
hdr
 + 
off£t
 + 
Àn
);

782 i‡(
	`be16_to_˝u
(
po°dup
->
‰ìèg
Ë!
XFS_DIR2_DATA_FREE_TAG
)

783 
po°dup
 = 
NULL
;

785 
po°dup
 = 
NULL
;

786 
	`ASSERT
(*
√edsˇ≈
 == 0);

787 
√edsˇn
 = 0;

792 
bf
 = 
¨gs
->
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

793 i‡(
¥evdup
 && 
po°dup
) {

794 
xfs_dú2_d©a_‰ì_t
 *
dÂ2
;

799 
dÂ
 = 
	`xfs_dú2_d©a_‰ìföd
(
hdr
, 
bf
, 
¥evdup
);

800 
dÂ2
 = 
	`xfs_dú2_d©a_‰ìföd
(
hdr
, 
bf
, 
po°dup
);

807 
√edsˇn
 = (
bf
[2].
Àngth
 != 0);

811 
	`be16_add_˝u
(&
¥evdup
->
Àngth
, 
Àn
 + 
	`be16_to_˝u
(
po°dup
->length));

812 *
	`xfs_dú2_d©a_unu£d_èg_p
(
¥evdup
) =

813 
	`˝u_to_be16
((*)
¥evdup
 - (*)
hdr
);

814 
	`xfs_dú2_d©a_log_unu£d
(
¨gs
, 
bp
, 
¥evdup
);

815 i‡(!
√edsˇn
) {

822 
	`ASSERT
(
dÂ
 && 
dÂ2
);

823 i‡(
dÂ
 =&
bf
[1]) {

824 
dÂ
 = &
bf
[0];

825 
	`ASSERT
(
dÂ2
 =
dÂ
);

826 
dÂ2
 = &
bf
[1];

828 
	`xfs_dú2_d©a_‰ìªmove
(
hdr
, 
bf
, 
dÂ2
, 
√edlogp
);

829 
	`xfs_dú2_d©a_‰ìªmove
(
hdr
, 
bf
, 
dÂ
, 
√edlogp
);

833 
dÂ
 = 
	`xfs_dú2_d©a_‰ìö£π
(
hdr
, 
bf
, 
¥evdup
,

834 
√edlogp
);

835 
	`ASSERT
(
dÂ
 =&
bf
[0]);

836 
	`ASSERT
(
dÂ
->
Àngth
 =
¥evdup
->length);

837 
	`ASSERT
(!
dÂ
[1].
Àngth
);

838 
	`ASSERT
(!
dÂ
[2].
Àngth
);

844 i‡(
¥evdup
) {

845 
dÂ
 = 
	`xfs_dú2_d©a_‰ìföd
(
hdr
, 
bf
, 
¥evdup
);

846 
	`be16_add_˝u
(&
¥evdup
->
Àngth
, 
Àn
);

847 *
	`xfs_dú2_d©a_unu£d_èg_p
(
¥evdup
) =

848 
	`˝u_to_be16
((*)
¥evdup
 - (*)
hdr
);

849 
	`xfs_dú2_d©a_log_unu£d
(
¨gs
, 
bp
, 
¥evdup
);

855 i‡(
dÂ
) {

856 
	`xfs_dú2_d©a_‰ìªmove
(
hdr
, 
bf
, 
dÂ
, 
√edlogp
);

857 
	`xfs_dú2_d©a_‰ìö£π
(
hdr
, 
bf
, 
¥evdup
, 
√edlogp
);

863 
√edsˇn
 = 
	`be16_to_˝u
(
¥evdup
->
Àngth
) >

864 
	`be16_to_˝u
(
bf
[2].
Àngth
);

870 i‡(
po°dup
) {

871 
dÂ
 = 
	`xfs_dú2_d©a_‰ìföd
(
hdr
, 
bf
, 
po°dup
);

872 
√wdup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
hdr
 + 
off£t
);

873 
√wdup
->
‰ìèg
 = 
	`˝u_to_be16
(
XFS_DIR2_DATA_FREE_TAG
);

874 
√wdup
->
Àngth
 = 
	`˝u_to_be16
(
Àn
 + 
	`be16_to_˝u
(
po°dup
->length));

875 *
	`xfs_dú2_d©a_unu£d_èg_p
(
√wdup
) =

876 
	`˝u_to_be16
((*)
√wdup
 - (*)
hdr
);

877 
	`xfs_dú2_d©a_log_unu£d
(
¨gs
, 
bp
, 
√wdup
);

883 i‡(
dÂ
) {

884 
	`xfs_dú2_d©a_‰ìªmove
(
hdr
, 
bf
, 
dÂ
, 
√edlogp
);

885 
	`xfs_dú2_d©a_‰ìö£π
(
hdr
, 
bf
, 
√wdup
, 
√edlogp
);

891 
√edsˇn
 = 
	`be16_to_˝u
(
√wdup
->
Àngth
) >

892 
	`be16_to_˝u
(
bf
[2].
Àngth
);

899 
√wdup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
hdr
 + 
off£t
);

900 
√wdup
->
‰ìèg
 = 
	`˝u_to_be16
(
XFS_DIR2_DATA_FREE_TAG
);

901 
√wdup
->
Àngth
 = 
	`˝u_to_be16
(
Àn
);

902 *
	`xfs_dú2_d©a_unu£d_èg_p
(
√wdup
) =

903 
	`˝u_to_be16
((*)
√wdup
 - (*)
hdr
);

904 
	`xfs_dú2_d©a_log_unu£d
(
¨gs
, 
bp
, 
√wdup
);

905 
	`xfs_dú2_d©a_‰ìö£π
(
hdr
, 
bf
, 
√wdup
, 
√edlogp
);

907 *
√edsˇ≈
 = 
√edsˇn
;

908 
	}
}

914 
	$xfs_dú2_d©a_u£_‰ì
(

915 
xfs_da_¨gs
 *
¨gs
,

916 
xfs_buf
 *
bp
,

917 
xfs_dú2_d©a_unu£d_t
 *
dup
,

918 
xfs_dú2_d©a_aoff_t
 
off£t
,

919 
xfs_dú2_d©a_aoff_t
 
Àn
,

920 *
√edlogp
,

921 *
√edsˇ≈
)

923 
xfs_dú2_d©a_hdr_t
 *
hdr
;

924 
xfs_dú2_d©a_‰ì_t
 *
dÂ
;

925 
m©chback
;

926 
m©ch‰⁄t
;

927 
√edsˇn
;

928 
xfs_dú2_d©a_unu£d_t
 *
√wdup
;

929 
xfs_dú2_d©a_unu£d_t
 *
√wdup2
;

930 
ﬁdÀn
;

931 
xfs_dú2_d©a_‰ì
 *
bf
;

933 
hdr
 = 
bp
->
b_addr
;

934 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

935 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
) ||

936 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
) ||

937 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_BLOCK_MAGIC
));

938 
	`ASSERT
(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
);

939 
	`ASSERT
(
off£t
 >(*)
dup
 - (*)
hdr
);

940 
	`ASSERT
(
off£t
 + 
Àn
 <(*)
dup
 + 
	`be16_to_˝u
(dup->
Àngth
Ë- (*)
hdr
);

941 
	`ASSERT
((*)
dup
 - (*)
hdr
 =
	`be16_to_˝u
(*
	`xfs_dú2_d©a_unu£d_èg_p
(dup)));

945 
ﬁdÀn
 = 
	`be16_to_˝u
(
dup
->
Àngth
);

946 
bf
 = 
¨gs
->
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

947 
dÂ
 = 
	`xfs_dú2_d©a_‰ìföd
(
hdr
, 
bf
, 
dup
);

948 
	`ASSERT
(
dÂ
 || 
ﬁdÀn
 <
	`be16_to_˝u
(
bf
[2].
Àngth
));

952 
m©ch‰⁄t
 = (*)
dup
 - (*)
hdr
 =
off£t
;

953 
m©chback
 = (*)
dup
 + 
ﬁdÀn
 - (*)
hdr
 =
off£t
 + 
Àn
;

954 
	`ASSERT
(*
√edsˇ≈
 == 0);

955 
√edsˇn
 = 0;

960 i‡(
m©ch‰⁄t
 && 
m©chback
) {

961 i‡(
dÂ
) {

962 
√edsˇn
 = (
bf
[2].
off£t
 != 0);

963 i‡(!
√edsˇn
)

964 
	`xfs_dú2_d©a_‰ìªmove
(
hdr
, 
bf
, 
dÂ
,

965 
√edlogp
);

972 i‡(
m©ch‰⁄t
) {

973 
√wdup
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
hdr
 + 
off£t
 + 
Àn
);

974 
√wdup
->
‰ìèg
 = 
	`˝u_to_be16
(
XFS_DIR2_DATA_FREE_TAG
);

975 
√wdup
->
Àngth
 = 
	`˝u_to_be16
(
ﬁdÀn
 - 
Àn
);

976 *
	`xfs_dú2_d©a_unu£d_èg_p
(
√wdup
) =

977 
	`˝u_to_be16
((*)
√wdup
 - (*)
hdr
);

978 
	`xfs_dú2_d©a_log_unu£d
(
¨gs
, 
bp
, 
√wdup
);

982 i‡(
dÂ
) {

983 
	`xfs_dú2_d©a_‰ìªmove
(
hdr
, 
bf
, 
dÂ
, 
√edlogp
);

984 
dÂ
 = 
	`xfs_dú2_d©a_‰ìö£π
(
hdr
, 
bf
, 
√wdup
,

985 
√edlogp
);

986 
	`ASSERT
(
dÂ
 !
NULL
);

987 
	`ASSERT
(
dÂ
->
Àngth
 =
√wdup
->length);

988 
	`ASSERT
(
	`be16_to_˝u
(
dÂ
->
off£t
Ë=(*)
√wdup
 - (*)
hdr
);

994 
√edsˇn
 = 
dÂ
 =&
bf
[2];

1001 i‡(
m©chback
) {

1002 
√wdup
 = 
dup
;

1003 
√wdup
->
Àngth
 = 
	`˝u_to_be16
(((*)
hdr
 + 
off£t
) - (*)newdup);

1004 *
	`xfs_dú2_d©a_unu£d_èg_p
(
√wdup
) =

1005 
	`˝u_to_be16
((*)
√wdup
 - (*)
hdr
);

1006 
	`xfs_dú2_d©a_log_unu£d
(
¨gs
, 
bp
, 
√wdup
);

1010 i‡(
dÂ
) {

1011 
	`xfs_dú2_d©a_‰ìªmove
(
hdr
, 
bf
, 
dÂ
, 
√edlogp
);

1012 
dÂ
 = 
	`xfs_dú2_d©a_‰ìö£π
(
hdr
, 
bf
, 
√wdup
,

1013 
√edlogp
);

1014 
	`ASSERT
(
dÂ
 !
NULL
);

1015 
	`ASSERT
(
dÂ
->
Àngth
 =
√wdup
->length);

1016 
	`ASSERT
(
	`be16_to_˝u
(
dÂ
->
off£t
Ë=(*)
√wdup
 - (*)
hdr
);

1022 
√edsˇn
 = 
dÂ
 =&
bf
[2];

1030 
√wdup
 = 
dup
;

1031 
√wdup
->
Àngth
 = 
	`˝u_to_be16
(((*)
hdr
 + 
off£t
) - (*)newdup);

1032 *
	`xfs_dú2_d©a_unu£d_èg_p
(
√wdup
) =

1033 
	`˝u_to_be16
((*)
√wdup
 - (*)
hdr
);

1034 
	`xfs_dú2_d©a_log_unu£d
(
¨gs
, 
bp
, 
√wdup
);

1035 
√wdup2
 = (
xfs_dú2_d©a_unu£d_t
 *)((*)
hdr
 + 
off£t
 + 
Àn
);

1036 
√wdup2
->
‰ìèg
 = 
	`˝u_to_be16
(
XFS_DIR2_DATA_FREE_TAG
);

1037 
√wdup2
->
Àngth
 = 
	`˝u_to_be16
(
ﬁdÀn
 - 
Àn
 - 
	`be16_to_˝u
(
√wdup
->length));

1038 *
	`xfs_dú2_d©a_unu£d_èg_p
(
√wdup2
) =

1039 
	`˝u_to_be16
((*)
√wdup2
 - (*)
hdr
);

1040 
	`xfs_dú2_d©a_log_unu£d
(
¨gs
, 
bp
, 
√wdup2
);

1049 i‡(
dÂ
) {

1050 
√edsˇn
 = (
bf
[2].
Àngth
 != 0);

1051 i‡(!
√edsˇn
) {

1052 
	`xfs_dú2_d©a_‰ìªmove
(
hdr
, 
bf
, 
dÂ
,

1053 
√edlogp
);

1054 
	`xfs_dú2_d©a_‰ìö£π
(
hdr
, 
bf
, 
√wdup
,

1055 
√edlogp
);

1056 
	`xfs_dú2_d©a_‰ìö£π
(
hdr
, 
bf
, 
√wdup2
,

1057 
√edlogp
);

1061 *
√edsˇ≈
 = 
√edsˇn
;

1062 
	}
}

	@libxfs/xfs_dir2_leaf.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_mou¡.h
"

25 
	~"xfs_da_f‹m©.h
"

26 
	~"xfs_da_båì.h
"

27 
	~"xfs_öode.h
"

28 
	~"xfs_bm≠.h
"

29 
	~"xfs_dú2.h
"

30 
	~"xfs_dú2_¥iv.h
"

31 
	~"xfs_åa˚.h
"

32 
	~"xfs_å™s.h
"

33 
	~"xfs_cksum.h
"

38 
xfs_dú2_Àaf_lookup_öt
(
xfs_da_¨gs_t
 *
¨gs
, 
xfs_buf
 **
lbµ
,

39 *
ödexp
, 
xfs_buf
 **
dbµ
);

40 
xfs_dú3_Àaf_log_be°s
(
xfs_da_¨gs
 *
¨gs
,

41 
xfs_buf
 *
bp
, 
fú°
, 
œ°
);

42 
xfs_dú3_Àaf_log_èû
(
xfs_da_¨gs
 *
¨gs
,

43 
xfs_buf
 *
bp
);

49 #ifde‡
DEBUG


50 
	#xfs_dú3_Àaf_check
(
dp
, 
bp
) \

52 i‡(!
	`xfs_dú3_Àaf1_check
((
dp
), (
bp
))) \

53 
	`ASSERT
(0); \

54 } 0);

	)

56 
STATIC
 
boﬁ


57 
	$xfs_dú3_Àaf1_check
(

58 
xfs_öode
 *
dp
,

59 
xfs_buf
 *
bp
)

61 
xfs_dú2_Àaf
 *
Àaf
 = 
bp
->
b_addr
;

62 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

64 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

66 i‡(
Àafhdr
.
magic
 =
XFS_DIR3_LEAF1_MAGIC
) {

67 
xfs_dú3_Àaf_hdr
 *
Àaf3
 = 
bp
->
b_addr
;

68 i‡(
	`be64_to_˝u
(
Àaf3
->
öfo
.
blkno
Ë!
bp
->
b_bn
)

69  
Ál£
;

70 } i‡(
Àafhdr
.
magic
 !
XFS_DIR2_LEAF1_MAGIC
)

71  
Ál£
;

73  
	`xfs_dú3_Àaf_check_öt
(
dp
->
i_mou¡
, dp, &
Àafhdr
, 
Àaf
);

74 
	}
}

76 
	#xfs_dú3_Àaf_check
(
dp
, 
bp
)

	)

79 
boﬁ


80 
	$xfs_dú3_Àaf_check_öt
(

81 
xfs_mou¡
 *
mp
,

82 
xfs_öode
 *
dp
,

83 
xfs_dú3_i˛óf_hdr
 *
hdr
,

84 
xfs_dú2_Àaf
 *
Àaf
)

86 
xfs_dú2_Àaf_íåy
 *
íts
;

87 
xfs_dú2_Àaf_èû_t
 *
…p
;

88 
°Æe
;

89 
i
;

90 c⁄° 
xfs_dú_›s
 *
›s
;

91 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

92 
xfs_da_geomëry
 *
geo
 = 
mp
->
m_dú_geo
;

98 
›s
 = 
	`xfs_dú_gë_›s
(
mp
, 
dp
);

100 i‡(!
hdr
) {

101 
›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

102 
hdr
 = &
Àafhdr
;

105 
íts
 = 
›s
->
	`Àaf_íts_p
(
Àaf
);

106 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
geo
, 
Àaf
);

113 i‡(
hdr
->
cou¡
 > 
›s
->
	`Àaf_max_íts
(
geo
))

114  
Ál£
;

117 i‡((
hdr
->
magic
 =
XFS_DIR2_LEAF1_MAGIC
 ||

118 
hdr
->
magic
 =
XFS_DIR3_LEAF1_MAGIC
) &&

119 (*)&
íts
[
hdr
->
cou¡
] > (*)
	`xfs_dú2_Àaf_be°s_p
(
…p
))

120  
Ál£
;

123 
i
 = 
°Æe
 = 0; i < 
hdr
->
cou¡
; i++) {

124 i‡(
i
 + 1 < 
hdr
->
cou¡
) {

125 i‡(
	`be32_to_˝u
(
íts
[
i
].
hashvÆ
) >

126 
	`be32_to_˝u
(
íts
[
i
 + 1].
hashvÆ
))

127  
Ál£
;

129 i‡(
íts
[
i
].
addªss
 =
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
))

130 
°Æe
++;

132 i‡(
hdr
->
°Æe
 != stale)

133  
Ál£
;

134  
åue
;

135 
	}
}

142 
boﬁ


143 
	$xfs_dú3_Àaf_vîify
(

144 
xfs_buf
 *
bp
,

145 
__uöt16_t
 
magic
)

147 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

148 
xfs_dú2_Àaf
 *
Àaf
 = 
bp
->
b_addr
;

150 
	`ASSERT
(
magic
 =
XFS_DIR2_LEAF1_MAGIC
 || magi¯=
XFS_DIR2_LEAFN_MAGIC
);

152 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

153 
xfs_dú3_Àaf_hdr
 *
Àaf3
 = 
bp
->
b_addr
;

154 
__uöt16_t
 
magic3
;

156 
magic3
 = (
magic
 =
XFS_DIR2_LEAF1_MAGIC
Ë? 
XFS_DIR3_LEAF1_MAGIC


157 : 
XFS_DIR3_LEAFN_MAGIC
;

159 i‡(
Àaf3
->
öfo
.
hdr
.
magic
 !
	`˝u_to_be16
(
magic3
))

160  
Ál£
;

161 i‡(!
	`uuid_equÆ
(&
Àaf3
->
öfo
.
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

162  
Ál£
;

163 i‡(
	`be64_to_˝u
(
Àaf3
->
öfo
.
blkno
Ë!
bp
->
b_bn
)

164  
Ál£
;

165 i‡(!
	`xfs_log_check_l¢
(
mp
, 
	`be64_to_˝u
(
Àaf3
->
öfo
.
l¢
)))

166  
Ál£
;

168 i‡(
Àaf
->
hdr
.
öfo
.
magic
 !
	`˝u_to_be16
(magic))

169  
Ál£
;

172  
	`xfs_dú3_Àaf_check_öt
(
mp
, 
NULL
, NULL, 
Àaf
);

173 
	}
}

176 
	$__ªad_vîify
(

177 
xfs_buf
 *
bp
,

178 
__uöt16_t
 
magic
)

180 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

182 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

183 !
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_DIR3_LEAF_CRC_OFF
))

184 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

185 i‡(!
	`xfs_dú3_Àaf_vîify
(
bp
, 
magic
))

186 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

188 i‡(
bp
->
b_îr‹
)

189 
	`xfs_vîifõr_îr‹
(
bp
);

190 
	}
}

193 
	$__wrôe_vîify
(

194 
xfs_buf
 *
bp
,

195 
__uöt16_t
 
magic
)

197 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

198 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

199 
xfs_dú3_Àaf_hdr
 *
hdr3
 = 
bp
->
b_addr
;

201 i‡(!
	`xfs_dú3_Àaf_vîify
(
bp
, 
magic
)) {

202 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

203 
	`xfs_vîifõr_îr‹
(
bp
);

207 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

210 i‡(
bù
)

211 
hdr3
->
öfo
.
l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

213 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_DIR3_LEAF_CRC_OFF
);

214 
	}
}

217 
	$xfs_dú3_Àaf1_ªad_vîify
(

218 
xfs_buf
 *
bp
)

220 
	`__ªad_vîify
(
bp
, 
XFS_DIR2_LEAF1_MAGIC
);

221 
	}
}

224 
	$xfs_dú3_Àaf1_wrôe_vîify
(

225 
xfs_buf
 *
bp
)

227 
	`__wrôe_vîify
(
bp
, 
XFS_DIR2_LEAF1_MAGIC
);

228 
	}
}

231 
	$xfs_dú3_Àa‚_ªad_vîify
(

232 
xfs_buf
 *
bp
)

234 
	`__ªad_vîify
(
bp
, 
XFS_DIR2_LEAFN_MAGIC
);

235 
	}
}

238 
	$xfs_dú3_Àa‚_wrôe_vîify
(

239 
xfs_buf
 *
bp
)

241 
	`__wrôe_vîify
(
bp
, 
XFS_DIR2_LEAFN_MAGIC
);

242 
	}
}

244 c⁄° 
xfs_buf_›s
 
	gxfs_dú3_Àaf1_buf_›s
 = {

245 .
«me
 = "xfs_dir3_leaf1",

246 .
	gvîify_ªad
 = 
xfs_dú3_Àaf1_ªad_vîify
,

247 .
	gvîify_wrôe
 = 
xfs_dú3_Àaf1_wrôe_vîify
,

250 c⁄° 
xfs_buf_›s
 
	gxfs_dú3_Àa‚_buf_›s
 = {

251 .
«me
 = "xfs_dir3_leafn",

252 .
	gvîify_ªad
 = 
xfs_dú3_Àa‚_ªad_vîify
,

253 .
	gvîify_wrôe
 = 
xfs_dú3_Àa‚_wrôe_vîify
,

257 
	$xfs_dú3_Àaf_ªad
(

258 
xfs_å™s
 *
ç
,

259 
xfs_öode
 *
dp
,

260 
xfs_dablk_t
 
fbno
,

261 
xfs_daddr_t
 
m≠≥dbno
,

262 
xfs_buf
 **
bµ
)

264 
îr
;

266 
îr
 = 
	`xfs_da_ªad_buf
(
ç
, 
dp
, 
fbno
, 
m≠≥dbno
, 
bµ
,

267 
XFS_DATA_FORK
, &
xfs_dú3_Àaf1_buf_›s
);

268 i‡(!
îr
 && 
ç
)

269 
	`xfs_å™s_buf_£t_ty≥
(
ç
, *
bµ
, 
XFS_BLFT_DIR_LEAF1_BUF
);

270  
îr
;

271 
	}
}

274 
	$xfs_dú3_Àa‚_ªad
(

275 
xfs_å™s
 *
ç
,

276 
xfs_öode
 *
dp
,

277 
xfs_dablk_t
 
fbno
,

278 
xfs_daddr_t
 
m≠≥dbno
,

279 
xfs_buf
 **
bµ
)

281 
îr
;

283 
îr
 = 
	`xfs_da_ªad_buf
(
ç
, 
dp
, 
fbno
, 
m≠≥dbno
, 
bµ
,

284 
XFS_DATA_FORK
, &
xfs_dú3_Àa‚_buf_›s
);

285 i‡(!
îr
 && 
ç
)

286 
	`xfs_å™s_buf_£t_ty≥
(
ç
, *
bµ
, 
XFS_BLFT_DIR_LEAFN_BUF
);

287  
îr
;

288 
	}
}

294 
	$xfs_dú3_Àaf_öô
(

295 
xfs_mou¡
 *
mp
,

296 
xfs_å™s
 *
ç
,

297 
xfs_buf
 *
bp
,

298 
xfs_öo_t
 
ow√r
,

299 
__uöt16_t
 
ty≥
)

301 
xfs_dú2_Àaf
 *
Àaf
 = 
bp
->
b_addr
;

303 
	`ASSERT
(
ty≥
 =
XFS_DIR2_LEAF1_MAGIC
 ||Åy≥ =
XFS_DIR2_LEAFN_MAGIC
);

305 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

306 
xfs_dú3_Àaf_hdr
 *
Àaf3
 = 
bp
->
b_addr
;

308 
	`mem£t
(
Àaf3
, 0, (*leaf3));

310 
Àaf3
->
öfo
.
hdr
.
magic
 = (
ty≥
 =
XFS_DIR2_LEAF1_MAGIC
)

311 ? 
	`˝u_to_be16
(
XFS_DIR3_LEAF1_MAGIC
)

312 : 
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
);

313 
Àaf3
->
öfo
.
blkno
 = 
	`˝u_to_be64
(
bp
->
b_bn
);

314 
Àaf3
->
öfo
.
ow√r
 = 
	`˝u_to_be64
(owner);

315 
	`uuid_c›y
(&
Àaf3
->
öfo
.
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

317 
	`mem£t
(
Àaf
, 0, (*leaf));

318 
Àaf
->
hdr
.
öfo
.
magic
 = 
	`˝u_to_be16
(
ty≥
);

325 i‡(
ty≥
 =
XFS_DIR2_LEAF1_MAGIC
) {

326 
xfs_dú2_Àaf_èû
 *
…p
;

328 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
mp
->
m_dú_geo
, 
Àaf
);

329 
…p
->
be°cou¡
 = 0;

330 
bp
->
b_›s
 = &
xfs_dú3_Àaf1_buf_›s
;

331 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_DIR_LEAF1_BUF
);

333 
bp
->
b_›s
 = &
xfs_dú3_Àa‚_buf_›s
;

334 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_DIR_LEAFN_BUF
);

336 
	}
}

339 
	$xfs_dú3_Àaf_gë_buf
(

340 
xfs_da_¨gs_t
 *
¨gs
,

341 
xfs_dú2_db_t
 
bno
,

342 
xfs_buf
 **
bµ
,

343 
__uöt16_t
 
magic
)

345 
xfs_öode
 *
dp
 = 
¨gs
->dp;

346 
xfs_å™s
 *
ç
 = 
¨gs
->
å™s
;

347 
xfs_mou¡
 *
mp
 = 
dp
->
i_mou¡
;

348 
xfs_buf
 *
bp
;

349 
îr‹
;

351 
	`ASSERT
(
magic
 =
XFS_DIR2_LEAF1_MAGIC
 || magi¯=
XFS_DIR2_LEAFN_MAGIC
);

352 
	`ASSERT
(
bno
 >
	`xfs_dú2_byã_to_db
(
¨gs
->
geo
, 
XFS_DIR2_LEAF_OFFSET
) &&

353 
bno
 < 
	`xfs_dú2_byã_to_db
(
¨gs
->
geo
, 
XFS_DIR2_FREE_OFFSET
));

355 
îr‹
 = 
	`xfs_da_gë_buf
(
ç
, 
dp
, 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
bno
),

356 -1, &
bp
, 
XFS_DATA_FORK
);

357 i‡(
îr‹
)

358  
îr‹
;

360 
	`xfs_dú3_Àaf_öô
(
mp
, 
ç
, 
bp
, 
dp
->
i_öo
, 
magic
);

361 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
bp
);

362 i‡(
magic
 =
XFS_DIR2_LEAF1_MAGIC
)

363 
	`xfs_dú3_Àaf_log_èû
(
¨gs
, 
bp
);

364 *
bµ
 = 
bp
;

366 
	}
}

372 
	$xfs_dú2_block_to_Àaf
(

373 
xfs_da_¨gs_t
 *
¨gs
,

374 
xfs_buf
 *
dbp
)

376 
__be16
 *
be°•
;

377 
xfs_dablk_t
 
blkno
;

378 
xfs_dú2_d©a_hdr_t
 *
hdr
;

379 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

380 
xfs_dú2_block_èû_t
 *
bç
;

381 
xfs_öode_t
 *
dp
;

382 
îr‹
;

383 
xfs_buf
 *
lbp
;

384 
xfs_dú2_db_t
 
ldb
;

385 
xfs_dú2_Àaf_t
 *
Àaf
;

386 
xfs_dú2_Àaf_èû_t
 *
…p
;

387 
√edlog
;

388 
√edsˇn
;

389 
xfs_å™s_t
 *
ç
;

390 
xfs_dú2_d©a_‰ì
 *
bf
;

391 
xfs_dú2_Àaf_íåy
 *
íts
;

392 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

394 
	`åa˚_xfs_dú2_block_to_Àaf
(
¨gs
);

396 
dp
 = 
¨gs
->dp;

397 
ç
 = 
¨gs
->
å™s
;

403 i‡((
îr‹
 = 
	`xfs_da_grow_öode
(
¨gs
, &
blkno
))) {

404  
îr‹
;

406 
ldb
 = 
	`xfs_dú2_da_to_db
(
¨gs
->
geo
, 
blkno
);

407 
	`ASSERT
(
ldb
 =
	`xfs_dú2_byã_to_db
(
¨gs
->
geo
, 
XFS_DIR2_LEAF_OFFSET
));

411 
îr‹
 = 
	`xfs_dú3_Àaf_gë_buf
(
¨gs
, 
ldb
, &
lbp
, 
XFS_DIR2_LEAF1_MAGIC
);

412 i‡(
îr‹
)

413  
îr‹
;

415 
Àaf
 = 
lbp
->
b_addr
;

416 
hdr
 = 
dbp
->
b_addr
;

417 
	`xfs_dú3_d©a_check
(
dp
, 
dbp
);

418 
bç
 = 
	`xfs_dú2_block_èû_p
(
¨gs
->
geo
, 
hdr
);

419 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

420 
bf
 = 
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

421 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

426 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

427 
Àafhdr
.
cou¡
 = 
	`be32_to_˝u
(
bç
->count);

428 
Àafhdr
.
°Æe
 = 
	`be32_to_˝u
(
bç
->stale);

429 
dp
->
d_›s
->
	`Àaf_hdr_to_disk
(
Àaf
, &
Àafhdr
);

430 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
lbp
);

436 
	`mem˝y
(
íts
, 
bÕ
, 
	`be32_to_˝u
(
bç
->
cou¡
Ë* (
xfs_dú2_Àaf_íåy_t
));

437 
	`xfs_dú3_Àaf_log_íts
(
¨gs
, 
lbp
, 0, 
Àafhdr
.
cou¡
 - 1);

438 
√edsˇn
 = 0;

439 
√edlog
 = 1;

444 
	`xfs_dú2_d©a_make_‰ì
(
¨gs
, 
dbp
,

445 (
xfs_dú2_d©a_aoff_t
)((*)
bÕ
 - (*)
hdr
),

446 (
xfs_dú2_d©a_aoff_t
)((*)
hdr
 + 
¨gs
->
geo
->
blksize
 -

447 (*)
bÕ
),

448 &
√edlog
, &
√edsˇn
);

452 
dbp
->
b_›s
 = &
xfs_dú3_d©a_buf_›s
;

453 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
dbp
, 
XFS_BLFT_DIR_DATA_BUF
);

454 i‡(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_BLOCK_MAGIC
))

455 
hdr
->
magic
 = 
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
);

457 
hdr
->
magic
 = 
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
);

459 i‡(
√edsˇn
)

460 
	`xfs_dú2_d©a_‰ìsˇn
(
dp
, 
hdr
, &
√edlog
);

464 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
¨gs
->
geo
, 
Àaf
);

465 
…p
->
be°cou¡
 = 
	`˝u_to_be32
(1);

466 
be°•
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
);

467 
be°•
[0] = 
bf
[0].
Àngth
;

471 i‡(
√edlog
)

472 
	`xfs_dú2_d©a_log_hódî
(
¨gs
, 
dbp
);

473 
	`xfs_dú3_Àaf_check
(
dp
, 
lbp
);

474 
	`xfs_dú3_d©a_check
(
dp
, 
dbp
);

475 
	`xfs_dú3_Àaf_log_be°s
(
¨gs
, 
lbp
, 0, 0);

477 
	}
}

479 
STATIC
 

480 
	$xfs_dú3_Àaf_föd_°Æe
(

481 
xfs_dú3_i˛óf_hdr
 *
Àafhdr
,

482 
xfs_dú2_Àaf_íåy
 *
íts
,

483 
ödex
,

484 *
low°Æe
,

485 *
high°Æe
)

490 *
low°Æe
 = 
ödex
 - 1; *lowstale >= 0; --*lowstale) {

491 i‡(
íts
[*
low°Æe
].
addªss
 ==

492 
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
))

501 *
high°Æe
 = 
ödex
; *high°Æê< 
Àafhdr
->
cou¡
; ++*highstale) {

502 i‡(
íts
[*
high°Æe
].
addªss
 ==

503 
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
))

505 i‡(*
low°Æe
 >0 && 
ödex
 - *low°Æê<*
high°Æe
 - index)

508 
	}
}

510 
xfs_dú2_Àaf_íåy
 *

511 
	$xfs_dú3_Àaf_föd_íåy
(

512 
xfs_dú3_i˛óf_hdr
 *
Àafhdr
,

513 
xfs_dú2_Àaf_íåy
 *
íts
,

514 
ödex
,

515 
com∑˘
,

516 
low°Æe
,

517 
high°Æe
,

518 *
lÊoglow
,

519 *
lÊoghigh
)

521 i‡(!
Àafhdr
->
°Æe
) {

522 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

529 
Àp
 = &
íts
[
ödex
];

530 i‡(
ödex
 < 
Àafhdr
->
cou¡
)

531 
	`memmove
(
Àp
 + 1,Üep,

532 (
Àafhdr
->
cou¡
 - 
ödex
Ë* (*
Àp
));

537 *
lÊoglow
 = 
ödex
;

538 *
lÊoghigh
 = 
Àafhdr
->
cou¡
++;

539  
Àp
;

551 i‡(
com∑˘
 == 0)

552 
	`xfs_dú3_Àaf_föd_°Æe
(
Àafhdr
, 
íts
, 
ödex
,

553 &
low°Æe
, &
high°Æe
);

558 i‡(
low°Æe
 >= 0 &&

559 (
high°Æe
 =
Àafhdr
->
cou¡
 ||

560 
ödex
 - 
low°Æe
 - 1 < 
high°Æe
 - index)) {

561 
	`ASSERT
(
ödex
 - 
low°Æe
 - 1 >= 0);

562 
	`ASSERT
(
íts
[
low°Æe
].
addªss
 ==

563 
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
));

569 i‡(
ödex
 - 
low°Æe
 - 1 > 0) {

570 
	`memmove
(&
íts
[
low°Æe
], &ents[lowstale + 1],

571 (
ödex
 - 
low°Æe
 - 1) *

572 (
xfs_dú2_Àaf_íåy_t
));

574 *
lÊoglow
 = 
	`MIN
(
low°Æe
, *lfloglow);

575 *
lÊoghigh
 = 
	`MAX
(
ödex
 - 1, *lfloghigh);

576 
Àafhdr
->
°Æe
--;

577  &
íts
[
ödex
 - 1];

583 
	`ASSERT
(
high°Æe
 - 
ödex
 >= 0);

584 
	`ASSERT
(
íts
[
high°Æe
].
addªss
 =
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
));

590 i‡(
high°Æe
 - 
ödex
 > 0) {

591 
	`memmove
(&
íts
[
ödex
 + 1], &ents[index],

592 (
high°Æe
 - 
ödex
Ë* (
xfs_dú2_Àaf_íåy_t
));

594 *
lÊoglow
 = 
	`MIN
(
ödex
, *lfloglow);

595 *
lÊoghigh
 = 
	`MAX
(
high°Æe
, *lfloghigh);

596 
Àafhdr
->
°Æe
--;

597  &
íts
[
ödex
];

598 
	}
}

604 
	$xfs_dú2_Àaf_add«me
(

605 
xfs_da_¨gs_t
 *
¨gs
)

607 
__be16
 *
be°•
;

608 
com∑˘
;

609 
xfs_dú2_d©a_hdr_t
 *
hdr
;

610 
xfs_buf
 *
dbp
;

611 
xfs_dú2_d©a_íåy_t
 *
dï
;

612 
xfs_öode_t
 *
dp
;

613 
xfs_dú2_d©a_unu£d_t
 *
dup
;

614 
îr‹
;

615 
grown
;

616 
high°Æe
;

617 
i
;

618 
ödex
;

619 
xfs_buf
 *
lbp
;

620 
xfs_dú2_Àaf_t
 *
Àaf
;

621 
Àngth
;

622 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

623 
lÊoglow
;

624 
lÊoghigh
;

625 
low°Æe
;

626 
xfs_dú2_Àaf_èû_t
 *
…p
;

627 
√edbyãs
;

628 
√edlog
;

629 
√edsˇn
;

630 
__be16
 *
ègp
;

631 
xfs_å™s_t
 *
ç
;

632 
xfs_dú2_db_t
 
u£_block
;

633 
xfs_dú2_d©a_‰ì
 *
bf
;

634 
xfs_dú2_Àaf_íåy
 *
íts
;

635 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

637 
	`åa˚_xfs_dú2_Àaf_add«me
(
¨gs
);

639 
dp
 = 
¨gs
->dp;

640 
ç
 = 
¨gs
->
å™s
;

642 
îr‹
 = 
	`xfs_dú3_Àaf_ªad
(
ç
, 
dp
, 
¨gs
->
geo
->
Àafblk
, -1, &
lbp
);

643 i‡(
îr‹
)

644  
îr‹
;

652 
ödex
 = 
	`xfs_dú2_Àaf_£¨ch_hash
(
¨gs
, 
lbp
);

653 
Àaf
 = 
lbp
->
b_addr
;

654 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
¨gs
->
geo
, 
Àaf
);

655 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

656 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

657 
be°•
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
);

658 
Àngth
 = 
dp
->
d_›s
->
	`d©a_ítsize
(
¨gs
->
«mñí
);

666 
u£_block
 = -1, 
Àp
 = &
íts
[
ödex
];

667 
ödex
 < 
Àafhdr
.
cou¡
 && 
	`be32_to_˝u
(
Àp
->
hashvÆ
Ë=
¨gs
->hashval;

668 
ödex
++, 
Àp
++) {

669 i‡(
	`be32_to_˝u
(
Àp
->
addªss
Ë=
XFS_DIR2_NULL_DATAPTR
)

671 
i
 = 
	`xfs_dú2_d©≠å_to_db
(
¨gs
->
geo
, 
	`be32_to_˝u
(
Àp
->
addªss
));

672 
	`ASSERT
(
i
 < 
	`be32_to_˝u
(
…p
->
be°cou¡
));

673 
	`ASSERT
(
be°•
[
i
] !
	`˝u_to_be16
(
NULLDATAOFF
));

674 i‡(
	`be16_to_˝u
(
be°•
[
i
]Ë>
Àngth
) {

675 
u£_block
 = 
i
;

682 i‡(
u£_block
 == -1) {

683 
i
 = 0; i < 
	`be32_to_˝u
(
…p
->
be°cou¡
); i++) {

687 i‡(
be°•
[
i
] =
	`˝u_to_be16
(
NULLDATAOFF
) &&

688 
u£_block
 == -1)

689 
u£_block
 = 
i
;

690 i‡(
	`be16_to_˝u
(
be°•
[
i
]Ë>
Àngth
) {

691 
u£_block
 = 
i
;

699 
√edbyãs
 = 0;

700 i‡(!
Àafhdr
.
°Æe
)

701 
√edbyãs
 +(
xfs_dú2_Àaf_íåy_t
);

702 i‡(
u£_block
 == -1)

703 
√edbyãs
 +(
xfs_dú2_d©a_off_t
);

709 i‡(
u£_block
 !-1 && 
be°•
[u£_block] =
	`˝u_to_be16
(
NULLDATAOFF
))

710 
u£_block
 = -1;

715 i‡((*)
be°•
 - (*)&
íts
[
Àafhdr
.
cou¡
] < 
√edbyãs
 &&

716 
Àafhdr
.
°Æe
 > 1)

717 
com∑˘
 = 1;

723 i‡((*)
be°•
 - (*)&
íts
[
Àafhdr
.
cou¡
] < 
√edbyãs
) {

727 i‡((
¨gs
->
›_Êags
 & 
XFS_DA_OP_JUSTCHECK
) ||

728 
¨gs
->
tŸÆ
 == 0) {

729 
	`xfs_å™s_bªl£
(
ç
, 
lbp
);

730  -
ENOSPC
;

735 
îr‹
 = 
	`xfs_dú2_Àaf_to_node
(
¨gs
, 
lbp
);

736 i‡(
îr‹
)

737  
îr‹
;

741  
	`xfs_dú2_node_add«me
(
¨gs
);

747 
com∑˘
 = 0;

752 i‡(
¨gs
->
›_Êags
 & 
XFS_DA_OP_JUSTCHECK
) {

753 
	`xfs_å™s_bªl£
(
ç
, 
lbp
);

754  
u£_block
 =-1 ? -
ENOSPC
 : 0;

760 i‡(
¨gs
->
tŸÆ
 =0 && 
u£_block
 == -1) {

761 
	`xfs_å™s_bªl£
(
ç
, 
lbp
);

762  -
ENOSPC
;

770 i‡(
com∑˘
) {

771 
	`xfs_dú3_Àaf_com∑˘_x1
(&
Àafhdr
, 
íts
, &
ödex
, &
low°Æe
,

772 &
high°Æe
, &
lÊoglow
, &
lÊoghigh
);

778 i‡(
Àafhdr
.
°Æe
) {

779 
lÊoglow
 = 
Àafhdr
.
cou¡
;

780 
lÊoghigh
 = -1;

786 i‡(
u£_block
 == -1) {

790 i‡((
îr‹
 = 
	`xfs_dú2_grow_öode
(
¨gs
, 
XFS_DIR2_DATA_SPACE
,

791 &
u£_block
))) {

792 
	`xfs_å™s_bªl£
(
ç
, 
lbp
);

793  
îr‹
;

798 i‡((
îr‹
 = 
	`xfs_dú3_d©a_öô
(
¨gs
, 
u£_block
, &
dbp
))) {

799 
	`xfs_å™s_bªl£
(
ç
, 
lbp
);

800  
îr‹
;

806 i‡(
u£_block
 >
	`be32_to_˝u
(
…p
->
be°cou¡
)) {

807 
be°•
--;

808 
	`memmove
(&
be°•
[0], &bestsp[1],

809 
	`be32_to_˝u
(
…p
->
be°cou¡
Ë* (
be°•
[0]));

810 
	`be32_add_˝u
(&
…p
->
be°cou¡
, 1);

811 
	`xfs_dú3_Àaf_log_èû
(
¨gs
, 
lbp
);

812 
	`xfs_dú3_Àaf_log_be°s
(
¨gs
, 
lbp
, 0,

813 
	`be32_to_˝u
(
…p
->
be°cou¡
) - 1);

819 
	`xfs_dú3_Àaf_log_be°s
(
¨gs
, 
lbp
, 
u£_block
, use_block);

820 
hdr
 = 
dbp
->
b_addr
;

821 
bf
 = 
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

822 
be°•
[
u£_block
] = 
bf
[0].
Àngth
;

823 
grown
 = 1;

829 
îr‹
 = 
	`xfs_dú3_d©a_ªad
(
ç
, 
dp
,

830 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
u£_block
),

831 -1, &
dbp
);

832 i‡(
îr‹
) {

833 
	`xfs_å™s_bªl£
(
ç
, 
lbp
);

834  
îr‹
;

836 
hdr
 = 
dbp
->
b_addr
;

837 
bf
 = 
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

838 
grown
 = 0;

843 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)

844 ((*)
hdr
 + 
	`be16_to_˝u
(
bf
[0].
off£t
));

845 
	`ASSERT
(
	`be16_to_˝u
(
dup
->
Àngth
) >=Üength);

846 
√edsˇn
 = 
√edlog
 = 0;

850 
	`xfs_dú2_d©a_u£_‰ì
(
¨gs
, 
dbp
, 
dup
,

851 (
xfs_dú2_d©a_aoff_t
)((*)
dup
 - (*)
hdr
), 
Àngth
,

852 &
√edlog
, &
√edsˇn
);

856 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

857 
dï
->
öumbî
 = 
	`˝u_to_be64
(
¨gs
->inumber);

858 
dï
->
«mñí
 = 
¨gs
->namelen;

859 
	`mem˝y
(
dï
->
«me
, 
¨gs
->«me, dï->
«mñí
);

860 
dp
->
d_›s
->
	`d©a_put_·y≥
(
dï
, 
¨gs
->
fûëy≥
);

861 
ègp
 = 
dp
->
d_›s
->
	`d©a_íåy_èg_p
(
dï
);

862 *
ègp
 = 
	`˝u_to_be16
((*)
dï
 - (*)
hdr
);

866 i‡(
√edsˇn
)

867 
	`xfs_dú2_d©a_‰ìsˇn
(
dp
, 
hdr
, &
√edlog
);

871 i‡(
√edlog
)

872 
	`xfs_dú2_d©a_log_hódî
(
¨gs
, 
dbp
);

873 
	`xfs_dú2_d©a_log_íåy
(
¨gs
, 
dbp
, 
dï
);

878 i‡(
	`be16_to_˝u
(
be°•
[
u£_block
]Ë!be16_to_˝u(
bf
[0].
Àngth
)) {

879 
be°•
[
u£_block
] = 
bf
[0].
Àngth
;

880 i‡(!
grown
)

881 
	`xfs_dú3_Àaf_log_be°s
(
¨gs
, 
lbp
, 
u£_block
, use_block);

884 
Àp
 = 
	`xfs_dú3_Àaf_föd_íåy
(&
Àafhdr
, 
íts
, 
ödex
, 
com∑˘
, 
low°Æe
,

885 
high°Æe
, &
lÊoglow
, &
lÊoghigh
);

890 
Àp
->
hashvÆ
 = 
	`˝u_to_be32
(
¨gs
->hashval);

891 
Àp
->
addªss
 = 
	`˝u_to_be32
(

892 
	`xfs_dú2_db_off_to_d©≠å
(
¨gs
->
geo
, 
u£_block
,

893 
	`be16_to_˝u
(*
ègp
)));

897 
dp
->
d_›s
->
	`Àaf_hdr_to_disk
(
Àaf
, &
Àafhdr
);

898 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
lbp
);

899 
	`xfs_dú3_Àaf_log_íts
(
¨gs
, 
lbp
, 
lÊoglow
, 
lÊoghigh
);

900 
	`xfs_dú3_Àaf_check
(
dp
, 
lbp
);

901 
	`xfs_dú3_d©a_check
(
dp
, 
dbp
);

903 
	}
}

910 
	$xfs_dú3_Àaf_com∑˘
(

911 
xfs_da_¨gs_t
 *
¨gs
,

912 
xfs_dú3_i˛óf_hdr
 *
Àafhdr
,

913 
xfs_buf
 *
bp
)

915 
‰om
;

916 
xfs_dú2_Àaf_t
 *
Àaf
;

917 
loglow
;

918 
to
;

919 
xfs_dú2_Àaf_íåy
 *
íts
;

920 
xfs_öode
 *
dp
 = 
¨gs
->dp;

922 
Àaf
 = 
bp
->
b_addr
;

923 i‡(!
Àafhdr
->
°Æe
)

929 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

930 
‰om
 = 
to
 = 0, 
loglow
 = -1; from < 
Àafhdr
->
cou¡
; from++) {

931 i‡(
íts
[
‰om
].
addªss
 =
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
))

936 i‡(
‰om
 > 
to
) {

937 i‡(
loglow
 == -1)

938 
loglow
 = 
to
;

939 
íts
[
to
] =É¡s[
‰om
];

941 
to
++;

946 
	`ASSERT
(
Àafhdr
->
°Æe
 =
‰om
 - 
to
);

947 
Àafhdr
->
cou¡
 -Àafhdr->
°Æe
;

948 
Àafhdr
->
°Æe
 = 0;

950 
dp
->
d_›s
->
	`Àaf_hdr_to_disk
(
Àaf
, 
Àafhdr
);

951 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
bp
);

952 i‡(
loglow
 != -1)

953 
	`xfs_dú3_Àaf_log_íts
(
¨gs
, 
bp
, 
loglow
, 
to
 - 1);

954 
	}
}

965 
	$xfs_dú3_Àaf_com∑˘_x1
(

966 
xfs_dú3_i˛óf_hdr
 *
Àafhdr
,

967 
xfs_dú2_Àaf_íåy
 *
íts
,

968 *
ödexp
,

969 *
low°Æï
,

970 *
high°Æï
,

971 *
lowlogp
,

972 *
highlogp
)

974 
‰om
;

975 
high°Æe
;

976 
ödex
;

977 
kìp°Æe
;

978 
low°Æe
;

979 
√wödex
=0;

980 
to
;

982 
	`ASSERT
(
Àafhdr
->
°Æe
 > 1);

983 
ödex
 = *
ödexp
;

985 
	`xfs_dú3_Àaf_föd_°Æe
(
Àafhdr
, 
íts
, 
ödex
, &
low°Æe
, &
high°Æe
);

990 i‡(
low°Æe
 >= 0 &&

991 (
high°Æe
 =
Àafhdr
->
cou¡
 ||

992 
ödex
 - 
low°Æe
 <
high°Æe
 - index))

993 
kìp°Æe
 = 
low°Æe
;

995 
kìp°Æe
 = 
high°Æe
;

1000 
‰om
 = 
to
 = 0; from < 
Àafhdr
->
cou¡
; from++) {

1004 i‡(
ödex
 =
‰om
)

1005 
√wödex
 = 
to
;

1006 i‡(
‰om
 !
kìp°Æe
 &&

1007 
íts
[
‰om
].
addªss
 =
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
)) {

1008 i‡(
‰om
 =
to
)

1009 *
lowlogp
 = 
to
;

1015 i‡(
‰om
 =
kìp°Æe
)

1016 
low°Æe
 = 
high°Æe
 = 
to
;

1020 i‡(
‰om
 > 
to
)

1021 
íts
[
to
] =É¡s[
‰om
];

1022 
to
++;

1024 
	`ASSERT
(
‰om
 > 
to
);

1029 i‡(
ödex
 =
‰om
)

1030 
√wödex
 = 
to
;

1031 *
ödexp
 = 
√wödex
;

1035 
Àafhdr
->
cou¡
 -
‰om
 - 
to
;

1036 
Àafhdr
->
°Æe
 = 1;

1041 i‡(
low°Æe
 >
√wödex
)

1042 
low°Æe
 = -1;

1044 
high°Æe
 = 
Àafhdr
->
cou¡
;

1045 *
highlogp
 = 
Àafhdr
->
cou¡
 - 1;

1046 *
low°Æï
 = 
low°Æe
;

1047 *
high°Æï
 = 
high°Æe
;

1048 
	}
}

1054 
	$xfs_dú3_Àaf_log_be°s
(

1055 
xfs_da_¨gs
 *
¨gs
,

1056 
xfs_buf
 *
bp
,

1057 
fú°
,

1058 
œ°
)

1060 
__be16
 *
fú°b
;

1061 
__be16
 *
œ°b
;

1062 
xfs_dú2_Àaf
 *
Àaf
 = 
bp
->
b_addr
;

1063 
xfs_dú2_Àaf_èû_t
 *
…p
;

1065 
	`ASSERT
(
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAF1_MAGIC
) ||

1066 
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAF1_MAGIC
));

1068 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
¨gs
->
geo
, 
Àaf
);

1069 
fú°b
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
Ë+ 
fú°
;

1070 
œ°b
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
Ë+ 
œ°
;

1071 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

1072 (
uöt
)((*)
fú°b
 - (*)
Àaf
),

1073 (
uöt
)((*)
œ°b
 - (*)
Àaf
 + (*lastb) - 1));

1074 
	}
}

1080 
	$xfs_dú3_Àaf_log_íts
(

1081 
xfs_da_¨gs
 *
¨gs
,

1082 
xfs_buf
 *
bp
,

1083 
fú°
,

1084 
œ°
)

1086 
xfs_dú2_Àaf_íåy_t
 *
fú°Àp
;

1087 
xfs_dú2_Àaf_íåy_t
 *
œ°Àp
;

1088 
xfs_dú2_Àaf
 *
Àaf
 = 
bp
->
b_addr
;

1089 
xfs_dú2_Àaf_íåy
 *
íts
;

1091 
	`ASSERT
(
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAF1_MAGIC
) ||

1092 
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAF1_MAGIC
) ||

1093 
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAFN_MAGIC
) ||

1094 
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
));

1096 
íts
 = 
¨gs
->
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

1097 
fú°Àp
 = &
íts
[
fú°
];

1098 
œ°Àp
 = &
íts
[
œ°
];

1099 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

1100 (
uöt
)((*)
fú°Àp
 - (*)
Àaf
),

1101 (
uöt
)((*)
œ°Àp
 - (*)
Àaf
 + (*lastlep) - 1));

1102 
	}
}

1108 
	$xfs_dú3_Àaf_log_hódî
(

1109 
xfs_da_¨gs
 *
¨gs
,

1110 
xfs_buf
 *
bp
)

1112 
xfs_dú2_Àaf
 *
Àaf
 = 
bp
->
b_addr
;

1114 
	`ASSERT
(
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAF1_MAGIC
) ||

1115 
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAF1_MAGIC
) ||

1116 
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAFN_MAGIC
) ||

1117 
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
));

1119 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

1120 (
uöt
)((*)&
Àaf
->
hdr
 - (*)leaf),

1121 
¨gs
->
dp
->
d_›s
->
Àaf_hdr_size
 - 1);

1122 
	}
}

1127 
STATIC
 

1128 
	$xfs_dú3_Àaf_log_èû
(

1129 
xfs_da_¨gs
 *
¨gs
,

1130 
xfs_buf
 *
bp
)

1132 
xfs_dú2_Àaf
 *
Àaf
 = 
bp
->
b_addr
;

1133 
xfs_dú2_Àaf_èû_t
 *
…p
;

1135 
	`ASSERT
(
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAF1_MAGIC
) ||

1136 
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAF1_MAGIC
) ||

1137 
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAFN_MAGIC
) ||

1138 
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
));

1140 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
¨gs
->
geo
, 
Àaf
);

1141 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
, (
uöt
)((*)
…p
 - (*)
Àaf
),

1142 (
uöt
)(
¨gs
->
geo
->
blksize
 - 1));

1143 
	}
}

1151 
	$xfs_dú2_Àaf_lookup
(

1152 
xfs_da_¨gs_t
 *
¨gs
)

1154 
xfs_buf
 *
dbp
;

1155 
xfs_dú2_d©a_íåy_t
 *
dï
;

1156 
xfs_öode_t
 *
dp
;

1157 
îr‹
;

1158 
ödex
;

1159 
xfs_buf
 *
lbp
;

1160 
xfs_dú2_Àaf_t
 *
Àaf
;

1161 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

1162 
xfs_å™s_t
 *
ç
;

1163 
xfs_dú2_Àaf_íåy
 *
íts
;

1165 
	`åa˚_xfs_dú2_Àaf_lookup
(
¨gs
);

1170 i‡((
îr‹
 = 
	`xfs_dú2_Àaf_lookup_öt
(
¨gs
, &
lbp
, &
ödex
, &
dbp
))) {

1171  
îr‹
;

1173 
ç
 = 
¨gs
->
å™s
;

1174 
dp
 = 
¨gs
->dp;

1175 
	`xfs_dú3_Àaf_check
(
dp
, 
lbp
);

1176 
Àaf
 = 
lbp
->
b_addr
;

1177 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

1181 
Àp
 = &
íts
[
ödex
];

1186 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)

1187 ((*)
dbp
->
b_addr
 +

1188 
	`xfs_dú2_d©≠å_to_off
(
¨gs
->
geo
, 
	`be32_to_˝u
(
Àp
->
addªss
)));

1192 
¨gs
->
öumbî
 = 
	`be64_to_˝u
(
dï
->inumber);

1193 
¨gs
->
fûëy≥
 = 
dp
->
d_›s
->
	`d©a_gë_·y≥
(
dï
);

1194 
îr‹
 = 
	`xfs_dú_cûookup_ªsu…
(
¨gs
, 
dï
->
«me
, dï->
«mñí
);

1195 
	`xfs_å™s_bªl£
(
ç
, 
dbp
);

1196 
	`xfs_å™s_bªl£
(
ç
, 
lbp
);

1197  
îr‹
;

1198 
	}
}

1207 
	$xfs_dú2_Àaf_lookup_öt
(

1208 
xfs_da_¨gs_t
 *
¨gs
,

1209 
xfs_buf
 **
lbµ
,

1210 *
ödexp
,

1211 
xfs_buf
 **
dbµ
)

1213 
xfs_dú2_db_t
 
curdb
 = -1;

1214 
xfs_buf
 *
dbp
 = 
NULL
;

1215 
xfs_dú2_d©a_íåy_t
 *
dï
;

1216 
xfs_öode_t
 *
dp
;

1217 
îr‹
;

1218 
ödex
;

1219 
xfs_buf
 *
lbp
;

1220 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

1221 
xfs_dú2_Àaf_t
 *
Àaf
;

1222 
xfs_mou¡_t
 *
mp
;

1223 
xfs_dú2_db_t
 
√wdb
;

1224 
xfs_å™s_t
 *
ç
;

1225 
xfs_dú2_db_t
 
cidb
 = -1;

1226 
xfs_dacmp
 
cmp
;

1227 
xfs_dú2_Àaf_íåy
 *
íts
;

1228 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

1230 
dp
 = 
¨gs
->dp;

1231 
ç
 = 
¨gs
->
å™s
;

1232 
mp
 = 
dp
->
i_mou¡
;

1234 
îr‹
 = 
	`xfs_dú3_Àaf_ªad
(
ç
, 
dp
, 
¨gs
->
geo
->
Àafblk
, -1, &
lbp
);

1235 i‡(
îr‹
)

1236  
îr‹
;

1238 *
lbµ
 = 
lbp
;

1239 
Àaf
 = 
lbp
->
b_addr
;

1240 
	`xfs_dú3_Àaf_check
(
dp
, 
lbp
);

1241 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

1242 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

1247 
ödex
 = 
	`xfs_dú2_Àaf_£¨ch_hash
(
¨gs
, 
lbp
);

1252 
Àp
 = &
íts
[
ödex
];

1253 
ödex
 < 
Àafhdr
.
cou¡
 && 
	`be32_to_˝u
(
Àp
->
hashvÆ
Ë=
¨gs
->hashval;

1254 
Àp
++, 
ödex
++) {

1258 i‡(
	`be32_to_˝u
(
Àp
->
addªss
Ë=
XFS_DIR2_NULL_DATAPTR
)

1263 
√wdb
 = 
	`xfs_dú2_d©≠å_to_db
(
¨gs
->
geo
,

1264 
	`be32_to_˝u
(
Àp
->
addªss
));

1269 i‡(
√wdb
 !
curdb
) {

1270 i‡(
dbp
)

1271 
	`xfs_å™s_bªl£
(
ç
, 
dbp
);

1272 
îr‹
 = 
	`xfs_dú3_d©a_ªad
(
ç
, 
dp
,

1273 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
√wdb
),

1274 -1, &
dbp
);

1275 i‡(
îr‹
) {

1276 
	`xfs_å™s_bªl£
(
ç
, 
lbp
);

1277  
îr‹
;

1279 
curdb
 = 
√wdb
;

1284 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)((*)
dbp
->
b_addr
 +

1285 
	`xfs_dú2_d©≠å_to_off
(
¨gs
->
geo
,

1286 
	`be32_to_˝u
(
Àp
->
addªss
)));

1292 
cmp
 = 
mp
->
m_dú«me›s
->
	`com≤ame
(
¨gs
, 
dï
->
«me
, dï->
«mñí
);

1293 i‡(
cmp
 !
XFS_CMP_DIFFERENT
 && cm∞!
¨gs
->
cm¥esu…
) {

1294 
¨gs
->
cm¥esu…
 = 
cmp
;

1295 *
ödexp
 = 
ödex
;

1297 i‡(
cmp
 =
XFS_CMP_EXACT
) {

1298 *
dbµ
 = 
dbp
;

1301 
cidb
 = 
curdb
;

1304 
	`ASSERT
(
¨gs
->
›_Êags
 & 
XFS_DA_OP_OKNOENT
);

1310 i‡(
¨gs
->
cm¥esu…
 =
XFS_CMP_CASE
) {

1311 
	`ASSERT
(
cidb
 != -1);

1312 i‡(
cidb
 !
curdb
) {

1313 
	`xfs_å™s_bªl£
(
ç
, 
dbp
);

1314 
îr‹
 = 
	`xfs_dú3_d©a_ªad
(
ç
, 
dp
,

1315 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
cidb
),

1316 -1, &
dbp
);

1317 i‡(
îr‹
) {

1318 
	`xfs_å™s_bªl£
(
ç
, 
lbp
);

1319  
îr‹
;

1322 *
dbµ
 = 
dbp
;

1328 
	`ASSERT
(
cidb
 == -1);

1329 i‡(
dbp
)

1330 
	`xfs_å™s_bªl£
(
ç
, 
dbp
);

1331 
	`xfs_å™s_bªl£
(
ç
, 
lbp
);

1332  -
ENOENT
;

1333 
	}
}

1339 
	$xfs_dú2_Àaf_ªmovíame
(

1340 
xfs_da_¨gs_t
 *
¨gs
)

1342 
__be16
 *
be°•
;

1343 
xfs_dú2_d©a_hdr_t
 *
hdr
;

1344 
xfs_dú2_db_t
 
db
;

1345 
xfs_buf
 *
dbp
;

1346 
xfs_dú2_d©a_íåy_t
 *
dï
;

1347 
xfs_öode_t
 *
dp
;

1348 
îr‹
;

1349 
xfs_dú2_db_t
 
i
;

1350 
ödex
;

1351 
xfs_buf
 *
lbp
;

1352 
xfs_dú2_Àaf_t
 *
Àaf
;

1353 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

1354 
xfs_dú2_Àaf_èû_t
 *
…p
;

1355 
√edlog
;

1356 
√edsˇn
;

1357 
xfs_dú2_d©a_off_t
 
ﬁdbe°
;

1358 
xfs_dú2_d©a_‰ì
 *
bf
;

1359 
xfs_dú2_Àaf_íåy
 *
íts
;

1360 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

1362 
	`åa˚_xfs_dú2_Àaf_ªmovíame
(
¨gs
);

1367 i‡((
îr‹
 = 
	`xfs_dú2_Àaf_lookup_öt
(
¨gs
, &
lbp
, &
ödex
, &
dbp
))) {

1368  
îr‹
;

1370 
dp
 = 
¨gs
->dp;

1371 
Àaf
 = 
lbp
->
b_addr
;

1372 
hdr
 = 
dbp
->
b_addr
;

1373 
	`xfs_dú3_d©a_check
(
dp
, 
dbp
);

1374 
bf
 = 
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

1375 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

1376 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

1380 
Àp
 = &
íts
[
ödex
];

1381 
db
 = 
	`xfs_dú2_d©≠å_to_db
(
¨gs
->
geo
, 
	`be32_to_˝u
(
Àp
->
addªss
));

1382 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)((*)
hdr
 +

1383 
	`xfs_dú2_d©≠å_to_off
(
¨gs
->
geo
, 
	`be32_to_˝u
(
Àp
->
addªss
)));

1384 
√edsˇn
 = 
√edlog
 = 0;

1385 
ﬁdbe°
 = 
	`be16_to_˝u
(
bf
[0].
Àngth
);

1386 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
¨gs
->
geo
, 
Àaf
);

1387 
be°•
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
);

1388 
	`ASSERT
(
	`be16_to_˝u
(
be°•
[
db
]Ë=
ﬁdbe°
);

1392 
	`xfs_dú2_d©a_make_‰ì
(
¨gs
, 
dbp
,

1393 (
xfs_dú2_d©a_aoff_t
)((*)
dï
 - (*)
hdr
),

1394 
dp
->
d_›s
->
	`d©a_ítsize
(
dï
->
«mñí
), &
√edlog
, &
√edsˇn
);

1398 
Àafhdr
.
°Æe
++;

1399 
dp
->
d_›s
->
	`Àaf_hdr_to_disk
(
Àaf
, &
Àafhdr
);

1400 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
lbp
);

1402 
Àp
->
addªss
 = 
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
);

1403 
	`xfs_dú3_Àaf_log_íts
(
¨gs
, 
lbp
, 
ödex
, index);

1409 i‡(
√edsˇn
)

1410 
	`xfs_dú2_d©a_‰ìsˇn
(
dp
, 
hdr
, &
√edlog
);

1411 i‡(
√edlog
)

1412 
	`xfs_dú2_d©a_log_hódî
(
¨gs
, 
dbp
);

1417 i‡(
	`be16_to_˝u
(
bf
[0].
Àngth
Ë!
ﬁdbe°
) {

1418 
be°•
[
db
] = 
bf
[0].
Àngth
;

1419 
	`xfs_dú3_Àaf_log_be°s
(
¨gs
, 
lbp
, 
db
, db);

1421 
	`xfs_dú3_d©a_check
(
dp
, 
dbp
);

1425 i‡(
	`be16_to_˝u
(
bf
[0].
Àngth
) ==

1426 
¨gs
->
geo
->
blksize
 - 
dp
->
d_›s
->
d©a_íåy_off£t
) {

1427 
	`ASSERT
(
db
 !
¨gs
->
geo
->
d©ablk
);

1428 i‡((
îr‹
 = 
	`xfs_dú2_shrök_öode
(
¨gs
, 
db
, 
dbp
))) {

1435 i‡(
îr‹
 =-
ENOSPC
 && 
¨gs
->
tŸÆ
 == 0)

1436 
îr‹
 = 0;

1437 
	`xfs_dú3_Àaf_check
(
dp
, 
lbp
);

1438  
îr‹
;

1440 
dbp
 = 
NULL
;

1445 i‡(
db
 =
	`be32_to_˝u
(
…p
->
be°cou¡
) - 1) {

1449 
i
 = 
db
 - 1; i > 0; i--) {

1450 i‡(
be°•
[
i
] !
	`˝u_to_be16
(
NULLDATAOFF
))

1457 
	`memmove
(&
be°•
[
db
 - 
i
], bestsp,

1458 (
	`be32_to_˝u
(
…p
->
be°cou¡
Ë- (
db
 - 
i
)Ë* (*
be°•
));

1459 
	`be32_add_˝u
(&
…p
->
be°cou¡
, -(
db
 - 
i
));

1460 
	`xfs_dú3_Àaf_log_èû
(
¨gs
, 
lbp
);

1461 
	`xfs_dú3_Àaf_log_be°s
(
¨gs
, 
lbp
, 0,

1462 
	`be32_to_˝u
(
…p
->
be°cou¡
) - 1);

1464 
be°•
[
db
] = 
	`˝u_to_be16
(
NULLDATAOFF
);

1469 i‡(
db
 !
¨gs
->
geo
->
d©ablk
)

1470 
dbp
 = 
NULL
;

1472 
	`xfs_dú3_Àaf_check
(
dp
, 
lbp
);

1476  
	`xfs_dú2_Àaf_to_block
(
¨gs
, 
lbp
, 
dbp
);

1477 
	}
}

1483 
	$xfs_dú2_Àaf_ª∂a˚
(

1484 
xfs_da_¨gs_t
 *
¨gs
)

1486 
xfs_buf
 *
dbp
;

1487 
xfs_dú2_d©a_íåy_t
 *
dï
;

1488 
xfs_öode_t
 *
dp
;

1489 
îr‹
;

1490 
ödex
;

1491 
xfs_buf
 *
lbp
;

1492 
xfs_dú2_Àaf_t
 *
Àaf
;

1493 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

1494 
xfs_å™s_t
 *
ç
;

1495 
xfs_dú2_Àaf_íåy
 *
íts
;

1497 
	`åa˚_xfs_dú2_Àaf_ª∂a˚
(
¨gs
);

1502 i‡((
îr‹
 = 
	`xfs_dú2_Àaf_lookup_öt
(
¨gs
, &
lbp
, &
ödex
, &
dbp
))) {

1503  
îr‹
;

1505 
dp
 = 
¨gs
->dp;

1506 
Àaf
 = 
lbp
->
b_addr
;

1507 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

1511 
Àp
 = &
íts
[
ödex
];

1515 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)

1516 ((*)
dbp
->
b_addr
 +

1517 
	`xfs_dú2_d©≠å_to_off
(
¨gs
->
geo
, 
	`be32_to_˝u
(
Àp
->
addªss
)));

1518 
	`ASSERT
(
¨gs
->
öumbî
 !
	`be64_to_˝u
(
dï
->inumber));

1522 
dï
->
öumbî
 = 
	`˝u_to_be64
(
¨gs
->inumber);

1523 
dp
->
d_›s
->
	`d©a_put_·y≥
(
dï
, 
¨gs
->
fûëy≥
);

1524 
ç
 = 
¨gs
->
å™s
;

1525 
	`xfs_dú2_d©a_log_íåy
(
¨gs
, 
dbp
, 
dï
);

1526 
	`xfs_dú3_Àaf_check
(
dp
, 
lbp
);

1527 
	`xfs_å™s_bªl£
(
ç
, 
lbp
);

1529 
	}
}

1537 
	$xfs_dú2_Àaf_£¨ch_hash
(

1538 
xfs_da_¨gs_t
 *
¨gs
,

1539 
xfs_buf
 *
lbp
)

1541 
xfs_dahash_t
 
hash
=0;

1542 
xfs_dahash_t
 
hashw™t
;

1543 
high
;

1544 
low
;

1545 
xfs_dú2_Àaf_t
 *
Àaf
;

1546 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

1547 
mid
=0;

1548 
xfs_dú2_Àaf_íåy
 *
íts
;

1549 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

1551 
Àaf
 = 
lbp
->
b_addr
;

1552 
íts
 = 
¨gs
->
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

1553 
¨gs
->
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

1559 
Àp
 = 
íts
, 
low
 = 0, 
high
 = 
Àafhdr
.
cou¡
 - 1,

1560 
hashw™t
 = 
¨gs
->
hashvÆ
;

1561 
low
 <
high
; ) {

1562 
mid
 = (
low
 + 
high
) >> 1;

1563 i‡((
hash
 = 
	`be32_to_˝u
(
Àp
[
mid
].
hashvÆ
)Ë=
hashw™t
)

1565 i‡(
hash
 < 
hashw™t
)

1566 
low
 = 
mid
 + 1;

1568 
high
 = 
mid
 - 1;

1573 i‡(
hash
 =
hashw™t
) {

1574 
mid
 > 0 && 
	`be32_to_˝u
(
Àp
[mid - 1].
hashvÆ
Ë=
hashw™t
) {

1575 
mid
--;

1581 i‡(
hash
 < 
hashw™t
)

1582 
mid
++;

1583  
mid
;

1584 
	}
}

1591 
	$xfs_dú2_Àaf_åim_d©a
(

1592 
xfs_da_¨gs_t
 *
¨gs
,

1593 
xfs_buf
 *
lbp
,

1594 
xfs_dú2_db_t
 
db
)

1596 
__be16
 *
be°•
;

1597 
xfs_buf
 *
dbp
;

1598 
xfs_öode_t
 *
dp
;

1599 
îr‹
;

1600 
xfs_dú2_Àaf_t
 *
Àaf
;

1601 
xfs_dú2_Àaf_èû_t
 *
…p
;

1602 
xfs_å™s_t
 *
ç
;

1604 
dp
 = 
¨gs
->dp;

1605 
ç
 = 
¨gs
->
å™s
;

1609 
îr‹
 = 
	`xfs_dú3_d©a_ªad
(
ç
, 
dp
, 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
db
),

1610 -1, &
dbp
);

1611 i‡(
îr‹
)

1612  
îr‹
;

1614 
Àaf
 = 
lbp
->
b_addr
;

1615 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
¨gs
->
geo
, 
Àaf
);

1617 #ifde‡
DEBUG


1619 
xfs_dú2_d©a_hdr
 *
hdr
 = 
dbp
->
b_addr
;

1620 
xfs_dú2_d©a_‰ì
 *
bf
 = 
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

1622 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

1623 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
));

1624 
	`ASSERT
(
	`be16_to_˝u
(
bf
[0].
Àngth
) ==

1625 
¨gs
->
geo
->
blksize
 - 
dp
->
d_›s
->
d©a_íåy_off£t
);

1626 
	`ASSERT
(
db
 =
	`be32_to_˝u
(
…p
->
be°cou¡
) - 1);

1633 i‡((
îr‹
 = 
	`xfs_dú2_shrök_öode
(
¨gs
, 
db
, 
dbp
))) {

1634 
	`ASSERT
(
îr‹
 !-
ENOSPC
);

1635 
	`xfs_å™s_bªl£
(
ç
, 
dbp
);

1636  
îr‹
;

1641 
be°•
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
);

1642 
	`be32_add_˝u
(&
…p
->
be°cou¡
, -1);

1643 
	`memmove
(&
be°•
[1], &be°•[0], 
	`be32_to_˝u
(
…p
->
be°cou¡
) * (*bestsp));

1644 
	`xfs_dú3_Àaf_log_èû
(
¨gs
, 
lbp
);

1645 
	`xfs_dú3_Àaf_log_be°s
(
¨gs
, 
lbp
, 0, 
	`be32_to_˝u
(
…p
->
be°cou¡
) - 1);

1647 
	}
}

1649 
ölöe
 
size_t


1650 
	$xfs_dú3_Àaf_size
(

1651 
xfs_dú3_i˛óf_hdr
 *
hdr
,

1652 
cou¡s
)

1654 
íåõs
;

1655 
hdrsize
;

1657 
íåõs
 = 
hdr
->
cou¡
 - hdr->
°Æe
;

1658 i‡(
hdr
->
magic
 =
XFS_DIR2_LEAF1_MAGIC
 ||

1659 
hdr
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
)

1660 
hdrsize
 = (
xfs_dú2_Àaf_hdr
);

1662 
hdrsize
 = (
xfs_dú3_Àaf_hdr
);

1664  
hdrsize
 + 
íåõs
 * (
xfs_dú2_Àaf_íåy_t
)

1665 + 
cou¡s
 * (
xfs_dú2_d©a_off_t
)

1666 + (
xfs_dú2_Àaf_èû_t
);

1667 
	}
}

1675 
	$xfs_dú2_node_to_Àaf
(

1676 
xfs_da_°©e_t
 *
°©e
)

1678 
xfs_da_¨gs_t
 *
¨gs
;

1679 
xfs_öode_t
 *
dp
;

1680 
îr‹
;

1681 
xfs_buf
 *
fbp
;

1682 
xfs_fûeoff_t
 
fo
;

1683 
xfs_dú2_‰ì_t
 *
‰ì
;

1684 
xfs_buf
 *
lbp
;

1685 
xfs_dú2_Àaf_èû_t
 *
…p
;

1686 
xfs_dú2_Àaf_t
 *
Àaf
;

1687 
xfs_mou¡_t
 *
mp
;

1688 
rvÆ
;

1689 
xfs_å™s_t
 *
ç
;

1690 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

1691 
xfs_dú3_ic‰ì_hdr
 
‰ìhdr
;

1697 i‡(
°©e
->
∑th
.
a˘ive
 > 1)

1699 
¨gs
 = 
°©e
->args;

1701 
	`åa˚_xfs_dú2_node_to_Àaf
(
¨gs
);

1703 
mp
 = 
°©e
->mp;

1704 
dp
 = 
¨gs
->dp;

1705 
ç
 = 
¨gs
->
å™s
;

1709 i‡((
îr‹
 = 
	`xfs_bm≠_œ°_off£t
(
dp
, &
fo
, 
XFS_DATA_FORK
))) {

1710  
îr‹
;

1712 
fo
 -
¨gs
->
geo
->
fsbcou¡
;

1719 
fo
 > 
¨gs
->
geo
->
‰ìblk
) {

1720 i‡((
îr‹
 = 
	`xfs_dú2_node_åim_‰ì
(
¨gs
, 
fo
, &
rvÆ
))) {

1721  
îr‹
;

1723 i‡(
rvÆ
)

1724 
fo
 -
¨gs
->
geo
->
fsbcou¡
;

1731 i‡((
îr‹
 = 
	`xfs_bm≠_œ°_bef‹e
(
ç
, 
dp
, &
fo
, 
XFS_DATA_FORK
))) {

1732  
îr‹
;

1737 i‡(
	`XFS_FSB_TO_B
(
mp
, 
fo
Ë> 
XFS_DIR2_LEAF_OFFSET
 + 
¨gs
->
geo
->
blksize
)

1739 
lbp
 = 
°©e
->
∑th
.
blk
[0].
bp
;

1740 
Àaf
 = 
lbp
->
b_addr
;

1741 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

1743 
	`ASSERT
(
Àafhdr
.
magic
 =
XFS_DIR2_LEAFN_MAGIC
 ||

1744 
Àafhdr
.
magic
 =
XFS_DIR3_LEAFN_MAGIC
);

1749 
îr‹
 = 
	`xfs_dú2_‰ì_ªad
(
ç
, 
dp
, 
¨gs
->
geo
->
‰ìblk
, &
fbp
);

1750 i‡(
îr‹
)

1751  
îr‹
;

1752 
‰ì
 = 
fbp
->
b_addr
;

1753 
dp
->
d_›s
->
	`‰ì_hdr_‰om_disk
(&
‰ìhdr
, 
‰ì
);

1755 
	`ASSERT
(!
‰ìhdr
.
fú°db
);

1761 i‡(
	`xfs_dú3_Àaf_size
(&
Àafhdr
, 
‰ìhdr
.
nvÆid
Ë> 
¨gs
->
geo
->
blksize
) {

1762 
	`xfs_å™s_bªl£
(
ç
, 
fbp
);

1769 i‡(
Àafhdr
.
°Æe
)

1770 
	`xfs_dú3_Àaf_com∑˘
(
¨gs
, &
Àafhdr
, 
lbp
);

1772 
lbp
->
b_›s
 = &
xfs_dú3_Àaf1_buf_›s
;

1773 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
lbp
, 
XFS_BLFT_DIR_LEAF1_BUF
);

1774 
Àafhdr
.
magic
 = (Àafhdr.magi¯=
XFS_DIR2_LEAFN_MAGIC
)

1775 ? 
XFS_DIR2_LEAF1_MAGIC


1776 : 
XFS_DIR3_LEAF1_MAGIC
;

1781 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
¨gs
->
geo
, 
Àaf
);

1782 
…p
->
be°cou¡
 = 
	`˝u_to_be32
(
‰ìhdr
.
nvÆid
);

1787 
	`mem˝y
(
	`xfs_dú2_Àaf_be°s_p
(
…p
), 
dp
->
d_›s
->
	`‰ì_be°s_p
(
‰ì
),

1788 
‰ìhdr
.
nvÆid
 * (
xfs_dú2_d©a_off_t
));

1790 
dp
->
d_›s
->
	`Àaf_hdr_to_disk
(
Àaf
, &
Àafhdr
);

1791 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
lbp
);

1792 
	`xfs_dú3_Àaf_log_be°s
(
¨gs
, 
lbp
, 0, 
	`be32_to_˝u
(
…p
->
be°cou¡
) - 1);

1793 
	`xfs_dú3_Àaf_log_èû
(
¨gs
, 
lbp
);

1794 
	`xfs_dú3_Àaf_check
(
dp
, 
lbp
);

1799 
îr‹
 = 
	`xfs_dú2_shrök_öode
(
¨gs
,

1800 
	`xfs_dú2_byã_to_db
(
¨gs
->
geo
, 
XFS_DIR2_FREE_OFFSET
),

1801 
fbp
);

1802 i‡(
îr‹
) {

1808 
	`ASSERT
(
îr‹
 !-
ENOSPC
);

1809  
îr‹
;

1811 
fbp
 = 
NULL
;

1818 
îr‹
 = 
	`xfs_dú2_Àaf_to_block
(
¨gs
, 
lbp
, 
NULL
);

1819 
°©e
->
∑th
.
blk
[0].
bp
 = 
NULL
;

1820  
îr‹
;

1821 
	}
}

	@libxfs/xfs_dir2_node.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_mou¡.h
"

25 
	~"xfs_da_f‹m©.h
"

26 
	~"xfs_da_båì.h
"

27 
	~"xfs_öode.h
"

28 
	~"xfs_bm≠.h
"

29 
	~"xfs_dú2.h
"

30 
	~"xfs_dú2_¥iv.h
"

31 
	~"xfs_åa˚.h
"

32 
	~"xfs_å™s.h
"

33 
	~"xfs_cksum.h
"

38 
xfs_dú2_Àa‚_add
(
xfs_buf
 *
bp
, 
xfs_da_¨gs_t
 *
¨gs
,

39 
ödex
);

40 
xfs_dú2_Àa‚_ªbÆ™˚
(
xfs_da_°©e_t
 *
°©e
,

41 
xfs_da_°©e_blk_t
 *
blk1
,

42 
xfs_da_°©e_blk_t
 *
blk2
);

43 
xfs_dú2_Àa‚_ªmove
(
xfs_da_¨gs_t
 *
¨gs
, 
xfs_buf
 *
bp
,

44 
ödex
, 
xfs_da_°©e_blk_t
 *
dblk
,

45 *
rvÆ
);

46 
xfs_dú2_node_add«me_öt
(
xfs_da_¨gs_t
 *
¨gs
,

47 
xfs_da_°©e_blk_t
 *
fblk
);

52 #ifde‡
DEBUG


53 
	#xfs_dú3_Àaf_check
(
dp
, 
bp
) \

55 i‡(!
	`xfs_dú3_Àa‚_check
((
dp
), (
bp
))) \

56 
	`ASSERT
(0); \

57 } 0);

	)

59 
boﬁ


60 
	$xfs_dú3_Àa‚_check
(

61 
xfs_öode
 *
dp
,

62 
xfs_buf
 *
bp
)

64 
xfs_dú2_Àaf
 *
Àaf
 = 
bp
->
b_addr
;

65 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

67 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

69 i‡(
Àafhdr
.
magic
 =
XFS_DIR3_LEAFN_MAGIC
) {

70 
xfs_dú3_Àaf_hdr
 *
Àaf3
 = 
bp
->
b_addr
;

71 i‡(
	`be64_to_˝u
(
Àaf3
->
öfo
.
blkno
Ë!
bp
->
b_bn
)

72  
Ál£
;

73 } i‡(
Àafhdr
.
magic
 !
XFS_DIR2_LEAFN_MAGIC
)

74  
Ál£
;

76  
	`xfs_dú3_Àaf_check_öt
(
dp
->
i_mou¡
, dp, &
Àafhdr
, 
Àaf
);

77 
	}
}

79 
	#xfs_dú3_Àaf_check
(
dp
, 
bp
)

	)

82 
boﬁ


83 
	$xfs_dú3_‰ì_vîify
(

84 
xfs_buf
 *
bp
)

86 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

87 
xfs_dú2_‰ì_hdr
 *
hdr
 = 
bp
->
b_addr
;

89 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

90 
xfs_dú3_blk_hdr
 *
hdr3
 = 
bp
->
b_addr
;

92 i‡(
hdr3
->
magic
 !
	`˝u_to_be32
(
XFS_DIR3_FREE_MAGIC
))

93  
Ál£
;

94 i‡(!
	`uuid_equÆ
(&
hdr3
->
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

95  
Ál£
;

96 i‡(
	`be64_to_˝u
(
hdr3
->
blkno
Ë!
bp
->
b_bn
)

97  
Ál£
;

98 i‡(!
	`xfs_log_check_l¢
(
mp
, 
	`be64_to_˝u
(
hdr3
->
l¢
)))

99  
Ál£
;

101 i‡(
hdr
->
magic
 !
	`˝u_to_be32
(
XFS_DIR2_FREE_MAGIC
))

102  
Ál£
;

107  
åue
;

108 
	}
}

111 
	$xfs_dú3_‰ì_ªad_vîify
(

112 
xfs_buf
 *
bp
)

114 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

116 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

117 !
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_DIR3_FREE_CRC_OFF
))

118 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

119 i‡(!
	`xfs_dú3_‰ì_vîify
(
bp
))

120 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

122 i‡(
bp
->
b_îr‹
)

123 
	`xfs_vîifõr_îr‹
(
bp
);

124 
	}
}

127 
	$xfs_dú3_‰ì_wrôe_vîify
(

128 
xfs_buf
 *
bp
)

130 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

131 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

132 
xfs_dú3_blk_hdr
 *
hdr3
 = 
bp
->
b_addr
;

134 i‡(!
	`xfs_dú3_‰ì_vîify
(
bp
)) {

135 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

136 
	`xfs_vîifõr_îr‹
(
bp
);

140 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

143 i‡(
bù
)

144 
hdr3
->
l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

146 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_DIR3_FREE_CRC_OFF
);

147 
	}
}

149 c⁄° 
xfs_buf_›s
 
	gxfs_dú3_‰ì_buf_›s
 = {

150 .
«me
 = "xfs_dir3_free",

151 .
	gvîify_ªad
 = 
xfs_dú3_‰ì_ªad_vîify
,

152 .
	gvîify_wrôe
 = 
xfs_dú3_‰ì_wrôe_vîify
,

156 
boﬁ


157 
	$xfs_dú3_‰ì_hódî_check
(

158 
xfs_öode
 *
dp
,

159 
xfs_dablk_t
 
fbno
,

160 
xfs_buf
 *
bp
)

162 
xfs_mou¡
 *
mp
 = 
dp
->
i_mou¡
;

163 
fú°db
;

164 
maxbe°s
;

166 
maxbe°s
 = 
dp
->
d_›s
->
	`‰ì_max_be°s
(
mp
->
m_dú_geo
);

167 
fú°db
 = (
	`xfs_dú2_da_to_db
(
mp
->
m_dú_geo
, 
fbno
) -

168 
	`xfs_dú2_byã_to_db
(
mp
->
m_dú_geo
, 
XFS_DIR2_FREE_OFFSET
)) *

169 
maxbe°s
;

170 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

171 
xfs_dú3_‰ì_hdr
 *
hdr3
 = 
bp
->
b_addr
;

173 i‡(
	`be32_to_˝u
(
hdr3
->
fú°db
) != firstdb)

174  
Ál£
;

175 i‡(
	`be32_to_˝u
(
hdr3
->
nvÆid
Ë> 
maxbe°s
)

176  
Ál£
;

177 i‡(
	`be32_to_˝u
(
hdr3
->
nvÆid
Ë< be32_to_˝u(hdr3->
nu£d
))

178  
Ál£
;

180 
xfs_dú2_‰ì_hdr
 *
hdr
 = 
bp
->
b_addr
;

182 i‡(
	`be32_to_˝u
(
hdr
->
fú°db
) != firstdb)

183  
Ál£
;

184 i‡(
	`be32_to_˝u
(
hdr
->
nvÆid
Ë> 
maxbe°s
)

185  
Ál£
;

186 i‡(
	`be32_to_˝u
(
hdr
->
nvÆid
Ë< be32_to_˝u(hdr->
nu£d
))

187  
Ál£
;

189  
åue
;

190 
	}
}

193 
	$__xfs_dú3_‰ì_ªad
(

194 
xfs_å™s
 *
ç
,

195 
xfs_öode
 *
dp
,

196 
xfs_dablk_t
 
fbno
,

197 
xfs_daddr_t
 
m≠≥dbno
,

198 
xfs_buf
 **
bµ
)

200 
îr
;

202 
îr
 = 
	`xfs_da_ªad_buf
(
ç
, 
dp
, 
fbno
, 
m≠≥dbno
, 
bµ
,

203 
XFS_DATA_FORK
, &
xfs_dú3_‰ì_buf_›s
);

204 i‡(
îr
 || !*
bµ
)

205  
îr
;

208 i‡(!
	`xfs_dú3_‰ì_hódî_check
(
dp
, 
fbno
, *
bµ
)) {

209 
	`xfs_buf_i€º‹
(*
bµ
, -
EFSCORRUPTED
);

210 
	`xfs_vîifõr_îr‹
(*
bµ
);

211 
	`xfs_å™s_bªl£
(
ç
, *
bµ
);

212  -
EFSCORRUPTED
;

216 i‡(
ç
)

217 
	`xfs_å™s_buf_£t_ty≥
(
ç
, *
bµ
, 
XFS_BLFT_DIR_FREE_BUF
);

220 
	}
}

223 
	$xfs_dú2_‰ì_ªad
(

224 
xfs_å™s
 *
ç
,

225 
xfs_öode
 *
dp
,

226 
xfs_dablk_t
 
fbno
,

227 
xfs_buf
 **
bµ
)

229  
	`__xfs_dú3_‰ì_ªad
(
ç
, 
dp
, 
fbno
, -1, 
bµ
);

230 
	}
}

233 
	$xfs_dú2_‰ì_åy_ªad
(

234 
xfs_å™s
 *
ç
,

235 
xfs_öode
 *
dp
,

236 
xfs_dablk_t
 
fbno
,

237 
xfs_buf
 **
bµ
)

239  
	`__xfs_dú3_‰ì_ªad
(
ç
, 
dp
, 
fbno
, -2, 
bµ
);

240 
	}
}

243 
	$xfs_dú3_‰ì_gë_buf
(

244 
xfs_da_¨gs_t
 *
¨gs
,

245 
xfs_dú2_db_t
 
fbno
,

246 
xfs_buf
 **
bµ
)

248 
xfs_å™s
 *
ç
 = 
¨gs
->
å™s
;

249 
xfs_öode
 *
dp
 = 
¨gs
->dp;

250 
xfs_mou¡
 *
mp
 = 
dp
->
i_mou¡
;

251 
xfs_buf
 *
bp
;

252 
îr‹
;

253 
xfs_dú3_ic‰ì_hdr
 
hdr
;

255 
îr‹
 = 
	`xfs_da_gë_buf
(
ç
, 
dp
, 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
fbno
),

256 -1, &
bp
, 
XFS_DATA_FORK
);

257 i‡(
îr‹
)

258  
îr‹
;

260 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_DIR_FREE_BUF
);

261 
bp
->
b_›s
 = &
xfs_dú3_‰ì_buf_›s
;

267 
	`mem£t
(
bp
->
b_addr
, 0, (
xfs_dú3_‰ì_hdr
));

268 
	`mem£t
(&
hdr
, 0, (hdr));

270 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

271 
xfs_dú3_‰ì_hdr
 *
hdr3
 = 
bp
->
b_addr
;

273 
hdr
.
magic
 = 
XFS_DIR3_FREE_MAGIC
;

275 
hdr3
->
hdr
.
blkno
 = 
	`˝u_to_be64
(
bp
->
b_bn
);

276 
hdr3
->
hdr
.
ow√r
 = 
	`˝u_to_be64
(
dp
->
i_öo
);

277 
	`uuid_c›y
(&
hdr3
->
hdr
.
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

279 
hdr
.
magic
 = 
XFS_DIR2_FREE_MAGIC
;

280 
dp
->
d_›s
->
	`‰ì_hdr_to_disk
(
bp
->
b_addr
, &
hdr
);

281 *
bµ
 = 
bp
;

283 
	}
}

288 
STATIC
 

289 
	$xfs_dú2_‰ì_log_be°s
(

290 
xfs_da_¨gs
 *
¨gs
,

291 
xfs_buf
 *
bp
,

292 
fú°
,

293 
œ°
)

295 
xfs_dú2_‰ì_t
 *
‰ì
;

296 
__be16
 *
be°s
;

298 
‰ì
 = 
bp
->
b_addr
;

299 
be°s
 = 
¨gs
->
dp
->
d_›s
->
	`‰ì_be°s_p
(
‰ì
);

300 
	`ASSERT
(
‰ì
->
hdr
.
magic
 =
	`˝u_to_be32
(
XFS_DIR2_FREE_MAGIC
) ||

301 
‰ì
->
hdr
.
magic
 =
	`˝u_to_be32
(
XFS_DIR3_FREE_MAGIC
));

302 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
,

303 (
uöt
)((*)&
be°s
[
fú°
] - (*)
‰ì
),

304 (
uöt
)((*)&
be°s
[
œ°
] - (*)
‰ì
 +

305 (
be°s
[0]) - 1));

306 
	}
}

312 
	$xfs_dú2_‰ì_log_hódî
(

313 
xfs_da_¨gs
 *
¨gs
,

314 
xfs_buf
 *
bp
)

316 #ifde‡
DEBUG


317 
xfs_dú2_‰ì_t
 *
‰ì
;

319 
‰ì
 = 
bp
->
b_addr
;

320 
	`ASSERT
(
‰ì
->
hdr
.
magic
 =
	`˝u_to_be32
(
XFS_DIR2_FREE_MAGIC
) ||

321 
‰ì
->
hdr
.
magic
 =
	`˝u_to_be32
(
XFS_DIR3_FREE_MAGIC
));

323 
	`xfs_å™s_log_buf
(
¨gs
->
å™s
, 
bp
, 0,

324 
¨gs
->
dp
->
d_›s
->
‰ì_hdr_size
 - 1);

325 
	}
}

333 
	$xfs_dú2_Àaf_to_node
(

334 
xfs_da_¨gs_t
 *
¨gs
,

335 
xfs_buf
 *
lbp
)

337 
xfs_öode_t
 *
dp
;

338 
îr‹
;

339 
xfs_buf
 *
fbp
;

340 
xfs_dú2_db_t
 
fdb
;

341 
xfs_dú2_‰ì_t
 *
‰ì
;

342 
__be16
 *
‰om
;

343 
i
;

344 
xfs_dú2_Àaf_t
 *
Àaf
;

345 
xfs_dú2_Àaf_èû_t
 *
…p
;

346 
n
;

347 
xfs_dú2_d©a_off_t
 
off
;

348 
__be16
 *
to
;

349 
xfs_å™s_t
 *
ç
;

350 
xfs_dú3_ic‰ì_hdr
 
‰ìhdr
;

352 
	`åa˚_xfs_dú2_Àaf_to_node
(
¨gs
);

354 
dp
 = 
¨gs
->dp;

355 
ç
 = 
¨gs
->
å™s
;

359 i‡((
îr‹
 = 
	`xfs_dú2_grow_öode
(
¨gs
, 
XFS_DIR2_FREE_SPACE
, &
fdb
))) {

360  
îr‹
;

362 
	`ASSERT
(
fdb
 =
	`xfs_dú2_byã_to_db
(
¨gs
->
geo
, 
XFS_DIR2_FREE_OFFSET
));

366 
îr‹
 = 
	`xfs_dú3_‰ì_gë_buf
(
¨gs
, 
fdb
, &
fbp
);

367 i‡(
îr‹
)

368  
îr‹
;

370 
‰ì
 = 
fbp
->
b_addr
;

371 
dp
->
d_›s
->
	`‰ì_hdr_‰om_disk
(&
‰ìhdr
, 
‰ì
);

372 
Àaf
 = 
lbp
->
b_addr
;

373 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
¨gs
->
geo
, 
Àaf
);

374 
	`ASSERT
(
	`be32_to_˝u
(
…p
->
be°cou¡
) <=

375 (
uöt
)
dp
->
i_d
.
di_size
 / 
¨gs
->
geo
->
blksize
);

381 
‰om
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
);

382 
to
 = 
dp
->
d_›s
->
	`‰ì_be°s_p
(
‰ì
);

383 
i
 = 
n
 = 0; i < 
	`be32_to_˝u
(
…p
->
be°cou¡
); i++, 
‰om
++, 
to
++) {

384 i‡((
off
 = 
	`be16_to_˝u
(*
‰om
)Ë!
NULLDATAOFF
)

385 
n
++;

386 *
to
 = 
	`˝u_to_be16
(
off
);

392 
‰ìhdr
.
nu£d
 = 
n
;

393 
‰ìhdr
.
nvÆid
 = 
	`be32_to_˝u
(
…p
->
be°cou¡
);

395 
dp
->
d_›s
->
	`‰ì_hdr_to_disk
(
fbp
->
b_addr
, &
‰ìhdr
);

396 
	`xfs_dú2_‰ì_log_be°s
(
¨gs
, 
fbp
, 0, 
‰ìhdr
.
nvÆid
 - 1);

397 
	`xfs_dú2_‰ì_log_hódî
(
¨gs
, 
fbp
);

405 i‡(
Àaf
->
hdr
.
öfo
.
magic
 =
	`˝u_to_be16
(
XFS_DIR2_LEAF1_MAGIC
))

406 
Àaf
->
hdr
.
öfo
.
magic
 = 
	`˝u_to_be16
(
XFS_DIR2_LEAFN_MAGIC
);

408 
Àaf
->
hdr
.
öfo
.
magic
 = 
	`˝u_to_be16
(
XFS_DIR3_LEAFN_MAGIC
);

409 
lbp
->
b_›s
 = &
xfs_dú3_Àa‚_buf_›s
;

410 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
lbp
, 
XFS_BLFT_DIR_LEAFN_BUF
);

411 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
lbp
);

412 
	`xfs_dú3_Àaf_check
(
dp
, 
lbp
);

414 
	}
}

421 
	$xfs_dú2_Àa‚_add
(

422 
xfs_buf
 *
bp
,

423 
xfs_da_¨gs_t
 *
¨gs
,

424 
ödex
)

426 
com∑˘
;

427 
xfs_öode_t
 *
dp
;

428 
high°Æe
;

429 
xfs_dú2_Àaf_t
 *
Àaf
;

430 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

431 
lÊoghigh
;

432 
lÊoglow
;

433 
low°Æe
;

434 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

435 
xfs_dú2_Àaf_íåy
 *
íts
;

437 
	`åa˚_xfs_dú2_Àa‚_add
(
¨gs
, 
ödex
);

439 
dp
 = 
¨gs
->dp;

440 
Àaf
 = 
bp
->
b_addr
;

441 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

442 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

448 i‡(
ödex
 < 0)

449  -
EFSCORRUPTED
;

458 i‡(
Àafhdr
.
cou¡
 =
dp
->
d_›s
->
	`Àaf_max_íts
(
¨gs
->
geo
)) {

459 i‡(!
Àafhdr
.
°Æe
)

460  -
ENOSPC
;

461 
com∑˘
 = 
Àafhdr
.
°Æe
 > 1;

463 
com∑˘
 = 0;

464 
	`ASSERT
(
ödex
 =0 || 
	`be32_to_˝u
(
íts
[ödex - 1].
hashvÆ
Ë<
¨gs
->hashval);

465 
	`ASSERT
(
ödex
 =
Àafhdr
.
cou¡
 ||

466 
	`be32_to_˝u
(
íts
[
ödex
].
hashvÆ
Ë>
¨gs
->hashval);

468 i‡(
¨gs
->
›_Êags
 & 
XFS_DA_OP_JUSTCHECK
)

475 i‡(
com∑˘
)

476 
	`xfs_dú3_Àaf_com∑˘_x1
(&
Àafhdr
, 
íts
, &
ödex
, &
low°Æe
,

477 &
high°Æe
, &
lÊoglow
, &
lÊoghigh
);

478 i‡(
Àafhdr
.
°Æe
) {

482 
lÊoglow
 = 
Àafhdr
.
cou¡
;

483 
lÊoghigh
 = -1;

489 
Àp
 = 
	`xfs_dú3_Àaf_föd_íåy
(&
Àafhdr
, 
íts
, 
ödex
, 
com∑˘
, 
low°Æe
,

490 
high°Æe
, &
lÊoglow
, &
lÊoghigh
);

492 
Àp
->
hashvÆ
 = 
	`˝u_to_be32
(
¨gs
->hashval);

493 
Àp
->
addªss
 = 
	`˝u_to_be32
(
	`xfs_dú2_db_off_to_d©≠å
(
¨gs
->
geo
,

494 
¨gs
->
blkno
,árgs->
ödex
));

496 
dp
->
d_›s
->
	`Àaf_hdr_to_disk
(
Àaf
, &
Àafhdr
);

497 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
bp
);

498 
	`xfs_dú3_Àaf_log_íts
(
¨gs
, 
bp
, 
lÊoglow
, 
lÊoghigh
);

499 
	`xfs_dú3_Àaf_check
(
dp
, 
bp
);

501 
	}
}

503 #ifde‡
DEBUG


505 
	$xfs_dú2_‰ì_hdr_check
(

506 
xfs_öode
 *
dp
,

507 
xfs_buf
 *
bp
,

508 
xfs_dú2_db_t
 
db
)

510 
xfs_dú3_ic‰ì_hdr
 
hdr
;

512 
dp
->
d_›s
->
	`‰ì_hdr_‰om_disk
(&
hdr
, 
bp
->
b_addr
);

514 
	`ASSERT
((
hdr
.
fú°db
 %

515 
dp
->
d_›s
->
	`‰ì_max_be°s
(dp->
i_mou¡
->
m_dú_geo
)) == 0);

516 
	`ASSERT
(
hdr
.
fú°db
 <
db
);

517 
	`ASSERT
(
db
 < 
hdr
.
fú°db
 + hdr.
nvÆid
);

518 
	}
}

520 
	#xfs_dú2_‰ì_hdr_check
(
dp
, 
bp
, 
db
)

	)

527 
xfs_dahash_t


528 
	$xfs_dú2_Àa‚_œ°hash
(

529 
xfs_öode
 *
dp
,

530 
xfs_buf
 *
bp
,

531 *
cou¡
)

533 
xfs_dú2_Àaf
 *
Àaf
 = 
bp
->
b_addr
;

534 
xfs_dú2_Àaf_íåy
 *
íts
;

535 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

537 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

539 
	`ASSERT
(
Àafhdr
.
magic
 =
XFS_DIR2_LEAFN_MAGIC
 ||

540 
Àafhdr
.
magic
 =
XFS_DIR3_LEAFN_MAGIC
);

542 i‡(
cou¡
)

543 *
cou¡
 = 
Àafhdr
.count;

544 i‡(!
Àafhdr
.
cou¡
)

547 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

548  
	`be32_to_˝u
(
íts
[
Àafhdr
.
cou¡
 - 1].
hashvÆ
);

549 
	}
}

555 
STATIC
 

556 
	$xfs_dú2_Àa‚_lookup_f‹_add«me
(

557 
xfs_buf
 *
bp
,

558 
xfs_da_¨gs_t
 *
¨gs
,

559 *
ödexp
,

560 
xfs_da_°©e_t
 *
°©e
)

562 
xfs_buf
 *
curbp
 = 
NULL
;

563 
xfs_dú2_db_t
 
curdb
 = -1;

564 
xfs_dú2_db_t
 
curfdb
 = -1;

565 
xfs_öode_t
 *
dp
;

566 
îr‹
;

567 
fi
;

568 
xfs_dú2_‰ì_t
 *
‰ì
 = 
NULL
;

569 
ödex
;

570 
xfs_dú2_Àaf_t
 *
Àaf
;

571 
Àngth
;

572 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

573 
xfs_mou¡_t
 *
mp
;

574 
xfs_dú2_db_t
 
√wdb
;

575 
xfs_dú2_db_t
 
√wfdb
;

576 
xfs_å™s_t
 *
ç
;

577 
xfs_dú2_Àaf_íåy
 *
íts
;

578 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

580 
dp
 = 
¨gs
->dp;

581 
ç
 = 
¨gs
->
å™s
;

582 
mp
 = 
dp
->
i_mou¡
;

583 
Àaf
 = 
bp
->
b_addr
;

584 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

585 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

587 
	`xfs_dú3_Àaf_check
(
dp
, 
bp
);

588 
	`ASSERT
(
Àafhdr
.
cou¡
 > 0);

593 
ödex
 = 
	`xfs_dú2_Àaf_£¨ch_hash
(
¨gs
, 
bp
);

597 i‡(
°©e
->
exåavÆid
) {

599 
curbp
 = 
°©e
->
exåablk
.
bp
;

600 
curfdb
 = 
°©e
->
exåablk
.
blkno
;

601 
‰ì
 = 
curbp
->
b_addr
;

602 
	`ASSERT
(
‰ì
->
hdr
.
magic
 =
	`˝u_to_be32
(
XFS_DIR2_FREE_MAGIC
) ||

603 
‰ì
->
hdr
.
magic
 =
	`˝u_to_be32
(
XFS_DIR3_FREE_MAGIC
));

605 
Àngth
 = 
dp
->
d_›s
->
	`d©a_ítsize
(
¨gs
->
«mñí
);

609 
Àp
 = &
íts
[
ödex
];

610 
ödex
 < 
Àafhdr
.
cou¡
 && 
	`be32_to_˝u
(
Àp
->
hashvÆ
Ë=
¨gs
->hashval;

611 
Àp
++, 
ödex
++) {

615 i‡(
	`be32_to_˝u
(
Àp
->
addªss
Ë=
XFS_DIR2_NULL_DATAPTR
)

620 
√wdb
 = 
	`xfs_dú2_d©≠å_to_db
(
¨gs
->
geo
,

621 
	`be32_to_˝u
(
Àp
->
addªss
));

630 i‡(
√wdb
 !
curdb
) {

631 
__be16
 *
be°s
;

633 
curdb
 = 
√wdb
;

638 
√wfdb
 = 
dp
->
d_›s
->
	`db_to_fdb
(
¨gs
->
geo
, 
√wdb
);

642 i‡(
√wfdb
 !
curfdb
) {

646 i‡(
curbp
)

647 
	`xfs_å™s_bªl£
(
ç
, 
curbp
);

649 
îr‹
 = 
	`xfs_dú2_‰ì_ªad
(
ç
, 
dp
,

650 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
,

651 
√wfdb
),

652 &
curbp
);

653 i‡(
îr‹
)

654  
îr‹
;

655 
‰ì
 = 
curbp
->
b_addr
;

657 
	`xfs_dú2_‰ì_hdr_check
(
dp
, 
curbp
, 
curdb
);

662 
fi
 = 
dp
->
d_›s
->
	`db_to_fdödex
(
¨gs
->
geo
, 
curdb
);

666 
be°s
 = 
dp
->
d_›s
->
	`‰ì_be°s_p
(
‰ì
);

667 i‡(
	`u∆ikñy
(
be°s
[
fi
] =
	`˝u_to_be16
(
NULLDATAOFF
))) {

668 
	`XFS_ERROR_REPORT
("xfs_dir2_leafn_lookup_int",

669 
XFS_ERRLEVEL_LOW
, 
mp
);

670 i‡(
curfdb
 !
√wfdb
)

671 
	`xfs_å™s_bªl£
(
ç
, 
curbp
);

672  -
EFSCORRUPTED
;

674 
curfdb
 = 
√wfdb
;

675 i‡(
	`be16_to_˝u
(
be°s
[
fi
]Ë>
Àngth
)

676 
out
;

680 
fi
 = -1;

681 
out
:

682 
	`ASSERT
(
¨gs
->
›_Êags
 & 
XFS_DA_OP_OKNOENT
);

683 i‡(
curbp
) {

685 
°©e
->
exåavÆid
 = 1;

686 
°©e
->
exåablk
.
bp
 = 
curbp
;

687 
°©e
->
exåablk
.
ödex
 = 
fi
;

688 
°©e
->
exåablk
.
blkno
 = 
curfdb
;

695 
°©e
->
exåablk
.
magic
 = 
XFS_DIR2_FREE_MAGIC
;

697 
°©e
->
exåavÆid
 = 0;

702 *
ödexp
 = 
ödex
;

703  -
ENOENT
;

704 
	}
}

710 
STATIC
 

711 
	$xfs_dú2_Àa‚_lookup_f‹_íåy
(

712 
xfs_buf
 *
bp
,

713 
xfs_da_¨gs_t
 *
¨gs
,

714 *
ödexp
,

715 
xfs_da_°©e_t
 *
°©e
)

717 
xfs_buf
 *
curbp
 = 
NULL
;

718 
xfs_dú2_db_t
 
curdb
 = -1;

719 
xfs_dú2_d©a_íåy_t
 *
dï
;

720 
xfs_öode_t
 *
dp
;

721 
îr‹
;

722 
ödex
;

723 
xfs_dú2_Àaf_t
 *
Àaf
;

724 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

725 
xfs_mou¡_t
 *
mp
;

726 
xfs_dú2_db_t
 
√wdb
;

727 
xfs_å™s_t
 *
ç
;

728 
xfs_dacmp
 
cmp
;

729 
xfs_dú2_Àaf_íåy
 *
íts
;

730 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

732 
dp
 = 
¨gs
->dp;

733 
ç
 = 
¨gs
->
å™s
;

734 
mp
 = 
dp
->
i_mou¡
;

735 
Àaf
 = 
bp
->
b_addr
;

736 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

737 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

739 
	`xfs_dú3_Àaf_check
(
dp
, 
bp
);

740 
	`ASSERT
(
Àafhdr
.
cou¡
 > 0);

745 
ödex
 = 
	`xfs_dú2_Àaf_£¨ch_hash
(
¨gs
, 
bp
);

749 i‡(
°©e
->
exåavÆid
) {

750 
curbp
 = 
°©e
->
exåablk
.
bp
;

751 
curdb
 = 
°©e
->
exåablk
.
blkno
;

756 
Àp
 = &
íts
[
ödex
];

757 
ödex
 < 
Àafhdr
.
cou¡
 && 
	`be32_to_˝u
(
Àp
->
hashvÆ
Ë=
¨gs
->hashval;

758 
Àp
++, 
ödex
++) {

762 i‡(
	`be32_to_˝u
(
Àp
->
addªss
Ë=
XFS_DIR2_NULL_DATAPTR
)

767 
√wdb
 = 
	`xfs_dú2_d©≠å_to_db
(
¨gs
->
geo
,

768 
	`be32_to_˝u
(
Àp
->
addªss
));

775 i‡(
√wdb
 !
curdb
) {

780 i‡(
curbp
 && (
¨gs
->
cm¥esu…
 =
XFS_CMP_DIFFERENT
 ||

781 
curdb
 !
°©e
->
exåablk
.
blkno
))

782 
	`xfs_å™s_bªl£
(
ç
, 
curbp
);

787 i‡(
¨gs
->
cm¥esu…
 !
XFS_CMP_DIFFERENT
 &&

788 
√wdb
 =
°©e
->
exåablk
.
blkno
) {

789 
	`ASSERT
(
°©e
->
exåavÆid
);

790 
curbp
 = 
°©e
->
exåablk
.
bp
;

792 
îr‹
 = 
	`xfs_dú3_d©a_ªad
(
ç
, 
dp
,

793 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
,

794 
√wdb
),

795 -1, &
curbp
);

796 i‡(
îr‹
)

797  
îr‹
;

799 
	`xfs_dú3_d©a_check
(
dp
, 
curbp
);

800 
curdb
 = 
√wdb
;

805 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)((*)
curbp
->
b_addr
 +

806 
	`xfs_dú2_d©≠å_to_off
(
¨gs
->
geo
,

807 
	`be32_to_˝u
(
Àp
->
addªss
)));

813 
cmp
 = 
mp
->
m_dú«me›s
->
	`com≤ame
(
¨gs
, 
dï
->
«me
, dï->
«mñí
);

814 i‡(
cmp
 !
XFS_CMP_DIFFERENT
 && cm∞!
¨gs
->
cm¥esu…
) {

816 i‡(
¨gs
->
cm¥esu…
 !
XFS_CMP_DIFFERENT
 &&

817 
curdb
 !
°©e
->
exåablk
.
blkno
)

818 
	`xfs_å™s_bªl£
(
ç
, 
°©e
->
exåablk
.
bp
);

819 
¨gs
->
cm¥esu…
 = 
cmp
;

820 
¨gs
->
öumbî
 = 
	`be64_to_˝u
(
dï
->inumber);

821 
¨gs
->
fûëy≥
 = 
dp
->
d_›s
->
	`d©a_gë_·y≥
(
dï
);

822 *
ödexp
 = 
ödex
;

823 
°©e
->
exåavÆid
 = 1;

824 
°©e
->
exåablk
.
bp
 = 
curbp
;

825 
°©e
->
exåablk
.
blkno
 = 
curdb
;

826 
°©e
->
exåablk
.
ödex
 = ()((*)
dï
 -

827 (*)
curbp
->
b_addr
);

828 
°©e
->
exåablk
.
magic
 = 
XFS_DIR2_DATA_MAGIC
;

829 
curbp
->
b_›s
 = &
xfs_dú3_d©a_buf_›s
;

830 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
curbp
, 
XFS_BLFT_DIR_DATA_BUF
);

831 i‡(
cmp
 =
XFS_CMP_EXACT
)

832  -
EEXIST
;

835 
	`ASSERT
(
ödex
 =
Àafhdr
.
cou¡
 || (
¨gs
->
›_Êags
 & 
XFS_DA_OP_OKNOENT
));

836 i‡(
curbp
) {

837 i‡(
¨gs
->
cm¥esu…
 =
XFS_CMP_DIFFERENT
) {

839 
°©e
->
exåavÆid
 = 1;

840 
°©e
->
exåablk
.
bp
 = 
curbp
;

841 
°©e
->
exåablk
.
ödex
 = -1;

842 
°©e
->
exåablk
.
blkno
 = 
curdb
;

843 
°©e
->
exåablk
.
magic
 = 
XFS_DIR2_DATA_MAGIC
;

844 
curbp
->
b_›s
 = &
xfs_dú3_d©a_buf_›s
;

845 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
curbp
, 
XFS_BLFT_DIR_DATA_BUF
);

848 i‡(
°©e
->
exåablk
.
bp
 !
curbp
)

849 
	`xfs_å™s_bªl£
(
ç
, 
curbp
);

852 
°©e
->
exåavÆid
 = 0;

854 *
ödexp
 = 
ödex
;

855  -
ENOENT
;

856 
	}
}

864 
	$xfs_dú2_Àa‚_lookup_öt
(

865 
xfs_buf
 *
bp
,

866 
xfs_da_¨gs_t
 *
¨gs
,

867 *
ödexp
,

868 
xfs_da_°©e_t
 *
°©e
)

870 i‡(
¨gs
->
›_Êags
 & 
XFS_DA_OP_ADDNAME
)

871  
	`xfs_dú2_Àa‚_lookup_f‹_add«me
(
bp
, 
¨gs
, 
ödexp
,

872 
°©e
);

873  
	`xfs_dú2_Àa‚_lookup_f‹_íåy
(
bp
, 
¨gs
, 
ödexp
, 
°©e
);

874 
	}
}

881 
	$xfs_dú3_Àa‚_movì¡s
(

882 
xfs_da_¨gs_t
 *
¨gs
,

883 
xfs_buf
 *
bp_s
,

884 
xfs_dú3_i˛óf_hdr
 *
shdr
,

885 
xfs_dú2_Àaf_íåy
 *
£¡s
,

886 
°¨t_s
,

887 
xfs_buf
 *
bp_d
,

888 
xfs_dú3_i˛óf_hdr
 *
dhdr
,

889 
xfs_dú2_Àaf_íåy
 *
díts
,

890 
°¨t_d
,

891 
cou¡
)

893 
°Æe
;

895 
	`åa˚_xfs_dú2_Àa‚_movì¡s
(
¨gs
, 
°¨t_s
, 
°¨t_d
, 
cou¡
);

900 i‡(
cou¡
 == 0)

908 i‡(
°¨t_d
 < 
dhdr
->
cou¡
) {

909 
	`memmove
(&
díts
[
°¨t_d
 + 
cou¡
], &dents[start_d],

910 (
dhdr
->
cou¡
 - 
°¨t_d
Ë* (
xfs_dú2_Àaf_íåy_t
));

911 
	`xfs_dú3_Àaf_log_íts
(
¨gs
, 
bp_d
, 
°¨t_d
 + 
cou¡
,

912 
cou¡
 + 
dhdr
->count - 1);

918 i‡(
shdr
->
°Æe
) {

919 
i
;

921 
i
 = 
°¨t_s
, 
°Æe
 = 0; i < sèπ_†+ 
cou¡
; i++) {

922 i‡(
£¡s
[
i
].
addªss
 ==

923 
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
))

924 
°Æe
++;

927 
°Æe
 = 0;

931 
	`mem˝y
(&
díts
[
°¨t_d
], &
£¡s
[
°¨t_s
],

932 
cou¡
 * (
xfs_dú2_Àaf_íåy_t
));

933 
	`xfs_dú3_Àaf_log_íts
(
¨gs
, 
bp_d
, 
°¨t_d
, sèπ_d + 
cou¡
 - 1);

939 i‡(
°¨t_s
 + 
cou¡
 < 
shdr
->count) {

940 
	`memmove
(&
£¡s
[
°¨t_s
], &£¡s[°¨t_†+ 
cou¡
],

941 
cou¡
 * (
xfs_dú2_Àaf_íåy_t
));

942 
	`xfs_dú3_Àaf_log_íts
(
¨gs
, 
bp_s
, 
°¨t_s
, sèπ_†+ 
cou¡
 - 1);

948 
shdr
->
cou¡
 -= count;

949 
shdr
->
°Æe
 -= stale;

950 
dhdr
->
cou¡
 += count;

951 
dhdr
->
°Æe
 += stale;

952 
	}
}

959 
	$xfs_dú2_Àa‚_‹dî
(

960 
xfs_öode
 *
dp
,

961 
xfs_buf
 *
Àaf1_bp
,

962 
xfs_buf
 *
Àaf2_bp
)

964 
xfs_dú2_Àaf
 *
Àaf1
 = 
Àaf1_bp
->
b_addr
;

965 
xfs_dú2_Àaf
 *
Àaf2
 = 
Àaf2_bp
->
b_addr
;

966 
xfs_dú2_Àaf_íåy
 *
íts1
;

967 
xfs_dú2_Àaf_íåy
 *
íts2
;

968 
xfs_dú3_i˛óf_hdr
 
hdr1
;

969 
xfs_dú3_i˛óf_hdr
 
hdr2
;

971 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
hdr1
, 
Àaf1
);

972 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
hdr2
, 
Àaf2
);

973 
íts1
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf1
);

974 
íts2
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf2
);

976 i‡(
hdr1
.
cou¡
 > 0 && 
hdr2
.count > 0 &&

977 (
	`be32_to_˝u
(
íts2
[0].
hashvÆ
Ë< be32_to_˝u(
íts1
[0].hashval) ||

978 
	`be32_to_˝u
(
íts2
[
hdr2
.
cou¡
 - 1].
hashvÆ
) <

979 
	`be32_to_˝u
(
íts1
[
hdr1
.
cou¡
 - 1].
hashvÆ
)))

982 
	}
}

992 
	$xfs_dú2_Àa‚_ªbÆ™˚
(

993 
xfs_da_°©e_t
 *
°©e
,

994 
xfs_da_°©e_blk_t
 *
blk1
,

995 
xfs_da_°©e_blk_t
 *
blk2
)

997 
xfs_da_¨gs_t
 *
¨gs
;

998 
cou¡
;

999 
i¶e·
;

1000 
xfs_dú2_Àaf_t
 *
Àaf1
;

1001 
xfs_dú2_Àaf_t
 *
Àaf2
;

1002 
mid
;

1003 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

1004 
ﬁd°Æe
;

1006 
ﬁdsum
;

1007 
sw≠
;

1008 
xfs_dú2_Àaf_íåy
 *
íts1
;

1009 
xfs_dú2_Àaf_íåy
 *
íts2
;

1010 
xfs_dú3_i˛óf_hdr
 
hdr1
;

1011 
xfs_dú3_i˛óf_hdr
 
hdr2
;

1012 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

1014 
¨gs
 = 
°©e
->args;

1018 i‡((
sw≠
 = 
	`xfs_dú2_Àa‚_‹dî
(
dp
, 
blk1
->
bp
, 
blk2
->bp))) {

1019 
xfs_da_°©e_blk_t
 *
tmp
;

1021 
tmp
 = 
blk1
;

1022 
blk1
 = 
blk2
;

1023 
blk2
 = 
tmp
;

1025 
Àaf1
 = 
blk1
->
bp
->
b_addr
;

1026 
Àaf2
 = 
blk2
->
bp
->
b_addr
;

1027 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
hdr1
, 
Àaf1
);

1028 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
hdr2
, 
Àaf2
);

1029 
íts1
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf1
);

1030 
íts2
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf2
);

1032 
ﬁdsum
 = 
hdr1
.
cou¡
 + 
hdr2
.count;

1033 #i‡
	`deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

1034 
ﬁd°Æe
 = 
hdr1
.
°Æe
 + 
hdr2
.stale;

1036 
mid
 = 
ﬁdsum
 >> 1;

1042 i‡(
ﬁdsum
 & 1) {

1043 
xfs_dahash_t
 
midhash
;

1045 i‡(
mid
 >
hdr1
.
cou¡
)

1046 
midhash
 = 
	`be32_to_˝u
(
íts2
[
mid
 - 
hdr1
.
cou¡
].
hashvÆ
);

1048 
midhash
 = 
	`be32_to_˝u
(
íts1
[
mid
].
hashvÆ
);

1049 
i¶e·
 = 
¨gs
->
hashvÆ
 <
midhash
;

1057 
i¶e·
 = 1;

1062 
cou¡
 = 
hdr1
.cou¡ - 
mid
 + (
i¶e·
 == 0);

1063 i‡(
cou¡
 > 0)

1064 
	`xfs_dú3_Àa‚_movì¡s
(
¨gs
, 
blk1
->
bp
, &
hdr1
, 
íts1
,

1065 
hdr1
.
cou¡
 - cou¡, 
blk2
->
bp
,

1066 &
hdr2
, 
íts2
, 0, 
cou¡
);

1067 i‡(
cou¡
 < 0)

1068 
	`xfs_dú3_Àa‚_movì¡s
(
¨gs
, 
blk2
->
bp
, &
hdr2
, 
íts2
, 0,

1069 
blk1
->
bp
, &
hdr1
, 
íts1
,

1070 
hdr1
.
cou¡
, count);

1072 
	`ASSERT
(
hdr1
.
cou¡
 + 
hdr2
.cou¡ =
ﬁdsum
);

1073 
	`ASSERT
(
hdr1
.
°Æe
 + 
hdr2
.°Æê=
ﬁd°Æe
);

1076 
dp
->
d_›s
->
	`Àaf_hdr_to_disk
(
Àaf1
, &
hdr1
);

1077 
dp
->
d_›s
->
	`Àaf_hdr_to_disk
(
Àaf2
, &
hdr2
);

1078 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
blk1
->
bp
);

1079 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
blk2
->
bp
);

1081 
	`xfs_dú3_Àaf_check
(
dp
, 
blk1
->
bp
);

1082 
	`xfs_dú3_Àaf_check
(
dp
, 
blk2
->
bp
);

1087 i‡(
hdr1
.
cou¡
 < 
hdr2
.count)

1088 
°©e
->
öÀaf
 = 
sw≠
;

1089 i‡(
hdr1
.
cou¡
 > 
hdr2
.count)

1090 
°©e
->
öÀaf
 = !
sw≠
;

1092 
°©e
->
öÀaf
 = 
sw≠
 ^ (
blk1
->
ödex
 <
hdr1
.
cou¡
);

1096 i‡(!
°©e
->
öÀaf
)

1097 
blk2
->
ödex
 = 
blk1
->ödex - 
hdr1
.
cou¡
;

1103 i‡(
blk2
->
ödex
 < 0) {

1104 
°©e
->
öÀaf
 = 1;

1105 
blk2
->
ödex
 = 0;

1106 
	`xfs_Æît
(
dp
->
i_mou¡
,

1108 
__func__
, 
blk1
->
ödex
);

1110 
	}
}

1113 
	$xfs_dú3_d©a_block_‰ì
(

1114 
xfs_da_¨gs_t
 *
¨gs
,

1115 
xfs_dú2_d©a_hdr
 *
hdr
,

1116 
xfs_dú2_‰ì
 *
‰ì
,

1117 
xfs_dú2_db_t
 
fdb
,

1118 
födex
,

1119 
xfs_buf
 *
fbp
,

1120 
l⁄ge°
)

1122 
log‰ì
 = 0;

1123 
__be16
 *
be°s
;

1124 
xfs_dú3_ic‰ì_hdr
 
‰ìhdr
;

1125 
xfs_öode
 *
dp
 = 
¨gs
->dp;

1127 
dp
->
d_›s
->
	`‰ì_hdr_‰om_disk
(&
‰ìhdr
, 
‰ì
);

1128 
be°s
 = 
dp
->
d_›s
->
	`‰ì_be°s_p
(
‰ì
);

1129 i‡(
hdr
) {

1134 
be°s
[
födex
] = 
	`˝u_to_be16
(
l⁄ge°
);

1135 
	`xfs_dú2_‰ì_log_be°s
(
¨gs
, 
fbp
, 
födex
, findex);

1140 
‰ìhdr
.
nu£d
--;

1147 i‡(
födex
 =
‰ìhdr
.
nvÆid
 - 1) {

1148 
i
;

1150 
i
 = 
födex
 - 1; i >= 0; i--) {

1151 i‡(
be°s
[
i
] !
	`˝u_to_be16
(
NULLDATAOFF
))

1154 
‰ìhdr
.
nvÆid
 = 
i
 + 1;

1155 
log‰ì
 = 0;

1158 
be°s
[
födex
] = 
	`˝u_to_be16
(
NULLDATAOFF
);

1159 
log‰ì
 = 1;

1162 
dp
->
d_›s
->
	`‰ì_hdr_to_disk
(
‰ì
, &
‰ìhdr
);

1163 
	`xfs_dú2_‰ì_log_hódî
(
¨gs
, 
fbp
);

1169 i‡(!
‰ìhdr
.
nu£d
) {

1170 
îr‹
;

1172 
îr‹
 = 
	`xfs_dú2_shrök_öode
(
¨gs
, 
fdb
, 
fbp
);

1173 i‡(
îr‹
 == 0) {

1174 
fbp
 = 
NULL
;

1175 
log‰ì
 = 0;

1176 } i‡(
îr‹
 !-
ENOSPC
 || 
¨gs
->
tŸÆ
 != 0)

1177  
îr‹
;

1186 i‡(
log‰ì
)

1187 
	`xfs_dú2_‰ì_log_be°s
(
¨gs
, 
fbp
, 
födex
, findex);

1189 
	}
}

1197 
	$xfs_dú2_Àa‚_ªmove
(

1198 
xfs_da_¨gs_t
 *
¨gs
,

1199 
xfs_buf
 *
bp
,

1200 
ödex
,

1201 
xfs_da_°©e_blk_t
 *
dblk
,

1202 *
rvÆ
)

1204 
xfs_dú2_d©a_hdr_t
 *
hdr
;

1205 
xfs_dú2_db_t
 
db
;

1206 
xfs_buf
 *
dbp
;

1207 
xfs_dú2_d©a_íåy_t
 *
dï
;

1208 
xfs_öode_t
 *
dp
;

1209 
xfs_dú2_Àaf_t
 *
Àaf
;

1210 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

1211 
l⁄ge°
;

1212 
off
;

1213 
√edlog
;

1214 
√edsˇn
;

1215 
xfs_å™s_t
 *
ç
;

1216 
xfs_dú2_d©a_‰ì
 *
bf
;

1217 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

1218 
xfs_dú2_Àaf_íåy
 *
íts
;

1220 
	`åa˚_xfs_dú2_Àa‚_ªmove
(
¨gs
, 
ödex
);

1222 
dp
 = 
¨gs
->dp;

1223 
ç
 = 
¨gs
->
å™s
;

1224 
Àaf
 = 
bp
->
b_addr
;

1225 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

1226 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

1231 
Àp
 = &
íts
[
ödex
];

1236 
db
 = 
	`xfs_dú2_d©≠å_to_db
(
¨gs
->
geo
, 
	`be32_to_˝u
(
Àp
->
addªss
));

1237 
	`ASSERT
(
dblk
->
blkno
 =
db
);

1238 
off
 = 
	`xfs_dú2_d©≠å_to_off
(
¨gs
->
geo
, 
	`be32_to_˝u
(
Àp
->
addªss
));

1239 
	`ASSERT
(
dblk
->
ödex
 =
off
);

1245 
Àafhdr
.
°Æe
++;

1246 
dp
->
d_›s
->
	`Àaf_hdr_to_disk
(
Àaf
, &
Àafhdr
);

1247 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
bp
);

1249 
Àp
->
addªss
 = 
	`˝u_to_be32
(
XFS_DIR2_NULL_DATAPTR
);

1250 
	`xfs_dú3_Àaf_log_íts
(
¨gs
, 
bp
, 
ödex
, index);

1256 
dbp
 = 
dblk
->
bp
;

1257 
hdr
 = 
dbp
->
b_addr
;

1258 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)((*)
hdr
 + 
off
);

1259 
bf
 = 
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

1260 
l⁄ge°
 = 
	`be16_to_˝u
(
bf
[0].
Àngth
);

1261 
√edlog
 = 
√edsˇn
 = 0;

1262 
	`xfs_dú2_d©a_make_‰ì
(
¨gs
, 
dbp
, 
off
,

1263 
dp
->
d_›s
->
	`d©a_ítsize
(
dï
->
«mñí
), &
√edlog
, &
√edsˇn
);

1268 i‡(
√edsˇn
)

1269 
	`xfs_dú2_d©a_‰ìsˇn
(
dp
, 
hdr
, &
√edlog
);

1270 i‡(
√edlog
)

1271 
	`xfs_dú2_d©a_log_hódî
(
¨gs
, 
dbp
);

1272 
	`xfs_dú3_d©a_check
(
dp
, 
dbp
);

1277 i‡(
l⁄ge°
 < 
	`be16_to_˝u
(
bf
[0].
Àngth
)) {

1278 
îr‹
;

1279 
xfs_buf
 *
fbp
;

1280 
xfs_dú2_db_t
 
fdb
;

1281 
födex
;

1282 
xfs_dú2_‰ì_t
 *
‰ì
;

1288 
fdb
 = 
dp
->
d_›s
->
	`db_to_fdb
(
¨gs
->
geo
, 
db
);

1289 
îr‹
 = 
	`xfs_dú2_‰ì_ªad
(
ç
, 
dp
,

1290 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
fdb
),

1291 &
fbp
);

1292 i‡(
îr‹
)

1293  
îr‹
;

1294 
‰ì
 = 
fbp
->
b_addr
;

1295 #ifde‡
DEBUG


1297 
xfs_dú3_ic‰ì_hdr
 
‰ìhdr
;

1298 
dp
->
d_›s
->
	`‰ì_hdr_‰om_disk
(&
‰ìhdr
, 
‰ì
);

1299 
	`ASSERT
(
‰ìhdr
.
fú°db
 =
dp
->
d_›s
->
	`‰ì_max_be°s
(
¨gs
->
geo
) *

1300 (
fdb
 - 
	`xfs_dú2_byã_to_db
(
¨gs
->
geo
,

1301 
XFS_DIR2_FREE_OFFSET
)));

1307 
födex
 = 
dp
->
d_›s
->
	`db_to_fdödex
(
¨gs
->
geo
, 
db
);

1308 
l⁄ge°
 = 
	`be16_to_˝u
(
bf
[0].
Àngth
);

1313 i‡(
l⁄ge°
 =
¨gs
->
geo
->
blksize
 -

1314 
dp
->
d_›s
->
d©a_íåy_off£t
) {

1318 
îr‹
 = 
	`xfs_dú2_shrök_öode
(
¨gs
, 
db
, 
dbp
);

1319 i‡(
îr‹
 == 0) {

1320 
dblk
->
bp
 = 
NULL
;

1321 
hdr
 = 
NULL
;

1328 i‡(!(
îr‹
 =-
ENOSPC
 && 
¨gs
->
tŸÆ
 == 0))

1329  
îr‹
;

1335 
îr‹
 = 
	`xfs_dú3_d©a_block_‰ì
(
¨gs
, 
hdr
, 
‰ì
,

1336 
fdb
, 
födex
, 
fbp
, 
l⁄ge°
);

1337 i‡(
îr‹
)

1338  
îr‹
;

1341 
	`xfs_dú3_Àaf_check
(
dp
, 
bp
);

1346 *
rvÆ
 = (
dp
->
d_›s
->
Àaf_hdr_size
 +

1347 (
uöt
)(
íts
[0]Ë* (
Àafhdr
.
cou¡
 -Üófhdr.
°Æe
)) <

1348 
¨gs
->
geo
->
magi˝˘
;

1350 
	}
}

1356 
	$xfs_dú2_Àa‚_•lô
(

1357 
xfs_da_°©e_t
 *
°©e
,

1358 
xfs_da_°©e_blk_t
 *
ﬁdblk
,

1359 
xfs_da_°©e_blk_t
 *
√wblk
)

1361 
xfs_da_¨gs_t
 *
¨gs
;

1362 
xfs_dablk_t
 
blkno
;

1363 
îr‹
;

1364 
xfs_öode
 *
dp
;

1369 
¨gs
 = 
°©e
->args;

1370 
dp
 = 
¨gs
->dp;

1371 
	`ASSERT
(
ﬁdblk
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
);

1372 
îr‹
 = 
	`xfs_da_grow_öode
(
¨gs
, &
blkno
);

1373 i‡(
îr‹
) {

1374  
îr‹
;

1379 
îr‹
 = 
	`xfs_dú3_Àaf_gë_buf
(
¨gs
, 
	`xfs_dú2_da_to_db
◊rgs->
geo
, 
blkno
),

1380 &
√wblk
->
bp
, 
XFS_DIR2_LEAFN_MAGIC
);

1381 i‡(
îr‹
)

1382  
îr‹
;

1384 
√wblk
->
blkno
 = blkno;

1385 
√wblk
->
magic
 = 
XFS_DIR2_LEAFN_MAGIC
;

1390 
	`xfs_dú2_Àa‚_ªbÆ™˚
(
°©e
, 
ﬁdblk
, 
√wblk
);

1391 
îr‹
 = 
	`xfs_da3_blk_lök
(
°©e
, 
ﬁdblk
, 
√wblk
);

1392 i‡(
îr‹
) {

1393  
îr‹
;

1398 i‡(
°©e
->
öÀaf
)

1399 
îr‹
 = 
	`xfs_dú2_Àa‚_add
(
ﬁdblk
->
bp
, 
¨gs
, oldblk->
ödex
);

1401 
îr‹
 = 
	`xfs_dú2_Àa‚_add
(
√wblk
->
bp
, 
¨gs
,Çewblk->
ödex
);

1405 
ﬁdblk
->
hashvÆ
 = 
	`xfs_dú2_Àa‚_œ°hash
(
dp
, oldblk->
bp
, 
NULL
);

1406 
√wblk
->
hashvÆ
 = 
	`xfs_dú2_Àa‚_œ°hash
(
dp
,Çewblk->
bp
, 
NULL
);

1407 
	`xfs_dú3_Àaf_check
(
dp
, 
ﬁdblk
->
bp
);

1408 
	`xfs_dú3_Àaf_check
(
dp
, 
√wblk
->
bp
);

1409  
îr‹
;

1410 
	}
}

1422 
	$xfs_dú2_Àa‚_toosmÆl
(

1423 
xfs_da_°©e_t
 *
°©e
,

1424 *
a˘i⁄
)

1426 
xfs_da_°©e_blk_t
 *
blk
;

1427 
xfs_dablk_t
 
blkno
;

1428 
xfs_buf
 *
bp
;

1429 
byãs
;

1430 
cou¡
;

1431 
îr‹
;

1432 
f‹w¨d
;

1433 
i
;

1434 
xfs_dú2_Àaf_t
 *
Àaf
;

1435 
rvÆ
;

1436 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

1437 
xfs_dú2_Àaf_íåy
 *
íts
;

1438 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

1445 
blk
 = &
°©e
->
∑th
.blk[°©e->∑th.
a˘ive
 - 1];

1446 
Àaf
 = 
blk
->
bp
->
b_addr
;

1447 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

1448 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

1449 
	`xfs_dú3_Àaf_check
(
dp
, 
blk
->
bp
);

1451 
cou¡
 = 
Àafhdr
.cou¡ -Üófhdr.
°Æe
;

1452 
byãs
 = 
dp
->
d_›s
->
Àaf_hdr_size
 + 
cou¡
 * (
íts
[0]);

1453 i‡(
byãs
 > (
°©e
->
¨gs
->
geo
->
blksize
 >> 1)) {

1457 *
a˘i⁄
 = 0;

1466 i‡(
cou¡
 == 0) {

1471 
f‹w¨d
 = (
Àafhdr
.
f‹w
 != 0);

1472 
	`mem˝y
(&
°©e
->
Æç©h
, &°©e->
∑th
, (state->path));

1473 
îr‹
 = 
	`xfs_da3_∑th_shi·
(
°©e
, &°©e->
Æç©h
, 
f‹w¨d
, 0,

1474 &
rvÆ
);

1475 i‡(
îr‹
)

1476  
îr‹
;

1477 *
a˘i⁄
 = 
rvÆ
 ? 2 : 0;

1487 
f‹w¨d
 = 
Àafhdr
.
f‹w
 <Üófhdr.
back
;

1488 
i
 = 0, 
bp
 = 
NULL
; i < 2; 
f‹w¨d
 = !forward, i++) {

1489 
xfs_dú3_i˛óf_hdr
 
hdr2
;

1491 
blkno
 = 
f‹w¨d
 ? 
Àafhdr
.
f‹w
 :Üófhdr.
back
;

1492 i‡(
blkno
 == 0)

1497 
îr‹
 = 
	`xfs_dú3_Àa‚_ªad
(
°©e
->
¨gs
->
å™s
, 
dp
,

1498 
blkno
, -1, &
bp
);

1499 i‡(
îr‹
)

1500  
îr‹
;

1505 
cou¡
 = 
Àafhdr
.cou¡ -Üófhdr.
°Æe
;

1506 
byãs
 = 
°©e
->
¨gs
->
geo
->
blksize
 -

1507 (
°©e
->
¨gs
->
geo
->
blksize
 >> 2);

1509 
Àaf
 = 
bp
->
b_addr
;

1510 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
hdr2
, 
Àaf
);

1511 
íts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

1512 
cou¡
 +
hdr2
.cou¡ - hdr2.
°Æe
;

1513 
byãs
 -
cou¡
 * (
íts
[0]);

1518 i‡(
byãs
 >= 0)

1520 
	`xfs_å™s_bªl£
(
°©e
->
¨gs
->
å™s
, 
bp
);

1525 i‡(
i
 >= 2) {

1526 *
a˘i⁄
 = 0;

1534 
	`mem˝y
(&
°©e
->
Æç©h
, &°©e->
∑th
, (state->path));

1535 i‡(
blkno
 < 
blk
->blkno)

1536 
îr‹
 = 
	`xfs_da3_∑th_shi·
(
°©e
, &°©e->
Æç©h
, 
f‹w¨d
, 0,

1537 &
rvÆ
);

1539 
îr‹
 = 
	`xfs_da3_∑th_shi·
(
°©e
, &°©e->
∑th
, 
f‹w¨d
, 0,

1540 &
rvÆ
);

1541 i‡(
îr‹
) {

1542  
îr‹
;

1544 *
a˘i⁄
 = 
rvÆ
 ? 0 : 1;

1546 
	}
}

1553 
	$xfs_dú2_Àa‚_unbÆ™˚
(

1554 
xfs_da_°©e_t
 *
°©e
,

1555 
xfs_da_°©e_blk_t
 *
dr›_blk
,

1556 
xfs_da_°©e_blk_t
 *
ßve_blk
)

1558 
xfs_da_¨gs_t
 *
¨gs
;

1559 
xfs_dú2_Àaf_t
 *
dr›_Àaf
;

1560 
xfs_dú2_Àaf_t
 *
ßve_Àaf
;

1561 
xfs_dú3_i˛óf_hdr
 
ßvehdr
;

1562 
xfs_dú3_i˛óf_hdr
 
dr›hdr
;

1563 
xfs_dú2_Àaf_íåy
 *
£¡s
;

1564 
xfs_dú2_Àaf_íåy
 *
díts
;

1565 
xfs_öode
 *
dp
 = 
°©e
->
¨gs
->dp;

1567 
¨gs
 = 
°©e
->args;

1568 
	`ASSERT
(
dr›_blk
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
);

1569 
	`ASSERT
(
ßve_blk
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
);

1570 
dr›_Àaf
 = 
dr›_blk
->
bp
->
b_addr
;

1571 
ßve_Àaf
 = 
ßve_blk
->
bp
->
b_addr
;

1573 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
ßvehdr
, 
ßve_Àaf
);

1574 
dp
->
d_›s
->
	`Àaf_hdr_‰om_disk
(&
dr›hdr
, 
dr›_Àaf
);

1575 
£¡s
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
ßve_Àaf
);

1576 
díts
 = 
dp
->
d_›s
->
	`Àaf_íts_p
(
dr›_Àaf
);

1582 i‡(
dr›hdr
.
°Æe
)

1583 
	`xfs_dú3_Àaf_com∑˘
(
¨gs
, &
dr›hdr
, 
dr›_blk
->
bp
);

1584 i‡(
ßvehdr
.
°Æe
)

1585 
	`xfs_dú3_Àaf_com∑˘
(
¨gs
, &
ßvehdr
, 
ßve_blk
->
bp
);

1590 
dr›_blk
->
hashvÆ
 = 
	`be32_to_˝u
(
díts
[
dr›hdr
.
cou¡
 - 1].hashval);

1591 i‡(
	`xfs_dú2_Àa‚_‹dî
(
dp
, 
ßve_blk
->
bp
, 
dr›_blk
->bp))

1592 
	`xfs_dú3_Àa‚_movì¡s
(
¨gs
, 
dr›_blk
->
bp
, &
dr›hdr
, 
díts
, 0,

1593 
ßve_blk
->
bp
, &
ßvehdr
, 
£¡s
, 0,

1594 
dr›hdr
.
cou¡
);

1596 
	`xfs_dú3_Àa‚_movì¡s
(
¨gs
, 
dr›_blk
->
bp
, &
dr›hdr
, 
díts
, 0,

1597 
ßve_blk
->
bp
, &
ßvehdr
, 
£¡s
,

1598 
ßvehdr
.
cou¡
, 
dr›hdr
.count);

1599 
ßve_blk
->
hashvÆ
 = 
	`be32_to_˝u
(
£¡s
[
ßvehdr
.
cou¡
 - 1].hashval);

1602 
dp
->
d_›s
->
	`Àaf_hdr_to_disk
(
ßve_Àaf
, &
ßvehdr
);

1603 
dp
->
d_›s
->
	`Àaf_hdr_to_disk
(
dr›_Àaf
, &
dr›hdr
);

1604 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
ßve_blk
->
bp
);

1605 
	`xfs_dú3_Àaf_log_hódî
(
¨gs
, 
dr›_blk
->
bp
);

1607 
	`xfs_dú3_Àaf_check
(
dp
, 
ßve_blk
->
bp
);

1608 
	`xfs_dú3_Àaf_check
(
dp
, 
dr›_blk
->
bp
);

1609 
	}
}

1615 
	$xfs_dú2_node_add«me
(

1616 
xfs_da_¨gs_t
 *
¨gs
)

1618 
xfs_da_°©e_blk_t
 *
blk
;

1619 
îr‹
;

1620 
rvÆ
;

1621 
xfs_da_°©e_t
 *
°©e
;

1623 
	`åa˚_xfs_dú2_node_add«me
(
¨gs
);

1628 
°©e
 = 
	`xfs_da_°©e_Æloc
();

1629 
°©e
->
¨gs
 =árgs;

1630 
°©e
->
mp
 = 
¨gs
->
dp
->
i_mou¡
;

1635 
îr‹
 = 
	`xfs_da3_node_lookup_öt
(
°©e
, &
rvÆ
);

1636 i‡(
îr‹
)

1637 
rvÆ
 = 
îr‹
;

1638 i‡(
rvÆ
 !-
ENOENT
) {

1639 
d⁄e
;

1645 
rvÆ
 = 
	`xfs_dú2_node_add«me_öt
(
¨gs
,

1646 
°©e
->
exåavÆid
 ? &°©e->
exåablk
 : 
NULL
);

1647 i‡(
rvÆ
) {

1648 
d⁄e
;

1650 
blk
 = &
°©e
->
∑th
.blk[°©e->∑th.
a˘ive
 - 1];

1651 
	`ASSERT
(
blk
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
);

1655 
rvÆ
 = 
	`xfs_dú2_Àa‚_add
(
blk
->
bp
, 
¨gs
, blk->
ödex
);

1656 i‡(
rvÆ
 == 0) {

1660 i‡(!(
¨gs
->
›_Êags
 & 
XFS_DA_OP_JUSTCHECK
))

1661 
	`xfs_da3_fixhash∑th
(
°©e
, &°©e->
∑th
);

1666 i‡(
¨gs
->
tŸÆ
 == 0) {

1667 
	`ASSERT
(
rvÆ
 =-
ENOSPC
);

1668 
d⁄e
;

1673 
rvÆ
 = 
	`xfs_da3_•lô
(
°©e
);

1675 
d⁄e
:

1676 
	`xfs_da_°©e_‰ì
(
°©e
);

1677  
rvÆ
;

1678 
	}
}

1686 
	$xfs_dú2_node_add«me_öt
(

1687 
xfs_da_¨gs_t
 *
¨gs
,

1688 
xfs_da_°©e_blk_t
 *
fblk
)

1690 
xfs_dú2_d©a_hdr_t
 *
hdr
;

1691 
xfs_dú2_db_t
 
dbno
;

1692 
xfs_buf
 *
dbp
;

1693 
xfs_dú2_d©a_íåy_t
 *
dï
;

1694 
xfs_öode_t
 *
dp
;

1695 
xfs_dú2_d©a_unu£d_t
 *
dup
;

1696 
îr‹
;

1697 
xfs_dú2_db_t
 
fbno
;

1698 
xfs_buf
 *
fbp
;

1699 
födex
;

1700 
xfs_dú2_‰ì_t
 *
‰ì
=
NULL
;

1701 
xfs_dú2_db_t
 
ifbno
;

1702 
xfs_dú2_db_t
 
œ°fbno
=0;

1703 
Àngth
;

1704 
log‰ì
;

1705 
xfs_mou¡_t
 *
mp
;

1706 
√edlog
;

1707 
√edsˇn
;

1708 
__be16
 *
ègp
;

1709 
xfs_å™s_t
 *
ç
;

1710 
__be16
 *
be°s
;

1711 
xfs_dú3_ic‰ì_hdr
 
‰ìhdr
;

1712 
xfs_dú2_d©a_‰ì
 *
bf
;

1714 
dp
 = 
¨gs
->dp;

1715 
mp
 = 
dp
->
i_mou¡
;

1716 
ç
 = 
¨gs
->
å™s
;

1717 
Àngth
 = 
dp
->
d_›s
->
	`d©a_ítsize
(
¨gs
->
«mñí
);

1723 i‡(
fblk
) {

1724 
fbp
 = 
fblk
->
bp
;

1728 
ifbno
 = 
fblk
->
blkno
;

1729 
‰ì
 = 
fbp
->
b_addr
;

1730 
födex
 = 
fblk
->
ödex
;

1731 
be°s
 = 
dp
->
d_›s
->
	`‰ì_be°s_p
(
‰ì
);

1732 
dp
->
d_›s
->
	`‰ì_hdr_‰om_disk
(&
‰ìhdr
, 
‰ì
);

1739 i‡(
födex
 >= 0) {

1740 
	`ASSERT
(
födex
 < 
‰ìhdr
.
nvÆid
);

1741 
	`ASSERT
(
	`be16_to_˝u
(
be°s
[
födex
]Ë!
NULLDATAOFF
);

1742 
	`ASSERT
(
	`be16_to_˝u
(
be°s
[
födex
]Ë>
Àngth
);

1743 
dbno
 = 
‰ìhdr
.
fú°db
 + 
födex
;

1749 
dbno
 = -1;

1750 
födex
 = 0;

1756 
ifbno
 = 
dbno
 = -1;

1757 
fbp
 = 
NULL
;

1758 
födex
 = 0;

1766 i‡(
dbno
 == -1) {

1767 
xfs_fûeoff_t
 
fo
;

1769 i‡((
îr‹
 = 
	`xfs_bm≠_œ°_off£t
(
dp
, &
fo
, 
XFS_DATA_FORK
)))

1770  
îr‹
;

1771 
œ°fbno
 = 
	`xfs_dú2_da_to_db
(
¨gs
->
geo
, (
xfs_dablk_t
)
fo
);

1772 
fbno
 = 
ifbno
;

1779 
dbno
 == -1) {

1783 i‡(
fbp
 =
NULL
) {

1788 i‡(++
fbno
 == 0)

1789 
fbno
 = 
	`xfs_dú2_byã_to_db
(
¨gs
->
geo
,

1790 
XFS_DIR2_FREE_OFFSET
);

1794 i‡(
fbno
 =
ifbno
)

1795 
fbno
++;

1799 i‡(
fbno
 >
œ°fbno
)

1807 
îr‹
 = 
	`xfs_dú2_‰ì_åy_ªad
(
ç
, 
dp
,

1808 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
fbno
),

1809 &
fbp
);

1810 i‡(
îr‹
)

1811  
îr‹
;

1812 i‡(!
fbp
)

1814 
‰ì
 = 
fbp
->
b_addr
;

1815 
födex
 = 0;

1825 
be°s
 = 
dp
->
d_›s
->
	`‰ì_be°s_p
(
‰ì
);

1826 
dp
->
d_›s
->
	`‰ì_hdr_‰om_disk
(&
‰ìhdr
, 
‰ì
);

1827 i‡(
	`be16_to_˝u
(
be°s
[
födex
]Ë!
NULLDATAOFF
 &&

1828 
	`be16_to_˝u
(
be°s
[
födex
]Ë>
Àngth
)

1829 
dbno
 = 
‰ìhdr
.
fú°db
 + 
födex
;

1834 i‡(++
födex
 =
‰ìhdr
.
nvÆid
) {

1838 
	`xfs_å™s_bªl£
(
ç
, 
fbp
);

1839 
fbp
 = 
NULL
;

1840 i‡(
fblk
 && fblk->
bp
)

1841 
fblk
->
bp
 = 
NULL
;

1849 i‡(
	`u∆ikñy
(
dbno
 == -1)) {

1853 i‡((
¨gs
->
›_Êags
 & 
XFS_DA_OP_JUSTCHECK
Ë||árgs->
tŸÆ
 == 0)

1854  -
ENOSPC
;

1859 i‡(
	`u∆ikñy
((
îr‹
 = 
	`xfs_dú2_grow_öode
(
¨gs
,

1860 
XFS_DIR2_DATA_SPACE
,

1861 &
dbno
)) ||

1862 (
îr‹
 = 
	`xfs_dú3_d©a_öô
(
¨gs
, 
dbno
, &
dbp
))))

1863  
îr‹
;

1868 i‡(
fbp
)

1869 
	`xfs_å™s_bªl£
(
ç
, 
fbp
);

1870 i‡(
fblk
 && fblk->
bp
)

1871 
fblk
->
bp
 = 
NULL
;

1877 
fbno
 = 
dp
->
d_›s
->
	`db_to_fdb
(
¨gs
->
geo
, 
dbno
);

1878 
îr‹
 = 
	`xfs_dú2_‰ì_åy_ªad
(
ç
, 
dp
,

1879 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
fbno
),

1880 &
fbp
);

1881 i‡(
îr‹
)

1882  
îr‹
;

1888 i‡(!
fbp
) {

1889 
îr‹
 = 
	`xfs_dú2_grow_öode
(
¨gs
, 
XFS_DIR2_FREE_SPACE
,

1890 &
fbno
);

1891 i‡(
îr‹
)

1892  
îr‹
;

1894 i‡(
dp
->
d_›s
->
	`db_to_fdb
(
¨gs
->
geo
, 
dbno
Ë!
fbno
) {

1895 
	`xfs_Æît
(
mp
,

1897 
__func__
, ()
dp
->
i_öo
,

1898 ()
dp
->
d_›s
->
	`db_to_fdb
(

1899 
¨gs
->
geo
, 
dbno
),

1900 ()
dbno
, ()
fbno
,

1901 ()
ifbno
, 
œ°fbno
);

1902 i‡(
fblk
) {

1903 
	`xfs_Æît
(
mp
,

1905 
fblk
,

1906 ()
fblk
->
blkno
,

1907 
fblk
->
ödex
,

1908 
fblk
->
magic
);

1910 
	`xfs_Æît
(
mp
, " ... fblk is NULL");

1912 
	`XFS_ERROR_REPORT
("xfs_dir2_node_addname_int",

1913 
XFS_ERRLEVEL_LOW
, 
mp
);

1914  -
EFSCORRUPTED
;

1920 
îr‹
 = 
	`xfs_dú3_‰ì_gë_buf
(
¨gs
, 
fbno
, &
fbp
);

1921 i‡(
îr‹
)

1922  
îr‹
;

1923 
‰ì
 = 
fbp
->
b_addr
;

1924 
be°s
 = 
dp
->
d_›s
->
	`‰ì_be°s_p
(
‰ì
);

1925 
dp
->
d_›s
->
	`‰ì_hdr_‰om_disk
(&
‰ìhdr
, 
‰ì
);

1930 
‰ìhdr
.
fú°db
 =

1931 (
fbno
 - 
	`xfs_dú2_byã_to_db
(
¨gs
->
geo
,

1932 
XFS_DIR2_FREE_OFFSET
)) *

1933 
dp
->
d_›s
->
	`‰ì_max_be°s
(
¨gs
->
geo
);

1935 
‰ì
 = 
fbp
->
b_addr
;

1936 
be°s
 = 
dp
->
d_›s
->
	`‰ì_be°s_p
(
‰ì
);

1937 
dp
->
d_›s
->
	`‰ì_hdr_‰om_disk
(&
‰ìhdr
, 
‰ì
);

1943 
födex
 = 
dp
->
d_›s
->
	`db_to_fdödex
(
¨gs
->
geo
, 
dbno
);

1948 i‡(
födex
 >
‰ìhdr
.
nvÆid
) {

1949 
	`ASSERT
(
födex
 < 
dp
->
d_›s
->
	`‰ì_max_be°s
(
¨gs
->
geo
));

1950 
‰ìhdr
.
nvÆid
 = 
födex
 + 1;

1954 
be°s
[
födex
] = 
	`˝u_to_be16
(
NULLDATAOFF
);

1960 i‡(
be°s
[
födex
] =
	`˝u_to_be16
(
NULLDATAOFF
)) {

1961 
‰ìhdr
.
nu£d
++;

1962 
dp
->
d_›s
->
	`‰ì_hdr_to_disk
(
fbp
->
b_addr
, &
‰ìhdr
);

1963 
	`xfs_dú2_‰ì_log_hódî
(
¨gs
, 
fbp
);

1970 
hdr
 = 
dbp
->
b_addr
;

1971 
bf
 = 
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

1972 
be°s
[
födex
] = 
bf
[0].
Àngth
;

1973 
log‰ì
 = 1;

1982 i‡(
¨gs
->
›_Êags
 & 
XFS_DA_OP_JUSTCHECK
)

1988 
îr‹
 = 
	`xfs_dú3_d©a_ªad
(
ç
, 
dp
,

1989 
	`xfs_dú2_db_to_da
(
¨gs
->
geo
, 
dbno
),

1990 -1, &
dbp
);

1991 i‡(
îr‹
)

1992  
îr‹
;

1993 
hdr
 = 
dbp
->
b_addr
;

1994 
bf
 = 
dp
->
d_›s
->
	`d©a_be°‰ì_p
(
hdr
);

1995 
log‰ì
 = 0;

1997 
	`ASSERT
(
	`be16_to_˝u
(
bf
[0].
Àngth
) >=Üength);

2001 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)

2002 ((*)
hdr
 + 
	`be16_to_˝u
(
bf
[0].
off£t
));

2003 
√edsˇn
 = 
√edlog
 = 0;

2007 
	`xfs_dú2_d©a_u£_‰ì
(
¨gs
, 
dbp
, 
dup
,

2008 (
xfs_dú2_d©a_aoff_t
)((*)
dup
 - (*)
hdr
), 
Àngth
,

2009 &
√edlog
, &
√edsˇn
);

2013 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
dup
;

2014 
dï
->
öumbî
 = 
	`˝u_to_be64
(
¨gs
->inumber);

2015 
dï
->
«mñí
 = 
¨gs
->namelen;

2016 
	`mem˝y
(
dï
->
«me
, 
¨gs
->«me, dï->
«mñí
);

2017 
dp
->
d_›s
->
	`d©a_put_·y≥
(
dï
, 
¨gs
->
fûëy≥
);

2018 
ègp
 = 
dp
->
d_›s
->
	`d©a_íåy_èg_p
(
dï
);

2019 *
ègp
 = 
	`˝u_to_be16
((*)
dï
 - (*)
hdr
);

2020 
	`xfs_dú2_d©a_log_íåy
(
¨gs
, 
dbp
, 
dï
);

2024 i‡(
√edsˇn
)

2025 
	`xfs_dú2_d©a_‰ìsˇn
(
dp
, 
hdr
, &
√edlog
);

2029 i‡(
√edlog
)

2030 
	`xfs_dú2_d©a_log_hódî
(
¨gs
, 
dbp
);

2034 
be°s
 = 
dp
->
d_›s
->
	`‰ì_be°s_p
(
‰ì
);

2035 i‡(
	`be16_to_˝u
(
be°s
[
födex
]Ë!be16_to_˝u(
bf
[0].
Àngth
)) {

2036 
be°s
[
födex
] = 
bf
[0].
Àngth
;

2037 
log‰ì
 = 1;

2042 i‡(
log‰ì
)

2043 
	`xfs_dú2_‰ì_log_be°s
(
¨gs
, 
fbp
, 
födex
, findex);

2047 
¨gs
->
blkno
 = (
xfs_dablk_t
)
dbno
;

2048 
¨gs
->
ödex
 = 
	`be16_to_˝u
(*
ègp
);

2050 
	}
}

2058 
	$xfs_dú2_node_lookup
(

2059 
xfs_da_¨gs_t
 *
¨gs
)

2061 
îr‹
;

2062 
i
;

2063 
rvÆ
;

2064 
xfs_da_°©e_t
 *
°©e
;

2066 
	`åa˚_xfs_dú2_node_lookup
(
¨gs
);

2071 
°©e
 = 
	`xfs_da_°©e_Æloc
();

2072 
°©e
->
¨gs
 =árgs;

2073 
°©e
->
mp
 = 
¨gs
->
dp
->
i_mou¡
;

2077 
îr‹
 = 
	`xfs_da3_node_lookup_öt
(
°©e
, &
rvÆ
);

2078 i‡(
îr‹
)

2079 
rvÆ
 = 
îr‹
;

2080 i‡(
rvÆ
 =-
ENOENT
 && 
¨gs
->
cm¥esu…
 =
XFS_CMP_CASE
) {

2082 
xfs_dú2_d©a_íåy_t
 *
dï
;

2084 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)

2085 ((*)
°©e
->
exåablk
.
bp
->
b_addr
 +

2086 
°©e
->
exåablk
.
ödex
);

2087 
rvÆ
 = 
	`xfs_dú_cûookup_ªsu…
(
¨gs
, 
dï
->
«me
, dï->
«mñí
);

2092 
i
 = 0; i < 
°©e
->
∑th
.
a˘ive
; i++) {

2093 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
°©e
->
∑th
.
blk
[
i
].
bp
);

2094 
°©e
->
∑th
.
blk
[
i
].
bp
 = 
NULL
;

2099 i‡(
°©e
->
exåavÆid
 && sèã->
exåablk
.
bp
) {

2100 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
°©e
->
exåablk
.
bp
);

2101 
°©e
->
exåablk
.
bp
 = 
NULL
;

2103 
	`xfs_da_°©e_‰ì
(
°©e
);

2104  
rvÆ
;

2105 
	}
}

2111 
	$xfs_dú2_node_ªmovíame
(

2112 
xfs_da_¨gs
 *
¨gs
)

2114 
xfs_da_°©e_blk
 *
blk
;

2115 
îr‹
;

2116 
rvÆ
;

2117 
xfs_da_°©e
 *
°©e
;

2119 
	`åa˚_xfs_dú2_node_ªmovíame
(
¨gs
);

2124 
°©e
 = 
	`xfs_da_°©e_Æloc
();

2125 
°©e
->
¨gs
 =árgs;

2126 
°©e
->
mp
 = 
¨gs
->
dp
->
i_mou¡
;

2129 
îr‹
 = 
	`xfs_da3_node_lookup_öt
(
°©e
, &
rvÆ
);

2130 i‡(
îr‹
)

2131 
out_‰ì
;

2134 i‡(
rvÆ
 !-
EEXIST
) {

2135 
îr‹
 = 
rvÆ
;

2136 
out_‰ì
;

2139 
blk
 = &
°©e
->
∑th
.blk[°©e->∑th.
a˘ive
 - 1];

2140 
	`ASSERT
(
blk
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
);

2141 
	`ASSERT
(
°©e
->
exåavÆid
);

2146 
îr‹
 = 
	`xfs_dú2_Àa‚_ªmove
(
¨gs
, 
blk
->
bp
, blk->
ödex
,

2147 &
°©e
->
exåablk
, &
rvÆ
);

2148 i‡(
îr‹
)

2149 
out_‰ì
;

2153 
	`xfs_da3_fixhash∑th
(
°©e
, &°©e->
∑th
);

2157 i‡(
rvÆ
 && 
°©e
->
∑th
.
a˘ive
 > 1)

2158 
îr‹
 = 
	`xfs_da3_joö
(
°©e
);

2162 i‡(!
îr‹
)

2163 
îr‹
 = 
	`xfs_dú2_node_to_Àaf
(
°©e
);

2164 
out_‰ì
:

2165 
	`xfs_da_°©e_‰ì
(
°©e
);

2166  
îr‹
;

2167 
	}
}

2173 
	$xfs_dú2_node_ª∂a˚
(

2174 
xfs_da_¨gs_t
 *
¨gs
)

2176 
xfs_da_°©e_blk_t
 *
blk
;

2177 
xfs_dú2_d©a_hdr_t
 *
hdr
;

2178 
xfs_dú2_d©a_íåy_t
 *
dï
;

2179 
îr‹
;

2180 
i
;

2181 
xfs_öo_t
 
öum
;

2182 
·y≥
;

2183 
xfs_dú2_Àaf_t
 *
Àaf
;

2184 
xfs_dú2_Àaf_íåy_t
 *
Àp
;

2185 
rvÆ
;

2186 
xfs_da_°©e_t
 *
°©e
;

2188 
	`åa˚_xfs_dú2_node_ª∂a˚
(
¨gs
);

2193 
°©e
 = 
	`xfs_da_°©e_Æloc
();

2194 
°©e
->
¨gs
 =árgs;

2195 
°©e
->
mp
 = 
¨gs
->
dp
->
i_mou¡
;

2201 
öum
 = 
¨gs
->
öumbî
;

2202 
·y≥
 = 
¨gs
->
fûëy≥
;

2207 
îr‹
 = 
	`xfs_da3_node_lookup_öt
(
°©e
, &
rvÆ
);

2208 i‡(
îr‹
) {

2209 
rvÆ
 = 
îr‹
;

2215 i‡(
rvÆ
 =-
EEXIST
) {

2216 
xfs_dú2_Àaf_íåy
 *
íts
;

2220 
blk
 = &
°©e
->
∑th
.blk[°©e->∑th.
a˘ive
 - 1];

2221 
	`ASSERT
(
blk
->
magic
 =
XFS_DIR2_LEAFN_MAGIC
);

2222 
Àaf
 = 
blk
->
bp
->
b_addr
;

2223 
íts
 = 
¨gs
->
dp
->
d_›s
->
	`Àaf_íts_p
(
Àaf
);

2224 
Àp
 = &
íts
[
blk
->
ödex
];

2225 
	`ASSERT
(
°©e
->
exåavÆid
);

2229 
hdr
 = 
°©e
->
exåablk
.
bp
->
b_addr
;

2230 
	`ASSERT
(
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR2_DATA_MAGIC
) ||

2231 
hdr
->
magic
 =
	`˝u_to_be32
(
XFS_DIR3_DATA_MAGIC
));

2232 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)

2233 ((*)
hdr
 +

2234 
	`xfs_dú2_d©≠å_to_off
(
¨gs
->
geo
,

2235 
	`be32_to_˝u
(
Àp
->
addªss
)));

2236 
	`ASSERT
(
öum
 !
	`be64_to_˝u
(
dï
->
öumbî
));

2240 
dï
->
öumbî
 = 
	`˝u_to_be64
(
öum
);

2241 
¨gs
->
dp
->
d_›s
->
	`d©a_put_·y≥
(
dï
, 
·y≥
);

2242 
	`xfs_dú2_d©a_log_íåy
(
¨gs
, 
°©e
->
exåablk
.
bp
, 
dï
);

2243 
rvÆ
 = 0;

2248 i‡(
°©e
->
exåavÆid
) {

2249 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
°©e
->
exåablk
.
bp
);

2250 
°©e
->
exåablk
.
bp
 = 
NULL
;

2255 
i
 = 0; i < 
°©e
->
∑th
.
a˘ive
; i++) {

2256 
	`xfs_å™s_bªl£
(
¨gs
->
å™s
, 
°©e
->
∑th
.
blk
[
i
].
bp
);

2257 
°©e
->
∑th
.
blk
[
i
].
bp
 = 
NULL
;

2259 
	`xfs_da_°©e_‰ì
(
°©e
);

2260  
rvÆ
;

2261 
	}
}

2268 
	$xfs_dú2_node_åim_‰ì
(

2269 
xfs_da_¨gs_t
 *
¨gs
,

2270 
xfs_fûeoff_t
 
fo
,

2271 *
rvÆp
)

2273 
xfs_buf
 *
bp
;

2274 
xfs_öode_t
 *
dp
;

2275 
îr‹
;

2276 
xfs_dú2_‰ì_t
 *
‰ì
;

2277 
xfs_å™s_t
 *
ç
;

2278 
xfs_dú3_ic‰ì_hdr
 
‰ìhdr
;

2280 
dp
 = 
¨gs
->dp;

2281 
ç
 = 
¨gs
->
å™s
;

2283 *
rvÆp
 = 0;

2288 
îr‹
 = 
	`xfs_dú2_‰ì_åy_ªad
(
ç
, 
dp
, 
fo
, &
bp
);

2289 i‡(
îr‹
)

2290  
îr‹
;

2295 i‡(!
bp
)

2297 
‰ì
 = 
bp
->
b_addr
;

2298 
dp
->
d_›s
->
	`‰ì_hdr_‰om_disk
(&
‰ìhdr
, 
‰ì
);

2303 i‡(
‰ìhdr
.
nu£d
 > 0) {

2304 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

2310 
îr‹
 = 
	`xfs_dú2_shrök_öode
(
¨gs
,

2311 
	`xfs_dú2_da_to_db
(
¨gs
->
geo
, (
xfs_dablk_t
)
fo
), 
bp
);

2312 i‡(
îr‹
) {

2318 
	`ASSERT
(
îr‹
 !-
ENOSPC
);

2319 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

2320  
îr‹
;

2325 *
rvÆp
 = 1;

2327 
	}
}

	@libxfs/xfs_dir2_priv.h

18 #i‚de‡
__XFS_DIR2_PRIV_H__


19 
	#__XFS_DIR2_PRIV_H__


	)

21 
	gdú_c⁄ãxt
;

24 
xfs_dú2_grow_öode
(
xfs_da_¨gs
 *
¨gs
, 
•a˚
,

25 
xfs_dú2_db_t
 *
dbp
);

26 
xfs_dú_cûookup_ªsu…
(
xfs_da_¨gs
 *
¨gs
,

27 c⁄° *
«me
, 
Àn
);

31 
xfs_dú3_block_ªad
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

32 
xfs_buf
 **
bµ
);

33 
xfs_dú2_block_add«me
(
xfs_da_¨gs
 *
¨gs
);

34 
xfs_dú2_block_lookup
(
xfs_da_¨gs
 *
¨gs
);

35 
xfs_dú2_block_ªmovíame
(
xfs_da_¨gs
 *
¨gs
);

36 
xfs_dú2_block_ª∂a˚
(
xfs_da_¨gs
 *
¨gs
);

37 
xfs_dú2_Àaf_to_block
(
xfs_da_¨gs
 *
¨gs
,

38 
xfs_buf
 *
lbp
, xfs_bu‡*
dbp
);

41 #ifde‡
DEBUG


42 
	#xfs_dú3_d©a_check
(
dp
,
bp
Ë
	`__xfs_dú3_d©a_check
(dp, bp);

	)

44 
	#xfs_dú3_d©a_check
(
dp
,
bp
)

	)

47 
__xfs_dú3_d©a_check
(
xfs_öode
 *
dp
, 
xfs_buf
 *
bp
);

48 
xfs_dú3_d©a_ªad
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

49 
xfs_dablk_t
 
bno
, 
xfs_daddr_t
 
m≠≥d_bno
, 
xfs_buf
 **
bµ
);

50 
xfs_dú3_d©a_ªadahód
(
xfs_öode
 *
dp
, 
xfs_dablk_t
 
bno
,

51 
xfs_daddr_t
 
m≠≥d_bno
);

53 
xfs_dú2_d©a_‰ì
 *

54 
xfs_dú2_d©a_‰ìö£π
(
xfs_dú2_d©a_hdr
 *
hdr
,

55 
xfs_dú2_d©a_‰ì
 *
bf
, 
xfs_dú2_d©a_unu£d
 *
dup
,

56 *
loghód
);

57 
xfs_dú3_d©a_öô
(
xfs_da_¨gs
 *
¨gs
, 
xfs_dú2_db_t
 
blkno
,

58 
xfs_buf
 **
bµ
);

61 
xfs_dú3_Àa‚_ªad
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

62 
xfs_dablk_t
 
fbno
, 
xfs_daddr_t
 
m≠≥dbno
, 
xfs_buf
 **
bµ
);

63 
xfs_dú2_block_to_Àaf
(
xfs_da_¨gs
 *
¨gs
,

64 
xfs_buf
 *
dbp
);

65 
xfs_dú2_Àaf_add«me
(
xfs_da_¨gs
 *
¨gs
);

66 
xfs_dú3_Àaf_com∑˘
(
xfs_da_¨gs
 *
¨gs
,

67 
xfs_dú3_i˛óf_hdr
 *
Àafhdr
, 
xfs_buf
 *
bp
);

68 
xfs_dú3_Àaf_com∑˘_x1
(
xfs_dú3_i˛óf_hdr
 *
Àafhdr
,

69 
xfs_dú2_Àaf_íåy
 *
íts
, *
ödexp
,

70 *
low°Æï
, *
high°Æï
, *
lowlogp
, *
highlogp
);

71 
xfs_dú3_Àaf_gë_buf
(
xfs_da_¨gs
 *
¨gs
, 
xfs_dú2_db_t
 
bno
,

72 
xfs_buf
 **
bµ
, 
__uöt16_t
 
magic
);

73 
xfs_dú3_Àaf_log_íts
(
xfs_da_¨gs
 *
¨gs
,

74 
xfs_buf
 *
bp
, 
fú°
, 
œ°
);

75 
xfs_dú3_Àaf_log_hódî
(
xfs_da_¨gs
 *
¨gs
,

76 
xfs_buf
 *
bp
);

77 
xfs_dú2_Àaf_lookup
(
xfs_da_¨gs
 *
¨gs
);

78 
xfs_dú2_Àaf_ªmovíame
(
xfs_da_¨gs
 *
¨gs
);

79 
xfs_dú2_Àaf_ª∂a˚
(
xfs_da_¨gs
 *
¨gs
);

80 
xfs_dú2_Àaf_£¨ch_hash
(
xfs_da_¨gs
 *
¨gs
,

81 
xfs_buf
 *
lbp
);

82 
xfs_dú2_Àaf_åim_d©a
(
xfs_da_¨gs
 *
¨gs
,

83 
xfs_buf
 *
lbp
, 
xfs_dú2_db_t
 
db
);

84 
xfs_dú2_Àaf_íåy
 *

85 
xfs_dú3_Àaf_föd_íåy
(
xfs_dú3_i˛óf_hdr
 *
Àafhdr
,

86 
xfs_dú2_Àaf_íåy
 *
íts
, 
ödex
, 
com∑˘
,

87 
low°Æe
, 
high°Æe
, *
lÊoglow
, *
lÊoghigh
);

88 
xfs_dú2_node_to_Àaf
(
xfs_da_°©e
 *
°©e
);

90 
boﬁ
 
xfs_dú3_Àaf_check_öt
(
xfs_mou¡
 *
mp
, 
xfs_öode
 *
dp
,

91 
xfs_dú3_i˛óf_hdr
 *
hdr
, 
xfs_dú2_Àaf
 *
Àaf
);

94 
xfs_dú2_Àaf_to_node
(
xfs_da_¨gs
 *
¨gs
,

95 
xfs_buf
 *
lbp
);

96 
xfs_dahash_t
 
xfs_dú2_Àa‚_œ°hash
(
xfs_öode
 *
dp
,

97 
xfs_buf
 *
bp
, *
cou¡
);

98 
xfs_dú2_Àa‚_lookup_öt
(
xfs_buf
 *
bp
,

99 
xfs_da_¨gs
 *
¨gs
, *
ödexp
,

100 
xfs_da_°©e
 *
°©e
);

101 
xfs_dú2_Àa‚_‹dî
(
xfs_öode
 *
dp
, 
xfs_buf
 *
Àaf1_bp
,

102 
xfs_buf
 *
Àaf2_bp
);

103 
xfs_dú2_Àa‚_•lô
(
xfs_da_°©e
 *
°©e
,

104 
xfs_da_°©e_blk
 *
ﬁdblk
, xfs_da_°©e_blk *
√wblk
);

105 
xfs_dú2_Àa‚_toosmÆl
(
xfs_da_°©e
 *
°©e
, *
a˘i⁄
);

106 
xfs_dú2_Àa‚_unbÆ™˚
(
xfs_da_°©e
 *
°©e
,

107 
xfs_da_°©e_blk
 *
dr›_blk
,

108 
xfs_da_°©e_blk
 *
ßve_blk
);

109 
xfs_dú2_node_add«me
(
xfs_da_¨gs
 *
¨gs
);

110 
xfs_dú2_node_lookup
(
xfs_da_¨gs
 *
¨gs
);

111 
xfs_dú2_node_ªmovíame
(
xfs_da_¨gs
 *
¨gs
);

112 
xfs_dú2_node_ª∂a˚
(
xfs_da_¨gs
 *
¨gs
);

113 
xfs_dú2_node_åim_‰ì
(
xfs_da_¨gs
 *
¨gs
, 
xfs_fûeoff_t
 
fo
,

114 *
rvÆp
);

115 
xfs_dú2_‰ì_ªad
(
xfs_å™s
 *
ç
, 
xfs_öode
 *
dp
,

116 
xfs_dablk_t
 
fbno
, 
xfs_buf
 **
bµ
);

119 
xfs_dú2_block_sfsize
(
xfs_öode
 *
dp
,

120 
xfs_dú2_d©a_hdr
 *
block
, 
xfs_dú2_sf_hdr
 *
sfhp
);

121 
xfs_dú2_block_to_sf
(
xfs_da_¨gs
 *
¨gs
, 
xfs_buf
 *
bp
,

122 
size
, 
xfs_dú2_sf_hdr_t
 *
sfhp
);

123 
xfs_dú2_sf_add«me
(
xfs_da_¨gs
 *
¨gs
);

124 
xfs_dú2_sf_¸óã
(
xfs_da_¨gs
 *
¨gs
, 
xfs_öo_t
 
pöo
);

125 
xfs_dú2_sf_lookup
(
xfs_da_¨gs
 *
¨gs
);

126 
xfs_dú2_sf_ªmovíame
(
xfs_da_¨gs
 *
¨gs
);

127 
xfs_dú2_sf_ª∂a˚
(
xfs_da_¨gs
 *
¨gs
);

128 
xfs_dú2_sf_vîify
(
xfs_mou¡
 *
mp
, 
xfs_dú2_sf_hdr
 *
sÂ
,

129 
size
);

132 
xfs_ªaddú
(
xfs_öode
 *
dp
, 
dú_c⁄ãxt
 *
˘x
,

133 
size_t
 
bufsize
);

	@libxfs/xfs_dir2_sf.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_f‹m©.h
"

21 
	~"xfs_log_f‹m©.h
"

22 
	~"xfs_å™s_ªsv.h
"

23 
	~"xfs_mou¡.h
"

24 
	~"xfs_da_f‹m©.h
"

25 
	~"xfs_da_båì.h
"

26 
	~"xfs_öode.h
"

27 
	~"xfs_å™s.h
"

28 
	~"xfs_dú2.h
"

29 
	~"xfs_dú2_¥iv.h
"

30 
	~"xfs_åa˚.h
"

35 
xfs_dú2_sf_add«me_ósy
(
xfs_da_¨gs_t
 *
¨gs
,

36 
xfs_dú2_sf_íåy_t
 *
s„p
,

37 
xfs_dú2_d©a_aoff_t
 
off£t
,

38 
√w_isize
);

39 
xfs_dú2_sf_add«me_h¨d
(
xfs_da_¨gs_t
 *
¨gs
, 
objch™ge
,

40 
√w_isize
);

41 
xfs_dú2_sf_add«me_pick
(
xfs_da_¨gs_t
 *
¨gs
, 
objch™ge
,

42 
xfs_dú2_sf_íåy_t
 **
s„µ
,

43 
xfs_dú2_d©a_aoff_t
 *
off£ç
);

44 #ifde‡
DEBUG


45 
xfs_dú2_sf_check
(
xfs_da_¨gs_t
 *
¨gs
);

47 
	#xfs_dú2_sf_check
(
¨gs
)

	)

50 
xfs_dú2_sf_toöo4
(
xfs_da_¨gs_t
 *
¨gs
);

51 
xfs_dú2_sf_toöo8
(
xfs_da_¨gs_t
 *
¨gs
);

60 
	$xfs_dú2_block_sfsize
(

61 
xfs_öode_t
 *
dp
,

62 
xfs_dú2_d©a_hdr_t
 *
hdr
,

63 
xfs_dú2_sf_hdr_t
 *
sfhp
)

65 
xfs_dú2_d©≠å_t
 
addr
;

66 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

67 
xfs_dú2_block_èû_t
 *
bç
;

68 
cou¡
;

69 
xfs_dú2_d©a_íåy_t
 *
dï
;

70 
i
;

71 
i8cou¡
;

72 
isdŸ
;

73 
isdŸdŸ
;

74 
xfs_mou¡_t
 *
mp
;

75 
«mñí
;

76 
xfs_öo_t
 
∑ª¡
 = 0;

77 
size
=0;

78 
has_·y≥
;

79 
xfs_da_geomëry
 *
geo
;

81 
mp
 = 
dp
->
i_mou¡
;

82 
geo
 = 
mp
->
m_dú_geo
;

88 
has_·y≥
 = 
	`xfs_sb_vîsi⁄_has·y≥
(&
mp
->
m_sb
) ? 1 : 0;

90 
cou¡
 = 
i8cou¡
 = 
«mñí
 = 0;

91 
bç
 = 
	`xfs_dú2_block_èû_p
(
geo
, 
hdr
);

92 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

97 
i
 = 0; i < 
	`be32_to_˝u
(
bç
->
cou¡
); i++) {

98 i‡((
addr
 = 
	`be32_to_˝u
(
bÕ
[
i
].
addªss
)Ë=
XFS_DIR2_NULL_DATAPTR
)

103 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)((*)
hdr
 +

104 
	`xfs_dú2_d©≠å_to_off
(
geo
, 
addr
));

110 
isdŸ
 = 
dï
->
«mñí
 =1 && dï->
«me
[0] == '.';

111 
isdŸdŸ
 =

112 
dï
->
«mñí
 == 2 &&

113 
dï
->
«me
[0] == '.' && dep->name[1] == '.';

115 i‡(!
isdŸ
)

116 
i8cou¡
 +
	`be64_to_˝u
(
dï
->
öumbî
Ë> 
XFS_DIR2_MAX_SHORT_INUM
;

119 i‡(!
isdŸ
 && !
isdŸdŸ
) {

120 
cou¡
++;

121 
«mñí
 +
dï
->«mñí + 
has_·y≥
;

122 } i‡(
isdŸdŸ
)

123 
∑ª¡
 = 
	`be64_to_˝u
(
dï
->
öumbî
);

127 
size
 = 
	`xfs_dú2_sf_hdr_size
(
i8cou¡
) +

128 
cou¡
 * 3 * (
__u8
) +

129 
«mñí
 +

130 (
i8cou¡
 ?

131 
cou¡
 * 
XFS_INO64_SIZE
 :

132 
cou¡
 * 
XFS_INO32_SIZE
);

133 i‡(
size
 > 
	`XFS_IFORK_DSIZE
(
dp
))

134  
size
;

139 
sfhp
->
cou¡
 = count;

140 
sfhp
->
i8cou¡
 = i8count;

141 
dp
->
d_›s
->
	`sf_put_∑ª¡_öo
(
sfhp
, 
∑ª¡
);

142  
size
;

143 
	}
}

150 
	$xfs_dú2_block_to_sf
(

151 
xfs_da_¨gs_t
 *
¨gs
,

152 
xfs_buf
 *
bp
,

153 
size
,

154 
xfs_dú2_sf_hdr_t
 *
sfhp
)

156 
xfs_dú2_d©a_hdr_t
 *
hdr
;

157 
xfs_dú2_block_èû_t
 *
bç
;

158 
xfs_dú2_d©a_íåy_t
 *
dï
;

159 
xfs_öode_t
 *
dp
;

160 
xfs_dú2_d©a_unu£d_t
 *
dup
;

161 *
íd±r
;

162 
îr‹
;

163 
logÊags
;

164 
xfs_mou¡_t
 *
mp
;

165 *
±r
;

166 
xfs_dú2_sf_íåy_t
 *
s„p
;

167 
xfs_dú2_sf_hdr_t
 *
sÂ
;

168 
xfs_dú2_sf_hdr_t
 *
d°
;

170 
	`åa˚_xfs_dú2_block_to_sf
(
¨gs
);

172 
dp
 = 
¨gs
->dp;

173 
mp
 = 
dp
->
i_mou¡
;

181 
d°
 = 
	`kmem_Æloc
(
mp
->
m_sb
.
sb_öodesize
, 
KM_SLEEP
);

182 
hdr
 = 
bp
->
b_addr
;

187 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
d°
;

188 
	`mem˝y
(
sÂ
, 
sfhp
, 
	`xfs_dú2_sf_hdr_size
(sfhp->
i8cou¡
));

193 
bç
 = 
	`xfs_dú2_block_èû_p
(
¨gs
->
geo
, 
hdr
);

194 
±r
 = (*)
dp
->
d_›s
->
	`d©a_íåy_p
(
hdr
);

195 
íd±r
 = (*)
	`xfs_dú2_block_Àaf_p
(
bç
);

196 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
);

201 
±r
 < 
íd±r
) {

205 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

206 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

207 
±r
 +
	`be16_to_˝u
(
dup
->
Àngth
);

210 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
±r
;

214 i‡(
dï
->
«mñí
 =1 && dï->
«me
[0] == '.')

215 
	`ASSERT
(
	`be64_to_˝u
(
dï
->
öumbî
Ë=
dp
->
i_öo
);

219 i‡(
dï
->
«mñí
 == 2 &&

220 
dï
->
«me
[0] == '.' && dep->name[1] == '.')

221 
	`ASSERT
(
	`be64_to_˝u
(
dï
->
öumbî
) ==

222 
dp
->
d_›s
->
	`sf_gë_∑ª¡_öo
(
sÂ
));

227 
s„p
->
«mñí
 = 
dï
->namelen;

228 
	`xfs_dú2_sf_put_off£t
(
s„p
,

229 (
xfs_dú2_d©a_aoff_t
)

230 ((*)
dï
 - (*)
hdr
));

231 
	`mem˝y
(
s„p
->
«me
, 
dï
->«me, dï->
«mñí
);

232 
dp
->
d_›s
->
	`sf_put_öo
(
sÂ
, 
s„p
,

233 
	`be64_to_˝u
(
dï
->
öumbî
));

234 
dp
->
d_›s
->
	`sf_put_·y≥
(
s„p
,

235 
dp
->
d_›s
->
	`d©a_gë_·y≥
(
dï
));

237 
s„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
sÂ
, sfep);

239 
±r
 +
dp
->
d_›s
->
	`d©a_ítsize
(
dï
->
«mñí
);

241 
	`ASSERT
((*)
s„p
 - (*)
sÂ
 =
size
);

244 
logÊags
 = 
XFS_ILOG_CORE
;

245 
îr‹
 = 
	`xfs_dú2_shrök_öode
(
¨gs
,árgs->
geo
->
d©ablk
, 
bp
);

246 i‡(
îr‹
) {

247 
	`ASSERT
(
îr‹
 !-
ENOSPC
);

248 
out
;

257 
	`ASSERT
(
dp
->
i_df
.
if_byãs
 == 0);

258 
	`xfs_öô_loˇl_f‹k
(
dp
, 
XFS_DATA_FORK
, 
d°
, 
size
);

259 
dp
->
i_d
.
di_f‹m©
 = 
XFS_DINODE_FMT_LOCAL
;

260 
dp
->
i_d
.
di_size
 = 
size
;

262 
logÊags
 |
XFS_ILOG_DDATA
;

263 
	`xfs_dú2_sf_check
(
¨gs
);

264 
out
:

265 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
, 
logÊags
);

266 
	`kmem_‰ì
(
d°
);

267  
îr‹
;

268 
	}
}

277 
	$xfs_dú2_sf_add«me
(

278 
xfs_da_¨gs_t
 *
¨gs
)

280 
xfs_öode_t
 *
dp
;

281 
îr‹
;

282 
ö¸_isize
;

283 
√w_isize
;

284 
objch™ge
;

285 
xfs_dú2_d©a_aoff_t
 
off£t
 = 0;

286 
pick
;

287 
xfs_dú2_sf_hdr_t
 *
sÂ
;

288 
xfs_dú2_sf_íåy_t
 *
s„p
 = 
NULL
;

290 
	`åa˚_xfs_dú2_sf_add«me
(
¨gs
);

292 
	`ASSERT
(
	`xfs_dú2_sf_lookup
(
¨gs
Ë=-
ENOENT
);

293 
dp
 = 
¨gs
->dp;

294 
	`ASSERT
(
dp
->
i_df
.
if_Êags
 & 
XFS_IFINLINE
);

298 i‡(
dp
->
i_d
.
di_size
 < 
	`off£tof
(
xfs_dú2_sf_hdr_t
, 
∑ª¡
)) {

299 
	`ASSERT
(
	`XFS_FORCED_SHUTDOWN
(
dp
->
i_mou¡
));

300  -
EIO
;

302 
	`ASSERT
(
dp
->
i_df
.
if_byãs
 =dp->
i_d
.
di_size
);

303 
	`ASSERT
(
dp
->
i_df
.
if_u1
.
if_d©a
 !
NULL
);

304 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

305 
	`ASSERT
(
dp
->
i_d
.
di_size
 >
	`xfs_dú2_sf_hdr_size
(
sÂ
->
i8cou¡
));

309 
ö¸_isize
 = 
dp
->
d_›s
->
	`sf_ítsize
(
sÂ
, 
¨gs
->
«mñí
);

310 
objch™ge
 = 0;

315 i‡(
¨gs
->
öumbî
 > 
XFS_DIR2_MAX_SHORT_INUM
 && 
sÂ
->
i8cou¡
 == 0) {

319 
ö¸_isize
 +(
sÂ
->
cou¡
 + 2Ë* 
XFS_INO64_DIFF
;

320 
objch™ge
 = 1;

323 
√w_isize
 = ()
dp
->
i_d
.
di_size
 + 
ö¸_isize
;

328 i‡(
√w_isize
 > 
	`XFS_IFORK_DSIZE
(
dp
) ||

329 (
pick
 =

330 
	`xfs_dú2_sf_add«me_pick
(
¨gs
, 
objch™ge
, &
s„p
, &
off£t
)) == 0) {

334 i‡((
¨gs
->
›_Êags
 & 
XFS_DA_OP_JUSTCHECK
Ë||árgs->
tŸÆ
 == 0)

335  -
ENOSPC
;

339 
îr‹
 = 
	`xfs_dú2_sf_to_block
(
¨gs
);

340 i‡(
îr‹
)

341  
îr‹
;

342  
	`xfs_dú2_block_add«me
(
¨gs
);

347 i‡(
¨gs
->
›_Êags
 & 
XFS_DA_OP_JUSTCHECK
)

352 i‡(
pick
 == 1)

353 
	`xfs_dú2_sf_add«me_ósy
(
¨gs
, 
s„p
, 
off£t
, 
√w_isize
);

359 
	`ASSERT
(
pick
 == 2);

360 i‡(
objch™ge
)

361 
	`xfs_dú2_sf_toöo8
(
¨gs
);

362 
	`xfs_dú2_sf_add«me_h¨d
(
¨gs
, 
objch™ge
, 
√w_isize
);

364 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
, 
XFS_ILOG_CORE
 | 
XFS_ILOG_DDATA
);

366 
	}
}

376 
	$xfs_dú2_sf_add«me_ósy
(

377 
xfs_da_¨gs_t
 *
¨gs
,

378 
xfs_dú2_sf_íåy_t
 *
s„p
,

379 
xfs_dú2_d©a_aoff_t
 
off£t
,

380 
√w_isize
)

382 
byãoff
;

383 
xfs_öode_t
 *
dp
;

384 
xfs_dú2_sf_hdr_t
 *
sÂ
;

386 
dp
 = 
¨gs
->dp;

388 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

389 
byãoff
 = ()((*)
s„p
 - (*)
sÂ
);

393 
	`xfs_id©a_ªÆloc
(
dp
, dp->
d_›s
->
	`sf_ítsize
(
sÂ
, 
¨gs
->
«mñí
),

394 
XFS_DATA_FORK
);

398 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

399 
s„p
 = (
xfs_dú2_sf_íåy_t
 *)((*)
sÂ
 + 
byãoff
);

403 
s„p
->
«mñí
 = 
¨gs
->namelen;

404 
	`xfs_dú2_sf_put_off£t
(
s„p
, 
off£t
);

405 
	`mem˝y
(
s„p
->
«me
, 
¨gs
->«me, s„p->
«mñí
);

406 
dp
->
d_›s
->
	`sf_put_öo
(
sÂ
, 
s„p
, 
¨gs
->
öumbî
);

407 
dp
->
d_›s
->
	`sf_put_·y≥
(
s„p
, 
¨gs
->
fûëy≥
);

412 
sÂ
->
cou¡
++;

413 i‡(
¨gs
->
öumbî
 > 
XFS_DIR2_MAX_SHORT_INUM
)

414 
sÂ
->
i8cou¡
++;

415 
dp
->
i_d
.
di_size
 = 
√w_isize
;

416 
	`xfs_dú2_sf_check
(
¨gs
);

417 
	}
}

429 
	$xfs_dú2_sf_add«me_h¨d
(

430 
xfs_da_¨gs_t
 *
¨gs
,

431 
objch™ge
,

432 
√w_isize
)

434 
add_d©asize
;

435 *
buf
;

436 
xfs_öode_t
 *
dp
;

437 
eof
;

438 
nbyãs
;

439 
xfs_dú2_d©a_aoff_t
 
√w_off£t
;

440 
xfs_dú2_d©a_aoff_t
 
off£t
;

441 
ﬁd_isize
;

442 
xfs_dú2_sf_íåy_t
 *
ﬁds„p
;

443 
xfs_dú2_sf_hdr_t
 *
ﬁdsÂ
;

444 
xfs_dú2_sf_íåy_t
 *
s„p
;

445 
xfs_dú2_sf_hdr_t
 *
sÂ
;

450 
dp
 = 
¨gs
->dp;

452 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

453 
ﬁd_isize
 = ()
dp
->
i_d
.
di_size
;

454 
buf
 = 
	`kmem_Æloc
(
ﬁd_isize
, 
KM_SLEEP
);

455 
ﬁdsÂ
 = (
xfs_dú2_sf_hdr_t
 *)
buf
;

456 
	`mem˝y
(
ﬁdsÂ
, 
sÂ
, 
ﬁd_isize
);

462 
off£t
 = 
dp
->
d_›s
->
d©a_fú°_off£t
,

463 
ﬁds„p
 = 
	`xfs_dú2_sf_fú°íåy
(
ﬁdsÂ
),

464 
add_d©asize
 = 
dp
->
d_›s
->
	`d©a_ítsize
(
¨gs
->
«mñí
),

465 
eof
 = (*)
ﬁds„p
 =&
buf
[
ﬁd_isize
];

466 !
eof
;

467 
off£t
 = 
√w_off£t
 + 
dp
->
d_›s
->
	`d©a_ítsize
(
ﬁds„p
->
«mñí
),

468 
ﬁds„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
ﬁdsÂ
, oldsfep),

469 
eof
 = (*)
ﬁds„p
 =&
buf
[
ﬁd_isize
]) {

470 
√w_off£t
 = 
	`xfs_dú2_sf_gë_off£t
(
ﬁds„p
);

471 i‡(
off£t
 + 
add_d©asize
 <
√w_off£t
)

479 
	`xfs_id©a_ªÆloc
(
dp
, -
ﬁd_isize
, 
XFS_DATA_FORK
);

480 
	`xfs_id©a_ªÆloc
(
dp
, 
√w_isize
, 
XFS_DATA_FORK
);

484 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

488 
nbyãs
 = ()((*)
ﬁds„p
 - (*)
ﬁdsÂ
);

489 
	`mem˝y
(
sÂ
, 
ﬁdsÂ
, 
nbyãs
);

490 
s„p
 = (
xfs_dú2_sf_íåy_t
 *)((*)
sÂ
 + 
nbyãs
);

494 
s„p
->
«mñí
 = 
¨gs
->namelen;

495 
	`xfs_dú2_sf_put_off£t
(
s„p
, 
off£t
);

496 
	`mem˝y
(
s„p
->
«me
, 
¨gs
->«me, s„p->
«mñí
);

497 
dp
->
d_›s
->
	`sf_put_öo
(
sÂ
, 
s„p
, 
¨gs
->
öumbî
);

498 
dp
->
d_›s
->
	`sf_put_·y≥
(
s„p
, 
¨gs
->
fûëy≥
);

499 
sÂ
->
cou¡
++;

500 i‡(
¨gs
->
öumbî
 > 
XFS_DIR2_MAX_SHORT_INUM
 && !
objch™ge
)

501 
sÂ
->
i8cou¡
++;

505 i‡(!
eof
) {

506 
s„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
sÂ
, sfep);

507 
	`mem˝y
(
s„p
, 
ﬁds„p
, 
ﬁd_isize
 - 
nbyãs
);

509 
	`kmem_‰ì
(
buf
);

510 
dp
->
i_d
.
di_size
 = 
√w_isize
;

511 
	`xfs_dú2_sf_check
(
¨gs
);

512 
	}
}

522 
	$xfs_dú2_sf_add«me_pick
(

523 
xfs_da_¨gs_t
 *
¨gs
,

524 
objch™ge
,

525 
xfs_dú2_sf_íåy_t
 **
s„µ
,

526 
xfs_dú2_d©a_aoff_t
 *
off£ç
)

528 
xfs_öode_t
 *
dp
;

529 
hﬁefô
;

530 
i
;

531 
xfs_dú2_d©a_aoff_t
 
off£t
;

532 
xfs_dú2_sf_íåy_t
 *
s„p
;

533 
xfs_dú2_sf_hdr_t
 *
sÂ
;

534 
size
;

535 
u£d
;

537 
dp
 = 
¨gs
->dp;

539 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

540 
size
 = 
dp
->
d_›s
->
	`d©a_ítsize
(
¨gs
->
«mñí
);

541 
off£t
 = 
dp
->
d_›s
->
d©a_fú°_off£t
;

542 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
);

543 
hﬁefô
 = 0;

549 
i
 = 0; i < 
sÂ
->
cou¡
; i++) {

550 i‡(!
hﬁefô
)

551 
hﬁefô
 = 
off£t
 + 
size
 <
	`xfs_dú2_sf_gë_off£t
(
s„p
);

552 
off£t
 = 
	`xfs_dú2_sf_gë_off£t
(
s„p
) +

553 
dp
->
d_›s
->
	`d©a_ítsize
(
s„p
->
«mñí
);

554 
s„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
sÂ
, sfep);

560 
u£d
 = 
off£t
 +

561 (
sÂ
->
cou¡
 + 3Ë* (
uöt
)(
xfs_dú2_Àaf_íåy_t
) +

562 (
uöt
)(
xfs_dú2_block_èû_t
);

568 i‡(
u£d
 + (
hﬁefô
 ? 0 : 
size
Ë> 
¨gs
->
geo
->
blksize
)

573 i‡(
objch™ge
)

578 i‡(
u£d
 + 
size
 > 
¨gs
->
geo
->
blksize
)

583 *
s„µ
 = 
s„p
;

584 *
off£ç
 = 
off£t
;

586 
	}
}

588 #ifde‡
DEBUG


593 
	$xfs_dú2_sf_check
(

594 
xfs_da_¨gs_t
 *
¨gs
)

596 
xfs_öode_t
 *
dp
;

597 
i
;

598 
i8cou¡
;

599 
xfs_öo_t
 
öo
;

600 
off£t
;

601 
xfs_dú2_sf_íåy_t
 *
s„p
;

602 
xfs_dú2_sf_hdr_t
 *
sÂ
;

604 
dp
 = 
¨gs
->dp;

606 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

607 
off£t
 = 
dp
->
d_›s
->
d©a_fú°_off£t
;

608 
öo
 = 
dp
->
d_›s
->
	`sf_gë_∑ª¡_öo
(
sÂ
);

609 
i8cou¡
 = 
öo
 > 
XFS_DIR2_MAX_SHORT_INUM
;

611 
i
 = 0, 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
);

612 
i
 < 
sÂ
->
cou¡
;

613 
i
++, 
s„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
sÂ
, sfep)) {

614 
	`ASSERT
(
	`xfs_dú2_sf_gë_off£t
(
s„p
Ë>
off£t
);

615 
öo
 = 
dp
->
d_›s
->
	`sf_gë_öo
(
sÂ
, 
s„p
);

616 
i8cou¡
 +
öo
 > 
XFS_DIR2_MAX_SHORT_INUM
;

617 
off£t
 =

618 
	`xfs_dú2_sf_gë_off£t
(
s„p
) +

619 
dp
->
d_›s
->
	`d©a_ítsize
(
s„p
->
«mñí
);

620 
	`ASSERT
(
dp
->
d_›s
->
	`sf_gë_·y≥
(
s„p
Ë< 
XFS_DIR3_FT_MAX
);

622 
	`ASSERT
(
i8cou¡
 =
sÂ
->i8count);

623 
	`ASSERT
((*)
s„p
 - (*)
sÂ
 =
dp
->
i_d
.
di_size
);

624 
	`ASSERT
(
off£t
 +

625 (
sÂ
->
cou¡
 + 2Ë* (
uöt
)(
xfs_dú2_Àaf_íåy_t
) +

626 (
uöt
)(
xfs_dú2_block_èû_t
Ë<
¨gs
->
geo
->
blksize
);

627 
	}
}

632 
	$xfs_dú2_sf_vîify
(

633 
xfs_mou¡
 *
mp
,

634 
xfs_dú2_sf_hdr
 *
sÂ
,

635 
size
)

637 
xfs_dú2_sf_íåy
 *
s„p
;

638 
xfs_dú2_sf_íåy
 *
√xt_s„p
;

639 *
ídp
;

640 c⁄° 
xfs_dú_›s
 *
d›s
;

641 
xfs_öo_t
 
öo
;

642 
i
;

643 
i8cou¡
;

644 
off£t
;

645 
__uöt8_t
 
fûëy≥
;

647 
d›s
 = 
	`xfs_dú_gë_›s
(
mp
, 
NULL
);

652 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
size
 >

653 
	`off£tof
(
xfs_dú2_sf_hdr
, 
∑ª¡
));

654 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
size
 >=

655 
	`xfs_dú2_sf_hdr_size
(
sÂ
->
i8cou¡
));

657 
ídp
 = (*)
sÂ
 + 
size
;

660 
öo
 = 
d›s
->
	`sf_gë_∑ª¡_öo
(
sÂ
);

661 
i8cou¡
 = 
öo
 > 
XFS_DIR2_MAX_SHORT_INUM
;

662 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, !
	`xfs_dú_öo_vÆid©e
(mp, 
öo
));

663 
off£t
 = 
d›s
->
d©a_fú°_off£t
;

666 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
);

667 
i
 = 0; i < 
sÂ
->
cou¡
; i++) {

673 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

674 ((*)
s„p
 + (*s„p)Ë< 
ídp
);

677 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
s„p
->
«mñí
 > 0);

678 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
s„p
->
«mñí
 < 
MAXNAMELEN
);

685 
√xt_s„p
 = 
d›s
->
	`sf_√xã¡ry
(
sÂ
, 
s„p
);

686 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
ídp
 >(*)
√xt_s„p
);

689 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
,

690 
	`xfs_dú2_sf_gë_off£t
(
s„p
Ë>
off£t
);

693 
öo
 = 
d›s
->
	`sf_gë_öo
(
sÂ
, 
s„p
);

694 
i8cou¡
 +
öo
 > 
XFS_DIR2_MAX_SHORT_INUM
;

695 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, !
	`xfs_dú_öo_vÆid©e
(mp, 
öo
));

698 
fûëy≥
 = 
d›s
->
	`sf_gë_·y≥
(
s„p
);

699 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
fûëy≥
 < 
XFS_DIR3_FT_MAX
);

701 
off£t
 = 
	`xfs_dú2_sf_gë_off£t
(
s„p
) +

702 
d›s
->
	`d©a_ítsize
(
s„p
->
«mñí
);

704 
s„p
 = 
√xt_s„p
;

706 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
i8cou¡
 =
sÂ
->i8count);

707 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, (*)
s„p
 =(*)
ídp
);

710 
	`XFS_WANT_CORRUPTED_RETURN
(
mp
, 
off£t
 +

711 (
sÂ
->
cou¡
 + 2Ë* (
uöt
)(
xfs_dú2_Àaf_íåy_t
) +

712 (
uöt
)(
xfs_dú2_block_èû_t
Ë<
mp
->
m_dú_geo
->
blksize
);

715 
	}
}

721 
	$xfs_dú2_sf_¸óã
(

722 
xfs_da_¨gs_t
 *
¨gs
,

723 
xfs_öo_t
 
pöo
)

725 
xfs_öode_t
 *
dp
;

726 
i8cou¡
;

727 
xfs_dú2_sf_hdr_t
 *
sÂ
;

728 
size
;

730 
	`åa˚_xfs_dú2_sf_¸óã
(
¨gs
);

732 
dp
 = 
¨gs
->dp;

734 
	`ASSERT
(
dp
 !
NULL
);

735 
	`ASSERT
(
dp
->
i_d
.
di_size
 == 0);

740 i‡(
dp
->
i_d
.
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
) {

741 
dp
->
i_df
.
if_Êags
 &~
XFS_IFEXTENTS
;

742 
dp
->
i_d
.
di_f‹m©
 = 
XFS_DINODE_FMT_LOCAL
;

743 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
, 
XFS_ILOG_CORE
);

744 
dp
->
i_df
.
if_Êags
 |
XFS_IFINLINE
;

746 
	`ASSERT
(
dp
->
i_df
.
if_Êags
 & 
XFS_IFINLINE
);

747 
	`ASSERT
(
dp
->
i_df
.
if_byãs
 == 0);

748 
i8cou¡
 = 
pöo
 > 
XFS_DIR2_MAX_SHORT_INUM
;

749 
size
 = 
	`xfs_dú2_sf_hdr_size
(
i8cou¡
);

753 
	`xfs_id©a_ªÆloc
(
dp
, 
size
, 
XFS_DATA_FORK
);

757 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

758 
sÂ
->
i8cou¡
 = i8count;

762 
dp
->
d_›s
->
	`sf_put_∑ª¡_öo
(
sÂ
, 
pöo
);

763 
sÂ
->
cou¡
 = 0;

764 
dp
->
i_d
.
di_size
 = 
size
;

765 
	`xfs_dú2_sf_check
(
¨gs
);

766 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
, 
XFS_ILOG_CORE
 | 
XFS_ILOG_DDATA
);

768 
	}
}

775 
	$xfs_dú2_sf_lookup
(

776 
xfs_da_¨gs_t
 *
¨gs
)

778 
xfs_öode_t
 *
dp
;

779 
i
;

780 
îr‹
;

781 
xfs_dú2_sf_íåy_t
 *
s„p
;

782 
xfs_dú2_sf_hdr_t
 *
sÂ
;

783 
xfs_dacmp
 
cmp
;

784 
xfs_dú2_sf_íåy_t
 *
ci_s„p
;

786 
	`åa˚_xfs_dú2_sf_lookup
(
¨gs
);

788 
	`xfs_dú2_sf_check
(
¨gs
);

789 
dp
 = 
¨gs
->dp;

791 
	`ASSERT
(
dp
->
i_df
.
if_Êags
 & 
XFS_IFINLINE
);

795 i‡(
dp
->
i_d
.
di_size
 < 
	`off£tof
(
xfs_dú2_sf_hdr_t
, 
∑ª¡
)) {

796 
	`ASSERT
(
	`XFS_FORCED_SHUTDOWN
(
dp
->
i_mou¡
));

797  -
EIO
;

799 
	`ASSERT
(
dp
->
i_df
.
if_byãs
 =dp->
i_d
.
di_size
);

800 
	`ASSERT
(
dp
->
i_df
.
if_u1
.
if_d©a
 !
NULL
);

801 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

802 
	`ASSERT
(
dp
->
i_d
.
di_size
 >
	`xfs_dú2_sf_hdr_size
(
sÂ
->
i8cou¡
));

806 i‡(
¨gs
->
«mñí
 =1 &&árgs->
«me
[0] == '.') {

807 
¨gs
->
öumbî
 = 
dp
->
i_öo
;

808 
¨gs
->
cm¥esu…
 = 
XFS_CMP_EXACT
;

809 
¨gs
->
fûëy≥
 = 
XFS_DIR3_FT_DIR
;

810  -
EEXIST
;

815 i‡(
¨gs
->
«mñí
 == 2 &&

816 
¨gs
->
«me
[0] == '.' &&árgs->name[1] == '.') {

817 
¨gs
->
öumbî
 = 
dp
->
d_›s
->
	`sf_gë_∑ª¡_öo
(
sÂ
);

818 
¨gs
->
cm¥esu…
 = 
XFS_CMP_EXACT
;

819 
¨gs
->
fûëy≥
 = 
XFS_DIR3_FT_DIR
;

820  -
EEXIST
;

825 
ci_s„p
 = 
NULL
;

826 
i
 = 0, 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
); i < sÂ->
cou¡
;

827 
i
++, 
s„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
sÂ
, sfep)) {

833 
cmp
 = 
dp
->
i_mou¡
->
m_dú«me›s
->
	`com≤ame
(
¨gs
, 
s„p
->
«me
,

834 
s„p
->
«mñí
);

835 i‡(
cmp
 !
XFS_CMP_DIFFERENT
 && cm∞!
¨gs
->
cm¥esu…
) {

836 
¨gs
->
cm¥esu…
 = 
cmp
;

837 
¨gs
->
öumbî
 = 
dp
->
d_›s
->
	`sf_gë_öo
(
sÂ
, 
s„p
);

838 
¨gs
->
fûëy≥
 = 
dp
->
d_›s
->
	`sf_gë_·y≥
(
s„p
);

839 i‡(
cmp
 =
XFS_CMP_EXACT
)

840  -
EEXIST
;

841 
ci_s„p
 = 
s„p
;

844 
	`ASSERT
(
¨gs
->
›_Êags
 & 
XFS_DA_OP_OKNOENT
);

849 i‡(!
ci_s„p
)

850  -
ENOENT
;

852 
îr‹
 = 
	`xfs_dú_cûookup_ªsu…
(
¨gs
, 
ci_s„p
->
«me
, ci_s„p->
«mñí
);

853  
îr‹
;

854 
	}
}

860 
	$xfs_dú2_sf_ªmovíame
(

861 
xfs_da_¨gs_t
 *
¨gs
)

863 
byãoff
;

864 
xfs_öode_t
 *
dp
;

865 
ítsize
;

866 
i
;

867 
√wsize
;

868 
ﬁdsize
;

869 
xfs_dú2_sf_íåy_t
 *
s„p
;

870 
xfs_dú2_sf_hdr_t
 *
sÂ
;

872 
	`åa˚_xfs_dú2_sf_ªmovíame
(
¨gs
);

874 
dp
 = 
¨gs
->dp;

876 
	`ASSERT
(
dp
->
i_df
.
if_Êags
 & 
XFS_IFINLINE
);

877 
ﬁdsize
 = ()
dp
->
i_d
.
di_size
;

881 i‡(
ﬁdsize
 < 
	`off£tof
(
xfs_dú2_sf_hdr_t
, 
∑ª¡
)) {

882 
	`ASSERT
(
	`XFS_FORCED_SHUTDOWN
(
dp
->
i_mou¡
));

883  -
EIO
;

885 
	`ASSERT
(
dp
->
i_df
.
if_byãs
 =
ﬁdsize
);

886 
	`ASSERT
(
dp
->
i_df
.
if_u1
.
if_d©a
 !
NULL
);

887 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

888 
	`ASSERT
(
ﬁdsize
 >
	`xfs_dú2_sf_hdr_size
(
sÂ
->
i8cou¡
));

893 
i
 = 0, 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
); i < sÂ->
cou¡
;

894 
i
++, 
s„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
sÂ
, sfep)) {

895 i‡(
	`xfs_da_com≤ame
(
¨gs
, 
s„p
->
«me
, s„p->
«mñí
) ==

896 
XFS_CMP_EXACT
) {

897 
	`ASSERT
(
dp
->
d_›s
->
	`sf_gë_öo
(
sÂ
, 
s„p
) ==

898 
¨gs
->
öumbî
);

905 i‡(
i
 =
sÂ
->
cou¡
)

906  -
ENOENT
;

910 
byãoff
 = ()((*)
s„p
 - (*)
sÂ
);

911 
ítsize
 = 
dp
->
d_›s
->
	`sf_ítsize
(
sÂ
, 
¨gs
->
«mñí
);

912 
√wsize
 = 
ﬁdsize
 - 
ítsize
;

916 i‡(
byãoff
 + 
ítsize
 < 
ﬁdsize
)

917 
	`memmove
((*)
sÂ
 + 
byãoff
, (*)sÂ + byãof‡+ 
ítsize
,

918 
ﬁdsize
 - (
byãoff
 + 
ítsize
));

922 
sÂ
->
cou¡
--;

923 
dp
->
i_d
.
di_size
 = 
√wsize
;

927 
	`xfs_id©a_ªÆloc
(
dp
, 
√wsize
 - 
ﬁdsize
, 
XFS_DATA_FORK
);

928 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

932 i‡(
¨gs
->
öumbî
 > 
XFS_DIR2_MAX_SHORT_INUM
) {

933 i‡(
sÂ
->
i8cou¡
 == 1)

934 
	`xfs_dú2_sf_toöo4
(
¨gs
);

936 
sÂ
->
i8cou¡
--;

938 
	`xfs_dú2_sf_check
(
¨gs
);

939 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
, 
XFS_ILOG_CORE
 | 
XFS_ILOG_DDATA
);

941 
	}
}

947 
	$xfs_dú2_sf_ª∂a˚
(

948 
xfs_da_¨gs_t
 *
¨gs
)

950 
xfs_öode_t
 *
dp
;

951 
i
;

952 
xfs_öo_t
 
öo
=0;

953 
i8ñev©ed
;

954 
xfs_dú2_sf_íåy_t
 *
s„p
;

955 
xfs_dú2_sf_hdr_t
 *
sÂ
;

957 
	`åa˚_xfs_dú2_sf_ª∂a˚
(
¨gs
);

959 
dp
 = 
¨gs
->dp;

961 
	`ASSERT
(
dp
->
i_df
.
if_Êags
 & 
XFS_IFINLINE
);

965 i‡(
dp
->
i_d
.
di_size
 < 
	`off£tof
(
xfs_dú2_sf_hdr_t
, 
∑ª¡
)) {

966 
	`ASSERT
(
	`XFS_FORCED_SHUTDOWN
(
dp
->
i_mou¡
));

967  -
EIO
;

969 
	`ASSERT
(
dp
->
i_df
.
if_byãs
 =dp->
i_d
.
di_size
);

970 
	`ASSERT
(
dp
->
i_df
.
if_u1
.
if_d©a
 !
NULL
);

971 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

972 
	`ASSERT
(
dp
->
i_d
.
di_size
 >
	`xfs_dú2_sf_hdr_size
(
sÂ
->
i8cou¡
));

977 i‡(
¨gs
->
öumbî
 > 
XFS_DIR2_MAX_SHORT_INUM
 && 
sÂ
->
i8cou¡
 == 0) {

978 
îr‹
;

979 
√wsize
;

981 
√wsize
 = 
dp
->
i_df
.
if_byãs
 + (
sÂ
->
cou¡
 + 1Ë* 
XFS_INO64_DIFF
;

985 i‡(
√wsize
 > 
	`XFS_IFORK_DSIZE
(
dp
)) {

986 
îr‹
 = 
	`xfs_dú2_sf_to_block
(
¨gs
);

987 i‡(
îr‹
) {

988  
îr‹
;

990  
	`xfs_dú2_block_ª∂a˚
(
¨gs
);

995 
	`xfs_dú2_sf_toöo8
(
¨gs
);

996 
i8ñev©ed
 = 1;

997 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

999 
i8ñev©ed
 = 0;

1001 
	`ASSERT
(
¨gs
->
«mñí
 !1 ||árgs->
«me
[0] != '.');

1005 i‡(
¨gs
->
«mñí
 == 2 &&

1006 
¨gs
->
«me
[0] == '.' &&árgs->name[1] == '.') {

1007 
öo
 = 
dp
->
d_›s
->
	`sf_gë_∑ª¡_öo
(
sÂ
);

1008 
	`ASSERT
(
¨gs
->
öumbî
 !
öo
);

1009 
dp
->
d_›s
->
	`sf_put_∑ª¡_öo
(
sÂ
, 
¨gs
->
öumbî
);

1015 
i
 = 0, 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
); i < sÂ->
cou¡
;

1016 
i
++, 
s„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
sÂ
, sfep)) {

1017 i‡(
	`xfs_da_com≤ame
(
¨gs
, 
s„p
->
«me
, s„p->
«mñí
) ==

1018 
XFS_CMP_EXACT
) {

1019 
öo
 = 
dp
->
d_›s
->
	`sf_gë_öo
(
sÂ
, 
s„p
);

1020 
	`ASSERT
(
¨gs
->
öumbî
 !
öo
);

1021 
dp
->
d_›s
->
	`sf_put_öo
(
sÂ
, 
s„p
, 
¨gs
->
öumbî
);

1022 
dp
->
d_›s
->
	`sf_put_·y≥
(
s„p
, 
¨gs
->
fûëy≥
);

1029 i‡(
i
 =
sÂ
->
cou¡
) {

1030 
	`ASSERT
(
¨gs
->
›_Êags
 & 
XFS_DA_OP_OKNOENT
);

1031 i‡(
i8ñev©ed
)

1032 
	`xfs_dú2_sf_toöo4
(
¨gs
);

1033  -
ENOENT
;

1039 i‡(
öo
 > 
XFS_DIR2_MAX_SHORT_INUM
 &&

1040 
¨gs
->
öumbî
 <
XFS_DIR2_MAX_SHORT_INUM
) {

1044 i‡(
sÂ
->
i8cou¡
 == 1)

1045 
	`xfs_dú2_sf_toöo4
(
¨gs
);

1047 
sÂ
->
i8cou¡
--;

1052 i‡(
öo
 <
XFS_DIR2_MAX_SHORT_INUM
 &&

1053 
¨gs
->
öumbî
 > 
XFS_DIR2_MAX_SHORT_INUM
) {

1058 
	`ASSERT
(
sÂ
->
i8cou¡
 != 0);

1059 i‡(!
i8ñev©ed
)

1060 
sÂ
->
i8cou¡
++;

1062 
	`xfs_dú2_sf_check
(
¨gs
);

1063 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
, 
XFS_ILOG_DDATA
);

1065 
	}
}

1072 
	$xfs_dú2_sf_toöo4
(

1073 
xfs_da_¨gs_t
 *
¨gs
)

1075 *
buf
;

1076 
xfs_öode_t
 *
dp
;

1077 
i
;

1078 
√wsize
;

1079 
xfs_dú2_sf_íåy_t
 *
ﬁds„p
;

1080 
xfs_dú2_sf_hdr_t
 *
ﬁdsÂ
;

1081 
ﬁdsize
;

1082 
xfs_dú2_sf_íåy_t
 *
s„p
;

1083 
xfs_dú2_sf_hdr_t
 *
sÂ
;

1085 
	`åa˚_xfs_dú2_sf_toöo4
(
¨gs
);

1087 
dp
 = 
¨gs
->dp;

1094 
ﬁdsize
 = 
dp
->
i_df
.
if_byãs
;

1095 
buf
 = 
	`kmem_Æloc
(
ﬁdsize
, 
KM_SLEEP
);

1096 
ﬁdsÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

1097 
	`ASSERT
(
ﬁdsÂ
->
i8cou¡
 == 1);

1098 
	`mem˝y
(
buf
, 
ﬁdsÂ
, 
ﬁdsize
);

1102 
√wsize
 = 
ﬁdsize
 - (
ﬁdsÂ
->
cou¡
 + 1Ë* 
XFS_INO64_DIFF
;

1103 
	`xfs_id©a_ªÆloc
(
dp
, -
ﬁdsize
, 
XFS_DATA_FORK
);

1104 
	`xfs_id©a_ªÆloc
(
dp
, 
√wsize
, 
XFS_DATA_FORK
);

1108 
ﬁdsÂ
 = (
xfs_dú2_sf_hdr_t
 *)
buf
;

1109 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

1113 
sÂ
->
cou¡
 = 
ﬁdsÂ
->count;

1114 
sÂ
->
i8cou¡
 = 0;

1115 
dp
->
d_›s
->
	`sf_put_∑ª¡_öo
(
sÂ
, dp->d_›s->
	`sf_gë_∑ª¡_öo
(
ﬁdsÂ
));

1119 
i
 = 0, 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
),

1120 
ﬁds„p
 = 
	`xfs_dú2_sf_fú°íåy
(
ﬁdsÂ
);

1121 
i
 < 
sÂ
->
cou¡
;

1122 
i
++, 
s„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
sÂ
, sfep),

1123 
ﬁds„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
ﬁdsÂ
, oldsfep)) {

1124 
s„p
->
«mñí
 = 
ﬁds„p
->namelen;

1125 
	`mem˝y
(
s„p
->
off£t
, 
ﬁds„p
->offset, (sfep->offset));

1126 
	`mem˝y
(
s„p
->
«me
, 
ﬁds„p
->«me, s„p->
«mñí
);

1127 
dp
->
d_›s
->
	`sf_put_öo
(
sÂ
, 
s„p
,

1128 
dp
->
d_›s
->
	`sf_gë_öo
(
ﬁdsÂ
, 
ﬁds„p
));

1129 
dp
->
d_›s
->
	`sf_put_·y≥
(
s„p
, dp->d_›s->
	`sf_gë_·y≥
(
ﬁds„p
));

1134 
	`kmem_‰ì
(
buf
);

1135 
dp
->
i_d
.
di_size
 = 
√wsize
;

1136 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
, 
XFS_ILOG_CORE
 | 
XFS_ILOG_DDATA
);

1137 
	}
}

1145 
	$xfs_dú2_sf_toöo8
(

1146 
xfs_da_¨gs_t
 *
¨gs
)

1148 *
buf
;

1149 
xfs_öode_t
 *
dp
;

1150 
i
;

1151 
√wsize
;

1152 
xfs_dú2_sf_íåy_t
 *
ﬁds„p
;

1153 
xfs_dú2_sf_hdr_t
 *
ﬁdsÂ
;

1154 
ﬁdsize
;

1155 
xfs_dú2_sf_íåy_t
 *
s„p
;

1156 
xfs_dú2_sf_hdr_t
 *
sÂ
;

1158 
	`åa˚_xfs_dú2_sf_toöo8
(
¨gs
);

1160 
dp
 = 
¨gs
->dp;

1167 
ﬁdsize
 = 
dp
->
i_df
.
if_byãs
;

1168 
buf
 = 
	`kmem_Æloc
(
ﬁdsize
, 
KM_SLEEP
);

1169 
ﬁdsÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

1170 
	`ASSERT
(
ﬁdsÂ
->
i8cou¡
 == 0);

1171 
	`mem˝y
(
buf
, 
ﬁdsÂ
, 
ﬁdsize
);

1175 
√wsize
 = 
ﬁdsize
 + (
ﬁdsÂ
->
cou¡
 + 1Ë* 
XFS_INO64_DIFF
;

1176 
	`xfs_id©a_ªÆloc
(
dp
, -
ﬁdsize
, 
XFS_DATA_FORK
);

1177 
	`xfs_id©a_ªÆloc
(
dp
, 
√wsize
, 
XFS_DATA_FORK
);

1181 
ﬁdsÂ
 = (
xfs_dú2_sf_hdr_t
 *)
buf
;

1182 
sÂ
 = (
xfs_dú2_sf_hdr_t
 *)
dp
->
i_df
.
if_u1
.
if_d©a
;

1186 
sÂ
->
cou¡
 = 
ﬁdsÂ
->count;

1187 
sÂ
->
i8cou¡
 = 1;

1188 
dp
->
d_›s
->
	`sf_put_∑ª¡_öo
(
sÂ
, dp->d_›s->
	`sf_gë_∑ª¡_öo
(
ﬁdsÂ
));

1192 
i
 = 0, 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
),

1193 
ﬁds„p
 = 
	`xfs_dú2_sf_fú°íåy
(
ﬁdsÂ
);

1194 
i
 < 
sÂ
->
cou¡
;

1195 
i
++, 
s„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
sÂ
, sfep),

1196 
ﬁds„p
 = 
dp
->
d_›s
->
	`sf_√xã¡ry
(
ﬁdsÂ
, oldsfep)) {

1197 
s„p
->
«mñí
 = 
ﬁds„p
->namelen;

1198 
	`mem˝y
(
s„p
->
off£t
, 
ﬁds„p
->offset, (sfep->offset));

1199 
	`mem˝y
(
s„p
->
«me
, 
ﬁds„p
->«me, s„p->
«mñí
);

1200 
dp
->
d_›s
->
	`sf_put_öo
(
sÂ
, 
s„p
,

1201 
dp
->
d_›s
->
	`sf_gë_öo
(
ﬁdsÂ
, 
ﬁds„p
));

1202 
dp
->
d_›s
->
	`sf_put_·y≥
(
s„p
, dp->d_›s->
	`sf_gë_·y≥
(
ﬁds„p
));

1207 
	`kmem_‰ì
(
buf
);

1208 
dp
->
i_d
.
di_size
 = 
√wsize
;

1209 
	`xfs_å™s_log_öode
(
¨gs
->
å™s
, 
dp
, 
XFS_ILOG_CORE
 | 
XFS_ILOG_DDATA
);

1210 
	}
}

	@libxfs/xfs_dquot_buf.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_sh¨ed.h
"

22 
	~"xfs_f‹m©.h
"

23 
	~"xfs_log_f‹m©.h
"

24 
	~"xfs_å™s_ªsv.h
"

25 
	~"xfs_mou¡.h
"

26 
	~"xfs_öode.h
"

27 
	~"xfs_å™s.h
"

28 
	~"xfs_cksum.h
"

29 
	~"xfs_åa˚.h
"

30 
	~"xfs_quŸa_defs.h
"

37 
	$xfs_ˇlc_dquŸs_≥r_chunk
(

38 
nbblks
)

41 
	`ASSERT
(
nbblks
 > 0);

42  
	`BBTOB
(
nbblks
Ë/ (
xfs_dqblk_t
);

45 
ndquŸs
;

47 
	`ASSERT
(
nbblks
 > 0);

48 
ndquŸs
 = 
	`BBTOB
(
nbblks
);

49 
	`do_div
(
ndquŸs
, (
xfs_dqblk_t
));

51  
ndquŸs
;

53 
	}
}

59 
	$xfs_dqcheck
(

60 
xfs_mou¡
 *
mp
,

61 
xfs_disk_dquŸ_t
 *
ddq
,

62 
xfs_dqid_t
 
id
,

63 
uöt
 
ty≥
,

64 
uöt
 
Êags
,

65 c⁄° *
°r
)

67 
xfs_dqblk_t
 *
d
 = (xfs_dqblk_à*)
ddq
;

68 
îrs
 = 0;

85 i‡(
ddq
->
d_magic
 !
	`˝u_to_be16
(
XFS_DQUOT_MAGIC
)) {

86 i‡(
Êags
 & 
XFS_QMOPT_DOWARN
)

87 
	`xfs_Æît
(
mp
,

89 
°r
, 
id
, 
	`be16_to_˝u
(
ddq
->
d_magic
), 
XFS_DQUOT_MAGIC
);

90 
îrs
++;

92 i‡(
ddq
->
d_vîsi⁄
 !
XFS_DQUOT_VERSION
) {

93 i‡(
Êags
 & 
XFS_QMOPT_DOWARN
)

94 
	`xfs_Æît
(
mp
,

96 
°r
, 
id
, 
ddq
->
d_vîsi⁄
, 
XFS_DQUOT_VERSION
);

97 
îrs
++;

100 i‡(
ddq
->
d_Êags
 !
XFS_DQ_USER
 &&

101 
ddq
->
d_Êags
 !
XFS_DQ_PROJ
 &&

102 
ddq
->
d_Êags
 !
XFS_DQ_GROUP
) {

103 i‡(
Êags
 & 
XFS_QMOPT_DOWARN
)

104 
	`xfs_Æît
(
mp
,

106 
°r
, 
id
, 
ddq
->
d_Êags
);

107 
îrs
++;

110 i‡(
id
 !-1 && id !
	`be32_to_˝u
(
ddq
->
d_id
)) {

111 i‡(
Êags
 & 
XFS_QMOPT_DOWARN
)

112 
	`xfs_Æît
(
mp
,

115 
°r
, 
ddq
, 
id
, 
	`be32_to_˝u
(ddq->
d_id
));

116 
îrs
++;

119 i‡(!
îrs
 && 
ddq
->
d_id
) {

120 i‡(
ddq
->
d_blk_so·limô
 &&

121 
	`be64_to_˝u
(
ddq
->
d_bcou¡
) >

122 
	`be64_to_˝u
(
ddq
->
d_blk_so·limô
)) {

123 i‡(!
ddq
->
d_btimî
) {

124 i‡(
Êags
 & 
XFS_QMOPT_DOWARN
)

125 
	`xfs_Æît
(
mp
,

127 
°r
, ()
	`be32_to_˝u
(
ddq
->
d_id
), ddq);

128 
îrs
++;

131 i‡(
ddq
->
d_öo_so·limô
 &&

132 
	`be64_to_˝u
(
ddq
->
d_icou¡
) >

133 
	`be64_to_˝u
(
ddq
->
d_öo_so·limô
)) {

134 i‡(!
ddq
->
d_ôimî
) {

135 i‡(
Êags
 & 
XFS_QMOPT_DOWARN
)

136 
	`xfs_Æît
(
mp
,

138 
°r
, ()
	`be32_to_˝u
(
ddq
->
d_id
), ddq);

139 
îrs
++;

142 i‡(
ddq
->
d_πb_so·limô
 &&

143 
	`be64_to_˝u
(
ddq
->
d_πbcou¡
) >

144 
	`be64_to_˝u
(
ddq
->
d_πb_so·limô
)) {

145 i‡(!
ddq
->
d_πbtimî
) {

146 i‡(
Êags
 & 
XFS_QMOPT_DOWARN
)

147 
	`xfs_Æît
(
mp
,

149 
°r
, ()
	`be32_to_˝u
(
ddq
->
d_id
), ddq);

150 
îrs
++;

155 i‡(!
îrs
 || !(
Êags
 & 
XFS_QMOPT_DQREPAIR
))

156  
îrs
;

158 i‡(
Êags
 & 
XFS_QMOPT_DOWARN
)

159 
	`xfs_nŸi˚
(
mp
, "Re-öôülizög dquŸ ID 0x%x", 
id
);

164 
	`ASSERT
(
id
 != -1);

165 
	`ASSERT
(
Êags
 & 
XFS_QMOPT_DQREPAIR
);

166 
	`mem£t
(
d
, 0, (
xfs_dqblk_t
));

168 
d
->
dd_diskdq
.
d_magic
 = 
	`˝u_to_be16
(
XFS_DQUOT_MAGIC
);

169 
d
->
dd_diskdq
.
d_vîsi⁄
 = 
XFS_DQUOT_VERSION
;

170 
d
->
dd_diskdq
.
d_Êags
 = 
ty≥
;

171 
d
->
dd_diskdq
.
d_id
 = 
	`˝u_to_be32
(
id
);

173 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

174 
	`uuid_c›y
(&
d
->
dd_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

175 
	`xfs_upd©e_cksum
((*)
d
, (
xfs_dqblk
),

176 
XFS_DQUOT_CRC_OFF
);

179  
îrs
;

180 
	}
}

182 
STATIC
 
boﬁ


183 
	$xfs_dquŸ_buf_vîify_¸c
(

184 
xfs_mou¡
 *
mp
,

185 
xfs_buf
 *
bp
)

187 
xfs_dqblk
 *
d
 = (xfs_dqblk *)
bp
->
b_addr
;

188 
ndquŸs
;

189 
i
;

191 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

192  
åue
;

199 i‡(
mp
->
m_quŸaöfo
)

200 
ndquŸs
 = 
mp
->
m_quŸaöfo
->
qi_dq≥rchunk
;

202 
ndquŸs
 = 
	`xfs_ˇlc_dquŸs_≥r_chunk
(
bp
->
b_Àngth
);

204 
i
 = 0; i < 
ndquŸs
; i++, 
d
++) {

205 i‡(!
	`xfs_vîify_cksum
((*)
d
, (
xfs_dqblk
),

206 
XFS_DQUOT_CRC_OFF
))

207  
Ál£
;

208 i‡(!
	`uuid_equÆ
(&
d
->
dd_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

209  
Ál£
;

211  
åue
;

212 
	}
}

214 
STATIC
 
boﬁ


215 
	$xfs_dquŸ_buf_vîify
(

216 
xfs_mou¡
 *
mp
,

217 
xfs_buf
 *
bp
,

218 
w¨n
)

220 
xfs_dqblk
 *
d
 = (xfs_dqblk *)
bp
->
b_addr
;

221 
xfs_dqid_t
 
id
 = 0;

222 
ndquŸs
;

223 
i
;

230 i‡(
mp
->
m_quŸaöfo
)

231 
ndquŸs
 = 
mp
->
m_quŸaöfo
->
qi_dq≥rchunk
;

233 
ndquŸs
 = 
	`xfs_ˇlc_dquŸs_≥r_chunk
(
bp
->
b_Àngth
);

242 
i
 = 0; i < 
ndquŸs
; i++) {

243 
xfs_disk_dquŸ
 *
ddq
;

244 
îr‹
;

246 
ddq
 = &
d
[
i
].
dd_diskdq
;

248 i‡(
i
 == 0)

249 
id
 = 
	`be32_to_˝u
(
ddq
->
d_id
);

251 
îr‹
 = 
	`xfs_dqcheck
(
mp
, 
ddq
, 
id
 + 
i
, 0, 
w¨n
, 
__func__
);

252 i‡(
îr‹
)

253  
Ál£
;

255  
åue
;

256 
	}
}

259 
	$xfs_dquŸ_buf_ªad_vîify
(

260 
xfs_buf
 *
bp
)

262 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

264 i‡(!
	`xfs_dquŸ_buf_vîify_¸c
(
mp
, 
bp
))

265 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

266 i‡(!
	`xfs_dquŸ_buf_vîify
(
mp
, 
bp
, 
XFS_QMOPT_DOWARN
))

267 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

269 i‡(
bp
->
b_îr‹
)

270 
	`xfs_vîifõr_îr‹
(
bp
);

271 
	}
}

280 
	$xfs_dquŸ_buf_ªadahód_vîify
(

281 
xfs_buf
 *
bp
)

283 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

285 i‡(!
	`xfs_dquŸ_buf_vîify_¸c
(
mp
, 
bp
) ||

286 !
	`xfs_dquŸ_buf_vîify
(
mp
, 
bp
, 0)) {

287 
	`xfs_buf_i€º‹
(
bp
, -
EIO
);

288 
bp
->
b_Êags
 &~
XBF_DONE
;

290 
	}
}

298 
	$xfs_dquŸ_buf_wrôe_vîify
(

299 
xfs_buf
 *
bp
)

301 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

303 i‡(!
	`xfs_dquŸ_buf_vîify
(
mp
, 
bp
, 
XFS_QMOPT_DOWARN
)) {

304 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

305 
	`xfs_vîifõr_îr‹
(
bp
);

308 
	}
}

310 c⁄° 
xfs_buf_›s
 
	gxfs_dquŸ_buf_›s
 = {

311 .
«me
 = "xfs_dquot",

312 .
	gvîify_ªad
 = 
xfs_dquŸ_buf_ªad_vîify
,

313 .
	gvîify_wrôe
 = 
xfs_dquŸ_buf_wrôe_vîify
,

316 c⁄° 
xfs_buf_›s
 
	gxfs_dquŸ_buf_ø_›s
 = {

317 .
«me
 = "xfs_dquot_ra",

318 .
	gvîify_ªad
 = 
xfs_dquŸ_buf_ªadahód_vîify
,

319 .
	gvîify_wrôe
 = 
xfs_dquŸ_buf_wrôe_vîify
,

	@libxfs/xfs_format.h

18 #i‚de‡
__XFS_FORMAT_H__


19 
	#__XFS_FORMAT_H__


	)

30 
	gxfs_mou¡
;

31 
	gxfs_å™s
;

32 
	gxfs_öode
;

33 
	gxfs_buf
;

34 
	gxfs_if‹k
;

41 
	#XFS_SB_MAGIC
 0x58465342

	)

42 
	#XFS_SB_VERSION_1
 1

	)

43 
	#XFS_SB_VERSION_2
 2

	)

44 
	#XFS_SB_VERSION_3
 3

	)

45 
	#XFS_SB_VERSION_4
 4

	)

46 
	#XFS_SB_VERSION_5
 5

	)

47 
	#XFS_SB_VERSION_NUMBITS
 0x000f

	)

48 
	#XFS_SB_VERSION_ALLFBITS
 0xfff0

	)

49 
	#XFS_SB_VERSION_ATTRBIT
 0x0010

	)

50 
	#XFS_SB_VERSION_NLINKBIT
 0x0020

	)

51 
	#XFS_SB_VERSION_QUOTABIT
 0x0040

	)

52 
	#XFS_SB_VERSION_ALIGNBIT
 0x0080

	)

53 
	#XFS_SB_VERSION_DALIGNBIT
 0x0100

	)

54 
	#XFS_SB_VERSION_SHAREDBIT
 0x0200

	)

55 
	#XFS_SB_VERSION_LOGV2BIT
 0x0400

	)

56 
	#XFS_SB_VERSION_SECTORBIT
 0x0800

	)

57 
	#XFS_SB_VERSION_EXTFLGBIT
 0x1000

	)

58 
	#XFS_SB_VERSION_DIRV2BIT
 0x2000

	)

59 
	#XFS_SB_VERSION_BORGBIT
 0x4000

	)

60 
	#XFS_SB_VERSION_MOREBITSBIT
 0x8000

	)

68 
	#XFS_XATTR_SIZE_MAX
 (1 << 16)

	)

75 
	#XFS_SB_VERSION_OKBITS
 \

76 ((
XFS_SB_VERSION_NUMBITS
 | 
XFS_SB_VERSION_ALLFBITS
) & \

77 ~
XFS_SB_VERSION_SHAREDBIT
)

	)

86 
	#XFS_SB_VERSION2_RESERVED1BIT
 0x00000001

	)

87 
	#XFS_SB_VERSION2_LAZYSBCOUNTBIT
 0x00000002

	)

88 
	#XFS_SB_VERSION2_RESERVED4BIT
 0x00000004

	)

89 
	#XFS_SB_VERSION2_ATTR2BIT
 0x00000008

	)

90 
	#XFS_SB_VERSION2_PARENTBIT
 0x00000010

	)

91 
	#XFS_SB_VERSION2_PROJID32BIT
 0x00000080

	)

92 
	#XFS_SB_VERSION2_CRCBIT
 0x00000100

	)

93 
	#XFS_SB_VERSION2_FTYPE
 0x00000200

	)

95 
	#XFS_SB_VERSION2_OKBITS
 \

96 (
XFS_SB_VERSION2_LAZYSBCOUNTBIT
 | \

97 
XFS_SB_VERSION2_ATTR2BIT
 | \

98 
XFS_SB_VERSION2_PROJID32BIT
 | \

99 
XFS_SB_VERSION2_FTYPE
)

	)

105 
	sxfs_sb
 {

106 
__uöt32_t
 
	msb_magi˙um
;

107 
__uöt32_t
 
	msb_blocksize
;

108 
xfs_rfsblock_t
 
	msb_dblocks
;

109 
xfs_rfsblock_t
 
	msb_rblocks
;

110 
xfs_πblock_t
 
	msb_ªxã¡s
;

111 
uuid_t
 
	msb_uuid
;

112 
xfs_fsblock_t
 
	msb_log°¨t
;

113 
xfs_öo_t
 
	msb_roŸöo
;

114 
xfs_öo_t
 
	msb_rbmöo
;

115 
xfs_öo_t
 
	msb_rsumöo
;

116 
xfs_agblock_t
 
	msb_ªxtsize
;

117 
xfs_agblock_t
 
	msb_agblocks
;

118 
xfs_agnumbî_t
 
	msb_agcou¡
;

119 
xfs_exéí_t
 
	msb_rbmblocks
;

120 
xfs_exéí_t
 
	msb_logblocks
;

121 
__uöt16_t
 
	msb_vîsi⁄num
;

122 
__uöt16_t
 
	msb_£˘size
;

123 
__uöt16_t
 
	msb_öodesize
;

124 
__uöt16_t
 
	msb_ö›block
;

125 
	msb_‚ame
[12];

126 
__uöt8_t
 
	msb_blocklog
;

127 
__uöt8_t
 
	msb_£˘log
;

128 
__uöt8_t
 
	msb_öodñog
;

129 
__uöt8_t
 
	msb_ö›blog
;

130 
__uöt8_t
 
	msb_agblklog
;

131 
__uöt8_t
 
	msb_ªxt¶og
;

132 
__uöt8_t
 
	msb_ö¥ogªss
;

133 
__uöt8_t
 
	msb_imax_p˘
;

140 
__uöt64_t
 
	msb_icou¡
;

141 
__uöt64_t
 
	msb_i‰ì
;

142 
__uöt64_t
 
	msb_fdblocks
;

143 
__uöt64_t
 
	msb_‰exã¡s
;

147 
xfs_öo_t
 
	msb_uquŸöo
;

148 
xfs_öo_t
 
	msb_gquŸöo
;

149 
__uöt16_t
 
	msb_qÊags
;

150 
__uöt8_t
 
	msb_Êags
;

151 
__uöt8_t
 
	msb_sh¨ed_vn
;

152 
xfs_exéí_t
 
	msb_öﬂlignmt
;

153 
__uöt32_t
 
	msb_unô
;

154 
__uöt32_t
 
	msb_width
;

155 
__uöt8_t
 
	msb_dúblklog
;

156 
__uöt8_t
 
	msb_log£˘log
;

157 
__uöt16_t
 
	msb_log£˘size
;

158 
__uöt32_t
 
	msb_logsunô
;

159 
__uöt32_t
 
	msb_„©uªs2
;

170 
__uöt32_t
 
	msb_bad_„©uªs2
;

175 
__uöt32_t
 
	msb_„©uªs_com∑t
;

176 
__uöt32_t
 
	msb_„©uªs_ro_com∑t
;

177 
__uöt32_t
 
	msb_„©uªs_öcom∑t
;

178 
__uöt32_t
 
	msb_„©uªs_log_öcom∑t
;

180 
__uöt32_t
 
	msb_¸c
;

181 
xfs_exéí_t
 
	msb_•öo_Æign
;

183 
xfs_öo_t
 
	msb_pquŸöo
;

184 
xfs_l¢_t
 
	msb_l¢
;

185 
uuid_t
 
	msb_mëa_uuid
;

188 } 
	txfs_sb_t
;

190 
	#XFS_SB_CRC_OFF
 
	`off£tof
(
xfs_sb
, 
sb_¸c
)

	)

196 
	sxfs_dsb
 {

197 
__be32
 
	msb_magi˙um
;

198 
__be32
 
	msb_blocksize
;

199 
__be64
 
	msb_dblocks
;

200 
__be64
 
	msb_rblocks
;

201 
__be64
 
	msb_ªxã¡s
;

202 
uuid_t
 
	msb_uuid
;

203 
__be64
 
	msb_log°¨t
;

204 
__be64
 
	msb_roŸöo
;

205 
__be64
 
	msb_rbmöo
;

206 
__be64
 
	msb_rsumöo
;

207 
__be32
 
	msb_ªxtsize
;

208 
__be32
 
	msb_agblocks
;

209 
__be32
 
	msb_agcou¡
;

210 
__be32
 
	msb_rbmblocks
;

211 
__be32
 
	msb_logblocks
;

212 
__be16
 
	msb_vîsi⁄num
;

213 
__be16
 
	msb_£˘size
;

214 
__be16
 
	msb_öodesize
;

215 
__be16
 
	msb_ö›block
;

216 
	msb_‚ame
[12];

217 
__u8
 
	msb_blocklog
;

218 
__u8
 
	msb_£˘log
;

219 
__u8
 
	msb_öodñog
;

220 
__u8
 
	msb_ö›blog
;

221 
__u8
 
	msb_agblklog
;

222 
__u8
 
	msb_ªxt¶og
;

223 
__u8
 
	msb_ö¥ogªss
;

224 
__u8
 
	msb_imax_p˘
;

231 
__be64
 
	msb_icou¡
;

232 
__be64
 
	msb_i‰ì
;

233 
__be64
 
	msb_fdblocks
;

234 
__be64
 
	msb_‰exã¡s
;

238 
__be64
 
	msb_uquŸöo
;

239 
__be64
 
	msb_gquŸöo
;

240 
__be16
 
	msb_qÊags
;

241 
__u8
 
	msb_Êags
;

242 
__u8
 
	msb_sh¨ed_vn
;

243 
__be32
 
	msb_öﬂlignmt
;

244 
__be32
 
	msb_unô
;

245 
__be32
 
	msb_width
;

246 
__u8
 
	msb_dúblklog
;

247 
__u8
 
	msb_log£˘log
;

248 
__be16
 
	msb_log£˘size
;

249 
__be32
 
	msb_logsunô
;

250 
__be32
 
	msb_„©uªs2
;

257 
__be32
 
	msb_bad_„©uªs2
;

262 
__be32
 
	msb_„©uªs_com∑t
;

263 
__be32
 
	msb_„©uªs_ro_com∑t
;

264 
__be32
 
	msb_„©uªs_öcom∑t
;

265 
__be32
 
	msb_„©uªs_log_öcom∑t
;

267 
__À32
 
	msb_¸c
;

268 
__be32
 
	msb_•öo_Æign
;

270 
__be64
 
	msb_pquŸöo
;

271 
__be64
 
	msb_l¢
;

272 
uuid_t
 
	msb_mëa_uuid
;

275 } 
	txfs_dsb_t
;

282 
	#XFS_SBF_NOFLAGS
 0x00

	)

283 
	#XFS_SBF_READONLY
 0x01

	)

288 
	#XFS_SB_MAX_SHARED_VN
 0

	)

290 
	#XFS_SB_VERSION_NUM
(
sbp
Ë((sbp)->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_NUMBITS
)

	)

295 
ölöe
 
boﬁ
 
	$xfs_sb_good_v4_„©uªs
(
xfs_sb
 *
sbp
)

297 i‡(!(
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_DIRV2BIT
))

298  
Ál£
;

301 i‡((
sbp
->
sb_vîsi⁄num
 & ~
XFS_SB_VERSION_OKBITS
) ||

302 ((
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_MOREBITSBIT
) &&

303 (
sbp
->
sb_„©uªs2
 & ~
XFS_SB_VERSION2_OKBITS
)))

304  
Ál£
;

306  
åue
;

307 
	}
}

309 
ölöe
 
boﬁ
 
	$xfs_sb_good_vîsi⁄
(
xfs_sb
 *
sbp
)

311 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
)

312  
åue
;

313 i‡(
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_4
)

314  
	`xfs_sb_good_v4_„©uªs
(
sbp
);

315  
Ál£
;

316 
	}
}

322 
ölöe
 
boﬁ
 
	$xfs_sb_has_mism©ched_„©uªs2
(
xfs_sb
 *
sbp
)

324  
sbp
->
sb_bad_„©uªs2
 !sbp->
sb_„©uªs2
;

325 
	}
}

327 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_haßâr
(
xfs_sb
 *
sbp
)

329  (
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_ATTRBIT
);

330 
	}
}

332 
ölöe
 
	$xfs_sb_vîsi⁄_add©å
(
xfs_sb
 *
sbp
)

334 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_ATTRBIT
;

335 
	}
}

337 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_hasquŸa
(
xfs_sb
 *
sbp
)

339  (
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_QUOTABIT
);

340 
	}
}

342 
ölöe
 
	$xfs_sb_vîsi⁄_addquŸa
(
xfs_sb
 *
sbp
)

344 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_QUOTABIT
;

345 
	}
}

347 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_haßlign
(
xfs_sb
 *
sbp
)

349  (
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
 ||

350 (
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_ALIGNBIT
));

351 
	}
}

353 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_hasdÆign
(
xfs_sb
 *
sbp
)

355  (
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_DALIGNBIT
);

356 
	}
}

358 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_ha¶ogv2
(
xfs_sb
 *
sbp
)

360  
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
 ||

361 (
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_LOGV2BIT
);

362 
	}
}

364 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_ha£xtÊgbô
(
xfs_sb
 *
sbp
)

366  
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
 ||

367 (
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_EXTFLGBIT
);

368 
	}
}

370 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_has£˘‹
(
xfs_sb
 *
sbp
)

372  (
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_SECTORBIT
);

373 
	}
}

375 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_haßsciici
(
xfs_sb
 *
sbp
)

377  (
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_BORGBIT
);

378 
	}
}

380 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_hasm‹ebôs
(
xfs_sb
 *
sbp
)

382  
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
 ||

383 (
sbp
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_MOREBITSBIT
);

384 
	}
}

389 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_ha¶azysbcou¡
(
xfs_sb
 *
sbp
)

391  (
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
) ||

392 (
	`xfs_sb_vîsi⁄_hasm‹ebôs
(
sbp
) &&

393 (
sbp
->
sb_„©uªs2
 & 
XFS_SB_VERSION2_LAZYSBCOUNTBIT
));

394 
	}
}

396 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_haßâr2
(
xfs_sb
 *
sbp
)

398  (
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
) ||

399 (
	`xfs_sb_vîsi⁄_hasm‹ebôs
(
sbp
) &&

400 (
sbp
->
sb_„©uªs2
 & 
XFS_SB_VERSION2_ATTR2BIT
));

401 
	}
}

403 
ölöe
 
	$xfs_sb_vîsi⁄_add©å2
(
xfs_sb
 *
sbp
)

405 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_MOREBITSBIT
;

406 
sbp
->
sb_„©uªs2
 |
XFS_SB_VERSION2_ATTR2BIT
;

407 
	}
}

409 
ölöe
 
	$xfs_sb_vîsi⁄_ªmovóâr2
(
xfs_sb
 *
sbp
)

411 
sbp
->
sb_„©uªs2
 &~
XFS_SB_VERSION2_ATTR2BIT
;

412 i‡(!
sbp
->
sb_„©uªs2
)

413 
sbp
->
sb_vîsi⁄num
 &~
XFS_SB_VERSION_MOREBITSBIT
;

414 
	}
}

416 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_ha•rojid32bô
(
xfs_sb
 *
sbp
)

418  (
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
) ||

419 (
	`xfs_sb_vîsi⁄_hasm‹ebôs
(
sbp
) &&

420 (
sbp
->
sb_„©uªs2
 & 
XFS_SB_VERSION2_PROJID32BIT
));

421 
	}
}

423 
ölöe
 
	$xfs_sb_vîsi⁄_add¥ojid32bô
(
xfs_sb
 *
sbp
)

425 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_MOREBITSBIT
;

426 
sbp
->
sb_„©uªs2
 |
XFS_SB_VERSION2_PROJID32BIT
;

427 
	}
}

447 
	#XFS_SB_FEAT_COMPAT_ALL
 0

	)

448 
	#XFS_SB_FEAT_COMPAT_UNKNOWN
 ~
XFS_SB_FEAT_COMPAT_ALL


	)

449 
ölöe
 
boﬁ


450 
	$xfs_sb_has_com∑t_„©uª
(

451 
xfs_sb
 *
sbp
,

452 
__uöt32_t
 
„©uª
)

454  (
sbp
->
sb_„©uªs_com∑t
 & 
„©uª
) != 0;

455 
	}
}

457 
	#XFS_SB_FEAT_RO_COMPAT_FINOBT
 (1 << 0Ë

	)

458 
	#XFS_SB_FEAT_RO_COMPAT_RMAPBT
 (1 << 1Ë

	)

459 
	#XFS_SB_FEAT_RO_COMPAT_REFLINK
 (1 << 2Ë

	)

460 
	#XFS_SB_FEAT_RO_COMPAT_ALL
 \

461 (
XFS_SB_FEAT_RO_COMPAT_FINOBT
 | \

462 
XFS_SB_FEAT_RO_COMPAT_RMAPBT
 | \

463 
XFS_SB_FEAT_RO_COMPAT_REFLINK
)

	)

464 
	#XFS_SB_FEAT_RO_COMPAT_UNKNOWN
 ~
XFS_SB_FEAT_RO_COMPAT_ALL


	)

465 
ölöe
 
boﬁ


466 
	$xfs_sb_has_ro_com∑t_„©uª
(

467 
xfs_sb
 *
sbp
,

468 
__uöt32_t
 
„©uª
)

470  (
sbp
->
sb_„©uªs_ro_com∑t
 & 
„©uª
) != 0;

471 
	}
}

473 
	#XFS_SB_FEAT_INCOMPAT_FTYPE
 (1 << 0Ë

	)

474 
	#XFS_SB_FEAT_INCOMPAT_SPINODES
 (1 << 1Ë

	)

475 
	#XFS_SB_FEAT_INCOMPAT_META_UUID
 (1 << 2Ë

	)

476 
	#XFS_SB_FEAT_INCOMPAT_ALL
 \

477 (
XFS_SB_FEAT_INCOMPAT_FTYPE
| \

478 
XFS_SB_FEAT_INCOMPAT_SPINODES
| \

479 
XFS_SB_FEAT_INCOMPAT_META_UUID
)

	)

481 
	#XFS_SB_FEAT_INCOMPAT_UNKNOWN
 ~
XFS_SB_FEAT_INCOMPAT_ALL


	)

482 
ölöe
 
boﬁ


483 
	$xfs_sb_has_öcom∑t_„©uª
(

484 
xfs_sb
 *
sbp
,

485 
__uöt32_t
 
„©uª
)

487  (
sbp
->
sb_„©uªs_öcom∑t
 & 
„©uª
) != 0;

488 
	}
}

490 
	#XFS_SB_FEAT_INCOMPAT_LOG_ALL
 0

	)

491 
	#XFS_SB_FEAT_INCOMPAT_LOG_UNKNOWN
 ~
XFS_SB_FEAT_INCOMPAT_LOG_ALL


	)

492 
ölöe
 
boﬁ


493 
	$xfs_sb_has_öcom∑t_log_„©uª
(

494 
xfs_sb
 *
sbp
,

495 
__uöt32_t
 
„©uª
)

497  (
sbp
->
sb_„©uªs_log_öcom∑t
 & 
„©uª
) != 0;

498 
	}
}

503 
ölöe
 
	$xfs_sb_vîsi⁄_has¸c
(
xfs_sb
 *
sbp
)

505  
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
;

506 
	}
}

508 
ölöe
 
	$xfs_sb_vîsi⁄_has_pquŸöo
(
xfs_sb
 *
sbp
)

510  
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
;

511 
	}
}

513 
ölöe
 
	$xfs_sb_vîsi⁄_has·y≥
(
xfs_sb
 *
sbp
)

515  (
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
 &&

516 
	`xfs_sb_has_öcom∑t_„©uª
(
sbp
, 
XFS_SB_FEAT_INCOMPAT_FTYPE
)) ||

517 (
	`xfs_sb_vîsi⁄_hasm‹ebôs
(
sbp
) &&

518 (
sbp
->
sb_„©uªs2
 & 
XFS_SB_VERSION2_FTYPE
));

519 
	}
}

521 
ölöe
 
	$xfs_sb_vîsi⁄_hasföobt
(
xfs_sb_t
 *
sbp
)

523  (
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
) &&

524 (
sbp
->
sb_„©uªs_ro_com∑t
 & 
XFS_SB_FEAT_RO_COMPAT_FINOBT
);

525 
	}
}

527 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_has•¨£öodes
(
xfs_sb
 *
sbp
)

529  
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
 &&

530 
	`xfs_sb_has_öcom∑t_„©uª
(
sbp
, 
XFS_SB_FEAT_INCOMPAT_SPINODES
);

531 
	}
}

539 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_hasmëauuid
(
xfs_sb
 *
sbp
)

541  (
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
) &&

542 (
sbp
->
sb_„©uªs_öcom∑t
 & 
XFS_SB_FEAT_INCOMPAT_META_UUID
);

543 
	}
}

545 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_ha§m≠bt
(
xfs_sb
 *
sbp
)

547  (
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
) &&

548 (
sbp
->
sb_„©uªs_ro_com∑t
 & 
XFS_SB_FEAT_RO_COMPAT_RMAPBT
);

549 
	}
}

551 
ölöe
 
boﬁ
 
	$xfs_sb_vîsi⁄_ha§eÊök
(
xfs_sb
 *
sbp
)

553  
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
 &&

554 (
sbp
->
sb_„©uªs_ro_com∑t
 & 
XFS_SB_FEAT_RO_COMPAT_REFLINK
);

555 
	}
}

561 
ölöe
 
boﬁ


562 
	$xfs_is_quŸa_öode
(
xfs_sb
 *
sbp
, 
xfs_öo_t
 
öo
)

564  (
öo
 =
sbp
->
sb_uquŸöo
 ||

565 
öo
 =
sbp
->
sb_gquŸöo
 ||

566 
öo
 =
sbp
->
sb_pquŸöo
);

567 
	}
}

569 
	#XFS_SB_DADDR
 ((
xfs_daddr_t
)0Ë

	)

570 
	#XFS_SB_BLOCK
(
mp
Ë
	`XFS_HDR_BLOCK
(mp, 
XFS_SB_DADDR
)

	)

571 
	#XFS_BUF_TO_SBP
(
bp
Ë((
xfs_dsb_t
 *)((bp)->
b_addr
))

	)

573 
	#XFS_HDR_BLOCK
(
mp
,
d
Ë((
xfs_agblock_t
)
	`XFS_BB_TO_FSBT
(mp,d))

	)

574 
	#XFS_DADDR_TO_FSB
(
mp
,
d
Ë
	`XFS_AGB_TO_FSB
(mp, \

575 
	`xfs_daddr_to_agno
(
mp
,
d
), 
	`xfs_daddr_to_agbno
(mp,d))

	)

576 
	#XFS_FSB_TO_DADDR
(
mp
,
fsbno
Ë
	`XFS_AGB_TO_DADDR
(mp, \

577 
	`XFS_FSB_TO_AGNO
(
mp
,
fsbno
), 
	`XFS_FSB_TO_AGBNO
(mp,fsbno))

	)

582 
	#XFS_FSS_TO_BB
(
mp
,
£c
Ë((£cË<< (mp)->
m_£˘bb_log
)

	)

587 
	#XFS_FSB_TO_BB
(
mp
,
fsbno
Ë((fsbnoË<< (mp)->
m_blkbb_log
)

	)

588 
	#XFS_BB_TO_FSB
(
mp
,
bb
) \

589 (((
bb
Ë+ (
	`XFS_FSB_TO_BB
(
mp
,1Ë- 1)Ë>> (mp)->
m_blkbb_log
)

	)

590 
	#XFS_BB_TO_FSBT
(
mp
,
bb
Ë((bbË>> (mp)->
m_blkbb_log
)

	)

595 
	#XFS_FSB_TO_B
(
mp
,
fsbno
Ë((
xfs_fsize_t
)(fsbnoË<< (mp)->
m_sb
.
sb_blocklog
)

	)

596 
	#XFS_B_TO_FSB
(
mp
,
b
) \

597 ((((
__uöt64_t
)(
b
)Ë+ (
mp
)->
m_blockmask
Ë>> (mp)->
m_sb
.
sb_blocklog
)

	)

598 
	#XFS_B_TO_FSBT
(
mp
,
b
Ë(((
__uöt64_t
)(b)Ë>> (mp)->
m_sb
.
sb_blocklog
)

	)

599 
	#XFS_B_FSB_OFFSET
(
mp
,
b
Ë((bË& (mp)->
m_blockmask
)

	)

607 
	#XFS_AGF_MAGIC
 0x58414746

	)

608 
	#XFS_AGI_MAGIC
 0x58414749

	)

609 
	#XFS_AGFL_MAGIC
 0x5841464¯

	)

610 
	#XFS_AGF_VERSION
 1

	)

611 
	#XFS_AGI_VERSION
 1

	)

613 
	#XFS_AGF_GOOD_VERSION
(
v
Ë((vË=
XFS_AGF_VERSION
)

	)

614 
	#XFS_AGI_GOOD_VERSION
(
v
Ë((vË=
XFS_AGI_VERSION
)

	)

620 
	#XFS_BTNUM_AGF
 (()
XFS_BTNUM_RMAPi
 + 1)

	)

628 
	sxfs_agf
 {

632 
__be32
 
	magf_magi˙um
;

633 
__be32
 
	magf_vîsi⁄num
;

634 
__be32
 
	magf_£qno
;

635 
__be32
 
	magf_Àngth
;

639 
__be32
 
	magf_roŸs
[
XFS_BTNUM_AGF
];

640 
__be32
 
	magf_Àvñs
[
XFS_BTNUM_AGF
];

642 
__be32
 
	magf_Êfú°
;

643 
__be32
 
	magf_Êœ°
;

644 
__be32
 
	magf_Êcou¡
;

645 
__be32
 
	magf_‰ìblks
;

647 
__be32
 
	magf_l⁄ge°
;

648 
__be32
 
	magf_båìblks
;

649 
uuid_t
 
	magf_uuid
;

651 
__be32
 
	magf_rm≠_blocks
;

652 
__be32
 
	magf_ªfcou¡_blocks
;

654 
__be32
 
	magf_ªfcou¡_roŸ
;

655 
__be32
 
	magf_ªfcou¡_Àvñ
;

662 
__be64
 
	magf_•¨e64
[14];

665 
__be64
 
	magf_l¢
;

666 
__be32
 
	magf_¸c
;

667 
__be32
 
	magf_•¨e2
;

670 } 
	txfs_agf_t
;

672 
	#XFS_AGF_CRC_OFF
 
	`off£tof
(
xfs_agf
, 
agf_¸c
)

	)

674 
	#XFS_AGF_MAGICNUM
 0x00000001

	)

675 
	#XFS_AGF_VERSIONNUM
 0x00000002

	)

676 
	#XFS_AGF_SEQNO
 0x00000004

	)

677 
	#XFS_AGF_LENGTH
 0x00000008

	)

678 
	#XFS_AGF_ROOTS
 0x00000010

	)

679 
	#XFS_AGF_LEVELS
 0x00000020

	)

680 
	#XFS_AGF_FLFIRST
 0x00000040

	)

681 
	#XFS_AGF_FLLAST
 0x00000080

	)

682 
	#XFS_AGF_FLCOUNT
 0x00000100

	)

683 
	#XFS_AGF_FREEBLKS
 0x00000200

	)

684 
	#XFS_AGF_LONGEST
 0x00000400

	)

685 
	#XFS_AGF_BTREEBLKS
 0x00000800

	)

686 
	#XFS_AGF_UUID
 0x00001000

	)

687 
	#XFS_AGF_RMAP_BLOCKS
 0x00002000

	)

688 
	#XFS_AGF_REFCOUNT_BLOCKS
 0x00004000

	)

689 
	#XFS_AGF_REFCOUNT_ROOT
 0x00008000

	)

690 
	#XFS_AGF_REFCOUNT_LEVEL
 0x00010000

	)

691 
	#XFS_AGF_SPARE64
 0x00020000

	)

692 
	#XFS_AGF_NUM_BITS
 18

	)

693 
	#XFS_AGF_ALL_BITS
 ((1 << 
XFS_AGF_NUM_BITS
Ë- 1)

	)

695 
	#XFS_AGF_FLAGS
 \

696 { 
XFS_AGF_MAGICNUM
, "MAGICNUM" }, \

697 { 
XFS_AGF_VERSIONNUM
, "VERSIONNUM" }, \

698 { 
XFS_AGF_SEQNO
, "SEQNO" }, \

699 { 
XFS_AGF_LENGTH
, "LENGTH" }, \

700 { 
XFS_AGF_ROOTS
, "ROOTS" }, \

701 { 
XFS_AGF_LEVELS
, "LEVELS" }, \

702 { 
XFS_AGF_FLFIRST
, "FLFIRST" }, \

703 { 
XFS_AGF_FLLAST
, "FLLAST" }, \

704 { 
XFS_AGF_FLCOUNT
, "FLCOUNT" }, \

705 { 
XFS_AGF_FREEBLKS
, "FREEBLKS" }, \

706 { 
XFS_AGF_LONGEST
, "LONGEST" }, \

707 { 
XFS_AGF_BTREEBLKS
, "BTREEBLKS" }, \

708 { 
XFS_AGF_UUID
, "UUID" }, \

709 { 
XFS_AGF_RMAP_BLOCKS
, "RMAP_BLOCKS" }, \

710 { 
XFS_AGF_REFCOUNT_BLOCKS
, "REFCOUNT_BLOCKS" }, \

711 { 
XFS_AGF_REFCOUNT_ROOT
, "REFCOUNT_ROOT" }, \

712 { 
XFS_AGF_REFCOUNT_LEVEL
, "REFCOUNT_LEVEL" }, \

713 { 
XFS_AGF_SPARE64
, "SPARE64" }

	)

716 
	#XFS_AGF_DADDR
(
mp
Ë((
xfs_daddr_t
)(1 << (mp)->
m_£˘bb_log
))

	)

717 
	#XFS_AGF_BLOCK
(
mp
Ë
	`XFS_HDR_BLOCK
(mp, 
	`XFS_AGF_DADDR
(mp))

	)

718 
	#XFS_BUF_TO_AGF
(
bp
Ë((
xfs_agf_t
 *)((bp)->
b_addr
))

	)

723 
	#XFS_AGI_UNLINKED_BUCKETS
 64

	)

725 
	sxfs_agi
 {

729 
__be32
 
	magi_magi˙um
;

730 
__be32
 
	magi_vîsi⁄num
;

731 
__be32
 
	magi_£qno
;

732 
__be32
 
	magi_Àngth
;

738 
__be32
 
	magi_cou¡
;

739 
__be32
 
	magi_roŸ
;

740 
__be32
 
	magi_Àvñ
;

741 
__be32
 
	magi_‰ìcou¡
;

743 
__be32
 
	magi_√wöo
;

744 
__be32
 
	magi_dúöo
;

749 
__be32
 
	magi_u∆öked
[
XFS_AGI_UNLINKED_BUCKETS
];

753 
uuid_t
 
	magi_uuid
;

754 
__be32
 
	magi_¸c
;

755 
__be32
 
	magi_∑d32
;

756 
__be64
 
	magi_l¢
;

758 
__be32
 
	magi_‰ì_roŸ
;

759 
__be32
 
	magi_‰ì_Àvñ
;

762 } 
	txfs_agi_t
;

764 
	#XFS_AGI_CRC_OFF
 
	`off£tof
(
xfs_agi
, 
agi_¸c
)

	)

766 
	#XFS_AGI_MAGICNUM
 (1 << 0)

	)

767 
	#XFS_AGI_VERSIONNUM
 (1 << 1)

	)

768 
	#XFS_AGI_SEQNO
 (1 << 2)

	)

769 
	#XFS_AGI_LENGTH
 (1 << 3)

	)

770 
	#XFS_AGI_COUNT
 (1 << 4)

	)

771 
	#XFS_AGI_ROOT
 (1 << 5)

	)

772 
	#XFS_AGI_LEVEL
 (1 << 6)

	)

773 
	#XFS_AGI_FREECOUNT
 (1 << 7)

	)

774 
	#XFS_AGI_NEWINO
 (1 << 8)

	)

775 
	#XFS_AGI_DIRINO
 (1 << 9)

	)

776 
	#XFS_AGI_UNLINKED
 (1 << 10)

	)

777 
	#XFS_AGI_NUM_BITS_R1
 11

	)

778 
	#XFS_AGI_ALL_BITS_R1
 ((1 << 
XFS_AGI_NUM_BITS_R1
Ë- 1)

	)

779 
	#XFS_AGI_FREE_ROOT
 (1 << 11)

	)

780 
	#XFS_AGI_FREE_LEVEL
 (1 << 12)

	)

781 
	#XFS_AGI_NUM_BITS_R2
 13

	)

784 
	#XFS_AGI_DADDR
(
mp
Ë((
xfs_daddr_t
)(2 << (mp)->
m_£˘bb_log
))

	)

785 
	#XFS_AGI_BLOCK
(
mp
Ë
	`XFS_HDR_BLOCK
(mp, 
	`XFS_AGI_DADDR
(mp))

	)

786 
	#XFS_BUF_TO_AGI
(
bp
Ë((
xfs_agi_t
 *)((bp)->
b_addr
))

	)

792 
	#XFS_AGFL_DADDR
(
mp
Ë((
xfs_daddr_t
)(3 << (mp)->
m_£˘bb_log
))

	)

793 
	#XFS_AGFL_BLOCK
(
mp
Ë
	`XFS_HDR_BLOCK
(mp, 
	`XFS_AGFL_DADDR
(mp))

	)

794 
	#XFS_BUF_TO_AGFL
(
bp
Ë((
xfs_agÊ_t
 *)((bp)->
b_addr
))

	)

796 
	#XFS_BUF_TO_AGFL_BNO
(
mp
, 
bp
) \

797 (
	`xfs_sb_vîsi⁄_has¸c
(&((
mp
)->
m_sb
)) ? \

798 &(
	`XFS_BUF_TO_AGFL
(
bp
)->
agÊ_bno
[0]) : \

799 (
__be32
 *)(
bp
)->
b_addr
)

	)

806 
	#XFS_AGFL_SIZE
(
mp
) \

807 (((
mp
)->
m_sb
.
sb_£˘size
 - \

808 (
	`xfs_sb_vîsi⁄_has¸c
(&((
mp
)->
m_sb
)) ? \

809 (
xfs_agÊ
) : 0)) / \

810 (
xfs_agblock_t
))

	)

812 
	sxfs_agÊ
 {

813 
__be32
 
	magÊ_magi˙um
;

814 
__be32
 
	magÊ_£qno
;

815 
uuid_t
 
	magÊ_uuid
;

816 
__be64
 
	magÊ_l¢
;

817 
__be32
 
	magÊ_¸c
;

818 
__be32
 
	magÊ_bno
[];

819 } 
	t__©åibuã__
((
	t∑cked
)Ë
	txfs_agÊ_t
;

821 
	#XFS_AGFL_CRC_OFF
 
	`off£tof
(
xfs_agÊ
, 
agÊ_¸c
)

	)

823 
	#XFS_AGB_TO_FSB
(
mp
,
agno
,
agbno
) \

824 (((
xfs_fsblock_t
)(
agno
Ë<< (
mp
)->
m_sb
.
sb_agblklog
Ë| (
agbno
))

	)

825 
	#XFS_FSB_TO_AGNO
(
mp
,
fsbno
) \

826 ((
xfs_agnumbî_t
)((
fsbno
Ë>> (
mp
)->
m_sb
.
sb_agblklog
))

	)

827 
	#XFS_FSB_TO_AGBNO
(
mp
,
fsbno
) \

828 ((
xfs_agblock_t
)((
fsbno
Ë& 
	`xfs_mask32lo
((
mp
)->
m_sb
.
sb_agblklog
)))

	)

829 
	#XFS_AGB_TO_DADDR
(
mp
,
agno
,
agbno
) \

830 ((
xfs_daddr_t
)
	`XFS_FSB_TO_BB
(
mp
, \

831 (
xfs_fsblock_t
)(
agno
Ë* (
mp
)->
m_sb
.
sb_agblocks
 + (
agbno
)))

	)

832 
	#XFS_AG_DADDR
(
mp
,
agno
,
d
Ë(
	`XFS_AGB_TO_DADDR
(mp,ágno, 0Ë+ (d))

	)

838 
	#XFS_AG_CHECK_DADDR
(
mp
,
d
,
Àn
) \

839 ((
Àn
) == 1 ? \

840 
	`ASSERT
((
d
Ë=
XFS_SB_DADDR
 || \

841 
	`xfs_daddr_to_agbno
(
mp
, 
d
Ë!
XFS_SB_DADDR
) : \

842 
	`ASSERT
(
	`xfs_daddr_to_agno
(
mp
, 
d
) == \

843 
	`xfs_daddr_to_agno
(
mp
, (
d
Ë+ (
Àn
Ë- 1)))

	)

845 
	sxfs_time°amp
 {

846 
__be32
 
	mt_£c
;

847 
__be32
 
	mt_n£c
;

848 } 
	txfs_time°amp_t
;

867 
	#XFS_DINODE_MAGIC
 0x494ê

	)

868 
	sxfs_döode
 {

869 
__be16
 
	mdi_magic
;

870 
__be16
 
	mdi_mode
;

871 
__u8
 
	mdi_vîsi⁄
;

872 
__u8
 
	mdi_f‹m©
;

873 
__be16
 
	mdi_⁄lök
;

874 
__be32
 
	mdi_uid
;

875 
__be32
 
	mdi_gid
;

876 
__be32
 
	mdi_∆ök
;

877 
__be16
 
	mdi_¥ojid_lo
;

878 
__be16
 
	mdi_¥ojid_hi
;

879 
__u8
 
	mdi_∑d
[6];

880 
__be16
 
	mdi_Êushôî
;

881 
xfs_time°amp_t
 
	mdi_©ime
;

882 
xfs_time°amp_t
 
	mdi_mtime
;

883 
xfs_time°amp_t
 
	mdi_˘ime
;

884 
__be64
 
	mdi_size
;

885 
__be64
 
	mdi_nblocks
;

886 
__be32
 
	mdi_extsize
;

887 
__be32
 
	mdi_√xã¡s
;

888 
__be16
 
	mdi_™exã¡s
;

889 
__u8
 
	mdi_f‹koff
;

890 
__s8
 
	mdi_af‹m©
;

891 
__be32
 
	mdi_dmevmask
;

892 
__be16
 
	mdi_dm°©e
;

893 
__be16
 
	mdi_Êags
;

894 
__be32
 
	mdi_gí
;

897 
__be32
 
	mdi_√xt_u∆öked
;

900 
__À32
 
	mdi_¸c
;

901 
__be64
 
	mdi_ch™gecou¡
;

902 
__be64
 
	mdi_l¢
;

903 
__be64
 
	mdi_Êags2
;

904 
__be32
 
	mdi_cowextsize
;

905 
__u8
 
	mdi_∑d2
[12];

908 
xfs_time°amp_t
 
	mdi_¸time
;

909 
__be64
 
	mdi_öo
;

910 
uuid_t
 
	mdi_uuid
;

913 } 
	txfs_döode_t
;

915 
	#XFS_DINODE_CRC_OFF
 
	`off£tof
(
xfs_döode
, 
di_¸c
)

	)

917 
	#DI_MAX_FLUSH
 0xffff

	)

923 
ölöe
 
uöt
 
	$xfs_döode_size
(
vîsi⁄
)

925 i‡(
vîsi⁄
 == 3)

926  (
xfs_döode
);

927  
	`off£tof
(
xfs_döode
, 
di_¸c
);

928 
	}
}

935 
	#XFS_MAXLINK
 ((1U << 31Ë- 1U)

	)

936 
	#XFS_MAXLINK_1
 65535U

	)

941 
	exfs_döode_fmt
 {

942 
	mXFS_DINODE_FMT_DEV
,

943 
	mXFS_DINODE_FMT_LOCAL
,

944 
	mXFS_DINODE_FMT_EXTENTS
,

945 
	mXFS_DINODE_FMT_BTREE
,

946 
	mXFS_DINODE_FMT_UUID


947 } 
	txfs_döode_fmt_t
;

952 
	#XFS_DINODE_MIN_LOG
 8

	)

953 
	#XFS_DINODE_MAX_LOG
 11

	)

954 
	#XFS_DINODE_MIN_SIZE
 (1 << 
XFS_DINODE_MIN_LOG
)

	)

955 
	#XFS_DINODE_MAX_SIZE
 (1 << 
XFS_DINODE_MAX_LOG
)

	)

960 
	#XFS_LITINO
(
mp
, 
vîsi⁄
) \

961 (()(((
mp
)->
m_sb
.
sb_öodesize
Ë- 
	`xfs_döode_size
(
vîsi⁄
)))

	)

966 
	#XFS_DFORK_Q
(
dù
Ë((dù)->
di_f‹koff
 !0)

	)

967 
	#XFS_DFORK_BOFF
(
dù
Ë(()((dù)->
di_f‹koff
 << 3))

	)

969 
	#XFS_DFORK_DSIZE
(
dù
,
mp
) \

970 (
	`XFS_DFORK_Q
(
dù
) ? \

971 
	`XFS_DFORK_BOFF
(
dù
) : \

972 
	`XFS_LITINO
(
mp
, (
dù
)->
di_vîsi⁄
))

	)

973 
	#XFS_DFORK_ASIZE
(
dù
,
mp
) \

974 (
	`XFS_DFORK_Q
(
dù
) ? \

975 
	`XFS_LITINO
(
mp
, (
dù
)->
di_vîsi⁄
Ë- 
	`XFS_DFORK_BOFF
(dip) : \

976 0)

	)

977 
	#XFS_DFORK_SIZE
(
dù
,
mp
,
w
) \

978 ((
w
Ë=
XFS_DATA_FORK
 ? \

979 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
) : \

980 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
))

	)

985 
	#XFS_DFORK_DPTR
(
dù
) \

986 ((*)
dù
 + 
	`xfs_döode_size
(dù->
di_vîsi⁄
))

	)

987 
	#XFS_DFORK_APTR
(
dù
) \

988 (
	`XFS_DFORK_DPTR
(
dù
Ë+ 
	`XFS_DFORK_BOFF
(dù))

	)

989 
	#XFS_DFORK_PTR
(
dù
,
w
) \

990 ((
w
Ë=
XFS_DATA_FORK
 ? 
	`XFS_DFORK_DPTR
(
dù
Ë: 
	`XFS_DFORK_APTR
(dù))

	)

992 
	#XFS_DFORK_FORMAT
(
dù
,
w
) \

993 ((
w
Ë=
XFS_DATA_FORK
 ? \

994 (
dù
)->
di_f‹m©
 : \

995 (
dù
)->
di_af‹m©
)

	)

996 
	#XFS_DFORK_NEXTENTS
(
dù
,
w
) \

997 ((
w
Ë=
XFS_DATA_FORK
 ? \

998 
	`be32_to_˝u
((
dù
)->
di_√xã¡s
) : \

999 
	`be16_to_˝u
((
dù
)->
di_™exã¡s
))

	)

1005 
ölöe
 
xfs_dev_t
 
	$xfs_döode_gë_rdev
(
xfs_döode
 *
dù
)

1007  
	`be32_to_˝u
(*(
__be32
 *)
	`XFS_DFORK_DPTR
(
dù
));

1008 
	}
}

1010 
ölöe
 
	$xfs_döode_put_rdev
(
xfs_döode
 *
dù
, 
xfs_dev_t
 
rdev
)

1012 *(
__be32
 *)
	`XFS_DFORK_DPTR
(
dù
Ë
	`˝u_to_be32
(
rdev
);

1013 
	}
}

1018 
	#XFS_DIFLAG_REALTIME_BIT
 0

	)

1019 
	#XFS_DIFLAG_PREALLOC_BIT
 1

	)

1020 
	#XFS_DIFLAG_NEWRTBM_BIT
 2

	)

1021 
	#XFS_DIFLAG_IMMUTABLE_BIT
 3

	)

1022 
	#XFS_DIFLAG_APPEND_BIT
 4

	)

1023 
	#XFS_DIFLAG_SYNC_BIT
 5

	)

1024 
	#XFS_DIFLAG_NOATIME_BIT
 6

	)

1025 
	#XFS_DIFLAG_NODUMP_BIT
 7

	)

1026 
	#XFS_DIFLAG_RTINHERIT_BIT
 8

	)

1027 
	#XFS_DIFLAG_PROJINHERIT_BIT
 9

	)

1028 
	#XFS_DIFLAG_NOSYMLINKS_BIT
 10

	)

1029 
	#XFS_DIFLAG_EXTSIZE_BIT
 11

	)

1030 
	#XFS_DIFLAG_EXTSZINHERIT_BIT
 12

	)

1031 
	#XFS_DIFLAG_NODEFRAG_BIT
 13

	)

1032 
	#XFS_DIFLAG_FILESTREAM_BIT
 14

	)

1033 
	#XFS_DIFLAG_REALTIME
 (1 << 
XFS_DIFLAG_REALTIME_BIT
)

	)

1034 
	#XFS_DIFLAG_PREALLOC
 (1 << 
XFS_DIFLAG_PREALLOC_BIT
)

	)

1035 
	#XFS_DIFLAG_NEWRTBM
 (1 << 
XFS_DIFLAG_NEWRTBM_BIT
)

	)

1036 
	#XFS_DIFLAG_IMMUTABLE
 (1 << 
XFS_DIFLAG_IMMUTABLE_BIT
)

	)

1037 
	#XFS_DIFLAG_APPEND
 (1 << 
XFS_DIFLAG_APPEND_BIT
)

	)

1038 
	#XFS_DIFLAG_SYNC
 (1 << 
XFS_DIFLAG_SYNC_BIT
)

	)

1039 
	#XFS_DIFLAG_NOATIME
 (1 << 
XFS_DIFLAG_NOATIME_BIT
)

	)

1040 
	#XFS_DIFLAG_NODUMP
 (1 << 
XFS_DIFLAG_NODUMP_BIT
)

	)

1041 
	#XFS_DIFLAG_RTINHERIT
 (1 << 
XFS_DIFLAG_RTINHERIT_BIT
)

	)

1042 
	#XFS_DIFLAG_PROJINHERIT
 (1 << 
XFS_DIFLAG_PROJINHERIT_BIT
)

	)

1043 
	#XFS_DIFLAG_NOSYMLINKS
 (1 << 
XFS_DIFLAG_NOSYMLINKS_BIT
)

	)

1044 
	#XFS_DIFLAG_EXTSIZE
 (1 << 
XFS_DIFLAG_EXTSIZE_BIT
)

	)

1045 
	#XFS_DIFLAG_EXTSZINHERIT
 (1 << 
XFS_DIFLAG_EXTSZINHERIT_BIT
)

	)

1046 
	#XFS_DIFLAG_NODEFRAG
 (1 << 
XFS_DIFLAG_NODEFRAG_BIT
)

	)

1047 
	#XFS_DIFLAG_FILESTREAM
 (1 << 
XFS_DIFLAG_FILESTREAM_BIT
)

	)

1049 
	#XFS_DIFLAG_ANY
 \

1050 (
XFS_DIFLAG_REALTIME
 | 
XFS_DIFLAG_PREALLOC
 | 
XFS_DIFLAG_NEWRTBM
 | \

1051 
XFS_DIFLAG_IMMUTABLE
 | 
XFS_DIFLAG_APPEND
 | 
XFS_DIFLAG_SYNC
 | \

1052 
XFS_DIFLAG_NOATIME
 | 
XFS_DIFLAG_NODUMP
 | 
XFS_DIFLAG_RTINHERIT
 | \

1053 
XFS_DIFLAG_PROJINHERIT
 | 
XFS_DIFLAG_NOSYMLINKS
 | 
XFS_DIFLAG_EXTSIZE
 | \

1054 
XFS_DIFLAG_EXTSZINHERIT
 | 
XFS_DIFLAG_NODEFRAG
 | 
XFS_DIFLAG_FILESTREAM
)

	)

1060 
	#XFS_DIFLAG2_DAX_BIT
 0

	)

1061 
	#XFS_DIFLAG2_REFLINK_BIT
 1

	)

1062 
	#XFS_DIFLAG2_COWEXTSIZE_BIT
 2

	)

1063 
	#XFS_DIFLAG2_DAX
 (1 << 
XFS_DIFLAG2_DAX_BIT
)

	)

1064 
	#XFS_DIFLAG2_REFLINK
 (1 << 
XFS_DIFLAG2_REFLINK_BIT
)

	)

1065 
	#XFS_DIFLAG2_COWEXTSIZE
 (1 << 
XFS_DIFLAG2_COWEXTSIZE_BIT
)

	)

1067 
	#XFS_DIFLAG2_ANY
 \

1068 (
XFS_DIFLAG2_DAX
 | 
XFS_DIFLAG2_REFLINK
 | 
XFS_DIFLAG2_COWEXTSIZE
)

	)

1077 
	#XFS_INO_MASK
(
k
Ë(
__uöt32_t
)((1ULL << (k)Ë- 1)

	)

1078 
	#XFS_INO_OFFSET_BITS
(
mp
Ë(mp)->
m_sb
.
sb_ö›blog


	)

1079 
	#XFS_INO_AGBNO_BITS
(
mp
Ë(mp)->
m_sb
.
sb_agblklog


	)

1080 
	#XFS_INO_AGINO_BITS
(
mp
Ë(mp)->
m_agöo_log


	)

1081 
	#XFS_INO_AGNO_BITS
(
mp
Ë(mp)->
m_agno_log


	)

1082 
	#XFS_INO_BITS
(
mp
) \

1083 
	`XFS_INO_AGNO_BITS
(
mp
Ë+ 
	`XFS_INO_AGINO_BITS
(mp)

	)

1084 
	#XFS_INO_TO_AGNO
(
mp
,
i
) \

1085 ((
xfs_agnumbî_t
)((
i
Ë>> 
	`XFS_INO_AGINO_BITS
(
mp
)))

	)

1086 
	#XFS_INO_TO_AGINO
(
mp
,
i
) \

1087 ((
xfs_agöo_t
)(
i
Ë& 
	`XFS_INO_MASK
(
	`XFS_INO_AGINO_BITS
(
mp
)))

	)

1088 
	#XFS_INO_TO_AGBNO
(
mp
,
i
) \

1089 (((
xfs_agblock_t
)(
i
Ë>> 
	`XFS_INO_OFFSET_BITS
(
mp
)) & \

1090 
	`XFS_INO_MASK
(
	`XFS_INO_AGBNO_BITS
(
mp
)))

	)

1091 
	#XFS_INO_TO_OFFSET
(
mp
,
i
) \

1092 (()(
i
Ë& 
	`XFS_INO_MASK
(
	`XFS_INO_OFFSET_BITS
(
mp
)))

	)

1093 
	#XFS_INO_TO_FSB
(
mp
,
i
) \

1094 
	`XFS_AGB_TO_FSB
(
mp
, 
	`XFS_INO_TO_AGNO
(mp,
i
), 
	`XFS_INO_TO_AGBNO
(mp,i))

	)

1095 
	#XFS_AGINO_TO_INO
(
mp
,
a
,
i
) \

1096 (((
xfs_öo_t
)(
a
Ë<< 
	`XFS_INO_AGINO_BITS
(
mp
)Ë| (
i
))

	)

1097 
	#XFS_AGINO_TO_AGBNO
(
mp
,
i
Ë((iË>> 
	`XFS_INO_OFFSET_BITS
(mp))

	)

1098 
	#XFS_AGINO_TO_OFFSET
(
mp
,
i
) \

1099 ((
i
Ë& 
	`XFS_INO_MASK
(
	`XFS_INO_OFFSET_BITS
(
mp
)))

	)

1100 
	#XFS_OFFBNO_TO_AGINO
(
mp
,
b
,
o
) \

1101 ((
xfs_agöo_t
)(((
b
Ë<< 
	`XFS_INO_OFFSET_BITS
(
mp
)Ë| (
o
)))

	)

1103 
	#XFS_MAXINUMBER
 ((
xfs_öo_t
)((1ULL << 56Ë- 1ULL))

	)

1104 
	#XFS_MAXINUMBER_32
 ((
xfs_öo_t
)((1ULL << 32Ë- 1ULL))

	)

1111 
	#XFS_MAX_RTEXTSIZE
 (1024 * 1024 * 1024Ë

	)

1112 
	#XFS_DFL_RTEXTSIZE
 (64 * 1024Ë

	)

1113 
	#XFS_MIN_RTEXTSIZE
 (4 * 1024Ë

	)

1115 
	#XFS_BLOCKSIZE
(
mp
Ë((mp)->
m_sb
.
sb_blocksize
)

	)

1116 
	#XFS_BLOCKMASK
(
mp
Ë((mp)->
m_blockmask
)

	)

1117 
	#XFS_BLOCKWSIZE
(
mp
Ë((mp)->
m_blockwsize
)

	)

1118 
	#XFS_BLOCKWMASK
(
mp
Ë((mp)->
m_blockwmask
)

	)

1123 
	#XFS_SUMOFFS
(
mp
,
ls
,
bb
Ë(()(÷sË* (mp)->
m_sb
.
sb_rbmblocks
 + (bb)))

	)

1124 
	#XFS_SUMOFFSTOBLOCK
(
mp
,
s
) \

1125 (((
s
Ë* (
uöt
)(
xfs_sumöfo_t
)Ë>> (
mp
)->
m_sb
.
sb_blocklog
)

	)

1126 
	#XFS_SUMPTR
(
mp
,
bp
,
so
) \

1127 ((
xfs_sumöfo_t
 *)((
bp
)->
b_addr
 + \

1128 (((
so
Ë* (
uöt
)(
xfs_sumöfo_t
)Ë& 
	`XFS_BLOCKMASK
(
mp
))))

	)

1130 
	#XFS_BITTOBLOCK
(
mp
,
bi
Ë((biË>> (mp)->
m_blkbô_log
)

	)

1131 
	#XFS_BLOCKTOBIT
(
mp
,
bb
Ë((bbË<< (mp)->
m_blkbô_log
)

	)

1132 
	#XFS_BITTOWORD
(
mp
,
bi
) \

1133 (()(((
bi
Ë>> 
XFS_NBWORDLOG
Ë& 
	`XFS_BLOCKWMASK
(
mp
)))

	)

1135 
	#XFS_RTMIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

1136 
	#XFS_RTMAX
(
a
,
b
Ë(◊Ë> (bË? (aË: (b))

	)

1138 
	#XFS_RTLOBIT
(
w
Ë
	`xfs_lowbô32
(w)

	)

1139 
	#XFS_RTHIBIT
(
w
Ë
	`xfs_highbô32
(w)

	)

1141 
	#XFS_RTBLOCKLOG
(
b
Ë
	`xfs_highbô64
(b)

	)

1146 
	#XFS_DQUOT_MAGIC
 0x4451

	)

1147 
	#XFS_DQUOT_VERSION
 (
u_öt8_t
)0x01

	)

1155 
	sxfs_disk_dquŸ
 {

1156 
__be16
 
	md_magic
;

1157 
__u8
 
	md_vîsi⁄
;

1158 
__u8
 
	md_Êags
;

1159 
__be32
 
	md_id
;

1160 
__be64
 
	md_blk_h¨dlimô
;

1161 
__be64
 
	md_blk_so·limô
;

1162 
__be64
 
	md_öo_h¨dlimô
;

1163 
__be64
 
	md_öo_so·limô
;

1164 
__be64
 
	md_bcou¡
;

1165 
__be64
 
	md_icou¡
;

1166 
__be32
 
	md_ôimî
;

1168 
__be32
 
	md_btimî
;

1169 
__be16
 
	md_iw¨ns
;

1170 
__be16
 
	md_bw¨ns
;

1171 
__be32
 
	md_∑d0
;

1172 
__be64
 
	md_πb_h¨dlimô
;

1173 
__be64
 
	md_πb_so·limô
;

1174 
__be64
 
	md_πbcou¡
;

1175 
__be32
 
	md_πbtimî
;

1176 
__be16
 
	md_πbw¨ns
;

1177 
__be16
 
	md_∑d
;

1178 } 
	txfs_disk_dquŸ_t
;

1184 
	sxfs_dqblk
 {

1185 
xfs_disk_dquŸ_t
 
	mdd_diskdq
;

1186 
	mdd_fûl
[4];

1191 
__be32
 
	mdd_¸c
;

1192 
__be64
 
	mdd_l¢
;

1193 
uuid_t
 
	mdd_uuid
;

1194 } 
	txfs_dqblk_t
;

1196 
	#XFS_DQUOT_CRC_OFF
 
	`off£tof
(
xfs_dqblk
, 
dd_¸c
)

	)

1201 
	#XFS_SYMLINK_MAGIC
 0x58534c4d

	)

1203 
	sxfs_dsymlök_hdr
 {

1204 
__be32
 
	m¶_magic
;

1205 
__be32
 
	m¶_off£t
;

1206 
__be32
 
	m¶_byãs
;

1207 
__be32
 
	m¶_¸c
;

1208 
uuid_t
 
	m¶_uuid
;

1209 
__be64
 
	m¶_ow√r
;

1210 
__be64
 
	m¶_blkno
;

1211 
__be64
 
	m¶_l¢
;

1214 
	#XFS_SYMLINK_CRC_OFF
 
	`off£tof
(
xfs_dsymlök_hdr
, 
¶_¸c
)

	)

1221 
	#XFS_SYMLINK_MAPS
 3

	)

1223 
	#XFS_SYMLINK_BUF_SPACE
(
mp
, 
bufsize
) \

1224 ((
bufsize
Ë- (
	`xfs_sb_vîsi⁄_has¸c
(&(
mp
)->
m_sb
) ? \

1225 (
xfs_dsymlök_hdr
Ë: 0))

	)

1235 
	#XFS_ABTB_MAGIC
 0x41425442

	)

1236 
	#XFS_ABTB_CRC_MAGIC
 0x41423342

	)

1237 
	#XFS_ABTC_MAGIC
 0x41425443

	)

1238 
	#XFS_ABTC_CRC_MAGIC
 0x41423343

	)

1243 
	sxfs_Æloc_ªc
 {

1244 
__be32
 
	m¨_°¨tblock
;

1245 
__be32
 
	m¨_blockcou¡
;

1246 } 
	txfs_Æloc_ªc_t
, 
	txfs_Æloc_key_t
;

1248 
	sxfs_Æloc_ªc_öc‹e
 {

1249 
xfs_agblock_t
 
	m¨_°¨tblock
;

1250 
xfs_exéí_t
 
	m¨_blockcou¡
;

1251 } 
	txfs_Æloc_ªc_öc‹e_t
;

1254 
__be32
 
	txfs_Æloc_±r_t
;

1260 
	#XFS_BNO_BLOCK
(
mp
Ë((
xfs_agblock_t
)(
	`XFS_AGFL_BLOCK
(mpË+ 1))

	)

1261 
	#XFS_CNT_BLOCK
(
mp
Ë((
xfs_agblock_t
)(
	`XFS_BNO_BLOCK
(mpË+ 1))

	)

1269 
	#XFS_IBT_MAGIC
 0x49414254

	)

1270 
	#XFS_IBT_CRC_MAGIC
 0x49414233

	)

1271 
	#XFS_FIBT_MAGIC
 0x46494254

	)

1272 
	#XFS_FIBT_CRC_MAGIC
 0x46494233

	)

1274 
__uöt64_t
 
	txfs_öo‰ì_t
;

1275 
	#XFS_INODES_PER_CHUNK
 (
NBBY
 * (
xfs_öo‰ì_t
))

	)

1276 
	#XFS_INODES_PER_CHUNK_LOG
 (
XFS_NBBYLOG
 + 3)

	)

1277 
	#XFS_INOBT_ALL_FREE
 ((
xfs_öo‰ì_t
)-1)

	)

1278 
	#XFS_INOBT_MASK
(
i
Ë((
xfs_öo‰ì_t
)1 << (i))

	)

1280 
	#XFS_INOBT_HOLEMASK_FULL
 0

	)

1281 
	#XFS_INOBT_HOLEMASK_BITS
 (
NBBY
 * (
__uöt16_t
))

	)

1282 
	#XFS_INODES_PER_HOLEMASK_BIT
 \

1283 (
XFS_INODES_PER_CHUNK
 / (
NBBY
 * (
__uöt16_t
)))

	)

1285 
ölöe
 
xfs_öo‰ì_t
 
	$xfs_öobt_maskn
(
i
, 
n
)

1287  ((
n
 >
XFS_INODES_PER_CHUNK
 ? 0 : 
	`XFS_INOBT_MASK
“)Ë- 1Ë<< 
i
;

1288 
	}
}

1300 
	sxfs_öobt_ªc
 {

1301 
__be32
 
	mú_°¨töo
;

1304 
__be32
 
	mú_‰ìcou¡
;

1305 } 
	mf
;

1307 
__be16
 
	mú_hﬁemask
;

1308 
__u8
 
	mú_cou¡
;

1309 
__u8
 
	mú_‰ìcou¡
;

1310 } 
	m•
;

1311 } 
	mú_u
;

1312 
__be64
 
	mú_‰ì
;

1313 } 
	txfs_öobt_ªc_t
;

1315 
	sxfs_öobt_ªc_öc‹e
 {

1316 
xfs_agöo_t
 
	mú_°¨töo
;

1317 
__uöt16_t
 
	mú_hﬁemask
;

1318 
__uöt8_t
 
	mú_cou¡
;

1319 
__uöt8_t
 
	mú_‰ìcou¡
;

1320 
xfs_öo‰ì_t
 
	mú_‰ì
;

1321 } 
	txfs_öobt_ªc_öc‹e_t
;

1323 
ölöe
 
boﬁ
 
	$xfs_öobt_is•¨£
(
uöt16_t
 
hﬁemask
)

1326  
hﬁemask
;

1327 
	}
}

1332 
	sxfs_öobt_key
 {

1333 
__be32
 
	mú_°¨töo
;

1334 } 
	txfs_öobt_key_t
;

1337 
__be32
 
	txfs_öobt_±r_t
;

1342 
	#XFS_IBT_BLOCK
(
mp
Ë((
xfs_agblock_t
)(
	`XFS_CNT_BLOCK
(mpË+ 1))

	)

1343 
	#XFS_FIBT_BLOCK
(
mp
Ë((
xfs_agblock_t
)(
	`XFS_IBT_BLOCK
(mpË+ 1))

	)

1350 
	#XFS_RMAP_CRC_MAGIC
 0x524d4233

	)

1356 
	#XFS_OWNER_INFO_ATTR_FORK
 (1 << 0)

	)

1357 
	#XFS_OWNER_INFO_BMBT_BLOCK
 (1 << 1)

	)

1358 
	sxfs_ow√r_öfo
 {

1359 
uöt64_t
 
	moi_ow√r
;

1360 
xfs_fûeoff_t
 
	moi_off£t
;

1361 
	moi_Êags
;

1371 
	#XFS_RMAP_OWN_NULL
 (-1ULLË

	)

1372 
	#XFS_RMAP_OWN_UNKNOWN
 (-2ULLË

	)

1373 
	#XFS_RMAP_OWN_FS
 (-3ULLË

	)

1374 
	#XFS_RMAP_OWN_LOG
 (-4ULLË

	)

1375 
	#XFS_RMAP_OWN_AG
 (-5ULLË

	)

1376 
	#XFS_RMAP_OWN_INOBT
 (-6ULLË

	)

1377 
	#XFS_RMAP_OWN_INODES
 (-7ULLË

	)

1378 
	#XFS_RMAP_OWN_REFC
 (-8ULLË

	)

1379 
	#XFS_RMAP_OWN_COW
 (-9ULLË

	)

1380 
	#XFS_RMAP_OWN_MIN
 (-10ULLË

	)

1382 
	#XFS_RMAP_NON_INODE_OWNER
(
ow√r
Ë(!!((ow√rË& (1ULL << 63)))

	)

1387 
	sxfs_rm≠_ªc
 {

1388 
__be32
 
	mrm_°¨tblock
;

1389 
__be32
 
	mrm_blockcou¡
;

1390 
__be64
 
	mrm_ow√r
;

1391 
__be64
 
	mrm_off£t
;

1402 
	#XFS_RMAP_OFF_ATTR_FORK
 ((
__uöt64_t
)1ULL << 63)

	)

1403 
	#XFS_RMAP_OFF_BMBT_BLOCK
 ((
__uöt64_t
)1ULL << 62)

	)

1404 
	#XFS_RMAP_OFF_UNWRITTEN
 ((
__uöt64_t
)1ULL << 61)

	)

1406 
	#XFS_RMAP_LEN_MAX
 ((
__uöt32_t
)~0U)

	)

1407 
	#XFS_RMAP_OFF_FLAGS
 (
XFS_RMAP_OFF_ATTR_FORK
 | \

1408 
XFS_RMAP_OFF_BMBT_BLOCK
 | \

1409 
XFS_RMAP_OFF_UNWRITTEN
)

	)

1410 
	#XFS_RMAP_OFF_MASK
 ((
__uöt64_t
)0x3FFFFFFFFFFFFFULL)

	)

1412 
	#XFS_RMAP_OFF
(
off
Ë((offË& 
XFS_RMAP_OFF_MASK
)

	)

1414 
	#XFS_RMAP_IS_BMBT_BLOCK
(
off
Ë(!!((offË& 
XFS_RMAP_OFF_BMBT_BLOCK
))

	)

1415 
	#XFS_RMAP_IS_ATTR_FORK
(
off
Ë(!!((offË& 
XFS_RMAP_OFF_ATTR_FORK
))

	)

1416 
	#XFS_RMAP_IS_UNWRITTEN
(
Àn
Ë(!!((
off
Ë& 
XFS_RMAP_OFF_UNWRITTEN
))

	)

1418 
	#RMAPBT_STARTBLOCK_BITLEN
 32

	)

1419 
	#RMAPBT_BLOCKCOUNT_BITLEN
 32

	)

1420 
	#RMAPBT_OWNER_BITLEN
 64

	)

1421 
	#RMAPBT_ATTRFLAG_BITLEN
 1

	)

1422 
	#RMAPBT_BMBTFLAG_BITLEN
 1

	)

1423 
	#RMAPBT_EXNTFLAG_BITLEN
 1

	)

1424 
	#RMAPBT_UNUSED_OFFSET_BITLEN
 7

	)

1425 
	#RMAPBT_OFFSET_BITLEN
 54

	)

1427 
	#XFS_RMAP_ATTR_FORK
 (1 << 0)

	)

1428 
	#XFS_RMAP_BMBT_BLOCK
 (1 << 1)

	)

1429 
	#XFS_RMAP_UNWRITTEN
 (1 << 2)

	)

1430 
	#XFS_RMAP_KEY_FLAGS
 (
XFS_RMAP_ATTR_FORK
 | \

1431 
XFS_RMAP_BMBT_BLOCK
)

	)

1432 
	#XFS_RMAP_REC_FLAGS
 (
XFS_RMAP_UNWRITTEN
)

	)

1433 
	sxfs_rm≠_úec
 {

1434 
xfs_agblock_t
 
	mrm_°¨tblock
;

1435 
xfs_exéí_t
 
	mrm_blockcou¡
;

1436 
__uöt64_t
 
	mrm_ow√r
;

1437 
__uöt64_t
 
	mrm_off£t
;

1438 
	mrm_Êags
;

1446 
	sxfs_rm≠_key
 {

1447 
__be32
 
	mrm_°¨tblock
;

1448 
__be64
 
	mrm_ow√r
;

1449 
__be64
 
	mrm_off£t
;

1450 } 
__©åibuã__
((
∑cked
));

1453 
__be32
 
	txfs_rm≠_±r_t
;

1455 
	#XFS_RMAP_BLOCK
(
mp
) \

1456 (
	`xfs_sb_vîsi⁄_hasföobt
(&((
mp
)->
m_sb
)) ? \

1457 
	`XFS_FIBT_BLOCK
(
mp
) + 1 : \

1458 
	`XFS_IBT_BLOCK
(
mp
Ë+ 1)

	)

1464 
	#XFS_REFC_CRC_MAGIC
 0x52334643

	)

1466 
xfs_ªfc_block
(
xfs_mou¡
 *
mp
);

1489 
	#XFS_REFC_COW_START
 ((
xfs_agblock_t
)(1U << 31))

	)

1490 
	#REFCNTBT_COWFLAG_BITLEN
 1

	)

1491 
	#REFCNTBT_AGBLOCK_BITLEN
 31

	)

1493 
	sxfs_ªfcou¡_ªc
 {

1494 
__be32
 
	mrc_°¨tblock
;

1495 
__be32
 
	mrc_blockcou¡
;

1496 
__be32
 
	mrc_ªfcou¡
;

1499 
	sxfs_ªfcou¡_key
 {

1500 
__be32
 
	mrc_°¨tblock
;

1503 
	sxfs_ªfcou¡_úec
 {

1504 
xfs_agblock_t
 
	mrc_°¨tblock
;

1505 
xfs_exéí_t
 
	mrc_blockcou¡
;

1506 
xfs_∆ök_t
 
	mrc_ªfcou¡
;

1509 
	#MAXREFCOUNT
 ((
xfs_∆ök_t
)~0U)

	)

1510 
	#MAXREFCEXTLEN
 ((
xfs_exéí_t
)~0U)

	)

1513 
__be32
 
	txfs_ªfcou¡_±r_t
;

1522 
	#XFS_BMAP_MAGIC
 0x424d4150

	)

1523 
	#XFS_BMAP_CRC_MAGIC
 0x424d4133

	)

1528 
	sxfs_bmdr_block
 {

1529 
__be16
 
	mbb_Àvñ
;

1530 
__be16
 
	mbb_numªcs
;

1531 } 
	txfs_bmdr_block_t
;

1540 
	#BMBT_EXNTFLAG_BITLEN
 1

	)

1541 
	#BMBT_STARTOFF_BITLEN
 54

	)

1542 
	#BMBT_STARTBLOCK_BITLEN
 52

	)

1543 
	#BMBT_BLOCKCOUNT_BITLEN
 21

	)

1545 
	sxfs_bmbt_ªc
 {

1546 
__be64
 
	ml0
, 
	ml1
;

1547 } 
	txfs_bmbt_ªc_t
;

1549 
__uöt64_t
 
	txfs_bmbt_ªc_ba£_t
;

1550 
xfs_bmbt_ªc_t
 
	txfs_bmdr_ªc_t
;

1552 
	sxfs_bmbt_ªc_ho°
 {

1553 
__uöt64_t
 
	ml0
, 
	ml1
;

1554 } 
	txfs_bmbt_ªc_ho°_t
;

1559 
	#STARTBLOCKVALBITS
 17

	)

1560 
	#STARTBLOCKMASKBITS
 (15 + 20)

	)

1561 
	#STARTBLOCKMASK
 \

1562 (((((
xfs_fsblock_t
)1Ë<< 
STARTBLOCKMASKBITS
Ë- 1Ë<< 
STARTBLOCKVALBITS
)

	)

1564 
ölöe
 
	$i¢uŒ°¨tblock
(
xfs_fsblock_t
 
x
)

1566  ((
x
Ë& 
STARTBLOCKMASK
) == STARTBLOCKMASK;

1567 
	}
}

1569 
ölöe
 
xfs_fsblock_t
 
	$nuŒ°¨tblock
(
k
)

1571 
	`ASSERT
(
k
 < (1 << 
STARTBLOCKVALBITS
));

1572  
STARTBLOCKMASK
 | (
k
);

1573 
	}
}

1575 
ölöe
 
xfs_fûblks_t
 
	$°¨tblockvÆ
(
xfs_fsblock_t
 
x
)

1577  (
xfs_fûblks_t
)((
x
Ë& ~
STARTBLOCKMASK
);

1578 
	}
}

1584 
	mXFS_EXTFMT_NOSTATE
 = 0,

1585 
	mXFS_EXTFMT_HASSTATE


1586 } 
	txfs_ex¡fmt_t
;

1592 
	mXFS_EXT_NORM
, 
	mXFS_EXT_UNWRITTEN
,

1593 
	mXFS_EXT_DMAPI_OFFLINE
, 
	mXFS_EXT_INVALID


1594 } 
	txfs_ex¡°_t
;

1599 
	sxfs_bmbt_úec


1601 
xfs_fûeoff_t
 
	mbr_°¨toff
;

1602 
xfs_fsblock_t
 
	mbr_°¨tblock
;

1603 
xfs_fûblks_t
 
	mbr_blockcou¡
;

1604 
xfs_ex¡°_t
 
	mbr_°©e
;

1605 } 
	txfs_bmbt_úec_t
;

1610 
	sxfs_bmbt_key
 {

1611 
__be64
 
	mbr_°¨toff
;

1612 } 
	txfs_bmbt_key_t
, 
	txfs_bmdr_key_t
;

1615 
__be64
 
	txfs_bmbt_±r_t
, 
	txfs_bmdr_±r_t
;

1633 
	sxfs_båì_block_shdr
 {

1634 
__be32
 
	mbb_À·sib
;

1635 
__be32
 
	mbb_rightsib
;

1637 
__be64
 
	mbb_blkno
;

1638 
__be64
 
	mbb_l¢
;

1639 
uuid_t
 
	mbb_uuid
;

1640 
__be32
 
	mbb_ow√r
;

1641 
__À32
 
	mbb_¸c
;

1645 
	sxfs_båì_block_lhdr
 {

1646 
__be64
 
	mbb_À·sib
;

1647 
__be64
 
	mbb_rightsib
;

1649 
__be64
 
	mbb_blkno
;

1650 
__be64
 
	mbb_l¢
;

1651 
uuid_t
 
	mbb_uuid
;

1652 
__be64
 
	mbb_ow√r
;

1653 
__À32
 
	mbb_¸c
;

1654 
__be32
 
	mbb_∑d
;

1657 
	sxfs_båì_block
 {

1658 
__be32
 
	mbb_magic
;

1659 
__be16
 
	mbb_Àvñ
;

1660 
__be16
 
	mbb_numªcs
;

1662 
xfs_båì_block_shdr
 
	ms
;

1663 
xfs_båì_block_lhdr
 
	ml
;

1664 } 
	mbb_u
;

1668 
	#XFS_BTREE_SBLOCK_LEN
 \

1669 (
	`off£tof
(
xfs_båì_block
, 
bb_u
) + \

1670 
	`off£tof
(
xfs_båì_block_shdr
, 
bb_blkno
))

	)

1672 
	#XFS_BTREE_LBLOCK_LEN
 \

1673 (
	`off£tof
(
xfs_båì_block
, 
bb_u
) + \

1674 
	`off£tof
(
xfs_båì_block_lhdr
, 
bb_blkno
))

	)

1677 
	#XFS_BTREE_SBLOCK_CRC_LEN
 \

1678 (
	`off£tof
(
xfs_båì_block
, 
bb_u
) + \

1679 (
xfs_båì_block_shdr
))

	)

1680 
	#XFS_BTREE_LBLOCK_CRC_LEN
 \

1681 (
	`off£tof
(
xfs_båì_block
, 
bb_u
) + \

1682 (
xfs_båì_block_lhdr
))

	)

1684 
	#XFS_BTREE_SBLOCK_CRC_OFF
 \

1685 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
s
.
bb_¸c
)

	)

1686 
	#XFS_BTREE_LBLOCK_CRC_OFF
 \

1687 
	`off£tof
(
xfs_båì_block
, 
bb_u
.
l
.
bb_¸c
)

	)

1692 
	sxfs_a˛_íåy
 {

1693 
__be32
 
	m´_èg
;

1694 
__be32
 
	m´_id
;

1695 
__be16
 
	m´_≥rm
;

1696 
__be16
 
	m´_∑d
;

1699 
	sxfs_a˛
 {

1700 
__be32
 
	ma˛_˙t
;

1701 
xfs_a˛_íåy
 
	ma˛_íåy
[0];

1709 
	#XFS_ACL_MAX_ENTRIES
(
mp
) \

1710 (
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) \

1711 ? (
XFS_XATTR_SIZE_MAX
 - (
xfs_a˛
)) / \

1712 (
xfs_a˛_íåy
) \

1713 : 25)

	)

1715 
	#XFS_ACL_SIZE
(
˙t
) \

1716 ((
xfs_a˛
) + \

1717 (
xfs_a˛_íåy
Ë* 
˙t
)

	)

1719 
	#XFS_ACL_MAX_SIZE
(
mp
) \

1720 
	`XFS_ACL_SIZE
(
	`XFS_ACL_MAX_ENTRIES
((
mp
)))

	)

1724 
	#SGI_ACL_FILE
 "SGI_ACL_FILE"

	)

1725 
	#SGI_ACL_DEFAULT
 "SGI_ACL_DEFAULT"

	)

1726 
	#SGI_ACL_FILE_SIZE
 ((
SGI_ACL_FILE
)-1)

	)

1727 
	#SGI_ACL_DEFAULT_SIZE
 ((
SGI_ACL_DEFAULT
)-1)

	)

	@libxfs/xfs_fs.h

18 #i‚de‡
__XFS_FS_H__


19 
	#__XFS_FS_H__


	)

30 #i‚de‡
HAVE_DIOATTR


31 
	sdiﬂâr
 {

32 
__u32
 
	md_mem
;

33 
__u32
 
	md_möiosz
;

34 
__u32
 
	md_maxiosz
;

43 
	#XFS_XFLAG_REALTIME
 
FS_XFLAG_REALTIME


	)

44 
	#XFS_XFLAG_PREALLOC
 
FS_XFLAG_PREALLOC


	)

45 
	#XFS_XFLAG_IMMUTABLE
 
FS_XFLAG_IMMUTABLE


	)

46 
	#XFS_XFLAG_APPEND
 
FS_XFLAG_APPEND


	)

47 
	#XFS_XFLAG_SYNC
 
FS_XFLAG_SYNC


	)

48 
	#XFS_XFLAG_NOATIME
 
FS_XFLAG_NOATIME


	)

49 
	#XFS_XFLAG_NODUMP
 
FS_XFLAG_NODUMP


	)

50 
	#XFS_XFLAG_RTINHERIT
 
FS_XFLAG_RTINHERIT


	)

51 
	#XFS_XFLAG_PROJINHERIT
 
FS_XFLAG_PROJINHERIT


	)

52 
	#XFS_XFLAG_NOSYMLINKS
 
FS_XFLAG_NOSYMLINKS


	)

53 
	#XFS_XFLAG_EXTSIZE
 
FS_XFLAG_EXTSIZE


	)

54 
	#XFS_XFLAG_EXTSZINHERIT
 
FS_XFLAG_EXTSZINHERIT


	)

55 
	#XFS_XFLAG_NODEFRAG
 
FS_XFLAG_NODEFRAG


	)

56 
	#XFS_XFLAG_FILESTREAM
 
FS_XFLAG_FILESTREAM


	)

57 
	#XFS_XFLAG_HASATTR
 
FS_XFLAG_HASATTR


	)

66 #i‚de‡
HAVE_GETBMAP


67 
	sgëbm≠
 {

68 
__s64
 
	mbmv_off£t
;

69 
__s64
 
	mbmv_block
;

70 
__s64
 
	mbmv_Àngth
;

71 
__s32
 
	mbmv_cou¡
;

72 
__s32
 
	mbmv_íåõs
;

85 #i‚de‡
HAVE_GETBMAPX


86 
	sgëbm≠x
 {

87 
__s64
 
	mbmv_off£t
;

88 
__s64
 
	mbmv_block
;

89 
__s64
 
	mbmv_Àngth
;

90 
__s32
 
	mbmv_cou¡
;

91 
__s32
 
	mbmv_íåõs
;

92 
__s32
 
	mbmv_iÊags
;

93 
__s32
 
	mbmv_oÊags
;

94 
__s32
 
	mbmv_unu£d1
;

95 
__s32
 
	mbmv_unu£d2
;

100 
	#BMV_IF_ATTRFORK
 0x1

	)

101 
	#BMV_IF_NO_DMAPI_READ
 0x2

	)

102 
	#BMV_IF_PREALLOC
 0x4

	)

103 
	#BMV_IF_DELALLOC
 0x8

	)

104 
	#BMV_IF_NO_HOLES
 0x10

	)

105 
	#BMV_IF_COWFORK
 0x20

	)

106 
	#BMV_IF_VALID
 \

107 (
BMV_IF_ATTRFORK
|
BMV_IF_NO_DMAPI_READ
|
BMV_IF_PREALLOC
| \

108 
BMV_IF_DELALLOC
|
BMV_IF_NO_HOLES
|
BMV_IF_COWFORK
)

	)

111 
	#BMV_OF_PREALLOC
 0x1

	)

112 
	#BMV_OF_DELALLOC
 0x2

	)

113 
	#BMV_OF_LAST
 0x4

	)

114 
	#BMV_OF_SHARED
 0x8

	)

123 #i‚de‡
HAVE_FSDMIDATA


124 
	sfsdmid©a
 {

125 
__u32
 
	mfsd_dmevmask
;

126 
__u16
 
	mfsd_∑ddög
;

127 
__u16
 
	mfsd_dm°©e
;

135 
	sxfs_Êock64
 {

136 
__s16
 
	ml_ty≥
;

137 
__s16
 
	ml_whí˚
;

138 
__s64
 
	ml_°¨t
;

139 
__s64
 
	ml_Àn
;

140 
__s32
 
	ml_sysid
;

141 
__u32
 
	ml_pid
;

142 
__s32
 
	ml_∑d
[4];

143 } 
	txfs_Êock64_t
;

148 
	sxfs_fs›_geom_v1
 {

149 
__u32
 
	mblocksize
;

150 
__u32
 
	mπextsize
;

151 
__u32
 
	magblocks
;

152 
__u32
 
	magcou¡
;

153 
__u32
 
	mlogblocks
;

154 
__u32
 
	m£˘size
;

155 
__u32
 
	möodesize
;

156 
__u32
 
	mimaxp˘
;

157 
__u64
 
	md©ablocks
;

158 
__u64
 
	mπblocks
;

159 
__u64
 
	mπexã¡s
;

160 
__u64
 
	mlog°¨t
;

161 
	muuid
[16];

162 
__u32
 
	msunô
;

163 
__u32
 
	mswidth
;

164 
__s32
 
	mvîsi⁄
;

165 
__u32
 
	mÊags
;

166 
__u32
 
	mlog£˘size
;

167 
__u32
 
	mπ£˘size
;

168 
__u32
 
	mdúblocksize
;

169 } 
	txfs_fs›_geom_v1_t
;

174 
	sxfs_fs›_geom
 {

175 
__u32
 
	mblocksize
;

176 
__u32
 
	mπextsize
;

177 
__u32
 
	magblocks
;

178 
__u32
 
	magcou¡
;

179 
__u32
 
	mlogblocks
;

180 
__u32
 
	m£˘size
;

181 
__u32
 
	möodesize
;

182 
__u32
 
	mimaxp˘
;

183 
__u64
 
	md©ablocks
;

184 
__u64
 
	mπblocks
;

185 
__u64
 
	mπexã¡s
;

186 
__u64
 
	mlog°¨t
;

187 
	muuid
[16];

188 
__u32
 
	msunô
;

189 
__u32
 
	mswidth
;

190 
__s32
 
	mvîsi⁄
;

191 
__u32
 
	mÊags
;

192 
__u32
 
	mlog£˘size
;

193 
__u32
 
	mπ£˘size
;

194 
__u32
 
	mdúblocksize
;

195 
__u32
 
	mlogsunô
;

196 } 
	txfs_fs›_geom_t
;

199 
	sxfs_fs›_cou¡s
 {

200 
__u64
 
	m‰ìd©a
;

201 
__u64
 
	m‰ìπx
;

202 
__u64
 
	m‰ìöo
;

203 
__u64
 
	mÆlocöo
;

204 } 
	txfs_fs›_cou¡s_t
;

207 
	sxfs_fs›_ªsblks
 {

208 
__u64
 
	mªsblks
;

209 
__u64
 
	mªsblks_avaû
;

210 } 
	txfs_fs›_ªsblks_t
;

212 
	#XFS_FSOP_GEOM_VERSION
 0

	)

214 
	#XFS_FSOP_GEOM_FLAGS_ATTR
 0x0001

	)

215 
	#XFS_FSOP_GEOM_FLAGS_NLINK
 0x0002

	)

216 
	#XFS_FSOP_GEOM_FLAGS_QUOTA
 0x0004

	)

217 
	#XFS_FSOP_GEOM_FLAGS_IALIGN
 0x0008

	)

218 
	#XFS_FSOP_GEOM_FLAGS_DALIGN
 0x0010

	)

219 
	#XFS_FSOP_GEOM_FLAGS_SHARED
 0x0020

	)

220 
	#XFS_FSOP_GEOM_FLAGS_EXTFLG
 0x0040

	)

221 
	#XFS_FSOP_GEOM_FLAGS_DIRV2
 0x0080

	)

222 
	#XFS_FSOP_GEOM_FLAGS_LOGV2
 0x0100

	)

223 
	#XFS_FSOP_GEOM_FLAGS_SECTOR
 0x0200

	)

224 
	#XFS_FSOP_GEOM_FLAGS_ATTR2
 0x0400

	)

225 
	#XFS_FSOP_GEOM_FLAGS_PROJID32
 0x0800

	)

226 
	#XFS_FSOP_GEOM_FLAGS_DIRV2CI
 0x1000

	)

227 
	#XFS_FSOP_GEOM_FLAGS_LAZYSB
 0x4000

	)

228 
	#XFS_FSOP_GEOM_FLAGS_V5SB
 0x8000

	)

229 
	#XFS_FSOP_GEOM_FLAGS_FTYPE
 0x10000

	)

230 
	#XFS_FSOP_GEOM_FLAGS_FINOBT
 0x20000

	)

231 
	#XFS_FSOP_GEOM_FLAGS_SPINODES
 0x40000

	)

232 
	#XFS_FSOP_GEOM_FLAGS_RMAPBT
 0x80000

	)

233 
	#XFS_FSOP_GEOM_FLAGS_REFLINK
 0x100000

	)

240 
	#XFS_MIN_AG_BLOCKS
 64

	)

241 
	#XFS_MIN_LOG_BLOCKS
 512ULL

	)

242 
	#XFS_MAX_LOG_BLOCKS
 (1024 * 1024ULL)

	)

243 
	#XFS_MIN_LOG_BYTES
 (10 * 1024 * 1024ULL)

	)

246 
	#XFS_MAX_LOG_BYTES
 \

247 ((2 * 1024 * 1024 * 1024ULLË- 
XFS_MIN_LOG_BYTES
)

	)

250 
	#XFS_MAX_DBLOCKS
(
s
Ë((
xfs_rfsblock_t
)(s)->
sb_agcou¡
 * (s)->
sb_agblocks
)

	)

251 
	#XFS_MIN_DBLOCKS
(
s
Ë((
xfs_rfsblock_t
)((s)->
sb_agcou¡
 - 1) * \

252 (
s
)->
sb_agblocks
 + 
XFS_MIN_AG_BLOCKS
)

	)

257 
	sxfs_growfs_d©a
 {

258 
__u64
 
	m√wblocks
;

259 
__u32
 
	mimaxp˘
;

260 } 
	txfs_growfs_d©a_t
;

262 
	sxfs_growfs_log
 {

263 
__u32
 
	m√wblocks
;

264 
__u32
 
	misöt
;

265 } 
	txfs_growfs_log_t
;

267 
	sxfs_growfs_π
 {

268 
__u64
 
	m√wblocks
;

269 
__u32
 
	mextsize
;

270 } 
	txfs_growfs_π_t
;

276 
	sxfs_b°ime
 {

277 
time_t
 
	mtv_£c
;

278 
__s32
 
	mtv_n£c
;

279 } 
	txfs_b°ime_t
;

281 
	sxfs_b°©
 {

282 
__u64
 
	mbs_öo
;

283 
__u16
 
	mbs_mode
;

284 
__u16
 
	mbs_∆ök
;

285 
__u32
 
	mbs_uid
;

286 
__u32
 
	mbs_gid
;

287 
__u32
 
	mbs_rdev
;

288 
__s32
 
	mbs_blksize
;

289 
__s64
 
	mbs_size
;

290 
xfs_b°ime_t
 
	mbs_©ime
;

291 
xfs_b°ime_t
 
	mbs_mtime
;

292 
xfs_b°ime_t
 
	mbs_˘ime
;

293 
öt64_t
 
	mbs_blocks
;

294 
__u32
 
	mbs_xÊags
;

295 
__s32
 
	mbs_extsize
;

296 
__s32
 
	mbs_exã¡s
;

297 
__u32
 
	mbs_gí
;

298 
__u16
 
	mbs_¥ojid_lo
;

299 
	#bs_¥ojid
 
bs_¥ojid_lo


	)

300 
__u16
 
	mbs_f‹koff
;

301 
__u16
 
	mbs_¥ojid_hi
;

302 
	mbs_∑d
[6];

303 
__u32
 
	mbs_cowextsize
;

304 
__u32
 
	mbs_dmevmask
;

305 
__u16
 
	mbs_dm°©e
;

306 
__u16
 
	mbs_´xã¡s
;

307 } 
	txfs_b°©_t
;

314 
ölöe
 
__uöt32_t


315 
	$b°©_gë_¥ojid
(
xfs_b°©
 *
bs
)

317  (
__uöt32_t
)
bs
->
bs_¥ojid_hi
 << 16 | bs->
bs_¥ojid_lo
;

318 
	}
}

323 
	sxfs_fs›_bulkªq
 {

324 
__u64
 
__u£r
 *
	mœ°ù
;

325 
__s32
 
	micou¡
;

326 
__u£r
 *
	mubuf„r
;

327 
__s32
 
__u£r
 *
	mocou¡
;

328 } 
	txfs_fs›_bulkªq_t
;

334 
	sxfs_öogΩ
 {

335 
__u64
 
	mxi_°¨töo
;

336 
__s32
 
	mxi_Æloccou¡
;

337 
__u64
 
	mxi_Ælocmask
;

338 } 
	txfs_öogΩ_t
;

344 
	sxfs_îr‹_öje˘i⁄
 {

345 
__s32
 
	mfd
;

346 
__s32
 
	mîπag
;

347 } 
	txfs_îr‹_öje˘i⁄_t
;

353 
	#XFS_EOFBLOCKS_VERSION
 1

	)

354 
	sxfs_fs_eofblocks
 {

355 
__u32
 
	meof_vîsi⁄
;

356 
__u32
 
	meof_Êags
;

357 
uid_t
 
	meof_uid
;

358 
gid_t
 
	meof_gid
;

359 
¥id_t
 
	meof_¥id
;

360 
__u32
 
	m∑d32
;

361 
__u64
 
	meof_mö_fûe_size
;

362 
__u64
 
	m∑d64
[12];

366 
	#XFS_EOF_FLAGS_SYNC
 (1 << 0Ë

	)

367 
	#XFS_EOF_FLAGS_UID
 (1 << 1Ë

	)

368 
	#XFS_EOF_FLAGS_GID
 (1 << 2Ë

	)

369 
	#XFS_EOF_FLAGS_PRID
 (1 << 3Ë

	)

370 
	#XFS_EOF_FLAGS_MINFILESIZE
 (1 << 4Ë

	)

371 
	#XFS_EOF_FLAGS_UNION
 (1 << 5Ë

	)

374 
	#XFS_EOF_FLAGS_VALID
 \

375 (
XFS_EOF_FLAGS_SYNC
 | \

376 
XFS_EOF_FLAGS_UID
 | \

377 
XFS_EOF_FLAGS_GID
 | \

378 
XFS_EOF_FLAGS_PRID
 | \

379 
XFS_EOF_FLAGS_MINFILESIZE
)

	)

385 
	sxfs_fs›_h™dÀªq
 {

386 
__u32
 
	mfd
;

387 
__u£r
 *
	m∑th
;

388 
__u32
 
	moÊags
;

389 
__u£r
 *
	mih™dÀ
;

390 
__u32
 
	mih™dÀn
;

391 
__u£r
 *
	moh™dÀ
;

392 
__u32
 
__u£r
 *
	moh™dÀn
;

393 } 
	txfs_fs›_h™dÀªq_t
;

402 
	sxfs_fs›_£tdm_h™dÀªq
 {

403 
xfs_fs›_h™dÀªq
 
	mhªq
;

404 
fsdmid©a
 
__u£r
 *
	md©a
;

405 } 
	txfs_fs›_£tdm_h™dÀªq_t
;

407 
	sxfs_©åli°_curs‹
 {

408 
__u32
 
	m›aque
[4];

409 } 
	txfs_©åli°_curs‹_t
;

411 
	sxfs_fs›_©åli°_h™dÀªq
 {

412 
xfs_fs›_h™dÀªq
 
	mhªq
;

413 
xfs_©åli°_curs‹
 
	mpos
;

414 
__u32
 
	mÊags
;

415 
__u32
 
	mbuÊí
;

416 
__u£r
 *
	mbuf„r
;

417 } 
	txfs_fs›_©åli°_h™dÀªq_t
;

419 
	sxfs_©å_mu…i›
 {

420 
__u32
 
	mam_›code
;

421 
	#ATTR_OP_GET
 1

	)

422 
	#ATTR_OP_SET
 2

	)

423 
	#ATTR_OP_REMOVE
 3

	)

424 
__s32
 
	mam_îr‹
;

425 
__u£r
 *
	mam_©å«me
;

426 
__u£r
 *
	mam_©åvÆue
;

427 
__u32
 
	mam_Àngth
;

428 
__u32
 
	mam_Êags
;

429 } 
	txfs_©å_mu…i›_t
;

431 
	sxfs_fs›_©åmu…i_h™dÀªq
 {

432 
xfs_fs›_h™dÀªq
 
	mhªq
;

433 
__u32
 
	m›cou¡
;

434 
xfs_©å_mu…i›
 
__u£r
 *
	m›s
;

435 } 
	txfs_fs›_©åmu…i_h™dÀªq_t
;

440 °ru˘ { 
__u32
 
	mvÆ
[2]; } 
	txfs_fsid_t
;

442 
	sxfs_fid
 {

443 
__u16
 
	mfid_Àn
;

444 
__u16
 
	mfid_∑d
;

445 
__u32
 
	mfid_gí
;

446 
__u64
 
	mfid_öo
;

447 } 
	txfs_fid_t
;

449 
	sxfs_h™dÀ
 {

451 
__s64
 
	mÆign
;

452 
xfs_fsid_t
 
	m_ha_fsid
;

453 } 
	mha_u
;

454 
xfs_fid_t
 
	mha_fid
;

455 } 
	txfs_h™dÀ_t
;

456 
	#ha_fsid
 
ha_u
.
_ha_fsid


	)

458 
	#XFS_HSIZE
(
h™dÀ
Ë(((*Ë&(h™dÀ).
ha_fid
.
fid_∑d
 \

459 - (*Ë&(
h™dÀ
)) \

460 + (
h™dÀ
).
ha_fid
.
fid_Àn
)

	)

465 
	sxfs_sw≠ext


467 
__öt64_t
 
	msx_vîsi⁄
;

468 
	#XFS_SX_VERSION
 0

	)

469 
__öt64_t
 
	msx_fdèrgë
;

470 
__öt64_t
 
	msx_fdtmp
;

471 
xfs_off_t
 
	msx_off£t
;

472 
xfs_off_t
 
	msx_Àngth
;

473 
	msx_∑d
[16];

474 
xfs_b°©_t
 
	msx_°©
;

475 } 
	txfs_sw≠ext_t
;

480 
	#XFS_FSOP_GOING_FLAGS_DEFAULT
 0x0

	)

481 
	#XFS_FSOP_GOING_FLAGS_LOGFLUSH
 0x1

	)

482 
	#XFS_FSOP_GOING_FLAGS_NOLOGFLUSH
 0x2

	)

487 #ifde‡
XATTR_LIST_MAX


488 
	#XFS_XATTR_LIST_MAX
 
XATTR_LIST_MAX


	)

490 
	#XFS_XATTR_LIST_MAX
 65536

	)

496 
	#XFS_IOC_GETXFLAGS
 
FS_IOC_GETFLAGS


	)

497 
	#XFS_IOC_SETXFLAGS
 
FS_IOC_SETFLAGS


	)

498 
	#XFS_IOC_GETVERSION
 
FS_IOC_GETVERSION


	)

505 
	#XFS_IOC_ALLOCSP
 
	`_IOW
 ('X', 10, 
xfs_Êock64
)

	)

506 
	#XFS_IOC_FREESP
 
	`_IOW
 ('X', 11, 
xfs_Êock64
)

	)

507 
	#XFS_IOC_DIOINFO
 
	`_IOR
 ('X', 30, 
diﬂâr
)

	)

508 
	#XFS_IOC_FSGETXATTR
 
FS_IOC_FSGETXATTR


	)

509 
	#XFS_IOC_FSSETXATTR
 
FS_IOC_FSSETXATTR


	)

510 
	#XFS_IOC_ALLOCSP64
 
	`_IOW
 ('X', 36, 
xfs_Êock64
)

	)

511 
	#XFS_IOC_FREESP64
 
	`_IOW
 ('X', 37, 
xfs_Êock64
)

	)

512 
	#XFS_IOC_GETBMAP
 
	`_IOWR
('X', 38, 
gëbm≠
)

	)

513 
	#XFS_IOC_FSSETDM
 
	`_IOW
 ('X', 39, 
fsdmid©a
)

	)

514 
	#XFS_IOC_RESVSP
 
	`_IOW
 ('X', 40, 
xfs_Êock64
)

	)

515 
	#XFS_IOC_UNRESVSP
 
	`_IOW
 ('X', 41, 
xfs_Êock64
)

	)

516 
	#XFS_IOC_RESVSP64
 
	`_IOW
 ('X', 42, 
xfs_Êock64
)

	)

517 
	#XFS_IOC_UNRESVSP64
 
	`_IOW
 ('X', 43, 
xfs_Êock64
)

	)

518 
	#XFS_IOC_GETBMAPA
 
	`_IOWR
('X', 44, 
gëbm≠
)

	)

519 
	#XFS_IOC_FSGETXATTRA
 
	`_IOR
 ('X', 45, 
fsx©å
)

	)

522 
	#XFS_IOC_GETBMAPX
 
	`_IOWR
('X', 56, 
gëbm≠
)

	)

523 
	#XFS_IOC_ZERO_RANGE
 
	`_IOW
 ('X', 57, 
xfs_Êock64
)

	)

524 
	#XFS_IOC_FREE_EOFBLOCKS
 
	`_IOR
 ('X', 58, 
xfs_fs_eofblocks
)

	)

529 
	#XFS_IOC_FSGEOMETRY_V1
 
	`_IOR
 ('X', 100, 
xfs_fs›_geom_v1
)

	)

530 
	#XFS_IOC_FSBULKSTAT
 
	`_IOWR
('X', 101, 
xfs_fs›_bulkªq
)

	)

531 
	#XFS_IOC_FSBULKSTAT_SINGLE
 
	`_IOWR
('X', 102, 
xfs_fs›_bulkªq
)

	)

532 
	#XFS_IOC_FSINUMBERS
 
	`_IOWR
('X', 103, 
xfs_fs›_bulkªq
)

	)

533 
	#XFS_IOC_PATH_TO_FSHANDLE
 
	`_IOWR
('X', 104, 
xfs_fs›_h™dÀªq
)

	)

534 
	#XFS_IOC_PATH_TO_HANDLE
 
	`_IOWR
('X', 105, 
xfs_fs›_h™dÀªq
)

	)

535 
	#XFS_IOC_FD_TO_HANDLE
 
	`_IOWR
('X', 106, 
xfs_fs›_h™dÀªq
)

	)

536 
	#XFS_IOC_OPEN_BY_HANDLE
 
	`_IOWR
('X', 107, 
xfs_fs›_h™dÀªq
)

	)

537 
	#XFS_IOC_READLINK_BY_HANDLE
 
	`_IOWR
('X', 108, 
xfs_fs›_h™dÀªq
)

	)

538 
	#XFS_IOC_SWAPEXT
 
	`_IOWR
('X', 109, 
xfs_sw≠ext
)

	)

539 
	#XFS_IOC_FSGROWFSDATA
 
	`_IOW
 ('X', 110, 
xfs_growfs_d©a
)

	)

540 
	#XFS_IOC_FSGROWFSLOG
 
	`_IOW
 ('X', 111, 
xfs_growfs_log
)

	)

541 
	#XFS_IOC_FSGROWFSRT
 
	`_IOW
 ('X', 112, 
xfs_growfs_π
)

	)

542 
	#XFS_IOC_FSCOUNTS
 
	`_IOR
 ('X', 113, 
xfs_fs›_cou¡s
)

	)

543 
	#XFS_IOC_SET_RESBLKS
 
	`_IOWR
('X', 114, 
xfs_fs›_ªsblks
)

	)

544 
	#XFS_IOC_GET_RESBLKS
 
	`_IOR
 ('X', 115, 
xfs_fs›_ªsblks
)

	)

545 
	#XFS_IOC_ERROR_INJECTION
 
	`_IOW
 ('X', 116, 
xfs_îr‹_öje˘i⁄
)

	)

546 
	#XFS_IOC_ERROR_CLEARALL
 
	`_IOW
 ('X', 117, 
xfs_îr‹_öje˘i⁄
)

	)

549 
	#XFS_IOC_FREEZE
 
	`_IOWR
('X', 119, Ë

	)

550 
	#XFS_IOC_THAW
 
	`_IOWR
('X', 120, Ë

	)

552 
	#XFS_IOC_FSSETDM_BY_HANDLE
 
	`_IOW
 ('X', 121, 
xfs_fs›_£tdm_h™dÀªq
)

	)

553 
	#XFS_IOC_ATTRLIST_BY_HANDLE
 
	`_IOW
 ('X', 122, 
xfs_fs›_©åli°_h™dÀªq
)

	)

554 
	#XFS_IOC_ATTRMULTI_BY_HANDLE
 
	`_IOW
 ('X', 123, 
xfs_fs›_©åmu…i_h™dÀªq
)

	)

555 
	#XFS_IOC_FSGEOMETRY
 
	`_IOR
 ('X', 124, 
xfs_fs›_geom
)

	)

556 
	#XFS_IOC_GOINGDOWN
 
	`_IOR
 ('X', 125, 
__uöt32_t
)

	)

561 
	sxfs_˛⁄e_¨gs
 {

562 
__s64
 
	m§c_fd
;

563 
__u64
 
	m§c_off£t
;

564 
__u64
 
	m§c_Àngth
;

565 
__u64
 
	mde°_off£t
;

569 
	#XFS_EXTENT_DATA_SAME
 0

	)

570 
	#XFS_EXTENT_DATA_DIFFERS
 1

	)

573 
	sxfs_exã¡_d©a_öfo
 {

574 
__s64
 
	mfd
;

575 
__u64
 
	mlogiˇl_off£t
;

576 
__u64
 
	mbyãs_dedu≥d
;

583 
__s32
 
	m°©us
;

584 
__u32
 
	mª£rved
;

588 
	sxfs_exã¡_d©a
 {

589 
__u64
 
	mlogiˇl_off£t
;

590 
__u64
 
	mÀngth
;

591 
__u16
 
	mde°_cou¡
;

592 
__u16
 
	mª£rved1
;

593 
__u32
 
	mª£rved2
;

594 
xfs_exã¡_d©a_öfo
 
	möfo
[0];

597 
	#XFS_IOC_CLONE
 
	`_IOW
 (0x94, 9, )

	)

598 
	#XFS_IOC_CLONE_RANGE
 
	`_IOW
 (0x94, 13, 
xfs_˛⁄e_¨gs
)

	)

599 
	#XFS_IOC_FILE_EXTENT_SAME
 
	`_IOWR
(0x94, 54, 
xfs_exã¡_d©a
)

	)

601 #i‚de‡
HAVE_BBMACROS


607 
	#BBSHIFT
 9

	)

608 
	#BBSIZE
 (1<<
BBSHIFT
)

	)

609 
	#BBMASK
 (
BBSIZE
-1)

	)

610 
	#BTOBB
(
byãs
Ë(((
__u64
)(byãsË+ 
BBSIZE
 - 1Ë>> 
BBSHIFT
)

	)

611 
	#BTOBBT
(
byãs
Ë((
__u64
)(byãsË>> 
BBSHIFT
)

	)

612 
	#BBTOB
(
bbs
Ë((bbsË<< 
BBSHIFT
)

	)

	@libxfs/xfs_ialloc.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_bô.h
"

25 
	~"xfs_sb.h
"

26 
	~"xfs_mou¡.h
"

27 
	~"xfs_de„r.h
"

28 
	~"xfs_öode.h
"

29 
	~"xfs_båì.h
"

30 
	~"xfs_üŒoc.h
"

31 
	~"xfs_üŒoc_båì.h
"

32 
	~"xfs_Æloc.h
"

33 
	~"xfs_bm≠.h
"

34 
	~"xfs_cksum.h
"

35 
	~"xfs_å™s.h
"

36 
	~"xfs_åa˚.h
"

37 
	~"xfs_rm≠.h
"

43 
ölöe
 

44 
	$xfs_üŒoc_˛u°î_Æignmít
(

45 
xfs_mou¡
 *
mp
)

47 i‡(
	`xfs_sb_vîsi⁄_haßlign
(&
mp
->
m_sb
) &&

48 
mp
->
m_sb
.
sb_öﬂlignmt
 >
	`xfs_i˛u°î_size_fsb
(mp))

49  
mp
->
m_sb
.
sb_öﬂlignmt
;

51 
	}
}

57 
	$xfs_öobt_lookup
(

58 
xfs_båì_cur
 *
cur
,

59 
xfs_agöo_t
 
öo
,

60 
xfs_lookup_t
 
dú
,

61 *
°©
)

63 
cur
->
bc_ªc
.
i
.
ú_°¨töo
 = 
öo
;

64 
cur
->
bc_ªc
.
i
.
ú_hﬁemask
 = 0;

65 
cur
->
bc_ªc
.
i
.
ú_cou¡
 = 0;

66 
cur
->
bc_ªc
.
i
.
ú_‰ìcou¡
 = 0;

67 
cur
->
bc_ªc
.
i
.
ú_‰ì
 = 0;

68  
	`xfs_båì_lookup
(
cur
, 
dú
, 
°©
);

69 
	}
}

75 
STATIC
 

76 
	$xfs_öobt_upd©e
(

77 
xfs_båì_cur
 *
cur
,

78 
xfs_öobt_ªc_öc‹e_t
 *
úec
)

80 
xfs_båì_ªc
 
ªc
;

82 
ªc
.
öobt
.
ú_°¨töo
 = 
	`˝u_to_be32
(
úec
->ir_startino);

83 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
cur
->
bc_mp
->
m_sb
)) {

84 
ªc
.
öobt
.
ú_u
.
•
.
ú_hﬁemask
 = 
	`˝u_to_be16
(
úec
->ir_holemask);

85 
ªc
.
öobt
.
ú_u
.
•
.
ú_cou¡
 = 
úec
->ir_count;

86 
ªc
.
öobt
.
ú_u
.
•
.
ú_‰ìcou¡
 = 
úec
->ir_freecount;

89 
ªc
.
öobt
.
ú_u
.
f
.
ú_‰ìcou¡
 = 
	`˝u_to_be32
(
úec
->ir_freecount);

91 
ªc
.
öobt
.
ú_‰ì
 = 
	`˝u_to_be64
(
úec
->ir_free);

92  
	`xfs_båì_upd©e
(
cur
, &
ªc
);

93 
	}
}

99 
	$xfs_öobt_gë_ªc
(

100 
xfs_båì_cur
 *
cur
,

101 
xfs_öobt_ªc_öc‹e_t
 *
úec
,

102 *
°©
)

104 
xfs_båì_ªc
 *
ªc
;

105 
îr‹
;

107 
îr‹
 = 
	`xfs_båì_gë_ªc
(
cur
, &
ªc
, 
°©
);

108 i‡(
îr‹
 || *
°©
 == 0)

109  
îr‹
;

111 
úec
->
ú_°¨töo
 = 
	`be32_to_˝u
(
ªc
->
öobt
.ir_startino);

112 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
cur
->
bc_mp
->
m_sb
)) {

113 
úec
->
ú_hﬁemask
 = 
	`be16_to_˝u
(
ªc
->
öobt
.
ú_u
.
•
.ir_holemask);

114 
úec
->
ú_cou¡
 = 
ªc
->
öobt
.
ú_u
.
•
.ir_count;

115 
úec
->
ú_‰ìcou¡
 = 
ªc
->
öobt
.
ú_u
.
•
.ir_freecount;

121 
úec
->
ú_hﬁemask
 = 
XFS_INOBT_HOLEMASK_FULL
;

122 
úec
->
ú_cou¡
 = 
XFS_INODES_PER_CHUNK
;

123 
úec
->
ú_‰ìcou¡
 =

124 
	`be32_to_˝u
(
ªc
->
öobt
.
ú_u
.
f
.
ú_‰ìcou¡
);

126 
úec
->
ú_‰ì
 = 
	`be64_to_˝u
(
ªc
->
öobt
.ir_free);

129 
	}
}

134 
STATIC
 

135 
	$xfs_öobt_ö£π_ªc
(

136 
xfs_båì_cur
 *
cur
,

137 
__uöt16_t
 
hﬁemask
,

138 
__uöt8_t
 
cou¡
,

139 
__öt32_t
 
‰ìcou¡
,

140 
xfs_öo‰ì_t
 
‰ì
,

141 *
°©
)

143 
cur
->
bc_ªc
.
i
.
ú_hﬁemask
 = 
hﬁemask
;

144 
cur
->
bc_ªc
.
i
.
ú_cou¡
 = 
cou¡
;

145 
cur
->
bc_ªc
.
i
.
ú_‰ìcou¡
 = 
‰ìcou¡
;

146 
cur
->
bc_ªc
.
i
.
ú_‰ì
 = 
‰ì
;

147  
	`xfs_båì_ö£π
(
cur
, 
°©
);

148 
	}
}

153 
STATIC
 

154 
	$xfs_öobt_ö£π
(

155 
xfs_mou¡
 *
mp
,

156 
xfs_å™s
 *
ç
,

157 
xfs_buf
 *
agbp
,

158 
xfs_agöo_t
 
√wöo
,

159 
xfs_agöo_t
 
√wÀn
,

160 
xfs_bäum_t
 
bäum
)

162 
xfs_båì_cur
 *
cur
;

163 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
agbp
);

164 
xfs_agnumbî_t
 
agno
 = 
	`be32_to_˝u
(
agi
->
agi_£qno
);

165 
xfs_agöo_t
 
thisöo
;

166 
i
;

167 
îr‹
;

169 
cur
 = 
	`xfs_öobt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
, 
bäum
);

171 
thisöo
 = 
√wöo
;

172 
thisöo
 < 
√wöo
 + 
√wÀn
;

173 
thisöo
 +
XFS_INODES_PER_CHUNK
) {

174 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 
thisöo
, 
XFS_LOOKUP_EQ
, &
i
);

175 i‡(
îr‹
) {

176 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

177  
îr‹
;

179 
	`ASSERT
(
i
 == 0);

181 
îr‹
 = 
	`xfs_öobt_ö£π_ªc
(
cur
, 
XFS_INOBT_HOLEMASK_FULL
,

182 
XFS_INODES_PER_CHUNK
,

183 
XFS_INODES_PER_CHUNK
,

184 
XFS_INOBT_ALL_FREE
, &
i
);

185 i‡(
îr‹
) {

186 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

187  
îr‹
;

189 
	`ASSERT
(
i
 == 1);

192 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

195 
	}
}

200 #ifde‡
DEBUG


201 
STATIC
 

202 
	$xfs_check_agi_‰ìcou¡
(

203 
xfs_båì_cur
 *
cur
,

204 
xfs_agi
 *
agi
)

206 i‡(
cur
->
bc_∆evñs
 == 1) {

207 
xfs_öobt_ªc_öc‹e_t
 
ªc
;

208 
‰ìcou¡
 = 0;

209 
îr‹
;

210 
i
;

212 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 0, 
XFS_LOOKUP_GE
, &
i
);

213 i‡(
îr‹
)

214  
îr‹
;

217 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, &
ªc
, &
i
);

218 i‡(
îr‹
)

219  
îr‹
;

221 i‡(
i
) {

222 
‰ìcou¡
 +
ªc
.
ú_‰ìcou¡
;

223 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
);

224 i‡(
îr‹
)

225  
îr‹
;

227 } 
i
 == 1);

229 i‡(!
	`XFS_FORCED_SHUTDOWN
(
cur
->
bc_mp
))

230 
	`ASSERT
(
‰ìcou¡
 =
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
));

233 
	}
}

235 
	#xfs_check_agi_‰ìcou¡
(
cur
, 
agi
Ë0

	)

245 
	$xfs_üŒoc_öode_öô
(

246 
xfs_mou¡
 *
mp
,

247 
xfs_å™s
 *
ç
,

248 
li°_hód
 *
buf„r_li°
,

249 
icou¡
,

250 
xfs_agnumbî_t
 
agno
,

251 
xfs_agblock_t
 
agbno
,

252 
xfs_agblock_t
 
Àngth
,

253 
gí
)

255 
xfs_buf
 *
fbuf
;

256 
xfs_döode
 *
‰ì
;

257 
nbufs
, 
blks_≥r_˛u°î
, 
öodes_≥r_˛u°î
;

258 
vîsi⁄
;

259 
i
, 
j
;

260 
xfs_daddr_t
 
d
;

261 
xfs_öo_t
 
öo
 = 0;

268 
blks_≥r_˛u°î
 = 
	`xfs_i˛u°î_size_fsb
(
mp
);

269 
öodes_≥r_˛u°î
 = 
blks_≥r_˛u°î
 << 
mp
->
m_sb
.
sb_ö›blog
;

270 
nbufs
 = 
Àngth
 / 
blks_≥r_˛u°î
;

291 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

292 
vîsi⁄
 = 3;

293 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
,

294 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
agbno
, 0));

304 i‡(
ç
)

305 
	`xfs_i¸óã_log
(
ç
, 
agno
, 
agbno
, 
icou¡
,

306 
mp
->
m_sb
.
sb_öodesize
, 
Àngth
, 
gí
);

308 
vîsi⁄
 = 2;

310 
j
 = 0; j < 
nbufs
; j++) {

314 
d
 = 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
 + (
j
 * 
blks_≥r_˛u°î
));

315 
fbuf
 = 
	`xfs_å™s_gë_buf
(
ç
, 
mp
->
m_ddev_èrgp
, 
d
,

316 
mp
->
m_bsize
 * 
blks_≥r_˛u°î
,

317 
XBF_UNMAPPED
);

318 i‡(!
fbuf
)

319  -
ENOMEM
;

322 
fbuf
->
b_›s
 = &
xfs_öode_buf_›s
;

323 
	`xfs_buf_zîo
(
fbuf
, 0, 
	`BBTOB
(fbuf->
b_Àngth
));

324 
i
 = 0; i < 
öodes_≥r_˛u°î
; i++) {

325 
ioff£t
 = 
i
 << 
mp
->
m_sb
.
sb_öodñog
;

326 
uöt
 
isize
 = 
	`xfs_döode_size
(
vîsi⁄
);

328 
‰ì
 = 
	`xfs_make_ùå
(
mp
, 
fbuf
, 
i
);

329 
‰ì
->
di_magic
 = 
	`˝u_to_be16
(
XFS_DINODE_MAGIC
);

330 
‰ì
->
di_vîsi⁄
 = 
vîsi⁄
;

331 
‰ì
->
di_gí
 = 
	`˝u_to_be32
(
gí
);

332 
‰ì
->
di_√xt_u∆öked
 = 
	`˝u_to_be32
(
NULLAGINO
);

334 i‡(
vîsi⁄
 == 3) {

335 
‰ì
->
di_öo
 = 
	`˝u_to_be64
(
öo
);

336 
öo
++;

337 
	`uuid_c›y
(&
‰ì
->
di_uuid
,

338 &
mp
->
m_sb
.
sb_mëa_uuid
);

339 
	`xfs_döode_ˇlc_¸c
(
mp
, 
‰ì
);

340 } i‡(
ç
) {

342 
	`xfs_å™s_log_buf
(
ç
, 
fbuf
, 
ioff£t
,

343 
ioff£t
 + 
isize
 - 1);

347 i‡(
ç
) {

356 
	`xfs_å™s_öode_Æloc_buf
(
ç
, 
fbuf
);

357 i‡(
vîsi⁄
 == 3) {

364 
	`xfs_å™s_‹dîed_buf
(
ç
, 
fbuf
);

365 
	`xfs_å™s_log_buf
(
ç
, 
fbuf
, 0,

366 
	`BBTOB
(
fbuf
->
b_Àngth
) - 1);

369 
fbuf
->
b_Êags
 |
XBF_DONE
;

370 
	`xfs_buf_dñwri_queue
(
fbuf
, 
buf„r_li°
);

371 
	`xfs_buf_ªl£
(
fbuf
);

375 
	}
}

400 
STATIC
 

401 
	$xfs_Æign_•¨£_öo
(

402 
xfs_mou¡
 *
mp
,

403 
xfs_agöo_t
 *
°¨töo
,

404 
uöt16_t
 *
Ælocmask
)

406 
xfs_agblock_t
 
agbno
;

407 
xfs_agblock_t
 
mod
;

408 
off£t
;

410 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, *
°¨töo
);

411 
mod
 = 
agbno
 % 
mp
->
m_sb
.
sb_öﬂlignmt
;

412 i‡(!
mod
)

416 
off£t
 = 
mod
 << 
mp
->
m_sb
.
sb_ö›blog
;

417 *
°¨töo
 -
off£t
;

424 *
Ælocmask
 <<
off£t
 / 
XFS_INODES_PER_HOLEMASK_BIT
;

425 
	}
}

432 
STATIC
 
boﬁ


433 
	$__xfs_öobt_ˇn_mîge
(

434 
xfs_öobt_ªc_öc‹e
 *
åec
,

435 
xfs_öobt_ªc_öc‹e
 *
§ec
)

437 
uöt64_t
 
èŒoc
;

438 
uöt64_t
 
ßŒoc
;

441 i‡(
åec
->
ú_°¨töo
 !
§ec
->ir_startino)

442  
Ál£
;

445 i‡(!
	`xfs_öobt_is•¨£
(
åec
->
ú_hﬁemask
) ||

446 !
	`xfs_öobt_is•¨£
(
§ec
->
ú_hﬁemask
))

447  
Ál£
;

450 i‡(!
åec
->
ú_cou¡
 || !
§ec
->ir_count)

451  
Ál£
;

454 i‡(
åec
->
ú_cou¡
 + 
§ec
->ú_cou¡ > 
XFS_INODES_PER_CHUNK
)

455  
Ál£
;

458 
èŒoc
 = 
	`xfs_öobt_úec_to_Ælocmask
(
åec
);

459 
ßŒoc
 = 
	`xfs_öobt_úec_to_Ælocmask
(
§ec
);

460 i‡(
èŒoc
 & 
ßŒoc
)

461  
Ál£
;

463  
åue
;

464 
	}
}

470 
STATIC
 

471 
	$__xfs_öobt_ªc_mîge
(

472 
xfs_öobt_ªc_öc‹e
 *
åec
,

473 
xfs_öobt_ªc_öc‹e
 *
§ec
)

475 
	`ASSERT
(
åec
->
ú_°¨töo
 =
§ec
->ir_startino);

478 
åec
->
ú_cou¡
 +
§ec
->ir_count;

479 
åec
->
ú_‰ìcou¡
 +
§ec
->ir_freecount;

485 
åec
->
ú_hﬁemask
 &
§ec
->ir_holemask;

486 
åec
->
ú_‰ì
 &
§ec
->ir_free;

487 
	}
}

504 
STATIC
 

505 
	$xfs_öobt_ö£π_•ªc
(

506 
xfs_mou¡
 *
mp
,

507 
xfs_å™s
 *
ç
,

508 
xfs_buf
 *
agbp
,

509 
bäum
,

510 
xfs_öobt_ªc_öc‹e
 *
ƒec
,

511 
boﬁ
 
mîge
)

513 
xfs_båì_cur
 *
cur
;

514 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
agbp
);

515 
xfs_agnumbî_t
 
agno
 = 
	`be32_to_˝u
(
agi
->
agi_£qno
);

516 
îr‹
;

517 
i
;

518 
xfs_öobt_ªc_öc‹e
 
ªc
;

520 
cur
 = 
	`xfs_öobt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
, 
bäum
);

523 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 
ƒec
->
ú_°¨töo
, 
XFS_LOOKUP_EQ
, &
i
);

524 i‡(
îr‹
)

525 
îr‹
;

527 i‡(
i
 == 0) {

528 
îr‹
 = 
	`xfs_öobt_ö£π_ªc
(
cur
, 
ƒec
->
ú_hﬁemask
,

529 
ƒec
->
ú_cou¡
,Çªc->
ú_‰ìcou¡
,

530 
ƒec
->
ú_‰ì
, &
i
);

531 i‡(
îr‹
)

532 
îr‹
;

533 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹
);

535 
out
;

542 i‡(
mîge
) {

543 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, &
ªc
, &
i
);

544 i‡(
îr‹
)

545 
îr‹
;

546 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹
);

547 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

548 
ªc
.
ú_°¨töo
 =
ƒec
->ir_startino,

549 
îr‹
);

555 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
	`__xfs_öobt_ˇn_mîge
(
ƒec
, &
ªc
),

556 
îr‹
);

558 
	`åa˚_xfs_úec_mîge_¥e
(
mp
, 
agno
, 
ªc
.
ú_°¨töo
,

559 
ªc
.
ú_hﬁemask
, 
ƒec
->
ú_°¨töo
,

560 
ƒec
->
ú_hﬁemask
);

563 
	`__xfs_öobt_ªc_mîge
(
ƒec
, &
ªc
);

565 
	`åa˚_xfs_úec_mîge_po°
(
mp
, 
agno
, 
ƒec
->
ú_°¨töo
,

566 
ƒec
->
ú_hﬁemask
);

568 
îr‹
 = 
	`xfs_öobt_ªc_check_cou¡
(
mp
, 
ƒec
);

569 i‡(
îr‹
)

570 
îr‹
;

573 
îr‹
 = 
	`xfs_öobt_upd©e
(
cur
, 
ƒec
);

574 i‡(
îr‹
)

575 
îr‹
;

577 
out
:

578 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

580 
îr‹
:

581 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

582  
îr‹
;

583 
	}
}

589 
STATIC
 

590 
	$xfs_üŒoc_ag_Æloc
(

591 
xfs_å™s_t
 *
ç
,

592 
xfs_buf_t
 *
agbp
,

593 *
Æloc
)

595 
xfs_agi_t
 *
agi
;

596 
xfs_Æloc_¨g_t
 
¨gs
;

597 
xfs_agnumbî_t
 
agno
;

598 
îr‹
;

599 
xfs_agöo_t
 
√wöo
;

600 
xfs_agöo_t
 
√wÀn
;

601 
ißlig√d
 = 0;

603 
uöt16_t
 
Ælocmask
 = (uint16_t) -1;

604 
xfs_öobt_ªc_öc‹e
 
ªc
;

605 
xfs_≥øg
 *
∑g
;

606 
do_•¨£
 = 0;

608 
	`mem£t
(&
¨gs
, 0, (args));

609 
¨gs
.
ç
 =Åp;

610 
¨gs
.
mp
 = 
ç
->
t_mou¡p
;

611 
¨gs
.
fsbno
 = 
NULLFSBLOCK
;

612 
	`xfs_rm≠_ag_ow√r
(&
¨gs
.
oöfo
, 
XFS_RMAP_OWN_INODES
);

614 #ifde‡
DEBUG


616 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
ç
->
t_mou¡p
->
m_sb
) &&

617 
¨gs
.
mp
->
m_üŒoc_mö_blks
 <árgs.mp->
m_üŒoc_blks
)

618 
do_•¨£
 = 
	`¥™dom_u32
() & 1;

625 
√wÀn
 = 
¨gs
.
mp
->
m_üŒoc_öos
;

626 i‡(
¨gs
.
mp
->
m_maxicou¡
 &&

627 
	`≥r˝u_cou¡î_ªad_posôive
(&
¨gs
.
mp
->
m_icou¡
Ë+ 
√wÀn
 >

628 
¨gs
.
mp
->
m_maxicou¡
)

629  -
ENOSPC
;

630 
¨gs
.
möÀn
 =árgs.
maxÀn
 =árgs.
mp
->
m_üŒoc_blks
;

636 
agi
 = 
	`XFS_BUF_TO_AGI
(
agbp
);

637 
√wöo
 = 
	`be32_to_˝u
(
agi
->
agi_√wöo
);

638 
agno
 = 
	`be32_to_˝u
(
agi
->
agi_£qno
);

639 
¨gs
.
agbno
 = 
	`XFS_AGINO_TO_AGBNO
◊rgs.
mp
, 
√wöo
) +

640 
¨gs
.
mp
->
m_üŒoc_blks
;

641 i‡(
do_•¨£
)

642 
•¨£_Æloc
;

643 i‡(
	`likñy
(
√wöo
 !
NULLAGINO
 &&

644 (
¨gs
.
agbno
 < 
	`be32_to_˝u
(
agi
->
agi_Àngth
)))) {

645 
¨gs
.
fsbno
 = 
	`XFS_AGB_TO_FSB
◊rgs.
mp
, 
agno
,árgs.
agbno
);

646 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_THIS_BNO
;

647 
¨gs
.
¥od
 = 1;

662 
¨gs
.
Æignmít
 = 1;

663 
¨gs
.
möÆign¶›
 = 
	`xfs_üŒoc_˛u°î_Æignmít
◊rgs.
mp
) - 1;

666 
¨gs
.
möÀ·
 =árgs.
mp
->
m_ö_maxÀvñs
 - 1;

667 i‡((
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
)))

668  
îr‹
;

680 
¨gs
.
möÆign¶›
 = 0;

683 i‡(
	`u∆ikñy
(
¨gs
.
fsbno
 =
NULLFSBLOCK
)) {

692 
ißlig√d
 = 0;

693 i‡(
¨gs
.
mp
->
m_söﬂlign
) {

694 
	`ASSERT
(!(
¨gs
.
mp
->
m_Êags
 & 
XFS_MOUNT_NOALIGN
));

695 
¨gs
.
Æignmít
 =árgs.
mp
->
m_dÆign
;

696 
ißlig√d
 = 1;

698 
¨gs
.
Æignmít
 = 
	`xfs_üŒoc_˛u°î_Æignmít
◊rgs.
mp
);

704 
¨gs
.
agbno
 = 
	`be32_to_˝u
(
agi
->
agi_roŸ
);

705 
¨gs
.
fsbno
 = 
	`XFS_AGB_TO_FSB
◊rgs.
mp
, 
agno
,árgs.
agbno
);

709 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

710 
¨gs
.
¥od
 = 1;

714 
¨gs
.
möÀ·
 =árgs.
mp
->
m_ö_maxÀvñs
 - 1;

715 i‡((
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
)))

716  
îr‹
;

723 i‡(
ißlig√d
 && 
¨gs
.
fsbno
 =
NULLFSBLOCK
) {

724 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

725 
¨gs
.
agbno
 = 
	`be32_to_˝u
(
agi
->
agi_roŸ
);

726 
¨gs
.
fsbno
 = 
	`XFS_AGB_TO_FSB
◊rgs.
mp
, 
agno
,árgs.
agbno
);

727 
¨gs
.
Æignmít
 = 
	`xfs_üŒoc_˛u°î_Æignmít
◊rgs.
mp
);

728 i‡((
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
)))

729  
îr‹
;

736 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
¨gs
.
mp
->
m_sb
) &&

737 
¨gs
.
mp
->
m_üŒoc_mö_blks
 <árgs.mp->
m_üŒoc_blks
 &&

738 
¨gs
.
fsbno
 =
NULLFSBLOCK
) {

739 
•¨£_Æloc
:

740 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

741 
¨gs
.
agbno
 = 
	`be32_to_˝u
(
agi
->
agi_roŸ
);

742 
¨gs
.
fsbno
 = 
	`XFS_AGB_TO_FSB
◊rgs.
mp
, 
agno
,árgs.
agbno
);

743 
¨gs
.
Æignmít
 =árgs.
mp
->
m_sb
.
sb_•öo_Æign
;

744 
¨gs
.
¥od
 = 1;

746 
¨gs
.
möÀn
 =árgs.
mp
->
m_üŒoc_mö_blks
;

747 
¨gs
.
maxÀn
 =árgs.
möÀn
;

759 
¨gs
.
mö_agbno
 =árgs.
mp
->
m_sb
.
sb_öﬂlignmt
;

760 
¨gs
.
max_agbno
 = 
	`round_down
◊rgs.
mp
->
m_sb
.
sb_agblocks
,

761 
¨gs
.
mp
->
m_sb
.
sb_öﬂlignmt
) -

762 
¨gs
.
mp
->
m_üŒoc_blks
;

764 
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
);

765 i‡(
îr‹
)

766  
îr‹
;

768 
√wÀn
 = 
¨gs
.
Àn
 <<árgs.
mp
->
m_sb
.
sb_ö›blog
;

769 
	`ASSERT
(
√wÀn
 <
XFS_INODES_PER_CHUNK
);

770 
Ælocmask
 = (1 << (
√wÀn
 / 
XFS_INODES_PER_HOLEMASK_BIT
)) - 1;

773 i‡(
¨gs
.
fsbno
 =
NULLFSBLOCK
) {

774 *
Æloc
 = 0;

777 
	`ASSERT
(
¨gs
.
Àn
 =¨gs.
möÀn
);

788 
îr‹
 = 
	`xfs_üŒoc_öode_öô
(
¨gs
.
mp
, 
ç
, 
NULL
, 
√wÀn
, 
agno
,

789 
¨gs
.
agbno
,árgs.
Àn
, 
	`¥™dom_u32
());

791 i‡(
îr‹
)

792  
îr‹
;

796 
√wöo
 = 
	`XFS_OFFBNO_TO_AGINO
(
¨gs
.
mp
,árgs.
agbno
, 0);

798 i‡(
	`xfs_öobt_is•¨£
(~
Ælocmask
)) {

802 
	`xfs_Æign_•¨£_öo
(
¨gs
.
mp
, &
√wöo
, &
Ælocmask
);

804 
ªc
.
ú_°¨töo
 = 
√wöo
;

805 
ªc
.
ú_hﬁemask
 = ~
Ælocmask
;

806 
ªc
.
ú_cou¡
 = 
√wÀn
;

807 
ªc
.
ú_‰ìcou¡
 = 
√wÀn
;

808 
ªc
.
ú_‰ì
 = 
XFS_INOBT_ALL_FREE
;

815 
îr‹
 = 
	`xfs_öobt_ö£π_•ªc
(
¨gs
.
mp
, 
ç
, 
agbp
, 
XFS_BTNUM_INO
,

816 &
ªc
, 
åue
);

817 i‡(
îr‹
 =-
EFSCORRUPTED
) {

818 
	`xfs_Æît
(
¨gs
.
mp
,

820 
	`XFS_AGINO_TO_INO
(
¨gs
.
mp
, 
agno
,

821 
ªc
.
ú_°¨töo
),

822 
ªc
.
ú_hﬁemask
,Ñec.
ú_cou¡
);

823 
	`xfs_f‹˚_shutdown
(
¨gs
.
mp
, 
SHUTDOWN_CORRUPT_INCORE
);

825 i‡(
îr‹
)

826  
îr‹
;

839 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
¨gs
.
mp
->
m_sb
)) {

840 
îr‹
 = 
	`xfs_öobt_ö£π_•ªc
(
¨gs
.
mp
, 
ç
, 
agbp
,

841 
XFS_BTNUM_FINO
, &
ªc
,

842 
Ál£
);

843 i‡(
îr‹
)

844  
îr‹
;

848 
îr‹
 = 
	`xfs_öobt_ö£π
(
¨gs
.
mp
, 
ç
, 
agbp
, 
√wöo
, 
√wÀn
,

849 
XFS_BTNUM_INO
);

850 i‡(
îr‹
)

851  
îr‹
;

853 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
¨gs
.
mp
->
m_sb
)) {

854 
îr‹
 = 
	`xfs_öobt_ö£π
(
¨gs
.
mp
, 
ç
, 
agbp
, 
√wöo
,

855 
√wÀn
, 
XFS_BTNUM_FINO
);

856 i‡(
îr‹
)

857  
îr‹
;

864 
	`be32_add_˝u
(&
agi
->
agi_cou¡
, 
√wÀn
);

865 
	`be32_add_˝u
(&
agi
->
agi_‰ìcou¡
, 
√wÀn
);

866 
∑g
 = 
	`xfs_≥øg_gë
(
¨gs
.
mp
, 
agno
);

867 
∑g
->
∑gi_‰ìcou¡
 +
√wÀn
;

868 
	`xfs_≥øg_put
(
∑g
);

869 
agi
->
agi_√wöo
 = 
	`˝u_to_be32
(
√wöo
);

874 
	`xfs_üŒoc_log_agi
(
ç
, 
agbp
,

875 
XFS_AGI_COUNT
 | 
XFS_AGI_FREECOUNT
 | 
XFS_AGI_NEWINO
);

879 
	`xfs_å™s_mod_sb
(
ç
, 
XFS_TRANS_SB_ICOUNT
, ()
√wÀn
);

880 
	`xfs_å™s_mod_sb
(
ç
, 
XFS_TRANS_SB_IFREE
, ()
√wÀn
);

881 *
Æloc
 = 1;

883 
	}
}

885 
STATIC
 
xfs_agnumbî_t


886 
	$xfs_üŒoc_√xt_ag
(

887 
xfs_mou¡_t
 *
mp
)

889 
xfs_agnumbî_t
 
agno
;

891 
	`•ö_lock
(&
mp
->
m_agúŸ‹_lock
);

892 
agno
 = 
mp
->
m_agúŸ‹
;

893 i‡(++
mp
->
m_agúŸ‹
 >mp->
m_maxagi
)

894 
mp
->
m_agúŸ‹
 = 0;

895 
	`•ö_u∆ock
(&
mp
->
m_agúŸ‹_lock
);

897  
agno
;

898 
	}
}

904 
STATIC
 
xfs_agnumbî_t


905 
	$xfs_üŒoc_ag_£À˘
(

906 
xfs_å™s_t
 *
ç
,

907 
xfs_öo_t
 
∑ª¡
,

908 
umode_t
 
mode
,

909 
okÆloc
)

911 
xfs_agnumbî_t
 
agcou¡
;

912 
xfs_agnumbî_t
 
agno
;

913 
Êags
;

914 
xfs_exéí_t
 
öìd
;

915 
xfs_exéí_t
 
l⁄ge°
 = 0;

916 
xfs_mou¡_t
 *
mp
;

917 
√ed•a˚
;

918 
xfs_≥øg_t
 *
∑g
;

919 
xfs_agnumbî_t
 
∑gno
;

920 
îr‹
;

926 
√ed•a˚
 = 
	`S_ISDIR
(
mode
Ë|| 
	`S_ISREG
(modeË|| 
	`S_ISLNK
(mode);

927 
mp
 = 
ç
->
t_mou¡p
;

928 
agcou¡
 = 
mp
->
m_maxagi
;

929 i‡(
	`S_ISDIR
(
mode
))

930 
∑gno
 = 
	`xfs_üŒoc_√xt_ag
(
mp
);

932 
∑gno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
∑ª¡
);

933 i‡(
∑gno
 >
agcou¡
)

934 
∑gno
 = 0;

937 
	`ASSERT
(
∑gno
 < 
agcou¡
);

946 
agno
 = 
∑gno
;

947 
Êags
 = 
XFS_ALLOC_FLAG_TRYLOCK
;

949 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
agno
);

950 i‡(!
∑g
->
∑gi_öodeok
) {

951 
	`xfs_üŒoc_√xt_ag
(
mp
);

952 
√xèg
;

955 i‡(!
∑g
->
∑gi_öô
) {

956 
îr‹
 = 
	`xfs_üŒoc_∑gi_öô
(
mp
, 
ç
, 
agno
);

957 i‡(
îr‹
)

958 
√xèg
;

961 i‡(
∑g
->
∑gi_‰ìcou¡
) {

962 
	`xfs_≥øg_put
(
∑g
);

963  
agno
;

966 i‡(!
okÆloc
)

967 
√xèg
;

969 i‡(!
∑g
->
∑gf_öô
) {

970 
îr‹
 = 
	`xfs_Æloc_∑gf_öô
(
mp
, 
ç
, 
agno
, 
Êags
);

971 i‡(
îr‹
)

972 
√xèg
;

991 
öìd
 = 
mp
->
m_üŒoc_mö_blks
;

992 i‡(
Êags
 && 
öìd
 > 1)

993 
öìd
 +
	`xfs_üŒoc_˛u°î_Æignmít
(
mp
);

994 
l⁄ge°
 = 
∑g
->
∑gf_l⁄ge°
;

995 i‡(!
l⁄ge°
)

996 
l⁄ge°
 = 
∑g
->
∑gf_Êcou¡
 > 0;

998 i‡(
∑g
->
∑gf_‰ìblks
 >
√ed•a˚
 + 
öìd
 &&

999 
l⁄ge°
 >
öìd
) {

1000 
	`xfs_≥øg_put
(
∑g
);

1001  
agno
;

1003 
√xèg
:

1004 
	`xfs_≥øg_put
(
∑g
);

1009 i‡(
	`XFS_FORCED_SHUTDOWN
(
mp
))

1010  
NULLAGNUMBER
;

1011 
agno
++;

1012 i‡(
agno
 >
agcou¡
)

1013 
agno
 = 0;

1014 i‡(
agno
 =
∑gno
) {

1015 i‡(
Êags
 == 0)

1016  
NULLAGNUMBER
;

1017 
Êags
 = 0;

1020 
	}
}

1025 
STATIC
 

1026 
	$xfs_üŒoc_√xt_ªc
(

1027 
xfs_båì_cur
 *
cur
,

1028 
xfs_öobt_ªc_öc‹e_t
 *
ªc
,

1029 *
d⁄e
,

1030 
À·
)

1032 
îr‹
;

1033 
i
;

1035 i‡(
À·
)

1036 
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
);

1038 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
);

1040 i‡(
îr‹
)

1041  
îr‹
;

1042 *
d⁄e
 = !
i
;

1043 i‡(
i
) {

1044 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, 
ªc
, &
i
);

1045 i‡(
îr‹
)

1046  
îr‹
;

1047 
	`XFS_WANT_CORRUPTED_RETURN
(
cur
->
bc_mp
, 
i
 == 1);

1051 
	}
}

1053 
STATIC
 

1054 
	$xfs_üŒoc_gë_ªc
(

1055 
xfs_båì_cur
 *
cur
,

1056 
xfs_agöo_t
 
agöo
,

1057 
xfs_öobt_ªc_öc‹e_t
 *
ªc
,

1058 *
d⁄e
)

1060 
îr‹
;

1061 
i
;

1063 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 
agöo
, 
XFS_LOOKUP_EQ
, &
i
);

1064 i‡(
îr‹
)

1065  
îr‹
;

1066 *
d⁄e
 = !
i
;

1067 i‡(
i
) {

1068 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, 
ªc
, &
i
);

1069 i‡(
îr‹
)

1070  
îr‹
;

1071 
	`XFS_WANT_CORRUPTED_RETURN
(
cur
->
bc_mp
, 
i
 == 1);

1075 
	}
}

1082 
STATIC
 

1083 
	$xfs_öobt_fú°_‰ì_öode
(

1084 
xfs_öobt_ªc_öc‹e
 *
ªc
)

1086 
xfs_öo‰ì_t
 
ªÆ‰ì
;

1089 i‡(!
	`xfs_öobt_is•¨£
(
ªc
->
ú_hﬁemask
))

1090  
	`xfs_lowbô64
(
ªc
->
ú_‰ì
);

1092 
ªÆ‰ì
 = 
	`xfs_öobt_úec_to_Ælocmask
(
ªc
);

1093 
ªÆ‰ì
 &
ªc
->
ú_‰ì
;

1095  
	`xfs_lowbô64
(
ªÆ‰ì
);

1096 
	}
}

1101 
STATIC
 

1102 
	$xfs_düŒoc_ag_öobt
(

1103 
xfs_å™s
 *
ç
,

1104 
xfs_buf
 *
agbp
,

1105 
xfs_öo_t
 
∑ª¡
,

1106 
xfs_öo_t
 *
ö›
)

1108 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

1109 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
agbp
);

1110 
xfs_agnumbî_t
 
agno
 = 
	`be32_to_˝u
(
agi
->
agi_£qno
);

1111 
xfs_agnumbî_t
 
∑gno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
∑ª¡
);

1112 
xfs_agöo_t
 
∑göo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
∑ª¡
);

1113 
xfs_≥øg
 *
∑g
;

1114 
xfs_båì_cur
 *
cur
, *
tcur
;

1115 
xfs_öobt_ªc_öc‹e
 
ªc
, 
åec
;

1116 
xfs_öo_t
 
öo
;

1117 
îr‹
;

1118 
off£t
;

1119 
i
, 
j
;

1121 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
agno
);

1123 
	`ASSERT
(
∑g
->
∑gi_öô
);

1124 
	`ASSERT
(
∑g
->
∑gi_öodeok
);

1125 
	`ASSERT
(
∑g
->
∑gi_‰ìcou¡
 > 0);

1127 
ª°¨t_∑gno
:

1128 
cur
 = 
	`xfs_öobt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
, 
XFS_BTNUM_INO
);

1133 i‡(!
∑göo
)

1134 
∑göo
 = 
	`be32_to_˝u
(
agi
->
agi_√wöo
);

1136 
îr‹
 = 
	`xfs_check_agi_‰ìcou¡
(
cur
, 
agi
);

1137 i‡(
îr‹
)

1138 
îr‹0
;

1143 i‡(
∑gno
 =
agno
) {

1144 
d⁄ñe·
;

1145 
d⁄îight
;

1146 
£¨chdi°™˚
 = 10;

1148 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 
∑göo
, 
XFS_LOOKUP_LE
, &
i
);

1149 i‡(
îr‹
)

1150 
îr‹0
;

1151 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1153 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, &
ªc
, &
j
);

1154 i‡(
îr‹
)

1155 
îr‹0
;

1156 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
j
 =1, 
îr‹0
);

1158 i‡(
ªc
.
ú_‰ìcou¡
 > 0) {

1163 
Æloc_öode
;

1172 
îr‹
 = 
	`xfs_båì_dup_curs‹
(
cur
, &
tcur
);

1173 i‡(
îr‹
)

1174 
îr‹0
;

1179 i‡(
∑göo
 !
NULLAGINO
 &&

1180 
∑g
->
∑gl_∑göo
 =
∑göo
 &&

1181 
∑g
->
∑gl_À·ªc
 !
NULLAGINO
 &&

1182 
∑g
->
∑gl_righåec
 !
NULLAGINO
) {

1183 
îr‹
 = 
	`xfs_üŒoc_gë_ªc
(
tcur
, 
∑g
->
∑gl_À·ªc
,

1184 &
åec
, &
d⁄ñe·
);

1185 i‡(
îr‹
)

1186 
îr‹1
;

1188 
îr‹
 = 
	`xfs_üŒoc_gë_ªc
(
cur
, 
∑g
->
∑gl_righåec
,

1189 &
ªc
, &
d⁄îight
);

1190 i‡(
îr‹
)

1191 
îr‹1
;

1194 
îr‹
 = 
	`xfs_üŒoc_√xt_ªc
(
tcur
, &
åec
, &
d⁄ñe·
, 1);

1195 i‡(
îr‹
)

1196 
îr‹1
;

1199 
îr‹
 = 
	`xfs_üŒoc_√xt_ªc
(
cur
, &
ªc
, &
d⁄îight
, 0);

1200 i‡(
îr‹
)

1201 
îr‹1
;

1207 !
d⁄ñe·
 || !
d⁄îight
) {

1208 
u£À·
;

1210 i‡(!--
£¨chdi°™˚
) {

1215 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_NOERROR
);

1216 
∑g
->
∑gl_À·ªc
 = 
åec
.
ú_°¨töo
;

1217 
∑g
->
∑gl_righåec
 = 
ªc
.
ú_°¨töo
;

1218 
∑g
->
∑gl_∑göo
 = 
∑göo
;

1219 
√wöo
;

1223 i‡(!
d⁄ñe·
 && !
d⁄îight
) {

1224 
u£À·
 = 
∑göo
 -

1225 (
åec
.
ú_°¨töo
 + 
XFS_INODES_PER_CHUNK
 - 1) <

1226 
ªc
.
ú_°¨töo
 - 
∑göo
;

1228 
u£À·
 = !
d⁄ñe·
;

1232 i‡(
u£À·
 && 
åec
.
ú_‰ìcou¡
) {

1233 
ªc
 = 
åec
;

1234 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

1235 
cur
 = 
tcur
;

1237 
∑g
->
∑gl_À·ªc
 = 
åec
.
ú_°¨töo
;

1238 
∑g
->
∑gl_righåec
 = 
ªc
.
ú_°¨töo
;

1239 
∑g
->
∑gl_∑göo
 = 
∑göo
;

1240 
Æloc_öode
;

1244 i‡(!
u£À·
 && 
ªc
.
ú_‰ìcou¡
) {

1245 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_NOERROR
);

1247 
∑g
->
∑gl_À·ªc
 = 
åec
.
ú_°¨töo
;

1248 
∑g
->
∑gl_righåec
 = 
ªc
.
ú_°¨töo
;

1249 
∑g
->
∑gl_∑göo
 = 
∑göo
;

1250 
Æloc_öode
;

1254 i‡(
u£À·
) {

1255 
îr‹
 = 
	`xfs_üŒoc_√xt_ªc
(
tcur
, &
åec
,

1256 &
d⁄ñe·
, 1);

1258 
îr‹
 = 
	`xfs_üŒoc_√xt_ªc
(
cur
, &
ªc
,

1259 &
d⁄îight
, 0);

1261 i‡(
îr‹
)

1262 
îr‹1
;

1272 
∑g
->
∑gl_∑göo
 = 
NULLAGINO
;

1273 
∑g
->
∑gl_À·ªc
 = 
NULLAGINO
;

1274 
∑g
->
∑gl_righåec
 = 
NULLAGINO
;

1275 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_NOERROR
);

1276 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

1277 
ª°¨t_∑gno
;

1284 
√wöo
:

1285 i‡(
agi
->
agi_√wöo
 !
	`˝u_to_be32
(
NULLAGINO
)) {

1286 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 
	`be32_to_˝u
(
agi
->
agi_√wöo
),

1287 
XFS_LOOKUP_EQ
, &
i
);

1288 i‡(
îr‹
)

1289 
îr‹0
;

1291 i‡(
i
 == 1) {

1292 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, &
ªc
, &
j
);

1293 i‡(
îr‹
)

1294 
îr‹0
;

1296 i‡(
j
 =1 && 
ªc
.
ú_‰ìcou¡
 > 0) {

1301 
Æloc_öode
;

1309 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 0, 
XFS_LOOKUP_GE
, &
i
);

1310 i‡(
îr‹
)

1311 
îr‹0
;

1312 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1315 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, &
ªc
, &
i
);

1316 i‡(
îr‹
)

1317 
îr‹0
;

1318 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1319 i‡(
ªc
.
ú_‰ìcou¡
 > 0)

1321 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
);

1322 i‡(
îr‹
)

1323 
îr‹0
;

1324 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1327 
Æloc_öode
:

1328 
off£t
 = 
	`xfs_öobt_fú°_‰ì_öode
(&
ªc
);

1329 
	`ASSERT
(
off£t
 >= 0);

1330 
	`ASSERT
(
off£t
 < 
XFS_INODES_PER_CHUNK
);

1331 
	`ASSERT
((
	`XFS_AGINO_TO_OFFSET
(
mp
, 
ªc
.
ú_°¨töo
) %

1332 
XFS_INODES_PER_CHUNK
) == 0);

1333 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
ªc
.
ú_°¨töo
 + 
off£t
);

1334 
ªc
.
ú_‰ì
 &~
	`XFS_INOBT_MASK
(
off£t
);

1335 
ªc
.
ú_‰ìcou¡
--;

1336 
îr‹
 = 
	`xfs_öobt_upd©e
(
cur
, &
ªc
);

1337 i‡(
îr‹
)

1338 
îr‹0
;

1339 
	`be32_add_˝u
(&
agi
->
agi_‰ìcou¡
, -1);

1340 
	`xfs_üŒoc_log_agi
(
ç
, 
agbp
, 
XFS_AGI_FREECOUNT
);

1341 
∑g
->
∑gi_‰ìcou¡
--;

1343 
îr‹
 = 
	`xfs_check_agi_‰ìcou¡
(
cur
, 
agi
);

1344 i‡(
îr‹
)

1345 
îr‹0
;

1347 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

1348 
	`xfs_å™s_mod_sb
(
ç
, 
XFS_TRANS_SB_IFREE
, -1);

1349 
	`xfs_≥øg_put
(
∑g
);

1350 *
ö›
 = 
öo
;

1352 
îr‹1
:

1353 
	`xfs_båì_dñ_curs‹
(
tcur
, 
XFS_BTREE_ERROR
);

1354 
îr‹0
:

1355 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

1356 
	`xfs_≥øg_put
(
∑g
);

1357  
îr‹
;

1358 
	}
}

1364 
STATIC
 

1365 
	$xfs_düŒoc_ag_föobt_√¨
(

1366 
xfs_agöo_t
 
∑göo
,

1367 
xfs_båì_cur
 **
ocur
,

1368 
xfs_öobt_ªc_öc‹e
 *
ªc
)

1370 
xfs_båì_cur
 *
lcur
 = *
ocur
;

1371 
xfs_båì_cur
 *
rcur
;

1372 
xfs_öobt_ªc_öc‹e
 
ºec
;

1373 
îr‹
;

1374 
i
, 
j
;

1376 
îr‹
 = 
	`xfs_öobt_lookup
(
lcur
, 
∑göo
, 
XFS_LOOKUP_LE
, &
i
);

1377 i‡(
îr‹
)

1378  
îr‹
;

1380 i‡(
i
 == 1) {

1381 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
lcur
, 
ªc
, &
i
);

1382 i‡(
îr‹
)

1383  
îr‹
;

1384 
	`XFS_WANT_CORRUPTED_RETURN
(
lcur
->
bc_mp
, 
i
 == 1);

1391 i‡(
∑göo
 >
ªc
->
ú_°¨töo
 &&

1392 
∑göo
 < (
ªc
->
ú_°¨töo
 + 
XFS_INODES_PER_CHUNK
))

1396 
îr‹
 = 
	`xfs_båì_dup_curs‹
(
lcur
, &
rcur
);

1397 i‡(
îr‹
)

1398  
îr‹
;

1400 
îr‹
 = 
	`xfs_öobt_lookup
(
rcur
, 
∑göo
, 
XFS_LOOKUP_GE
, &
j
);

1401 i‡(
îr‹
)

1402 
îr‹_rcur
;

1403 i‡(
j
 == 1) {

1404 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
rcur
, &
ºec
, &
j
);

1405 i‡(
îr‹
)

1406 
îr‹_rcur
;

1407 
	`XFS_WANT_CORRUPTED_GOTO
(
lcur
->
bc_mp
, 
j
 =1, 
îr‹_rcur
);

1410 
	`XFS_WANT_CORRUPTED_GOTO
(
lcur
->
bc_mp
, 
i
 =1 || 
j
 =1, 
îr‹_rcur
);

1411 i‡(
i
 =1 && 
j
 == 1) {

1416 i‡((
∑göo
 - 
ªc
->
ú_°¨töo
 + 
XFS_INODES_PER_CHUNK
 - 1) >

1417 (
ºec
.
ú_°¨töo
 - 
∑göo
)) {

1418 *
ªc
 = 
ºec
;

1419 
	`xfs_båì_dñ_curs‹
(
lcur
, 
XFS_BTREE_NOERROR
);

1420 *
ocur
 = 
rcur
;

1422 
	`xfs_båì_dñ_curs‹
(
rcur
, 
XFS_BTREE_NOERROR
);

1424 } i‡(
j
 == 1) {

1426 *
ªc
 = 
ºec
;

1427 
	`xfs_båì_dñ_curs‹
(
lcur
, 
XFS_BTREE_NOERROR
);

1428 *
ocur
 = 
rcur
;

1429 } i‡(
i
 == 1) {

1431 
	`xfs_båì_dñ_curs‹
(
rcur
, 
XFS_BTREE_NOERROR
);

1436 
îr‹_rcur
:

1437 
	`xfs_båì_dñ_curs‹
(
rcur
, 
XFS_BTREE_ERROR
);

1438  
îr‹
;

1439 
	}
}

1445 
STATIC
 

1446 
	$xfs_düŒoc_ag_föobt_√wöo
(

1447 
xfs_agi
 *
agi
,

1448 
xfs_båì_cur
 *
cur
,

1449 
xfs_öobt_ªc_öc‹e
 *
ªc
)

1451 
îr‹
;

1452 
i
;

1454 i‡(
agi
->
agi_√wöo
 !
	`˝u_to_be32
(
NULLAGINO
)) {

1455 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 
	`be32_to_˝u
(
agi
->
agi_√wöo
),

1456 
XFS_LOOKUP_EQ
, &
i
);

1457 i‡(
îr‹
)

1458  
îr‹
;

1459 i‡(
i
 == 1) {

1460 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, 
ªc
, &
i
);

1461 i‡(
îr‹
)

1462  
îr‹
;

1463 
	`XFS_WANT_CORRUPTED_RETURN
(
cur
->
bc_mp
, 
i
 == 1);

1471 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 0, 
XFS_LOOKUP_GE
, &
i
);

1472 i‡(
îr‹
)

1473  
îr‹
;

1474 
	`XFS_WANT_CORRUPTED_RETURN
(
cur
->
bc_mp
, 
i
 == 1);

1476 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, 
ªc
, &
i
);

1477 i‡(
îr‹
)

1478  
îr‹
;

1479 
	`XFS_WANT_CORRUPTED_RETURN
(
cur
->
bc_mp
, 
i
 == 1);

1482 
	}
}

1488 
STATIC
 

1489 
	$xfs_düŒoc_ag_upd©e_öobt
(

1490 
xfs_båì_cur
 *
cur
,

1491 
xfs_öobt_ªc_öc‹e
 *
‰ec
,

1492 
off£t
)

1494 
xfs_öobt_ªc_öc‹e
 
ªc
;

1495 
îr‹
;

1496 
i
;

1498 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 
‰ec
->
ú_°¨töo
, 
XFS_LOOKUP_EQ
, &
i
);

1499 i‡(
îr‹
)

1500  
îr‹
;

1501 
	`XFS_WANT_CORRUPTED_RETURN
(
cur
->
bc_mp
, 
i
 == 1);

1503 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, &
ªc
, &
i
);

1504 i‡(
îr‹
)

1505  
îr‹
;

1506 
	`XFS_WANT_CORRUPTED_RETURN
(
cur
->
bc_mp
, 
i
 == 1);

1507 
	`ASSERT
((
	`XFS_AGINO_TO_OFFSET
(
cur
->
bc_mp
, 
ªc
.
ú_°¨töo
) %

1508 
XFS_INODES_PER_CHUNK
) == 0);

1510 
ªc
.
ú_‰ì
 &~
	`XFS_INOBT_MASK
(
off£t
);

1511 
ªc
.
ú_‰ìcou¡
--;

1513 
	`XFS_WANT_CORRUPTED_RETURN
(
cur
->
bc_mp
, (
ªc
.
ú_‰ì
 =
‰ec
->ir_free) &&

1514 (
ªc
.
ú_‰ìcou¡
 =
‰ec
->ir_freecount));

1516  
	`xfs_öobt_upd©e
(
cur
, &
ªc
);

1517 
	}
}

1526 
STATIC
 

1527 
	$xfs_düŒoc_ag
(

1528 
xfs_å™s
 *
ç
,

1529 
xfs_buf
 *
agbp
,

1530 
xfs_öo_t
 
∑ª¡
,

1531 
xfs_öo_t
 *
ö›
)

1533 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

1534 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
agbp
);

1535 
xfs_agnumbî_t
 
agno
 = 
	`be32_to_˝u
(
agi
->
agi_£qno
);

1536 
xfs_agnumbî_t
 
∑gno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
∑ª¡
);

1537 
xfs_agöo_t
 
∑göo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
∑ª¡
);

1538 
xfs_≥øg
 *
∑g
;

1539 
xfs_båì_cur
 *
cur
;

1540 
xfs_båì_cur
 *
icur
;

1541 
xfs_öobt_ªc_öc‹e
 
ªc
;

1542 
xfs_öo_t
 
öo
;

1543 
îr‹
;

1544 
off£t
;

1545 
i
;

1547 i‡(!
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
))

1548  
	`xfs_düŒoc_ag_öobt
(
ç
, 
agbp
, 
∑ª¡
, 
ö›
);

1550 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
agno
);

1556 i‡(!
∑göo
)

1557 
∑göo
 = 
	`be32_to_˝u
(
agi
->
agi_√wöo
);

1559 
cur
 = 
	`xfs_öobt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
, 
XFS_BTNUM_FINO
);

1561 
îr‹
 = 
	`xfs_check_agi_‰ìcou¡
(
cur
, 
agi
);

1562 i‡(
îr‹
)

1563 
îr‹_cur
;

1570 i‡(
agno
 =
∑gno
)

1571 
îr‹
 = 
	`xfs_düŒoc_ag_föobt_√¨
(
∑göo
, &
cur
, &
ªc
);

1573 
îr‹
 = 
	`xfs_düŒoc_ag_föobt_√wöo
(
agi
, 
cur
, &
ªc
);

1574 i‡(
îr‹
)

1575 
îr‹_cur
;

1577 
off£t
 = 
	`xfs_öobt_fú°_‰ì_öode
(&
ªc
);

1578 
	`ASSERT
(
off£t
 >= 0);

1579 
	`ASSERT
(
off£t
 < 
XFS_INODES_PER_CHUNK
);

1580 
	`ASSERT
((
	`XFS_AGINO_TO_OFFSET
(
mp
, 
ªc
.
ú_°¨töo
) %

1581 
XFS_INODES_PER_CHUNK
) == 0);

1582 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
ªc
.
ú_°¨töo
 + 
off£t
);

1587 
ªc
.
ú_‰ì
 &~
	`XFS_INOBT_MASK
(
off£t
);

1588 
ªc
.
ú_‰ìcou¡
--;

1589 i‡(
ªc
.
ú_‰ìcou¡
)

1590 
îr‹
 = 
	`xfs_öobt_upd©e
(
cur
, &
ªc
);

1592 
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
);

1593 i‡(
îr‹
)

1594 
îr‹_cur
;

1602 
icur
 = 
	`xfs_öobt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
, 
XFS_BTNUM_INO
);

1604 
îr‹
 = 
	`xfs_check_agi_‰ìcou¡
(
icur
, 
agi
);

1605 i‡(
îr‹
)

1606 
îr‹_icur
;

1608 
îr‹
 = 
	`xfs_düŒoc_ag_upd©e_öobt
(
icur
, &
ªc
, 
off£t
);

1609 i‡(
îr‹
)

1610 
îr‹_icur
;

1616 
	`be32_add_˝u
(&
agi
->
agi_‰ìcou¡
, -1);

1617 
	`xfs_üŒoc_log_agi
(
ç
, 
agbp
, 
XFS_AGI_FREECOUNT
);

1618 
∑g
->
∑gi_‰ìcou¡
--;

1620 
	`xfs_å™s_mod_sb
(
ç
, 
XFS_TRANS_SB_IFREE
, -1);

1622 
îr‹
 = 
	`xfs_check_agi_‰ìcou¡
(
icur
, 
agi
);

1623 i‡(
îr‹
)

1624 
îr‹_icur
;

1625 
îr‹
 = 
	`xfs_check_agi_‰ìcou¡
(
cur
, 
agi
);

1626 i‡(
îr‹
)

1627 
îr‹_icur
;

1629 
	`xfs_båì_dñ_curs‹
(
icur
, 
XFS_BTREE_NOERROR
);

1630 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

1631 
	`xfs_≥øg_put
(
∑g
);

1632 *
ö›
 = 
öo
;

1635 
îr‹_icur
:

1636 
	`xfs_båì_dñ_curs‹
(
icur
, 
XFS_BTREE_ERROR
);

1637 
îr‹_cur
:

1638 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

1639 
	`xfs_≥øg_put
(
∑g
);

1640  
îr‹
;

1641 
	}
}

1665 
	$xfs_düŒoc
(

1666 
xfs_å™s
 *
ç
,

1667 
xfs_öo_t
 
∑ª¡
,

1668 
umode_t
 
mode
,

1669 
okÆloc
,

1670 
xfs_buf
 **
IO_agbp
,

1671 
xfs_öo_t
 *
ö›
)

1673 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

1674 
xfs_buf
 *
agbp
;

1675 
xfs_agnumbî_t
 
agno
;

1676 
îr‹
;

1677 
üŒo˚d
;

1678 
n‹oom
 = 0;

1679 
xfs_agnumbî_t
 
°¨t_agno
;

1680 
xfs_≥øg
 *
∑g
;

1682 i‡(*
IO_agbp
) {

1688 
agbp
 = *
IO_agbp
;

1689 
out_Æloc
;

1696 
°¨t_agno
 = 
	`xfs_üŒoc_ag_£À˘
(
ç
, 
∑ª¡
, 
mode
, 
okÆloc
);

1697 i‡(
°¨t_agno
 =
NULLAGNUMBER
) {

1698 *
ö›
 = 
NULLFSINO
;

1710 i‡(
mp
->
m_maxicou¡
 &&

1711 
	`≥r˝u_cou¡î_ªad_posôive
(&
mp
->
m_icou¡
Ë+ mp->
m_üŒoc_öos


1712 > 
mp
->
m_maxicou¡
) {

1713 
n‹oom
 = 1;

1714 
okÆloc
 = 0;

1722 
agno
 = 
°¨t_agno
;

1724 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
agno
);

1725 i‡(!
∑g
->
∑gi_öodeok
) {

1726 
	`xfs_üŒoc_√xt_ag
(
mp
);

1727 
√xèg
;

1730 i‡(!
∑g
->
∑gi_öô
) {

1731 
îr‹
 = 
	`xfs_üŒoc_∑gi_öô
(
mp
, 
ç
, 
agno
);

1732 i‡(
îr‹
)

1733 
out_îr‹
;

1739 i‡(!
∑g
->
∑gi_‰ìcou¡
 && !
okÆloc
)

1740 
√xèg
;

1746 
îr‹
 = 
	`xfs_üŒoc_ªad_agi
(
mp
, 
ç
, 
agno
, &
agbp
);

1747 i‡(
îr‹
)

1748 
out_îr‹
;

1750 i‡(
∑g
->
∑gi_‰ìcou¡
) {

1751 
	`xfs_≥øg_put
(
∑g
);

1752 
out_Æloc
;

1755 i‡(!
okÆloc
)

1756 
√xèg_ªl£_buf„r
;

1759 
îr‹
 = 
	`xfs_üŒoc_ag_Æloc
(
ç
, 
agbp
, &
üŒo˚d
);

1760 i‡(
îr‹
) {

1761 
	`xfs_å™s_bªl£
(
ç
, 
agbp
);

1763 i‡(
îr‹
 !-
ENOSPC
)

1764 
out_îr‹
;

1766 
	`xfs_≥øg_put
(
∑g
);

1767 *
ö›
 = 
NULLFSINO
;

1771 i‡(
üŒo˚d
) {

1778 
	`ASSERT
(
∑g
->
∑gi_‰ìcou¡
 > 0);

1779 
	`xfs_≥øg_put
(
∑g
);

1781 *
IO_agbp
 = 
agbp
;

1782 *
ö›
 = 
NULLFSINO
;

1786 
√xèg_ªl£_buf„r
:

1787 
	`xfs_å™s_bªl£
(
ç
, 
agbp
);

1788 
√xèg
:

1789 
	`xfs_≥øg_put
(
∑g
);

1790 i‡(++
agno
 =
mp
->
m_sb
.
sb_agcou¡
)

1791 
agno
 = 0;

1792 i‡(
agno
 =
°¨t_agno
) {

1793 *
ö›
 = 
NULLFSINO
;

1794  
n‹oom
 ? -
ENOSPC
 : 0;

1798 
out_Æloc
:

1799 *
IO_agbp
 = 
NULL
;

1800  
	`xfs_düŒoc_ag
(
ç
, 
agbp
, 
∑ª¡
, 
ö›
);

1801 
out_îr‹
:

1802 
	`xfs_≥øg_put
(
∑g
);

1803  
îr‹
;

1804 
	}
}

1811 
STATIC
 

1812 
	$xfs_di‰ì_öode_chunk
(

1813 
xfs_mou¡
 *
mp
,

1814 
xfs_agnumbî_t
 
agno
,

1815 
xfs_öobt_ªc_öc‹e
 *
ªc
,

1816 
xfs_de„r_›s
 *
df›s
)

1818 
xfs_agblock_t
 
ßgbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
ªc
->
ú_°¨töo
);

1819 
°¨tidx
, 
ídidx
;

1820 
√xtbô
;

1821 
xfs_agblock_t
 
agbno
;

1822 
c⁄tigblk
;

1823 
xfs_ow√r_öfo
 
oöfo
;

1824 
	`DECLARE_BITMAP
(
hﬁemask
, 
XFS_INOBT_HOLEMASK_BITS
);

1825 
	`xfs_rm≠_ag_ow√r
(&
oöfo
, 
XFS_RMAP_OWN_INODES
);

1827 i‡(!
	`xfs_öobt_is•¨£
(
ªc
->
ú_hﬁemask
)) {

1829 
	`xfs_bm≠_add_‰ì
(
mp
, 
df›s
, 
	`XFS_AGB_TO_FSB
(mp, 
agno
, 
ßgbno
),

1830 
mp
->
m_üŒoc_blks
, &
oöfo
);

1835 
	`ASSERT
((
ªc
->
ú_hﬁemask
Ë<(
hﬁemask
[0]));

1836 
hﬁemask
[0] = 
ªc
->
ú_hﬁemask
;

1844 
°¨tidx
 = 
ídidx
 = 
	`föd_fú°_zîo_bô
(
hﬁemask
,

1845 
XFS_INOBT_HOLEMASK_BITS
);

1846 
√xtbô
 = 
°¨tidx
 + 1;

1847 
°¨tidx
 < 
XFS_INOBT_HOLEMASK_BITS
) {

1848 
√xtbô
 = 
	`föd_√xt_zîo_bô
(
hﬁemask
, 
XFS_INOBT_HOLEMASK_BITS
,

1849 
√xtbô
);

1854 i‡(
√xtbô
 !
XFS_INOBT_HOLEMASK_BITS
 &&

1855 
√xtbô
 =
ídidx
 + 1) {

1856 
ídidx
 = 
√xtbô
;

1857 
√xt
;

1865 
agbno
 = 
ßgbno
 + (
°¨tidx
 * 
XFS_INODES_PER_HOLEMASK_BIT
) /

1866 
mp
->
m_sb
.
sb_ö›block
;

1867 
c⁄tigblk
 = ((
ídidx
 - 
°¨tidx
 + 1) *

1868 
XFS_INODES_PER_HOLEMASK_BIT
) /

1869 
mp
->
m_sb
.
sb_ö›block
;

1871 
	`ASSERT
(
agbno
 % 
mp
->
m_sb
.
sb_•öo_Æign
 == 0);

1872 
	`ASSERT
(
c⁄tigblk
 % 
mp
->
m_sb
.
sb_•öo_Æign
 == 0);

1873 
	`xfs_bm≠_add_‰ì
(
mp
, 
df›s
, 
	`XFS_AGB_TO_FSB
(mp, 
agno
, 
agbno
),

1874 
c⁄tigblk
, &
oöfo
);

1877 
°¨tidx
 = 
ídidx
 = 
√xtbô
;

1879 
√xt
:

1880 
√xtbô
++;

1882 
	}
}

1884 
STATIC
 

1885 
	$xfs_di‰ì_öobt
(

1886 
xfs_mou¡
 *
mp
,

1887 
xfs_å™s
 *
ç
,

1888 
xfs_buf
 *
agbp
,

1889 
xfs_agöo_t
 
agöo
,

1890 
xfs_de„r_›s
 *
df›s
,

1891 
xfs_i˛u°î
 *
xic
,

1892 
xfs_öobt_ªc_öc‹e
 *
‹ec
)

1894 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
agbp
);

1895 
xfs_agnumbî_t
 
agno
 = 
	`be32_to_˝u
(
agi
->
agi_£qno
);

1896 
xfs_≥øg
 *
∑g
;

1897 
xfs_båì_cur
 *
cur
;

1898 
xfs_öobt_ªc_öc‹e
 
ªc
;

1899 
ûí
;

1900 
îr‹
;

1901 
i
;

1902 
off
;

1904 
	`ASSERT
(
agi
->
agi_magi˙um
 =
	`˝u_to_be32
(
XFS_AGI_MAGIC
));

1905 
	`ASSERT
(
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
Ë< 
	`be32_to_˝u
(
agi
->
agi_Àngth
));

1910 
cur
 = 
	`xfs_öobt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
, 
XFS_BTNUM_INO
);

1912 
îr‹
 = 
	`xfs_check_agi_‰ìcou¡
(
cur
, 
agi
);

1913 i‡(
îr‹
)

1914 
îr‹0
;

1919 i‡((
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 
agöo
, 
XFS_LOOKUP_LE
, &
i
))) {

1920 
	`xfs_w¨n
(
mp
, "%s: xfs_inobt_lookup()ÑeturnedÉrror %d.",

1921 
__func__
, 
îr‹
);

1922 
îr‹0
;

1924 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1925 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, &
ªc
, &
i
);

1926 i‡(
îr‹
) {

1927 
	`xfs_w¨n
(
mp
, "%s: xfs_inobt_get_rec()ÑeturnedÉrror %d.",

1928 
__func__
, 
îr‹
);

1929 
îr‹0
;

1931 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹0
);

1935 
off
 = 
agöo
 - 
ªc
.
ú_°¨töo
;

1936 
	`ASSERT
(
off
 >0 && of‡< 
XFS_INODES_PER_CHUNK
);

1937 
	`ASSERT
(!(
ªc
.
ú_‰ì
 & 
	`XFS_INOBT_MASK
(
off
)));

1941 
ªc
.
ú_‰ì
 |
	`XFS_INOBT_MASK
(
off
);

1942 
ªc
.
ú_‰ìcou¡
++;

1949 i‡(!(
mp
->
m_Êags
 & 
XFS_MOUNT_IKEEP
) &&

1950 
ªc
.
ú_‰ì
 =
XFS_INOBT_ALL_FREE
 &&

1951 
mp
->
m_sb
.
sb_ö›block
 <
XFS_INODES_PER_CHUNK
) {

1952 
xic
->
dñëed
 = 1;

1953 
xic
->
fú°_öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
ªc
.
ú_°¨töo
);

1954 
xic
->
Æloc
 = 
	`xfs_öobt_úec_to_Ælocmask
(&
ªc
);

1961 
ûí
 = 
ªc
.
ú_‰ìcou¡
;

1962 
	`be32_add_˝u
(&
agi
->
agi_cou¡
, -
ûí
);

1963 
	`be32_add_˝u
(&
agi
->
agi_‰ìcou¡
, -(
ûí
 - 1));

1964 
	`xfs_üŒoc_log_agi
(
ç
, 
agbp
, 
XFS_AGI_COUNT
 | 
XFS_AGI_FREECOUNT
);

1965 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
agno
);

1966 
∑g
->
∑gi_‰ìcou¡
 -
ûí
 - 1;

1967 
	`xfs_≥øg_put
(
∑g
);

1968 
	`xfs_å™s_mod_sb
(
ç
, 
XFS_TRANS_SB_ICOUNT
, -
ûí
);

1969 
	`xfs_å™s_mod_sb
(
ç
, 
XFS_TRANS_SB_IFREE
, -(
ûí
 - 1));

1971 i‡((
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
))) {

1972 
	`xfs_w¨n
(
mp
, "%s: xfs_btree_deleteÑeturnedÉrror %d.",

1973 
__func__
, 
îr‹
);

1974 
îr‹0
;

1977 
	`xfs_di‰ì_öode_chunk
(
mp
, 
agno
, &
ªc
, 
df›s
);

1979 
xic
->
dñëed
 = 0;

1981 
îr‹
 = 
	`xfs_öobt_upd©e
(
cur
, &
ªc
);

1982 i‡(
îr‹
) {

1983 
	`xfs_w¨n
(
mp
, "%s: xfs_inobt_updateÑeturnedÉrror %d.",

1984 
__func__
, 
îr‹
);

1985 
îr‹0
;

1991 
	`be32_add_˝u
(&
agi
->
agi_‰ìcou¡
, 1);

1992 
	`xfs_üŒoc_log_agi
(
ç
, 
agbp
, 
XFS_AGI_FREECOUNT
);

1993 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
agno
);

1994 
∑g
->
∑gi_‰ìcou¡
++;

1995 
	`xfs_≥øg_put
(
∑g
);

1996 
	`xfs_å™s_mod_sb
(
ç
, 
XFS_TRANS_SB_IFREE
, 1);

1999 
îr‹
 = 
	`xfs_check_agi_‰ìcou¡
(
cur
, 
agi
);

2000 i‡(
îr‹
)

2001 
îr‹0
;

2003 *
‹ec
 = 
ªc
;

2004 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

2007 
îr‹0
:

2008 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

2009  
îr‹
;

2010 
	}
}

2015 
STATIC
 

2016 
	$xfs_di‰ì_föobt
(

2017 
xfs_mou¡
 *
mp
,

2018 
xfs_å™s
 *
ç
,

2019 
xfs_buf
 *
agbp
,

2020 
xfs_agöo_t
 
agöo
,

2021 
xfs_öobt_ªc_öc‹e
 *
ibåec
)

2023 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
agbp
);

2024 
xfs_agnumbî_t
 
agno
 = 
	`be32_to_˝u
(
agi
->
agi_£qno
);

2025 
xfs_båì_cur
 *
cur
;

2026 
xfs_öobt_ªc_öc‹e
 
ªc
;

2027 
off£t
 = 
agöo
 - 
ibåec
->
ú_°¨töo
;

2028 
îr‹
;

2029 
i
;

2031 
cur
 = 
	`xfs_öobt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
, 
XFS_BTNUM_FINO
);

2033 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 
ibåec
->
ú_°¨töo
, 
XFS_LOOKUP_EQ
, &
i
);

2034 i‡(
îr‹
)

2035 
îr‹
;

2036 i‡(
i
 == 0) {

2042 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
ibåec
->
ú_‰ìcou¡
 =1, 
îr‹
);

2044 
îr‹
 = 
	`xfs_öobt_ö£π_ªc
(
cur
, 
ibåec
->
ú_hﬁemask
,

2045 
ibåec
->
ú_cou¡
,

2046 
ibåec
->
ú_‰ìcou¡
,

2047 
ibåec
->
ú_‰ì
, &
i
);

2048 i‡(
îr‹
)

2049 
îr‹
;

2050 
	`ASSERT
(
i
 == 1);

2052 
out
;

2062 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, &
ªc
, &
i
);

2063 i‡(
îr‹
)

2064 
îr‹
;

2065 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
îr‹
);

2067 
ªc
.
ú_‰ì
 |
	`XFS_INOBT_MASK
(
off£t
);

2068 
ªc
.
ú_‰ìcou¡
++;

2070 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, (
ªc
.
ú_‰ì
 =
ibåec
->ir_free) &&

2071 (
ªc
.
ú_‰ìcou¡
 =
ibåec
->ir_freecount),

2072 
îr‹
);

2086 i‡(
ªc
.
ú_‰ì
 =
XFS_INOBT_ALL_FREE
 &&

2087 
mp
->
m_sb
.
sb_ö›block
 <
XFS_INODES_PER_CHUNK
 &&

2088 !(
mp
->
m_Êags
 & 
XFS_MOUNT_IKEEP
)) {

2089 
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
);

2090 i‡(
îr‹
)

2091 
îr‹
;

2092 
	`ASSERT
(
i
 == 1);

2094 
îr‹
 = 
	`xfs_öobt_upd©e
(
cur
, &
ªc
);

2095 i‡(
îr‹
)

2096 
îr‹
;

2099 
out
:

2100 
îr‹
 = 
	`xfs_check_agi_‰ìcou¡
(
cur
, 
agi
);

2101 i‡(
îr‹
)

2102 
îr‹
;

2104 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

2107 
îr‹
:

2108 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

2109  
îr‹
;

2110 
	}
}

2119 
	$xfs_di‰ì
(

2120 
xfs_å™s
 *
ç
,

2121 
xfs_öo_t
 
öode
,

2122 
xfs_de„r_›s
 *
df›s
,

2123 
xfs_i˛u°î
 *
xic
)

2126 
xfs_agblock_t
 
agbno
;

2127 
xfs_buf
 *
agbp
;

2128 
xfs_agöo_t
 
agöo
;

2129 
xfs_agnumbî_t
 
agno
;

2130 
îr‹
;

2131 
xfs_mou¡
 *
mp
;

2132 
xfs_öobt_ªc_öc‹e
 
ªc
;

2134 
mp
 = 
ç
->
t_mou¡p
;

2139 
agno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
öode
);

2140 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
) {

2141 
	`xfs_w¨n
(
mp
, "%s:ágno >= mp->m_sb.sb_agcount (%d >= %d).",

2142 
__func__
, 
agno
, 
mp
->
m_sb
.
sb_agcou¡
);

2143 
	`ASSERT
(0);

2144  -
EINVAL
;

2146 
agöo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öode
);

2147 i‡(
öode
 !
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
)) {

2148 
	`xfs_w¨n
(
mp
, "%s: inode != XFS_AGINO_TO_INO() (%llu != %llu).",

2149 
__func__
, ()
öode
,

2150 ()
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
));

2151 
	`ASSERT
(0);

2152  -
EINVAL
;

2154 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

2155 i‡(
agbno
 >
mp
->
m_sb
.
sb_agblocks
) {

2156 
	`xfs_w¨n
(
mp
, "%s:ágbno >= mp->m_sb.sb_agblocks (%d >= %d).",

2157 
__func__
, 
agbno
, 
mp
->
m_sb
.
sb_agblocks
);

2158 
	`ASSERT
(0);

2159  -
EINVAL
;

2164 
îr‹
 = 
	`xfs_üŒoc_ªad_agi
(
mp
, 
ç
, 
agno
, &
agbp
);

2165 i‡(
îr‹
) {

2166 
	`xfs_w¨n
(
mp
, "%s: xfs_ialloc_read_agi()ÑeturnedÉrror %d.",

2167 
__func__
, 
îr‹
);

2168  
îr‹
;

2174 
îr‹
 = 
	`xfs_di‰ì_öobt
(
mp
, 
ç
, 
agbp
, 
agöo
, 
df›s
, 
xic
, &
ªc
);

2175 i‡(
îr‹
)

2176 
îr‹0
;

2181 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
)) {

2182 
îr‹
 = 
	`xfs_di‰ì_föobt
(
mp
, 
ç
, 
agbp
, 
agöo
, &
ªc
);

2183 i‡(
îr‹
)

2184 
îr‹0
;

2189 
îr‹0
:

2190  
îr‹
;

2191 
	}
}

2193 
STATIC
 

2194 
	$xfs_im≠_lookup
(

2195 
xfs_mou¡
 *
mp
,

2196 
xfs_å™s
 *
ç
,

2197 
xfs_agnumbî_t
 
agno
,

2198 
xfs_agöo_t
 
agöo
,

2199 
xfs_agblock_t
 
agbno
,

2200 
xfs_agblock_t
 *
chunk_agbno
,

2201 
xfs_agblock_t
 *
off£t_agbno
,

2202 
Êags
)

2204 
xfs_öobt_ªc_öc‹e
 
ªc
;

2205 
xfs_båì_cur
 *
cur
;

2206 
xfs_buf
 *
agbp
;

2207 
îr‹
;

2208 
i
;

2210 
îr‹
 = 
	`xfs_üŒoc_ªad_agi
(
mp
, 
ç
, 
agno
, &
agbp
);

2211 i‡(
îr‹
) {

2212 
	`xfs_Æît
(
mp
,

2214 
__func__
, 
îr‹
, 
agno
);

2215  
îr‹
;

2224 
cur
 = 
	`xfs_öobt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
, 
XFS_BTNUM_INO
);

2225 
îr‹
 = 
	`xfs_öobt_lookup
(
cur
, 
agöo
, 
XFS_LOOKUP_LE
, &
i
);

2226 i‡(!
îr‹
) {

2227 i‡(
i
)

2228 
îr‹
 = 
	`xfs_öobt_gë_ªc
(
cur
, &
ªc
, &
i
);

2229 i‡(!
îr‹
 && 
i
 == 0)

2230 
îr‹
 = -
EINVAL
;

2233 
	`xfs_å™s_bªl£
(
ç
, 
agbp
);

2234 
	`xfs_båì_dñ_curs‹
(
cur
, 
îr‹
 ? 
XFS_BTREE_ERROR
 : 
XFS_BTREE_NOERROR
);

2235 i‡(
îr‹
)

2236  
îr‹
;

2239 i‡(
ªc
.
ú_°¨töo
 > 
agöo
 ||

2240 
ªc
.
ú_°¨töo
 + 
mp
->
m_üŒoc_öos
 <
agöo
)

2241  -
EINVAL
;

2244 i‡((
Êags
 & 
XFS_IGET_UNTRUSTED
) &&

2245 (
ªc
.
ú_‰ì
 & 
	`XFS_INOBT_MASK
(
agöo
 -Ñec.
ú_°¨töo
)))

2246  -
EINVAL
;

2248 *
chunk_agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
ªc
.
ú_°¨töo
);

2249 *
off£t_agbno
 = 
agbno
 - *
chunk_agbno
;

2251 
	}
}

2257 
	$xfs_im≠
(

2258 
xfs_mou¡_t
 *
mp
,

2259 
xfs_å™s_t
 *
ç
,

2260 
xfs_öo_t
 
öo
,

2261 
xfs_im≠
 *
im≠
,

2262 
uöt
 
Êags
)

2264 
xfs_agblock_t
 
agbno
;

2265 
xfs_agöo_t
 
agöo
;

2266 
xfs_agnumbî_t
 
agno
;

2267 
blks_≥r_˛u°î
;

2268 
xfs_agblock_t
 
chunk_agbno
;

2269 
xfs_agblock_t
 
˛u°î_agbno
;

2270 
îr‹
;

2271 
off£t
;

2272 
xfs_agblock_t
 
off£t_agbno
;

2274 
	`ASSERT
(
öo
 !
NULLFSINO
);

2279 
agno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
öo
);

2280 
agöo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
);

2281 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

2282 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
 || 
agbno
 >mp->m_sb.
sb_agblocks
 ||

2283 
öo
 !
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
)) {

2284 #ifde‡
DEBUG


2289 i‡(
Êags
 & 
XFS_IGET_UNTRUSTED
)

2290  -
EINVAL
;

2291 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
) {

2292 
	`xfs_Æît
(
mp
,

2294 
__func__
, 
agno
, 
mp
->
m_sb
.
sb_agcou¡
);

2296 i‡(
agbno
 >
mp
->
m_sb
.
sb_agblocks
) {

2297 
	`xfs_Æît
(
mp
,

2299 
__func__
, ()
agbno
,

2300 ()
mp
->
m_sb
.
sb_agblocks
);

2302 i‡(
öo
 !
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
)) {

2303 
	`xfs_Æît
(
mp
,

2305 
__func__
, 
öo
,

2306 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
));

2308 
	`xfs_°ack_åa˚
();

2310  -
EINVAL
;

2313 
blks_≥r_˛u°î
 = 
	`xfs_i˛u°î_size_fsb
(
mp
);

2322 i‡(
Êags
 & 
XFS_IGET_UNTRUSTED
) {

2323 
îr‹
 = 
	`xfs_im≠_lookup
(
mp
, 
ç
, 
agno
, 
agöo
, 
agbno
,

2324 &
chunk_agbno
, &
off£t_agbno
, 
Êags
);

2325 i‡(
îr‹
)

2326  
îr‹
;

2327 
out_m≠
;

2334 i‡(
blks_≥r_˛u°î
 == 1) {

2335 
off£t
 = 
	`XFS_INO_TO_OFFSET
(
mp
, 
öo
);

2336 
	`ASSERT
(
off£t
 < 
mp
->
m_sb
.
sb_ö›block
);

2338 
im≠
->
im_blkno
 = 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
);

2339 
im≠
->
im_Àn
 = 
	`XFS_FSB_TO_BB
(
mp
, 1);

2340 
im≠
->
im_boff£t
 = ()(
off£t
 <<

2341 
mp
->
m_sb
.
sb_öodñog
);

2350 i‡(
mp
->
m_öﬂlign_mask
) {

2351 
off£t_agbno
 = 
agbno
 & 
mp
->
m_öﬂlign_mask
;

2352 
chunk_agbno
 = 
agbno
 - 
off£t_agbno
;

2354 
îr‹
 = 
	`xfs_im≠_lookup
(
mp
, 
ç
, 
agno
, 
agöo
, 
agbno
,

2355 &
chunk_agbno
, &
off£t_agbno
, 
Êags
);

2356 i‡(
îr‹
)

2357  
îr‹
;

2360 
out_m≠
:

2361 
	`ASSERT
(
agbno
 >
chunk_agbno
);

2362 
˛u°î_agbno
 = 
chunk_agbno
 +

2363 ((
off£t_agbno
 / 
blks_≥r_˛u°î
) * blks_per_cluster);

2364 
off£t
 = ((
agbno
 - 
˛u°î_agbno
Ë* 
mp
->
m_sb
.
sb_ö›block
) +

2365 
	`XFS_INO_TO_OFFSET
(
mp
, 
öo
);

2367 
im≠
->
im_blkno
 = 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
˛u°î_agbno
);

2368 
im≠
->
im_Àn
 = 
	`XFS_FSB_TO_BB
(
mp
, 
blks_≥r_˛u°î
);

2369 
im≠
->
im_boff£t
 = ()(
off£t
 << 
mp
->
m_sb
.
sb_öodñog
);

2377 i‡((
im≠
->
im_blkno
 + im≠->
im_Àn
) >

2378 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_dblocks
)) {

2379 
	`xfs_Æît
(
mp
,

2381 
__func__
, (Ë
im≠
->
im_blkno
,

2382 (Ë
im≠
->
im_Àn
,

2383 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_dblocks
));

2384  -
EINVAL
;

2387 
	}
}

2393 
	$xfs_üŒoc_compuã_maxÀvñs
(

2394 
xfs_mou¡_t
 *
mp
)

2396 
uöt
 
öodes
;

2398 
öodes
 = (1LL << 
	`XFS_INO_AGINO_BITS
(
mp
)Ë>> 
XFS_INODES_PER_CHUNK_LOG
;

2399 
mp
->
m_ö_maxÀvñs
 = 
	`xfs_båì_compuã_maxÀvñs
(mp, mp->
m_öobt_mƒ
,

2400 
öodes
);

2401 
	}
}

2416 
	$xfs_üŒoc_log_agi
(

2417 
xfs_å™s_t
 *
ç
,

2418 
xfs_buf_t
 *
bp
,

2419 
fõlds
)

2421 
fú°
;

2422 
œ°
;

2423 c⁄° 
off£ts
[] = {

2425 
	`off£tof
(
xfs_agi_t
, 
agi_magi˙um
),

2426 
	`off£tof
(
xfs_agi_t
, 
agi_vîsi⁄num
),

2427 
	`off£tof
(
xfs_agi_t
, 
agi_£qno
),

2428 
	`off£tof
(
xfs_agi_t
, 
agi_Àngth
),

2429 
	`off£tof
(
xfs_agi_t
, 
agi_cou¡
),

2430 
	`off£tof
(
xfs_agi_t
, 
agi_roŸ
),

2431 
	`off£tof
(
xfs_agi_t
, 
agi_Àvñ
),

2432 
	`off£tof
(
xfs_agi_t
, 
agi_‰ìcou¡
),

2433 
	`off£tof
(
xfs_agi_t
, 
agi_√wöo
),

2434 
	`off£tof
(
xfs_agi_t
, 
agi_dúöo
),

2435 
	`off£tof
(
xfs_agi_t
, 
agi_u∆öked
),

2436 
	`off£tof
(
xfs_agi_t
, 
agi_‰ì_roŸ
),

2437 
	`off£tof
(
xfs_agi_t
, 
agi_‰ì_Àvñ
),

2438 (
xfs_agi_t
)

2440 #ifde‡
DEBUG


2441 
xfs_agi_t
 *
agi
;

2443 
agi
 = 
	`XFS_BUF_TO_AGI
(
bp
);

2444 
	`ASSERT
(
agi
->
agi_magi˙um
 =
	`˝u_to_be32
(
XFS_AGI_MAGIC
));

2452 i‡(
fõlds
 & 
XFS_AGI_ALL_BITS_R1
) {

2453 
	`xfs_båì_off£ts
(
fõlds
, 
off£ts
, 
XFS_AGI_NUM_BITS_R1
,

2454 &
fú°
, &
œ°
);

2455 
	`xfs_å™s_log_buf
(
ç
, 
bp
, 
fú°
, 
œ°
);

2462 
fõlds
 &~
XFS_AGI_ALL_BITS_R1
;

2463 i‡(
fõlds
) {

2464 
	`xfs_båì_off£ts
(
fõlds
, 
off£ts
, 
XFS_AGI_NUM_BITS_R2
,

2465 &
fú°
, &
œ°
);

2466 
	`xfs_å™s_log_buf
(
ç
, 
bp
, 
fú°
, 
œ°
);

2468 
	}
}

2470 #ifde‡
DEBUG


2471 
STATIC
 

2472 
	$xfs_check_agi_u∆öked
(

2473 
xfs_agi
 *
agi
)

2475 
i
;

2477 
i
 = 0; i < 
XFS_AGI_UNLINKED_BUCKETS
; i++)

2478 
	`ASSERT
(
agi
->
agi_u∆öked
[
i
]);

2479 
	}
}

2481 
	#xfs_check_agi_u∆öked
(
agi
)

	)

2484 
boﬁ


2485 
	$xfs_agi_vîify
(

2486 
xfs_buf
 *
bp
)

2488 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

2489 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
bp
);

2491 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

2492 i‡(!
	`uuid_equÆ
(&
agi
->
agi_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

2493  
Ál£
;

2494 i‡(!
	`xfs_log_check_l¢
(
mp
,

2495 
	`be64_to_˝u
(
	`XFS_BUF_TO_AGI
(
bp
)->
agi_l¢
)))

2496  
Ál£
;

2502 i‡(
agi
->
agi_magi˙um
 !
	`˝u_to_be32
(
XFS_AGI_MAGIC
))

2503  
Ál£
;

2504 i‡(!
	`XFS_AGI_GOOD_VERSION
(
	`be32_to_˝u
(
agi
->
agi_vîsi⁄num
)))

2505  
Ál£
;

2507 i‡(
	`be32_to_˝u
(
agi
->
agi_Àvñ
) < 1 ||

2508 
	`be32_to_˝u
(
agi
->
agi_Àvñ
Ë> 
XFS_BTREE_MAXLEVELS
)

2509  
Ál£
;

2511 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
) &&

2512 (
	`be32_to_˝u
(
agi
->
agi_‰ì_Àvñ
) < 1 ||

2513 
	`be32_to_˝u
(
agi
->
agi_‰ì_Àvñ
Ë> 
XFS_BTREE_MAXLEVELS
))

2514  
Ál£
;

2522 i‡(
bp
->
b_∑g
 && 
	`be32_to_˝u
(
agi
->
agi_£qno
Ë!bp->b_∑g->
∑g_agno
)

2523  
Ál£
;

2525 
	`xfs_check_agi_u∆öked
(
agi
);

2526  
åue
;

2527 
	}
}

2530 
	$xfs_agi_ªad_vîify
(

2531 
xfs_buf
 *
bp
)

2533 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

2535 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

2536 !
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_AGI_CRC_OFF
))

2537 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

2538 i‡(
	`XFS_TEST_ERROR
(!
	`xfs_agi_vîify
(
bp
), 
mp
,

2539 
XFS_ERRTAG_IALLOC_READ_AGI
,

2540 
XFS_RANDOM_IALLOC_READ_AGI
))

2541 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

2543 i‡(
bp
->
b_îr‹
)

2544 
	`xfs_vîifõr_îr‹
(
bp
);

2545 
	}
}

2548 
	$xfs_agi_wrôe_vîify
(

2549 
xfs_buf
 *
bp
)

2551 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

2552 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

2554 i‡(!
	`xfs_agi_vîify
(
bp
)) {

2555 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

2556 
	`xfs_vîifõr_îr‹
(
bp
);

2560 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

2563 i‡(
bù
)

2564 
	`XFS_BUF_TO_AGI
(
bp
)->
agi_l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

2565 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_AGI_CRC_OFF
);

2566 
	}
}

2568 c⁄° 
xfs_buf_›s
 
	gxfs_agi_buf_›s
 = {

2569 .
«me
 = "xfs_agi",

2570 .
	gvîify_ªad
 = 
xfs_agi_ªad_vîify
,

2571 .
	gvîify_wrôe
 = 
xfs_agi_wrôe_vîify
,

2578 
	$xfs_ªad_agi
(

2579 
xfs_mou¡
 *
mp
,

2580 
xfs_å™s
 *
ç
,

2581 
xfs_agnumbî_t
 
agno
,

2582 
xfs_buf
 **
bµ
)

2584 
îr‹
;

2586 
	`åa˚_xfs_ªad_agi
(
mp
, 
agno
);

2588 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

2589 
îr‹
 = 
	`xfs_å™s_ªad_buf
(
mp
, 
ç
, mp->
m_ddev_èrgp
,

2590 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),

2591 
	`XFS_FSS_TO_BB
(
mp
, 1), 0, 
bµ
, &
xfs_agi_buf_›s
);

2592 i‡(
îr‹
)

2593  
îr‹
;

2594 i‡(
ç
)

2595 
	`xfs_å™s_buf_£t_ty≥
(
ç
, *
bµ
, 
XFS_BLFT_AGI_BUF
);

2597 
	`xfs_buf_£t_ªf
(*
bµ
, 
XFS_AGI_REF
);

2599 
	}
}

2602 
	$xfs_üŒoc_ªad_agi
(

2603 
xfs_mou¡
 *
mp
,

2604 
xfs_å™s
 *
ç
,

2605 
xfs_agnumbî_t
 
agno
,

2606 
xfs_buf
 **
bµ
)

2608 
xfs_agi
 *
agi
;

2609 
xfs_≥øg
 *
∑g
;

2610 
îr‹
;

2612 
	`åa˚_xfs_üŒoc_ªad_agi
(
mp
, 
agno
);

2614 
îr‹
 = 
	`xfs_ªad_agi
(
mp
, 
ç
, 
agno
, 
bµ
);

2615 i‡(
îr‹
)

2616  
îr‹
;

2618 
agi
 = 
	`XFS_BUF_TO_AGI
(*
bµ
);

2619 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
agno
);

2620 i‡(!
∑g
->
∑gi_öô
) {

2621 
∑g
->
∑gi_‰ìcou¡
 = 
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
);

2622 
∑g
->
∑gi_cou¡
 = 
	`be32_to_˝u
(
agi
->
agi_cou¡
);

2623 
∑g
->
∑gi_öô
 = 1;

2630 
	`ASSERT
(
∑g
->
∑gi_‰ìcou¡
 =
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
) ||

2631 
	`XFS_FORCED_SHUTDOWN
(
mp
));

2632 
	`xfs_≥øg_put
(
∑g
);

2634 
	}
}

2640 
	$xfs_üŒoc_∑gi_öô
(

2641 
xfs_mou¡_t
 *
mp
,

2642 
xfs_å™s_t
 *
ç
,

2643 
xfs_agnumbî_t
 
agno
)

2645 
xfs_buf_t
 *
bp
 = 
NULL
;

2646 
îr‹
;

2648 
îr‹
 = 
	`xfs_üŒoc_ªad_agi
(
mp
, 
ç
, 
agno
, &
bp
);

2649 i‡(
îr‹
)

2650  
îr‹
;

2651 i‡(
bp
)

2652 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

2654 
	}
}

	@libxfs/xfs_ialloc.h

18 #i‚de‡
__XFS_IALLOC_H__


19 
	#__XFS_IALLOC_H__


	)

21 
	gxfs_buf
;

22 
	gxfs_döode
;

23 
	gxfs_im≠
;

24 
	gxfs_mou¡
;

25 
	gxfs_å™s
;

26 
	gxfs_båì_cur
;

29 
	#XFS_INODE_BIG_CLUSTER_SIZE
 8192

	)

31 
	sxfs_i˛u°î
 {

32 
boﬁ
 
	mdñëed
;

33 
xfs_öo_t
 
	mfú°_öo
;

34 
uöt64_t
 
	mÆloc
;

39 
ölöe
 

40 
	$xfs_i˛u°î_size_fsb
(

41 
xfs_mou¡
 *
mp
)

43 i‡(
mp
->
m_sb
.
sb_blocksize
 >mp->
m_öode_˛u°î_size
)

45  
mp
->
m_öode_˛u°î_size
 >> mp->
m_sb
.
sb_blocklog
;

46 
	}
}

51 
ölöe
 
xfs_döode
 *

52 
	$xfs_make_ùå
(
xfs_mou¡
 *
mp
, 
xfs_buf
 *
b
, 
o
)

54  
	`xfs_buf_off£t
(
b
, 
o
 << (
mp
)->
m_sb
.
sb_öodñog
);

55 
	}
}

80 
xfs_düŒoc
(

81 
xfs_å™s
 *
ç
,

82 
xfs_öo_t
 
∑ª¡
,

83 
umode_t
 
mode
,

84 
okÆloc
,

85 
xfs_buf
 **
agbp
,

86 
xfs_öo_t
 *
ö›
);

95 
xfs_di‰ì
(

96 
xfs_å™s
 *
ç
,

97 
xfs_öo_t
 
öode
,

98 
xfs_de„r_›s
 *
df›s
,

99 
xfs_i˛u°î
 *
i‰ì
);

105 
xfs_im≠
(

106 
xfs_mou¡
 *
mp
,

107 
xfs_å™s
 *
ç
,

108 
xfs_öo_t
 
öo
,

109 
xfs_im≠
 *
im≠
,

110 
uöt
 
Êags
);

116 
xfs_üŒoc_compuã_maxÀvñs
(

117 
xfs_mou¡
 *
mp
);

123 
xfs_üŒoc_log_agi
(

124 
xfs_å™s
 *
ç
,

125 
xfs_buf
 *
bp
,

126 
fõlds
);

132 
xfs_üŒoc_ªad_agi
(

133 
xfs_mou¡
 *
mp
,

134 
xfs_å™s
 *
ç
,

135 
xfs_agnumbî_t
 
agno
,

136 
xfs_buf
 **
bµ
);

143 
xfs_üŒoc_∑gi_öô
(

144 
xfs_mou¡
 *
mp
,

145 
xfs_å™s
 *
ç
,

146 
xfs_agnumbî_t
 
agno
);

151 
xfs_öobt_lookup
(
xfs_båì_cur
 *
cur
, 
xfs_agöo_t
 
öo
,

152 
xfs_lookup_t
 
dú
, *
°©
);

157 
xfs_öobt_gë_ªc
(
xfs_båì_cur
 *
cur
,

158 
xfs_öobt_ªc_öc‹e_t
 *
ªc
, *
°©
);

163 
xfs_üŒoc_öode_öô
(
xfs_mou¡
 *
mp
, 
xfs_å™s
 *
ç
,

164 
li°_hód
 *
buf„r_li°
, 
icou¡
,

165 
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

166 
xfs_agblock_t
 
Àngth
, 
gí
);

168 
xfs_ªad_agi
(
xfs_mou¡
 *
mp
, 
xfs_å™s
 *
ç
,

169 
xfs_agnumbî_t
 
agno
, 
xfs_buf
 **
bµ
);

	@libxfs/xfs_ialloc_btree.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_bô.h
"

25 
	~"xfs_mou¡.h
"

26 
	~"xfs_öode.h
"

27 
	~"xfs_båì.h
"

28 
	~"xfs_üŒoc.h
"

29 
	~"xfs_üŒoc_båì.h
"

30 
	~"xfs_Æloc.h
"

31 
	~"xfs_åa˚.h
"

32 
	~"xfs_cksum.h
"

33 
	~"xfs_å™s.h
"

34 
	~"xfs_rm≠.h
"

37 
STATIC
 

38 
	$xfs_öobt_gë_möªcs
(

39 
xfs_båì_cur
 *
cur
,

40 
Àvñ
)

42  
cur
->
bc_mp
->
m_öobt_mƒ
[
Àvñ
 != 0];

43 
	}
}

45 
STATIC
 
xfs_båì_cur
 *

46 
	$xfs_öobt_dup_curs‹
(

47 
xfs_båì_cur
 *
cur
)

49  
	`xfs_öobt_öô_curs‹
(
cur
->
bc_mp
, cur->
bc_ç
,

50 
cur
->
bc_¥iv©e
.
a
.
agbp
, cur->bc_¥iv©e.a.
agno
,

51 
cur
->
bc_bäum
);

52 
	}
}

54 
STATIC
 

55 
	$xfs_öobt_£t_roŸ
(

56 
xfs_båì_cur
 *
cur
,

57 
xfs_båì_±r
 *
≈å
,

58 
öc
)

60 
xfs_buf
 *
agbp
 = 
cur
->
bc_¥iv©e
.
a
.agbp;

61 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
agbp
);

63 
agi
->
agi_roŸ
 = 
≈å
->
s
;

64 
	`be32_add_˝u
(&
agi
->
agi_Àvñ
, 
öc
);

65 
	`xfs_üŒoc_log_agi
(
cur
->
bc_ç
, 
agbp
, 
XFS_AGI_ROOT
 | 
XFS_AGI_LEVEL
);

66 
	}
}

68 
STATIC
 

69 
	$xfs_föobt_£t_roŸ
(

70 
xfs_båì_cur
 *
cur
,

71 
xfs_båì_±r
 *
≈å
,

72 
öc
)

74 
xfs_buf
 *
agbp
 = 
cur
->
bc_¥iv©e
.
a
.agbp;

75 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
agbp
);

77 
agi
->
agi_‰ì_roŸ
 = 
≈å
->
s
;

78 
	`be32_add_˝u
(&
agi
->
agi_‰ì_Àvñ
, 
öc
);

79 
	`xfs_üŒoc_log_agi
(
cur
->
bc_ç
, 
agbp
,

80 
XFS_AGI_FREE_ROOT
 | 
XFS_AGI_FREE_LEVEL
);

81 
	}
}

83 
STATIC
 

84 
	$__xfs_öobt_Æloc_block
(

85 
xfs_båì_cur
 *
cur
,

86 
xfs_båì_±r
 *
°¨t
,

87 
xfs_båì_±r
 *
√w
,

88 *
°©
,

89 
xfs_ag_ªsv_ty≥
 
ªsv
)

91 
xfs_Æloc_¨g_t
 
¨gs
;

92 
îr‹
;

93 
xfs_agblock_t
 
sbno
 = 
	`be32_to_˝u
(
°¨t
->
s
);

95 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

97 
	`mem£t
(&
¨gs
, 0, (args));

98 
¨gs
.
ç
 = 
cur
->
bc_ç
;

99 
¨gs
.
mp
 = 
cur
->
bc_mp
;

100 
	`xfs_rm≠_ag_ow√r
(&
¨gs
.
oöfo
, 
XFS_RMAP_OWN_INOBT
);

101 
¨gs
.
fsbno
 = 
	`XFS_AGB_TO_FSB
◊rgs.
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
sbno
);

102 
¨gs
.
möÀn
 = 1;

103 
¨gs
.
maxÀn
 = 1;

104 
¨gs
.
¥od
 = 1;

105 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

106 
¨gs
.
ªsv
 =Ñesv;

108 
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
);

109 i‡(
îr‹
) {

110 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

111  
îr‹
;

113 i‡(
¨gs
.
fsbno
 =
NULLFSBLOCK
) {

114 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

115 *
°©
 = 0;

118 
	`ASSERT
(
¨gs
.
Àn
 == 1);

119 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

121 
√w
->
s
 = 
	`˝u_to_be32
(
	`XFS_FSB_TO_AGBNO
(
¨gs
.
mp
,árgs.
fsbno
));

122 *
°©
 = 1;

124 
	}
}

126 
STATIC
 

127 
	$xfs_öobt_Æloc_block
(

128 
xfs_båì_cur
 *
cur
,

129 
xfs_båì_±r
 *
°¨t
,

130 
xfs_båì_±r
 *
√w
,

131 *
°©
)

133  
	`__xfs_öobt_Æloc_block
(
cur
, 
°¨t
, 
√w
, 
°©
, 
XFS_AG_RESV_NONE
);

134 
	}
}

136 
STATIC
 

137 
	$xfs_föobt_Æloc_block
(

138 
xfs_båì_cur
 *
cur
,

139 
xfs_båì_±r
 *
°¨t
,

140 
xfs_båì_±r
 *
√w
,

141 *
°©
)

143  
	`__xfs_öobt_Æloc_block
(
cur
, 
°¨t
, 
√w
, 
°©
,

144 
XFS_AG_RESV_METADATA
);

145 
	}
}

147 
STATIC
 

148 
	$xfs_öobt_‰ì_block
(

149 
xfs_båì_cur
 *
cur
,

150 
xfs_buf
 *
bp
)

152 
xfs_ow√r_öfo
 
oöfo
;

154 
	`xfs_rm≠_ag_ow√r
(&
oöfo
, 
XFS_RMAP_OWN_INOBT
);

155  
	`xfs_‰ì_exã¡
(
cur
->
bc_ç
,

156 
	`XFS_DADDR_TO_FSB
(
cur
->
bc_mp
, 
	`XFS_BUF_ADDR
(
bp
)), 1,

157 &
oöfo
, 
XFS_AG_RESV_NONE
);

158 
	}
}

160 
STATIC
 

161 
	$xfs_öobt_gë_maxªcs
(

162 
xfs_båì_cur
 *
cur
,

163 
Àvñ
)

165  
cur
->
bc_mp
->
m_öobt_mxr
[
Àvñ
 != 0];

166 
	}
}

168 
STATIC
 

169 
	$xfs_öobt_öô_key_‰om_ªc
(

170 
xfs_båì_key
 *
key
,

171 
xfs_båì_ªc
 *
ªc
)

173 
key
->
öobt
.
ú_°¨töo
 = 
ªc
->inobt.ir_startino;

174 
	}
}

176 
STATIC
 

177 
	$xfs_öobt_öô_ªc_‰om_cur
(

178 
xfs_båì_cur
 *
cur
,

179 
xfs_båì_ªc
 *
ªc
)

181 
ªc
->
öobt
.
ú_°¨töo
 = 
	`˝u_to_be32
(
cur
->
bc_ªc
.
i
.ir_startino);

182 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
cur
->
bc_mp
->
m_sb
)) {

183 
ªc
->
öobt
.
ú_u
.
•
.
ú_hﬁemask
 =

184 
	`˝u_to_be16
(
cur
->
bc_ªc
.
i
.
ú_hﬁemask
);

185 
ªc
->
öobt
.
ú_u
.
•
.
ú_cou¡
 = 
cur
->
bc_ªc
.
i
.ir_count;

186 
ªc
->
öobt
.
ú_u
.
•
.
ú_‰ìcou¡
 = 
cur
->
bc_ªc
.
i
.ir_freecount;

189 
ªc
->
öobt
.
ú_u
.
f
.
ú_‰ìcou¡
 =

190 
	`˝u_to_be32
(
cur
->
bc_ªc
.
i
.
ú_‰ìcou¡
);

192 
ªc
->
öobt
.
ú_‰ì
 = 
	`˝u_to_be64
(
cur
->
bc_ªc
.
i
.ir_free);

193 
	}
}

198 
STATIC
 

199 
	$xfs_öobt_öô_±r_‰om_cur
(

200 
xfs_båì_cur
 *
cur
,

201 
xfs_båì_±r
 *
±r
)

203 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
cur
->
bc_¥iv©e
.
a
.
agbp
);

205 
	`ASSERT
(
cur
->
bc_¥iv©e
.
a
.
agno
 =
	`be32_to_˝u
(
agi
->
agi_£qno
));

207 
±r
->
s
 = 
agi
->
agi_roŸ
;

208 
	}
}

210 
STATIC
 

211 
	$xfs_föobt_öô_±r_‰om_cur
(

212 
xfs_båì_cur
 *
cur
,

213 
xfs_båì_±r
 *
±r
)

215 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
cur
->
bc_¥iv©e
.
a
.
agbp
);

217 
	`ASSERT
(
cur
->
bc_¥iv©e
.
a
.
agno
 =
	`be32_to_˝u
(
agi
->
agi_£qno
));

218 
±r
->
s
 = 
agi
->
agi_‰ì_roŸ
;

219 
	}
}

221 
STATIC
 
__öt64_t


222 
	$xfs_öobt_key_diff
(

223 
xfs_båì_cur
 *
cur
,

224 
xfs_båì_key
 *
key
)

226  (
__öt64_t
)
	`be32_to_˝u
(
key
->
öobt
.
ú_°¨töo
) -

227 
cur
->
bc_ªc
.
i
.
ú_°¨töo
;

228 
	}
}

231 
	$xfs_öobt_vîify
(

232 
xfs_buf
 *
bp
)

234 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

235 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

236 
Àvñ
;

248 
block
->
bb_magic
) {

249 
	`˝u_to_be32
(
XFS_IBT_CRC_MAGIC
):

250 
	`˝u_to_be32
(
XFS_FIBT_CRC_MAGIC
):

251 i‡(!
	`xfs_båì_sblock_v5hdr_vîify
(
bp
))

252  
Ál£
;

254 
	`˝u_to_be32
(
XFS_IBT_MAGIC
):

255 
	`˝u_to_be32
(
XFS_FIBT_MAGIC
):

262 
Àvñ
 = 
	`be16_to_˝u
(
block
->
bb_Àvñ
);

263 i‡(
Àvñ
 >
mp
->
m_ö_maxÀvñs
)

264  
Ál£
;

266  
	`xfs_båì_sblock_vîify
(
bp
, 
mp
->
m_öobt_mxr
[
Àvñ
 != 0]);

267 
	}
}

270 
	$xfs_öobt_ªad_vîify
(

271 
xfs_buf
 *
bp
)

273 i‡(!
	`xfs_båì_sblock_vîify_¸c
(
bp
))

274 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

275 i‡(!
	`xfs_öobt_vîify
(
bp
))

276 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

278 i‡(
bp
->
b_îr‹
) {

279 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

280 
	`xfs_vîifõr_îr‹
(
bp
);

282 
	}
}

285 
	$xfs_öobt_wrôe_vîify
(

286 
xfs_buf
 *
bp
)

288 i‡(!
	`xfs_öobt_vîify
(
bp
)) {

289 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

290 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

291 
	`xfs_vîifõr_îr‹
(
bp
);

294 
	`xfs_båì_sblock_ˇlc_¸c
(
bp
);

296 
	}
}

298 c⁄° 
xfs_buf_›s
 
	gxfs_öobt_buf_›s
 = {

299 .
«me
 = "xfs_inobt",

300 .
	gvîify_ªad
 = 
xfs_öobt_ªad_vîify
,

301 .
	gvîify_wrôe
 = 
xfs_öobt_wrôe_vîify
,

304 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

305 
STATIC
 

306 
	$xfs_öobt_keys_ö‹dî
(

307 
xfs_båì_cur
 *
cur
,

308 
xfs_båì_key
 *
k1
,

309 
xfs_båì_key
 *
k2
)

311  
	`be32_to_˝u
(
k1
->
öobt
.
ú_°¨töo
) <

312 
	`be32_to_˝u
(
k2
->
öobt
.
ú_°¨töo
);

313 
	}
}

315 
STATIC
 

316 
	$xfs_öobt_ªcs_ö‹dî
(

317 
xfs_båì_cur
 *
cur
,

318 
xfs_båì_ªc
 *
r1
,

319 
xfs_båì_ªc
 *
r2
)

321  
	`be32_to_˝u
(
r1
->
öobt
.
ú_°¨töo
Ë+ 
XFS_INODES_PER_CHUNK
 <=

322 
	`be32_to_˝u
(
r2
->
öobt
.
ú_°¨töo
);

323 
	}
}

326 c⁄° 
xfs_båì_›s
 
	gxfs_öobt_›s
 = {

327 .
ªc_Àn
 = (
xfs_öobt_ªc_t
),

328 .
	gkey_Àn
 = (
xfs_öobt_key_t
),

330 .
	gdup_curs‹
 = 
xfs_öobt_dup_curs‹
,

331 .
	g£t_roŸ
 = 
xfs_öobt_£t_roŸ
,

332 .
	gÆloc_block
 = 
xfs_öobt_Æloc_block
,

333 .
	g‰ì_block
 = 
xfs_öobt_‰ì_block
,

334 .
	ggë_möªcs
 = 
xfs_öobt_gë_möªcs
,

335 .
	ggë_maxªcs
 = 
xfs_öobt_gë_maxªcs
,

336 .
	göô_key_‰om_ªc
 = 
xfs_öobt_öô_key_‰om_ªc
,

337 .
	göô_ªc_‰om_cur
 = 
xfs_öobt_öô_ªc_‰om_cur
,

338 .
	göô_±r_‰om_cur
 = 
xfs_öobt_öô_±r_‰om_cur
,

339 .
	gkey_diff
 = 
xfs_öobt_key_diff
,

340 .
	gbuf_›s
 = &
xfs_öobt_buf_›s
,

341 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

342 .
	gkeys_ö‹dî
 = 
xfs_öobt_keys_ö‹dî
,

343 .
	gªcs_ö‹dî
 = 
xfs_öobt_ªcs_ö‹dî
,

347 c⁄° 
xfs_båì_›s
 
	gxfs_föobt_›s
 = {

348 .
ªc_Àn
 = (
xfs_öobt_ªc_t
),

349 .
	gkey_Àn
 = (
xfs_öobt_key_t
),

351 .
	gdup_curs‹
 = 
xfs_öobt_dup_curs‹
,

352 .
	g£t_roŸ
 = 
xfs_föobt_£t_roŸ
,

353 .
	gÆloc_block
 = 
xfs_föobt_Æloc_block
,

354 .
	g‰ì_block
 = 
xfs_öobt_‰ì_block
,

355 .
	ggë_möªcs
 = 
xfs_öobt_gë_möªcs
,

356 .
	ggë_maxªcs
 = 
xfs_öobt_gë_maxªcs
,

357 .
	göô_key_‰om_ªc
 = 
xfs_öobt_öô_key_‰om_ªc
,

358 .
	göô_ªc_‰om_cur
 = 
xfs_öobt_öô_ªc_‰om_cur
,

359 .
	göô_±r_‰om_cur
 = 
xfs_föobt_öô_±r_‰om_cur
,

360 .
	gkey_diff
 = 
xfs_öobt_key_diff
,

361 .
	gbuf_›s
 = &
xfs_öobt_buf_›s
,

362 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

363 .
	gkeys_ö‹dî
 = 
xfs_öobt_keys_ö‹dî
,

364 .
	gªcs_ö‹dî
 = 
xfs_öobt_ªcs_ö‹dî
,

371 
xfs_båì_cur
 *

372 
	$xfs_öobt_öô_curs‹
(

373 
xfs_mou¡
 *
mp
,

374 
xfs_å™s
 *
ç
,

375 
xfs_buf
 *
agbp
,

376 
xfs_agnumbî_t
 
agno
,

377 
xfs_bäum_t
 
bäum
)

379 
xfs_agi
 *
agi
 = 
	`XFS_BUF_TO_AGI
(
agbp
);

380 
xfs_båì_cur
 *
cur
;

382 
cur
 = 
	`kmem_z⁄e_zÆloc
(
xfs_båì_cur_z⁄e
, 
KM_NOFS
);

384 
cur
->
bc_ç
 = 
ç
;

385 
cur
->
bc_mp
 = 
mp
;

386 
cur
->
bc_bäum
 = 
bäum
;

387 i‡(
bäum
 =
XFS_BTNUM_INO
) {

388 
cur
->
bc_∆evñs
 = 
	`be32_to_˝u
(
agi
->
agi_Àvñ
);

389 
cur
->
bc_›s
 = &
xfs_öobt_›s
;

390 
cur
->
bc_°©off
 = 
	`XFS_STATS_CALC_INDEX
(
xs_ibt_2
);

392 
cur
->
bc_∆evñs
 = 
	`be32_to_˝u
(
agi
->
agi_‰ì_Àvñ
);

393 
cur
->
bc_›s
 = &
xfs_föobt_›s
;

394 
cur
->
bc_°©off
 = 
	`XFS_STATS_CALC_INDEX
(
xs_fibt_2
);

397 
cur
->
bc_blocklog
 = 
mp
->
m_sb
.
sb_blocklog
;

399 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

400 
cur
->
bc_Êags
 |
XFS_BTREE_CRC_BLOCKS
;

402 
cur
->
bc_¥iv©e
.
a
.
agbp
 =ágbp;

403 
cur
->
bc_¥iv©e
.
a
.
agno
 =ágno;

405  
cur
;

406 
	}
}

412 
	$xfs_öobt_maxªcs
(

413 
xfs_mou¡
 *
mp
,

414 
blockÀn
,

415 
Àaf
)

417 
blockÀn
 -
	`XFS_INOBT_BLOCK_LEN
(
mp
);

419 i‡(
Àaf
)

420  
blockÀn
 / (
xfs_öobt_ªc_t
);

421  
blockÀn
 / ((
xfs_öobt_key_t
Ë+ (
xfs_öobt_±r_t
));

422 
	}
}

432 
uöt64_t


433 
	$xfs_öobt_úec_to_Ælocmask
(

434 
xfs_öobt_ªc_öc‹e
 *
ªc
)

436 
uöt64_t
 
bôm≠
 = 0;

437 
uöt64_t
 
öode•bô
;

438 
√xtbô
;

439 
uöt
 
Ælocbôm≠
;

446 
öode•bô
 = (1 << 
XFS_INODES_PER_HOLEMASK_BIT
) - 1;

454 
Ælocbôm≠
 = ~
ªc
->
ú_hﬁemask
 & ((1 << 
XFS_INOBT_HOLEMASK_BITS
) - 1);

462 
√xtbô
 = 
	`xfs_√xt_bô
(&
Ælocbôm≠
, 1, 0);

463 
√xtbô
 != -1) {

464 
	`ASSERT
(
√xtbô
 < ((
ªc
->
ú_hﬁemask
Ë* 
NBBY
));

466 
bôm≠
 |(
öode•bô
 <<

467 (
√xtbô
 * 
XFS_INODES_PER_HOLEMASK_BIT
));

469 
√xtbô
 = 
	`xfs_√xt_bô
(&
Ælocbôm≠
, 1,Çextbit + 1);

472  
bôm≠
;

473 
	}
}

475 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

480 
	$xfs_öobt_ªc_check_cou¡
(

481 
xfs_mou¡
 *
mp
,

482 
xfs_öobt_ªc_öc‹e
 *
ªc
)

484 
öocou¡
 = 0;

485 
√xtbô
 = 0;

486 
uöt64_t
 
Ælocbm≠
;

487 
w‹dsz
;

489 
w‹dsz
 = (
Ælocbm≠
) / ();

490 
Ælocbm≠
 = 
	`xfs_öobt_úec_to_Ælocmask
(
ªc
);

492 
√xtbô
 = 
	`xfs_√xt_bô
((
uöt
 *Ë&
Ælocbm≠
, 
w‹dsz
,Çextbit);

493 
√xtbô
 != -1) {

494 
öocou¡
++;

495 
√xtbô
 = 
	`xfs_√xt_bô
((
uöt
 *Ë&
Ælocbm≠
, 
w‹dsz
,

496 
√xtbô
 + 1);

499 i‡(
öocou¡
 !
ªc
->
ú_cou¡
)

500  -
EFSCORRUPTED
;

503 
	}
}

506 
xfs_exéí_t


507 
	$xfs_öobt_max_size
(

508 
xfs_mou¡
 *
mp
)

511 i‡(
mp
->
m_öobt_mxr
[0] == 0)

514  
	`xfs_båì_ˇlc_size
(
mp
, mp->
m_öobt_mƒ
,

515 (
uöt64_t
)
mp
->
m_sb
.
sb_agblocks
 * mp->m_sb.
sb_ö›block
 /

516 
XFS_INODES_PER_CHUNK
);

517 
	}
}

520 
	$xfs_öobt_cou¡_blocks
(

521 
xfs_mou¡
 *
mp
,

522 
xfs_agnumbî_t
 
agno
,

523 
xfs_bäum_t
 
bäum
,

524 
xfs_exéí_t
 *
åì_blocks
)

526 
xfs_buf
 *
agbp
;

527 
xfs_båì_cur
 *
cur
;

528 
îr‹
;

530 
îr‹
 = 
	`xfs_üŒoc_ªad_agi
(
mp
, 
NULL
, 
agno
, &
agbp
);

531 i‡(
îr‹
)

532  
îr‹
;

534 
cur
 = 
	`xfs_öobt_öô_curs‹
(
mp
, 
NULL
, 
agbp
, 
agno
, 
bäum
);

535 
îr‹
 = 
	`xfs_båì_cou¡_blocks
(
cur
, 
åì_blocks
);

536 
	`xfs_båì_dñ_curs‹
(
cur
, 
îr‹
 ? 
XFS_BTREE_ERROR
 : 
XFS_BTREE_NOERROR
);

537 
	`xfs_buf_ªl£
(
agbp
);

539  
îr‹
;

540 
	}
}

546 
	$xfs_föobt_ˇlc_ª£rves
(

547 
xfs_mou¡
 *
mp
,

548 
xfs_agnumbî_t
 
agno
,

549 
xfs_exéí_t
 *
ask
,

550 
xfs_exéí_t
 *
u£d
)

552 
xfs_exéí_t
 
åì_Àn
 = 0;

553 
îr‹
;

555 i‡(!
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
))

558 
îr‹
 = 
	`xfs_öobt_cou¡_blocks
(
mp
, 
agno
, 
XFS_BTNUM_FINO
, &
åì_Àn
);

559 i‡(
îr‹
)

560  
îr‹
;

562 *
ask
 +
	`xfs_öobt_max_size
(
mp
);

563 *
u£d
 +
åì_Àn
;

565 
	}
}

	@libxfs/xfs_ialloc_btree.h

18 #i‚de‡
__XFS_IALLOC_BTREE_H__


19 
	#__XFS_IALLOC_BTREE_H__


	)

25 
	gxfs_buf
;

26 
	gxfs_båì_cur
;

27 
	gxfs_mou¡
;

32 
	#XFS_INOBT_BLOCK_LEN
(
mp
) \

33 (
	`xfs_sb_vîsi⁄_has¸c
(&((
mp
)->
m_sb
)) ? \

34 
XFS_BTREE_SBLOCK_CRC_LEN
 : 
XFS_BTREE_SBLOCK_LEN
)

	)

41 
	#XFS_INOBT_REC_ADDR
(
mp
, 
block
, 
ödex
) \

42 ((
xfs_öobt_ªc_t
 *) \

43 ((*)(
block
) + \

44 
	`XFS_INOBT_BLOCK_LEN
(
mp
) + \

45 (((
ödex
Ë- 1Ë* (
xfs_öobt_ªc_t
))))

	)

47 
	#XFS_INOBT_KEY_ADDR
(
mp
, 
block
, 
ödex
) \

48 ((
xfs_öobt_key_t
 *) \

49 ((*)(
block
) + \

50 
	`XFS_INOBT_BLOCK_LEN
(
mp
) + \

51 ((
ödex
Ë- 1Ë* (
xfs_öobt_key_t
)))

	)

53 
	#XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 
ödex
, 
maxªcs
) \

54 ((
xfs_öobt_±r_t
 *) \

55 ((*)(
block
) + \

56 
	`XFS_INOBT_BLOCK_LEN
(
mp
) + \

57 (
maxªcs
Ë* (
xfs_öobt_key_t
) + \

58 ((
ödex
Ë- 1Ë* (
xfs_öobt_±r_t
)))

	)

60 
xfs_båì_cur
 *
xfs_öobt_öô_curs‹
(
xfs_mou¡
 *,

61 
xfs_å™s
 *, 
xfs_buf
 *, 
xfs_agnumbî_t
,

62 
xfs_bäum_t
);

63 
xfs_öobt_maxªcs
(
xfs_mou¡
 *, , );

66 
uöt64_t
 
xfs_öobt_úec_to_Ælocmask
(
xfs_öobt_ªc_öc‹e
 *);

68 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

69 
xfs_öobt_ªc_check_cou¡
(
xfs_mou¡
 *,

70 
xfs_öobt_ªc_öc‹e
 *);

72 
	#xfs_öobt_ªc_check_cou¡
(
mp
, 
ªc
Ë0

	)

75 
xfs_föobt_ˇlc_ª£rves
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
,

76 
xfs_exéí_t
 *
ask
, xfs_exéí_à*
u£d
);

	@libxfs/xfs_inode_buf.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_mou¡.h
"

25 
	~"xfs_de„r.h
"

26 
	~"xfs_öode.h
"

27 
	~"xfs_cksum.h
"

28 
	~"xfs_å™s.h
"

29 
	~"xfs_üŒoc.h
"

30 
	~"xfs_dú2.h
"

36 #i‡
deföed
(
DEBUG
)

38 
	$xfs_öobp_check
(

39 
xfs_mou¡_t
 *
mp
,

40 
xfs_buf_t
 *
bp
)

42 
i
;

43 
j
;

44 
xfs_döode_t
 *
dù
;

46 
j
 = 
mp
->
m_öode_˛u°î_size
 >> mp->
m_sb
.
sb_öodñog
;

48 
i
 = 0; i < 
j
; i++) {

49 
dù
 = 
	`xfs_buf_off£t
(
bp
, 
i
 * 
mp
->
m_sb
.
sb_öodesize
);

50 i‡(!
dù
->
di_√xt_u∆öked
) {

51 
	`xfs_Æît
(
mp
,

53 
i
, ()
bp
->
b_bn
);

56 
	}
}

59 
boﬁ


60 
	$xfs_döode_good_vîsi⁄
(

61 
xfs_mou¡
 *
mp
,

62 
__u8
 
vîsi⁄
)

64 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

65  
vîsi⁄
 == 3;

67  
vîsi⁄
 == 1 || version == 2;

68 
	}
}

86 
	$xfs_öode_buf_vîify
(

87 
xfs_buf
 *
bp
,

88 
boﬁ
 
ªadahód
)

90 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

91 
i
;

92 
ni
;

97 
ni
 = 
	`XFS_BB_TO_FSB
(
mp
, 
bp
->
b_Àngth
Ë* mp->
m_sb
.
sb_ö›block
;

98 
i
 = 0; i < 
ni
; i++) {

99 
di_ok
;

100 
xfs_döode_t
 *
dù
;

102 
dù
 = 
	`xfs_buf_off£t
(
bp
, (
i
 << 
mp
->
m_sb
.
sb_öodñog
));

103 
di_ok
 = 
dù
->
di_magic
 =
	`˝u_to_be16
(
XFS_DINODE_MAGIC
) &&

104 
	`xfs_döode_good_vîsi⁄
(
mp
, 
dù
->
di_vîsi⁄
);

105 i‡(
	`u∆ikñy
(
	`XFS_TEST_ERROR
(!
di_ok
, 
mp
,

106 
XFS_ERRTAG_ITOBP_INOTOBP
,

107 
XFS_RANDOM_ITOBP_INOTOBP
))) {

108 i‡(
ªadahód
) {

109 
bp
->
b_Êags
 &~
XBF_DONE
;

110 
	`xfs_buf_i€º‹
(
bp
, -
EIO
);

114 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

115 
	`xfs_vîifõr_îr‹
(
bp
);

116 #ifde‡
DEBUG


117 
	`xfs_Æît
(
mp
,

119 ()
bp
->
b_bn
, 
i
,

120 
	`be16_to_˝u
(
dù
->
di_magic
));

124 
	`xfs_öobp_check
(
mp
, 
bp
);

125 
	}
}

129 
	$xfs_öode_buf_ªad_vîify
(

130 
xfs_buf
 *
bp
)

132 
	`xfs_öode_buf_vîify
(
bp
, 
Ál£
);

133 
	}
}

136 
	$xfs_öode_buf_ªadahód_vîify
(

137 
xfs_buf
 *
bp
)

139 
	`xfs_öode_buf_vîify
(
bp
, 
åue
);

140 
	}
}

143 
	$xfs_öode_buf_wrôe_vîify
(

144 
xfs_buf
 *
bp
)

146 
	`xfs_öode_buf_vîify
(
bp
, 
Ál£
);

147 
	}
}

149 c⁄° 
xfs_buf_›s
 
	gxfs_öode_buf_›s
 = {

150 .
«me
 = "xfs_inode",

151 .
	gvîify_ªad
 = 
xfs_öode_buf_ªad_vîify
,

152 .
	gvîify_wrôe
 = 
xfs_öode_buf_wrôe_vîify
,

155 c⁄° 
xfs_buf_›s
 
	gxfs_öode_buf_ø_›s
 = {

156 .
«me
 = "xxfs_inode_ra",

157 .
	gvîify_ªad
 = 
xfs_öode_buf_ªadahód_vîify
,

158 .
	gvîify_wrôe
 = 
xfs_öode_buf_wrôe_vîify
,

172 
	$xfs_im≠_to_bp
(

173 
xfs_mou¡
 *
mp
,

174 
xfs_å™s
 *
ç
,

175 
xfs_im≠
 *
im≠
,

176 
xfs_döode
 **
dùp
,

177 
xfs_buf
 **
bµ
,

178 
uöt
 
buf_Êags
,

179 
uöt
 
igë_Êags
)

181 
xfs_buf
 *
bp
;

182 
îr‹
;

184 
buf_Êags
 |
XBF_UNMAPPED
;

185 
îr‹
 = 
	`xfs_å™s_ªad_buf
(
mp
, 
ç
, mp->
m_ddev_èrgp
, 
im≠
->
im_blkno
,

186 ()
im≠
->
im_Àn
, 
buf_Êags
, &
bp
,

187 &
xfs_öode_buf_›s
);

188 i‡(
îr‹
) {

189 i‡(
îr‹
 =-
EAGAIN
) {

190 
	`ASSERT
(
buf_Êags
 & 
XBF_TRYLOCK
);

191  
îr‹
;

194 i‡(
îr‹
 =-
EFSCORRUPTED
 &&

195 (
igë_Êags
 & 
XFS_IGET_UNTRUSTED
))

196  -
EINVAL
;

198 
	`xfs_w¨n
(
mp
, "%s: xfs_trans_read_buf()ÑeturnedÉrror %d.",

199 
__func__
, 
îr‹
);

200  
îr‹
;

203 *
bµ
 = 
bp
;

204 *
dùp
 = 
	`xfs_buf_off£t
(
bp
, 
im≠
->
im_boff£t
);

206 
	}
}

209 
	$xfs_öode_‰om_disk
(

210 
xfs_öode
 *
ù
,

211 
xfs_döode
 *
‰om
)

213 
xfs_icdöode
 *
to
 = &
ù
->
i_d
;

214 
öode
 *öodê
	`VFS_I
(
ù
);

221 
to
->
di_vîsi⁄
 = 
‰om
->di_version;

222 i‡(
to
->
di_vîsi⁄
 == 1) {

223 
	`£t_∆ök
(
öode
, 
	`be16_to_˝u
(
‰om
->
di_⁄lök
));

224 
to
->
di_¥ojid_lo
 = 0;

225 
to
->
di_¥ojid_hi
 = 0;

226 
to
->
di_vîsi⁄
 = 2;

228 
	`£t_∆ök
(
öode
, 
	`be32_to_˝u
(
‰om
->
di_∆ök
));

229 
to
->
di_¥ojid_lo
 = 
	`be16_to_˝u
(
‰om
->di_projid_lo);

230 
to
->
di_¥ojid_hi
 = 
	`be16_to_˝u
(
‰om
->di_projid_hi);

233 
to
->
di_f‹m©
 = 
‰om
->di_format;

234 
to
->
di_uid
 = 
	`be32_to_˝u
(
‰om
->di_uid);

235 
to
->
di_gid
 = 
	`be32_to_˝u
(
‰om
->di_gid);

236 
to
->
di_Êushôî
 = 
	`be16_to_˝u
(
‰om
->di_flushiter);

244 
öode
->
i_©ime
.
tv_£c
 = ()
	`be32_to_˝u
(
‰om
->
di_©ime
.
t_£c
);

245 
öode
->
i_©ime
.
tv_n£c
 = ()
	`be32_to_˝u
(
‰om
->
di_©ime
.
t_n£c
);

246 
öode
->
i_mtime
.
tv_£c
 = ()
	`be32_to_˝u
(
‰om
->
di_mtime
.
t_£c
);

247 
öode
->
i_mtime
.
tv_n£c
 = ()
	`be32_to_˝u
(
‰om
->
di_mtime
.
t_n£c
);

248 
öode
->
i_˘ime
.
tv_£c
 = ()
	`be32_to_˝u
(
‰om
->
di_˘ime
.
t_£c
);

249 
öode
->
i_˘ime
.
tv_n£c
 = ()
	`be32_to_˝u
(
‰om
->
di_˘ime
.
t_n£c
);

250 
öode
->
i_gíî©i⁄
 = 
	`be32_to_˝u
(
‰om
->
di_gí
);

251 
öode
->
i_mode
 = 
	`be16_to_˝u
(
‰om
->
di_mode
);

253 
to
->
di_size
 = 
	`be64_to_˝u
(
‰om
->di_size);

254 
to
->
di_nblocks
 = 
	`be64_to_˝u
(
‰om
->di_nblocks);

255 
to
->
di_extsize
 = 
	`be32_to_˝u
(
‰om
->di_extsize);

256 
to
->
di_√xã¡s
 = 
	`be32_to_˝u
(
‰om
->di_nextents);

257 
to
->
di_™exã¡s
 = 
	`be16_to_˝u
(
‰om
->di_anextents);

258 
to
->
di_f‹koff
 = 
‰om
->di_forkoff;

259 
to
->
di_af‹m©
 = 
‰om
->di_aformat;

260 
to
->
di_dmevmask
 = 
	`be32_to_˝u
(
‰om
->di_dmevmask);

261 
to
->
di_dm°©e
 = 
	`be16_to_˝u
(
‰om
->di_dmstate);

262 
to
->
di_Êags
 = 
	`be16_to_˝u
(
‰om
->di_flags);

264 i‡(
to
->
di_vîsi⁄
 == 3) {

265 
öode
->
i_vîsi⁄
 = 
	`be64_to_˝u
(
‰om
->
di_ch™gecou¡
);

266 
to
->
di_¸time
.
t_£c
 = 
	`be32_to_˝u
(
‰om
->di_crtime.t_sec);

267 
to
->
di_¸time
.
t_n£c
 = 
	`be32_to_˝u
(
‰om
->di_crtime.t_nsec);

268 
to
->
di_Êags2
 = 
	`be64_to_˝u
(
‰om
->di_flags2);

269 
to
->
di_cowextsize
 = 
	`be32_to_˝u
(
‰om
->di_cowextsize);

271 
	}
}

274 
	$xfs_öode_to_disk
(

275 
xfs_öode
 *
ù
,

276 
xfs_döode
 *
to
,

277 
xfs_l¢_t
 
l¢
)

279 
xfs_icdöode
 *
‰om
 = &
ù
->
i_d
;

280 
öode
 *öodê
	`VFS_I
(
ù
);

282 
to
->
di_magic
 = 
	`˝u_to_be16
(
XFS_DINODE_MAGIC
);

283 
to
->
di_⁄lök
 = 0;

285 
to
->
di_vîsi⁄
 = 
‰om
->di_version;

286 
to
->
di_f‹m©
 = 
‰om
->di_format;

287 
to
->
di_uid
 = 
	`˝u_to_be32
(
‰om
->di_uid);

288 
to
->
di_gid
 = 
	`˝u_to_be32
(
‰om
->di_gid);

289 
to
->
di_¥ojid_lo
 = 
	`˝u_to_be16
(
‰om
->di_projid_lo);

290 
to
->
di_¥ojid_hi
 = 
	`˝u_to_be16
(
‰om
->di_projid_hi);

292 
	`mem£t
(
to
->
di_∑d
, 0, (to->di_pad));

293 
to
->
di_©ime
.
t_£c
 = 
	`˝u_to_be32
(
öode
->
i_©ime
.
tv_£c
);

294 
to
->
di_©ime
.
t_n£c
 = 
	`˝u_to_be32
(
öode
->
i_©ime
.
tv_n£c
);

295 
to
->
di_mtime
.
t_£c
 = 
	`˝u_to_be32
(
öode
->
i_mtime
.
tv_£c
);

296 
to
->
di_mtime
.
t_n£c
 = 
	`˝u_to_be32
(
öode
->
i_mtime
.
tv_n£c
);

297 
to
->
di_˘ime
.
t_£c
 = 
	`˝u_to_be32
(
öode
->
i_˘ime
.
tv_£c
);

298 
to
->
di_˘ime
.
t_n£c
 = 
	`˝u_to_be32
(
öode
->
i_˘ime
.
tv_n£c
);

299 
to
->
di_∆ök
 = 
	`˝u_to_be32
(
öode
->
i_∆ök
);

300 
to
->
di_gí
 = 
	`˝u_to_be32
(
öode
->
i_gíî©i⁄
);

301 
to
->
di_mode
 = 
	`˝u_to_be16
(
öode
->
i_mode
);

303 
to
->
di_size
 = 
	`˝u_to_be64
(
‰om
->di_size);

304 
to
->
di_nblocks
 = 
	`˝u_to_be64
(
‰om
->di_nblocks);

305 
to
->
di_extsize
 = 
	`˝u_to_be32
(
‰om
->di_extsize);

306 
to
->
di_√xã¡s
 = 
	`˝u_to_be32
(
‰om
->di_nextents);

307 
to
->
di_™exã¡s
 = 
	`˝u_to_be16
(
‰om
->di_anextents);

308 
to
->
di_f‹koff
 = 
‰om
->di_forkoff;

309 
to
->
di_af‹m©
 = 
‰om
->di_aformat;

310 
to
->
di_dmevmask
 = 
	`˝u_to_be32
(
‰om
->di_dmevmask);

311 
to
->
di_dm°©e
 = 
	`˝u_to_be16
(
‰om
->di_dmstate);

312 
to
->
di_Êags
 = 
	`˝u_to_be16
(
‰om
->di_flags);

314 i‡(
‰om
->
di_vîsi⁄
 == 3) {

315 
to
->
di_ch™gecou¡
 = 
	`˝u_to_be64
(
öode
->
i_vîsi⁄
);

316 
to
->
di_¸time
.
t_£c
 = 
	`˝u_to_be32
(
‰om
->di_crtime.t_sec);

317 
to
->
di_¸time
.
t_n£c
 = 
	`˝u_to_be32
(
‰om
->di_crtime.t_nsec);

318 
to
->
di_Êags2
 = 
	`˝u_to_be64
(
‰om
->di_flags2);

319 
to
->
di_cowextsize
 = 
	`˝u_to_be32
(
‰om
->di_cowextsize);

320 
to
->
di_öo
 = 
	`˝u_to_be64
(
ù
->
i_öo
);

321 
to
->
di_l¢
 = 
	`˝u_to_be64
(
l¢
);

322 
	`mem£t
(
to
->
di_∑d2
, 0, (to->di_pad2));

323 
	`uuid_c›y
(&
to
->
di_uuid
, &
ù
->
i_mou¡
->
m_sb
.
sb_mëa_uuid
);

324 
to
->
di_Êushôî
 = 0;

326 
to
->
di_Êushôî
 = 
	`˝u_to_be16
(
‰om
->di_flushiter);

328 
	}
}

331 
	$xfs_log_döode_to_disk
(

332 
xfs_log_döode
 *
‰om
,

333 
xfs_döode
 *
to
)

335 
to
->
di_magic
 = 
	`˝u_to_be16
(
‰om
->di_magic);

336 
to
->
di_mode
 = 
	`˝u_to_be16
(
‰om
->di_mode);

337 
to
->
di_vîsi⁄
 = 
‰om
->di_version;

338 
to
->
di_f‹m©
 = 
‰om
->di_format;

339 
to
->
di_⁄lök
 = 0;

340 
to
->
di_uid
 = 
	`˝u_to_be32
(
‰om
->di_uid);

341 
to
->
di_gid
 = 
	`˝u_to_be32
(
‰om
->di_gid);

342 
to
->
di_∆ök
 = 
	`˝u_to_be32
(
‰om
->di_nlink);

343 
to
->
di_¥ojid_lo
 = 
	`˝u_to_be16
(
‰om
->di_projid_lo);

344 
to
->
di_¥ojid_hi
 = 
	`˝u_to_be16
(
‰om
->di_projid_hi);

345 
	`mem˝y
(
to
->
di_∑d
, 
‰om
->di_pad, (to->di_pad));

347 
to
->
di_©ime
.
t_£c
 = 
	`˝u_to_be32
(
‰om
->di_atime.t_sec);

348 
to
->
di_©ime
.
t_n£c
 = 
	`˝u_to_be32
(
‰om
->di_atime.t_nsec);

349 
to
->
di_mtime
.
t_£c
 = 
	`˝u_to_be32
(
‰om
->di_mtime.t_sec);

350 
to
->
di_mtime
.
t_n£c
 = 
	`˝u_to_be32
(
‰om
->di_mtime.t_nsec);

351 
to
->
di_˘ime
.
t_£c
 = 
	`˝u_to_be32
(
‰om
->di_ctime.t_sec);

352 
to
->
di_˘ime
.
t_n£c
 = 
	`˝u_to_be32
(
‰om
->di_ctime.t_nsec);

354 
to
->
di_size
 = 
	`˝u_to_be64
(
‰om
->di_size);

355 
to
->
di_nblocks
 = 
	`˝u_to_be64
(
‰om
->di_nblocks);

356 
to
->
di_extsize
 = 
	`˝u_to_be32
(
‰om
->di_extsize);

357 
to
->
di_√xã¡s
 = 
	`˝u_to_be32
(
‰om
->di_nextents);

358 
to
->
di_™exã¡s
 = 
	`˝u_to_be16
(
‰om
->di_anextents);

359 
to
->
di_f‹koff
 = 
‰om
->di_forkoff;

360 
to
->
di_af‹m©
 = 
‰om
->di_aformat;

361 
to
->
di_dmevmask
 = 
	`˝u_to_be32
(
‰om
->di_dmevmask);

362 
to
->
di_dm°©e
 = 
	`˝u_to_be16
(
‰om
->di_dmstate);

363 
to
->
di_Êags
 = 
	`˝u_to_be16
(
‰om
->di_flags);

364 
to
->
di_gí
 = 
	`˝u_to_be32
(
‰om
->di_gen);

366 i‡(
‰om
->
di_vîsi⁄
 == 3) {

367 
to
->
di_ch™gecou¡
 = 
	`˝u_to_be64
(
‰om
->di_changecount);

368 
to
->
di_¸time
.
t_£c
 = 
	`˝u_to_be32
(
‰om
->di_crtime.t_sec);

369 
to
->
di_¸time
.
t_n£c
 = 
	`˝u_to_be32
(
‰om
->di_crtime.t_nsec);

370 
to
->
di_Êags2
 = 
	`˝u_to_be64
(
‰om
->di_flags2);

371 
to
->
di_cowextsize
 = 
	`˝u_to_be32
(
‰om
->di_cowextsize);

372 
to
->
di_öo
 = 
	`˝u_to_be64
(
‰om
->di_ino);

373 
to
->
di_l¢
 = 
	`˝u_to_be64
(
‰om
->di_lsn);

374 
	`mem˝y
(
to
->
di_∑d2
, 
‰om
->di_pad2, (to->di_pad2));

375 
	`uuid_c›y
(&
to
->
di_uuid
, &
‰om
->di_uuid);

376 
to
->
di_Êushôî
 = 0;

378 
to
->
di_Êushôî
 = 
	`˝u_to_be16
(
‰om
->di_flushiter);

380 
	}
}

382 
boﬁ


383 
	$xfs_döode_vîify
(

384 
xfs_mou¡
 *
mp
,

385 
xfs_öo_t
 
öo
,

386 
xfs_döode
 *
dù
)

388 
uöt16_t
 
mode
;

389 
uöt16_t
 
Êags
;

390 
uöt64_t
 
Êags2
;

392 i‡(
dù
->
di_magic
 !
	`˝u_to_be16
(
XFS_DINODE_MAGIC
))

393  
Ál£
;

396 i‡(
	`be64_to_˝u
(
dù
->
di_size
) & (1ULL << 63))

397  
Ál£
;

399 
mode
 = 
	`be16_to_˝u
(
dù
->
di_mode
);

400 i‡(
mode
 && 
	`xfs_mode_to_·y≥
(modeË=
XFS_DIR3_FT_UNKNOWN
)

401  
Ál£
;

404 i‡((
	`S_ISLNK
(
mode
Ë|| 
	`S_ISDIR
(mode)Ë&& 
dù
->
di_size
 == 0)

405  
Ál£
;

408 i‡(
dù
->
di_vîsi⁄
 < 3)

409  
åue
;

411 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

412  
Ál£
;

413 i‡(!
	`xfs_vîify_cksum
((*)
dù
, 
mp
->
m_sb
.
sb_öodesize
,

414 
XFS_DINODE_CRC_OFF
))

415  
Ál£
;

416 i‡(
	`be64_to_˝u
(
dù
->
di_öo
Ë!
öo
)

417  
Ál£
;

418 i‡(!
	`uuid_equÆ
(&
dù
->
di_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

419  
Ál£
;

421 
Êags
 = 
	`be16_to_˝u
(
dù
->
di_Êags
);

422 
Êags2
 = 
	`be64_to_˝u
(
dù
->
di_Êags2
);

425 i‡((
Êags2
 & (
XFS_DIFLAG2_REFLINK
 | 
XFS_DIFLAG2_COWEXTSIZE
)) &&

426 !
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

427  
Ál£
;

430 i‡((
Êags2
 & 
XFS_DIFLAG2_REFLINK
Ë&& (
Êags
 & 
XFS_DIFLAG_REALTIME
))

431  
Ál£
;

434 i‡((
Êags2
 & 
XFS_DIFLAG2_REFLINK
Ë&& (Êags2 & 
XFS_DIFLAG2_DAX
))

435  
Ál£
;

437  
åue
;

438 
	}
}

441 
	$xfs_döode_ˇlc_¸c
(

442 
xfs_mou¡
 *
mp
,

443 
xfs_döode
 *
dù
)

445 
__uöt32_t
 
¸c
;

447 i‡(
dù
->
di_vîsi⁄
 < 3)

450 
	`ASSERT
(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
));

451 
¸c
 = 
	`xfs_°¨t_cksum_upd©e
((*)
dù
, 
mp
->
m_sb
.
sb_öodesize
,

452 
XFS_DINODE_CRC_OFF
);

453 
dù
->
di_¸c
 = 
	`xfs_íd_cksum
(
¸c
);

454 
	}
}

469 
	$xfs_úód
(

470 
xfs_mou¡_t
 *
mp
,

471 
xfs_å™s_t
 *
ç
,

472 
xfs_öode_t
 *
ù
,

473 
uöt
 
igë_Êags
)

475 
xfs_buf_t
 *
bp
;

476 
xfs_döode_t
 *
dù
;

477 
îr‹
;

482 
îr‹
 = 
	`xfs_im≠
(
mp
, 
ç
, 
ù
->
i_öo
, &ù->
i_im≠
, 
igë_Êags
);

483 i‡(
îr‹
)

484  
îr‹
;

487 i‡((
igë_Êags
 & 
XFS_IGET_CREATE
) &&

488 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

489 !(
mp
->
m_Êags
 & 
XFS_MOUNT_IKEEP
)) {

491 
	`mem£t
(&
ù
->
i_d
, 0, (ip->i_d));

492 
	`VFS_I
(
ù
)->
i_gíî©i⁄
 = 
	`¥™dom_u32
();

493 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

494 
ù
->
i_d
.
di_vîsi⁄
 = 3;

496 
ù
->
i_d
.
di_vîsi⁄
 = 2;

503 
îr‹
 = 
	`xfs_im≠_to_bp
(
mp
, 
ç
, &
ù
->
i_im≠
, &
dù
, &
bp
, 0, 
igë_Êags
);

504 i‡(
îr‹
)

505  
îr‹
;

508 i‡(!
	`xfs_döode_vîify
(
mp
, 
ù
->
i_öo
, 
dù
)) {

509 
	`xfs_Æît
(
mp
, "%s: validation failed for inode %lld failed",

510 
__func__
, 
ù
->
i_öo
);

512 
	`XFS_CORRUPTION_ERROR
(
__func__
, 
XFS_ERRLEVEL_LOW
, 
mp
, 
dù
);

513 
îr‹
 = -
EFSCORRUPTED
;

514 
out_bªl£
;

524 i‡(
dù
->
di_mode
) {

525 
	`xfs_öode_‰om_disk
(
ù
, 
dù
);

526 
îr‹
 = 
	`xfs_if‹m©_f‹k
(
ù
, 
dù
);

527 i‡(
îr‹
) {

528 #ifde‡
DEBUG


529 
	`xfs_Æît
(
mp
, "%s: xfs_iformat()ÑeturnedÉrror %d",

530 
__func__
, 
îr‹
);

532 
out_bªl£
;

539 
ù
->
i_d
.
di_vîsi⁄
 = 
dù
->di_version;

540 
	`VFS_I
(
ù
)->
i_gíî©i⁄
 = 
	`be32_to_˝u
(
dù
->
di_gí
);

541 
ù
->
i_d
.
di_Êushôî
 = 
	`be16_to_˝u
(
dù
->di_flushiter);

550 
	`VFS_I
(
ù
)->
i_mode
 = 0;

553 
	`ASSERT
(
ù
->
i_d
.
di_vîsi⁄
 >= 2);

554 
ù
->
i_dñayed_blks
 = 0;

561 
	`xfs_buf_£t_ªf
(
bp
, 
XFS_INO_REF
);

575 
out_bªl£
:

576 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

577  
îr‹
;

578 
	}
}

	@libxfs/xfs_inode_buf.h

18 #i‚def 
__XFS_INODE_BUF_H__


19 
	#__XFS_INODE_BUF_H__


	)

21 
	gxfs_öode
;

22 
	gxfs_döode
;

30 
	sxfs_icdöode
 {

31 
__öt8_t
 
	mdi_vîsi⁄
;

32 
__öt8_t
 
	mdi_f‹m©
;

33 
__uöt16_t
 
	mdi_Êushôî
;

34 
__uöt32_t
 
	mdi_uid
;

35 
__uöt32_t
 
	mdi_gid
;

36 
__uöt16_t
 
	mdi_¥ojid_lo
;

37 
__uöt16_t
 
	mdi_¥ojid_hi
;

38 
xfs_fsize_t
 
	mdi_size
;

39 
xfs_rfsblock_t
 
	mdi_nblocks
;

40 
xfs_exéí_t
 
	mdi_extsize
;

41 
xfs_exäum_t
 
	mdi_√xã¡s
;

42 
xfs_´xäum_t
 
	mdi_™exã¡s
;

43 
__uöt8_t
 
	mdi_f‹koff
;

44 
__öt8_t
 
	mdi_af‹m©
;

45 
__uöt32_t
 
	mdi_dmevmask
;

46 
__uöt16_t
 
	mdi_dm°©e
;

47 
__uöt16_t
 
	mdi_Êags
;

49 
__uöt64_t
 
	mdi_Êags2
;

50 
__uöt32_t
 
	mdi_cowextsize
;

52 
xfs_i˘ime°amp_t
 
	mdi_¸time
;

59 
	sxfs_im≠
 {

60 
xfs_daddr_t
 
	mim_blkno
;

61 
	mim_Àn
;

62 
	mim_boff£t
;

65 
xfs_im≠_to_bp
(
xfs_mou¡
 *, 
xfs_å™s
 *,

66 
xfs_im≠
 *, 
xfs_döode
 **,

67 
xfs_buf
 **, 
uöt
, uint);

68 
xfs_úód
(
xfs_mou¡
 *, 
xfs_å™s
 *,

69 
xfs_öode
 *, 
uöt
);

70 
xfs_döode_ˇlc_¸c
(
xfs_mou¡
 *, 
xfs_döode
 *);

71 
xfs_öode_to_disk
(
xfs_öode
 *
ù
, 
xfs_döode
 *
to
,

72 
xfs_l¢_t
 
l¢
);

73 
xfs_öode_‰om_disk
(
xfs_öode
 *
ù
, 
xfs_döode
 *
‰om
);

74 
xfs_log_döode_to_disk
(
xfs_log_döode
 *
‰om
,

75 
xfs_döode
 *
to
);

77 
boﬁ
 
xfs_döode_good_vîsi⁄
(
xfs_mou¡
 *
mp
, 
__u8
 
vîsi⁄
);

79 #i‡
deföed
(
DEBUG
)

80 
xfs_öobp_check
(
xfs_mou¡
 *, 
xfs_buf
 *);

82 
	#xfs_öobp_check
(
mp
, 
bp
)

	)

	@libxfs/xfs_inode_fork.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_f‹m©.h
"

21 
	~"xfs_log_f‹m©.h
"

22 
	~"xfs_å™s_ªsv.h
"

23 
	~"xfs_mou¡.h
"

24 
	~"xfs_öode.h
"

25 
	~"xfs_å™s.h
"

26 
	~"xfs_båì.h
"

27 
	~"xfs_bm≠_båì.h
"

28 
	~"xfs_bm≠.h
"

29 
	~"xfs_åa˚.h
"

30 
	~"xfs_©å_sf.h
"

31 
	~"xfs_da_f‹m©.h
"

32 
	~"xfs_da_båì.h
"

33 
	~"xfs_dú2_¥iv.h
"

36 
kmem_z⁄e_t
 *
	gxfs_if‹k_z⁄e
;

38 
STATIC
 
xfs_if‹m©_loˇl
(
xfs_öode_t
 *, 
xfs_döode_t
 *, , );

39 
STATIC
 
xfs_if‹m©_exã¡s
(
xfs_öode_t
 *, 
xfs_döode_t
 *, );

40 
STATIC
 
xfs_if‹m©_båì
(
xfs_öode_t
 *, 
xfs_döode_t
 *, );

42 #ifde‡
DEBUG


48 
	$xfs_vÆid©e_exã¡s
(

49 
xfs_if‹k_t
 *
iÂ
,

50 
ƒecs
,

51 
xfs_ex¡fmt_t
 
fmt
)

53 
xfs_bmbt_úec_t
 
úec
;

54 
xfs_bmbt_ªc_ho°_t
 
ªc
;

55 
i
;

57 
i
 = 0; i < 
ƒecs
; i++) {

58 
xfs_bmbt_ªc_ho°_t
 *
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
i
);

59 
ªc
.
l0
 = 
	`gë_u«lig√d
(&
ï
->l0);

60 
ªc
.
l1
 = 
	`gë_u«lig√d
(&
ï
->l1);

61 
	`xfs_bmbt_gë_Æl
(&
ªc
, &
úec
);

62 i‡(
fmt
 =
XFS_EXTFMT_NOSTATE
)

63 
	`ASSERT
(
úec
.
br_°©e
 =
XFS_EXT_NORM
);

65 
	}
}

67 
	#xfs_vÆid©e_exã¡s
(
iÂ
, 
ƒecs
, 
fmt
)

	)

81 
	$xfs_if‹m©_f‹k
(

82 
xfs_öode_t
 *
ù
,

83 
xfs_döode_t
 *
dù
)

85 
xfs_©å_sh‹tf‹m_t
 *
©p
;

86 
size
;

87 
îr‹
 = 0;

88 
xfs_fsize_t
 
di_size
;

90 i‡(
	`u∆ikñy
(
	`be32_to_˝u
(
dù
->
di_√xã¡s
) +

91 
	`be16_to_˝u
(
dù
->
di_™exã¡s
) >

92 
	`be64_to_˝u
(
dù
->
di_nblocks
))) {

93 
	`xfs_w¨n
(
ù
->
i_mou¡
,

95 ()
ù
->
i_öo
,

96 ()(
	`be32_to_˝u
(
dù
->
di_√xã¡s
) +

97 
	`be16_to_˝u
(
dù
->
di_™exã¡s
)),

99 
	`be64_to_˝u
(
dù
->
di_nblocks
));

100 
	`XFS_CORRUPTION_ERROR
("xfs_if‹m©(1)", 
XFS_ERRLEVEL_LOW
,

101 
ù
->
i_mou¡
, 
dù
);

102  -
EFSCORRUPTED
;

105 i‡(
	`u∆ikñy
(
dù
->
di_f‹koff
 > 
ù
->
i_mou¡
->
m_sb
.
sb_öodesize
)) {

106 
	`xfs_w¨n
(
ù
->
i_mou¡
, "corrupt dinode %Lu, forkoff = 0x%x.",

107 ()
ù
->
i_öo
,

108 
dù
->
di_f‹koff
);

109 
	`XFS_CORRUPTION_ERROR
("xfs_if‹m©(2)", 
XFS_ERRLEVEL_LOW
,

110 
ù
->
i_mou¡
, 
dù
);

111  -
EFSCORRUPTED
;

114 i‡(
	`u∆ikñy
((
ù
->
i_d
.
di_Êags
 & 
XFS_DIFLAG_REALTIME
) &&

115 !
ù
->
i_mou¡
->
m_πdev_èrgp
)) {

116 
	`xfs_w¨n
(
ù
->
i_mou¡
,

118 
ù
->
i_öo
);

119 
	`XFS_CORRUPTION_ERROR
("xfs_iformat(realtime)",

120 
XFS_ERRLEVEL_LOW
, 
ù
->
i_mou¡
, 
dù
);

121  -
EFSCORRUPTED
;

124 i‡(
	`u∆ikñy
(
	`xfs_is_ªÊök_öode
(
ù
) &&

125 (
	`VFS_I
(
ù
)->
i_mode
 & 
S_IFMT
Ë!
S_IFREG
)) {

126 
	`xfs_w¨n
(
ù
->
i_mou¡
,

128 
ù
->
i_öo
);

129 
	`XFS_CORRUPTION_ERROR
("xfs_iformat(reflink)",

130 
XFS_ERRLEVEL_LOW
, 
ù
->
i_mou¡
, 
dù
);

131  -
EFSCORRUPTED
;

134 i‡(
	`u∆ikñy
(
	`xfs_is_ªÊök_öode
(
ù
) &&

135 (
ù
->
i_d
.
di_Êags
 & 
XFS_DIFLAG_REALTIME
))) {

136 
	`xfs_w¨n
(
ù
->
i_mou¡
,

138 
ù
->
i_öo
);

139 
	`XFS_CORRUPTION_ERROR
("xfs_iformat(reflink)",

140 
XFS_ERRLEVEL_LOW
, 
ù
->
i_mou¡
, 
dù
);

141  -
EFSCORRUPTED
;

144 
	`VFS_I
(
ù
)->
i_mode
 & 
S_IFMT
) {

145 
S_IFIFO
:

146 
S_IFCHR
:

147 
S_IFBLK
:

148 
S_IFSOCK
:

149 i‡(
	`u∆ikñy
(
dù
->
di_f‹m©
 !
XFS_DINODE_FMT_DEV
)) {

150 
	`XFS_CORRUPTION_ERROR
("xfs_if‹m©(3)", 
XFS_ERRLEVEL_LOW
,

151 
ù
->
i_mou¡
, 
dù
);

152  -
EFSCORRUPTED
;

154 
ù
->
i_d
.
di_size
 = 0;

155 
ù
->
i_df
.
if_u2
.
if_rdev
 = 
	`xfs_döode_gë_rdev
(
dù
);

158 
S_IFREG
:

159 
S_IFLNK
:

160 
S_IFDIR
:

161 
dù
->
di_f‹m©
) {

162 
XFS_DINODE_FMT_LOCAL
:

166 i‡(
	`u∆ikñy
(
	`S_ISREG
(
	`be16_to_˝u
(
dù
->
di_mode
)))) {

167 
	`xfs_w¨n
(
ù
->
i_mou¡
,

169 (Ë
ù
->
i_öo
);

170 
	`XFS_CORRUPTION_ERROR
("xfs_iformat(4)",

171 
XFS_ERRLEVEL_LOW
,

172 
ù
->
i_mou¡
, 
dù
);

173  -
EFSCORRUPTED
;

176 
di_size
 = 
	`be64_to_˝u
(
dù
->di_size);

177 i‡(
	`u∆ikñy
(
di_size
 < 0 ||

178 
di_size
 > 
	`XFS_DFORK_DSIZE
(
dù
, 
ù
->
i_mou¡
))) {

179 
	`xfs_w¨n
(
ù
->
i_mou¡
,

181 (Ë
ù
->
i_öo
,

182 (Ë
di_size
);

183 
	`XFS_CORRUPTION_ERROR
("xfs_iformat(5)",

184 
XFS_ERRLEVEL_LOW
,

185 
ù
->
i_mou¡
, 
dù
);

186  -
EFSCORRUPTED
;

189 
size
 = ()
di_size
;

190 
îr‹
 = 
	`xfs_if‹m©_loˇl
(
ù
, 
dù
, 
XFS_DATA_FORK
, 
size
);

192 
XFS_DINODE_FMT_EXTENTS
:

193 
îr‹
 = 
	`xfs_if‹m©_exã¡s
(
ù
, 
dù
, 
XFS_DATA_FORK
);

195 
XFS_DINODE_FMT_BTREE
:

196 
îr‹
 = 
	`xfs_if‹m©_båì
(
ù
, 
dù
, 
XFS_DATA_FORK
);

199 
	`XFS_ERROR_REPORT
("xfs_if‹m©(6)", 
XFS_ERRLEVEL_LOW
,

200 
ù
->
i_mou¡
);

201  -
EFSCORRUPTED
;

206 
	`XFS_ERROR_REPORT
("xfs_if‹m©(7)", 
XFS_ERRLEVEL_LOW
, 
ù
->
i_mou¡
);

207  -
EFSCORRUPTED
;

209 i‡(
îr‹
)

210  
îr‹
;

212 i‡(
	`xfs_is_ªÊök_öode
(
ù
)) {

213 
	`ASSERT
(
ù
->
i_cowÂ
 =
NULL
);

214 
	`xfs_if‹k_öô_cow
(
ù
);

217 i‡(!
	`XFS_DFORK_Q
(
dù
))

220 
	`ASSERT
(
ù
->
i_aÂ
 =
NULL
);

221 
ù
->
i_aÂ
 = 
	`kmem_z⁄e_zÆloc
(
xfs_if‹k_z⁄e
, 
KM_SLEEP
 | 
KM_NOFS
);

223 
dù
->
di_af‹m©
) {

224 
XFS_DINODE_FMT_LOCAL
:

225 
©p
 = (
xfs_©å_sh‹tf‹m_t
 *)
	`XFS_DFORK_APTR
(
dù
);

226 
size
 = 
	`be16_to_˝u
(
©p
->
hdr
.
tŸsize
);

228 i‡(
	`u∆ikñy
(
size
 < (
xfs_©å_sf_hdr
))) {

229 
	`xfs_w¨n
(
ù
->
i_mou¡
,

231 (Ë
ù
->
i_öo
,

232 (Ë
size
);

233 
	`XFS_CORRUPTION_ERROR
("xfs_iformat(8)",

234 
XFS_ERRLEVEL_LOW
,

235 
ù
->
i_mou¡
, 
dù
);

236 
îr‹
 = -
EFSCORRUPTED
;

240 
îr‹
 = 
	`xfs_if‹m©_loˇl
(
ù
, 
dù
, 
XFS_ATTR_FORK
, 
size
);

242 
XFS_DINODE_FMT_EXTENTS
:

243 
îr‹
 = 
	`xfs_if‹m©_exã¡s
(
ù
, 
dù
, 
XFS_ATTR_FORK
);

245 
XFS_DINODE_FMT_BTREE
:

246 
îr‹
 = 
	`xfs_if‹m©_båì
(
ù
, 
dù
, 
XFS_ATTR_FORK
);

249 
îr‹
 = -
EFSCORRUPTED
;

252 i‡(
îr‹
) {

253 
	`kmem_z⁄e_‰ì
(
xfs_if‹k_z⁄e
, 
ù
->
i_aÂ
);

254 
ù
->
i_aÂ
 = 
NULL
;

255 i‡(
ù
->
i_cowÂ
)

256 
	`kmem_z⁄e_‰ì
(
xfs_if‹k_z⁄e
, 
ù
->
i_cowÂ
);

257 
ù
->
i_cowÂ
 = 
NULL
;

258 
	`xfs_ide°roy_f‹k
(
ù
, 
XFS_DATA_FORK
);

260  
îr‹
;

261 
	}
}

264 
	$xfs_öô_loˇl_f‹k
(

265 
xfs_öode
 *
ù
,

266 
whichf‹k
,

267 c⁄° *
d©a
,

268 
size
)

270 
xfs_if‹k
 *
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

271 
mem_size
 = 
size
, 
ªÆ_size
 = 0;

272 
boﬁ
 
zîo_ãrmö©e
;

280 
zîo_ãrmö©e
 = 
	`S_ISLNK
(
	`VFS_I
(
ù
)->
i_mode
);

281 i‡(
zîo_ãrmö©e
)

282 
mem_size
++;

284 i‡(
size
 == 0)

285 
iÂ
->
if_u1
.
if_d©a
 = 
NULL
;

286 i‡(
mem_size
 <(
iÂ
->
if_u2
.
if_ölöe_d©a
))

287 
iÂ
->
if_u1
.
if_d©a
 = iÂ->
if_u2
.
if_ölöe_d©a
;

289 
ªÆ_size
 = 
	`roundup
(
mem_size
, 4);

290 
iÂ
->
if_u1
.
if_d©a
 = 
	`kmem_Æloc
(
ªÆ_size
, 
KM_SLEEP
 | 
KM_NOFS
);

293 i‡(
size
) {

294 
	`mem˝y
(
iÂ
->
if_u1
.
if_d©a
, 
d©a
, 
size
);

295 i‡(
zîo_ãrmö©e
)

296 
iÂ
->
if_u1
.
if_d©a
[
size
] = '\0';

299 
iÂ
->
if_byãs
 = 
size
;

300 
iÂ
->
if_ªÆ_byãs
 = 
ªÆ_size
;

301 
iÂ
->
if_Êags
 &~(
XFS_IFEXTENTS
 | 
XFS_IFBROOT
);

302 
iÂ
->
if_Êags
 |
XFS_IFINLINE
;

303 
	}
}

315 
STATIC
 

316 
	$xfs_if‹m©_loˇl
(

317 
xfs_öode_t
 *
ù
,

318 
xfs_döode_t
 *
dù
,

319 
whichf‹k
,

320 
size
)

322 
îr‹
;

329 i‡(
	`u∆ikñy
(
size
 > 
	`XFS_DFORK_SIZE
(
dù
, 
ù
->
i_mou¡
, 
whichf‹k
))) {

330 
	`xfs_w¨n
(
ù
->
i_mou¡
,

332 (Ë
ù
->
i_öo
, 
size
,

333 
	`XFS_DFORK_SIZE
(
dù
, 
ù
->
i_mou¡
, 
whichf‹k
));

334 
	`XFS_CORRUPTION_ERROR
("xfs_if‹m©_loˇl", 
XFS_ERRLEVEL_LOW
,

335 
ù
->
i_mou¡
, 
dù
);

336  -
EFSCORRUPTED
;

339 i‡(
	`S_ISDIR
(
	`VFS_I
(
ù
)->
i_mode
Ë&& 
whichf‹k
 =
XFS_DATA_FORK
) {

340 
îr‹
 = 
	`xfs_dú2_sf_vîify
(
ù
->
i_mou¡
,

341 (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
),

342 
size
);

343 i‡(
îr‹
)

344  
îr‹
;

347 
	`xfs_öô_loˇl_f‹k
(
ù
, 
whichf‹k
, 
	`XFS_DFORK_PTR
(
dù
, whichf‹k), 
size
);

349 
	}
}

360 
STATIC
 

361 
	$xfs_if‹m©_exã¡s
(

362 
xfs_öode_t
 *
ù
,

363 
xfs_döode_t
 *
dù
,

364 
whichf‹k
)

366 
xfs_bmbt_ªc_t
 *
dp
;

367 
xfs_if‹k_t
 *
iÂ
;

368 
√x
;

369 
size
;

370 
i
;

372 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

373 
√x
 = 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
);

374 
size
 = 
√x
 * (
uöt
)(
xfs_bmbt_ªc_t
);

381 i‡(
	`u∆ikñy
(
size
 < 0 || sizê> 
	`XFS_DFORK_SIZE
(
dù
, 
ù
->
i_mou¡
, 
whichf‹k
))) {

382 
	`xfs_w¨n
(
ù
->
i_mou¡
, "corrupt inode %Lu ((a)extents = %d).",

383 (Ë
ù
->
i_öo
, 
√x
);

384 
	`XFS_CORRUPTION_ERROR
("xfs_if‹m©_exã¡s(1)", 
XFS_ERRLEVEL_LOW
,

385 
ù
->
i_mou¡
, 
dù
);

386  -
EFSCORRUPTED
;

389 
iÂ
->
if_ªÆ_byãs
 = 0;

390 i‡(
√x
 == 0)

391 
iÂ
->
if_u1
.
if_exã¡s
 = 
NULL
;

392 i‡(
√x
 <
XFS_INLINE_EXTS
)

393 
iÂ
->
if_u1
.
if_exã¡s
 = iÂ->
if_u2
.
if_ölöe_ext
;

395 
	`xfs_õxt_add
(
iÂ
, 0, 
√x
);

397 
iÂ
->
if_byãs
 = 
size
;

398 i‡(
size
) {

399 
dp
 = (
xfs_bmbt_ªc_t
 *Ë
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

400 
	`xfs_vÆid©e_exã¡s
(
iÂ
, 
√x
, 
	`XFS_EXTFMT_INODE
(
ù
));

401 
i
 = 0; i < 
√x
; i++, 
dp
++) {

402 
xfs_bmbt_ªc_ho°_t
 *
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
i
);

403 
ï
->
l0
 = 
	`gë_u«lig√d_be64
(&
dp
->l0);

404 
ï
->
l1
 = 
	`gë_u«lig√d_be64
(&
dp
->l1);

406 
	`XFS_BMAP_TRACE_EXLIST
(
ù
, 
√x
, 
whichf‹k
);

407 i‡(
whichf‹k
 !
XFS_DATA_FORK
 ||

408 
	`XFS_EXTFMT_INODE
(
ù
Ë=
XFS_EXTFMT_NOSTATE
)

409 i‡(
	`u∆ikñy
(
	`xfs_check_no°©e_exã¡s
(

410 
iÂ
, 0, 
√x
))) {

411 
	`XFS_ERROR_REPORT
("xfs_iformat_extents(2)",

412 
XFS_ERRLEVEL_LOW
,

413 
ù
->
i_mou¡
);

414  -
EFSCORRUPTED
;

417 
iÂ
->
if_Êags
 |
XFS_IFEXTENTS
;

419 
	}
}

429 
STATIC
 

430 
	$xfs_if‹m©_båì
(

431 
xfs_öode_t
 *
ù
,

432 
xfs_döode_t
 *
dù
,

433 
whichf‹k
)

435 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

436 
xfs_bmdr_block_t
 *
dÂ
;

437 
xfs_if‹k_t
 *
iÂ
;

439 
ƒecs
;

440 
size
;

441 
Àvñ
;

443 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

444 
dÂ
 = (
xfs_bmdr_block_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

445 
size
 = 
	`XFS_BMAP_BROOT_SPACE
(
mp
, 
dÂ
);

446 
ƒecs
 = 
	`be16_to_˝u
(
dÂ
->
bb_numªcs
);

447 
Àvñ
 = 
	`be16_to_˝u
(
dÂ
->
bb_Àvñ
);

456 i‡(
	`u∆ikñy
(
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) <=

457 
	`XFS_IFORK_MAXEXT
(
ù
, 
whichf‹k
) ||

458 
	`XFS_BMDR_SPACE_CALC
(
ƒecs
) >

459 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
) ||

460 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
Ë> ip->
i_d
.
di_nblocks
) ||

461 
Àvñ
 =0 ||Üevñ > 
XFS_BTREE_MAXLEVELS
) {

462 
	`xfs_w¨n
(
mp
, "corrupt inode %Lu (btree).",

463 (Ë
ù
->
i_öo
);

464 
	`XFS_CORRUPTION_ERROR
("xfs_if‹m©_båì", 
XFS_ERRLEVEL_LOW
,

465 
mp
, 
dù
);

466  -
EFSCORRUPTED
;

469 
iÂ
->
if_broŸ_byãs
 = 
size
;

470 
iÂ
->
if_broŸ
 = 
	`kmem_Æloc
(
size
, 
KM_SLEEP
 | 
KM_NOFS
);

471 
	`ASSERT
(
iÂ
->
if_broŸ
 !
NULL
);

476 
	`xfs_bmdr_to_bmbt
(
ù
, 
dÂ
, 
	`XFS_DFORK_SIZE
(
dù
, ip->
i_mou¡
, 
whichf‹k
),

477 
iÂ
->
if_broŸ
, 
size
);

478 
iÂ
->
if_Êags
 &~
XFS_IFEXTENTS
;

479 
iÂ
->
if_Êags
 |
XFS_IFBROOT
;

482 
	}
}

489 
	$xfs_úód_exã¡s
(

490 
xfs_å™s_t
 *
ç
,

491 
xfs_öode_t
 *
ù
,

492 
whichf‹k
)

494 
îr‹
;

495 
xfs_if‹k_t
 *
iÂ
;

496 
xfs_exäum_t
 
√xã¡s
;

498 
	`ASSERT
(
	`xfs_isûocked
(
ù
, 
XFS_ILOCK_EXCL
));

500 i‡(
	`u∆ikñy
(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
)) {

501 
	`XFS_ERROR_REPORT
("xfs_úód_exã¡s", 
XFS_ERRLEVEL_LOW
,

502 
ù
->
i_mou¡
);

503  -
EFSCORRUPTED
;

505 
√xã¡s
 = 
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
);

506 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

511 
iÂ
->
if_byãs
 = iÂ->
if_ªÆ_byãs
 = 0;

512 
	`xfs_õxt_add
(
iÂ
, 0, 
√xã¡s
);

513 
îr‹
 = 
	`xfs_bm≠_ªad_exã¡s
(
ç
, 
ù
, 
whichf‹k
);

514 i‡(
îr‹
) {

515 
	`xfs_õxt_de°roy
(
iÂ
);

516  
îr‹
;

518 
	`xfs_vÆid©e_exã¡s
(
iÂ
, 
√xã¡s
, 
	`XFS_EXTFMT_INODE
(
ù
));

519 
iÂ
->
if_Êags
 |
XFS_IFEXTENTS
;

521 
	}
}

541 
	$xfs_úoŸ_ªÆloc
(

542 
xfs_öode_t
 *
ù
,

543 
ªc_diff
,

544 
whichf‹k
)

546 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

547 
cur_max
;

548 
xfs_if‹k_t
 *
iÂ
;

549 
xfs_båì_block
 *
√w_broŸ
;

550 
√w_max
;

551 
size_t
 
√w_size
;

552 *
≈
;

553 *
›
;

558 i‡(
ªc_diff
 == 0) {

562 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

563 i‡(
ªc_diff
 > 0) {

568 i‡(
iÂ
->
if_broŸ_byãs
 == 0) {

569 
√w_size
 = 
	`XFS_BMAP_BROOT_SPACE_CALC
(
mp
, 
ªc_diff
);

570 
iÂ
->
if_broŸ
 = 
	`kmem_Æloc
(
√w_size
, 
KM_SLEEP
 | 
KM_NOFS
);

571 
iÂ
->
if_broŸ_byãs
 = ()
√w_size
;

581 
cur_max
 = 
	`xfs_bmbt_maxªcs
(
mp
, 
iÂ
->
if_broŸ_byãs
, 0);

582 
√w_max
 = 
cur_max
 + 
ªc_diff
;

583 
√w_size
 = 
	`XFS_BMAP_BROOT_SPACE_CALC
(
mp
, 
√w_max
);

584 
iÂ
->
if_broŸ
 = 
	`kmem_ªÆloc
(iÂ->if_broŸ, 
√w_size
,

585 
KM_SLEEP
 | 
KM_NOFS
);

586 
›
 = (*)
	`XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
iÂ
->
if_broŸ
, 1,

587 
iÂ
->
if_broŸ_byãs
);

588 
≈
 = (*)
	`XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
iÂ
->
if_broŸ
, 1,

589 ()
√w_size
);

590 
iÂ
->
if_broŸ_byãs
 = ()
√w_size
;

591 
	`ASSERT
(
	`XFS_BMAP_BMDR_SPACE
(
iÂ
->
if_broŸ
) <=

592 
	`XFS_IFORK_SIZE
(
ù
, 
whichf‹k
));

593 
	`memmove
(
≈
, 
›
, 
cur_max
 * (
uöt
)(
xfs_fsblock_t
));

602 
	`ASSERT
((
iÂ
->
if_broŸ
 !
NULL
Ë&& (iÂ->
if_broŸ_byãs
 > 0));

603 
cur_max
 = 
	`xfs_bmbt_maxªcs
(
mp
, 
iÂ
->
if_broŸ_byãs
, 0);

604 
√w_max
 = 
cur_max
 + 
ªc_diff
;

605 
	`ASSERT
(
√w_max
 >= 0);

606 i‡(
√w_max
 > 0)

607 
√w_size
 = 
	`XFS_BMAP_BROOT_SPACE_CALC
(
mp
, 
√w_max
);

609 
√w_size
 = 0;

610 i‡(
√w_size
 > 0) {

611 
√w_broŸ
 = 
	`kmem_Æloc
(
√w_size
, 
KM_SLEEP
 | 
KM_NOFS
);

615 
	`mem˝y
(
√w_broŸ
, 
iÂ
->
if_broŸ
,

616 
	`XFS_BMBT_BLOCK_LEN
(
ù
->
i_mou¡
));

618 
√w_broŸ
 = 
NULL
;

619 
iÂ
->
if_Êags
 &~
XFS_IFBROOT
;

625 i‡(
√w_max
 > 0) {

629 
›
 = (*)
	`XFS_BMBT_REC_ADDR
(
mp
, 
iÂ
->
if_broŸ
, 1);

630 
≈
 = (*)
	`XFS_BMBT_REC_ADDR
(
mp
, 
√w_broŸ
, 1);

631 
	`mem˝y
(
≈
, 
›
, 
√w_max
 * (
uöt
)(
xfs_bmbt_ªc_t
));

636 
›
 = (*)
	`XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
iÂ
->
if_broŸ
, 1,

637 
iÂ
->
if_broŸ_byãs
);

638 
≈
 = (*)
	`XFS_BMAP_BROOT_PTR_ADDR
(
mp
, 
√w_broŸ
, 1,

639 ()
√w_size
);

640 
	`mem˝y
(
≈
, 
›
, 
√w_max
 * (
uöt
)(
xfs_fsblock_t
));

642 
	`kmem_‰ì
(
iÂ
->
if_broŸ
);

643 
iÂ
->
if_broŸ
 = 
√w_broŸ
;

644 
iÂ
->
if_broŸ_byãs
 = ()
√w_size
;

645 i‡(
iÂ
->
if_broŸ
)

646 
	`ASSERT
(
	`XFS_BMAP_BMDR_SPACE
(
iÂ
->
if_broŸ
) <=

647 
	`XFS_IFORK_SIZE
(
ù
, 
whichf‹k
));

649 
	}
}

668 
	$xfs_id©a_ªÆloc
(

669 
xfs_öode_t
 *
ù
,

670 
byã_diff
,

671 
whichf‹k
)

673 
xfs_if‹k_t
 *
iÂ
;

674 
√w_size
;

675 
ªÆ_size
;

677 i‡(
byã_diff
 == 0) {

681 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

682 
√w_size
 = ()
iÂ
->
if_byãs
 + 
byã_diff
;

683 
	`ASSERT
(
√w_size
 >= 0);

685 i‡(
√w_size
 == 0) {

686 i‡(
iÂ
->
if_u1
.
if_d©a
 !iÂ->
if_u2
.
if_ölöe_d©a
) {

687 
	`kmem_‰ì
(
iÂ
->
if_u1
.
if_d©a
);

689 
iÂ
->
if_u1
.
if_d©a
 = 
NULL
;

690 
ªÆ_size
 = 0;

691 } i‡(
√w_size
 <(
iÂ
->
if_u2
.
if_ölöe_d©a
)) {

696 i‡(
iÂ
->
if_u1
.
if_d©a
 =
NULL
) {

697 
iÂ
->
if_u1
.
if_d©a
 = iÂ->
if_u2
.
if_ölöe_d©a
;

698 } i‡(
iÂ
->
if_u1
.
if_d©a
 !iÂ->
if_u2
.
if_ölöe_d©a
) {

699 
	`ASSERT
(
iÂ
->
if_ªÆ_byãs
 != 0);

700 
	`mem˝y
(
iÂ
->
if_u2
.
if_ölöe_d©a
, iÂ->
if_u1
.
if_d©a
,

701 
√w_size
);

702 
	`kmem_‰ì
(
iÂ
->
if_u1
.
if_d©a
);

703 
iÂ
->
if_u1
.
if_d©a
 = iÂ->
if_u2
.
if_ölöe_d©a
;

705 
ªÆ_size
 = 0;

714 
ªÆ_size
 = 
	`roundup
(
√w_size
, 4);

715 i‡(
iÂ
->
if_u1
.
if_d©a
 =
NULL
) {

716 
	`ASSERT
(
iÂ
->
if_ªÆ_byãs
 == 0);

717 
iÂ
->
if_u1
.
if_d©a
 = 
	`kmem_Æloc
(
ªÆ_size
,

718 
KM_SLEEP
 | 
KM_NOFS
);

719 } i‡(
iÂ
->
if_u1
.
if_d©a
 !iÂ->
if_u2
.
if_ölöe_d©a
) {

724 i‡(
iÂ
->
if_ªÆ_byãs
 !
ªÆ_size
) {

725 
iÂ
->
if_u1
.
if_d©a
 =

726 
	`kmem_ªÆloc
(
iÂ
->
if_u1
.
if_d©a
,

727 
ªÆ_size
,

728 
KM_SLEEP
 | 
KM_NOFS
);

731 
	`ASSERT
(
iÂ
->
if_ªÆ_byãs
 == 0);

732 
iÂ
->
if_u1
.
if_d©a
 = 
	`kmem_Æloc
(
ªÆ_size
,

733 
KM_SLEEP
 | 
KM_NOFS
);

734 
	`mem˝y
(
iÂ
->
if_u1
.
if_d©a
, iÂ->
if_u2
.
if_ölöe_d©a
,

735 
iÂ
->
if_byãs
);

738 
iÂ
->
if_ªÆ_byãs
 = 
ªÆ_size
;

739 
iÂ
->
if_byãs
 = 
√w_size
;

740 
	`ASSERT
(
iÂ
->
if_byãs
 <
	`XFS_IFORK_SIZE
(
ù
, 
whichf‹k
));

741 
	}
}

744 
	$xfs_ide°roy_f‹k
(

745 
xfs_öode_t
 *
ù
,

746 
whichf‹k
)

748 
xfs_if‹k_t
 *
iÂ
;

750 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

751 i‡(
iÂ
->
if_broŸ
 !
NULL
) {

752 
	`kmem_‰ì
(
iÂ
->
if_broŸ
);

753 
iÂ
->
if_broŸ
 = 
NULL
;

762 i‡(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_LOCAL
) {

763 i‡((
iÂ
->
if_u1
.
if_d©a
 !iÂ->
if_u2
.
if_ölöe_d©a
) &&

764 (
iÂ
->
if_u1
.
if_d©a
 !
NULL
)) {

765 
	`ASSERT
(
iÂ
->
if_ªÆ_byãs
 != 0);

766 
	`kmem_‰ì
(
iÂ
->
if_u1
.
if_d©a
);

767 
iÂ
->
if_u1
.
if_d©a
 = 
NULL
;

768 
iÂ
->
if_ªÆ_byãs
 = 0;

770 } i‡((
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
) &&

771 ((
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
) ||

772 ((
iÂ
->
if_u1
.
if_exã¡s
 !
NULL
) &&

773 (
iÂ
->
if_u1
.
if_exã¡s
 !iÂ->
if_u2
.
if_ölöe_ext
)))) {

774 
	`ASSERT
(
iÂ
->
if_ªÆ_byãs
 != 0);

775 
	`xfs_õxt_de°roy
(
iÂ
);

777 
	`ASSERT
(
iÂ
->
if_u1
.
if_exã¡s
 =
NULL
 ||

778 
iÂ
->
if_u1
.
if_exã¡s
 =iÂ->
if_u2
.
if_ölöe_ext
);

779 
	`ASSERT
(
iÂ
->
if_ªÆ_byãs
 == 0);

780 i‡(
whichf‹k
 =
XFS_ATTR_FORK
) {

781 
	`kmem_z⁄e_‰ì
(
xfs_if‹k_z⁄e
, 
ù
->
i_aÂ
);

782 
ù
->
i_aÂ
 = 
NULL
;

783 } i‡(
whichf‹k
 =
XFS_COW_FORK
) {

784 
	`kmem_z⁄e_‰ì
(
xfs_if‹k_z⁄e
, 
ù
->
i_cowÂ
);

785 
ù
->
i_cowÂ
 = 
NULL
;

787 
	}
}

790 
xfs_exäum_t


791 
	$xfs_õxt_cou¡
(
xfs_if‹k
 *
iÂ
)

793  
iÂ
->
if_byãs
 / (
uöt
)(
xfs_bmbt_ªc_t
);

794 
	}
}

809 
	$xfs_õxã¡s_c›y
(

810 
xfs_öode_t
 *
ù
,

811 
xfs_bmbt_ªc_t
 *
dp
,

812 
whichf‹k
)

814 
c›õd
;

815 
i
;

816 
xfs_if‹k_t
 *
iÂ
;

817 
ƒecs
;

818 
xfs_fsblock_t
 
°¨t_block
;

820 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

821 
	`ASSERT
(
	`xfs_isûocked
(
ù
, 
XFS_ILOCK_EXCL
|
XFS_ILOCK_SHARED
));

822 
	`ASSERT
(
iÂ
->
if_byãs
 > 0);

824 
ƒecs
 = 
	`xfs_õxt_cou¡
(
iÂ
);

825 
	`XFS_BMAP_TRACE_EXLIST
(
ù
, 
ƒecs
, 
whichf‹k
);

826 
	`ASSERT
(
ƒecs
 > 0);

834 
c›õd
 = 0;

835 
i
 = 0; i < 
ƒecs
; i++) {

836 
xfs_bmbt_ªc_ho°_t
 *
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
i
);

837 
°¨t_block
 = 
	`xfs_bmbt_gë_°¨tblock
(
ï
);

838 i‡(
	`i¢uŒ°¨tblock
(
°¨t_block
)) {

846 
	`put_u«lig√d_be64
(
ï
->
l0
, &
dp
->l0);

847 
	`put_u«lig√d_be64
(
ï
->
l1
, &
dp
->l1);

848 
dp
++;

849 
c›õd
++;

851 
	`ASSERT
(
c›õd
 != 0);

852 
	`xfs_vÆid©e_exã¡s
(
iÂ
, 
c›õd
, 
	`XFS_EXTFMT_INODE
(
ù
));

854  (
c›õd
 * (
uöt
)(
xfs_bmbt_ªc_t
));

855 
	}
}

868 
	$xfs_iÊush_f‹k
(

869 
xfs_öode_t
 *
ù
,

870 
xfs_döode_t
 *
dù
,

871 
xfs_öode_log_ôem_t
 *
iù
,

872 
whichf‹k
)

874 *
˝
;

875 
xfs_if‹k_t
 *
iÂ
;

876 
xfs_mou¡_t
 *
mp
;

877 
îr‹
;

878 c⁄° 
broŸÊag
[2] =

879 { 
XFS_ILOG_DBROOT
, 
XFS_ILOG_ABROOT
 };

880 c⁄° 
d©aÊag
[2] =

881 { 
XFS_ILOG_DDATA
, 
XFS_ILOG_ADATA
 };

882 c⁄° 
extÊag
[2] =

883 { 
XFS_ILOG_DEXT
, 
XFS_ILOG_AEXT
 };

885 i‡(!
iù
)

887 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

892 i‡(!
iÂ
) {

893 
	`ASSERT
(
whichf‹k
 =
XFS_ATTR_FORK
);

896 
˝
 = 
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

897 
mp
 = 
ù
->
i_mou¡
;

898 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
)) {

899 
XFS_DINODE_FMT_LOCAL
:

900 i‡(
	`S_ISDIR
(
	`VFS_I
(
ù
)->
i_mode
Ë&& 
whichf‹k
 =
XFS_DATA_FORK
) {

901 
îr‹
 = 
	`xfs_dú2_sf_vîify
(
mp
,

902 (
xfs_dú2_sf_hdr
 *)
iÂ
->
if_u1
.
if_d©a
,

903 
iÂ
->
if_byãs
);

904 i‡(
îr‹
)

905  
îr‹
;

907 i‡((
iù
->
ûi_fõlds
 & 
d©aÊag
[
whichf‹k
]) &&

908 (
iÂ
->
if_byãs
 > 0)) {

909 
	`ASSERT
(
iÂ
->
if_u1
.
if_d©a
 !
NULL
);

910 
	`ASSERT
(
iÂ
->
if_byãs
 <
	`XFS_IFORK_SIZE
(
ù
, 
whichf‹k
));

911 
	`mem˝y
(
˝
, 
iÂ
->
if_u1
.
if_d©a
, iÂ->
if_byãs
);

915 
XFS_DINODE_FMT_EXTENTS
:

916 
	`ASSERT
((
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
) ||

917 !(
iù
->
ûi_fõlds
 & 
extÊag
[
whichf‹k
]));

918 i‡((
iù
->
ûi_fõlds
 & 
extÊag
[
whichf‹k
]) &&

919 (
iÂ
->
if_byãs
 > 0)) {

920 
	`ASSERT
(
	`xfs_õxt_gë_ext
(
iÂ
, 0));

921 
	`ASSERT
(
	`XFS_IFORK_NEXTENTS
(
ù
, 
whichf‹k
) > 0);

922 ()
	`xfs_õxã¡s_c›y
(
ù
, (
xfs_bmbt_ªc_t
 *)
˝
,

923 
whichf‹k
);

927 
XFS_DINODE_FMT_BTREE
:

928 i‡((
iù
->
ûi_fõlds
 & 
broŸÊag
[
whichf‹k
]) &&

929 (
iÂ
->
if_broŸ_byãs
 > 0)) {

930 
	`ASSERT
(
iÂ
->
if_broŸ
 !
NULL
);

931 
	`ASSERT
(
	`XFS_BMAP_BMDR_SPACE
(
iÂ
->
if_broŸ
) <=

932 
	`XFS_IFORK_SIZE
(
ù
, 
whichf‹k
));

933 
	`xfs_bmbt_to_bmdr
(
mp
, 
iÂ
->
if_broŸ
, iÂ->
if_broŸ_byãs
,

934 (
xfs_bmdr_block_t
 *)
˝
,

935 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
));

939 
XFS_DINODE_FMT_DEV
:

940 i‡(
iù
->
ûi_fõlds
 & 
XFS_ILOG_DEV
) {

941 
	`ASSERT
(
whichf‹k
 =
XFS_DATA_FORK
);

942 
	`xfs_döode_put_rdev
(
dù
, 
ù
->
i_df
.
if_u2
.
if_rdev
);

946 
XFS_DINODE_FMT_UUID
:

947 i‡(
iù
->
ûi_fõlds
 & 
XFS_ILOG_UUID
) {

948 
	`ASSERT
(
whichf‹k
 =
XFS_DATA_FORK
);

949 
	`mem˝y
(
	`XFS_DFORK_DPTR
(
dù
),

950 &
ù
->
i_df
.
if_u2
.
if_uuid
,

951 (
uuid_t
));

956 
	`ASSERT
(0);

960 
	}
}

965 
xfs_bmbt_ªc_ho°_t
 *

966 
	$xfs_õxt_gë_ext
(

967 
xfs_if‹k_t
 *
iÂ
,

968 
xfs_exäum_t
 
idx
)

970 
	`ASSERT
(
idx
 >= 0);

971 
	`ASSERT
(
idx
 < 
	`xfs_õxt_cou¡
(
iÂ
));

973 i‡((
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
Ë&& (
idx
 == 0)) {

974  
iÂ
->
if_u1
.
if_ext_úec
->
î_extbuf
;

975 } i‡(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
) {

976 
xfs_ext_úec_t
 *
îp
;

977 
îp_idx
 = 0;

978 
xfs_exäum_t
 
∑ge_idx
 = 
idx
;

980 
îp
 = 
	`xfs_õxt_idx_to_úec
(
iÂ
, &
∑ge_idx
, &
îp_idx
, 0);

981  &
îp
->
î_extbuf
[
∑ge_idx
];

982 } i‡(
iÂ
->
if_byãs
) {

983  &
iÂ
->
if_u1
.
if_exã¡s
[
idx
];

985  
NULL
;

987 
	}
}

990 
xfs_if‹k
 *

991 
	$xfs_õxt_°©e_to_f‹k
(

992 
xfs_öode
 *
ù
,

993 
°©e
)

995 i‡(
°©e
 & 
BMAP_COWFORK
)

996  
ù
->
i_cowÂ
;

997 i‡(
°©e
 & 
BMAP_ATTRFORK
)

998  
ù
->
i_aÂ
;

999  &
ù
->
i_df
;

1000 
	}
}

1007 
	$xfs_õxt_ö£π
(

1008 
xfs_öode_t
 *
ù
,

1009 
xfs_exäum_t
 
idx
,

1010 
xfs_exäum_t
 
cou¡
,

1011 
xfs_bmbt_úec_t
 *
√w
,

1012 
°©e
)

1014 
xfs_if‹k_t
 *
iÂ
 = 
	`xfs_õxt_°©e_to_f‹k
(
ù
, 
°©e
);

1015 
xfs_exäum_t
 
i
;

1017 
	`åa˚_xfs_õxt_ö£π
(
ù
, 
idx
, 
√w
, 
°©e
, 
_RET_IP_
);

1019 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
);

1020 
	`xfs_õxt_add
(
iÂ
, 
idx
, 
cou¡
);

1021 
i
 = 
idx
; i < idx + 
cou¡
; i++, 
√w
++)

1022 
	`xfs_bmbt_£t_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, 
i
), 
√w
);

1023 
	}
}

1038 
	$xfs_õxt_add
(

1039 
xfs_if‹k_t
 *
iÂ
,

1040 
xfs_exäum_t
 
idx
,

1041 
ext_diff
)

1043 
byã_diff
;

1044 
√w_size
;

1045 
xfs_exäum_t
 
√xã¡s
;

1047 
√xã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

1048 
	`ASSERT
((
idx
 >0Ë&& (idx <
√xã¡s
));

1049 
byã_diff
 = 
ext_diff
 * (
xfs_bmbt_ªc_t
);

1050 
√w_size
 = 
iÂ
->
if_byãs
 + 
byã_diff
;

1056 i‡(
√xã¡s
 + 
ext_diff
 <
XFS_INLINE_EXTS
) {

1057 i‡(
idx
 < 
√xã¡s
) {

1058 
	`memmove
(&
iÂ
->
if_u2
.
if_ölöe_ext
[
idx
 + 
ext_diff
],

1059 &
iÂ
->
if_u2
.
if_ölöe_ext
[
idx
],

1060 (
√xã¡s
 - 
idx
Ë* (
xfs_bmbt_ªc_t
));

1061 
	`mem£t
(&
iÂ
->
if_u2
.
if_ölöe_ext
[
idx
], 0, 
byã_diff
);

1063 
iÂ
->
if_u1
.
if_exã¡s
 = iÂ->
if_u2
.
if_ölöe_ext
;

1064 
iÂ
->
if_ªÆ_byãs
 = 0;

1072 i‡(
√xã¡s
 + 
ext_diff
 <
XFS_LINEAR_EXTS
) {

1073 
	`xfs_õxt_ªÆloc_dúe˘
(
iÂ
, 
√w_size
);

1074 i‡(
idx
 < 
√xã¡s
) {

1075 
	`memmove
(&
iÂ
->
if_u1
.
if_exã¡s
[
idx
 + 
ext_diff
],

1076 &
iÂ
->
if_u1
.
if_exã¡s
[
idx
],

1077 (
√xã¡s
 - 
idx
Ë* (
xfs_bmbt_ªc_t
));

1078 
	`mem£t
(&
iÂ
->
if_u1
.
if_exã¡s
[
idx
], 0, 
byã_diff
);

1083 
xfs_ext_úec_t
 *
îp
;

1084 
îp_idx
 = 0;

1085 
∑ge_idx
 = 
idx
;

1087 
	`ASSERT
(
√xã¡s
 + 
ext_diff
 > 
XFS_LINEAR_EXTS
);

1088 i‡(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
) {

1089 
îp
 = 
	`xfs_õxt_idx_to_úec
(
iÂ
, &
∑ge_idx
, &
îp_idx
, 1);

1091 
	`xfs_õxt_úec_öô
(
iÂ
);

1092 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1093 
îp
 = 
iÂ
->
if_u1
.
if_ext_úec
;

1096 i‡(
îp
 &&ÉΩ->
î_extcou¡
 + 
ext_diff
 <
XFS_LINEAR_EXTS
) {

1097 i‡(
∑ge_idx
 < 
îp
->
î_extcou¡
) {

1098 
	`memmove
(&
îp
->
î_extbuf
[
∑ge_idx
 + 
ext_diff
],

1099 &
îp
->
î_extbuf
[
∑ge_idx
],

1100 (
îp
->
î_extcou¡
 - 
∑ge_idx
) *

1101 (
xfs_bmbt_ªc_t
));

1102 
	`mem£t
(&
îp
->
î_extbuf
[
∑ge_idx
], 0, 
byã_diff
);

1104 
îp
->
î_extcou¡
 +
ext_diff
;

1105 
	`xfs_õxt_úec_upd©e_extoffs
(
iÂ
, 
îp_idx
 + 1, 
ext_diff
);

1108 i‡(
îp
) {

1109 
	`xfs_õxt_add_ödúe˘_mu…i
(
iÂ
,

1110 
îp_idx
, 
∑ge_idx
, 
ext_diff
);

1119 
uöt
 
cou¡
 = 
ext_diff
;

1121 
cou¡
) {

1122 
îp
 = 
	`xfs_õxt_úec_√w
(
iÂ
, 
îp_idx
);

1123 
îp
->
î_extcou¡
 = 
	`mö
(
cou¡
, 
XFS_LINEAR_EXTS
);

1124 
cou¡
 -
îp
->
î_extcou¡
;

1125 i‡(
cou¡
)

1126 
îp_idx
++;

1130 
iÂ
->
if_byãs
 = 
√w_size
;

1131 
	}
}

1150 
	$xfs_õxt_add_ödúe˘_mu…i
(

1151 
xfs_if‹k_t
 *
iÂ
,

1152 
îp_idx
,

1153 
xfs_exäum_t
 
idx
,

1154 
cou¡
)

1156 
byã_diff
;

1157 
xfs_ext_úec_t
 *
îp
;

1158 
xfs_exäum_t
 
ext_diff
;

1159 
xfs_exäum_t
 
ext_˙t
;

1160 
xfs_exäum_t
 
√x2
;

1161 
xfs_bmbt_ªc_t
 *
√x2_ï
 = 
NULL
;

1162 
∆i°s
;

1164 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1165 
îp
 = &
iÂ
->
if_u1
.
if_ext_úec
[
îp_idx
];

1166 
√x2
 = 
îp
->
î_extcou¡
 - 
idx
;

1167 
∆i°s
 = 
iÂ
->
if_ªÆ_byãs
 / 
XFS_IEXT_BUFSZ
;

1172 i‡(
√x2
) {

1173 
byã_diff
 = 
√x2
 * (
xfs_bmbt_ªc_t
);

1174 
√x2_ï
 = (
xfs_bmbt_ªc_t
 *Ë
	`kmem_Æloc
(
byã_diff
, 
KM_NOFS
);

1175 
	`memmove
(
√x2_ï
, &
îp
->
î_extbuf
[
idx
], 
byã_diff
);

1176 
îp
->
î_extcou¡
 -
√x2
;

1177 
	`xfs_õxt_úec_upd©e_extoffs
(
iÂ
, 
îp_idx
 + 1, -
√x2
);

1178 
	`mem£t
(&
îp
->
î_extbuf
[
idx
], 0, 
byã_diff
);

1187 
ext_˙t
 = 
cou¡
;

1188 
ext_diff
 = 
	`MIN
(
ext_˙t
, ()
XFS_LINEAR_EXTS
 - 
îp
->
î_extcou¡
);

1189 i‡(
ext_diff
) {

1190 
îp
->
î_extcou¡
 +
ext_diff
;

1191 
	`xfs_õxt_úec_upd©e_extoffs
(
iÂ
, 
îp_idx
 + 1, 
ext_diff
);

1192 
ext_˙t
 -
ext_diff
;

1194 
ext_˙t
) {

1195 
îp_idx
++;

1196 
îp
 = 
	`xfs_õxt_úec_√w
(
iÂ
, 
îp_idx
);

1197 
ext_diff
 = 
	`MIN
(
ext_˙t
, ()
XFS_LINEAR_EXTS
);

1198 
îp
->
î_extcou¡
 = 
ext_diff
;

1199 
	`xfs_õxt_úec_upd©e_extoffs
(
iÂ
, 
îp_idx
 + 1, 
ext_diff
);

1200 
ext_˙t
 -
ext_diff
;

1204 i‡(
√x2
) {

1205 
xfs_exäum_t
 
ext_avaû
;

1206 
i
;

1208 
byã_diff
 = 
√x2
 * (
xfs_bmbt_ªc_t
);

1209 
ext_avaû
 = 
XFS_LINEAR_EXTS
 - 
îp
->
î_extcou¡
;

1210 
i
 = 0;

1215 i‡(
√x2
 <
ext_avaû
) {

1216 
i
 = 
îp
->
î_extcou¡
;

1222 i‡((
îp_idx
 < 
∆i°s
 - 1) &&

1223 (
√x2
 <(
ext_avaû
 = 
XFS_LINEAR_EXTS
 -

1224 
iÂ
->
if_u1
.
if_ext_úec
[
îp_idx
+1].
î_extcou¡
))) {

1225 
îp_idx
++;

1226 
îp
++;

1228 
	`memmove
(&
îp
->
î_extbuf
[
√x2
],Érp->er_extbuf,

1229 
îp
->
î_extcou¡
 * (
xfs_bmbt_ªc_t
));

1236 
îp_idx
++;

1237 
îp
 = 
	`xfs_õxt_úec_√w
(
iÂ
, 
îp_idx
);

1239 
	`memmove
(&
îp
->
î_extbuf
[
i
], 
√x2_ï
, 
byã_diff
);

1240 
	`kmem_‰ì
(
√x2_ï
);

1241 
îp
->
î_extcou¡
 +
√x2
;

1242 
	`xfs_õxt_úec_upd©e_extoffs
(
iÂ
, 
îp_idx
 + 1, 
√x2
);

1244 
	}
}

1258 
	$xfs_õxt_ªmove
(

1259 
xfs_öode_t
 *
ù
,

1260 
xfs_exäum_t
 
idx
,

1261 
ext_diff
,

1262 
°©e
)

1264 
xfs_if‹k_t
 *
iÂ
 = 
	`xfs_õxt_°©e_to_f‹k
(
ù
, 
°©e
);

1265 
xfs_exäum_t
 
√xã¡s
;

1266 
√w_size
;

1268 
	`åa˚_xfs_õxt_ªmove
(
ù
, 
idx
, 
°©e
, 
_RET_IP_
);

1270 
	`ASSERT
(
ext_diff
 > 0);

1271 
√xã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

1272 
√w_size
 = (
√xã¡s
 - 
ext_diff
Ë* (
xfs_bmbt_ªc_t
);

1274 i‡(
√w_size
 == 0) {

1275 
	`xfs_õxt_de°roy
(
iÂ
);

1276 } i‡(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
) {

1277 
	`xfs_õxt_ªmove_ödúe˘
(
iÂ
, 
idx
, 
ext_diff
);

1278 } i‡(
iÂ
->
if_ªÆ_byãs
) {

1279 
	`xfs_õxt_ªmove_dúe˘
(
iÂ
, 
idx
, 
ext_diff
);

1281 
	`xfs_õxt_ªmove_ölöe
(
iÂ
, 
idx
, 
ext_diff
);

1283 
iÂ
->
if_byãs
 = 
√w_size
;

1284 
	}
}

1291 
	$xfs_õxt_ªmove_ölöe
(

1292 
xfs_if‹k_t
 *
iÂ
,

1293 
xfs_exäum_t
 
idx
,

1294 
ext_diff
)

1296 
√xã¡s
;

1298 
	`ASSERT
(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
));

1299 
	`ASSERT
(
idx
 < 
XFS_INLINE_EXTS
);

1300 
√xã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

1301 
	`ASSERT
(((
√xã¡s
 - 
ext_diff
) > 0) &&

1302 (
√xã¡s
 - 
ext_diff
Ë< 
XFS_INLINE_EXTS
);

1304 i‡(
idx
 + 
ext_diff
 < 
√xã¡s
) {

1305 
	`memmove
(&
iÂ
->
if_u2
.
if_ölöe_ext
[
idx
],

1306 &
iÂ
->
if_u2
.
if_ölöe_ext
[
idx
 + 
ext_diff
],

1307 (
√xã¡s
 - (
idx
 + 
ext_diff
)) *

1308 (
xfs_bmbt_ªc_t
));

1309 
	`mem£t
(&
iÂ
->
if_u2
.
if_ölöe_ext
[
√xã¡s
 - 
ext_diff
],

1310 0, 
ext_diff
 * (
xfs_bmbt_ªc_t
));

1312 
	`mem£t
(&
iÂ
->
if_u2
.
if_ölöe_ext
[
idx
], 0,

1313 
ext_diff
 * (
xfs_bmbt_ªc_t
));

1315 
	}
}

1328 
	$xfs_õxt_ªmove_dúe˘
(

1329 
xfs_if‹k_t
 *
iÂ
,

1330 
xfs_exäum_t
 
idx
,

1331 
ext_diff
)

1333 
xfs_exäum_t
 
√xã¡s
;

1334 
√w_size
;

1336 
	`ASSERT
(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
));

1337 
√w_size
 = 
iÂ
->
if_byãs
 -

1338 (
ext_diff
 * (
xfs_bmbt_ªc_t
));

1339 
√xã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

1341 i‡(
√w_size
 == 0) {

1342 
	`xfs_õxt_de°roy
(
iÂ
);

1346 i‡(
idx
 + 
ext_diff
 < 
√xã¡s
) {

1347 
	`memmove
(&
iÂ
->
if_u1
.
if_exã¡s
[
idx
],

1348 &
iÂ
->
if_u1
.
if_exã¡s
[
idx
 + 
ext_diff
],

1349 (
√xã¡s
 - (
idx
 + 
ext_diff
)) *

1350 (
xfs_bmbt_ªc_t
));

1352 
	`mem£t
(&
iÂ
->
if_u1
.
if_exã¡s
[
√xã¡s
 - 
ext_diff
],

1353 0, 
ext_diff
 * (
xfs_bmbt_ªc_t
));

1360 
	`xfs_õxt_ªÆloc_dúe˘
(
iÂ
, 
√w_size
);

1361 
iÂ
->
if_byãs
 = 
√w_size
;

1362 
	}
}

1380 
	$xfs_õxt_ªmove_ödúe˘
(

1381 
xfs_if‹k_t
 *
iÂ
,

1382 
xfs_exäum_t
 
idx
,

1383 
cou¡
)

1385 
xfs_ext_úec_t
 *
îp
;

1386 
îp_idx
 = 0;

1387 
xfs_exäum_t
 
ext_˙t
;

1388 
xfs_exäum_t
 
ext_diff
;

1389 
xfs_exäum_t
 
√x1
;

1390 
xfs_exäum_t
 
√x2
;

1391 
∑ge_idx
 = 
idx
;

1393 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1394 
îp
 = 
	`xfs_õxt_idx_to_úec
(
iÂ
, &
∑ge_idx
, &
îp_idx
, 0);

1395 
	`ASSERT
(
îp
 !
NULL
);

1396 
√x1
 = 
∑ge_idx
;

1397 
ext_˙t
 = 
cou¡
;

1398 
ext_˙t
) {

1399 
√x2
 = 
	`MAX
((
îp
->
î_extcou¡
 - (
√x1
 + 
ext_˙t
)), 0);

1400 
ext_diff
 = 
	`MIN
(
ext_˙t
, (
îp
->
î_extcou¡
 - 
√x1
));

1405 i‡(
ext_diff
 =
îp
->
î_extcou¡
) {

1406 
	`xfs_õxt_úec_ªmove
(
iÂ
, 
îp_idx
);

1407 
ext_˙t
 -
ext_diff
;

1408 
√x1
 = 0;

1409 i‡(
ext_˙t
) {

1410 
	`ASSERT
(
îp_idx
 < 
iÂ
->
if_ªÆ_byãs
 /

1411 
XFS_IEXT_BUFSZ
);

1412 
îp
 = &
iÂ
->
if_u1
.
if_ext_úec
[
îp_idx
];

1413 
√x1
 = 0;

1420 i‡(
√x2
) {

1421 
	`memmove
(&
îp
->
î_extbuf
[
√x1
],

1422 &
îp
->
î_extbuf
[
√x1
 + 
ext_diff
],

1423 
√x2
 * (
xfs_bmbt_ªc_t
));

1426 
	`mem£t
(&
îp
->
î_extbuf
[
√x1
 + 
√x2
], 0, (
XFS_IEXT_BUFSZ
 -

1427 ((
√x1
 + 
√x2
Ë* (
xfs_bmbt_ªc_t
))));

1429 
îp
->
î_extcou¡
 -
ext_diff
;

1430 
	`xfs_õxt_úec_upd©e_extoffs
(
iÂ
, 
îp_idx
 + 1, -
ext_diff
);

1431 
ext_˙t
 -
ext_diff
;

1432 
√x1
 = 0;

1433 
îp_idx
++;

1434 
îp
++;

1436 
iÂ
->
if_byãs
 -
cou¡
 * (
xfs_bmbt_ªc_t
);

1437 
	`xfs_õxt_úec_com∑˘
(
iÂ
);

1438 
	}
}

1444 
	$xfs_õxt_ªÆloc_dúe˘
(

1445 
xfs_if‹k_t
 *
iÂ
,

1446 
√w_size
)

1448 
∫ew_size
;

1450 
∫ew_size
 = 
√w_size
;

1452 
	`ASSERT
(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
) ||

1453 ((
√w_size
 >0Ë&& (√w_sizê<
XFS_IEXT_BUFSZ
) &&

1454 (
√w_size
 !
iÂ
->
if_ªÆ_byãs
)));

1457 i‡(
√w_size
 == 0) {

1458 
	`xfs_õxt_de°roy
(
iÂ
);

1461 i‡(
iÂ
->
if_ªÆ_byãs
) {

1463 i‡(
√w_size
 <
XFS_INLINE_EXTS
 * (
xfs_bmbt_ªc_t
)) {

1464 
	`xfs_õxt_dúe˘_to_ölöe
(
iÂ
, 
√w_size
 /

1465 (
uöt
)(
xfs_bmbt_ªc_t
));

1466 
iÂ
->
if_byãs
 = 
√w_size
;

1469 i‡(!
	`is_powî_of_2
(
√w_size
)){

1470 
∫ew_size
 = 
	`roundup_pow_of_two
(
√w_size
);

1472 i‡(
∫ew_size
 !
iÂ
->
if_ªÆ_byãs
) {

1473 
iÂ
->
if_u1
.
if_exã¡s
 =

1474 
	`kmem_ªÆloc
(
iÂ
->
if_u1
.
if_exã¡s
,

1475 
∫ew_size
, 
KM_NOFS
);

1477 i‡(
∫ew_size
 > 
iÂ
->
if_ªÆ_byãs
) {

1478 
	`mem£t
(&
iÂ
->
if_u1
.
if_exã¡s
[iÂ->
if_byãs
 /

1479 (
uöt
)(
xfs_bmbt_ªc_t
)], 0,

1480 
∫ew_size
 - 
iÂ
->
if_ªÆ_byãs
);

1485 i‡(!
	`is_powî_of_2
(
√w_size
)) {

1486 
∫ew_size
 = 
	`roundup_pow_of_two
(
√w_size
);

1488 
	`xfs_õxt_ölöe_to_dúe˘
(
iÂ
, 
∫ew_size
);

1490 
iÂ
->
if_ªÆ_byãs
 = 
∫ew_size
;

1491 
iÂ
->
if_byãs
 = 
√w_size
;

1492 
	}
}

1498 
	$xfs_õxt_dúe˘_to_ölöe
(

1499 
xfs_if‹k_t
 *
iÂ
,

1500 
xfs_exäum_t
 
√xã¡s
)

1502 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
);

1503 
	`ASSERT
(
√xã¡s
 <
XFS_INLINE_EXTS
);

1509 
	`mem˝y
(
iÂ
->
if_u2
.
if_ölöe_ext
, iÂ->
if_u1
.
if_exã¡s
,

1510 
√xã¡s
 * (
xfs_bmbt_ªc_t
));

1511 
	`kmem_‰ì
(
iÂ
->
if_u1
.
if_exã¡s
);

1512 
iÂ
->
if_u1
.
if_exã¡s
 = iÂ->
if_u2
.
if_ölöe_ext
;

1513 
iÂ
->
if_ªÆ_byãs
 = 0;

1514 
	}
}

1525 
	$xfs_õxt_ölöe_to_dúe˘
(

1526 
xfs_if‹k_t
 *
iÂ
,

1527 
√w_size
)

1529 
iÂ
->
if_u1
.
if_exã¡s
 = 
	`kmem_Æloc
(
√w_size
, 
KM_NOFS
);

1530 
	`mem£t
(
iÂ
->
if_u1
.
if_exã¡s
, 0, 
√w_size
);

1531 i‡(
iÂ
->
if_byãs
) {

1532 
	`mem˝y
(
iÂ
->
if_u1
.
if_exã¡s
, iÂ->
if_u2
.
if_ölöe_ext
,

1533 
iÂ
->
if_byãs
);

1534 
	`mem£t
(
iÂ
->
if_u2
.
if_ölöe_ext
, 0, 
XFS_INLINE_EXTS
 *

1535 (
xfs_bmbt_ªc_t
));

1537 
iÂ
->
if_ªÆ_byãs
 = 
√w_size
;

1538 
	}
}

1543 
STATIC
 

1544 
	$xfs_õxt_ªÆloc_ödúe˘
(

1545 
xfs_if‹k_t
 *
iÂ
,

1546 
√w_size
)

1548 #ifde‡
DEBUG


1549 
∆i°s
;

1550 
size
;

1552 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1553 
∆i°s
 = 
iÂ
->
if_ªÆ_byãs
 / 
XFS_IEXT_BUFSZ
;

1554 
size
 = 
∆i°s
 * (
xfs_ext_úec_t
);

1555 
	`ASSERT
(
iÂ
->
if_ªÆ_byãs
);

1556 
	`ASSERT
((
√w_size
 >0Ë&& (√w_sizê!
size
));

1558 i‡(
√w_size
 == 0) {

1559 
	`xfs_õxt_de°roy
(
iÂ
);

1561 
iÂ
->
if_u1
.
if_ext_úec
 =

1562 
	`kmem_ªÆloc
(
iÂ
->
if_u1
.
if_ext_úec
, 
√w_size
, 
KM_NOFS
);

1564 
	}
}

1569 
STATIC
 

1570 
	$xfs_õxt_ödúe˘_to_dúe˘
(

1571 
xfs_if‹k_t
 *
iÂ
)

1573 
xfs_bmbt_ªc_ho°_t
 *
ï
;

1574 
xfs_exäum_t
 
√xã¡s
;

1575 
size
;

1577 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1578 
√xã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

1579 
	`ASSERT
(
√xã¡s
 <
XFS_LINEAR_EXTS
);

1580 
size
 = 
√xã¡s
 * (
xfs_bmbt_ªc_t
);

1582 
	`xfs_õxt_úec_com∑˘_∑ges
(
iÂ
);

1583 
	`ASSERT
(
iÂ
->
if_ªÆ_byãs
 =
XFS_IEXT_BUFSZ
);

1585 
ï
 = 
iÂ
->
if_u1
.
if_ext_úec
->
î_extbuf
;

1586 
	`kmem_‰ì
(
iÂ
->
if_u1
.
if_ext_úec
);

1587 
iÂ
->
if_Êags
 &~
XFS_IFEXTIREC
;

1588 
iÂ
->
if_u1
.
if_exã¡s
 = 
ï
;

1589 
iÂ
->
if_byãs
 = 
size
;

1590 i‡(
√xã¡s
 < 
XFS_LINEAR_EXTS
) {

1591 
	`xfs_õxt_ªÆloc_dúe˘
(
iÂ
, 
size
);

1593 
	}
}

1598 
STATIC
 

1599 
	$xfs_õxt_úec_ªmove_Æl
(

1600 
xfs_if‹k
 *
iÂ
)

1602 
∆i°s
;

1603 
i
;

1605 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1606 
∆i°s
 = 
iÂ
->
if_ªÆ_byãs
 / 
XFS_IEXT_BUFSZ
;

1607 
i
 = 0; i < 
∆i°s
; i++)

1608 
	`kmem_‰ì
(
iÂ
->
if_u1
.
if_ext_úec
[
i
].
î_extbuf
);

1609 
	`kmem_‰ì
(
iÂ
->
if_u1
.
if_ext_úec
);

1610 
iÂ
->
if_Êags
 &~
XFS_IFEXTIREC
;

1611 
	}
}

1617 
	$xfs_õxt_de°roy
(

1618 
xfs_if‹k_t
 *
iÂ
)

1620 i‡(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
) {

1621 
	`xfs_õxt_úec_ªmove_Æl
(
iÂ
);

1622 } i‡(
iÂ
->
if_ªÆ_byãs
) {

1623 
	`kmem_‰ì
(
iÂ
->
if_u1
.
if_exã¡s
);

1624 } i‡(
iÂ
->
if_byãs
) {

1625 
	`mem£t
(
iÂ
->
if_u2
.
if_ölöe_ext
, 0, 
XFS_INLINE_EXTS
 *

1626 (
xfs_bmbt_ªc_t
));

1628 
iÂ
->
if_u1
.
if_exã¡s
 = 
NULL
;

1629 
iÂ
->
if_ªÆ_byãs
 = 0;

1630 
iÂ
->
if_byãs
 = 0;

1631 
	}
}

1636 
xfs_bmbt_ªc_ho°_t
 *

1637 
	$xfs_õxt_bno_to_ext
(

1638 
xfs_if‹k_t
 *
iÂ
,

1639 
xfs_fûeoff_t
 
bno
,

1640 
xfs_exäum_t
 *
idxp
)

1642 
xfs_bmbt_ªc_ho°_t
 *
ba£
;

1643 
xfs_fûblks_t
 
blockcou¡
 = 0;

1644 
xfs_bmbt_ªc_ho°_t
 *
ï
 = 
NULL
;

1645 
xfs_ext_úec_t
 *
îp
 = 
NULL
;

1646 
high
;

1647 
xfs_exäum_t
 
idx
 = 0;

1648 
low
;

1649 
xfs_exäum_t
 
√xã¡s
;

1650 
xfs_fûeoff_t
 
°¨toff
 = 0;

1652 
√xã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

1653 i‡(
√xã¡s
 == 0) {

1654 *
idxp
 = 0;

1655  
NULL
;

1657 
low
 = 0;

1658 i‡(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
) {

1660 
îp_idx
 = 0;

1661 
îp
 = 
	`xfs_õxt_bno_to_úec
(
iÂ
, 
bno
, &
îp_idx
);

1662 
ba£
 = 
îp
->
î_extbuf
;

1663 
high
 = 
îp
->
î_extcou¡
 - 1;

1665 
ba£
 = 
iÂ
->
if_u1
.
if_exã¡s
;

1666 
high
 = 
√xã¡s
 - 1;

1669 
low
 <
high
) {

1670 
idx
 = (
low
 + 
high
) >> 1;

1671 
ï
 = 
ba£
 + 
idx
;

1672 
°¨toff
 = 
	`xfs_bmbt_gë_°¨toff
(
ï
);

1673 
blockcou¡
 = 
	`xfs_bmbt_gë_blockcou¡
(
ï
);

1674 i‡(
bno
 < 
°¨toff
) {

1675 
high
 = 
idx
 - 1;

1676 } i‡(
bno
 >
°¨toff
 + 
blockcou¡
) {

1677 
low
 = 
idx
 + 1;

1680 i‡(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
) {

1681 
idx
 +
îp
->
î_extoff
;

1683 *
idxp
 = 
idx
;

1684  
ï
;

1688 i‡(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
) {

1689 
idx
 +
îp
->
î_extoff
;

1691 i‡(
bno
 >
°¨toff
 + 
blockcou¡
) {

1692 i‡(++
idx
 =
√xã¡s
) {

1693 
ï
 = 
NULL
;

1695 
ï
 = 
	`xfs_õxt_gë_ext
(
iÂ
, 
idx
);

1698 *
idxp
 = 
idx
;

1699  
ï
;

1700 
	}
}

1707 
xfs_ext_úec_t
 *

1708 
	$xfs_õxt_bno_to_úec
(

1709 
xfs_if‹k_t
 *
iÂ
,

1710 
xfs_fûeoff_t
 
bno
,

1711 *
îp_idxp
)

1713 
xfs_ext_úec_t
 *
îp
 = 
NULL
;

1714 
xfs_ext_úec_t
 *
îp_√xt
;

1715 
îp_idx
;

1716 
∆i°s
;

1717 
high
;

1718 
low
;

1720 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1721 
∆i°s
 = 
iÂ
->
if_ªÆ_byãs
 / 
XFS_IEXT_BUFSZ
;

1722 
îp_idx
 = 0;

1723 
low
 = 0;

1724 
high
 = 
∆i°s
 - 1;

1725 
low
 <
high
) {

1726 
îp_idx
 = (
low
 + 
high
) >> 1;

1727 
îp
 = &
iÂ
->
if_u1
.
if_ext_úec
[
îp_idx
];

1728 
îp_√xt
 = 
îp_idx
 < 
∆i°s
 - 1 ? 
îp
 + 1 : 
NULL
;

1729 i‡(
bno
 < 
	`xfs_bmbt_gë_°¨toff
(
îp
->
î_extbuf
)) {

1730 
high
 = 
îp_idx
 - 1;

1731 } i‡(
îp_√xt
 && 
bno
 >=

1732 
	`xfs_bmbt_gë_°¨toff
(
îp_√xt
->
î_extbuf
)) {

1733 
low
 = 
îp_idx
 + 1;

1738 *
îp_idxp
 = 
îp_idx
;

1739  
îp
;

1740 
	}
}

1748 
xfs_ext_úec_t
 *

1749 
	$xfs_õxt_idx_to_úec
(

1750 
xfs_if‹k_t
 *
iÂ
,

1751 
xfs_exäum_t
 *
idxp
,

1752 *
îp_idxp
,

1753 
ªÆloc
)

1755 
xfs_ext_úec_t
 *
¥ev
;

1756 
xfs_ext_úec_t
 *
îp
 = 
NULL
;

1757 
îp_idx
;

1758 
∆i°s
;

1759 
high
;

1760 
low
;

1761 
xfs_exäum_t
 
∑ge_idx
 = *
idxp
;

1763 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1764 
	`ASSERT
(
∑ge_idx
 >= 0);

1765 
	`ASSERT
(
∑ge_idx
 <
	`xfs_õxt_cou¡
(
iÂ
));

1766 
	`ASSERT
(
∑ge_idx
 < 
	`xfs_õxt_cou¡
(
iÂ
Ë|| 
ªÆloc
);

1768 
∆i°s
 = 
iÂ
->
if_ªÆ_byãs
 / 
XFS_IEXT_BUFSZ
;

1769 
îp_idx
 = 0;

1770 
low
 = 0;

1771 
high
 = 
∆i°s
 - 1;

1774 
low
 <
high
) {

1775 
îp_idx
 = (
low
 + 
high
) >> 1;

1776 
îp
 = &
iÂ
->
if_u1
.
if_ext_úec
[
îp_idx
];

1777 
¥ev
 = 
îp_idx
 > 0 ? 
îp
 - 1 : 
NULL
;

1778 i‡(
∑ge_idx
 < 
îp
->
î_extoff
 || (page_idx ==Érp->er_extoff &&

1779 
ªÆloc
 && 
¥ev
 &&Öªv->
î_extcou¡
 < 
XFS_LINEAR_EXTS
)) {

1780 
high
 = 
îp_idx
 - 1;

1781 } i‡(
∑ge_idx
 > 
îp
->
î_extoff
 +ÉΩ->
î_extcou¡
 ||

1782 (
∑ge_idx
 =
îp
->
î_extoff
 +ÉΩ->
î_extcou¡
 &&

1783 !
ªÆloc
)) {

1784 
low
 = 
îp_idx
 + 1;

1785 } i‡(
∑ge_idx
 =
îp
->
î_extoff
 +ÉΩ->
î_extcou¡
 &&

1786 
îp
->
î_extcou¡
 =
XFS_LINEAR_EXTS
) {

1787 
	`ASSERT
(
ªÆloc
);

1788 
∑ge_idx
 = 0;

1789 
îp_idx
++;

1790 
îp
 = 
îp_idx
 < 
∆i°s
 ?ÉΩ + 1 : 
NULL
;

1793 
∑ge_idx
 -
îp
->
î_extoff
;

1797 *
idxp
 = 
∑ge_idx
;

1798 *
îp_idxp
 = 
îp_idx
;

1799  
îp
;

1800 
	}
}

1807 
	$xfs_õxt_úec_öô
(

1808 
xfs_if‹k_t
 *
iÂ
)

1810 
xfs_ext_úec_t
 *
îp
;

1811 
xfs_exäum_t
 
√xã¡s
;

1813 
	`ASSERT
(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
));

1814 
√xã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

1815 
	`ASSERT
(
√xã¡s
 <
XFS_LINEAR_EXTS
);

1817 
îp
 = 
	`kmem_Æloc
((
xfs_ext_úec_t
), 
KM_NOFS
);

1819 i‡(
√xã¡s
 == 0) {

1820 
iÂ
->
if_u1
.
if_exã¡s
 = 
	`kmem_Æloc
(
XFS_IEXT_BUFSZ
, 
KM_NOFS
);

1821 } i‡(!
iÂ
->
if_ªÆ_byãs
) {

1822 
	`xfs_õxt_ölöe_to_dúe˘
(
iÂ
, 
XFS_IEXT_BUFSZ
);

1823 } i‡(
iÂ
->
if_ªÆ_byãs
 < 
XFS_IEXT_BUFSZ
) {

1824 
	`xfs_õxt_ªÆloc_dúe˘
(
iÂ
, 
XFS_IEXT_BUFSZ
);

1826 
îp
->
î_extbuf
 = 
iÂ
->
if_u1
.
if_exã¡s
;

1827 
îp
->
î_extcou¡
 = 
√xã¡s
;

1828 
îp
->
î_extoff
 = 0;

1830 
iÂ
->
if_Êags
 |
XFS_IFEXTIREC
;

1831 
iÂ
->
if_ªÆ_byãs
 = 
XFS_IEXT_BUFSZ
;

1832 
iÂ
->
if_byãs
 = 
√xã¡s
 * (
xfs_bmbt_ªc_t
);

1833 
iÂ
->
if_u1
.
if_ext_úec
 = 
îp
;

1836 
	}
}

1841 
xfs_ext_úec_t
 *

1842 
	$xfs_õxt_úec_√w
(

1843 
xfs_if‹k_t
 *
iÂ
,

1844 
îp_idx
)

1846 
xfs_ext_úec_t
 *
îp
;

1847 
i
;

1848 
∆i°s
;

1850 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1851 
∆i°s
 = 
iÂ
->
if_ªÆ_byãs
 / 
XFS_IEXT_BUFSZ
;

1854 
	`xfs_õxt_ªÆloc_ödúe˘
(
iÂ
, ++
∆i°s
 *

1855 (
xfs_ext_úec_t
));

1860 
îp
 = 
iÂ
->
if_u1
.
if_ext_úec
;

1861 
i
 = 
∆i°s
 - 1; i > 
îp_idx
; i--) {

1862 
	`memmove
(&
îp
[
i
], &îp[i-1], (
xfs_ext_úec_t
));

1864 
	`ASSERT
(
i
 =
îp_idx
);

1867 
îp
 = 
iÂ
->
if_u1
.
if_ext_úec
;

1868 
îp
[
îp_idx
].
î_extbuf
 = 
	`kmem_Æloc
(
XFS_IEXT_BUFSZ
, 
KM_NOFS
);

1869 
iÂ
->
if_ªÆ_byãs
 = 
∆i°s
 * 
XFS_IEXT_BUFSZ
;

1870 
	`mem£t
(
îp
[
îp_idx
].
î_extbuf
, 0, 
XFS_IEXT_BUFSZ
);

1871 
îp
[
îp_idx
].
î_extcou¡
 = 0;

1872 
îp
[
îp_idx
].
î_extoff
 =Érp_idx > 0 ?

1873 
îp
[
îp_idx
-1].
î_extoff
 +ÉΩ[îp_idx-1].
î_extcou¡
 : 0;

1874  (&
îp
[
îp_idx
]);

1875 
	}
}

1881 
	$xfs_õxt_úec_ªmove
(

1882 
xfs_if‹k_t
 *
iÂ
,

1883 
îp_idx
)

1885 
xfs_ext_úec_t
 *
îp
;

1886 
i
;

1887 
∆i°s
;

1889 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1890 
∆i°s
 = 
iÂ
->
if_ªÆ_byãs
 / 
XFS_IEXT_BUFSZ
;

1891 
îp
 = &
iÂ
->
if_u1
.
if_ext_úec
[
îp_idx
];

1892 i‡(
îp
->
î_extbuf
) {

1893 
	`xfs_õxt_úec_upd©e_extoffs
(
iÂ
, 
îp_idx
 + 1,

1894 -
îp
->
î_extcou¡
);

1895 
	`kmem_‰ì
(
îp
->
î_extbuf
);

1898 
îp
 = 
iÂ
->
if_u1
.
if_ext_úec
;

1899 
i
 = 
îp_idx
; i < 
∆i°s
 - 1; i++) {

1900 
	`memmove
(&
îp
[
i
], &îp[i+1], (
xfs_ext_úec_t
));

1909 i‡(--
∆i°s
) {

1910 
	`xfs_õxt_ªÆloc_ödúe˘
(
iÂ
,

1911 
∆i°s
 * (
xfs_ext_úec_t
));

1913 
	`kmem_‰ì
(
iÂ
->
if_u1
.
if_ext_úec
);

1915 
iÂ
->
if_ªÆ_byãs
 = 
∆i°s
 * 
XFS_IEXT_BUFSZ
;

1916 
	}
}

1930 
	$xfs_õxt_úec_com∑˘
(

1931 
xfs_if‹k_t
 *
iÂ
)

1933 
xfs_exäum_t
 
√xã¡s
;

1934 
∆i°s
;

1936 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1937 
∆i°s
 = 
iÂ
->
if_ªÆ_byãs
 / 
XFS_IEXT_BUFSZ
;

1938 
√xã¡s
 = 
	`xfs_õxt_cou¡
(
iÂ
);

1940 i‡(
√xã¡s
 == 0) {

1941 
	`xfs_õxt_de°roy
(
iÂ
);

1942 } i‡(
√xã¡s
 <
XFS_INLINE_EXTS
) {

1943 
	`xfs_õxt_ödúe˘_to_dúe˘
(
iÂ
);

1944 
	`xfs_õxt_dúe˘_to_ölöe
(
iÂ
, 
√xã¡s
);

1945 } i‡(
√xã¡s
 <
XFS_LINEAR_EXTS
) {

1946 
	`xfs_õxt_ödúe˘_to_dúe˘
(
iÂ
);

1947 } i‡(
√xã¡s
 < (
∆i°s
 * 
XFS_LINEAR_EXTS
) >> 1) {

1948 
	`xfs_õxt_úec_com∑˘_∑ges
(
iÂ
);

1950 
	}
}

1956 
	$xfs_õxt_úec_com∑˘_∑ges
(

1957 
xfs_if‹k_t
 *
iÂ
)

1959 
xfs_ext_úec_t
 *
îp
, *
îp_√xt
;

1960 
îp_idx
 = 0;

1961 
∆i°s
;

1963 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

1964 
∆i°s
 = 
iÂ
->
if_ªÆ_byãs
 / 
XFS_IEXT_BUFSZ
;

1965 
îp_idx
 < 
∆i°s
 - 1) {

1966 
îp
 = &
iÂ
->
if_u1
.
if_ext_úec
[
îp_idx
];

1967 
îp_√xt
 = 
îp
 + 1;

1968 i‡(
îp_√xt
->
î_extcou¡
 <=

1969 (
XFS_LINEAR_EXTS
 - 
îp
->
î_extcou¡
)) {

1970 
	`mem˝y
(&
îp
->
î_extbuf
[îp->
î_extcou¡
],

1971 
îp_√xt
->
î_extbuf
,ÉΩ_√xt->
î_extcou¡
 *

1972 (
xfs_bmbt_ªc_t
));

1973 
îp
->
î_extcou¡
 +
îp_√xt
->er_extcount;

1979 
	`kmem_‰ì
(
îp_√xt
->
î_extbuf
);

1980 
îp_√xt
->
î_extbuf
 = 
NULL
;

1981 
	`xfs_õxt_úec_ªmove
(
iÂ
, 
îp_idx
 + 1);

1982 
∆i°s
 = 
iÂ
->
if_ªÆ_byãs
 / 
XFS_IEXT_BUFSZ
;

1984 
îp_idx
++;

1987 
	}
}

1997 
	$xfs_õxt_úec_upd©e_extoffs
(

1998 
xfs_if‹k_t
 *
iÂ
,

1999 
îp_idx
,

2000 
ext_diff
)

2002 
i
;

2003 
∆i°s
;

2005 
	`ASSERT
(
iÂ
->
if_Êags
 & 
XFS_IFEXTIREC
);

2006 
∆i°s
 = 
iÂ
->
if_ªÆ_byãs
 / 
XFS_IEXT_BUFSZ
;

2007 
i
 = 
îp_idx
; i < 
∆i°s
; i++) {

2008 
iÂ
->
if_u1
.
if_ext_úec
[
i
].
î_extoff
 +
ext_diff
;

2010 
	}
}

2016 
	$xfs_if‹k_öô_cow
(

2017 
xfs_öode
 *
ù
)

2019 i‡(
ù
->
i_cowÂ
)

2022 
ù
->
i_cowÂ
 = 
	`kmem_z⁄e_zÆloc
(
xfs_if‹k_z⁄e
,

2023 
KM_SLEEP
 | 
KM_NOFS
);

2024 
ù
->
i_cowÂ
->
if_Êags
 = 
XFS_IFEXTENTS
;

2025 
ù
->
i_cf‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

2026 
ù
->
i_˙exã¡s
 = 0;

2027 
	}
}

2040 
boﬁ


2041 
	$xfs_õxt_lookup_exã¡
(

2042 
xfs_öode
 *
ù
,

2043 
xfs_if‹k
 *
iÂ
,

2044 
xfs_fûeoff_t
 
bno
,

2045 
xfs_exäum_t
 *
idxp
,

2046 
xfs_bmbt_úec
 *
gŸp
)

2048 
xfs_bmbt_ªc_ho°
 *
ï
;

2050 
	`XFS_STATS_INC
(
ù
->
i_mou¡
, 
xs_look_exli°
);

2052 
ï
 = 
	`xfs_õxt_bno_to_ext
(
iÂ
, 
bno
, 
idxp
);

2053 i‡(!
ï
)

2054  
Ál£
;

2055 
	`xfs_bmbt_gë_Æl
(
ï
, 
gŸp
);

2056  
åue
;

2057 
	}
}

2063 
boﬁ


2064 
	$xfs_õxt_gë_exã¡
(

2065 
xfs_if‹k
 *
iÂ
,

2066 
xfs_exäum_t
 
idx
,

2067 
xfs_bmbt_úec
 *
gŸp
)

2069 i‡(
idx
 < 0 || idx >
	`xfs_õxt_cou¡
(
iÂ
))

2070  
Ál£
;

2071 
	`xfs_bmbt_gë_Æl
(
	`xfs_õxt_gë_ext
(
iÂ
, 
idx
), 
gŸp
);

2072  
åue
;

2073 
	}
}

	@libxfs/xfs_inode_fork.h

18 #i‚def 
__XFS_INODE_FORK_H__


19 
	#__XFS_INODE_FORK_H__


	)

21 
	gxfs_öode_log_ôem
;

22 
	gxfs_döode
;

43 
	sxfs_ext_úec
 {

44 
xfs_bmbt_ªc_ho°_t
 *
	mî_extbuf
;

45 
xfs_exäum_t
 
	mî_extoff
;

46 
xfs_exäum_t
 
	mî_extcou¡
;

47 } 
	txfs_ext_úec_t
;

52 
	#XFS_IEXT_BUFSZ
 4096

	)

53 
	#XFS_LINEAR_EXTS
 (
XFS_IEXT_BUFSZ
 / (
uöt
)(
xfs_bmbt_ªc_t
))

	)

54 
	#XFS_INLINE_EXTS
 2

	)

55 
	#XFS_INLINE_DATA
 32

	)

56 
	sxfs_if‹k
 {

57 
	mif_byãs
;

58 
	mif_ªÆ_byãs
;

59 
xfs_båì_block
 *
	mif_broŸ
;

60 
	mif_broŸ_byãs
;

61 
	mif_Êags
;

63 
xfs_bmbt_ªc_ho°_t
 *
	mif_exã¡s
;

64 
xfs_ext_úec_t
 *
	mif_ext_úec
;

65 *
	mif_d©a
;

66 } 
	mif_u1
;

68 
xfs_bmbt_ªc_ho°_t
 
	mif_ölöe_ext
[
XFS_INLINE_EXTS
];

70 
	mif_ölöe_d©a
[
XFS_INLINE_DATA
];

72 
xfs_dev_t
 
	mif_rdev
;

73 
uuid_t
 
	mif_uuid
;

74 } 
	mif_u2
;

75 } 
	txfs_if‹k_t
;

80 
	#XFS_IFINLINE
 0x01

	)

81 
	#XFS_IFEXTENTS
 0x02

	)

82 
	#XFS_IFBROOT
 0x04

	)

83 
	#XFS_IFEXTIREC
 0x08

	)

89 
	#XFS_IFORK_Q
(
ù
Ë((ù)->
i_d
.
di_f‹koff
 !0)

	)

90 
	#XFS_IFORK_BOFF
(
ù
Ë(()((ù)->
i_d
.
di_f‹koff
 << 3))

	)

92 
	#XFS_IFORK_PTR
(
ù
,
w
) \

93 ((
w
Ë=
XFS_DATA_FORK
 ? \

94 &(
ù
)->
i_df
 : \

95 ((
w
Ë=
XFS_ATTR_FORK
 ? \

96 (
ù
)->
i_aÂ
 : \

97 (
ù
)->
i_cowÂ
))

	)

98 
	#XFS_IFORK_DSIZE
(
ù
) \

99 (
	`XFS_IFORK_Q
(
ù
) ? \

100 
	`XFS_IFORK_BOFF
(
ù
) : \

101 
	`XFS_LITINO
((
ù
)->
i_mou¡
, (ù)->
i_d
.
di_vîsi⁄
))

	)

102 
	#XFS_IFORK_ASIZE
(
ù
) \

103 (
	`XFS_IFORK_Q
(
ù
) ? \

104 
	`XFS_LITINO
((
ù
)->
i_mou¡
, (ù)->
i_d
.
di_vîsi⁄
) - \

105 
	`XFS_IFORK_BOFF
(
ù
) : \

106 0)

	)

107 
	#XFS_IFORK_SIZE
(
ù
,
w
) \

108 ((
w
Ë=
XFS_DATA_FORK
 ? \

109 
	`XFS_IFORK_DSIZE
(
ù
) : \

110 ((
w
Ë=
XFS_ATTR_FORK
 ? \

111 
	`XFS_IFORK_ASIZE
(
ù
) : \

112 0))

	)

113 
	#XFS_IFORK_FORMAT
(
ù
,
w
) \

114 ((
w
Ë=
XFS_DATA_FORK
 ? \

115 (
ù
)->
i_d
.
di_f‹m©
 : \

116 ((
w
Ë=
XFS_ATTR_FORK
 ? \

117 (
ù
)->
i_d
.
di_af‹m©
 : \

118 (
ù
)->
i_cf‹m©
))

	)

119 
	#XFS_IFORK_FMT_SET
(
ù
,
w
,
n
) \

120 ((
w
Ë=
XFS_DATA_FORK
 ? \

121 ((
ù
)->
i_d
.
di_f‹m©
 = (
n
)) : \

122 ((
w
Ë=
XFS_ATTR_FORK
 ? \

123 ((
ù
)->
i_d
.
di_af‹m©
 = (
n
)) : \

124 ((
ù
)->
i_cf‹m©
 = (
n
))))

	)

125 
	#XFS_IFORK_NEXTENTS
(
ù
,
w
) \

126 ((
w
Ë=
XFS_DATA_FORK
 ? \

127 (
ù
)->
i_d
.
di_√xã¡s
 : \

128 ((
w
Ë=
XFS_ATTR_FORK
 ? \

129 (
ù
)->
i_d
.
di_™exã¡s
 : \

130 (
ù
)->
i_˙exã¡s
))

	)

131 
	#XFS_IFORK_NEXT_SET
(
ù
,
w
,
n
) \

132 ((
w
Ë=
XFS_DATA_FORK
 ? \

133 ((
ù
)->
i_d
.
di_√xã¡s
 = (
n
)) : \

134 ((
w
Ë=
XFS_ATTR_FORK
 ? \

135 ((
ù
)->
i_d
.
di_™exã¡s
 = (
n
)) : \

136 ((
ù
)->
i_˙exã¡s
 = (
n
))))

	)

137 
	#XFS_IFORK_MAXEXT
(
ù
, 
w
) \

138 (
	`XFS_IFORK_SIZE
(
ù
, 
w
Ë/ (
xfs_bmbt_ªc_t
))

	)

140 
xfs_if‹k
 *
xfs_õxt_°©e_to_f‹k
(
xfs_öode
 *
ù
, 
°©e
);

142 
xfs_if‹m©_f‹k
(
xfs_öode
 *, 
xfs_döode
 *);

143 
xfs_iÊush_f‹k
(
xfs_öode
 *, 
xfs_döode
 *,

144 
xfs_öode_log_ôem
 *, );

145 
xfs_ide°roy_f‹k
(
xfs_öode
 *, );

146 
xfs_id©a_ªÆloc
(
xfs_öode
 *, , );

147 
xfs_úoŸ_ªÆloc
(
xfs_öode
 *, , );

148 
xfs_úód_exã¡s
(
xfs_å™s
 *, 
xfs_öode
 *, );

149 
xfs_õxã¡s_c›y
(
xfs_öode
 *, 
xfs_bmbt_ªc
 *,

151 
xfs_öô_loˇl_f‹k
(
xfs_öode
 *, , const *, );

153 
xfs_bmbt_ªc_ho°
 *

154 
xfs_õxt_gë_ext
(
xfs_if‹k
 *, 
xfs_exäum_t
);

155 
xfs_exäum_t
 
xfs_õxt_cou¡
(
xfs_if‹k
 *);

156 
xfs_õxt_ö£π
(
xfs_öode
 *, 
xfs_exäum_t
, xfs_extnum_t,

157 
xfs_bmbt_úec
 *, );

158 
xfs_õxt_add
(
xfs_if‹k
 *, 
xfs_exäum_t
, );

159 
xfs_õxt_add_ödúe˘_mu…i
(
xfs_if‹k
 *, ,

160 
xfs_exäum_t
, );

161 
xfs_õxt_ªmove
(
xfs_öode
 *, 
xfs_exäum_t
, , );

162 
xfs_õxt_ªmove_ölöe
(
xfs_if‹k
 *, 
xfs_exäum_t
, );

163 
xfs_õxt_ªmove_dúe˘
(
xfs_if‹k
 *, 
xfs_exäum_t
, );

164 
xfs_õxt_ªmove_ödúe˘
(
xfs_if‹k
 *, 
xfs_exäum_t
, );

165 
xfs_õxt_ªÆloc_dúe˘
(
xfs_if‹k
 *, );

166 
xfs_õxt_dúe˘_to_ölöe
(
xfs_if‹k
 *, 
xfs_exäum_t
);

167 
xfs_õxt_ölöe_to_dúe˘
(
xfs_if‹k
 *, );

168 
xfs_õxt_de°roy
(
xfs_if‹k
 *);

169 
xfs_bmbt_ªc_ho°
 *

170 
xfs_õxt_bno_to_ext
(
xfs_if‹k
 *, 
xfs_fûeoff_t
, *);

171 
xfs_ext_úec
 *

172 
xfs_õxt_bno_to_úec
(
xfs_if‹k
 *, 
xfs_fûeoff_t
, *);

173 
xfs_ext_úec
 *

174 
xfs_õxt_idx_to_úec
(
xfs_if‹k
 *, 
xfs_exäum_t
 *, *,

176 
xfs_õxt_úec_öô
(
xfs_if‹k
 *);

177 
xfs_ext_úec
 *

178 
xfs_õxt_úec_√w
(
xfs_if‹k
 *, );

179 
xfs_õxt_úec_ªmove
(
xfs_if‹k
 *, );

180 
xfs_õxt_úec_com∑˘
(
xfs_if‹k
 *);

181 
xfs_õxt_úec_com∑˘_∑ges
(
xfs_if‹k
 *);

182 
xfs_õxt_úec_com∑˘_fuŒ
(
xfs_if‹k
 *);

183 
xfs_õxt_úec_upd©e_extoffs
(
xfs_if‹k
 *, , );

185 
boﬁ
 
xfs_õxt_lookup_exã¡
(
xfs_öode
 *
ù
,

186 
xfs_if‹k
 *
iÂ
, 
xfs_fûeoff_t
 
bno
,

187 
xfs_exäum_t
 *
idxp
, 
xfs_bmbt_úec
 *
gŸp
);

188 
boﬁ
 
xfs_õxt_gë_exã¡
(
xfs_if‹k
 *
iÂ
, 
xfs_exäum_t
 
idx
,

189 
xfs_bmbt_úec
 *
gŸp
);

191 
kmem_z⁄e
 *
xfs_if‹k_z⁄e
;

193 
xfs_if‹k_öô_cow
(
xfs_öode
 *
ù
);

	@libxfs/xfs_log_format.h

18 #i‚def 
__XFS_LOG_FORMAT_H__


19 
	#__XFS_LOG_FORMAT_H__


	)

21 
	gxfs_mou¡
;

22 
	gxfs_å™s_ªs
;

34 
__uöt32_t
 
	txlog_tid_t
;

36 
	#XLOG_MIN_ICLOGS
 2

	)

37 
	#XLOG_MAX_ICLOGS
 8

	)

38 
	#XLOG_HEADER_MAGIC_NUM
 0xFEEDbabê

	)

39 
	#XLOG_VERSION_1
 1

	)

40 
	#XLOG_VERSION_2
 2

	)

41 
	#XLOG_VERSION_OKBITS
 (
XLOG_VERSION_1
 | 
XLOG_VERSION_2
)

	)

42 
	#XLOG_MIN_RECORD_BSIZE
 (16*1024Ë

	)

43 
	#XLOG_BIG_RECORD_BSIZE
 (32*1024Ë

	)

44 
	#XLOG_MAX_RECORD_BSIZE
 (256*1024)

	)

45 
	#XLOG_HEADER_CYCLE_SIZE
 (32*1024Ë

	)

46 
	#XLOG_MIN_RECORD_BSHIFT
 14

	)

47 
	#XLOG_BIG_RECORD_BSHIFT
 15

	)

48 
	#XLOG_MAX_RECORD_BSHIFT
 18

	)

49 
	#XLOG_BTOLSUNIT
(
log
, 
b
Ë(((b)+÷og)->
l_mp
->
m_sb
.
sb_logsunô
-1) / \

50 (
log
)->
l_mp
->
m_sb
.
sb_logsunô
)

	)

51 
	#XLOG_LSUNITTOB
(
log
, 
su
Ë((suË* (log)->
l_mp
->
m_sb
.
sb_logsunô
)

	)

53 
	#XLOG_HEADER_SIZE
 512

	)

56 
	#XFS_MIN_LOG_FACTOR
 3

	)

58 
	#XLOG_REC_SHIFT
(
log
) \

59 
	`BTOBB
(1 << (
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
log
->
l_mp
->
m_sb
) ? \

60 
XLOG_MAX_RECORD_BSHIFT
 : 
XLOG_BIG_RECORD_BSHIFT
))

	)

61 
	#XLOG_TOTAL_REC_SHIFT
(
log
) \

62 
	`BTOBB
(
XLOG_MAX_ICLOGS
 << (
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
log
->
l_mp
->
m_sb
) ? \

63 
XLOG_MAX_RECORD_BSHIFT
 : 
XLOG_BIG_RECORD_BSHIFT
))

	)

66 
	#CYCLE_LSN
(
l¢
Ë((
uöt
)(÷¢)>>32))

	)

67 
	#BLOCK_LSN
(
l¢
Ë((
uöt
)÷¢))

	)

70 
	#CYCLE_LSN_DISK
(
l¢
Ë(((
__be32
 *)&÷¢))[0])

	)

72 
ölöe
 
xfs_l¢_t
 
	$xlog_assign_l¢
(
uöt
 
cy˛e
, uöà
block
)

74  ((
xfs_l¢_t
)
cy˛e
 << 32Ë| 
block
;

75 
	}
}

77 
ölöe
 
uöt
 
	$xlog_gë_cy˛e
(*
±r
)

79 i‡(
	`be32_to_˝u
(*(
__be32
 *)
±r
Ë=
XLOG_HEADER_MAGIC_NUM
)

80  
	`be32_to_˝u
(*((
__be32
 *)
±r
 + 1));

82  
	`be32_to_˝u
(*(
__be32
 *)
±r
);

83 
	}
}

86 
	#XFS_TRANSACTION
 0x69

	)

87 
	#XFS_VOLUME
 0x2

	)

88 
	#XFS_LOG
 0xØ

	)

90 
	#XLOG_UNMOUNT_TYPE
 0x556ê

	)

93 
	#XLOG_REG_TYPE_BFORMAT
 1

	)

94 
	#XLOG_REG_TYPE_BCHUNK
 2

	)

95 
	#XLOG_REG_TYPE_EFI_FORMAT
 3

	)

96 
	#XLOG_REG_TYPE_EFD_FORMAT
 4

	)

97 
	#XLOG_REG_TYPE_IFORMAT
 5

	)

98 
	#XLOG_REG_TYPE_ICORE
 6

	)

99 
	#XLOG_REG_TYPE_IEXT
 7

	)

100 
	#XLOG_REG_TYPE_IBROOT
 8

	)

101 
	#XLOG_REG_TYPE_ILOCAL
 9

	)

102 
	#XLOG_REG_TYPE_IATTR_EXT
 10

	)

103 
	#XLOG_REG_TYPE_IATTR_BROOT
 11

	)

104 
	#XLOG_REG_TYPE_IATTR_LOCAL
 12

	)

105 
	#XLOG_REG_TYPE_QFORMAT
 13

	)

106 
	#XLOG_REG_TYPE_DQUOT
 14

	)

107 
	#XLOG_REG_TYPE_QUOTAOFF
 15

	)

108 
	#XLOG_REG_TYPE_LRHEADER
 16

	)

109 
	#XLOG_REG_TYPE_UNMOUNT
 17

	)

110 
	#XLOG_REG_TYPE_COMMIT
 18

	)

111 
	#XLOG_REG_TYPE_TRANSHDR
 19

	)

112 
	#XLOG_REG_TYPE_ICREATE
 20

	)

113 
	#XLOG_REG_TYPE_RUI_FORMAT
 21

	)

114 
	#XLOG_REG_TYPE_RUD_FORMAT
 22

	)

115 
	#XLOG_REG_TYPE_CUI_FORMAT
 23

	)

116 
	#XLOG_REG_TYPE_CUD_FORMAT
 24

	)

117 
	#XLOG_REG_TYPE_BUI_FORMAT
 25

	)

118 
	#XLOG_REG_TYPE_BUD_FORMAT
 26

	)

119 
	#XLOG_REG_TYPE_MAX
 26

	)

132 
	#XLOG_START_TRANS
 0x01

	)

133 
	#XLOG_COMMIT_TRANS
 0x02

	)

134 
	#XLOG_CONTINUE_TRANS
 0x04

	)

135 
	#XLOG_WAS_CONT_TRANS
 0x08

	)

136 
	#XLOG_END_TRANS
 0x10

	)

137 
	#XLOG_UNMOUNT_TRANS
 0x20

	)

140 
	sxlog_›_hódî
 {

141 
__be32
 
	moh_tid
;

142 
__be32
 
	moh_Àn
;

143 
__u8
 
	moh_˛õ¡id
;

144 
__u8
 
	moh_Êags
;

145 
__u16
 
	moh_ªs2
;

146 } 
	txlog_›_hódî_t
;

149 
	#XLOG_FMT_UNKNOWN
 0

	)

150 
	#XLOG_FMT_LINUX_LE
 1

	)

151 
	#XLOG_FMT_LINUX_BE
 2

	)

152 
	#XLOG_FMT_IRIX_BE
 3

	)

155 #ifde‡
XFS_NATIVE_HOST


156 
	#XLOG_FMT
 
XLOG_FMT_LINUX_BE


	)

158 
	#XLOG_FMT
 
XLOG_FMT_LINUX_LE


	)

161 
	sxlog_ªc_hódî
 {

162 
__be32
 
	mh_magi˙o
;

163 
__be32
 
	mh_cy˛e
;

164 
__be32
 
	mh_vîsi⁄
;

165 
__be32
 
	mh_Àn
;

166 
__be64
 
	mh_l¢
;

167 
__be64
 
	mh_èû_l¢
;

168 
__À32
 
	mh_¸c
;

169 
__be32
 
	mh_¥ev_block
;

170 
__be32
 
	mh_num_log›s
;

171 
__be32
 
	mh_cy˛e_d©a
[
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
];

173 
__be32
 
	mh_fmt
;

174 
uuid_t
 
	mh_fs_uuid
;

175 
__be32
 
	mh_size
;

176 } 
	txlog_ªc_hódî_t
;

178 
	sxlog_ªc_ext_hódî
 {

179 
__be32
 
	mxh_cy˛e
;

180 
__be32
 
	mxh_cy˛e_d©a
[
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
];

181 } 
	txlog_ªc_ext_hódî_t
;

186 
	uxlog_ö_c‹e2
 {

187 
xlog_ªc_hódî_t
 
	mhic_hódî
;

188 
xlog_ªc_ext_hódî_t
 
	mhic_xhódî
;

189 
	mhic_£˘‹
[
XLOG_HEADER_SIZE
];

190 } 
	txlog_ö_c‹e_2_t
;

193 
	sxfs_log_iovec
 {

194 *
	mi_addr
;

195 
	mi_Àn
;

196 
uöt
 
	mi_ty≥
;

197 } 
	txfs_log_iovec_t
;

211 
	sxfs_å™s_hódî
 {

212 
uöt
 
	mth_magic
;

213 
uöt
 
	mth_ty≥
;

214 
__öt32_t
 
	mth_tid
;

215 
uöt
 
	mth_num_ôems
;

216 } 
	txfs_å™s_hódî_t
;

218 
	#XFS_TRANS_HEADER_MAGIC
 0x5452414ê

	)

223 
	#XFS_TRANS_CHECKPOINT
 40

	)

228 
	#XFS_LI_EFI
 0x1236

	)

229 
	#XFS_LI_EFD
 0x1237

	)

230 
	#XFS_LI_IUNLINK
 0x1238

	)

231 
	#XFS_LI_INODE
 0x123b

	)

232 
	#XFS_LI_BUF
 0x123¯

	)

233 
	#XFS_LI_DQUOT
 0x123d

	)

234 
	#XFS_LI_QUOTAOFF
 0x123e

	)

235 
	#XFS_LI_ICREATE
 0x123f

	)

236 
	#XFS_LI_RUI
 0x1240

	)

237 
	#XFS_LI_RUD
 0x1241

	)

238 
	#XFS_LI_CUI
 0x1242

	)

239 
	#XFS_LI_CUD
 0x1243

	)

240 
	#XFS_LI_BUI
 0x1244

	)

241 
	#XFS_LI_BUD
 0x1245

	)

243 
	#XFS_LI_TYPE_DESC
 \

244 { 
XFS_LI_EFI
, "XFS_LI_EFI" }, \

245 { 
XFS_LI_EFD
, "XFS_LI_EFD" }, \

246 { 
XFS_LI_IUNLINK
, "XFS_LI_IUNLINK" }, \

247 { 
XFS_LI_INODE
, "XFS_LI_INODE" }, \

248 { 
XFS_LI_BUF
, "XFS_LI_BUF" }, \

249 { 
XFS_LI_DQUOT
, "XFS_LI_DQUOT" }, \

250 { 
XFS_LI_QUOTAOFF
, "XFS_LI_QUOTAOFF" }, \

251 { 
XFS_LI_ICREATE
, "XFS_LI_ICREATE" }, \

252 { 
XFS_LI_RUI
, "XFS_LI_RUI" }, \

253 { 
XFS_LI_RUD
, "XFS_LI_RUD" }, \

254 { 
XFS_LI_CUI
, "XFS_LI_CUI" }, \

255 { 
XFS_LI_CUD
, "XFS_LI_CUD" }, \

256 { 
XFS_LI_BUI
, "XFS_LI_BUI" }, \

257 { 
XFS_LI_BUD
, "XFS_LI_BUD" }

	)

267 
	sxfs_öode_log_f‹m©
 {

268 
__uöt16_t
 
	mûf_ty≥
;

269 
__uöt16_t
 
	mûf_size
;

270 
__uöt32_t
 
	mûf_fõlds
;

271 
__uöt16_t
 
	mûf_asize
;

272 
__uöt16_t
 
	mûf_dsize
;

273 
__uöt64_t
 
	mûf_öo
;

275 
__uöt32_t
 
	mûfu_rdev
;

276 
uuid_t
 
	mûfu_uuid
;

277 } 
	mûf_u
;

278 
__öt64_t
 
	mûf_blkno
;

279 
__öt32_t
 
	mûf_Àn
;

280 
__öt32_t
 
	mûf_boff£t
;

281 } 
	txfs_öode_log_f‹m©_t
;

283 
	sxfs_öode_log_f‹m©_32
 {

284 
__uöt16_t
 
	mûf_ty≥
;

285 
__uöt16_t
 
	mûf_size
;

286 
__uöt32_t
 
	mûf_fõlds
;

287 
__uöt16_t
 
	mûf_asize
;

288 
__uöt16_t
 
	mûf_dsize
;

289 
__uöt64_t
 
	mûf_öo
;

291 
__uöt32_t
 
	mûfu_rdev
;

292 
uuid_t
 
	mûfu_uuid
;

293 } 
	mûf_u
;

294 
__öt64_t
 
	mûf_blkno
;

295 
__öt32_t
 
	mûf_Àn
;

296 
__öt32_t
 
	mûf_boff£t
;

297 } 
	t__©åibuã__
((
	t∑cked
)Ë
	txfs_öode_log_f‹m©_32_t
;

299 
	sxfs_öode_log_f‹m©_64
 {

300 
__uöt16_t
 
	mûf_ty≥
;

301 
__uöt16_t
 
	mûf_size
;

302 
__uöt32_t
 
	mûf_fõlds
;

303 
__uöt16_t
 
	mûf_asize
;

304 
__uöt16_t
 
	mûf_dsize
;

305 
__uöt32_t
 
	mûf_∑d
;

306 
__uöt64_t
 
	mûf_öo
;

308 
__uöt32_t
 
	mûfu_rdev
;

309 
uuid_t
 
	mûfu_uuid
;

310 } 
	mûf_u
;

311 
__öt64_t
 
	mûf_blkno
;

312 
__öt32_t
 
	mûf_Àn
;

313 
__öt32_t
 
	mûf_boff£t
;

314 } 
	txfs_öode_log_f‹m©_64_t
;

320 
	#XFS_ILOG_CORE
 0x001

	)

321 
	#XFS_ILOG_DDATA
 0x002

	)

322 
	#XFS_ILOG_DEXT
 0x004

	)

323 
	#XFS_ILOG_DBROOT
 0x008

	)

324 
	#XFS_ILOG_DEV
 0x010

	)

325 
	#XFS_ILOG_UUID
 0x020

	)

326 
	#XFS_ILOG_ADATA
 0x040

	)

327 
	#XFS_ILOG_AEXT
 0x080

	)

328 
	#XFS_ILOG_ABROOT
 0x100

	)

329 
	#XFS_ILOG_DOWNER
 0x200

	)

330 
	#XFS_ILOG_AOWNER
 0x400

	)

339 
	#XFS_ILOG_TIMESTAMP
 0x4000

	)

341 
	#XFS_ILOG_NONCORE
 (
XFS_ILOG_DDATA
 | 
XFS_ILOG_DEXT
 | \

342 
XFS_ILOG_DBROOT
 | 
XFS_ILOG_DEV
 | \

343 
XFS_ILOG_UUID
 | 
XFS_ILOG_ADATA
 | \

344 
XFS_ILOG_AEXT
 | 
XFS_ILOG_ABROOT
 | \

345 
XFS_ILOG_DOWNER
 | 
XFS_ILOG_AOWNER
)

	)

347 
	#XFS_ILOG_DFORK
 (
XFS_ILOG_DDATA
 | 
XFS_ILOG_DEXT
 | \

348 
XFS_ILOG_DBROOT
)

	)

350 
	#XFS_ILOG_AFORK
 (
XFS_ILOG_ADATA
 | 
XFS_ILOG_AEXT
 | \

351 
XFS_ILOG_ABROOT
)

	)

353 
	#XFS_ILOG_ALL
 (
XFS_ILOG_CORE
 | 
XFS_ILOG_DDATA
 | \

354 
XFS_ILOG_DEXT
 | 
XFS_ILOG_DBROOT
 | \

355 
XFS_ILOG_DEV
 | 
XFS_ILOG_UUID
 | \

356 
XFS_ILOG_ADATA
 | 
XFS_ILOG_AEXT
 | \

357 
XFS_ILOG_ABROOT
 | 
XFS_ILOG_TIMESTAMP
 | \

358 
XFS_ILOG_DOWNER
 | 
XFS_ILOG_AOWNER
)

	)

360 
ölöe
 
	$xfs_ûog_fbroŸ
(
w
)

362  (
w
 =
XFS_DATA_FORK
 ? 
XFS_ILOG_DBROOT
 : 
XFS_ILOG_ABROOT
);

363 
	}
}

365 
ölöe
 
	$xfs_ûog_„xt
(
w
)

367  (
w
 =
XFS_DATA_FORK
 ? 
XFS_ILOG_DEXT
 : 
XFS_ILOG_AEXT
);

368 
	}
}

370 
ölöe
 
	$xfs_ûog_fd©a
(
w
)

372  (
w
 =
XFS_DATA_FORK
 ? 
XFS_ILOG_DDATA
 : 
XFS_ILOG_ADATA
);

373 
	}
}

381 
	sxfs_i˘ime°amp
 {

382 
__öt32_t
 
	mt_£c
;

383 
__öt32_t
 
	mt_n£c
;

384 } 
	txfs_i˘ime°amp_t
;

390 
	sxfs_log_döode
 {

391 
__uöt16_t
 
	mdi_magic
;

392 
__uöt16_t
 
	mdi_mode
;

393 
__öt8_t
 
	mdi_vîsi⁄
;

394 
__öt8_t
 
	mdi_f‹m©
;

395 
__uöt8_t
 
	mdi_∑d3
[2];

396 
__uöt32_t
 
	mdi_uid
;

397 
__uöt32_t
 
	mdi_gid
;

398 
__uöt32_t
 
	mdi_∆ök
;

399 
__uöt16_t
 
	mdi_¥ojid_lo
;

400 
__uöt16_t
 
	mdi_¥ojid_hi
;

401 
__uöt8_t
 
	mdi_∑d
[6];

402 
__uöt16_t
 
	mdi_Êushôî
;

403 
xfs_i˘ime°amp_t
 
	mdi_©ime
;

404 
xfs_i˘ime°amp_t
 
	mdi_mtime
;

405 
xfs_i˘ime°amp_t
 
	mdi_˘ime
;

406 
xfs_fsize_t
 
	mdi_size
;

407 
xfs_rfsblock_t
 
	mdi_nblocks
;

408 
xfs_exéí_t
 
	mdi_extsize
;

409 
xfs_exäum_t
 
	mdi_√xã¡s
;

410 
xfs_´xäum_t
 
	mdi_™exã¡s
;

411 
__uöt8_t
 
	mdi_f‹koff
;

412 
__öt8_t
 
	mdi_af‹m©
;

413 
__uöt32_t
 
	mdi_dmevmask
;

414 
__uöt16_t
 
	mdi_dm°©e
;

415 
__uöt16_t
 
	mdi_Êags
;

416 
__uöt32_t
 
	mdi_gí
;

419 
xfs_agöo_t
 
	mdi_√xt_u∆öked
;

422 
__uöt32_t
 
	mdi_¸c
;

423 
__uöt64_t
 
	mdi_ch™gecou¡
;

424 
xfs_l¢_t
 
	mdi_l¢
;

425 
__uöt64_t
 
	mdi_Êags2
;

426 
__uöt32_t
 
	mdi_cowextsize
;

427 
__uöt8_t
 
	mdi_∑d2
[12];

430 
xfs_i˘ime°amp_t
 
	mdi_¸time
;

431 
xfs_öo_t
 
	mdi_öo
;

432 
uuid_t
 
	mdi_uuid
;

437 
ölöe
 
uöt
 
	$xfs_log_döode_size
(
vîsi⁄
)

439 i‡(
vîsi⁄
 == 3)

440  (
xfs_log_döode
);

441  
	`off£tof
(
xfs_log_döode
, 
di_√xt_u∆öked
);

442 
	}
}

449 
	#XFS_BLF_CHUNK
 128

	)

450 
	#XFS_BLF_SHIFT
 7

	)

451 
	#BIT_TO_WORD_SHIFT
 5

	)

452 
	#NBWORD
 (
NBBY
 * ())

	)

458 
	#XFS_BLF_INODE_BUF
 (1<<0)

	)

464 
	#XFS_BLF_CANCEL
 (1<<1)

	)

470 
	#XFS_BLF_UDQUOT_BUF
 (1<<2)

	)

471 
	#XFS_BLF_PDQUOT_BUF
 (1<<3)

	)

472 
	#XFS_BLF_GDQUOT_BUF
 (1<<4)

	)

479 
	#XFS_BLF_DATAMAP_SIZE
 ((
XFS_MAX_BLOCKSIZE
 / 
XFS_BLF_CHUNK
Ë/ 
NBWORD
)

	)

481 
	sxfs_buf_log_f‹m©
 {

482 
	mblf_ty≥
;

483 
	mblf_size
;

484 
	mblf_Êags
;

485 
	mblf_Àn
;

486 
__öt64_t
 
	mblf_blkno
;

487 
	mblf_m≠_size
;

488 
	mblf_d©a_m≠
[
XFS_BLF_DATAMAP_SIZE
];

489 } 
	txfs_buf_log_f‹m©_t
;

499 
	#XFS_BLFT_BITS
 5

	)

500 
	#XFS_BLFT_SHIFT
 11

	)

501 
	#XFS_BLFT_MASK
 (((1 << 
XFS_BLFT_BITS
Ë- 1Ë<< 
XFS_BLFT_SHIFT
)

	)

503 
	exfs_bl·
 {

504 
	mXFS_BLFT_UNKNOWN_BUF
 = 0,

505 
	mXFS_BLFT_UDQUOT_BUF
,

506 
	mXFS_BLFT_PDQUOT_BUF
,

507 
	mXFS_BLFT_GDQUOT_BUF
,

508 
	mXFS_BLFT_BTREE_BUF
,

509 
	mXFS_BLFT_AGF_BUF
,

510 
	mXFS_BLFT_AGFL_BUF
,

511 
	mXFS_BLFT_AGI_BUF
,

512 
	mXFS_BLFT_DINO_BUF
,

513 
	mXFS_BLFT_SYMLINK_BUF
,

514 
	mXFS_BLFT_DIR_BLOCK_BUF
,

515 
	mXFS_BLFT_DIR_DATA_BUF
,

516 
	mXFS_BLFT_DIR_FREE_BUF
,

517 
	mXFS_BLFT_DIR_LEAF1_BUF
,

518 
	mXFS_BLFT_DIR_LEAFN_BUF
,

519 
	mXFS_BLFT_DA_NODE_BUF
,

520 
	mXFS_BLFT_ATTR_LEAF_BUF
,

521 
	mXFS_BLFT_ATTR_RMT_BUF
,

522 
	mXFS_BLFT_SB_BUF
,

523 
	mXFS_BLFT_RTBITMAP_BUF
,

524 
	mXFS_BLFT_RTSUMMARY_BUF
,

525 
	mXFS_BLFT_MAX_BUF
 = (1 << 
XFS_BLFT_BITS
),

528 
ölöe
 

529 
	$xfs_bl·_to_Êags
(
xfs_buf_log_f‹m©
 *
blf
, 
xfs_bl·
 
ty≥
)

531 
	`ASSERT
(
ty≥
 > 
XFS_BLFT_UNKNOWN_BUF
 &&Åy≥ < 
XFS_BLFT_MAX_BUF
);

532 
blf
->
blf_Êags
 &~
XFS_BLFT_MASK
;

533 
blf
->
blf_Êags
 |((
ty≥
 << 
XFS_BLFT_SHIFT
Ë& 
XFS_BLFT_MASK
);

534 
	}
}

536 
ölöe
 
__uöt16_t


537 
	$xfs_bl·_‰om_Êags
(
xfs_buf_log_f‹m©
 *
blf
)

539  (
blf
->
blf_Êags
 & 
XFS_BLFT_MASK
Ë>> 
XFS_BLFT_SHIFT
;

540 
	}
}

545 
	sxfs_exã¡
 {

546 
xfs_fsblock_t
 
	mext_°¨t
;

547 
xfs_exéí_t
 
	mext_Àn
;

548 } 
	txfs_exã¡_t
;

556 
	sxfs_exã¡_32
 {

557 
__uöt64_t
 
	mext_°¨t
;

558 
__uöt32_t
 
	mext_Àn
;

559 } 
	t__©åibuã__
((
	t∑cked
)Ë
	txfs_exã¡_32_t
;

561 
	sxfs_exã¡_64
 {

562 
__uöt64_t
 
	mext_°¨t
;

563 
__uöt32_t
 
	mext_Àn
;

564 
__uöt32_t
 
	mext_∑d
;

565 } 
	txfs_exã¡_64_t
;

572 
	sxfs_efi_log_f‹m©
 {

573 
__uöt16_t
 
	mefi_ty≥
;

574 
__uöt16_t
 
	mefi_size
;

575 
__uöt32_t
 
	mefi_√xã¡s
;

576 
__uöt64_t
 
	mefi_id
;

577 
xfs_exã¡_t
 
	mefi_exã¡s
[1];

578 } 
	txfs_efi_log_f‹m©_t
;

580 
	sxfs_efi_log_f‹m©_32
 {

581 
__uöt16_t
 
	mefi_ty≥
;

582 
__uöt16_t
 
	mefi_size
;

583 
__uöt32_t
 
	mefi_√xã¡s
;

584 
__uöt64_t
 
	mefi_id
;

585 
xfs_exã¡_32_t
 
	mefi_exã¡s
[1];

586 } 
	t__©åibuã__
((
	t∑cked
)Ë
	txfs_efi_log_f‹m©_32_t
;

588 
	sxfs_efi_log_f‹m©_64
 {

589 
__uöt16_t
 
	mefi_ty≥
;

590 
__uöt16_t
 
	mefi_size
;

591 
__uöt32_t
 
	mefi_√xã¡s
;

592 
__uöt64_t
 
	mefi_id
;

593 
xfs_exã¡_64_t
 
	mefi_exã¡s
[1];

594 } 
	txfs_efi_log_f‹m©_64_t
;

601 
	sxfs_efd_log_f‹m©
 {

602 
__uöt16_t
 
	mefd_ty≥
;

603 
__uöt16_t
 
	mefd_size
;

604 
__uöt32_t
 
	mefd_√xã¡s
;

605 
__uöt64_t
 
	mefd_efi_id
;

606 
xfs_exã¡_t
 
	mefd_exã¡s
[1];

607 } 
	txfs_efd_log_f‹m©_t
;

609 
	sxfs_efd_log_f‹m©_32
 {

610 
__uöt16_t
 
	mefd_ty≥
;

611 
__uöt16_t
 
	mefd_size
;

612 
__uöt32_t
 
	mefd_√xã¡s
;

613 
__uöt64_t
 
	mefd_efi_id
;

614 
xfs_exã¡_32_t
 
	mefd_exã¡s
[1];

615 } 
	t__©åibuã__
((
	t∑cked
)Ë
	txfs_efd_log_f‹m©_32_t
;

617 
	sxfs_efd_log_f‹m©_64
 {

618 
__uöt16_t
 
	mefd_ty≥
;

619 
__uöt16_t
 
	mefd_size
;

620 
__uöt32_t
 
	mefd_√xã¡s
;

621 
__uöt64_t
 
	mefd_efi_id
;

622 
xfs_exã¡_64_t
 
	mefd_exã¡s
[1];

623 } 
	txfs_efd_log_f‹m©_64_t
;

628 
	sxfs_m≠_exã¡
 {

629 
__uöt64_t
 
	mme_ow√r
;

630 
__uöt64_t
 
	mme_°¨tblock
;

631 
__uöt64_t
 
	mme_°¨toff
;

632 
__uöt32_t
 
	mme_Àn
;

633 
__uöt32_t
 
	mme_Êags
;

637 
	#XFS_RMAP_EXTENT_MAP
 1

	)

638 
	#XFS_RMAP_EXTENT_MAP_SHARED
 2

	)

639 
	#XFS_RMAP_EXTENT_UNMAP
 3

	)

640 
	#XFS_RMAP_EXTENT_UNMAP_SHARED
 4

	)

641 
	#XFS_RMAP_EXTENT_CONVERT
 5

	)

642 
	#XFS_RMAP_EXTENT_CONVERT_SHARED
 6

	)

643 
	#XFS_RMAP_EXTENT_ALLOC
 7

	)

644 
	#XFS_RMAP_EXTENT_FREE
 8

	)

645 
	#XFS_RMAP_EXTENT_TYPE_MASK
 0xFF

	)

647 
	#XFS_RMAP_EXTENT_ATTR_FORK
 (1U << 31)

	)

648 
	#XFS_RMAP_EXTENT_BMBT_BLOCK
 (1U << 30)

	)

649 
	#XFS_RMAP_EXTENT_UNWRITTEN
 (1U << 29)

	)

651 
	#XFS_RMAP_EXTENT_FLAGS
 (
XFS_RMAP_EXTENT_TYPE_MASK
 | \

652 
XFS_RMAP_EXTENT_ATTR_FORK
 | \

653 
XFS_RMAP_EXTENT_BMBT_BLOCK
 | \

654 
XFS_RMAP_EXTENT_UNWRITTEN
)

	)

661 
	sxfs_rui_log_f‹m©
 {

662 
__uöt16_t
 
	mrui_ty≥
;

663 
__uöt16_t
 
	mrui_size
;

664 
__uöt32_t
 
	mrui_√xã¡s
;

665 
__uöt64_t
 
	mrui_id
;

666 
xfs_m≠_exã¡
 
	mrui_exã¡s
[];

669 
ölöe
 
size_t


670 
	$xfs_rui_log_f‹m©_sizeof
(

671 
ƒ
)

673  (
xfs_rui_log_f‹m©
) +

674 
ƒ
 * (
xfs_m≠_exã¡
);

675 
	}
}

682 
	sxfs_rud_log_f‹m©
 {

683 
__uöt16_t
 
	mrud_ty≥
;

684 
__uöt16_t
 
	mrud_size
;

685 
__uöt32_t
 
	m__∑d
;

686 
__uöt64_t
 
	mrud_rui_id
;

692 
	sxfs_phys_exã¡
 {

693 
__uöt64_t
 
	m≥_°¨tblock
;

694 
__uöt32_t
 
	m≥_Àn
;

695 
__uöt32_t
 
	m≥_Êags
;

700 
	#XFS_REFCOUNT_EXTENT_TYPE_MASK
 0xFF

	)

702 
	#XFS_REFCOUNT_EXTENT_FLAGS
 (
XFS_REFCOUNT_EXTENT_TYPE_MASK
)

	)

709 
	sxfs_cui_log_f‹m©
 {

710 
__uöt16_t
 
	mcui_ty≥
;

711 
__uöt16_t
 
	mcui_size
;

712 
__uöt32_t
 
	mcui_√xã¡s
;

713 
__uöt64_t
 
	mcui_id
;

714 
xfs_phys_exã¡
 
	mcui_exã¡s
[];

717 
ölöe
 
size_t


718 
	$xfs_cui_log_f‹m©_sizeof
(

719 
ƒ
)

721  (
xfs_cui_log_f‹m©
) +

722 
ƒ
 * (
xfs_phys_exã¡
);

723 
	}
}

730 
	sxfs_cud_log_f‹m©
 {

731 
__uöt16_t
 
	mcud_ty≥
;

732 
__uöt16_t
 
	mcud_size
;

733 
__uöt32_t
 
	m__∑d
;

734 
__uöt64_t
 
	mcud_cui_id
;

743 
	#XFS_BMAP_EXTENT_TYPE_MASK
 0xFF

	)

745 
	#XFS_BMAP_EXTENT_ATTR_FORK
 (1U << 31)

	)

746 
	#XFS_BMAP_EXTENT_UNWRITTEN
 (1U << 30)

	)

748 
	#XFS_BMAP_EXTENT_FLAGS
 (
XFS_BMAP_EXTENT_TYPE_MASK
 | \

749 
XFS_BMAP_EXTENT_ATTR_FORK
 | \

750 
XFS_BMAP_EXTENT_UNWRITTEN
)

	)

757 
	sxfs_bui_log_f‹m©
 {

758 
__uöt16_t
 
	mbui_ty≥
;

759 
__uöt16_t
 
	mbui_size
;

760 
__uöt32_t
 
	mbui_√xã¡s
;

761 
__uöt64_t
 
	mbui_id
;

762 
xfs_m≠_exã¡
 
	mbui_exã¡s
[];

765 
ölöe
 
size_t


766 
	$xfs_bui_log_f‹m©_sizeof
(

767 
ƒ
)

769  (
xfs_bui_log_f‹m©
) +

770 
ƒ
 * (
xfs_m≠_exã¡
);

771 
	}
}

778 
	sxfs_bud_log_f‹m©
 {

779 
__uöt16_t
 
	mbud_ty≥
;

780 
__uöt16_t
 
	mbud_size
;

781 
__uöt32_t
 
	m__∑d
;

782 
__uöt64_t
 
	mbud_bui_id
;

791 
	sxfs_dq_logf‹m©
 {

792 
__uöt16_t
 
	mqlf_ty≥
;

793 
__uöt16_t
 
	mqlf_size
;

794 
xfs_dqid_t
 
	mqlf_id
;

795 
__öt64_t
 
	mqlf_blkno
;

796 
__öt32_t
 
	mqlf_Àn
;

797 
__uöt32_t
 
	mqlf_boff£t
;

798 } 
	txfs_dq_logf‹m©_t
;

808 
	sxfs_qoff_logf‹m©
 {

809 
	mqf_ty≥
;

810 
	mqf_size
;

811 
	mqf_Êags
;

812 
	mqf_∑d
[12];

813 } 
	txfs_qoff_logf‹m©_t
;

818 
	#XFS_UQUOTA_ACCT
 0x0001

	)

819 
	#XFS_UQUOTA_ENFD
 0x0002

	)

820 
	#XFS_UQUOTA_CHKD
 0x0004

	)

821 
	#XFS_PQUOTA_ACCT
 0x0008

	)

822 
	#XFS_OQUOTA_ENFD
 0x0010

	)

823 
	#XFS_OQUOTA_CHKD
 0x0020

	)

824 
	#XFS_GQUOTA_ACCT
 0x0040

	)

830 
	#XFS_GQUOTA_ENFD
 0x0080

	)

831 
	#XFS_GQUOTA_CHKD
 0x0100

	)

832 
	#XFS_PQUOTA_ENFD
 0x0200

	)

833 
	#XFS_PQUOTA_CHKD
 0x0400

	)

835 
	#XFS_ALL_QUOTA_ACCT
 \

836 (
XFS_UQUOTA_ACCT
 | 
XFS_GQUOTA_ACCT
 | 
XFS_PQUOTA_ACCT
)

	)

837 
	#XFS_ALL_QUOTA_ENFD
 \

838 (
XFS_UQUOTA_ENFD
 | 
XFS_GQUOTA_ENFD
 | 
XFS_PQUOTA_ENFD
)

	)

839 
	#XFS_ALL_QUOTA_CHKD
 \

840 (
XFS_UQUOTA_CHKD
 | 
XFS_GQUOTA_CHKD
 | 
XFS_PQUOTA_CHKD
)

	)

842 
	#XFS_MOUNT_QUOTA_ALL
 (
XFS_UQUOTA_ACCT
|
XFS_UQUOTA_ENFD
|\

843 
XFS_UQUOTA_CHKD
|
XFS_GQUOTA_ACCT
|\

844 
XFS_GQUOTA_ENFD
|
XFS_GQUOTA_CHKD
|\

845 
XFS_PQUOTA_ACCT
|
XFS_PQUOTA_ENFD
|\

846 
XFS_PQUOTA_CHKD
)

	)

855 
	sxfs_i¸óã_log
 {

856 
__uöt16_t
 
	mi˛_ty≥
;

857 
__uöt16_t
 
	mi˛_size
;

858 
__be32
 
	mi˛_ag
;

859 
__be32
 
	mi˛_agbno
;

860 
__be32
 
	mi˛_cou¡
;

861 
__be32
 
	mi˛_isize
;

862 
__be32
 
	mi˛_Àngth
;

863 
__be32
 
	mi˛_gí
;

	@libxfs/xfs_log_rlimit.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_mou¡.h
"

25 
	~"xfs_da_f‹m©.h
"

26 
	~"xfs_å™s_•a˚.h
"

27 
	~"xfs_öode.h
"

28 
	~"xfs_da_båì.h
"

29 
	~"xfs_©å_Àaf.h
"

30 
	~"xfs_bm≠_båì.h
"

36 
STATIC
 

37 
	$xfs_log_ˇlc_max_©å£tm_ªs
(

38 
xfs_mou¡
 *
mp
)

40 
size
;

41 
nblks
;

43 
size
 = 
	`xfs_©å_Àaf_ítsize_loˇl_max
(
mp
->
m_©å_geo
->
blksize
) -

44 
MAXNAMELEN
 - 1;

45 
nblks
 = 
	`XFS_DAENTER_SPACE_RES
(
mp
, 
XFS_ATTR_FORK
);

46 
nblks
 +
	`XFS_B_TO_FSB
(
mp
, 
size
);

47 
nblks
 +
	`XFS_NEXTENTADD_SPACE_RES
(
mp
, 
size
, 
XFS_ATTR_FORK
);

49  
	`M_RES
(
mp
)->
å_©å£tm
.
å_logªs
 +

50 
	`M_RES
(
mp
)->
å_©å£åt
.
å_logªs
 * 
nblks
;

51 
	}
}

58 
STATIC
 

59 
	$xfs_log_gë_max_å™s_ªs
(

60 
xfs_mou¡
 *
mp
,

61 
xfs_å™s_ªs
 *
max_ª•
)

63 
xfs_å™s_ªs
 *
ª•
;

64 
xfs_å™s_ªs
 *
íd_ª•
;

65 
log_•a˚
 = 0;

66 
©å_•a˚
;

68 
©å_•a˚
 = 
	`xfs_log_ˇlc_max_©å£tm_ªs
(
mp
);

70 
ª•
 = (
xfs_å™s_ªs
 *)
	`M_RES
(
mp
);

71 
íd_ª•
 = (
xfs_å™s_ªs
 *)(
	`M_RES
(
mp
) + 1);

72 ; 
ª•
 < 
íd_ª•
;Ñesp++) {

73 
tmp
 = 
ª•
->
å_logcou¡
 > 1 ?

74 
ª•
->
å_logªs
 *Ñe•->
å_logcou¡
 :

75 
ª•
->
å_logªs
;

76 i‡(
log_•a˚
 < 
tmp
) {

77 
log_•a˚
 = 
tmp
;

78 *
max_ª•
 = *
ª•
;

82 i‡(
©å_•a˚
 > 
log_•a˚
) {

83 *
max_ª•
 = 
	`M_RES
(
mp
)->
å_©å£tm
;

84 
max_ª•
->
å_logªs
 = 
©å_•a˚
;

86 
	}
}

95 
	$xfs_log_ˇlc_möimum_size
(

96 
xfs_mou¡
 *
mp
)

98 
xfs_å™s_ªs
 
åes
 = {0};

99 
max_logªs
;

100 
mö_logblks
 = 0;

101 
lsunô
 = 0;

103 
	`xfs_log_gë_max_å™s_ªs
(
mp
, &
åes
);

105 
max_logªs
 = 
	`xfs_log_ˇlc_unô_ªs
(
mp
, 
åes
.
å_logªs
);

106 i‡(
åes
.
å_logcou¡
 > 1)

107 
max_logªs
 *
åes
.
å_logcou¡
;

109 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
Ë&& mp->m_sb.
sb_logsunô
 > 1)

110 
lsunô
 = 
	`BTOBB
(
mp
->
m_sb
.
sb_logsunô
);

140 i‡(
lsunô
) {

141 
mö_logblks
 = 
	`roundup_64
(
	`BTOBB
(
max_logªs
), 
lsunô
) +

142 2 * 
lsunô
;

144 
mö_logblks
 = 
	`BTOBB
(
max_logªs
Ë+ 2 * 
BBSIZE
;

145 
mö_logblks
 *
XFS_MIN_LOG_FACTOR
;

147  
	`XFS_BB_TO_FSB
(
mp
, 
mö_logblks
);

148 
	}
}

	@libxfs/xfs_quota_defs.h

18 #i‚de‡
__XFS_QUOTA_DEFS_H__


19 
	#__XFS_QUOTA_DEFS_H__


	)

30 
__uöt64_t
 
	txfs_q˙t_t
;

31 
__uöt16_t
 
	txfs_qw¨n˙t_t
;

36 
	#XFS_DQ_USER
 0x0001

	)

37 
	#XFS_DQ_PROJ
 0x0002

	)

38 
	#XFS_DQ_GROUP
 0x0004

	)

39 
	#XFS_DQ_DIRTY
 0x0008

	)

40 
	#XFS_DQ_FREEING
 0x0010

	)

42 
	#XFS_DQ_ALLTYPES
 (
XFS_DQ_USER
|
XFS_DQ_PROJ
|
XFS_DQ_GROUP
)

	)

44 
	#XFS_DQ_FLAGS
 \

45 { 
XFS_DQ_USER
, "USER" }, \

46 { 
XFS_DQ_PROJ
, "PROJ" }, \

47 { 
XFS_DQ_GROUP
, "GROUP" }, \

48 { 
XFS_DQ_DIRTY
, "DIRTY" }, \

49 { 
XFS_DQ_FREEING
, "FREEING" }

	)

72 
	#XFS_DQUOT_LOGRES
(
mp
) \

73 (((
xfs_dq_logf‹m©
Ë+ (
xfs_disk_dquŸ
)Ë* 6)

	)

75 
	#XFS_IS_QUOTA_RUNNING
(
mp
Ë((mp)->
m_qÊags
 & 
XFS_ALL_QUOTA_ACCT
)

	)

76 
	#XFS_IS_UQUOTA_RUNNING
(
mp
Ë((mp)->
m_qÊags
 & 
XFS_UQUOTA_ACCT
)

	)

77 
	#XFS_IS_PQUOTA_RUNNING
(
mp
Ë((mp)->
m_qÊags
 & 
XFS_PQUOTA_ACCT
)

	)

78 
	#XFS_IS_GQUOTA_RUNNING
(
mp
Ë((mp)->
m_qÊags
 & 
XFS_GQUOTA_ACCT
)

	)

79 
	#XFS_IS_UQUOTA_ENFORCED
(
mp
Ë((mp)->
m_qÊags
 & 
XFS_UQUOTA_ENFD
)

	)

80 
	#XFS_IS_GQUOTA_ENFORCED
(
mp
Ë((mp)->
m_qÊags
 & 
XFS_GQUOTA_ENFD
)

	)

81 
	#XFS_IS_PQUOTA_ENFORCED
(
mp
Ë((mp)->
m_qÊags
 & 
XFS_PQUOTA_ENFD
)

	)

88 
	#XFS_UQUOTA_ACTIVE
 0x1000

	)

89 
	#XFS_GQUOTA_ACTIVE
 0x2000

	)

90 
	#XFS_PQUOTA_ACTIVE
 0x4000

	)

91 
	#XFS_ALL_QUOTA_ACTIVE
 \

92 (
XFS_UQUOTA_ACTIVE
 | 
XFS_GQUOTA_ACTIVE
 | 
XFS_PQUOTA_ACTIVE
)

	)

98 
	#XFS_IS_QUOTA_ON
(
mp
Ë((mp)->
m_qÊags
 & (
XFS_UQUOTA_ACTIVE
 | \

99 
XFS_GQUOTA_ACTIVE
 | \

100 
XFS_PQUOTA_ACTIVE
))

	)

101 
	#XFS_IS_UQUOTA_ON
(
mp
Ë((mp)->
m_qÊags
 & 
XFS_UQUOTA_ACTIVE
)

	)

102 
	#XFS_IS_GQUOTA_ON
(
mp
Ë((mp)->
m_qÊags
 & 
XFS_GQUOTA_ACTIVE
)

	)

103 
	#XFS_IS_PQUOTA_ON
(
mp
Ë((mp)->
m_qÊags
 & 
XFS_PQUOTA_ACTIVE
)

	)

110 
	#XFS_QMOPT_DQALLOC
 0x0000002

	)

111 
	#XFS_QMOPT_UQUOTA
 0x0000004

	)

112 
	#XFS_QMOPT_PQUOTA
 0x0000008

	)

113 
	#XFS_QMOPT_FORCE_RES
 0x0000010

	)

114 
	#XFS_QMOPT_SBVERSION
 0x0000040

	)

115 
	#XFS_QMOPT_DOWARN
 0x0000400

	)

116 
	#XFS_QMOPT_DQREPAIR
 0x0001000

	)

117 
	#XFS_QMOPT_GQUOTA
 0x0002000

	)

118 
	#XFS_QMOPT_ENOSPC
 0x0004000

	)

119 
	#XFS_QMOPT_DQNEXT
 0x0008000

	)

125 
	#XFS_QMOPT_RES_REGBLKS
 0x0010000

	)

126 
	#XFS_QMOPT_RES_RTBLKS
 0x0020000

	)

127 
	#XFS_QMOPT_BCOUNT
 0x0040000

	)

128 
	#XFS_QMOPT_ICOUNT
 0x0080000

	)

129 
	#XFS_QMOPT_RTBCOUNT
 0x0100000

	)

130 
	#XFS_QMOPT_DELBCOUNT
 0x0200000

	)

131 
	#XFS_QMOPT_DELRTBCOUNT
 0x0400000

	)

132 
	#XFS_QMOPT_RES_INOS
 0x0800000

	)

137 
	#XFS_QMOPT_INHERIT
 0x1000000

	)

142 
	#XFS_TRANS_DQ_RES_BLKS
 
XFS_QMOPT_RES_REGBLKS


	)

143 
	#XFS_TRANS_DQ_RES_RTBLKS
 
XFS_QMOPT_RES_RTBLKS


	)

144 
	#XFS_TRANS_DQ_RES_INOS
 
XFS_QMOPT_RES_INOS


	)

145 
	#XFS_TRANS_DQ_BCOUNT
 
XFS_QMOPT_BCOUNT


	)

146 
	#XFS_TRANS_DQ_DELBCOUNT
 
XFS_QMOPT_DELBCOUNT


	)

147 
	#XFS_TRANS_DQ_ICOUNT
 
XFS_QMOPT_ICOUNT


	)

148 
	#XFS_TRANS_DQ_RTBCOUNT
 
XFS_QMOPT_RTBCOUNT


	)

149 
	#XFS_TRANS_DQ_DELRTBCOUNT
 
XFS_QMOPT_DELRTBCOUNT


	)

152 
	#XFS_QMOPT_QUOTALL
 \

153 (
XFS_QMOPT_UQUOTA
 | 
XFS_QMOPT_PQUOTA
 | 
XFS_QMOPT_GQUOTA
)

	)

154 
	#XFS_QMOPT_RESBLK_MASK
 (
XFS_QMOPT_RES_REGBLKS
 | 
XFS_QMOPT_RES_RTBLKS
)

	)

156 
xfs_dqcheck
(
xfs_mou¡
 *
mp
, 
xfs_disk_dquŸ_t
 *
ddq
,

157 
xfs_dqid_t
 
id
, 
uöt
 
ty≥
, uöà
Êags
, c⁄° *
°r
);

158 
xfs_ˇlc_dquŸs_≥r_chunk
(
nbblks
);

	@libxfs/xfs_refcount.c

20 
	~"libxfs_¥iv.h
"

21 
	~"xfs_fs.h
"

22 
	~"xfs_sh¨ed.h
"

23 
	~"xfs_f‹m©.h
"

24 
	~"xfs_log_f‹m©.h
"

25 
	~"xfs_å™s_ªsv.h
"

26 
	~"xfs_sb.h
"

27 
	~"xfs_mou¡.h
"

28 
	~"xfs_de„r.h
"

29 
	~"xfs_båì.h
"

30 
	~"xfs_bm≠.h
"

31 
	~"xfs_ªfcou¡_båì.h
"

32 
	~"xfs_Æloc.h
"

33 
	~"xfs_åa˚.h
"

34 
	~"xfs_cksum.h
"

35 
	~"xfs_å™s.h
"

36 
	~"xfs_bô.h
"

37 
	~"xfs_ªfcou¡.h
"

38 
	~"xfs_rm≠.h
"

41 
	exfs_ªfc_adju°_›
 {

42 
	mXFS_REFCOUNT_ADJUST_INCREASE
 = 1,

43 
	mXFS_REFCOUNT_ADJUST_DECREASE
 = -1,

44 
	mXFS_REFCOUNT_ADJUST_COW_ALLOC
 = 0,

45 
	mXFS_REFCOUNT_ADJUST_COW_FREE
 = -1,

48 
STATIC
 
__xfs_ªfcou¡_cow_Æloc
(
xfs_båì_cur
 *
rcur
,

49 
xfs_agblock_t
 
agbno
, 
xfs_exéí_t
 
agÀn
,

50 
xfs_de„r_›s
 *
df›s
);

51 
STATIC
 
__xfs_ªfcou¡_cow_‰ì
(
xfs_båì_cur
 *
rcur
,

52 
xfs_agblock_t
 
agbno
, 
xfs_exéí_t
 
agÀn
,

53 
xfs_de„r_›s
 *
df›s
);

60 
	$xfs_ªfcou¡_lookup_À
(

61 
xfs_båì_cur
 *
cur
,

62 
xfs_agblock_t
 
bno
,

63 *
°©
)

65 
	`åa˚_xfs_ªfcou¡_lookup
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
, 
bno
,

66 
XFS_LOOKUP_LE
);

67 
cur
->
bc_ªc
.
rc
.
rc_°¨tblock
 = 
bno
;

68 
cur
->
bc_ªc
.
rc
.
rc_blockcou¡
 = 0;

69  
	`xfs_båì_lookup
(
cur
, 
XFS_LOOKUP_LE
, 
°©
);

70 
	}
}

77 
	$xfs_ªfcou¡_lookup_ge
(

78 
xfs_båì_cur
 *
cur
,

79 
xfs_agblock_t
 
bno
,

80 *
°©
)

82 
	`åa˚_xfs_ªfcou¡_lookup
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
, 
bno
,

83 
XFS_LOOKUP_GE
);

84 
cur
->
bc_ªc
.
rc
.
rc_°¨tblock
 = 
bno
;

85 
cur
->
bc_ªc
.
rc
.
rc_blockcou¡
 = 0;

86  
	`xfs_båì_lookup
(
cur
, 
XFS_LOOKUP_GE
, 
°©
);

87 
	}
}

90 
ölöe
 

91 
	$xfs_ªfcou¡_båec_to_úec
(

92 
xfs_båì_ªc
 *
ªc
,

93 
xfs_ªfcou¡_úec
 *
úec
)

95 
úec
->
rc_°¨tblock
 = 
	`be32_to_˝u
(
ªc
->
ªfc
.rc_startblock);

96 
úec
->
rc_blockcou¡
 = 
	`be32_to_˝u
(
ªc
->
ªfc
.rc_blockcount);

97 
úec
->
rc_ªfcou¡
 = 
	`be32_to_˝u
(
ªc
->
ªfc
.rc_refcount);

98 
	}
}

104 
	$xfs_ªfcou¡_gë_ªc
(

105 
xfs_båì_cur
 *
cur
,

106 
xfs_ªfcou¡_úec
 *
úec
,

107 *
°©
)

109 
xfs_båì_ªc
 *
ªc
;

110 
îr‹
;

112 
îr‹
 = 
	`xfs_båì_gë_ªc
(
cur
, &
ªc
, 
°©
);

113 i‡(!
îr‹
 && *
°©
 == 1) {

114 
	`xfs_ªfcou¡_båec_to_úec
(
ªc
, 
úec
);

115 
	`åa˚_xfs_ªfcou¡_gë
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

116 
úec
);

118  
îr‹
;

119 
	}
}

126 
STATIC
 

127 
	$xfs_ªfcou¡_upd©e
(

128 
xfs_båì_cur
 *
cur
,

129 
xfs_ªfcou¡_úec
 *
úec
)

131 
xfs_båì_ªc
 
ªc
;

132 
îr‹
;

134 
	`åa˚_xfs_ªfcou¡_upd©e
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
, 
úec
);

135 
ªc
.
ªfc
.
rc_°¨tblock
 = 
	`˝u_to_be32
(
úec
->rc_startblock);

136 
ªc
.
ªfc
.
rc_blockcou¡
 = 
	`˝u_to_be32
(
úec
->rc_blockcount);

137 
ªc
.
ªfc
.
rc_ªfcou¡
 = 
	`˝u_to_be32
(
úec
->rc_refcount);

138 
îr‹
 = 
	`xfs_båì_upd©e
(
cur
, &
ªc
);

139 i‡(
îr‹
)

140 
	`åa˚_xfs_ªfcou¡_upd©e_îr‹
(
cur
->
bc_mp
,

141 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

142  
îr‹
;

143 
	}
}

150 
STATIC
 

151 
	$xfs_ªfcou¡_ö£π
(

152 
xfs_båì_cur
 *
cur
,

153 
xfs_ªfcou¡_úec
 *
úec
,

154 *
i
)

156 
îr‹
;

158 
	`åa˚_xfs_ªfcou¡_ö£π
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
, 
úec
);

159 
cur
->
bc_ªc
.
rc
.
rc_°¨tblock
 = 
úec
->rc_startblock;

160 
cur
->
bc_ªc
.
rc
.
rc_blockcou¡
 = 
úec
->rc_blockcount;

161 
cur
->
bc_ªc
.
rc
.
rc_ªfcou¡
 = 
úec
->rc_refcount;

162 
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, 
i
);

163 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, *
i
 =1, 
out_îr‹
);

164 
out_îr‹
:

165 i‡(
îr‹
)

166 
	`åa˚_xfs_ªfcou¡_ö£π_îr‹
(
cur
->
bc_mp
,

167 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

168  
îr‹
;

169 
	}
}

177 
STATIC
 

178 
	$xfs_ªfcou¡_dñëe
(

179 
xfs_båì_cur
 *
cur
,

180 *
i
)

182 
xfs_ªfcou¡_úec
 
úec
;

183 
found_ªc
;

184 
îr‹
;

186 
îr‹
 = 
	`xfs_ªfcou¡_gë_ªc
(
cur
, &
úec
, &
found_ªc
);

187 i‡(
îr‹
)

188 
out_îr‹
;

189 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 =1, 
out_îr‹
);

190 
	`åa˚_xfs_ªfcou¡_dñëe
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
, &
úec
);

191 
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, 
i
);

192 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, *
i
 =1, 
out_îr‹
);

193 i‡(
îr‹
)

194 
out_îr‹
;

195 
îr‹
 = 
	`xfs_ªfcou¡_lookup_ge
(
cur
, 
úec
.
rc_°¨tblock
, &
found_ªc
);

196 
out_îr‹
:

197 i‡(
îr‹
)

198 
	`åa˚_xfs_ªfcou¡_dñëe_îr‹
(
cur
->
bc_mp
,

199 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

200  
îr‹
;

201 
	}
}

281 
ölöe
 
xfs_agblock_t


282 
	$xfs_ªfc_√xt
(

283 
xfs_ªfcou¡_úec
 *
rc
)

285  
rc
->
rc_°¨tblock
 +Ñc->
rc_blockcou¡
;

286 
	}
}

291 
STATIC
 

292 
	$xfs_ªfcou¡_•lô_exã¡
(

293 
xfs_båì_cur
 *
cur
,

294 
xfs_agblock_t
 
agbno
,

295 
boﬁ
 *
sh≠e_ch™ged
)

297 
xfs_ªfcou¡_úec
 
r˚xt
, 
tmp
;

298 
found_ªc
;

299 
îr‹
;

301 *
sh≠e_ch™ged
 = 
Ál£
;

302 
îr‹
 = 
	`xfs_ªfcou¡_lookup_À
(
cur
, 
agbno
, &
found_ªc
);

303 i‡(
îr‹
)

304 
out_îr‹
;

305 i‡(!
found_ªc
)

308 
îr‹
 = 
	`xfs_ªfcou¡_gë_ªc
(
cur
, &
r˚xt
, &
found_ªc
);

309 i‡(
îr‹
)

310 
out_îr‹
;

311 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 =1, 
out_îr‹
);

312 i‡(
r˚xt
.
rc_°¨tblock
 =
agbno
 || 
	`xfs_ªfc_√xt
(&rcext) <=ágbno)

315 *
sh≠e_ch™ged
 = 
åue
;

316 
	`åa˚_xfs_ªfcou¡_•lô_exã¡
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

317 &
r˚xt
, 
agbno
);

320 
tmp
 = 
r˚xt
;

321 
tmp
.
rc_°¨tblock
 = 
agbno
;

322 
tmp
.
rc_blockcou¡
 -(
agbno
 - 
r˚xt
.
rc_°¨tblock
);

323 
îr‹
 = 
	`xfs_ªfcou¡_upd©e
(
cur
, &
tmp
);

324 i‡(
îr‹
)

325 
out_îr‹
;

328 
tmp
 = 
r˚xt
;

329 
tmp
.
rc_blockcou¡
 = 
agbno
 - 
r˚xt
.
rc_°¨tblock
;

330 
îr‹
 = 
	`xfs_ªfcou¡_ö£π
(
cur
, &
tmp
, &
found_ªc
);

331 i‡(
îr‹
)

332 
out_îr‹
;

333 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 =1, 
out_îr‹
);

334  
îr‹
;

336 
out_îr‹
:

337 
	`åa˚_xfs_ªfcou¡_•lô_exã¡_îr‹
(
cur
->
bc_mp
,

338 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

339  
îr‹
;

340 
	}
}

345 
STATIC
 

346 
	$xfs_ªfcou¡_mîge_˚¡î_exã¡s
(

347 
xfs_båì_cur
 *
cur
,

348 
xfs_ªfcou¡_úec
 *
À·
,

349 
xfs_ªfcou¡_úec
 *
˚¡î
,

350 
xfs_ªfcou¡_úec
 *
right
,

351 
exéí
,

352 
xfs_agblock_t
 *
agbno
,

353 
xfs_exéí_t
 *
agÀn
)

355 
îr‹
;

356 
found_ªc
;

358 
	`åa˚_xfs_ªfcou¡_mîge_˚¡î_exã¡s
(
cur
->
bc_mp
,

359 
cur
->
bc_¥iv©e
.
a
.
agno
, 
À·
, 
˚¡î
, 
right
);

369 
îr‹
 = 
	`xfs_ªfcou¡_lookup_ge
(
cur
, 
˚¡î
->
rc_°¨tblock
,

370 &
found_ªc
);

371 i‡(
îr‹
)

372 
out_îr‹
;

373 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 =1, 
out_îr‹
);

375 
îr‹
 = 
	`xfs_ªfcou¡_dñëe
(
cur
, &
found_ªc
);

376 i‡(
îr‹
)

377 
out_îr‹
;

378 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 =1, 
out_îr‹
);

380 i‡(
˚¡î
->
rc_ªfcou¡
 > 1) {

381 
îr‹
 = 
	`xfs_ªfcou¡_dñëe
(
cur
, &
found_ªc
);

382 i‡(
îr‹
)

383 
out_îr‹
;

384 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 == 1,

385 
out_îr‹
);

389 
îr‹
 = 
	`xfs_ªfcou¡_lookup_À
(
cur
, 
À·
->
rc_°¨tblock
,

390 &
found_ªc
);

391 i‡(
îr‹
)

392 
out_îr‹
;

393 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 =1, 
out_îr‹
);

395 
À·
->
rc_blockcou¡
 = 
exéí
;

396 
îr‹
 = 
	`xfs_ªfcou¡_upd©e
(
cur
, 
À·
);

397 i‡(
îr‹
)

398 
out_îr‹
;

400 *
agÀn
 = 0;

401  
îr‹
;

403 
out_îr‹
:

404 
	`åa˚_xfs_ªfcou¡_mîge_˚¡î_exã¡s_îr‹
(
cur
->
bc_mp
,

405 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

406  
îr‹
;

407 
	}
}

412 
STATIC
 

413 
	$xfs_ªfcou¡_mîge_À·_exã¡
(

414 
xfs_båì_cur
 *
cur
,

415 
xfs_ªfcou¡_úec
 *
À·
,

416 
xfs_ªfcou¡_úec
 *
˛e·
,

417 
xfs_agblock_t
 *
agbno
,

418 
xfs_exéí_t
 *
agÀn
)

420 
îr‹
;

421 
found_ªc
;

423 
	`åa˚_xfs_ªfcou¡_mîge_À·_exã¡
(
cur
->
bc_mp
,

424 
cur
->
bc_¥iv©e
.
a
.
agno
, 
À·
, 
˛e·
);

427 i‡(
˛e·
->
rc_ªfcou¡
 > 1) {

428 
îr‹
 = 
	`xfs_ªfcou¡_lookup_À
(
cur
, 
˛e·
->
rc_°¨tblock
,

429 &
found_ªc
);

430 i‡(
îr‹
)

431 
out_îr‹
;

432 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 == 1,

433 
out_îr‹
);

435 
îr‹
 = 
	`xfs_ªfcou¡_dñëe
(
cur
, &
found_ªc
);

436 i‡(
îr‹
)

437 
out_îr‹
;

438 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 == 1,

439 
out_îr‹
);

443 
îr‹
 = 
	`xfs_ªfcou¡_lookup_À
(
cur
, 
À·
->
rc_°¨tblock
,

444 &
found_ªc
);

445 i‡(
îr‹
)

446 
out_îr‹
;

447 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 =1, 
out_îr‹
);

449 
À·
->
rc_blockcou¡
 +
˛e·
->rc_blockcount;

450 
îr‹
 = 
	`xfs_ªfcou¡_upd©e
(
cur
, 
À·
);

451 i‡(
îr‹
)

452 
out_îr‹
;

454 *
agbno
 +
˛e·
->
rc_blockcou¡
;

455 *
agÀn
 -
˛e·
->
rc_blockcou¡
;

456  
îr‹
;

458 
out_îr‹
:

459 
	`åa˚_xfs_ªfcou¡_mîge_À·_exã¡_îr‹
(
cur
->
bc_mp
,

460 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

461  
îr‹
;

462 
	}
}

467 
STATIC
 

468 
	$xfs_ªfcou¡_mîge_right_exã¡
(

469 
xfs_båì_cur
 *
cur
,

470 
xfs_ªfcou¡_úec
 *
right
,

471 
xfs_ªfcou¡_úec
 *
¸ight
,

472 
xfs_agblock_t
 *
agbno
,

473 
xfs_exéí_t
 *
agÀn
)

475 
îr‹
;

476 
found_ªc
;

478 
	`åa˚_xfs_ªfcou¡_mîge_right_exã¡
(
cur
->
bc_mp
,

479 
cur
->
bc_¥iv©e
.
a
.
agno
, 
¸ight
, 
right
);

485 i‡(
¸ight
->
rc_ªfcou¡
 > 1) {

486 
îr‹
 = 
	`xfs_ªfcou¡_lookup_À
(
cur
, 
¸ight
->
rc_°¨tblock
,

487 &
found_ªc
);

488 i‡(
îr‹
)

489 
out_îr‹
;

490 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 == 1,

491 
out_îr‹
);

493 
îr‹
 = 
	`xfs_ªfcou¡_dñëe
(
cur
, &
found_ªc
);

494 i‡(
îr‹
)

495 
out_îr‹
;

496 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 == 1,

497 
out_îr‹
);

501 
îr‹
 = 
	`xfs_ªfcou¡_lookup_À
(
cur
, 
right
->
rc_°¨tblock
,

502 &
found_ªc
);

503 i‡(
îr‹
)

504 
out_îr‹
;

505 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 =1, 
out_îr‹
);

507 
right
->
rc_°¨tblock
 -
¸ight
->
rc_blockcou¡
;

508 
right
->
rc_blockcou¡
 +
¸ight
->rc_blockcount;

509 
îr‹
 = 
	`xfs_ªfcou¡_upd©e
(
cur
, 
right
);

510 i‡(
îr‹
)

511 
out_îr‹
;

513 *
agÀn
 -
¸ight
->
rc_blockcou¡
;

514  
îr‹
;

516 
out_îr‹
:

517 
	`åa˚_xfs_ªfcou¡_mîge_right_exã¡_îr‹
(
cur
->
bc_mp
,

518 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

519  
îr‹
;

520 
	}
}

522 
	#XFS_FIND_RCEXT_SHARED
 1

	)

523 
	#XFS_FIND_RCEXT_COW
 2

	)

528 
STATIC
 

529 
	$xfs_ªfcou¡_föd_À·_exã¡s
(

530 
xfs_båì_cur
 *
cur
,

531 
xfs_ªfcou¡_úec
 *
À·
,

532 
xfs_ªfcou¡_úec
 *
˛e·
,

533 
xfs_agblock_t
 
agbno
,

534 
xfs_exéí_t
 
agÀn
,

535 
Êags
)

537 
xfs_ªfcou¡_úec
 
tmp
;

538 
îr‹
;

539 
found_ªc
;

541 
À·
->
rc_°¨tblock
 = 
˛e·
->rc_°¨tblock = 
NULLAGBLOCK
;

542 
îr‹
 = 
	`xfs_ªfcou¡_lookup_À
(
cur
, 
agbno
 - 1, &
found_ªc
);

543 i‡(
îr‹
)

544 
out_îr‹
;

545 i‡(!
found_ªc
)

548 
îr‹
 = 
	`xfs_ªfcou¡_gë_ªc
(
cur
, &
tmp
, &
found_ªc
);

549 i‡(
îr‹
)

550 
out_îr‹
;

551 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 =1, 
out_îr‹
);

553 i‡(
	`xfs_ªfc_√xt
(&
tmp
Ë!
agbno
)

555 i‡((
Êags
 & 
XFS_FIND_RCEXT_SHARED
Ë&& 
tmp
.
rc_ªfcou¡
 < 2)

557 i‡((
Êags
 & 
XFS_FIND_RCEXT_COW
Ë&& 
tmp
.
rc_ªfcou¡
 > 1)

560 *
À·
 = 
tmp
;

562 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
found_ªc
);

563 i‡(
îr‹
)

564 
out_îr‹
;

565 i‡(
found_ªc
) {

566 
îr‹
 = 
	`xfs_ªfcou¡_gë_ªc
(
cur
, &
tmp
, &
found_ªc
);

567 i‡(
îr‹
)

568 
out_îr‹
;

569 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 == 1,

570 
out_îr‹
);

573 i‡(
tmp
.
rc_°¨tblock
 =
agbno
)

574 *
˛e·
 = 
tmp
;

584 
˛e·
->
rc_°¨tblock
 = 
agbno
;

585 
˛e·
->
rc_blockcou¡
 = 
	`mö
(
agÀn
,

586 
tmp
.
rc_°¨tblock
 - 
agbno
);

587 
˛e·
->
rc_ªfcou¡
 = 1;

594 
˛e·
->
rc_°¨tblock
 = 
agbno
;

595 
˛e·
->
rc_blockcou¡
 = 
agÀn
;

596 
˛e·
->
rc_ªfcou¡
 = 1;

598 
	`åa˚_xfs_ªfcou¡_föd_À·_exã¡
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

599 
À·
, 
˛e·
, 
agbno
);

600  
îr‹
;

602 
out_îr‹
:

603 
	`åa˚_xfs_ªfcou¡_föd_À·_exã¡_îr‹
(
cur
->
bc_mp
,

604 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

605  
îr‹
;

606 
	}
}

612 
STATIC
 

613 
	$xfs_ªfcou¡_föd_right_exã¡s
(

614 
xfs_båì_cur
 *
cur
,

615 
xfs_ªfcou¡_úec
 *
right
,

616 
xfs_ªfcou¡_úec
 *
¸ight
,

617 
xfs_agblock_t
 
agbno
,

618 
xfs_exéí_t
 
agÀn
,

619 
Êags
)

621 
xfs_ªfcou¡_úec
 
tmp
;

622 
îr‹
;

623 
found_ªc
;

625 
right
->
rc_°¨tblock
 = 
¸ight
->rc_°¨tblock = 
NULLAGBLOCK
;

626 
îr‹
 = 
	`xfs_ªfcou¡_lookup_ge
(
cur
, 
agbno
 + 
agÀn
, &
found_ªc
);

627 i‡(
îr‹
)

628 
out_îr‹
;

629 i‡(!
found_ªc
)

632 
îr‹
 = 
	`xfs_ªfcou¡_gë_ªc
(
cur
, &
tmp
, &
found_ªc
);

633 i‡(
îr‹
)

634 
out_îr‹
;

635 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 =1, 
out_îr‹
);

637 i‡(
tmp
.
rc_°¨tblock
 !
agbno
 + 
agÀn
)

639 i‡((
Êags
 & 
XFS_FIND_RCEXT_SHARED
Ë&& 
tmp
.
rc_ªfcou¡
 < 2)

641 i‡((
Êags
 & 
XFS_FIND_RCEXT_COW
Ë&& 
tmp
.
rc_ªfcou¡
 > 1)

644 *
right
 = 
tmp
;

646 
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
found_ªc
);

647 i‡(
îr‹
)

648 
out_îr‹
;

649 i‡(
found_ªc
) {

650 
îr‹
 = 
	`xfs_ªfcou¡_gë_ªc
(
cur
, &
tmp
, &
found_ªc
);

651 i‡(
îr‹
)

652 
out_îr‹
;

653 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
found_ªc
 == 1,

654 
out_îr‹
);

657 i‡(
	`xfs_ªfc_√xt
(&
tmp
Ë=
agbno
 + 
agÀn
)

658 *
¸ight
 = 
tmp
;

668 
¸ight
->
rc_°¨tblock
 = 
	`max
(
agbno
, 
	`xfs_ªfc_√xt
(&
tmp
));

669 
¸ight
->
rc_blockcou¡
 = 
right
->
rc_°¨tblock
 -

670 
¸ight
->
rc_°¨tblock
;

671 
¸ight
->
rc_ªfcou¡
 = 1;

678 
¸ight
->
rc_°¨tblock
 = 
agbno
;

679 
¸ight
->
rc_blockcou¡
 = 
agÀn
;

680 
¸ight
->
rc_ªfcou¡
 = 1;

682 
	`åa˚_xfs_ªfcou¡_föd_right_exã¡
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

683 
¸ight
, 
right
, 
agbno
 + 
agÀn
);

684  
îr‹
;

686 
out_îr‹
:

687 
	`åa˚_xfs_ªfcou¡_föd_right_exã¡_îr‹
(
cur
->
bc_mp
,

688 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

689  
îr‹
;

690 
	}
}

693 
ölöe
 
boﬁ


694 
	$xfs_ªfc_vÆid
(

695 
xfs_ªfcou¡_úec
 *
rc
)

697  
rc
->
rc_°¨tblock
 !
NULLAGBLOCK
;

698 
	}
}

703 
STATIC
 

704 
	$xfs_ªfcou¡_mîge_exã¡s
(

705 
xfs_båì_cur
 *
cur
,

706 
xfs_agblock_t
 *
agbno
,

707 
xfs_exéí_t
 *
agÀn
,

708 
xfs_ªfc_adju°_›
 
adju°
,

709 
Êags
,

710 
boﬁ
 *
sh≠e_ch™ged
)

712 
xfs_ªfcou¡_úec
 
À·
 = {0}, 
˛e·
 = {0};

713 
xfs_ªfcou¡_úec
 
¸ight
 = {0}, 
right
 = {0};

714 
îr‹
;

715 
uÀn
;

716 
boﬁ
 
˚quÆ
;

718 *
sh≠e_ch™ged
 = 
Ál£
;

724 
îr‹
 = 
	`xfs_ªfcou¡_föd_À·_exã¡s
(
cur
, &
À·
, &
˛e·
, *
agbno
,

725 *
agÀn
, 
Êags
);

726 i‡(
îr‹
)

727  
îr‹
;

728 
îr‹
 = 
	`xfs_ªfcou¡_föd_right_exã¡s
(
cur
, &
right
, &
¸ight
, *
agbno
,

729 *
agÀn
, 
Êags
);

730 i‡(
îr‹
)

731  
îr‹
;

734 i‡(!
	`xfs_ªfc_vÆid
(&
À·
Ë&& !xfs_ªfc_vÆid(&
right
))

737 
˚quÆ
 = (
˛e·
.
rc_°¨tblock
 =
¸ight
.rc_startblock) &&

738 (
˛e·
.
rc_blockcou¡
 =
¸ight
.rc_blockcount);

741 
uÀn
 = ()
À·
.
rc_blockcou¡
 + 
˛e·
.rc_blockcount +

742 
right
.
rc_blockcou¡
;

743 i‡(
	`xfs_ªfc_vÆid
(&
À·
Ë&& xfs_ªfc_vÆid(&
right
) &&

744 
	`xfs_ªfc_vÆid
(&
˛e·
Ë&& xfs_ªfc_vÆid(&
¸ight
Ë&& 
˚quÆ
 &&

745 
À·
.
rc_ªfcou¡
 =
˛e·
.rc_ªfcou¡ + 
adju°
 &&

746 
right
.
rc_ªfcou¡
 =
˛e·
.rc_ªfcou¡ + 
adju°
 &&

747 
uÀn
 < 
MAXREFCEXTLEN
) {

748 *
sh≠e_ch™ged
 = 
åue
;

749  
	`xfs_ªfcou¡_mîge_˚¡î_exã¡s
(
cur
, &
À·
, &
˛e·
,

750 &
right
, 
uÀn
, 
agbno
, 
agÀn
);

754 
uÀn
 = ()
À·
.
rc_blockcou¡
 + 
˛e·
.rc_blockcount;

755 i‡(
	`xfs_ªfc_vÆid
(&
À·
Ë&& xfs_ªfc_vÆid(&
˛e·
) &&

756 
À·
.
rc_ªfcou¡
 =
˛e·
.rc_ªfcou¡ + 
adju°
 &&

757 
uÀn
 < 
MAXREFCEXTLEN
) {

758 *
sh≠e_ch™ged
 = 
åue
;

759 
îr‹
 = 
	`xfs_ªfcou¡_mîge_À·_exã¡
(
cur
, &
À·
, &
˛e·
,

760 
agbno
, 
agÀn
);

761 i‡(
îr‹
)

762  
îr‹
;

768 i‡(
˚quÆ
)

773 
uÀn
 = ()
right
.
rc_blockcou¡
 + 
¸ight
.rc_blockcount;

774 i‡(
	`xfs_ªfc_vÆid
(&
right
Ë&& xfs_ªfc_vÆid(&
¸ight
) &&

775 
right
.
rc_ªfcou¡
 =
¸ight
.rc_ªfcou¡ + 
adju°
 &&

776 
uÀn
 < 
MAXREFCEXTLEN
) {

777 *
sh≠e_ch™ged
 = 
åue
;

778  
	`xfs_ªfcou¡_mîge_right_exã¡
(
cur
, &
right
, &
¸ight
,

779 
agbno
, 
agÀn
);

782  
îr‹
;

783 
	}
}

799 
boﬁ


800 
	$xfs_ªfcou¡_°ûl_have_•a˚
(

801 
xfs_båì_cur
 *
cur
)

803 
ovîhód
;

805 
ovîhód
 = 
cur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
sh≠e_ch™ges
 *

806 
	`xfs_Æloc‰ì_log_cou¡
(
cur
->
bc_mp
, 1);

807 
ovîhód
 *
cur
->
bc_mp
->
m_sb
.
sb_blocksize
;

813 i‡(
cur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
ƒ_›s
 > 2 &&

814 
	`XFS_TEST_ERROR
(
Ál£
, 
cur
->
bc_mp
,

815 
XFS_ERRTAG_REFCOUNT_CONTINUE_UPDATE
,

816 
XFS_RANDOM_REFCOUNT_CONTINUE_UPDATE
))

817  
Ál£
;

819 i‡(
cur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
ƒ_›s
 == 0)

820  
åue
;

821 i‡(
ovîhód
 > 
cur
->
bc_ç
->
t_log_ªs
)

822  
Ál£
;

823  
cur
->
bc_ç
->
t_log_ªs
 - 
ovîhód
 >

824 
cur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
ƒ_›s
 * 32;

825 
	}
}

833 
STATIC
 

834 
	$xfs_ªfcou¡_adju°_exã¡s
(

835 
xfs_båì_cur
 *
cur
,

836 
xfs_agblock_t
 *
agbno
,

837 
xfs_exéí_t
 *
agÀn
,

838 
xfs_ªfc_adju°_›
 
adj
,

839 
xfs_de„r_›s
 *
df›s
,

840 
xfs_ow√r_öfo
 *
oöfo
)

842 
xfs_ªfcou¡_úec
 
ext
, 
tmp
;

843 
îr‹
;

844 
found_ªc
, 
found_tmp
;

845 
xfs_fsblock_t
 
fsbno
;

848 i‡(*
agÀn
 == 0)

851 
îr‹
 = 
	`xfs_ªfcou¡_lookup_ge
(
cur
, *
agbno
, &
found_ªc
);

852 i‡(
îr‹
)

853 
out_îr‹
;

855 *
agÀn
 > 0 && 
	`xfs_ªfcou¡_°ûl_have_•a˚
(
cur
)) {

856 
îr‹
 = 
	`xfs_ªfcou¡_gë_ªc
(
cur
, &
ext
, &
found_ªc
);

857 i‡(
îr‹
)

858 
out_îr‹
;

859 i‡(!
found_ªc
) {

860 
ext
.
rc_°¨tblock
 = 
cur
->
bc_mp
->
m_sb
.
sb_agblocks
;

861 
ext
.
rc_blockcou¡
 = 0;

862 
ext
.
rc_ªfcou¡
 = 0;

870 i‡(
ext
.
rc_°¨tblock
 !*
agbno
) {

871 
tmp
.
rc_°¨tblock
 = *
agbno
;

872 
tmp
.
rc_blockcou¡
 = 
	`mö
(*
agÀn
,

873 
ext
.
rc_°¨tblock
 - *
agbno
);

874 
tmp
.
rc_ªfcou¡
 = 1 + 
adj
;

875 
	`åa˚_xfs_ªfcou¡_modify_exã¡
(
cur
->
bc_mp
,

876 
cur
->
bc_¥iv©e
.
a
.
agno
, &
tmp
);

882 i‡(
tmp
.
rc_ªfcou¡
) {

883 
îr‹
 = 
	`xfs_ªfcou¡_ö£π
(
cur
, &
tmp
,

884 &
found_tmp
);

885 i‡(
îr‹
)

886 
out_îr‹
;

887 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
,

888 
found_tmp
 =1, 
out_îr‹
);

889 
cur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
ƒ_›s
++;

891 
fsbno
 = 
	`XFS_AGB_TO_FSB
(
cur
->
bc_mp
,

892 
cur
->
bc_¥iv©e
.
a
.
agno
,

893 
tmp
.
rc_°¨tblock
);

894 
	`xfs_bm≠_add_‰ì
(
cur
->
bc_mp
, 
df›s
, 
fsbno
,

895 
tmp
.
rc_blockcou¡
, 
oöfo
);

898 (*
agbno
Ë+
tmp
.
rc_blockcou¡
;

899 (*
agÀn
Ë-
tmp
.
rc_blockcou¡
;

901 
îr‹
 = 
	`xfs_ªfcou¡_lookup_ge
(
cur
, *
agbno
,

902 &
found_ªc
);

903 i‡(
îr‹
)

904 
out_îr‹
;

908 i‡(*
agÀn
 =0 || !
	`xfs_ªfcou¡_°ûl_have_•a˚
(
cur
))

915 i‡(
ext
.
rc_ªfcou¡
 =
MAXREFCOUNT
)

916 
skù
;

917 
ext
.
rc_ªfcou¡
 +
adj
;

918 
	`åa˚_xfs_ªfcou¡_modify_exã¡
(
cur
->
bc_mp
,

919 
cur
->
bc_¥iv©e
.
a
.
agno
, &
ext
);

920 i‡(
ext
.
rc_ªfcou¡
 > 1) {

921 
îr‹
 = 
	`xfs_ªfcou¡_upd©e
(
cur
, &
ext
);

922 i‡(
îr‹
)

923 
out_îr‹
;

924 
cur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
ƒ_›s
++;

925 } i‡(
ext
.
rc_ªfcou¡
 == 1) {

926 
îr‹
 = 
	`xfs_ªfcou¡_dñëe
(
cur
, &
found_ªc
);

927 i‡(
îr‹
)

928 
out_îr‹
;

929 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
,

930 
found_ªc
 =1, 
out_îr‹
);

931 
cur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
ƒ_›s
++;

932 
advlo›
;

934 
fsbno
 = 
	`XFS_AGB_TO_FSB
(
cur
->
bc_mp
,

935 
cur
->
bc_¥iv©e
.
a
.
agno
,

936 
ext
.
rc_°¨tblock
);

937 
	`xfs_bm≠_add_‰ì
(
cur
->
bc_mp
, 
df›s
, 
fsbno
,

938 
ext
.
rc_blockcou¡
, 
oöfo
);

941 
skù
:

942 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
found_ªc
);

943 i‡(
îr‹
)

944 
out_îr‹
;

946 
advlo›
:

947 (*
agbno
Ë+
ext
.
rc_blockcou¡
;

948 (*
agÀn
Ë-
ext
.
rc_blockcou¡
;

951  
îr‹
;

952 
out_îr‹
:

953 
	`åa˚_xfs_ªfcou¡_modify_exã¡_îr‹
(
cur
->
bc_mp
,

954 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

955  
îr‹
;

956 
	}
}

959 
STATIC
 

960 
	$xfs_ªfcou¡_adju°
(

961 
xfs_båì_cur
 *
cur
,

962 
xfs_agblock_t
 
agbno
,

963 
xfs_exéí_t
 
agÀn
,

964 
xfs_agblock_t
 *
√w_agbno
,

965 
xfs_exéí_t
 *
√w_agÀn
,

966 
xfs_ªfc_adju°_›
 
adj
,

967 
xfs_de„r_›s
 *
df›s
,

968 
xfs_ow√r_öfo
 *
oöfo
)

970 
boﬁ
 
sh≠e_ch™ged
;

971 
sh≠e_ch™ges
 = 0;

972 
îr‹
;

974 *
√w_agbno
 = 
agbno
;

975 *
√w_agÀn
 = 
agÀn
;

976 i‡(
adj
 =
XFS_REFCOUNT_ADJUST_INCREASE
)

977 
	`åa˚_xfs_ªfcou¡_ö¸ó£
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

978 
agbno
, 
agÀn
);

980 
	`åa˚_xfs_ªfcou¡_de¸ó£
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

981 
agbno
, 
agÀn
);

986 
îr‹
 = 
	`xfs_ªfcou¡_•lô_exã¡
(
cur
, 
agbno
, &
sh≠e_ch™ged
);

987 i‡(
îr‹
)

988 
out_îr‹
;

989 i‡(
sh≠e_ch™ged
)

990 
sh≠e_ch™ges
++;

992 
îr‹
 = 
	`xfs_ªfcou¡_•lô_exã¡
(
cur
, 
agbno
 + 
agÀn
, &
sh≠e_ch™ged
);

993 i‡(
îr‹
)

994 
out_îr‹
;

995 i‡(
sh≠e_ch™ged
)

996 
sh≠e_ch™ges
++;

1001 
îr‹
 = 
	`xfs_ªfcou¡_mîge_exã¡s
(
cur
, 
√w_agbno
, 
√w_agÀn
, 
adj
,

1002 
XFS_FIND_RCEXT_SHARED
, &
sh≠e_ch™ged
);

1003 i‡(
îr‹
)

1004 
out_îr‹
;

1005 i‡(
sh≠e_ch™ged
)

1006 
sh≠e_ch™ges
++;

1007 i‡(
sh≠e_ch™ges
)

1008 
cur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
sh≠e_ch™ges
++;

1011 
îr‹
 = 
	`xfs_ªfcou¡_adju°_exã¡s
(
cur
, 
√w_agbno
, 
√w_agÀn
,

1012 
adj
, 
df›s
, 
oöfo
);

1013 i‡(
îr‹
)

1014 
out_îr‹
;

1018 
out_îr‹
:

1019 
	`åa˚_xfs_ªfcou¡_adju°_îr‹
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

1020 
îr‹
, 
_RET_IP_
);

1021  
îr‹
;

1022 
	}
}

1026 
	$xfs_ªfcou¡_föish_⁄e_˛ónup
(

1027 
xfs_å™s
 *
ç
,

1028 
xfs_båì_cur
 *
rcur
,

1029 
îr‹
)

1031 
xfs_buf
 *
agbp
;

1033 i‡(
rcur
 =
NULL
)

1035 
agbp
 = 
rcur
->
bc_¥iv©e
.
a
.agbp;

1036 
	`xfs_båì_dñ_curs‹
(
rcur
, 
îr‹
 ? 
XFS_BTREE_ERROR
 : 
XFS_BTREE_NOERROR
);

1037 i‡(
îr‹
)

1038 
	`xfs_å™s_bªl£
(
ç
, 
agbp
);

1039 
	}
}

1049 
	$xfs_ªfcou¡_föish_⁄e
(

1050 
xfs_å™s
 *
ç
,

1051 
xfs_de„r_›s
 *
df›s
,

1052 
xfs_ªfcou¡_öã¡_ty≥
 
ty≥
,

1053 
xfs_fsblock_t
 
°¨tblock
,

1054 
xfs_exéí_t
 
blockcou¡
,

1055 
xfs_fsblock_t
 *
√w_fsb
,

1056 
xfs_exéí_t
 *
√w_Àn
,

1057 
xfs_båì_cur
 **
pcur
)

1059 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

1060 
xfs_båì_cur
 *
rcur
;

1061 
xfs_buf
 *
agbp
 = 
NULL
;

1062 
îr‹
 = 0;

1063 
xfs_agnumbî_t
 
agno
;

1064 
xfs_agblock_t
 
bno
;

1065 
xfs_agblock_t
 
√w_agbno
;

1066 
ƒ_›s
 = 0;

1067 
sh≠e_ch™ges
 = 0;

1069 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
°¨tblock
);

1070 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

1071 
bno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
°¨tblock
);

1073 
	`åa˚_xfs_ªfcou¡_de„ºed
(
mp
, 
	`XFS_FSB_TO_AGNO
(mp, 
°¨tblock
),

1074 
ty≥
, 
	`XFS_FSB_TO_AGBNO
(
mp
, 
°¨tblock
),

1075 
blockcou¡
);

1077 i‡(
	`XFS_TEST_ERROR
(
Ál£
, 
mp
,

1078 
XFS_ERRTAG_REFCOUNT_FINISH_ONE
,

1079 
XFS_RANDOM_REFCOUNT_FINISH_ONE
))

1080  -
EIO
;

1086 
rcur
 = *
pcur
;

1087 i‡(
rcur
 !
NULL
 &&Ñcur->
bc_¥iv©e
.
a
.
agno
 !=ágno) {

1088 
ƒ_›s
 = 
rcur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.nr_ops;

1089 
sh≠e_ch™ges
 = 
rcur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.shape_changes;

1090 
	`xfs_ªfcou¡_föish_⁄e_˛ónup
(
ç
, 
rcur
, 0);

1091 
rcur
 = 
NULL
;

1092 *
pcur
 = 
NULL
;

1094 i‡(
rcur
 =
NULL
) {

1095 
îr‹
 = 
	`xfs_Æloc_ªad_agf
(
ç
->
t_mou¡p
,Åp, 
agno
,

1096 
XFS_ALLOC_FLAG_FREEING
, &
agbp
);

1097 i‡(
îr‹
)

1098  
îr‹
;

1099 i‡(!
agbp
)

1100  -
EFSCORRUPTED
;

1102 
rcur
 = 
	`xfs_ªfcou¡bt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
, 
df›s
);

1103 i‡(!
rcur
) {

1104 
îr‹
 = -
ENOMEM
;

1105 
out_cur
;

1107 
rcur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
ƒ_›s
 =Çr_ops;

1108 
rcur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
sh≠e_ch™ges
 = shape_changes;

1110 *
pcur
 = 
rcur
;

1112 
ty≥
) {

1113 
XFS_REFCOUNT_INCREASE
:

1114 
îr‹
 = 
	`xfs_ªfcou¡_adju°
(
rcur
, 
bno
, 
blockcou¡
, &
√w_agbno
,

1115 
√w_Àn
, 
XFS_REFCOUNT_ADJUST_INCREASE
, 
df›s
, 
NULL
);

1116 *
√w_fsb
 = 
	`XFS_AGB_TO_FSB
(
mp
, 
agno
, 
√w_agbno
);

1118 
XFS_REFCOUNT_DECREASE
:

1119 
îr‹
 = 
	`xfs_ªfcou¡_adju°
(
rcur
, 
bno
, 
blockcou¡
, &
√w_agbno
,

1120 
√w_Àn
, 
XFS_REFCOUNT_ADJUST_DECREASE
, 
df›s
, 
NULL
);

1121 *
√w_fsb
 = 
	`XFS_AGB_TO_FSB
(
mp
, 
agno
, 
√w_agbno
);

1123 
XFS_REFCOUNT_ALLOC_COW
:

1124 *
√w_fsb
 = 
°¨tblock
 + 
blockcou¡
;

1125 *
√w_Àn
 = 0;

1126 
îr‹
 = 
	`__xfs_ªfcou¡_cow_Æloc
(
rcur
, 
bno
, 
blockcou¡
, 
df›s
);

1128 
XFS_REFCOUNT_FREE_COW
:

1129 *
√w_fsb
 = 
°¨tblock
 + 
blockcou¡
;

1130 *
√w_Àn
 = 0;

1131 
îr‹
 = 
	`__xfs_ªfcou¡_cow_‰ì
(
rcur
, 
bno
, 
blockcou¡
, 
df›s
);

1134 
	`ASSERT
(0);

1135 
îr‹
 = -
EFSCORRUPTED
;

1137 i‡(!
îr‹
 && *
√w_Àn
 > 0)

1138 
	`åa˚_xfs_ªfcou¡_föish_⁄e_À·ovî
(
mp
, 
agno
, 
ty≥
,

1139 
bno
, 
blockcou¡
, 
√w_agbno
, *
√w_Àn
);

1140  
îr‹
;

1142 
out_cur
:

1143 
	`xfs_å™s_bªl£
(
ç
, 
agbp
);

1145  
îr‹
;

1146 
	}
}

1152 
	$__xfs_ªfcou¡_add
(

1153 
xfs_mou¡
 *
mp
,

1154 
xfs_de„r_›s
 *
df›s
,

1155 
xfs_ªfcou¡_öã¡_ty≥
 
ty≥
,

1156 
xfs_fsblock_t
 
°¨tblock
,

1157 
xfs_exéí_t
 
blockcou¡
)

1159 
xfs_ªfcou¡_öã¡
 *
ri
;

1161 
	`åa˚_xfs_ªfcou¡_de„r
(
mp
, 
	`XFS_FSB_TO_AGNO
(mp, 
°¨tblock
),

1162 
ty≥
, 
	`XFS_FSB_TO_AGBNO
(
mp
, 
°¨tblock
),

1163 
blockcou¡
);

1165 
ri
 = 
	`kmem_Æloc
((
xfs_ªfcou¡_öã¡
),

1166 
KM_SLEEP
 | 
KM_NOFS
);

1167 
	`INIT_LIST_HEAD
(&
ri
->
ri_li°
);

1168 
ri
->
ri_ty≥
 = 
ty≥
;

1169 
ri
->
ri_°¨tblock
 = 
°¨tblock
;

1170 
ri
->
ri_blockcou¡
 = 
blockcou¡
;

1172 
	`xfs_de„r_add
(
df›s
, 
XFS_DEFER_OPS_TYPE_REFCOUNT
, &
ri
->
ri_li°
);

1174 
	}
}

1180 
	$xfs_ªfcou¡_ö¸ó£_exã¡
(

1181 
xfs_mou¡
 *
mp
,

1182 
xfs_de„r_›s
 *
df›s
,

1183 
xfs_bmbt_úec
 *
PREV
)

1185 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

1188  
	`__xfs_ªfcou¡_add
(
mp
, 
df›s
, 
XFS_REFCOUNT_INCREASE
,

1189 
PREV
->
br_°¨tblock
, PREV->
br_blockcou¡
);

1190 
	}
}

1196 
	$xfs_ªfcou¡_de¸ó£_exã¡
(

1197 
xfs_mou¡
 *
mp
,

1198 
xfs_de„r_›s
 *
df›s
,

1199 
xfs_bmbt_úec
 *
PREV
)

1201 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

1204  
	`__xfs_ªfcou¡_add
(
mp
, 
df›s
, 
XFS_REFCOUNT_DECREASE
,

1205 
PREV
->
br_°¨tblock
, PREV->
br_blockcou¡
);

1206 
	}
}

1217 
	$xfs_ªfcou¡_föd_sh¨ed
(

1218 
xfs_båì_cur
 *
cur
,

1219 
xfs_agblock_t
 
agbno
,

1220 
xfs_exéí_t
 
agÀn
,

1221 
xfs_agblock_t
 *
fbno
,

1222 
xfs_exéí_t
 *
Êí
,

1223 
boﬁ
 
föd_íd_of_sh¨ed
)

1225 
xfs_ªfcou¡_úec
 
tmp
;

1226 
i
;

1227 
have
;

1228 
îr‹
;

1230 
	`åa˚_xfs_ªfcou¡_föd_sh¨ed
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

1231 
agbno
, 
agÀn
);

1234 *
fbno
 = 
NULLAGBLOCK
;

1235 *
Êí
 = 0;

1238 
îr‹
 = 
	`xfs_ªfcou¡_lookup_À
(
cur
, 
agbno
, &
have
);

1239 i‡(
îr‹
)

1240 
out_îr‹
;

1241 i‡(!
have
) {

1243 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
have
);

1244 i‡(
îr‹
)

1245 
out_îr‹
;

1246 i‡(!
have
)

1247 
d⁄e
;

1249 
îr‹
 = 
	`xfs_ªfcou¡_gë_ªc
(
cur
, &
tmp
, &
i
);

1250 i‡(
îr‹
)

1251 
out_îr‹
;

1252 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
i
 =1, 
out_îr‹
);

1255 i‡(
tmp
.
rc_°¨tblock
 +Åmp.
rc_blockcou¡
 <
agbno
) {

1256 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
have
);

1257 i‡(
îr‹
)

1258 
out_îr‹
;

1259 i‡(!
have
)

1260 
d⁄e
;

1261 
îr‹
 = 
	`xfs_ªfcou¡_gë_ªc
(
cur
, &
tmp
, &
i
);

1262 i‡(
îr‹
)

1263 
out_îr‹
;

1264 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
i
 =1, 
out_îr‹
);

1268 i‡(
tmp
.
rc_°¨tblock
 >
agbno
 + 
agÀn
)

1269 
d⁄e
;

1272 i‡(
tmp
.
rc_°¨tblock
 < 
agbno
) {

1273 
tmp
.
rc_blockcou¡
 -(
agbno
 -Åmp.
rc_°¨tblock
);

1274 
tmp
.
rc_°¨tblock
 = 
agbno
;

1277 *
fbno
 = 
tmp
.
rc_°¨tblock
;

1278 *
Êí
 = 
	`mö
(
tmp
.
rc_blockcou¡
, 
agbno
 + 
agÀn
 - *
fbno
);

1279 i‡(!
föd_íd_of_sh¨ed
)

1280 
d⁄e
;

1283 *
fbno
 + *
Êí
 < 
agbno
 + 
agÀn
) {

1284 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
have
);

1285 i‡(
îr‹
)

1286 
out_îr‹
;

1287 i‡(!
have
)

1289 
îr‹
 = 
	`xfs_ªfcou¡_gë_ªc
(
cur
, &
tmp
, &
i
);

1290 i‡(
îr‹
)

1291 
out_îr‹
;

1292 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
, 
i
 =1, 
out_îr‹
);

1293 i‡(
tmp
.
rc_°¨tblock
 >
agbno
 + 
agÀn
 ||

1294 
tmp
.
rc_°¨tblock
 !*
fbno
 + *
Êí
)

1296 *
Êí
 = 
	`mö
(*Êí + 
tmp
.
rc_blockcou¡
, 
agbno
 + 
agÀn
 - *
fbno
);

1299 
d⁄e
:

1300 
	`åa˚_xfs_ªfcou¡_föd_sh¨ed_ªsu…
(
cur
->
bc_mp
,

1301 
cur
->
bc_¥iv©e
.
a
.
agno
, *
fbno
, *
Êí
);

1303 
out_îr‹
:

1304 i‡(
îr‹
)

1305 
	`åa˚_xfs_ªfcou¡_föd_sh¨ed_îr‹
(
cur
->
bc_mp
,

1306 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

1307  
îr‹
;

1308 
	}
}

1362 
STATIC
 

1363 
	$xfs_ªfcou¡_adju°_cow_exã¡s
(

1364 
xfs_båì_cur
 *
cur
,

1365 
xfs_agblock_t
 
agbno
,

1366 
xfs_exéí_t
 
agÀn
,

1367 
xfs_ªfc_adju°_›
 
adj
,

1368 
xfs_de„r_›s
 *
df›s
,

1369 
xfs_ow√r_öfo
 *
oöfo
)

1371 
xfs_ªfcou¡_úec
 
ext
, 
tmp
;

1372 
îr‹
;

1373 
found_ªc
, 
found_tmp
;

1375 i‡(
agÀn
 == 0)

1379 
îr‹
 = 
	`xfs_ªfcou¡_lookup_ge
(
cur
, 
agbno
, &
found_ªc
);

1380 i‡(
îr‹
)

1381 
out_îr‹
;

1382 
îr‹
 = 
	`xfs_ªfcou¡_gë_ªc
(
cur
, &
ext
, &
found_ªc
);

1383 i‡(
îr‹
)

1384 
out_îr‹
;

1385 i‡(!
found_ªc
) {

1386 
ext
.
rc_°¨tblock
 = 
cur
->
bc_mp
->
m_sb
.
sb_agblocks
 +

1387 
XFS_REFC_COW_START
;

1388 
ext
.
rc_blockcou¡
 = 0;

1389 
ext
.
rc_ªfcou¡
 = 0;

1392 
adj
) {

1393 
XFS_REFCOUNT_ADJUST_COW_ALLOC
:

1395 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
,

1396 
ext
.
rc_°¨tblock
 >
agbno
 + 
agÀn
, 
out_îr‹
);

1398 
tmp
.
rc_°¨tblock
 = 
agbno
;

1399 
tmp
.
rc_blockcou¡
 = 
agÀn
;

1400 
tmp
.
rc_ªfcou¡
 = 1;

1401 
	`åa˚_xfs_ªfcou¡_modify_exã¡
(
cur
->
bc_mp
,

1402 
cur
->
bc_¥iv©e
.
a
.
agno
, &
tmp
);

1404 
îr‹
 = 
	`xfs_ªfcou¡_ö£π
(
cur
, &
tmp
,

1405 &
found_tmp
);

1406 i‡(
îr‹
)

1407 
out_îr‹
;

1408 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
,

1409 
found_tmp
 =1, 
out_îr‹
);

1411 
XFS_REFCOUNT_ADJUST_COW_FREE
:

1413 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
,

1414 
ext
.
rc_°¨tblock
 =
agbno
, 
out_îr‹
);

1415 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
,

1416 
ext
.
rc_blockcou¡
 =
agÀn
, 
out_îr‹
);

1417 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
,

1418 
ext
.
rc_ªfcou¡
 =1, 
out_îr‹
);

1420 
ext
.
rc_ªfcou¡
 = 0;

1421 
	`åa˚_xfs_ªfcou¡_modify_exã¡
(
cur
->
bc_mp
,

1422 
cur
->
bc_¥iv©e
.
a
.
agno
, &
ext
);

1423 
îr‹
 = 
	`xfs_ªfcou¡_dñëe
(
cur
, &
found_ªc
);

1424 i‡(
îr‹
)

1425 
out_îr‹
;

1426 
	`XFS_WANT_CORRUPTED_GOTO
(
cur
->
bc_mp
,

1427 
found_ªc
 =1, 
out_îr‹
);

1430 
	`ASSERT
(0);

1433  
îr‹
;

1434 
out_îr‹
:

1435 
	`åa˚_xfs_ªfcou¡_modify_exã¡_îr‹
(
cur
->
bc_mp
,

1436 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

1437  
îr‹
;

1438 
	}
}

1443 
STATIC
 

1444 
	$xfs_ªfcou¡_adju°_cow
(

1445 
xfs_båì_cur
 *
cur
,

1446 
xfs_agblock_t
 
agbno
,

1447 
xfs_exéí_t
 
agÀn
,

1448 
xfs_ªfc_adju°_›
 
adj
,

1449 
xfs_de„r_›s
 *
df›s
)

1451 
boﬁ
 
sh≠e_ch™ged
;

1452 
îr‹
;

1454 
agbno
 +
XFS_REFC_COW_START
;

1459 
îr‹
 = 
	`xfs_ªfcou¡_•lô_exã¡
(
cur
, 
agbno
, &
sh≠e_ch™ged
);

1460 i‡(
îr‹
)

1461 
out_îr‹
;

1463 
îr‹
 = 
	`xfs_ªfcou¡_•lô_exã¡
(
cur
, 
agbno
 + 
agÀn
, &
sh≠e_ch™ged
);

1464 i‡(
îr‹
)

1465 
out_îr‹
;

1470 
îr‹
 = 
	`xfs_ªfcou¡_mîge_exã¡s
(
cur
, &
agbno
, &
agÀn
, 
adj
,

1471 
XFS_FIND_RCEXT_COW
, &
sh≠e_ch™ged
);

1472 i‡(
îr‹
)

1473 
out_îr‹
;

1476 
îr‹
 = 
	`xfs_ªfcou¡_adju°_cow_exã¡s
(
cur
, 
agbno
, 
agÀn
, 
adj
,

1477 
df›s
, 
NULL
);

1478 i‡(
îr‹
)

1479 
out_îr‹
;

1483 
out_îr‹
:

1484 
	`åa˚_xfs_ªfcou¡_adju°_cow_îr‹
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

1485 
îr‹
, 
_RET_IP_
);

1486  
îr‹
;

1487 
	}
}

1492 
STATIC
 

1493 
	$__xfs_ªfcou¡_cow_Æloc
(

1494 
xfs_båì_cur
 *
rcur
,

1495 
xfs_agblock_t
 
agbno
,

1496 
xfs_exéí_t
 
agÀn
,

1497 
xfs_de„r_›s
 *
df›s
)

1499 
îr‹
;

1501 
	`åa˚_xfs_ªfcou¡_cow_ö¸ó£
(
rcur
->
bc_mp
,Ñcur->
bc_¥iv©e
.
a
.
agno
,

1502 
agbno
, 
agÀn
);

1505 
îr‹
 = 
	`xfs_ªfcou¡_adju°_cow
(
rcur
, 
agbno
, 
agÀn
,

1506 
XFS_REFCOUNT_ADJUST_COW_ALLOC
, 
df›s
);

1507 i‡(
îr‹
)

1508  
îr‹
;

1511 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
rcur
->
bc_mp
->
m_sb
)) {

1512 
îr‹
 = 
	`xfs_rm≠_Æloc_exã¡
(
rcur
->
bc_mp
, 
df›s
,

1513 
rcur
->
bc_¥iv©e
.
a
.
agno
,

1514 
agbno
, 
agÀn
, 
XFS_RMAP_OWN_COW
);

1515 i‡(
îr‹
)

1516  
îr‹
;

1519  
îr‹
;

1520 
	}
}

1525 
STATIC
 

1526 
	$__xfs_ªfcou¡_cow_‰ì
(

1527 
xfs_båì_cur
 *
rcur
,

1528 
xfs_agblock_t
 
agbno
,

1529 
xfs_exéí_t
 
agÀn
,

1530 
xfs_de„r_›s
 *
df›s
)

1532 
îr‹
;

1534 
	`åa˚_xfs_ªfcou¡_cow_de¸ó£
(
rcur
->
bc_mp
,Ñcur->
bc_¥iv©e
.
a
.
agno
,

1535 
agbno
, 
agÀn
);

1538 
îr‹
 = 
	`xfs_ªfcou¡_adju°_cow
(
rcur
, 
agbno
, 
agÀn
,

1539 
XFS_REFCOUNT_ADJUST_COW_FREE
, 
df›s
);

1540 i‡(
îr‹
)

1541  
îr‹
;

1544 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
rcur
->
bc_mp
->
m_sb
)) {

1545 
îr‹
 = 
	`xfs_rm≠_‰ì_exã¡
(
rcur
->
bc_mp
, 
df›s
,

1546 
rcur
->
bc_¥iv©e
.
a
.
agno
,

1547 
agbno
, 
agÀn
, 
XFS_RMAP_OWN_COW
);

1548 i‡(
îr‹
)

1549  
îr‹
;

1552  
îr‹
;

1553 
	}
}

1557 
	$xfs_ªfcou¡_Æloc_cow_exã¡
(

1558 
xfs_mou¡
 *
mp
,

1559 
xfs_de„r_›s
 *
df›s
,

1560 
xfs_fsblock_t
 
fsb
,

1561 
xfs_exéí_t
 
Àn
)

1563 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

1566  
	`__xfs_ªfcou¡_add
(
mp
, 
df›s
, 
XFS_REFCOUNT_ALLOC_COW
,

1567 
fsb
, 
Àn
);

1568 
	}
}

1572 
	$xfs_ªfcou¡_‰ì_cow_exã¡
(

1573 
xfs_mou¡
 *
mp
,

1574 
xfs_de„r_›s
 *
df›s
,

1575 
xfs_fsblock_t
 
fsb
,

1576 
xfs_exéí_t
 
Àn
)

1578 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

1581  
	`__xfs_ªfcou¡_add
(
mp
, 
df›s
, 
XFS_REFCOUNT_FREE_COW
,

1582 
fsb
, 
Àn
);

1583 
	}
}

1585 
	sxfs_ªfcou¡_ªcovîy
 {

1586 
li°_hód
 
	mº_li°
;

1587 
xfs_ªfcou¡_úec
 
	mº_ºec
;

1591 
STATIC
 

1592 
	$xfs_ªfcou¡_ªcovî_exã¡
(

1593 
xfs_båì_cur
 *
cur
,

1594 
xfs_båì_ªc
 *
ªc
,

1595 *
¥iv
)

1597 
li°_hód
 *
debris
 = 
¥iv
;

1598 
xfs_ªfcou¡_ªcovîy
 *
º
;

1600 i‡(
	`be32_to_˝u
(
ªc
->
ªfc
.
rc_ªfcou¡
) != 1)

1601  -
EFSCORRUPTED
;

1603 
º
 = 
	`kmem_Æloc
((
xfs_ªfcou¡_ªcovîy
), 
KM_SLEEP
);

1604 
	`xfs_ªfcou¡_båec_to_úec
(
ªc
, &
º
->
º_ºec
);

1605 
	`li°_add_èû
(&
º
->
º_li°
, 
debris
);

1608 
	}
}

1612 
	$xfs_ªfcou¡_ªcovî_cow_À·ovîs
(

1613 
xfs_mou¡
 *
mp
,

1614 
xfs_agnumbî_t
 
agno
)

1616 
xfs_å™s
 *
ç
;

1617 
xfs_båì_cur
 *
cur
;

1618 
xfs_buf
 *
agbp
;

1619 
xfs_ªfcou¡_ªcovîy
 *
º
, *
n
;

1620 
li°_hód
 
debris
;

1621 
xfs_båì_úec
 
low
;

1622 
xfs_båì_úec
 
high
;

1623 
xfs_de„r_›s
 
df›s
;

1624 
xfs_fsblock_t
 
fsb
;

1625 
xfs_agblock_t
 
agbno
;

1626 
îr‹
;

1628 i‡(
mp
->
m_sb
.
sb_agblocks
 >
XFS_REFC_COW_START
)

1629  -
EOPNOTSUPP
;

1631 
îr‹
 = 
	`xfs_Æloc_ªad_agf
(
mp
, 
NULL
, 
agno
, 0, &
agbp
);

1632 i‡(
îr‹
)

1633  
îr‹
;

1634 
cur
 = 
	`xfs_ªfcou¡bt_öô_curs‹
(
mp
, 
NULL
, 
agbp
, 
agno
, NULL);

1637 
	`INIT_LIST_HEAD
(&
debris
);

1638 
	`mem£t
(&
low
, 0, (low));

1639 
	`mem£t
(&
high
, 0, (high));

1640 
low
.
rc
.
rc_°¨tblock
 = 
XFS_REFC_COW_START
;

1641 
high
.
rc
.
rc_°¨tblock
 = -1U;

1642 
îr‹
 = 
	`xfs_båì_quîy_ønge
(
cur
, &
low
, &
high
,

1643 
xfs_ªfcou¡_ªcovî_exã¡
, &
debris
);

1644 i‡(
îr‹
)

1645 
out_curs‹
;

1646 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

1647 
	`xfs_buf_ªl£
(
agbp
);

1650 
	`li°_f‹_óch_íåy
(
º
, &
debris
, 
º_li°
) {

1652 
îr‹
 = 
	`xfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_wrôe
, 0, 0, 0, &
ç
);

1653 i‡(
îr‹
)

1654 
out_‰ì
;

1656 
	`åa˚_xfs_ªfcou¡_ªcovî_exã¡
(
mp
, 
agno
, &
º
->
º_ºec
);

1659 
	`xfs_de„r_öô
(&
df›s
, &
fsb
);

1660 
agbno
 = 
º
->
º_ºec
.
rc_°¨tblock
 - 
XFS_REFC_COW_START
;

1661 
fsb
 = 
	`XFS_AGB_TO_FSB
(
mp
, 
agno
, 
agbno
);

1662 
îr‹
 = 
	`xfs_ªfcou¡_‰ì_cow_exã¡
(
mp
, &
df›s
, 
fsb
,

1663 
º
->
º_ºec
.
rc_blockcou¡
);

1664 i‡(
îr‹
)

1665 
out_de„r
;

1668 
	`xfs_bm≠_add_‰ì
(
mp
, &
df›s
, 
fsb
,

1669 
º
->
º_ºec
.
rc_blockcou¡
, 
NULL
);

1671 
îr‹
 = 
	`xfs_de„r_föish
(&
ç
, &
df›s
, 
NULL
);

1672 i‡(
îr‹
)

1673 
out_de„r
;

1675 
îr‹
 = 
	`xfs_å™s_commô
(
ç
);

1676 i‡(
îr‹
)

1677 
out_‰ì
;

1680 
out_‰ì
:

1682 
	`li°_f‹_óch_íåy_ß„
(
º
, 
n
, &
debris
, 
º_li°
) {

1683 
	`li°_dñ
(&
º
->
º_li°
);

1684 
	`kmem_‰ì
(
º
);

1686  
îr‹
;

1688 
out_curs‹
:

1689 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

1690 
	`xfs_buf_ªl£
(
agbp
);

1691 
out_‰ì
;

1693 
out_de„r
:

1694 
	`xfs_de„r_ˇn˚l
(&
df›s
);

1695 
	`xfs_å™s_ˇn˚l
(
ç
);

1696 
out_‰ì
;

1697 
	}
}

	@libxfs/xfs_refcount.h

20 #i‚de‡
__XFS_REFCOUNT_H__


21 
	#__XFS_REFCOUNT_H__


	)

23 
xfs_ªfcou¡_lookup_À
(
xfs_båì_cur
 *
cur
,

24 
xfs_agblock_t
 
bno
, *
°©
);

25 
xfs_ªfcou¡_lookup_ge
(
xfs_båì_cur
 *
cur
,

26 
xfs_agblock_t
 
bno
, *
°©
);

27 
xfs_ªfcou¡_gë_ªc
(
xfs_båì_cur
 *
cur
,

28 
xfs_ªfcou¡_úec
 *
úec
, *
°©
);

30 
	exfs_ªfcou¡_öã¡_ty≥
 {

31 
	mXFS_REFCOUNT_INCREASE
 = 1,

32 
	mXFS_REFCOUNT_DECREASE
,

33 
	mXFS_REFCOUNT_ALLOC_COW
,

34 
	mXFS_REFCOUNT_FREE_COW
,

37 
	sxfs_ªfcou¡_öã¡
 {

38 
li°_hód
 
	mri_li°
;

39 
xfs_ªfcou¡_öã¡_ty≥
 
	mri_ty≥
;

40 
xfs_fsblock_t
 
	mri_°¨tblock
;

41 
xfs_exéí_t
 
	mri_blockcou¡
;

44 
xfs_ªfcou¡_ö¸ó£_exã¡
(
xfs_mou¡
 *
mp
,

45 
xfs_de„r_›s
 *
df›s
, 
xfs_bmbt_úec
 *
úec
);

46 
xfs_ªfcou¡_de¸ó£_exã¡
(
xfs_mou¡
 *
mp
,

47 
xfs_de„r_›s
 *
df›s
, 
xfs_bmbt_úec
 *
úec
);

49 
xfs_ªfcou¡_föish_⁄e_˛ónup
(
xfs_å™s
 *
ç
,

50 
xfs_båì_cur
 *
rcur
, 
îr‹
);

51 
xfs_ªfcou¡_föish_⁄e
(
xfs_å™s
 *
ç
,

52 
xfs_de„r_›s
 *
df›s
, 
xfs_ªfcou¡_öã¡_ty≥
 
ty≥
,

53 
xfs_fsblock_t
 
°¨tblock
, 
xfs_exéí_t
 
blockcou¡
,

54 
xfs_fsblock_t
 *
√w_fsb
, 
xfs_exéí_t
 *
√w_Àn
,

55 
xfs_båì_cur
 **
pcur
);

57 
xfs_ªfcou¡_föd_sh¨ed
(
xfs_båì_cur
 *
cur
,

58 
xfs_agblock_t
 
agbno
, 
xfs_exéí_t
 
agÀn
, xfs_agblock_à*
fbno
,

59 
xfs_exéí_t
 *
Êí
, 
boﬁ
 
föd_íd_of_sh¨ed
);

61 
xfs_ªfcou¡_Æloc_cow_exã¡
(
xfs_mou¡
 *
mp
,

62 
xfs_de„r_›s
 *
df›s
, 
xfs_fsblock_t
 
fsb
,

63 
xfs_exéí_t
 
Àn
);

64 
xfs_ªfcou¡_‰ì_cow_exã¡
(
xfs_mou¡
 *
mp
,

65 
xfs_de„r_›s
 *
df›s
, 
xfs_fsblock_t
 
fsb
,

66 
xfs_exéí_t
 
Àn
);

67 
xfs_ªfcou¡_ªcovî_cow_À·ovîs
(
xfs_mou¡
 *
mp
,

68 
xfs_agnumbî_t
 
agno
);

	@libxfs/xfs_refcount_btree.c

20 
	~"libxfs_¥iv.h
"

21 
	~"xfs_fs.h
"

22 
	~"xfs_sh¨ed.h
"

23 
	~"xfs_f‹m©.h
"

24 
	~"xfs_log_f‹m©.h
"

25 
	~"xfs_å™s_ªsv.h
"

26 
	~"xfs_sb.h
"

27 
	~"xfs_mou¡.h
"

28 
	~"xfs_båì.h
"

29 
	~"xfs_bm≠.h
"

30 
	~"xfs_ªfcou¡_båì.h
"

31 
	~"xfs_Æloc.h
"

32 
	~"xfs_åa˚.h
"

33 
	~"xfs_cksum.h
"

34 
	~"xfs_å™s.h
"

35 
	~"xfs_bô.h
"

36 
	~"xfs_rm≠.h
"

38 
xfs_båì_cur
 *

39 
	$xfs_ªfcou¡bt_dup_curs‹
(

40 
xfs_båì_cur
 *
cur
)

42  
	`xfs_ªfcou¡bt_öô_curs‹
(
cur
->
bc_mp
, cur->
bc_ç
,

43 
cur
->
bc_¥iv©e
.
a
.
agbp
, cur->bc_¥iv©e.a.
agno
,

44 
cur
->
bc_¥iv©e
.
a
.
df›s
);

45 
	}
}

47 
STATIC
 

48 
	$xfs_ªfcou¡bt_£t_roŸ
(

49 
xfs_båì_cur
 *
cur
,

50 
xfs_båì_±r
 *
±r
,

51 
öc
)

53 
xfs_buf
 *
agbp
 = 
cur
->
bc_¥iv©e
.
a
.agbp;

54 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

55 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

56 
xfs_≥øg
 *
∑g
 = 
	`xfs_≥øg_gë
(
cur
->
bc_mp
, 
£qno
);

58 
	`ASSERT
(
±r
->
s
 != 0);

60 
agf
->
agf_ªfcou¡_roŸ
 = 
±r
->
s
;

61 
	`be32_add_˝u
(&
agf
->
agf_ªfcou¡_Àvñ
, 
öc
);

62 
∑g
->
∑gf_ªfcou¡_Àvñ
 +
öc
;

63 
	`xfs_≥øg_put
(
∑g
);

65 
	`xfs_Æloc_log_agf
(
cur
->
bc_ç
, 
agbp
,

66 
XFS_AGF_REFCOUNT_ROOT
 | 
XFS_AGF_REFCOUNT_LEVEL
);

67 
	}
}

69 
STATIC
 

70 
	$xfs_ªfcou¡bt_Æloc_block
(

71 
xfs_båì_cur
 *
cur
,

72 
xfs_båì_±r
 *
°¨t
,

73 
xfs_båì_±r
 *
√w
,

74 *
°©
)

76 
xfs_buf
 *
agbp
 = 
cur
->
bc_¥iv©e
.
a
.agbp;

77 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

78 
xfs_Æloc_¨g
 
¨gs
;

79 
îr‹
;

81 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

83 
	`mem£t
(&
¨gs
, 0, (args));

84 
¨gs
.
ç
 = 
cur
->
bc_ç
;

85 
¨gs
.
mp
 = 
cur
->
bc_mp
;

86 
¨gs
.
ty≥
 = 
XFS_ALLOCTYPE_NEAR_BNO
;

87 
¨gs
.
fsbno
 = 
	`XFS_AGB_TO_FSB
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

88 
	`xfs_ªfc_block
(
¨gs
.
mp
));

89 
¨gs
.
fú°block
 =árgs.
fsbno
;

90 
	`xfs_rm≠_ag_ow√r
(&
¨gs
.
oöfo
, 
XFS_RMAP_OWN_REFC
);

91 
¨gs
.
möÀn
 =árgs.
maxÀn
 =árgs.
¥od
 = 1;

92 
¨gs
.
ªsv
 = 
XFS_AG_RESV_METADATA
;

94 
îr‹
 = 
	`xfs_Æloc_vexã¡
(&
¨gs
);

95 i‡(
îr‹
)

96 
out_îr‹
;

97 
	`åa˚_xfs_ªfcou¡bt_Æloc_block
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

98 
¨gs
.
agbno
, 1);

99 i‡(
¨gs
.
fsbno
 =
NULLFSBLOCK
) {

100 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

101 *
°©
 = 0;

104 
	`ASSERT
(
¨gs
.
agno
 =
cur
->
bc_¥iv©e
.
a
.agno);

105 
	`ASSERT
(
¨gs
.
Àn
 == 1);

107 
√w
->
s
 = 
	`˝u_to_be32
(
¨gs
.
agbno
);

108 
	`be32_add_˝u
(&
agf
->
agf_ªfcou¡_blocks
, 1);

109 
	`xfs_Æloc_log_agf
(
cur
->
bc_ç
, 
agbp
, 
XFS_AGF_REFCOUNT_BLOCKS
);

111 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

112 *
°©
 = 1;

115 
out_îr‹
:

116 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

117  
îr‹
;

118 
	}
}

120 
STATIC
 

121 
	$xfs_ªfcou¡bt_‰ì_block
(

122 
xfs_båì_cur
 *
cur
,

123 
xfs_buf
 *
bp
)

125 
xfs_mou¡
 *
mp
 = 
cur
->
bc_mp
;

126 
xfs_buf
 *
agbp
 = 
cur
->
bc_¥iv©e
.
a
.agbp;

127 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

128 
xfs_fsblock_t
 
fsbno
 = 
	`XFS_DADDR_TO_FSB
(
mp
, 
	`XFS_BUF_ADDR
(
bp
));

129 
xfs_ow√r_öfo
 
oöfo
;

130 
îr‹
;

132 
	`åa˚_xfs_ªfcou¡bt_‰ì_block
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

133 
	`XFS_FSB_TO_AGBNO
(
cur
->
bc_mp
, 
fsbno
), 1);

134 
	`xfs_rm≠_ag_ow√r
(&
oöfo
, 
XFS_RMAP_OWN_REFC
);

135 
	`be32_add_˝u
(&
agf
->
agf_ªfcou¡_blocks
, -1);

136 
	`xfs_Æloc_log_agf
(
cur
->
bc_ç
, 
agbp
, 
XFS_AGF_REFCOUNT_BLOCKS
);

137 
îr‹
 = 
	`xfs_‰ì_exã¡
(
cur
->
bc_ç
, 
fsbno
, 1, &
oöfo
,

138 
XFS_AG_RESV_METADATA
);

139 i‡(
îr‹
)

140  
îr‹
;

142  
îr‹
;

143 
	}
}

145 
STATIC
 

146 
	$xfs_ªfcou¡bt_gë_möªcs
(

147 
xfs_båì_cur
 *
cur
,

148 
Àvñ
)

150  
cur
->
bc_mp
->
m_ªfc_mƒ
[
Àvñ
 != 0];

151 
	}
}

153 
STATIC
 

154 
	$xfs_ªfcou¡bt_gë_maxªcs
(

155 
xfs_båì_cur
 *
cur
,

156 
Àvñ
)

158  
cur
->
bc_mp
->
m_ªfc_mxr
[
Àvñ
 != 0];

159 
	}
}

161 
STATIC
 

162 
	$xfs_ªfcou¡bt_öô_key_‰om_ªc
(

163 
xfs_båì_key
 *
key
,

164 
xfs_båì_ªc
 *
ªc
)

166 
key
->
ªfc
.
rc_°¨tblock
 = 
ªc
->refc.rc_startblock;

167 
	}
}

169 
STATIC
 

170 
	$xfs_ªfcou¡bt_öô_high_key_‰om_ªc
(

171 
xfs_båì_key
 *
key
,

172 
xfs_båì_ªc
 *
ªc
)

174 
__u32
 
x
;

176 
x
 = 
	`be32_to_˝u
(
ªc
->
ªfc
.
rc_°¨tblock
);

177 
x
 +
	`be32_to_˝u
(
ªc
->
ªfc
.
rc_blockcou¡
) - 1;

178 
key
->
ªfc
.
rc_°¨tblock
 = 
	`˝u_to_be32
(
x
);

179 
	}
}

181 
STATIC
 

182 
	$xfs_ªfcou¡bt_öô_ªc_‰om_cur
(

183 
xfs_båì_cur
 *
cur
,

184 
xfs_båì_ªc
 *
ªc
)

186 
ªc
->
ªfc
.
rc_°¨tblock
 = 
	`˝u_to_be32
(
cur
->
bc_ªc
.
rc
.rc_startblock);

187 
ªc
->
ªfc
.
rc_blockcou¡
 = 
	`˝u_to_be32
(
cur
->
bc_ªc
.
rc
.rc_blockcount);

188 
ªc
->
ªfc
.
rc_ªfcou¡
 = 
	`˝u_to_be32
(
cur
->
bc_ªc
.
rc
.rc_refcount);

189 
	}
}

191 
STATIC
 

192 
	$xfs_ªfcou¡bt_öô_±r_‰om_cur
(

193 
xfs_båì_cur
 *
cur
,

194 
xfs_båì_±r
 *
±r
)

196 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
cur
->
bc_¥iv©e
.
a
.
agbp
);

198 
	`ASSERT
(
cur
->
bc_¥iv©e
.
a
.
agno
 =
	`be32_to_˝u
(
agf
->
agf_£qno
));

199 
	`ASSERT
(
agf
->
agf_ªfcou¡_roŸ
 != 0);

201 
±r
->
s
 = 
agf
->
agf_ªfcou¡_roŸ
;

202 
	}
}

204 
STATIC
 
__öt64_t


205 
	$xfs_ªfcou¡bt_key_diff
(

206 
xfs_båì_cur
 *
cur
,

207 
xfs_båì_key
 *
key
)

209 
xfs_ªfcou¡_úec
 *
ªc
 = &
cur
->
bc_ªc
.
rc
;

210 
xfs_ªfcou¡_key
 *
kp
 = &
key
->
ªfc
;

212  (
__öt64_t
)
	`be32_to_˝u
(
kp
->
rc_°¨tblock
Ë- 
ªc
->rc_startblock;

213 
	}
}

215 
STATIC
 
__öt64_t


216 
	$xfs_ªfcou¡bt_diff_two_keys
(

217 
xfs_båì_cur
 *
cur
,

218 
xfs_båì_key
 *
k1
,

219 
xfs_båì_key
 *
k2
)

221  (
__öt64_t
)
	`be32_to_˝u
(
k1
->
ªfc
.
rc_°¨tblock
) -

222 
	`be32_to_˝u
(
k2
->
ªfc
.
rc_°¨tblock
);

223 
	}
}

225 
STATIC
 
boﬁ


226 
	$xfs_ªfcou¡bt_vîify
(

227 
xfs_buf
 *
bp
)

229 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

230 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

231 
xfs_≥øg
 *
∑g
 = 
bp
->
b_∑g
;

232 
Àvñ
;

234 i‡(
block
->
bb_magic
 !
	`˝u_to_be32
(
XFS_REFC_CRC_MAGIC
))

235  
Ál£
;

237 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

238  
Ál£
;

239 i‡(!
	`xfs_båì_sblock_v5hdr_vîify
(
bp
))

240  
Ál£
;

242 
Àvñ
 = 
	`be16_to_˝u
(
block
->
bb_Àvñ
);

243 i‡(
∑g
 &&Öag->
∑gf_öô
) {

244 i‡(
Àvñ
 >
∑g
->
∑gf_ªfcou¡_Àvñ
)

245  
Ál£
;

246 } i‡(
Àvñ
 >
mp
->
m_ªfc_maxÀvñs
)

247  
Ál£
;

249  
	`xfs_båì_sblock_vîify
(
bp
, 
mp
->
m_ªfc_mxr
[
Àvñ
 != 0]);

250 
	}
}

252 
STATIC
 

253 
	$xfs_ªfcou¡bt_ªad_vîify
(

254 
xfs_buf
 *
bp
)

256 i‡(!
	`xfs_båì_sblock_vîify_¸c
(
bp
))

257 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

258 i‡(!
	`xfs_ªfcou¡bt_vîify
(
bp
))

259 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

261 i‡(
bp
->
b_îr‹
) {

262 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

263 
	`xfs_vîifõr_îr‹
(
bp
);

265 
	}
}

267 
STATIC
 

268 
	$xfs_ªfcou¡bt_wrôe_vîify
(

269 
xfs_buf
 *
bp
)

271 i‡(!
	`xfs_ªfcou¡bt_vîify
(
bp
)) {

272 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

273 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

274 
	`xfs_vîifõr_îr‹
(
bp
);

277 
	`xfs_båì_sblock_ˇlc_¸c
(
bp
);

279 
	}
}

281 c⁄° 
xfs_buf_›s
 
	gxfs_ªfcou¡bt_buf_›s
 = {

282 .
«me
 = "xfs_refcountbt",

283 .
	gvîify_ªad
 = 
xfs_ªfcou¡bt_ªad_vîify
,

284 .
	gvîify_wrôe
 = 
xfs_ªfcou¡bt_wrôe_vîify
,

287 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

288 
STATIC
 

289 
	$xfs_ªfcou¡bt_keys_ö‹dî
(

290 
xfs_båì_cur
 *
cur
,

291 
xfs_båì_key
 *
k1
,

292 
xfs_båì_key
 *
k2
)

294  
	`be32_to_˝u
(
k1
->
ªfc
.
rc_°¨tblock
) <

295 
	`be32_to_˝u
(
k2
->
ªfc
.
rc_°¨tblock
);

296 
	}
}

298 
STATIC
 

299 
	$xfs_ªfcou¡bt_ªcs_ö‹dî
(

300 
xfs_båì_cur
 *
cur
,

301 
xfs_båì_ªc
 *
r1
,

302 
xfs_båì_ªc
 *
r2
)

304  
	`be32_to_˝u
(
r1
->
ªfc
.
rc_°¨tblock
) +

305 
	`be32_to_˝u
(
r1
->
ªfc
.
rc_blockcou¡
) <=

306 
	`be32_to_˝u
(
r2
->
ªfc
.
rc_°¨tblock
);

307 
	}
}

310 c⁄° 
xfs_båì_›s
 
	gxfs_ªfcou¡bt_›s
 = {

311 .
ªc_Àn
 = (
xfs_ªfcou¡_ªc
),

312 .
	gkey_Àn
 = (
xfs_ªfcou¡_key
),

314 .
	gdup_curs‹
 = 
xfs_ªfcou¡bt_dup_curs‹
,

315 .
	g£t_roŸ
 = 
xfs_ªfcou¡bt_£t_roŸ
,

316 .
	gÆloc_block
 = 
xfs_ªfcou¡bt_Æloc_block
,

317 .
	g‰ì_block
 = 
xfs_ªfcou¡bt_‰ì_block
,

318 .
	ggë_möªcs
 = 
xfs_ªfcou¡bt_gë_möªcs
,

319 .
	ggë_maxªcs
 = 
xfs_ªfcou¡bt_gë_maxªcs
,

320 .
	göô_key_‰om_ªc
 = 
xfs_ªfcou¡bt_öô_key_‰om_ªc
,

321 .
	göô_high_key_‰om_ªc
 = 
xfs_ªfcou¡bt_öô_high_key_‰om_ªc
,

322 .
	göô_ªc_‰om_cur
 = 
xfs_ªfcou¡bt_öô_ªc_‰om_cur
,

323 .
	göô_±r_‰om_cur
 = 
xfs_ªfcou¡bt_öô_±r_‰om_cur
,

324 .
	gkey_diff
 = 
xfs_ªfcou¡bt_key_diff
,

325 .
	gbuf_›s
 = &
xfs_ªfcou¡bt_buf_›s
,

326 .
	gdiff_two_keys
 = 
xfs_ªfcou¡bt_diff_two_keys
,

327 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

328 .
	gkeys_ö‹dî
 = 
xfs_ªfcou¡bt_keys_ö‹dî
,

329 .
	gªcs_ö‹dî
 = 
xfs_ªfcou¡bt_ªcs_ö‹dî
,

336 
xfs_båì_cur
 *

337 
	$xfs_ªfcou¡bt_öô_curs‹
(

338 
xfs_mou¡
 *
mp
,

339 
xfs_å™s
 *
ç
,

340 
xfs_buf
 *
agbp
,

341 
xfs_agnumbî_t
 
agno
,

342 
xfs_de„r_›s
 *
df›s
)

344 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

345 
xfs_båì_cur
 *
cur
;

347 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

348 
	`ASSERT
(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
);

349 
cur
 = 
	`kmem_z⁄e_zÆloc
(
xfs_båì_cur_z⁄e
, 
KM_NOFS
);

351 
cur
->
bc_ç
 = 
ç
;

352 
cur
->
bc_mp
 = 
mp
;

353 
cur
->
bc_bäum
 = 
XFS_BTNUM_REFC
;

354 
cur
->
bc_blocklog
 = 
mp
->
m_sb
.
sb_blocklog
;

355 
cur
->
bc_›s
 = &
xfs_ªfcou¡bt_›s
;

356 
cur
->
bc_°©off
 = 
	`XFS_STATS_CALC_INDEX
(
xs_ªfcbt_2
);

358 
cur
->
bc_∆evñs
 = 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_Àvñ
);

360 
cur
->
bc_¥iv©e
.
a
.
agbp
 =ágbp;

361 
cur
->
bc_¥iv©e
.
a
.
agno
 =ágno;

362 
cur
->
bc_¥iv©e
.
a
.
df›s
 = dfops;

363 
cur
->
bc_Êags
 |
XFS_BTREE_CRC_BLOCKS
;

365 
cur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
ƒ_›s
 = 0;

366 
cur
->
bc_¥iv©e
.
a
.
¥iv
.
ªfc
.
sh≠e_ch™ges
 = 0;

368  
cur
;

369 
	}
}

375 
	$xfs_ªfcou¡bt_maxªcs
(

376 
xfs_mou¡
 *
mp
,

377 
blockÀn
,

378 
boﬁ
 
Àaf
)

380 
blockÀn
 -
XFS_REFCOUNT_BLOCK_LEN
;

382 i‡(
Àaf
)

383  
blockÀn
 / (
xfs_ªfcou¡_ªc
);

384  
blockÀn
 / ((
xfs_ªfcou¡_key
) +

385 (
xfs_ªfcou¡_±r_t
));

386 
	}
}

390 
	$xfs_ªfcou¡bt_compuã_maxÀvñs
(

391 
xfs_mou¡
 *
mp
)

393 
mp
->
m_ªfc_maxÀvñs
 = 
	`xfs_båì_compuã_maxÀvñs
(mp,

394 
mp
->
m_ªfc_mƒ
, mp->
m_sb
.
sb_agblocks
);

395 
	}
}

398 
xfs_exéí_t


399 
	$xfs_ªfcou¡bt_ˇlc_size
(

400 
xfs_mou¡
 *
mp
,

401 
Àn
)

403  
	`xfs_båì_ˇlc_size
(
mp
, mp->
m_ªfc_mƒ
, 
Àn
);

404 
	}
}

409 
xfs_exéí_t


410 
	$xfs_ªfcou¡bt_max_size
(

411 
xfs_mou¡
 *
mp
,

412 
xfs_agblock_t
 
agblocks
)

415 i‡(
mp
->
m_ªfc_mxr
[0] == 0)

418  
	`xfs_ªfcou¡bt_ˇlc_size
(
mp
, 
agblocks
);

419 
	}
}

425 
	$xfs_ªfcou¡bt_ˇlc_ª£rves
(

426 
xfs_mou¡
 *
mp
,

427 
xfs_agnumbî_t
 
agno
,

428 
xfs_exéí_t
 *
ask
,

429 
xfs_exéí_t
 *
u£d
)

431 
xfs_buf
 *
agbp
;

432 
xfs_agf
 *
agf
;

433 
xfs_agblock_t
 
agblocks
;

434 
xfs_exéí_t
 
åì_Àn
;

435 
îr‹
;

437 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

441 
îr‹
 = 
	`xfs_Æloc_ªad_agf
(
mp
, 
NULL
, 
agno
, 0, &
agbp
);

442 i‡(
îr‹
)

443  
îr‹
;

445 
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

446 
agblocks
 = 
	`be32_to_˝u
(
agf
->
agf_Àngth
);

447 
åì_Àn
 = 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_blocks
);

448 
	`xfs_buf_ªl£
(
agbp
);

450 *
ask
 +
	`xfs_ªfcou¡bt_max_size
(
mp
, 
agblocks
);

451 *
u£d
 +
åì_Àn
;

453  
îr‹
;

454 
	}
}

	@libxfs/xfs_refcount_btree.h

20 #i‚de‡
__XFS_REFCOUNT_BTREE_H__


21 
	#__XFS_REFCOUNT_BTREE_H__


	)

27 
	gxfs_buf
;

28 
	gxfs_båì_cur
;

29 
	gxfs_mou¡
;

34 
	#XFS_REFCOUNT_BLOCK_LEN
 
XFS_BTREE_SBLOCK_CRC_LEN


	)

41 
	#XFS_REFCOUNT_REC_ADDR
(
block
, 
ödex
) \

42 ((
xfs_ªfcou¡_ªc
 *) \

43 ((*)(
block
) + \

44 
XFS_REFCOUNT_BLOCK_LEN
 + \

45 (((
ödex
Ë- 1Ë* (
xfs_ªfcou¡_ªc
))))

	)

47 
	#XFS_REFCOUNT_KEY_ADDR
(
block
, 
ödex
) \

48 ((
xfs_ªfcou¡_key
 *) \

49 ((*)(
block
) + \

50 
XFS_REFCOUNT_BLOCK_LEN
 + \

51 ((
ödex
Ë- 1Ë* (
xfs_ªfcou¡_key
)))

	)

53 
	#XFS_REFCOUNT_PTR_ADDR
(
block
, 
ödex
, 
maxªcs
) \

54 ((
xfs_ªfcou¡_±r_t
 *) \

55 ((*)(
block
) + \

56 
XFS_REFCOUNT_BLOCK_LEN
 + \

57 (
maxªcs
Ë* (
xfs_ªfcou¡_key
) + \

58 ((
ödex
Ë- 1Ë* (
xfs_ªfcou¡_±r_t
)))

	)

60 
xfs_båì_cur
 *
xfs_ªfcou¡bt_öô_curs‹
(
xfs_mou¡
 *
mp
,

61 
xfs_å™s
 *
ç
, 
xfs_buf
 *
agbp
, 
xfs_agnumbî_t
 
agno
,

62 
xfs_de„r_›s
 *
df›s
);

63 
xfs_ªfcou¡bt_maxªcs
(
xfs_mou¡
 *
mp
, 
blockÀn
,

64 
boﬁ
 
Àaf
);

65 
xfs_ªfcou¡bt_compuã_maxÀvñs
(
xfs_mou¡
 *
mp
);

67 
xfs_exéí_t
 
xfs_ªfcou¡bt_ˇlc_size
(
xfs_mou¡
 *
mp
,

68 
Àn
);

69 
xfs_exéí_t
 
xfs_ªfcou¡bt_max_size
(
xfs_mou¡
 *
mp
,

70 
xfs_agblock_t
 
agblocks
);

72 
xfs_ªfcou¡bt_ˇlc_ª£rves
(
xfs_mou¡
 *
mp
,

73 
xfs_agnumbî_t
 
agno
, 
xfs_exéí_t
 *
ask
, xfs_exéí_à*
u£d
);

	@libxfs/xfs_rmap.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_bô.h
"

25 
	~"xfs_sb.h
"

26 
	~"xfs_mou¡.h
"

27 
	~"xfs_de„r.h
"

28 
	~"xfs_da_f‹m©.h
"

29 
	~"xfs_da_båì.h
"

30 
	~"xfs_båì.h
"

31 
	~"xfs_å™s.h
"

32 
	~"xfs_Æloc.h
"

33 
	~"xfs_rm≠.h
"

34 
	~"xfs_rm≠_båì.h
"

35 
	~"xfs_å™s_•a˚.h
"

36 
	~"xfs_åa˚.h
"

37 
	~"xfs_bm≠.h
"

38 
	~"xfs_öode.h
"

45 
	$xfs_rm≠_lookup_À
(

46 
xfs_båì_cur
 *
cur
,

47 
xfs_agblock_t
 
bno
,

48 
xfs_exéí_t
 
Àn
,

49 
uöt64_t
 
ow√r
,

50 
uöt64_t
 
off£t
,

51 
Êags
,

52 *
°©
)

54 
cur
->
bc_ªc
.
r
.
rm_°¨tblock
 = 
bno
;

55 
cur
->
bc_ªc
.
r
.
rm_blockcou¡
 = 
Àn
;

56 
cur
->
bc_ªc
.
r
.
rm_ow√r
 = 
ow√r
;

57 
cur
->
bc_ªc
.
r
.
rm_off£t
 = 
off£t
;

58 
cur
->
bc_ªc
.
r
.
rm_Êags
 = 
Êags
;

59  
	`xfs_båì_lookup
(
cur
, 
XFS_LOOKUP_LE
, 
°©
);

60 
	}
}

67 
	$xfs_rm≠_lookup_eq
(

68 
xfs_båì_cur
 *
cur
,

69 
xfs_agblock_t
 
bno
,

70 
xfs_exéí_t
 
Àn
,

71 
uöt64_t
 
ow√r
,

72 
uöt64_t
 
off£t
,

73 
Êags
,

74 *
°©
)

76 
cur
->
bc_ªc
.
r
.
rm_°¨tblock
 = 
bno
;

77 
cur
->
bc_ªc
.
r
.
rm_blockcou¡
 = 
Àn
;

78 
cur
->
bc_ªc
.
r
.
rm_ow√r
 = 
ow√r
;

79 
cur
->
bc_ªc
.
r
.
rm_off£t
 = 
off£t
;

80 
cur
->
bc_ªc
.
r
.
rm_Êags
 = 
Êags
;

81  
	`xfs_båì_lookup
(
cur
, 
XFS_LOOKUP_EQ
, 
°©
);

82 
	}
}

89 
STATIC
 

90 
	$xfs_rm≠_upd©e
(

91 
xfs_båì_cur
 *
cur
,

92 
xfs_rm≠_úec
 *
úec
)

94 
xfs_båì_ªc
 
ªc
;

95 
îr‹
;

97 
	`åa˚_xfs_rm≠_upd©e
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

98 
úec
->
rm_°¨tblock
, iªc->
rm_blockcou¡
,

99 
úec
->
rm_ow√r
, iªc->
rm_off£t
, iªc->
rm_Êags
);

101 
ªc
.
rm≠
.
rm_°¨tblock
 = 
	`˝u_to_be32
(
úec
->rm_startblock);

102 
ªc
.
rm≠
.
rm_blockcou¡
 = 
	`˝u_to_be32
(
úec
->rm_blockcount);

103 
ªc
.
rm≠
.
rm_ow√r
 = 
	`˝u_to_be64
(
úec
->rm_owner);

104 
ªc
.
rm≠
.
rm_off£t
 = 
	`˝u_to_be64
(

105 
	`xfs_rm≠_úec_off£t_∑ck
(
úec
));

106 
îr‹
 = 
	`xfs_båì_upd©e
(
cur
, &
ªc
);

107 i‡(
îr‹
)

108 
	`åa˚_xfs_rm≠_upd©e_îr‹
(
cur
->
bc_mp
,

109 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

110  
îr‹
;

111 
	}
}

114 
	$xfs_rm≠_ö£π
(

115 
xfs_båì_cur
 *
rcur
,

116 
xfs_agblock_t
 
agbno
,

117 
xfs_exéí_t
 
Àn
,

118 
uöt64_t
 
ow√r
,

119 
uöt64_t
 
off£t
,

120 
Êags
)

122 
i
;

123 
îr‹
;

125 
	`åa˚_xfs_rm≠_ö£π
(
rcur
->
bc_mp
,Ñcur->
bc_¥iv©e
.
a
.
agno
, 
agbno
,

126 
Àn
, 
ow√r
, 
off£t
, 
Êags
);

128 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
rcur
, 
agbno
, 
Àn
, 
ow√r
, 
off£t
, 
Êags
, &
i
);

129 i‡(
îr‹
)

130 
d⁄e
;

131 
	`XFS_WANT_CORRUPTED_GOTO
(
rcur
->
bc_mp
, 
i
 =0, 
d⁄e
);

133 
rcur
->
bc_ªc
.
r
.
rm_°¨tblock
 = 
agbno
;

134 
rcur
->
bc_ªc
.
r
.
rm_blockcou¡
 = 
Àn
;

135 
rcur
->
bc_ªc
.
r
.
rm_ow√r
 = 
ow√r
;

136 
rcur
->
bc_ªc
.
r
.
rm_off£t
 = 
off£t
;

137 
rcur
->
bc_ªc
.
r
.
rm_Êags
 = 
Êags
;

138 
îr‹
 = 
	`xfs_båì_ö£π
(
rcur
, &
i
);

139 i‡(
îr‹
)

140 
d⁄e
;

141 
	`XFS_WANT_CORRUPTED_GOTO
(
rcur
->
bc_mp
, 
i
 =1, 
d⁄e
);

142 
d⁄e
:

143 i‡(
îr‹
)

144 
	`åa˚_xfs_rm≠_ö£π_îr‹
(
rcur
->
bc_mp
,

145 
rcur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

146  
îr‹
;

147 
	}
}

149 
STATIC
 

150 
	$xfs_rm≠_dñëe
(

151 
xfs_båì_cur
 *
rcur
,

152 
xfs_agblock_t
 
agbno
,

153 
xfs_exéí_t
 
Àn
,

154 
uöt64_t
 
ow√r
,

155 
uöt64_t
 
off£t
,

156 
Êags
)

158 
i
;

159 
îr‹
;

161 
	`åa˚_xfs_rm≠_dñëe
(
rcur
->
bc_mp
,Ñcur->
bc_¥iv©e
.
a
.
agno
, 
agbno
,

162 
Àn
, 
ow√r
, 
off£t
, 
Êags
);

164 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
rcur
, 
agbno
, 
Àn
, 
ow√r
, 
off£t
, 
Êags
, &
i
);

165 i‡(
îr‹
)

166 
d⁄e
;

167 
	`XFS_WANT_CORRUPTED_GOTO
(
rcur
->
bc_mp
, 
i
 =1, 
d⁄e
);

169 
îr‹
 = 
	`xfs_båì_dñëe
(
rcur
, &
i
);

170 i‡(
îr‹
)

171 
d⁄e
;

172 
	`XFS_WANT_CORRUPTED_GOTO
(
rcur
->
bc_mp
, 
i
 =1, 
d⁄e
);

173 
d⁄e
:

174 i‡(
îr‹
)

175 
	`åa˚_xfs_rm≠_dñëe_îr‹
(
rcur
->
bc_mp
,

176 
rcur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

177  
îr‹
;

178 
	}
}

181 
	$xfs_rm≠_båec_to_úec
(

182 
xfs_båì_ªc
 *
ªc
,

183 
xfs_rm≠_úec
 *
úec
)

185 
úec
->
rm_Êags
 = 0;

186 
úec
->
rm_°¨tblock
 = 
	`be32_to_˝u
(
ªc
->
rm≠
.rm_startblock);

187 
úec
->
rm_blockcou¡
 = 
	`be32_to_˝u
(
ªc
->
rm≠
.rm_blockcount);

188 
úec
->
rm_ow√r
 = 
	`be64_to_˝u
(
ªc
->
rm≠
.rm_owner);

189  
	`xfs_rm≠_úec_off£t_u≈ack
(
	`be64_to_˝u
(
ªc
->
rm≠
.
rm_off£t
),

190 
úec
);

191 
	}
}

197 
	$xfs_rm≠_gë_ªc
(

198 
xfs_båì_cur
 *
cur
,

199 
xfs_rm≠_úec
 *
úec
,

200 *
°©
)

202 
xfs_båì_ªc
 *
ªc
;

203 
îr‹
;

205 
îr‹
 = 
	`xfs_båì_gë_ªc
(
cur
, &
ªc
, 
°©
);

206 i‡(
îr‹
 || !*
°©
)

207  
îr‹
;

209  
	`xfs_rm≠_båec_to_úec
(
ªc
, 
úec
);

210 
	}
}

212 
	sxfs_föd_À·_√ighb‹_öfo
 {

213 
xfs_rm≠_úec
 
	mhigh
;

214 
xfs_rm≠_úec
 *
	múec
;

215 *
	m°©
;

219 
STATIC
 

220 
	$xfs_rm≠_föd_À·_√ighb‹_hñ≥r
(

221 
xfs_båì_cur
 *
cur
,

222 
xfs_rm≠_úec
 *
ªc
,

223 *
¥iv
)

225 
xfs_föd_À·_√ighb‹_öfo
 *
öfo
 = 
¥iv
;

227 
	`åa˚_xfs_rm≠_föd_À·_√ighb‹_ˇndid©e
(
cur
->
bc_mp
,

228 
cur
->
bc_¥iv©e
.
a
.
agno
, 
ªc
->
rm_°¨tblock
,

229 
ªc
->
rm_blockcou¡
,Ñec->
rm_ow√r
,Ñec->
rm_off£t
,

230 
ªc
->
rm_Êags
);

232 i‡(
ªc
->
rm_ow√r
 !
öfo
->
high
.rm_owner)

233  
XFS_BTREE_QUERY_RANGE_CONTINUE
;

234 i‡(!
	`XFS_RMAP_NON_INODE_OWNER
(
ªc
->
rm_ow√r
) &&

235 !(
ªc
->
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
) &&

236 
ªc
->
rm_off£t
 +Ñec->
rm_blockcou¡
 - 1 !
öfo
->
high
.rm_offset)

237  
XFS_BTREE_QUERY_RANGE_CONTINUE
;

239 *
öfo
->
úec
 = *
ªc
;

240 *
öfo
->
°©
 = 1;

241  
XFS_BTREE_QUERY_RANGE_ABORT
;

242 
	}
}

250 
	$xfs_rm≠_föd_À·_√ighb‹
(

251 
xfs_båì_cur
 *
cur
,

252 
xfs_agblock_t
 
bno
,

253 
uöt64_t
 
ow√r
,

254 
uöt64_t
 
off£t
,

255 
Êags
,

256 
xfs_rm≠_úec
 *
úec
,

257 *
°©
)

259 
xfs_föd_À·_√ighb‹_öfo
 
öfo
;

260 
îr‹
;

262 *
°©
 = 0;

263 i‡(
bno
 == 0)

265 
öfo
.
high
.
rm_°¨tblock
 = 
bno
 - 1;

266 
öfo
.
high
.
rm_ow√r
 = 
ow√r
;

267 i‡(!
	`XFS_RMAP_NON_INODE_OWNER
(
ow√r
) &&

268 !(
Êags
 & 
XFS_RMAP_BMBT_BLOCK
)) {

269 i‡(
off£t
 == 0)

271 
öfo
.
high
.
rm_off£t
 = 
off£t
 - 1;

273 
öfo
.
high
.
rm_off£t
 = 0;

274 
öfo
.
high
.
rm_Êags
 = 
Êags
;

275 
öfo
.
high
.
rm_blockcou¡
 = 0;

276 
öfo
.
úec
 = irec;

277 
öfo
.
°©
 = stat;

279 
	`åa˚_xfs_rm≠_föd_À·_√ighb‹_quîy
(
cur
->
bc_mp
,

280 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 0, 
ow√r
, 
off£t
, 
Êags
);

282 
îr‹
 = 
	`xfs_rm≠_quîy_ønge
(
cur
, &
öfo
.
high
, &info.high,

283 
xfs_rm≠_föd_À·_√ighb‹_hñ≥r
, &
öfo
);

284 i‡(
îr‹
 =
XFS_BTREE_QUERY_RANGE_ABORT
)

285 
îr‹
 = 0;

286 i‡(*
°©
)

287 
	`åa˚_xfs_rm≠_föd_À·_√ighb‹_ªsu…
(
cur
->
bc_mp
,

288 
cur
->
bc_¥iv©e
.
a
.
agno
, 
úec
->
rm_°¨tblock
,

289 
úec
->
rm_blockcou¡
, iªc->
rm_ow√r
,

290 
úec
->
rm_off£t
, iªc->
rm_Êags
);

291  
îr‹
;

292 
	}
}

295 
STATIC
 

296 
	$xfs_rm≠_lookup_À_ønge_hñ≥r
(

297 
xfs_båì_cur
 *
cur
,

298 
xfs_rm≠_úec
 *
ªc
,

299 *
¥iv
)

301 
xfs_föd_À·_√ighb‹_öfo
 *
öfo
 = 
¥iv
;

303 
	`åa˚_xfs_rm≠_lookup_À_ønge_ˇndid©e
(
cur
->
bc_mp
,

304 
cur
->
bc_¥iv©e
.
a
.
agno
, 
ªc
->
rm_°¨tblock
,

305 
ªc
->
rm_blockcou¡
,Ñec->
rm_ow√r
,Ñec->
rm_off£t
,

306 
ªc
->
rm_Êags
);

308 i‡(
ªc
->
rm_ow√r
 !
öfo
->
high
.rm_owner)

309  
XFS_BTREE_QUERY_RANGE_CONTINUE
;

310 i‡(!
	`XFS_RMAP_NON_INODE_OWNER
(
ªc
->
rm_ow√r
) &&

311 !(
ªc
->
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
) &&

312 (
ªc
->
rm_off£t
 > 
öfo
->
high
.rm_offset ||

313 
ªc
->
rm_off£t
 +Ñec->
rm_blockcou¡
 <
öfo
->
high
.rm_offset))

314  
XFS_BTREE_QUERY_RANGE_CONTINUE
;

316 *
öfo
->
úec
 = *
ªc
;

317 *
öfo
->
°©
 = 1;

318  
XFS_BTREE_QUERY_RANGE_ABORT
;

319 
	}
}

328 
	$xfs_rm≠_lookup_À_ønge
(

329 
xfs_båì_cur
 *
cur
,

330 
xfs_agblock_t
 
bno
,

331 
uöt64_t
 
ow√r
,

332 
uöt64_t
 
off£t
,

333 
Êags
,

334 
xfs_rm≠_úec
 *
úec
,

335 *
°©
)

337 
xfs_föd_À·_√ighb‹_öfo
 
öfo
;

338 
îr‹
;

340 
öfo
.
high
.
rm_°¨tblock
 = 
bno
;

341 
öfo
.
high
.
rm_ow√r
 = 
ow√r
;

342 i‡(!
	`XFS_RMAP_NON_INODE_OWNER
(
ow√r
Ë&& !(
Êags
 & 
XFS_RMAP_BMBT_BLOCK
))

343 
öfo
.
high
.
rm_off£t
 = 
off£t
;

345 
öfo
.
high
.
rm_off£t
 = 0;

346 
öfo
.
high
.
rm_Êags
 = 
Êags
;

347 
öfo
.
high
.
rm_blockcou¡
 = 0;

348 *
°©
 = 0;

349 
öfo
.
úec
 = irec;

350 
öfo
.
°©
 = stat;

352 
	`åa˚_xfs_rm≠_lookup_À_ønge
(
cur
->
bc_mp
,

353 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 0, 
ow√r
, 
off£t
, 
Êags
);

354 
îr‹
 = 
	`xfs_rm≠_quîy_ønge
(
cur
, &
öfo
.
high
, &info.high,

355 
xfs_rm≠_lookup_À_ønge_hñ≥r
, &
öfo
);

356 i‡(
îr‹
 =
XFS_BTREE_QUERY_RANGE_ABORT
)

357 
îr‹
 = 0;

358 i‡(*
°©
)

359 
	`åa˚_xfs_rm≠_lookup_À_ønge_ªsu…
(
cur
->
bc_mp
,

360 
cur
->
bc_¥iv©e
.
a
.
agno
, 
úec
->
rm_°¨tblock
,

361 
úec
->
rm_blockcou¡
, iªc->
rm_ow√r
,

362 
úec
->
rm_off£t
, iªc->
rm_Êags
);

363  
îr‹
;

364 
	}
}

384 
STATIC
 

385 
	$xfs_rm≠_unm≠
(

386 
xfs_båì_cur
 *
cur
,

387 
xfs_agblock_t
 
bno
,

388 
xfs_exéí_t
 
Àn
,

389 
boﬁ
 
unwrôãn
,

390 
xfs_ow√r_öfo
 *
oöfo
)

392 
xfs_mou¡
 *
mp
 = 
cur
->
bc_mp
;

393 
xfs_rm≠_úec
 
…ªc
;

394 
uöt64_t
 
…off
;

395 
îr‹
 = 0;

396 
i
;

397 
uöt64_t
 
ow√r
;

398 
uöt64_t
 
off£t
;

399 
Êags
;

400 
boﬁ
 
ign‹e_off
;

402 
	`xfs_ow√r_öfo_u≈ack
(
oöfo
, &
ow√r
, &
off£t
, &
Êags
);

403 
ign‹e_off
 = 
	`XFS_RMAP_NON_INODE_OWNER
(
ow√r
) ||

404 (
Êags
 & 
XFS_RMAP_BMBT_BLOCK
);

405 i‡(
unwrôãn
)

406 
Êags
 |
XFS_RMAP_UNWRITTEN
;

407 
	`åa˚_xfs_rm≠_unm≠
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

408 
unwrôãn
, 
oöfo
);

415 
îr‹
 = 
	`xfs_rm≠_lookup_À
(
cur
, 
bno
, 
Àn
, 
ow√r
, 
off£t
, 
Êags
, &
i
);

416 i‡(
îr‹
)

417 
out_îr‹
;

418 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
out_îr‹
);

420 
îr‹
 = 
	`xfs_rm≠_gë_ªc
(
cur
, &
…ªc
, &
i
);

421 i‡(
îr‹
)

422 
out_îr‹
;

423 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
out_îr‹
);

424 
	`åa˚_xfs_rm≠_lookup_À_ønge_ªsu…
(
cur
->
bc_mp
,

425 
cur
->
bc_¥iv©e
.
a
.
agno
, 
…ªc
.
rm_°¨tblock
,

426 
…ªc
.
rm_blockcou¡
,Üåec.
rm_ow√r
,

427 
…ªc
.
rm_off£t
,Üåec.
rm_Êags
);

428 
…off
 = 
…ªc
.
rm_off£t
;

437 i‡(
ow√r
 =
XFS_RMAP_OWN_NULL
) {

438 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
bno
 >
…ªc
.
rm_°¨tblock
 +

439 
…ªc
.
rm_blockcou¡
, 
out_îr‹
);

440 
out_d⁄e
;

444 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, (
Êags
 & 
XFS_RMAP_UNWRITTEN
) ==

445 (
…ªc
.
rm_Êags
 & 
XFS_RMAP_UNWRITTEN
), 
out_îr‹
);

448 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
…ªc
.
rm_°¨tblock
 <
bno
 &&

449 
…ªc
.
rm_°¨tblock
 +Üåec.
rm_blockcou¡
 >=

450 
bno
 + 
Àn
, 
out_îr‹
);

453 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
ow√r
 =
…ªc
.
rm_ow√r
 ||

454 
	`XFS_RMAP_NON_INODE_OWNER
(
ow√r
), 
out_îr‹
);

457 i‡(!
	`XFS_RMAP_NON_INODE_OWNER
(
ow√r
)) {

458 i‡(
Êags
 & 
XFS_RMAP_BMBT_BLOCK
) {

459 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

460 
…ªc
.
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
,

461 
out_îr‹
);

463 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

464 
…ªc
.
rm_off£t
 <
off£t
, 
out_îr‹
);

465 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

466 
…off
 + 
…ªc
.
rm_blockcou¡
 >
off£t
 + 
Àn
,

467 
out_îr‹
);

471 i‡(
…ªc
.
rm_°¨tblock
 =
bno
 &&Üåec.
rm_blockcou¡
 =
Àn
) {

473 
	`åa˚_xfs_rm≠_dñëe
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
,

474 
…ªc
.
rm_°¨tblock
,Üåec.
rm_blockcou¡
,

475 
…ªc
.
rm_ow√r
,Üåec.
rm_off£t
,

476 
…ªc
.
rm_Êags
);

477 
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
);

478 i‡(
îr‹
)

479 
out_îr‹
;

480 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
out_îr‹
);

481 } i‡(
…ªc
.
rm_°¨tblock
 =
bno
) {

492 
…ªc
.
rm_°¨tblock
 +
Àn
;

493 
…ªc
.
rm_blockcou¡
 -
Àn
;

494 i‡(!
ign‹e_off
)

495 
…ªc
.
rm_off£t
 +
Àn
;

496 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
…ªc
);

497 i‡(
îr‹
)

498 
out_îr‹
;

499 } i‡(
…ªc
.
rm_°¨tblock
 +Üåec.
rm_blockcou¡
 =
bno
 + 
Àn
) {

510 
…ªc
.
rm_blockcou¡
 -
Àn
;

511 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
…ªc
);

512 i‡(
îr‹
)

513 
out_îr‹
;

528 
xfs_exéí_t
 
‹ig_Àn
 = 
…ªc
.
rm_blockcou¡
;

530 
…ªc
.
rm_blockcou¡
 = 
bno
 -Üåec.
rm_°¨tblock
;

531 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
…ªc
);

532 i‡(
îr‹
)

533 
out_îr‹
;

535 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
);

536 i‡(
îr‹
)

537 
out_îr‹
;

539 
cur
->
bc_ªc
.
r
.
rm_°¨tblock
 = 
bno
 + 
Àn
;

540 
cur
->
bc_ªc
.
r
.
rm_blockcou¡
 = 
‹ig_Àn
 - 
Àn
 -

541 
…ªc
.
rm_blockcou¡
;

542 
cur
->
bc_ªc
.
r
.
rm_ow√r
 = 
…ªc
.rm_owner;

543 i‡(
ign‹e_off
)

544 
cur
->
bc_ªc
.
r
.
rm_off£t
 = 0;

546 
cur
->
bc_ªc
.
r
.
rm_off£t
 = 
off£t
 + 
Àn
;

547 
cur
->
bc_ªc
.
r
.
rm_Êags
 = 
Êags
;

548 
	`åa˚_xfs_rm≠_ö£π
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
,

549 
cur
->
bc_ªc
.
r
.
rm_°¨tblock
,

550 
cur
->
bc_ªc
.
r
.
rm_blockcou¡
,

551 
cur
->
bc_ªc
.
r
.
rm_ow√r
,

552 
cur
->
bc_ªc
.
r
.
rm_off£t
,

553 
cur
->
bc_ªc
.
r
.
rm_Êags
);

554 
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
);

555 i‡(
îr‹
)

556 
out_îr‹
;

559 
out_d⁄e
:

560 
	`åa˚_xfs_rm≠_unm≠_d⁄e
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

561 
unwrôãn
, 
oöfo
);

562 
out_îr‹
:

563 i‡(
îr‹
)

564 
	`åa˚_xfs_rm≠_unm≠_îr‹
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
,

565 
îr‹
, 
_RET_IP_
);

566  
îr‹
;

567 
	}
}

573 
	$xfs_rm≠_‰ì
(

574 
xfs_å™s
 *
ç
,

575 
xfs_buf
 *
agbp
,

576 
xfs_agnumbî_t
 
agno
,

577 
xfs_agblock_t
 
bno
,

578 
xfs_exéí_t
 
Àn
,

579 
xfs_ow√r_öfo
 *
oöfo
)

581 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

582 
xfs_båì_cur
 *
cur
;

583 
îr‹
;

585 i‡(!
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

588 
cur
 = 
	`xfs_rm≠bt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
);

590 
îr‹
 = 
	`xfs_rm≠_unm≠
(
cur
, 
bno
, 
Àn
, 
Ál£
, 
oöfo
);

591 i‡(
îr‹
)

592 
out_îr‹
;

594 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

597 
out_îr‹
:

598 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

599  
îr‹
;

600 
	}
}

607 
boﬁ


608 
	$xfs_rm≠_is_mîgóbÀ
(

609 
xfs_rm≠_úec
 *
úec
,

610 
uöt64_t
 
ow√r
,

611 
Êags
)

613 i‡(
úec
->
rm_ow√r
 =
XFS_RMAP_OWN_NULL
)

614  
Ál£
;

615 i‡(
úec
->
rm_ow√r
 !
ow√r
)

616  
Ál£
;

617 i‡((
Êags
 & 
XFS_RMAP_UNWRITTEN
) ^

618 (
úec
->
rm_Êags
 & 
XFS_RMAP_UNWRITTEN
))

619  
Ál£
;

620 i‡((
Êags
 & 
XFS_RMAP_ATTR_FORK
) ^

621 (
úec
->
rm_Êags
 & 
XFS_RMAP_ATTR_FORK
))

622  
Ál£
;

623 i‡((
Êags
 & 
XFS_RMAP_BMBT_BLOCK
) ^

624 (
úec
->
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
))

625  
Ál£
;

626  
åue
;

627 
	}
}

635 
STATIC
 

636 
	$xfs_rm≠_m≠
(

637 
xfs_båì_cur
 *
cur
,

638 
xfs_agblock_t
 
bno
,

639 
xfs_exéí_t
 
Àn
,

640 
boﬁ
 
unwrôãn
,

641 
xfs_ow√r_öfo
 *
oöfo
)

643 
xfs_mou¡
 *
mp
 = 
cur
->
bc_mp
;

644 
xfs_rm≠_úec
 
…ªc
;

645 
xfs_rm≠_úec
 
gåec
;

646 
have_gt
;

647 
have_…
;

648 
îr‹
 = 0;

649 
i
;

650 
uöt64_t
 
ow√r
;

651 
uöt64_t
 
off£t
;

652 
Êags
 = 0;

653 
boﬁ
 
ign‹e_off
;

655 
	`xfs_ow√r_öfo_u≈ack
(
oöfo
, &
ow√r
, &
off£t
, &
Êags
);

656 
	`ASSERT
(
ow√r
 != 0);

657 
ign‹e_off
 = 
	`XFS_RMAP_NON_INODE_OWNER
(
ow√r
) ||

658 (
Êags
 & 
XFS_RMAP_BMBT_BLOCK
);

659 i‡(
unwrôãn
)

660 
Êags
 |
XFS_RMAP_UNWRITTEN
;

661 
	`åa˚_xfs_rm≠_m≠
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

662 
unwrôãn
, 
oöfo
);

669 
îr‹
 = 
	`xfs_rm≠_lookup_À
(
cur
, 
bno
, 
Àn
, 
ow√r
, 
off£t
, 
Êags
,

670 &
have_…
);

671 i‡(
îr‹
)

672 
out_îr‹
;

673 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
have_…
 =1, 
out_îr‹
);

675 
îr‹
 = 
	`xfs_rm≠_gë_ªc
(
cur
, &
…ªc
, &
have_…
);

676 i‡(
îr‹
)

677 
out_îr‹
;

678 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
have_…
 =1, 
out_îr‹
);

679 
	`åa˚_xfs_rm≠_lookup_À_ønge_ªsu…
(
cur
->
bc_mp
,

680 
cur
->
bc_¥iv©e
.
a
.
agno
, 
…ªc
.
rm_°¨tblock
,

681 
…ªc
.
rm_blockcou¡
,Üåec.
rm_ow√r
,

682 
…ªc
.
rm_off£t
,Üåec.
rm_Êags
);

684 i‡(!
	`xfs_rm≠_is_mîgóbÀ
(&
…ªc
, 
ow√r
, 
Êags
))

685 
have_…
 = 0;

687 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

688 
have_…
 == 0 ||

689 
…ªc
.
rm_°¨tblock
 +Üåec.
rm_blockcou¡
 <
bno
, 
out_îr‹
);

696 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
have_gt
);

697 i‡(
îr‹
)

698 
out_îr‹
;

699 i‡(
have_gt
) {

700 
îr‹
 = 
	`xfs_rm≠_gë_ªc
(
cur
, &
gåec
, &
have_gt
);

701 i‡(
îr‹
)

702 
out_îr‹
;

703 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
have_gt
 =1, 
out_îr‹
);

704 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
bno
 + 
Àn
 <
gåec
.
rm_°¨tblock
,

705 
out_îr‹
);

706 
	`åa˚_xfs_rm≠_föd_right_√ighb‹_ªsu…
(
cur
->
bc_mp
,

707 
cur
->
bc_¥iv©e
.
a
.
agno
, 
gåec
.
rm_°¨tblock
,

708 
gåec
.
rm_blockcou¡
, gåec.
rm_ow√r
,

709 
gåec
.
rm_off£t
, gåec.
rm_Êags
);

710 i‡(!
	`xfs_rm≠_is_mîgóbÀ
(&
gåec
, 
ow√r
, 
Êags
))

711 
have_gt
 = 0;

718 i‡(
have_…
 &&

719 
…ªc
.
rm_°¨tblock
 +Üåec.
rm_blockcou¡
 =
bno
 &&

720 (
ign‹e_off
 || 
…ªc
.
rm_off£t
 +Üåec.
rm_blockcou¡
 =
off£t
)) {

730 
…ªc
.
rm_blockcou¡
 +
Àn
;

731 i‡(
have_gt
 &&

732 
bno
 + 
Àn
 =
gåec
.
rm_°¨tblock
 &&

733 (
ign‹e_off
 || 
off£t
 + 
Àn
 =
gåec
.
rm_off£t
) &&

734 ()
…ªc
.
rm_blockcou¡
 + 
Àn
 +

735 
gåec
.
rm_blockcou¡
 <
XFS_RMAP_LEN_MAX
) {

745 
…ªc
.
rm_blockcou¡
 +
gåec
.rm_blockcount;

746 
	`åa˚_xfs_rm≠_dñëe
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
,

747 
gåec
.
rm_°¨tblock
,

748 
gåec
.
rm_blockcou¡
,

749 
gåec
.
rm_ow√r
,

750 
gåec
.
rm_off£t
,

751 
gåec
.
rm_Êags
);

752 
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
);

753 i‡(
îr‹
)

754 
out_îr‹
;

755 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
out_îr‹
);

759 
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
have_gt
);

760 i‡(
îr‹
)

761 
out_îr‹
;

762 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
…ªc
);

763 i‡(
îr‹
)

764 
out_îr‹
;

765 } i‡(
have_gt
 &&

766 
bno
 + 
Àn
 =
gåec
.
rm_°¨tblock
 &&

767 (
ign‹e_off
 || 
off£t
 + 
Àn
 =
gåec
.
rm_off£t
)) {

777 
gåec
.
rm_°¨tblock
 = 
bno
;

778 
gåec
.
rm_blockcou¡
 +
Àn
;

779 i‡(!
ign‹e_off
)

780 
gåec
.
rm_off£t
 = 
off£t
;

781 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
gåec
);

782 i‡(
îr‹
)

783 
out_îr‹
;

789 
cur
->
bc_ªc
.
r
.
rm_°¨tblock
 = 
bno
;

790 
cur
->
bc_ªc
.
r
.
rm_blockcou¡
 = 
Àn
;

791 
cur
->
bc_ªc
.
r
.
rm_ow√r
 = 
ow√r
;

792 
cur
->
bc_ªc
.
r
.
rm_off£t
 = 
off£t
;

793 
cur
->
bc_ªc
.
r
.
rm_Êags
 = 
Êags
;

794 
	`åa˚_xfs_rm≠_ö£π
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

795 
ow√r
, 
off£t
, 
Êags
);

796 
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
);

797 i‡(
îr‹
)

798 
out_îr‹
;

799 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
out_îr‹
);

802 
	`åa˚_xfs_rm≠_m≠_d⁄e
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

803 
unwrôãn
, 
oöfo
);

804 
out_îr‹
:

805 i‡(
îr‹
)

806 
	`åa˚_xfs_rm≠_m≠_îr‹
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
,

807 
îr‹
, 
_RET_IP_
);

808  
îr‹
;

809 
	}
}

815 
	$xfs_rm≠_Æloc
(

816 
xfs_å™s
 *
ç
,

817 
xfs_buf
 *
agbp
,

818 
xfs_agnumbî_t
 
agno
,

819 
xfs_agblock_t
 
bno
,

820 
xfs_exéí_t
 
Àn
,

821 
xfs_ow√r_öfo
 *
oöfo
)

823 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

824 
xfs_båì_cur
 *
cur
;

825 
îr‹
;

827 i‡(!
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

830 
cur
 = 
	`xfs_rm≠bt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
);

831 
îr‹
 = 
	`xfs_rm≠_m≠
(
cur
, 
bno
, 
Àn
, 
Ál£
, 
oöfo
);

832 i‡(
îr‹
)

833 
out_îr‹
;

835 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_NOERROR
);

838 
out_îr‹
:

839 
	`xfs_båì_dñ_curs‹
(
cur
, 
XFS_BTREE_ERROR
);

840  
îr‹
;

841 
	}
}

843 
	#RMAP_LEFT_CONTIG
 (1 << 0)

	)

844 
	#RMAP_RIGHT_CONTIG
 (1 << 1)

	)

845 
	#RMAP_LEFT_FILLING
 (1 << 2)

	)

846 
	#RMAP_RIGHT_FILLING
 (1 << 3)

	)

847 
	#RMAP_LEFT_VALID
 (1 << 6)

	)

848 
	#RMAP_RIGHT_VALID
 (1 << 7)

	)

850 
	#LEFT
 
r
[0]

	)

851 
	#RIGHT
 
r
[1]

	)

852 
	#PREV
 
r
[2]

	)

853 
	#NEW
 
r
[3]

	)

859 
STATIC
 

860 
	$xfs_rm≠_c⁄vît
(

861 
xfs_båì_cur
 *
cur
,

862 
xfs_agblock_t
 
bno
,

863 
xfs_exéí_t
 
Àn
,

864 
boﬁ
 
unwrôãn
,

865 
xfs_ow√r_öfo
 *
oöfo
)

867 
xfs_mou¡
 *
mp
 = 
cur
->
bc_mp
;

868 
xfs_rm≠_úec
 
r
[4];

871 
uöt64_t
 
ow√r
;

872 
uöt64_t
 
off£t
;

873 
uöt64_t
 
√w_ídoff
;

874 
ﬁdext
;

875 
√wext
;

876 
Êags
 = 0;

877 
i
;

878 
°©e
 = 0;

879 
îr‹
;

881 
	`xfs_ow√r_öfo_u≈ack
(
oöfo
, &
ow√r
, &
off£t
, &
Êags
);

882 
	`ASSERT
(!(
	`XFS_RMAP_NON_INODE_OWNER
(
ow√r
) ||

883 (
Êags
 & (
XFS_RMAP_ATTR_FORK
 | 
XFS_RMAP_BMBT_BLOCK
))));

884 
ﬁdext
 = 
unwrôãn
 ? 
XFS_RMAP_UNWRITTEN
 : 0;

885 
√w_ídoff
 = 
off£t
 + 
Àn
;

886 
	`åa˚_xfs_rm≠_c⁄vît
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

887 
unwrôãn
, 
oöfo
);

894 
îr‹
 = 
	`xfs_rm≠_lookup_À
(
cur
, 
bno
, 
Àn
, 
ow√r
, 
off£t
, 
ﬁdext
, &
i
);

895 i‡(
îr‹
)

896 
d⁄e
;

897 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

899 
îr‹
 = 
	`xfs_rm≠_gë_ªc
(
cur
, &
PREV
, &
i
);

900 i‡(
îr‹
)

901 
d⁄e
;

902 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

903 
	`åa˚_xfs_rm≠_lookup_À_ønge_ªsu…
(
cur
->
bc_mp
,

904 
cur
->
bc_¥iv©e
.
a
.
agno
, 
PREV
.
rm_°¨tblock
,

905 
PREV
.
rm_blockcou¡
, PREV.
rm_ow√r
,

906 
PREV
.
rm_off£t
, PREV.
rm_Êags
);

908 
	`ASSERT
(
PREV
.
rm_off£t
 <
off£t
);

909 
	`ASSERT
(
PREV
.
rm_off£t
 + PREV.
rm_blockcou¡
 >
√w_ídoff
);

910 
	`ASSERT
((
PREV
.
rm_Êags
 & 
XFS_RMAP_UNWRITTEN
Ë=
ﬁdext
);

911 
√wext
 = ~
ﬁdext
 & 
XFS_RMAP_UNWRITTEN
;

917 i‡(
PREV
.
rm_off£t
 =
off£t
)

918 
°©e
 |
RMAP_LEFT_FILLING
;

919 i‡(
PREV
.
rm_off£t
 + PREV.
rm_blockcou¡
 =
√w_ídoff
)

920 
°©e
 |
RMAP_RIGHT_FILLING
;

927 
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
);

928 i‡(
îr‹
)

929 
d⁄e
;

930 i‡(
i
) {

931 
°©e
 |
RMAP_LEFT_VALID
;

932 
îr‹
 = 
	`xfs_rm≠_gë_ªc
(
cur
, &
LEFT
, &
i
);

933 i‡(
îr‹
)

934 
d⁄e
;

935 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

936 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

937 
LEFT
.
rm_°¨tblock
 + LEFT.
rm_blockcou¡
 <
bno
,

938 
d⁄e
);

939 
	`åa˚_xfs_rm≠_föd_À·_√ighb‹_ªsu…
(
cur
->
bc_mp
,

940 
cur
->
bc_¥iv©e
.
a
.
agno
, 
LEFT
.
rm_°¨tblock
,

941 
LEFT
.
rm_blockcou¡
, LEFT.
rm_ow√r
,

942 
LEFT
.
rm_off£t
, LEFT.
rm_Êags
);

943 i‡(
LEFT
.
rm_°¨tblock
 + LEFT.
rm_blockcou¡
 =
bno
 &&

944 
LEFT
.
rm_off£t
 + LEFT.
rm_blockcou¡
 =
off£t
 &&

945 
	`xfs_rm≠_is_mîgóbÀ
(&
LEFT
, 
ow√r
, 
√wext
))

946 
°©e
 |
RMAP_LEFT_CONTIG
;

954 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
);

955 i‡(
îr‹
)

956 
d⁄e
;

957 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

958 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
);

959 i‡(
îr‹
)

960 
d⁄e
;

961 i‡(
i
) {

962 
°©e
 |
RMAP_RIGHT_VALID
;

963 
îr‹
 = 
	`xfs_rm≠_gë_ªc
(
cur
, &
RIGHT
, &
i
);

964 i‡(
îr‹
)

965 
d⁄e
;

966 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

967 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
bno
 + 
Àn
 <
RIGHT
.
rm_°¨tblock
,

968 
d⁄e
);

969 
	`åa˚_xfs_rm≠_föd_right_√ighb‹_ªsu…
(
cur
->
bc_mp
,

970 
cur
->
bc_¥iv©e
.
a
.
agno
, 
RIGHT
.
rm_°¨tblock
,

971 
RIGHT
.
rm_blockcou¡
, RIGHT.
rm_ow√r
,

972 
RIGHT
.
rm_off£t
, RIGHT.
rm_Êags
);

973 i‡(
bno
 + 
Àn
 =
RIGHT
.
rm_°¨tblock
 &&

974 
off£t
 + 
Àn
 =
RIGHT
.
rm_off£t
 &&

975 
	`xfs_rm≠_is_mîgóbÀ
(&
RIGHT
, 
ow√r
, 
√wext
))

976 
°©e
 |
RMAP_RIGHT_CONTIG
;

980 i‡((
°©e
 & (
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
 |

981 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
)) ==

982 (
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
 |

983 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
) &&

984 ()
LEFT
.
rm_blockcou¡
 + 
Àn
 +

985 
RIGHT
.
rm_blockcou¡
 > 
XFS_RMAP_LEN_MAX
)

986 
°©e
 &~
RMAP_RIGHT_CONTIG
;

988 
	`åa˚_xfs_rm≠_c⁄vît_°©e
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
°©e
,

989 
_RET_IP_
);

992 
îr‹
 = 
	`xfs_rm≠_lookup_À
(
cur
, 
bno
, 
Àn
, 
ow√r
, 
off£t
, 
ﬁdext
, &
i
);

993 i‡(
îr‹
)

994 
d⁄e
;

995 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1000 
°©e
 & (
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
 |

1001 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
)) {

1002 
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
 |

1003 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
:

1008 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
);

1009 i‡(
îr‹
)

1010 
d⁄e
;

1011 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1012 
	`åa˚_xfs_rm≠_dñëe
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
,

1013 
RIGHT
.
rm_°¨tblock
, RIGHT.
rm_blockcou¡
,

1014 
RIGHT
.
rm_ow√r
, RIGHT.
rm_off£t
,

1015 
RIGHT
.
rm_Êags
);

1016 
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
);

1017 i‡(
îr‹
)

1018 
d⁄e
;

1019 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1020 
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
);

1021 i‡(
îr‹
)

1022 
d⁄e
;

1023 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1024 
	`åa˚_xfs_rm≠_dñëe
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
,

1025 
PREV
.
rm_°¨tblock
, PREV.
rm_blockcou¡
,

1026 
PREV
.
rm_ow√r
, PREV.
rm_off£t
,

1027 
PREV
.
rm_Êags
);

1028 
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
);

1029 i‡(
îr‹
)

1030 
d⁄e
;

1031 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1032 
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
);

1033 i‡(
îr‹
)

1034 
d⁄e
;

1035 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1036 
NEW
 = 
LEFT
;

1037 
NEW
.
rm_blockcou¡
 +
PREV
.rm_blockcou¡ + 
RIGHT
.rm_blockcount;

1038 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1039 i‡(
îr‹
)

1040 
d⁄e
;

1043 
RMAP_LEFT_FILLING
 | 
RMAP_RIGHT_FILLING
 | 
RMAP_LEFT_CONTIG
:

1048 
	`åa˚_xfs_rm≠_dñëe
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
,

1049 
PREV
.
rm_°¨tblock
, PREV.
rm_blockcou¡
,

1050 
PREV
.
rm_ow√r
, PREV.
rm_off£t
,

1051 
PREV
.
rm_Êags
);

1052 
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
);

1053 i‡(
îr‹
)

1054 
d⁄e
;

1055 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1056 
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
);

1057 i‡(
îr‹
)

1058 
d⁄e
;

1059 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1060 
NEW
 = 
LEFT
;

1061 
NEW
.
rm_blockcou¡
 +
PREV
.rm_blockcount;

1062 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1063 i‡(
îr‹
)

1064 
d⁄e
;

1067 
RMAP_LEFT_FILLING
 | 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
:

1072 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
);

1073 i‡(
îr‹
)

1074 
d⁄e
;

1075 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1076 
	`åa˚_xfs_rm≠_dñëe
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
,

1077 
RIGHT
.
rm_°¨tblock
, RIGHT.
rm_blockcou¡
,

1078 
RIGHT
.
rm_ow√r
, RIGHT.
rm_off£t
,

1079 
RIGHT
.
rm_Êags
);

1080 
îr‹
 = 
	`xfs_båì_dñëe
(
cur
, &
i
);

1081 i‡(
îr‹
)

1082 
d⁄e
;

1083 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1084 
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
);

1085 i‡(
îr‹
)

1086 
d⁄e
;

1087 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1088 
NEW
 = 
PREV
;

1089 
NEW
.
rm_blockcou¡
 = 
Àn
 + 
RIGHT
.rm_blockcount;

1090 
NEW
.
rm_Êags
 = 
√wext
;

1091 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1092 i‡(
îr‹
)

1093 
d⁄e
;

1096 
RMAP_LEFT_FILLING
 | 
RMAP_RIGHT_FILLING
:

1102 
NEW
 = 
PREV
;

1103 
NEW
.
rm_Êags
 = 
√wext
;

1104 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1105 i‡(
îr‹
)

1106 
d⁄e
;

1109 
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
:

1114 
NEW
 = 
PREV
;

1115 
NEW
.
rm_off£t
 +
Àn
;

1116 
NEW
.
rm_°¨tblock
 +
Àn
;

1117 
NEW
.
rm_blockcou¡
 -
Àn
;

1118 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1119 i‡(
îr‹
)

1120 
d⁄e
;

1121 
îr‹
 = 
	`xfs_båì_de¸emít
(
cur
, 0, &
i
);

1122 i‡(
îr‹
)

1123 
d⁄e
;

1124 
NEW
 = 
LEFT
;

1125 
NEW
.
rm_blockcou¡
 +
Àn
;

1126 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1127 i‡(
îr‹
)

1128 
d⁄e
;

1131 
RMAP_LEFT_FILLING
:

1136 
NEW
 = 
PREV
;

1137 
NEW
.
rm_°¨tblock
 +
Àn
;

1138 
NEW
.
rm_off£t
 +
Àn
;

1139 
NEW
.
rm_blockcou¡
 -
Àn
;

1140 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1141 i‡(
îr‹
)

1142 
d⁄e
;

1143 
NEW
.
rm_°¨tblock
 = 
bno
;

1144 
NEW
.
rm_ow√r
 = 
ow√r
;

1145 
NEW
.
rm_off£t
 = 
off£t
;

1146 
NEW
.
rm_blockcou¡
 = 
Àn
;

1147 
NEW
.
rm_Êags
 = 
√wext
;

1148 
cur
->
bc_ªc
.
r
 = 
NEW
;

1149 
	`åa˚_xfs_rm≠_ö£π
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
,

1150 
Àn
, 
ow√r
, 
off£t
, 
√wext
);

1151 
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
);

1152 i‡(
îr‹
)

1153 
d⁄e
;

1154 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1157 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
:

1162 
NEW
 = 
PREV
;

1163 
NEW
.
rm_blockcou¡
 -
Àn
;

1164 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1165 i‡(
îr‹
)

1166 
d⁄e
;

1167 
îr‹
 = 
	`xfs_båì_ö¸emít
(
cur
, 0, &
i
);

1168 i‡(
îr‹
)

1169 
d⁄e
;

1170 
NEW
 = 
RIGHT
;

1171 
NEW
.
rm_off£t
 = 
off£t
;

1172 
NEW
.
rm_°¨tblock
 = 
bno
;

1173 
NEW
.
rm_blockcou¡
 +
Àn
;

1174 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1175 i‡(
îr‹
)

1176 
d⁄e
;

1179 
RMAP_RIGHT_FILLING
:

1184 
NEW
 = 
PREV
;

1185 
NEW
.
rm_blockcou¡
 -
Àn
;

1186 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1187 i‡(
îr‹
)

1188 
d⁄e
;

1189 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
bno
, 
Àn
, 
ow√r
, 
off£t
,

1190 
ﬁdext
, &
i
);

1191 i‡(
îr‹
)

1192 
d⁄e
;

1193 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =0, 
d⁄e
);

1194 
NEW
.
rm_°¨tblock
 = 
bno
;

1195 
NEW
.
rm_ow√r
 = 
ow√r
;

1196 
NEW
.
rm_off£t
 = 
off£t
;

1197 
NEW
.
rm_blockcou¡
 = 
Àn
;

1198 
NEW
.
rm_Êags
 = 
√wext
;

1199 
cur
->
bc_ªc
.
r
 = 
NEW
;

1200 
	`åa˚_xfs_rm≠_ö£π
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
,

1201 
Àn
, 
ow√r
, 
off£t
, 
√wext
);

1202 
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
);

1203 i‡(
îr‹
)

1204 
d⁄e
;

1205 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1215 
NEW
.
rm_°¨tblock
 = 
bno
 + 
Àn
;

1216 
NEW
.
rm_ow√r
 = 
ow√r
;

1217 
NEW
.
rm_off£t
 = 
√w_ídoff
;

1218 
NEW
.
rm_blockcou¡
 = 
PREV
.
rm_off£t
 + PREV.rm_blockcount -

1219 
√w_ídoff
;

1220 
NEW
.
rm_Êags
 = 
PREV
.rm_flags;

1221 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1222 i‡(
îr‹
)

1223 
d⁄e
;

1225 
NEW
 = 
PREV
;

1226 
NEW
.
rm_blockcou¡
 = 
off£t
 - 
PREV
.
rm_off£t
;

1227 
cur
->
bc_ªc
.
r
 = 
NEW
;

1228 
	`åa˚_xfs_rm≠_ö£π
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
,

1229 
NEW
.
rm_°¨tblock
, NEW.
rm_blockcou¡
,

1230 
NEW
.
rm_ow√r
, NEW.
rm_off£t
,

1231 
NEW
.
rm_Êags
);

1232 
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
);

1233 i‡(
îr‹
)

1234 
d⁄e
;

1235 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1241 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
bno
, 
Àn
, 
ow√r
, 
off£t
,

1242 
ﬁdext
, &
i
);

1243 i‡(
îr‹
)

1244 
d⁄e
;

1245 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =0, 
d⁄e
);

1247 
cur
->
bc_ªc
.
r
.
rm_Êags
 &~
XFS_RMAP_UNWRITTEN
;

1248 
cur
->
bc_ªc
.
r
.
rm_Êags
 |
√wext
;

1249 
	`åa˚_xfs_rm≠_ö£π
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

1250 
ow√r
, 
off£t
, 
√wext
);

1251 
îr‹
 = 
	`xfs_båì_ö£π
(
cur
, &
i
);

1252 i‡(
îr‹
)

1253 
d⁄e
;

1254 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1257 
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
 | 
RMAP_RIGHT_CONTIG
:

1258 
RMAP_RIGHT_FILLING
 | 
RMAP_LEFT_CONTIG
 | 
RMAP_RIGHT_CONTIG
:

1259 
RMAP_LEFT_FILLING
 | 
RMAP_RIGHT_CONTIG
:

1260 
RMAP_RIGHT_FILLING
 | 
RMAP_LEFT_CONTIG
:

1261 
RMAP_LEFT_CONTIG
 | 
RMAP_RIGHT_CONTIG
:

1262 
RMAP_LEFT_CONTIG
:

1263 
RMAP_RIGHT_CONTIG
:

1267 
	`ASSERT
(0);

1270 
	`åa˚_xfs_rm≠_c⁄vît_d⁄e
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

1271 
unwrôãn
, 
oöfo
);

1272 
d⁄e
:

1273 i‡(
îr‹
)

1274 
	`åa˚_xfs_rm≠_c⁄vît_îr‹
(
cur
->
bc_mp
,

1275 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

1276  
îr‹
;

1277 
	}
}

1284 
STATIC
 

1285 
	$xfs_rm≠_c⁄vît_sh¨ed
(

1286 
xfs_båì_cur
 *
cur
,

1287 
xfs_agblock_t
 
bno
,

1288 
xfs_exéí_t
 
Àn
,

1289 
boﬁ
 
unwrôãn
,

1290 
xfs_ow√r_öfo
 *
oöfo
)

1292 
xfs_mou¡
 *
mp
 = 
cur
->
bc_mp
;

1293 
xfs_rm≠_úec
 
r
[4];

1296 
uöt64_t
 
ow√r
;

1297 
uöt64_t
 
off£t
;

1298 
uöt64_t
 
√w_ídoff
;

1299 
ﬁdext
;

1300 
√wext
;

1301 
Êags
 = 0;

1302 
i
;

1303 
°©e
 = 0;

1304 
îr‹
;

1306 
	`xfs_ow√r_öfo_u≈ack
(
oöfo
, &
ow√r
, &
off£t
, &
Êags
);

1307 
	`ASSERT
(!(
	`XFS_RMAP_NON_INODE_OWNER
(
ow√r
) ||

1308 (
Êags
 & (
XFS_RMAP_ATTR_FORK
 | 
XFS_RMAP_BMBT_BLOCK
))));

1309 
ﬁdext
 = 
unwrôãn
 ? 
XFS_RMAP_UNWRITTEN
 : 0;

1310 
√w_ídoff
 = 
off£t
 + 
Àn
;

1311 
	`åa˚_xfs_rm≠_c⁄vît
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

1312 
unwrôãn
, 
oöfo
);

1319 
îr‹
 = 
	`xfs_rm≠_lookup_À_ønge
(
cur
, 
bno
, 
ow√r
, 
off£t
, 
Êags
,

1320 &
PREV
, &
i
);

1321 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1323 
	`ASSERT
(
PREV
.
rm_off£t
 <
off£t
);

1324 
	`ASSERT
(
PREV
.
rm_off£t
 + PREV.
rm_blockcou¡
 >
√w_ídoff
);

1325 
	`ASSERT
((
PREV
.
rm_Êags
 & 
XFS_RMAP_UNWRITTEN
Ë=
ﬁdext
);

1326 
√wext
 = ~
ﬁdext
 & 
XFS_RMAP_UNWRITTEN
;

1332 i‡(
PREV
.
rm_off£t
 =
off£t
)

1333 
°©e
 |
RMAP_LEFT_FILLING
;

1334 i‡(
PREV
.
rm_off£t
 + PREV.
rm_blockcou¡
 =
√w_ídoff
)

1335 
°©e
 |
RMAP_RIGHT_FILLING
;

1338 
îr‹
 = 
	`xfs_rm≠_föd_À·_√ighb‹
(
cur
, 
bno
, 
ow√r
, 
off£t
, 
√wext
,

1339 &
LEFT
, &
i
);

1340 i‡(
îr‹
)

1341 
d⁄e
;

1342 i‡(
i
) {

1343 
°©e
 |
RMAP_LEFT_VALID
;

1344 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
,

1345 
LEFT
.
rm_°¨tblock
 + LEFT.
rm_blockcou¡
 <
bno
,

1346 
d⁄e
);

1347 i‡(
	`xfs_rm≠_is_mîgóbÀ
(&
LEFT
, 
ow√r
, 
√wext
))

1348 
°©e
 |
RMAP_LEFT_CONTIG
;

1352 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
bno
 + 
Àn
,Üí, 
ow√r
, 
off£t
 +Üen,

1353 
√wext
, &
i
);

1354 i‡(
îr‹
)

1355 
d⁄e
;

1356 i‡(
i
) {

1357 
°©e
 |
RMAP_RIGHT_VALID
;

1358 
îr‹
 = 
	`xfs_rm≠_gë_ªc
(
cur
, &
RIGHT
, &
i
);

1359 i‡(
îr‹
)

1360 
d⁄e
;

1361 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1362 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
bno
 + 
Àn
 <
RIGHT
.
rm_°¨tblock
,

1363 
d⁄e
);

1364 
	`åa˚_xfs_rm≠_föd_right_√ighb‹_ªsu…
(
cur
->
bc_mp
,

1365 
cur
->
bc_¥iv©e
.
a
.
agno
, 
RIGHT
.
rm_°¨tblock
,

1366 
RIGHT
.
rm_blockcou¡
, RIGHT.
rm_ow√r
,

1367 
RIGHT
.
rm_off£t
, RIGHT.
rm_Êags
);

1368 i‡(
	`xfs_rm≠_is_mîgóbÀ
(&
RIGHT
, 
ow√r
, 
√wext
))

1369 
°©e
 |
RMAP_RIGHT_CONTIG
;

1373 i‡((
°©e
 & (
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
 |

1374 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
)) ==

1375 (
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
 |

1376 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
) &&

1377 ()
LEFT
.
rm_blockcou¡
 + 
Àn
 +

1378 
RIGHT
.
rm_blockcou¡
 > 
XFS_RMAP_LEN_MAX
)

1379 
°©e
 &~
RMAP_RIGHT_CONTIG
;

1381 
	`åa˚_xfs_rm≠_c⁄vît_°©e
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
°©e
,

1382 
_RET_IP_
);

1386 
°©e
 & (
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
 |

1387 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
)) {

1388 
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
 |

1389 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
:

1394 
îr‹
 = 
	`xfs_rm≠_dñëe
(
cur
, 
RIGHT
.
rm_°¨tblock
,

1395 
RIGHT
.
rm_blockcou¡
, RIGHT.
rm_ow√r
,

1396 
RIGHT
.
rm_off£t
, RIGHT.
rm_Êags
);

1397 i‡(
îr‹
)

1398 
d⁄e
;

1399 
îr‹
 = 
	`xfs_rm≠_dñëe
(
cur
, 
PREV
.
rm_°¨tblock
,

1400 
PREV
.
rm_blockcou¡
, PREV.
rm_ow√r
,

1401 
PREV
.
rm_off£t
, PREV.
rm_Êags
);

1402 i‡(
îr‹
)

1403 
d⁄e
;

1404 
NEW
 = 
LEFT
;

1405 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
NEW
.
rm_°¨tblock
,

1406 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1407 
NEW
.
rm_off£t
, NEW.
rm_Êags
, &
i
);

1408 i‡(
îr‹
)

1409 
d⁄e
;

1410 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1411 
NEW
.
rm_blockcou¡
 +
PREV
.rm_blockcou¡ + 
RIGHT
.rm_blockcount;

1412 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1413 i‡(
îr‹
)

1414 
d⁄e
;

1417 
RMAP_LEFT_FILLING
 | 
RMAP_RIGHT_FILLING
 | 
RMAP_LEFT_CONTIG
:

1422 
îr‹
 = 
	`xfs_rm≠_dñëe
(
cur
, 
PREV
.
rm_°¨tblock
,

1423 
PREV
.
rm_blockcou¡
, PREV.
rm_ow√r
,

1424 
PREV
.
rm_off£t
, PREV.
rm_Êags
);

1425 i‡(
îr‹
)

1426 
d⁄e
;

1427 
NEW
 = 
LEFT
;

1428 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
NEW
.
rm_°¨tblock
,

1429 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1430 
NEW
.
rm_off£t
, NEW.
rm_Êags
, &
i
);

1431 i‡(
îr‹
)

1432 
d⁄e
;

1433 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1434 
NEW
.
rm_blockcou¡
 +
PREV
.rm_blockcount;

1435 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1436 i‡(
îr‹
)

1437 
d⁄e
;

1440 
RMAP_LEFT_FILLING
 | 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
:

1445 
îr‹
 = 
	`xfs_rm≠_dñëe
(
cur
, 
RIGHT
.
rm_°¨tblock
,

1446 
RIGHT
.
rm_blockcou¡
, RIGHT.
rm_ow√r
,

1447 
RIGHT
.
rm_off£t
, RIGHT.
rm_Êags
);

1448 i‡(
îr‹
)

1449 
d⁄e
;

1450 
NEW
 = 
PREV
;

1451 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
NEW
.
rm_°¨tblock
,

1452 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1453 
NEW
.
rm_off£t
, NEW.
rm_Êags
, &
i
);

1454 i‡(
îr‹
)

1455 
d⁄e
;

1456 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1457 
NEW
.
rm_blockcou¡
 +
RIGHT
.rm_blockcount;

1458 
NEW
.
rm_Êags
 = 
RIGHT
.rm_flags;

1459 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1460 i‡(
îr‹
)

1461 
d⁄e
;

1464 
RMAP_LEFT_FILLING
 | 
RMAP_RIGHT_FILLING
:

1470 
NEW
 = 
PREV
;

1471 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
NEW
.
rm_°¨tblock
,

1472 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1473 
NEW
.
rm_off£t
, NEW.
rm_Êags
, &
i
);

1474 i‡(
îr‹
)

1475 
d⁄e
;

1476 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1477 
NEW
.
rm_Êags
 = 
√wext
;

1478 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1479 i‡(
îr‹
)

1480 
d⁄e
;

1483 
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
:

1488 
NEW
 = 
PREV
;

1489 
îr‹
 = 
	`xfs_rm≠_dñëe
(
cur
, 
NEW
.
rm_°¨tblock
,

1490 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1491 
NEW
.
rm_off£t
, NEW.
rm_Êags
);

1492 i‡(
îr‹
)

1493 
d⁄e
;

1494 
NEW
.
rm_off£t
 +
Àn
;

1495 
NEW
.
rm_°¨tblock
 +
Àn
;

1496 
NEW
.
rm_blockcou¡
 -
Àn
;

1497 
îr‹
 = 
	`xfs_rm≠_ö£π
(
cur
, 
NEW
.
rm_°¨tblock
,

1498 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1499 
NEW
.
rm_off£t
, NEW.
rm_Êags
);

1500 i‡(
îr‹
)

1501 
d⁄e
;

1502 
NEW
 = 
LEFT
;

1503 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
NEW
.
rm_°¨tblock
,

1504 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1505 
NEW
.
rm_off£t
, NEW.
rm_Êags
, &
i
);

1506 i‡(
îr‹
)

1507 
d⁄e
;

1508 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1509 
NEW
.
rm_blockcou¡
 +
Àn
;

1510 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1511 i‡(
îr‹
)

1512 
d⁄e
;

1515 
RMAP_LEFT_FILLING
:

1520 
NEW
 = 
PREV
;

1521 
îr‹
 = 
	`xfs_rm≠_dñëe
(
cur
, 
NEW
.
rm_°¨tblock
,

1522 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1523 
NEW
.
rm_off£t
, NEW.
rm_Êags
);

1524 i‡(
îr‹
)

1525 
d⁄e
;

1526 
NEW
.
rm_off£t
 +
Àn
;

1527 
NEW
.
rm_°¨tblock
 +
Àn
;

1528 
NEW
.
rm_blockcou¡
 -
Àn
;

1529 
îr‹
 = 
	`xfs_rm≠_ö£π
(
cur
, 
NEW
.
rm_°¨tblock
,

1530 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1531 
NEW
.
rm_off£t
, NEW.
rm_Êags
);

1532 i‡(
îr‹
)

1533 
d⁄e
;

1534 
îr‹
 = 
	`xfs_rm≠_ö£π
(
cur
, 
bno
, 
Àn
, 
ow√r
, 
off£t
, 
√wext
);

1535 i‡(
îr‹
)

1536 
d⁄e
;

1539 
RMAP_RIGHT_FILLING
 | 
RMAP_RIGHT_CONTIG
:

1544 
NEW
 = 
PREV
;

1545 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
NEW
.
rm_°¨tblock
,

1546 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1547 
NEW
.
rm_off£t
, NEW.
rm_Êags
, &
i
);

1548 i‡(
îr‹
)

1549 
d⁄e
;

1550 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1551 
NEW
.
rm_blockcou¡
 = 
off£t
 - NEW.
rm_off£t
;

1552 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1553 i‡(
îr‹
)

1554 
d⁄e
;

1555 
NEW
 = 
RIGHT
;

1556 
îr‹
 = 
	`xfs_rm≠_dñëe
(
cur
, 
NEW
.
rm_°¨tblock
,

1557 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1558 
NEW
.
rm_off£t
, NEW.
rm_Êags
);

1559 i‡(
îr‹
)

1560 
d⁄e
;

1561 
NEW
.
rm_off£t
 = 
off£t
;

1562 
NEW
.
rm_°¨tblock
 = 
bno
;

1563 
NEW
.
rm_blockcou¡
 +
Àn
;

1564 
îr‹
 = 
	`xfs_rm≠_ö£π
(
cur
, 
NEW
.
rm_°¨tblock
,

1565 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1566 
NEW
.
rm_off£t
, NEW.
rm_Êags
);

1567 i‡(
îr‹
)

1568 
d⁄e
;

1571 
RMAP_RIGHT_FILLING
:

1576 
NEW
 = 
PREV
;

1577 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
NEW
.
rm_°¨tblock
,

1578 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1579 
NEW
.
rm_off£t
, NEW.
rm_Êags
, &
i
);

1580 i‡(
îr‹
)

1581 
d⁄e
;

1582 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1583 
NEW
.
rm_blockcou¡
 -
Àn
;

1584 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1585 i‡(
îr‹
)

1586 
d⁄e
;

1587 
îr‹
 = 
	`xfs_rm≠_ö£π
(
cur
, 
bno
, 
Àn
, 
ow√r
, 
off£t
, 
√wext
);

1588 i‡(
îr‹
)

1589 
d⁄e
;

1599 
NEW
.
rm_°¨tblock
 = 
bno
 + 
Àn
;

1600 
NEW
.
rm_ow√r
 = 
ow√r
;

1601 
NEW
.
rm_off£t
 = 
√w_ídoff
;

1602 
NEW
.
rm_blockcou¡
 = 
PREV
.
rm_off£t
 + PREV.rm_blockcount -

1603 
√w_ídoff
;

1604 
NEW
.
rm_Êags
 = 
PREV
.rm_flags;

1605 
îr‹
 = 
	`xfs_rm≠_ö£π
(
cur
, 
NEW
.
rm_°¨tblock
,

1606 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
, NEW.
rm_off£t
,

1607 
NEW
.
rm_Êags
);

1608 i‡(
îr‹
)

1609 
d⁄e
;

1611 
NEW
 = 
PREV
;

1612 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
NEW
.
rm_°¨tblock
,

1613 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
,

1614 
NEW
.
rm_off£t
, NEW.
rm_Êags
, &
i
);

1615 i‡(
îr‹
)

1616 
d⁄e
;

1617 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
d⁄e
);

1618 
NEW
.
rm_blockcou¡
 = 
off£t
 - NEW.
rm_off£t
;

1619 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
NEW
);

1620 i‡(
îr‹
)

1621 
d⁄e
;

1623 
NEW
.
rm_°¨tblock
 = 
bno
;

1624 
NEW
.
rm_blockcou¡
 = 
Àn
;

1625 
NEW
.
rm_ow√r
 = 
ow√r
;

1626 
NEW
.
rm_off£t
 = 
off£t
;

1627 
NEW
.
rm_Êags
 = 
√wext
;

1628 
îr‹
 = 
	`xfs_rm≠_ö£π
(
cur
, 
NEW
.
rm_°¨tblock
,

1629 
NEW
.
rm_blockcou¡
, NEW.
rm_ow√r
, NEW.
rm_off£t
,

1630 
NEW
.
rm_Êags
);

1631 i‡(
îr‹
)

1632 
d⁄e
;

1635 
RMAP_LEFT_FILLING
 | 
RMAP_LEFT_CONTIG
 | 
RMAP_RIGHT_CONTIG
:

1636 
RMAP_RIGHT_FILLING
 | 
RMAP_LEFT_CONTIG
 | 
RMAP_RIGHT_CONTIG
:

1637 
RMAP_LEFT_FILLING
 | 
RMAP_RIGHT_CONTIG
:

1638 
RMAP_RIGHT_FILLING
 | 
RMAP_LEFT_CONTIG
:

1639 
RMAP_LEFT_CONTIG
 | 
RMAP_RIGHT_CONTIG
:

1640 
RMAP_LEFT_CONTIG
:

1641 
RMAP_RIGHT_CONTIG
:

1645 
	`ASSERT
(0);

1648 
	`åa˚_xfs_rm≠_c⁄vît_d⁄e
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

1649 
unwrôãn
, 
oöfo
);

1650 
d⁄e
:

1651 i‡(
îr‹
)

1652 
	`åa˚_xfs_rm≠_c⁄vît_îr‹
(
cur
->
bc_mp
,

1653 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

1654  
îr‹
;

1655 
	}
}

1657 #unde‡
NEW


1658 #unde‡
LEFT


1659 #unde‡
RIGHT


1660 #unde‡
PREV


1671 
STATIC
 

1672 
	$xfs_rm≠_unm≠_sh¨ed
(

1673 
xfs_båì_cur
 *
cur
,

1674 
xfs_agblock_t
 
bno
,

1675 
xfs_exéí_t
 
Àn
,

1676 
boﬁ
 
unwrôãn
,

1677 
xfs_ow√r_öfo
 *
oöfo
)

1679 
xfs_mou¡
 *
mp
 = 
cur
->
bc_mp
;

1680 
xfs_rm≠_úec
 
…ªc
;

1681 
uöt64_t
 
…off
;

1682 
îr‹
 = 0;

1683 
i
;

1684 
uöt64_t
 
ow√r
;

1685 
uöt64_t
 
off£t
;

1686 
Êags
;

1688 
	`xfs_ow√r_öfo_u≈ack
(
oöfo
, &
ow√r
, &
off£t
, &
Êags
);

1689 i‡(
unwrôãn
)

1690 
Êags
 |
XFS_RMAP_UNWRITTEN
;

1691 
	`åa˚_xfs_rm≠_unm≠
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

1692 
unwrôãn
, 
oöfo
);

1699 
îr‹
 = 
	`xfs_rm≠_lookup_À_ønge
(
cur
, 
bno
, 
ow√r
, 
off£t
, 
Êags
,

1700 &
…ªc
, &
i
);

1701 i‡(
îr‹
)

1702 
out_îr‹
;

1703 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
out_îr‹
);

1704 
…off
 = 
…ªc
.
rm_off£t
;

1707 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
…ªc
.
rm_°¨tblock
 <
bno
 &&

1708 
…ªc
.
rm_°¨tblock
 +Üåec.
rm_blockcou¡
 >=

1709 
bno
 + 
Àn
, 
out_îr‹
);

1712 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
ow√r
 =
…ªc
.
rm_ow√r
, 
out_îr‹
);

1715 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, (
Êags
 & 
XFS_RMAP_UNWRITTEN
) ==

1716 (
…ªc
.
rm_Êags
 & 
XFS_RMAP_UNWRITTEN
), 
out_îr‹
);

1719 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
…ªc
.
rm_off£t
 <
off£t
, 
out_îr‹
);

1720 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
off£t
 <
…off
 + 
…ªc
.
rm_blockcou¡
,

1721 
out_îr‹
);

1723 i‡(
…ªc
.
rm_°¨tblock
 =
bno
 &&Üåec.
rm_blockcou¡
 =
Àn
) {

1725 
îr‹
 = 
	`xfs_rm≠_dñëe
(
cur
, 
…ªc
.
rm_°¨tblock
,

1726 
…ªc
.
rm_blockcou¡
,Üåec.
rm_ow√r
,

1727 
…ªc
.
rm_off£t
,Üåec.
rm_Êags
);

1728 i‡(
îr‹
)

1729 
out_îr‹
;

1730 } i‡(
…ªc
.
rm_°¨tblock
 =
bno
) {

1743 
îr‹
 = 
	`xfs_rm≠_dñëe
(
cur
, 
…ªc
.
rm_°¨tblock
,

1744 
…ªc
.
rm_blockcou¡
,Üåec.
rm_ow√r
,

1745 
…ªc
.
rm_off£t
,Üåec.
rm_Êags
);

1746 i‡(
îr‹
)

1747 
out_îr‹
;

1750 
…ªc
.
rm_°¨tblock
 +
Àn
;

1751 
…ªc
.
rm_blockcou¡
 -
Àn
;

1752 
…ªc
.
rm_off£t
 +
Àn
;

1753 
îr‹
 = 
	`xfs_rm≠_ö£π
(
cur
, 
…ªc
.
rm_°¨tblock
,

1754 
…ªc
.
rm_blockcou¡
,Üåec.
rm_ow√r
,

1755 
…ªc
.
rm_off£t
,Üåec.
rm_Êags
);

1756 i‡(
îr‹
)

1757 
out_îr‹
;

1758 } i‡(
…ªc
.
rm_°¨tblock
 +Üåec.
rm_blockcou¡
 =
bno
 + 
Àn
) {

1769 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
…ªc
.
rm_°¨tblock
,

1770 
…ªc
.
rm_blockcou¡
,Üåec.
rm_ow√r
,

1771 
…ªc
.
rm_off£t
,Üåec.
rm_Êags
, &
i
);

1772 i‡(
îr‹
)

1773 
out_îr‹
;

1774 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
out_îr‹
);

1775 
…ªc
.
rm_blockcou¡
 -
Àn
;

1776 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
…ªc
);

1777 i‡(
îr‹
)

1778 
out_îr‹
;

1792 
xfs_exéí_t
 
‹ig_Àn
 = 
…ªc
.
rm_blockcou¡
;

1795 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
…ªc
.
rm_°¨tblock
,

1796 
…ªc
.
rm_blockcou¡
,Üåec.
rm_ow√r
,

1797 
…ªc
.
rm_off£t
,Üåec.
rm_Êags
, &
i
);

1798 i‡(
îr‹
)

1799 
out_îr‹
;

1800 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
out_îr‹
);

1801 
…ªc
.
rm_blockcou¡
 = 
bno
 -Üåec.
rm_°¨tblock
;

1802 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
…ªc
);

1803 i‡(
îr‹
)

1804 
out_îr‹
;

1807 
îr‹
 = 
	`xfs_rm≠_ö£π
(
cur
, 
bno
 + 
Àn
,

1808 
‹ig_Àn
 - 
Àn
 - 
…ªc
.
rm_blockcou¡
,

1809 
…ªc
.
rm_ow√r
, 
off£t
 + 
Àn
,

1810 
…ªc
.
rm_Êags
);

1811 i‡(
îr‹
)

1812 
out_îr‹
;

1815 
	`åa˚_xfs_rm≠_unm≠_d⁄e
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

1816 
unwrôãn
, 
oöfo
);

1817 
out_îr‹
:

1818 i‡(
îr‹
)

1819 
	`åa˚_xfs_rm≠_unm≠_îr‹
(
cur
->
bc_mp
,

1820 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

1821  
îr‹
;

1822 
	}
}

1833 
STATIC
 

1834 
	$xfs_rm≠_m≠_sh¨ed
(

1835 
xfs_båì_cur
 *
cur
,

1836 
xfs_agblock_t
 
bno
,

1837 
xfs_exéí_t
 
Àn
,

1838 
boﬁ
 
unwrôãn
,

1839 
xfs_ow√r_öfo
 *
oöfo
)

1841 
xfs_mou¡
 *
mp
 = 
cur
->
bc_mp
;

1842 
xfs_rm≠_úec
 
…ªc
;

1843 
xfs_rm≠_úec
 
gåec
;

1844 
have_gt
;

1845 
have_…
;

1846 
îr‹
 = 0;

1847 
i
;

1848 
uöt64_t
 
ow√r
;

1849 
uöt64_t
 
off£t
;

1850 
Êags
 = 0;

1852 
	`xfs_ow√r_öfo_u≈ack
(
oöfo
, &
ow√r
, &
off£t
, &
Êags
);

1853 i‡(
unwrôãn
)

1854 
Êags
 |
XFS_RMAP_UNWRITTEN
;

1855 
	`åa˚_xfs_rm≠_m≠
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

1856 
unwrôãn
, 
oöfo
);

1859 
îr‹
 = 
	`xfs_rm≠_föd_À·_√ighb‹
(
cur
, 
bno
, 
ow√r
, 
off£t
, 
Êags
,

1860 &
…ªc
, &
have_…
);

1861 i‡(
îr‹
)

1862 
out_îr‹
;

1863 i‡(
have_…
 &&

1864 !
	`xfs_rm≠_is_mîgóbÀ
(&
…ªc
, 
ow√r
, 
Êags
))

1865 
have_…
 = 0;

1868 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
bno
 + 
Àn
,Üí, 
ow√r
, 
off£t
 +Üen,

1869 
Êags
, &
have_gt
);

1870 i‡(
îr‹
)

1871 
out_îr‹
;

1872 i‡(
have_gt
) {

1873 
îr‹
 = 
	`xfs_rm≠_gë_ªc
(
cur
, &
gåec
, &
have_gt
);

1874 i‡(
îr‹
)

1875 
out_îr‹
;

1876 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
have_gt
 =1, 
out_îr‹
);

1877 
	`åa˚_xfs_rm≠_föd_right_√ighb‹_ªsu…
(
cur
->
bc_mp
,

1878 
cur
->
bc_¥iv©e
.
a
.
agno
, 
gåec
.
rm_°¨tblock
,

1879 
gåec
.
rm_blockcou¡
, gåec.
rm_ow√r
,

1880 
gåec
.
rm_off£t
, gåec.
rm_Êags
);

1882 i‡(!
	`xfs_rm≠_is_mîgóbÀ
(&
gåec
, 
ow√r
, 
Êags
))

1883 
have_gt
 = 0;

1886 i‡(
have_…
 &&

1887 
…ªc
.
rm_°¨tblock
 +Üåec.
rm_blockcou¡
 =
bno
 &&

1888 
…ªc
.
rm_off£t
 +Üåec.
rm_blockcou¡
 =
off£t
) {

1898 
…ªc
.
rm_blockcou¡
 +
Àn
;

1899 i‡(
have_gt
 &&

1900 
bno
 + 
Àn
 =
gåec
.
rm_°¨tblock
 &&

1901 
off£t
 + 
Àn
 =
gåec
.
rm_off£t
) {

1911 
…ªc
.
rm_blockcou¡
 +
gåec
.rm_blockcount;

1912 
îr‹
 = 
	`xfs_rm≠_dñëe
(
cur
, 
gåec
.
rm_°¨tblock
,

1913 
gåec
.
rm_blockcou¡
, gåec.
rm_ow√r
,

1914 
gåec
.
rm_off£t
, gåec.
rm_Êags
);

1915 i‡(
îr‹
)

1916 
out_îr‹
;

1920 
îr‹
 = 
	`xfs_rm≠_lookup_eq
(
cur
, 
…ªc
.
rm_°¨tblock
,

1921 
…ªc
.
rm_blockcou¡
,Üåec.
rm_ow√r
,

1922 
…ªc
.
rm_off£t
,Üåec.
rm_Êags
, &
i
);

1923 i‡(
îr‹
)

1924 
out_îr‹
;

1925 
	`XFS_WANT_CORRUPTED_GOTO
(
mp
, 
i
 =1, 
out_îr‹
);

1927 
îr‹
 = 
	`xfs_rm≠_upd©e
(
cur
, &
…ªc
);

1928 i‡(
îr‹
)

1929 
out_îr‹
;

1930 } i‡(
have_gt
 &&

1931 
bno
 + 
Àn
 =
gåec
.
rm_°¨tblock
 &&

1932 
off£t
 + 
Àn
 =
gåec
.
rm_off£t
) {

1943 
îr‹
 = 
	`xfs_rm≠_dñëe
(
cur
, 
gåec
.
rm_°¨tblock
,

1944 
gåec
.
rm_blockcou¡
, gåec.
rm_ow√r
,

1945 
gåec
.
rm_off£t
, gåec.
rm_Êags
);

1946 i‡(
îr‹
)

1947 
out_îr‹
;

1950 
gåec
.
rm_°¨tblock
 = 
bno
;

1951 
gåec
.
rm_blockcou¡
 +
Àn
;

1952 
gåec
.
rm_off£t
 = 
off£t
;

1953 
îr‹
 = 
	`xfs_rm≠_ö£π
(
cur
, 
gåec
.
rm_°¨tblock
,

1954 
gåec
.
rm_blockcou¡
, gåec.
rm_ow√r
,

1955 
gåec
.
rm_off£t
, gåec.
rm_Êags
);

1956 i‡(
îr‹
)

1957 
out_îr‹
;

1963 
îr‹
 = 
	`xfs_rm≠_ö£π
(
cur
, 
bno
, 
Àn
, 
ow√r
, 
off£t
, 
Êags
);

1964 i‡(
îr‹
)

1965 
out_îr‹
;

1968 
	`åa˚_xfs_rm≠_m≠_d⁄e
(
mp
, 
cur
->
bc_¥iv©e
.
a
.
agno
, 
bno
, 
Àn
,

1969 
unwrôãn
, 
oöfo
);

1970 
out_îr‹
:

1971 i‡(
îr‹
)

1972 
	`åa˚_xfs_rm≠_m≠_îr‹
(
cur
->
bc_mp
,

1973 
cur
->
bc_¥iv©e
.
a
.
agno
, 
îr‹
, 
_RET_IP_
);

1974  
îr‹
;

1975 
	}
}

1977 
	sxfs_rm≠_quîy_ønge_öfo
 {

1978 
xfs_rm≠_quîy_ønge_‚
 
	m‚
;

1979 *
	m¥iv
;

1983 
STATIC
 

1984 
	$xfs_rm≠_quîy_ønge_hñ≥r
(

1985 
xfs_båì_cur
 *
cur
,

1986 
xfs_båì_ªc
 *
ªc
,

1987 *
¥iv
)

1989 
xfs_rm≠_quîy_ønge_öfo
 *
quîy
 = 
¥iv
;

1990 
xfs_rm≠_úec
 
úec
;

1991 
îr‹
;

1993 
îr‹
 = 
	`xfs_rm≠_båec_to_úec
(
ªc
, &
úec
);

1994 i‡(
îr‹
)

1995  
îr‹
;

1996  
quîy
->
	`‚
(
cur
, &
úec
, quîy->
¥iv
);

1997 
	}
}

2001 
	$xfs_rm≠_quîy_ønge
(

2002 
xfs_båì_cur
 *
cur
,

2003 
xfs_rm≠_úec
 *
low_ªc
,

2004 
xfs_rm≠_úec
 *
high_ªc
,

2005 
xfs_rm≠_quîy_ønge_‚
 
‚
,

2006 *
¥iv
)

2008 
xfs_båì_úec
 
low_bªc
;

2009 
xfs_båì_úec
 
high_bªc
;

2010 
xfs_rm≠_quîy_ønge_öfo
 
quîy
;

2012 
low_bªc
.
r
 = *
low_ªc
;

2013 
high_bªc
.
r
 = *
high_ªc
;

2014 
quîy
.
¥iv
 =Öriv;

2015 
quîy
.
‚
 = fn;

2016  
	`xfs_båì_quîy_ønge
(
cur
, &
low_bªc
, &
high_bªc
,

2017 
xfs_rm≠_quîy_ønge_hñ≥r
, &
quîy
);

2018 
	}
}

2022 
	$xfs_rm≠_föish_⁄e_˛ónup
(

2023 
xfs_å™s
 *
ç
,

2024 
xfs_båì_cur
 *
rcur
,

2025 
îr‹
)

2027 
xfs_buf
 *
agbp
;

2029 i‡(
rcur
 =
NULL
)

2031 
agbp
 = 
rcur
->
bc_¥iv©e
.
a
.agbp;

2032 
	`xfs_båì_dñ_curs‹
(
rcur
, 
îr‹
 ? 
XFS_BTREE_ERROR
 : 
XFS_BTREE_NOERROR
);

2033 i‡(
îr‹
)

2034 
	`xfs_å™s_bªl£
(
ç
, 
agbp
);

2035 
	}
}

2045 
	$xfs_rm≠_föish_⁄e
(

2046 
xfs_å™s
 *
ç
,

2047 
xfs_rm≠_öã¡_ty≥
 
ty≥
,

2048 
__uöt64_t
 
ow√r
,

2049 
whichf‹k
,

2050 
xfs_fûeoff_t
 
°¨toff
,

2051 
xfs_fsblock_t
 
°¨tblock
,

2052 
xfs_fûblks_t
 
blockcou¡
,

2053 
xfs_ex¡°_t
 
°©e
,

2054 
xfs_båì_cur
 **
pcur
)

2056 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

2057 
xfs_båì_cur
 *
rcur
;

2058 
xfs_buf
 *
agbp
 = 
NULL
;

2059 
îr‹
 = 0;

2060 
xfs_agnumbî_t
 
agno
;

2061 
xfs_ow√r_öfo
 
oöfo
;

2062 
xfs_agblock_t
 
bno
;

2063 
boﬁ
 
unwrôãn
;

2065 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
°¨tblock
);

2066 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

2067 
bno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
°¨tblock
);

2069 
	`åa˚_xfs_rm≠_de„ºed
(
mp
, 
agno
, 
ty≥
, 
bno
, 
ow√r
, 
whichf‹k
,

2070 
°¨toff
, 
blockcou¡
, 
°©e
);

2072 i‡(
	`XFS_TEST_ERROR
(
Ál£
, 
mp
,

2073 
XFS_ERRTAG_RMAP_FINISH_ONE
,

2074 
XFS_RANDOM_RMAP_FINISH_ONE
))

2075  -
EIO
;

2081 
rcur
 = *
pcur
;

2082 i‡(
rcur
 !
NULL
 &&Ñcur->
bc_¥iv©e
.
a
.
agno
 !=ágno) {

2083 
	`xfs_rm≠_föish_⁄e_˛ónup
(
ç
, 
rcur
, 0);

2084 
rcur
 = 
NULL
;

2085 *
pcur
 = 
NULL
;

2087 i‡(
rcur
 =
NULL
) {

2093 
îr‹
 = 
	`xfs_‰ì_exã¡_fix_‰ìli°
(
ç
, 
agno
, &
agbp
);

2094 i‡(
îr‹
)

2095  
îr‹
;

2096 i‡(!
agbp
)

2097  -
EFSCORRUPTED
;

2099 
rcur
 = 
	`xfs_rm≠bt_öô_curs‹
(
mp
, 
ç
, 
agbp
, 
agno
);

2100 i‡(!
rcur
) {

2101 
îr‹
 = -
ENOMEM
;

2102 
out_cur
;

2105 *
pcur
 = 
rcur
;

2107 
	`xfs_rm≠_öo_ow√r
(&
oöfo
, 
ow√r
, 
whichf‹k
, 
°¨toff
);

2108 
unwrôãn
 = 
°©e
 =
XFS_EXT_UNWRITTEN
;

2109 
bno
 = 
	`XFS_FSB_TO_AGBNO
(
rcur
->
bc_mp
, 
°¨tblock
);

2111 
ty≥
) {

2112 
XFS_RMAP_ALLOC
:

2113 
XFS_RMAP_MAP
:

2114 
îr‹
 = 
	`xfs_rm≠_m≠
(
rcur
, 
bno
, 
blockcou¡
, 
unwrôãn
, &
oöfo
);

2116 
XFS_RMAP_MAP_SHARED
:

2117 
îr‹
 = 
	`xfs_rm≠_m≠_sh¨ed
(
rcur
, 
bno
, 
blockcou¡
, 
unwrôãn
,

2118 &
oöfo
);

2120 
XFS_RMAP_FREE
:

2121 
XFS_RMAP_UNMAP
:

2122 
îr‹
 = 
	`xfs_rm≠_unm≠
(
rcur
, 
bno
, 
blockcou¡
, 
unwrôãn
,

2123 &
oöfo
);

2125 
XFS_RMAP_UNMAP_SHARED
:

2126 
îr‹
 = 
	`xfs_rm≠_unm≠_sh¨ed
(
rcur
, 
bno
, 
blockcou¡
, 
unwrôãn
,

2127 &
oöfo
);

2129 
XFS_RMAP_CONVERT
:

2130 
îr‹
 = 
	`xfs_rm≠_c⁄vît
(
rcur
, 
bno
, 
blockcou¡
, !
unwrôãn
,

2131 &
oöfo
);

2133 
XFS_RMAP_CONVERT_SHARED
:

2134 
îr‹
 = 
	`xfs_rm≠_c⁄vît_sh¨ed
(
rcur
, 
bno
, 
blockcou¡
,

2135 !
unwrôãn
, &
oöfo
);

2138 
	`ASSERT
(0);

2139 
îr‹
 = -
EFSCORRUPTED
;

2141  
îr‹
;

2143 
out_cur
:

2144 
	`xfs_å™s_bªl£
(
ç
, 
agbp
);

2146  
îr‹
;

2147 
	}
}

2152 
boﬁ


2153 
	$xfs_rm≠_upd©e_is_√eded
(

2154 
xfs_mou¡
 *
mp
,

2155 
whichf‹k
)

2157  
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
Ë&& 
whichf‹k
 !
XFS_COW_FORK
;

2158 
	}
}

2165 
	$__xfs_rm≠_add
(

2166 
xfs_mou¡
 *
mp
,

2167 
xfs_de„r_›s
 *
df›s
,

2168 
xfs_rm≠_öã¡_ty≥
 
ty≥
,

2169 
__uöt64_t
 
ow√r
,

2170 
whichf‹k
,

2171 
xfs_bmbt_úec
 *
bm≠
)

2173 
xfs_rm≠_öã¡
 *
ri
;

2175 
	`åa˚_xfs_rm≠_de„r
(
mp
, 
	`XFS_FSB_TO_AGNO
(mp, 
bm≠
->
br_°¨tblock
),

2176 
ty≥
,

2177 
	`XFS_FSB_TO_AGBNO
(
mp
, 
bm≠
->
br_°¨tblock
),

2178 
ow√r
, 
whichf‹k
,

2179 
bm≠
->
br_°¨toff
,

2180 
bm≠
->
br_blockcou¡
,

2181 
bm≠
->
br_°©e
);

2183 
ri
 = 
	`kmem_Æloc
((
xfs_rm≠_öã¡
), 
KM_SLEEP
 | 
KM_NOFS
);

2184 
	`INIT_LIST_HEAD
(&
ri
->
ri_li°
);

2185 
ri
->
ri_ty≥
 = 
ty≥
;

2186 
ri
->
ri_ow√r
 = 
ow√r
;

2187 
ri
->
ri_whichf‹k
 = 
whichf‹k
;

2188 
ri
->
ri_bm≠
 = *
bm≠
;

2190 
	`xfs_de„r_add
(
df›s
, 
XFS_DEFER_OPS_TYPE_RMAP
, &
ri
->
ri_li°
);

2192 
	}
}

2196 
	$xfs_rm≠_m≠_exã¡
(

2197 
xfs_mou¡
 *
mp
,

2198 
xfs_de„r_›s
 *
df›s
,

2199 
xfs_öode
 *
ù
,

2200 
whichf‹k
,

2201 
xfs_bmbt_úec
 *
PREV
)

2203 i‡(!
	`xfs_rm≠_upd©e_is_√eded
(
mp
, 
whichf‹k
))

2206  
	`__xfs_rm≠_add
(
mp
, 
df›s
, 
	`xfs_is_ªÊök_öode
(
ù
) ?

2207 
XFS_RMAP_MAP_SHARED
 : 
XFS_RMAP_MAP
, 
ù
->
i_öo
,

2208 
whichf‹k
, 
PREV
);

2209 
	}
}

2213 
	$xfs_rm≠_unm≠_exã¡
(

2214 
xfs_mou¡
 *
mp
,

2215 
xfs_de„r_›s
 *
df›s
,

2216 
xfs_öode
 *
ù
,

2217 
whichf‹k
,

2218 
xfs_bmbt_úec
 *
PREV
)

2220 i‡(!
	`xfs_rm≠_upd©e_is_√eded
(
mp
, 
whichf‹k
))

2223  
	`__xfs_rm≠_add
(
mp
, 
df›s
, 
	`xfs_is_ªÊök_öode
(
ù
) ?

2224 
XFS_RMAP_UNMAP_SHARED
 : 
XFS_RMAP_UNMAP
, 
ù
->
i_öo
,

2225 
whichf‹k
, 
PREV
);

2226 
	}
}

2230 
	$xfs_rm≠_c⁄vît_exã¡
(

2231 
xfs_mou¡
 *
mp
,

2232 
xfs_de„r_›s
 *
df›s
,

2233 
xfs_öode
 *
ù
,

2234 
whichf‹k
,

2235 
xfs_bmbt_úec
 *
PREV
)

2237 i‡(!
	`xfs_rm≠_upd©e_is_√eded
(
mp
, 
whichf‹k
))

2240  
	`__xfs_rm≠_add
(
mp
, 
df›s
, 
	`xfs_is_ªÊök_öode
(
ù
) ?

2241 
XFS_RMAP_CONVERT_SHARED
 : 
XFS_RMAP_CONVERT
, 
ù
->
i_öo
,

2242 
whichf‹k
, 
PREV
);

2243 
	}
}

2247 
	$xfs_rm≠_Æloc_exã¡
(

2248 
xfs_mou¡
 *
mp
,

2249 
xfs_de„r_›s
 *
df›s
,

2250 
xfs_agnumbî_t
 
agno
,

2251 
xfs_agblock_t
 
bno
,

2252 
xfs_exéí_t
 
Àn
,

2253 
__uöt64_t
 
ow√r
)

2255 
xfs_bmbt_úec
 
bm≠
;

2257 i‡(!
	`xfs_rm≠_upd©e_is_√eded
(
mp
, 
XFS_DATA_FORK
))

2260 
bm≠
.
br_°¨tblock
 = 
	`XFS_AGB_TO_FSB
(
mp
, 
agno
, 
bno
);

2261 
bm≠
.
br_blockcou¡
 = 
Àn
;

2262 
bm≠
.
br_°¨toff
 = 0;

2263 
bm≠
.
br_°©e
 = 
XFS_EXT_NORM
;

2265  
	`__xfs_rm≠_add
(
mp
, 
df›s
, 
XFS_RMAP_ALLOC
, 
ow√r
,

2266 
XFS_DATA_FORK
, &
bm≠
);

2267 
	}
}

2271 
	$xfs_rm≠_‰ì_exã¡
(

2272 
xfs_mou¡
 *
mp
,

2273 
xfs_de„r_›s
 *
df›s
,

2274 
xfs_agnumbî_t
 
agno
,

2275 
xfs_agblock_t
 
bno
,

2276 
xfs_exéí_t
 
Àn
,

2277 
__uöt64_t
 
ow√r
)

2279 
xfs_bmbt_úec
 
bm≠
;

2281 i‡(!
	`xfs_rm≠_upd©e_is_√eded
(
mp
, 
XFS_DATA_FORK
))

2284 
bm≠
.
br_°¨tblock
 = 
	`XFS_AGB_TO_FSB
(
mp
, 
agno
, 
bno
);

2285 
bm≠
.
br_blockcou¡
 = 
Àn
;

2286 
bm≠
.
br_°¨toff
 = 0;

2287 
bm≠
.
br_°©e
 = 
XFS_EXT_NORM
;

2289  
	`__xfs_rm≠_add
(
mp
, 
df›s
, 
XFS_RMAP_FREE
, 
ow√r
,

2290 
XFS_DATA_FORK
, &
bm≠
);

2291 
	}
}

	@libxfs/xfs_rmap.h

20 #i‚de‡
__XFS_RMAP_H__


21 
	#__XFS_RMAP_H__


	)

23 
ölöe
 

24 
	$xfs_rm≠_ag_ow√r
(

25 
xfs_ow√r_öfo
 *
oi
,

26 
uöt64_t
 
ow√r
)

28 
oi
->
oi_ow√r
 = 
ow√r
;

29 
oi
->
oi_off£t
 = 0;

30 
oi
->
oi_Êags
 = 0;

31 
	}
}

33 
ölöe
 

34 
	$xfs_rm≠_öo_bmbt_ow√r
(

35 
xfs_ow√r_öfo
 *
oi
,

36 
xfs_öo_t
 
öo
,

37 
whichf‹k
)

39 
oi
->
oi_ow√r
 = 
öo
;

40 
oi
->
oi_off£t
 = 0;

41 
oi
->
oi_Êags
 = 
XFS_OWNER_INFO_BMBT_BLOCK
;

42 i‡(
whichf‹k
 =
XFS_ATTR_FORK
)

43 
oi
->
oi_Êags
 |
XFS_OWNER_INFO_ATTR_FORK
;

44 
	}
}

46 
ölöe
 

47 
	$xfs_rm≠_öo_ow√r
(

48 
xfs_ow√r_öfo
 *
oi
,

49 
xfs_öo_t
 
öo
,

50 
whichf‹k
,

51 
xfs_fûeoff_t
 
off£t
)

53 
oi
->
oi_ow√r
 = 
öo
;

54 
oi
->
oi_off£t
 = 
off£t
;

55 
oi
->
oi_Êags
 = 0;

56 i‡(
whichf‹k
 =
XFS_ATTR_FORK
)

57 
oi
->
oi_Êags
 |
XFS_OWNER_INFO_ATTR_FORK
;

58 
	}
}

60 
ölöe
 

61 
	$xfs_rm≠_skù_ow√r_upd©e
(

62 
xfs_ow√r_öfo
 *
oi
)

64 
oi
->
oi_ow√r
 = 
XFS_RMAP_OWN_UNKNOWN
;

65 
	}
}

69 
	gxfs_buf
;

71 
ölöe
 
__u64


72 
	$xfs_rm≠_úec_off£t_∑ck
(

73 c⁄° 
xfs_rm≠_úec
 *
úec
)

75 
__u64
 
x
;

77 
x
 = 
	`XFS_RMAP_OFF
(
úec
->
rm_off£t
);

78 i‡(
úec
->
rm_Êags
 & 
XFS_RMAP_ATTR_FORK
)

79 
x
 |
XFS_RMAP_OFF_ATTR_FORK
;

80 i‡(
úec
->
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
)

81 
x
 |
XFS_RMAP_OFF_BMBT_BLOCK
;

82 i‡(
úec
->
rm_Êags
 & 
XFS_RMAP_UNWRITTEN
)

83 
x
 |
XFS_RMAP_OFF_UNWRITTEN
;

84  
x
;

85 
	}
}

87 
ölöe
 

88 
	$xfs_rm≠_úec_off£t_u≈ack
(

89 
__u64
 
off£t
,

90 
xfs_rm≠_úec
 *
úec
)

92 i‡(
off£t
 & ~(
XFS_RMAP_OFF_MASK
 | 
XFS_RMAP_OFF_FLAGS
))

93  -
EFSCORRUPTED
;

94 
úec
->
rm_off£t
 = 
	`XFS_RMAP_OFF
(
off£t
);

95 i‡(
off£t
 & 
XFS_RMAP_OFF_ATTR_FORK
)

96 
úec
->
rm_Êags
 |
XFS_RMAP_ATTR_FORK
;

97 i‡(
off£t
 & 
XFS_RMAP_OFF_BMBT_BLOCK
)

98 
úec
->
rm_Êags
 |
XFS_RMAP_BMBT_BLOCK
;

99 i‡(
off£t
 & 
XFS_RMAP_OFF_UNWRITTEN
)

100 
úec
->
rm_Êags
 |
XFS_RMAP_UNWRITTEN
;

102 
	}
}

104 
ölöe
 

105 
	$xfs_ow√r_öfo_u≈ack
(

106 
xfs_ow√r_öfo
 *
oöfo
,

107 
uöt64_t
 *
ow√r
,

108 
uöt64_t
 *
off£t
,

109 *
Êags
)

111 
r
 = 0;

113 *
ow√r
 = 
oöfo
->
oi_ow√r
;

114 *
off£t
 = 
oöfo
->
oi_off£t
;

115 i‡(
oöfo
->
oi_Êags
 & 
XFS_OWNER_INFO_ATTR_FORK
)

116 
r
 |
XFS_RMAP_ATTR_FORK
;

117 i‡(
oöfo
->
oi_Êags
 & 
XFS_OWNER_INFO_BMBT_BLOCK
)

118 
r
 |
XFS_RMAP_BMBT_BLOCK
;

119 *
Êags
 = 
r
;

120 
	}
}

122 
ölöe
 

123 
	$xfs_ow√r_öfo_∑ck
(

124 
xfs_ow√r_öfo
 *
oöfo
,

125 
uöt64_t
 
ow√r
,

126 
uöt64_t
 
off£t
,

127 
Êags
)

129 
oöfo
->
oi_ow√r
 = 
ow√r
;

130 
oöfo
->
oi_off£t
 = 
	`XFS_RMAP_OFF
(
off£t
);

131 
oöfo
->
oi_Êags
 = 0;

132 i‡(
Êags
 & 
XFS_RMAP_ATTR_FORK
)

133 
oöfo
->
oi_Êags
 |
XFS_OWNER_INFO_ATTR_FORK
;

134 i‡(
Êags
 & 
XFS_RMAP_BMBT_BLOCK
)

135 
oöfo
->
oi_Êags
 |
XFS_OWNER_INFO_BMBT_BLOCK
;

136 
	}
}

138 
xfs_rm≠_Æloc
(
xfs_å™s
 *
ç
, 
xfs_buf
 *
agbp
,

139 
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

140 
xfs_ow√r_öfo
 *
oöfo
);

141 
xfs_rm≠_‰ì
(
xfs_å™s
 *
ç
, 
xfs_buf
 *
agbp
,

142 
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

143 
xfs_ow√r_öfo
 *
oöfo
);

145 
xfs_rm≠_lookup_À
(
xfs_båì_cur
 *
cur
, 
xfs_agblock_t
 
bno
,

146 
xfs_exéí_t
 
Àn
, 
uöt64_t
 
ow√r
, uöt64_à
off£t
,

147 
Êags
, *
°©
);

148 
xfs_rm≠_lookup_eq
(
xfs_båì_cur
 *
cur
, 
xfs_agblock_t
 
bno
,

149 
xfs_exéí_t
 
Àn
, 
uöt64_t
 
ow√r
, uöt64_à
off£t
,

150 
Êags
, *
°©
);

151 
xfs_rm≠_ö£π
(
xfs_båì_cur
 *
rcur
, 
xfs_agblock_t
 
agbno
,

152 
xfs_exéí_t
 
Àn
, 
uöt64_t
 
ow√r
, uöt64_à
off£t
,

153 
Êags
);

154 
xfs_rm≠_gë_ªc
(
xfs_båì_cur
 *
cur
, 
xfs_rm≠_úec
 *
úec
,

155 *
°©
);

157 (*
	txfs_rm≠_quîy_ønge_‚
)(

158 
	txfs_båì_cur
 *
	tcur
,

159 
	txfs_rm≠_úec
 *
	tªc
,

160 *
	t¥iv
);

162 
	`xfs_rm≠_quîy_ønge
(
xfs_båì_cur
 *
cur
,

163 
xfs_rm≠_úec
 *
low_ªc
, xfs_rm≠_úe¯*
high_ªc
,

164 
xfs_rm≠_quîy_ønge_‚
 
‚
, *
¥iv
);

166 
	exfs_rm≠_öã¡_ty≥
 {

167 
XFS_RMAP_MAP
,

168 
XFS_RMAP_MAP_SHARED
,

169 
XFS_RMAP_UNMAP
,

170 
XFS_RMAP_UNMAP_SHARED
,

171 
XFS_RMAP_CONVERT
,

172 
XFS_RMAP_CONVERT_SHARED
,

173 
XFS_RMAP_ALLOC
,

174 
XFS_RMAP_FREE
,

177 
	sxfs_rm≠_öã¡
 {

178 
li°_hód
 
ri_li°
;

179 
xfs_rm≠_öã¡_ty≥
 
ri_ty≥
;

180 
__uöt64_t
 
ri_ow√r
;

181 
ri_whichf‹k
;

182 
xfs_bmbt_úec
 
ri_bm≠
;

186 
	`xfs_rm≠_m≠_exã¡
(
xfs_mou¡
 *
mp
, 
xfs_de„r_›s
 *
df›s
,

187 
xfs_öode
 *
ù
, 
whichf‹k
,

188 
xfs_bmbt_úec
 *
im≠
);

189 
	`xfs_rm≠_unm≠_exã¡
(
xfs_mou¡
 *
mp
, 
xfs_de„r_›s
 *
df›s
,

190 
xfs_öode
 *
ù
, 
whichf‹k
,

191 
xfs_bmbt_úec
 *
im≠
);

192 
	`xfs_rm≠_c⁄vît_exã¡
(
xfs_mou¡
 *
mp
, 
xfs_de„r_›s
 *
df›s
,

193 
xfs_öode
 *
ù
, 
whichf‹k
,

194 
xfs_bmbt_úec
 *
im≠
);

195 
	`xfs_rm≠_Æloc_exã¡
(
xfs_mou¡
 *
mp
, 
xfs_de„r_›s
 *
df›s
,

196 
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

197 
__uöt64_t
 
ow√r
);

198 
	`xfs_rm≠_‰ì_exã¡
(
xfs_mou¡
 *
mp
, 
xfs_de„r_›s
 *
df›s
,

199 
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
bno
, 
xfs_exéí_t
 
Àn
,

200 
__uöt64_t
 
ow√r
);

202 
	`xfs_rm≠_föish_⁄e_˛ónup
(
xfs_å™s
 *
ç
,

203 
xfs_båì_cur
 *
rcur
, 
îr‹
);

204 
	`xfs_rm≠_föish_⁄e
(
xfs_å™s
 *
ç
, 
xfs_rm≠_öã¡_ty≥
 
ty≥
,

205 
__uöt64_t
 
ow√r
, 
whichf‹k
, 
xfs_fûeoff_t
 
°¨toff
,

206 
xfs_fsblock_t
 
°¨tblock
, 
xfs_fûblks_t
 
blockcou¡
,

207 
xfs_ex¡°_t
 
°©e
, 
xfs_båì_cur
 **
pcur
);

209 
	`xfs_rm≠_föd_À·_√ighb‹
(
xfs_båì_cur
 *
cur
, 
xfs_agblock_t
 
bno
,

210 
uöt64_t
 
ow√r
, uöt64_à
off£t
, 
Êags
,

211 
xfs_rm≠_úec
 *
úec
, *
°©
);

212 
	`xfs_rm≠_lookup_À_ønge
(
xfs_båì_cur
 *
cur
, 
xfs_agblock_t
 
bno
,

213 
uöt64_t
 
ow√r
, uöt64_à
off£t
, 
Êags
,

214 
xfs_rm≠_úec
 *
úec
, *
°©
);

	@libxfs/xfs_rmap_btree.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_bô.h
"

25 
	~"xfs_sb.h
"

26 
	~"xfs_mou¡.h
"

27 
	~"xfs_de„r.h
"

28 
	~"xfs_öode.h
"

29 
	~"xfs_å™s.h
"

30 
	~"xfs_Æloc.h
"

31 
	~"xfs_båì.h
"

32 
	~"xfs_rm≠.h
"

33 
	~"xfs_rm≠_båì.h
"

34 
	~"xfs_åa˚.h
"

35 
	~"xfs_cksum.h
"

36 
	~"xfs_ag_ªsv.h
"

63 
xfs_båì_cur
 *

64 
	$xfs_rm≠bt_dup_curs‹
(

65 
xfs_båì_cur
 *
cur
)

67  
	`xfs_rm≠bt_öô_curs‹
(
cur
->
bc_mp
, cur->
bc_ç
,

68 
cur
->
bc_¥iv©e
.
a
.
agbp
, cur->bc_¥iv©e.a.
agno
);

69 
	}
}

71 
STATIC
 

72 
	$xfs_rm≠bt_£t_roŸ
(

73 
xfs_båì_cur
 *
cur
,

74 
xfs_båì_±r
 *
±r
,

75 
öc
)

77 
xfs_buf
 *
agbp
 = 
cur
->
bc_¥iv©e
.
a
.agbp;

78 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

79 
xfs_agnumbî_t
 
£qno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

80 
bäum
 = 
cur
->
bc_bäum
;

81 
xfs_≥øg
 *
∑g
 = 
	`xfs_≥øg_gë
(
cur
->
bc_mp
, 
£qno
);

83 
	`ASSERT
(
±r
->
s
 != 0);

85 
agf
->
agf_roŸs
[
bäum
] = 
±r
->
s
;

86 
	`be32_add_˝u
(&
agf
->
agf_Àvñs
[
bäum
], 
öc
);

87 
∑g
->
∑gf_Àvñs
[
bäum
] +
öc
;

88 
	`xfs_≥øg_put
(
∑g
);

90 
	`xfs_Æloc_log_agf
(
cur
->
bc_ç
, 
agbp
, 
XFS_AGF_ROOTS
 | 
XFS_AGF_LEVELS
);

91 
	}
}

93 
STATIC
 

94 
	$xfs_rm≠bt_Æloc_block
(

95 
xfs_båì_cur
 *
cur
,

96 
xfs_båì_±r
 *
°¨t
,

97 
xfs_båì_±r
 *
√w
,

98 *
°©
)

100 
xfs_buf
 *
agbp
 = 
cur
->
bc_¥iv©e
.
a
.agbp;

101 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

102 
îr‹
;

103 
xfs_agblock_t
 
bno
;

105 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ENTRY
);

108 
îr‹
 = 
	`xfs_Æloc_gë_‰ìli°
(
cur
->
bc_ç
, cur->
bc_¥iv©e
.
a
.
agbp
,

109 &
bno
, 1);

110 i‡(
îr‹
) {

111 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_ERROR
);

112  
îr‹
;

115 
	`åa˚_xfs_rm≠bt_Æloc_block
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

116 
bno
, 1);

117 i‡(
bno
 =
NULLAGBLOCK
) {

118 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

119 *
°©
 = 0;

123 
	`xfs_exã¡_busy_ªu£
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
, 
bno
, 1,

124 
Ál£
);

126 
	`xfs_å™s_agbåì_dñè
(
cur
->
bc_ç
, 1);

127 
√w
->
s
 = 
	`˝u_to_be32
(
bno
);

128 
	`be32_add_˝u
(&
agf
->
agf_rm≠_blocks
, 1);

129 
	`xfs_Æloc_log_agf
(
cur
->
bc_ç
, 
agbp
, 
XFS_AGF_RMAP_BLOCKS
);

131 
	`XFS_BTREE_TRACE_CURSOR
(
cur
, 
XBT_EXIT
);

132 *
°©
 = 1;

134 
	}
}

136 
STATIC
 

137 
	$xfs_rm≠bt_‰ì_block
(

138 
xfs_båì_cur
 *
cur
,

139 
xfs_buf
 *
bp
)

141 
xfs_buf
 *
agbp
 = 
cur
->
bc_¥iv©e
.
a
.agbp;

142 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

143 
xfs_agblock_t
 
bno
;

144 
îr‹
;

146 
bno
 = 
	`xfs_daddr_to_agbno
(
cur
->
bc_mp
, 
	`XFS_BUF_ADDR
(
bp
));

147 
	`åa˚_xfs_rm≠bt_‰ì_block
(
cur
->
bc_mp
, cur->
bc_¥iv©e
.
a
.
agno
,

148 
bno
, 1);

149 
	`be32_add_˝u
(&
agf
->
agf_rm≠_blocks
, -1);

150 
	`xfs_Æloc_log_agf
(
cur
->
bc_ç
, 
agbp
, 
XFS_AGF_RMAP_BLOCKS
);

151 
îr‹
 = 
	`xfs_Æloc_put_‰ìli°
(
cur
->
bc_ç
, 
agbp
, 
NULL
, 
bno
, 1);

152 i‡(
îr‹
)

153  
îr‹
;

155 
	`xfs_exã¡_busy_ö£π
(
cur
->
bc_ç
, 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
bno
, 1,

156 
XFS_EXTENT_BUSY_SKIP_DISCARD
);

157 
	`xfs_å™s_agbåì_dñè
(
cur
->
bc_ç
, -1);

160 
	}
}

162 
STATIC
 

163 
	$xfs_rm≠bt_gë_möªcs
(

164 
xfs_båì_cur
 *
cur
,

165 
Àvñ
)

167  
cur
->
bc_mp
->
m_rm≠_mƒ
[
Àvñ
 != 0];

168 
	}
}

170 
STATIC
 

171 
	$xfs_rm≠bt_gë_maxªcs
(

172 
xfs_båì_cur
 *
cur
,

173 
Àvñ
)

175  
cur
->
bc_mp
->
m_rm≠_mxr
[
Àvñ
 != 0];

176 
	}
}

178 
STATIC
 

179 
	$xfs_rm≠bt_öô_key_‰om_ªc
(

180 
xfs_båì_key
 *
key
,

181 
xfs_båì_ªc
 *
ªc
)

183 
key
->
rm≠
.
rm_°¨tblock
 = 
ªc
->rmap.rm_startblock;

184 
key
->
rm≠
.
rm_ow√r
 = 
ªc
->rmap.rm_owner;

185 
key
->
rm≠
.
rm_off£t
 = 
ªc
->rmap.rm_offset;

186 
	}
}

195 
STATIC
 

196 
	$xfs_rm≠bt_öô_high_key_‰om_ªc
(

197 
xfs_båì_key
 *
key
,

198 
xfs_båì_ªc
 *
ªc
)

200 
__uöt64_t
 
off
;

201 
adj
;

203 
adj
 = 
	`be32_to_˝u
(
ªc
->
rm≠
.
rm_blockcou¡
) - 1;

205 
key
->
rm≠
.
rm_°¨tblock
 = 
ªc
->rmap.rm_startblock;

206 
	`be32_add_˝u
(&
key
->
rm≠
.
rm_°¨tblock
, 
adj
);

207 
key
->
rm≠
.
rm_ow√r
 = 
ªc
->rmap.rm_owner;

208 
key
->
rm≠
.
rm_off£t
 = 
ªc
->rmap.rm_offset;

209 i‡(
	`XFS_RMAP_NON_INODE_OWNER
(
	`be64_to_˝u
(
ªc
->
rm≠
.
rm_ow√r
)) ||

210 
	`XFS_RMAP_IS_BMBT_BLOCK
(
	`be64_to_˝u
(
ªc
->
rm≠
.
rm_off£t
)))

212 
off
 = 
	`be64_to_˝u
(
key
->
rm≠
.
rm_off£t
);

213 
off
 = (
	`XFS_RMAP_OFF
(offË+ 
adj
Ë| (of‡& ~
XFS_RMAP_OFF_MASK
);

214 
key
->
rm≠
.
rm_off£t
 = 
	`˝u_to_be64
(
off
);

215 
	}
}

217 
STATIC
 

218 
	$xfs_rm≠bt_öô_ªc_‰om_cur
(

219 
xfs_båì_cur
 *
cur
,

220 
xfs_båì_ªc
 *
ªc
)

222 
ªc
->
rm≠
.
rm_°¨tblock
 = 
	`˝u_to_be32
(
cur
->
bc_ªc
.
r
.rm_startblock);

223 
ªc
->
rm≠
.
rm_blockcou¡
 = 
	`˝u_to_be32
(
cur
->
bc_ªc
.
r
.rm_blockcount);

224 
ªc
->
rm≠
.
rm_ow√r
 = 
	`˝u_to_be64
(
cur
->
bc_ªc
.
r
.rm_owner);

225 
ªc
->
rm≠
.
rm_off£t
 = 
	`˝u_to_be64
(

226 
	`xfs_rm≠_úec_off£t_∑ck
(&
cur
->
bc_ªc
.
r
));

227 
	}
}

229 
STATIC
 

230 
	$xfs_rm≠bt_öô_±r_‰om_cur
(

231 
xfs_båì_cur
 *
cur
,

232 
xfs_båì_±r
 *
±r
)

234 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
cur
->
bc_¥iv©e
.
a
.
agbp
);

236 
	`ASSERT
(
cur
->
bc_¥iv©e
.
a
.
agno
 =
	`be32_to_˝u
(
agf
->
agf_£qno
));

237 
	`ASSERT
(
agf
->
agf_roŸs
[
cur
->
bc_bäum
] != 0);

239 
±r
->
s
 = 
agf
->
agf_roŸs
[
cur
->
bc_bäum
];

240 
	}
}

242 
STATIC
 
__öt64_t


243 
	$xfs_rm≠bt_key_diff
(

244 
xfs_båì_cur
 *
cur
,

245 
xfs_båì_key
 *
key
)

247 
xfs_rm≠_úec
 *
ªc
 = &
cur
->
bc_ªc
.
r
;

248 
xfs_rm≠_key
 *
kp
 = &
key
->
rm≠
;

249 
__u64
 
x
, 
y
;

250 
__öt64_t
 
d
;

252 
d
 = (
__öt64_t
)
	`be32_to_˝u
(
kp
->
rm_°¨tblock
Ë- 
ªc
->rm_startblock;

253 i‡(
d
)

254  
d
;

256 
x
 = 
	`be64_to_˝u
(
kp
->
rm_ow√r
);

257 
y
 = 
ªc
->
rm_ow√r
;

258 i‡(
x
 > 
y
)

260 i‡(
y
 > 
x
)

263 
x
 = 
	`XFS_RMAP_OFF
(
	`be64_to_˝u
(
kp
->
rm_off£t
));

264 
y
 = 
ªc
->
rm_off£t
;

265 i‡(
x
 > 
y
)

267 i‡(
y
 > 
x
)

270 
	}
}

272 
STATIC
 
__öt64_t


273 
	$xfs_rm≠bt_diff_two_keys
(

274 
xfs_båì_cur
 *
cur
,

275 
xfs_båì_key
 *
k1
,

276 
xfs_båì_key
 *
k2
)

278 
xfs_rm≠_key
 *
kp1
 = &
k1
->
rm≠
;

279 
xfs_rm≠_key
 *
kp2
 = &
k2
->
rm≠
;

280 
__öt64_t
 
d
;

281 
__u64
 
x
, 
y
;

283 
d
 = (
__öt64_t
)
	`be32_to_˝u
(
kp1
->
rm_°¨tblock
) -

284 
	`be32_to_˝u
(
kp2
->
rm_°¨tblock
);

285 i‡(
d
)

286  
d
;

288 
x
 = 
	`be64_to_˝u
(
kp1
->
rm_ow√r
);

289 
y
 = 
	`be64_to_˝u
(
kp2
->
rm_ow√r
);

290 i‡(
x
 > 
y
)

292 i‡(
y
 > 
x
)

295 
x
 = 
	`XFS_RMAP_OFF
(
	`be64_to_˝u
(
kp1
->
rm_off£t
));

296 
y
 = 
	`XFS_RMAP_OFF
(
	`be64_to_˝u
(
kp2
->
rm_off£t
));

297 i‡(
x
 > 
y
)

299 i‡(
y
 > 
x
)

302 
	}
}

304 
boﬁ


305 
	$xfs_rm≠bt_vîify
(

306 
xfs_buf
 *
bp
)

308 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

309 
xfs_båì_block
 *
block
 = 
	`XFS_BUF_TO_BLOCK
(
bp
);

310 
xfs_≥øg
 *
∑g
 = 
bp
->
b_∑g
;

311 
Àvñ
;

325 i‡(
block
->
bb_magic
 !
	`˝u_to_be32
(
XFS_RMAP_CRC_MAGIC
))

326  
Ál£
;

328 i‡(!
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

329  
Ál£
;

330 i‡(!
	`xfs_båì_sblock_v5hdr_vîify
(
bp
))

331  
Ál£
;

333 
Àvñ
 = 
	`be16_to_˝u
(
block
->
bb_Àvñ
);

334 i‡(
∑g
 &&Öag->
∑gf_öô
) {

335 i‡(
Àvñ
 >
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_RMAPi
])

336  
Ál£
;

337 } i‡(
Àvñ
 >
mp
->
m_rm≠_maxÀvñs
)

338  
Ál£
;

340  
	`xfs_båì_sblock_vîify
(
bp
, 
mp
->
m_rm≠_mxr
[
Àvñ
 != 0]);

341 
	}
}

344 
	$xfs_rm≠bt_ªad_vîify
(

345 
xfs_buf
 *
bp
)

347 i‡(!
	`xfs_båì_sblock_vîify_¸c
(
bp
))

348 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

349 i‡(!
	`xfs_rm≠bt_vîify
(
bp
))

350 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

352 i‡(
bp
->
b_îr‹
) {

353 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

354 
	`xfs_vîifõr_îr‹
(
bp
);

356 
	}
}

359 
	$xfs_rm≠bt_wrôe_vîify
(

360 
xfs_buf
 *
bp
)

362 i‡(!
	`xfs_rm≠bt_vîify
(
bp
)) {

363 
	`åa˚_xfs_båì_c‹ru±
(
bp
, 
_RET_IP_
);

364 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

365 
	`xfs_vîifõr_îr‹
(
bp
);

368 
	`xfs_båì_sblock_ˇlc_¸c
(
bp
);

370 
	}
}

372 c⁄° 
xfs_buf_›s
 
	gxfs_rm≠bt_buf_›s
 = {

373 .
«me
 = "xfs_rmapbt",

374 .
	gvîify_ªad
 = 
xfs_rm≠bt_ªad_vîify
,

375 .
	gvîify_wrôe
 = 
xfs_rm≠bt_wrôe_vîify
,

378 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

379 
STATIC
 

380 
	$xfs_rm≠bt_keys_ö‹dî
(

381 
xfs_båì_cur
 *
cur
,

382 
xfs_båì_key
 *
k1
,

383 
xfs_båì_key
 *
k2
)

385 
__uöt32_t
 
x
;

386 
__uöt32_t
 
y
;

387 
__uöt64_t
 
a
;

388 
__uöt64_t
 
b
;

390 
x
 = 
	`be32_to_˝u
(
k1
->
rm≠
.
rm_°¨tblock
);

391 
y
 = 
	`be32_to_˝u
(
k2
->
rm≠
.
rm_°¨tblock
);

392 i‡(
x
 < 
y
)

394 i‡(
x
 > 
y
)

396 
a
 = 
	`be64_to_˝u
(
k1
->
rm≠
.
rm_ow√r
);

397 
b
 = 
	`be64_to_˝u
(
k2
->
rm≠
.
rm_ow√r
);

398 i‡(
a
 < 
b
)

400 i‡(
a
 > 
b
)

402 
a
 = 
	`XFS_RMAP_OFF
(
	`be64_to_˝u
(
k1
->
rm≠
.
rm_off£t
));

403 
b
 = 
	`XFS_RMAP_OFF
(
	`be64_to_˝u
(
k2
->
rm≠
.
rm_off£t
));

404 i‡(
a
 <
b
)

407 
	}
}

409 
STATIC
 

410 
	$xfs_rm≠bt_ªcs_ö‹dî
(

411 
xfs_båì_cur
 *
cur
,

412 
xfs_båì_ªc
 *
r1
,

413 
xfs_båì_ªc
 *
r2
)

415 
__uöt32_t
 
x
;

416 
__uöt32_t
 
y
;

417 
__uöt64_t
 
a
;

418 
__uöt64_t
 
b
;

420 
x
 = 
	`be32_to_˝u
(
r1
->
rm≠
.
rm_°¨tblock
);

421 
y
 = 
	`be32_to_˝u
(
r2
->
rm≠
.
rm_°¨tblock
);

422 i‡(
x
 < 
y
)

424 i‡(
x
 > 
y
)

426 
a
 = 
	`be64_to_˝u
(
r1
->
rm≠
.
rm_ow√r
);

427 
b
 = 
	`be64_to_˝u
(
r2
->
rm≠
.
rm_ow√r
);

428 i‡(
a
 < 
b
)

430 i‡(
a
 > 
b
)

432 
a
 = 
	`XFS_RMAP_OFF
(
	`be64_to_˝u
(
r1
->
rm≠
.
rm_off£t
));

433 
b
 = 
	`XFS_RMAP_OFF
(
	`be64_to_˝u
(
r2
->
rm≠
.
rm_off£t
));

434 i‡(
a
 <
b
)

437 
	}
}

440 c⁄° 
xfs_båì_›s
 
	gxfs_rm≠bt_›s
 = {

441 .
ªc_Àn
 = (
xfs_rm≠_ªc
),

442 .
	gkey_Àn
 = 2 * (
xfs_rm≠_key
),

444 .
	gdup_curs‹
 = 
xfs_rm≠bt_dup_curs‹
,

445 .
	g£t_roŸ
 = 
xfs_rm≠bt_£t_roŸ
,

446 .
	gÆloc_block
 = 
xfs_rm≠bt_Æloc_block
,

447 .
	g‰ì_block
 = 
xfs_rm≠bt_‰ì_block
,

448 .
	ggë_möªcs
 = 
xfs_rm≠bt_gë_möªcs
,

449 .
	ggë_maxªcs
 = 
xfs_rm≠bt_gë_maxªcs
,

450 .
	göô_key_‰om_ªc
 = 
xfs_rm≠bt_öô_key_‰om_ªc
,

451 .
	göô_high_key_‰om_ªc
 = 
xfs_rm≠bt_öô_high_key_‰om_ªc
,

452 .
	göô_ªc_‰om_cur
 = 
xfs_rm≠bt_öô_ªc_‰om_cur
,

453 .
	göô_±r_‰om_cur
 = 
xfs_rm≠bt_öô_±r_‰om_cur
,

454 .
	gkey_diff
 = 
xfs_rm≠bt_key_diff
,

455 .
	gbuf_›s
 = &
xfs_rm≠bt_buf_›s
,

456 .
	gdiff_two_keys
 = 
xfs_rm≠bt_diff_two_keys
,

457 #i‡
deföed
(
DEBUG
Ë|| deföed(
XFS_WARN
)

458 .
	gkeys_ö‹dî
 = 
xfs_rm≠bt_keys_ö‹dî
,

459 .
	gªcs_ö‹dî
 = 
xfs_rm≠bt_ªcs_ö‹dî
,

466 
xfs_båì_cur
 *

467 
	$xfs_rm≠bt_öô_curs‹
(

468 
xfs_mou¡
 *
mp
,

469 
xfs_å™s
 *
ç
,

470 
xfs_buf
 *
agbp
,

471 
xfs_agnumbî_t
 
agno
)

473 
xfs_agf
 *
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

474 
xfs_båì_cur
 *
cur
;

476 
cur
 = 
	`kmem_z⁄e_zÆloc
(
xfs_båì_cur_z⁄e
, 
KM_NOFS
);

477 
cur
->
bc_ç
 = 
ç
;

478 
cur
->
bc_mp
 = 
mp
;

480 
cur
->
bc_bäum
 = 
XFS_BTNUM_RMAP
;

481 
cur
->
bc_Êags
 = 
XFS_BTREE_CRC_BLOCKS
 | 
XFS_BTREE_OVERLAPPING
;

482 
cur
->
bc_blocklog
 = 
mp
->
m_sb
.
sb_blocklog
;

483 
cur
->
bc_›s
 = &
xfs_rm≠bt_›s
;

484 
cur
->
bc_∆evñs
 = 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_RMAP
]);

485 
cur
->
bc_°©off
 = 
	`XFS_STATS_CALC_INDEX
(
xs_rm≠_2
);

487 
cur
->
bc_¥iv©e
.
a
.
agbp
 =ágbp;

488 
cur
->
bc_¥iv©e
.
a
.
agno
 =ágno;

490  
cur
;

491 
	}
}

497 
	$xfs_rm≠bt_maxªcs
(

498 
xfs_mou¡
 *
mp
,

499 
blockÀn
,

500 
Àaf
)

502 
blockÀn
 -
XFS_RMAP_BLOCK_LEN
;

504 i‡(
Àaf
)

505  
blockÀn
 / (
xfs_rm≠_ªc
);

506  
blockÀn
 /

507 (2 * (
xfs_rm≠_key
Ë+ (
xfs_rm≠_±r_t
));

508 
	}
}

512 
	$xfs_rm≠bt_compuã_maxÀvñs
(

513 
xfs_mou¡
 *
mp
)

530 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

531 
mp
->
m_rm≠_maxÀvñs
 = 
XFS_BTREE_MAXLEVELS
;

533 
mp
->
m_rm≠_maxÀvñs
 = 
	`xfs_båì_compuã_maxÀvñs
(mp,

534 
mp
->
m_rm≠_mƒ
, mp->
m_sb
.
sb_agblocks
);

535 
	}
}

538 
xfs_exéí_t


539 
	$xfs_rm≠bt_ˇlc_size
(

540 
xfs_mou¡
 *
mp
,

541 
Àn
)

543  
	`xfs_båì_ˇlc_size
(
mp
, mp->
m_rm≠_mƒ
, 
Àn
);

544 
	}
}

549 
xfs_exéí_t


550 
	$xfs_rm≠bt_max_size
(

551 
xfs_mou¡
 *
mp
,

552 
xfs_agblock_t
 
agblocks
)

555 i‡(
mp
->
m_rm≠_mxr
[0] == 0)

558  
	`xfs_rm≠bt_ˇlc_size
(
mp
, 
agblocks
);

559 
	}
}

565 
	$xfs_rm≠bt_ˇlc_ª£rves
(

566 
xfs_mou¡
 *
mp
,

567 
xfs_agnumbî_t
 
agno
,

568 
xfs_exéí_t
 *
ask
,

569 
xfs_exéí_t
 *
u£d
)

571 
xfs_buf
 *
agbp
;

572 
xfs_agf
 *
agf
;

573 
xfs_agblock_t
 
agblocks
;

574 
xfs_exéí_t
 
åì_Àn
;

575 
îr‹
;

577 i‡(!
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

580 
îr‹
 = 
	`xfs_Æloc_ªad_agf
(
mp
, 
NULL
, 
agno
, 0, &
agbp
);

581 i‡(
îr‹
)

582  
îr‹
;

584 
agf
 = 
	`XFS_BUF_TO_AGF
(
agbp
);

585 
agblocks
 = 
	`be32_to_˝u
(
agf
->
agf_Àngth
);

586 
åì_Àn
 = 
	`be32_to_˝u
(
agf
->
agf_rm≠_blocks
);

587 
	`xfs_buf_ªl£
(
agbp
);

590 *
ask
 +
	`max
(
agblocks
 / 100, 
	`xfs_rm≠bt_max_size
(
mp
,ágblocks));

591 *
u£d
 +
åì_Àn
;

593  
îr‹
;

594 
	}
}

	@libxfs/xfs_rmap_btree.h

18 #i‚de‡
__XFS_RMAP_BTREE_H__


19 
	#__XFS_RMAP_BTREE_H__


	)

21 
	gxfs_buf
;

22 
	gxfs_båì_cur
;

23 
	gxfs_mou¡
;

26 
	#XFS_RMAP_BLOCK_LEN
 
XFS_BTREE_SBLOCK_CRC_LEN


	)

33 
	#XFS_RMAP_REC_ADDR
(
block
, 
ödex
) \

34 ((
xfs_rm≠_ªc
 *) \

35 ((*)(
block
Ë+ 
XFS_RMAP_BLOCK_LEN
 + \

36 (((
ödex
Ë- 1Ë* (
xfs_rm≠_ªc
))))

	)

38 
	#XFS_RMAP_KEY_ADDR
(
block
, 
ödex
) \

39 ((
xfs_rm≠_key
 *) \

40 ((*)(
block
Ë+ 
XFS_RMAP_BLOCK_LEN
 + \

41 ((
ödex
Ë- 1Ë* 2 * (
xfs_rm≠_key
)))

	)

43 
	#XFS_RMAP_HIGH_KEY_ADDR
(
block
, 
ödex
) \

44 ((
xfs_rm≠_key
 *) \

45 ((*)(
block
Ë+ 
XFS_RMAP_BLOCK_LEN
 + \

46 (
xfs_rm≠_key
) + \

47 ((
ödex
Ë- 1Ë* 2 * (
xfs_rm≠_key
)))

	)

49 
	#XFS_RMAP_PTR_ADDR
(
block
, 
ödex
, 
maxªcs
) \

50 ((
xfs_rm≠_±r_t
 *) \

51 ((*)(
block
Ë+ 
XFS_RMAP_BLOCK_LEN
 + \

52 (
maxªcs
Ë* 2 * (
xfs_rm≠_key
) + \

53 ((
ödex
Ë- 1Ë* (
xfs_rm≠_±r_t
)))

	)

55 
xfs_båì_cur
 *
xfs_rm≠bt_öô_curs‹
(
xfs_mou¡
 *
mp
,

56 
xfs_å™s
 *
ç
, 
xfs_buf
 *
bp
,

57 
xfs_agnumbî_t
 
agno
);

58 
xfs_rm≠bt_maxªcs
(
xfs_mou¡
 *
mp
, 
blockÀn
, 
Àaf
);

59 
xfs_rm≠bt_compuã_maxÀvñs
(
xfs_mou¡
 *
mp
);

61 
xfs_exéí_t
 
xfs_rm≠bt_ˇlc_size
(
xfs_mou¡
 *
mp
,

62 
Àn
);

63 
xfs_exéí_t
 
xfs_rm≠bt_max_size
(
xfs_mou¡
 *
mp
,

64 
xfs_agblock_t
 
agblocks
);

66 
xfs_rm≠bt_ˇlc_ª£rves
(
xfs_mou¡
 *
mp
,

67 
xfs_agnumbî_t
 
agno
, 
xfs_exéí_t
 *
ask
, xfs_exéí_à*
u£d
);

	@libxfs/xfs_rtbitmap.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_bô.h
"

25 
	~"xfs_mou¡.h
"

26 
	~"xfs_öode.h
"

27 
	~"xfs_bm≠.h
"

28 
	~"xfs_bm≠_båì.h
"

29 
	~"xfs_Æloc.h
"

30 
	~"xfs_å™s.h
"

31 
	~"xfs_å™s_•a˚.h
"

32 
	~"xfs_åa˚.h
"

45 
	$xfs_πbuf_vîify_ªad
(

46 
xfs_buf
 *
bp
)

49 
	}
}

52 
	$xfs_πbuf_vîify_wrôe
(

53 
xfs_buf
 *
bp
)

56 
	}
}

58 c⁄° 
xfs_buf_›s
 
	gxfs_πbuf_›s
 = {

59 .
«me
 = "rtbuf",

60 .
	gvîify_ªad
 = 
xfs_πbuf_vîify_ªad
,

61 .
	gvîify_wrôe
 = 
xfs_πbuf_vîify_wrôe
,

69 
	$xfs_πbuf_gë
(

70 
xfs_mou¡_t
 *
mp
,

71 
xfs_å™s_t
 *
ç
,

72 
xfs_πblock_t
 
block
,

73 
issum
,

74 
xfs_buf_t
 **
bµ
)

76 
xfs_buf_t
 *
bp
;

77 
xfs_öode_t
 *
ù
;

78 
xfs_bmbt_úec_t
 
m≠
;

79 
nm≠
 = 1;

80 
îr‹
;

82 
ù
 = 
issum
 ? 
mp
->
m_rsumù
 : mp->
m_rbmù
;

84 
îr‹
 = 
	`xfs_bm≠i_ªad
(
ù
, 
block
, 1, &
m≠
, &
nm≠
, 
XFS_DATA_FORK
);

85 i‡(
îr‹
)

86  
îr‹
;

88 
	`ASSERT
(
m≠
.
br_°¨tblock
 !
NULLFSBLOCK
);

89 
îr‹
 = 
	`xfs_å™s_ªad_buf
(
mp
, 
ç
, mp->
m_ddev_èrgp
,

90 
	`XFS_FSB_TO_DADDR
(
mp
, 
m≠
.
br_°¨tblock
),

91 
mp
->
m_bsize
, 0, &
bp
, &
xfs_πbuf_›s
);

92 i‡(
îr‹
)

93  
îr‹
;

95 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
issum
 ? 
XFS_BLFT_RTSUMMARY_BUF


96 : 
XFS_BLFT_RTBITMAP_BUF
);

97 *
bµ
 = 
bp
;

99 
	}
}

106 
	$xfs_πföd_back
(

107 
xfs_mou¡_t
 *
mp
,

108 
xfs_å™s_t
 *
ç
,

109 
xfs_πblock_t
 
°¨t
,

110 
xfs_πblock_t
 
limô
,

111 
xfs_πblock_t
 *
πblock
)

113 
xfs_πw‹d_t
 *
b
;

114 
bô
;

115 
xfs_πblock_t
 
block
;

116 
xfs_buf_t
 *
bp
;

117 
xfs_πw‹d_t
 *
buÂ
;

118 
îr‹
;

119 
xfs_πblock_t
 
fú°bô
;

120 
xfs_πblock_t
 
i
;

121 
xfs_πblock_t
 
Àn
;

122 
xfs_πw‹d_t
 
mask
;

123 
xfs_πw‹d_t
 
w™t
;

124 
xfs_πw‹d_t
 
wdiff
;

125 
w‹d
;

130 
block
 = 
	`XFS_BITTOBLOCK
(
mp
, 
°¨t
);

131 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, 
block
, 0, &
bp
);

132 i‡(
îr‹
) {

133  
îr‹
;

135 
buÂ
 = 
bp
->
b_addr
;

139 
w‹d
 = 
	`XFS_BITTOWORD
(
mp
, 
°¨t
);

140 
b
 = &
buÂ
[
w‹d
];

141 
bô
 = ()(
°¨t
 & (
XFS_NBWORD
 - 1));

142 
Àn
 = 
°¨t
 - 
limô
 + 1;

147 
w™t
 = (*
b
 & ((
xfs_πw‹d_t
)1 << 
bô
)) ? -1 : 0;

152 i‡(
bô
 < 
XFS_NBWORD
 - 1) {

157 
fú°bô
 = 
	`XFS_RTMAX
((
xfs_§tblock_t
)(
bô
 - 
Àn
 + 1), 0);

158 
mask
 = (((
xfs_πw‹d_t
)1 << (
bô
 - 
fú°bô
 + 1)) - 1) <<

159 
fú°bô
;

164 i‡((
wdiff
 = (*
b
 ^ 
w™t
Ë& 
mask
)) {

168 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

169 
i
 = 
bô
 - 
	`XFS_RTHIBIT
(
wdiff
);

170 *
πblock
 = 
°¨t
 - 
i
 + 1;

173 
i
 = 
bô
 - 
fú°bô
 + 1;

178 i‡(--
w‹d
 =-1 && 
i
 < 
Àn
) {

182 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

183 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, --
block
, 0, &
bp
);

184 i‡(
îr‹
) {

185  
îr‹
;

187 
buÂ
 = 
bp
->
b_addr
;

188 
w‹d
 = 
	`XFS_BLOCKWMASK
(
mp
);

189 
b
 = &
buÂ
[
w‹d
];

194 
b
--;

200 
i
 = 0;

206 
Àn
 - 
i
 >
XFS_NBWORD
) {

210 i‡((
wdiff
 = *
b
 ^ 
w™t
)) {

214 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

215 
i
 +
XFS_NBWORD
 - 1 - 
	`XFS_RTHIBIT
(
wdiff
);

216 *
πblock
 = 
°¨t
 - 
i
 + 1;

219 
i
 +
XFS_NBWORD
;

224 i‡(--
w‹d
 =-1 && 
i
 < 
Àn
) {

228 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

229 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, --
block
, 0, &
bp
);

230 i‡(
îr‹
) {

231  
îr‹
;

233 
buÂ
 = 
bp
->
b_addr
;

234 
w‹d
 = 
	`XFS_BLOCKWMASK
(
mp
);

235 
b
 = &
buÂ
[
w‹d
];

240 
b
--;

247 i‡(
Àn
 - 
i
) {

252 
fú°bô
 = 
XFS_NBWORD
 - (
Àn
 - 
i
);

253 
mask
 = (((
xfs_πw‹d_t
)1 << (
Àn
 - 
i
)Ë- 1Ë<< 
fú°bô
;

257 i‡((
wdiff
 = (*
b
 ^ 
w™t
Ë& 
mask
)) {

261 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

262 
i
 +
XFS_NBWORD
 - 1 - 
	`XFS_RTHIBIT
(
wdiff
);

263 *
πblock
 = 
°¨t
 - 
i
 + 1;

266 
i
 = 
Àn
;

271 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

272 *
πblock
 = 
°¨t
 - 
i
 + 1;

274 
	}
}

281 
	$xfs_πföd_f‹w
(

282 
xfs_mou¡_t
 *
mp
,

283 
xfs_å™s_t
 *
ç
,

284 
xfs_πblock_t
 
°¨t
,

285 
xfs_πblock_t
 
limô
,

286 
xfs_πblock_t
 *
πblock
)

288 
xfs_πw‹d_t
 *
b
;

289 
bô
;

290 
xfs_πblock_t
 
block
;

291 
xfs_buf_t
 *
bp
;

292 
xfs_πw‹d_t
 *
buÂ
;

293 
îr‹
;

294 
xfs_πblock_t
 
i
;

295 
xfs_πblock_t
 
œ°bô
;

296 
xfs_πblock_t
 
Àn
;

297 
xfs_πw‹d_t
 
mask
;

298 
xfs_πw‹d_t
 
w™t
;

299 
xfs_πw‹d_t
 
wdiff
;

300 
w‹d
;

305 
block
 = 
	`XFS_BITTOBLOCK
(
mp
, 
°¨t
);

306 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, 
block
, 0, &
bp
);

307 i‡(
îr‹
) {

308  
îr‹
;

310 
buÂ
 = 
bp
->
b_addr
;

314 
w‹d
 = 
	`XFS_BITTOWORD
(
mp
, 
°¨t
);

315 
b
 = &
buÂ
[
w‹d
];

316 
bô
 = ()(
°¨t
 & (
XFS_NBWORD
 - 1));

317 
Àn
 = 
limô
 - 
°¨t
 + 1;

322 
w™t
 = (*
b
 & ((
xfs_πw‹d_t
)1 << 
bô
)) ? -1 : 0;

327 i‡(
bô
) {

332 
œ°bô
 = 
	`XFS_RTMIN
(
bô
 + 
Àn
, 
XFS_NBWORD
);

333 
mask
 = (((
xfs_πw‹d_t
)1 << (
œ°bô
 - 
bô
)) - 1) << bit;

338 i‡((
wdiff
 = (*
b
 ^ 
w™t
Ë& 
mask
)) {

342 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

343 
i
 = 
	`XFS_RTLOBIT
(
wdiff
Ë- 
bô
;

344 *
πblock
 = 
°¨t
 + 
i
 - 1;

347 
i
 = 
œ°bô
 - 
bô
;

352 i‡(++
w‹d
 =
	`XFS_BLOCKWSIZE
(
mp
Ë&& 
i
 < 
Àn
) {

356 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

357 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, ++
block
, 0, &
bp
);

358 i‡(
îr‹
) {

359  
îr‹
;

361 
b
 = 
buÂ
 = 
bp
->
b_addr
;

362 
w‹d
 = 0;

367 
b
++;

373 
i
 = 0;

379 
Àn
 - 
i
 >
XFS_NBWORD
) {

383 i‡((
wdiff
 = *
b
 ^ 
w™t
)) {

387 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

388 
i
 +
	`XFS_RTLOBIT
(
wdiff
);

389 *
πblock
 = 
°¨t
 + 
i
 - 1;

392 
i
 +
XFS_NBWORD
;

397 i‡(++
w‹d
 =
	`XFS_BLOCKWSIZE
(
mp
Ë&& 
i
 < 
Àn
) {

401 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

402 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, ++
block
, 0, &
bp
);

403 i‡(
îr‹
) {

404  
îr‹
;

406 
b
 = 
buÂ
 = 
bp
->
b_addr
;

407 
w‹d
 = 0;

412 
b
++;

419 i‡((
œ°bô
 = 
Àn
 - 
i
)) {

423 
mask
 = ((
xfs_πw‹d_t
)1 << 
œ°bô
) - 1;

427 i‡((
wdiff
 = (*
b
 ^ 
w™t
Ë& 
mask
)) {

431 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

432 
i
 +
	`XFS_RTLOBIT
(
wdiff
);

433 *
πblock
 = 
°¨t
 + 
i
 - 1;

436 
i
 = 
Àn
;

441 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

442 *
πblock
 = 
°¨t
 + 
i
 - 1;

444 
	}
}

456 
	$xfs_πmodify_summ¨y_öt
(

457 
xfs_mou¡_t
 *
mp
,

458 
xfs_å™s_t
 *
ç
,

459 
log
,

460 
xfs_πblock_t
 
bbno
,

461 
dñè
,

462 
xfs_buf_t
 **
rbµ
,

463 
xfs_fsblock_t
 *
rsb
,

464 
xfs_sumöfo_t
 *
sum
)

466 
xfs_buf_t
 *
bp
;

467 
îr‹
;

468 
xfs_fsblock_t
 
sb
;

469 
so
;

470 
xfs_sumöfo_t
 *
•
;

475 
so
 = 
	`XFS_SUMOFFS
(
mp
, 
log
, 
bbno
);

479 
sb
 = 
	`XFS_SUMOFFSTOBLOCK
(
mp
, 
so
);

483 i‡(*
rbµ
 && *
rsb
 =
sb
)

484 
bp
 = *
rbµ
;

492 i‡(*
rbµ
)

493 
	`xfs_å™s_bªl£
(
ç
, *
rbµ
);

494 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, 
sb
, 1, &
bp
);

495 i‡(
îr‹
) {

496  
îr‹
;

501 *
rbµ
 = 
bp
;

502 *
rsb
 = 
sb
;

507 
•
 = 
	`XFS_SUMPTR
(
mp
, 
bp
, 
so
);

508 i‡(
dñè
) {

509 
uöt
 
fú°
 = (uöt)((*)
•
 - (*)
bp
->
b_addr
);

511 *
•
 +
dñè
;

512 
	`xfs_å™s_log_buf
(
ç
, 
bp
, 
fú°
, fú° + (*
•
) - 1);

514 i‡(
sum
)

515 *
sum
 = *
•
;

517 
	}
}

520 
	$xfs_πmodify_summ¨y
(

521 
xfs_mou¡_t
 *
mp
,

522 
xfs_å™s_t
 *
ç
,

523 
log
,

524 
xfs_πblock_t
 
bbno
,

525 
dñè
,

526 
xfs_buf_t
 **
rbµ
,

527 
xfs_fsblock_t
 *
rsb
)

529  
	`xfs_πmodify_summ¨y_öt
(
mp
, 
ç
, 
log
, 
bbno
,

530 
dñè
, 
rbµ
, 
rsb
, 
NULL
);

531 
	}
}

538 
	$xfs_πmodify_ønge
(

539 
xfs_mou¡_t
 *
mp
,

540 
xfs_å™s_t
 *
ç
,

541 
xfs_πblock_t
 
°¨t
,

542 
xfs_exéí_t
 
Àn
,

543 
vÆ
)

545 
xfs_πw‹d_t
 *
b
;

546 
bô
;

547 
xfs_πblock_t
 
block
;

548 
xfs_buf_t
 *
bp
;

549 
xfs_πw‹d_t
 *
buÂ
;

550 
îr‹
;

551 
xfs_πw‹d_t
 *
fú°
;

552 
i
;

553 
œ°bô
;

554 
xfs_πw‹d_t
 
mask
;

555 
w‹d
;

560 
block
 = 
	`XFS_BITTOBLOCK
(
mp
, 
°¨t
);

564 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, 
block
, 0, &
bp
);

565 i‡(
îr‹
) {

566  
îr‹
;

568 
buÂ
 = 
bp
->
b_addr
;

572 
w‹d
 = 
	`XFS_BITTOWORD
(
mp
, 
°¨t
);

573 
fú°
 = 
b
 = &
buÂ
[
w‹d
];

574 
bô
 = ()(
°¨t
 & (
XFS_NBWORD
 - 1));

578 
vÆ
 = -val;

583 i‡(
bô
) {

587 
œ°bô
 = 
	`XFS_RTMIN
(
bô
 + 
Àn
, 
XFS_NBWORD
);

588 
mask
 = (((
xfs_πw‹d_t
)1 << (
œ°bô
 - 
bô
)) - 1) << bit;

592 i‡(
vÆ
)

593 *
b
 |
mask
;

595 *
b
 &~
mask
;

596 
i
 = 
œ°bô
 - 
bô
;

601 i‡(++
w‹d
 =
	`XFS_BLOCKWSIZE
(
mp
Ë&& 
i
 < 
Àn
) {

606 
	`xfs_å™s_log_buf
(
ç
, 
bp
,

607 (
uöt
)((*)
fú°
 - (*)
buÂ
),

608 (
uöt
)((*)
b
 - (*)
buÂ
));

609 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, ++
block
, 0, &
bp
);

610 i‡(
îr‹
) {

611  
îr‹
;

613 
fú°
 = 
b
 = 
buÂ
 = 
bp
->
b_addr
;

614 
w‹d
 = 0;

619 
b
++;

625 
i
 = 0;

631 
Àn
 - 
i
 >
XFS_NBWORD
) {

635 *
b
 = 
vÆ
;

636 
i
 +
XFS_NBWORD
;

641 i‡(++
w‹d
 =
	`XFS_BLOCKWSIZE
(
mp
Ë&& 
i
 < 
Àn
) {

646 
	`xfs_å™s_log_buf
(
ç
, 
bp
,

647 (
uöt
)((*)
fú°
 - (*)
buÂ
),

648 (
uöt
)((*)
b
 - (*)
buÂ
));

649 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, ++
block
, 0, &
bp
);

650 i‡(
îr‹
) {

651  
îr‹
;

653 
fú°
 = 
b
 = 
buÂ
 = 
bp
->
b_addr
;

654 
w‹d
 = 0;

659 
b
++;

666 i‡((
œ°bô
 = 
Àn
 - 
i
)) {

670 
bô
 = 0;

671 
mask
 = ((
xfs_πw‹d_t
)1 << 
œ°bô
) - 1;

675 i‡(
vÆ
)

676 *
b
 |
mask
;

678 *
b
 &~
mask
;

679 
b
++;

684 i‡(
b
 > 
fú°
)

685 
	`xfs_å™s_log_buf
(
ç
, 
bp
, (
uöt
)((*)
fú°
 - (*)
buÂ
),

686 (
uöt
)((*)
b
 - (*)
buÂ
 - 1));

688 
	}
}

695 
	$xfs_π‰ì_ønge
(

696 
xfs_mou¡_t
 *
mp
,

697 
xfs_å™s_t
 *
ç
,

698 
xfs_πblock_t
 
°¨t
,

699 
xfs_exéí_t
 
Àn
,

700 
xfs_buf_t
 **
rbµ
,

701 
xfs_fsblock_t
 *
rsb
)

703 
xfs_πblock_t
 
íd
;

704 
îr‹
;

705 
xfs_πblock_t
 
po°block
;

706 
xfs_πblock_t
 
¥eblock
;

708 
íd
 = 
°¨t
 + 
Àn
 - 1;

712 
îr‹
 = 
	`xfs_πmodify_ønge
(
mp
, 
ç
, 
°¨t
, 
Àn
, 1);

713 i‡(
îr‹
) {

714  
îr‹
;

721 
îr‹
 = 
	`xfs_πföd_back
(
mp
, 
ç
, 
°¨t
, 0, &
¥eblock
);

722 i‡(
îr‹
) {

723  
îr‹
;

728 
îr‹
 = 
	`xfs_πföd_f‹w
(
mp
, 
ç
, 
íd
, mp->
m_sb
.
sb_ªxã¡s
 - 1,

729 &
po°block
);

730 i‡(
îr‹
)

731  
îr‹
;

736 i‡(
¥eblock
 < 
°¨t
) {

737 
îr‹
 = 
	`xfs_πmodify_summ¨y
(
mp
, 
ç
,

738 
	`XFS_RTBLOCKLOG
(
°¨t
 - 
¥eblock
),

739 
	`XFS_BITTOBLOCK
(
mp
, 
¥eblock
), -1, 
rbµ
, 
rsb
);

740 i‡(
îr‹
) {

741  
îr‹
;

748 i‡(
po°block
 > 
íd
) {

749 
îr‹
 = 
	`xfs_πmodify_summ¨y
(
mp
, 
ç
,

750 
	`XFS_RTBLOCKLOG
(
po°block
 - 
íd
),

751 
	`XFS_BITTOBLOCK
(
mp
, 
íd
 + 1), -1, 
rbµ
, 
rsb
);

752 i‡(
îr‹
) {

753  
îr‹
;

760 
îr‹
 = 
	`xfs_πmodify_summ¨y
(
mp
, 
ç
,

761 
	`XFS_RTBLOCKLOG
(
po°block
 + 1 - 
¥eblock
),

762 
	`XFS_BITTOBLOCK
(
mp
, 
¥eblock
), 1, 
rbµ
, 
rsb
);

763  
îr‹
;

764 
	}
}

771 
	$xfs_πcheck_ønge
(

772 
xfs_mou¡_t
 *
mp
,

773 
xfs_å™s_t
 *
ç
,

774 
xfs_πblock_t
 
°¨t
,

775 
xfs_exéí_t
 
Àn
,

776 
vÆ
,

777 
xfs_πblock_t
 *
√w
,

778 *
°©
)

780 
xfs_πw‹d_t
 *
b
;

781 
bô
;

782 
xfs_πblock_t
 
block
;

783 
xfs_buf_t
 *
bp
;

784 
xfs_πw‹d_t
 *
buÂ
;

785 
îr‹
;

786 
xfs_πblock_t
 
i
;

787 
xfs_πblock_t
 
œ°bô
;

788 
xfs_πw‹d_t
 
mask
;

789 
xfs_πw‹d_t
 
wdiff
;

790 
w‹d
;

795 
block
 = 
	`XFS_BITTOBLOCK
(
mp
, 
°¨t
);

799 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, 
block
, 0, &
bp
);

800 i‡(
îr‹
) {

801  
îr‹
;

803 
buÂ
 = 
bp
->
b_addr
;

807 
w‹d
 = 
	`XFS_BITTOWORD
(
mp
, 
°¨t
);

808 
b
 = &
buÂ
[
w‹d
];

809 
bô
 = ()(
°¨t
 & (
XFS_NBWORD
 - 1));

813 
vÆ
 = -val;

818 i‡(
bô
) {

822 
œ°bô
 = 
	`XFS_RTMIN
(
bô
 + 
Àn
, 
XFS_NBWORD
);

826 
mask
 = (((
xfs_πw‹d_t
)1 << (
œ°bô
 - 
bô
)) - 1) << bit;

830 i‡((
wdiff
 = (*
b
 ^ 
vÆ
Ë& 
mask
)) {

834 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

835 
i
 = 
	`XFS_RTLOBIT
(
wdiff
Ë- 
bô
;

836 *
√w
 = 
°¨t
 + 
i
;

837 *
°©
 = 0;

840 
i
 = 
œ°bô
 - 
bô
;

845 i‡(++
w‹d
 =
	`XFS_BLOCKWSIZE
(
mp
Ë&& 
i
 < 
Àn
) {

849 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

850 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, ++
block
, 0, &
bp
);

851 i‡(
îr‹
) {

852  
îr‹
;

854 
b
 = 
buÂ
 = 
bp
->
b_addr
;

855 
w‹d
 = 0;

860 
b
++;

866 
i
 = 0;

872 
Àn
 - 
i
 >
XFS_NBWORD
) {

876 i‡((
wdiff
 = *
b
 ^ 
vÆ
)) {

880 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

881 
i
 +
	`XFS_RTLOBIT
(
wdiff
);

882 *
√w
 = 
°¨t
 + 
i
;

883 *
°©
 = 0;

886 
i
 +
XFS_NBWORD
;

891 i‡(++
w‹d
 =
	`XFS_BLOCKWSIZE
(
mp
Ë&& 
i
 < 
Àn
) {

895 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

896 
îr‹
 = 
	`xfs_πbuf_gë
(
mp
, 
ç
, ++
block
, 0, &
bp
);

897 i‡(
îr‹
) {

898  
îr‹
;

900 
b
 = 
buÂ
 = 
bp
->
b_addr
;

901 
w‹d
 = 0;

906 
b
++;

913 i‡((
œ°bô
 = 
Àn
 - 
i
)) {

917 
mask
 = ((
xfs_πw‹d_t
)1 << 
œ°bô
) - 1;

921 i‡((
wdiff
 = (*
b
 ^ 
vÆ
Ë& 
mask
)) {

925 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

926 
i
 +
	`XFS_RTLOBIT
(
wdiff
);

927 *
√w
 = 
°¨t
 + 
i
;

928 *
°©
 = 0;

931 
i
 = 
Àn
;

936 
	`xfs_å™s_bªl£
(
ç
, 
bp
);

937 *
√w
 = 
°¨t
 + 
i
;

938 *
°©
 = 1;

940 
	}
}

942 #ifde‡
DEBUG


946 
STATIC
 

947 
	$xfs_πcheck_Æloc_ønge
(

948 
xfs_mou¡_t
 *
mp
,

949 
xfs_å™s_t
 *
ç
,

950 
xfs_πblock_t
 
bno
,

951 
xfs_exéí_t
 
Àn
)

953 
xfs_πblock_t
 
√w
;

954 
°©
;

955 
îr‹
;

957 
îr‹
 = 
	`xfs_πcheck_ønge
(
mp
, 
ç
, 
bno
, 
Àn
, 0, &
√w
, &
°©
);

958 i‡(
îr‹
)

959  
îr‹
;

960 
	`ASSERT
(
°©
);

962 
	}
}

964 
	#xfs_πcheck_Æloc_ønge
(
m
,
t
,
b
,
l
Ë(0)

	)

971 
	$xfs_π‰ì_exã¡
(

972 
xfs_å™s_t
 *
ç
,

973 
xfs_πblock_t
 
bno
,

974 
xfs_exéí_t
 
Àn
)

976 
îr‹
;

977 
xfs_mou¡_t
 *
mp
;

978 
xfs_fsblock_t
 
sb
;

979 
xfs_buf_t
 *
sumbp
 = 
NULL
;

981 
mp
 = 
ç
->
t_mou¡p
;

983 
	`ASSERT
(
mp
->
m_rbmù
->
i_ôemp
 !
NULL
);

984 
	`ASSERT
(
	`xfs_isûocked
(
mp
->
m_rbmù
, 
XFS_ILOCK_EXCL
));

986 
îr‹
 = 
	`xfs_πcheck_Æloc_ønge
(
mp
, 
ç
, 
bno
, 
Àn
);

987 i‡(
îr‹
)

988  
îr‹
;

993 
îr‹
 = 
	`xfs_π‰ì_ønge
(
mp
, 
ç
, 
bno
, 
Àn
, &
sumbp
, &
sb
);

994 i‡(
îr‹
) {

995  
îr‹
;

1000 
	`xfs_å™s_mod_sb
(
ç
, 
XFS_TRANS_SB_FREXTENTS
, ()
Àn
);

1005 i‡(
ç
->
t_‰exã¡s_dñè
 + 
mp
->
m_sb
.
sb_‰exã¡s
 ==

1006 
mp
->
m_sb
.
sb_ªxã¡s
) {

1007 i‡(!(
mp
->
m_rbmù
->
i_d
.
di_Êags
 & 
XFS_DIFLAG_NEWRTBM
))

1008 
mp
->
m_rbmù
->
i_d
.
di_Êags
 |
XFS_DIFLAG_NEWRTBM
;

1009 *(
__uöt64_t
 *)&
	`VFS_I
(
mp
->
m_rbmù
)->
i_©ime
 = 0;

1010 
	`xfs_å™s_log_öode
(
ç
, 
mp
->
m_rbmù
, 
XFS_ILOG_CORE
);

1013 
	}
}

	@libxfs/xfs_sb.c

18 
	~"libxfs_¥iv.h
"

19 
	~"xfs_fs.h
"

20 
	~"xfs_sh¨ed.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_å™s_ªsv.h
"

24 
	~"xfs_bô.h
"

25 
	~"xfs_sb.h
"

26 
	~"xfs_mou¡.h
"

27 
	~"xfs_de„r.h
"

28 
	~"xfs_öode.h
"

29 
	~"xfs_üŒoc.h
"

30 
	~"xfs_Æloc.h
"

31 
	~"xfs_åa˚.h
"

32 
	~"xfs_cksum.h
"

33 
	~"xfs_å™s.h
"

34 
	~"xfs_bm≠_båì.h
"

35 
	~"xfs_Æloc_båì.h
"

36 
	~"xfs_üŒoc_båì.h
"

37 
	~"xfs_rm≠_båì.h
"

38 
	~"xfs_bm≠.h
"

39 
	~"xfs_ªfcou¡_båì.h
"

50 
xfs_≥øg
 *

51 
	$xfs_≥øg_gë
(

52 
xfs_mou¡
 *
mp
,

53 
xfs_agnumbî_t
 
agno
)

55 
xfs_≥øg
 *
∑g
;

56 
ªf
 = 0;

58 
	`rcu_ªad_lock
();

59 
∑g
 = 
	`ødix_åì_lookup
(&
mp
->
m_≥øg_åì
, 
agno
);

60 i‡(
∑g
) {

61 
	`ASSERT
(
	`©omic_ªad
(&
∑g
->
∑g_ªf
) >= 0);

62 
ªf
 = 
	`©omic_öc_ªtu∫
(&
∑g
->
∑g_ªf
);

64 
	`rcu_ªad_u∆ock
();

65 
	`åa˚_xfs_≥øg_gë
(
mp
, 
agno
, 
ªf
, 
_RET_IP_
);

66  
∑g
;

67 
	}
}

72 
xfs_≥øg
 *

73 
	$xfs_≥øg_gë_èg
(

74 
xfs_mou¡
 *
mp
,

75 
xfs_agnumbî_t
 
fú°
,

76 
èg
)

78 
xfs_≥øg
 *
∑g
;

79 
found
;

80 
ªf
;

82 
	`rcu_ªad_lock
();

83 
found
 = 
	`ødix_åì_g™g_lookup_èg
(&
mp
->
m_≥øg_åì
,

84 (**)&
∑g
, 
fú°
, 1, 
èg
);

85 i‡(
found
 <= 0) {

86 
	`rcu_ªad_u∆ock
();

87  
NULL
;

89 
ªf
 = 
	`©omic_öc_ªtu∫
(&
∑g
->
∑g_ªf
);

90 
	`rcu_ªad_u∆ock
();

91 
	`åa˚_xfs_≥øg_gë_èg
(
mp
, 
∑g
->
∑g_agno
, 
ªf
, 
_RET_IP_
);

92  
∑g
;

93 
	}
}

96 
	$xfs_≥øg_put
(

97 
xfs_≥øg
 *
∑g
)

99 
ªf
;

101 
	`ASSERT
(
	`©omic_ªad
(&
∑g
->
∑g_ªf
) > 0);

102 
ªf
 = 
	`©omic_dec_ªtu∫
(&
∑g
->
∑g_ªf
);

103 
	`åa˚_xfs_≥øg_put
(
∑g
->
∑g_mou¡
,Öag->
∑g_agno
, 
ªf
, 
_RET_IP_
);

104 
	}
}

109 
STATIC
 

110 
	$xfs_mou¡_vÆid©e_sb
(

111 
xfs_mou¡_t
 *
mp
,

112 
xfs_sb_t
 *
sbp
,

113 
boﬁ
 
check_ö¥ogªss
,

114 
boﬁ
 
check_vîsi⁄
)

116 i‡(
sbp
->
sb_magi˙um
 !
XFS_SB_MAGIC
) {

117 
	`xfs_w¨n
(
mp
, "bad magicÇumber");

118  -
EWRONGFS
;

122 i‡(!
	`xfs_sb_good_vîsi⁄
(
sbp
)) {

123 
	`xfs_w¨n
(
mp
, "bad version");

124  -
EWRONGFS
;

132 i‡(
check_vîsi⁄
 && 
	`XFS_SB_VERSION_NUM
(
sbp
Ë=
XFS_SB_VERSION_5
) {

133 i‡(
	`xfs_sb_has_com∑t_„©uª
(
sbp
,

134 
XFS_SB_FEAT_COMPAT_UNKNOWN
)) {

135 
	`xfs_w¨n
(
mp
,

137 (
sbp
->
sb_„©uªs_com∑t
 &

138 
XFS_SB_FEAT_COMPAT_UNKNOWN
));

139 
	`xfs_w¨n
(
mp
,

143 i‡(
	`xfs_sb_has_ro_com∑t_„©uª
(
sbp
,

144 
XFS_SB_FEAT_RO_COMPAT_UNKNOWN
)) {

145 
	`xfs_Æît
(
mp
,

147 (
sbp
->
sb_„©uªs_ro_com∑t
 &

148 
XFS_SB_FEAT_RO_COMPAT_UNKNOWN
));

149 i‡(!(
mp
->
m_Êags
 & 
XFS_MOUNT_RDONLY
)) {

150 
	`xfs_w¨n
(
mp
,

152 
	`xfs_w¨n
(
mp
,

155  -
EINVAL
;

158 i‡(
	`xfs_sb_has_öcom∑t_„©uª
(
sbp
,

159 
XFS_SB_FEAT_INCOMPAT_UNKNOWN
)) {

160 
	`xfs_w¨n
(
mp
,

162 (
sbp
->
sb_„©uªs_öcom∑t
 &

163 
XFS_SB_FEAT_INCOMPAT_UNKNOWN
));

164 
	`xfs_w¨n
(
mp
,

166  -
EINVAL
;

168 } i‡(
	`xfs_sb_vîsi⁄_has¸c
(
sbp
)) {

175 i‡(!
	`xfs_log_check_l¢
(
mp
, 
sbp
->
sb_l¢
))

176  -
EFSCORRUPTED
;

179 i‡(
	`xfs_sb_vîsi⁄_has_pquŸöo
(
sbp
)) {

180 i‡(
sbp
->
sb_qÊags
 & (
XFS_OQUOTA_ENFD
 | 
XFS_OQUOTA_CHKD
)) {

181 
	`xfs_nŸi˚
(
mp
,

183  -
EFSCORRUPTED
;

185 } i‡(
sbp
->
sb_qÊags
 & (
XFS_PQUOTA_ENFD
 | 
XFS_GQUOTA_ENFD
 |

186 
XFS_PQUOTA_CHKD
 | 
XFS_GQUOTA_CHKD
)) {

187 
	`xfs_nŸi˚
(
mp
,

189  -
EFSCORRUPTED
;

197 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(
sbp
)) {

198 
uöt32_t
 
Æign
;

200 
Æign
 = 
XFS_INODES_PER_CHUNK
 * 
sbp
->
sb_öodesize


201 >> 
sbp
->
sb_blocklog
;

202 i‡(
sbp
->
sb_öﬂlignmt
 !
Æign
) {

203 
	`xfs_w¨n
(
mp
,

205 
sbp
->
sb_öﬂlignmt
, 
Æign
);

206  -
EINVAL
;

210 i‡(
	`u∆ikñy
(

211 
sbp
->
sb_log°¨t
 =0 && 
mp
->
m_logdev_èrgp
 =mp->
m_ddev_èrgp
)) {

212 
	`xfs_w¨n
(
mp
,

215  -
EINVAL
;

218 i‡(
	`u∆ikñy
(

219 
sbp
->
sb_log°¨t
 !0 && 
mp
->
m_logdev_èrgp
 !mp->
m_ddev_èrgp
)) {

220 
	`xfs_w¨n
(
mp
,

223  -
EINVAL
;

230 i‡(
	`u∆ikñy
(

231 
sbp
->
sb_agcou¡
 <= 0 ||

232 
sbp
->
sb_£˘size
 < 
XFS_MIN_SECTORSIZE
 ||

233 
sbp
->
sb_£˘size
 > 
XFS_MAX_SECTORSIZE
 ||

234 
sbp
->
sb_£˘log
 < 
XFS_MIN_SECTORSIZE_LOG
 ||

235 
sbp
->
sb_£˘log
 > 
XFS_MAX_SECTORSIZE_LOG
 ||

236 
sbp
->
sb_£˘size
 !(1 << sbp->
sb_£˘log
) ||

237 
sbp
->
sb_blocksize
 < 
XFS_MIN_BLOCKSIZE
 ||

238 
sbp
->
sb_blocksize
 > 
XFS_MAX_BLOCKSIZE
 ||

239 
sbp
->
sb_blocklog
 < 
XFS_MIN_BLOCKSIZE_LOG
 ||

240 
sbp
->
sb_blocklog
 > 
XFS_MAX_BLOCKSIZE_LOG
 ||

241 
sbp
->
sb_blocksize
 !(1 << sbp->
sb_blocklog
) ||

242 
sbp
->
sb_dúblklog
 + sbp->
sb_blocklog
 > 
XFS_MAX_BLOCKSIZE_LOG
 ||

243 
sbp
->
sb_öodesize
 < 
XFS_DINODE_MIN_SIZE
 ||

244 
sbp
->
sb_öodesize
 > 
XFS_DINODE_MAX_SIZE
 ||

245 
sbp
->
sb_öodñog
 < 
XFS_DINODE_MIN_LOG
 ||

246 
sbp
->
sb_öodñog
 > 
XFS_DINODE_MAX_LOG
 ||

247 
sbp
->
sb_öodesize
 !(1 << sbp->
sb_öodñog
) ||

248 
sbp
->
sb_logsunô
 > 
XLOG_MAX_RECORD_BSIZE
 ||

249 
sbp
->
sb_ö›block
 !
	`howm™y
(sbp->
sb_blocksize
,sbp->
sb_öodesize
) ||

250 (
sbp
->
sb_blocklog
 - sbp->
sb_öodñog
 !sbp->
sb_ö›blog
) ||

251 (
sbp
->
sb_ªxtsize
 * sbp->
sb_blocksize
 > 
XFS_MAX_RTEXTSIZE
) ||

252 (
sbp
->
sb_ªxtsize
 * sbp->
sb_blocksize
 < 
XFS_MIN_RTEXTSIZE
) ||

253 (
sbp
->
sb_imax_p˘
 > 100 ) ||

254 
sbp
->
sb_dblocks
 == 0 ||

255 
sbp
->
sb_dblocks
 > 
	`XFS_MAX_DBLOCKS
(sbp) ||

256 
sbp
->
sb_dblocks
 < 
	`XFS_MIN_DBLOCKS
(sbp) ||

257 
sbp
->
sb_sh¨ed_vn
 != 0)) {

258 
	`xfs_nŸi˚
(
mp
, "SB sanity check failed");

259  -
EFSCORRUPTED
;

262 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

263 
sbp
->
sb_blocksize
 < 
XFS_MIN_CRC_BLOCKSIZE
) {

264 
	`xfs_nŸi˚
(
mp
, "v5 SB sanity check failed");

265  -
EFSCORRUPTED
;

271 
sbp
->
sb_öodesize
) {

278 
	`xfs_w¨n
(
mp
, "inode size of %d bytesÇot supported",

279 
sbp
->
sb_öodesize
);

280  -
ENOSYS
;

283 i‡(
	`xfs_sb_vÆid©e_fsb_cou¡
(
sbp
, sbp->
sb_dblocks
) ||

284 
	`xfs_sb_vÆid©e_fsb_cou¡
(
sbp
, sbp->
sb_rblocks
)) {

285 
	`xfs_w¨n
(
mp
,

287  -
EFBIG
;

291 
	}
}

294 
	$xfs_sb_quŸa_‰om_disk
(
xfs_sb
 *
sbp
)

307 i‡(
sbp
->
sb_uquŸöo
 == 0)

308 
sbp
->
sb_uquŸöo
 = 
NULLFSINO
;

309 i‡(
sbp
->
sb_gquŸöo
 == 0)

310 
sbp
->
sb_gquŸöo
 = 
NULLFSINO
;

311 i‡(
sbp
->
sb_pquŸöo
 == 0)

312 
sbp
->
sb_pquŸöo
 = 
NULLFSINO
;

318 i‡(
	`xfs_sb_vîsi⁄_has_pquŸöo
(
sbp
))

321 i‡(
sbp
->
sb_qÊags
 & 
XFS_OQUOTA_ENFD
)

322 
sbp
->
sb_qÊags
 |(sbp->sb_qÊag†& 
XFS_PQUOTA_ACCT
) ?

323 
XFS_PQUOTA_ENFD
 : 
XFS_GQUOTA_ENFD
;

324 i‡(
sbp
->
sb_qÊags
 & 
XFS_OQUOTA_CHKD
)

325 
sbp
->
sb_qÊags
 |(sbp->sb_qÊag†& 
XFS_PQUOTA_ACCT
) ?

326 
XFS_PQUOTA_CHKD
 : 
XFS_GQUOTA_CHKD
;

327 
sbp
->
sb_qÊags
 &~(
XFS_OQUOTA_ENFD
 | 
XFS_OQUOTA_CHKD
);

329 i‡(
sbp
->
sb_qÊags
 & 
XFS_PQUOTA_ACCT
 &&

330 
sbp
->
sb_gquŸöo
 !
NULLFSINO
) {

340 
sbp
->
sb_pquŸöo
 = sbp->
sb_gquŸöo
;

341 
sbp
->
sb_gquŸöo
 = 
NULLFSINO
;

343 
	}
}

346 
	$__xfs_sb_‰om_disk
(

347 
xfs_sb
 *
to
,

348 
xfs_dsb_t
 *
‰om
,

349 
boﬁ
 
c⁄vît_xquŸa
)

351 
to
->
sb_magi˙um
 = 
	`be32_to_˝u
(
‰om
->sb_magicnum);

352 
to
->
sb_blocksize
 = 
	`be32_to_˝u
(
‰om
->sb_blocksize);

353 
to
->
sb_dblocks
 = 
	`be64_to_˝u
(
‰om
->sb_dblocks);

354 
to
->
sb_rblocks
 = 
	`be64_to_˝u
(
‰om
->sb_rblocks);

355 
to
->
sb_ªxã¡s
 = 
	`be64_to_˝u
(
‰om
->sb_rextents);

356 
	`mem˝y
(&
to
->
sb_uuid
, &
‰om
->sb_uuid, (to->sb_uuid));

357 
to
->
sb_log°¨t
 = 
	`be64_to_˝u
(
‰om
->sb_logstart);

358 
to
->
sb_roŸöo
 = 
	`be64_to_˝u
(
‰om
->sb_rootino);

359 
to
->
sb_rbmöo
 = 
	`be64_to_˝u
(
‰om
->sb_rbmino);

360 
to
->
sb_rsumöo
 = 
	`be64_to_˝u
(
‰om
->sb_rsumino);

361 
to
->
sb_ªxtsize
 = 
	`be32_to_˝u
(
‰om
->sb_rextsize);

362 
to
->
sb_agblocks
 = 
	`be32_to_˝u
(
‰om
->sb_agblocks);

363 
to
->
sb_agcou¡
 = 
	`be32_to_˝u
(
‰om
->sb_agcount);

364 
to
->
sb_rbmblocks
 = 
	`be32_to_˝u
(
‰om
->sb_rbmblocks);

365 
to
->
sb_logblocks
 = 
	`be32_to_˝u
(
‰om
->sb_logblocks);

366 
to
->
sb_vîsi⁄num
 = 
	`be16_to_˝u
(
‰om
->sb_versionnum);

367 
to
->
sb_£˘size
 = 
	`be16_to_˝u
(
‰om
->sb_sectsize);

368 
to
->
sb_öodesize
 = 
	`be16_to_˝u
(
‰om
->sb_inodesize);

369 
to
->
sb_ö›block
 = 
	`be16_to_˝u
(
‰om
->sb_inopblock);

370 
	`mem˝y
(&
to
->
sb_‚ame
, &
‰om
->sb_fname, (to->sb_fname));

371 
to
->
sb_blocklog
 = 
‰om
->sb_blocklog;

372 
to
->
sb_£˘log
 = 
‰om
->sb_sectlog;

373 
to
->
sb_öodñog
 = 
‰om
->sb_inodelog;

374 
to
->
sb_ö›blog
 = 
‰om
->sb_inopblog;

375 
to
->
sb_agblklog
 = 
‰om
->sb_agblklog;

376 
to
->
sb_ªxt¶og
 = 
‰om
->sb_rextslog;

377 
to
->
sb_ö¥ogªss
 = 
‰om
->sb_inprogress;

378 
to
->
sb_imax_p˘
 = 
‰om
->sb_imax_pct;

379 
to
->
sb_icou¡
 = 
	`be64_to_˝u
(
‰om
->sb_icount);

380 
to
->
sb_i‰ì
 = 
	`be64_to_˝u
(
‰om
->sb_ifree);

381 
to
->
sb_fdblocks
 = 
	`be64_to_˝u
(
‰om
->sb_fdblocks);

382 
to
->
sb_‰exã¡s
 = 
	`be64_to_˝u
(
‰om
->sb_frextents);

383 
to
->
sb_uquŸöo
 = 
	`be64_to_˝u
(
‰om
->sb_uquotino);

384 
to
->
sb_gquŸöo
 = 
	`be64_to_˝u
(
‰om
->sb_gquotino);

385 
to
->
sb_qÊags
 = 
	`be16_to_˝u
(
‰om
->sb_qflags);

386 
to
->
sb_Êags
 = 
‰om
->sb_flags;

387 
to
->
sb_sh¨ed_vn
 = 
‰om
->sb_shared_vn;

388 
to
->
sb_öﬂlignmt
 = 
	`be32_to_˝u
(
‰om
->sb_inoalignmt);

389 
to
->
sb_unô
 = 
	`be32_to_˝u
(
‰om
->sb_unit);

390 
to
->
sb_width
 = 
	`be32_to_˝u
(
‰om
->sb_width);

391 
to
->
sb_dúblklog
 = 
‰om
->sb_dirblklog;

392 
to
->
sb_log£˘log
 = 
‰om
->sb_logsectlog;

393 
to
->
sb_log£˘size
 = 
	`be16_to_˝u
(
‰om
->sb_logsectsize);

394 
to
->
sb_logsunô
 = 
	`be32_to_˝u
(
‰om
->sb_logsunit);

395 
to
->
sb_„©uªs2
 = 
	`be32_to_˝u
(
‰om
->sb_features2);

396 
to
->
sb_bad_„©uªs2
 = 
	`be32_to_˝u
(
‰om
->sb_bad_features2);

397 
to
->
sb_„©uªs_com∑t
 = 
	`be32_to_˝u
(
‰om
->sb_features_compat);

398 
to
->
sb_„©uªs_ro_com∑t
 = 
	`be32_to_˝u
(
‰om
->sb_features_ro_compat);

399 
to
->
sb_„©uªs_öcom∑t
 = 
	`be32_to_˝u
(
‰om
->sb_features_incompat);

400 
to
->
sb_„©uªs_log_öcom∑t
 =

401 
	`be32_to_˝u
(
‰om
->
sb_„©uªs_log_öcom∑t
);

403 
to
->
sb_¸c
 = 0;

404 
to
->
sb_•öo_Æign
 = 
	`be32_to_˝u
(
‰om
->sb_spino_align);

405 
to
->
sb_pquŸöo
 = 
	`be64_to_˝u
(
‰om
->sb_pquotino);

406 
to
->
sb_l¢
 = 
	`be64_to_˝u
(
‰om
->sb_lsn);

411 i‡(
	`xfs_sb_vîsi⁄_hasmëauuid
(
to
))

412 
	`uuid_c›y
(&
to
->
sb_mëa_uuid
, &
‰om
->sb_meta_uuid);

414 
	`uuid_c›y
(&
to
->
sb_mëa_uuid
, &
‰om
->
sb_uuid
);

416 i‡(
c⁄vît_xquŸa
)

417 
	`xfs_sb_quŸa_‰om_disk
(
to
);

418 
	}
}

421 
	$xfs_sb_‰om_disk
(

422 
xfs_sb
 *
to
,

423 
xfs_dsb_t
 *
‰om
)

425 
	`__xfs_sb_‰om_disk
(
to
, 
‰om
, 
åue
);

426 
	}
}

429 
	$xfs_sb_quŸa_to_disk
(

430 
xfs_dsb
 *
to
,

431 
xfs_sb
 *
‰om
)

433 
__uöt16_t
 
qÊags
 = 
‰om
->
sb_qÊags
;

435 
to
->
sb_uquŸöo
 = 
	`˝u_to_be64
(
‰om
->sb_uquotino);

436 i‡(
	`xfs_sb_vîsi⁄_has_pquŸöo
(
‰om
)) {

437 
to
->
sb_qÊags
 = 
	`˝u_to_be16
(
‰om
->sb_qflags);

438 
to
->
sb_gquŸöo
 = 
	`˝u_to_be64
(
‰om
->sb_gquotino);

439 
to
->
sb_pquŸöo
 = 
	`˝u_to_be64
(
‰om
->sb_pquotino);

448 
qÊags
 &~(
XFS_PQUOTA_ENFD
 | 
XFS_PQUOTA_CHKD
 |

449 
XFS_GQUOTA_ENFD
 | 
XFS_GQUOTA_CHKD
);

451 i‡(
‰om
->
sb_qÊags
 &

452 (
XFS_PQUOTA_ENFD
 | 
XFS_GQUOTA_ENFD
))

453 
qÊags
 |
XFS_OQUOTA_ENFD
;

454 i‡(
‰om
->
sb_qÊags
 &

455 (
XFS_PQUOTA_CHKD
 | 
XFS_GQUOTA_CHKD
))

456 
qÊags
 |
XFS_OQUOTA_CHKD
;

457 
to
->
sb_qÊags
 = 
	`˝u_to_be16
(
qÊags
);

468 i‡(
‰om
->
sb_qÊags
 & 
XFS_GQUOTA_ACCT
)

469 
to
->
sb_gquŸöo
 = 
	`˝u_to_be64
(
‰om
->sb_gquotino);

470 i‡(
‰om
->
sb_qÊags
 & 
XFS_PQUOTA_ACCT
)

471 
to
->
sb_gquŸöo
 = 
	`˝u_to_be64
(
‰om
->
sb_pquŸöo
);

479 i‡(
‰om
->
sb_gquŸöo
 =
NULLFSINO
 &&

480 
‰om
->
sb_pquŸöo
 =
NULLFSINO
)

481 
to
->
sb_gquŸöo
 = 
	`˝u_to_be64
(
NULLFSINO
);

484 
to
->
sb_pquŸöo
 = 0;

485 
	}
}

488 
	$xfs_sb_to_disk
(

489 
xfs_dsb
 *
to
,

490 
xfs_sb
 *
‰om
)

492 
	`xfs_sb_quŸa_to_disk
(
to
, 
‰om
);

494 
to
->
sb_magi˙um
 = 
	`˝u_to_be32
(
‰om
->sb_magicnum);

495 
to
->
sb_blocksize
 = 
	`˝u_to_be32
(
‰om
->sb_blocksize);

496 
to
->
sb_dblocks
 = 
	`˝u_to_be64
(
‰om
->sb_dblocks);

497 
to
->
sb_rblocks
 = 
	`˝u_to_be64
(
‰om
->sb_rblocks);

498 
to
->
sb_ªxã¡s
 = 
	`˝u_to_be64
(
‰om
->sb_rextents);

499 
	`mem˝y
(&
to
->
sb_uuid
, &
‰om
->sb_uuid, (to->sb_uuid));

500 
to
->
sb_log°¨t
 = 
	`˝u_to_be64
(
‰om
->sb_logstart);

501 
to
->
sb_roŸöo
 = 
	`˝u_to_be64
(
‰om
->sb_rootino);

502 
to
->
sb_rbmöo
 = 
	`˝u_to_be64
(
‰om
->sb_rbmino);

503 
to
->
sb_rsumöo
 = 
	`˝u_to_be64
(
‰om
->sb_rsumino);

504 
to
->
sb_ªxtsize
 = 
	`˝u_to_be32
(
‰om
->sb_rextsize);

505 
to
->
sb_agblocks
 = 
	`˝u_to_be32
(
‰om
->sb_agblocks);

506 
to
->
sb_agcou¡
 = 
	`˝u_to_be32
(
‰om
->sb_agcount);

507 
to
->
sb_rbmblocks
 = 
	`˝u_to_be32
(
‰om
->sb_rbmblocks);

508 
to
->
sb_logblocks
 = 
	`˝u_to_be32
(
‰om
->sb_logblocks);

509 
to
->
sb_vîsi⁄num
 = 
	`˝u_to_be16
(
‰om
->sb_versionnum);

510 
to
->
sb_£˘size
 = 
	`˝u_to_be16
(
‰om
->sb_sectsize);

511 
to
->
sb_öodesize
 = 
	`˝u_to_be16
(
‰om
->sb_inodesize);

512 
to
->
sb_ö›block
 = 
	`˝u_to_be16
(
‰om
->sb_inopblock);

513 
	`mem˝y
(&
to
->
sb_‚ame
, &
‰om
->sb_fname, (to->sb_fname));

514 
to
->
sb_blocklog
 = 
‰om
->sb_blocklog;

515 
to
->
sb_£˘log
 = 
‰om
->sb_sectlog;

516 
to
->
sb_öodñog
 = 
‰om
->sb_inodelog;

517 
to
->
sb_ö›blog
 = 
‰om
->sb_inopblog;

518 
to
->
sb_agblklog
 = 
‰om
->sb_agblklog;

519 
to
->
sb_ªxt¶og
 = 
‰om
->sb_rextslog;

520 
to
->
sb_ö¥ogªss
 = 
‰om
->sb_inprogress;

521 
to
->
sb_imax_p˘
 = 
‰om
->sb_imax_pct;

522 
to
->
sb_icou¡
 = 
	`˝u_to_be64
(
‰om
->sb_icount);

523 
to
->
sb_i‰ì
 = 
	`˝u_to_be64
(
‰om
->sb_ifree);

524 
to
->
sb_fdblocks
 = 
	`˝u_to_be64
(
‰om
->sb_fdblocks);

525 
to
->
sb_‰exã¡s
 = 
	`˝u_to_be64
(
‰om
->sb_frextents);

527 
to
->
sb_Êags
 = 
‰om
->sb_flags;

528 
to
->
sb_sh¨ed_vn
 = 
‰om
->sb_shared_vn;

529 
to
->
sb_öﬂlignmt
 = 
	`˝u_to_be32
(
‰om
->sb_inoalignmt);

530 
to
->
sb_unô
 = 
	`˝u_to_be32
(
‰om
->sb_unit);

531 
to
->
sb_width
 = 
	`˝u_to_be32
(
‰om
->sb_width);

532 
to
->
sb_dúblklog
 = 
‰om
->sb_dirblklog;

533 
to
->
sb_log£˘log
 = 
‰om
->sb_logsectlog;

534 
to
->
sb_log£˘size
 = 
	`˝u_to_be16
(
‰om
->sb_logsectsize);

535 
to
->
sb_logsunô
 = 
	`˝u_to_be32
(
‰om
->sb_logsunit);

542 
‰om
->
sb_bad_„©uªs2
 = from->
sb_„©uªs2
;

543 
to
->
sb_„©uªs2
 = 
	`˝u_to_be32
(
‰om
->sb_features2);

544 
to
->
sb_bad_„©uªs2
 = 
	`˝u_to_be32
(
‰om
->sb_bad_features2);

546 i‡(
	`xfs_sb_vîsi⁄_has¸c
(
‰om
)) {

547 
to
->
sb_„©uªs_com∑t
 = 
	`˝u_to_be32
(
‰om
->sb_features_compat);

548 
to
->
sb_„©uªs_ro_com∑t
 =

549 
	`˝u_to_be32
(
‰om
->
sb_„©uªs_ro_com∑t
);

550 
to
->
sb_„©uªs_öcom∑t
 =

551 
	`˝u_to_be32
(
‰om
->
sb_„©uªs_öcom∑t
);

552 
to
->
sb_„©uªs_log_öcom∑t
 =

553 
	`˝u_to_be32
(
‰om
->
sb_„©uªs_log_öcom∑t
);

554 
to
->
sb_•öo_Æign
 = 
	`˝u_to_be32
(
‰om
->sb_spino_align);

555 
to
->
sb_l¢
 = 
	`˝u_to_be64
(
‰om
->sb_lsn);

556 i‡(
	`xfs_sb_vîsi⁄_hasmëauuid
(
‰om
))

557 
	`uuid_c›y
(&
to
->
sb_mëa_uuid
, &
‰om
->sb_meta_uuid);

559 
	}
}

562 
	$xfs_sb_vîify
(

563 
xfs_buf
 *
bp
,

564 
boﬁ
 
check_vîsi⁄
)

566 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

567 
xfs_sb
 
sb
;

573 
	`__xfs_sb_‰om_disk
(&
sb
, 
	`XFS_BUF_TO_SBP
(
bp
), 
Ál£
);

579  
	`xfs_mou¡_vÆid©e_sb
(
mp
, &
sb
,

580 
bp
->
b_m≠s
[0].
bm_bn
 =
XFS_SB_DADDR
,

581 
check_vîsi⁄
);

582 
	}
}

597 
	$xfs_sb_ªad_vîify
(

598 
xfs_buf
 *
bp
)

600 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

601 
xfs_dsb
 *
dsb
 = 
	`XFS_BUF_TO_SBP
(
bp
);

602 
îr‹
;

608 i‡(
dsb
->
sb_magi˙um
 =
	`˝u_to_be32
(
XFS_SB_MAGIC
) &&

609 (((
	`be16_to_˝u
(
dsb
->
sb_vîsi⁄num
Ë& 
XFS_SB_VERSION_NUMBITS
) ==

610 
XFS_SB_VERSION_5
) ||

611 
dsb
->
sb_¸c
 != 0)) {

613 i‡(!
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_SB_CRC_OFF
)) {

615 i‡(
bp
->
b_bn
 =
XFS_SB_DADDR
 ||

616 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

617 
îr‹
 = -
EFSBADCRC
;

618 
out_îr‹
;

622 
îr‹
 = 
	`xfs_sb_vîify
(
bp
, 
åue
);

624 
out_îr‹
:

625 i‡(
îr‹
) {

626 
	`xfs_buf_i€º‹
(
bp
, 
îr‹
);

627 i‡(
îr‹
 =-
EFSCORRUPTED
 ||Éº‹ =-
EFSBADCRC
)

628 
	`xfs_vîifõr_îr‹
(
bp
);

630 
	}
}

639 
	$xfs_sb_quõt_ªad_vîify
(

640 
xfs_buf
 *
bp
)

642 
xfs_dsb
 *
dsb
 = 
	`XFS_BUF_TO_SBP
(
bp
);

644 i‡(
dsb
->
sb_magi˙um
 =
	`˝u_to_be32
(
XFS_SB_MAGIC
)) {

646 
	`xfs_sb_ªad_vîify
(
bp
);

650 
	`xfs_buf_i€º‹
(
bp
, -
EWRONGFS
);

651 
	}
}

654 
	$xfs_sb_wrôe_vîify
(

655 
xfs_buf
 *
bp
)

657 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

658 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

659 
îr‹
;

661 
îr‹
 = 
	`xfs_sb_vîify
(
bp
, 
Ál£
);

662 i‡(
îr‹
) {

663 
	`xfs_buf_i€º‹
(
bp
, 
îr‹
);

664 
	`xfs_vîifõr_îr‹
(
bp
);

668 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

671 i‡(
bù
)

672 
	`XFS_BUF_TO_SBP
(
bp
)->
sb_l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

674 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_SB_CRC_OFF
);

675 
	}
}

677 c⁄° 
xfs_buf_›s
 
	gxfs_sb_buf_›s
 = {

678 .
«me
 = "xfs_sb",

679 .
	gvîify_ªad
 = 
xfs_sb_ªad_vîify
,

680 .
	gvîify_wrôe
 = 
xfs_sb_wrôe_vîify
,

683 c⁄° 
xfs_buf_›s
 
	gxfs_sb_quõt_buf_›s
 = {

684 .
«me
 = "xfs_sb_quiet",

685 .
	gvîify_ªad
 = 
xfs_sb_quõt_ªad_vîify
,

686 .
	gvîify_wrôe
 = 
xfs_sb_wrôe_vîify
,

697 
	$xfs_sb_mou¡_comm⁄
(

698 
xfs_mou¡
 *
mp
,

699 
xfs_sb
 *
sbp
)

701 
mp
->
m_ag‰Ÿ‹
 = mp->
m_agúŸ‹
 = 0;

702 
	`•ö_lock_öô
(&
mp
->
m_agúŸ‹_lock
);

703 
mp
->
m_maxagi
 = mp->
m_sb
.
sb_agcou¡
;

704 
mp
->
m_blkbô_log
 = 
sbp
->
sb_blocklog
 + 
XFS_NBBYLOG
;

705 
mp
->
m_blkbb_log
 = 
sbp
->
sb_blocklog
 - 
BBSHIFT
;

706 
mp
->
m_£˘bb_log
 = 
sbp
->
sb_£˘log
 - 
BBSHIFT
;

707 
mp
->
m_agno_log
 = 
	`xfs_highbô32
(
sbp
->
sb_agcou¡
 - 1) + 1;

708 
mp
->
m_agöo_log
 = 
sbp
->
sb_ö›blog
 + sbp->
sb_agblklog
;

709 
mp
->
m_blockmask
 = 
sbp
->
sb_blocksize
 - 1;

710 
mp
->
m_blockwsize
 = 
sbp
->
sb_blocksize
 >> 
XFS_WORDLOG
;

711 
mp
->
m_blockwmask
 = mp->
m_blockwsize
 - 1;

713 
mp
->
m_Æloc_mxr
[0] = 
	`xfs_Ælocbt_maxªcs
(mp, 
sbp
->
sb_blocksize
, 1);

714 
mp
->
m_Æloc_mxr
[1] = 
	`xfs_Ælocbt_maxªcs
(mp, 
sbp
->
sb_blocksize
, 0);

715 
mp
->
m_Æloc_mƒ
[0] = mp->
m_Æloc_mxr
[0] / 2;

716 
mp
->
m_Æloc_mƒ
[1] = mp->
m_Æloc_mxr
[1] / 2;

718 
mp
->
m_öobt_mxr
[0] = 
	`xfs_öobt_maxªcs
(mp, 
sbp
->
sb_blocksize
, 1);

719 
mp
->
m_öobt_mxr
[1] = 
	`xfs_öobt_maxªcs
(mp, 
sbp
->
sb_blocksize
, 0);

720 
mp
->
m_öobt_mƒ
[0] = mp->
m_öobt_mxr
[0] / 2;

721 
mp
->
m_öobt_mƒ
[1] = mp->
m_öobt_mxr
[1] / 2;

723 
mp
->
m_bm≠_dmxr
[0] = 
	`xfs_bmbt_maxªcs
(mp, 
sbp
->
sb_blocksize
, 1);

724 
mp
->
m_bm≠_dmxr
[1] = 
	`xfs_bmbt_maxªcs
(mp, 
sbp
->
sb_blocksize
, 0);

725 
mp
->
m_bm≠_dmƒ
[0] = mp->
m_bm≠_dmxr
[0] / 2;

726 
mp
->
m_bm≠_dmƒ
[1] = mp->
m_bm≠_dmxr
[1] / 2;

728 
mp
->
m_rm≠_mxr
[0] = 
	`xfs_rm≠bt_maxªcs
(mp, 
sbp
->
sb_blocksize
, 1);

729 
mp
->
m_rm≠_mxr
[1] = 
	`xfs_rm≠bt_maxªcs
(mp, 
sbp
->
sb_blocksize
, 0);

730 
mp
->
m_rm≠_mƒ
[0] = mp->
m_rm≠_mxr
[0] / 2;

731 
mp
->
m_rm≠_mƒ
[1] = mp->
m_rm≠_mxr
[1] / 2;

733 
mp
->
m_ªfc_mxr
[0] = 
	`xfs_ªfcou¡bt_maxªcs
(mp, 
sbp
->
sb_blocksize
,

734 
åue
);

735 
mp
->
m_ªfc_mxr
[1] = 
	`xfs_ªfcou¡bt_maxªcs
(mp, 
sbp
->
sb_blocksize
,

736 
Ál£
);

737 
mp
->
m_ªfc_mƒ
[0] = mp->
m_ªfc_mxr
[0] / 2;

738 
mp
->
m_ªfc_mƒ
[1] = mp->
m_ªfc_mxr
[1] / 2;

740 
mp
->
m_bsize
 = 
	`XFS_FSB_TO_BB
(mp, 1);

741 
mp
->
m_üŒoc_öos
 = ()
	`MAX
((
__uöt16_t
)
XFS_INODES_PER_CHUNK
,

742 
sbp
->
sb_ö›block
);

743 
mp
->
m_üŒoc_blks
 = mp->
m_üŒoc_öos
 >> 
sbp
->
sb_ö›blog
;

745 i‡(
sbp
->
sb_•öo_Æign
)

746 
mp
->
m_üŒoc_mö_blks
 = 
sbp
->
sb_•öo_Æign
;

748 
mp
->
m_üŒoc_mö_blks
 = mp->
m_üŒoc_blks
;

749 
mp
->
m_Æloc_£t_aside
 = 
	`xfs_Æloc_£t_aside
(mp);

750 
mp
->
m_ag_max_ußbÀ
 = 
	`xfs_Æloc_ag_max_ußbÀ
(mp);

751 
	}
}

762 
	$xfs_öôülize_≥øg_d©a
(

763 
xfs_mou¡
 *
mp
,

764 
xfs_agnumbî_t
 
agcou¡
)

766 
xfs_agnumbî_t
 
ödex
;

767 
xfs_≥øg_t
 *
∑g
;

768 
xfs_sb_t
 *
sbp
 = &
mp
->
m_sb
;

769 
uöt64_t
 
i‰ì
 = 0;

770 
uöt64_t
 
üŒoc
 = 0;

771 
uöt64_t
 
b‰ì
 = 0;

772 
uöt64_t
 
b‰ìl°
 = 0;

773 
uöt64_t
 
båì
 = 0;

774 
îr‹
;

776 
ödex
 = 0; index < 
agcou¡
; index++) {

782 
îr‹
 = 
	`xfs_Æloc_∑gf_öô
(
mp
, 
NULL
, 
ödex
, 0);

783 i‡(
îr‹
)

784  
îr‹
;

786 
îr‹
 = 
	`xfs_üŒoc_∑gi_öô
(
mp
, 
NULL
, 
ödex
);

787 i‡(
îr‹
)

788  
îr‹
;

789 
∑g
 = 
	`xfs_≥øg_gë
(
mp
, 
ödex
);

790 
i‰ì
 +
∑g
->
∑gi_‰ìcou¡
;

791 
üŒoc
 +
∑g
->
∑gi_cou¡
;

792 
b‰ì
 +
∑g
->
∑gf_‰ìblks
;

793 
b‰ìl°
 +
∑g
->
∑gf_Êcou¡
;

794 
båì
 +
∑g
->
∑gf_båìblks
;

795 
	`xfs_≥øg_put
(
∑g
);

799 
	`•ö_lock
(&
mp
->
m_sb_lock
);

800 
sbp
->
sb_i‰ì
 = 
i‰ì
;

801 
sbp
->
sb_icou¡
 = 
üŒoc
;

802 
sbp
->
sb_fdblocks
 = 
b‰ì
 + 
b‰ìl°
 + 
båì
;

803 
	`•ö_u∆ock
(&
mp
->
m_sb_lock
);

805 
	`xfs_ªöô_≥r˝u_cou¡îs
(
mp
);

808 
	}
}

817 
	$xfs_log_sb
(

818 
xfs_å™s
 *
ç
)

820 
xfs_mou¡
 *
mp
 = 
ç
->
t_mou¡p
;

821 
xfs_buf
 *
bp
 = 
	`xfs_å™s_gësb
(
ç
, 
mp
, 0);

823 
mp
->
m_sb
.
sb_icou¡
 = 
	`≥r˝u_cou¡î_sum
(&mp->
m_icou¡
);

824 
mp
->
m_sb
.
sb_i‰ì
 = 
	`≥r˝u_cou¡î_sum
(&mp->
m_i‰ì
);

825 
mp
->
m_sb
.
sb_fdblocks
 = 
	`≥r˝u_cou¡î_sum
(&mp->
m_fdblocks
);

827 
	`xfs_sb_to_disk
(
	`XFS_BUF_TO_SBP
(
bp
), &
mp
->
m_sb
);

828 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_SB_BUF
);

829 
	`xfs_å™s_log_buf
(
ç
, 
bp
, 0, (
xfs_dsb
));

830 
	}
}

844 
	$xfs_sync_sb
(

845 
xfs_mou¡
 *
mp
,

846 
boﬁ
 
waô
)

848 
xfs_å™s
 *
ç
;

849 
îr‹
;

851 
îr‹
 = 
	`xfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_sb
, 0, 0,

852 
XFS_TRANS_NO_WRITECOUNT
, &
ç
);

853 i‡(
îr‹
)

854  
îr‹
;

856 
	`xfs_log_sb
(
ç
);

857 i‡(
waô
)

858 
	`xfs_å™s_£t_sync
(
ç
);

859  
	`xfs_å™s_commô
(
ç
);

860 
	}
}

	@libxfs/xfs_sb.h

18 #i‚de‡
__XFS_SB_H__


19 
	#__XFS_SB_H__


	)

24 
xfs_≥øg
 *
xfs_≥øg_gë
(
xfs_mou¡
 *, 
xfs_agnumbî_t
);

25 
xfs_≥øg
 *
xfs_≥øg_gë_èg
(
xfs_mou¡
 *, 
xfs_agnumbî_t
,

26 
èg
);

27 
xfs_≥øg_put
(
xfs_≥øg
 *
∑g
);

28 
xfs_öôülize_≥øg_d©a
(
xfs_mou¡
 *, 
xfs_agnumbî_t
);

30 
xfs_log_sb
(
xfs_å™s
 *
ç
);

31 
xfs_sync_sb
(
xfs_mou¡
 *
mp
, 
boﬁ
 
waô
);

32 
xfs_sb_mou¡_comm⁄
(
xfs_mou¡
 *
mp
, 
xfs_sb
 *
sbp
);

33 
xfs_sb_‰om_disk
(
xfs_sb
 *
to
, 
xfs_dsb
 *
‰om
);

34 
xfs_sb_to_disk
(
xfs_dsb
 *
to
, 
xfs_sb
 *
‰om
);

35 
xfs_sb_quŸa_‰om_disk
(
xfs_sb
 *
sbp
);

	@libxfs/xfs_shared.h

19 #i‚de‡
__XFS_SHARED_H__


20 
	#__XFS_SHARED_H__


	)

26 
	gxfs_if‹k
;

27 
	gxfs_buf
;

28 
	gxfs_buf_›s
;

29 
	gxfs_mou¡
;

30 
	gxfs_å™s
;

31 
	gxfs_öode
;

36 c⁄° 
xfs_buf_›s
 
xfs_agf_buf_›s
;

37 c⁄° 
xfs_buf_›s
 
xfs_agi_buf_›s
;

38 c⁄° 
xfs_buf_›s
 
xfs_agf_buf_›s
;

39 c⁄° 
xfs_buf_›s
 
xfs_agÊ_buf_›s
;

40 c⁄° 
xfs_buf_›s
 
xfs_Ælocbt_buf_›s
;

41 c⁄° 
xfs_buf_›s
 
xfs_rm≠bt_buf_›s
;

42 c⁄° 
xfs_buf_›s
 
xfs_ªfcou¡bt_buf_›s
;

43 c⁄° 
xfs_buf_›s
 
xfs_©å3_Àaf_buf_›s
;

44 c⁄° 
xfs_buf_›s
 
xfs_©å3_rmt_buf_›s
;

45 c⁄° 
xfs_buf_›s
 
xfs_bmbt_buf_›s
;

46 c⁄° 
xfs_buf_›s
 
xfs_da3_node_buf_›s
;

47 c⁄° 
xfs_buf_›s
 
xfs_dquŸ_buf_›s
;

48 c⁄° 
xfs_buf_›s
 
xfs_symlök_buf_›s
;

49 c⁄° 
xfs_buf_›s
 
xfs_agi_buf_›s
;

50 c⁄° 
xfs_buf_›s
 
xfs_öobt_buf_›s
;

51 c⁄° 
xfs_buf_›s
 
xfs_öode_buf_›s
;

52 c⁄° 
xfs_buf_›s
 
xfs_öode_buf_ø_›s
;

53 c⁄° 
xfs_buf_›s
 
xfs_dquŸ_buf_›s
;

54 c⁄° 
xfs_buf_›s
 
xfs_dquŸ_buf_ø_›s
;

55 c⁄° 
xfs_buf_›s
 
xfs_sb_buf_›s
;

56 c⁄° 
xfs_buf_›s
 
xfs_sb_quõt_buf_›s
;

57 c⁄° 
xfs_buf_›s
 
xfs_symlök_buf_›s
;

58 c⁄° 
xfs_buf_›s
 
xfs_πbuf_›s
;

67 
	sxfs_log_ôem_desc
 {

68 
xfs_log_ôem
 *
	mlid_ôem
;

69 
li°_hód
 
	mlid_å™s
;

70 
	mlid_Êags
;

73 
	#XFS_LID_DIRTY
 0x1

	)

76 
xfs_log_ˇlc_unô_ªs
(
xfs_mou¡
 *
mp
, 
unô_byãs
);

77 
xfs_log_ˇlc_möimum_size
(
xfs_mou¡
 *);

83 
	#XFS_TRANS_DIRTY
 0x01

	)

84 
	#XFS_TRANS_SB_DIRTY
 0x02

	)

85 
	#XFS_TRANS_PERM_LOG_RES
 0x04

	)

86 
	#XFS_TRANS_SYNC
 0x08

	)

87 
	#XFS_TRANS_DQ_DIRTY
 0x10

	)

88 
	#XFS_TRANS_RESERVE
 0x20

	)

89 
	#XFS_TRANS_NO_WRITECOUNT
 0x40

	)

90 
	#XFS_TRANS_NOFS
 0x80

	)

95 
	#XFS_TRANS_SB_ICOUNT
 0x00000001

	)

96 
	#XFS_TRANS_SB_IFREE
 0x00000002

	)

97 
	#XFS_TRANS_SB_FDBLOCKS
 0x00000004

	)

98 
	#XFS_TRANS_SB_RES_FDBLOCKS
 0x00000008

	)

99 
	#XFS_TRANS_SB_FREXTENTS
 0x00000010

	)

100 
	#XFS_TRANS_SB_RES_FREXTENTS
 0x00000020

	)

101 
	#XFS_TRANS_SB_DBLOCKS
 0x00000040

	)

102 
	#XFS_TRANS_SB_AGCOUNT
 0x00000080

	)

103 
	#XFS_TRANS_SB_IMAXPCT
 0x00000100

	)

104 
	#XFS_TRANS_SB_REXTSIZE
 0x00000200

	)

105 
	#XFS_TRANS_SB_RBMBLOCKS
 0x00000400

	)

106 
	#XFS_TRANS_SB_RBLOCKS
 0x00000800

	)

107 
	#XFS_TRANS_SB_REXTENTS
 0x00001000

	)

108 
	#XFS_TRANS_SB_REXTSLOG
 0x00002000

	)

115 
	#XFS_AGF_REF
 4

	)

116 
	#XFS_AGI_REF
 4

	)

117 
	#XFS_AGFL_REF
 3

	)

118 
	#XFS_INO_BTREE_REF
 3

	)

119 
	#XFS_ALLOC_BTREE_REF
 2

	)

120 
	#XFS_BMAP_BTREE_REF
 2

	)

121 
	#XFS_RMAP_BTREE_REF
 2

	)

122 
	#XFS_DIR_BTREE_REF
 2

	)

123 
	#XFS_INO_REF
 2

	)

124 
	#XFS_ATTR_BTREE_REF
 1

	)

125 
	#XFS_DQUOT_REF
 1

	)

126 
	#XFS_REFC_BTREE_REF
 1

	)

131 
	#XFS_ICHGTIME_MOD
 0x1

	)

132 
	#XFS_ICHGTIME_CHG
 0x2

	)

133 
	#XFS_ICHGTIME_CREATE
 0x4

	)

139 
xfs_symlök_blocks
(
xfs_mou¡
 *
mp
, 
∑thÀn
);

140 
xfs_symlök_hdr_£t
(
xfs_mou¡
 *
mp
, 
xfs_öo_t
 
öo
, 
uöt32_t
 
off£t
,

141 
uöt32_t
 
size
, 
xfs_buf
 *
bp
);

142 
boﬁ
 
xfs_symlök_hdr_ok
(
xfs_öo_t
 
öo
, 
uöt32_t
 
off£t
,

143 
uöt32_t
 
size
, 
xfs_buf
 *
bp
);

144 
xfs_symlök_loˇl_to_ªmŸe
(
xfs_å™s
 *
ç
, 
xfs_buf
 *
bp
,

145 
xfs_öode
 *
ù
, 
xfs_if‹k
 *
iÂ
);

	@libxfs/xfs_symlink_remote.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_f‹m©.h
"

22 
	~"xfs_log_f‹m©.h
"

23 
	~"xfs_sh¨ed.h
"

24 
	~"xfs_å™s_ªsv.h
"

25 
	~"xfs_mou¡.h
"

26 
	~"xfs_bm≠_båì.h
"

27 
	~"xfs_öode.h
"

28 
	~"xfs_åa˚.h
"

29 
	~"xfs_cksum.h
"

30 
	~"xfs_å™s.h
"

38 
	$xfs_symlök_blocks
(

39 
xfs_mou¡
 *
mp
,

40 
∑thÀn
)

42 
buÊí
 = 
	`XFS_SYMLINK_BUF_SPACE
(
mp
, mp->
m_sb
.
sb_blocksize
);

44  (
∑thÀn
 + 
buÊí
 - 1) / buflen;

45 
	}
}

48 
	$xfs_symlök_hdr_£t
(

49 
xfs_mou¡
 *
mp
,

50 
xfs_öo_t
 
öo
,

51 
uöt32_t
 
off£t
,

52 
uöt32_t
 
size
,

53 
xfs_buf
 *
bp
)

55 
xfs_dsymlök_hdr
 *
d¶
 = 
bp
->
b_addr
;

57 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

60 
	`mem£t
(
d¶
, 0, (
xfs_dsymlök_hdr
));

61 
d¶
->
¶_magic
 = 
	`˝u_to_be32
(
XFS_SYMLINK_MAGIC
);

62 
d¶
->
¶_off£t
 = 
	`˝u_to_be32
(
off£t
);

63 
d¶
->
¶_byãs
 = 
	`˝u_to_be32
(
size
);

64 
	`uuid_c›y
(&
d¶
->
¶_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

65 
d¶
->
¶_ow√r
 = 
	`˝u_to_be64
(
öo
);

66 
d¶
->
¶_blkno
 = 
	`˝u_to_be64
(
bp
->
b_bn
);

67 
bp
->
b_›s
 = &
xfs_symlök_buf_›s
;

69  (
xfs_dsymlök_hdr
);

70 
	}
}

77 
boﬁ


78 
	$xfs_symlök_hdr_ok
(

79 
xfs_öo_t
 
öo
,

80 
uöt32_t
 
off£t
,

81 
uöt32_t
 
size
,

82 
xfs_buf
 *
bp
)

84 
xfs_dsymlök_hdr
 *
d¶
 = 
bp
->
b_addr
;

86 i‡(
off£t
 !
	`be32_to_˝u
(
d¶
->
¶_off£t
))

87  
Ál£
;

88 i‡(
size
 !
	`be32_to_˝u
(
d¶
->
¶_byãs
))

89  
Ál£
;

90 i‡(
öo
 !
	`be64_to_˝u
(
d¶
->
¶_ow√r
))

91  
Ál£
;

94  
åue
;

95 
	}
}

97 
boﬁ


98 
	$xfs_symlök_vîify
(

99 
xfs_buf
 *
bp
)

101 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

102 
xfs_dsymlök_hdr
 *
d¶
 = 
bp
->
b_addr
;

104 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

105  
Ál£
;

106 i‡(
d¶
->
¶_magic
 !
	`˝u_to_be32
(
XFS_SYMLINK_MAGIC
))

107  
Ál£
;

108 i‡(!
	`uuid_equÆ
(&
d¶
->
¶_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
))

109  
Ál£
;

110 i‡(
bp
->
b_bn
 !
	`be64_to_˝u
(
d¶
->
¶_blkno
))

111  
Ál£
;

112 i‡(
	`be32_to_˝u
(
d¶
->
¶_off£t
) +

113 
	`be32_to_˝u
(
d¶
->
¶_byãs
Ë>
MAXPATHLEN
)

114  
Ál£
;

115 i‡(
d¶
->
¶_ow√r
 == 0)

116  
Ál£
;

117 i‡(!
	`xfs_log_check_l¢
(
mp
, 
	`be64_to_˝u
(
d¶
->
¶_l¢
)))

118  
Ál£
;

120  
åue
;

121 
	}
}

124 
	$xfs_symlök_ªad_vîify
(

125 
xfs_buf
 *
bp
)

127 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

130 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

133 i‡(!
	`xfs_buf_vîify_cksum
(
bp
, 
XFS_SYMLINK_CRC_OFF
))

134 
	`xfs_buf_i€º‹
(
bp
, -
EFSBADCRC
);

135 i‡(!
	`xfs_symlök_vîify
(
bp
))

136 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

138 i‡(
bp
->
b_îr‹
)

139 
	`xfs_vîifõr_îr‹
(
bp
);

140 
	}
}

143 
	$xfs_symlök_wrôe_vîify
(

144 
xfs_buf
 *
bp
)

146 
xfs_mou¡
 *
mp
 = 
bp
->
b_èrgë
->
bt_mou¡
;

147 
xfs_buf_log_ôem
 *
bù
 = 
bp
->
b_f•riv
;

150 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

153 i‡(!
	`xfs_symlök_vîify
(
bp
)) {

154 
	`xfs_buf_i€º‹
(
bp
, -
EFSCORRUPTED
);

155 
	`xfs_vîifõr_îr‹
(
bp
);

159 i‡(
bù
) {

160 
xfs_dsymlök_hdr
 *
d¶
 = 
bp
->
b_addr
;

161 
d¶
->
¶_l¢
 = 
	`˝u_to_be64
(
bù
->
bli_ôem
.
li_l¢
);

163 
	`xfs_buf_upd©e_cksum
(
bp
, 
XFS_SYMLINK_CRC_OFF
);

164 
	}
}

166 c⁄° 
xfs_buf_›s
 
	gxfs_symlök_buf_›s
 = {

167 .
«me
 = "xfs_symlink",

168 .
	gvîify_ªad
 = 
xfs_symlök_ªad_vîify
,

169 .
	gvîify_wrôe
 = 
xfs_symlök_wrôe_vîify
,

173 
	$xfs_symlök_loˇl_to_ªmŸe
(

174 
xfs_å™s
 *
ç
,

175 
xfs_buf
 *
bp
,

176 
xfs_öode
 *
ù
,

177 
xfs_if‹k
 *
iÂ
)

179 
xfs_mou¡
 *
mp
 = 
ù
->
i_mou¡
;

180 *
buf
;

182 
	`xfs_å™s_buf_£t_ty≥
(
ç
, 
bp
, 
XFS_BLFT_SYMLINK_BUF
);

184 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

185 
bp
->
b_›s
 = 
NULL
;

186 
	`mem˝y
(
bp
->
b_addr
, 
iÂ
->
if_u1
.
if_d©a
, iÂ->
if_byãs
);

187 
	`xfs_å™s_log_buf
(
ç
, 
bp
, 0, 
iÂ
->
if_byãs
 - 1);

195 
	`ASSERT
(
	`BBTOB
(
bp
->
b_Àngth
) >=

196 
iÂ
->
if_byãs
 + (
xfs_dsymlök_hdr
));

198 
bp
->
b_›s
 = &
xfs_symlök_buf_›s
;

200 
buf
 = 
bp
->
b_addr
;

201 
buf
 +
	`xfs_symlök_hdr_£t
(
mp
, 
ù
->
i_öo
, 0, 
iÂ
->
if_byãs
, 
bp
);

202 
	`mem˝y
(
buf
, 
iÂ
->
if_u1
.
if_d©a
, iÂ->
if_byãs
);

203 
	`xfs_å™s_log_buf
(
ç
, 
bp
, 0, (
xfs_dsymlök_hdr
) +

204 
iÂ
->
if_byãs
 - 1);

205 
	}
}

	@libxfs/xfs_trans_resv.c

19 
	~"libxfs_¥iv.h
"

20 
	~"xfs_fs.h
"

21 
	~"xfs_sh¨ed.h
"

22 
	~"xfs_f‹m©.h
"

23 
	~"xfs_log_f‹m©.h
"

24 
	~"xfs_å™s_ªsv.h
"

25 
	~"xfs_mou¡.h
"

26 
	~"xfs_da_f‹m©.h
"

27 
	~"xfs_da_båì.h
"

28 
	~"xfs_öode.h
"

29 
	~"xfs_bm≠_båì.h
"

30 
	~"xfs_üŒoc.h
"

31 
	~"xfs_å™s.h
"

32 
	~"xfs_å™s_•a˚.h
"

33 
	~"xfs_åa˚.h
"

34 
	~"xfs_quŸa_defs.h
"

43 
STATIC
 
uöt


44 
	$xfs_buf_log_ovîhód
()

46  
	`round_up
((
xlog_›_hódî
) +

47 (
xfs_buf_log_f‹m©
), 128);

48 
	}
}

57 
STATIC
 
uöt


58 
	$xfs_ˇlc_buf_ªs
(

59 
uöt
 
nbufs
,

60 
uöt
 
size
)

62  
nbufs
 * (
size
 + 
	`xfs_buf_log_ovîhód
());

63 
	}
}

76 
uöt


77 
	$xfs_Æloc‰ì_log_cou¡
(

78 
xfs_mou¡
 *
mp
,

79 
uöt
 
num_›s
)

81 
uöt
 
blocks
;

83 
blocks
 = 
num_›s
 * 2 * (2 * 
mp
->
m_ag_maxÀvñs
 - 1);

84 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

85 
blocks
 +
num_›s
 * (2 * 
mp
->
m_rm≠_maxÀvñs
 - 1);

86 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

87 
blocks
 +
num_›s
 * (2 * 
mp
->
m_ªfc_maxÀvñs
 - 1);

89  
blocks
;

90 
	}
}

121 
STATIC
 
uöt


122 
	$xfs_ˇlc_öode_ªs
(

123 
xfs_mou¡
 *
mp
,

124 
uöt
 
nöodes
)

126  
nöodes
 *

127 (4 * (
xlog_›_hódî
) +

128 (
xfs_öode_log_f‹m©
) +

129 
mp
->
m_sb
.
sb_öodesize
 +

130 2 * 
	`XFS_BMBT_BLOCK_LEN
(
mp
));

131 
	}
}

153 
STATIC
 
uöt


154 
	$xfs_ˇlc_föobt_ªs
(

155 
xfs_mou¡
 *
mp
,

156 
Æloc
,

157 
modify
)

159 
uöt
 
ªs
;

161 i‡(!
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
))

164 
ªs
 = 
	`xfs_ˇlc_buf_ªs
(
mp
->
m_ö_maxÀvñs
, 
	`XFS_FSB_TO_B
(mp, 1));

165 i‡(
Æloc
)

166 
ªs
 +
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 1),

167 
	`XFS_FSB_TO_B
(
mp
, 1));

168 i‡(
modify
)

169 
ªs
 +(
uöt
)
	`XFS_FSB_TO_B
(
mp
, 1);

171  
ªs
;

172 
	}
}

208 
STATIC
 
uöt


209 
	$xfs_ˇlc_wrôe_ª£rv©i⁄
(

210 
xfs_mou¡
 *
mp
)

212  
	`XFS_DQUOT_LOGRES
(
mp
) +

213 
	`MAX
((
	`xfs_ˇlc_öode_ªs
(
mp
, 1) +

214 
	`xfs_ˇlc_buf_ªs
(
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_DATA_FORK
),

215 
	`XFS_FSB_TO_B
(
mp
, 1)) +

216 
	`xfs_ˇlc_buf_ªs
(3, 
mp
->
m_sb
.
sb_£˘size
) +

217 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 2),

218 
	`XFS_FSB_TO_B
(
mp
, 1))),

219 (
	`xfs_ˇlc_buf_ªs
(5, 
mp
->
m_sb
.
sb_£˘size
) +

220 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 2),

221 
	`XFS_FSB_TO_B
(
mp
, 1))));

222 
	}
}

237 
STATIC
 
uöt


238 
	$xfs_ˇlc_ôrunˇã_ª£rv©i⁄
(

239 
xfs_mou¡
 *
mp
)

241  
	`XFS_DQUOT_LOGRES
(
mp
) +

242 
	`MAX
((
	`xfs_ˇlc_öode_ªs
(
mp
, 1) +

243 
	`xfs_ˇlc_buf_ªs
(
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_DATA_FORK
) + 1,

244 
	`XFS_FSB_TO_B
(
mp
, 1))),

245 (
	`xfs_ˇlc_buf_ªs
(9, 
mp
->
m_sb
.
sb_£˘size
) +

246 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 4),

247 
	`XFS_FSB_TO_B
(
mp
, 1)) +

248 
	`xfs_ˇlc_buf_ªs
(5, 0) +

249 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 1),

250 
	`XFS_FSB_TO_B
(
mp
, 1)) +

251 
	`xfs_ˇlc_buf_ªs
(2 + 
mp
->
m_üŒoc_blks
 +

252 
mp
->
m_ö_maxÀvñs
, 0)));

253 
	}
}

267 
STATIC
 
uöt


268 
	$xfs_ˇlc_ª«me_ª£rv©i⁄
(

269 
xfs_mou¡
 *
mp
)

271  
	`XFS_DQUOT_LOGRES
(
mp
) +

272 
	`MAX
((
	`xfs_ˇlc_öode_ªs
(
mp
, 4) +

273 
	`xfs_ˇlc_buf_ªs
(2 * 
	`XFS_DIROP_LOG_COUNT
(
mp
),

274 
	`XFS_FSB_TO_B
(
mp
, 1))),

275 (
	`xfs_ˇlc_buf_ªs
(7, 
mp
->
m_sb
.
sb_£˘size
) +

276 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 3),

277 
	`XFS_FSB_TO_B
(
mp
, 1))));

278 
	}
}

285 
STATIC
 
uöt


286 
	$xfs_ˇlc_iu∆ök_ªmove_ª£rv©i⁄
(

287 
xfs_mou¡
 *
mp
)

289  
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_£˘size
) +

290 
	`max_t
(
uöt
, 
	`XFS_FSB_TO_B
(
mp
, 1), mp->
m_öode_˛u°î_size
);

291 
	}
}

305 
STATIC
 
uöt


306 
	$xfs_ˇlc_lök_ª£rv©i⁄
(

307 
xfs_mou¡
 *
mp
)

309  
	`XFS_DQUOT_LOGRES
(
mp
) +

310 
	`xfs_ˇlc_iu∆ök_ªmove_ª£rv©i⁄
(
mp
) +

311 
	`MAX
((
	`xfs_ˇlc_öode_ªs
(
mp
, 2) +

312 
	`xfs_ˇlc_buf_ªs
(
	`XFS_DIROP_LOG_COUNT
(
mp
),

313 
	`XFS_FSB_TO_B
(
mp
, 1))),

314 (
	`xfs_ˇlc_buf_ªs
(3, 
mp
->
m_sb
.
sb_£˘size
) +

315 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 1),

316 
	`XFS_FSB_TO_B
(
mp
, 1))));

317 
	}
}

324 
STATIC
 
uöt


325 
	$xfs_ˇlc_iu∆ök_add_ª£rv©i⁄
(
xfs_mou¡_t
 *
mp
)

327  
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_£˘size
) +

328 
	`xfs_ˇlc_öode_ªs
(
mp
, 1);

329 
	}
}

343 
STATIC
 
uöt


344 
	$xfs_ˇlc_ªmove_ª£rv©i⁄
(

345 
xfs_mou¡
 *
mp
)

347  
	`XFS_DQUOT_LOGRES
(
mp
) +

348 
	`xfs_ˇlc_iu∆ök_add_ª£rv©i⁄
(
mp
) +

349 
	`MAX
((
	`xfs_ˇlc_öode_ªs
(
mp
, 1) +

350 
	`xfs_ˇlc_buf_ªs
(
	`XFS_DIROP_LOG_COUNT
(
mp
),

351 
	`XFS_FSB_TO_B
(
mp
, 1))),

352 (
	`xfs_ˇlc_buf_ªs
(4, 
mp
->
m_sb
.
sb_£˘size
) +

353 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 2),

354 
	`XFS_FSB_TO_B
(
mp
, 1))));

355 
	}
}

373 
STATIC
 
uöt


374 
	$xfs_ˇlc_¸óã_ªsv_modify
(

375 
xfs_mou¡
 *
mp
)

377  
	`xfs_ˇlc_öode_ªs
(
mp
, 2) +

378 
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_£˘size
) +

379 (
uöt
)
	`XFS_FSB_TO_B
(
mp
, 1) +

380 
	`xfs_ˇlc_buf_ªs
(
	`XFS_DIROP_LOG_COUNT
(
mp
), 
	`XFS_FSB_TO_B
(mp, 1)) +

381 
	`xfs_ˇlc_föobt_ªs
(
mp
, 1, 1);

382 
	}
}

392 
STATIC
 
uöt


393 
	$xfs_ˇlc_¸óã_ªsv_Æloc
(

394 
xfs_mou¡
 *
mp
)

396  
	`xfs_ˇlc_buf_ªs
(2, 
mp
->
m_sb
.
sb_£˘size
) +

397 
mp
->
m_sb
.
sb_£˘size
 +

398 
	`xfs_ˇlc_buf_ªs
(
mp
->
m_üŒoc_blks
, 
	`XFS_FSB_TO_B
(mp, 1)) +

399 
	`xfs_ˇlc_buf_ªs
(
mp
->
m_ö_maxÀvñs
, 
	`XFS_FSB_TO_B
(mp, 1)) +

400 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 1),

401 
	`XFS_FSB_TO_B
(
mp
, 1));

402 
	}
}

404 
STATIC
 
uöt


405 
	$__xfs_ˇlc_¸óã_ª£rv©i⁄
(

406 
xfs_mou¡
 *
mp
)

408  
	`XFS_DQUOT_LOGRES
(
mp
) +

409 
	`MAX
(
	`xfs_ˇlc_¸óã_ªsv_Æloc
(
mp
),

410 
	`xfs_ˇlc_¸óã_ªsv_modify
(
mp
));

411 
	}
}

421 
STATIC
 
uöt


422 
	$xfs_ˇlc_i¸óã_ªsv_Æloc
(

423 
xfs_mou¡
 *
mp
)

425  
	`xfs_ˇlc_buf_ªs
(2, 
mp
->
m_sb
.
sb_£˘size
) +

426 
mp
->
m_sb
.
sb_£˘size
 +

427 
	`xfs_ˇlc_buf_ªs
(
mp
->
m_ö_maxÀvñs
, 
	`XFS_FSB_TO_B
(mp, 1)) +

428 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 1),

429 
	`XFS_FSB_TO_B
(
mp
, 1)) +

430 
	`xfs_ˇlc_föobt_ªs
(
mp
, 0, 0);

431 
	}
}

433 
STATIC
 
uöt


434 
	$xfs_ˇlc_i¸óã_ª£rv©i⁄
(
xfs_mou¡_t
 *
mp
)

436  
	`XFS_DQUOT_LOGRES
(
mp
) +

437 
	`MAX
(
	`xfs_ˇlc_i¸óã_ªsv_Æloc
(
mp
),

438 
	`xfs_ˇlc_¸óã_ªsv_modify
(
mp
));

439 
	}
}

441 
STATIC
 
uöt


442 
	$xfs_ˇlc_¸óã_ª£rv©i⁄
(

443 
xfs_mou¡
 *
mp
)

445 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

446  
	`xfs_ˇlc_i¸óã_ª£rv©i⁄
(
mp
);

447  
	`__xfs_ˇlc_¸óã_ª£rv©i⁄
(
mp
);

449 
	}
}

451 
STATIC
 
uöt


452 
	$xfs_ˇlc_¸óã_tmpfûe_ª£rv©i⁄
(

453 
xfs_mou¡
 *
mp
)

455 
uöt
 
ªs
 = 
	`XFS_DQUOT_LOGRES
(
mp
);

457 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

458 
ªs
 +
	`xfs_ˇlc_i¸óã_ªsv_Æloc
(
mp
);

460 
ªs
 +
	`xfs_ˇlc_¸óã_ªsv_Æloc
(
mp
);

462  
ªs
 + 
	`xfs_ˇlc_iu∆ök_add_ª£rv©i⁄
(
mp
);

463 
	}
}

468 
STATIC
 
uöt


469 
	$xfs_ˇlc_mkdú_ª£rv©i⁄
(

470 
xfs_mou¡
 *
mp
)

472  
	`xfs_ˇlc_¸óã_ª£rv©i⁄
(
mp
);

473 
	}
}

481 
STATIC
 
uöt


482 
	$xfs_ˇlc_symlök_ª£rv©i⁄
(

483 
xfs_mou¡
 *
mp
)

485  
	`xfs_ˇlc_¸óã_ª£rv©i⁄
(
mp
) +

486 
	`xfs_ˇlc_buf_ªs
(1, 
MAXPATHLEN
);

487 
	}
}

500 
STATIC
 
uöt


501 
	$xfs_ˇlc_i‰ì_ª£rv©i⁄
(

502 
xfs_mou¡
 *
mp
)

504  
	`XFS_DQUOT_LOGRES
(
mp
) +

505 
	`xfs_ˇlc_öode_ªs
(
mp
, 1) +

506 
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_£˘size
) +

507 
	`xfs_ˇlc_buf_ªs
(1, 
	`XFS_FSB_TO_B
(
mp
, 1)) +

508 
	`xfs_ˇlc_iu∆ök_ªmove_ª£rv©i⁄
(
mp
) +

509 
	`xfs_ˇlc_buf_ªs
(1, 0) +

510 
	`xfs_ˇlc_buf_ªs
(2 + 
mp
->
m_üŒoc_blks
 +

511 
mp
->
m_ö_maxÀvñs
, 0) +

512 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 1),

513 
	`XFS_FSB_TO_B
(
mp
, 1)) +

514 
	`xfs_ˇlc_föobt_ªs
(
mp
, 0, 1);

515 
	}
}

521 
STATIC
 
uöt


522 
	$xfs_ˇlc_ich™ge_ª£rv©i⁄
(

523 
xfs_mou¡
 *
mp
)

525  
	`XFS_DQUOT_LOGRES
(
mp
) +

526 
	`xfs_ˇlc_öode_ªs
(
mp
, 1) +

527 
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_£˘size
);

529 
	}
}

537 
STATIC
 
uöt


538 
	$xfs_ˇlc_growd©a_ª£rv©i⁄
(

539 
xfs_mou¡
 *
mp
)

541  
	`xfs_ˇlc_buf_ªs
(3, 
mp
->
m_sb
.
sb_£˘size
) +

542 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 1),

543 
	`XFS_FSB_TO_B
(
mp
, 1));

544 
	}
}

556 
STATIC
 
uöt


557 
	$xfs_ˇlc_growπÆloc_ª£rv©i⁄
(

558 
xfs_mou¡
 *
mp
)

560  
	`xfs_ˇlc_buf_ªs
(2, 
mp
->
m_sb
.
sb_£˘size
) +

561 
	`xfs_ˇlc_buf_ªs
(
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_DATA_FORK
),

562 
	`XFS_FSB_TO_B
(
mp
, 1)) +

563 
	`xfs_ˇlc_öode_ªs
(
mp
, 1) +

564 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 1),

565 
	`XFS_FSB_TO_B
(
mp
, 1));

566 
	}
}

573 
STATIC
 
uöt


574 
	$xfs_ˇlc_growπzîo_ª£rv©i⁄
(

575 
xfs_mou¡
 *
mp
)

577  
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_blocksize
);

578 
	}
}

590 
STATIC
 
uöt


591 
	$xfs_ˇlc_growπ‰ì_ª£rv©i⁄
(

592 
xfs_mou¡
 *
mp
)

594  
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_£˘size
) +

595 
	`xfs_ˇlc_öode_ªs
(
mp
, 2) +

596 
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_blocksize
) +

597 
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_rsumsize
);

598 
	}
}

604 
STATIC
 
uöt


605 
	$xfs_ˇlc_swrôe_ª£rv©i⁄
(

606 
xfs_mou¡
 *
mp
)

608  
	`xfs_ˇlc_öode_ªs
(
mp
, 1);

609 
	}
}

615 
STATIC
 
uöt


616 
	$xfs_ˇlc_wrôeid_ª£rv©i⁄
(

617 
xfs_mou¡
 *
mp
)

619  
	`xfs_ˇlc_öode_ªs
(
mp
, 1);

620 
	}
}

630 
STATIC
 
uöt


631 
	$xfs_ˇlc_addaf‹k_ª£rv©i⁄
(

632 
xfs_mou¡
 *
mp
)

634  
	`XFS_DQUOT_LOGRES
(
mp
) +

635 
	`xfs_ˇlc_öode_ªs
(
mp
, 1) +

636 
	`xfs_ˇlc_buf_ªs
(2, 
mp
->
m_sb
.
sb_£˘size
) +

637 
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_dú_geo
->
blksize
) +

638 
	`xfs_ˇlc_buf_ªs
(
	`XFS_DAENTER_BMAP1B
(
mp
, 
XFS_DATA_FORK
) + 1,

639 
	`XFS_FSB_TO_B
(
mp
, 1)) +

640 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 1),

641 
	`XFS_FSB_TO_B
(
mp
, 1));

642 
	}
}

655 
STATIC
 
uöt


656 
	$xfs_ˇlc_©åövÆ_ª£rv©i⁄
(

657 
xfs_mou¡
 *
mp
)

659  
	`MAX
((
	`xfs_ˇlc_öode_ªs
(
mp
, 1) +

660 
	`xfs_ˇlc_buf_ªs
(
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_ATTR_FORK
),

661 
	`XFS_FSB_TO_B
(
mp
, 1))),

662 (
	`xfs_ˇlc_buf_ªs
(9, 
mp
->
m_sb
.
sb_£˘size
) +

663 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 4),

664 
	`XFS_FSB_TO_B
(
mp
, 1))));

665 
	}
}

678 
STATIC
 
uöt


679 
	$xfs_ˇlc_©å£tm_ª£rv©i⁄
(

680 
xfs_mou¡
 *
mp
)

682  
	`XFS_DQUOT_LOGRES
(
mp
) +

683 
	`xfs_ˇlc_öode_ªs
(
mp
, 1) +

684 
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_£˘size
) +

685 
	`xfs_ˇlc_buf_ªs
(
XFS_DA_NODE_MAXDEPTH
, 
	`XFS_FSB_TO_B
(
mp
, 1));

686 
	}
}

698 
STATIC
 
uöt


699 
	$xfs_ˇlc_©å£åt_ª£rv©i⁄
(

700 
xfs_mou¡
 *
mp
)

702  
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_£˘size
) +

703 
	`xfs_ˇlc_buf_ªs
(
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_ATTR_FORK
),

704 
	`XFS_FSB_TO_B
(
mp
, 1));

705 
	}
}

718 
STATIC
 
uöt


719 
	$xfs_ˇlc_©årm_ª£rv©i⁄
(

720 
xfs_mou¡
 *
mp
)

722  
	`XFS_DQUOT_LOGRES
(
mp
) +

723 
	`MAX
((
	`xfs_ˇlc_öode_ªs
(
mp
, 1) +

724 
	`xfs_ˇlc_buf_ªs
(
XFS_DA_NODE_MAXDEPTH
,

725 
	`XFS_FSB_TO_B
(
mp
, 1)) +

726 (
uöt
)
	`XFS_FSB_TO_B
(
mp
,

727 
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_ATTR_FORK
)) +

728 
	`xfs_ˇlc_buf_ªs
(
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_DATA_FORK
), 0)),

729 (
	`xfs_ˇlc_buf_ªs
(5, 
mp
->
m_sb
.
sb_£˘size
) +

730 
	`xfs_ˇlc_buf_ªs
(
	`xfs_Æloc‰ì_log_cou¡
(
mp
, 2),

731 
	`XFS_FSB_TO_B
(
mp
, 1))));

732 
	}
}

737 
STATIC
 
uöt


738 
	$xfs_ˇlc_˛ór_agi_buckë_ª£rv©i⁄
(

739 
xfs_mou¡
 *
mp
)

741  
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_£˘size
);

742 
	}
}

748 
STATIC
 
uöt


749 
	$xfs_ˇlc_qm_£tqlim_ª£rv©i⁄
(

750 
xfs_mou¡
 *
mp
)

752  
	`xfs_ˇlc_buf_ªs
(1, (
xfs_disk_dquŸ
));

753 
	}
}

760 
STATIC
 
uöt


761 
	$xfs_ˇlc_qm_dqÆloc_ª£rv©i⁄
(

762 
xfs_mou¡
 *
mp
)

764  
	`xfs_ˇlc_wrôe_ª£rv©i⁄
(
mp
) +

765 
	`xfs_ˇlc_buf_ªs
(1,

766 
	`XFS_FSB_TO_B
(
mp
, 
XFS_DQUOT_CLUSTER_SIZE_FSB
) - 1);

767 
	}
}

774 
STATIC
 
uöt


775 
	$xfs_ˇlc_qm_quŸaoff_ª£rv©i⁄
(

776 
xfs_mou¡
 *
mp
)

778  (
xfs_qoff_logôem
) * 2 +

779 
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_£˘size
);

780 
	}
}

786 
STATIC
 
uöt


787 
	$xfs_ˇlc_qm_quŸaoff_íd_ª£rv©i⁄
(

788 
xfs_mou¡
 *
mp
)

790  (
xfs_qoff_logôem
) * 2;

791 
	}
}

797 
STATIC
 
uöt


798 
	$xfs_ˇlc_sb_ª£rv©i⁄
(

799 
xfs_mou¡
 *
mp
)

801  
	`xfs_ˇlc_buf_ªs
(1, 
mp
->
m_sb
.
sb_£˘size
);

802 
	}
}

805 
	$xfs_å™s_ªsv_ˇlc
(

806 
xfs_mou¡
 *
mp
,

807 
xfs_å™s_ªsv
 *
ª•
)

813 
ª•
->
å_wrôe
.
å_logªs
 = 
	`xfs_ˇlc_wrôe_ª£rv©i⁄
(
mp
);

814 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

815 
ª•
->
å_wrôe
.
å_logcou¡
 = 
XFS_WRITE_LOG_COUNT_REFLINK
;

817 
ª•
->
å_wrôe
.
å_logcou¡
 = 
XFS_WRITE_LOG_COUNT
;

818 
ª•
->
å_wrôe
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

820 
ª•
->
å_ôrunˇã
.
å_logªs
 = 
	`xfs_ˇlc_ôrunˇã_ª£rv©i⁄
(
mp
);

821 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

822 
ª•
->
å_ôrunˇã
.
å_logcou¡
 =

823 
XFS_ITRUNCATE_LOG_COUNT_REFLINK
;

825 
ª•
->
å_ôrunˇã
.
å_logcou¡
 = 
XFS_ITRUNCATE_LOG_COUNT
;

826 
ª•
->
å_ôrunˇã
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

828 
ª•
->
å_ª«me
.
å_logªs
 = 
	`xfs_ˇlc_ª«me_ª£rv©i⁄
(
mp
);

829 
ª•
->
å_ª«me
.
å_logcou¡
 = 
XFS_RENAME_LOG_COUNT
;

830 
ª•
->
å_ª«me
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

832 
ª•
->
å_lök
.
å_logªs
 = 
	`xfs_ˇlc_lök_ª£rv©i⁄
(
mp
);

833 
ª•
->
å_lök
.
å_logcou¡
 = 
XFS_LINK_LOG_COUNT
;

834 
ª•
->
å_lök
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

836 
ª•
->
å_ªmove
.
å_logªs
 = 
	`xfs_ˇlc_ªmove_ª£rv©i⁄
(
mp
);

837 
ª•
->
å_ªmove
.
å_logcou¡
 = 
XFS_REMOVE_LOG_COUNT
;

838 
ª•
->
å_ªmove
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

840 
ª•
->
å_symlök
.
å_logªs
 = 
	`xfs_ˇlc_symlök_ª£rv©i⁄
(
mp
);

841 
ª•
->
å_symlök
.
å_logcou¡
 = 
XFS_SYMLINK_LOG_COUNT
;

842 
ª•
->
å_symlök
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

844 
ª•
->
å_¸óã
.
å_logªs
 = 
	`xfs_ˇlc_¸óã_ª£rv©i⁄
(
mp
);

845 
ª•
->
å_¸óã
.
å_logcou¡
 = 
XFS_CREATE_LOG_COUNT
;

846 
ª•
->
å_¸óã
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

848 
ª•
->
å_¸óã_tmpfûe
.
å_logªs
 =

849 
	`xfs_ˇlc_¸óã_tmpfûe_ª£rv©i⁄
(
mp
);

850 
ª•
->
å_¸óã_tmpfûe
.
å_logcou¡
 = 
XFS_CREATE_TMPFILE_LOG_COUNT
;

851 
ª•
->
å_¸óã_tmpfûe
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

853 
ª•
->
å_mkdú
.
å_logªs
 = 
	`xfs_ˇlc_mkdú_ª£rv©i⁄
(
mp
);

854 
ª•
->
å_mkdú
.
å_logcou¡
 = 
XFS_MKDIR_LOG_COUNT
;

855 
ª•
->
å_mkdú
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

857 
ª•
->
å_i‰ì
.
å_logªs
 = 
	`xfs_ˇlc_i‰ì_ª£rv©i⁄
(
mp
);

858 
ª•
->
å_i‰ì
.
å_logcou¡
 = 
XFS_INACTIVE_LOG_COUNT
;

859 
ª•
->
å_i‰ì
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

861 
ª•
->
å_addaf‹k
.
å_logªs
 = 
	`xfs_ˇlc_addaf‹k_ª£rv©i⁄
(
mp
);

862 
ª•
->
å_addaf‹k
.
å_logcou¡
 = 
XFS_ADDAFORK_LOG_COUNT
;

863 
ª•
->
å_addaf‹k
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

865 
ª•
->
å_©åövÆ
.
å_logªs
 = 
	`xfs_ˇlc_©åövÆ_ª£rv©i⁄
(
mp
);

866 
ª•
->
å_©åövÆ
.
å_logcou¡
 = 
XFS_ATTRINVAL_LOG_COUNT
;

867 
ª•
->
å_©åövÆ
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

869 
ª•
->
å_©å£tm
.
å_logªs
 = 
	`xfs_ˇlc_©å£tm_ª£rv©i⁄
(
mp
);

870 
ª•
->
å_©å£tm
.
å_logcou¡
 = 
XFS_ATTRSET_LOG_COUNT
;

871 
ª•
->
å_©å£tm
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

873 
ª•
->
å_©årm
.
å_logªs
 = 
	`xfs_ˇlc_©årm_ª£rv©i⁄
(
mp
);

874 
ª•
->
å_©årm
.
å_logcou¡
 = 
XFS_ATTRRM_LOG_COUNT
;

875 
ª•
->
å_©årm
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

877 
ª•
->
å_growπÆloc
.
å_logªs
 = 
	`xfs_ˇlc_growπÆloc_ª£rv©i⁄
(
mp
);

878 
ª•
->
å_growπÆloc
.
å_logcou¡
 = 
XFS_DEFAULT_PERM_LOG_COUNT
;

879 
ª•
->
å_growπÆloc
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

881 
ª•
->
å_qm_dqÆloc
.
å_logªs
 = 
	`xfs_ˇlc_qm_dqÆloc_ª£rv©i⁄
(
mp
);

882 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

883 
ª•
->
å_qm_dqÆloc
.
å_logcou¡
 = 
XFS_WRITE_LOG_COUNT_REFLINK
;

885 
ª•
->
å_qm_dqÆloc
.
å_logcou¡
 = 
XFS_WRITE_LOG_COUNT
;

886 
ª•
->
å_qm_dqÆloc
.
å_logÊags
 |
XFS_TRANS_PERM_LOG_RES
;

892 
ª•
->
å_qm_£tqlim
.
å_logªs
 = 
	`xfs_ˇlc_qm_£tqlim_ª£rv©i⁄
(
mp
);

893 
ª•
->
å_qm_£tqlim
.
å_logcou¡
 = 
XFS_DEFAULT_LOG_COUNT
;

895 
ª•
->
å_qm_quŸaoff
.
å_logªs
 = 
	`xfs_ˇlc_qm_quŸaoff_ª£rv©i⁄
(
mp
);

896 
ª•
->
å_qm_quŸaoff
.
å_logcou¡
 = 
XFS_DEFAULT_LOG_COUNT
;

898 
ª•
->
å_qm_equŸaoff
.
å_logªs
 =

899 
	`xfs_ˇlc_qm_quŸaoff_íd_ª£rv©i⁄
(
mp
);

900 
ª•
->
å_qm_equŸaoff
.
å_logcou¡
 = 
XFS_DEFAULT_LOG_COUNT
;

902 
ª•
->
å_sb
.
å_logªs
 = 
	`xfs_ˇlc_sb_ª£rv©i⁄
(
mp
);

903 
ª•
->
å_sb
.
å_logcou¡
 = 
XFS_DEFAULT_LOG_COUNT
;

906 
ª•
->
å_ich™ge
.
å_logªs
 = 
	`xfs_ˇlc_ich™ge_ª£rv©i⁄
(
mp
);

907 
ª•
->
å_growd©a
.
å_logªs
 = 
	`xfs_ˇlc_growd©a_ª£rv©i⁄
(
mp
);

908 
ª•
->
å_fsyn˘s
.
å_logªs
 = 
	`xfs_ˇlc_swrôe_ª£rv©i⁄
(
mp
);

909 
ª•
->
å_wrôeid
.
å_logªs
 = 
	`xfs_ˇlc_wrôeid_ª£rv©i⁄
(
mp
);

910 
ª•
->
å_©å£åt
.
å_logªs
 = 
	`xfs_ˇlc_©å£åt_ª£rv©i⁄
(
mp
);

911 
ª•
->
å_˛óøgi
.
å_logªs
 = 
	`xfs_ˇlc_˛ór_agi_buckë_ª£rv©i⁄
(
mp
);

912 
ª•
->
å_growπzîo
.
å_logªs
 = 
	`xfs_ˇlc_growπzîo_ª£rv©i⁄
(
mp
);

913 
ª•
->
å_growπ‰ì
.
å_logªs
 = 
	`xfs_ˇlc_growπ‰ì_ª£rv©i⁄
(
mp
);

914 
	}
}

	@libxfs/xfs_trans_resv.h

18 #i‚def 
__XFS_TRANS_RESV_H__


19 
	#__XFS_TRANS_RESV_H__


	)

21 
	gxfs_mou¡
;

26 
	sxfs_å™s_ªs
 {

27 
uöt
 
	må_logªs
;

28 
	må_logcou¡
;

29 
	må_logÊags
;

33 
	sxfs_å™s_ªsv
 {

34 
xfs_å™s_ªs
 
	må_wrôe
;

35 
xfs_å™s_ªs
 
	må_ôrunˇã
;

36 
xfs_å™s_ªs
 
	må_ª«me
;

37 
xfs_å™s_ªs
 
	må_lök
;

38 
xfs_å™s_ªs
 
	må_ªmove
;

39 
xfs_å™s_ªs
 
	må_symlök
;

40 
xfs_å™s_ªs
 
	må_¸óã
;

41 
xfs_å™s_ªs
 
	må_¸óã_tmpfûe
;

42 
xfs_å™s_ªs
 
	må_mkdú
;

43 
xfs_å™s_ªs
 
	må_i‰ì
;

44 
xfs_å™s_ªs
 
	må_ich™ge
;

45 
xfs_å™s_ªs
 
	må_growd©a
;

46 
xfs_å™s_ªs
 
	må_addaf‹k
;

47 
xfs_å™s_ªs
 
	må_wrôeid
;

48 
xfs_å™s_ªs
 
	må_©åövÆ
;

50 
xfs_å™s_ªs
 
	må_©å£tm
;

52 
xfs_å™s_ªs
 
	må_©å£åt
;

54 
xfs_å™s_ªs
 
	må_©årm
;

55 
xfs_å™s_ªs
 
	må_˛óøgi
;

56 
xfs_å™s_ªs
 
	må_growπÆloc
;

57 
xfs_å™s_ªs
 
	må_growπzîo
;

58 
xfs_å™s_ªs
 
	må_growπ‰ì
;

59 
xfs_å™s_ªs
 
	må_qm_£tqlim
;

60 
xfs_å™s_ªs
 
	må_qm_dqÆloc
;

61 
xfs_å™s_ªs
 
	må_qm_quŸaoff
;

62 
xfs_å™s_ªs
 
	må_qm_equŸaoff
;

63 
xfs_å™s_ªs
 
	må_sb
;

64 
xfs_å™s_ªs
 
	må_fsyn˘s
;

68 
	#M_RES
(
mp
Ë(&(mp)->
m_ªsv
)

	)

77 
	#XFS_DIROP_LOG_RES
(
mp
) \

78 (
	`XFS_FSB_TO_B
(
mp
, 
	`XFS_DAENTER_BLOCKS
(mp, 
XFS_DATA_FORK
)) + \

79 (
	`XFS_FSB_TO_B
(
mp
, 
	`XFS_DAENTER_BMAPS
(mp, 
XFS_DATA_FORK
Ë+ 1)))

	)

80 
	#XFS_DIROP_LOG_COUNT
(
mp
) \

81 (
	`XFS_DAENTER_BLOCKS
(
mp
, 
XFS_DATA_FORK
) + \

82 
	`XFS_DAENTER_BMAPS
(
mp
, 
XFS_DATA_FORK
Ë+ 1)

	)

87 
	#XFS_DEFAULT_LOG_COUNT
 1

	)

88 
	#XFS_DEFAULT_PERM_LOG_COUNT
 2

	)

89 
	#XFS_ITRUNCATE_LOG_COUNT
 2

	)

90 
	#XFS_ITRUNCATE_LOG_COUNT_REFLINK
 8

	)

91 
	#XFS_INACTIVE_LOG_COUNT
 2

	)

92 
	#XFS_CREATE_LOG_COUNT
 2

	)

93 
	#XFS_CREATE_TMPFILE_LOG_COUNT
 2

	)

94 
	#XFS_MKDIR_LOG_COUNT
 3

	)

95 
	#XFS_SYMLINK_LOG_COUNT
 3

	)

96 
	#XFS_REMOVE_LOG_COUNT
 2

	)

97 
	#XFS_LINK_LOG_COUNT
 2

	)

98 
	#XFS_RENAME_LOG_COUNT
 2

	)

99 
	#XFS_WRITE_LOG_COUNT
 2

	)

100 
	#XFS_WRITE_LOG_COUNT_REFLINK
 8

	)

101 
	#XFS_ADDAFORK_LOG_COUNT
 2

	)

102 
	#XFS_ATTRINVAL_LOG_COUNT
 1

	)

103 
	#XFS_ATTRSET_LOG_COUNT
 3

	)

104 
	#XFS_ATTRRM_LOG_COUNT
 3

	)

106 
xfs_å™s_ªsv_ˇlc
(
xfs_mou¡
 *
mp
, 
xfs_å™s_ªsv
 *
ª•
);

107 
uöt
 
xfs_Æloc‰ì_log_cou¡
(
xfs_mou¡
 *
mp
, uöà
num_›s
);

	@libxfs/xfs_trans_space.h

18 #i‚de‡
__XFS_TRANS_SPACE_H__


19 
	#__XFS_TRANS_SPACE_H__


	)

24 
	#XFS_MAX_CONTIG_RMAPS_PER_BLOCK
(
mp
) \

25 (((
mp
)->
m_rm≠_mxr
[0]Ë- ((mp)->
m_rm≠_mƒ
[0]))

	)

26 
	#XFS_MAX_CONTIG_EXTENTS_PER_BLOCK
(
mp
) \

27 (((
mp
)->
m_Æloc_mxr
[0]Ë- ((mp)->
m_Æloc_mƒ
[0]))

	)

28 
	#XFS_EXTENTADD_SPACE_RES
(
mp
,
w
Ë(
	`XFS_BM_MAXLEVELS
(mp,wË- 1)

	)

29 
	#XFS_NEXTENTADD_SPACE_RES
(
mp
,
b
,
w
)\

30 (((
b
 + 
	`XFS_MAX_CONTIG_EXTENTS_PER_BLOCK
(
mp
) - 1) / \

31 
	`XFS_MAX_CONTIG_EXTENTS_PER_BLOCK
(
mp
)) * \

32 
	`XFS_EXTENTADD_SPACE_RES
(
mp
,
w
))

	)

33 
	#XFS_SWAP_RMAP_SPACE_RES
(
mp
,
b
,
w
)\

34 (((
b
 + 
	`XFS_MAX_CONTIG_EXTENTS_PER_BLOCK
(
mp
) - 1) / \

35 
	`XFS_MAX_CONTIG_EXTENTS_PER_BLOCK
(
mp
)) * \

36 
	`XFS_EXTENTADD_SPACE_RES
(
mp
,
w
) + \

37 ((
b
 + 
	`XFS_MAX_CONTIG_RMAPS_PER_BLOCK
(
mp
) - 1) / \

38 
	`XFS_MAX_CONTIG_RMAPS_PER_BLOCK
(
mp
)) * \

39 (
mp
)->
m_rm≠_maxÀvñs
)

	)

40 
	#XFS_DAENTER_1B
(
mp
,
w
) \

41 ((
w
Ë=
XFS_DATA_FORK
 ? (
mp
)->
m_dú_geo
->
fsbcou¡
 : 1)

	)

42 
	#XFS_DAENTER_DBS
(
mp
,
w
) \

43 (
XFS_DA_NODE_MAXDEPTH
 + (((
w
Ë=
XFS_DATA_FORK
Ë? 2 : 0))

	)

44 
	#XFS_DAENTER_BLOCKS
(
mp
,
w
) \

45 (
	`XFS_DAENTER_1B
(
mp
,
w
Ë* 
	`XFS_DAENTER_DBS
(mp,w))

	)

46 
	#XFS_DAENTER_BMAP1B
(
mp
,
w
) \

47 
	`XFS_NEXTENTADD_SPACE_RES
(
mp
, 
	`XFS_DAENTER_1B
(mp, 
w
), w)

	)

48 
	#XFS_DAENTER_BMAPS
(
mp
,
w
) \

49 (
	`XFS_DAENTER_DBS
(
mp
,
w
Ë* 
	`XFS_DAENTER_BMAP1B
(mp,w))

	)

50 
	#XFS_DAENTER_SPACE_RES
(
mp
,
w
) \

51 (
	`XFS_DAENTER_BLOCKS
(
mp
,
w
Ë+ 
	`XFS_DAENTER_BMAPS
(mp,w))

	)

52 
	#XFS_DAREMOVE_SPACE_RES
(
mp
,
w
Ë
	`XFS_DAENTER_BMAPS
(mp,w)

	)

53 
	#XFS_DIRENTER_MAX_SPLIT
(
mp
,
∆
Ë1

	)

54 
	#XFS_DIRENTER_SPACE_RES
(
mp
,
∆
) \

55 (
	`XFS_DAENTER_SPACE_RES
(
mp
, 
XFS_DATA_FORK
) * \

56 
	`XFS_DIRENTER_MAX_SPLIT
(
mp
,
∆
))

	)

57 
	#XFS_DIRREMOVE_SPACE_RES
(
mp
) \

58 
	`XFS_DAREMOVE_SPACE_RES
(
mp
, 
XFS_DATA_FORK
)

	)

59 
	#XFS_IALLOC_SPACE_RES
(
mp
) \

60 ((
mp
)->
m_üŒoc_blks
 + \

61 (
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
) ? 2 : 1 * \

62 ((
mp
)->
m_ö_maxÀvñs
 - 1)))

	)

67 
	#XFS_ADDAFORK_SPACE_RES
(
mp
) \

68 ((
mp
)->
m_dú_geo
->
fsbcou¡
 + 
	`XFS_DAENTER_BMAP1B
(mp, 
XFS_DATA_FORK
))

	)

69 
	#XFS_ATTRRM_SPACE_RES
(
mp
) \

70 
	`XFS_DAREMOVE_SPACE_RES
(
mp
, 
XFS_ATTR_FORK
)

	)

72 
	#XFS_ATTRSET_SPACE_RES
(
mp
, 
v
) \

73 (
	`XFS_DAENTER_SPACE_RES
(
mp
, 
XFS_ATTR_FORK
Ë+ 
	`XFS_B_TO_FSB
(mp, 
v
))

	)

74 
	#XFS_CREATE_SPACE_RES
(
mp
,
∆
) \

75 (
	`XFS_IALLOC_SPACE_RES
(
mp
Ë+ 
	`XFS_DIRENTER_SPACE_RES
(mp,
∆
))

	)

76 
	#XFS_DIOSTRAT_SPACE_RES
(
mp
, 
v
) \

77 (
	`XFS_EXTENTADD_SPACE_RES
(
mp
, 
XFS_DATA_FORK
Ë+ (
v
))

	)

78 
	#XFS_GROWFS_SPACE_RES
(
mp
) \

79 (2 * (
mp
)->
m_ag_maxÀvñs
)

	)

80 
	#XFS_GROWFSRT_SPACE_RES
(
mp
,
b
) \

81 ((
b
Ë+ 
	`XFS_EXTENTADD_SPACE_RES
(
mp
, 
XFS_DATA_FORK
))

	)

82 
	#XFS_LINK_SPACE_RES
(
mp
,
∆
) \

83 
	`XFS_DIRENTER_SPACE_RES
(
mp
,
∆
)

	)

84 
	#XFS_MKDIR_SPACE_RES
(
mp
,
∆
) \

85 (
	`XFS_IALLOC_SPACE_RES
(
mp
Ë+ 
	`XFS_DIRENTER_SPACE_RES
(mp,
∆
))

	)

86 
	#XFS_QM_DQALLOC_SPACE_RES
(
mp
) \

87 (
	`XFS_EXTENTADD_SPACE_RES
(
mp
, 
XFS_DATA_FORK
) + \

88 
XFS_DQUOT_CLUSTER_SIZE_FSB
)

	)

89 
	#XFS_QM_QINOCREATE_SPACE_RES
(
mp
) \

90 
	`XFS_IALLOC_SPACE_RES
(
mp
)

	)

91 
	#XFS_REMOVE_SPACE_RES
(
mp
) \

92 
	`XFS_DIRREMOVE_SPACE_RES
(
mp
)

	)

93 
	#XFS_RENAME_SPACE_RES
(
mp
,
∆
) \

94 (
	`XFS_DIRREMOVE_SPACE_RES
(
mp
Ë+ 
	`XFS_DIRENTER_SPACE_RES
(mp,
∆
))

	)

95 
	#XFS_SYMLINK_SPACE_RES
(
mp
,
∆
,
b
) \

96 (
	`XFS_IALLOC_SPACE_RES
(
mp
Ë+ 
	`XFS_DIRENTER_SPACE_RES
(mp,
∆
Ë+ (
b
))

	)

97 
	#XFS_IFREE_SPACE_RES
(
mp
) \

98 (
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
Ë? (mp)->
m_ö_maxÀvñs
 : 0)

	)

	@libxfs/xfs_types.h

18 #i‚de‡
__XFS_TYPES_H__


19 
	#__XFS_TYPES_H__


	)

21 
__uöt32_t
 
	t¥id_t
;

23 
__uöt32_t
 
	txfs_agblock_t
;

24 
__uöt32_t
 
	txfs_agöo_t
;

25 
__uöt32_t
 
	txfs_exéí_t
;

26 
__uöt32_t
 
	txfs_agnumbî_t
;

27 
__öt32_t
 
	txfs_exäum_t
;

28 
__öt16_t
 
	txfs_´xäum_t
;

29 
__öt64_t
 
	txfs_fsize_t
;

30 
__uöt64_t
 
	txfs_ufsize_t
;

32 
__öt32_t
 
	txfs_sumöfo_t
;

33 
__öt32_t
 
	txfs_πw‹d_t
;

35 
__öt64_t
 
	txfs_l¢_t
;

36 
__öt32_t
 
	txfs_tid_t
;

38 
__uöt32_t
 
	txfs_dablk_t
;

39 
__uöt32_t
 
	txfs_dahash_t
;

41 
__uöt64_t
 
	txfs_fsblock_t
;

42 
__uöt64_t
 
	txfs_rfsblock_t
;

43 
__uöt64_t
 
	txfs_πblock_t
;

44 
__uöt64_t
 
	txfs_fûeoff_t
;

45 
__uöt64_t
 
	txfs_fûblks_t
;

47 
__öt64_t
 
	txfs_§tblock_t
;

48 
__öt64_t
 
	txfs_sfûoff_t
;

53 
	#NULLFSBLOCK
 ((
xfs_fsblock_t
)-1)

	)

54 
	#NULLRFSBLOCK
 ((
xfs_rfsblock_t
)-1)

	)

55 
	#NULLRTBLOCK
 ((
xfs_πblock_t
)-1)

	)

56 
	#NULLFILEOFF
 ((
xfs_fûeoff_t
)-1)

	)

58 
	#NULLAGBLOCK
 ((
xfs_agblock_t
)-1)

	)

59 
	#NULLAGNUMBER
 ((
xfs_agnumbî_t
)-1)

	)

61 
	#NULLCOMMITLSN
 ((
xfs_l¢_t
)-1)

	)

63 
	#NULLFSINO
 ((
xfs_öo_t
)-1)

	)

64 
	#NULLAGINO
 ((
xfs_agöo_t
)-1)

	)

69 
	#MAXEXTLEN
 ((
xfs_exéí_t
)0x001fffffË

	)

70 
	#MAXEXTNUM
 ((
xfs_exäum_t
)0x7fffffffË

	)

71 
	#MAXAEXTNUM
 ((
xfs_´xäum_t
)0x7fffË

	)

80 
	#XFS_MIN_BLOCKSIZE_LOG
 9

	)

81 
	#XFS_MAX_BLOCKSIZE_LOG
 16

	)

82 
	#XFS_MIN_BLOCKSIZE
 (1 << 
XFS_MIN_BLOCKSIZE_LOG
)

	)

83 
	#XFS_MAX_BLOCKSIZE
 (1 << 
XFS_MAX_BLOCKSIZE_LOG
)

	)

84 
	#XFS_MIN_CRC_BLOCKSIZE
 (1 << (
XFS_MIN_BLOCKSIZE_LOG
 + 1))

	)

85 
	#XFS_MIN_SECTORSIZE_LOG
 9

	)

86 
	#XFS_MAX_SECTORSIZE_LOG
 15

	)

87 
	#XFS_MIN_SECTORSIZE
 (1 << 
XFS_MIN_SECTORSIZE_LOG
)

	)

88 
	#XFS_MAX_SECTORSIZE
 (1 << 
XFS_MAX_SECTORSIZE_LOG
)

	)

93 
	#XFS_DATA_FORK
 0

	)

94 
	#XFS_ATTR_FORK
 1

	)

95 
	#XFS_COW_FORK
 2

	)

100 
	#MINDBTPTRS
 3

	)

101 
	#MINABTPTRS
 2

	)

107 
	#MAXNAMELEN
 256

	)

110 
	mXFS_LOOKUP_EQi
, 
	mXFS_LOOKUP_LEi
, 
	mXFS_LOOKUP_GEi


111 } 
	txfs_lookup_t
;

114 
	mXFS_BTNUM_BNOi
, 
	mXFS_BTNUM_CNTi
, 
	mXFS_BTNUM_RMAPi
, 
	mXFS_BTNUM_BMAPi
,

115 
	mXFS_BTNUM_INOi
, 
	mXFS_BTNUM_FINOi
, 
	mXFS_BTNUM_REFCi
, 
	mXFS_BTNUM_MAX


116 } 
	txfs_bäum_t
;

118 
	sxfs_«me
 {

119 c⁄° *
	m«me
;

120 
	mÀn
;

121 
	mty≥
;

128 
__uöt32_t
 
	txfs_dqid_t
;

133 
	#XFS_NBBYLOG
 3

	)

134 
	#XFS_WORDLOG
 2

	)

135 
	#XFS_NBWORDLOG
 (
XFS_NBBYLOG
 + 
XFS_WORDLOG
)

	)

136 
	#XFS_NBWORD
 (1 << 
XFS_NBWORDLOG
)

	)

137 
	#XFS_WORDMASK
 ((1 << 
XFS_WORDLOG
Ë- 1)

	)

	@libxlog/util.c

19 
	~"libxfs.h
"

20 
	~"libxlog.h
"

22 
	g¥öt_exô
;

23 
	g¥öt_skù_uuid
;

24 
	g¥öt_ªc‹d_hódî
;

25 
libxfs_öô_t
 
	gx
;

31 
	$xlog_is_dúty
(

32 
xfs_mou¡
 *
mp
,

33 
xlog
 *
log
,

34 
libxfs_öô_t
 *
x
,

35 
vîbo£
)

37 
îr‹
;

38 
xfs_daddr_t
 
hód_blk
, 
èû_blk
;

40 
	`mem£t
(
log
, 0, (*log));

43 
x
->
logBBsize
 = 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_logblocks
);

44 
x
->
logBB°¨t
 = 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
);

45 
x
->
lbsize
 = 
BBSIZE
;

46 i‡(
	`xfs_sb_vîsi⁄_has£˘‹
(&
mp
->
m_sb
))

47 
x
->
lbsize
 <<(
mp
->
m_sb
.
sb_log£˘log
 - 
BBSHIFT
);

49 
log
->
l_dev
 = 
mp
->
m_logdev_èrgp
;

50 
log
->
l_logBBsize
 = 
x
->
logBBsize
;

51 
log
->
l_logBB°¨t
 = 
x
->
logBB°¨t
;

52 
log
->
l_£˘BBsize
 = 
	`BTOBB
(
x
->
lbsize
);

53 
log
->
l_mp
 = 
mp
;

54 i‡(
	`xfs_sb_vîsi⁄_has£˘‹
(&
mp
->
m_sb
)) {

55 
log
->
l_£˘bb_log
 = 
mp
->
m_sb
.
sb_log£˘log
 - 
BBSHIFT
;

56 
	`ASSERT
(
log
->
l_£˘bb_log
 <
mp
->
m_£˘bb_log
);

58 
	`ASSERT
(
log
->
l_£˘bb_log
 == 0 ||

59 
log
->
l_logBB°¨t
 == 0 ||

60 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
));

61 
	`ASSERT
(
mp
->
m_sb
.
sb_log£˘log
 >
BBSHIFT
);

63 
log
->
l_£˘bb_mask
 = (1 <<Üog->
l_£˘bb_log
) - 1;

65 
îr‹
 = 
	`xlog_föd_èû
(
log
, &
hód_blk
, &
èû_blk
);

66 i‡(
îr‹
) {

67 
	`xlog_w¨n
(
	`_
("%s: cannot findÜog head/tail "

69 
__func__
, 
îr‹
);

73 i‡(
vîbo£
)

74 
	`xlog_w¨n
(

75 
	`_
("%s: hód block %" 
PRId64
 "Åail block %" PRId64 "\n"),

76 
__func__
, 
hód_blk
, 
èû_blk
);

78 i‡(
hód_blk
 !
èû_blk
)

82 
	}
}

85 
	$hódî_check_uuid
(
xfs_mou¡_t
 *
mp
, 
xlog_ªc_hódî_t
 *
hód
)

87 
uu_log
[64], 
uu_sb
[64];

89 i‡(
¥öt_skù_uuid
)

91 i‡(!
	`∂©f‹m_uuid_com∑ª
(&
mp
->
m_sb
.
sb_uuid
, &
hód
->
h_fs_uuid
))

94 
	`∂©f‹m_uuid_u≈¨£
(&
mp
->
m_sb
.
sb_uuid
, 
uu_sb
);

95 
	`∂©f‹m_uuid_u≈¨£
(&
hód
->
h_fs_uuid
, 
uu_log
);

97 
	`¥ötf
(
	`_
("* ERROR: mismatched uuid inÜog\n"

99 
uu_sb
, 
uu_log
);

101 
	`mem˝y
(&
mp
->
m_sb
.
sb_uuid
, &
hód
->
h_fs_uuid
, (
uuid_t
));

104 
	}
}

107 
	$xlog_hódî_check_ªcovî
(
xfs_mou¡_t
 *
mp
, 
xlog_ªc_hódî_t
 *
hód
)

109 i‡(
¥öt_ªc‹d_hódî
)

110 
	`¥ötf
(
	`_
("\nLOG REC AT LSN cycle %d block %d (0x%x, 0x%x)\n"),

111 
	`CYCLE_LSN
(
	`be64_to_˝u
(
hód
->
h_l¢
)),

112 
	`BLOCK_LSN
(
	`be64_to_˝u
(
hód
->
h_l¢
)),

113 
	`CYCLE_LSN
(
	`be64_to_˝u
(
hód
->
h_l¢
)),

114 
	`BLOCK_LSN
(
	`be64_to_˝u
(
hód
->
h_l¢
)));

116 i‡(
	`be32_to_˝u
(
hód
->
h_magi˙o
Ë!
XLOG_HEADER_MAGIC_NUM
) {

118 
	`¥ötf
(
	`_
("* ERROR: bad magicÇumber inÜog header: 0x%x\n"),

119 
	`be32_to_˝u
(
hód
->
h_magi˙o
));

121 } i‡(
	`hódî_check_uuid
(
mp
, 
hód
)) {

125 } i‡(
	`be32_to_˝u
(
hód
->
h_fmt
Ë!
XLOG_FMT
) {

127 
	`¥ötf
(
	`_
("* ERROR:Üog format incompatible (log=%d, ours=%d)\n"),

128 
	`be32_to_˝u
(
hód
->
h_fmt
), 
XLOG_FMT
);

136 i‡(
¥öt_exô
)

137 
	`xlog_exô
(
	`_
("BadÜog"));

140 
	}
}

143 
	$xlog_hódî_check_mou¡
(
xfs_mou¡_t
 *
mp
, 
xlog_ªc_hódî_t
 *
hód
)

145 i‡(
	`∂©f‹m_uuid_is_nuŒ
(&
hód
->
h_fs_uuid
))  0;

146 i‡(
	`hódî_check_uuid
(
mp
, 
hód
)) {

148 i‡(
¥öt_exô
)

149 
	`xlog_exô
(
	`_
("BadÜog"));

152 
	}
}

158 
	$xlog_w¨n
(*
fmt
, ...)

160 
va_li°
 
≠
;

162 
	`va_°¨t
(
≠
, 
fmt
);

163 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

164 
	`Âuts
("\n", 
°dîr
);

165 
	`va_íd
(
≠
);

166 
	}
}

169 
	$xlog_exô
(*
fmt
, ...)

171 
va_li°
 
≠
;

173 
	`va_°¨t
(
≠
, 
fmt
);

174 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

175 
	`Âuts
("\n", 
°dîr
);

176 
	`va_íd
(
≠
);

177 
	`exô
(1);

178 
	}
}

181 
	$xlog_∑nic
(*
fmt
, ...)

183 
va_li°
 
≠
;

185 
	`va_°¨t
(
≠
, 
fmt
);

186 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

187 
	`Âuts
("\n", 
°dîr
);

188 
	`va_íd
(
≠
);

189 
	`ab‹t
();

190 
	}
}

	@libxlog/xfs_log_recover.c

18 
	~"libxfs.h
"

19 
	~"libxlog.h
"

21 
	#xfs_ªad⁄ly_bu·¨g
(
bu·¨g
Ë(0)

	)

24 
	#xlog_˛ór_°Æe_blocks
(
log
, 
èûl¢
) ({ \

25 (
èûl¢
) = (taillsn); \

27 })

	)

29 
	#BLK_AVG
(
blk1
, 
blk2
Ë((blk1+blk2Ë>> 1)

	)

37 
ölöe
 

38 
	$xlog_buf_bbcou¡_vÆid
(

39 
xlog
 *
log
,

40 
bbcou¡
)

42  
bbcou¡
 > 0 && bbcou¡ <
log
->
l_logBBsize
;

43 
	}
}

50 
xfs_buf_t
 *

51 
	$xlog_gë_bp
(

52 
xlog
 *
log
,

53 
nbblks
)

55 i‡(!
	`xlog_buf_bbcou¡_vÆid
(
log
, 
nbblks
)) {

56 
	`xfs_w¨n
(
log
->
l_mp
, "Invalid blockÜength (0x%x) for buffer",

57 
nbblks
);

58 
	`XFS_ERROR_REPORT
(
__func__
, 
XFS_ERRLEVEL_HIGH
, 
log
->
l_mp
);

59  
NULL
;

78 i‡(
nbblks
 > 1 && 
log
->
l_£˘BBsize
 > 1)

79 
nbblks
 +
log
->
l_£˘BBsize
;

80 
nbblks
 = 
	`round_up
“bblks, 
log
->
l_£˘BBsize
);

82  
	`libxfs_gëbu‰
(
log
->
l_dev
, (
xfs_daddr_t
)-1, 
nbblks
);

83 
	}
}

86 
	$xlog_put_bp
(

87 
xfs_buf_t
 *
bp
)

89 
	`libxfs_putbu‰
(
bp
);

90 
	}
}

96 
STATIC
 *

97 
	$xlog_Æign
(

98 
xlog
 *
log
,

99 
xfs_daddr_t
 
blk_no
,

100 
nbblks
,

101 
xfs_buf
 *
bp
)

103 
xfs_daddr_t
 
off£t
 = 
blk_no
 & ((xfs_daddr_t)
log
->
l_£˘BBsize
 - 1);

105 
	`ASSERT
(
off£t
 + 
nbblks
 <
bp
->
b_Àngth
);

106  
bp
->
b_addr
 + 
	`BBTOB
(
off£t
);

107 
	}
}

114 
	$xlog_bªad_nﬂlign
(

115 
xlog
 *
log
,

116 
xfs_daddr_t
 
blk_no
,

117 
nbblks
,

118 
xfs_buf
 *
bp
)

120 i‡(!
	`xlog_buf_bbcou¡_vÆid
(
log
, 
nbblks
)) {

121 
	`xfs_w¨n
(
log
->
l_mp
, "Invalid blockÜength (0x%x) for buffer",

122 
nbblks
);

123 
	`XFS_ERROR_REPORT
(
__func__
, 
XFS_ERRLEVEL_HIGH
, 
log
->
l_mp
);

124  
EFSCORRUPTED
;

127 
blk_no
 = 
	`round_down
(blk_no, 
log
->
l_£˘BBsize
);

128 
nbblks
 = 
	`round_up
“bblks, 
log
->
l_£˘BBsize
);

130 
	`ASSERT
(
nbblks
 > 0);

131 
	`ASSERT
(
	`BBTOB
(
nbblks
Ë<
	`XFS_BUF_SIZE
(
bp
));

133 
	`XFS_BUF_SET_ADDR
(
bp
, 
log
->
l_logBB°¨t
 + 
blk_no
);

134 
	`XFS_BUF_SET_COUNT
(
bp
, 
	`BBTOB
(
nbblks
));

135 
bp
->
b_îr‹
 = 0;

137  
	`libxfs_ªadbu‰
(
log
->
l_dev
, 
	`XFS_BUF_ADDR
(
bp
), bp, 
nbblks
, 0);

138 
	}
}

141 
	$xlog_bªad
(

142 
xlog
 *
log
,

143 
xfs_daddr_t
 
blk_no
,

144 
nbblks
,

145 
xfs_buf
 *
bp
,

146 **
off£t
)

148 
îr‹
;

150 
îr‹
 = 
	`xlog_bªad_nﬂlign
(
log
, 
blk_no
, 
nbblks
, 
bp
);

151 i‡(
îr‹
)

152  
îr‹
;

154 *
off£t
 = 
	`xlog_Æign
(
log
, 
blk_no
, 
nbblks
, 
bp
);

156 
	}
}

162 
STATIC
 

163 
	$xlog_bªad_off£t
(

164 
xlog
 *
log
,

165 
xfs_daddr_t
 
blk_no
,

166 
nbblks
,

167 
xfs_buf
 *
bp
,

168 *
off£t
)

170 *
‹ig_off£t
 = 
bp
->
b_addr
;

171 
‹ig_Àn
 = 
bp
->
b_bcou¡
;

172 
îr‹
, 
îr‹2
;

174 
îr‹
 = 
	`XFS_BUF_SET_PTR
(
bp
, 
off£t
, 
	`BBTOB
(
nbblks
));

175 i‡(
îr‹
)

176  
îr‹
;

178 
îr‹
 = 
	`xlog_bªad_nﬂlign
(
log
, 
blk_no
, 
nbblks
, 
bp
);

181 
îr‹2
 = 
	`XFS_BUF_SET_PTR
(
bp
, 
‹ig_off£t
, 
‹ig_Àn
);

182 i‡(
îr‹
)

183  
îr‹
;

184  
îr‹2
;

185 
	}
}

194 
	$xlog_föd_cy˛e_°¨t
(

195 
xlog
 *
log
,

196 
xfs_buf
 *
bp
,

197 
xfs_daddr_t
 
fú°_blk
,

198 
xfs_daddr_t
 *
œ°_blk
,

199 
uöt
 
cy˛e
)

201 *
off£t
;

202 
xfs_daddr_t
 
mid_blk
;

203 
xfs_daddr_t
 
íd_blk
;

204 
uöt
 
mid_cy˛e
;

205 
îr‹
;

207 
íd_blk
 = *
œ°_blk
;

208 
mid_blk
 = 
	`BLK_AVG
(
fú°_blk
, 
íd_blk
);

209 
mid_blk
 !
fú°_blk
 && mid_blk !
íd_blk
) {

210 
îr‹
 = 
	`xlog_bªad
(
log
, 
mid_blk
, 1, 
bp
, &
off£t
);

211 i‡(
îr‹
)

212  
îr‹
;

213 
mid_cy˛e
 = 
	`xlog_gë_cy˛e
(
off£t
);

214 i‡(
mid_cy˛e
 =
cy˛e
)

215 
íd_blk
 = 
mid_blk
;

217 
fú°_blk
 = 
mid_blk
;

218 
mid_blk
 = 
	`BLK_AVG
(
fú°_blk
, 
íd_blk
);

220 
	`ASSERT
((
mid_blk
 =
fú°_blk
 && mid_blk+1 =
íd_blk
) ||

221 (
mid_blk
 =
íd_blk
 && mid_blk-1 =
fú°_blk
));

223 *
œ°_blk
 = 
íd_blk
;

226 
	}
}

236 
STATIC
 

237 
	$xlog_föd_vîify_cy˛e
(

238 
xlog
 *
log
,

239 
xfs_daddr_t
 
°¨t_blk
,

240 
nbblks
,

241 
uöt
 
°›_⁄_cy˛e_no
,

242 
xfs_daddr_t
 *
√w_blk
)

244 
xfs_daddr_t
 
i
, 
j
;

245 
uöt
 
cy˛e
;

246 
xfs_buf_t
 *
bp
;

247 
bufblks
;

248 *
buf
 = 
NULL
;

249 
îr‹
 = 0;

257 
bufblks
 = 1 << 
	`ffs
(
nbblks
);

258 
bufblks
 > 
log
->
l_logBBsize
)

259 
bufblks
 >>= 1;

260 !(
bp
 = 
	`xlog_gë_bp
(
log
, 
bufblks
))) {

261 
bufblks
 >>= 1;

262 i‡(
bufblks
 < 
log
->
l_£˘BBsize
)

263  
ENOMEM
;

266 
i
 = 
°¨t_blk
; i < sèπ_blk + 
nbblks
; i +
bufblks
) {

267 
bcou¡
;

269 
bcou¡
 = 
	`mö
(
bufblks
, (
°¨t_blk
 + 
nbblks
 - 
i
));

271 
îr‹
 = 
	`xlog_bªad
(
log
, 
i
, 
bcou¡
, 
bp
, &
buf
);

272 i‡(
îr‹
)

273 
out
;

275 
j
 = 0; j < 
bcou¡
; j++) {

276 
cy˛e
 = 
	`xlog_gë_cy˛e
(
buf
);

277 i‡(
cy˛e
 =
°›_⁄_cy˛e_no
) {

278 *
√w_blk
 = 
i
+
j
;

279 
out
;

282 
buf
 +
BBSIZE
;

286 *
√w_blk
 = -1;

288 
out
:

289 
	`xlog_put_bp
(
bp
);

290  
îr‹
;

291 
	}
}

305 
STATIC
 

306 
	$xlog_föd_vîify_log_ªc‹d
(

307 
xlog
 *
log
,

308 
xfs_daddr_t
 
°¨t_blk
,

309 
xfs_daddr_t
 *
œ°_blk
,

310 
exåa_bblks
)

312 
xfs_daddr_t
 
i
;

313 
xfs_buf_t
 *
bp
;

314 *
off£t
 = 
NULL
;

315 
xlog_ªc_hódî_t
 *
hód
 = 
NULL
;

316 
îr‹
 = 0;

317 
smÆlmem
 = 0;

318 
num_blks
 = *
œ°_blk
 - 
°¨t_blk
;

319 
xhdrs
;

321 
	`ASSERT
(
°¨t_blk
 !0 || *
œ°_blk
 != start_blk);

323 i‡(!(
bp
 = 
	`xlog_gë_bp
(
log
, 
num_blks
))) {

324 i‡(!(
bp
 = 
	`xlog_gë_bp
(
log
, 1)))

325  
ENOMEM
;

326 
smÆlmem
 = 1;

328 
îr‹
 = 
	`xlog_bªad
(
log
, 
°¨t_blk
, 
num_blks
, 
bp
, &
off£t
);

329 i‡(
îr‹
)

330 
out
;

331 
off£t
 +((
num_blks
 - 1Ë<< 
BBSHIFT
);

334 
i
 = (*
œ°_blk
) - 1; i >= 0; i--) {

335 i‡(
i
 < 
°¨t_blk
) {

337 
	`xfs_w¨n
(
log
->
l_mp
,

339 
	`ASSERT
(0);

340 
îr‹
 = 
	`XFS_ERROR
(
EIO
);

341 
out
;

344 i‡(
smÆlmem
) {

345 
îr‹
 = 
	`xlog_bªad
(
log
, 
i
, 1, 
bp
, &
off£t
);

346 i‡(
îr‹
)

347 
out
;

350 
hód
 = (
xlog_ªc_hódî_t
 *)
off£t
;

352 i‡(
hód
->
h_magi˙o
 =
	`˝u_to_be32
(
XLOG_HEADER_MAGIC_NUM
))

355 i‡(!
smÆlmem
)

356 
off£t
 -
BBSIZE
;

364 i‡(
i
 == -1) {

365 
îr‹
 = -1;

366 
out
;

373 i‡((
îr‹
 = 
	`xlog_hódî_check_mou¡
(
log
->
l_mp
, 
hód
)))

374 
out
;

383 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
log
->
l_mp
->
m_sb
)) {

384 
uöt
 
h_size
 = 
	`be32_to_˝u
(
hód
->h_size);

386 
xhdrs
 = 
h_size
 / 
XLOG_HEADER_CYCLE_SIZE
;

387 i‡(
h_size
 % 
XLOG_HEADER_CYCLE_SIZE
)

388 
xhdrs
++;

390 
xhdrs
 = 1;

393 i‡(*
œ°_blk
 - 
i
 + 
exåa_bblks
 !=

394 
	`BTOBB
(
	`be32_to_˝u
(
hód
->
h_Àn
)Ë+ 
xhdrs
)

395 *
œ°_blk
 = 
i
;

397 
out
:

398 
	`xlog_put_bp
(
bp
);

399  
îr‹
;

400 
	}
}

415 
STATIC
 

416 
	$xlog_föd_hód
(

417 
xlog
 *
log
,

418 
xfs_daddr_t
 *
ªtu∫_hód_blk
)

420 
xfs_buf_t
 *
bp
;

421 *
off£t
;

422 
xfs_daddr_t
 
√w_blk
, 
fú°_blk
, 
°¨t_blk
, 
œ°_blk
, 
hód_blk
;

423 
num_sˇn_bblks
;

424 
uöt
 
fú°_hÆf_cy˛e
, 
œ°_hÆf_cy˛e
;

425 
uöt
 
°›_⁄_cy˛e
;

426 
îr‹
, 
log_bbnum
 = 
log
->
l_logBBsize
;

429 i‡((
îr‹
 = 
	`xlog_föd_zî€d
(
log
, &
fú°_blk
)) == -1) {

430 *
ªtu∫_hód_blk
 = 
fú°_blk
;

433 i‡(!
fú°_blk
) {

438 
	`xfs_w¨n
(
log
->
l_mp
, "totally zeroedÜog");

442 } i‡(
îr‹
) {

443 
	`xfs_w¨n
(
log
->
l_mp
, "emptyÜog check failed");

444  
îr‹
;

447 
fú°_blk
 = 0;

448 
bp
 = 
	`xlog_gë_bp
(
log
, 1);

449 i‡(!
bp
)

450  
ENOMEM
;

452 
îr‹
 = 
	`xlog_bªad
(
log
, 0, 1, 
bp
, &
off£t
);

453 i‡(
îr‹
)

454 
bp_îr
;

456 
fú°_hÆf_cy˛e
 = 
	`xlog_gë_cy˛e
(
off£t
);

458 
œ°_blk
 = 
hód_blk
 = 
log_bbnum
 - 1;

459 
îr‹
 = 
	`xlog_bªad
(
log
, 
œ°_blk
, 1, 
bp
, &
off£t
);

460 i‡(
îr‹
)

461 
bp_îr
;

463 
œ°_hÆf_cy˛e
 = 
	`xlog_gë_cy˛e
(
off£t
);

464 
	`ASSERT
(
œ°_hÆf_cy˛e
 != 0);

477 i‡(
fú°_hÆf_cy˛e
 =
œ°_hÆf_cy˛e
) {

503 
hód_blk
 = 
log_bbnum
;

504 
°›_⁄_cy˛e
 = 
œ°_hÆf_cy˛e
 - 1;

528 
°›_⁄_cy˛e
 = 
œ°_hÆf_cy˛e
;

529 i‡((
îr‹
 = 
	`xlog_föd_cy˛e_°¨t
(
log
, 
bp
, 
fú°_blk
,

530 &
hód_blk
, 
œ°_hÆf_cy˛e
)))

531 
bp_îr
;

541 
num_sˇn_bblks
 = 
	`XLOG_TOTAL_REC_SHIFT
(
log
);

542 i‡(
hód_blk
 >
num_sˇn_bblks
) {

547 
°¨t_blk
 = 
hód_blk
 - 
num_sˇn_bblks
;

548 i‡((
îr‹
 = 
	`xlog_föd_vîify_cy˛e
(
log
,

549 
°¨t_blk
, 
num_sˇn_bblks
,

550 
°›_⁄_cy˛e
, &
√w_blk
)))

551 
bp_îr
;

552 i‡(
√w_blk
 != -1)

553 
hód_blk
 = 
√w_blk
;

582 
	`ASSERT
(
hód_blk
 <
INT_MAX
 &&

583 (
xfs_daddr_t
Ë
num_sˇn_bblks
 >
hód_blk
);

584 
°¨t_blk
 = 
log_bbnum
 - (
num_sˇn_bblks
 - 
hód_blk
);

585 i‡((
îr‹
 = 
	`xlog_föd_vîify_cy˛e
(
log
, 
°¨t_blk
,

586 
num_sˇn_bblks
 - ()
hód_blk
,

587 (
°›_⁄_cy˛e
 - 1), &
√w_blk
)))

588 
bp_îr
;

589 i‡(
√w_blk
 != -1) {

590 
hód_blk
 = 
√w_blk
;

591 
vÆid©e_hód
;

599 
°¨t_blk
 = 0;

600 
	`ASSERT
(
hód_blk
 <
INT_MAX
);

601 i‡((
îr‹
 = 
	`xlog_föd_vîify_cy˛e
(
log
,

602 
°¨t_blk
, ()
hód_blk
,

603 
°›_⁄_cy˛e
, &
√w_blk
)))

604 
bp_îr
;

605 i‡(
√w_blk
 != -1)

606 
hód_blk
 = 
√w_blk
;

609 
vÆid©e_hód
:

614 
num_sˇn_bblks
 = 
	`XLOG_REC_SHIFT
(
log
);

615 i‡(
hód_blk
 >
num_sˇn_bblks
) {

616 
°¨t_blk
 = 
hód_blk
 - 
num_sˇn_bblks
;

619 i‡((
îr‹
 = 
	`xlog_föd_vîify_log_ªc‹d
(
log
, 
°¨t_blk
,

620 &
hód_blk
, 0)) == -1) {

621 
îr‹
 = 
	`XFS_ERROR
(
EIO
);

622 
bp_îr
;

623 } i‡(
îr‹
)

624 
bp_îr
;

626 
°¨t_blk
 = 0;

627 
	`ASSERT
(
hód_blk
 <
INT_MAX
);

628 i‡((
îr‹
 = 
	`xlog_föd_vîify_log_ªc‹d
(
log
, 
°¨t_blk
,

629 &
hód_blk
, 0)) == -1) {

631 
°¨t_blk
 = 
log_bbnum
 - (
num_sˇn_bblks
 - 
hód_blk
);

632 
√w_blk
 = 
log_bbnum
;

633 
	`ASSERT
(
°¨t_blk
 <
INT_MAX
 &&

634 (
xfs_daddr_t
Ë
log_bbnum
-
°¨t_blk
 >= 0);

635 
	`ASSERT
(
hód_blk
 <
INT_MAX
);

636 i‡((
îr‹
 = 
	`xlog_föd_vîify_log_ªc‹d
(
log
,

637 
°¨t_blk
, &
√w_blk
,

638 ()
hód_blk
)) == -1) {

639 
îr‹
 = 
	`XFS_ERROR
(
EIO
);

640 
bp_îr
;

641 } i‡(
îr‹
)

642 
bp_îr
;

643 i‡(
√w_blk
 !
log_bbnum
)

644 
hód_blk
 = 
√w_blk
;

645 } i‡(
îr‹
)

646 
bp_îr
;

649 
	`xlog_put_bp
(
bp
);

650 i‡(
hód_blk
 =
log_bbnum
)

651 *
ªtu∫_hód_blk
 = 0;

653 *
ªtu∫_hód_blk
 = 
hód_blk
;

662 
bp_îr
:

663 
	`xlog_put_bp
(
bp
);

665 i‡(
îr‹
)

666 
	`xfs_w¨n
(
log
->
l_mp
, "failedÅo findÜog head");

667  
îr‹
;

668 
	}
}

687 
	$xlog_föd_èû
(

688 
xlog
 *
log
,

689 
xfs_daddr_t
 *
hód_blk
,

690 
xfs_daddr_t
 *
èû_blk
)

692 
xlog_ªc_hódî_t
 *
rhód
;

693 
xlog_›_hódî_t
 *
›_hód
;

694 *
off£t
 = 
NULL
;

695 
xfs_buf_t
 *
bp
;

696 
îr‹
, 
i
, 
found
;

697 
xfs_daddr_t
 
umou¡_d©a_blk
;

698 
xfs_daddr_t
 
a·î_umou¡_blk
;

699 
xfs_l¢_t
 
èû_l¢
;

700 
hblks
;

702 
found
 = 0;

707 i‡((
îr‹
 = 
	`xlog_föd_hód
(
log
, 
hód_blk
)))

708  
îr‹
;

710 
bp
 = 
	`xlog_gë_bp
(
log
, 1);

711 i‡(!
bp
)

712  
ENOMEM
;

713 i‡(*
hód_blk
 == 0) {

714 
îr‹
 = 
	`xlog_bªad
(
log
, 0, 1, 
bp
, &
off£t
);

715 i‡(
îr‹
)

716 
d⁄e
;

718 i‡(
	`xlog_gë_cy˛e
(
off£t
) == 0) {

719 *
èû_blk
 = 0;

721 
d⁄e
;

728 
	`ASSERT
(*
hód_blk
 < 
INT_MAX
);

729 
i
 = ()(*
hód_blk
) - 1; i >= 0; i--) {

730 
îr‹
 = 
	`xlog_bªad
(
log
, 
i
, 1, 
bp
, &
off£t
);

731 i‡(
îr‹
)

732 
d⁄e
;

734 i‡(*(
__be32
 *)
off£t
 =
	`˝u_to_be32
(
XLOG_HEADER_MAGIC_NUM
)) {

735 
found
 = 1;

745 i‡(!
found
) {

746 
i
 = 
log
->
l_logBBsize
 - 1; i >()(*
hód_blk
); i--) {

747 
îr‹
 = 
	`xlog_bªad
(
log
, 
i
, 1, 
bp
, &
off£t
);

748 i‡(
îr‹
)

749 
d⁄e
;

751 i‡(*(
__be32
 *)
off£t
 ==

752 
	`˝u_to_be32
(
XLOG_HEADER_MAGIC_NUM
)) {

753 
found
 = 2;

758 i‡(!
found
) {

759 
	`xfs_w¨n
(
log
->
l_mp
, "%s: couldn'àföd syn¯ªc‹d", 
__func__
);

760 
	`xlog_put_bp
(
bp
);

761 
	`ASSERT
(0);

762  
	`XFS_ERROR
(
EIO
);

766 
rhód
 = (
xlog_ªc_hódî_t
 *)
off£t
;

767 *
èû_blk
 = 
	`BLOCK_LSN
(
	`be64_to_˝u
(
rhód
->
h_èû_l¢
));

779 
log
->
l_¥ev_block
 = 
i
;

780 
log
->
l_cuº_block
 = ()*
hód_blk
;

781 
log
->
l_cuº_cy˛e
 = 
	`be32_to_˝u
(
rhód
->
h_cy˛e
);

782 i‡(
found
 == 2)

783 
log
->
l_cuº_cy˛e
++;

784 
	`©omic64_£t
(&
log
->
l_èû_l¢
, 
	`be64_to_˝u
(
rhód
->
h_èû_l¢
));

785 
	`©omic64_£t
(&
log
->
l_œ°_sync_l¢
, 
	`be64_to_˝u
(
rhód
->
h_l¢
));

786 
	`xlog_assign_gø¡_hód
(&
log
->
l_ª£rve_hód
.
gø¡
,Üog->
l_cuº_cy˛e
,

787 
	`BBTOB
(
log
->
l_cuº_block
));

788 
	`xlog_assign_gø¡_hód
(&
log
->
l_wrôe_hód
.
gø¡
,Üog->
l_cuº_cy˛e
,

789 
	`BBTOB
(
log
->
l_cuº_block
));

802 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
log
->
l_mp
->
m_sb
)) {

803 
h_size
 = 
	`be32_to_˝u
(
rhód
->h_size);

804 
h_vîsi⁄
 = 
	`be32_to_˝u
(
rhód
->h_version);

806 i‡((
h_vîsi⁄
 & 
XLOG_VERSION_2
) &&

807 (
h_size
 > 
XLOG_HEADER_CYCLE_SIZE
)) {

808 
hblks
 = 
h_size
 / 
XLOG_HEADER_CYCLE_SIZE
;

809 i‡(
h_size
 % 
XLOG_HEADER_CYCLE_SIZE
)

810 
hblks
++;

812 
hblks
 = 1;

815 
hblks
 = 1;

817 
a·î_umou¡_blk
 = (
i
 + 
hblks
 + ()

818 
	`BTOBB
(
	`be32_to_˝u
(
rhód
->
h_Àn
))Ë% 
log
->
l_logBBsize
;

819 
èû_l¢
 = 
	`©omic64_ªad
(&
log
->
l_èû_l¢
);

820 i‡(*
hód_blk
 =
a·î_umou¡_blk
 &&

821 
	`be32_to_˝u
(
rhód
->
h_num_log›s
) == 1) {

822 
umou¡_d©a_blk
 = (
i
 + 
hblks
Ë% 
log
->
l_logBBsize
;

823 
îr‹
 = 
	`xlog_bªad
(
log
, 
umou¡_d©a_blk
, 1, 
bp
, &
off£t
);

824 i‡(
îr‹
)

825 
d⁄e
;

827 
›_hód
 = (
xlog_›_hódî_t
 *)
off£t
;

828 i‡(
›_hód
->
oh_Êags
 & 
XLOG_UNMOUNT_TRANS
) {

834 
	`xlog_assign_©omic_l¢
(&
log
->
l_èû_l¢
,

835 
log
->
l_cuº_cy˛e
, 
a·î_umou¡_blk
);

836 
	`xlog_assign_©omic_l¢
(&
log
->
l_œ°_sync_l¢
,

837 
log
->
l_cuº_cy˛e
, 
a·î_umou¡_blk
);

838 *
èû_blk
 = 
a·î_umou¡_blk
;

846 
log
->
l_mp
->
m_Êags
 |
XFS_MOUNT_WAS_CLEAN
;

869 i‡(!
	`xfs_ªad⁄ly_bu·¨g
(
log
->
l_mp
->
m_logdev_èrgp
))

870 
îr‹
 = 
	`xlog_˛ór_°Æe_blocks
(
log
, 
èû_l¢
);

872 
d⁄e
:

873 
	`xlog_put_bp
(
bp
);

875 i‡(
îr‹
)

876 
	`xfs_w¨n
(
log
->
l_mp
, "failedÅoÜocateÜogÅail");

877  
îr‹
;

878 
	}
}

897 
	$xlog_föd_zî€d
(

898 
xlog
 *
log
,

899 
xfs_daddr_t
 *
blk_no
)

901 
xfs_buf_t
 *
bp
;

902 *
off£t
;

903 
uöt
 
fú°_cy˛e
, 
œ°_cy˛e
;

904 
xfs_daddr_t
 
√w_blk
, 
œ°_blk
, 
°¨t_blk
;

905 
xfs_daddr_t
 
num_sˇn_bblks
;

906 
îr‹
, 
log_bbnum
 = 
log
->
l_logBBsize
;

908 *
blk_no
 = 0;

911 
bp
 = 
	`xlog_gë_bp
(
log
, 1);

912 i‡(!
bp
)

913  
ENOMEM
;

914 
îr‹
 = 
	`xlog_bªad
(
log
, 0, 1, 
bp
, &
off£t
);

915 i‡(
îr‹
)

916 
bp_îr
;

918 
fú°_cy˛e
 = 
	`xlog_gë_cy˛e
(
off£t
);

919 i‡(
fú°_cy˛e
 == 0) {

920 *
blk_no
 = 0;

921 
	`xlog_put_bp
(
bp
);

926 
îr‹
 = 
	`xlog_bªad
(
log
, 
log_bbnum
-1, 1, 
bp
, &
off£t
);

927 i‡(
îr‹
)

928 
bp_îr
;

930 
œ°_cy˛e
 = 
	`xlog_gë_cy˛e
(
off£t
);

931 i‡(
œ°_cy˛e
 != 0) {

932 
	`xlog_put_bp
(
bp
);

934 } i‡(
fú°_cy˛e
 != 1) {

940 
	`xfs_w¨n
(
log
->
l_mp
,

942 
îr‹
 = 
	`XFS_ERROR
(
EINVAL
);

943 
bp_îr
;

947 
œ°_blk
 = 
log_bbnum
-1;

948 i‡((
îr‹
 = 
	`xlog_föd_cy˛e_°¨t
(
log
, 
bp
, 0, &
œ°_blk
, 0)))

949 
bp_îr
;

957 
num_sˇn_bblks
 = 
	`XLOG_TOTAL_REC_SHIFT
(
log
);

958 
	`ASSERT
(
num_sˇn_bblks
 <
INT_MAX
);

960 i‡(
œ°_blk
 < 
num_sˇn_bblks
)

961 
num_sˇn_bblks
 = 
œ°_blk
;

962 
°¨t_blk
 = 
œ°_blk
 - 
num_sˇn_bblks
;

970 i‡((
îr‹
 = 
	`xlog_föd_vîify_cy˛e
(
log
, 
°¨t_blk
,

971 ()
num_sˇn_bblks
, 0, &
√w_blk
)))

972 
bp_îr
;

973 i‡(
√w_blk
 != -1)

974 
œ°_blk
 = 
√w_blk
;

980 i‡((
îr‹
 = 
	`xlog_föd_vîify_log_ªc‹d
(
log
, 
°¨t_blk
,

981 &
œ°_blk
, 0)) == -1) {

982 
îr‹
 = 
	`XFS_ERROR
(
EIO
);

983 
bp_îr
;

984 } i‡(
îr‹
)

985 
bp_îr
;

987 *
blk_no
 = 
œ°_blk
;

988 
bp_îr
:

989 
	`xlog_put_bp
(
bp
);

990 i‡(
îr‹
)

991  
îr‹
;

993 
	}
}

995 
STATIC
 
xlog_ªcovî_t
 *

996 
	$xlog_ªcovî_föd_tid
(

997 
hli°_hód
 *
hód
,

998 
xlog_tid_t
 
tid
)

1000 
xlog_ªcovî_t
 *
å™s
;

1001 
hli°_node
 *
n
;

1003 
	`hli°_f‹_óch_íåy
(
å™s
, 
n
, 
hód
, 
r_li°
) {

1004 i‡(
å™s
->
r_log_tid
 =
tid
)

1005  
å™s
;

1007  
NULL
;

1008 
	}
}

1010 
STATIC
 

1011 
	$xlog_ªcovî_√w_tid
(

1012 
hli°_hód
 *
hód
,

1013 
xlog_tid_t
 
tid
,

1014 
xfs_l¢_t
 
l¢
)

1016 
xlog_ªcovî_t
 *
å™s
;

1018 
å™s
 = 
	`kmem_zÆloc
((
xlog_ªcovî_t
), 
KM_SLEEP
);

1019 
å™s
->
r_log_tid
 = 
tid
;

1020 
å™s
->
r_l¢
 = 
l¢
;

1021 
	`INIT_LIST_HEAD
(&
å™s
->
r_ôemq
);

1023 
	`INIT_HLIST_NODE
(&
å™s
->
r_li°
);

1024 
	`hli°_add_hód
(&
å™s
->
r_li°
, 
hód
);

1025 
	}
}

1027 
STATIC
 

1028 
	$xlog_ªcovî_add_ôem
(

1029 
li°_hód
 *
hód
)

1031 
xlog_ªcovî_ôem_t
 *
ôem
;

1033 
ôem
 = 
	`kmem_zÆloc
((
xlog_ªcovî_ôem_t
), 
KM_SLEEP
);

1034 
	`INIT_LIST_HEAD
(&
ôem
->
ri_li°
);

1035 
	`li°_add_èû
(&
ôem
->
ri_li°
, 
hód
);

1036 
	}
}

1038 
	#BLK_AVG
(
blk1
, 
blk2
Ë((blk1+blk2Ë>> 1)

	)

1040 
STATIC
 

1041 
	$xlog_ªcovî_add_to_c⁄t_å™s
(

1042 
xlog
 *
log
,

1043 
xlog_ªcovî
 *
å™s
,

1044 *
dp
,

1045 
Àn
)

1047 
xlog_ªcovî_ôem_t
 *
ôem
;

1048 *
±r
, *
ﬁd_±r
;

1049 
ﬁd_Àn
;

1051 i‡(
	`li°_em±y
(&
å™s
->
r_ôemq
)) {

1053 
	`xlog_ªcovî_add_ôem
(&
å™s
->
r_ôemq
);

1054 
±r
 = (*Ë&
å™s
->
r_thódî
 +

1055 (
xfs_å™s_hódî_t
Ë- 
Àn
;

1056 
	`mem˝y
(
±r
, 
dp
, 
Àn
);

1060 
ôem
 = 
	`li°_íåy
(
å™s
->
r_ôemq
.
¥ev
, 
xlog_ªcovî_ôem_t
, 
ri_li°
);

1062 
ﬁd_±r
 = 
ôem
->
ri_buf
[ôem->
ri_˙t
-1].
i_addr
;

1063 
ﬁd_Àn
 = 
ôem
->
ri_buf
[ôem->
ri_˙t
-1].
i_Àn
;

1065 
±r
 = 
	`kmem_ªÆloc
(
ﬁd_±r
, 
Àn
+
ﬁd_Àn
, 
KM_SLEEP
);

1066 
	`mem˝y
(&
±r
[
ﬁd_Àn
], 
dp
, 
Àn
);

1067 
ôem
->
ri_buf
[ôem->
ri_˙t
-1].
i_Àn
 +
Àn
;

1068 
ôem
->
ri_buf
[ôem->
ri_˙t
-1].
i_addr
 = 
±r
;

1069 
	`åa˚_xfs_log_ªcovî_ôem_add_c⁄t
(
log
, 
å™s
, 
ôem
, 0);

1071 
	}
}

1086 
STATIC
 

1087 
	$xlog_ªcovî_add_to_å™s
(

1088 
xlog
 *
log
,

1089 
xlog_ªcovî
 *
å™s
,

1090 *
dp
,

1091 
Àn
)

1093 
xfs_öode_log_f‹m©_t
 *
ö_f
;

1094 
xlog_ªcovî_ôem_t
 *
ôem
;

1095 *
±r
;

1097 i‡(!
Àn
)

1099 i‡(
	`li°_em±y
(&
å™s
->
r_ôemq
)) {

1101 i‡(*(
uöt
 *)
dp
 !
XFS_TRANS_HEADER_MAGIC
) {

1102 
	`xfs_w¨n
(
log
->
l_mp
, "%s: bad header magicÇumber",

1103 
__func__
);

1104 
	`ASSERT
(0);

1105  
	`XFS_ERROR
(
EIO
);

1107 i‡(
Àn
 =(
xfs_å™s_hódî_t
))

1108 
	`xlog_ªcovî_add_ôem
(&
å™s
->
r_ôemq
);

1109 
	`mem˝y
(&
å™s
->
r_thódî
, 
dp
, 
Àn
);

1113 
±r
 = 
	`kmem_Æloc
(
Àn
, 
KM_SLEEP
);

1114 
	`mem˝y
(
±r
, 
dp
, 
Àn
);

1115 
ö_f
 = (
xfs_öode_log_f‹m©_t
 *)
±r
;

1118 
ôem
 = 
	`li°_íåy
(
å™s
->
r_ôemq
.
¥ev
, 
xlog_ªcovî_ôem_t
, 
ri_li°
);

1119 i‡(
ôem
->
ri_tŸÆ
 != 0 &&

1120 
ôem
->
ri_tŸÆ
 =ôem->
ri_˙t
) {

1122 
	`xlog_ªcovî_add_ôem
(&
å™s
->
r_ôemq
);

1123 
ôem
 = 
	`li°_íåy
(
å™s
->
r_ôemq
.
¥ev
,

1124 
xlog_ªcovî_ôem_t
, 
ri_li°
);

1127 i‡(
ôem
->
ri_tŸÆ
 == 0) {

1128 i‡(
ö_f
->
ûf_size
 == 0 ||

1129 
ö_f
->
ûf_size
 > 
XLOG_MAX_REGIONS_IN_ITEM
) {

1130 
	`xfs_w¨n
(
log
->
l_mp
,

1132 
ö_f
->
ûf_size
);

1133 
	`ASSERT
(0);

1134 
	`kmem_‰ì
(
±r
);

1135  
	`XFS_ERROR
(
EIO
);

1138 
ôem
->
ri_tŸÆ
 = 
ö_f
->
ûf_size
;

1139 
ôem
->
ri_buf
 =

1140 
	`kmem_zÆloc
(
ôem
->
ri_tŸÆ
 * (
xfs_log_iovec_t
),

1141 
KM_SLEEP
);

1143 
	`ASSERT
(
ôem
->
ri_tŸÆ
 > iãm->
ri_˙t
);

1145 
ôem
->
ri_buf
[ôem->
ri_˙t
].
i_addr
 = 
±r
;

1146 
ôem
->
ri_buf
[ôem->
ri_˙t
].
i_Àn
 = 
Àn
;

1147 
ôem
->
ri_˙t
++;

1148 
	`åa˚_xfs_log_ªcovî_ôem_add
(
log
, 
å™s
, 
ôem
, 0);

1150 
	}
}

1157 
STATIC
 

1158 
	$xlog_ªcovî_‰ì_å™s
(

1159 
xlog_ªcovî
 *
å™s
)

1161 
xlog_ªcovî_ôem_t
 *
ôem
, *
n
;

1162 
i
;

1164 
	`li°_f‹_óch_íåy_ß„
(
ôem
, 
n
, &
å™s
->
r_ôemq
, 
ri_li°
) {

1166 
	`li°_dñ
(&
ôem
->
ri_li°
);

1167 
i
 = 0; i < 
ôem
->
ri_˙t
; i++)

1168 
	`kmem_‰ì
(
ôem
->
ri_buf
[
i
].
i_addr
);

1170 
	`kmem_‰ì
(
ôem
->
ri_buf
);

1171 
	`kmem_‰ì
(
ôem
);

1174 
	`kmem_‰ì
(
å™s
);

1175 
	}
}

1183 
STATIC
 

1184 
	$xlog_ªcovî_commô_å™s
(

1185 
xlog
 *
log
,

1186 
xlog_ªcovî
 *
å™s
,

1187 
∑ss
)

1189 
îr‹
 = 0;

1191 
	`hli°_dñ
(&
å™s
->
r_li°
);

1192 i‡((
îr‹
 = 
	`xlog_ªcovî_do_å™s
(
log
, 
å™s
, 
∑ss
)))

1193  
îr‹
;

1195 
	`xlog_ªcovî_‰ì_å™s
(
å™s
);

1197 
	}
}

1199 
STATIC
 

1200 
	$xlog_ªcovî_unmou¡_å™s
(

1201 
xlog_ªcovî_t
 *
å™s
)

1204 
	`xfs_w¨n
(
log
->
l_mp
, "%s: Unmou¡ LR", 
__func__
);

1206 
	}
}

1217 
STATIC
 

1218 
	$xlog_ªcovî_¥o˚ss_d©a
(

1219 
xlog
 *
log
,

1220 
hli°_hód
 
rhash
[],

1221 
xlog_ªc_hódî
 *
rhód
,

1222 *
dp
,

1223 
∑ss
)

1225 *
Õ
;

1226 
num_log›s
;

1227 
xlog_›_hódî_t
 *
ohód
;

1228 
xlog_ªcovî_t
 *
å™s
;

1229 
xlog_tid_t
 
tid
;

1230 
îr‹
;

1231 
hash
;

1232 
uöt
 
Êags
;

1234 
Õ
 = 
dp
 + 
	`be32_to_˝u
(
rhód
->
h_Àn
);

1235 
num_log›s
 = 
	`be32_to_˝u
(
rhód
->
h_num_log›s
);

1238 i‡(
	`xlog_hódî_check_ªcovî
(
log
->
l_mp
, 
rhód
))

1239  (
	`XFS_ERROR
(
EIO
));

1241 (
dp
 < 
Õ
Ë&& 
num_log›s
) {

1242 
	`ASSERT
(
dp
 + (
xlog_›_hódî_t
Ë<
Õ
);

1243 
ohód
 = (
xlog_›_hódî_t
 *)
dp
;

1244 
dp
 +(
xlog_›_hódî_t
);

1245 i‡(
ohód
->
oh_˛õ¡id
 !
XFS_TRANSACTION
 &&

1246 
ohód
->
oh_˛õ¡id
 !
XFS_LOG
) {

1247 
	`xfs_w¨n
(
log
->
l_mp
, "%s: bad clientid 0x%x",

1248 
__func__
, 
ohód
->
oh_˛õ¡id
);

1249 
	`ASSERT
(0);

1250  (
	`XFS_ERROR
(
EIO
));

1252 
tid
 = 
	`be32_to_˝u
(
ohód
->
oh_tid
);

1253 
hash
 = 
	`XLOG_RHASH
(
tid
);

1254 
å™s
 = 
	`xlog_ªcovî_föd_tid
(&
rhash
[
hash
], 
tid
);

1255 i‡(
å™s
 =
NULL
) {

1256 i‡(
ohód
->
oh_Êags
 & 
XLOG_START_TRANS
)

1257 
	`xlog_ªcovî_√w_tid
(&
rhash
[
hash
], 
tid
,

1258 
	`be64_to_˝u
(
rhód
->
h_l¢
));

1260 i‡(
dp
 + 
	`be32_to_˝u
(
ohód
->
oh_Àn
Ë> 
Õ
) {

1261 
	`xfs_w¨n
(
log
->
l_mp
, "%s: badÜength 0x%x",

1262 
__func__
, 
	`be32_to_˝u
(
ohód
->
oh_Àn
));

1263  (
	`XFS_ERROR
(
EIO
));

1265 
Êags
 = 
ohód
->
oh_Êags
 & ~
XLOG_END_TRANS
;

1266 i‡(
Êags
 & 
XLOG_WAS_CONT_TRANS
)

1267 
Êags
 &~
XLOG_CONTINUE_TRANS
;

1268 
Êags
) {

1269 
XLOG_COMMIT_TRANS
:

1270 
îr‹
 = 
	`xlog_ªcovî_commô_å™s
(
log
,

1271 
å™s
, 
∑ss
);

1273 
XLOG_UNMOUNT_TRANS
:

1274 
îr‹
 = 
	`xlog_ªcovî_unmou¡_å™s
(
å™s
);

1276 
XLOG_WAS_CONT_TRANS
:

1277 
îr‹
 = 
	`xlog_ªcovî_add_to_c⁄t_å™s
(
log
,

1278 
å™s
, 
dp
,

1279 
	`be32_to_˝u
(
ohód
->
oh_Àn
));

1281 
XLOG_START_TRANS
:

1282 
	`xfs_w¨n
(
log
->
l_mp
, "%s: badÅransaction",

1283 
__func__
);

1284 
	`ASSERT
(0);

1285 
îr‹
 = 
	`XFS_ERROR
(
EIO
);

1288 
XLOG_CONTINUE_TRANS
:

1289 
îr‹
 = 
	`xlog_ªcovî_add_to_å™s
(
log
, 
å™s
,

1290 
dp
, 
	`be32_to_˝u
(
ohód
->
oh_Àn
));

1293 
	`xfs_w¨n
(
log
->
l_mp
, "%s: bad flag 0x%x",

1294 
__func__
, 
Êags
);

1295 
	`ASSERT
(0);

1296 
îr‹
 = 
	`XFS_ERROR
(
EIO
);

1299 i‡(
îr‹
)

1300  
îr‹
;

1302 
dp
 +
	`be32_to_˝u
(
ohód
->
oh_Àn
);

1303 
num_log›s
--;

1306 
	}
}

1321 
	#xlog_cksum
(
l
,
r
,
dp
,
Àn
Ë(‘)->
h_¸c
)

	)

1322 
STATIC
 

1323 
	$xlog_u≈ack_d©a_¸c
(

1324 
xlog_ªc_hódî
 *
rhód
,

1325 *
dp
,

1326 
xlog
 *
log
)

1328 
__À32
 
¸c
;

1330 
¸c
 = 
	`xlog_cksum
(
log
, 
rhód
, 
dp
, 
	`be32_to_˝u
‘hód->
h_Àn
));

1331 i‡(
¸c
 !
rhód
->
h_¸c
) {

1332 i‡(
rhód
->
h_¸c
 || 
	`xfs_sb_vîsi⁄_has¸c
(&
log
->
l_mp
->
m_sb
)) {

1333 
	`xfs_Æît
(
log
->
l_mp
,

1335 
	`À32_to_˝u
(
rhód
->
h_¸c
),

1336 
	`À32_to_˝u
(
¸c
));

1337 
	`xfs_hex_dump
(
dp
, 32);

1345 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
log
->
l_mp
->
m_sb
))

1346  
EFSCORRUPTED
;

1350 
	}
}

1352 
STATIC
 

1353 
	$xlog_u≈ack_d©a
(

1354 
xlog_ªc_hódî
 *
rhód
,

1355 *
dp
,

1356 
xlog
 *
log
)

1358 
i
, 
j
, 
k
;

1359 
îr‹
;

1361 
îr‹
 = 
	`xlog_u≈ack_d©a_¸c
(
rhód
, 
dp
, 
log
);

1362 i‡(
îr‹
)

1363  
îr‹
;

1365 
i
 = 0; i < 
	`BTOBB
(
	`be32_to_˝u
(
rhód
->
h_Àn
)) &&

1366 
i
 < (
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
); i++) {

1367 *(
__be32
 *)
dp
 = *(__be32 *)&
rhód
->
h_cy˛e_d©a
[
i
];

1368 
dp
 +
BBSIZE
;

1371 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
log
->
l_mp
->
m_sb
)) {

1372 
xlog_ö_c‹e_2_t
 *
xhdr
 = (xlog_ö_c‹e_2_à*)
rhód
;

1373  ; 
i
 < 
	`BTOBB
(
	`be32_to_˝u
(
rhód
->
h_Àn
)); i++) {

1374 
j
 = 
i
 / (
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
);

1375 
k
 = 
i
 % (
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
);

1376 *(
__be32
 *)
dp
 = 
xhdr
[
j
].
hic_xhódî
.
xh_cy˛e_d©a
[
k
];

1377 
dp
 +
BBSIZE
;

1382 
	}
}

1384 
STATIC
 

1385 
	$xlog_vÆid_ªc_hódî
(

1386 
xlog
 *
log
,

1387 
xlog_ªc_hódî
 *
rhód
,

1388 
xfs_daddr_t
 
blkno
)

1390 
hÀn
;

1392 i‡(
	`u∆ikñy
(
rhód
->
h_magi˙o
 !
	`˝u_to_be32
(
XLOG_HEADER_MAGIC_NUM
))) {

1393 
	`XFS_ERROR_REPORT
("xlog_valid_rec_header(1)",

1394 
XFS_ERRLEVEL_LOW
, 
log
->
l_mp
);

1395  
	`XFS_ERROR
(
EFSCORRUPTED
);

1397 i‡(
	`u∆ikñy
(

1398 (!
rhód
->
h_vîsi⁄
 ||

1399 (
	`be32_to_˝u
(
rhód
->
h_vîsi⁄
Ë& (~
XLOG_VERSION_OKBITS
))))) {

1400 
	`xfs_w¨n
(
log
->
l_mp
, "%s: unrecognisedÜog version (%d).",

1401 
__func__
, 
	`be32_to_˝u
(
rhód
->
h_vîsi⁄
));

1402  
	`XFS_ERROR
(
EIO
);

1406 
hÀn
 = 
	`be32_to_˝u
(
rhód
->
h_Àn
);

1407 i‡(
	`u∆ikñy
–
hÀn
 <0 || hÀ¿> 
INT_MAX
 )) {

1408 
	`XFS_ERROR_REPORT
("xlog_valid_rec_header(2)",

1409 
XFS_ERRLEVEL_LOW
, 
log
->
l_mp
);

1410  
	`XFS_ERROR
(
EFSCORRUPTED
);

1412 i‡(
	`u∆ikñy
–
blkno
 > 
log
->
l_logBBsize
 || blknÿ> 
INT_MAX
 )) {

1413 
	`XFS_ERROR_REPORT
("xlog_valid_rec_header(3)",

1414 
XFS_ERRLEVEL_LOW
, 
log
->
l_mp
);

1415  
	`XFS_ERROR
(
EFSCORRUPTED
);

1418 
	}
}

1429 
	$xlog_do_ªcovîy_∑ss
(

1430 
xlog
 *
log
,

1431 
xfs_daddr_t
 
hód_blk
,

1432 
xfs_daddr_t
 
èû_blk
,

1433 
∑ss
)

1435 
xlog_ªc_hódî_t
 *
rhód
;

1436 
xfs_daddr_t
 
blk_no
;

1437 *
off£t
;

1438 
xfs_buf_t
 *
hbp
, *
dbp
;

1439 
îr‹
 = 0, 
h_size
;

1440 
bblks
, 
•lô_bblks
;

1441 
hblks
, 
•lô_hblks
, 
wøµed_hblks
;

1442 
hli°_hód
 
rhash
[
XLOG_RHASH_SIZE
];

1444 
	`ASSERT
(
hód_blk
 !
èû_blk
);

1450 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
log
->
l_mp
->
m_sb
)) {

1456 
hbp
 = 
	`xlog_gë_bp
(
log
, 1);

1457 i‡(!
hbp
)

1458  
ENOMEM
;

1460 
îr‹
 = 
	`xlog_bªad
(
log
, 
èû_blk
, 1, 
hbp
, &
off£t
);

1461 i‡(
îr‹
)

1462 
bªad_îr1
;

1464 
rhód
 = (
xlog_ªc_hódî_t
 *)
off£t
;

1465 
îr‹
 = 
	`xlog_vÆid_ªc_hódî
(
log
, 
rhód
, 
èû_blk
);

1466 i‡(
îr‹
)

1467 
bªad_îr1
;

1468 
h_size
 = 
	`be32_to_˝u
(
rhód
->h_size);

1469 i‡((
	`be32_to_˝u
(
rhód
->
h_vîsi⁄
Ë& 
XLOG_VERSION_2
) &&

1470 (
h_size
 > 
XLOG_HEADER_CYCLE_SIZE
)) {

1471 
hblks
 = 
h_size
 / 
XLOG_HEADER_CYCLE_SIZE
;

1472 i‡(
h_size
 % 
XLOG_HEADER_CYCLE_SIZE
)

1473 
hblks
++;

1474 
	`xlog_put_bp
(
hbp
);

1475 
hbp
 = 
	`xlog_gë_bp
(
log
, 
hblks
);

1477 
hblks
 = 1;

1480 
	`ASSERT
(
log
->
l_£˘BBsize
 == 1);

1481 
hblks
 = 1;

1482 
hbp
 = 
	`xlog_gë_bp
(
log
, 1);

1483 
h_size
 = 
XLOG_BIG_RECORD_BSIZE
;

1486 i‡(!
hbp
)

1487  
ENOMEM
;

1488 
dbp
 = 
	`xlog_gë_bp
(
log
, 
	`BTOBB
(
h_size
));

1489 i‡(!
dbp
) {

1490 
	`xlog_put_bp
(
hbp
);

1491  
ENOMEM
;

1494 
	`mem£t
(
rhash
, 0, (rhash));

1495 i‡(
èû_blk
 <
hód_blk
) {

1496 
blk_no
 = 
èû_blk
; blk_nÿ< 
hód_blk
; ) {

1497 
îr‹
 = 
	`xlog_bªad
(
log
, 
blk_no
, 
hblks
, 
hbp
, &
off£t
);

1498 i‡(
îr‹
)

1499 
bªad_îr2
;

1501 
rhód
 = (
xlog_ªc_hódî_t
 *)
off£t
;

1502 
îr‹
 = 
	`xlog_vÆid_ªc_hódî
(
log
, 
rhód
, 
blk_no
);

1503 i‡(
îr‹
)

1504 
bªad_îr2
;

1507 
bblks
 = ()
	`BTOBB
(
	`be32_to_˝u
(
rhód
->
h_Àn
));

1508 
îr‹
 = 
	`xlog_bªad
(
log
, 
blk_no
 + 
hblks
, 
bblks
, 
dbp
,

1509 &
off£t
);

1510 i‡(
îr‹
)

1511 
bªad_îr2
;

1513 
îr‹
 = 
	`xlog_u≈ack_d©a
(
rhód
, 
off£t
, 
log
);

1514 i‡(
îr‹
)

1515 
bªad_îr2
;

1517 
îr‹
 = 
	`xlog_ªcovî_¥o˚ss_d©a
(
log
,

1518 
rhash
, 
rhód
, 
off£t
, 
∑ss
);

1519 i‡(
îr‹
)

1520 
bªad_îr2
;

1521 
blk_no
 +
bblks
 + 
hblks
;

1529 
blk_no
 = 
èû_blk
;

1530 
blk_no
 < 
log
->
l_logBBsize
) {

1534 
off£t
 = 
hbp
->
b_addr
;

1535 
•lô_hblks
 = 0;

1536 
wøµed_hblks
 = 0;

1537 i‡(
blk_no
 + 
hblks
 <
log
->
l_logBBsize
) {

1539 
îr‹
 = 
	`xlog_bªad
(
log
, 
blk_no
, 
hblks
, 
hbp
,

1540 &
off£t
);

1541 i‡(
îr‹
)

1542 
bªad_îr2
;

1545 i‡(
blk_no
 !
log
->
l_logBBsize
) {

1547 
	`ASSERT
(
blk_no
 <
INT_MAX
);

1548 
•lô_hblks
 = 
log
->
l_logBBsize
 - ()
blk_no
;

1549 
	`ASSERT
(
•lô_hblks
 > 0);

1550 
îr‹
 = 
	`xlog_bªad
(
log
, 
blk_no
,

1551 
•lô_hblks
, 
hbp
,

1552 &
off£t
);

1553 i‡(
îr‹
)

1554 
bªad_îr2
;

1569 
wøµed_hblks
 = 
hblks
 - 
•lô_hblks
;

1570 
îr‹
 = 
	`xlog_bªad_off£t
(
log
, 0,

1571 
wøµed_hblks
, 
hbp
,

1572 
off£t
 + 
	`BBTOB
(
•lô_hblks
));

1573 i‡(
îr‹
)

1574 
bªad_îr2
;

1576 
rhód
 = (
xlog_ªc_hódî_t
 *)
off£t
;

1577 
îr‹
 = 
	`xlog_vÆid_ªc_hódî
(
log
, 
rhód
,

1578 
•lô_hblks
 ? 
blk_no
 : 0);

1579 i‡(
îr‹
)

1580 
bªad_îr2
;

1582 
bblks
 = ()
	`BTOBB
(
	`be32_to_˝u
(
rhód
->
h_Àn
));

1583 
blk_no
 +
hblks
;

1586 i‡(
blk_no
 + 
bblks
 <
log
->
l_logBBsize
) {

1587 
îr‹
 = 
	`xlog_bªad
(
log
, 
blk_no
, 
bblks
, 
dbp
,

1588 &
off£t
);

1589 i‡(
îr‹
)

1590 
bªad_îr2
;

1594 
off£t
 = 
dbp
->
b_addr
;

1595 
•lô_bblks
 = 0;

1596 i‡(
blk_no
 !
log
->
l_logBBsize
) {

1599 
	`ASSERT
(!
wøµed_hblks
);

1600 
	`ASSERT
(
blk_no
 <
INT_MAX
);

1601 
•lô_bblks
 =

1602 
log
->
l_logBBsize
 - ()
blk_no
;

1603 
	`ASSERT
(
•lô_bblks
 > 0);

1604 
îr‹
 = 
	`xlog_bªad
(
log
, 
blk_no
,

1605 
•lô_bblks
, 
dbp
,

1606 &
off£t
);

1607 i‡(
îr‹
)

1608 
bªad_îr2
;

1623 
îr‹
 = 
	`xlog_bªad_off£t
(
log
, 0,

1624 
bblks
 - 
•lô_bblks
, 
dbp
,

1625 
off£t
 + 
	`BBTOB
(
•lô_bblks
));

1626 i‡(
îr‹
)

1627 
bªad_îr2
;

1630 
îr‹
 = 
	`xlog_u≈ack_d©a
(
rhód
, 
off£t
, 
log
);

1631 i‡(
îr‹
)

1632 
bªad_îr2
;

1634 
îr‹
 = 
	`xlog_ªcovî_¥o˚ss_d©a
(
log
, 
rhash
,

1635 
rhód
, 
off£t
, 
∑ss
);

1636 i‡(
îr‹
)

1637 
bªad_îr2
;

1638 
blk_no
 +
bblks
;

1641 
	`ASSERT
(
blk_no
 >
log
->
l_logBBsize
);

1642 
blk_no
 -
log
->
l_logBBsize
;

1645 
blk_no
 < 
hód_blk
) {

1646 
îr‹
 = 
	`xlog_bªad
(
log
, 
blk_no
, 
hblks
, 
hbp
, &
off£t
);

1647 i‡(
îr‹
)

1648 
bªad_îr2
;

1650 
rhód
 = (
xlog_ªc_hódî_t
 *)
off£t
;

1651 
îr‹
 = 
	`xlog_vÆid_ªc_hódî
(
log
, 
rhód
, 
blk_no
);

1652 i‡(
îr‹
)

1653 
bªad_îr2
;

1655 
bblks
 = ()
	`BTOBB
(
	`be32_to_˝u
(
rhód
->
h_Àn
));

1656 
îr‹
 = 
	`xlog_bªad
(
log
, 
blk_no
+
hblks
, 
bblks
, 
dbp
,

1657 &
off£t
);

1658 i‡(
îr‹
)

1659 
bªad_îr2
;

1661 
îr‹
 = 
	`xlog_u≈ack_d©a
(
rhód
, 
off£t
, 
log
);

1662 i‡(
îr‹
)

1663 
bªad_îr2
;

1665 
îr‹
 = 
	`xlog_ªcovî_¥o˚ss_d©a
(
log
, 
rhash
,

1666 
rhód
, 
off£t
, 
∑ss
);

1667 i‡(
îr‹
)

1668 
bªad_îr2
;

1669 
blk_no
 +
bblks
 + 
hblks
;

1673 
bªad_îr2
:

1674 
	`xlog_put_bp
(
dbp
);

1675 
bªad_îr1
:

1676 
	`xlog_put_bp
(
hbp
);

1677  
îr‹
;

1678 
	}
}

	@logprint/log_copy.c

18 
	~"libxfs.h
"

19 
	~"libxlog.h
"

21 
	~"log¥öt.h
"

28 
	$xfs_log_c›y
(

29 
xlog
 *
log
,

30 
fd
,

31 *
fûíame
)

33 
ofd
, 
r
;

34 
xfs_daddr_t
 
blkno
;

35 
buf
[
XLOG_HEADER_SIZE
];

37 i‡((
ofd
 = 
	`›í
(
fûíame
, 
O_CREAT
|
O_EXCL
|
O_RDWR
|
O_TRUNC
, 0666)) == -1) {

38 
	`≥º‹
("open");

39 
	`exô
(1);

42 
	`xlog_¥öt_l£ek
(
log
, 
fd
, 0, 
SEEK_SET
);

43 
blkno
 = 0; blknÿ< 
log
->
l_logBBsize
; blkno++) {

44 
r
 = 
	`ªad
(
fd
, 
buf
, (buf));

45 i‡(
r
 < 0) {

46 
	`Ârötf
(
°dîr
, 
	`_
("%s:ÑeadÉrror (%lld): %s\n"),

47 
__FUNCTION__
, ()
blkno
,

48 
	`°ªº‹
(
î∫o
));

50 } i‡(
r
 == 0) {

51 
	`¥ötf
(
	`_
("%s:ÖhysicalÉnd ofÜogát %lld\n"),

52 
__FUNCTION__
, ()
blkno
);

54 } i‡(
r
 !(
buf
)) {

55 
	`Ârötf
(
°dîr
, 
	`_
("%s: shortÑead? (%lld)\n"),

56 
__FUNCTION__
, ()
blkno
);

60 
r
 = 
	`wrôe
(
ofd
, 
buf
, (buf));

61 i‡(
r
 < 0) {

62 
	`Ârötf
(
°dîr
, 
	`_
("%s: writeÉrror (%lld): %s\n"),

63 
__FUNCTION__
, ()
blkno
,

64 
	`°ªº‹
(
î∫o
));

66 } i‡(
r
 !(
buf
)) {

67 
	`Ârötf
(
°dîr
, 
	`_
("%s: short write? (%lld)\n"),

68 
__FUNCTION__
, ()
blkno
);

73 
	`˛o£
(
ofd
);

74 
	}
}

	@logprint/log_dump.c

18 
	~"libxfs.h
"

19 
	~"libxlog.h
"

21 
	~"log¥öt.h
"

28 
	$xfs_log_dump
(

29 
xlog
 *
log
,

30 
fd
,

31 
¥öt_block_°¨t
)

33 
r
;

34 
uöt
 
œ°_cy˛e
 = -1;

35 
xfs_daddr_t
 
blkno
, 
dupblkno
;

36 
xlog_ªc_hódî_t
 *
hdr
;

37 
buf
[
XLOG_HEADER_SIZE
];

39 
dupblkno
 = 0;

40 
hdr
 = (
xlog_ªc_hódî_t
 *)
buf
;

41 
	`xlog_¥öt_l£ek
(
log
, 
fd
, 0, 
SEEK_SET
);

42 
blkno
 = 0; blknÿ< 
log
->
l_logBBsize
; blkno++) {

43 
r
 = 
	`ªad
(
fd
, 
buf
, (buf));

44 i‡(
r
 < 0) {

45 
	`Ârötf
(
°dîr
, 
	`_
("%s:ÑeadÉrror (%lld): %s\n"),

46 
__FUNCTION__
, ()
blkno
,

47 
	`°ªº‹
(
î∫o
));

49 } i‡(
r
 == 0) {

50 
	`¥ötf
(
	`_
("%s:ÖhysicalÉnd ofÜogát %lld\n"),

51 
__FUNCTION__
, ()
blkno
);

55 i‡(
	`CYCLE_LSN
(
	`be64_to_˝u
(*(
__be64
 *)
buf
)) ==

56 
XLOG_HEADER_MAGIC_NUM
 && !
¥öt_no_d©a
) {

57 
	`¥ötf
(
	`_
(

59 ()
blkno
,

60 
	`be32_to_˝u
(
hdr
->
h_cy˛e
),

61 
	`CYCLE_LSN
(
	`be64_to_˝u
(
hdr
->
h_èû_l¢
)),

62 
	`BLOCK_LSN
(
	`be64_to_˝u
(
hdr
->
h_èû_l¢
)),

63 
	`be32_to_˝u
(
hdr
->
h_Àn
),

64 
	`be32_to_˝u
(
hdr
->
h_num_log›s
));

67 i‡(
	`xlog_gë_cy˛e
(
buf
Ë!
œ°_cy˛e
) {

68 
	`¥ötf
(
	`_
(

70 ()
dupblkno
, ()
blkno
,

71 
œ°_cy˛e
, 
	`xlog_gë_cy˛e
(
buf
));

72 
œ°_cy˛e
 = 
	`xlog_gë_cy˛e
(
buf
);

73 
dupblkno
 = 
blkno
;

76 
	}
}

	@logprint/log_misc.c

18 
	~"libxfs.h
"

19 
	~"libxlog.h
"

21 
	~"log¥öt.h
"

23 
	#CLEARED_BLKS
 (-5)

	)

24 
	#ZEROED_LOG
 (-4)

	)

25 
	#FULL_READ
 (-3)

	)

26 
	#PARTIAL_READ
 (-2)

	)

27 
	#BAD_HEADER
 (-1)

	)

28 
	#NO_ERROR
 (0)

	)

30 
	glogBBsize
;

32 
	sxlog_•lô_ôem
 {

33 
xlog_•lô_ôem
 *
	msi_√xt
;

34 
xlog_•lô_ôem
 *
	msi_¥ev
;

35 
xlog_tid_t
 
	msi_xtid
;

36 
	msi_skù
;

37 } 
	txlog_•lô_ôem_t
;

39 
xlog_•lô_ôem_t
 *
	g•lô_li°
 = 
NULL
;

42 
	$¥öt_xlog_›_löe
()

44 
	`¥ötf
("--------------------------------------"

46 
	}
}

49 
	$¥öt_xlog_xhdr_löe
()

51 
	`¥ötf
("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

53 
	}
}

56 
	$¥öt_xlog_ªc‹d_löe
()

58 
	`¥ötf
("======================================"

60 
	}
}

63 
	$¥öt_°¨s
()

65 
	`¥ötf
("***********************************"

67 
	}
}

74 
	$xlog_¥öt_›_hódî
(
xlog_›_hódî_t
 *
›_hód
,

75 
i
,

76 **
±r
)

78 
xlog_›_hódî_t
 
hbuf
;

84 
	`memmove
(&
hbuf
, 
›_hód
, (
xlog_›_hódî_t
));

85 
›_hód
 = &
hbuf
;

86 *
±r
 +(
xlog_›_hódî_t
);

87 
	`¥ötf
(
	`_
("O≥∏(%d):Åid: %xÜí: %d clõ¡id: %† "), 
i
,

88 
	`be32_to_˝u
(
›_hód
->
oh_tid
),

89 
	`be32_to_˝u
(
›_hód
->
oh_Àn
),

90 (
›_hód
->
oh_˛õ¡id
 =
XFS_TRANSACTION
 ? "TRANS" :

91 (
›_hód
->
oh_˛õ¡id
 =
XFS_LOG
 ? "LOG" : "ERROR")));

92 
	`¥ötf
(
	`_
("flags: "));

93 i‡(
›_hód
->
oh_Êags
) {

94 i‡(
›_hód
->
oh_Êags
 & 
XLOG_START_TRANS
)

95 
	`¥ötf
("START ");

96 i‡(
›_hód
->
oh_Êags
 & 
XLOG_COMMIT_TRANS
)

97 
	`¥ötf
("COMMIT ");

98 i‡(
›_hód
->
oh_Êags
 & 
XLOG_WAS_CONT_TRANS
)

99 
	`¥ötf
("WAS_CONT ");

100 i‡(
›_hód
->
oh_Êags
 & 
XLOG_UNMOUNT_TRANS
)

101 
	`¥ötf
("UNMOUNT ");

102 i‡(
›_hód
->
oh_Êags
 & 
XLOG_CONTINUE_TRANS
)

103 
	`¥ötf
("CONTINUE ");

104 i‡(
›_hód
->
oh_Êags
 & 
XLOG_END_TRANS
)

105 
	`¥ötf
("END ");

107 
	`¥ötf
(
	`_
("none"));

109 
	`¥ötf
("\n");

110 
	}
}

114 
	$xlog_¥öt_add_to_å™s
(
xlog_tid_t
 
tid
,

115 
skù
)

117 
xlog_•lô_ôem_t
 *
ôem
;

119 
ôem
 = (
xlog_•lô_ôem_t
 *)
	`ˇŒoc
((xlog_split_item_t), 1);

120 
ôem
->
si_xtid
 = 
tid
;

121 
ôem
->
si_skù
 = 
skù
;

122 
ôem
->
si_√xt
 = 
•lô_li°
;

123 
ôem
->
si_¥ev
 = 
NULL
;

124 i‡(
•lô_li°
)

125 
•lô_li°
->
si_¥ev
 = 
ôem
;

126 
•lô_li°
 = 
ôem
;

127 
	}
}

131 
	$xlog_¥öt_föd_tid
(
xlog_tid_t
 
tid
, 
uöt
 
was_c⁄t
)

133 
xlog_•lô_ôem_t
 *
li°p
 = 
•lô_li°
;

135 i‡(!
•lô_li°
) {

136 i‡(
was_c⁄t
 != 0)

141 
li°p
) {

142 i‡(
li°p
->
si_xtid
 =
tid
)

144 
li°p
 =Üi°p->
si_√xt
;

146 i‡(!
li°p
) {

149 i‡(--
li°p
->
si_skù
 == 0) {

150 i‡(
li°p
 =
•lô_li°
) {

151 
•lô_li°
 = 
li°p
->
si_√xt
;

152 i‡(
•lô_li°
)

153 
•lô_li°
->
si_¥ev
 = 
NULL
;

155 i‡(
li°p
->
si_√xt
)

156 
li°p
->
si_√xt
->
si_¥ev
 =Üistp->si_prev;

157 
li°p
->
si_¥ev
->
si_√xt
 =Üistp->si_next;

159 
	`‰ì
(
li°p
);

162 
	}
}

165 
	$xlog_¥öt_å™s_hódî
(**
±r
, 
Àn
)

167 
xfs_å™s_hódî_t
 *
h
;

168 *
˝å
 = *
±r
;

169 
__uöt32_t
 
magic
;

170 *
magic_c
 = (*)&
magic
;

172 *
±r
 +
Àn
;

174 
magic
=*(
__uöt32_t
*)
˝å
;

176 i‡(
Àn
 >= 4) {

177 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


178 
	`¥ötf
("%c%c%c%c:",

179 
magic_c
[3], magic_c[2], magic_c[1], magic_c[0]);

181 
	`¥ötf
("%c%c%c%c:",

182 
magic_c
[0], magic_c[1], magic_c[2], magic_c[3]);

185 i‡(
Àn
 !(
xfs_å™s_hódî_t
)) {

186 
	`¥ötf
(
	`_
(" NotÉnough dataÅo decode further\n"));

189 
h
 = (
xfs_å™s_hódî_t
 *)
˝å
;

190 
	`¥ötf
(
	`_
("Åid: %xÇum_items: %d\n"),

191 
h
->
th_tid
, h->
th_num_ôems
);

193 
	}
}

197 
	$xlog_¥öt_å™s_buf„r
(**
±r
, 
Àn
, *
i
, 
num_›s
)

199 
xfs_buf_log_f‹m©_t
 *
f
;

200 
xlog_›_hódî_t
 *
hód
 = 
NULL
;

201 
num
, 
skù
;

202 
su≥r_block
 = 0;

203 
buckë
, 
cﬁ
, 
buckës
;

204 
__öt64_t
 
blkno
;

205 
xfs_buf_log_f‹m©_t
 
lbuf
;

206 
size
, 
bÀn
, 
m≠_size
, 
°ru˘_size
;

207 
__be64
 
x
, 
y
;

208 
Êags
;

214 
	`memmove
(&
lbuf
, *
±r
, 
	`MIN
((
xfs_buf_log_f‹m©_t
), 
Àn
));

215 
f
 = &
lbuf
;

216 *
±r
 +
Àn
;

218 
	`ASSERT
(
f
->
blf_ty≥
 =
XFS_LI_BUF
);

219 
	`¥ötf
("BUF: ");

220 
blkno
 = 
f
->
blf_blkno
;

221 
size
 = 
f
->
blf_size
;

222 
bÀn
 = 
f
->
blf_Àn
;

223 
m≠_size
 = 
f
->
blf_m≠_size
;

224 
Êags
 = 
f
->
blf_Êags
;

231 
°ru˘_size
 = 
	`off£tof
(
xfs_buf_log_f‹m©
, 
blf_m≠_size
Ë+ 
m≠_size
;

233 i‡(
Àn
 >
°ru˘_size
) {

234 
	`ASSERT
((
Àn
 - (
°ru˘_size
)) % () == 0);

235 
	`¥ötf
(
	`_
("#regs: %d start blkno: %lld (0x%llx)Üen: %d bmap size: %d flags: 0x%x\n"),

236 
size
, ()
blkno
, ()blkno, 
bÀn
, 
m≠_size
, 
Êags
);

237 i‡(
blkno
 == 0)

238 
su≥r_block
 = 1;

240 
	`ASSERT
(
Àn
 >= 4);

241 
	`¥ötf
(
	`_
("#ªgs: %d NŸÖrötögÑe° o‡d©a\n"), 
f
->
blf_size
);

242  
size
;

244 
num
 = 
size
-1;

247 i‡(*
i
+
num
 > 
num_›s
-1) {

248 
skù
 = 
num
 - (
num_›s
-1-*
i
);

249 
num
 = 
num_›s
-1-*
i
;

251 
skù
 = 0;

253 
num
-- > 0) {

254 (*
i
)++;

255 
hód
 = (
xlog_›_hódî_t
 *)*
±r
;

256 
	`xlog_¥öt_›_hódî
(
hód
, *
i
, 
±r
);

257 i‡(
su≥r_block
) {

258 
	`¥ötf
(
	`_
("SUPER BLOCK Buffer: "));

259 i‡(
	`be32_to_˝u
(
hód
->
oh_Àn
) < 4*8) {

260 
	`¥ötf
(
	`_
("Out of space\n"));

262 
	`¥ötf
("\n");

266 
	`memmove
(&
x
, *
±r
, (
__be64
));

267 
	`memmove
(&
y
, *
±r
+8, (
__be64
));

268 
	`¥ötf
(
	`_
("icount: %llu ifree: %llu "),

269 (Ë
	`be64_to_˝u
(
x
),

270 (Ë
	`be64_to_˝u
(
y
));

271 
	`memmove
(&
x
, *
±r
+16, (
__be64
));

272 
	`memmove
(&
y
, *
±r
+24, (
__be64
));

273 
	`¥ötf
(
	`_
("fdblks: %llu frext: %llu\n"),

274 (Ë
	`be64_to_˝u
(
x
),

275 (Ë
	`be64_to_˝u
(
y
));

277 
su≥r_block
 = 0;

278 } i‡(
	`be32_to_˝u
(*(
__be32
 *)(*
±r
)Ë=
XFS_AGI_MAGIC
) {

279 
xfs_agi
 *
agi
, 
agi_s
;

282 
agi
 = &
agi_s
;

283 
	`memmove
(
agi
, *
±r
, (
xfs_agi
));

284 
	`¥ötf
(
	`_
("AGI Buffer: XAGI "));

293 i‡(
	`be32_to_˝u
(
hód
->
oh_Àn
Ë< 
	`off£tof
(
xfs_agi_t
, 
agi_uuid
) -

294 
XFS_AGI_UNLINKED_BUCKETS
*(
xfs_agöo_t
)) {

295 
	`¥ötf
(
	`_
("out of space\n"));

297 
	`¥ötf
("\n");

298 
	`¥ötf
(
	`_
("ver: %d "),

299 
	`be32_to_˝u
(
agi
->
agi_vîsi⁄num
));

300 
	`¥ötf
(
	`_
("seq#: %dÜen: %d cnt: %dÑoot: %d\n"),

301 
	`be32_to_˝u
(
agi
->
agi_£qno
),

302 
	`be32_to_˝u
(
agi
->
agi_Àngth
),

303 
	`be32_to_˝u
(
agi
->
agi_cou¡
),

304 
	`be32_to_˝u
(
agi
->
agi_roŸ
));

305 
	`¥ötf
(
	`_
("level: %d free#: 0x%xÇewino: 0x%x\n"),

306 
	`be32_to_˝u
(
agi
->
agi_Àvñ
),

307 
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
),

308 
	`be32_to_˝u
(
agi
->
agi_√wöo
));

309 i‡(
	`be32_to_˝u
(
hód
->
oh_Àn
) == 128) {

310 
buckës
 = 17;

311 } i‡(
	`be32_to_˝u
(
hód
->
oh_Àn
) == 256) {

312 
buckës
 = 32 + 17;

314 i‡(
hód
->
oh_Êags
 & 
XLOG_CONTINUE_TRANS
) {

315 
	`¥ötf
(
	`_
("AGI unlinked data skipped "));

316 
	`¥ötf
(
	`_
("(CONTINUE set,Ço space)\n"));

319 
buckës
 = 
XFS_AGI_UNLINKED_BUCKETS
;

321 
buckë
 = 0; buckë < 
buckës
;) {

322 
	`¥ötf
(
	`_
("buckë[%d - %d]: "), 
buckë
, bucket+3);

323 
cﬁ
 = 0; cﬁ < 4; cﬁ++, 
buckë
++) {

324 i‡(
buckë
 < 
buckës
) {

325 
	`¥ötf
("0x%x ",

326 
	`be32_to_˝u
(
agi
->
agi_u∆öked
[
buckë
]));

329 
	`¥ötf
("\n");

332 } i‡(
	`be32_to_˝u
(*(
__be32
 *)(*
±r
)Ë=
XFS_AGF_MAGIC
) {

333 
xfs_agf
 *
agf
, 
agf_s
;

336 
agf
 = &
agf_s
;

337 
	`memmove
(
agf
, *
±r
, (
xfs_agf
));

338 
	`¥ötf
(
	`_
("AGF Buffer: XAGF "));

347 i‡(
	`be32_to_˝u
(
hód
->
oh_Àn
Ë< 
	`off£tof
(
xfs_agf_t
, 
agf_uuid
)) {

348 
	`¥ötf
(
	`_
("Out of space\n"));

350 
	`¥ötf
("\n");

351 
	`¥ötf
(
	`_
("ver: %d seq#: %dÜen: %d \n"),

352 
	`be32_to_˝u
(
agf
->
agf_vîsi⁄num
),

353 
	`be32_to_˝u
(
agf
->
agf_£qno
),

354 
	`be32_to_˝u
(
agf
->
agf_Àngth
));

355 
	`¥ötf
(
	`_
("root BNO: %d CNT: %d\n"),

356 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_BNOi
]),

357 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_CNTi
]));

358 
	`¥ötf
(
	`_
("level BNO: %d CNT: %d\n"),

359 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNOi
]),

360 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNTi
]));

361 
	`¥ötf
(
	`_
("1st: %dÜast: %d cnt: %d "

363 
	`be32_to_˝u
(
agf
->
agf_Êfú°
),

364 
	`be32_to_˝u
(
agf
->
agf_Êœ°
),

365 
	`be32_to_˝u
(
agf
->
agf_Êcou¡
),

366 
	`be32_to_˝u
(
agf
->
agf_‰ìblks
),

367 
	`be32_to_˝u
(
agf
->
agf_l⁄ge°
));

369 } i‡(
	`be32_to_˝u
(*(
__be32
 *)(*
±r
)Ë=
XFS_DQUOT_MAGIC
) {

370 
xfs_disk_dquŸ
 *
dq
, 
dq_s
;

373 
dq
 = &
dq_s
;

374 
	`memmove
(
dq
, *
±r
, (
xfs_disk_dquŸ
));

375 
	`¥ötf
(
	`_
("DQUOT Buffer: DQ "));

376 i‡(
	`be32_to_˝u
(
hód
->
oh_Àn
) <

377 (
xfs_disk_dquŸ_t
)) {

378 
	`¥ötf
(
	`_
("Out of space\n"));

381 
	`¥ötf
("\n");

382 
	`¥ötf
(
	`_
("ver: %d flags: 0x%x id: %d \n"),

383 
dq
->
d_vîsi⁄
, dq->
d_Êags
,

384 
	`be32_to_˝u
(
dq
->
d_id
));

385 
	`¥ötf
(
	`_
("blkÜimits hard: %llu soft: %llu\n"),

387 
	`be64_to_˝u
(
dq
->
d_blk_h¨dlimô
),

389 
	`be64_to_˝u
(
dq
->
d_blk_so·limô
));

390 
	`¥ötf
(
	`_
("blk count: %llu warns: %dÅimer: %d\n"),

391 (Ë
	`be64_to_˝u
(
dq
->
d_bcou¡
),

392 (Ë
	`be16_to_˝u
(
dq
->
d_bw¨ns
),

393 
	`be32_to_˝u
(
dq
->
d_btimî
));

394 
	`¥ötf
(
	`_
("inoÜimits hard: %llu soft: %llu\n"),

396 
	`be64_to_˝u
(
dq
->
d_öo_h¨dlimô
),

398 
	`be64_to_˝u
(
dq
->
d_öo_so·limô
));

399 
	`¥ötf
(
	`_
("ino count: %llu warns: %dÅimer: %d\n"),

400 (Ë
	`be64_to_˝u
(
dq
->
d_icou¡
),

401 (Ë
	`be16_to_˝u
(
dq
->
d_iw¨ns
),

402 
	`be32_to_˝u
(
dq
->
d_ôimî
));

405 
	`¥ötf
(
	`_
("BUF DATA\n"));

406 i‡(
¥öt_d©a
) {

407 
uöt
 *
dp
 = (uöà*)*
±r
;

408 
nums
 = 
	`be32_to_˝u
(
hód
->
oh_Àn
) >> 2;

409 
i
 = 0;

411 
i
 < 
nums
) {

412 i‡((
i
 % 8) == 0)

413 
	`¥ötf
("%2x ", 
i
);

414 
	`¥ötf
("%8x ", *
dp
);

415 
dp
++;

416 
i
++;

417 i‡((
i
 % 8) == 0)

418 
	`¥ötf
("\n");

420 
	`¥ötf
("\n");

423 *
±r
 +
	`be32_to_˝u
(
hód
->
oh_Àn
);

425 i‡(
hód
 && hód->
oh_Êags
 & 
XLOG_CONTINUE_TRANS
)

426 
skù
++;

427  
skù
;

428 
	}
}

432 
	$xlog_¥öt_å™s_qoff
(**
±r
, 
uöt
 
Àn
)

434 
xfs_qoff_logf‹m©_t
 *
f
;

435 
xfs_qoff_logf‹m©_t
 
lbuf
;

437 
	`memmove
(&
lbuf
, *
±r
, 
	`MIN
((
xfs_qoff_logf‹m©_t
), 
Àn
));

438 
f
 = &
lbuf
;

439 *
±r
 +
Àn
;

440 i‡(
Àn
 >(
xfs_qoff_logf‹m©_t
)) {

441 
	`¥ötf
(
	`_
("QOFF: #ªgs: %d fœgs: 0x%x\n"), 
f
->
qf_size
, f->
qf_Êags
);

444 
	`¥ötf
(
	`_
("QOFF: NotÉnough dataÅo decode further\n"));

447 
	}
}

451 
	$xlog_¥öt_å™s_öode_c‹e
(

452 
xfs_log_döode
 *
ù
)

454 
	`¥ötf
(
	`_
("INODE CORE\n"));

455 
	`¥ötf
(
	`_
("magic 0x%hx mode 0%ho version %d format %d\n"),

456 
ù
->
di_magic
, ip->
di_mode
, ()ù->
di_vîsi⁄
,

457 ()
ù
->
di_f‹m©
);

458 
	`¥ötf
(
	`_
("nlink %hd uid %d gid %d\n"),

459 
ù
->
di_∆ök
, ip->
di_uid
, ip->
di_gid
);

460 
	`¥ötf
(
	`_
("atime 0x%x mtime 0x%x ctime 0x%x\n"),

461 
ù
->
di_©ime
.
t_£c
, ip->
di_mtime
.t_£c, ip->
di_˘ime
.t_sec);

462 
	`¥ötf
(
	`_
("size 0x%llxÇblocks 0x%llxÉxtsize 0x%xÇextents 0x%x\n"),

463 ()
ù
->
di_size
, ()ù->
di_nblocks
,

464 
ù
->
di_extsize
, ip->
di_√xã¡s
);

465 
	`¥ötf
(
	`_
("naextents 0x%x forkoff %d dmevmask 0x%x dmstate 0x%hx\n"),

466 
ù
->
di_™exã¡s
, ()ù->
di_f‹koff
, ip->
di_dmevmask
,

467 
ù
->
di_dm°©e
);

468 
	`¥ötf
(
	`_
("flags 0x%x gen 0x%x\n"),

469 
ù
->
di_Êags
, ip->
di_gí
);

470 i‡(
ù
->
di_vîsi⁄
 == 3) {

471 
	`¥ötf
(
	`_
("flags2 0x%llx cowextsize 0x%x\n"),

472 ()
ù
->
di_Êags2
, ip->
di_cowextsize
);

474 
	}
}

477 
	$xlog_¥öt_dú2_sf
(

478 
xlog
 *
log
,

479 
xfs_dú2_sf_hdr_t
 *
sÂ
,

480 
size
)

482 
xfs_öo_t
 
öo
;

483 
cou¡
;

484 
i
;

485 
«mebuf
[257];

486 
xfs_dú2_sf_íåy_t
 *
s„p
;

488 
	`¥ötf
(
	`_
("SHORTFORM DIRECTORY size %d\n"),

489 
size
);

494 
	`¥ötf
(
	`_
("SHORTFORM DIRECTORY size %d count %d\n"),

495 
size
, 
sÂ
->
cou¡
);

496 
	`memmove
(&
öo
, &(
sÂ
->
∑ª¡
), (ino));

497 
	`¥ötf
(
	`_
(".. inÿ0x%Œx\n"), (Ë
	`be64_to_˝u
(
öo
));

499 
cou¡
 = 
sÂ
->count;

500 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
);

501 
i
 = 0; i < 
cou¡
; i++) {

502 
öo
 = 
	`M_DIROPS
(
log
->
l_mp
)->
	`sf_gë_öo
(
sÂ
, 
s„p
);

503 
	`memmove
(
«mebuf
, (
s„p
->
«me
), s„p->
«mñí
);

504 
«mebuf
[
s„p
->
«mñí
] = '\0';

505 
	`¥ötf
(
	`_
("%s ino 0x%llxÇamelen %d\n"),

506 
«mebuf
, ()
öo
, 
s„p
->
«mñí
);

507 
s„p
 = 
	`M_DIROPS
(
log
->
l_mp
)->
	`sf_√xã¡ry
(
sÂ
, sfep);

509 
	}
}

512 
	$xlog_¥öt_å™s_öode
(

513 
xlog
 *
log
,

514 **
±r
,

515 
Àn
,

516 *
i
,

517 
num_›s
,

518 
c⁄töued
)

520 
xfs_log_döode
 
döo
;

521 
xlog_›_hódî_t
 *
›_hód
;

522 
xfs_öode_log_f‹m©_t
 
d°_lbuf
;

523 
xfs_öode_log_f‹m©_64_t
 
§c_lbuf
;

524 
xfs_öode_log_f‹m©_t
 *
f
;

525 
mode
;

526 
size
;

527 
skù_cou¡
;

538 
	`memmove
(&
§c_lbuf
, *
±r
, 
	`MIN
((
xfs_öode_log_f‹m©_64_t
), 
Àn
));

539 (*
i
)++;

540 *
±r
 +
Àn
;

541 i‡(!
c⁄töued
 &&

542 (
Àn
 =(
xfs_öode_log_f‹m©_32_t
) ||

543 
Àn
 =(
xfs_öode_log_f‹m©_64_t
))) {

544 
f
 = 
	`xfs_öode_ôem_f‹m©_c⁄vît
((*)&
§c_lbuf
, 
Àn
, &
d°_lbuf
);

545 
	`¥ötf
(
	`_
("INODE: "));

546 
	`¥ötf
(
	`_
("#regs: %d ino: 0x%llx flags: 0x%x dsize: %d\n"),

547 
f
->
ûf_size
, ()f->
ûf_öo
,

548 
f
->
ûf_fõlds
, f->
ûf_dsize
);

549 
	`¥ötf
(
	`_
(" blkno: %lldÜen: %d boff: %d\n"),

550 ()
f
->
ûf_blkno
, f->
ûf_Àn
, f->
ûf_boff£t
);

552 
	`ASSERT
(
Àn
 >= 4);

553 
f
 = (
xfs_öode_log_f‹m©_t
 *)&
§c_lbuf
;

554 
	`¥ötf
(
	`_
("INODE: #regs: %d NotÖrintingÑest of data\n"),

555 
f
->
ûf_size
);

556  
f
->
ûf_size
;

559 
skù_cou¡
 = 
f
->
ûf_size
-1;

561 i‡(*
i
 >
num_›s
)

562  
skù_cou¡
;

565 
›_hód
 = (
xlog_›_hódî_t
 *)*
±r
;

566 
	`xlog_¥öt_›_hódî
(
›_hód
, *
i
, 
±r
);

568 i‡(
›_hód
->
oh_Êags
 & 
XLOG_CONTINUE_TRANS
) {

569  
skù_cou¡
;

572 
	`memmove
(&
döo
, *
±r
, (dino));

573 
mode
 = 
döo
.
di_mode
 & 
S_IFMT
;

574 
size
 = ()
döo
.
di_size
;

575 
	`xlog_¥öt_å™s_öode_c‹e
(&
döo
);

576 *
±r
 +
	`xfs_log_döode_size
(
döo
.
di_vîsi⁄
);

577 
skù_cou¡
--;

579 
f
->
ûf_fõlds
 & (
XFS_ILOG_DEV
 | 
XFS_ILOG_UUID
)) {

580 
XFS_ILOG_DEV
:

581 
	`¥ötf
(
	`_
("DEV inode:ÇoÉxtraÑegion\n"));

583 
XFS_ILOG_UUID
:

584 
	`¥ötf
(
	`_
("UUID inode:ÇoÉxtraÑegion\n"));

589 i‡(
f
->
ûf_size
 == 2)

592 
	`ASSERT
(
f
->
ûf_size
 <= 4);

593 
	`ASSERT
((
f
->
ûf_size
 =3Ë|| (f->
ûf_fõlds
 & 
XFS_ILOG_AFORK
));

596 
›_hód
 = (
xlog_›_hódî_t
 *)*
±r
;

598 i‡(
f
->
ûf_fõlds
 & 
XFS_ILOG_DFORK
) {

599 i‡(*
i
 =
num_›s
-1)

600  
skù_cou¡
;

601 (*
i
)++;

602 
	`xlog_¥öt_›_hódî
(
›_hód
, *
i
, 
±r
);

604 
f
->
ûf_fõlds
 & 
XFS_ILOG_DFORK
) {

605 
XFS_ILOG_DEXT
:

606 
	`¥ötf
(
	`_
("EXTENTS inode data\n"));

608 
XFS_ILOG_DBROOT
:

609 
	`¥ötf
(
	`_
("BTREE inode data\n"));

611 
XFS_ILOG_DDATA
:

612 
	`¥ötf
(
	`_
("LOCAL inode data\n"));

613 i‡(
mode
 =
S_IFDIR
)

614 
	`xlog_¥öt_dú2_sf
(
log
, (
xfs_dú2_sf_hdr_t
 *)*
±r
, 
size
);

617 
	`ASSERT
((
f
->
ûf_fõlds
 & 
XFS_ILOG_DFORK
) == 0);

621 *
±r
 +
	`be32_to_˝u
(
›_hód
->
oh_Àn
);

622 i‡(
›_hód
->
oh_Êags
 & 
XLOG_CONTINUE_TRANS
)

623  
skù_cou¡
;

624 
›_hód
 = (
xlog_›_hódî_t
 *)*
±r
;

625 
skù_cou¡
--;

628 i‡(
f
->
ûf_fõlds
 & 
XFS_ILOG_AFORK
) {

629 i‡(*
i
 =
num_›s
-1)

630  
skù_cou¡
;

631 (*
i
)++;

632 
	`xlog_¥öt_›_hódî
(
›_hód
, *
i
, 
±r
);

634 
f
->
ûf_fõlds
 & 
XFS_ILOG_AFORK
) {

635 
XFS_ILOG_AEXT
:

636 
	`¥ötf
(
	`_
("EXTENTSáttr data\n"));

638 
XFS_ILOG_ABROOT
:

639 
	`¥ötf
(
	`_
("BTREEáttr data\n"));

641 
XFS_ILOG_ADATA
:

642 
	`¥ötf
(
	`_
("LOCALáttr data\n"));

643 i‡(
mode
 =
S_IFDIR
)

644 
	`xlog_¥öt_dú2_sf
(
log
, (
xfs_dú2_sf_hdr_t
 *)*
±r
, 
size
);

647 
	`ASSERT
((
f
->
ûf_fõlds
 & 
XFS_ILOG_AFORK
) == 0);

650 *
±r
 +
	`be32_to_˝u
(
›_hód
->
oh_Àn
);

651 i‡(
›_hód
->
oh_Êags
 & 
XLOG_CONTINUE_TRANS
)

652  
skù_cou¡
;

653 
skù_cou¡
--;

656 
	`ASSERT
(
skù_cou¡
 == 0);

659 
	}
}

663 
	$xlog_¥öt_å™s_dquŸ
(**
±r
, 
Àn
, *
i
, 
num_›s
)

665 
xfs_dq_logf‹m©_t
 *
f
;

666 
xfs_dq_logf‹m©_t
 
lbuf
 = {0};

667 
xfs_disk_dquŸ_t
 
ddq
;

668 
xlog_›_hódî_t
 *
hód
 = 
NULL
;

669 
num
, 
skù
;

677 
	`memmove
(&
lbuf
, *
±r
, 
	`MIN
((
xfs_dq_logf‹m©_t
), 
Àn
));

678 
f
 = &
lbuf
;

679 (*
i
)++;

680 *
±r
 +
Àn
;

682 i‡(
Àn
 =(
xfs_dq_logf‹m©_t
)) {

683 
	`¥ötf
(
	`_
("#ªgs: %d id: 0x%x"), 
f
->
qlf_size
, f->
qlf_id
);

684 
	`¥ötf
(
	`_
(" blkno: %lldÜen: %d boff: %d\n"),

685 ()
f
->
qlf_blkno
, f->
qlf_Àn
, f->
qlf_boff£t
);

687 
	`ASSERT
(
Àn
 >= 4);

688 
	`¥ötf
(
	`_
("DQUOT: #regs: %d NotÖrintingÑest of data\n"),

689 
f
->
qlf_size
);

690  
f
->
qlf_size
;

692 
num
 = 
f
->
qlf_size
-1;

695 i‡(*
i
+
num
 > 
num_›s
-1) {

696 
skù
 = 
num
 - (
num_›s
-1-*
i
);

697 
num
 = 
num_›s
-1-*
i
;

699 
skù
 = 0;

702 
num
-- > 0) {

703 
hód
 = (
xlog_›_hódî_t
 *)*
±r
;

704 
	`xlog_¥öt_›_hódî
(
hód
, *
i
, 
±r
);

705 
	`ASSERT
(
	`be32_to_˝u
(
hód
->
oh_Àn
Ë=(
xfs_disk_dquŸ_t
));

706 
	`memmove
(&
ddq
, *
±r
, (
xfs_disk_dquŸ_t
));

707 
	`¥ötf
(
	`_
("DQUOT: magic 0x%hx flags 0%ho\n"),

708 
	`be16_to_˝u
(
ddq
.
d_magic
), ddq.
d_Êags
);

709 *
±r
 +
	`be32_to_˝u
(
hód
->
oh_Àn
);

711 i‡(
hód
 && hód->
oh_Êags
 & 
XLOG_CONTINUE_TRANS
)

712 
skù
++;

713  
skù
;

714 
	}
}

717 
STATIC
 

718 
	$xlog_¥öt_å™s_i¸óã
(

719 **
±r
,

720 
Àn
,

721 *
i
,

722 
num_›s
)

724 
xfs_i¸óã_log
 
i˛_buf
 = {0};

725 
xfs_i¸óã_log
 *
i˛
;

727 
	`memmove
(&
i˛_buf
, *
±r
, 
	`MIN
((
xfs_i¸óã_log
), 
Àn
));

728 
i˛
 = &
i˛_buf
;

729 *
±r
 +
Àn
;

732 i‡(
Àn
 !(
xfs_i¸óã_log
)) {

733 
	`¥ötf
(
	`_
("ICR: split header,ÇotÖrinting\n"));

737 
	`¥ötf
(
	`_
("ICR: #ag: %dágbno: 0x%xÜen: %d\n"

739 
	`be32_to_˝u
(
i˛
->
i˛_ag
), be32_to_˝u(i˛->
i˛_agbno
),

740 
	`be32_to_˝u
(
i˛
->
i˛_Àngth
), be32_to_˝u(i˛->
i˛_cou¡
),

741 
	`be32_to_˝u
(
i˛
->
i˛_isize
), be32_to_˝u(i˛->
i˛_gí
));

743 
	}
}

753 
	$xlog_¥öt_l£ek
(
xlog
 *
log
, 
fd
, 
xfs_daddr_t
 
blkno
, 
whí˚
)

755 
	#BBTOOFF64
(
bbs
Ë(((
xfs_off_t
)(bbs)Ë<< 
BBSHIFT
)

	)

756 
xfs_off_t
 
off£t
;

758 i‡(
whí˚
 =
SEEK_SET
)

759 
off£t
 = 
	`BBTOOFF64
(
blkno
+
log
->
l_logBB°¨t
);

761 
off£t
 = 
	`BBTOOFF64
(
blkno
);

762 i‡(
	`l£ek
(
fd
, 
off£t
, 
whí˚
) < 0) {

763 
	`Ârötf
(
°dîr
, 
	`_
("%s:ÜseekÅo %lld failed: %s\n"),

764 
¥og«me
, ()
off£t
, 
	`°ªº‹
(
î∫o
));

765 
	`exô
(1);

767 
	}
}

771 
	$¥öt_l¢
(*
°rög
,

772 
__be64
 *
l¢
)

774 
	`¥ötf
("%s: %u,%u", 
°rög
,

775 
	`CYCLE_LSN
(
	`be64_to_˝u
(*
l¢
)), 
	`BLOCK_LSN
(be64_to_cpu(*lsn)));

776 
	}
}

780 
	$xlog_¥öt_ªc‹d
(

781 
xlog
 *
log
,

782 
fd
,

783 
num_›s
,

784 
Àn
,

785 *
ªad_ty≥
,

786 **
∑πül_buf
,

787 
xlog_ªc_hódî_t
 *
rhód
,

788 
xlog_ªc_ext_hódî_t
 *
xhdrs
,

789 
bad_hdr_w¨n
)

791 *
buf
, *
±r
;

792 
ªad_Àn
, 
skù
, 
lo°_c⁄ãxt
 = 0;

793 
ªt
, 
n
, 
i
, 
j
, 
k
;

795 i‡(
¥öt_no_¥öt
)

796  
NO_ERROR
;

798 i‡(!
Àn
) {

799 
	`¥ötf
("\n");

800  
NO_ERROR
;

804 
ªad_Àn
 = (Ë
	`BBTOB
(
	`BTOBB
(
Àn
));

807 i‡(*
ªad_ty≥
 =
FULL_READ
) {

808 i‡((
±r
 = 
buf
 = 
	`mÆloc
(
ªad_Àn
)Ë=
NULL
) {

809 
	`Ârötf
(
°dîr
, 
	`_
("%s: xlog_¥öt_ªc‹d: mÆlo¯Áûed\n"), 
¥og«me
);

810 
	`exô
(1);

813 
ªad_Àn
 -*
ªad_ty≥
;

814 
buf
 = (*)((
öçå_t
)(*
∑πül_buf
Ë+ (öçå_t)(*
ªad_ty≥
));

815 
±r
 = *
∑πül_buf
;

817 i‡((
ªt
 = (Ë
	`ªad
(
fd
, 
buf
, 
ªad_Àn
)) == -1) {

818 
	`Ârötf
(
°dîr
, 
	`_
("%s: xlog_¥öt_ªc‹d:ÑódÉº‹\n"), 
¥og«me
);

819 
	`exô
(1);

822 i‡(*
ªad_ty≥
 =
FULL_READ
 &&

823 
	`BLOCK_LSN
(
	`be64_to_˝u
(
rhód
->
h_l¢
)Ë+ 
	`BTOBB
(
ªad_Àn
) >=

824 
logBBsize
) {

825 *
ªad_ty≥
 = 
	`BBTOB
(
logBBsize
 - 
	`BLOCK_LSN
(
	`be64_to_˝u
(
rhód
->
h_l¢
))-1);

826 *
∑πül_buf
 = 
buf
;

827  
PARTIAL_READ
;

831 i‡((
ªt
 =0 && 
ªad_Àn
 != 0) ||Ñet !=Ñead_len) {

832 *
ªad_ty≥
 = 
ªt
;

833 *
∑πül_buf
 = 
buf
;

834  
PARTIAL_READ
;

836 i‡(*
ªad_ty≥
 !
FULL_READ
)

837 
ªad_Àn
 +*
ªad_ty≥
;

844 
buf
 = 
±r
;

845 
i
 = 0; 
±r
 < 
buf
 + 
ªad_Àn
;Öå +
BBSIZE
, i++) {

846 
xlog_ªc_hódî_t
 *
ªchód
 = (xlog_ªc_hódî_à*)
±r
;

849 i‡(
	`be32_to_˝u
(
ªchód
->
h_magi˙o
Ë=
XLOG_HEADER_MAGIC_NUM
) {

853 
	`‰ì
(
buf
);

859 i‡(
	`be32_to_˝u
(
rhód
->
h_cy˛e
) !=

860 
	`be32_to_˝u
(*(
__be32
 *)
±r
)) {

861 i‡((*
ªad_ty≥
 =
FULL_READ
) ||

862 (
	`be32_to_˝u
(
rhód
->
h_cy˛e
) + 1 !=

863 
	`be32_to_˝u
(*(
__be32
 *)
±r
))) {

864 
	`‰ì
(
buf
);

871 i‡(
i
 < 
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
) {

873 *(
__be32
 *)
±r
 = 
rhód
->
h_cy˛e_d©a
[
i
];

876 
	`ASSERT
(
xhdrs
 !
NULL
);

878 
j
 = 
i
 / (
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
);

879 
k
 = 
i
 % (
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
);

880 *(
__be32
 *)
±r
 = 
xhdrs
[
j
-1].
xh_cy˛e_d©a
[
k
];

885 
±r
 = 
buf
;

886 
i
=0; i<
num_›s
; i++) {

887 
c⁄töued
;

889 
xlog_›_hódî_t
 *
›_hód
 = (xlog_›_hódî_à*)
±r
;

891 
	`¥öt_xlog_›_löe
();

892 
	`xlog_¥öt_›_hódî
(
›_hód
, 
i
, &
±r
);

893 
c⁄töued
 = ((
›_hód
->
oh_Êags
 & 
XLOG_WAS_CONT_TRANS
) ||

894 (
›_hód
->
oh_Êags
 & 
XLOG_CONTINUE_TRANS
));

896 i‡(
c⁄töued
 && 
	`be32_to_˝u
(
›_hód
->
oh_Àn
) == 0)

899 i‡(
¥öt_no_d©a
) {

900 
n
 = 0;Ç < 
	`be32_to_˝u
(
›_hód
->
oh_Àn
);Ç++) {

901 
	`¥ötf
("0x%02x ", ()*
±r
);

902 i‡(
n
 % 16 == 15)

903 
	`¥ötf
("\n");

904 
±r
++;

906 
	`¥ötf
("\n");

911 i‡(
	`xlog_¥öt_föd_tid
(
	`be32_to_˝u
(
›_hód
->
oh_tid
),

912 
›_hód
->
oh_Êags
 & 
XLOG_WAS_CONT_TRANS
)) {

913 
	`¥ötf
(
	`_
("Left overÑegion from splitÜog item\n"));

915 
±r
 +
	`be32_to_˝u
(
›_hód
->
oh_Àn
);

917 
lo°_c⁄ãxt
 = 1;

921 i‡(
	`be32_to_˝u
(
›_hód
->
oh_Àn
) != 0) {

922 i‡(*(
uöt
 *)
±r
 =
XFS_TRANS_HEADER_MAGIC
) {

923 
skù
 = 
	`xlog_¥öt_å™s_hódî
(&
±r
,

924 
	`be32_to_˝u
(
›_hód
->
oh_Àn
));

926 *(*)
±r
) {

927 
XFS_LI_BUF
: {

928 
skù
 = 
	`xlog_¥öt_å™s_buf„r
(&
±r
,

929 
	`be32_to_˝u
(
›_hód
->
oh_Àn
),

930 &
i
, 
num_›s
);

933 
XFS_LI_ICREATE
: {

934 
skù
 = 
	`xlog_¥öt_å™s_i¸óã
(&
±r
,

935 
	`be32_to_˝u
(
›_hód
->
oh_Àn
),

936 &
i
, 
num_›s
);

939 
XFS_LI_INODE
: {

940 
skù
 = 
	`xlog_¥öt_å™s_öode
(
log
, &
±r
,

941 
	`be32_to_˝u
(
›_hód
->
oh_Àn
),

942 &
i
, 
num_›s
, 
c⁄töued
);

945 
XFS_LI_DQUOT
: {

946 
skù
 = 
	`xlog_¥öt_å™s_dquŸ
(&
±r
,

947 
	`be32_to_˝u
(
›_hód
->
oh_Àn
),

948 &
i
, 
num_›s
);

951 
XFS_LI_EFI
: {

952 
skù
 = 
	`xlog_¥öt_å™s_efi
(&
±r
,

953 
	`be32_to_˝u
(
›_hód
->
oh_Àn
),

954 
c⁄töued
);

957 
XFS_LI_EFD
: {

958 
skù
 = 
	`xlog_¥öt_å™s_efd
(&
±r
,

959 
	`be32_to_˝u
(
›_hód
->
oh_Àn
));

962 
XFS_LI_RUI
: {

963 
skù
 = 
	`xlog_¥öt_å™s_rui
(&
±r
,

964 
	`be32_to_˝u
(
›_hód
->
oh_Àn
),

965 
c⁄töued
);

968 
XFS_LI_RUD
: {

969 
skù
 = 
	`xlog_¥öt_å™s_rud
(&
±r
,

970 
	`be32_to_˝u
(
›_hód
->
oh_Àn
));

973 
XFS_LI_CUI
: {

974 
skù
 = 
	`xlog_¥öt_å™s_cui
(&
±r
,

975 
	`be32_to_˝u
(
›_hód
->
oh_Àn
),

976 
c⁄töued
);

979 
XFS_LI_CUD
: {

980 
skù
 = 
	`xlog_¥öt_å™s_cud
(&
±r
,

981 
	`be32_to_˝u
(
›_hód
->
oh_Àn
));

984 
XFS_LI_BUI
: {

985 
skù
 = 
	`xlog_¥öt_å™s_bui
(&
±r
,

986 
	`be32_to_˝u
(
›_hód
->
oh_Àn
),

987 
c⁄töued
);

990 
XFS_LI_BUD
: {

991 
skù
 = 
	`xlog_¥öt_å™s_bud
(&
±r
,

992 
	`be32_to_˝u
(
›_hód
->
oh_Àn
));

995 
XFS_LI_QUOTAOFF
: {

996 
skù
 = 
	`xlog_¥öt_å™s_qoff
(&
±r
,

997 
	`be32_to_˝u
(
›_hód
->
oh_Àn
));

1000 
XLOG_UNMOUNT_TYPE
: {

1001 
	`¥ötf
(
	`_
("Unmount filesystem\n"));

1002 
skù
 = 0;

1006 i‡(
bad_hdr_w¨n
 && !
lo°_c⁄ãxt
) {

1007 
	`Ârötf
(
°dîr
,

1008 
	`_
("%s: unknownÜog operationÅype (%x)\n"),

1009 
¥og«me
, *(*)
±r
);

1010 i‡(
¥öt_exô
) {

1011 
	`‰ì
(
buf
);

1012  
BAD_HEADER
;

1015 
	`¥ötf
(

1016 
	`_
("Left overÑegion from splitÜog item\n"));

1018 
skù
 = 0;

1019 
±r
 +
	`be32_to_˝u
(
›_hód
->
oh_Àn
);

1020 
lo°_c⁄ãxt
 = 0;

1024 i‡(
skù
 != 0)

1025 
	`xlog_¥öt_add_to_å™s
(
	`be32_to_˝u
(
›_hód
->
oh_tid
), 
skù
);

1028 
	`¥ötf
("\n");

1029 
	`‰ì
(
buf
);

1030  
NO_ERROR
;

1031 
	}
}

1035 
	$xlog_¥öt_ªc_hód
(
xlog_ªc_hódî_t
 *
hód
, *
Àn
, 
bad_hdr_w¨n
)

1037 
i
;

1038 
uub
[64];

1039 
d©Æí
,
bbs
;

1041 i‡(
¥öt_no_¥öt
)

1042  
	`be32_to_˝u
(
hód
->
h_num_log›s
);

1044 i‡(!
hód
->
h_magi˙o
)

1045  
ZEROED_LOG
;

1047 i‡(
	`be32_to_˝u
(
hód
->
h_magi˙o
Ë!
XLOG_HEADER_MAGIC_NUM
) {

1048 i‡(
bad_hdr_w¨n
)

1049 
	`¥ötf
(
	`_
("Header 0x%x wanted 0x%x\n"),

1050 
	`be32_to_˝u
(
hód
->
h_magi˙o
),

1051 
XLOG_HEADER_MAGIC_NUM
);

1052  
BAD_HEADER
;

1056 i‡(!
hód
->
h_Àn
 && !hód->
h_¸c
 && !hód->
h_¥ev_block
 &&

1057 !
hód
->
h_num_log›s
 && !hód->
h_size
)

1058  
CLEARED_BLKS
;

1060 
d©Æí
=
	`be32_to_˝u
(
hód
->
h_Àn
);

1061 
bbs
=
	`BTOBB
(
d©Æí
);

1063 
	`¥ötf
(
	`_
("cycle: %d version: %d "),

1064 
	`be32_to_˝u
(
hód
->
h_cy˛e
),

1065 
	`be32_to_˝u
(
hód
->
h_vîsi⁄
));

1066 
	`¥öt_l¢
("Ü¢", &
hód
->
h_l¢
);

1067 
	`¥öt_l¢
("Åaû_l¢", &
hód
->
h_èû_l¢
);

1068 
	`¥ötf
("\n");

1069 
	`¥ötf
(
	`_
("length of Log Record: %dÖrev offset: %dÇum ops: %d\n"),

1070 
d©Æí
,

1071 
	`be32_to_˝u
(
hód
->
h_¥ev_block
),

1072 
	`be32_to_˝u
(
hód
->
h_num_log›s
));

1074 i‡(
¥öt_ovîwrôe
) {

1075 
	`¥ötf
(
	`_
("cycleÇum overwrites: "));

1076 
i
=0; i< 
	`MIN
(
bbs
, 
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
); i++)

1077 
	`¥ötf
("%d - 0x%x ",

1078 
i
,

1079 
	`be32_to_˝u
(
hód
->
h_cy˛e_d©a
[
i
]));

1080 
	`¥ötf
("\n");

1083 
	`∂©f‹m_uuid_u≈¨£
(&
hód
->
h_fs_uuid
, 
uub
);

1084 
	`¥ötf
(
	`_
("uuid: %† f‹m©: "), 
uub
);

1085 
	`be32_to_˝u
(
hód
->
h_fmt
)) {

1086 
XLOG_FMT_UNKNOWN
:

1087 
	`¥ötf
(
	`_
("unknown\n"));

1089 
XLOG_FMT_LINUX_LE
:

1090 
	`¥ötf
(
	`_
("littleÉndianÜinux\n"));

1092 
XLOG_FMT_LINUX_BE
:

1093 
	`¥ötf
(
	`_
("bigÉndianÜinux\n"));

1095 
XLOG_FMT_IRIX_BE
:

1096 
	`¥ötf
(
	`_
("bigÉndian irix\n"));

1099 
	`¥ötf
("? (%d)\n", 
	`be32_to_˝u
(
hód
->
h_fmt
));

1102 
	`¥ötf
(
	`_
("h_size: %d\n"), 
	`be32_to_˝u
(
hód
->
h_size
));

1104 *
Àn
 = 
	`be32_to_˝u
(
hód
->
h_Àn
);

1105 (
	`be32_to_˝u
(
hód
->
h_num_log›s
));

1106 
	}
}

1109 
	$xlog_¥öt_ªc_xhód
(
xlog_ªc_ext_hódî_t
 *
hód
, 
covîage
)

1111 
i
;

1113 
	`¥öt_xlog_xhdr_löe
();

1114 
	`¥ötf
(
	`_
("exãnded-hódî: cy˛e: %d\n"), 
	`be32_to_˝u
(
hód
->
xh_cy˛e
));

1116 i‡(
¥öt_ovîwrôe
) {

1117 
	`¥ötf
(
	`_
("cycleÇum overwrites: "));

1118 
i
 = 0; i < 
covîage
; i++)

1119 
	`¥ötf
("%d - 0x%x ",

1120 
i
,

1121 
	`be32_to_˝u
(
hód
->
xh_cy˛e_d©a
[
i
]));

1122 
	`¥ötf
("\n");

1124 
	}
}

1127 
	$¥öt_xlog_bad_zî€d
(
xfs_daddr_t
 
blkno
)

1129 
	`¥öt_°¨s
();

1130 
	`¥ötf
(
	`_
("* ERROR: found dataáfter zeroed blocks block=%-21lld *\n"),

1131 ()
blkno
);

1132 
	`¥öt_°¨s
();

1133 i‡(
¥öt_exô
)

1134 
	`xlog_exô
("BadÜog - dataáfter zeroed blocks");

1135 
	}
}

1138 
	$¥öt_xlog_bad_hódî
(
xfs_daddr_t
 
blkno
, *
buf
)

1140 
	`¥öt_°¨s
();

1141 
	`¥ötf
(
	`_
("* ERROR: header cycle=%-11d block=%-21lld *\n"),

1142 
	`xlog_gë_cy˛e
(
buf
), ()
blkno
);

1143 
	`¥öt_°¨s
();

1144 i‡(
¥öt_exô
)

1145 
	`xlog_exô
("BadÜogÑecord header");

1146 
	}
}

1149 
	$¥öt_xlog_bad_d©a
(
xfs_daddr_t
 
blkno
)

1151 
	`¥öt_°¨s
();

1152 
	`¥ötf
(
	`_
("* ERROR: data block=%-21lld *\n"),

1153 ()
blkno
);

1154 
	`¥öt_°¨s
();

1155 i‡(
¥öt_exô
)

1156 
	`xlog_exô
("Bad data inÜog");

1157 
	}
}

1160 
	$¥öt_xlog_bad_ªqd_hdrs
(
xfs_daddr_t
 
blkno
, 
num_ªqd
, 
num_hdrs
)

1162 
	`¥öt_°¨s
();

1163 
	`¥ötf
(
	`_
("* ERROR: for header block=%lld\n"

1166 ()
blkno
, 
num_ªqd
, 
num_hdrs
);

1167 
	`¥öt_°¨s
();

1168 i‡(
¥öt_exô
)

1169 
	`xlog_exô
(
	`_
("NotÉnough headers for dataÜength."));

1170 
	}
}

1173 
	$xlog_ªÆloˇã_xhdrs
(
num_hdrs
, 
xlog_ªc_ext_hódî_t
 **
ªt_xhdrs
)

1175 
Àn
 = (
num_hdrs
-1Ë* (
xlog_ªc_ext_hódî_t
);

1177 *
ªt_xhdrs
 = (
xlog_ªc_ext_hódî_t
 *)
	`ªÆloc
(*ªt_xhdrs, 
Àn
);

1178 i‡(*
ªt_xhdrs
 =
NULL
) {

1179 
	`Ârötf
(
°dîr
, 
	`_
("%s: xlog_¥öt: mÆlo¯Áûed f‹Éxàhdrs\n"), 
¥og«me
);

1180 
	`exô
(1);

1182 
	}
}

1186 
	$xlog_¥öt_exãnded_hódîs
(

1187 
fd
,

1188 
Àn
,

1189 
xfs_daddr_t
 *
blkno
,

1190 
xlog_ªc_hódî_t
 *
hdr
,

1191 *
ªt_num_hdrs
,

1192 
xlog_ªc_ext_hódî_t
 **
ªt_xhdrs
)

1194 
i
, 
j
;

1195 
covîage_bb
;

1196 
num_hdrs
;

1197 
num_ªquúed
;

1198 
xhbuf
[
XLOG_HEADER_SIZE
];

1199 
xlog_ªc_ext_hódî_t
 *
x
;

1201 
num_ªquúed
 = 
	`howm™y
(
Àn
, 
XLOG_HEADER_CYCLE_SIZE
);

1202 
num_hdrs
 = 
	`be32_to_˝u
(
hdr
->
h_size
Ë/ 
XLOG_HEADER_CYCLE_SIZE
;

1203 i‡(
	`be32_to_˝u
(
hdr
->
h_size
Ë% 
XLOG_HEADER_CYCLE_SIZE
)

1204 
num_hdrs
++;

1206 i‡(
num_ªquúed
 > 
num_hdrs
) {

1207 
	`¥öt_xlog_bad_ªqd_hdrs
((*
blkno
)-1, 
num_ªquúed
, 
num_hdrs
);

1210 i‡(
num_hdrs
 == 1) {

1211 
	`‰ì
(*
ªt_xhdrs
);

1212 *
ªt_xhdrs
 = 
NULL
;

1213 *
ªt_num_hdrs
 = 1;

1217 i‡(*
ªt_xhdrs
 =
NULL
 || 
num_hdrs
 > *
ªt_num_hdrs
) {

1218 
	`xlog_ªÆloˇã_xhdrs
(
num_hdrs
, 
ªt_xhdrs
);

1221 *
ªt_num_hdrs
 = 
num_hdrs
;

1224 
i
 = 1, 
x
 = *
ªt_xhdrs
; i < 
num_hdrs
; i++, (*
blkno
)++, x++) {

1226 i‡(
	`ªad
(
fd
, 
xhbuf
, 512) == 0) {

1227 
	`¥ötf
(
	`_
("%s:Öhysiˇ»íd o‡log\n"), 
¥og«me
);

1228 
	`¥öt_xlog_ªc‹d_löe
();

1232 i‡(
¥öt_⁄ly_d©a
) {

1233 
	`¥ötf
(
	`_
("BLKNO: %Œd\n"), ()*
blkno
);

1234 
	`xlog_ªcovî_¥öt_d©a
(
xhbuf
, 512);

1237 i‡(
i
 =
num_hdrs
 - 1) {

1239 
covîage_bb
 = 
	`BTOBB
(
Àn
) %

1240 (
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
);

1244 
covîage_bb
 = 
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
;

1246 
	`xlog_¥öt_ªc_xhód
((
xlog_ªc_ext_hódî_t
*)
xhbuf
, 
covîage_bb
);

1254 
x
->
xh_cy˛e
 = ((
xlog_ªc_ext_hódî_t
*)
xhbuf
)->xh_cycle;

1255 
j
 = 0; j < 
XLOG_HEADER_CYCLE_SIZE
 / 
BBSIZE
; j++) {

1256 
x
->
xh_cy˛e_d©a
[
j
] =

1257 ((
xlog_ªc_ext_hódî_t
*)
xhbuf
)->
xh_cy˛e_d©a
[
j
];

1261 
	}
}

1267 
	$xfs_log_¥öt
(
xlog
 *
log
,

1268 
fd
,

1269 
¥öt_block_°¨t
)

1271 
hbuf
[
XLOG_HEADER_SIZE
];

1272 
xlog_ªc_hódî_t
 *
hdr
 = (xlog_ªc_hódî_à*)&
hbuf
[0];

1273 
xlog_ªc_ext_hódî_t
 *
xhdrs
 = 
NULL
;

1274 
num_›s
, 
Àn
, 
num_hdrs
 = 1;

1275 
xfs_daddr_t
 
block_íd
 = 0, 
block_°¨t
, 
blkno
, 
îr‹
;

1276 
xfs_daddr_t
 
zî€d_blkno
 = 0, 
˛óªd_blkno
 = 0;

1277 
ªad_ty≥
 = 
FULL_READ
;

1278 *
∑πül_buf
;

1279 
zî€d
 = 0;

1280 
˛óªd
 = 0;

1281 
fú°_hdr_found
 = 0;

1283 
logBBsize
 = 
log
->
l_logBBsize
;

1290 i‡((
îr‹
 = 
	`xlog_¥öt_föd_ﬁde°
(
log
, &
block_íd
))) {

1291 
	`Ârötf
(
°dîr
, 
	`_
("%s:ÖrobÀm födög olde° LR\n"), 
¥og«me
);

1294 i‡(
¥öt_block_°¨t
 == -1)

1295 
block_°¨t
 = 
block_íd
;

1297 
block_°¨t
 = 
¥öt_block_°¨t
;

1298 
	`xlog_¥öt_l£ek
(
log
, 
fd
, 
block_°¨t
, 
SEEK_SET
);

1299 
blkno
 = 
block_°¨t
;

1302 i‡(
	`ªad
(
fd
, 
hbuf
, 512) == 0) {

1303 
	`¥ötf
(
	`_
("%s:Öhysiˇ»íd o‡log\n"), 
¥og«me
);

1304 
	`¥öt_xlog_ªc‹d_löe
();

1307 i‡(
¥öt_⁄ly_d©a
) {

1308 
	`¥ötf
(
	`_
("BLKNO: %Œd\n"), ()
blkno
);

1309 
	`xlog_ªcovî_¥öt_d©a
(
hbuf
, 512);

1310 
blkno
++;

1311 
lo›
;

1313 
num_›s
 = 
	`xlog_¥öt_ªc_hód
(
hdr
, &
Àn
, 
fú°_hdr_found
);

1314 
blkno
++;

1316 i‡(
zî€d
 && 
num_›s
 !
ZEROED_LOG
) {

1317 
	`¥ötf
(
	`_
("%s:á·î %d zî€d blocks\n"), 
¥og«me
, 
zî€d
);

1319 
	`¥öt_xlog_bad_zî€d
(
blkno
-1);

1323 
zî€d
 = 0;

1326 i‡(
num_›s
 =
ZEROED_LOG
 ||

1327 
num_›s
 =
CLEARED_BLKS
 ||

1328 
num_›s
 =
BAD_HEADER
) {

1329 i‡(
num_›s
 =
ZEROED_LOG
) {

1330 i‡(
zî€d
 == 0)

1331 
zî€d_blkno
 = 
blkno
-1;

1332 
zî€d
++;

1334 i‡(
num_›s
 =
CLEARED_BLKS
) {

1335 i‡(
˛óªd
 == 0)

1336 
˛óªd_blkno
 = 
blkno
-1;

1337 
˛óªd
++;

1339 i‡(!
fú°_hdr_found
)

1340 
block_°¨t
 = 
blkno
;

1342 
	`¥öt_xlog_bad_hódî
(
blkno
-1, 
hbuf
);

1345 
lo›
;

1348 i‡(
	`be32_to_˝u
(
hdr
->
h_vîsi⁄
) == 2) {

1349 i‡(
	`xlog_¥öt_exãnded_hódîs
(
fd
, 
Àn
, &
blkno
, 
hdr
, &
num_hdrs
, &
xhdrs
) != 0)

1353 
îr‹
 = 
	`xlog_¥öt_ªc‹d
(
log
, 
fd
, 
num_›s
, 
Àn
, &
ªad_ty≥
, &
∑πül_buf
,

1354 
hdr
, 
xhdrs
, 
fú°_hdr_found
);

1355 
fú°_hdr_found
++;

1356 
îr‹
) {

1358 
blkno
 +
	`BTOBB
(
Àn
);

1359 i‡(
¥öt_block_°¨t
 != -1 &&

1360 
blkno
 >
block_íd
)

1361 
íd
;

1365 
	`¥öt_xlog_bad_d©a
(
blkno
-1);

1366 i‡(
¥öt_block_°¨t
 != -1 &&

1367 
blkno
 >
block_íd
)

1368 
íd
;

1369 
	`xlog_¥öt_l£ek
(
log
, 
fd
, 
blkno
, 
SEEK_SET
);

1370 
lo›
;

1372 
PARTIAL_READ
: {

1373 
	`¥öt_xlog_ªc‹d_löe
();

1374 
	`¥ötf
(
	`_
("%s:Öhysiˇ»íd o‡log\n"), 
¥og«me
);

1375 
	`¥öt_xlog_ªc‹d_löe
();

1376 
blkno
 = 0;

1377 
	`xlog_¥öt_l£ek
(
log
, 
fd
, 0, 
SEEK_SET
);

1382 i‡(
block_°¨t
 == 0)

1383 
íd
;

1384 
∑πül_log_ªad
;

1386 : 
	`xlog_∑nic
(
	`_
("illegal value"));

1388 
	`¥öt_xlog_ªc‹d_löe
();

1389 
lo›
:

1390 i‡(
blkno
 >
logBBsize
) {

1391 i‡(
˛óªd
) {

1392 
	`¥ötf
(
	`_
("%s: skipped %d cleared blocks inÑange: %lld - %lld\n"),

1393 
¥og«me
, 
˛óªd
,

1394 ()(
˛óªd_blkno
),

1395 ()(
˛óªd
 + 
˛óªd_blkno
 - 1));

1396 i‡(
˛óªd
 =
logBBsize
)

1397 
	`¥ötf
(
	`_
("%s:ÅŸÆly cÀ¨edÜog\n"), 
¥og«me
);

1399 
˛óªd
=0;

1401 i‡(
zî€d
) {

1402 
	`¥ötf
(
	`_
("%s: skipped %d zeroed blocks inÑange: %lld - %lld\n"),

1403 
¥og«me
, 
zî€d
,

1404 ()(
zî€d_blkno
),

1405 ()(
zî€d
 + 
zî€d_blkno
 - 1));

1406 i‡(
zî€d
 =
logBBsize
)

1407 
	`¥ötf
(
	`_
("%s:ÅŸÆly zî€dÜog\n"), 
¥og«me
);

1409 
zî€d
=0;

1411 
	`¥ötf
(
	`_
("%s:Öhysiˇ»íd o‡log\n"), 
¥og«me
);

1412 
	`¥öt_xlog_ªc‹d_löe
();

1418 i‡(
block_°¨t
 != 0) {

1419 
blkno
 = 0;

1420 
	`xlog_¥öt_l£ek
(
log
, 
fd
, 0, 
SEEK_SET
);

1422 i‡(
	`ªad
(
fd
, 
hbuf
, 512) == 0) {

1423 
	`xlog_∑nic
(
	`_
("xlog_find_head: badÑead"));

1425 i‡(
¥öt_⁄ly_d©a
) {

1426 
	`¥ötf
(
	`_
("BLKNO: %Œd\n"), ()
blkno
);

1427 
	`xlog_ªcovî_¥öt_d©a
(
hbuf
, 512);

1428 
blkno
++;

1429 
lo›2
;

1431 
num_›s
 = 
	`xlog_¥öt_ªc_hód
(
hdr
, &
Àn
, 
fú°_hdr_found
);

1432 
blkno
++;

1434 i‡(
num_›s
 =
ZEROED_LOG
 ||

1435 
num_›s
 =
CLEARED_BLKS
 ||

1436 
num_›s
 =
BAD_HEADER
) {

1441 
	`¥öt_xlog_bad_hódî
(
blkno
-1, 
hbuf
);

1443 i‡(
blkno
 >
block_íd
)

1448 i‡(
	`be32_to_˝u
(
hdr
->
h_vîsi⁄
) == 2) {

1449 i‡(
	`xlog_¥öt_exãnded_hódîs
(
fd
, 
Àn
, &
blkno
, 
hdr
, &
num_hdrs
, &
xhdrs
) != 0)

1453 
∑πül_log_ªad
:

1454 
îr‹

	`xlog_¥öt_ªc‹d
(
log
, 
fd
, 
num_›s
, 
Àn
, &
ªad_ty≥
,

1455 &
∑πül_buf
, (
xlog_ªc_hódî_t
 *)
hbuf
,

1456 
xhdrs
, 
fú°_hdr_found
);

1457 i‡(
ªad_ty≥
 !
FULL_READ
)

1458 
Àn
 -
ªad_ty≥
;

1459 
ªad_ty≥
 = 
FULL_READ
;

1460 i‡(!
îr‹
)

1461 
blkno
 +
	`BTOBB
(
Àn
);

1463 
	`¥öt_xlog_bad_d©a
(
blkno
-1);

1464 
	`xlog_¥öt_l£ek
(
log
, 
fd
, 
blkno
, 
SEEK_SET
);

1465 
lo›2
;

1467 
	`¥öt_xlog_ªc‹d_löe
();

1468 
lo›2
:

1469 i‡(
blkno
 >
block_íd
)

1474 
íd
:

1475 
	`¥ötf
(
	`_
("%s:Üogiˇ»íd o‡log\n"), 
¥og«me
);

1476 
	`¥öt_xlog_ªc‹d_löe
();

1477 
	}
}

1483 
xfs_öode_log_f‹m©_t
 *

1484 
	$xfs_öode_ôem_f‹m©_c⁄vît
(*
§c_buf
, 
uöt
 
Àn
, 
xfs_öode_log_f‹m©_t
 *
ö_f
)

1487 i‡(
Àn
 =(
xfs_öode_log_f‹m©_t
)) {

1488  (
xfs_öode_log_f‹m©_t
 *)
§c_buf
;

1491 i‡(
Àn
 =(
xfs_öode_log_f‹m©_32_t
)) {

1492 
xfs_öode_log_f‹m©_32_t
 *
ö_f32
;

1494 
ö_f32
 = (
xfs_öode_log_f‹m©_32_t
 *)
§c_buf
;

1495 
ö_f
->
ûf_ty≥
 = 
ö_f32
->ilf_type;

1496 
ö_f
->
ûf_size
 = 
ö_f32
->ilf_size;

1497 
ö_f
->
ûf_fõlds
 = 
ö_f32
->ilf_fields;

1498 
ö_f
->
ûf_asize
 = 
ö_f32
->ilf_asize;

1499 
ö_f
->
ûf_dsize
 = 
ö_f32
->ilf_dsize;

1500 
ö_f
->
ûf_öo
 = 
ö_f32
->ilf_ino;

1502 
	`mem˝y
(&
ö_f
->
ûf_u
.
ûfu_uuid
, &
ö_f32
->ûf_u.ûfu_uuid, (
uuid_t
));

1503 
ö_f
->
ûf_blkno
 = 
ö_f32
->ilf_blkno;

1504 
ö_f
->
ûf_Àn
 = 
ö_f32
->ilf_len;

1505 
ö_f
->
ûf_boff£t
 = 
ö_f32
->ilf_boffset;

1507 
xfs_öode_log_f‹m©_64_t
 *
ö_f64
;

1509 
	`ASSERT
(
Àn
 =(
xfs_öode_log_f‹m©_64_t
));

1510 
ö_f64
 = (
xfs_öode_log_f‹m©_64_t
 *)
§c_buf
;

1511 
ö_f
->
ûf_ty≥
 = 
ö_f64
->ilf_type;

1512 
ö_f
->
ûf_size
 = 
ö_f64
->ilf_size;

1513 
ö_f
->
ûf_fõlds
 = 
ö_f64
->ilf_fields;

1514 
ö_f
->
ûf_asize
 = 
ö_f64
->ilf_asize;

1515 
ö_f
->
ûf_dsize
 = 
ö_f64
->ilf_dsize;

1516 
ö_f
->
ûf_öo
 = 
ö_f64
->ilf_ino;

1518 
	`mem˝y
(&
ö_f
->
ûf_u
.
ûfu_uuid
, &
ö_f64
->ûf_u.ûfu_uuid, (
uuid_t
));

1519 
ö_f
->
ûf_blkno
 = 
ö_f64
->ilf_blkno;

1520 
ö_f
->
ûf_Àn
 = 
ö_f64
->ilf_len;

1521 
ö_f
->
ûf_boff£t
 = 
ö_f64
->ilf_boffset;

1523  
ö_f
;

1524 
	}
}

	@logprint/log_print_all.c

18 
	~"libxfs.h
"

19 
	~"libxlog.h
"

21 
	~"log¥öt.h
"

27 
	$xlog_¥öt_föd_ﬁde°
(

28 
xlog
 *
log
,

29 
xfs_daddr_t
 *
œ°_blk
)

31 
xfs_buf_t
 *
bp
;

32 
xfs_daddr_t
 
fú°_blk
;

33 
uöt
 
fú°_hÆf_cy˛e
, 
œ°_hÆf_cy˛e
;

34 
îr‹
 = 0;

36 i‡(
	`xlog_föd_zî€d
(
log
, &
fú°_blk
))

39 
fú°_blk
 = 0;

40 
bp
 = 
	`xlog_gë_bp
(
log
, 1);

41 
	`xlog_bªad_nﬂlign
(
log
, 0, 1, 
bp
);

42 
fú°_hÆf_cy˛e
 = 
	`xlog_gë_cy˛e
(
	`XFS_BUF_PTR
(
bp
));

43 *
œ°_blk
 = 
log
->
l_logBBsize
-1;

44 
	`xlog_bªad_nﬂlign
(
log
, *
œ°_blk
, 1, 
bp
);

45 
œ°_hÆf_cy˛e
 = 
	`xlog_gë_cy˛e
(
	`XFS_BUF_PTR
(
bp
));

46 
	`ASSERT
(
œ°_hÆf_cy˛e
 != 0);

48 i‡(
fú°_hÆf_cy˛e
 =
œ°_hÆf_cy˛e
)

49 *
œ°_blk
 = 0;

51 
îr‹
 = 
	`xlog_föd_cy˛e_°¨t
(
log
, 
bp
, 
fú°_blk
,

52 
œ°_blk
, 
œ°_hÆf_cy˛e
);

54 
	`xlog_put_bp
(
bp
);

55  
îr‹
;

56 
	}
}

59 
	$xlog_ªcovî_¥öt_d©a
(

60 *
p
,

61 
Àn
)

63 i‡(
¥öt_d©a
) {

64 
uöt
 *
dp
 = (uöà*)
p
;

65 
nums
 = 
Àn
 >> 2;

66 
j
 = 0;

68 
j
 < 
nums
) {

69 i‡((
j
 % 8) == 0)

70 
	`¥ötf
("%2x ", 
j
);

71 
	`¥ötf
("%8x ", *
dp
);

72 
dp
++;

73 
j
++;

74 i‡((
j
 % 8) == 0)

75 
	`¥ötf
("\n");

77 
	`¥ötf
("\n");

79 
	}
}

81 
STATIC
 

82 
	$xlog_ªcovî_¥öt_buf„r
(

83 
xlog_ªcovî_ôem_t
 *
ôem
)

85 
xfs_agi_t
 *
agi
;

86 
xfs_agf_t
 *
agf
;

87 
xfs_buf_log_f‹m©_t
 *
f
;

88 *
p
;

89 
Àn
, 
num
, 
i
;

90 
xfs_daddr_t
 
blkno
;

91 
xfs_disk_dquŸ_t
 *
ddq
;

93 
f
 = (
xfs_buf_log_f‹m©_t
 *)
ôem
->
ri_buf
[0].
i_addr
;

94 
	`¥ötf
(" ");

95 
	`ASSERT
(
f
->
blf_ty≥
 =
XFS_LI_BUF
);

96 
	`¥ötf
(
	`_
("BUF: #regs:%d start blkno:0x%llxÜen:%d bmap size:%d flags:0x%x\n"),

97 
f
->
blf_size
, ()f->
blf_blkno
, f->
blf_Àn
, f->
blf_m≠_size
, f->
blf_Êags
);

98 
blkno
 = (
xfs_daddr_t
)
f
->
blf_blkno
;

99 
num
 = 
f
->
blf_size
-1;

100 
i
 = 1;

101 
num
-- > 0) {

102 
p
 = 
ôem
->
ri_buf
[
i
].
i_addr
;

103 
Àn
 = 
ôem
->
ri_buf
[
i
].
i_Àn
;

104 
i
++;

105 i‡(
blkno
 == 0) {

106 
	`¥ötf
(
	`_
(" SUPER Block Buffer:\n"));

107 i‡(!
¥öt_buf„r
)

109 
	`¥ötf
(
	`_
(" icount:%llu ifree:%llu "),

111 
	`be64_to_˝u
(*(
__be64
 *)(
p
)),

113 
	`be64_to_˝u
(*(
__be64
 *)(
p
+8)));

114 
	`¥ötf
(
	`_
("fdblks:%llu frext:%llu\n"),

116 
	`be64_to_˝u
(*(
__be64
 *)(
p
+16)),

118 
	`be64_to_˝u
(*(
__be64
 *)(
p
+24)));

119 
	`¥ötf
(
	`_
(" sunit:%u swidth:%u\n"),

120 
	`be32_to_˝u
(*(
__be32
 *)(
p
+56)),

121 
	`be32_to_˝u
(*(
__be32
 *)(
p
+60)));

122 } i‡(
	`be32_to_˝u
(*(
__be32
 *)
p
Ë=
XFS_AGI_MAGIC
) {

123 
buckë
, 
buckës
;

124 
agi
 = (
xfs_agi_t
 *)
p
;

125 
	`¥ötf
(
	`_
(" AGI Buffer: (XAGI)\n"));

126 i‡(!
¥öt_buf„r
)

128 
	`¥ötf
(
	`_
(" ver:%d "),

129 
	`be32_to_˝u
(
agi
->
agi_vîsi⁄num
));

130 
	`¥ötf
(
	`_
("seq#:%dÜen:%d cnt:%dÑoot:%d\n"),

131 
	`be32_to_˝u
(
agi
->
agi_£qno
),

132 
	`be32_to_˝u
(
agi
->
agi_Àngth
),

133 
	`be32_to_˝u
(
agi
->
agi_cou¡
),

134 
	`be32_to_˝u
(
agi
->
agi_roŸ
));

135 
	`¥ötf
(
	`_
("Üevel:%d free#:0x%xÇewino:0x%x\n"),

136 
	`be32_to_˝u
(
agi
->
agi_Àvñ
),

137 
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
),

138 
	`be32_to_˝u
(
agi
->
agi_√wöo
));

139 i‡(
Àn
 == 128) {

140 
buckës
 = 17;

141 } i‡(
Àn
 == 256) {

142 
buckës
 = 32 + 17;

144 
buckës
 = 
XFS_AGI_UNLINKED_BUCKETS
;

146 
buckë
 = 0; buckë < 
buckës
;) {

147 
cﬁ
;

148 
	`¥ötf
(
	`_
("buckë[%d - %d]: "), 
buckë
, bucket+3);

149 
cﬁ
 = 0; cﬁ < 4; cﬁ++, 
buckë
++) {

150 i‡(
buckë
 < 
buckës
) {

151 
	`¥ötf
("0x%x ",

152 
	`be32_to_˝u
(
agi
->
agi_u∆öked
[
buckë
]));

155 
	`¥ötf
("\n");

157 } i‡(
	`be32_to_˝u
(*(
__be32
 *)
p
Ë=
XFS_AGF_MAGIC
) {

158 
agf
 = (
xfs_agf_t
 *)
p
;

159 
	`¥ötf
(
	`_
(" AGF Buffer: (XAGF)\n"));

160 i‡(!
¥öt_buf„r
)

162 
	`¥ötf
(
	`_
(" ver:%d seq#:%dÜen:%d \n"),

163 
	`be32_to_˝u
(
agf
->
agf_vîsi⁄num
),

164 
	`be32_to_˝u
(
agf
->
agf_£qno
),

165 
	`be32_to_˝u
(
agf
->
agf_Àngth
));

166 
	`¥ötf
(
	`_
("Ñoot BNO:%d CNT:%d\n"),

167 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_BNOi
]),

168 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_CNTi
]));

169 
	`¥ötf
(
	`_
("Üevel BNO:%d CNT:%d\n"),

170 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNOi
]),

171 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNTi
]));

172 
	`¥ötf
(
	`_
(" 1st:%dÜast:%d cnt:%d "

174 
	`be32_to_˝u
(
agf
->
agf_Êfú°
),

175 
	`be32_to_˝u
(
agf
->
agf_Êœ°
),

176 
	`be32_to_˝u
(
agf
->
agf_Êcou¡
),

177 
	`be32_to_˝u
(
agf
->
agf_‰ìblks
),

178 
	`be32_to_˝u
(
agf
->
agf_l⁄ge°
));

179 } i‡(*(
uöt
 *)
p
 =
XFS_DQUOT_MAGIC
) {

180 
ddq
 = (
xfs_disk_dquŸ_t
 *)
p
;

181 
	`¥ötf
(
	`_
(" DQUOT Buffer:\n"));

182 i‡(!
¥öt_buf„r
)

184 
	`¥ötf
(
	`_
(" UIDs 0x%lx-0x%lx\n"),

185 ()
	`be32_to_˝u
(
ddq
->
d_id
),

186 ()
	`be32_to_˝u
(
ddq
->
d_id
) +

187 (
	`BBTOB
(
f
->
blf_Àn
Ë/ (
xfs_dqblk_t
)) - 1);

189 
	`¥ötf
(
	`_
(" BUF DATA\n"));

190 i‡(!
¥öt_buf„r
) ;

191 
	`xlog_ªcovî_¥öt_d©a
(
p
, 
Àn
);

194 
	}
}

196 
STATIC
 

197 
	$xlog_ªcovî_¥öt_quŸaoff
(

198 
xlog_ªcovî_ôem_t
 *
ôem
)

200 
xfs_qoff_logf‹m©_t
 *
qoff_f
;

201 
°r
[32] = { 0 };

203 
qoff_f
 = (
xfs_qoff_logf‹m©_t
 *)
ôem
->
ri_buf
[0].
i_addr
;

204 
	`ASSERT
(
qoff_f
);

205 i‡(
qoff_f
->
qf_Êags
 & 
XFS_UQUOTA_ACCT
)

206 
	`°rˇt
(
°r
, "USER QUOTA");

207 i‡(
qoff_f
->
qf_Êags
 & 
XFS_GQUOTA_ACCT
)

208 
	`°rˇt
(
°r
, "GROUP QUOTA");

209 i‡(
qoff_f
->
qf_Êags
 & 
XFS_PQUOTA_ACCT
)

210 
	`°rˇt
(
°r
, "PROJECT QUOTA");

211 
	`¥ötf
(
	`_
("\tQUOTAOFF: #regs:%dÅype:%s\n"),

212 
qoff_f
->
qf_size
, 
°r
);

213 
	}
}

215 
STATIC
 

216 
	$xlog_ªcovî_¥öt_dquŸ
(

217 
xlog_ªcovî_ôem_t
 *
ôem
)

219 
xfs_dq_logf‹m©_t
 *
f
;

220 
xfs_disk_dquŸ_t
 *
d
;

222 
f
 = (
xfs_dq_logf‹m©_t
 *)
ôem
->
ri_buf
[0].
i_addr
;

223 
	`ASSERT
(
f
);

224 
	`ASSERT
(
f
->
qlf_Àn
 == 1);

225 
d
 = (
xfs_disk_dquŸ_t
 *)
ôem
->
ri_buf
[1].
i_addr
;

226 
	`¥ötf
(
	`_
("\tDQUOT: #regs:%d blkno:%lld boffset:%u id: %d\n"),

227 
f
->
qlf_size
, ()f->
qlf_blkno
, f->
qlf_boff£t
, f->
qlf_id
);

228 i‡(!
¥öt_quŸa
)

230 
	`¥ötf
(
	`_
("\t\tmagic 0x%x\tversion 0x%x\tID 0x%x (%d)\t\n"),

231 
	`be16_to_˝u
(
d
->
d_magic
),

232 
d
->
d_vîsi⁄
,

233 
	`be32_to_˝u
(
d
->
d_id
),

234 
	`be32_to_˝u
(
d
->
d_id
));

235 
	`¥ötf
(
	`_
("\t\tblk_hard 0x%x\tblk_soft 0x%x\tino_hard 0x%x"

237 ()
	`be64_to_˝u
(
d
->
d_blk_h¨dlimô
),

238 ()
	`be64_to_˝u
(
d
->
d_blk_so·limô
),

239 ()
	`be64_to_˝u
(
d
->
d_öo_h¨dlimô
),

240 ()
	`be64_to_˝u
(
d
->
d_öo_so·limô
));

241 
	`¥ötf
(
	`_
("\t\tbcount 0x%x (%d) icount 0x%x (%d)\n"),

242 ()
	`be64_to_˝u
(
d
->
d_bcou¡
),

243 ()
	`be64_to_˝u
(
d
->
d_bcou¡
),

244 ()
	`be64_to_˝u
(
d
->
d_icou¡
),

245 ()
	`be64_to_˝u
(
d
->
d_icou¡
));

246 
	`¥ötf
(
	`_
("\t\tbtimer 0x%x itimer 0x%x \n"),

247 ()
	`be32_to_˝u
(
d
->
d_btimî
),

248 ()
	`be32_to_˝u
(
d
->
d_ôimî
));

249 
	}
}

251 
STATIC
 

252 
	$xlog_ªcovî_¥öt_öode_c‹e
(

253 
xfs_log_döode
 *
di
)

255 
	`¥ötf
(
	`_
(" CORE inode:\n"));

256 i‡(!
¥öt_öode
)

258 
	`¥ötf
(
	`_
(" magic:%c%c mode:0x%x ver:%d format:%d\n"),

259 (
di
->
di_magic
>>8) & 0xff, di->di_magic & 0xff,

260 
di
->
di_mode
, di->
di_vîsi⁄
, di->
di_f‹m©
);

261 
	`¥ötf
(
	`_
(" uid:%d gid:%dÇlink:%dÖrojid:0x%04x%04x\n"),

262 
di
->
di_uid
, di->
di_gid
, di->
di_∆ök
,

263 
di
->
di_¥ojid_hi
, di->
di_¥ojid_lo
);

264 
	`¥ötf
(
	`_
("átime:%d mtime:%d ctime:%d\n"),

265 
di
->
di_©ime
.
t_£c
, di->
di_mtime
.t_£c, di->
di_˘ime
.t_sec);

266 
	`¥ötf
(
	`_
(" flushôî:%d\n"), 
di
->
di_Êushôî
);

267 
	`¥ötf
(
	`_
(" size:0x%llxÇblks:0x%llxÉxsize:%d "

269 
di
->
di_size
, ()di->
di_nblocks
,

270 
di
->
di_extsize
, di->
di_√xã¡s
, ()di->
di_™exã¡s
);

271 
	`¥ötf
(
	`_
(" forkoff:%d dmevmask:0x%x dmstate:%d flags:0x%x "

273 ()
di
->
di_f‹koff
, di->
di_dmevmask
, ()di->
di_dm°©e
,

274 ()
di
->
di_Êags
, di->
di_gí
);

275 i‡(
di
->
di_vîsi⁄
 == 3) {

276 
	`¥ötf
(
	`_
("flags2 0x%llx cowextsize 0x%x\n"),

277 ()
di
->
di_Êags2
, di->
di_cowextsize
);

279 
	}
}

281 
STATIC
 

282 
	$xlog_ªcovî_¥öt_öode
(

283 
xlog_ªcovî_ôem_t
 *
ôem
)

285 
xfs_öode_log_f‹m©_t
 
f_buf
;

286 
xfs_öode_log_f‹m©_t
 *
f
;

287 
©å_ödex
;

288 
hasd©a
;

289 
haßâr
;

291 
	`ASSERT
(
ôem
->
ri_buf
[0].
i_Àn
 =(
xfs_öode_log_f‹m©_32_t
) ||

292 
ôem
->
ri_buf
[0].
i_Àn
 =(
xfs_öode_log_f‹m©_64_t
));

293 
f
 = 
	`xfs_öode_ôem_f‹m©_c⁄vît
(
ôem
->
ri_buf
[0].
i_addr
, iãm->ri_buf[0].
i_Àn
, &
f_buf
);

295 
	`¥ötf
(
	`_
(" INODE: #regs:%d ino:0x%llx flags:0x%x dsize:%d\n"),

296 
f
->
ûf_size
, ()f->
ûf_öo
, f->
ûf_fõlds
,

297 
f
->
ûf_dsize
);

300 
	`ASSERT
(
ôem
->
ri_buf
[1].
i_Àn
 =
	`xfs_log_döode_size
(2) ||

301 
ôem
->
ri_buf
[1].
i_Àn
 =
	`xfs_log_döode_size
(3));

302 
	`xlog_ªcovî_¥öt_öode_c‹e
((
xfs_log_döode
 *)

303 
ôem
->
ri_buf
[1].
i_addr
);

305 
hasd©a
 = (
f
->
ûf_fõlds
 & 
XFS_ILOG_DFORK
) != 0;

306 
haßâr
 = (
f
->
ûf_fõlds
 & 
XFS_ILOG_AFORK
) != 0;

308 
f
->
ûf_fõlds
 & (
XFS_ILOG_DFORK
|
XFS_ILOG_DEV
|
XFS_ILOG_UUID
)) {

309 
XFS_ILOG_DEXT
:

310 
	`ASSERT
(
f
->
ûf_size
 =3 + 
haßâr
);

311 
	`¥ötf
(
	`_
(" DATA FORK EXTENTS inode data:\n"));

312 i‡(
¥öt_öode
 && 
¥öt_d©a
)

313 
	`xlog_ªcovî_¥öt_d©a
(
ôem
->
ri_buf
[2].
i_addr
,

314 
ôem
->
ri_buf
[2].
i_Àn
);

316 
XFS_ILOG_DBROOT
:

317 
	`ASSERT
(
f
->
ûf_size
 =3 + 
haßâr
);

318 
	`¥ötf
(
	`_
(" DATA FORK BTREE inode data:\n"));

319 i‡(
¥öt_öode
 && 
¥öt_d©a
)

320 
	`xlog_ªcovî_¥öt_d©a
(
ôem
->
ri_buf
[2].
i_addr
,

321 
ôem
->
ri_buf
[2].
i_Àn
);

323 
XFS_ILOG_DDATA
:

324 
	`ASSERT
(
f
->
ûf_size
 =3 + 
haßâr
);

325 
	`¥ötf
(
	`_
(" DATA FORK LOCAL inode data:\n"));

326 i‡(
¥öt_öode
 && 
¥öt_d©a
)

327 
	`xlog_ªcovî_¥öt_d©a
(
ôem
->
ri_buf
[2].
i_addr
,

328 
ôem
->
ri_buf
[2].
i_Àn
);

330 
XFS_ILOG_DEV
:

331 
	`ASSERT
(
f
->
ûf_size
 =2 + 
haßâr
);

332 
	`¥ötf
(
	`_
(" DEV inode:ÇoÉxtraÑegion\n"));

334 
XFS_ILOG_UUID
:

335 
	`ASSERT
(
f
->
ûf_size
 =2 + 
haßâr
);

336 
	`¥ötf
(
	`_
(" UUID inode:ÇoÉxtraÑegion\n"));

340 
	`ASSERT
(
f
->
ûf_size
 =2 + 
haßâr
);

343 
	`xlog_∑nic
("xlog_print_trans_inode: illegal inodeÅype");

346 i‡(
haßâr
) {

347 
©å_ödex
 = 2 + 
hasd©a
;

348 
f
->
ûf_fõlds
 & 
XFS_ILOG_AFORK
) {

349 
XFS_ILOG_AEXT
:

350 
	`ASSERT
(
f
->
ûf_size
 =3 + 
hasd©a
);

351 
	`¥ötf
(
	`_
(" ATTR FORK EXTENTS inode data:\n"));

352 i‡(
¥öt_öode
 && 
¥öt_d©a
)

353 
	`xlog_ªcovî_¥öt_d©a
(

354 
ôem
->
ri_buf
[
©å_ödex
].
i_addr
,

355 
ôem
->
ri_buf
[
©å_ödex
].
i_Àn
);

357 
XFS_ILOG_ABROOT
:

358 
	`ASSERT
(
f
->
ûf_size
 =3 + 
hasd©a
);

359 
	`¥ötf
(
	`_
(" ATTR FORK BTREE inode data:\n"));

360 i‡(
¥öt_öode
 && 
¥öt_d©a
)

361 
	`xlog_ªcovî_¥öt_d©a
(

362 
ôem
->
ri_buf
[
©å_ödex
].
i_addr
,

363 
ôem
->
ri_buf
[
©å_ödex
].
i_Àn
);

365 
XFS_ILOG_ADATA
:

366 
	`ASSERT
(
f
->
ûf_size
 =3 + 
hasd©a
);

367 
	`¥ötf
(
	`_
(" ATTR FORK LOCAL inode data:\n"));

368 i‡(
¥öt_öode
 && 
¥öt_d©a
)

369 
	`xlog_ªcovî_¥öt_d©a
(

370 
ôem
->
ri_buf
[
©å_ödex
].
i_addr
,

371 
ôem
->
ri_buf
[
©å_ödex
].
i_Àn
);

374 
	`xlog_∑nic
("%s: iŒegÆ inodêlog fœg", 
__FUNCTION__
);

377 
	}
}

380 
STATIC
 

381 
	$xlog_ªcovî_¥öt_i¸óã
(

382 
xlog_ªcovî_ôem
 *
ôem
)

384 
xfs_i¸óã_log
 *
i˛
;

386 
i˛
 = (
xfs_i¸óã_log
 *)
ôem
->
ri_buf
[0].
i_addr
;

388 
	`¥ötf
(
	`_
(" ICR: #ag: %dágbno: 0x%xÜen: %d\n"

390 
	`be32_to_˝u
(
i˛
->
i˛_ag
), be32_to_˝u(i˛->
i˛_agbno
),

391 
	`be32_to_˝u
(
i˛
->
i˛_Àngth
), be32_to_˝u(i˛->
i˛_cou¡
),

392 
	`be32_to_˝u
(
i˛
->
i˛_isize
), be32_to_˝u(i˛->
i˛_gí
));

393 
	}
}

396 
	$xlog_ªcovî_¥öt_logôem
(

397 
xlog_ªcovî_ôem_t
 *
ôem
)

399 
	`ITEM_TYPE
(
ôem
)) {

400 
XFS_LI_BUF
:

401 
	`xlog_ªcovî_¥öt_buf„r
(
ôem
);

403 
XFS_LI_ICREATE
:

404 
	`xlog_ªcovî_¥öt_i¸óã
(
ôem
);

406 
XFS_LI_INODE
:

407 
	`xlog_ªcovî_¥öt_öode
(
ôem
);

409 
XFS_LI_EFD
:

410 
	`xlog_ªcovî_¥öt_efd
(
ôem
);

412 
XFS_LI_EFI
:

413 
	`xlog_ªcovî_¥öt_efi
(
ôem
);

415 
XFS_LI_RUD
:

416 
	`xlog_ªcovî_¥öt_rud
(
ôem
);

418 
XFS_LI_RUI
:

419 
	`xlog_ªcovî_¥öt_rui
(
ôem
);

421 
XFS_LI_CUD
:

422 
	`xlog_ªcovî_¥öt_cud
(
ôem
);

424 
XFS_LI_CUI
:

425 
	`xlog_ªcovî_¥öt_cui
(
ôem
);

427 
XFS_LI_BUD
:

428 
	`xlog_ªcovî_¥öt_bud
(
ôem
);

430 
XFS_LI_BUI
:

431 
	`xlog_ªcovî_¥öt_bui
(
ôem
);

433 
XFS_LI_DQUOT
:

434 
	`xlog_ªcovî_¥öt_dquŸ
(
ôem
);

436 
XFS_LI_QUOTAOFF
:

437 
	`xlog_ªcovî_¥öt_quŸaoff
(
ôem
);

440 
	`¥ötf
(
	`_
("xlog_recover_print_logitem: illegalÅype\n"));

443 
	}
}

446 
	$xlog_ªcovî_¥öt_ôem
(

447 
xlog_ªcovî_ôem_t
 *
ôem
)

449 
i
;

451 
	`ITEM_TYPE
(
ôem
)) {

452 
XFS_LI_BUF
:

453 
	`¥ötf
("BUF");

455 
XFS_LI_ICREATE
:

456 
	`¥ötf
("ICR");

458 
XFS_LI_INODE
:

459 
	`¥ötf
("INO");

461 
XFS_LI_EFD
:

462 
	`¥ötf
("EFD");

464 
XFS_LI_EFI
:

465 
	`¥ötf
("EFI");

467 
XFS_LI_RUD
:

468 
	`¥ötf
("RUD");

470 
XFS_LI_RUI
:

471 
	`¥ötf
("RUI");

473 
XFS_LI_CUD
:

474 
	`¥ötf
("CUD");

476 
XFS_LI_CUI
:

477 
	`¥ötf
("CUI");

479 
XFS_LI_BUD
:

480 
	`¥ötf
("BUD");

482 
XFS_LI_BUI
:

483 
	`¥ötf
("BUI");

485 
XFS_LI_DQUOT
:

486 
	`¥ötf
("DQ ");

488 
XFS_LI_QUOTAOFF
:

489 
	`¥ötf
("QOFF");

492 
	`cmn_îr
(
CE_PANIC
, 
	`_
("%s: iŒegÆÅy≥"), 
__FUNCTION__
);

500 
	`¥ötf
(
	`_
(": c¡:%dÅŸÆ:%d "), 
ôem
->
ri_˙t
, iãm->
ri_tŸÆ
);

501 
i
=0; i<
ôem
->
ri_˙t
; i++) {

502 
	`¥ötf
(
	`_
("a:0x%lxÜen:%d "),

503 ()
ôem
->
ri_buf
[
i
].
i_addr
, iãm->ri_buf[i].
i_Àn
);

505 
	`¥ötf
("\n");

506 
	`xlog_ªcovî_¥öt_logôem
(
ôem
);

507 
	}
}

510 
	$xlog_ªcovî_¥öt_å™s
(

511 
xlog_ªcovî_t
 *
å™s
,

512 
li°_hód
 *
ôemq
,

513 
¥öt
)

515 
xlog_ªcovî_ôem_t
 *
ôem
;

517 i‡(
¥öt
 < 3)

520 
	`¥öt_xlog_ªc‹d_löe
();

521 
	`xlog_ªcovî_¥öt_å™s_hód
(
å™s
);

522 
	`li°_f‹_óch_íåy
(
ôem
, 
ôemq
, 
ri_li°
)

523 
	`xlog_ªcovî_¥öt_ôem
(
ôem
);

524 
	}
}

	@logprint/log_print_trans.c

18 
	~"libxfs.h
"

19 
	~"libxlog.h
"

21 
	~"log¥öt.h
"

24 
	$xlog_ªcovî_¥öt_å™s_hód
(

25 
xlog_ªcovî_t
 *
å
)

27 
	`¥ötf
(
	`_
("TRANS:Åid:0x%x #items:%dÅrans:0x%x q:0x%lx\n"),

28 
å
->
r_log_tid
,

29 
å
->
r_thódî
.
th_num_ôems
,

30 
å
->
r_thódî
.
th_tid
, ()&å->
r_ôemq
);

31 
	}
}

34 
	$xlog_ªcovî_do_å™s
(

35 
xlog
 *
log
,

36 
xlog_ªcovî_t
 *
å™s
,

37 
∑ss
)

39 
	`xlog_ªcovî_¥öt_å™s
(
å™s
, &å™s->
r_ôemq
, 3);

41 
	}
}

44 
	$xfs_log_¥öt_å™s
(

45 
xlog
 *
log
,

46 
¥öt_block_°¨t
)

48 
xfs_daddr_t
 
hód_blk
, 
èû_blk
;

49 
îr‹
;

51 
îr‹
 = 
	`xlog_föd_èû
(
log
, &
hód_blk
, &
èû_blk
);

52 i‡(
îr‹
) {

53 
	`Ârötf
(
°dîr
, 
	`_
("%s: failedÅo find headándÅail,Érror: %d\n"),

54 
¥og«me
, 
îr‹
);

55 
	`exô
(1);

58 
	`¥ötf
(
	`_
("ÜogÅail: %lld head: %lld state: %s\n"),

59 ()
èû_blk
,

60 ()
hód_blk
,

61 (
èû_blk
 =
hód_blk
)?"<CLEAN>":"<DIRTY>");

63 i‡(
¥öt_block_°¨t
 != -1) {

64 
	`¥ötf
(
	`_
(" ovîridêèû: %d\n"), 
¥öt_block_°¨t
);

65 
èû_blk
 = 
¥öt_block_°¨t
;

67 
	`¥ötf
("\n");

69 
¥öt_ªc‹d_hódî
 = 1;

71 i‡(
hód_blk
 =
èû_blk
)

80 i‡(
	`XFS_SB_VERSION_NUM
(&
log
->
l_mp
->
m_sb
Ë=
XFS_SB_VERSION_5
 &&

81 
	`xfs_sb_has_öcom∑t_log_„©uª
(&
log
->
l_mp
->
m_sb
,

82 
XFS_SB_FEAT_INCOMPAT_LOG_UNKNOWN
)) {

83 
	`¥ötf
(
	`_
(

87 (
log
->
l_mp
->
m_sb
.
sb_„©uªs_log_öcom∑t
 &

88 
XFS_SB_FEAT_INCOMPAT_LOG_UNKNOWN
));

91 i‡((
îr‹
 = 
	`xlog_do_ªcovîy_∑ss
(
log
, 
hód_blk
, 
èû_blk
, 
XLOG_RECOVER_PASS1
))) {

92 
	`Ârötf
(
°dîr
, 
	`_
("%s: failed in xfs_do_recovery_pass,Érror: %d\n"),

93 
¥og«me
, 
îr‹
);

94 
	`exô
(1);

96 
	}
}

	@logprint/log_redo.c

19 
	~"libxfs.h
"

20 
	~"libxlog.h
"

22 
	~"log¥öt.h
"

27 
	$xfs_efi_c›y_f‹m©
(

28 *
buf
,

29 
uöt
 
Àn
,

30 
xfs_efi_log_f‹m©
 *
d°_efi_fmt
,

31 
c⁄töued
)

33 
uöt
 
i
;

34 
uöt
 
√xã¡s
 = ((
xfs_efi_log_f‹m©_t
 *)
buf
)->
efi_√xã¡s
;

35 
uöt
 
d°_Àn
 = (
xfs_efi_log_f‹m©_t
Ë+ (
√xã¡s
 - 1Ë* (
xfs_exã¡_t
);

36 
uöt
 
Àn32
 = (
xfs_efi_log_f‹m©_32_t
Ë+ (
√xã¡s
 - 1Ë* (
xfs_exã¡_32_t
);

37 
uöt
 
Àn64
 = (
xfs_efi_log_f‹m©_64_t
Ë+ (
√xã¡s
 - 1Ë* (
xfs_exã¡_64_t
);

39 i‡(
Àn
 =
d°_Àn
 || 
c⁄töued
) {

40 
	`mem˝y
((*)
d°_efi_fmt
, 
buf
, 
Àn
);

42 } i‡(
Àn
 =
Àn32
) {

43 
xfs_efi_log_f‹m©_32_t
 *
§c_efi_fmt_32
 = (xfs_efi_log_f‹m©_32_à*)
buf
;

45 
d°_efi_fmt
->
efi_ty≥
 = 
§c_efi_fmt_32
->efi_type;

46 
d°_efi_fmt
->
efi_size
 = 
§c_efi_fmt_32
->efi_size;

47 
d°_efi_fmt
->
efi_√xã¡s
 = 
§c_efi_fmt_32
->efi_nextents;

48 
d°_efi_fmt
->
efi_id
 = 
§c_efi_fmt_32
->efi_id;

49 
i
 = 0; i < 
d°_efi_fmt
->
efi_√xã¡s
; i++) {

50 
d°_efi_fmt
->
efi_exã¡s
[
i
].
ext_°¨t
 =

51 
§c_efi_fmt_32
->
efi_exã¡s
[
i
].
ext_°¨t
;

52 
d°_efi_fmt
->
efi_exã¡s
[
i
].
ext_Àn
 =

53 
§c_efi_fmt_32
->
efi_exã¡s
[
i
].
ext_Àn
;

56 } i‡(
Àn
 =
Àn64
) {

57 
xfs_efi_log_f‹m©_64_t
 *
§c_efi_fmt_64
 = (xfs_efi_log_f‹m©_64_à*)
buf
;

59 
d°_efi_fmt
->
efi_ty≥
 = 
§c_efi_fmt_64
->efi_type;

60 
d°_efi_fmt
->
efi_size
 = 
§c_efi_fmt_64
->efi_size;

61 
d°_efi_fmt
->
efi_√xã¡s
 = 
§c_efi_fmt_64
->efi_nextents;

62 
d°_efi_fmt
->
efi_id
 = 
§c_efi_fmt_64
->efi_id;

63 
i
 = 0; i < 
d°_efi_fmt
->
efi_√xã¡s
; i++) {

64 
d°_efi_fmt
->
efi_exã¡s
[
i
].
ext_°¨t
 =

65 
§c_efi_fmt_64
->
efi_exã¡s
[
i
].
ext_°¨t
;

66 
d°_efi_fmt
->
efi_exã¡s
[
i
].
ext_Àn
 =

67 
§c_efi_fmt_64
->
efi_exã¡s
[
i
].
ext_Àn
;

71 
	`Ârötf
(
°dîr
, 
	`_
("%s: bad size ofÉfi format: %u;Éxpected %u or %u;Çextents = %u\n"),

72 
¥og«me
, 
Àn
, 
Àn32
, 
Àn64
, 
√xã¡s
);

74 
	}
}

77 
	$xlog_¥öt_å™s_efi
(

78 **
±r
,

79 
uöt
 
§c_Àn
,

80 
c⁄töued
)

82 
xfs_efi_log_f‹m©_t
 *
§c_f
, *
f
 = 
NULL
;

83 
uöt
 
d°_Àn
;

84 
xfs_exã¡_t
 *
ex
;

85 
i
;

86 
îr‹
 = 0;

87 
c‹e_size
 = 
	`off£tof
(
xfs_efi_log_f‹m©_t
, 
efi_exã¡s
);

93 i‡((
§c_f
 = (
xfs_efi_log_f‹m©_t
 *)
	`mÆloc
(
§c_Àn
)Ë=
NULL
) {

94 
	`Ârötf
(
°dîr
, 
	`_
("%s: xlog_¥öt_å™s_efi: mÆlo¯Áûed\n"), 
¥og«me
);

95 
	`exô
(1);

97 
	`memmove
((*)
§c_f
, *
±r
, 
§c_Àn
);

98 *
±r
 +
§c_Àn
;

101 
d°_Àn
 = (
xfs_efi_log_f‹m©_t
Ë+ (
§c_f
->
efi_√xã¡s
 - 1Ë* (
xfs_exã¡_t
);

103 i‡(
c⁄töued
 && 
§c_Àn
 < 
c‹e_size
) {

104 
	`¥ötf
(
	`_
("EFI: NotÉnough dataÅo decode further\n"));

105 
îr‹
 = 1;

106 
îr‹
;

109 i‡((
f
 = (
xfs_efi_log_f‹m©_t
 *)
	`mÆloc
(
d°_Àn
)Ë=
NULL
) {

110 
	`Ârötf
(
°dîr
, 
	`_
("%s: xlog_¥öt_å™s_efi: mÆlo¯Áûed\n"), 
¥og«me
);

111 
	`exô
(1);

113 i‡(
	`xfs_efi_c›y_f‹m©
((*)
§c_f
, 
§c_Àn
, 
f
, 
c⁄töued
)) {

114 
îr‹
 = 1;

115 
îr‹
;

118 
	`¥ötf
(
	`_
("EFI: #regs: %dÇum_extents: %d id: 0x%llx\n"),

119 
f
->
efi_size
, f->
efi_√xã¡s
, ()f->
efi_id
);

121 i‡(
c⁄töued
) {

122 
	`¥ötf
(
	`_
("EFI freeÉxtent data skipped (CONTINUE set,Ço space)\n"));

123 
îr‹
;

126 
ex
 = 
f
->
efi_exã¡s
;

127 
i
=0; i < 
f
->
efi_√xã¡s
; i++) {

128 
	`¥ötf
("(s: 0x%llx,Ü: %d) ",

129 ()
ex
->
ext_°¨t
,Éx->
ext_Àn
);

130 i‡(
i
 % 4 =3Ë
	`¥ötf
("\n");

131 
ex
++;

133 i‡(
i
 % 4 != 0)

134 
	`¥ötf
("\n");

135 
îr‹
:

136 
	`‰ì
(
§c_f
);

137 
	`‰ì
(
f
);

138  
îr‹
;

139 
	}
}

142 
	$xlog_ªcovî_¥öt_efi
(

143 
xlog_ªcovî_ôem_t
 *
ôem
)

145 
xfs_efi_log_f‹m©_t
 *
f
, *
§c_f
;

146 
xfs_exã¡_t
 *
ex
;

147 
i
;

148 
uöt
 
§c_Àn
, 
d°_Àn
;

150 
§c_f
 = (
xfs_efi_log_f‹m©_t
 *)
ôem
->
ri_buf
[0].
i_addr
;

151 
§c_Àn
 = 
ôem
->
ri_buf
[0].
i_Àn
;

158 
d°_Àn
 = (
xfs_efi_log_f‹m©_t
) +

159 (
§c_f
->
efi_√xã¡s
 - 1Ë* (
xfs_exã¡_t
);

160 i‡((
f
 = (
xfs_efi_log_f‹m©_t
 *)
	`mÆloc
(
d°_Àn
)Ë=
NULL
) {

161 
	`Ârötf
(
°dîr
, 
	`_
("%s: xlog_recover_print_efi: malloc failed\n"),

162 
¥og«me
);

163 
	`exô
(1);

165 i‡(
	`xfs_efi_c›y_f‹m©
((*)
§c_f
, 
§c_Àn
, 
f
, 0)) {

166 
	`‰ì
(
f
);

170 
	`¥ötf
(
	`_
(" EFI: #regs:%dÇum_extents:%d id:0x%llx\n"),

171 
f
->
efi_size
, f->
efi_√xã¡s
, ()f->
efi_id
);

172 
ex
 = 
f
->
efi_exã¡s
;

173 
	`¥ötf
(" ");

174 
i
=0; i< 
f
->
efi_√xã¡s
; i++) {

175 
	`¥ötf
("(s: 0x%llx,Ü: %d) ",

176 ()
ex
->
ext_°¨t
,Éx->
ext_Àn
);

177 i‡(
i
 % 4 == 3)

178 
	`¥ötf
("\n");

179 
ex
++;

181 i‡(
i
 % 4 != 0)

182 
	`¥ötf
("\n");

183 
	`‰ì
(
f
);

184 
	}
}

187 
	$xlog_¥öt_å™s_efd
(**
±r
, 
uöt
 
Àn
)

189 
xfs_efd_log_f‹m©_t
 *
f
;

190 
xfs_efd_log_f‹m©_t
 
lbuf
;

192 
uöt
 
c‹e_size
 = (
xfs_efd_log_f‹m©_t
Ë- (
xfs_exã¡_t
);

198 
	`memmove
(&
lbuf
, *
±r
, 
	`MIN
(
c‹e_size
, 
Àn
));

199 
f
 = &
lbuf
;

200 *
±r
 +
Àn
;

201 i‡(
Àn
 >
c‹e_size
) {

202 
	`¥ötf
(
	`_
("EFD: #regs: %dÇum_extents: %d id: 0x%llx\n"),

203 
f
->
efd_size
, f->
efd_√xã¡s
,

204 ()
f
->
efd_efi_id
);

210 
	`¥ötf
(
	`_
("EFD: NotÉnough dataÅo decode further\n"));

213 
	}
}

216 
	$xlog_ªcovî_¥öt_efd
(

217 
xlog_ªcovî_ôem_t
 *
ôem
)

219 
xfs_efd_log_f‹m©_t
 *
f
;

221 
f
 = (
xfs_efd_log_f‹m©_t
 *)
ôem
->
ri_buf
[0].
i_addr
;

228 
	`¥ötf
(
	`_
(" EFD: #regs: %dÇum_extents: %d id: 0x%llx\n"),

229 
f
->
efd_size
, f->
efd_√xã¡s
,

230 ()
f
->
efd_efi_id
);

231 
	}
}

236 
	$xfs_rui_c›y_f‹m©
(

237 *
buf
,

238 
uöt
 
Àn
,

239 
xfs_rui_log_f‹m©
 *
d°_fmt
,

240 
c⁄töued
)

242 
uöt
 
√xã¡s
 = ((
xfs_rui_log_f‹m©
 *)
buf
)->
rui_√xã¡s
;

243 
uöt
 
d°_Àn
 = 
	`xfs_rui_log_f‹m©_sizeof
(
√xã¡s
);

245 i‡(
Àn
 =
d°_Àn
 || 
c⁄töued
) {

246 
	`mem˝y
((*)
d°_fmt
, 
buf
, 
Àn
);

249 
	`Ârötf
(
°dîr
, 
	`_
("%s: bad size of RUI format: %u;Éxpected %u;Çextents = %u\n"),

250 
¥og«me
, 
Àn
, 
d°_Àn
, 
√xã¡s
);

252 
	}
}

255 
	$xlog_¥öt_å™s_rui
(

256 **
±r
,

257 
uöt
 
§c_Àn
,

258 
c⁄töued
)

260 
xfs_rui_log_f‹m©
 *
§c_f
, *
f
 = 
NULL
;

261 
uöt
 
d°_Àn
;

262 
uöt
 
√xã¡s
;

263 
xfs_m≠_exã¡
 *
ex
;

264 
i
;

265 
îr‹
 = 0;

266 
c‹e_size
;

268 
c‹e_size
 = 
	`off£tof
(
xfs_rui_log_f‹m©
, 
rui_exã¡s
);

274 
§c_f
 = 
	`mÆloc
(
§c_Àn
);

275 i‡(
§c_f
 =
NULL
) {

276 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s: malloc failed\n"),

277 
¥og«me
, 
__func__
);

278 
	`exô
(1);

280 
	`memmove
((*)
§c_f
, *
±r
, 
§c_Àn
);

281 *
±r
 +
§c_Àn
;

284 
√xã¡s
 = 
§c_f
->
rui_√xã¡s
;

285 
d°_Àn
 = 
	`xfs_rui_log_f‹m©_sizeof
(
√xã¡s
);

287 i‡(
c⁄töued
 && 
§c_Àn
 < 
c‹e_size
) {

288 
	`¥ötf
(
	`_
("RUI: NotÉnough dataÅo decode further\n"));

289 
îr‹
 = 1;

290 
îr‹
;

293 
f
 = 
	`mÆloc
(
d°_Àn
);

294 i‡(
f
 =
NULL
) {

295 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s: malloc failed\n"),

296 
¥og«me
, 
__func__
);

297 
	`exô
(1);

299 i‡(
	`xfs_rui_c›y_f‹m©
((*)
§c_f
, 
§c_Àn
, 
f
, 
c⁄töued
)) {

300 
îr‹
 = 1;

301 
îr‹
;

304 
	`¥ötf
(
	`_
("RUI: #regs: %dÇum_extents: %d id: 0x%llx\n"),

305 
f
->
rui_size
, f->
rui_√xã¡s
, ()f->
rui_id
);

307 i‡(
c⁄töued
) {

308 
	`¥ötf
(
	`_
("RUIÉxtent data skipped (CONTINUE set,Ço space)\n"));

309 
îr‹
;

312 
ex
 = 
f
->
rui_exã¡s
;

313 
i
=0; i < 
f
->
rui_√xã¡s
; i++) {

314 
	`¥ötf
("(s: 0x%llx,Ü: %d, own: %lld, off: %llu, f: 0x%x) ",

315 ()
ex
->
me_°¨tblock
,Éx->
me_Àn
,

316 ()
ex
->
me_ow√r
,

317 ()
ex
->
me_°¨toff
,Éx->
me_Êags
);

318 
	`¥ötf
("\n");

319 
ex
++;

321 
îr‹
:

322 
	`‰ì
(
§c_f
);

323 
	`‰ì
(
f
);

324  
îr‹
;

325 
	}
}

328 
	$xlog_ªcovî_¥öt_rui
(

329 
xlog_ªcovî_ôem
 *
ôem
)

331 *
§c_f
;

332 
uöt
 
§c_Àn
;

334 
§c_f
 = 
ôem
->
ri_buf
[0].
i_addr
;

335 
§c_Àn
 = 
ôem
->
ri_buf
[0].
i_Àn
;

337 
	`xlog_¥öt_å™s_rui
(&
§c_f
, 
§c_Àn
, 0);

338 
	}
}

341 
	$xlog_¥öt_å™s_rud
(

342 **
±r
,

343 
uöt
 
Àn
)

345 
xfs_rud_log_f‹m©
 *
f
;

346 
xfs_rud_log_f‹m©
 
lbuf
;

349 
uöt
 
c‹e_size
 = (
xfs_rud_log_f‹m©
);

355 
	`memmove
(&
lbuf
, *
±r
, 
	`MIN
(
c‹e_size
, 
Àn
));

356 
f
 = &
lbuf
;

357 *
±r
 +
Àn
;

358 i‡(
Àn
 >
c‹e_size
) {

359 
	`¥ötf
(
	`_
("RUD: #regs: %d id: 0x%llx\n"),

360 
f
->
rud_size
,

361 ()
f
->
rud_rui_id
);

367 
	`¥ötf
(
	`_
("RUD: NotÉnough dataÅo decode further\n"));

370 
	}
}

373 
	$xlog_ªcovî_¥öt_rud
(

374 
xlog_ªcovî_ôem
 *
ôem
)

376 *
f
;

378 
f
 = 
ôem
->
ri_buf
[0].
i_addr
;

379 
	`xlog_¥öt_å™s_rud
(&
f
, (
xfs_rud_log_f‹m©
));

380 
	}
}

385 
	$xfs_cui_c›y_f‹m©
(

386 
xfs_cui_log_f‹m©
 *
cui
,

387 
uöt
 
Àn
,

388 
xfs_cui_log_f‹m©
 *
d°_fmt
,

389 
c⁄töued
)

391 
uöt
 
√xã¡s
;

392 
uöt
 
d°_Àn
;

394 
√xã¡s
 = 
cui
->
cui_√xã¡s
;

395 
d°_Àn
 = 
	`xfs_cui_log_f‹m©_sizeof
(
√xã¡s
);

397 i‡(
Àn
 =
d°_Àn
 || 
c⁄töued
) {

398 
	`mem˝y
(
d°_fmt
, 
cui
, 
Àn
);

401 
	`Ârötf
(
°dîr
, 
	`_
("%s: bad size of CUI format: %u;Éxpected %u;Çextents = %u\n"),

402 
¥og«me
, 
Àn
, 
d°_Àn
, 
√xã¡s
);

404 
	}
}

407 
	$xlog_¥öt_å™s_cui
(

408 **
±r
,

409 
uöt
 
§c_Àn
,

410 
c⁄töued
)

412 
xfs_cui_log_f‹m©
 *
§c_f
, *
f
 = 
NULL
;

413 
uöt
 
d°_Àn
;

414 
uöt
 
√xã¡s
;

415 
xfs_phys_exã¡
 *
ex
;

416 
i
;

417 
îr‹
 = 0;

418 
c‹e_size
;

420 
c‹e_size
 = 
	`off£tof
(
xfs_cui_log_f‹m©
, 
cui_exã¡s
);

422 
§c_f
 = 
	`mÆloc
(
§c_Àn
);

423 i‡(
§c_f
 =
NULL
) {

424 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s: malloc failed\n"),

425 
¥og«me
, 
__func__
);

426 
	`exô
(1);

428 
	`mem˝y
(
§c_f
, *
±r
, 
§c_Àn
);

429 *
±r
 +
§c_Àn
;

432 
√xã¡s
 = 
§c_f
->
cui_√xã¡s
;

433 
d°_Àn
 = 
	`xfs_cui_log_f‹m©_sizeof
(
√xã¡s
);

435 i‡(
c⁄töued
 && 
§c_Àn
 < 
c‹e_size
) {

436 
	`¥ötf
(
	`_
("CUI: NotÉnough dataÅo decode further\n"));

437 
îr‹
 = 1;

438 
îr‹
;

441 
f
 = 
	`mÆloc
(
d°_Àn
);

442 i‡(
f
 =
NULL
) {

443 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s: malloc failed\n"),

444 
¥og«me
, 
__func__
);

445 
	`exô
(1);

447 i‡(
	`xfs_cui_c›y_f‹m©
(
§c_f
, 
§c_Àn
, 
f
, 
c⁄töued
)) {

448 
îr‹
 = 1;

449 
îr‹
;

452 
	`¥ötf
(
	`_
("CUI: #regs: %dÇum_extents: %d id: 0x%llx\n"),

453 
f
->
cui_size
, f->
cui_√xã¡s
, ()f->
cui_id
);

455 i‡(
c⁄töued
) {

456 
	`¥ötf
(
	`_
("CUIÉxtent data skipped (CONTINUE set,Ço space)\n"));

457 
îr‹
;

460 
ex
 = 
f
->
cui_exã¡s
;

461 
i
=0; i < 
f
->
cui_√xã¡s
; i++) {

462 
	`¥ötf
("(s: 0x%llx,Ü: %d, f: 0x%x) ",

463 ()
ex
->
≥_°¨tblock
,Éx->
≥_Àn
,

464 
ex
->
≥_Êags
);

465 
	`¥ötf
("\n");

466 
ex
++;

468 
îr‹
:

469 
	`‰ì
(
§c_f
);

470 
	`‰ì
(
f
);

471  
îr‹
;

472 
	}
}

475 
	$xlog_ªcovî_¥öt_cui
(

476 
xlog_ªcovî_ôem
 *
ôem
)

478 *
§c_f
;

479 
uöt
 
§c_Àn
;

481 
§c_f
 = 
ôem
->
ri_buf
[0].
i_addr
;

482 
§c_Àn
 = 
ôem
->
ri_buf
[0].
i_Àn
;

484 
	`xlog_¥öt_å™s_cui
(&
§c_f
, 
§c_Àn
, 0);

485 
	}
}

488 
	$xlog_¥öt_å™s_cud
(

489 **
±r
,

490 
uöt
 
Àn
)

492 
xfs_cud_log_f‹m©
 *
f
;

493 
xfs_cud_log_f‹m©
 
lbuf
;

496 
uöt
 
c‹e_size
 = (
xfs_cud_log_f‹m©
);

498 
	`mem˝y
(&
lbuf
, *
±r
, 
	`MIN
(
c‹e_size
, 
Àn
));

499 
f
 = &
lbuf
;

500 *
±r
 +
Àn
;

501 i‡(
Àn
 >
c‹e_size
) {

502 
	`¥ötf
(
	`_
("CUD: #regs: %d id: 0x%llx\n"),

503 
f
->
cud_size
,

504 ()
f
->
cud_cui_id
);

510 
	`¥ötf
(
	`_
("CUD: NotÉnough dataÅo decode further\n"));

513 
	}
}

516 
	$xlog_ªcovî_¥öt_cud
(

517 
xlog_ªcovî_ôem
 *
ôem
)

519 *
f
;

521 
f
 = 
ôem
->
ri_buf
[0].
i_addr
;

522 
	`xlog_¥öt_å™s_cud
(&
f
, (
xfs_cud_log_f‹m©
));

523 
	}
}

528 
	$xfs_bui_c›y_f‹m©
(

529 
xfs_bui_log_f‹m©
 *
bui
,

530 
uöt
 
Àn
,

531 
xfs_bui_log_f‹m©
 *
d°_fmt
,

532 
c⁄töued
)

534 
uöt
 
√xã¡s
;

535 
uöt
 
d°_Àn
;

537 
√xã¡s
 = 
bui
->
bui_√xã¡s
;

538 
d°_Àn
 = 
	`xfs_bui_log_f‹m©_sizeof
(
√xã¡s
);

540 i‡(
Àn
 =
d°_Àn
 || 
c⁄töued
) {

541 
	`mem˝y
(
d°_fmt
, 
bui
, 
Àn
);

544 
	`Ârötf
(
°dîr
, 
	`_
("%s: bad size of BUI format: %u;Éxpected %u;Çextents = %u\n"),

545 
¥og«me
, 
Àn
, 
d°_Àn
, 
√xã¡s
);

547 
	}
}

550 
	$xlog_¥öt_å™s_bui
(

551 **
±r
,

552 
uöt
 
§c_Àn
,

553 
c⁄töued
)

555 
xfs_bui_log_f‹m©
 *
§c_f
, *
f
 = 
NULL
;

556 
uöt
 
d°_Àn
;

557 
uöt
 
√xã¡s
;

558 
xfs_m≠_exã¡
 *
ex
;

559 
i
;

560 
îr‹
 = 0;

561 
c‹e_size
;

563 
c‹e_size
 = 
	`off£tof
(
xfs_bui_log_f‹m©
, 
bui_exã¡s
);

565 
§c_f
 = 
	`mÆloc
(
§c_Àn
);

566 i‡(
§c_f
 =
NULL
) {

567 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s: malloc failed\n"),

568 
¥og«me
, 
__func__
);

569 
	`exô
(1);

571 
	`mem˝y
(
§c_f
, *
±r
, 
§c_Àn
);

572 *
±r
 +
§c_Àn
;

575 
√xã¡s
 = 
§c_f
->
bui_√xã¡s
;

576 
d°_Àn
 = 
	`xfs_bui_log_f‹m©_sizeof
(
√xã¡s
);

578 i‡(
c⁄töued
 && 
§c_Àn
 < 
c‹e_size
) {

579 
	`¥ötf
(
	`_
("BUI: NotÉnough dataÅo decode further\n"));

580 
îr‹
 = 1;

581 
îr‹
;

584 
f
 = 
	`mÆloc
(
d°_Àn
);

585 i‡(
f
 =
NULL
) {

586 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s: malloc failed\n"),

587 
¥og«me
, 
__func__
);

588 
	`exô
(1);

590 i‡(
	`xfs_bui_c›y_f‹m©
(
§c_f
, 
§c_Àn
, 
f
, 
c⁄töued
)) {

591 
îr‹
 = 1;

592 
îr‹
;

595 
	`¥ötf
(
	`_
("BUI: #regs: %dÇum_extents: %d id: 0x%llx\n"),

596 
f
->
bui_size
, f->
bui_√xã¡s
, ()f->
bui_id
);

598 i‡(
c⁄töued
) {

599 
	`¥ötf
(
	`_
("BUIÉxtent data skipped (CONTINUE set,Ço space)\n"));

600 
îr‹
;

603 
ex
 = 
f
->
bui_exã¡s
;

604 
i
=0; i < 
f
->
bui_√xã¡s
; i++) {

605 
	`¥ötf
("(s: 0x%llx,Ü: %d, own: %lld, off: %llu, f: 0x%x) ",

606 ()
ex
->
me_°¨tblock
,Éx->
me_Àn
,

607 ()
ex
->
me_ow√r
,

608 ()
ex
->
me_°¨toff
,Éx->
me_Êags
);

609 
	`¥ötf
("\n");

610 
ex
++;

612 
îr‹
:

613 
	`‰ì
(
§c_f
);

614 
	`‰ì
(
f
);

615  
îr‹
;

616 
	}
}

619 
	$xlog_ªcovî_¥öt_bui
(

620 
xlog_ªcovî_ôem
 *
ôem
)

622 *
§c_f
;

623 
uöt
 
§c_Àn
;

625 
§c_f
 = 
ôem
->
ri_buf
[0].
i_addr
;

626 
§c_Àn
 = 
ôem
->
ri_buf
[0].
i_Àn
;

628 
	`xlog_¥öt_å™s_bui
(&
§c_f
, 
§c_Àn
, 0);

629 
	}
}

632 
	$xlog_¥öt_å™s_bud
(

633 **
±r
,

634 
uöt
 
Àn
)

636 
xfs_bud_log_f‹m©
 *
f
;

637 
xfs_bud_log_f‹m©
 
lbuf
;

640 
uöt
 
c‹e_size
 = (
xfs_bud_log_f‹m©
);

642 
	`mem˝y
(&
lbuf
, *
±r
, 
	`MIN
(
c‹e_size
, 
Àn
));

643 
f
 = &
lbuf
;

644 *
±r
 +
Àn
;

645 i‡(
Àn
 >
c‹e_size
) {

646 
	`¥ötf
(
	`_
("BUD: #regs: %d id: 0x%llx\n"),

647 
f
->
bud_size
,

648 ()
f
->
bud_bui_id
);

654 
	`¥ötf
(
	`_
("BUD: NotÉnough dataÅo decode further\n"));

657 
	}
}

660 
	$xlog_ªcovî_¥öt_bud
(

661 
xlog_ªcovî_ôem
 *
ôem
)

663 *
f
;

665 
f
 = 
ôem
->
ri_buf
[0].
i_addr
;

666 
	`xlog_¥öt_å™s_bud
(&
f
, (
xfs_bud_log_f‹m©
));

667 
	}
}

	@logprint/logprint.c

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

21 
	~"libxfs.h
"

22 
	~"libxlog.h
"

24 
	~"log¥öt.h
"

26 
	#OP_PRINT
 0

	)

27 
	#OP_PRINT_TRANS
 1

	)

28 
	#OP_DUMP
 2

	)

29 
	#OP_COPY
 3

	)

31 
	g¥öt_d©a
;

32 
	g¥öt_⁄ly_d©a
;

33 
	g¥öt_öode
;

34 
	g¥öt_quŸa
;

35 
	g¥öt_buf„r
;

36 
	g¥öt_ovîwrôe
;

37 
	g¥öt_no_d©a
;

38 
	g¥öt_no_¥öt
;

39 
	g¥öt_exô
 = 1;

40 
	g¥öt_›î©i⁄
 = 
OP_PRINT
;

43 
	$ußge
()

45 
	`Ârötf
(
°dîr
, 
	`_
("Usage: %s [options...] <device>\n\n\
:\n\
-cÅryÅo continue ifÉrror found inÜog\n\
-C <filename> copyÅheÜog fromÅhe filesystemÅo filename\n\
-d dumpÅheÜog inÜog-record format\n\
-eÉxit whenánÉrror is found inÅheÜog\n\
-f specified device isáctuallyá file\n\
-l <device> filename ofÉxternalÜog\n\
-n don'tÅryánd interpretÜog data\n\
-oÖrint buffer data in hex\n\
-s <start blk> block #Åo startÖrinting\n\
-vÖrint \"overwrite\" data\n\
-tÖrint outÅransactional view\n\
-b inÅransactional view,Éxtract buffer info\n\
-i inÅransactional view,Éxtract inode info\n\
-q inÅransactional view,Éxtract quota info\n\
-DÖrint only data;Ço decoding\n\
-VÖrint version information\n"),

63 
¥og«me
);

64 
	`exô
(1);

65 
	}
}

68 
	$log°©
(
xfs_mou¡_t
 *
mp
)

70 
fd
;

71 
buf
[
BBSIZE
];

72 
xfs_sb_t
 *
sb
;

78 i‡((
fd
 = 
	`›í
(
x
.
d«me
, 
O_RDONLY
)) == -1) {

79 
	`Ârötf
(
°dîr
, 
	`_
(" Can't open device %s: %s\n"),

80 
x
.
d«me
, 
	`°ªº‹
(
î∫o
));

81 
	`exô
(1);

83 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

84 i‡(
	`ªad
(
fd
, 
buf
, (buf)) != (buf)) {

85 
	`Ârötf
(
°dîr
, 
	`_
("Ñead of XFS superblock failed\n"));

86 
	`exô
(1);

88 
	`˛o£
 (
fd
);

90 i‡(!
x
.
disfûe
) {

94 
sb
 = &
mp
->
m_sb
;

95 
	`libxfs_sb_‰om_disk
(
sb
, (
xfs_dsb_t
 *)
buf
);

96 
mp
->
m_blkbb_log
 = 
sb
->
sb_blocklog
 - 
BBSHIFT
;

98 
x
.
logBBsize
 = 
	`XFS_FSB_TO_BB
(
mp
, 
sb
->
sb_logblocks
);

99 
x
.
logBB°¨t
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
sb
->
sb_log°¨t
);

100 
x
.
lbsize
 = 
BBSIZE
;

101 i‡(
	`xfs_sb_vîsi⁄_has£˘‹
(
sb
))

102 
x
.
lbsize
 <<(
sb
->
sb_log£˘log
 - 
BBSHIFT
);

104 i‡(!
x
.
log«me
 && 
sb
->
sb_log°¨t
 == 0) {

105 
	`Ârötf
(
°dîr
, 
	`_
("ÉxternalÜog deviceÇot specified\n\n"));

106 
	`ußge
();

110 
°©
 
s
;

112 
	`°©
(
x
.
d«me
, &
s
);

113 
x
.
logBBsize
 = 
s
.
°_size
 >> 9;

114 
x
.
logBB°¨t
 = 0;

115 
x
.
lbsize
 = 
BBSIZE
;

119 i‡(
x
.
log«me
 && *x.logname) {

120 i‡((
fd
 = 
	`›í
(
x
.
log«me
, 
O_RDONLY
)) == -1) {

121 
	`Ârötf
(
°dîr
, 
	`_
("Can't open file %s: %s\n"),

122 
x
.
log«me
, 
	`°ªº‹
(
î∫o
));

123 
	`exô
(1);

125 
	`˛o£
(
fd
);

127 
x
.
logdev
 = x.
ddev
;

131 
	}
}

134 
	$maö
(
¨gc
, **
¨gv
)

136 
¥öt_°¨t
 = -1;

137 
c
;

138 
logfd
;

139 *
c›y_fûe
 = 
NULL
;

140 
xlog
 
log
 = {0};

141 
xfs_mou¡_t
 
mou¡
;

143 
	`£éoˇÀ
(
LC_ALL
, "");

144 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

145 
	`ãxtdomaö
(
PACKAGE
);

146 
	`mem£t
(&
mou¡
, 0, (mount));

148 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

149 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "bC:cdeÊ:iqn‹s:tDVv")Ë!
EOF
) {

150 
c
) {

152 
¥öt_⁄ly_d©a
++;

153 
¥öt_d©a
++;

156 
¥öt_buf„r
++;

162 
¥öt_exô
 = 0;

167 
¥öt_exô
++;

170 
¥öt_›î©i⁄
 = 
OP_COPY
;

171 
c›y_fûe
 = 
›èrg
;

174 
¥öt_›î©i⁄
 = 
OP_DUMP
;

177 
¥öt_skù_uuid
++;

178 
x
.
disfûe
 = 1;

181 
x
.
log«me
 = 
›èrg
;

182 
x
.
lisfûe
 = 1;

185 
¥öt_öode
++;

188 
¥öt_quŸa
++;

191 
¥öt_no_d©a
++;

194 
¥öt_d©a
++;

197 
¥öt_°¨t
 = 
	`©oi
(
›èrg
);

200 
¥öt_›î©i⁄
 = 
OP_PRINT_TRANS
;

203 
¥öt_ovîwrôe
++;

206 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
¥og«me
, 
VERSION
);

207 
	`exô
(0);

209 
	`ußge
();

213 i‡(
¨gc
 - 
›töd
 != 1)

214 
	`ußge
();

216 
x
.
d«me
 = 
¨gv
[
›töd
];

218 i‡(
x
.
d«me
 =
NULL
)

219 
	`ußge
();

221 
x
.
i§ód⁄ly
 = 
LIBXFS_ISINACTIVE
;

222 
	`¥ötf
(
	`_
("xfs_logprint:\n"));

223 i‡(!
	`libxfs_öô
(&
x
))

224 
	`exô
(1);

226 
	`log°©
(&
mou¡
);

227 
	`libxfs_bu·¨g_öô
(&
mou¡
, 
x
.
ddev
, x.
logdev
, x.
πdev
);

229 
logfd
 = (
x
.logfd < 0Ë? x.
dfd
 : x.logfd;

231 
	`¥ötf
(
	`_
(" d©®devi˚: 0x%Œx\n"), ()
x
.
ddev
);

233 i‡(
x
.
log«me
) {

234 
	`¥ötf
(
	`_
("Üog fûe: \"%s\" "), 
x
.
log«me
);

236 
	`¥ötf
(
	`_
("Üog devi˚: 0x%Œx "), ()
x
.
logdev
);

239 
	`¥ötf
(
	`_
("daddr: %lldÜength: %lld\n\n"),

240 ()
x
.
logBB°¨t
, ()x.
logBBsize
);

242 
	`ASSERT
(
x
.
logBBsize
 <
INT_MAX
);

244 
log
.
l_dev
 = 
mou¡
.
m_logdev_èrgp
;

245 
log
.
l_logBB°¨t
 = 
x
.
logBB°¨t
;

246 
log
.
l_logBBsize
 = 
x
.
logBBsize
;

247 
log
.
l_£˘BBsize
 = 
	`BTOBB
(
x
.
lbsize
);

248 
log
.
l_mp
 = &
mou¡
;

250 
¥öt_›î©i⁄
) {

251 
OP_PRINT
:

252 
	`xfs_log_¥öt
(&
log
, 
logfd
, 
¥öt_°¨t
);

254 
OP_PRINT_TRANS
:

255 
	`xfs_log_¥öt_å™s
(&
log
, 
¥öt_°¨t
);

257 
OP_DUMP
:

258 
	`xfs_log_dump
(&
log
, 
logfd
, 
¥öt_°¨t
);

260 
OP_COPY
:

261 
	`xfs_log_c›y
(&
log
, 
logfd
, 
c›y_fûe
);

264 
	`exô
(0);

265 
	}
}

	@logprint/logprint.h

18 #i‚de‡
LOGPRINT_H


19 
	#LOGPRINT_H


	)

22 
¥öt_d©a
;

23 
¥öt_⁄ly_d©a
;

24 
¥öt_öode
;

25 
¥öt_quŸa
;

26 
¥öt_buf„r
;

27 
¥öt_å™ß˘i⁄s
;

28 
¥öt_ovîwrôe
;

29 
¥öt_no_d©a
;

30 
¥öt_no_¥öt
;

33 
xlog_¥öt_l£ek
(
xlog
 *, , 
xfs_daddr_t
, );

35 
xfs_log_c›y
(
xlog
 *, , *);

36 
xfs_log_dump
(
xlog
 *, , );

37 
xfs_log_¥öt
(
xlog
 *, , );

38 
xfs_log_¥öt_å™s
(
xlog
 *, );

40 
¥öt_xlog_ªc‹d_löe
();

41 
¥öt_xlog_›_löe
();

42 
¥öt_°¨s
();

44 
xfs_öode_log_f‹m©_t
 *

45 
xfs_öode_ôem_f‹m©_c⁄vît
(*, 
uöt
, 
xfs_öode_log_f‹m©_t
 *);

47 
xlog_¥öt_å™s_efi
(**
±r
, 
uöt
 
§c_Àn
, 
c⁄töued
);

48 
xlog_ªcovî_¥öt_efi
(
xlog_ªcovî_ôem_t
 *
ôem
);

49 
xlog_¥öt_å™s_efd
(**
±r
, 
uöt
 
Àn
);

50 
xlog_ªcovî_¥öt_efd
(
xlog_ªcovî_ôem_t
 *
ôem
);

52 
xlog_¥öt_å™s_rui
(**
±r
, 
uöt
 
§c_Àn
, 
c⁄töued
);

53 
xlog_ªcovî_¥öt_rui
(
xlog_ªcovî_ôem
 *
ôem
);

54 
xlog_¥öt_å™s_rud
(**
±r
, 
uöt
 
Àn
);

55 
xlog_ªcovî_¥öt_rud
(
xlog_ªcovî_ôem
 *
ôem
);

57 
xlog_¥öt_å™s_cui
(**
±r
, 
uöt
 
§c_Àn
, 
c⁄töued
);

58 
xlog_ªcovî_¥öt_cui
(
xlog_ªcovî_ôem
 *
ôem
);

59 
xlog_¥öt_å™s_cud
(**
±r
, 
uöt
 
Àn
);

60 
xlog_ªcovî_¥öt_cud
(
xlog_ªcovî_ôem
 *
ôem
);

62 
xlog_¥öt_å™s_bui
(**
±r
, 
uöt
 
§c_Àn
, 
c⁄töued
);

63 
xlog_ªcovî_¥öt_bui
(
xlog_ªcovî_ôem
 *
ôem
);

64 
xlog_¥öt_å™s_bud
(**
±r
, 
uöt
 
Àn
);

65 
xlog_ªcovî_¥öt_bud
(
xlog_ªcovî_ôem
 *
ôem
);

	@mdrestore/xfs_mdrestore.c

19 
	~"libxfs.h
"

20 
	~"xfs_mëadump.h
"

22 *
	g¥og«me
;

23 
	gshow_¥ogªss
 = 0;

24 
	g¥ogªss_sö˚_w¨nög
 = 0;

27 
	$Áèl
(c⁄° *
msg
, ...)

29 
va_li°
 
¨gs
;

31 
	`va_°¨t
(
¨gs
, 
msg
);

32 
	`Ârötf
(
°dîr
, "%s: ", 
¥og«me
);

33 
	`vÂrötf
(
°dîr
, 
msg
, 
¨gs
);

34 
	`exô
(1);

35 
	}
}

38 
	$¥öt_¥ogªss
(c⁄° *
fmt
, ...)

40 
buf
[60];

41 
va_li°
 
≠
;

43 
	`va_°¨t
(
≠
, 
fmt
);

44 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
≠
);

45 
	`va_íd
(
≠
);

46 
buf
[(buf)-1] = '\0';

48 
	`¥ötf
("\r%-59s", 
buf
);

49 
	`fÊush
(
°dout
);

50 
¥ogªss_sö˚_w¨nög
 = 1;

51 
	}
}

54 
	$≥rf‹m_ª°‹e
(

55 
FILE
 *
§c_f
,

56 
d°_fd
,

57 
is_èrgë_fûe
)

59 
xfs_mëablock_t
 *
mëablock
;

60 
__be64
 *
block_ödex
;

61 *
block_buf„r
;

62 
block_size
;

63 
max_ödi˚s
;

64 
cur_ödex
;

65 
mb_cou¡
;

66 
xfs_mëablock_t
 
tmb
;

67 
xfs_sb_t
 
sb
;

68 
__öt64_t
 
byãs_ªad
;

76 i‡(
	`‰ód
(&
tmb
, —mb), 1, 
§c_f
) != 1)

77 
	`Áèl
("îr‹Ñódög from fûe: %s\n", 
	`°ªº‹
(
î∫o
));

79 i‡(
	`be32_to_˝u
(
tmb
.
mb_magic
Ë!
XFS_MD_MAGIC
)

80 
	`Áèl
("specified file isÇotá metadata dump\n");

82 
block_size
 = 1 << 
tmb
.
mb_blocklog
;

83 
max_ödi˚s
 = (
block_size
 - (
xfs_mëablock_t
)Ë/ (
__be64
);

85 
mëablock
 = (
xfs_mëablock_t
 *)
	`ˇŒoc
(
max_ödi˚s
 + 1, 
block_size
);

86 i‡(
mëablock
 =
NULL
)

87 
	`Áèl
("memoryállocation failure\n");

89 
mb_cou¡
 = 
	`be16_to_˝u
(
tmb
.mb_count);

90 i‡(
mb_cou¡
 =0 || mb_cou¡ > 
max_ödi˚s
)

91 
	`Áèl
("bad block cou¡: %u\n", 
mb_cou¡
);

93 
block_ödex
 = (
__be64
 *)((*)
mëablock
 + (
xfs_mëablock_t
));

94 
block_buf„r
 = (*)
mëablock
 + 
block_size
;

96 i‡(
	`‰ód
(
block_ödex
, 
block_size
 - (
tmb
), 1, 
§c_f
) != 1)

97 
	`Áèl
("îr‹Ñódög from fûe: %s\n", 
	`°ªº‹
(
î∫o
));

99 i‡(
block_ödex
[0] != 0)

100 
	`Áèl
("first block isÇotÅheÖrimary superblock\n");

103 i‡(
	`‰ód
(
block_buf„r
, 
mb_cou¡
 << 
tmb
.
mb_blocklog
,

104 1, 
§c_f
) != 1)

105 
	`Áèl
("îr‹Ñódög from fûe: %s\n", 
	`°ªº‹
(
î∫o
));

107 
	`libxfs_sb_‰om_disk
(&
sb
, (
xfs_dsb_t
 *)
block_buf„r
);

109 i‡(
sb
.
sb_magi˙um
 !
XFS_SB_MAGIC
)

110 
	`Áèl
("bad magicÇumber forÖrimary superblock\n");

117 i‡(
sb
.
sb_£˘size
 < 
XFS_MIN_SECTORSIZE
 ||

118 
sb
.
sb_£˘size
 > 
XFS_MAX_SECTORSIZE
 ||

119 
sb
.
sb_£˘size
 > 
max_ödi˚s
 * 
block_size
)

120 
	`Áèl
("bad se˘‹ sizê%u i¿mëadum∞image\n", 
sb
.
sb_£˘size
);

122 ((
xfs_dsb_t
*)
block_buf„r
)->
sb_ö¥ogªss
 = 1;

124 i‡(
is_èrgë_fûe
) {

127 i‡(
	`·runˇã
(
d°_fd
, 
sb
.
sb_dblocks
 * sb.
sb_blocksize
))

128 
	`Áèl
("cannot set filesystem image size: %s\n",

129 
	`°ªº‹
(
î∫o
));

133 *
lb
[
XFS_MAX_SECTORSIZE
] = { 
NULL
 };

134 
off64_t
 
off
;

136 
off
 = 
sb
.
sb_dblocks
 * sb.
sb_blocksize
 - (
lb
);

137 i‡(
	`pwrôe
(
d°_fd
, 
lb
, ÷b), 
off
) < 0)

138 
	`Áèl
("failedÅo writeÜast block, isÅargetÅoo "

139 "smÆl? (îr‹: %s)\n", 
	`°ªº‹
(
î∫o
));

142 
byãs_ªad
 = 0;

145 i‡(
show_¥ogªss
 && (
byãs_ªad
 & ((1 << 20) - 1)) == 0)

146 
	`¥öt_¥ogªss
("%Œd MBÑód", 
byãs_ªad
 >> 20);

148 
cur_ödex
 = 0; cur_ödex < 
mb_cou¡
; cur_index++) {

149 i‡(
	`pwrôe
(
d°_fd
, &
block_buf„r
[
cur_ödex
 <<

150 
tmb
.
mb_blocklog
], 
block_size
,

151 
	`be64_to_˝u
(
block_ödex
[
cur_ödex
]) <<

152 
BBSHIFT
) < 0)

153 
	`Áèl
("error writing block %llu: %s\n",

154 
	`be64_to_˝u
(
block_ödex
[
cur_ödex
]Ë<< 
BBSHIFT
,

155 
	`°ªº‹
(
î∫o
));

157 i‡(
mb_cou¡
 < 
max_ödi˚s
)

160 i‡(
	`‰ód
(
mëablock
, 
block_size
, 1, 
§c_f
) != 1)

161 
	`Áèl
("îr‹Ñódög from fûe: %s\n", 
	`°ªº‹
(
î∫o
));

163 
mb_cou¡
 = 
	`be16_to_˝u
(
mëablock
->mb_count);

164 i‡(
mb_cou¡
 == 0)

166 i‡(
mb_cou¡
 > 
max_ödi˚s
)

167 
	`Áèl
("bad block cou¡: %u\n", 
mb_cou¡
);

169 i‡(
	`‰ód
(
block_buf„r
, 
mb_cou¡
 << 
tmb
.
mb_blocklog
,

170 1, 
§c_f
) != 1)

171 
	`Áèl
("îr‹Ñódög from fûe: %s\n", 
	`°ªº‹
(
î∫o
));

173 
byãs_ªad
 +
block_size
 + (
mb_cou¡
 << 
tmb
.
mb_blocklog
);

176 i‡(
¥ogªss_sö˚_w¨nög
)

177 
	`putch¨
('\n');

179 
	`mem£t
(
block_buf„r
, 0, 
sb
.
sb_£˘size
);

180 
sb
.
sb_ö¥ogªss
 = 0;

181 
	`libxfs_sb_to_disk
((
xfs_dsb_t
 *)
block_buf„r
, &
sb
);

182 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
sb
)) {

183 
	`xfs_upd©e_cksum
(
block_buf„r
, 
sb
.
sb_£˘size
,

184 
	`off£tof
(
xfs_sb
, 
sb_¸c
));

187 i‡(
	`pwrôe
(
d°_fd
, 
block_buf„r
, 
sb
.
sb_£˘size
, 0) < 0)

188 
	`Áèl
("îr‹ wrôögÖrim¨y su≥rblock: %s\n", 
	`°ªº‹
(
î∫o
));

190 
	`‰ì
(
mëablock
);

191 
	}
}

194 
	$ußge
()

196 
	`Ârötf
(
°dîr
, "Ußge: %†[-V] [-g] sour˚Å¨gë\n", 
¥og«me
);

197 
	`exô
(1);

198 
	}
}

200 
∂©f‹m_check_ismou¡ed
(*, *, 
°©
 *, );

203 
	$maö
(

204 
¨gc
,

205 **
¨gv
)

207 
FILE
 *
§c_f
;

208 
d°_fd
;

209 
c
;

210 
›í_Êags
;

211 
°©
 
°©buf
;

212 
is_èrgë_fûe
;

214 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

216 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "gV")Ë!
EOF
) {

217 
c
) {

219 
show_¥ogªss
 = 1;

222 
	`¥ötf
("%†vîsi⁄ %s\n", 
¥og«me
, 
VERSION
);

223 
	`exô
(0);

225 
	`ußge
();

229 i‡(
¨gc
 - 
›töd
 != 2)

230 
	`ußge
();

233 i‡(
	`°rcmp
(
¨gv
[
›töd
], "-") == 0) {

234 
§c_f
 = 
°dö
;

235 i‡(
	`ißây
(
	`fûío
(
°dö
)))

236 
	`Áèl
("cannotÑead fromáÅerminal\n");

238 
§c_f
 = 
	`f›í
(
¨gv
[
›töd
], "rb");

239 i‡(
§c_f
 =
NULL
)

240 
	`Áèl
("cannot open source dump file\n");

242 
›töd
++;

245 
›í_Êags
 = 
O_RDWR
;

246 
is_èrgë_fûe
 = 0;

247 i‡(
	`°©
(
¨gv
[
›töd
], &
°©buf
) < 0) {

249 
›í_Êags
 |
O_CREAT
;

250 
is_èrgë_fûe
 = 1;

251 } i‡(
	`S_ISREG
(
°©buf
.
°_mode
)) {

252 
›í_Êags
 |
O_TRUNC
;

253 
is_èrgë_fûe
 = 1;

258 i‡(
	`∂©f‹m_check_ismou¡ed
(
¨gv
[
›töd
], 
NULL
, &
°©buf
, 0))

259 
	`Áèl
("a filesystem is mounted onÅarget device \"%s\","

261 
¨gv
[
›töd
]);

264 
d°_fd
 = 
	`›í
(
¨gv
[
›töd
], 
›í_Êags
, 0644);

265 i‡(
d°_fd
 < 0)

266 
	`Áèl
("couldn'à›íÅ¨gë \"%s\"\n", 
¨gv
[
›töd
]);

268 
	`≥rf‹m_ª°‹e
(
§c_f
, 
d°_fd
, 
is_èrgë_fûe
);

270 
	`˛o£
(
d°_fd
);

271 i‡(
§c_f
 !
°dö
)

272 
	`f˛o£
(
§c_f
);

275 
	}
}

	@mkfs/maxtrres.c

27 
	~"libxfs.h
"

28 
	~"xfs_mu…idisk.h
"

31 
	$max_å™s_ªs
(

32 
agsize
,

33 
¸cs_íabÀd
,

34 
dúvîsi⁄
,

35 
£˘‹log
,

36 
blocklog
,

37 
öodñog
,

38 
dúblocklog
,

39 
logvîsi⁄
,

40 
log_sunô
,

41 
föobt
,

42 
rm≠bt
,

43 
ªÊök
)

45 
xfs_sb_t
 *
sbp
;

46 
xfs_mou¡_t
 
mou¡
;

47 
maxfsb
;

49 
	`mem£t
(&
mou¡
, 0, (mount));

50 
sbp
 = &
mou¡
.
m_sb
;

51 
sbp
->
sb_magi˙um
 = 
XFS_SB_MAGIC
;

52 
sbp
->
sb_£˘log
 = 
£˘‹log
;

53 
sbp
->
sb_£˘size
 = 1 << sbp->
sb_£˘log
;

54 
sbp
->
sb_blocklog
 = 
blocklog
;

55 
sbp
->
sb_blocksize
 = 1 << 
blocklog
;

56 
sbp
->
sb_agblocks
 = 
agsize
;

57 
sbp
->
sb_öodñog
 = 
öodñog
;

58 
sbp
->
sb_ö›blog
 = 
blocklog
 - 
öodñog
;

59 
sbp
->
sb_öodesize
 = 1 << 
öodñog
;

60 
sbp
->
sb_ö›block
 = 1 << (
blocklog
 - 
öodñog
);

61 
sbp
->
sb_dúblklog
 = 
dúblocklog
 - 
blocklog
;

63 i‡(
log_sunô
 > 0) {

64 
log_sunô
 <<
blocklog
;

65 
logvîsi⁄
 = 2;

67 
log_sunô
 = 1;

68 
sbp
->
sb_logsunô
 = 
log_sunô
;

70 
sbp
->
sb_vîsi⁄num
 =

71 (
¸cs_íabÀd
 ? 
XFS_SB_VERSION_5
 : 
XFS_SB_VERSION_4
) |

72 (
dúvîsi⁄
 =2 ? 
XFS_SB_VERSION_DIRV2BIT
 : 0) |

73 (
logvîsi⁄
 > 1 ? 
XFS_SB_VERSION_LOGV2BIT
 : 0) |

74 
XFS_DFL_SB_VERSION_BITS
;

75 i‡(
föobt
)

76 
sbp
->
sb_„©uªs_ro_com∑t
 |
XFS_SB_FEAT_RO_COMPAT_FINOBT
;

77 i‡(
rm≠bt
)

78 
sbp
->
sb_„©uªs_ro_com∑t
 |
XFS_SB_FEAT_RO_COMPAT_RMAPBT
;

79 i‡(
ªÊök
)

80 
sbp
->
sb_„©uªs_ro_com∑t
 |
XFS_SB_FEAT_RO_COMPAT_REFLINK
;

82 
	`libxfs_mou¡
(&
mou¡
, 
sbp
, 0,0,0,0);

83 
maxfsb
 = 
	`libxfs_log_ˇlc_möimum_size
(&
mou¡
);

84 
	`libxfs_umou¡
(&
mou¡
);

87 
	`¥ötf
("#define\tMAXTRRES_S%d_B%d_I%d_D%d_V%d_LSU%d\t%d\n",

88 
£˘‹log
, 
blocklog
, 
öodñog
, 
dúblocklog
, 
dúvîsi⁄
,

89 
log_sunô
, 
maxfsb
);

92  
maxfsb
;

93 
	}
}

	@mkfs/proto.c

19 
	~"libxfs.h
"

20 
	~<sys/°©.h
>

21 
	~"xfs_mu…idisk.h
"

26 *
gë°r
(**
µ
);

27 
Áû
(*
msg
, 
i
);

28 
xfs_å™s
 * 
gëªs
(
xfs_mou¡
 *
mp
, 
uöt
 
blocks
);

29 
rsvfûe
(
xfs_mou¡_t
 *
mp
, 
xfs_öode_t
 *
ù
, 
Àn
);

30 
√wfûe
(
xfs_å™s_t
 *
ç
, 
xfs_öode_t
 *
ù
, 
xfs_de„r_›s
 *
df›s
,

31 
xfs_fsblock_t
 *
fú°
, 
dﬁoˇl
, 
logô
, *
buf
, 
Àn
);

32 *
√wªgfûe
(**
µ
, *
Àn
);

33 
πöô
(
xfs_mou¡_t
 *
mp
);

34 
fûesize
(
fd
);

40 
	#MKFS_BLOCKRES_INODE
 \

41 ((
uöt
)(
mp
->
m_üŒoc_blks
 + (mp->
m_ö_maxÀvñs
 - 1)))

	)

42 
	#MKFS_BLOCKRES
(
rb
) \

43 ((
uöt
)(
MKFS_BLOCKRES_INODE
 + 
XFS_DA_NODE_MAXDEPTH
 + \

44 (
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_DATA_FORK
Ë- 1Ë+ (
rb
)))

	)

47 
	$gënum
(

48 c⁄° *
°r
,

49 
blksize
,

50 
£˘size
,

51 
boﬁ
 
c⁄vît
)

53 
i
;

54 *
•
;

56 i‡(
c⁄vît
)

57  
	`cväum
(
blksize
, 
£˘size
, 
°r
);

59 
i
 = 
	`°πﬁl
(
°r
, &
•
, 0);

60 i‡(
i
 =0 && 
•
 =
°r
)

62 i‡(*
•
 != '\0')

64  
i
;

65 
	}
}

68 
	$£tup_¥Ÿo
(

69 *
‚ame
)

71 *
buf
 = 
NULL
;

72 
dÊt
[] = "d--755 0 0 $";

73 
fd
;

74 
size
;

76 i‡(!
‚ame
)

77  
dÊt
;

78 i‡((
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
)Ë< 0 || (
size
 = 
	`fûesize
(fd)) < 0) {

79 
	`Ârötf
(
°dîr
, 
	`_
("%s: failedÅo open %s: %s\n"),

80 
¥og«me
, 
‚ame
, 
	`°ªº‹
(
î∫o
));

81 
out_Áû
;

84 
buf
 = 
	`mÆloc
(
size
 + 1);

85 i‡(
	`ªad
(
fd
, 
buf
, 
size
) < size) {

86 
	`Ârötf
(
°dîr
, 
	`_
("%s:Ñead failed on %s: %s\n"),

87 
¥og«me
, 
‚ame
, 
	`°ªº‹
(
î∫o
));

88 
out_Áû
;

90 i‡(
buf
[
size
 - 1] != '\n') {

91 
	`Ârötf
(
°dîr
, 
	`_
("%s:Öroto file %sÖremature EOF\n"),

92 
¥og«me
, 
‚ame
);

93 
out_Áû
;

95 
buf
[
size
] = '\0';

99 ()
	`gë°r
(&
buf
);

100 ()
	`gënum
(
	`gë°r
(&
buf
), 0, 0, 
Ál£
);

101 ()
	`gënum
(
	`gë°r
(&
buf
), 0, 0, 
Ál£
);

102 
	`˛o£
(
fd
);

103  
buf
;

105 
out_Áû
:

106 i‡(
fd
 >= 0)

107 
	`˛o£
(
fd
);

108 
	`‰ì
(
buf
);

109 
	`exô
(1);

110 
	}
}

113 
	$Áû
(

114 *
msg
,

115 
i
)

117 
	`Ârötf
(
°dîr
, "%s: %†[%d - %s]\n", 
¥og«me
, 
msg
, 
i
, 
	`°ªº‹
(i));

118 
	`exô
(1);

119 
	}
}

122 
	$ªs_Áûed
(

123 
i
)

125 
	`Áû
(
	`_
("ˇ¬ŸÑe£rvê•a˚"), 
i
);

126 
	}
}

128 
xfs_å™s
 *

129 
	$gëªs
(

130 
xfs_mou¡
 *
mp
,

131 
uöt
 
blocks
)

133 
xfs_å™s
 *
ç
;

134 
i
;

135 
uöt
 
r
;

137 
i
 = 0, 
r
 = 
	`MKFS_BLOCKRES
(
blocks
);Ñ >= blocks;Ñ--) {

138 
xfs_å™s_ªs
 
åes
 = {0};

140 
i
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
, 
r
, 0, 0, &
ç
);

141 i‡(
i
 == 0)

142  
ç
;

144 
	`ªs_Áûed
(
i
);

146  
NULL
;

147 
	}
}

150 
	$gë°r
(

151 **
µ
)

153 
c
;

154 *
p
;

155 *
rvÆ
;

157 
p
 = *
µ
;

158 (
c
 = *
p
)) {

159 
c
) {

163 
p
++;

166 
p
++;

167 *
p
++ != '\n')

171 
rvÆ
 = 
p
;

172 
c
 != ' ' && c != '\t' && c != '\n' && c != '\0')

173 
c
 = *++
p
;

174 *
p
++ = '\0';

175 *
µ
 = 
p
;

176  
rvÆ
;

179 i‡(
c
 != '\0') {

180 
	`Ârötf
(
°dîr
, 
	`_
("%s:Öremature EOF inÖrototype file\n"),

181 
¥og«me
);

182 
	`exô
(1);

184  
NULL
;

185 
	}
}

188 
	$rsvfûe
(

189 
xfs_mou¡_t
 *
mp
,

190 
xfs_öode_t
 *
ù
,

191 
Œí
)

193 
îr‹
;

194 
xfs_å™s_t
 *
ç
;

195 
xfs_å™s_ªs
 
åes
 = {0};

197 
îr‹
 = -
	`libxfs_Æloc_fûe_•a˚
(
ù
, 0, 
Œí
, 1, 0);

199 i‡(
îr‹
) {

200 
	`Áû
(
	`_
("îr‹Ñe£rvög s∑˚ f‹á fûe"), 
îr‹
);

201 
	`exô
(1);

207 
	`libxfs_å™s_Æloc
(
mp
, &
åes
, 0, 0, 0, &
ç
);

208 
	`libxfs_å™s_ijoö
(
ç
, 
ù
, 0);

210 
	`VFS_I
(
ù
)->
i_mode
 &~
S_ISUID
;

219 i‡(
	`VFS_I
(
ù
)->
i_mode
 & 
S_IXGRP
)

220 
	`VFS_I
(
ù
)->
i_mode
 &~
S_ISGID
;

222 
	`libxfs_å™s_ichgtime
(
ç
, 
ù
, 
XFS_ICHGTIME_MOD
 | 
XFS_ICHGTIME_CHG
);

224 
ù
->
i_d
.
di_Êags
 |
XFS_DIFLAG_PREALLOC
;

226 
	`libxfs_å™s_log_öode
(
ç
, 
ù
, 
XFS_ILOG_CORE
);

227 
	`libxfs_å™s_commô
(
ç
);

228 
	}
}

231 
	$√wfûe
(

232 
xfs_å™s_t
 *
ç
,

233 
xfs_öode_t
 *
ù
,

234 
xfs_de„r_›s
 *
df›s
,

235 
xfs_fsblock_t
 *
fú°
,

236 
dﬁoˇl
,

237 
logô
,

238 *
buf
,

239 
Àn
)

241 
xfs_buf_t
 *
bp
;

242 
xfs_daddr_t
 
d
;

243 
îr‹
;

244 
Êags
;

245 
xfs_bmbt_úec_t
 
m≠
;

246 
xfs_mou¡_t
 *
mp
;

247 
xfs_exéí_t
 
nb
;

248 
nm≠
;

250 
Êags
 = 0;

251 
mp
 = 
ù
->
i_mou¡
;

252 i‡(
dﬁoˇl
 && 
Àn
 <
	`XFS_IFORK_DSIZE
(
ù
)) {

253 
	`libxfs_id©a_ªÆloc
(
ù
, 
Àn
, 
XFS_DATA_FORK
);

254 i‡(
buf
)

255 
	`memmove
(
ù
->
i_df
.
if_u1
.
if_d©a
, 
buf
, 
Àn
);

256 
ù
->
i_d
.
di_size
 = 
Àn
;

257 
ù
->
i_df
.
if_Êags
 &~
XFS_IFEXTENTS
;

258 
ù
->
i_df
.
if_Êags
 |
XFS_IFINLINE
;

259 
ù
->
i_d
.
di_f‹m©
 = 
XFS_DINODE_FMT_LOCAL
;

260 
Êags
 = 
XFS_ILOG_DDATA
;

261 } i‡(
Àn
 > 0) {

262 
nb
 = 
	`XFS_B_TO_FSB
(
mp
, 
Àn
);

263 
nm≠
 = 1;

264 
îr‹
 = -
	`libxfs_bm≠i_wrôe
(
ç
, 
ù
, 0, 
nb
, 0, 
fú°
,Çb,

265 &
m≠
, &
nm≠
, 
df›s
);

266 i‡(
îr‹
) {

267 
	`Áû
(
	`_
("îr‹áŒoˇtög s∑˚ f‹á fûe"), 
îr‹
);

269 i‡(
nm≠
 != 1) {

270 
	`Ârötf
(
°dîr
,

271 
	`_
("%s: cannotállocate space for file\n"),

272 
¥og«me
);

273 
	`exô
(1);

275 
d
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
m≠
.
br_°¨tblock
);

276 
bp
 = 
	`libxfs_å™s_gë_buf
(
logô
 ? 
ç
 : 0, 
mp
->
m_dev
, 
d
,

277 
nb
 << 
mp
->
m_blkbb_log
, 0);

278 
	`memmove
(
	`XFS_BUF_PTR
(
bp
), 
buf
, 
Àn
);

279 i‡(
Àn
 < 
	`XFS_BUF_COUNT
(
bp
))

280 
	`mem£t
(
	`XFS_BUF_PTR
(
bp
Ë+ 
Àn
, 0, 
	`XFS_BUF_COUNT
(bp) -Üen);

281 i‡(
logô
)

282 
	`libxfs_å™s_log_buf
(
ç
, 
bp
, 0, 
	`XFS_BUF_COUNT
(bp) - 1);

284 
	`libxfs_wrôebuf
(
bp
, 
LIBXFS_EXIT_ON_FAILURE
);

286 
ù
->
i_d
.
di_size
 = 
Àn
;

287  
Êags
;

288 
	}
}

291 
	$√wªgfûe
(

292 **
µ
,

293 *
Àn
)

295 *
buf
;

296 
fd
;

297 *
‚ame
;

298 
size
;

300 
‚ame
 = 
	`gë°r
(
µ
);

301 i‡((
fd
 = 
	`›í
(
‚ame
, 
O_RDONLY
)Ë< 0 || (
size
 = 
	`fûesize
(fd)) < 0) {

302 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

303 
¥og«me
, 
‚ame
, 
	`°ªº‹
(
î∫o
));

304 
	`exô
(1);

306 i‡((*
Àn
 = ()
size
)) {

307 
buf
 = 
	`mÆloc
(
size
);

308 i‡(
	`ªad
(
fd
, 
buf
, 
size
) < size) {

309 
	`Ârötf
(
°dîr
, 
	`_
("%s:Ñead failed on %s: %s\n"),

310 
¥og«me
, 
‚ame
, 
	`°ªº‹
(
î∫o
));

311 
	`exô
(1);

314 
buf
 = 0;

315 
	`˛o£
(
fd
);

316  
buf
;

317 
	}
}

320 
	$√wdúít
(

321 
xfs_mou¡_t
 *
mp
,

322 
xfs_å™s_t
 *
ç
,

323 
xfs_öode_t
 *
pù
,

324 
xfs_«me
 *
«me
,

325 
xfs_öo_t
 
öum
,

326 
xfs_fsblock_t
 *
fú°
,

327 
xfs_de„r_›s
 *
df›s
)

329 
îr‹
;

330 
rsv
;

332 
rsv
 = 
	`XFS_DIRENTER_SPACE_RES
(
mp
, 
«me
->
Àn
);

334 
îr‹
 = -
	`libxfs_dú_¸óã«me
(
ç
, 
pù
, 
«me
, 
öum
, 
fú°
, 
df›s
, 
rsv
);

335 i‡(
îr‹
)

336 
	`Áû
(
	`_
("dúe˘‹y cª©íamêîr‹"), 
îr‹
);

337 
	}
}

340 
	$√wdúe˘‹y
(

341 
xfs_mou¡_t
 *
mp
,

342 
xfs_å™s_t
 *
ç
,

343 
xfs_öode_t
 *
dp
,

344 
xfs_öode_t
 *
pdp
)

346 
îr‹
;

348 
îr‹
 = -
	`libxfs_dú_öô
(
ç
, 
dp
, 
pdp
);

349 i‡(
îr‹
)

350 
	`Áû
(
	`_
("dúe˘‹y cª©êîr‹"), 
îr‹
);

351 
	}
}

354 
	$∑r£¥Ÿo
(

355 
xfs_mou¡_t
 *
mp
,

356 
xfs_öode_t
 *
pù
,

357 
fsx©å
 *
fsxp
,

358 **
µ
,

359 *
«me
)

361 
	#IF_REGULAR
 0

	)

362 
	#IF_RESERVED
 1

	)

363 
	#IF_BLOCK
 2

	)

364 
	#IF_CHAR
 3

	)

365 
	#IF_DIRECTORY
 4

	)

366 
	#IF_SYMLINK
 5

	)

367 
	#IF_FIFO
 6

	)

369 *
buf
;

370 
îr‹
;

371 
xfs_fsblock_t
 
fú°
;

372 
Êags
;

373 
xfs_de„r_›s
 
df›s
;

374 
fmt
;

375 
i
;

376 
xfs_öode_t
 *
ù
;

377 
Àn
;

378 
Œí
;

379 
majdev
;

380 
mödev
;

381 
mode
;

382 *
m°r
;

383 
xfs_å™s_t
 *
ç
;

384 
vÆ
;

385 
i§oŸ
 = 0;

386 
¸ed_t
 
¸eds
;

387 *
vÆue
;

388 
xfs_«me
 
x«me
;

390 
	`mem£t
(&
¸eds
, 0, (creds));

391 
m°r
 = 
	`gë°r
(
µ
);

392 
m°r
[0]) {

394 
fmt
 = 
IF_REGULAR
;

397 
fmt
 = 
IF_RESERVED
;

400 
fmt
 = 
IF_BLOCK
;

403 
fmt
 = 
IF_CHAR
;

406 
fmt
 = 
IF_DIRECTORY
;

409 
fmt
 = 
IF_SYMLINK
;

412 
fmt
 = 
IF_FIFO
;

415 
	`Ârötf
(
°dîr
, 
	`_
("%s: bad format string %s\n"),

416 
¥og«me
, 
m°r
);

417 
	`exô
(1);

419 
mode
 = 0;

420 
m°r
[1]) {

424 
mode
 |
S_ISUID
;

427 
	`Ârötf
(
°dîr
, 
	`_
("%s: bad format string %s\n"),

428 
¥og«me
, 
m°r
);

429 
	`exô
(1);

431 
m°r
[2]) {

435 
mode
 |
S_ISGID
;

438 
	`Ârötf
(
°dîr
, 
	`_
("%s: bad format string %s\n"),

439 
¥og«me
, 
m°r
);

440 
	`exô
(1);

442 
vÆ
 = 0;

443 
i
 = 3; i < 6; i++) {

444 i‡(
m°r
[
i
] < '0' || mstr[i] > '7') {

445 
	`Ârötf
(
°dîr
, 
	`_
("%s: bad format string %s\n"),

446 
¥og«me
, 
m°r
);

447 
	`exô
(1);

449 
vÆ
 = vÆ * 8 + 
m°r
[
i
] - '0';

451 
mode
 |
vÆ
;

452 
¸eds
.
¸_uid
 = ()
	`gënum
(
	`gë°r
(
µ
), 0, 0, 
Ál£
);

453 
¸eds
.
¸_gid
 = ()
	`gënum
(
	`gë°r
(
µ
), 0, 0, 
Ál£
);

454 
x«me
.
«me
 = (*)name;

455 
x«me
.
Àn
 = 
«me
 ? 
	`°æí
(name) : 0;

456 
x«me
.
ty≥
 = 0;

457 
Êags
 = 
XFS_ILOG_CORE
;

458 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

459 
fmt
) {

460 
IF_REGULAR
:

461 
buf
 = 
	`√wªgfûe
(
µ
, &
Àn
);

462 
ç
 = 
	`gëªs
(
mp
, 
	`XFS_B_TO_FSB
(mp, 
Àn
));

463 
îr‹
 = -
	`libxfs_öode_Æloc
(&
ç
, 
pù
, 
mode
|
S_IFREG
, 1, 0,

464 &
¸eds
, 
fsxp
, &
ù
);

465 i‡(
îr‹
)

466 
	`Áû
(
	`_
("InodêÆloˇti⁄ faûed"), 
îr‹
);

467 
Êags
 |
	`√wfûe
(
ç
, 
ù
, &
df›s
, &
fú°
, 0, 0, 
buf
, 
Àn
);

468 i‡(
buf
)

469 
	`‰ì
(
buf
);

470 
	`libxfs_å™s_ijoö
(
ç
, 
pù
, 0);

471 
x«me
.
ty≥
 = 
XFS_DIR3_FT_REG_FILE
;

472 
	`√wdúít
(
mp
, 
ç
, 
pù
, &
x«me
, 
ù
->
i_öo
, &
fú°
, &
df›s
);

475 
IF_RESERVED
:

476 
vÆue
 = 
	`gë°r
(
µ
);

477 
Œí
 = 
	`gënum
(
vÆue
, 
mp
->
m_sb
.
sb_blocksize
,

478 
mp
->
m_sb
.
sb_£˘size
, 
åue
);

479 i‡(
Œí
 < 0) {

480 
	`Ârötf
(
°dîr
,

481 
	`_
("%s: Bad value %s forÖroto file %s\n"),

482 
¥og«me
, 
vÆue
, 
«me
);

483 
	`exô
(1);

485 
ç
 = 
	`gëªs
(
mp
, 
	`XFS_B_TO_FSB
(mp, 
Œí
));

487 
îr‹
 = -
	`libxfs_öode_Æloc
(&
ç
, 
pù
, 
mode
|
S_IFREG
, 1, 0,

488 &
¸eds
, 
fsxp
, &
ù
);

489 i‡(
îr‹
)

490 
	`Áû
(
	`_
("Inodê¥e-Æloˇti⁄ faûed"), 
îr‹
);

492 
	`libxfs_å™s_ijoö
(
ç
, 
pù
, 0);

494 
x«me
.
ty≥
 = 
XFS_DIR3_FT_REG_FILE
;

495 
	`√wdúít
(
mp
, 
ç
, 
pù
, &
x«me
, 
ù
->
i_öo
, &
fú°
, &
df›s
);

496 
	`libxfs_å™s_log_öode
(
ç
, 
ù
, 
Êags
);

498 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

499 i‡(
îr‹
)

500 
	`Áû
(
	`_
("Pª-Æloˇãd fûê¸óti⁄ faûed"), 
îr‹
);

501 
	`libxfs_å™s_commô
(
ç
);

502 
	`rsvfûe
(
mp
, 
ù
, 
Œí
);

503 
	`IRELE
(
ù
);

506 
IF_BLOCK
:

507 
ç
 = 
	`gëªs
(
mp
, 0);

508 
majdev
 = 
	`gënum
(
	`gë°r
(
µ
), 0, 0, 
Ál£
);

509 
mödev
 = 
	`gënum
(
	`gë°r
(
µ
), 0, 0, 
Ál£
);

510 
îr‹
 = -
	`libxfs_öode_Æloc
(&
ç
, 
pù
, 
mode
|
S_IFBLK
, 1,

511 
	`IRIX_MKDEV
(
majdev
, 
mödev
), &
¸eds
, 
fsxp
, &
ù
);

512 i‡(
îr‹
) {

513 
	`Áû
(
	`_
("InodêÆloˇti⁄ faûed"), 
îr‹
);

515 
	`libxfs_å™s_ijoö
(
ç
, 
pù
, 0);

516 
x«me
.
ty≥
 = 
XFS_DIR3_FT_BLKDEV
;

517 
	`√wdúít
(
mp
, 
ç
, 
pù
, &
x«me
, 
ù
->
i_öo
, &
fú°
, &
df›s
);

518 
Êags
 |
XFS_ILOG_DEV
;

521 
IF_CHAR
:

522 
ç
 = 
	`gëªs
(
mp
, 0);

523 
majdev
 = 
	`gënum
(
	`gë°r
(
µ
), 0, 0, 
Ál£
);

524 
mödev
 = 
	`gënum
(
	`gë°r
(
µ
), 0, 0, 
Ál£
);

525 
îr‹
 = -
	`libxfs_öode_Æloc
(&
ç
, 
pù
, 
mode
|
S_IFCHR
, 1,

526 
	`IRIX_MKDEV
(
majdev
, 
mödev
), &
¸eds
, 
fsxp
, &
ù
);

527 i‡(
îr‹
)

528 
	`Áû
(
	`_
("InodêÆloˇti⁄ faûed"), 
îr‹
);

529 
	`libxfs_å™s_ijoö
(
ç
, 
pù
, 0);

530 
x«me
.
ty≥
 = 
XFS_DIR3_FT_CHRDEV
;

531 
	`√wdúít
(
mp
, 
ç
, 
pù
, &
x«me
, 
ù
->
i_öo
, &
fú°
, &
df›s
);

532 
Êags
 |
XFS_ILOG_DEV
;

535 
IF_FIFO
:

536 
ç
 = 
	`gëªs
(
mp
, 0);

537 
îr‹
 = -
	`libxfs_öode_Æloc
(&
ç
, 
pù
, 
mode
|
S_IFIFO
, 1, 0,

538 &
¸eds
, 
fsxp
, &
ù
);

539 i‡(
îr‹
)

540 
	`Áû
(
	`_
("InodêÆloˇti⁄ faûed"), 
îr‹
);

541 
	`libxfs_å™s_ijoö
(
ç
, 
pù
, 0);

542 
x«me
.
ty≥
 = 
XFS_DIR3_FT_FIFO
;

543 
	`√wdúít
(
mp
, 
ç
, 
pù
, &
x«me
, 
ù
->
i_öo
, &
fú°
, &
df›s
);

545 
IF_SYMLINK
:

546 
buf
 = 
	`gë°r
(
µ
);

547 
Àn
 = ()
	`°æí
(
buf
);

548 
ç
 = 
	`gëªs
(
mp
, 
	`XFS_B_TO_FSB
(mp, 
Àn
));

549 
îr‹
 = -
	`libxfs_öode_Æloc
(&
ç
, 
pù
, 
mode
|
S_IFLNK
, 1, 0,

550 &
¸eds
, 
fsxp
, &
ù
);

551 i‡(
îr‹
)

552 
	`Áû
(
	`_
("InodêÆloˇti⁄ faûed"), 
îr‹
);

553 
Êags
 |
	`√wfûe
(
ç
, 
ù
, &
df›s
, &
fú°
, 1, 1, 
buf
, 
Àn
);

554 
	`libxfs_å™s_ijoö
(
ç
, 
pù
, 0);

555 
x«me
.
ty≥
 = 
XFS_DIR3_FT_SYMLINK
;

556 
	`√wdúít
(
mp
, 
ç
, 
pù
, &
x«me
, 
ù
->
i_öo
, &
fú°
, &
df›s
);

558 
IF_DIRECTORY
:

559 
ç
 = 
	`gëªs
(
mp
, 0);

560 
îr‹
 = -
	`libxfs_öode_Æloc
(&
ç
, 
pù
, 
mode
|
S_IFDIR
, 1, 0,

561 &
¸eds
, 
fsxp
, &
ù
);

562 i‡(
îr‹
)

563 
	`Áû
(
	`_
("InodêÆloˇti⁄ faûed"), 
îr‹
);

564 
	`öc_∆ök
(
	`VFS_I
(
ù
));

565 i‡(!
pù
) {

566 
pù
 = 
ù
;

567 
mp
->
m_sb
.
sb_roŸöo
 = 
ù
->
i_öo
;

568 
	`libxfs_log_sb
(
ç
);

569 
i§oŸ
 = 1;

571 
	`libxfs_å™s_ijoö
(
ç
, 
pù
, 0);

572 
x«me
.
ty≥
 = 
XFS_DIR3_FT_DIR
;

573 
	`√wdúít
(
mp
, 
ç
, 
pù
, &
x«me
, 
ù
->
i_öo
,

574 &
fú°
, &
df›s
);

575 
	`öc_∆ök
(
	`VFS_I
(
pù
));

576 
	`libxfs_å™s_log_öode
(
ç
, 
pù
, 
XFS_ILOG_CORE
);

578 
	`√wdúe˘‹y
(
mp
, 
ç
, 
ù
, 
pù
);

579 
	`libxfs_å™s_log_öode
(
ç
, 
ù
, 
Êags
);

580 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

581 i‡(
îr‹
)

582 
	`Áû
(
	`_
("Dúe˘‹y cª©i⁄ faûed"), 
îr‹
);

583 
	`libxfs_å™s_commô
(
ç
);

588 i‡(
i§oŸ
)

589 
	`πöô
(
mp
);

590 
ç
 = 
NULL
;

592 
«me
 = 
	`gë°r
(
µ
);

593 i‡(!
«me
)

595 i‡(
	`°rcmp
(
«me
, "$") == 0)

597 
	`∑r£¥Ÿo
(
mp
, 
ù
, 
fsxp
, 
µ
, 
«me
);

599 
	`IRELE
(
ù
);

602 
	`ASSERT
(0);

603 
	`Áû
(
	`_
("Unknow¿f‹m©"), 
EINVAL
);

605 
	`libxfs_å™s_log_öode
(
ç
, 
ù
, 
Êags
);

606 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

607 i‡(
îr‹
) {

608 
	`Áû
(
	`_
("ErrorÉncountered creating file fromÖrototype file"),

609 
îr‹
);

611 
	`libxfs_å™s_commô
(
ç
);

612 
	`IRELE
(
ù
);

613 
	}
}

616 
	$∑r£_¥Ÿo
(

617 
xfs_mou¡_t
 *
mp
,

618 
fsx©å
 *
fsx
,

619 **
µ
)

621 
	`∑r£¥Ÿo
(
mp
, 
NULL
, 
fsx
, 
µ
, NULL);

622 
	}
}

628 
	$πöô
(

629 
xfs_mou¡_t
 *
mp
)

631 
xfs_fûeoff_t
 
bno
;

632 
xfs_fûeoff_t
 
ebno
;

633 
xfs_bmbt_úec_t
 *
ï
;

634 
îr‹
;

635 
xfs_fsblock_t
 
fú°
;

636 
xfs_de„r_›s
 
df›s
;

637 
i
;

638 
xfs_bmbt_úec_t
 
m≠
[
XFS_BMAP_MAX_NMAP
];

639 
xfs_exéí_t
 
nsumblocks
;

640 
nm≠
;

641 
xfs_öode_t
 *
rbmù
;

642 
xfs_öode_t
 *
rsumù
;

643 
xfs_å™s_t
 *
ç
;

644 
¸ed
 
¸eds
;

645 
fsx©å
 
fsx©ås
;

646 
xfs_å™s_ªs
 
åes
 = {0};

651 
i
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
, 
MKFS_BLOCKRES_INODE
, 0, 0, &
ç
);

652 i‡(
i
)

653 
	`ªs_Áûed
(
i
);

655 
	`mem£t
(&
¸eds
, 0, (creds));

656 
	`mem£t
(&
fsx©ås
, 0, (fsxattrs));

657 
îr‹
 = -
	`libxfs_öode_Æloc
(&
ç
, 
NULL
, 
S_IFREG
, 1, 0,

658 &
¸eds
, &
fsx©ås
, &
rbmù
);

659 i‡(
îr‹
) {

660 
	`Áû
(
	`_
("Ró…imêbôm≠ inodêÆloˇti⁄ faûed"), 
îr‹
);

667 
mp
->
m_sb
.
sb_rbmöo
 = 
rbmù
->
i_öo
;

668 
rbmù
->
i_d
.
di_size
 = 
mp
->
m_sb
.
sb_rbmblocks
 * mp->m_sb.
sb_blocksize
;

669 
rbmù
->
i_d
.
di_Êags
 = 
XFS_DIFLAG_NEWRTBM
;

670 *(
__uöt64_t
 *)&
	`VFS_I
(
rbmù
)->
i_©ime
 = 0;

671 
	`libxfs_å™s_log_öode
(
ç
, 
rbmù
, 
XFS_ILOG_CORE
);

672 
	`libxfs_log_sb
(
ç
);

673 
mp
->
m_rbmù
 = 
rbmù
;

674 
îr‹
 = -
	`libxfs_öode_Æloc
(&
ç
, 
NULL
, 
S_IFREG
, 1, 0,

675 &
¸eds
, &
fsx©ås
, &
rsumù
);

676 i‡(
îr‹
) {

677 
	`Áû
(
	`_
("Ró…imêsumm¨y inodêÆloˇti⁄ faûed"), 
îr‹
);

679 
mp
->
m_sb
.
sb_rsumöo
 = 
rsumù
->
i_öo
;

680 
rsumù
->
i_d
.
di_size
 = 
mp
->
m_rsumsize
;

681 
	`libxfs_å™s_log_öode
(
ç
, 
rsumù
, 
XFS_ILOG_CORE
);

682 
	`libxfs_log_sb
(
ç
);

683 
	`libxfs_å™s_commô
(
ç
);

684 
mp
->
m_rsumù
 = 
rsumù
;

688 
i
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
,

689 
mp
->
m_sb
.
sb_rbmblocks
 + (
	`XFS_BM_MAXLEVELS
(mp,
XFS_DATA_FORK
) - 1),

690 0, 0, &
ç
);

691 i‡(
i
)

692 
	`ªs_Áûed
(
i
);

694 
	`libxfs_å™s_ijoö
(
ç
, 
rbmù
, 0);

695 
bno
 = 0;

696 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

697 
bno
 < 
mp
->
m_sb
.
sb_rbmblocks
) {

698 
nm≠
 = 
XFS_BMAP_MAX_NMAP
;

699 
îr‹
 = -
	`libxfs_bm≠i_wrôe
(
ç
, 
rbmù
, 
bno
,

700 (
xfs_exéí_t
)(
mp
->
m_sb
.
sb_rbmblocks
 - 
bno
),

701 0, &
fú°
, 
mp
->
m_sb
.
sb_rbmblocks
,

702 
m≠
, &
nm≠
, &
df›s
);

703 i‡(
îr‹
) {

704 
	`Áû
(
	`_
("Allocation ofÅheÑealtime bitmap failed"),

705 
îr‹
);

707 
i
 = 0, 
ï
 = 
m≠
; i < 
nm≠
; i++,Ép++) {

708 
	`libxfs_devi˚_zîo
(
mp
->
m_ddev_èrgp
,

709 
	`XFS_FSB_TO_DADDR
(
mp
, 
ï
->
br_°¨tblock
),

710 
	`XFS_FSB_TO_BB
(
mp
, 
ï
->
br_blockcou¡
));

711 
bno
 +
ï
->
br_blockcou¡
;

715 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
rbmù
);

716 i‡(
îr‹
) {

717 
	`Áû
(
	`_
("Com∂ëi⁄ o‡thêªÆtimêbôm≠ faûed"), 
îr‹
);

719 
	`libxfs_å™s_commô
(
ç
);

724 
nsumblocks
 = 
mp
->
m_rsumsize
 >> mp->
m_sb
.
sb_blocklog
;

725 
i
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
,

726 
nsumblocks
 + (
	`XFS_BM_MAXLEVELS
(
mp
,
XFS_DATA_FORK
) - 1),

727 0, 0, &
ç
);

728 i‡(
i
)

729 
	`ªs_Áûed
(
i
);

730 
	`libxfs_å™s_ijoö
(
ç
, 
rsumù
, 0);

731 
bno
 = 0;

732 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

733 
bno
 < 
nsumblocks
) {

734 
nm≠
 = 
XFS_BMAP_MAX_NMAP
;

735 
îr‹
 = -
	`libxfs_bm≠i_wrôe
(
ç
, 
rsumù
, 
bno
,

736 (
xfs_exéí_t
)(
nsumblocks
 - 
bno
),

737 0, &
fú°
, 
nsumblocks
,

738 
m≠
, &
nm≠
, &
df›s
);

739 i‡(
îr‹
) {

740 
	`Áû
(
	`_
("Allocation ofÅheÑealtime summary failed"),

741 
îr‹
);

743 
i
 = 0, 
ï
 = 
m≠
; i < 
nm≠
; i++,Ép++) {

744 
	`libxfs_devi˚_zîo
(
mp
->
m_ddev_èrgp
,

745 
	`XFS_FSB_TO_DADDR
(
mp
, 
ï
->
br_°¨tblock
),

746 
	`XFS_FSB_TO_BB
(
mp
, 
ï
->
br_blockcou¡
));

747 
bno
 +
ï
->
br_blockcou¡
;

750 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
rsumù
);

751 i‡(
îr‹
) {

752 
	`Áû
(
	`_
("Com∂ëi⁄ o‡thêªÆtimêsumm¨y faûed"), 
îr‹
);

754 
	`libxfs_å™s_commô
(
ç
);

760 
bno
 = 0; bnÿ< 
mp
->
m_sb
.
sb_ªxã¡s
; bnÿ
ebno
) {

761 
i
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
, 0, 0, 0, &
ç
);

762 i‡(
i
)

763 
	`ªs_Áûed
(
i
);

764 
	`libxfs_å™s_ijoö
(
ç
, 
rbmù
, 0);

765 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

766 
ebno
 = 
	`XFS_RTMIN
(
mp
->
m_sb
.
sb_ªxã¡s
,

767 
bno
 + 
NBBY
 * 
mp
->
m_sb
.
sb_blocksize
);

768 
îr‹
 = -
	`libxfs_π‰ì_exã¡
(
ç
, 
bno
, (
xfs_exéí_t
)(
ebno
-bno));

769 i‡(
îr‹
) {

770 
	`Áû
(
	`_
("Error initializingÅheÑealtime space"),

771 
îr‹
);

773 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
rbmù
);

774 i‡(
îr‹
) {

775 
	`Áû
(
	`_
("Eº‹ com∂ëögÅhêªÆtimê•a˚"), 
îr‹
);

777 
	`libxfs_å™s_commô
(
ç
);

779 
	}
}

782 
	$fûesize
(

783 
fd
)

785 
°©
 
°b
;

787 i‡(
	`f°©
(
fd
, &
°b
) < 0)

789  ()
°b
.
°_size
;

790 
	}
}

	@mkfs/xfs_mkfs.c

19 
	~"libxfs.h
"

20 
	~<˘y≥.h
>

21 #ifde‡
ENABLE_BLKID


22 
	~<blkid/blkid.h
>

24 
	~"xfs_mu…idisk.h
"

25 
	~"libxcmd.h
"

30 
c⁄Êi˘
(
›t
, *
èb
[], 
ﬁdidx
, 
√widx
);

31 
ûÀgÆ
(c⁄° *
vÆue
, c⁄° *
›t
);

32 
__©åibuã__
((
n‹ëu∫
)Ë
ußge
 ();

33 
__©åibuã__
((
n‹ëu∫
)Ë
ªqvÆ
(
›t
, *
èb
[], 
idx
);

34 
ª•ec
(
›t
, *
èb
[], 
idx
);

35 
unknown
(
›t
, *
s
);

36 
i•ow2
(
i
);

42 
	gblocksize
;

43 
	g£˘‹size
;

45 
	#MAX_SUBOPTS
 16

	)

46 
	#SUBOPT_NEEDS_VAL
 (-1LL)

	)

47 
	#MAX_CONFLICTS
 8

	)

48 
	#LAST_CONFLICT
 (-1)

	)

114 
	s›t_∑øms
 {

115 c⁄° 
	m«me
;

116 c⁄° *
	msub›ts
[
MAX_SUBOPTS
];

118 
	ssub›t_∑øm
 {

119 
	mödex
;

120 
boﬁ
 
	m£í
;

121 
boﬁ
 
	m°r_£í
;

122 
boﬁ
 
	mc⁄vît
;

123 
boﬁ
 
	mis_powî_2
;

124 
	mc⁄Êi˘s
[
MAX_CONFLICTS
];

125 
	mmövÆ
;

126 
	mmaxvÆ
;

127 
	mdeÁu…vÆ
;

128 } 
	msub›t_∑øms
[
MAX_SUBOPTS
];

131 
›t_∑øms
 
	gb›ts
 = {

132 .
«me
 = 'b',

133 .
	gsub›ts
 = {

134 
	#B_LOG
 0

	)

136 
	#B_SIZE
 1

	)

138 
NULL


140 .
	gsub›t_∑øms
 = {

141 { .
ödex
 = 
B_LOG
,

142 .
	gc⁄Êi˘s
 = { 
B_SIZE
,

143 
LAST_CONFLICT
 },

144 .
	gmövÆ
 = 
XFS_MIN_BLOCKSIZE_LOG
,

145 .
	gmaxvÆ
 = 
XFS_MAX_BLOCKSIZE_LOG
,

146 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

148 { .
	gödex
 = 
B_SIZE
,

149 .
	gc⁄vît
 = 
åue
,

150 .
	gis_powî_2
 = 
åue
,

151 .
	gc⁄Êi˘s
 = { 
B_LOG
,

152 
LAST_CONFLICT
 },

153 .
	gmövÆ
 = 
XFS_MIN_BLOCKSIZE
,

154 .
	gmaxvÆ
 = 
XFS_MAX_BLOCKSIZE
,

155 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

160 
›t_∑øms
 
	gd›ts
 = {

161 .
«me
 = 'd',

162 .
	gsub›ts
 = {

163 
	#D_AGCOUNT
 0

	)

165 
	#D_FILE
 1

	)

167 
	#D_NAME
 2

	)

169 
	#D_SIZE
 3

	)

171 
	#D_SUNIT
 4

	)

173 
	#D_SWIDTH
 5

	)

175 
	#D_AGSIZE
 6

	)

177 
	#D_SU
 7

	)

179 
	#D_SW
 8

	)

181 
	#D_SECTLOG
 9

	)

183 
	#D_SECTSIZE
 10

	)

185 
	#D_NOALIGN
 11

	)

187 
	#D_RTINHERIT
 12

	)

189 
	#D_PROJINHERIT
 13

	)

191 
	#D_EXTSZINHERIT
 14

	)

193 
NULL


195 .
	gsub›t_∑øms
 = {

196 { .
ödex
 = 
D_AGCOUNT
,

197 .
	gc⁄Êi˘s
 = { 
D_AGSIZE
,

198 
LAST_CONFLICT
 },

199 .
	gmövÆ
 = 1,

200 .
	gmaxvÆ
 = 
XFS_MAX_AGNUMBER
,

201 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

203 { .
	gödex
 = 
D_FILE
,

204 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

205 .
	gmövÆ
 = 0,

206 .
	gmaxvÆ
 = 1,

207 .
	gdeÁu…vÆ
 = 1,

209 { .
	gödex
 = 
D_NAME
,

210 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

211 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

213 { .
	gödex
 = 
D_SIZE
,

214 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

215 .
	gc⁄vît
 = 
åue
,

216 .
	gmövÆ
 = 
XFS_AG_MIN_BYTES
,

217 .
	gmaxvÆ
 = 
LLONG_MAX
,

218 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

220 { .
	gödex
 = 
D_SUNIT
,

221 .
	gc⁄Êi˘s
 = { 
D_NOALIGN
,

222 
D_SU
,

223 
D_SW
,

224 
LAST_CONFLICT
 },

225 .
	gmövÆ
 = 0,

226 .
	gmaxvÆ
 = 
UINT_MAX
,

227 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

229 { .
	gödex
 = 
D_SWIDTH
,

230 .
	gc⁄Êi˘s
 = { 
D_NOALIGN
,

231 
D_SU
,

232 
D_SW
,

233 
LAST_CONFLICT
 },

234 .
	gmövÆ
 = 0,

235 .
	gmaxvÆ
 = 
UINT_MAX
,

236 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

238 { .
	gödex
 = 
D_AGSIZE
,

239 .
	gc⁄Êi˘s
 = { 
D_AGCOUNT
,

240 
LAST_CONFLICT
 },

241 .
	gc⁄vît
 = 
åue
,

242 .
	gmövÆ
 = 
XFS_AG_MIN_BYTES
,

243 .
	gmaxvÆ
 = 
XFS_AG_MAX_BYTES
,

244 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

246 { .
	gödex
 = 
D_SU
,

247 .
	gc⁄Êi˘s
 = { 
D_NOALIGN
,

248 
D_SUNIT
,

249 
D_SWIDTH
,

250 
LAST_CONFLICT
 },

251 .
	gc⁄vît
 = 
åue
,

252 .
	gmövÆ
 = 0,

253 .
	gmaxvÆ
 = 
UINT_MAX
,

254 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

256 { .
	gödex
 = 
D_SW
,

257 .
	gc⁄Êi˘s
 = { 
D_NOALIGN
,

258 
D_SUNIT
,

259 
D_SWIDTH
,

260 
LAST_CONFLICT
 },

261 .
	gmövÆ
 = 0,

262 .
	gmaxvÆ
 = 
UINT_MAX
,

263 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

265 { .
	gödex
 = 
D_SECTLOG
,

266 .
	gc⁄Êi˘s
 = { 
D_SECTSIZE
,

267 
LAST_CONFLICT
 },

268 .
	gmövÆ
 = 
XFS_MIN_SECTORSIZE_LOG
,

269 .
	gmaxvÆ
 = 
XFS_MAX_SECTORSIZE_LOG
,

270 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

272 { .
	gödex
 = 
D_SECTSIZE
,

273 .
	gc⁄Êi˘s
 = { 
D_SECTLOG
,

274 
LAST_CONFLICT
 },

275 .
	gc⁄vît
 = 
åue
,

276 .
	gis_powî_2
 = 
åue
,

277 .
	gmövÆ
 = 
XFS_MIN_SECTORSIZE
,

278 .
	gmaxvÆ
 = 
XFS_MAX_SECTORSIZE
,

279 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

281 { .
	gödex
 = 
D_NOALIGN
,

282 .
	gc⁄Êi˘s
 = { 
D_SU
,

283 
D_SW
,

284 
D_SUNIT
,

285 
D_SWIDTH
,

286 
LAST_CONFLICT
 },

287 .
	gmövÆ
 = 0,

288 .
	gmaxvÆ
 = 1,

289 .
	gdeÁu…vÆ
 = 1,

291 { .
	gödex
 = 
D_RTINHERIT
,

292 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

293 .
	gmövÆ
 = 1,

294 .
	gmaxvÆ
 = 1,

295 .
	gdeÁu…vÆ
 = 1,

297 { .
	gödex
 = 
D_PROJINHERIT
,

298 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

299 .
	gmövÆ
 = 0,

300 .
	gmaxvÆ
 = 
UINT_MAX
,

301 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

303 { .
	gödex
 = 
D_EXTSZINHERIT
,

304 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

305 .
	gmövÆ
 = 0,

306 .
	gmaxvÆ
 = 
UINT_MAX
,

307 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

313 
›t_∑øms
 
	gi›ts
 = {

314 .
«me
 = 'i',

315 .
	gsub›ts
 = {

316 
	#I_ALIGN
 0

	)

318 
	#I_LOG
 1

	)

320 
	#I_MAXPCT
 2

	)

322 
	#I_PERBLOCK
 3

	)

324 
	#I_SIZE
 4

	)

326 
	#I_ATTR
 5

	)

328 
	#I_PROJID32BIT
 6

	)

330 
	#I_SPINODES
 7

	)

332 
NULL


334 .
	gsub›t_∑øms
 = {

335 { .
ödex
 = 
I_ALIGN
,

336 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

337 .
	gmövÆ
 = 0,

338 .
	gmaxvÆ
 = 1,

339 .
	gdeÁu…vÆ
 = 1,

341 { .
	gödex
 = 
I_LOG
,

342 .
	gc⁄Êi˘s
 = { 
I_PERBLOCK
,

343 
I_SIZE
,

344 
LAST_CONFLICT
 },

345 .
	gmövÆ
 = 
XFS_DINODE_MIN_LOG
,

346 .
	gmaxvÆ
 = 
XFS_DINODE_MAX_LOG
,

347 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

349 { .
	gödex
 = 
I_MAXPCT
,

350 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

351 .
	gmövÆ
 = 0,

352 .
	gmaxvÆ
 = 100,

353 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

355 { .
	gödex
 = 
I_PERBLOCK
,

356 .
	gc⁄Êi˘s
 = { 
I_LOG
,

357 
I_SIZE
,

358 
LAST_CONFLICT
 },

359 .
	gis_powî_2
 = 
åue
,

360 .
	gmövÆ
 = 
XFS_MIN_INODE_PERBLOCK
,

361 .
	gmaxvÆ
 = 
XFS_MAX_BLOCKSIZE
 / 
XFS_DINODE_MIN_SIZE
,

362 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

364 { .
	gödex
 = 
I_SIZE
,

365 .
	gc⁄Êi˘s
 = { 
I_PERBLOCK
,

366 
I_LOG
,

367 
LAST_CONFLICT
 },

368 .
	gis_powî_2
 = 
åue
,

369 .
	gmövÆ
 = 
XFS_DINODE_MIN_SIZE
,

370 .
	gmaxvÆ
 = 
XFS_DINODE_MAX_SIZE
,

371 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

373 { .
	gödex
 = 
I_ATTR
,

374 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

375 .
	gmövÆ
 = 0,

376 .
	gmaxvÆ
 = 2,

377 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

379 { .
	gödex
 = 
I_PROJID32BIT
,

380 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

381 .
	gmövÆ
 = 0,

382 .
	gmaxvÆ
 = 1,

383 .
	gdeÁu…vÆ
 = 1,

385 { .
	gödex
 = 
I_SPINODES
,

386 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

387 .
	gmövÆ
 = 0,

388 .
	gmaxvÆ
 = 1,

389 .
	gdeÁu…vÆ
 = 1,

394 
›t_∑øms
 
	gl›ts
 = {

395 .
«me
 = 'l',

396 .
	gsub›ts
 = {

397 
	#L_AGNUM
 0

	)

399 
	#L_INTERNAL
 1

	)

401 
	#L_SIZE
 2

	)

403 
	#L_VERSION
 3

	)

405 
	#L_SUNIT
 4

	)

407 
	#L_SU
 5

	)

409 
	#L_DEV
 6

	)

411 
	#L_SECTLOG
 7

	)

413 
	#L_SECTSIZE
 8

	)

415 
	#L_FILE
 9

	)

417 
	#L_NAME
 10

	)

419 
	#L_LAZYSBCNTR
 11

	)

421 
NULL


423 .
	gsub›t_∑øms
 = {

424 { .
ödex
 = 
L_AGNUM
,

425 .
	gc⁄Êi˘s
 = { 
L_DEV
,

426 
LAST_CONFLICT
 },

427 .
	gmövÆ
 = 0,

428 .
	gmaxvÆ
 = 
UINT_MAX
,

429 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

431 { .
	gödex
 = 
L_INTERNAL
,

432 .
	gc⁄Êi˘s
 = { 
L_FILE
,

433 
L_DEV
,

434 
LAST_CONFLICT
 },

435 .
	gmövÆ
 = 0,

436 .
	gmaxvÆ
 = 1,

437 .
	gdeÁu…vÆ
 = 1,

439 { .
	gödex
 = 
L_SIZE
,

440 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

441 .
	gc⁄vît
 = 
åue
,

442 .
	gmövÆ
 = 2 * 1024 * 1024LL,

443 .
	gmaxvÆ
 = 
XFS_MAX_LOG_BYTES
,

444 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

446 { .
	gödex
 = 
L_VERSION
,

447 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

448 .
	gmövÆ
 = 1,

449 .
	gmaxvÆ
 = 2,

450 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

452 { .
	gödex
 = 
L_SUNIT
,

453 .
	gc⁄Êi˘s
 = { 
L_SU
,

454 
LAST_CONFLICT
 },

455 .
	gmövÆ
 = 1,

456 .
	gmaxvÆ
 = 
BTOBB
(
XLOG_MAX_RECORD_BSIZE
),

457 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

459 { .
	gödex
 = 
L_SU
,

460 .
	gc⁄Êi˘s
 = { 
L_SUNIT
,

461 
LAST_CONFLICT
 },

462 .
	gc⁄vît
 = 
åue
,

463 .
	gmövÆ
 = 
BBTOB
(1),

464 .
	gmaxvÆ
 = 
XLOG_MAX_RECORD_BSIZE
,

465 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

467 { .
	gödex
 = 
L_DEV
,

468 .
	gc⁄Êi˘s
 = { 
L_AGNUM
,

469 
L_INTERNAL
,

470 
LAST_CONFLICT
 },

471 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

473 { .
	gödex
 = 
L_SECTLOG
,

474 .
	gc⁄Êi˘s
 = { 
L_SECTSIZE
,

475 
LAST_CONFLICT
 },

476 .
	gmövÆ
 = 
XFS_MIN_SECTORSIZE_LOG
,

477 .
	gmaxvÆ
 = 
XFS_MAX_SECTORSIZE_LOG
,

478 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

480 { .
	gödex
 = 
L_SECTSIZE
,

481 .
	gc⁄Êi˘s
 = { 
L_SECTLOG
,

482 
LAST_CONFLICT
 },

483 .
	gc⁄vît
 = 
åue
,

484 .
	gis_powî_2
 = 
åue
,

485 .
	gmövÆ
 = 
XFS_MIN_SECTORSIZE
,

486 .
	gmaxvÆ
 = 
XFS_MAX_SECTORSIZE
,

487 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

489 { .
	gödex
 = 
L_FILE
,

490 .
	gc⁄Êi˘s
 = { 
L_INTERNAL
,

491 
LAST_CONFLICT
 },

492 .
	gmövÆ
 = 0,

493 .
	gmaxvÆ
 = 1,

494 .
	gdeÁu…vÆ
 = 1,

496 { .
	gödex
 = 
L_NAME
,

497 .
	gc⁄Êi˘s
 = { 
L_AGNUM
,

498 
L_INTERNAL
,

499 
LAST_CONFLICT
 },

500 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

502 { .
	gödex
 = 
L_LAZYSBCNTR
,

503 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

504 .
	gmövÆ
 = 0,

505 .
	gmaxvÆ
 = 1,

506 .
	gdeÁu…vÆ
 = 1,

511 
›t_∑øms
 
	gn›ts
 = {

512 .
«me
 = 'n',

513 .
	gsub›ts
 = {

514 
	#N_LOG
 0

	)

516 
	#N_SIZE
 1

	)

518 
	#N_VERSION
 2

	)

520 
	#N_FTYPE
 3

	)

522 
NULL
,

524 .
	gsub›t_∑øms
 = {

525 { .
ödex
 = 
N_LOG
,

526 .
	gc⁄Êi˘s
 = { 
N_SIZE
,

527 
LAST_CONFLICT
 },

528 .
	gmövÆ
 = 
XFS_MIN_REC_DIRSIZE
,

529 .
	gmaxvÆ
 = 
XFS_MAX_BLOCKSIZE_LOG
,

530 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

532 { .
	gödex
 = 
N_SIZE
,

533 .
	gc⁄Êi˘s
 = { 
N_LOG
,

534 
LAST_CONFLICT
 },

535 .
	gc⁄vît
 = 
åue
,

536 .
	gis_powî_2
 = 
åue
,

537 .
	gmövÆ
 = 1 << 
XFS_MIN_REC_DIRSIZE
,

538 .
	gmaxvÆ
 = 
XFS_MAX_BLOCKSIZE
,

539 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

541 { .
	gödex
 = 
N_VERSION
,

542 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

543 .
	gmövÆ
 = 2,

544 .
	gmaxvÆ
 = 2,

545 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

547 { .
	gödex
 = 
N_FTYPE
,

548 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

549 .
	gmövÆ
 = 0,

550 .
	gmaxvÆ
 = 1,

551 .
	gdeÁu…vÆ
 = 1,

556 
›t_∑øms
 
	gr›ts
 = {

557 .
«me
 = 'r',

558 .
	gsub›ts
 = {

559 
	#R_EXTSIZE
 0

	)

561 
	#R_SIZE
 1

	)

563 
	#R_DEV
 2

	)

565 
	#R_FILE
 3

	)

567 
	#R_NAME
 4

	)

569 
	#R_NOALIGN
 5

	)

571 
NULL


573 .
	gsub›t_∑øms
 = {

574 { .
ödex
 = 
R_EXTSIZE
,

575 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

576 .
	gc⁄vît
 = 
åue
,

577 .
	gmövÆ
 = 
XFS_MIN_RTEXTSIZE
,

578 .
	gmaxvÆ
 = 
XFS_MAX_RTEXTSIZE
,

579 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

581 { .
	gödex
 = 
R_SIZE
,

582 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

583 .
	gc⁄vît
 = 
åue
,

584 .
	gmövÆ
 = 0,

585 .
	gmaxvÆ
 = 
LLONG_MAX
,

586 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

588 { .
	gödex
 = 
R_DEV
,

589 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

590 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

592 { .
	gödex
 = 
R_FILE
,

593 .
	gmövÆ
 = 0,

594 .
	gmaxvÆ
 = 1,

595 .
	gdeÁu…vÆ
 = 1,

596 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

598 { .
	gödex
 = 
R_NAME
,

599 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

600 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

602 { .
	gödex
 = 
R_NOALIGN
,

603 .
	gmövÆ
 = 0,

604 .
	gmaxvÆ
 = 1,

605 .
	gdeÁu…vÆ
 = 1,

606 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

611 
›t_∑øms
 
	gs›ts
 = {

612 .
«me
 = 's',

613 .
	gsub›ts
 = {

614 
	#S_LOG
 0

	)

616 
	#S_SECTLOG
 1

	)

618 
	#S_SIZE
 2

	)

620 
	#S_SECTSIZE
 3

	)

622 
NULL


624 .
	gsub›t_∑øms
 = {

625 { .
ödex
 = 
S_LOG
,

626 .
	gc⁄Êi˘s
 = { 
S_SIZE
,

627 
S_SECTSIZE
,

628 
LAST_CONFLICT
 },

629 .
	gmövÆ
 = 
XFS_MIN_SECTORSIZE_LOG
,

630 .
	gmaxvÆ
 = 
XFS_MAX_SECTORSIZE_LOG
,

631 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

633 { .
	gödex
 = 
S_SECTLOG
,

634 .
	gc⁄Êi˘s
 = { 
S_SIZE
,

635 
S_SECTSIZE
,

636 
LAST_CONFLICT
 },

637 .
	gmövÆ
 = 
XFS_MIN_SECTORSIZE_LOG
,

638 .
	gmaxvÆ
 = 
XFS_MAX_SECTORSIZE_LOG
,

639 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

641 { .
	gödex
 = 
S_SIZE
,

642 .
	gc⁄Êi˘s
 = { 
S_LOG
,

643 
S_SECTLOG
,

644 
LAST_CONFLICT
 },

645 .
	gc⁄vît
 = 
åue
,

646 .
	gis_powî_2
 = 
åue
,

647 .
	gmövÆ
 = 
XFS_MIN_SECTORSIZE
,

648 .
	gmaxvÆ
 = 
XFS_MAX_SECTORSIZE
,

649 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

651 { .
	gödex
 = 
S_SECTSIZE
,

652 .
	gc⁄Êi˘s
 = { 
S_LOG
,

653 
S_SECTLOG
,

654 
LAST_CONFLICT
 },

655 .
	gc⁄vît
 = 
åue
,

656 .
	gis_powî_2
 = 
åue
,

657 .
	gmövÆ
 = 
XFS_MIN_SECTORSIZE
,

658 .
	gmaxvÆ
 = 
XFS_MAX_SECTORSIZE
,

659 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

664 
›t_∑øms
 
	gm›ts
 = {

665 .
«me
 = 'm',

666 .
	gsub›ts
 = {

667 
	#M_CRC
 0

	)

669 
	#M_FINOBT
 1

	)

671 
	#M_UUID
 2

	)

673 
	#M_RMAPBT
 3

	)

675 
	#M_REFLINK
 4

	)

677 
NULL


679 .
	gsub›t_∑øms
 = {

680 { .
ödex
 = 
M_CRC
,

681 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

682 .
	gmövÆ
 = 0,

683 .
	gmaxvÆ
 = 1,

684 .
	gdeÁu…vÆ
 = 1,

686 { .
	gödex
 = 
M_FINOBT
,

687 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

688 .
	gmövÆ
 = 0,

689 .
	gmaxvÆ
 = 1,

690 .
	gdeÁu…vÆ
 = 1,

692 { .
	gödex
 = 
M_UUID
,

693 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

694 .
	gdeÁu…vÆ
 = 
SUBOPT_NEEDS_VAL
,

696 { .
	gödex
 = 
M_RMAPBT
,

697 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

698 .
	gmövÆ
 = 0,

699 .
	gmaxvÆ
 = 1,

700 .
	gdeÁu…vÆ
 = 0,

702 { .
	gödex
 = 
M_REFLINK
,

703 .
	gc⁄Êi˘s
 = { 
LAST_CONFLICT
 },

704 .
	gmövÆ
 = 0,

705 .
	gmaxvÆ
 = 1,

706 .
	gdeÁu…vÆ
 = 0,

711 
	#TERABYTES
(
cou¡
, 
blog
Ë((
__uöt64_t
)(cou¡Ë<< (40 - (blog)))

	)

712 
	#GIGABYTES
(
cou¡
, 
blog
Ë((
__uöt64_t
)(cou¡Ë<< (30 - (blog)))

	)

713 
	#MEGABYTES
(
cou¡
, 
blog
Ë((
__uöt64_t
)(cou¡Ë<< (20 - (blog)))

	)

718 
	#DTOBT
(
d
Ë((
xfs_rfsblock_t
)((dË>> (
blocklog
 - 
BBSHIFT
)))

	)

724 
	#MKFS_BLOCKRES_INODE
 \

725 ((
uöt
)(
mp
->
m_üŒoc_blks
 + (mp->
m_ö_maxÀvñs
 - 1)))

	)

726 
	#MKFS_BLOCKRES
(
rb
) \

727 ((
uöt
)(
MKFS_BLOCKRES_INODE
 + 
XFS_DA_NODE_MAXDEPTH
 + \

728 (
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_DATA_FORK
Ë- 1Ë+ (
rb
)))

	)

733 
	#WHACK_SIZE
 (128 * 1024)

	)

739 
	$ˇlc_°rùe_Á˘‹s
(

740 
dsu
,

741 
dsw
,

742 
d£˘sz
,

743 
lsu
,

744 
l£˘sz
,

745 *
dsunô
,

746 *
dswidth
,

747 *
lsunô
)

750 i‡((*
dsunô
 && !*
dswidth
) || (!*dsunit && *dswidth)) {

751 
	`Ârötf
(
°dîr
,

752 
	`_
("both data sunitánd data swidth options "

754 
	`ußge
();

757 i‡(
dsu
 || 
dsw
) {

758 i‡((
dsu
 && !
dsw
) || (!dsu && dsw)) {

759 
	`Ârötf
(
°dîr
,

760 
	`_
("both data suánd data sw options "

762 
	`ußge
();

765 i‡(
dsu
 % 
d£˘sz
) {

766 
	`Ârötf
(
°dîr
,

767 
	`_
("data su must beá multiple ofÅhe "

768 "£˘‹ sizê(%d)\n"), 
d£˘sz
);

769 
	`ußge
();

772 *
dsunô
 = ()
	`BTOBBT
(
dsu
);

773 *
dswidth
 = *
dsunô
 * 
dsw
;

776 i‡(*
dsunô
 && (*
dswidth
 % *dsunit != 0)) {

777 
	`Ârötf
(
°dîr
,

778 
	`_
("data stripe width (%d) must beá multiple ofÅhe "

779 "d©®°rùêunô (%d)\n"), *
dswidth
, *
dsunô
);

780 
	`ußge
();

785 i‡(
lsu
)

786 *
lsunô
 = ()
	`BTOBBT
(
lsu
);

789 i‡(
lsu
 % 
blocksize
 != 0) {

790 
	`Ârötf
(
°dîr
,

791 
	`_
("log stripe unit (%d) must beá multiple ofÅhe block size (%d)\n"),

792 
lsu
, 
blocksize
);

793 
	`exô
(1);

795 i‡((
	`BBTOB
(*
lsunô
Ë% 
blocksize
 != 0)) {

796 
	`Ârötf
(
°dîr
,

797 
	`_
("log stripe unit (%d) must beá multiple ofÅhe block size (%d)\n"),

798 
	`BBTOB
(*
lsunô
), 
blocksize
);

799 
	`exô
(1);

801 
	}
}

804 
	$check_devi˚_ty≥
(

805 c⁄° *
«me
,

806 *
isfûe
,

807 
boﬁ
 
no_size
,

808 
boﬁ
 
no_«me
,

809 *
¸óã
,

810 
boﬁ
 
f‹˚_ovîwrôe
,

811 c⁄° *
›äame
)

813 
°©
 
°©buf
;

815 i‡(*
isfûe
 && (
no_size
 || 
no_«me
)) {

816 
	`Ârötf
(
°dîr
,

817 
	`_
("if -%s fileÅhen -%sÇameánd -%s sizeáreÑequired\n"),

818 
›äame
, optname, optname);

819 
	`ußge
();

822 i‡(!
«me
) {

823 
	`Ârötf
(
°dîr
, 
	`_
("No deviceÇame specified\n"));

824 
	`ußge
();

827 i‡(
	`°©
(
«me
, &
°©buf
)) {

828 i‡(
î∫o
 =
ENOENT
 && *
isfûe
) {

829 i‡(
¸óã
)

830 *
¸óã
 = 1;

834 
	`Ârötf
(
°dîr
,

835 
	`_
("Erroráccessing specified device %s: %s\n"),

836 
«me
, 
	`°ªº‹
(
î∫o
));

837 
	`ußge
();

841 i‡(!
f‹˚_ovîwrôe
 && 
	`check_ovîwrôe
(
«me
)) {

842 
	`Ârötf
(
°dîr
,

843 
	`_
("%s: UseÅhe -f optionÅo force overwrite.\n"),

844 
¥og«me
);

845 
	`exô
(1);

853 i‡(
	`S_ISREG
(
°©buf
.
°_mode
)) {

854 i‡(!*
isfûe
)

855 *
isfûe
 = 1;

856 i‡(
¸óã
)

857 *
¸óã
 = 1;

861 i‡(
	`S_ISBLK
(
°©buf
.
°_mode
)) {

862 i‡(*
isfûe
) {

863 
	`Ârötf
(
°dîr
,

864 
	`_
("specified \"-%s file\" oná block device %s\n"),

865 
›äame
, 
«me
);

866 
	`ußge
();

871 
	`Ârötf
(
°dîr
,

872 
	`_
("specified device %sÇotá file or block device\n"),

873 
«me
);

874 
	`ußge
();

875 
	}
}

878 
	$fixup_log_°rùe_unô
(

879 
lsÊag
,

880 
sunô
,

881 
xfs_rfsblock_t
 *
logblocks
,

882 
blocklog
)

884 
__uöt64_t
 
tmp_logblocks
;

889 i‡((*
logblocks
 % 
sunô
) != 0) {

890 i‡(!
lsÊag
) {

891 
tmp_logblocks
 = ((*
logblocks
 + (
sunô
 - 1))

892 / 
sunô
) * sunit;

897 i‡((
tmp_logblocks
 > 
XFS_MAX_LOG_BLOCKS
) ||

898 ((
tmp_logblocks
 << 
blocklog
Ë> 
XFS_MAX_LOG_BYTES
)) {

899 
tmp_logblocks
 = (*
logblocks
 / 
sunô
) * sunit;

901 *
logblocks
 = 
tmp_logblocks
;

903 
	`Ârötf
(
°dîr
, 
	`_
("log size %lld isÇotá multiple "

905 (Ë*
logblocks
, 
sunô
);

906 
	`ußge
();

909 
	}
}

911 
xfs_fsblock_t


912 
	$fixup_öã∫Æ_log_°rùe
(

913 
xfs_mou¡_t
 *
mp
,

914 
lsÊag
,

915 
xfs_fsblock_t
 
log°¨t
,

916 
__uöt64_t
 
agsize
,

917 
sunô
,

918 
xfs_rfsblock_t
 *
logblocks
,

919 
blocklog
,

920 *
œlign
)

922 i‡((
log°¨t
 % 
sunô
) != 0) {

923 
log°¨t
 = (÷og°¨à+ (
sunô
 - 1))/sunit) * sunit;

924 *
œlign
 = 1;

927 
	`fixup_log_°rùe_unô
(
lsÊag
, 
sunô
, 
logblocks
, 
blocklog
);

929 i‡(*
logblocks
 > 
agsize
 - 
	`XFS_FSB_TO_AGBNO
(
mp
, 
log°¨t
)) {

930 
	`Ârötf
(
°dîr
,

931 
	`_
("DueÅo stripeálignment,Åhe internalÜog size "

932 "(%ŒdËi†toÿœrge.\n"), (Ë*
logblocks
);

933 
	`Ârötf
(
°dîr
, 
	`_
("Must fit withinánállocation group.\n"));

934 
	`ußge
();

936  
log°¨t
;

937 
	}
}

940 
	$vÆid©e_log_size
(
__uöt64_t
 
logblocks
, 
blocklog
, 
mö_logblocks
)

942 i‡(
logblocks
 < 
mö_logblocks
) {

943 
	`Ârötf
(
°dîr
,

944 
	`_
("log size %lld blocksÅoo small, minimum size is %d blocks\n"),

945 ()
logblocks
, 
mö_logblocks
);

946 
	`ußge
();

948 i‡(
logblocks
 > 
XFS_MAX_LOG_BLOCKS
) {

949 
	`Ârötf
(
°dîr
,

950 
	`_
("log size %lld blocksÅooÜarge, maximum size is %lld blocks\n"),

951 ()
logblocks
, 
XFS_MAX_LOG_BLOCKS
);

952 
	`ußge
();

954 i‡((
logblocks
 << 
blocklog
Ë> 
XFS_MAX_LOG_BYTES
) {

955 
	`Ârötf
(
°dîr
,

956 
	`_
("log size %lld bytesÅooÜarge, maximum size is %lld bytes\n"),

957 ()(
logblocks
 << 
blocklog
), 
XFS_MAX_LOG_BYTES
);

958 
	`ußge
();

960 
	}
}

963 
	$ˇlc_deÁu…_imaxp˘
(

964 
blocklog
,

965 
__uöt64_t
 
dblocks
)

975 i‡(
dblocks
 < 
	`TERABYTES
(1, 
blocklog
)) {

976  
XFS_DFL_IMAXIMUM_PCT
;

977 } i‡(
dblocks
 < 
	`TERABYTES
(50, 
blocklog
)) {

982 
	}
}

985 
	$vÆid©e_ag_geomëry
(

986 
blocklog
,

987 
__uöt64_t
 
dblocks
,

988 
__uöt64_t
 
agsize
,

989 
__uöt64_t
 
agcou¡
)

991 i‡(
agsize
 < 
	`XFS_AG_MIN_BLOCKS
(
blocklog
)) {

992 
	`Ârötf
(
°dîr
,

993 
	`_
("agsize (%lld blocks)Åoo small,ÇeedátÜeast %lld blocks\n"),

994 ()
agsize
,

995 ()
	`XFS_AG_MIN_BLOCKS
(
blocklog
));

996 
	`ußge
();

999 i‡(
agsize
 > 
	`XFS_AG_MAX_BLOCKS
(
blocklog
)) {

1000 
	`Ârötf
(
°dîr
,

1001 
	`_
("agsize (%lld blocks)Åoo big, maximum is %lld blocks\n"),

1002 ()
agsize
,

1003 ()
	`XFS_AG_MAX_BLOCKS
(
blocklog
));

1004 
	`ußge
();

1007 i‡(
agsize
 > 
dblocks
) {

1008 
	`Ârötf
(
°dîr
,

1009 
	`_
("agsize (%lld blocks)Åoo big, dataárea is %lld blocks\n"),

1010 ()
agsize
, ()
dblocks
);

1011 
	`ußge
();

1014 i‡(
agsize
 < 
	`XFS_AG_MIN_BLOCKS
(
blocklog
)) {

1015 
	`Ârötf
(
°dîr
,

1016 
	`_
("too manyállocation groups for size = %lld\n"),

1017 ()
agsize
);

1018 
	`Ârötf
(
°dîr
, 
	`_
("needát most %lldállocation groups\n"),

1019 ()(
dblocks
 / 
	`XFS_AG_MIN_BLOCKS
(
blocklog
) +

1020 (
dblocks
 % 
	`XFS_AG_MIN_BLOCKS
(
blocklog
) != 0)));

1021 
	`ußge
();

1024 i‡(
agsize
 > 
	`XFS_AG_MAX_BLOCKS
(
blocklog
)) {

1025 
	`Ârötf
(
°dîr
,

1026 
	`_
("toÿ„wáŒoˇti⁄ group†f‹ sizê%Œd\n"), ()
agsize
);

1027 
	`Ârötf
(
°dîr
,

1028 
	`_
("needátÜeast %lldállocation groups\n"),

1029 ()(
dblocks
 / 
	`XFS_AG_MAX_BLOCKS
(
blocklog
) +

1030 (
dblocks
 % 
	`XFS_AG_MAX_BLOCKS
(
blocklog
) != 0)));

1031 
	`ußge
();

1038 i‡–
dblocks
 % 
agsize
 != 0 &&

1039 (
dblocks
 % 
agsize
 < 
	`XFS_AG_MIN_BLOCKS
(
blocklog
))) {

1040 
	`Ârötf
(
°dîr
,

1041 
	`_
("last AG size %lld blocksÅoo small, minimum size is %lld blocks\n"),

1042 ()(
dblocks
 % 
agsize
),

1043 ()
	`XFS_AG_MIN_BLOCKS
(
blocklog
));

1044 
	`ußge
();

1050 i‡(
agcou¡
 > 
XFS_MAX_AGNUMBER
 + 1) {

1051 
	`Ârötf
(
°dîr
,

1052 
	`_
("%lldállocation groups isÅoo many, maximum is %lld\n"),

1053 ()
agcou¡
, ()
XFS_MAX_AGNUMBER
 + 1);

1054 
	`ußge
();

1056 
	}
}

1059 
	$zîo_ﬁd_xfs_°ru˘uªs
(

1060 
libxfs_öô_t
 *
xi
,

1061 
xfs_sb_t
 *
√w_sb
)

1063 *
buf
;

1064 
xfs_sb_t
 
sb
;

1065 
__uöt32_t
 
bsize
;

1066 
i
;

1067 
xfs_off_t
 
off
;

1072 i‡(
xi
->
disfûe
 && xi->
d¸ót
)

1079 
buf
 = 
	`memÆign
(
	`libxfs_devi˚_Æignmít
(), 
√w_sb
->
sb_£˘size
);

1080 i‡(!
buf
) {

1081 
	`Ârötf
(
°dîr
,

1082 
	`_
("errorÑeadingÉxisting superblock -- failedÅo memalign buffer\n"));

1085 
	`mem£t
(
buf
, 0, 
√w_sb
->
sb_£˘size
);

1093 
off
 = 
	`¥ód
(
xi
->
dfd
, 
buf
, 
√w_sb
->
sb_£˘size
, 0);

1094 i‡(
off
 !
√w_sb
->
sb_£˘size
) {

1095 i‡(!
xi
->
disfûe
)

1096 
	`Ârötf
(
°dîr
,

1097 
	`_
("errorÑeadingÉxisting superblock: %s\n"),

1098 
	`°ªº‹
(
î∫o
));

1099 
d⁄e
;

1101 
	`libxfs_sb_‰om_disk
(&
sb
, 
buf
);

1107 i‡(
sb
.
sb_magi˙um
 !
XFS_SB_MAGIC
 || sb.
sb_blocksize
 == 0)

1108 
d⁄e
;

1110 
bsize
 = 1, 
i
 = 0; bsizê< 
sb
.
sb_blocksize
 &&

1111 
i
 < (
sb
.
sb_blocksize
Ë* 
NBBY
; i++)

1112 
bsize
 <<= 1;

1114 i‡(
i
 < 
XFS_MIN_BLOCKSIZE_LOG
 || i > 
XFS_MAX_BLOCKSIZE_LOG
 ||

1115 
i
 !
sb
.
sb_blocklog
)

1116 
d⁄e
;

1118 i‡(
sb
.
sb_dblocks
 > ((
__uöt64_t
)sb.
sb_agcou¡
 * sb.
sb_agblocks
) ||

1119 
sb
.
sb_dblocks
 < ((
__uöt64_t
)(sb.
sb_agcou¡
 - 1) *

1120 
sb
.
sb_agblocks
 + 
XFS_MIN_AG_BLOCKS
))

1121 
d⁄e
;

1126 
	`mem£t
(
buf
, 0, 
√w_sb
->
sb_£˘size
);

1127 
off
 = 0;

1128 
i
 = 1; i < 
sb
.
sb_agcou¡
; i++) {

1129 
off
 +
sb
.
sb_agblocks
;

1130 i‡(
	`pwrôe
(
xi
->
dfd
, 
buf
, 
√w_sb
->
sb_£˘size
,

1131 
off
 << 
sb
.
sb_blocklog
) == -1)

1134 
d⁄e
:

1135 
	`‰ì
(
buf
);

1136 
	}
}

1139 
	$disˇrd_blocks
(
dev_t
 
dev
, 
__uöt64_t
 
n£˘‹s
)

1141 
fd
;

1147 
fd
 = 
	`libxfs_devi˚_to_fd
(
dev
);

1148 i‡(
fd
 > 0)

1149 
	`∂©f‹m_disˇrd_blocks
(
fd
, 0, 
n£˘‹s
 << 9);

1150 
	}
}

1152 
	ssb_„©_¨gs
 {

1153 
	mlog_vîsi⁄
;

1154 
	m©å_vîsi⁄
;

1155 
	mdú_vîsi⁄
;

1156 
	m•öodes
;

1157 
	mföobt
;

1158 
boﬁ
 
	möode_Æign
;

1159 
boﬁ
 
	mnci
;

1160 
boﬁ
 
	mœzy_sb_cou¡îs
;

1161 
boﬁ
 
	m¥ojid16bô
;

1162 
boﬁ
 
	m¸cs_íabÀd
;

1163 
boﬁ
 
	mdú·y≥
;

1164 
boﬁ
 
	m∑ª¡_poöãrs
;

1165 
boﬁ
 
	mrm≠bt
;

1166 
boﬁ
 
	mªÊök
;

1170 
	$sb_£t_„©uªs
(

1171 
xfs_sb
 *
sbp
,

1172 
sb_„©_¨gs
 *
Â
,

1173 
£˘size
,

1174 
l£˘size
,

1175 
dsunô
)

1178 
sbp
->
sb_vîsi⁄num
 = 
XFS_DFL_SB_VERSION_BITS
;

1179 i‡(
Â
->
¸cs_íabÀd
)

1180 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_5
;

1182 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_4
;

1184 i‡(
Â
->
öode_Æign
)

1185 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_ALIGNBIT
;

1186 i‡(
dsunô
)

1187 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_DALIGNBIT
;

1188 i‡(
Â
->
log_vîsi⁄
 == 2)

1189 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_LOGV2BIT
;

1190 i‡(
Â
->
©å_vîsi⁄
 == 1)

1191 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_ATTRBIT
;

1192 i‡(
£˘size
 > 
BBSIZE
 || 
l£˘size
 > BBSIZE)

1193 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_SECTORBIT
;

1194 i‡(
Â
->
nci
)

1195 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_BORGBIT
;

1198 
sbp
->
sb_„©uªs2
 = 0;

1199 i‡(
Â
->
œzy_sb_cou¡îs
)

1200 
sbp
->
sb_„©uªs2
 |
XFS_SB_VERSION2_LAZYSBCOUNTBIT
;

1201 i‡(!
Â
->
¥ojid16bô
)

1202 
sbp
->
sb_„©uªs2
 |
XFS_SB_VERSION2_PROJID32BIT
;

1203 i‡(
Â
->
∑ª¡_poöãrs
)

1204 
sbp
->
sb_„©uªs2
 |
XFS_SB_VERSION2_PARENTBIT
;

1205 i‡(
Â
->
¸cs_íabÀd
)

1206 
sbp
->
sb_„©uªs2
 |
XFS_SB_VERSION2_CRCBIT
;

1207 i‡(
Â
->
©å_vîsi⁄
 == 2)

1208 
sbp
->
sb_„©uªs2
 |
XFS_SB_VERSION2_ATTR2BIT
;

1211 i‡(
Â
->
dú·y≥
 && !Â->
¸cs_íabÀd
)

1212 
sbp
->
sb_„©uªs2
 |
XFS_SB_VERSION2_FTYPE
;

1215 i‡(
sbp
->
sb_„©uªs2
 != 0)

1216 
sbp
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_MOREBITSBIT
;

1224 
sbp
->
sb_bad_„©uªs2
 = sbp->
sb_„©uªs2
;

1226 i‡(!
Â
->
¸cs_íabÀd
)

1230 
sbp
->
sb_„©uªs_com∑t
 = 0;

1231 
sbp
->
sb_„©uªs_ro_com∑t
 = 0;

1232 
sbp
->
sb_„©uªs_öcom∑t
 = 
XFS_SB_FEAT_INCOMPAT_FTYPE
;

1233 
sbp
->
sb_„©uªs_log_öcom∑t
 = 0;

1235 i‡(
Â
->
föobt
)

1236 
sbp
->
sb_„©uªs_ro_com∑t
 = 
XFS_SB_FEAT_RO_COMPAT_FINOBT
;

1237 i‡(
Â
->
rm≠bt
)

1238 
sbp
->
sb_„©uªs_ro_com∑t
 |
XFS_SB_FEAT_RO_COMPAT_RMAPBT
;

1239 i‡(
Â
->
ªÊök
)

1240 
sbp
->
sb_„©uªs_ro_com∑t
 |
XFS_SB_FEAT_RO_COMPAT_REFLINK
;

1250 i‡(
Â
->
•öodes
) {

1251 
sbp
->
sb_•öo_Æign
 = sbp->
sb_öﬂlignmt
;

1252 
sbp
->
sb_öﬂlignmt
 = 
XFS_INODES_PER_CHUNK
 *

1253 
sbp
->
sb_öodesize
 >> sbp->
sb_blocklog
;

1254 
sbp
->
sb_„©uªs_öcom∑t
 |
XFS_SB_FEAT_INCOMPAT_SPINODES
;

1257 
	}
}

1259 
__©åibuã__
((
n‹ëu∫
)) 

1260 
	$ûÀgÆ_›ti⁄
(

1261 c⁄° *
vÆue
,

1262 
›t_∑øms
 *
›ts
,

1263 
ödex
,

1264 c⁄° *
ªas⁄
)

1266 
	`Ârötf
(
°dîr
,

1267 
	`_
("Illegal value %s for -%c %s option. %s\n"),

1268 
vÆue
, 
›ts
->
«me
, o±s->
sub›ts
[
ödex
],

1269 
ªas⁄
 ?Ñeason : "");

1270 
	`ußge
();

1271 
	}
}

1277 
	$check_›t
(

1278 
›t_∑øms
 *
›ts
,

1279 
ödex
,

1280 
boﬁ
 
°r_£í
)

1282 
sub›t_∑øm
 *
•
 = &
›ts
->
sub›t_∑øms
[
ödex
];

1283 
i
;

1285 i‡(
•
->
ödex
 != index) {

1286 
	`Ârötf
(
°dîr
,

1288 
•
->
ödex
, index);

1289 
	`ªqvÆ
(
›ts
->
«me
, (**)›ts->
sub›ts
, 
ödex
);

1300 i‡(!
°r_£í
) {

1301 i‡(
•
->
£í
)

1302 
	`ª•ec
(
›ts
->
«me
, (**)›ts->
sub›ts
, 
ödex
);

1303 
•
->
£í
 = 
åue
;

1305 i‡(
•
->
°r_£í
)

1306 
	`ª•ec
(
›ts
->
«me
, (**)›ts->
sub›ts
, 
ödex
);

1307 
•
->
°r_£í
 = 
åue
;

1311 
i
 = 0; i < 
MAX_CONFLICTS
; i++) {

1312 
c⁄Êi˘_›t
 = 
•
->
c⁄Êi˘s
[
i
];

1314 i‡(
c⁄Êi˘_›t
 =
LAST_CONFLICT
)

1316 i‡(
›ts
->
sub›t_∑øms
[
c⁄Êi˘_›t
].
£í
 ||

1317 
›ts
->
sub›t_∑øms
[
c⁄Êi˘_›t
].
°r_£í
)

1318 
	`c⁄Êi˘
(
›ts
->
«me
, (**)›ts->
sub›ts
,

1319 
c⁄Êi˘_›t
, 
ödex
);

1321 
	}
}

1324 
	$gënum
(

1325 c⁄° *
°r
,

1326 
›t_∑øms
 *
›ts
,

1327 
ödex
)

1329 
sub›t_∑øm
 *
•
 = &
›ts
->
sub›t_∑øms
[
ödex
];

1330 
c
;

1332 
	`check_›t
(
›ts
, 
ödex
, 
Ál£
);

1334 i‡(!
°r
 || *str == '\0') {

1335 i‡(
•
->
deÁu…vÆ
 =
SUBOPT_NEEDS_VAL
)

1336 
	`ªqvÆ
(
›ts
->
«me
, (**)›ts->
sub›ts
, 
ödex
);

1337  
•
->
deÁu…vÆ
;

1340 i‡(
•
->
mövÆ
 =0 && sp->
maxvÆ
 == 0) {

1341 
	`Ârötf
(
°dîr
,

1342 
	`_
("Option -%c %s has undefined minval/maxval."

1344 
›ts
->
«me
, o±s->
sub›ts
[
ödex
]);

1345 
	`exô
(1);

1354 i‡(
•
->
c⁄vît
)

1355 
c
 = 
	`cväum
(
blocksize
, 
£˘‹size
, 
°r
);

1357 *
°r_íd
;

1359 
c
 = 
	`°πﬁl
(
°r
, &
°r_íd
, 0);

1360 i‡(
c
 =0 && 
°r_íd
 =
°r
)

1361 
	`ûÀgÆ_›ti⁄
(
°r
, 
›ts
, 
ödex
, 
NULL
);

1362 i‡(*
°r_íd
 != '\0')

1363 
	`ûÀgÆ_›ti⁄
(
°r
, 
›ts
, 
ödex
, 
NULL
);

1367 i‡(
c
 < 
•
->
mövÆ
)

1368 
	`ûÀgÆ_›ti⁄
(
°r
, 
›ts
, 
ödex
, 
	`_
("value isÅoo small"));

1369 i‡(
c
 > 
•
->
maxvÆ
)

1370 
	`ûÀgÆ_›ti⁄
(
°r
, 
›ts
, 
ödex
, 
	`_
("value isÅooÜarge"));

1371 i‡(
•
->
is_powî_2
 && !
	`i•ow2
(
c
))

1372 
	`ûÀgÆ_›ti⁄
(
°r
, 
›ts
, 
ödex
, 
	`_
("value must beáÖower of 2"));

1373  
c
;

1374 
	}
}

1383 
	$gë°r
(

1384 *
°r
,

1385 
›t_∑øms
 *
›ts
,

1386 
ödex
)

1388 
	`check_›t
(
›ts
, 
ödex
, 
åue
);

1391 i‡(!
°r
 || *str == '\0')

1392 
	`ªqvÆ
(
›ts
->
«me
, (**)›ts->
sub›ts
, 
ödex
);

1393  
°r
;

1394 
	}
}

1397 
	$maö
(

1398 
¨gc
,

1399 **
¨gv
)

1401 
__uöt64_t
 
agcou¡
;

1402 
xfs_agf_t
 *
agf
;

1403 
xfs_agi_t
 *
agi
;

1404 
xfs_agnumbî_t
 
agno
;

1405 
__uöt64_t
 
agsize
;

1406 
xfs_Æloc_ªc_t
 *
¨ec
;

1407 
xfs_båì_block
 *
block
;

1408 
blÊag
;

1409 
blocklog
;

1410 
bsÊag
;

1411 
bsize
;

1412 
xfs_buf_t
 *
buf
;

1413 
c
;

1414 
daÊag
;

1415 
dasize
;

1416 
xfs_rfsblock_t
 
dblocks
;

1417 *
dfûe
;

1418 
dúblocklog
;

1419 
dúblocksize
;

1420 *
dsize
;

1421 
dsu
;

1422 
dsw
;

1423 
dsunô
;

1424 
dswidth
;

1425 
f‹˚_ovîwrôe
;

1426 
fsx©å
 
fsx
;

1427 
ûÊag
;

1428 
imaxp˘
;

1429 
imÊag
;

1430 
öodñog
;

1431 
ö›block
;

1432 
ùÊag
;

1433 
isÊag
;

1434 
isize
;

1435 *
œbñ
 = 
NULL
;

1436 
œÊag
;

1437 
œlign
;

1438 
ldÊag
;

1439 
liÊag
;

1440 
xfs_agnumbî_t
 
logagno
;

1441 
xfs_rfsblock_t
 
logblocks
;

1442 *
logfûe
;

1443 
logöã∫Æ
;

1444 *
logsize
;

1445 
xfs_fsblock_t
 
log°¨t
;

1446 
lvÊag
;

1447 
lsÊag
;

1448 
lsuÊag
;

1449 
lsunôÊag
;

1450 
l£˘‹log
;

1451 
l£˘‹size
;

1452 
l¶Êag
;

1453 
lssÊag
;

1454 
lsu
;

1455 
lsunô
;

1456 
mö_logblocks
;

1457 
xfs_mou¡_t
 *
mp
;

1458 
xfs_mou¡_t
 
mbuf
;

1459 
xfs_exéí_t
 
nbmblocks
;

1460 
∆Êag
;

1461 
nodsÊag
;

1462 
n‹sÊag
;

1463 
xfs_Æloc_ªc_t
 *
ƒec
;

1464 
nsÊag
;

1465 
nvÊag
;

1466 
NÊag
;

1467 
disˇrd
 = 1;

1468 *
p
;

1469 *
¥Ÿofûe
;

1470 *
¥Ÿo°rög
;

1471 
qÊag
;

1472 
xfs_rfsblock_t
 
πblocks
;

1473 
xfs_exéí_t
 
πextblocks
;

1474 
xfs_πblock_t
 
πexã¡s
;

1475 *
πextsize
;

1476 *
πfûe
;

1477 *
πsize
;

1478 
xfs_sb_t
 *
sbp
;

1479 
£˘‹log
;

1480 
__uöt64_t
 
£˘‹_mask
;

1481 
¶Êag
;

1482 
ssÊag
;

1483 
__uöt64_t
 
tmp_agsize
;

1484 
uuid_t
 
uuid
;

1485 
w‹°_‰ìli°
;

1486 
libxfs_öô_t
 
xi
;

1487 
fs_t›ﬁogy
 
·
;

1488 
sb_„©_¨gs
 
sb_„©
 = {

1489 .
föobt
 = 1,

1490 .
•öodes
 = 0,

1491 .
log_vîsi⁄
 = 2,

1492 .
©å_vîsi⁄
 = 2,

1493 .
dú_vîsi⁄
 = 
XFS_DFL_DIR_VERSION
,

1494 .
öode_Æign
 = 
XFS_IFLAG_ALIGN
,

1495 .
nci
 = 
Ál£
,

1496 .
œzy_sb_cou¡îs
 = 
åue
,

1497 .
¥ojid16bô
 = 
Ál£
,

1498 .
¸cs_íabÀd
 = 
åue
,

1499 .
dú·y≥
 = 
åue
,

1500 .
∑ª¡_poöãrs
 = 
Ál£
,

1501 .
rm≠bt
 = 
Ál£
,

1502 .
ªÊök
 = 
Ál£
,

1505 
	`∂©f‹m_uuid_gíî©e
(&
uuid
);

1506 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

1507 
	`£éoˇÀ
(
LC_ALL
, "");

1508 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

1509 
	`ãxtdomaö
(
PACKAGE
);

1511 
blÊag
 = 
bsÊag
 = 
¶Êag
 = 
ssÊag
 = 
l¶Êag
 = 
lssÊag
 = 0;

1512 
blocklog
 = 
blocksize
 = 0;

1513 
£˘‹log
 = 
l£˘‹log
 = 0;

1514 
£˘‹size
 = 
l£˘‹size
 = 0;

1515 
agsize
 = 
daÊag
 = 
dasize
 = 
dblocks
 = 0;

1516 
ûÊag
 = 
imÊag
 = 
ùÊag
 = 
isÊag
 = 0;

1517 
liÊag
 = 
œÊag
 = 
lsÊag
 = 
lsuÊag
 = 
lsunôÊag
 = 
ldÊag
 = 
lvÊag
 = 0;

1518 
logöã∫Æ
 = 1;

1519 
logagno
 = 
logblocks
 = 
πblocks
 = 
πextblocks
 = 0;

1520 
NÊag
 = 
∆Êag
 = 
nsÊag
 = 
nvÊag
 = 0;

1521 
dúblocklog
 = 
dúblocksize
 = 0;

1522 
qÊag
 = 0;

1523 
imaxp˘
 = 
öodñog
 = 
ö›block
 = 
isize
 = 0;

1524 
dfûe
 = 
logfûe
 = 
πfûe
 = 
NULL
;

1525 
dsize
 = 
logsize
 = 
πsize
 = 
πextsize
 = 
¥Ÿofûe
 = 
NULL
;

1526 
dsu
 = 
dsw
 = 
dsunô
 = 
dswidth
 = 
œlign
 = 
lsu
 = 
lsunô
 = 0;

1527 
nodsÊag
 = 
n‹sÊag
 = 0;

1528 
f‹˚_ovîwrôe
 = 0;

1529 
w‹°_‰ìli°
 = 0;

1530 
	`mem£t
(&
fsx
, 0, (fsx));

1532 
	`mem£t
(&
xi
, 0, (xi));

1533 
xi
.
isdúe˘
 = 
LIBXFS_DIRECT
;

1534 
xi
.
i§ód⁄ly
 = 
LIBXFS_EXCLUSIVELY
;

1536 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "b:d:i:l:L:m:n:KNp:qr:s:CfV")Ë!
EOF
) {

1537 
c
) {

1540 
f‹˚_ovîwrôe
 = 1;

1543 
p
 = 
›èrg
;

1544 *
p
 != '\0') {

1545 **
sub›ts
 = (**)
b›ts
.subopts;

1546 *
vÆue
;

1548 
	`gësub›t
(&
p
, 
sub›ts
, &
vÆue
)) {

1549 
B_LOG
:

1550 
blocklog
 = 
	`gënum
(
vÆue
, &
b›ts
, 
B_LOG
);

1551 
blocksize
 = 1 << 
blocklog
;

1552 
blÊag
 = 1;

1554 
B_SIZE
:

1555 
blocksize
 = 
	`gënum
(
vÆue
, &
b›ts
,

1556 
B_SIZE
);

1557 
blocklog
 = 
	`libxfs_highbô32
(
blocksize
);

1558 
bsÊag
 = 1;

1561 
	`unknown
('b', 
vÆue
);

1566 
p
 = 
›èrg
;

1567 *
p
 != '\0') {

1568 **
sub›ts
 = (**)
d›ts
.subopts;

1569 *
vÆue
;

1571 
	`gësub›t
(&
p
, 
sub›ts
, &
vÆue
)) {

1572 
D_AGCOUNT
:

1573 
agcou¡
 = 
	`gënum
(
vÆue
, &
d›ts
,

1574 
D_AGCOUNT
);

1575 
daÊag
 = 1;

1577 
D_AGSIZE
:

1578 
agsize
 = 
	`gënum
(
vÆue
, &
d›ts
, 
D_AGSIZE
);

1579 
dasize
 = 1;

1581 
D_FILE
:

1582 
xi
.
disfûe
 = 
	`gënum
(
vÆue
, &
d›ts
,

1583 
D_FILE
);

1585 
D_NAME
:

1586 
xi
.
d«me
 = 
	`gë°r
(
vÆue
, &
d›ts
, 
D_NAME
);

1588 
D_SIZE
:

1589 
dsize
 = 
	`gë°r
(
vÆue
, &
d›ts
, 
D_SIZE
);

1591 
D_SUNIT
:

1592 
dsunô
 = 
	`gënum
(
vÆue
, &
d›ts
, 
D_SUNIT
);

1594 
D_SWIDTH
:

1595 
dswidth
 = 
	`gënum
(
vÆue
, &
d›ts
,

1596 
D_SWIDTH
);

1598 
D_SU
:

1599 
dsu
 = 
	`gënum
(
vÆue
, &
d›ts
, 
D_SU
);

1601 
D_SW
:

1602 
dsw
 = 
	`gënum
(
vÆue
, &
d›ts
, 
D_SW
);

1604 
D_NOALIGN
:

1605 
nodsÊag
 = 
	`gënum
(
vÆue
, &
d›ts
,

1606 
D_NOALIGN
);

1608 
D_SECTLOG
:

1609 
£˘‹log
 = 
	`gënum
(
vÆue
, &
d›ts
,

1610 
D_SECTLOG
);

1611 
£˘‹size
 = 1 << 
£˘‹log
;

1612 
¶Êag
 = 1;

1614 
D_SECTSIZE
:

1615 
£˘‹size
 = 
	`gënum
(
vÆue
, &
d›ts
,

1616 
D_SECTSIZE
);

1617 
£˘‹log
 =

1618 
	`libxfs_highbô32
(
£˘‹size
);

1619 
ssÊag
 = 1;

1621 
D_RTINHERIT
:

1622 
c
 = 
	`gënum
(
vÆue
, &
d›ts
, 
D_RTINHERIT
);

1623 i‡(
c
)

1624 
fsx
.
fsx_xÊags
 |=

1625 
XFS_DIFLAG_RTINHERIT
;

1627 
D_PROJINHERIT
:

1628 
fsx
.
fsx_¥ojid
 = 
	`gënum
(
vÆue
, &
d›ts
,

1629 
D_PROJINHERIT
);

1630 
fsx
.
fsx_xÊags
 |=

1631 
XFS_DIFLAG_PROJINHERIT
;

1633 
D_EXTSZINHERIT
:

1634 
fsx
.
fsx_extsize
 = 
	`gënum
(
vÆue
, &
d›ts
,

1635 
D_EXTSZINHERIT
);

1636 
fsx
.
fsx_xÊags
 |=

1637 
XFS_DIFLAG_EXTSZINHERIT
;

1640 
	`unknown
('d', 
vÆue
);

1645 
p
 = 
›èrg
;

1646 *
p
 != '\0') {

1647 **
sub›ts
 = (**)
i›ts
.subopts;

1648 *
vÆue
;

1650 
	`gësub›t
(&
p
, 
sub›ts
, &
vÆue
)) {

1651 
I_ALIGN
:

1652 
sb_„©
.
öode_Æign
 = 
	`gënum
(
vÆue
,

1653 &
i›ts
, 
I_ALIGN
);

1655 
I_LOG
:

1656 
öodñog
 = 
	`gënum
(
vÆue
, &
i›ts
, 
I_LOG
);

1657 
isize
 = 1 << 
öodñog
;

1658 
ûÊag
 = 1;

1660 
I_MAXPCT
:

1661 
imaxp˘
 = 
	`gënum
(
vÆue
, &
i›ts
,

1662 
I_MAXPCT
);

1663 
imÊag
 = 1;

1665 
I_PERBLOCK
:

1666 
ö›block
 = 
	`gënum
(
vÆue
, &
i›ts
,

1667 
I_PERBLOCK
);

1668 
ùÊag
 = 1;

1670 
I_SIZE
:

1671 
isize
 = 
	`gënum
(
vÆue
, &
i›ts
, 
I_SIZE
);

1672 
öodñog
 = 
	`libxfs_highbô32
(
isize
);

1673 
isÊag
 = 1;

1675 
I_ATTR
:

1676 
sb_„©
.
©å_vîsi⁄
 =

1677 
	`gënum
(
vÆue
, &
i›ts
, 
I_ATTR
);

1679 
I_PROJID32BIT
:

1680 
sb_„©
.
¥ojid16bô
 =

1681 !
	`gënum
(
vÆue
, &
i›ts
,

1682 
I_PROJID32BIT
);

1684 
I_SPINODES
:

1685 
sb_„©
.
•öodes
 = 
	`gënum
(
vÆue
,

1686 &
i›ts
, 
I_SPINODES
);

1689 
	`unknown
('i', 
vÆue
);

1694 
p
 = 
›èrg
;

1695 *
p
 != '\0') {

1696 **
sub›ts
 = (**)
l›ts
.subopts;

1697 *
vÆue
;

1699 
	`gësub›t
(&
p
, 
sub›ts
, &
vÆue
)) {

1700 
L_AGNUM
:

1701 
logagno
 = 
	`gënum
(
vÆue
, &
l›ts
, 
L_AGNUM
);

1702 
œÊag
 = 1;

1704 
L_FILE
:

1705 
xi
.
lisfûe
 = 
	`gënum
(
vÆue
, &
l›ts
,

1706 
L_FILE
);

1708 
L_INTERNAL
:

1709 
logöã∫Æ
 = 
	`gënum
(
vÆue
, &
l›ts
,

1710 
L_INTERNAL
);

1711 
liÊag
 = 1;

1713 
L_SU
:

1714 
lsu
 = 
	`gënum
(
vÆue
, &
l›ts
, 
L_SU
);

1715 
lsuÊag
 = 1;

1717 
L_SUNIT
:

1718 
lsunô
 = 
	`gënum
(
vÆue
, &
l›ts
, 
L_SUNIT
);

1719 
lsunôÊag
 = 1;

1721 
L_NAME
:

1722 
L_DEV
:

1723 
logfûe
 = 
	`gë°r
(
vÆue
, &
l›ts
, 
L_NAME
);

1724 
xi
.
log«me
 = 
logfûe
;

1725 
ldÊag
 = 1;

1726 
logöã∫Æ
 = 0;

1728 
L_VERSION
:

1729 
sb_„©
.
log_vîsi⁄
 =

1730 
	`gënum
(
vÆue
, &
l›ts
, 
L_VERSION
);

1731 
lvÊag
 = 1;

1733 
L_SIZE
:

1734 
logsize
 = 
	`gë°r
(
vÆue
, &
l›ts
, 
L_SIZE
);

1736 
L_SECTLOG
:

1737 
l£˘‹log
 = 
	`gënum
(
vÆue
, &
l›ts
,

1738 
L_SECTLOG
);

1739 
l£˘‹size
 = 1 << 
l£˘‹log
;

1740 
l¶Êag
 = 1;

1742 
L_SECTSIZE
:

1743 
l£˘‹size
 = 
	`gënum
(
vÆue
, &
l›ts
,

1744 
L_SECTSIZE
);

1745 
l£˘‹log
 =

1746 
	`libxfs_highbô32
(
l£˘‹size
);

1747 
lssÊag
 = 1;

1749 
L_LAZYSBCNTR
:

1750 
sb_„©
.
œzy_sb_cou¡îs
 =

1751 
	`gënum
(
vÆue
, &
l›ts
,

1752 
L_LAZYSBCNTR
);

1755 
	`unknown
('l', 
vÆue
);

1760 i‡(
	`°æí
(
›èrg
Ë> (
sbp
->
sb_‚ame
))

1761 
	`ûÀgÆ
(
›èrg
, "L");

1762 
œbñ
 = 
›èrg
;

1765 
p
 = 
›èrg
;

1766 *
p
 != '\0') {

1767 **
sub›ts
 = (**)
m›ts
.subopts;

1768 *
vÆue
;

1770 
	`gësub›t
(&
p
, 
sub›ts
, &
vÆue
)) {

1771 
M_CRC
:

1772 
sb_„©
.
¸cs_íabÀd
 =

1773 
	`gënum
(
vÆue
, &
m›ts
, 
M_CRC
);

1774 i‡(
sb_„©
.
¸cs_íabÀd
)

1775 
sb_„©
.
dú·y≥
 = 
åue
;

1777 
M_FINOBT
:

1778 
sb_„©
.
föobt
 = 
	`gënum
(

1779 
vÆue
, &
m›ts
, 
M_FINOBT
);

1781 
M_UUID
:

1782 i‡(!
vÆue
 || *value == '\0')

1783 
	`ªqvÆ
('m', 
sub›ts
, 
M_UUID
);

1784 i‡(
	`∂©f‹m_uuid_∑r£
(
vÆue
, &
uuid
))

1785 
	`ûÀgÆ
(
›èrg
, "m uuid");

1787 
M_RMAPBT
:

1788 
sb_„©
.
rm≠bt
 = 
	`gënum
(

1789 
vÆue
, &
m›ts
, 
M_RMAPBT
);

1791 
M_REFLINK
:

1792 
sb_„©
.
ªÊök
 = 
	`gënum
(

1793 
vÆue
, &
m›ts
, 
M_REFLINK
);

1796 
	`unknown
('m', 
vÆue
);

1801 
p
 = 
›èrg
;

1802 *
p
 != '\0') {

1803 **
sub›ts
 = (**)
n›ts
.subopts;

1804 *
vÆue
;

1806 
	`gësub›t
(&
p
, 
sub›ts
, &
vÆue
)) {

1807 
N_LOG
:

1808 
dúblocklog
 = 
	`gënum
(
vÆue
, &
n›ts
,

1809 
N_LOG
);

1810 
dúblocksize
 = 1 << 
dúblocklog
;

1811 
∆Êag
 = 1;

1813 
N_SIZE
:

1814 
dúblocksize
 = 
	`gënum
(
vÆue
, &
n›ts
,

1815 
N_SIZE
);

1816 
dúblocklog
 =

1817 
	`libxfs_highbô32
(
dúblocksize
);

1818 
nsÊag
 = 1;

1820 
N_VERSION
:

1821 
vÆue
 = 
	`gë°r
(vÆue, &
n›ts
, 
N_VERSION
);

1822 i‡(!
	`°rˇ£cmp
(
vÆue
, "ci")) {

1824 
sb_„©
.
nci
 = 
åue
;

1826 
sb_„©
.
dú_vîsi⁄
 =

1827 
	`gënum
(
vÆue
, &
n›ts
,

1828 
N_VERSION
);

1830 
nvÊag
 = 1;

1832 
N_FTYPE
:

1833 
sb_„©
.
dú·y≥
 = 
	`gënum
(
vÆue
, &
n›ts
,

1834 
N_FTYPE
);

1837 
	`unknown
('n', 
vÆue
);

1842 
NÊag
 = 1;

1845 
disˇrd
 = 0;

1848 i‡(
¥Ÿofûe
)

1849 
	`ª•ec
('p', 
NULL
, 0);

1850 
¥Ÿofûe
 = 
›èrg
;

1853 
qÊag
 = 1;

1856 
p
 = 
›èrg
;

1857 *
p
 != '\0') {

1858 **
sub›ts
 = (**)
r›ts
.subopts;

1859 *
vÆue
;

1861 
	`gësub›t
(&
p
, 
sub›ts
, &
vÆue
)) {

1862 
R_EXTSIZE
:

1863 
πextsize
 = 
	`gë°r
(
vÆue
, &
r›ts
,

1864 
R_EXTSIZE
);

1866 
R_FILE
:

1867 
xi
.
risfûe
 = 
	`gënum
(
vÆue
, &
r›ts
,

1868 
R_FILE
);

1870 
R_NAME
:

1871 
R_DEV
:

1872 
xi
.
π«me
 = 
	`gë°r
(
vÆue
, &
r›ts
,

1873 
R_NAME
);

1875 
R_SIZE
:

1876 
πsize
 = 
	`gë°r
(
vÆue
, &
r›ts
, 
R_SIZE
);

1878 
R_NOALIGN
:

1879 
n‹sÊag
 = 
	`gënum
(
vÆue
, &
r›ts
,

1880 
R_NOALIGN
);

1883 
	`unknown
('r', 
vÆue
);

1888 
p
 = 
›èrg
;

1889 *
p
 != '\0') {

1890 **
sub›ts
 = (**)
s›ts
.subopts;

1891 *
vÆue
;

1893 
	`gësub›t
(&
p
, 
sub›ts
, &
vÆue
)) {

1894 
S_LOG
:

1895 
S_SECTLOG
:

1896 i‡(
lssÊag
)

1897 
	`c⁄Êi˘
('s', 
sub›ts
,

1898 
S_SECTSIZE
, 
S_SECTLOG
);

1899 
£˘‹log
 = 
	`gënum
(
vÆue
, &
s›ts
,

1900 
S_SECTLOG
);

1901 
l£˘‹log
 = 
£˘‹log
;

1902 
£˘‹size
 = 1 << 
£˘‹log
;

1903 
l£˘‹size
 = 
£˘‹size
;

1904 
l¶Êag
 = 
¶Êag
 = 1;

1906 
S_SIZE
:

1907 
S_SECTSIZE
:

1908 i‡(
l¶Êag
)

1909 
	`c⁄Êi˘
('s', 
sub›ts
, 
S_SECTLOG
,

1910 
S_SECTSIZE
);

1911 
£˘‹size
 = 
	`gënum
(
vÆue
, &
s›ts
,

1912 
S_SECTSIZE
);

1913 
l£˘‹size
 = 
£˘‹size
;

1914 
£˘‹log
 =

1915 
	`libxfs_highbô32
(
£˘‹size
);

1916 
l£˘‹log
 = 
£˘‹log
;

1917 
lssÊag
 = 
ssÊag
 = 1;

1920 
	`unknown
('s', 
vÆue
);

1925 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
¥og«me
, 
VERSION
);

1926 
	`exô
(0);

1928 
	`unknown
(
›t›t
, "");

1931 i‡(
¨gc
 - 
›töd
 > 1) {

1932 
	`Ârötf
(
°dîr
, 
	`_
("extraárguments\n"));

1933 
	`ußge
();

1934 } i‡(
¨gc
 - 
›töd
 == 1) {

1935 
dfûe
 = 
xi
.
vﬁ«me
 = 
	`gë°r
(
¨gv
[
›töd
], &
d›ts
, 
D_NAME
);

1937 
dfûe
 = 
xi
.
d«me
;

1944 i‡(!
blÊag
 && !
bsÊag
) {

1945 
blocklog
 = 
XFS_DFL_BLOCKSIZE_LOG
;

1946 
blocksize
 = 1 << 
XFS_DFL_BLOCKSIZE_LOG
;

1948 i‡(
blocksize
 < 
XFS_MIN_BLOCKSIZE
 || blocksizê> 
XFS_MAX_BLOCKSIZE
) {

1949 
	`Ârötf
(
°dîr
, 
	`_
("ûÀgÆ block sizê%d\n"), 
blocksize
);

1950 
	`ußge
();

1952 i‡(
sb_„©
.
¸cs_íabÀd
 && 
blocksize
 < 
XFS_MIN_CRC_BLOCKSIZE
) {

1953 
	`Ârötf
(
°dîr
,

1954 
	`_
("Minimum block size for CRCÉnabled filesystems is %d bytes.\n"),

1955 
XFS_MIN_CRC_BLOCKSIZE
);

1956 
	`ußge
();

1958 i‡(
sb_„©
.
¸cs_íabÀd
 && !sb_„©.
dú·y≥
) {

1959 
	`Ârötf
(
°dîr
, 
	`_
("cannot disable ftype with crcsÉnabled\n"));

1960 
	`ußge
();

1963 i‡(!
¶Êag
 && !
ssÊag
) {

1964 
£˘‹log
 = 
XFS_MIN_SECTORSIZE_LOG
;

1965 
£˘‹size
 = 
XFS_MIN_SECTORSIZE
;

1967 i‡(!
l¶Êag
 && !
lssÊag
) {

1968 
l£˘‹log
 = 
£˘‹log
;

1969 
l£˘‹size
 = 
£˘‹size
;

1979 
	`check_devi˚_ty≥
(
dfûe
, &
xi
.
disfûe
, !
dsize
, !dfile,

1980 
NÊag
 ? 
NULL
 : &
xi
.
d¸ót
, 
f‹˚_ovîwrôe
, "d");

1981 i‡(!
logöã∫Æ
)

1982 
	`check_devi˚_ty≥
(
xi
.
log«me
, &xi.
lisfûe
, !
logsize
, !xi.logname,

1983 
NÊag
 ? 
NULL
 : &
xi
.
l¸ót
,

1984 
f‹˚_ovîwrôe
, "l");

1985 i‡(
xi
.
π«me
)

1986 
	`check_devi˚_ty≥
(
xi
.
π«me
, &xi.
risfûe
, !
πsize
, !xi.rtname,

1987 
NÊag
 ? 
NULL
 : &
xi
.
r¸ót
,

1988 
f‹˚_ovîwrôe
, "r");

1989 i‡(
xi
.
disfûe
 || xi.
lisfûe
 || xi.
risfûe
)

1990 
xi
.
isdúe˘
 = 0;

1992 
	`mem£t
(&
·
, 0, (ft));

1993 
	`gë_t›ﬁogy
(&
xi
, &
·
, 
f‹˚_ovîwrôe
);

1995 i‡(!
ssÊag
) {

2005 i‡(!
·
.
p£˘‹size
)

2006 
·
.
p£˘‹size
 = ft.
l£˘‹size
;

2008 
£˘‹size
 = 
·
.
p£˘‹size
 ? ft.psectorsize :

2009 
XFS_MIN_SECTORSIZE
;

2011 i‡((
blocksize
 < 
£˘‹size
Ë&& (blocksizê>
·
.
l£˘‹size
)) {

2012 
	`Ârötf
(
°dîr
,

2013 
	`_
("specified blocksize %d isÜessÅhan deviceÖhysical sector size %d\n"),

2014 
blocksize
, 
·
.
p£˘‹size
);

2015 
	`Ârötf
(
°dîr
,

2016 
	`_
("switchingÅoÜogical sector size %d\n"),

2017 
·
.
l£˘‹size
);

2018 
£˘‹size
 = 
·
.
l£˘‹size
 ? ft.lsectorsize :

2019 
XFS_MIN_SECTORSIZE
;

2023 i‡(!
ssÊag
) {

2024 
£˘‹log
 = 
	`libxfs_highbô32
(
£˘‹size
);

2025 i‡(
logöã∫Æ
) {

2026 
l£˘‹size
 = 
£˘‹size
;

2027 
l£˘‹log
 = 
£˘‹log
;

2031 i‡(
£˘‹size
 < 
XFS_MIN_SECTORSIZE
 ||

2032 
£˘‹size
 > 
XFS_MAX_SECTORSIZE
 || se˘‹sizê> 
blocksize
) {

2033 i‡(
ssÊag
)

2034 
	`Ârötf
(
°dîr
, 
	`_
("ûÀgÆ se˘‹ sizê%d\n"), 
£˘‹size
);

2036 
	`Ârötf
(
°dîr
,

2037 
	`_
("block size %d cannot be smallerÅhanÜogical sector size %d\n"),

2038 
blocksize
, 
·
.
l£˘‹size
);

2039 
	`ußge
();

2041 i‡(
£˘‹size
 < 
·
.
l£˘‹size
) {

2042 
	`Ârötf
(
°dîr
, 
	`_
("illegal sector size %d; hw sector is %d\n"),

2043 
£˘‹size
, 
·
.
l£˘‹size
);

2044 
	`ußge
();

2046 i‡(
l£˘‹size
 < 
XFS_MIN_SECTORSIZE
 ||

2047 
l£˘‹size
 > 
XFS_MAX_SECTORSIZE
 ||Ü£˘‹sizê> 
blocksize
) {

2048 
	`Ârötf
(
°dîr
, 
	`_
("ûÀgÆÜog se˘‹ sizê%d\n"), 
l£˘‹size
);

2049 
	`ußge
();

2050 } i‡(
l£˘‹size
 > 
XFS_MIN_SECTORSIZE
 && !
lsu
 && !
lsunô
) {

2051 
lsu
 = 
blocksize
;

2052 
sb_„©
.
log_vîsi⁄
 = 2;

2060 i‡(
sb_„©
.
¸cs_íabÀd
) {

2062 i‡((
isÊag
 || 
ûÊag
Ë&& 
öodñog
 < 
XFS_DINODE_DFL_CRC_LOG
) {

2063 
	`Ârötf
(
°dîr
,

2064 
	`_
("Minimum inode size for CRCs is %d bytes\n"),

2065 1 << 
XFS_DINODE_DFL_CRC_LOG
);

2066 
	`ußge
();

2070 i‡(!
sb_„©
.
öode_Æign
) {

2071 
	`Ârötf
(
°dîr
,

2072 
	`_
("Inodesálwaysáligned for CRCÉnabled filesytems\n"));

2073 
	`ußge
();

2077 i‡(!
sb_„©
.
œzy_sb_cou¡îs
) {

2078 
	`Ârötf
(
°dîr
,

2079 
	`_
("Lazy superblock countedálwaysÉnabled for CRCÉnabled filesytems\n"));

2080 
	`ußge
();

2084 i‡(
sb_„©
.
log_vîsi⁄
 != 2) {

2085 
	`Ârötf
(
°dîr
,

2086 
	`_
("V2ÜogsálwaysÉnabled for CRCÉnabled filesytems\n"));

2087 
	`ußge
();

2091 i‡(
sb_„©
.
©å_vîsi⁄
 != 2) {

2092 
	`Ârötf
(
°dîr
,

2093 
	`_
("V2áttribute formatálwaysÉnabled on CRCÉnabled filesytems\n"));

2094 
	`ußge
();

2099 i‡(
sb_„©
.
¥ojid16bô
) {

2100 
	`Ârötf
(
°dîr
,

2101 
	`_
("32 bit Project IDsálwaysÉnabled on CRCÉnabled filesytems\n"));

2102 
	`ußge
();

2114 i‡(
sb_„©
.
föobt
 && 
m›ts
.
sub›t_∑øms
[
M_FINOBT
].
£í
) {

2115 
	`Ârötf
(
°dîr
,

2116 
	`_
("finobtÇot supported without CRC support\n"));

2117 
	`ußge
();

2119 
sb_„©
.
föobt
 = 0;

2121 i‡(
sb_„©
.
•öodes
) {

2122 
	`Ârötf
(
°dîr
,

2123 
	`_
("sparse inodesÇot supported without CRC support\n"));

2124 
	`ußge
();

2126 
sb_„©
.
•öodes
 = 0;

2128 i‡(
sb_„©
.
rm≠bt
) {

2129 
	`Ârötf
(
°dîr
,

2130 
	`_
("rmapbtÇot supported without CRC support\n"));

2131 
	`ußge
();

2133 
sb_„©
.
rm≠bt
 = 
Ál£
;

2135 i‡(
sb_„©
.
ªÊök
) {

2136 
	`Ârötf
(
°dîr
,

2137 
	`_
("reflinkÇot supported without CRC support\n"));

2138 
	`ußge
();

2140 
sb_„©
.
ªÊök
 = 
Ál£
;

2144 i‡(
sb_„©
.
rm≠bt
 && 
xi
.
π«me
) {

2145 
	`Ârötf
(
°dîr
,

2146 
	`_
("rmapbtÇot supported withÑealtime devices\n"));

2147 
	`ußge
();

2148 
sb_„©
.
rm≠bt
 = 
Ál£
;

2151 i‡(
nsÊag
 || 
∆Êag
) {

2152 i‡(
dúblocksize
 < 
blocksize
 ||

2153 
dúblocksize
 > 
XFS_MAX_BLOCKSIZE
) {

2154 
	`Ârötf
(
°dîr
, 
	`_
("illegal directory block size %d\n"),

2155 
dúblocksize
);

2156 
	`ußge
();

2159 i‡(
blocksize
 < (1 << 
XFS_MIN_REC_DIRSIZE
))

2160 
dúblocklog
 = 
XFS_MIN_REC_DIRSIZE
;

2162 
dúblocklog
 = 
blocklog
;

2163 
dúblocksize
 = 1 << 
dúblocklog
;

2167 i‡(
dsize
) {

2168 
__uöt64_t
 
dbyãs
;

2170 
dbyãs
 = 
	`gënum
(
dsize
, &
d›ts
, 
D_SIZE
);

2171 i‡(
dbyãs
 % 
XFS_MIN_BLOCKSIZE
) {

2172 
	`Ârötf
(
°dîr
,

2173 
	`_
("illegal dataÜength %lld,Çotá multiple of %d\n"),

2174 ()
dbyãs
, 
XFS_MIN_BLOCKSIZE
);

2175 
	`ußge
();

2177 
dblocks
 = (
xfs_rfsblock_t
)(
dbyãs
 >> 
blocklog
);

2178 i‡(
dbyãs
 % 
blocksize
)

2179 
	`Ârötf
(
°dîr
, 
	`_
("warning: "

2181 ()
dbyãs
, 
blocksize
,

2182 ()(
dblocks
 << 
blocklog
));

2184 i‡(
ùÊag
) {

2185 
öodñog
 = 
blocklog
 - 
	`libxfs_highbô32
(
ö›block
);

2186 
isize
 = 1 << 
öodñog
;

2187 } i‡(!
ûÊag
 && !
isÊag
) {

2188 
öodñog
 = 
sb_„©
.
¸cs_íabÀd
 ? 
XFS_DINODE_DFL_CRC_LOG


2189 : 
XFS_DINODE_DFL_LOG
;

2190 
isize
 = 1 << 
öodñog
;

2192 i‡(
sb_„©
.
¸cs_íabÀd
 && 
öodñog
 < 
XFS_DINODE_DFL_CRC_LOG
) {

2193 
	`Ârötf
(
°dîr
,

2194 
	`_
("Minimum inode size for CRCs is %d bytes\n"),

2195 1 << 
XFS_DINODE_DFL_CRC_LOG
);

2196 
	`ußge
();

2199 i‡(
logsize
) {

2200 
__uöt64_t
 
logbyãs
;

2202 
logbyãs
 = 
	`gënum
(
logsize
, &
l›ts
, 
L_SIZE
);

2203 i‡(
logbyãs
 % 
XFS_MIN_BLOCKSIZE
) {

2204 
	`Ârötf
(
°dîr
,

2205 
	`_
("illegalÜogÜength %lld,Çotá multiple of %d\n"),

2206 ()
logbyãs
, 
XFS_MIN_BLOCKSIZE
);

2207 
	`ußge
();

2209 
logblocks
 = (
xfs_rfsblock_t
)(
logbyãs
 >> 
blocklog
);

2210 i‡(
logbyãs
 % 
blocksize
)

2211 
	`Ârötf
(
°dîr
,

2212 
	`_
("warning:ÜogÜength %lldÇotá multiple of %d,ÅruncatedÅo %lld\n"),

2213 ()
logbyãs
, 
blocksize
,

2214 ()(
logblocks
 << 
blocklog
));

2216 i‡(
πsize
) {

2217 
__uöt64_t
 
πbyãs
;

2219 
πbyãs
 = 
	`gënum
(
πsize
, &
r›ts
, 
R_SIZE
);

2220 i‡(
πbyãs
 % 
XFS_MIN_BLOCKSIZE
) {

2221 
	`Ârötf
(
°dîr
,

2222 
	`_
("illegalÑtÜength %lld,Çotá multiple of %d\n"),

2223 ()
πbyãs
, 
XFS_MIN_BLOCKSIZE
);

2224 
	`ußge
();

2226 
πblocks
 = (
xfs_rfsblock_t
)(
πbyãs
 >> 
blocklog
);

2227 i‡(
πbyãs
 % 
blocksize
)

2228 
	`Ârötf
(
°dîr
,

2229 
	`_
("warning:ÑtÜength %lldÇotá multiple of %d,ÅruncatedÅo %lld\n"),

2230 ()
πbyãs
, 
blocksize
,

2231 ()(
πblocks
 << 
blocklog
));

2236 i‡(
πextsize
) {

2237 
__uöt64_t
 
πextbyãs
;

2239 
πextbyãs
 = 
	`gënum
(
πextsize
, &
r›ts
, 
R_EXTSIZE
);

2240 i‡(
πextbyãs
 % 
blocksize
) {

2241 
	`Ârötf
(
°dîr
,

2242 
	`_
("illegalÑtÉxtent size %lld,Çotá multiple of %d\n"),

2243 ()
πextbyãs
, 
blocksize
);

2244 
	`ußge
();

2246 
πextblocks
 = (
xfs_exéí_t
)(
πextbyãs
 >> 
blocklog
);

2253 
__uöt64_t
 
rswidth
;

2254 
__uöt64_t
 
πextbyãs
;

2256 i‡(!
n‹sÊag
 && !
xi
.
risfûe
 && !(!
πsize
 && xi.
disfûe
))

2257 
rswidth
 = 
·
.
πswidth
;

2259 
rswidth
 = 0;

2262 i‡(!
n‹sÊag
 && 
rswidth
 && !(
	`BBTOB
‘swidthË% 
blocksize
)) {

2263 
rswidth
 = 
	`DTOBT
(rswidth);

2264 
πextbyãs
 = 
rswidth
 << 
blocklog
;

2265 i‡(
XFS_MIN_RTEXTSIZE
 <
πextbyãs
 &&

2266 (
πextbyãs
 <
XFS_MAX_RTEXTSIZE
)) {

2267 
πextblocks
 = 
rswidth
;

2270 i‡(!
πextblocks
) {

2271 
πextblocks
 = (
blocksize
 < 
XFS_MIN_RTEXTSIZE
) ?

2272 
XFS_MIN_RTEXTSIZE
 >> 
blocklog
 : 1;

2275 
	`ASSERT
(
πextblocks
);

2280 i‡(
isize
 > 
blocksize
 / 
XFS_MIN_INODE_PERBLOCK
 ||

2281 
isize
 < 
XFS_DINODE_MIN_SIZE
 ||

2282 
isize
 > 
XFS_DINODE_MAX_SIZE
) {

2283 
maxsz
;

2285 
	`Ârötf
(
°dîr
, 
	`_
("ûÀgÆ inodêsizê%d\n"), 
isize
);

2286 
maxsz
 = 
	`MIN
(
blocksize
 / 
XFS_MIN_INODE_PERBLOCK
,

2287 
XFS_DINODE_MAX_SIZE
);

2288 i‡(
XFS_DINODE_MIN_SIZE
 =
maxsz
)

2289 
	`Ârötf
(
°dîr
,

2290 
	`_
("allowable inode size with %d byte blocks is %d\n"),

2291 
blocksize
, 
XFS_DINODE_MIN_SIZE
);

2293 
	`Ârötf
(
°dîr
,

2294 
	`_
("allowable inode size with %d byte blocks is between %dánd %d\n"),

2295 
blocksize
, 
XFS_DINODE_MIN_SIZE
, 
maxsz
);

2296 
	`exô
(1);

2300 i‡((
lsu
 || 
lsunô
Ë&& 
sb_„©
.
log_vîsi⁄
 == 1) {

2301 
	`Ârötf
(
°dîr
,

2302 
	`_
("log stripe unit specified, using v2Üogs\n"));

2303 
sb_„©
.
log_vîsi⁄
 = 2;

2306 
	`ˇlc_°rùe_Á˘‹s
(
dsu
, 
dsw
, 
£˘‹size
, 
lsu
, 
l£˘‹size
,

2307 &
dsunô
, &
dswidth
, &
lsunô
);

2309 
xi
.
£tblksize
 = 
£˘‹size
;

2314 i‡(!
	`libxfs_öô
(&
xi
))

2315 
	`ußge
();

2316 i‡(!
xi
.
ddev
) {

2317 
	`Ârötf
(
°dîr
, 
	`_
("no deviceÇame given inárgumentÜist\n"));

2318 
	`ußge
();

2332 
£˘‹_mask
 = (
__uöt64_t
)-1 << (
	`MAX
(
£˘‹log
, 10Ë- 
BBSHIFT
);

2333 
xi
.
dsize
 &
£˘‹_mask
;

2334 
xi
.
πsize
 &
£˘‹_mask
;

2335 
xi
.
logBBsize
 &(
__uöt64_t
)-1 << (
	`MAX
(
l£˘‹log
, 10Ë- 
BBSHIFT
);

2339 i‡(
disˇrd
 && !
NÊag
) {

2340 i‡(!
xi
.
disfûe
)

2341 
	`disˇrd_blocks
(
xi
.
ddev
, xi.
dsize
);

2342 i‡(
xi
.
πdev
 && !xi.
risfûe
)

2343 
	`disˇrd_blocks
(
xi
.
πdev
, xi.
πsize
);

2344 i‡(
xi
.
logdev
 && xi.logdev !xi.
ddev
 && !xi.
lisfûe
)

2345 
	`disˇrd_blocks
(
xi
.
logdev
, xi.
logBBsize
);

2348 i‡(!
liÊag
 && !
ldÊag
)

2349 
logöã∫Æ
 = 
xi
.
logdev
 == 0;

2350 i‡(
xi
.
log«me
)

2351 
logfûe
 = 
xi
.
log«me
;

2352 i‡(
logöã∫Æ
)

2353 
logfûe
 = 
	`_
("internalÜog");

2354 i‡(
xi
.
vﬁ«me
 && xi.
logdev
)

2355 
logfûe
 = 
	`_
("volumeÜog");

2356 i‡(!
ldÊag
) {

2357 
	`Ârötf
(
°dîr
, 
	`_
("noÜog subvolume or internalÜog\n"));

2358 
	`ußge
();

2360 i‡(
xi
.
π«me
)

2361 
πfûe
 = 
xi
.
π«me
;

2363 i‡(
xi
.
vﬁ«me
 && xi.
πdev
)

2364 
πfûe
 = 
	`_
("volumeÑt");

2365 i‡(!
xi
.
πdev
)

2366 
πfûe
 = 
	`_
("none");

2367 i‡(
dsize
 && 
xi
.dsizê> 0 && 
dblocks
 > 
	`DTOBT
(xi.dsize)) {

2368 
	`Ârötf
(
°dîr
,

2369 
	`_
("size %s specified for data subvolume isÅooÜarge, "

2371 
dsize
, ()
	`DTOBT
(
xi
.dsize));

2372 
	`ußge
();

2373 } i‡(!
dsize
 && 
xi
.dsize > 0)

2374 
dblocks
 = 
	`DTOBT
(
xi
.
dsize
);

2375 i‡(!
dsize
) {

2376 
	`Ârötf
(
°dîr
, 
	`_
("can't get size of data subvolume\n"));

2377 
	`ußge
();

2379 i‡(
dblocks
 < 
XFS_MIN_DATA_BLOCKS
) {

2380 
	`Ârötf
(
°dîr
,

2381 
	`_
("size %lld of data subvolume isÅoo small, minimum %d blocks\n"),

2382 ()
dblocks
, 
XFS_MIN_DATA_BLOCKS
);

2383 
	`ußge
();

2386 i‡(
logöã∫Æ
 && 
xi
.
logdev
) {

2387 
	`Ârötf
(
°dîr
,

2388 
	`_
("can't have bothÉxternalánd internalÜogs\n"));

2389 
	`ußge
();

2390 } i‡(
logöã∫Æ
 && 
£˘‹size
 !
l£˘‹size
) {

2391 
	`Ârötf
(
°dîr
,

2392 
	`_
("dataándÜog sector sizes must beÉqual for internalÜogs\n"));

2393 
	`ußge
();

2396 i‡(
xi
.
dbsize
 > 
£˘‹size
) {

2397 
	`Ârötf
(
°dîr
, 
	`_
(

2400 
£˘‹size
, 
xi
.
dbsize
);

2402 i‡(!
logöã∫Æ
 && 
xi
.
lbsize
 > 
l£˘‹size
) {

2403 
	`Ârötf
(
°dîr
, 
	`_
(

2406 
l£˘‹size
, 
xi
.
lbsize
);

2408 i‡(
πsize
 && 
xi
.πsizê> 0 && xi.
πbsize
 > 
£˘‹size
) {

2409 
	`Ârötf
(
°dîr
, 
	`_
(

2412 
£˘‹size
, 
xi
.
πbsize
);

2415 i‡(
πsize
 && 
xi
.πsizê> 0 && 
πblocks
 > 
	`DTOBT
(xi.rtsize)) {

2416 
	`Ârötf
(
°dîr
,

2417 
	`_
("size %s specified forÑt subvolume isÅooÜarge, "

2419 
πsize
, ()
	`DTOBT
(
xi
.rtsize));

2420 
	`ußge
();

2421 } i‡(!
πsize
 && 
xi
.rtsize > 0)

2422 
πblocks
 = 
	`DTOBT
(
xi
.
πsize
);

2423 i‡(
πsize
 && !
xi
.
πdev
) {

2424 
	`Ârötf
(
°dîr
,

2425 
	`_
("size specified forÇon-existentÑt subvolume\n"));

2426 
	`ußge
();

2428 i‡(
xi
.
πdev
) {

2429 
πexã¡s
 = 
πblocks
 / 
πextblocks
;

2430 
nbmblocks
 = (
xfs_exéí_t
)
	`howm™y
(
πexã¡s
, 
NBBY
 * 
blocksize
);

2432 
πexã¡s
 = 
πblocks
 = 0;

2433 
nbmblocks
 = 0;

2436 i‡(!
nodsÊag
) {

2437 i‡(
dsunô
) {

2438 i‡(
·
.
dsunô
 && ft.dsunit != dsunit) {

2439 
	`Ârötf
(
°dîr
,

2440 
	`_
("%s: Specified data stripe unit %d "

2443 
¥og«me
, 
dsunô
, 
·
.dsunit);

2445 i‡(
·
.
dswidth
 && ft.dswidth != dswidth) {

2446 
	`Ârötf
(
°dîr
,

2447 
	`_
("%s: Specified data stripe width %d "

2450 
¥og«me
, 
dswidth
, 
·
.dswidth);

2453 
dsunô
 = 
·
.dsunit;

2454 
dswidth
 = 
·
.dswidth;

2455 
nodsÊag
 = 1;

2459 i‡(
dasize
) {

2463 i‡(
agsize
 % 
blocksize
) {

2464 
	`Ârötf
(
°dîr
,

2465 
	`_
("agsize (%lld)Çotá multiple of fs blk size (%d)\n"),

2466 ()
agsize
, 
blocksize
);

2467 
	`ußge
();

2469 
agsize
 /
blocksize
;

2470 
agcou¡
 = 
dblocks
 / 
agsize
 + (dblocks %ágsize != 0);

2472 } i‡(
daÊag
) {

2473 
agsize
 = 
dblocks
 / 
agcou¡
 + (dblocks %ágcount != 0);

2475 
	`ˇlc_deÁu…_ag_geomëry
(
blocklog
, 
dblocks
,

2476 
dsunô
 | 
dswidth
, &
agsize
, &
agcou¡
);

2483 i‡(
dsunô
 && !(
	`BBTOB
(dsunôË% 
blocksize
) &&

2484 
dswidth
 && !(
	`BBTOB
(dswidthË% 
blocksize
)) {

2487 
dsunô
 = 
	`DTOBT
(dsunit);

2488 
dswidth
 = 
	`DTOBT
(dswidth);

2493 i‡((
agsize
 % 
dsunô
) != 0) {

2499 
tmp_agsize
 = ((
agsize
 + (
dsunô
 - 1))/ dsunit) * dsunit;

2504 i‡(
tmp_agsize
 > 
	`XFS_AG_MAX_BLOCKS
(
blocklog
))

2505 
tmp_agsize
 = ((
agsize
Ë/ 
dsunô
) * dsunit;

2507 i‡((
tmp_agsize
 >
	`XFS_AG_MIN_BLOCKS
(
blocklog
)) &&

2508 (
tmp_agsize
 <
	`XFS_AG_MAX_BLOCKS
(
blocklog
))) {

2509 
agsize
 = 
tmp_agsize
;

2510 i‡(!
daÊag
)

2511 
agcou¡
 = 
dblocks
/
agsize
 +

2512 (
dblocks
 % 
agsize
 != 0);

2513 i‡(
dasize
)

2514 
	`Ârötf
(
°dîr
,

2515 
	`_
("agsizeÑoundedÅo %lld, swidth = %d\n"),

2516 ()
agsize
, 
dswidth
);

2518 i‡(
nodsÊag
) {

2519 
dsunô
 = 
dswidth
 = 0;

2525 
	`vÆid©e_ag_geomëry
(
blocklog
, 
dblocks
,

2526 
agsize
, 
agcou¡
);

2527 
	`exô
(1);

2531 i‡(
dswidth
 && ((
agsize
 % dswidthË=0Ë&& (
agcou¡
 > 1)) {

2537 
tmp_agsize
 = 
agsize
 - 
dsunô
;

2538 i‡(
tmp_agsize
 < 
	`XFS_AG_MIN_BLOCKS
(
blocklog
)) {

2539 
tmp_agsize
 = 
agsize
 + 
dsunô
;

2540 i‡(
dblocks
 < 
agsize
) {

2542 
tmp_agsize
 = 
agsize
;

2545 i‡(
daÊag
 || 
dasize
) {

2546 
	`Ârötf
(
°dîr
, 
	`_
(

2550 ()
tmp_agsize
);

2552 
agsize
 = 
tmp_agsize
;

2553 
agcou¡
 = 
dblocks
/
agsize
 + (dblocks %ágsize != 0);

2558 i‡–
dblocks
 % 
agsize
 != 0 &&

2559 (
dblocks
 % 
agsize
 <

2560 
	`XFS_AG_MIN_BLOCKS
(
blocklog
))) {

2561 
dblocks
 = (
xfs_rfsblock_t
)((
agcou¡
 - 1Ë* 
agsize
);

2562 
agcou¡
--;

2563 
	`ASSERT
(
agcou¡
 != 0);

2568 i‡(
nodsÊag
)

2569 
dsunô
 = 
dswidth
 = 0;

2571 
	`Ârötf
(
°dîr
,

2572 
	`_
("%s: Stripe unit(%d) or stripe width(%d) is "

2574 
¥og«me
, 
	`BBTOB
(
dsunô
), BBTOB(
dswidth
),

2575 
blocksize
);

2576 
	`exô
(1);

2584 i‡–
dblocks
 % 
agsize
 != 0 &&

2585 (
dblocks
 % 
agsize
 < 
	`XFS_AG_MIN_BLOCKS
(
blocklog
))) {

2586 
	`ASSERT
(!
daÊag
);

2587 
dblocks
 = (
xfs_rfsblock_t
)((
agcou¡
 - 1Ë* 
agsize
);

2588 
agcou¡
--;

2589 
	`ASSERT
(
agcou¡
 != 0);

2592 
	`vÆid©e_ag_geomëry
(
blocklog
, 
dblocks
, 
agsize
, 
agcou¡
);

2594 i‡(!
imÊag
)

2595 
imaxp˘
 = 
	`ˇlc_deÁu…_imaxp˘
(
blocklog
, 
dblocks
);

2601 i‡(
lsunô
) {

2603 
lsunô
 = 
	`DTOBT
(lsunit);

2604 } i‡(
sb_„©
.
log_vîsi⁄
 =2 && 
logöã∫Æ
 && 
dsunô
) {

2606 
lsunô
 = 
dsunô
;

2609 i‡(
sb_„©
.
log_vîsi⁄
 =2 && (
lsunô
 * 
blocksize
) > 256 * 1024) {

2611 i‡(
lsuÊag
 || 
lsunôÊag
) {

2612 
	`Ârötf
(
°dîr
,

2613 
	`_
("log stripe unit (%d bytes) isÅooÜarge (maximum is 256KiB)\n"),

2614 (
lsunô
 * 
blocksize
));

2615 
	`Ârötf
(
°dîr
,

2616 
	`_
("log stripe unitádjustedÅo 32KiB\n"));

2618 
lsunô
 = (32 * 1024Ë>> 
blocklog
;

2621 
mö_logblocks
 = 
	`max_å™s_ªs
(
agsize
,

2622 
sb_„©
.
¸cs_íabÀd
, sb_„©.
dú_vîsi⁄
,

2623 
£˘‹log
, 
blocklog
, 
öodñog
, 
dúblocklog
,

2624 
sb_„©
.
log_vîsi⁄
, 
lsunô
, sb_„©.
föobt
,

2625 
sb_„©
.
rm≠bt
, sb_„©.
ªÊök
);

2626 
	`ASSERT
(
mö_logblocks
);

2627 
mö_logblocks
 = 
	`MAX
(
XFS_MIN_LOG_BLOCKS
, min_logblocks);

2628 i‡(!
logsize
 && 
dblocks
 >(1024*1024*1024Ë>> 
blocklog
)

2629 
mö_logblocks
 = 
	`MAX
(mö_logblocks, 
XFS_MIN_LOG_BYTES
>>
blocklog
);

2630 i‡(
logsize
 && 
xi
.
logBBsize
 > 0 && 
logblocks
 > 
	`DTOBT
(xi.logBBsize)) {

2631 
	`Ârötf
(
°dîr
,

2632 
	`_
("size %s specified forÜog subvolume isÅooÜarge, maximum is %lld blocks\n"),

2633 
logsize
, ()
	`DTOBT
(
xi
.
logBBsize
));

2634 
	`ußge
();

2635 } i‡(!
logsize
 && 
xi
.
logBBsize
 > 0) {

2636 
logblocks
 = 
	`DTOBT
(
xi
.
logBBsize
);

2637 } i‡(
logsize
 && !
xi
.
logdev
 && !
logöã∫Æ
) {

2638 
	`Ârötf
(
°dîr
,

2639 
	`_
("size specified forÇon-existentÜog subvolume\n"));

2640 
	`ußge
();

2641 } i‡(
logöã∫Æ
 && 
logsize
 && 
logblocks
 >
dblocks
) {

2642 
	`Ârötf
(
°dîr
, 
	`_
("size %lldÅooÜarge for internalÜog\n"),

2643 ()
logblocks
);

2644 
	`ußge
();

2645 } i‡(!
logöã∫Æ
 && !
xi
.
logdev
) {

2646 
logblocks
 = 0;

2647 } i‡(
logöã∫Æ
 && !
logsize
) {

2649 i‡(
dblocks
 < 
	`GIGABYTES
(1, 
blocklog
)) {

2651 
logblocks
 = 
mö_logblocks
;

2652 } i‡(
dblocks
 < 
	`GIGABYTES
(16, 
blocklog
)) {

2659 
logblocks
 = 
	`MIN
(
XFS_MIN_LOG_BYTES
 >> 
blocklog
,

2660 
mö_logblocks
 * 
XFS_DFL_LOG_FACTOR
);

2668 
logblocks
 = (
dblocks
 << 
blocklog
) / 2048;

2669 
logblocks
 =Üogblock†>> 
blocklog
;

2673 
logblocks
 = 
	`MAX
(
mö_logblocks
,Üogblocks);

2676 i‡(
logblocks
 >
agsize
)

2677 
logblocks
 = 
mö_logblocks
;

2680 
logblocks
 = 
	`MIN
÷ogblocks, 
XFS_MAX_LOG_BLOCKS
);

2681 i‡((
logblocks
 << 
blocklog
Ë> 
XFS_MAX_LOG_BYTES
)

2682 
logblocks
 = 
XFS_MAX_LOG_BYTES
 >> 
blocklog
;

2685 
	`vÆid©e_log_size
(
logblocks
, 
blocklog
, 
mö_logblocks
);

2687 
¥Ÿo°rög
 = 
	`£tup_¥Ÿo
(
¥Ÿofûe
);

2688 
bsize
 = 1 << (
blocklog
 - 
BBSHIFT
);

2689 
mp
 = &
mbuf
;

2690 
sbp
 = &
mp
->
m_sb
;

2691 
	`mem£t
(
mp
, 0, (
xfs_mou¡_t
));

2692 
sbp
->
sb_blocklog
 = (
__uöt8_t
)
blocklog
;

2693 
sbp
->
sb_£˘log
 = (
__uöt8_t
)
£˘‹log
;

2694 
sbp
->
sb_agblklog
 = (
__uöt8_t
)
	`libxfs_log2_roundup
(()
agsize
);

2695 
sbp
->
sb_agblocks
 = (
xfs_agblock_t
)
agsize
;

2696 
mp
->
m_blkbb_log
 = 
sbp
->
sb_blocklog
 - 
BBSHIFT
;

2697 
mp
->
m_£˘bb_log
 = 
sbp
->
sb_£˘log
 - 
BBSHIFT
;

2703 
	`sb_£t_„©uªs
(&
mp
->
m_sb
, &
sb_„©
, 
£˘‹size
, 
l£˘‹size
, 
dsunô
);

2706 i‡(
logöã∫Æ
) {

2711 i‡(!
logsize
) {

2712 
logblocks
 = 
	`MIN
(logblocks,

2713 
	`libxfs_Æloc_ag_max_ußbÀ
(
mp
));

2716 
	`vÆid©e_log_size
(
logblocks
, 
blocklog
, 
mö_logblocks
);

2718 i‡(
logblocks
 > 
agsize
 - 
	`libxfs_¥óŒoc_blocks
(
mp
)) {

2719 
	`Ârötf
(
°dîr
,

2720 
	`_
("internalÜog size %lldÅooÜarge, must fit inállocation group\n"),

2721 ()
logblocks
);

2722 
	`ußge
();

2725 i‡(
œÊag
) {

2726 i‡(
logagno
 >
agcou¡
) {

2727 
	`Ârötf
(
°dîr
,

2728 
	`_
("logágÇumber %dÅooÜarge, must beÜessÅhan %lld\n"),

2729 
logagno
, ()
agcou¡
);

2730 
	`ußge
();

2733 
logagno
 = (
xfs_agnumbî_t
)(
agcou¡
 / 2);

2735 
log°¨t
 = 
	`XFS_AGB_TO_FSB
(
mp
, 
logagno
, 
	`libxfs_¥óŒoc_blocks
(mp));

2739 i‡(
lsunô
) {

2740 
log°¨t
 = 
	`fixup_öã∫Æ_log_°rùe
(
mp
,

2741 
lsÊag
, 
log°¨t
, 
agsize
, 
lsunô
,

2742 &
logblocks
, 
blocklog
, &
œlign
);

2743 } i‡(
dsunô
) {

2744 
log°¨t
 = 
	`fixup_öã∫Æ_log_°rùe
(
mp
,

2745 
lsÊag
, 
log°¨t
, 
agsize
, 
dsunô
,

2746 &
logblocks
, 
blocklog
, &
œlign
);

2749 
log°¨t
 = 0;

2750 i‡(
lsunô
)

2751 
	`fixup_log_°rùe_unô
(
lsÊag
, 
lsunô
,

2752 &
logblocks
, 
blocklog
);

2754 
	`vÆid©e_log_size
(
logblocks
, 
blocklog
, 
mö_logblocks
);

2756 i‡(!
qÊag
 || 
NÊag
) {

2757 
	`¥ötf
(
	`_
(

2767 
dfûe
, 
isize
, ()
agcou¡
, ()
agsize
,

2768 "", 
£˘‹size
, 
sb_„©
.
©å_vîsi⁄
,

2769 !
sb_„©
.
¥ojid16bô
,

2770 "", 
sb_„©
.
¸cs_íabÀd
, sb_„©.
föobt
, sb_„©.
•öodes
,

2771 
sb_„©
.
rm≠bt
, sb_„©.
ªÊök
,

2772 "", 
blocksize
, ()
dblocks
, 
imaxp˘
,

2773 "", 
dsunô
, 
dswidth
,

2774 
sb_„©
.
dú_vîsi⁄
, 
dúblocksize
, sb_„©.
nci
,

2775 
sb_„©
.
dú·y≥
,

2776 
logfûe
, 1 << 
blocklog
, ()
logblocks
,

2777 
sb_„©
.
log_vîsi⁄
, "", 
l£˘‹size
, 
lsunô
,

2778 
sb_„©
.
œzy_sb_cou¡îs
,

2779 
πfûe
, 
πextblocks
 << 
blocklog
,

2780 ()
πblocks
, ()
πexã¡s
);

2781 i‡(
NÊag
)

2782 
	`exô
(0);

2785 i‡(
œbñ
)

2786 
	`°∫˝y
(
sbp
->
sb_‚ame
, 
œbñ
, (sbp->sb_fname));

2787 
sbp
->
sb_magi˙um
 = 
XFS_SB_MAGIC
;

2788 
sbp
->
sb_blocksize
 = 
blocksize
;

2789 
sbp
->
sb_dblocks
 = 
dblocks
;

2790 
sbp
->
sb_rblocks
 = 
πblocks
;

2791 
sbp
->
sb_ªxã¡s
 = 
πexã¡s
;

2792 
	`∂©f‹m_uuid_c›y
(&
sbp
->
sb_uuid
, &
uuid
);

2794 
	`∂©f‹m_uuid_c›y
(&
sbp
->
sb_mëa_uuid
, &
uuid
);

2795 
sbp
->
sb_log°¨t
 = 
log°¨t
;

2796 
sbp
->
sb_roŸöo
 = sbp->
sb_rbmöo
 = sbp->
sb_rsumöo
 = 
NULLFSINO
;

2797 
sbp
->
sb_ªxtsize
 = 
πextblocks
;

2798 
sbp
->
sb_agcou¡
 = (
xfs_agnumbî_t
)
agcou¡
;

2799 
sbp
->
sb_rbmblocks
 = 
nbmblocks
;

2800 
sbp
->
sb_logblocks
 = (
xfs_exéí_t
)
logblocks
;

2801 
sbp
->
sb_£˘size
 = (
__uöt16_t
)
£˘‹size
;

2802 
sbp
->
sb_öodesize
 = (
__uöt16_t
)
isize
;

2803 
sbp
->
sb_ö›block
 = (
__uöt16_t
)(
blocksize
 / 
isize
);

2804 
sbp
->
sb_£˘log
 = (
__uöt8_t
)
£˘‹log
;

2805 
sbp
->
sb_öodñog
 = (
__uöt8_t
)
öodñog
;

2806 
sbp
->
sb_ö›blog
 = (
__uöt8_t
)(
blocklog
 - 
öodñog
);

2807 
sbp
->
sb_ªxt¶og
 =

2808 (
__uöt8_t
)(
πexã¡s
 ?

2809 
	`libxfs_highbô32
(()
πexã¡s
) : 0);

2810 
sbp
->
sb_ö¥ogªss
 = 1;

2811 
sbp
->
sb_imax_p˘
 = 
imaxp˘
;

2812 
sbp
->
sb_icou¡
 = 0;

2813 
sbp
->
sb_i‰ì
 = 0;

2814 
sbp
->
sb_fdblocks
 = 
dblocks
 - 
agcou¡
 * 
	`libxfs_¥óŒoc_blocks
(
mp
) -

2815 (
logöã∫Æ
 ? 
logblocks
 : 0);

2816 
sbp
->
sb_‰exã¡s
 = 0;

2817 
sbp
->
sb_uquŸöo
 = sbp->
sb_gquŸöo
 = sbp->
sb_pquŸöo
 = 0;

2818 
sbp
->
sb_qÊags
 = 0;

2819 
sbp
->
sb_unô
 = 
dsunô
;

2820 
sbp
->
sb_width
 = 
dswidth
;

2821 
sbp
->
sb_dúblklog
 = 
dúblocklog
 - 
blocklog
;

2822 i‡(
sb_„©
.
log_vîsi⁄
 == 2) {

2823 
lsunô
 = (lsunô =0Ë? 1 : 
	`XFS_FSB_TO_B
(
mp
,Üsunit);

2824 
sbp
->
sb_logsunô
 = 
lsunô
;

2826 
sbp
->
sb_logsunô
 = 0;

2827 i‡(
sb_„©
.
öode_Æign
) {

2828 
˛u°î_size
 = 
XFS_INODE_BIG_CLUSTER_SIZE
;

2829 i‡(
sb_„©
.
¸cs_íabÀd
)

2830 
˛u°î_size
 *
isize
 / 
XFS_DINODE_MIN_SIZE
;

2831 
sbp
->
sb_öﬂlignmt
 = 
˛u°î_size
 >> 
blocklog
;

2832 
sb_„©
.
öode_Æign
 = 
sbp
->
sb_öﬂlignmt
 != 0;

2834 
sbp
->
sb_öﬂlignmt
 = 0;

2835 i‡(
l£˘‹size
 !
BBSIZE
 || 
£˘‹size
 != BBSIZE) {

2836 
sbp
->
sb_log£˘log
 = (
__uöt8_t
)
l£˘‹log
;

2837 
sbp
->
sb_log£˘size
 = (
__uöt16_t
)
l£˘‹size
;

2839 
sbp
->
sb_log£˘log
 = 0;

2840 
sbp
->
sb_log£˘size
 = 0;

2843 
	`sb_£t_„©uªs
(&
mp
->
m_sb
, &
sb_„©
, 
£˘‹size
, 
l£˘‹size
, 
dsunô
);

2845 i‡(
f‹˚_ovîwrôe
)

2846 
	`zîo_ﬁd_xfs_°ru˘uªs
(&
xi
, 
sbp
);

2854 
	`libxfs_bu·¨g_öô
(
mp
, 
xi
.
ddev
, xi.
logdev
, xi.
πdev
);

2855 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
, 0, 
	`BTOBB
(
WHACK_SIZE
));

2856 
	`mem£t
(
	`XFS_BUF_PTR
(
buf
), 0, 
WHACK_SIZE
);

2857 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

2858 
	`libxfs_purgebuf
(
buf
);

2861 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
, 
XFS_SB_DADDR
, 
	`XFS_FSS_TO_BB
(mp, 1));

2862 
buf
->
b_›s
 = &
xfs_sb_buf_›s
;

2863 
	`mem£t
(
	`XFS_BUF_PTR
(
buf
), 0, 
£˘‹size
);

2864 
	`libxfs_sb_to_disk
((*)
	`XFS_BUF_PTR
(
buf
), 
sbp
);

2865 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

2866 
	`libxfs_purgebuf
(
buf
);

2873 i‡(
xi
.
disfûe
 && xi.
dsize
 * xi.
dbsize
 < 
dblocks
 * 
blocksize
) {

2874 i‡(
	`·runˇã
(
xi
.
dfd
, 
dblocks
 * 
blocksize
) < 0) {

2875 
	`Ârötf
(
°dîr
,

2876 
	`_
("%s: GrowingÅhe data section failed\n"),

2877 
¥og«me
);

2878 
	`exô
(1);

2887 i‡(!
xi
.
disfûe
) {

2888 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

2889 (
xi
.
dsize
 - 
	`BTOBB
(
WHACK_SIZE
)),

2890 
	`BTOBB
(
WHACK_SIZE
));

2891 
	`mem£t
(
	`XFS_BUF_PTR
(
buf
), 0, 
WHACK_SIZE
);

2892 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

2893 
	`libxfs_purgebuf
(
buf
);

2899 
	`libxfs_log_˛ór
(
mp
->
m_logdev_èrgp
, 
NULL
,

2900 
	`XFS_FSB_TO_DADDR
(
mp
, 
log°¨t
),

2901 (
xfs_exéí_t
)
	`XFS_FSB_TO_BB
(
mp
, 
logblocks
),

2902 &
sbp
->
sb_uuid
, 
sb_„©
.
log_vîsi⁄
, 
lsunô
, 
XLOG_FMT
, 
XLOG_INIT_CYCLE
, 
Ál£
);

2904 
mp
 = 
	`libxfs_mou¡
(mp, 
sbp
, 
xi
.
ddev
, xi.
logdev
, xi.
πdev
, 0);

2905 i‡(
mp
 =
NULL
) {

2906 
	`Ârötf
(
°dîr
, 
	`_
("%s: filesystem failedÅo initialize\n"),

2907 
¥og«me
);

2908 
	`exô
(1);

2916 
agno
 = 0;ágnÿ< 
agcou¡
;ágno++) {

2917 
xfs_agÊ
 *
agÊ
;

2918 
buckë
;

2919 
xfs_≥øg
 *
∑g
 = 
	`libxfs_≥øg_gë
(
mp
, 
agno
);

2924 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

2925 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
XFS_SB_DADDR
),

2926 
	`XFS_FSS_TO_BB
(
mp
, 1));

2927 
buf
->
b_›s
 = &
xfs_sb_buf_›s
;

2928 
	`mem£t
(
	`XFS_BUF_PTR
(
buf
), 0, 
£˘‹size
);

2929 
	`libxfs_sb_to_disk
((*)
	`XFS_BUF_PTR
(
buf
), 
sbp
);

2930 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

2935 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

2936 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

2937 
	`XFS_FSS_TO_BB
(
mp
, 1));

2938 
buf
->
b_›s
 = &
xfs_agf_buf_›s
;

2939 
agf
 = 
	`XFS_BUF_TO_AGF
(
buf
);

2940 
	`mem£t
(
agf
, 0, 
£˘‹size
);

2941 i‡(
agno
 =
agcou¡
 - 1)

2942 
agsize
 = 
dblocks
 - (
xfs_rfsblock_t
)(
agno
 *ágsize);

2943 
agf
->
agf_magi˙um
 = 
	`˝u_to_be32
(
XFS_AGF_MAGIC
);

2944 
agf
->
agf_vîsi⁄num
 = 
	`˝u_to_be32
(
XFS_AGF_VERSION
);

2945 
agf
->
agf_£qno
 = 
	`˝u_to_be32
(
agno
);

2946 
agf
->
agf_Àngth
 = 
	`˝u_to_be32
(
agsize
);

2947 
agf
->
agf_roŸs
[
XFS_BTNUM_BNOi
] = 
	`˝u_to_be32
(
	`XFS_BNO_BLOCK
(
mp
));

2948 
agf
->
agf_roŸs
[
XFS_BTNUM_CNTi
] = 
	`˝u_to_be32
(
	`XFS_CNT_BLOCK
(
mp
));

2949 
agf
->
agf_Àvñs
[
XFS_BTNUM_BNOi
] = 
	`˝u_to_be32
(1);

2950 
agf
->
agf_Àvñs
[
XFS_BTNUM_CNTi
] = 
	`˝u_to_be32
(1);

2951 
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_BNOi
] = 1;

2952 
∑g
->
∑gf_Àvñs
[
XFS_BTNUM_CNTi
] = 1;

2953 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
)) {

2954 
agf
->
agf_roŸs
[
XFS_BTNUM_RMAPi
] =

2955 
	`˝u_to_be32
(
	`XFS_RMAP_BLOCK
(
mp
));

2956 
agf
->
agf_Àvñs
[
XFS_BTNUM_RMAPi
] = 
	`˝u_to_be32
(1);

2957 
agf
->
agf_rm≠_blocks
 = 
	`˝u_to_be32
(1);

2959 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
)) {

2960 
agf
->
agf_ªfcou¡_roŸ
 = 
	`˝u_to_be32
(

2961 
	`libxfs_ªfc_block
(
mp
));

2962 
agf
->
agf_ªfcou¡_Àvñ
 = 
	`˝u_to_be32
(1);

2963 
agf
->
agf_ªfcou¡_blocks
 = 
	`˝u_to_be32
(1);

2965 
agf
->
agf_Êfú°
 = 0;

2966 
agf
->
agf_Êœ°
 = 
	`˝u_to_be32
(
	`XFS_AGFL_SIZE
(
mp
) - 1);

2967 
agf
->
agf_Êcou¡
 = 0;

2968 
nbmblocks
 = (
xfs_exéí_t
)(
agsize
 - 
	`libxfs_¥óŒoc_blocks
(
mp
));

2969 
agf
->
agf_‰ìblks
 = 
	`˝u_to_be32
(
nbmblocks
);

2970 
agf
->
agf_l⁄ge°
 = 
	`˝u_to_be32
(
nbmblocks
);

2971 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

2972 
	`∂©f‹m_uuid_c›y
(&
agf
->
agf_uuid
, &
mp
->
m_sb
.
sb_uuid
);

2974 i‡(
logöã∫Æ
 && 
agno
 =
logagno
) {

2975 
	`be32_add_˝u
(&
agf
->
agf_‰ìblks
, -
logblocks
);

2976 
agf
->
agf_l⁄ge°
 = 
	`˝u_to_be32
(
agsize
 -

2977 
	`XFS_FSB_TO_AGBNO
(
mp
, 
log°¨t
Ë- 
logblocks
);

2979 i‡(
	`libxfs_Æloc_mö_‰ìli°
(
mp
, 
∑g
Ë> 
w‹°_‰ìli°
)

2980 
w‹°_‰ìli°
 = 
	`libxfs_Æloc_mö_‰ìli°
(
mp
, 
∑g
);

2981 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

2986 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

2987 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGFL_DADDR
(mp)),

2988 
	`XFS_FSS_TO_BB
(
mp
, 1));

2989 
buf
->
b_›s
 = &
xfs_agÊ_buf_›s
;

2990 
agÊ
 = 
	`XFS_BUF_TO_AGFL
(
buf
);

2992 
	`mem£t
(
agÊ
, 0xff, 
£˘‹size
);

2993 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

2994 
agÊ
->
agÊ_magi˙um
 = 
	`˝u_to_be32
(
XFS_AGFL_MAGIC
);

2995 
agÊ
->
agÊ_£qno
 = 
	`˝u_to_be32
(
agno
);

2996 
	`∂©f‹m_uuid_c›y
(&
agÊ
->
agÊ_uuid
, &
mp
->
m_sb
.
sb_uuid
);

2997 
buckë
 = 0; buckë < 
	`XFS_AGFL_SIZE
(
mp
); bucket++)

2998 
agÊ
->
agÊ_bno
[
buckë
] = 
	`˝u_to_be32
(
NULLAGBLOCK
);

3001 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3006 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

3007 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),

3008 
	`XFS_FSS_TO_BB
(
mp
, 1));

3009 
agi
 = 
	`XFS_BUF_TO_AGI
(
buf
);

3010 
buf
->
b_›s
 = &
xfs_agi_buf_›s
;

3011 
	`mem£t
(
agi
, 0, 
£˘‹size
);

3012 
agi
->
agi_magi˙um
 = 
	`˝u_to_be32
(
XFS_AGI_MAGIC
);

3013 
agi
->
agi_vîsi⁄num
 = 
	`˝u_to_be32
(
XFS_AGI_VERSION
);

3014 
agi
->
agi_£qno
 = 
	`˝u_to_be32
(
agno
);

3015 
agi
->
agi_Àngth
 = 
	`˝u_to_be32
((
xfs_agblock_t
)
agsize
);

3016 
agi
->
agi_cou¡
 = 0;

3017 
agi
->
agi_roŸ
 = 
	`˝u_to_be32
(
	`XFS_IBT_BLOCK
(
mp
));

3018 
agi
->
agi_Àvñ
 = 
	`˝u_to_be32
(1);

3019 i‡(
sb_„©
.
föobt
) {

3020 
agi
->
agi_‰ì_roŸ
 = 
	`˝u_to_be32
(
	`XFS_FIBT_BLOCK
(
mp
));

3021 
agi
->
agi_‰ì_Àvñ
 = 
	`˝u_to_be32
(1);

3023 
agi
->
agi_‰ìcou¡
 = 0;

3024 
agi
->
agi_√wöo
 = 
	`˝u_to_be32
(
NULLAGINO
);

3025 
agi
->
agi_dúöo
 = 
	`˝u_to_be32
(
NULLAGINO
);

3026 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

3027 
	`∂©f‹m_uuid_c›y
(&
agi
->
agi_uuid
, &
mp
->
m_sb
.
sb_uuid
);

3028 
c
 = 0; c < 
XFS_AGI_UNLINKED_BUCKETS
; c++)

3029 
agi
->
agi_u∆öked
[
c
] = 
	`˝u_to_be32
(
NULLAGINO
);

3030 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3035 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

3036 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
	`XFS_BNO_BLOCK
(mp)),

3037 
bsize
);

3038 
buf
->
b_›s
 = &
xfs_Ælocbt_buf_›s
;

3039 
block
 = 
	`XFS_BUF_TO_BLOCK
(
buf
);

3040 
	`mem£t
(
block
, 0, 
blocksize
);

3041 
	`libxfs_båì_öô_block
(
mp
, 
buf
, 
XFS_BTNUM_BNO
, 0, 1, 
agno
, 0);

3043 
¨ec
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

3044 
¨ec
->
¨_°¨tblock
 = 
	`˝u_to_be32
(
	`libxfs_¥óŒoc_blocks
(
mp
));

3045 i‡(
logöã∫Æ
 && 
agno
 =
logagno
) {

3046 i‡(
œlign
) {

3051 
¨ec
->
¨_blockcou¡
 = 
	`˝u_to_be32
(

3052 
	`XFS_FSB_TO_AGBNO
(
mp
, 
log°¨t
) -

3053 
	`be32_to_˝u
(
¨ec
->
¨_°¨tblock
));

3054 
ƒec
 = 
¨ec
 + 1;

3058 
ƒec
->
¨_°¨tblock
 = 
	`˝u_to_be32
(

3059 
	`be32_to_˝u
(
¨ec
->
¨_°¨tblock
) +

3060 
	`be32_to_˝u
(
¨ec
->
¨_blockcou¡
));

3061 
¨ec
 = 
ƒec
;

3062 
	`be16_add_˝u
(&
block
->
bb_numªcs
, 1);

3067 
	`be32_add_˝u
(&
¨ec
->
¨_°¨tblock
, 
logblocks
);

3075 
¨ec
->
¨_blockcou¡
 = 
	`˝u_to_be32
(
agsize
 -

3076 
	`be32_to_˝u
(
¨ec
->
¨_°¨tblock
));

3077 i‡(!
¨ec
->
¨_blockcou¡
)

3078 
block
->
bb_numªcs
 = 0;

3080 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3085 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

3086 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
	`XFS_CNT_BLOCK
(mp)),

3087 
bsize
);

3088 
buf
->
b_›s
 = &
xfs_Ælocbt_buf_›s
;

3089 
block
 = 
	`XFS_BUF_TO_BLOCK
(
buf
);

3090 
	`mem£t
(
block
, 0, 
blocksize
);

3091 
	`libxfs_båì_öô_block
(
mp
, 
buf
, 
XFS_BTNUM_CNT
, 0, 1, 
agno
, 0);

3093 
¨ec
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

3094 
¨ec
->
¨_°¨tblock
 = 
	`˝u_to_be32
(
	`libxfs_¥óŒoc_blocks
(
mp
));

3095 i‡(
logöã∫Æ
 && 
agno
 =
logagno
) {

3096 i‡(
œlign
) {

3097 
¨ec
->
¨_blockcou¡
 = 
	`˝u_to_be32
(

3098 
	`XFS_FSB_TO_AGBNO
(
mp
, 
log°¨t
) -

3099 
	`be32_to_˝u
(
¨ec
->
¨_°¨tblock
));

3100 
ƒec
 = 
¨ec
 + 1;

3101 
ƒec
->
¨_°¨tblock
 = 
	`˝u_to_be32
(

3102 
	`be32_to_˝u
(
¨ec
->
¨_°¨tblock
) +

3103 
	`be32_to_˝u
(
¨ec
->
¨_blockcou¡
));

3104 
¨ec
 = 
ƒec
;

3105 
	`be16_add_˝u
(&
block
->
bb_numªcs
, 1);

3107 
	`be32_add_˝u
(&
¨ec
->
¨_°¨tblock
, 
logblocks
);

3115 
¨ec
->
¨_blockcou¡
 = 
	`˝u_to_be32
(
agsize
 -

3116 
	`be32_to_˝u
(
¨ec
->
¨_°¨tblock
));

3117 i‡(!
¨ec
->
¨_blockcou¡
)

3118 
block
->
bb_numªcs
 = 0;

3120 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3125 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
)) {

3126 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

3127 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
,

3128 
	`libxfs_ªfc_block
(
mp
)),

3129 
bsize
);

3130 
buf
->
b_›s
 = &
xfs_ªfcou¡bt_buf_›s
;

3132 
block
 = 
	`XFS_BUF_TO_BLOCK
(
buf
);

3133 
	`mem£t
(
block
, 0, 
blocksize
);

3134 
	`libxfs_båì_öô_block
(
mp
, 
buf
, 
XFS_BTNUM_REFC
, 0,

3135 0, 
agno
, 0);

3137 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3143 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

3144 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
	`XFS_IBT_BLOCK
(mp)),

3145 
bsize
);

3146 
buf
->
b_›s
 = &
xfs_öobt_buf_›s
;

3147 
block
 = 
	`XFS_BUF_TO_BLOCK
(
buf
);

3148 
	`mem£t
(
block
, 0, 
blocksize
);

3149 
	`libxfs_båì_öô_block
(
mp
, 
buf
, 
XFS_BTNUM_INO
, 0, 0, 
agno
, 0);

3150 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3155 i‡(
sb_„©
.
föobt
) {

3156 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

3157 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
	`XFS_FIBT_BLOCK
(mp)),

3158 
bsize
);

3159 
buf
->
b_›s
 = &
xfs_öobt_buf_›s
;

3160 
block
 = 
	`XFS_BUF_TO_BLOCK
(
buf
);

3161 
	`mem£t
(
block
, 0, 
blocksize
);

3162 
	`libxfs_båì_öô_block
(
mp
, 
buf
, 
XFS_BTNUM_FINO
, 0, 0, 
agno
, 0);

3163 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3167 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
)) {

3168 
xfs_rm≠_ªc
 *
ºec
;

3170 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

3171 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
	`XFS_RMAP_BLOCK
(mp)),

3172 
bsize
);

3173 
buf
->
b_›s
 = &
xfs_rm≠bt_buf_›s
;

3174 
block
 = 
	`XFS_BUF_TO_BLOCK
(
buf
);

3175 
	`mem£t
(
block
, 0, 
blocksize
);

3177 
	`libxfs_båì_öô_block
(
mp
, 
buf
, 
XFS_BTNUM_RMAP
, 0, 0, 
agno
, 0);

3185 
ºec
 = 
	`XFS_RMAP_REC_ADDR
(
block
, 1);

3186 
ºec
->
rm_°¨tblock
 = 0;

3187 
ºec
->
rm_blockcou¡
 = 
	`˝u_to_be32
(
	`XFS_BNO_BLOCK
(
mp
));

3188 
ºec
->
rm_ow√r
 = 
	`˝u_to_be64
(
XFS_RMAP_OWN_FS
);

3189 
ºec
->
rm_off£t
 = 0;

3190 
	`be16_add_˝u
(&
block
->
bb_numªcs
, 1);

3193 
ºec
 = 
	`XFS_RMAP_REC_ADDR
(
block
, 2);

3194 
ºec
->
rm_°¨tblock
 = 
	`˝u_to_be32
(
	`XFS_BNO_BLOCK
(
mp
));

3195 
ºec
->
rm_blockcou¡
 = 
	`˝u_to_be32
(2);

3196 
ºec
->
rm_ow√r
 = 
	`˝u_to_be64
(
XFS_RMAP_OWN_AG
);

3197 
ºec
->
rm_off£t
 = 0;

3198 
	`be16_add_˝u
(&
block
->
bb_numªcs
, 1);

3201 
ºec
 = 
	`XFS_RMAP_REC_ADDR
(
block
, 3);

3202 
ºec
->
rm_°¨tblock
 = 
	`˝u_to_be32
(
	`XFS_IBT_BLOCK
(
mp
));

3203 
ºec
->
rm_blockcou¡
 = 
	`˝u_to_be32
(
	`XFS_RMAP_BLOCK
(
mp
) -

3204 
	`XFS_IBT_BLOCK
(
mp
));

3205 
ºec
->
rm_ow√r
 = 
	`˝u_to_be64
(
XFS_RMAP_OWN_INOBT
);

3206 
ºec
->
rm_off£t
 = 0;

3207 
	`be16_add_˝u
(&
block
->
bb_numªcs
, 1);

3210 
ºec
 = 
	`XFS_RMAP_REC_ADDR
(
block
, 4);

3211 
ºec
->
rm_°¨tblock
 = 
	`˝u_to_be32
(
	`XFS_RMAP_BLOCK
(
mp
));

3212 
ºec
->
rm_blockcou¡
 = 
	`˝u_to_be32
(1);

3213 
ºec
->
rm_ow√r
 = 
	`˝u_to_be64
(
XFS_RMAP_OWN_AG
);

3214 
ºec
->
rm_off£t
 = 0;

3215 
	`be16_add_˝u
(&
block
->
bb_numªcs
, 1);

3218 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
)) {

3219 
ºec
 = 
	`XFS_RMAP_REC_ADDR
(
block
, 5);

3220 
ºec
->
rm_°¨tblock
 = 
	`˝u_to_be32
(

3221 
	`libxfs_ªfc_block
(
mp
));

3222 
ºec
->
rm_blockcou¡
 = 
	`˝u_to_be32
(1);

3223 
ºec
->
rm_ow√r
 = 
	`˝u_to_be64
(
XFS_RMAP_OWN_REFC
);

3224 
ºec
->
rm_off£t
 = 0;

3225 
	`be16_add_˝u
(&
block
->
bb_numªcs
, 1);

3229 i‡(
logöã∫Æ
 && 
agno
 =
logagno
) {

3230 
ºec
 = 
	`XFS_RMAP_REC_ADDR
(
block
,

3231 
	`be16_to_˝u
(
block
->
bb_numªcs
) + 1);

3232 
ºec
->
rm_°¨tblock
 = 
	`˝u_to_be32
(

3233 
	`XFS_FSB_TO_AGBNO
(
mp
, 
log°¨t
));

3234 
ºec
->
rm_blockcou¡
 = 
	`˝u_to_be32
(
logblocks
);

3235 
ºec
->
rm_ow√r
 = 
	`˝u_to_be64
(
XFS_RMAP_OWN_LOG
);

3236 
ºec
->
rm_off£t
 = 0;

3237 
	`be16_add_˝u
(&
block
->
bb_numªcs
, 1);

3240 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3243 
	`libxfs_≥øg_put
(
∑g
);

3249 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_ddev_èrgp
,

3250 (
xfs_daddr_t
)
	`XFS_FSB_TO_BB
(
mp
, 
dblocks
 - 1LL), 
bsize
);

3251 
	`mem£t
(
	`XFS_BUF_PTR
(
buf
), 0, 
blocksize
);

3252 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3257 i‡(
mp
->
m_πdev_èrgp
->
dev
 && 
πblocks
 > 0) {

3258 
buf
 = 
	`libxfs_gëbuf
(
mp
->
m_πdev_èrgp
,

3259 
	`XFS_FSB_TO_BB
(
mp
, 
πblocks
 - 1LL), 
bsize
);

3260 
	`mem£t
(
	`XFS_BUF_PTR
(
buf
), 0, 
blocksize
);

3261 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3267 
agno
 = 0;ágnÿ< 
agcou¡
;ágno++) {

3268 
xfs_Æloc_¨g_t
 
¨gs
;

3269 
xfs_å™s_t
 *
ç
;

3270 
xfs_å™s_ªs
 
åes
 = {0};

3272 
c
 = 
	`libxfs_å™s_Æloc
(
mp
, &
åes
, 
w‹°_‰ìli°
, 0, 0, &
ç
);

3273 i‡(
c
)

3274 
	`ªs_Áûed
(
c
);

3276 
	`mem£t
(&
¨gs
, 0, (args));

3277 
¨gs
.
ç
 =Åp;

3278 
¨gs
.
mp
 = mp;

3279 
¨gs
.
agno
 =ágno;

3280 
¨gs
.
Æignmít
 = 1;

3281 
¨gs
.
∑g
 = 
	`libxfs_≥øg_gë
(
mp
,
agno
);

3283 
	`libxfs_Æloc_fix_‰ìli°
(&
¨gs
, 0);

3284 
	`libxfs_≥øg_put
(
¨gs
.
∑g
);

3285 
	`libxfs_å™s_commô
(
ç
);

3291 
	`∑r£_¥Ÿo
(
mp
, &
fsx
, &
¥Ÿo°rög
);

3296 i‡(
	`XFS_INO_TO_AGNO
(
mp
, mp->
m_sb
.
sb_roŸöo
) != 0) {

3297 
	`Ârötf
(
°dîr
,

3298 
	`_
("%s:Ñoot inode created in AG %u,Çot AG 0\n"),

3299 
¥og«me
, 
	`XFS_INO_TO_AGNO
(
mp
, mp->
m_sb
.
sb_roŸöo
));

3300 
	`exô
(1);

3306 i‡(
mp
->
m_sb
.
sb_agcou¡
 > 1) {

3310 
buf
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
,

3311 
	`XFS_AGB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_agcou¡
-1,

3312 
XFS_SB_DADDR
),

3313 
	`XFS_FSS_TO_BB
(
mp
, 1),

3314 
LIBXFS_EXIT_ON_FAILURE
, &
xfs_sb_buf_›s
);

3315 
	`XFS_BUF_TO_SBP
(
buf
)->
sb_roŸöo
 = 
	`˝u_to_be64
(

3316 
mp
->
m_sb
.
sb_roŸöo
);

3317 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3321 i‡(
mp
->
m_sb
.
sb_agcou¡
 > 2) {

3322 
buf
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
,

3323 
	`XFS_AGB_TO_DADDR
(
mp
, (mp->
m_sb
.
sb_agcou¡
-1)/2,

3324 
XFS_SB_DADDR
),

3325 
	`XFS_FSS_TO_BB
(
mp
, 1),

3326 
LIBXFS_EXIT_ON_FAILURE
, &
xfs_sb_buf_›s
);

3327 
	`XFS_BUF_TO_SBP
(
buf
)->
sb_roŸöo
 = 
	`˝u_to_be64
(

3328 
mp
->
m_sb
.
sb_roŸöo
);

3329 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3337 
	`libxfs_πmou¡_de°roy
(
mp
);

3338 
	`libxfs_bˇche_purge
();

3343 
buf
 = 
	`libxfs_gësb
(
mp
, 
LIBXFS_EXIT_ON_FAILURE
);

3344 (
	`XFS_BUF_TO_SBP
(
buf
))->
sb_ö¥ogªss
 = 0;

3345 
	`libxfs_wrôebuf
(
buf
, 
LIBXFS_EXIT_ON_FAILURE
);

3347 
	`libxfs_umou¡
(
mp
);

3348 i‡(
xi
.
πdev
)

3349 
	`libxfs_devi˚_˛o£
(
xi
.
πdev
);

3350 i‡(
xi
.
logdev
 && xi.logdev !xi.
ddev
)

3351 
	`libxfs_devi˚_˛o£
(
xi
.
logdev
);

3352 
	`libxfs_devi˚_˛o£
(
xi
.
ddev
);

3355 
	}
}

3358 
	$c⁄Êi˘
(

3359 
›t
,

3360 *
èb
[],

3361 
ﬁdidx
,

3362 
√widx
)

3364 
	`Ârötf
(
°dîr
, 
	`_
("Cannot specify both -%c %sánd -%c %s\n"),

3365 
›t
, 
èb
[
ﬁdidx
], o±,Åab[
√widx
]);

3366 
	`ußge
();

3367 
	}
}

3371 
	$ûÀgÆ
(

3372 c⁄° *
vÆue
,

3373 c⁄° *
›t
)

3375 
	`Ârötf
(
°dîr
, 
	`_
("IŒegÆ vÆuê%†f‹ -%†›ti⁄\n"), 
vÆue
, 
›t
);

3376 
	`ußge
();

3377 
	}
}

3380 
	$i•ow2
(

3381 
i
)

3383  (
i
 & (i - 1)) == 0;

3384 
	}
}

3386 
__©åibuã__
((
n‹ëu∫
))

3387 
	$ªqvÆ
(

3388 
›t
,

3389 *
èb
[],

3390 
idx
)

3392 
	`Ârötf
(
°dîr
, 
	`_
("-%¯%†›ti⁄Ñequúe†®vÆue\n"), 
›t
, 
èb
[
idx
]);

3393 
	`ußge
();

3394 
	}
}

3397 
	$ª•ec
(

3398 
›t
,

3399 *
èb
[],

3400 
idx
)

3402 
	`Ârötf
(
°dîr
, "-%¯", 
›t
);

3403 i‡(
èb
)

3404 
	`Ârötf
(
°dîr
, "%†", 
èb
[
idx
]);

3405 
	`Ârötf
(
°dîr
, 
	`_
("optionÑespecified\n"));

3406 
	`ußge
();

3407 
	}
}

3410 
	$unknown
(

3411 
›t
,

3412 *
s
)

3414 
	`Ârötf
(
°dîr
, 
	`_
("unknow¿›ti⁄ -%¯%s\n"), 
›t
, 
s
);

3415 
	`ußge
();

3416 
	}
}

3419 
	$cväum
(

3420 
blksize
,

3421 
£˘size
,

3422 c⁄° *
s
)

3424 
i
;

3425 *
•
;

3426 
c
;

3428 
i
 = 
	`°πﬁl
(
s
, &
•
, 0);

3429 i‡(
i
 =0 && 
•
 =
s
)

3431 i‡(*
•
 == '\0')

3432  
i
;

3434 i‡(
•
[1] != '\0')

3437 i‡(*
•
 == 'b') {

3438 i‡(!
blksize
) {

3439 
	`Ârötf
(
°dîr
,

3440 
	`_
("Blocksize must beÖrovidedÖriorÅo using 'b' suffix.\n"));

3441 
	`ußge
();

3443  
i
 * 
blksize
;

3446 i‡(*
•
 == 's') {

3447 i‡(!
£˘size
) {

3448 
	`Ârötf
(
°dîr
,

3449 
	`_
("Sectorsize must be specifiedÖriorÅo using 's' suffix.\n"));

3450 
	`ußge
();

3452  
i
 * 
£˘size
;

3456 
c
 = 
	`tﬁowî
(*
•
);

3457 
c
) {

3459 
i
 *= 1024LL;

3462 
i
 *= 1024LL;

3465 
i
 *= 1024LL;

3468 
i
 *= 1024LL;

3471 
i
 *= 1024LL;

3474  
i
 * 1024LL;

3479 
	}
}

3481 
__©åibuã__
((
n‹ëu∫
))

3482 
	$ußge
( )

3484 
	`Ârötf
(
°dîr
, 
	`_
("Usage: %s\n\
/* blocksize */ [-bÜog=n|size=num]\n\
/* metadata */ [-m crc=0|1,finobt=0|1,uuid=xxx,rmapbt=0|1,reflink=0|1]\n\
/* data subvol */ [-dágcount=n,agsize=n,file,name=xxx,size=num,\n\
(sunit=value,swidth=value|su=num,sw=num|noalign),\n\
=n|sectsize=num\n\
/* force overwrite */ [-f]\n\
/* inode size */ [-iÜog=n|perblock=n|size=num,maxpct=n,attr=0|1|2,\n\
32bit=0|1,sparse=0|1]\n\
/*Ço discard */ [-K]\n\
/*Üog subvol */ [-lágnum=n,internal,size=num,logdev=xxx,version=n\n\
=value|su=num,sectlog=n|sectsize=num,\n\
-count=0|1]\n\
/*Üabel */ [-LÜabel (maximum 12 characters)]\n\
/*Çaming */ [-nÜog=n|size=num,version=2|ci,ftype=0|1]\n\
/*Ço-op info only */ [-N]\n\
/*Örototype file */ [-p fname]\n\
/* quiet */ [-q]\n\
/*Ñealtime subvol */ [-rÉxtsize=num,size=num,rtdev=xxx]\n\
/* sectorsize */ [-sÜog=n|size=num]\n\
/* version */ [-V]\n\
\n\
<devicename> isÑequired unless -dÇame=xxx is given.\n\
<num> is xxx (bytes), xxxs (sectors), xxxb (fs blocks), xxxk (xxx KiB),\n\
 (xxx MiB), xxxg (xxx GiB), xxxt (xxx TiB) or xxxp (xxx PiB).\n\
<value> is xxx (512 byte blocks).\n"),

3510 
¥og«me
);

3511 
	`exô
(1);

3512 
	}
}

	@quota/darwin.c

19 
	~"quŸa.h
"

20 
	~<sys/quŸa.h
>

23 
	$xfsquŸa˘l
(

24 
comm™d
,

25 c⁄° *
devi˚
,

26 
uöt
 
ty≥
,

27 
uöt
 
id
,

28 *
addr
)

31 
î∫o
 = -
ENOSYS
;

33 
	}
}

	@quota/edit.c

19 
	~<pwd.h
>

20 
	~<gΩ.h
>

21 
	~<˘y≥.h
>

22 
	~"öput.h
"

23 
	~"comm™d.h
"

24 
	~"öô.h
"

25 
	~"quŸa.h
"

27 
cmdöfo_t
 
	glimô_cmd
;

28 
cmdöfo_t
 
	gª°‹e_cmd
;

29 
cmdöfo_t
 
	gtimî_cmd
;

30 
cmdöfo_t
 
	gw¨n_cmd
;

33 
	$limô_hñp
()

35 
	`¥ötf
(
	`_
(

53 
	}
}

56 
	$timî_hñp
()

58 
	`¥ötf
(
	`_
(

85 
	}
}

88 
	$w¨n_hñp
()

90 
	`¥ötf
(
	`_
(

114 
	}
}

117 
	$£t_limôs
(

118 
__uöt32_t
 
id
,

119 
uöt
 
ty≥
,

120 
uöt
 
mask
,

121 *
dev
,

122 
__uöt64_t
 *
bso·
,

123 
__uöt64_t
 *
bh¨d
,

124 
__uöt64_t
 *
iso·
,

125 
__uöt64_t
 *
ih¨d
,

126 
__uöt64_t
 *
πbso·
,

127 
__uöt64_t
 *
πbh¨d
)

129 
fs_disk_quŸa_t
 
d
;

131 
	`mem£t
(&
d
, 0, (d));

132 
d
.
d_vîsi⁄
 = 
FS_DQUOT_VERSION
;

133 
d
.
d_id
 = 
id
;

134 
d
.
d_Êags
 = 
ty≥
;

135 
d
.
d_fõldmask
 = 
mask
;

136 
d
.
d_blk_h¨dlimô
 = *
bh¨d
;

137 
d
.
d_blk_so·limô
 = *
bso·
;

138 
d
.
d_öo_h¨dlimô
 = *
ih¨d
;

139 
d
.
d_öo_so·limô
 = *
iso·
;

140 
d
.
d_πb_h¨dlimô
 = *
πbh¨d
;

141 
d
.
d_πb_so·limô
 = *
πbso·
;

143 i‡(
	`xfsquŸa˘l
(
XFS_SETQLIM
, 
dev
, 
ty≥
, 
id
, (*)&
d
) < 0) {

144 
exôcode
 = 1;

145 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot setÜimits: %s\n"),

146 
¥og«me
, 
	`°ªº‹
(
î∫o
));

148 
	}
}

151 
	$£t_u£r_limôs
(

152 *
«me
,

153 
uöt
 
ty≥
,

154 
uöt
 
mask
,

155 
__uöt64_t
 *
bso·
,

156 
__uöt64_t
 *
bh¨d
,

157 
__uöt64_t
 *
iso·
,

158 
__uöt64_t
 *
ih¨d
,

159 
__uöt64_t
 *
πbso·
,

160 
__uöt64_t
 *
πbh¨d
)

162 
uid_t
 
uid
 = 
	`uid_‰om_°rög
(
«me
);

164 i‡(
uid
 == -1) {

165 
exôcode
 = 1;

166 
	`Ârötf
(
°dîr
, 
	`_
("%s: invalid userÇame: %s\n"),

167 
¥og«me
, 
«me
);

169 
	`£t_limôs
(
uid
, 
ty≥
, 
mask
, 
fs_∑th
->
fs_«me
,

170 
bso·
, 
bh¨d
, 
iso·
, 
ih¨d
, 
πbso·
, 
πbh¨d
);

171 
	}
}

174 
	$£t_group_limôs
(

175 *
«me
,

176 
uöt
 
ty≥
,

177 
uöt
 
mask
,

178 
__uöt64_t
 *
bso·
,

179 
__uöt64_t
 *
bh¨d
,

180 
__uöt64_t
 *
iso·
,

181 
__uöt64_t
 *
ih¨d
,

182 
__uöt64_t
 *
πbso·
,

183 
__uöt64_t
 *
πbh¨d
)

185 
gid_t
 
gid
 = 
	`gid_‰om_°rög
(
«me
);

187 i‡(
gid
 == -1) {

188 
exôcode
 = 1;

189 
	`Ârötf
(
°dîr
, 
	`_
("%s: invalid groupÇame: %s\n"),

190 
¥og«me
, 
«me
);

192 
	`£t_limôs
(
gid
, 
ty≥
, 
mask
, 
fs_∑th
->
fs_«me
,

193 
bso·
, 
bh¨d
, 
iso·
, 
ih¨d
, 
πbso·
, 
πbh¨d
);

194 
	}
}

197 
	$£t_¥oje˘_limôs
(

198 *
«me
,

199 
uöt
 
ty≥
,

200 
uöt
 
mask
,

201 
__uöt64_t
 *
bso·
,

202 
__uöt64_t
 *
bh¨d
,

203 
__uöt64_t
 *
iso·
,

204 
__uöt64_t
 *
ih¨d
,

205 
__uöt64_t
 *
πbso·
,

206 
__uöt64_t
 *
πbh¨d
)

208 
¥id_t
 
¥id
 = 
	`¥id_‰om_°rög
(
«me
);

210 i‡(
¥id
 == -1) {

211 
exôcode
 = 1;

212 
	`Ârötf
(
°dîr
, 
	`_
("%s: invalidÖrojectÇame: %s\n"),

213 
¥og«me
, 
«me
);

215 
	`£t_limôs
(
¥id
, 
ty≥
, 
mask
, 
fs_∑th
->
fs_«me
,

216 
bso·
, 
bh¨d
, 
iso·
, 
ih¨d
, 
πbso·
, 
πbh¨d
);

217 
	}
}

221 
	$exåa˘b
(

222 *
°rög
,

223 c⁄° *
¥efix
,

224 
Àngth
,

225 
uöt
 
blocksize
,

226 
uöt
 
£˘‹size
,

227 
__uöt64_t
 *
vÆue
)

229 
v
;

230 *
s
 = 
°rög
;

232 i‡(
	`°∫cmp
(
°rög
, 
¥efix
, 
Àngth
) == 0) {

233 
s
 = 
°rög
 + 
Àngth
 + 1;

234 
v
 = 
	`cväum
(
blocksize
, 
£˘‹size
, 
s
);

235 i‡(
v
 == -1LL) {

236 
	`Ârötf
(
°dîr
,

237 
	`_
("%s: Error: couldÇotÖarse size %s.\n"),

238 
¥og«me
, 
s
);

241 *
vÆue
 = (
__uöt64_t
)
v
 >> 9;

242 i‡(
v
 > 0 && *
vÆue
 == 0)

243 
	`Ârötf
(
°dîr
, 
	`_
("%s: W¨nög: `%s' i¿quŸ®block†i†0 (u∆imôed).\n"), 
¥og«me
, 
s
);

247 
	}
}

251 
	$exåa˘i
(

252 *
°rög
,

253 c⁄° *
¥efix
,

254 
Àngth
,

255 
__uöt64_t
 *
vÆue
)

257 *
•
, *
s
 = 
°rög
;

259 i‡(
	`°∫cmp
(
°rög
, 
¥efix
, 
Àngth
) == 0) {

260 
s
 = 
°rög
 + 
Àngth
 + 1;

261 *
vÆue
 = 
	`°πﬁl
(
s
, &
•
, 0);

265 
	}
}

268 
	$limô_f
(

269 
¨gc
,

270 **
¨gv
)

272 *
«me
;

273 
__uöt64_t
 
bso·
, 
bh¨d
, 
iso·
, 
ih¨d
, 
πbso·
, 
πbh¨d
;

274 
c
, 
ty≥
 = 0, 
mask
 = 0, 
Êags
 = 0;

275 
uöt
 
bsize
, 
ssize
, 
íd›ti⁄s
;

277 
	`öô_cväum
(&
bsize
, &
ssize
);

278 
bso·
 = 
bh¨d
 = 
iso·
 = 
ih¨d
 = 
πbso·
 = 
πbh¨d
 = 0;

279 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "dgpu")Ë!
EOF
) {

280 
c
) {

282 
Êags
 |
DEFAULTS_FLAG
;

285 
ty≥
 |
XFS_GROUP_QUOTA
;

288 
ty≥
 |
XFS_PROJ_QUOTA
;

291 
ty≥
 |
XFS_USER_QUOTA
;

294  
	`comm™d_ußge
(&
limô_cmd
);

303 i‡(
Êags
 & 
DEFAULTS_FLAG
) {

304 i‡(
¨gc
 < 
›töd
 + 1)

305  
	`comm™d_ußge
(&
limô_cmd
);

306 
íd›ti⁄s
 = 1;

307 } i‡(
¨gc
 < 
›töd
 + 2) {

308  
	`comm™d_ußge
(&
limô_cmd
);

310 
íd›ti⁄s
 = 2;

316 
¨gc
 > 
›töd
 + 
íd›ti⁄s
 - 1) {

317 *
s
 = 
¨gv
[
›töd
++];

318 i‡(
	`exåa˘b
(
s
, "bso·=", 5, 
bsize
, 
ssize
, &
bso·
))

319 
mask
 |
FS_DQ_BSOFT
;

320 i‡(
	`exåa˘b
(
s
, "bh¨d=", 5, 
bsize
, 
ssize
, &
bh¨d
))

321 
mask
 |
FS_DQ_BHARD
;

322 i‡(
	`exåa˘i
(
s
, "iso·=", 5, &
iso·
))

323 
mask
 |
FS_DQ_ISOFT
;

324 i‡(
	`exåa˘i
(
s
, "ih¨d=", 5, &
ih¨d
))

325 
mask
 |
FS_DQ_IHARD
;

326 i‡(
	`exåa˘b
(
s
, "πbso·=", 7, 
bsize
, 
ssize
, &
πbso·
))

327 
mask
 |
FS_DQ_RTBSOFT
;

328 i‡(
	`exåa˘b
(
s
, "πbh¨d=", 7, 
bsize
, 
ssize
, &
πbh¨d
))

329 
mask
 |
FS_DQ_RTBHARD
;

331 
exôcode
 = 1;

332 
	`Ârötf
(
°dîr
, 
	`_
("%s: unrecognisedárgument %s\n"),

333 
¥og«me
, 
s
);

337 i‡(!
mask
) {

338 
exôcode
 = 1;

339 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot findány validárguments\n"),

340 
¥og«me
);

344 
«me
 = (
Êags
 & 
DEFAULTS_FLAG
Ë? "0" : 
¨gv
[
›töd
++];

346 i‡(!
ty≥
) {

347 
ty≥
 = 
XFS_USER_QUOTA
;

348 } i‡(
ty≥
 !
XFS_GROUP_QUOTA
 &&

349 
ty≥
 !
XFS_PROJ_QUOTA
 &&

350 
ty≥
 !
XFS_USER_QUOTA
) {

351  
	`comm™d_ußge
(&
limô_cmd
);

354 
ty≥
) {

355 
XFS_USER_QUOTA
:

356 
	`£t_u£r_limôs
(
«me
, 
ty≥
, 
mask
,

357 &
bso·
, &
bh¨d
, &
iso·
, &
ih¨d
, &
πbso·
, &
πbh¨d
);

359 
XFS_GROUP_QUOTA
:

360 
	`£t_group_limôs
(
«me
, 
ty≥
, 
mask
,

361 &
bso·
, &
bh¨d
, &
iso·
, &
ih¨d
, &
πbso·
, &
πbh¨d
);

363 
XFS_PROJ_QUOTA
:

364 
	`£t_¥oje˘_limôs
(
«me
, 
ty≥
, 
mask
,

365 &
bso·
, &
bh¨d
, &
iso·
, &
ih¨d
, &
πbso·
, &
πbh¨d
);

369 
	}
}

378 
	$ª°‹e_fûe
(

379 
FILE
 *
Â
,

380 
uöt
 
ty≥
)

382 
buf„r
[512];

383 
devbuf„r
[512];

384 *
dev
 = 
NULL
;

385 
uöt
 
mask
;

386 
˙t
;

387 
__uöt32_t
 
id
;

388 
__uöt64_t
 
bso·
, 
bh¨d
, 
iso·
, 
ih¨d
, 
πbso·
, 
πbh¨d
;

390 
	`fgës
(
buf„r
, (buf„r), 
Â
Ë!
NULL
) {

391 i‡(
	`°∫cmp
("f†", 
buf„r
, 5) == 0) {

392 
dev
 = 
	`°∫˝y
(
devbuf„r
, 
buf„r
+5, (devbuffer));

393 
dev
[
	`°æí
(dev) - 1] = '\0';

396 
πbso·
 = 
πbh¨d
 = 0;

397 
˙t
 = 
	`ssˇnf
(
buf„r
, "%u %llu %llu %llu %llu %llu %llu\n",

398 &
id
,

399 (*)&
bso·
,

400 (*)&
bh¨d
,

401 (*)&
iso·
,

402 (*)&
ih¨d
,

403 (*)&
πbso·
,

404 (*)&
πbh¨d
);

405 i‡(
˙t
 == 5 || cnt == 7) {

406 
mask
 = 
FS_DQ_ISOFT
|
FS_DQ_IHARD
|
FS_DQ_BSOFT
|
FS_DQ_BHARD
;

407 i‡(
˙t
 == 7)

408 
mask
 |
FS_DQ_RTBSOFT
|
FS_DQ_RTBHARD
;

409 
	`£t_limôs
(
id
, 
ty≥
, 
mask
, 
dev
, &
bso·
, &
bh¨d
,

410 &
iso·
, &
ih¨d
, &
πbso·
, &
πbh¨d
);

413 
	}
}

416 
	$ª°‹e_f
(

417 
¨gc
,

418 **
¨gv
)

420 
FILE
 *
Â
 = 
°dö
;

421 *
‚ame
 = 
NULL
;

422 
c
, 
ty≥
 = 0;

424 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "f:gpu")Ë!
EOF
) {

425 
c
) {

427 
‚ame
 = 
›èrg
;

430 
ty≥
 |
XFS_GROUP_QUOTA
;

433 
ty≥
 |
XFS_PROJ_QUOTA
;

436 
ty≥
 |
XFS_USER_QUOTA
;

439  
	`comm™d_ußge
(&
ª°‹e_cmd
);

443 i‡(
¨gc
 < 
›töd
)

444  
	`comm™d_ußge
(&
ª°‹e_cmd
);

446 i‡(!
ty≥
) {

447 
ty≥
 = 
XFS_USER_QUOTA
;

448 } i‡(
ty≥
 !
XFS_GROUP_QUOTA
 &&

449 
ty≥
 !
XFS_PROJ_QUOTA
 &&

450 
ty≥
 !
XFS_USER_QUOTA
) {

451  
	`comm™d_ußge
(&
ª°‹e_cmd
);

454 i‡(
‚ame
) {

455 i‡((
Â
 = 
	`f›í
(
‚ame
, "r")Ë=
NULL
) {

456 
exôcode
 = 1;

457 
	`Ârötf
(
°dîr
, 
	`_
("%s: fopen on %s failed: %s\n"),

458 
¥og«me
, 
‚ame
, 
	`°ªº‹
(
î∫o
));

463 
	`ª°‹e_fûe
(
Â
, 
ty≥
);

465 i‡(
‚ame
)

466 
	`f˛o£
(
Â
);

468 
	}
}

471 
	$£t_timî
(

472 
uöt
 
ty≥
,

473 
uöt
 
mask
,

474 *
dev
,

475 
uöt
 
vÆue
)

477 
fs_disk_quŸa_t
 
d
;

479 
	`mem£t
(&
d
, 0, (d));

480 
d
.
d_vîsi⁄
 = 
FS_DQUOT_VERSION
;

481 
d
.
d_Êags
 = 
ty≥
;

482 
d
.
d_fõldmask
 = 
mask
;

483 
d
.
d_ôimî
 = 
vÆue
;

484 
d
.
d_btimî
 = 
vÆue
;

485 
d
.
d_πbtimî
 = 
vÆue
;

487 i‡(
	`xfsquŸa˘l
(
XFS_SETQLIM
, 
dev
, 
ty≥
, 0, (*)&
d
) < 0) {

488 
exôcode
 = 1;

489 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot setÅimer: %s\n"),

490 
¥og«me
, 
	`°ªº‹
(
î∫o
));

492 
	}
}

495 
	$timî_f
(

496 
¨gc
,

497 **
¨gv
)

499 
uöt
 
vÆue
;

500 
c
, 
ty≥
 = 0, 
mask
 = 0;

502 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "bgùru")Ë!
EOF
) {

503 
c
) {

505 
mask
 |
FS_DQ_BTIMER
;

508 
mask
 |
FS_DQ_ITIMER
;

511 
mask
 |
FS_DQ_RTBTIMER
;

514 
ty≥
 |
XFS_GROUP_QUOTA
;

517 
ty≥
 |
XFS_PROJ_QUOTA
;

520 
ty≥
 |
XFS_USER_QUOTA
;

523  
	`comm™d_ußge
(&
timî_cmd
);

527 i‡(
¨gc
 !
›töd
 + 1)

528  
	`comm™d_ußge
(&
timî_cmd
);

530 
vÆue
 = 
	`cvâime
(
¨gv
[
›töd
++]);

532 i‡(!
mask
)

533 
mask
 = 
FS_DQ_TIMER_MASK
;

535 i‡(!
ty≥
) {

536 
ty≥
 = 
XFS_USER_QUOTA
;

537 } i‡(
ty≥
 !
XFS_GROUP_QUOTA
 &&

538 
ty≥
 !
XFS_PROJ_QUOTA
 &&

539 
ty≥
 !
XFS_USER_QUOTA
) {

540  
	`comm™d_ußge
(&
timî_cmd
);

543 
	`£t_timî
(
ty≥
, 
mask
, 
fs_∑th
->
fs_«me
, 
vÆue
);

545 
	}
}

548 
	$£t_w¨nögs
(

549 
__uöt32_t
 
id
,

550 
uöt
 
ty≥
,

551 
uöt
 
mask
,

552 *
dev
,

553 
uöt
 
vÆue
)

555 
fs_disk_quŸa_t
 
d
;

557 
	`mem£t
(&
d
, 0, (d));

558 
d
.
d_vîsi⁄
 = 
FS_DQUOT_VERSION
;

559 
d
.
d_id
 = 
id
;

560 
d
.
d_Êags
 = 
ty≥
;

561 
d
.
d_fõldmask
 = 
mask
;

562 
d
.
d_iw¨ns
 = 
vÆue
;

563 
d
.
d_bw¨ns
 = 
vÆue
;

564 
d
.
d_πbw¨ns
 = 
vÆue
;

566 i‡(
	`xfsquŸa˘l
(
XFS_SETQLIM
, 
dev
, 
ty≥
, 
id
, (*)&
d
) < 0) {

567 
exôcode
 = 1;

568 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot set warnings: %s\n"),

569 
¥og«me
, 
	`°ªº‹
(
î∫o
));

571 
	}
}

574 
	$£t_u£r_w¨nögs
(

575 *
«me
,

576 
uöt
 
ty≥
,

577 
uöt
 
mask
,

578 
uöt
 
vÆue
)

580 
uid_t
 
uid
 = 
	`uid_‰om_°rög
(
«me
);

582 i‡(
uid
 == -1) {

583 
exôcode
 = 1;

584 
	`Ârötf
(
°dîr
, 
	`_
("%s: invalid userÇame: %s\n"),

585 
¥og«me
, 
«me
);

587 
	`£t_w¨nögs
(
uid
, 
ty≥
, 
mask
, 
fs_∑th
->
fs_«me
, 
vÆue
);

588 
	}
}

591 
	$£t_group_w¨nögs
(

592 *
«me
,

593 
uöt
 
ty≥
,

594 
uöt
 
mask
,

595 
uöt
 
vÆue
)

597 
gid_t
 
gid
 = 
	`gid_‰om_°rög
(
«me
);

599 i‡(
gid
 == -1) {

600 
exôcode
 = 1;

601 
	`Ârötf
(
°dîr
, 
	`_
("%s: invalid groupÇame: %s\n"),

602 
¥og«me
, 
«me
);

604 
	`£t_w¨nögs
(
gid
, 
ty≥
, 
mask
, 
fs_∑th
->
fs_«me
, 
vÆue
);

605 
	}
}

608 
	$£t_¥oje˘_w¨nögs
(

609 *
«me
,

610 
uöt
 
ty≥
,

611 
uöt
 
mask
,

612 
uöt
 
vÆue
)

614 
¥id_t
 
¥id
 = 
	`¥id_‰om_°rög
(
«me
);

616 i‡(
¥id
 == -1) {

617 
exôcode
 = 1;

618 
	`Ârötf
(
°dîr
, 
	`_
("%s: invalidÖrojectÇame: %s\n"),

619 
¥og«me
, 
«me
);

621 
	`£t_w¨nögs
(
¥id
, 
ty≥
, 
mask
, 
fs_∑th
->
fs_«me
, 
vÆue
);

622 
	}
}

625 
	$w¨n_f
(

626 
¨gc
,

627 **
¨gv
)

629 *
«me
;

630 
uöt
 
vÆue
;

631 
c
, 
Êags
 = 0, 
ty≥
 = 0, 
mask
 = 0;

633 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "bdgùru")Ë!
EOF
) {

634 
c
) {

636 
Êags
 |
DEFAULTS_FLAG
;

639 
mask
 |
FS_DQ_BWARNS
;

642 
mask
 |
FS_DQ_IWARNS
;

645 
mask
 |
FS_DQ_RTBWARNS
;

648 
ty≥
 |
XFS_GROUP_QUOTA
;

651 
ty≥
 |
XFS_PROJ_QUOTA
;

654 
ty≥
 |
XFS_USER_QUOTA
;

657  
	`comm™d_ußge
(&
w¨n_cmd
);

666 i‡(
Êags
 & 
DEFAULTS_FLAG
) {

667 i‡(
¨gc
 !
›töd
 + 1)

668  
	`comm™d_ußge
(&
w¨n_cmd
);

669 } i‡(
¨gc
 !
›töd
 + 2) {

670  
	`comm™d_ußge
(&
w¨n_cmd
);

673 
vÆue
 = 
	`©oi
(
¨gv
[
›töd
++]);

674 
«me
 = (
Êags
 & 
DEFAULTS_FLAG
Ë? "0" : 
¨gv
[
›töd
++];

676 i‡(!
mask
)

677 
mask
 = 
FS_DQ_WARNS_MASK
;

679 i‡(!
ty≥
) {

680 
ty≥
 = 
XFS_USER_QUOTA
;

681 } i‡(
ty≥
 !
XFS_GROUP_QUOTA
 &&

682 
ty≥
 !
XFS_PROJ_QUOTA
 &&

683 
ty≥
 !
XFS_USER_QUOTA
) {

684  
	`comm™d_ußge
(&
w¨n_cmd
);

687 
ty≥
) {

688 
XFS_USER_QUOTA
:

689 
	`£t_u£r_w¨nögs
(
«me
, 
ty≥
, 
mask
, 
vÆue
);

691 
XFS_GROUP_QUOTA
:

692 
	`£t_group_w¨nögs
(
«me
, 
ty≥
, 
mask
, 
vÆue
);

694 
XFS_PROJ_QUOTA
:

695 
	`£t_¥oje˘_w¨nögs
(
«me
, 
ty≥
, 
mask
, 
vÆue
);

699 
	}
}

702 
	$edô_öô
()

704 
limô_cmd
.
«me
 = "limit";

705 
limô_cmd
.
cfunc
 = 
limô_f
;

706 
limô_cmd
.
¨gmö
 = 2;

707 
limô_cmd
.
¨gmax
 = -1;

708 
limô_cmd
.
¨gs
 = \

709 
	`_
("[-g|-p|-u] bsoft|bhard|isoft|ihard|rtbsoft|rtbhard=N -d|id|name");

710 
limô_cmd
.
⁄ñöe
 = 
	`_
("modify quotaÜimits");

711 
limô_cmd
.
hñp
 = 
limô_hñp
;

712 
limô_cmd
.
Êags
 = 
CMD_FLAG_FOREIGN_OK
;

714 
ª°‹e_cmd
.
«me
 = "restore";

715 
ª°‹e_cmd
.
cfunc
 = 
ª°‹e_f
;

716 
ª°‹e_cmd
.
¨gmö
 = 0;

717 
ª°‹e_cmd
.
¨gmax
 = -1;

718 
ª°‹e_cmd
.
¨gs
 = 
	`_
("[-g|-p|-u] [-f file]");

719 
ª°‹e_cmd
.
⁄ñöe
 = 
	`_
("restore quotaÜimits fromá backup file");

720 
ª°‹e_cmd
.
Êags
 = 
CMD_FLAG_FOREIGN_OK
;

722 
timî_cmd
.
«me
 = "timer";

723 
timî_cmd
.
cfunc
 = 
timî_f
;

724 
timî_cmd
.
¨gmö
 = 2;

725 
timî_cmd
.
¨gmax
 = -1;

726 
timî_cmd
.
¨gs
 = 
	`_
("[-bir] [-g|-p|-u] value");

727 
timî_cmd
.
⁄ñöe
 = 
	`_
("set quotaÉnforcementÅimeouts");

728 
timî_cmd
.
hñp
 = 
timî_hñp
;

729 
timî_cmd
.
Êags
 = 
CMD_FLAG_FOREIGN_OK
;

731 
w¨n_cmd
.
«me
 = "warn";

732 
w¨n_cmd
.
cfunc
 = 
w¨n_f
;

733 
w¨n_cmd
.
¨gmö
 = 2;

734 
w¨n_cmd
.
¨gmax
 = -1;

735 
w¨n_cmd
.
¨gs
 = 
	`_
("[-bir] [-g|-p|-u] value -d|id|name");

736 
w¨n_cmd
.
⁄ñöe
 = 
	`_
("get/setÉnforcement warning counter");

737 
w¨n_cmd
.
hñp
 = 
w¨n_hñp
;

739 i‡(
ex≥π
) {

740 
	`add_comm™d
(&
limô_cmd
);

741 
	`add_comm™d
(&
ª°‹e_cmd
);

742 
	`add_comm™d
(&
timî_cmd
);

743 
	`add_comm™d
(&
w¨n_cmd
);

745 
	}
}

	@quota/free.c

19 
	~<°dboﬁ.h
>

20 
	~"comm™d.h
"

21 
	~"öô.h
"

22 
	~"quŸa.h
"

24 
cmdöfo_t
 
	g‰ì_cmd
;

27 
	$‰ì_hñp
()

29 
	`¥ötf
(
	`_
(

43 
	}
}

50 
	$mou¡_‰ì_•a˚_d©a
(

51 
fs_∑th
 *
mou¡
,

52 
__uöt64_t
 *
bcou¡
,

53 
__uöt64_t
 *
bu£d
,

54 
__uöt64_t
 *
b‰ì
,

55 
__uöt64_t
 *
icou¡
,

56 
__uöt64_t
 *
iu£d
,

57 
__uöt64_t
 *
i‰ì
,

58 
__uöt64_t
 *
rcou¡
,

59 
__uöt64_t
 *
ru£d
,

60 
__uöt64_t
 *
r‰ì
)

62 
xfs_fs›_cou¡s
 
fscou¡s
;

63 
xfs_fs›_geom
 
fsgeo
;

64 
°©fs
 
°
;

65 
__uöt64_t
 
logsize
, 
cou¡
, 
‰ì
;

66 
fd
;

68 i‡((
fd
 = 
	`›í
(
mou¡
->
fs_dú
, 
O_RDONLY
)) < 0) {

69 
exôcode
 = 1;

70 
	`Ârötf
(
°dîr
, "%s: cannot open %s: %s\n",

71 
¥og«me
, 
mou¡
->
fs_dú
, 
	`°ªº‹
(
î∫o
));

75 i‡(
	`∂©f‹m_f°©fs
(
fd
, &
°
) < 0) {

76 
	`≥º‹
("fstatfs");

77 
	`˛o£
(
fd
);

81 i‡(!(
mou¡
->
fs_Êags
 & 
FS_FOREIGN
)) {

82 i‡((
	`xfs˘l
(
mou¡
->
fs_dú
, 
fd
, 
XFS_IOC_FSGEOMETRY_V1
,

83 &
fsgeo
)) < 0) {

84 
	`≥º‹
("XFS_IOC_FSGEOMETRY_V1");

85 
	`˛o£
(
fd
);

88 i‡((
	`xfs˘l
(
mou¡
->
fs_dú
, 
fd
, 
XFS_IOC_FSCOUNTS
,

89 &
fscou¡s
)) < 0) {

90 
	`≥º‹
("XFS_IOC_FSCOUNTS");

91 
	`˛o£
(
fd
);

95 
logsize
 = 
fsgeo
.
log°¨t
 ? fsgeo.
logblocks
 : 0;

96 
cou¡
 = (
fsgeo
.
d©ablocks
 - 
logsize
Ë* fsgeo.
blocksize
;

97 
‰ì
 = 
fscou¡s
.
‰ìd©a
 * 
fsgeo
.
blocksize
;

98 *
bcou¡
 = 
	`BTOBB
(
cou¡
);

99 *
b‰ì
 = 
	`BTOBB
(
‰ì
);

100 *
bu£d
 = 
	`BTOBB
(
cou¡
 - 
‰ì
);

102 
cou¡
 = 
fsgeo
.
πexã¡s
 * fsgeo.
πextsize
 * fsgeo.
blocksize
;

103 
‰ì
 = 
fscou¡s
.
‰ìπx
 * 
fsgeo
.
πextsize
 * fsgeo.
blocksize
;

104 *
rcou¡
 = 
	`BTOBB
(
cou¡
);

105 *
r‰ì
 = 
	`BTOBB
(
‰ì
);

106 *
ru£d
 = 
	`BTOBB
(
cou¡
 - 
‰ì
);

108 
cou¡
 = 
°
.
f_blocks
 * st.
f_bsize
;

109 
‰ì
 = 
°
.
f_b‰ì
 * st.
f_bsize
;

110 *
bcou¡
 = 
	`BTOBB
(
cou¡
);

111 *
b‰ì
 = 
	`BTOBB
(
‰ì
);

112 *
bu£d
 = 
	`BTOBB
(
cou¡
 - 
‰ì
);

114 *
rcou¡
 = 
	`BTOBB
(0);

115 *
r‰ì
 = 
	`BTOBB
(0);

116 *
ru£d
 = 
	`BTOBB
(0);

120 *
icou¡
 = 
°
.
f_fûes
;

121 *
i‰ì
 = 
°
.
f_f‰ì
;

122 *
iu£d
 = 
°
.
f_fûes
 - st.
f_f‰ì
;

124 
	`˛o£
(
fd
);

126 
	}
}

133 
	$¥oje˘s_‰ì_•a˚_d©a
(

134 
fs_∑th
 *
∑th
,

135 
__uöt64_t
 *
bcou¡
,

136 
__uöt64_t
 *
bu£d
,

137 
__uöt64_t
 *
b‰ì
,

138 
__uöt64_t
 *
icou¡
,

139 
__uöt64_t
 *
iu£d
,

140 
__uöt64_t
 *
i‰ì
,

141 
__uöt64_t
 *
rcou¡
,

142 
__uöt64_t
 *
ru£d
,

143 
__uöt64_t
 *
r‰ì
)

145 
fs_quŸa_°©_t
 
qfs
;

146 
fs_disk_quŸa_t
 
d
;

147 
fsx©å
 
fsx
;

148 
uöt
 
ty≥
 = 
XFS_PROJ_QUOTA
;

149 *
dev
 = 
∑th
->
fs_«me
;

150 
fd
;

152 i‡(
	`xfsquŸa˘l
(
XFS_GETQSTAT
, 
dev
, 
ty≥
, 0, &
qfs
) < 0 ||

153 !(
qfs
.
qs_Êags
 & 
XFS_QUOTA_PDQ_ACCT
))

156 i‡((
fd
 = 
	`›í
(
∑th
->
fs_dú
, 
O_RDONLY
)) < 0) {

157 
exôcode
 = 1;

158 
	`Ârötf
(
°dîr
, "%s: cannot open %s: %s\n",

159 
¥og«me
, 
∑th
->
fs_dú
, 
	`°ªº‹
(
î∫o
));

163 i‡((
	`xfs˘l
(
∑th
->
fs_dú
, 
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) < 0) {

164 
exôcode
 = 1;

165 
	`≥º‹
("FS_IOC_FSGETXATTR");

166 
	`˛o£
(
fd
);

169 i‡(!(
fsx
.
fsx_xÊags
 & 
FS_XFLAG_PROJINHERIT
)) {

170 
exôcode
 = 1;

171 
	`Ârötf
(
°dîr
, 
	`_
("%s:Öroject quota flagÇot set on %s\n"),

172 
¥og«me
, 
∑th
->
fs_dú
);

173 
	`˛o£
(
fd
);

177 i‡(
∑th
->
fs_¥id
 !
fsx
.
fsx_¥ojid
) {

178 
exôcode
 = 1;

179 
	`Ârötf
(
°dîr
,

180 
	`_
("%s:Öroject ID %u (%s) doesn't match ID %u (%s)\n"),

181 
¥og«me
, 
∑th
->
fs_¥id
, 
¥oje˘s_fûe
,

182 
fsx
.
fsx_¥ojid
, 
∑th
->
fs_dú
);

183 
	`˛o£
(
fd
);

187 
	`xfsquŸa˘l
(
XFS_QSYNC
, 
dev
, 
ty≥
, 
fsx
.
fsx_¥ojid
, 
NULL
);

188 i‡(
	`xfsquŸa˘l
(
XFS_GETQUOTA
, 
dev
, 
ty≥
, 
fsx
.
fsx_¥ojid
, &
d
) < 0) {

189 
	`≥º‹
("XFS_GETQUOTA");

190 
	`˛o£
(
fd
);

195 i‡(!
d
.
d_blk_so·limô
 || !d.
d_öo_so·limô
 || !d.
d_πb_so·limô
) {

196 
	`mou¡_‰ì_•a˚_d©a
(
∑th
, 
bcou¡
, 
bu£d
, 
b‰ì
,

197 
icou¡
, 
iu£d
, 
i‰ì
, 
rcou¡
, 
ru£d
, 
r‰ì
);

200 i‡(
d
.
d_blk_so·limô
) {

201 *
bcou¡
 = 
d
.
d_blk_so·limô
;

202 *
b‰ì
 = (
d
.
d_blk_so·limô
 - d.
d_bcou¡
);

204 *
bu£d
 = 
d
.
d_bcou¡
;

206 i‡(
d
.
d_öo_so·limô
) {

207 *
icou¡
 = 
d
.
d_öo_so·limô
;

208 *
i‰ì
 = (
d
.
d_öo_so·limô
 - d.
d_icou¡
);

210 *
iu£d
 = 
d
.
d_icou¡
;

212 i‡(
d
.
d_πb_so·limô
) {

213 *
rcou¡
 = 
d
.
d_πb_so·limô
;

214 *
r‰ì
 = (
d
.
d_πb_so·limô
 - d.
d_πbcou¡
);

216 *
ru£d
 = 
d
.
d_πbcou¡
;

218 
	`˛o£
(
fd
);

220 
	}
}

223 
	$‰ì_•a˚
(

224 
FILE
 *
Â
,

225 
uöt
 
f‹m
,

226 
fs_∑th_t
 *
∑th
,

227 
uöt
 
Êags
)

229 
__uöt64_t
 
bcou¡
, 
bu£d
, 
b‰ì
;

230 
__uöt64_t
 
icou¡
, 
iu£d
, 
i‰ì
;

231 
__uöt64_t
 
rcou¡
, 
ru£d
, 
r‰ì
;

232 
a
[8], 
s
[8], 
u
[8], 
p
[8];

233 
cou¡
;

235 
cou¡
 = (
∑th
->
fs_Êags
 & 
FS_PROJECT_PATH
) ?

236 
	`¥oje˘s_‰ì_•a˚_d©a
(
∑th
, &
bcou¡
, &
bu£d
, &
b‰ì
,

237 &
icou¡
, &
iu£d
, &
i‰ì
,

238 &
rcou¡
, &
ru£d
, &
r‰ì
) :

239 
	`mou¡_‰ì_•a˚_d©a
(
∑th
, &
bcou¡
, &
bu£d
, &
b‰ì
,

240 &
icou¡
, &
iu£d
, &
i‰ì
,

241 &
rcou¡
, &
ru£d
, &
r‰ì
);

242 i‡(!
cou¡
)

245 i‡(!(
Êags
 & 
NO_HEADER_FLAG
)) {

246 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

247 
	`_
("Filesystem ") : _("Filesystem "));

248 i‡(
f‹m
 & (
XFS_BLOCK_QUOTA
|
XFS_RTBLOCK_QUOTA
))

249 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

250 
	`_
(" Size Used Avail Use%%") :

251 
	`_
(" 1K-blocks Used Available Use%%"));

252 i‡(
f‹m
 & 
XFS_INODE_QUOTA
)

253 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

254 
	`_
(" Inodes Used Free Use%%") :

255 
	`_
(" Inodes IUsed IFree IUse%%"));

256 
	`Ârötf
(
Â
, 
	`_
(" Pathname\n"));

259 i‡(
Êags
 & 
HUMAN_FLAG
) {

260 
cou¡
 = 
	`Ârötf
(
Â
, "%-12s", 
∑th
->
fs_«me
);

261 i‡(
cou¡
 > 13)

262 
	`Ârötf
(
Â
, "\n%12s", " ");

264 
cou¡
 = 
	`Ârötf
(
Â
, "%-19s", 
∑th
->
fs_«me
);

265 i‡(
cou¡
 > 20)

266 
	`Ârötf
(
Â
, "\n%19s", " ");

269 i‡(
f‹m
 & 
XFS_BLOCK_QUOTA
) {

270 i‡(
Êags
 & 
HUMAN_FLAG
)

271 
	`Ârötf
(
Â
, " %6s %6s %6s %3s%%",

272 
	`bbs_to_°rög
(
bcou¡
, 
s
, (s)),

273 
	`bbs_to_°rög
(
bu£d
, 
u
, (u)),

274 
	`bbs_to_°rög
(
b‰ì
, 
a
, (a)),

275 
	`p˘_to_°rög
(
bu£d
, 
bcou¡
, 
p
, (p)));

277 
	`Ârötf
(
Â
, " %10llu %10llu %10llu %3s%%",

278 ()
bcou¡
 >> 1,

279 ()
bu£d
 >> 1,

280 ()
b‰ì
 >> 1,

281 
	`p˘_to_°rög
(
bu£d
, 
bcou¡
, 
p
, (p)));

282 } i‡(
f‹m
 & 
XFS_INODE_QUOTA
) {

283 i‡(
Êags
 & 
HUMAN_FLAG
)

284 
	`Ârötf
(
Â
, " %6s %6s %6s %3s%%",

285 
	`num_to_°rög
(
icou¡
, 
s
, (s)),

286 
	`num_to_°rög
(
iu£d
, 
u
, (u)),

287 
	`num_to_°rög
(
i‰ì
, 
a
, (a)),

288 
	`p˘_to_°rög
(
iu£d
, 
icou¡
, 
p
, (p)));

290 
	`Ârötf
(
Â
, " %10llu %10llu %10llu %3s%%",

291 ()
icou¡
,

292 ()
iu£d
,

293 ()
i‰ì
,

294 
	`p˘_to_°rög
(
iu£d
, 
icou¡
, 
p
, (p)));

295 } i‡(
f‹m
 & 
XFS_RTBLOCK_QUOTA
) {

296 i‡(
Êags
 & 
HUMAN_FLAG
)

297 
	`Ârötf
(
Â
, " %6s %6s %6s %3s%%",

298 
	`bbs_to_°rög
(
rcou¡
, 
s
, (s)),

299 
	`bbs_to_°rög
(
ru£d
, 
u
, (u)),

300 
	`bbs_to_°rög
(
r‰ì
, 
a
, (a)),

301 
	`p˘_to_°rög
(
ru£d
, 
rcou¡
, 
p
, (p)));

303 
	`Ârötf
(
Â
, " %10llu %10llu %10llu %3s%%",

304 ()
rcou¡
 >> 1,

305 ()
ru£d
 >> 1,

306 ()
r‰ì
 >> 1,

307 
	`p˘_to_°rög
(
ru£d
, 
rcou¡
, 
p
, (p)));

309 
	`Ârötf
(
Â
, " %s\n", 
∑th
->
fs_dú
);

311 
	}
}

314 
	$‰ì_•a˚_li°
(

315 
FILE
 *
Â
,

316 
uöt
 
f‹m
,

317 *
dú
,

318 
uöt
 
Êags
)

320 
fs_curs‹_t
 
curs‹
;

321 
fs_∑th_t
 *
∑th
;

323 
	`fs_curs‹_öôüli£
(
dú
, 0, &
curs‹
);

324 (
∑th
 = 
	`fs_curs‹_√xt_íåy
(&
curs‹
))) {

325 i‡(
	`‰ì_•a˚
(
Â
, 
f‹m
, 
∑th
, 
Êags
))

326 
Êags
 |
NO_HEADER_FLAG
;

328 
	}
}

331 
	$‰ì_f
(

332 
¨gc
,

333 **
¨gv
)

335 
FILE
 *
Â
 = 
NULL
;

336 *
‚ame
 = 
NULL
;

337 
c
, 
Êags
 = 0, 
f‹m
 = 0;

339 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "bf:hNú")Ë!
EOF
) {

340 
c
) {

342 
‚ame
 = 
›èrg
;

345 
f‹m
 |
XFS_BLOCK_QUOTA
;

348 
f‹m
 |
XFS_INODE_QUOTA
;

351 
f‹m
 |
XFS_RTBLOCK_QUOTA
;

354 
Êags
 |
HUMAN_FLAG
;

357 
Êags
 |
NO_HEADER_FLAG
;

360  
	`comm™d_ußge
(&
‰ì_cmd
);

364 i‡(!
f‹m
)

365 
f‹m
 = 
XFS_BLOCK_QUOTA
;

367 i‡((
Â
 = 
	`f›í_wrôe_£cuª
(
‚ame
)Ë=
NULL
)

370 i‡(
¨gc
 =
›töd
)

371 
	`‰ì_•a˚_li°
(
Â
, 
f‹m
, 
NULL
, 
Êags
);

372 
¨gc
 > 
›töd
)

373 
	`‰ì_•a˚_li°
(
Â
, 
f‹m
, 
¨gv
[
›töd
++], 
Êags
);

375 i‡(
‚ame
)

376 
	`f˛o£
(
Â
);

378 
	}
}

381 
	$‰ì_öô
()

383 
‰ì_cmd
.
«me
 = "df";

384 
‰ì_cmd
.
Æäame
 = "free";

385 
‰ì_cmd
.
cfunc
 = 
‰ì_f
;

386 
‰ì_cmd
.
¨gmö
 = 0;

387 
‰ì_cmd
.
¨gmax
 = -1;

388 
‰ì_cmd
.
¨gs
 = 
	`_
("[-bir] [-hN] [-f file]");

389 
‰ì_cmd
.
⁄ñöe
 = 
	`_
("show freeánd used counts for blocksánd inodes");

390 
‰ì_cmd
.
hñp
 = 
‰ì_hñp
;

391 
‰ì_cmd
.
Êags
 = 
CMD_FLAG_FOREIGN_OK
;

393 
	`add_comm™d
(&
‰ì_cmd
);

394 
	}
}

	@quota/freebsd.c

19 
	~"quŸa.h
"

22 
	$xfsquŸa˘l
(

23 
comm™d
,

24 c⁄° *
devi˚
,

25 
uöt
 
ty≥
,

26 
uöt
 
id
,

27 *
addr
)

29 
î∫o
 = -
ENOSYS
;

31 
	}
}

	@quota/init.c

19 
	~"∑th.h
"

20 
	~"comm™d.h
"

21 
	~"öput.h
"

22 
	~"öô.h
"

24 *
	g¥og«me
;

25 
	gexôcode
;

26 
	gex≥π
;

27 
boﬁ
 
	gf‹eign_Ælowed
 = 
Ál£
;

29 **
	g¥oj›ts
;

30 
	g≈roj›ts
;

33 
	$add_¥oje˘_›t
(

34 *
›èrg
)

36 
≈roj›ts
++;

37 
¥oj›ts
 = 
	`ªÆloc
’roj›ts, (*Ë* 
≈roj›ts
);

38 i‡(!
¥oj›ts
) {

39 
	`≥º‹
("realloc");

40 
	`exô
(1);

42 
¥oj›ts
[
≈roj›ts
 - 1] = 
›èrg
;

43 
	}
}

46 
	$ußge
()

48 
	`Ârötf
(
°dîr
,

49 
	`_
("Usage: %s [-V] [-x] [-f] [-pÖrog] [-c cmd]... [-dÖroject]... [path]\n"),

50 
¥og«me
);

51 
	`exô
(1);

52 
	}
}

55 
	$öô_cväum
(

56 *
blocksize
,

57 *
£˘size
)

59 *
blocksize
 = 4096;

60 *
£˘size
 = 512;

61 
	}
}

64 
	$öô_comm™ds
()

66 
	`edô_öô
();

67 
	`‰ì_öô
();

68 
	`hñp_öô
();

69 
	`∑th_öô
();

70 
	`¥oje˘_öô
();

71 
	`quŸ_öô
();

72 
	`quŸa_öô
();

73 
	`quô_öô
();

74 
	`ªp‹t_öô
();

75 
	`°©e_öô
();

76 
	}
}

84 
	$fûesy°em_ôî©‹
(

85 
ödex
)

87 i‡(
ödex
 >
fs_cou¡
)

91 
fs_∑th
 = &
fs_èbÀ
[
ödex
++];

93 i‡((
fs_∑th
->
fs_Êags
 & 
FS_PROJECT_PATH
))

97 i‡(!
f‹eign_Ælowed
 && (
fs_∑th
->
fs_Êags
 & 
FS_FOREIGN
))

102 } 
ödex
 < 
fs_cou¡
);

104 i‡(
fs_∑th
->
fs_Êags
 & 
FS_PROJECT_PATH
)

106 i‡(!
f‹eign_Ælowed
 && (
fs_∑th
->
fs_Êags
 & 
FS_FOREIGN
))

108 i‡(
ödex
 > 
fs_cou¡
)

110  
ödex
;

111 
	}
}

114 
	$öô_check_comm™d
(

115 c⁄° 
cmdöfo_t
 *
˘
)

117 i‡(!
fs_∑th
)

121 i‡(!(
fs_∑th
->
fs_Êags
 & 
FS_FOREIGN
))

125 i‡(
f‹eign_Ælowed
 &&

126 (
˘
->
Êags
 & 
CMD_FLAG_FOREIGN_OK
))

130 i‡(!(
˘
->
Êags
 & 
CMD_FLAG_FOREIGN_OK
)) {

131 
	`Ârötf
(
°dîr
, 
	`_
("%s: command is for XFS filesystems only\n"),

132 
˘
->
«me
);

137 
	`Ârötf
(
°dîr
,

138 
	`_
("%s: foreign filesystem. Invoke xfs_quota with -fÅoÉnable.\n"),

139 
˘
->
«me
);

141 
	}
}

144 
	$öô
(

145 
¨gc
,

146 **
¨gv
)

148 
c
;

150 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

151 
	`£éoˇÀ
(
LC_ALL
, "");

152 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

153 
	`ãxtdomaö
(
PACKAGE
);

155 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:d:D:fP:p:t:xV")Ë!
EOF
) {

156 
c
) {

158 
	`add_u£r_comm™d
(
›èrg
);

161 
	`add_¥oje˘_›t
(
›èrg
);

164 
f‹eign_Ælowed
 = 
åue
;

167 
mèb_fûe
 = 
›èrg
;

170 
¥oje˘s_fûe
 = 
›èrg
;

173 
¥ojid_fûe
 = 
›èrg
;

176 
¥og«me
 = 
›èrg
;

179 
ex≥π
++;

182 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
¥og«me
, 
VERSION
);

183 
	`exô
(0);

185 
	`ußge
();

189 
	`fs_èbÀ_öôüli£
(
¨gc
 - 
›töd
, &
¨gv
[›töd], 
≈roj›ts
, 
¥oj›ts
);

190 
	`‰ì
(
¥oj›ts
);

192 
	`öô_comm™ds
();

193 
	`add_comm™d_ôî©‹
(
fûesy°em_ôî©‹
);

194 
	`add_check_comm™d
(
öô_check_comm™d
);

200 i‡(
¨gc
 !
›töd
)

201 
fs_∑th
 = 
	`fs_èbÀ_lookup
(
¨gv
[
›töd
], 
FS_MOUNT_POINT
);

203 
fs_∑th
 = &
fs_èbÀ
[0];

204 
	}
}

207 
	$maö
(

208 
¨gc
,

209 **
¨gv
)

211 
	`öô
(
¨gc
, 
¨gv
);

212 
	`comm™d_lo›
();

213  
exôcode
;

214 
	}
}

	@quota/init.h

19 *
¥og«me
;

20 
exôcode
;

21 
ex≥π
;

22 
boﬁ
 
f‹eign_Ælowed
;

24 
edô_öô
();

25 
‰ì_öô
();

26 
∑th_öô
();

27 
¥oje˘_öô
();

28 
quŸ_öô
();

29 
quŸa_öô
();

30 
ªp‹t_öô
();

31 
°©e_öô
();

33 
öô_cväum
(*, *);

	@quota/irix.c

19 
	~"quŸa.h
"

20 
	~<sys/quŸa.h
>

23 
	$xcomm™d_to_qcomm™d
(

24 
uöt
 
comm™d
,

25 
uöt
 
ty≥
)

27 
comm™d
) {

28 
XFS_QUOTAON
:

29  
Q_XQUOTAON
;

30 
XFS_QUOTAOFF
:

31  
Q_XQUOTAOFF
;

32 
XFS_GETQUOTA
:

33 i‡(
ty≥
 =
XFS_GROUP_QUOTA
)

34  
Q_XGETGQUOTA
;

35 i‡(
ty≥
 =
XFS_PROJ_QUOTA
)

36  
Q_XGETPQUOTA
;

37  
Q_XGETQUOTA
;

38 
XFS_SETQLIM
:

39 i‡(
ty≥
 =
XFS_GROUP_QUOTA
)

40  
Q_XSETGQLIM
;

41 i‡(
ty≥
 =
XFS_PROJ_QUOTA
)

42  
Q_XSETPQLIM
;

43  
Q_XSETQLIM
;

44 
XFS_GETQSTAT
:

45  
Q_XGETQSTAT
;

46 
XFS_QUOTARM
:

47  
Q_XQUOTARM
;

48 
XFS_QSYNC
:

49  
Q_SYNC
;

52 
	}
}

55 
	$xfsquŸa˘l
(

56 
comm™d
,

57 c⁄° *
devi˚
,

58 
uöt
 
ty≥
,

59 
uöt
 
id
,

60 *
addr
)

62 
qcomm™d
;

64 
qcomm™d
 = 
	`xcomm™d_to_qcomm™d
(
comm™d
, 
ty≥
);

65  
	`quŸa˘l
(
qcomm™d
, (*)
devi˚
, 
id
, 
addr
);

66 
	}
}

	@quota/linux.c

19 
	~"quŸa.h
"

20 
	~<sys/quŸa.h
>

22 #i‚de‡
PRJQUOTA


23 
	#PRJQUOTA
 2

	)

27 
	$xty≥_to_qty≥
(

28 
uöt
 
ty≥
)

30 
ty≥
) {

31 
XFS_USER_QUOTA
:

32  
USRQUOTA
;

33 
XFS_GROUP_QUOTA
:

34  
GRPQUOTA
;

35 
XFS_PROJ_QUOTA
:

36  
PRJQUOTA
;

39 
	}
}

42 
	$xcomm™d_to_qcomm™d
(

43 
uöt
 
comm™d
)

45 
comm™d
) {

46 
XFS_QUOTAON
:

47  
Q_XQUOTAON
;

48 
XFS_QUOTAOFF
:

49  
Q_XQUOTAOFF
;

50 
XFS_GETQUOTA
:

51  
Q_XGETQUOTA
;

52 
XFS_GETNEXTQUOTA
:

53  
Q_XGETNEXTQUOTA
;

54 
XFS_SETQLIM
:

55  
Q_XSETQLIM
;

56 
XFS_GETQSTAT
:

57  
Q_XGETQSTAT
;

58 
XFS_GETQSTATV
:

59  
Q_XGETQSTATV
;

60 
XFS_QUOTARM
:

61  
Q_XQUOTARM
;

62 
XFS_QSYNC
:

63  
Q_XQUOTASYNC
;

66 
	}
}

69 
	$xfsquŸa˘l
(

70 
comm™d
,

71 c⁄° *
devi˚
,

72 
uöt
 
ty≥
,

73 
uöt
 
id
,

74 *
addr
)

76 
qcomm™d
, 
qty≥
;

78 
qty≥
 = 
	`xty≥_to_qty≥
(
ty≥
);

79 
qcomm™d
 = 
	`xcomm™d_to_qcomm™d
(
comm™d
);

81  
	`quŸa˘l
(
	`QCMD
(
qcomm™d
, 
qty≥
), 
devi˚
, 
id
, 
addr
);

82 
	}
}

	@quota/path.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"quŸa.h
"

24 
cmdöfo_t
 
	g∑th_cmd
;

25 
cmdöfo_t
 
	g¥öt_cmd
;

28 
	$¥öç©h
(

29 
fs_∑th
 *
∑th
,

30 
ödex
,

31 
numbî
,

32 
bø˚s
)

34 
fs_quŸa_°©_t
 
q°©
;

35 
fs_¥oje˘_t
 *
¥j
;

36 
c
;

38 i‡(
ödex
 == 0) {

39 
	`¥ötf
(
	`_
("%s%sFilesystem Pathname\n"),

40 
numbî
 ? 
	`_
(" ") : "",

41 
f‹eign_Ælowed
 ? 
	`_
(" ") : "");

43 i‡(
numbî
)

44 
	`¥ötf
(
	`_
("%c%03d%¯"), 
bø˚s
? '[':' ', 
ödex
, braces? ']':' ');

45 i‡(
f‹eign_Ælowed
)

46 
	`¥ötf
("%s", (
∑th
->
fs_Êags
 & 
FS_FOREIGN
) ? "(F) " : " ");

47 
	`¥ötf
(
	`_
("%-19†%s"), 
∑th
->
fs_dú
,Ö©h->
fs_«me
);

48 i‡(
∑th
->
fs_Êags
 & 
FS_PROJECT_PATH
) {

49 
¥j
 = 
	`gë¥¥id
(
∑th
->
fs_¥id
);

50 
	`¥ötf
(
	`_
(" (¥oje˘ %u"), 
∑th
->
fs_¥id
);

51 i‡(
¥j
)

52 
	`¥ötf
(
	`_
(", %s"), 
¥j
->
¥_«me
);

53 
	`¥ötf
(")");

54 } i‡(
	`xfsquŸa˘l
(
XFS_GETQSTAT
, 
∑th
->
fs_«me
, 0, 0,

55 (*)&
q°©
Ë=0 && q°©.
qs_Êags
) {

56 
c
 = 0;

57 
	`¥ötf
(" (");

58 i‡(
q°©
.
qs_Êags
 & 
XFS_QUOTA_UDQ_ENFD
)

59 
c
 = 
	`¥ötf
("uquota");

60 i‡(
q°©
.
qs_Êags
 & 
XFS_QUOTA_UDQ_ACCT
)

61 
c
 = 
	`¥ötf
("uqnoenforce");

62 i‡(
q°©
.
qs_Êags
 & 
XFS_QUOTA_GDQ_ENFD
)

63 
c
 = 
	`¥ötf
("%sgquota", c ? ", " : "");

64 i‡(
q°©
.
qs_Êags
 & 
XFS_QUOTA_GDQ_ACCT
)

65 
c
 = 
	`¥ötf
("%sgqnoenforce", c ? ", " : "");

66 i‡(
q°©
.
qs_Êags
 & 
XFS_QUOTA_PDQ_ENFD
)

67 
	`¥ötf
("%•quŸa", 
c
 ? ", " : "");

68 i‡(
q°©
.
qs_Êags
 & 
XFS_QUOTA_PDQ_ACCT
)

69 
	`¥ötf
("%•qn€nf‹˚", 
c
 ? ", " : "");

70 
	`¥ötf
(")");

72 
	`¥ötf
("\n");

73 
	}
}

76 
	$∑thli°_f
()

78 
i
;

79 
fs_∑th
 *
∑th
;

81 
i
 = 0; i < 
fs_cou¡
; i++) {

82 
∑th
 = &
fs_èbÀ
[
i
];

84 i‡(
∑th
->
fs_Êags
 & 
FS_FOREIGN
 && !
f‹eign_Ælowed
)

86 
	`¥öç©h
(
∑th
, 
i
, 1,Ö©h =
fs_∑th
);

89 
	}
}

92 
	$¥öt_f
(

93 
¨gc
,

94 **
¨gv
)

96 
i
;

97 
fs_∑th
 *
∑th
;

99 
i
 = 0; i < 
fs_cou¡
; i++) {

100 
∑th
 = &
fs_èbÀ
[
i
];

101 i‡(
∑th
->
fs_Êags
 & 
FS_FOREIGN
 && !
f‹eign_Ælowed
)

103 
	`¥öç©h
(
∑th
, 
i
, 0, 0);

106 
	}
}

109 
	$∑th_f
(

110 
¨gc
,

111 **
¨gv
)

113 
i
;

114 
max
 = 
f‹eign_Ælowed
 ? 
fs_cou¡
 : 
xfs_fs_cou¡
;

116 i‡(
fs_cou¡
 == 0) {

117 
	`¥ötf
(
	`_
("NoÖathsáreávailable\n"));

121 i‡(
¨gc
 <= 1)

122  
	`∑thli°_f
();

124 
i
 = 
	`©oi
(
¨gv
[1]);

125 i‡(
i
 < 0 || i >
max
) {

126 
	`¥ötf
(
	`_
("value %d is out ofÑange (0-%d)\n"),

127 
i
, 
max
 - 1);

129 
fs_∑th
 = &
fs_èbÀ
[
i
];

130 
	`∑thli°_f
();

133 
	}
}

136 
	$∑th_öô
()

138 
∑th_cmd
.
«me
 = "path";

139 
∑th_cmd
.
Æäame
 = "paths";

140 
∑th_cmd
.
¨gs
 = 
	`_
("[N]");

141 
∑th_cmd
.
cfunc
 = 
∑th_f
;

142 
∑th_cmd
.
¨gmö
 = 0;

143 
∑th_cmd
.
¨gmax
 = 1;

144 
∑th_cmd
.
Êags
 = 
CMD_FLAG_ONESHOT
 | 
CMD_FLAG_FOREIGN_OK
;

145 
∑th_cmd
.
⁄ñöe
 = 
	`_
("set currentÖath, or showÅheÜist ofÖaths");

147 
¥öt_cmd
.
«me
 = "print";

148 
¥öt_cmd
.
Æäame
 = "p";

149 
¥öt_cmd
.
cfunc
 = 
¥öt_f
;

150 
¥öt_cmd
.
¨gmö
 = 0;

151 
¥öt_cmd
.
¨gmax
 = 0;

152 
¥öt_cmd
.
Êags
 = 
CMD_FLAG_ONESHOT
 | 
CMD_FLAG_FOREIGN_OK
;

153 
¥öt_cmd
.
⁄ñöe
 = 
	`_
("list known mountÖointsándÖrojects");

155 i‡(
ex≥π
)

156 
	`add_comm™d
(&
∑th_cmd
);

157 
	`add_comm™d
(&
¥öt_cmd
);

158 
	}
}

	@quota/project.c

19 
	~"comm™d.h
"

20 
	~"öput.h
"

21 
	~"öô.h
"

22 
	~"quŸa.h
"

24 
cmdöfo_t
 
	g¥oje˘_cmd
;

25 
¥id_t
 
	g¥id
;

26 
	gªcur£_dïth
 = -1;

29 
	mCHECK_PROJECT
 = 0x1,

30 
	mSETUP_PROJECT
 = 0x2,

31 
	mCLEAR_PROJECT
 = 0x4,

34 
	#EXCLUDED_FILE_TYPES
(
x
) \

35 (
	`S_ISCHR
((
x
)) \

36 || 
	`S_ISBLK
((
x
)) \

37 || 
	`S_ISFIFO
((
x
)) \

38 || 
	`S_ISLNK
((
x
)) \

39 || 
	`S_ISSOCK
((
x
)))

	)

42 
	$¥oje˘_hñp
()

44 
	`¥ötf
(
	`_
(

91 
	}
}

94 
	$check_¥oje˘
(

95 c⁄° *
∑th
,

96 c⁄° 
°©
 *stat,

97 
Êag
,

98 
FTW
 *
d©a
)

100 
fsx©å
 
fsx
;

101 
fd
;

103 i‡(
ªcur£_dïth
 >0 && 
d©a
->
Àvñ
 >Ñecurse_depth)

106 i‡(
Êag
 =
FTW_NS
 ){

107 
exôcode
 = 1;

108 
	`Ârötf
(
°dîr
, 
	`_
("%s: c™nŸ sèàfûê%s\n"), 
¥og«me
, 
∑th
);

111 i‡(
	`EXCLUDED_FILE_TYPES
(
°©
->
°_mode
)) {

112 
	`Ârötf
(
°dîr
, 
	`_
("%s: skùpög s≥cü»fûê%s\n"), 
¥og«me
, 
∑th
);

116 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
|
O_NOCTTY
)) == -1) {

117 
exôcode
 = 1;

118 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

119 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

120 } i‡((
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
)) < 0) {

121 
exôcode
 = 1;

122 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot get flags on %s: %s\n"),

123 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

125 i‡(
fsx
.
fsx_¥ojid
 !
¥id
)

126 
	`¥ötf
(
	`_
("%s -Öroject identifier isÇot set"

128 
∑th
, 
fsx
.
fsx_¥ojid
, ()
¥id
);

129 i‡(!(
fsx
.
fsx_xÊags
 & 
FS_XFLAG_PROJINHERIT
))

130 
	`¥ötf
(
	`_
("%s -Öroject inheritance flag isÇot set\n"),

131 
∑th
);

133 i‡(
fd
 != -1)

134 
	`˛o£
(
fd
);

136 
	}
}

139 
	$˛ór_¥oje˘
(

140 c⁄° *
∑th
,

141 c⁄° 
°©
 *stat,

142 
Êag
,

143 
FTW
 *
d©a
)

145 
fsx©å
 
fsx
;

146 
fd
;

148 i‡(
ªcur£_dïth
 >0 && 
d©a
->
Àvñ
 >Ñecurse_depth)

151 i‡(
Êag
 =
FTW_NS
 ){

152 
exôcode
 = 1;

153 
	`Ârötf
(
°dîr
, 
	`_
("%s: c™nŸ sèàfûê%s\n"), 
¥og«me
, 
∑th
);

156 i‡(
	`EXCLUDED_FILE_TYPES
(
°©
->
°_mode
)) {

157 
	`Ârötf
(
°dîr
, 
	`_
("%s: skùpög s≥cü»fûê%s\n"), 
¥og«me
, 
∑th
);

161 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
|
O_NOCTTY
)) == -1) {

162 
exôcode
 = 1;

163 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

164 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

166 } i‡(
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
) < 0) {

167 
exôcode
 = 1;

168 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot get flags on %s: %s\n"),

169 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

170 
	`˛o£
(
fd
);

174 
fsx
.
fsx_¥ojid
 = 0;

175 
fsx
.
fsx_xÊags
 &~
FS_XFLAG_PROJINHERIT
;

176 i‡(
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSSETXATTR
, &
fsx
) < 0) {

177 
exôcode
 = 1;

178 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot clearÖroject on %s: %s\n"),

179 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

181 
	`˛o£
(
fd
);

183 
	}
}

186 
	$£tup_¥oje˘
(

187 c⁄° *
∑th
,

188 c⁄° 
°©
 *stat,

189 
Êag
,

190 
FTW
 *
d©a
)

192 
fsx©å
 
fsx
;

193 
fd
;

195 i‡(
ªcur£_dïth
 >0 && 
d©a
->
Àvñ
 >Ñecurse_depth)

198 i‡(
Êag
 =
FTW_NS
 ){

199 
exôcode
 = 1;

200 
	`Ârötf
(
°dîr
, 
	`_
("%s: c™nŸ sèàfûê%s\n"), 
¥og«me
, 
∑th
);

203 i‡(
	`EXCLUDED_FILE_TYPES
(
°©
->
°_mode
)) {

204 
	`Ârötf
(
°dîr
, 
	`_
("%s: skùpög s≥cü»fûê%s\n"), 
¥og«me
, 
∑th
);

208 i‡((
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
|
O_NOCTTY
)) == -1) {

209 
exôcode
 = 1;

210 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot open %s: %s\n"),

211 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

213 } i‡(
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSGETXATTR
, &
fsx
) < 0) {

214 
exôcode
 = 1;

215 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot get flags on %s: %s\n"),

216 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

217 
	`˛o£
(
fd
);

221 
fsx
.
fsx_¥ojid
 = 
¥id
;

222 
fsx
.
fsx_xÊags
 |
FS_XFLAG_PROJINHERIT
;

223 i‡(
	`xfs˘l
(
∑th
, 
fd
, 
FS_IOC_FSSETXATTR
, &
fsx
) < 0) {

224 
exôcode
 = 1;

225 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot setÖroject on %s: %s\n"),

226 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

228 
	`˛o£
(
fd
);

230 
	}
}

233 
	$¥oje˘_›î©i⁄s
(

234 *
¥oje˘
,

235 *
dú
,

236 
ty≥
)

238 
ty≥
) {

239 
CHECK_PROJECT
:

240 
	`¥ötf
(
	`_
("CheckögÖroje˘ %†’©h %s)...\n"), 
¥oje˘
, 
dú
);

241 
	`n·w
(
dú
, 
check_¥oje˘
, 100, 
FTW_PHYS
|
FTW_MOUNT
);

243 
SETUP_PROJECT
:

244 
	`¥ötf
(
	`_
("Sëtög u∞¥oje˘ %†’©h %s)...\n"), 
¥oje˘
, 
dú
);

245 
	`n·w
(
dú
, 
£tup_¥oje˘
, 100, 
FTW_PHYS
|
FTW_MOUNT
);

247 
CLEAR_PROJECT
:

248 
	`¥ötf
(
	`_
("CÀ¨ögÖroje˘ %†’©h %s)...\n"), 
¥oje˘
, 
dú
);

249 
	`n·w
(
dú
, 
˛ór_¥oje˘
, 100, 
FTW_PHYS
|
FTW_MOUNT
);

252 
	}
}

255 
	$¥oje˘
(

256 *
¥oje˘
,

257 
ty≥
)

259 
fs_curs‹_t
 
curs‹
;

260 
fs_∑th_t
 *
∑th
;

261 
cou¡
 = 0;

263 
	`fs_curs‹_öôüli£
(
NULL
, 
FS_PROJECT_PATH
, &
curs‹
);

264 (
∑th
 = 
	`fs_curs‹_√xt_íåy
(&
curs‹
))) {

265 i‡(
¥id
 !
∑th
->
fs_¥id
 &&Öath->fs_prid != -1)

267 
	`¥oje˘_›î©i⁄s
(
¥oje˘
, 
∑th
->
fs_dú
, 
ty≥
);

268 
cou¡
++;

271 
	`¥ötf
(
	`_
("Processed %d (%sánd cmdline)Öaths forÖroject %s with "

273 
cou¡
, 
¥oje˘s_fûe
, 
¥oje˘
,

274 
ªcur£_dïth
 < 0 ? 
	`_
("infinite") : _("limited"),Ñecurse_depth);

275 
	}
}

278 
	$¥oje˘_f
(

279 
¨gc
,

280 **
¨gv
)

282 
c
, 
ty≥
 = 0, 
i•©h
 = 0;

284 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "cd:p:sC")Ë!
EOF
) {

285 
c
) {

287 
ty≥
 = 
CHECK_PROJECT
;

290 
ªcur£_dïth
 = 
	`©oi
(
›èrg
);

291 i‡(
ªcur£_dïth
 < 0)

292 
ªcur£_dïth
 = -1;

295 
i•©h
 = 1;

296 
	`fs_èbÀ_ö£π_¥oje˘_∑th
(
›èrg
, -1);

299 
ty≥
 = 
SETUP_PROJECT
;

302 
ty≥
 = 
CLEAR_PROJECT
;

305  
	`comm™d_ußge
(&
¥oje˘_cmd
);

309 i‡(
¨gc
 =
›töd
)

310  
	`comm™d_ußge
(&
¥oje˘_cmd
);

313 i‡(!
ty≥
)

314 
ty≥
 = 
CHECK_PROJECT
;

316 
	`£çrfûes
();

317 i‡(!
i•©h
 && 
	`ac˚ss
(
¥oje˘s_fûe
, 
F_OK
) != 0) {

318 
exôcode
 = 1;

319 
	`Ârötf
(
°dîr
, 
	`_
("projects file \"%s\" doesn'tÉxist\n"),

320 
¥oje˘s_fûe
);

324 i‡(
i•©h
 && 
¨gc
 - 
›töd
 > 1) {

325 
exôcode
 = 1;

326 
	`Ârötf
(
°dîr
, 
	`_
("%s: only oneÖrojid/name can be specified "

328 
¥og«me
, 
¨gc
 - 
›töd
);

332 
¨gc
 > 
›töd
) {

333 
¥id
 = 
	`¥id_‰om_°rög
(
¨gv
[
›töd
]);

334 i‡(
¥id
 == -1) {

335 
exôcode
 = 1;

336 
	`Ârötf
(
°dîr
, 
	`_
("%s -Ço suchÖroject in %s "

338 
¨gv
[
›töd
], 
¥oje˘s_fûe
);

340 
	`¥oje˘
(
¨gv
[
›töd
], 
ty≥
);

341 
›töd
++;

345 
	}
}

348 
	$¥oje˘_öô
()

350 
¥oje˘_cmd
.
«me
 = "project";

351 
¥oje˘_cmd
.
Æäame
 = "tree";

352 
¥oje˘_cmd
.
cfunc
 = 
¥oje˘_f
;

353 
¥oje˘_cmd
.
¨gs
 = 
	`_
("[-c|-s|-C|-d <depth>|-p <path>]Öroject ...");

354 
¥oje˘_cmd
.
¨gmö
 = 1;

355 
¥oje˘_cmd
.
¨gmax
 = -1;

356 
¥oje˘_cmd
.
⁄ñöe
 = 
	`_
("check, setup or clearÖroject quotaÅrees");

357 
¥oje˘_cmd
.
hñp
 = 
¥oje˘_hñp
;

358 
¥oje˘_cmd
.
Êags
 = 
CMD_FLAG_FOREIGN_OK
;

360 i‡(
ex≥π
)

361 
	`add_comm™d
(&
¥oje˘_cmd
);

362 
	}
}

	@quota/quot.c

19 
	~<°dboﬁ.h
>

20 
	~"comm™d.h
"

21 
	~<˘y≥.h
>

22 
	~<pwd.h
>

23 
	~<gΩ.h
>

24 
	~"öô.h
"

25 
	~"quŸa.h
"

27 
	sdu
 {

28 
du
 *
	m√xt
;

29 
__uöt64_t
 
	mblocks
;

30 
__uöt64_t
 
	mblocks30
;

31 
__uöt64_t
 
	mblocks60
;

32 
__uöt64_t
 
	mblocks90
;

33 
__uöt64_t
 
	mnfûes
;

34 
__uöt32_t
 
	mid
;

35 } 
	tdu_t
;

37 
	#TSIZE
 500

	)

38 
__uöt64_t
 
	gsizes
[
TSIZE
];

39 
__uöt64_t
 
	govîÊow
;

41 
	#NDU
 60000

	)

42 
	#DUHASH
 8209

	)

43 
du_t
 
	gdu
[3][
NDU
];

44 
du_t
 *
	gduhash
[3][
DUHASH
];

45 
	gndu
[3];

47 
	#NBSTAT
 4069

	)

49 
time_t
 
	gnow
;

50 
cmdöfo_t
 
	gquŸ_cmd
;

53 
	$quŸ_hñp
()

55 
	`¥ötf
(
	`_
(

78 
	}
}

81 
	$quŸ_bulk°©_add
(

82 
xfs_b°©_t
 *
p
,

83 
uöt
 
Êags
)

85 
du_t
 *
dp
;

86 
du_t
 **
hp
;

87 
__uöt64_t
 
size
;

88 
__uöt32_t
 
i
, 
id
;

90 i‡((
p
->
bs_mode
 & 
S_IFMT
) == 0)

92 
size
 = 
	`howm™y
((
p
->
bs_blocks
 *Ö->
bs_blksize
), 0x400ULL);

94 i‡(
Êags
 & 
HISTOGRAM_FLAG
) {

95 i‡(!(
	`S_ISDIR
(
p
->
bs_mode
Ë|| 
	`S_ISREG
(p->bs_mode)))

97 i‡(
size
 >
TSIZE
) {

98 
ovîÊow
 +
size
;

99 
size
 = 
TSIZE
 - 1;

101 
sizes
[()
size
]++;

104 
i
 = 0; i < 3; i++) {

105 
id
 = (
i
 =0Ë? 
p
->
bs_uid
 : ((i == 1) ?

106 
p
->
bs_gid
 : 
	`b°©_gë_¥ojid
(p));

107 
hp
 = &
duhash
[
i
][
id
 % 
DUHASH
];

108 
dp
 = *
hp
; dp; d∞dp->
√xt
)

109 i‡(
dp
->
id
 == id)

111 i‡(
dp
 =
NULL
) {

112 i‡(
ndu
[
i
] >
NDU
)

114 
dp
 = &
du
[
i
][(
ndu
[i]++)];

115 
dp
->
√xt
 = *
hp
;

116 *
hp
 = 
dp
;

117 
dp
->
id
 = id;

118 
dp
->
nfûes
 = 0;

119 
dp
->
blocks
 = 0;

120 
dp
->
blocks30
 = 0;

121 
dp
->
blocks60
 = 0;

122 
dp
->
blocks90
 = 0;

124 
dp
->
blocks
 +
size
;

126 i‡(
now
 - 
p
->
bs_©ime
.
tv_£c
 > 30 * (60*60*24))

127 
dp
->
blocks30
 +
size
;

128 i‡(
now
 - 
p
->
bs_©ime
.
tv_£c
 > 60 * (60*60*24))

129 
dp
->
blocks60
 +
size
;

130 i‡(
now
 - 
p
->
bs_©ime
.
tv_£c
 > 90 * (60*60*24))

131 
dp
->
blocks90
 +
size
;

132 
dp
->
nfûes
++;

134 
	}
}

137 
	$quŸ_bulk°©_mou¡
(

138 *
fsdú
,

139 
uöt
 
Êags
)

141 
xfs_fs›_bulkªq_t
 
bulkªq
;

142 
xfs_b°©_t
 *
buf
;

143 
__u64
 
œ°
 = 0;

144 
__s32
 
cou¡
;

145 
i
, 
°s
, 
fsfd
;

146 
du_t
 **
dp
;

152 
°s
 = 0; st†< 
TSIZE
; sts++)

153 
sizes
[
°s
] = 0;

154 
ovîÊow
 = 0;

155 
i
 = 0; i < 3; i++)

156 
dp
 = 
duhash
[
i
]; d∞< &duhash[i][
DUHASH
]; dp++)

157 *
dp
 = 
NULL
;

158 
ndu
[0] =Çdu[1] =Çdu[2] = 0;

160 
fsfd
 = 
	`›í
(
fsdú
, 
O_RDONLY
);

161 i‡(
fsfd
 < 0) {

162 
	`≥º‹
(
fsdú
);

166 
buf
 = (
xfs_b°©_t
 *)
	`ˇŒoc
(
NBSTAT
, (xfs_bstat_t));

167 i‡(!
buf
) {

168 
	`≥º‹
("calloc");

169 
	`˛o£
(
fsfd
);

173 
bulkªq
.
œ°ù
 = &
œ°
;

174 
bulkªq
.
icou¡
 = 
NBSTAT
;

175 
bulkªq
.
ubuf„r
 = 
buf
;

176 
bulkªq
.
ocou¡
 = &
cou¡
;

178 (
°s
 = 
	`xfs˘l
(
fsdú
, 
fsfd
, 
XFS_IOC_FSBULKSTAT
, &
bulkªq
)) == 0) {

179 i‡(
cou¡
 == 0)

181 
i
 = 0; i < 
cou¡
; i++)

182 
	`quŸ_bulk°©_add
(&
buf
[
i
], 
Êags
);

184 i‡(
°s
 < 0)

185 
	`≥º‹
("XFS_IOC_FSBULKSTAT"),

186 
	`‰ì
(
buf
);

187 
	`˛o£
(
fsfd
);

188 
	}
}

191 
	$qcom∑ª
(

192 
du_t
 *
p1
,

193 
du_t
 *
p2
)

195 i‡(
p1
->
blocks
 > 
p2
->blocks)

197 i‡(
p1
->
blocks
 < 
p2
->blocks)

199 i‡(
p1
->
id
 > 
p2
->id)

201 i‡(
p1
->
id
 < 
p2
->id)

204 
	}
}

206 *(*
	tidt⁄ame_t
)(
	t__uöt32_t
);

209 
	$quŸ_ªp‹t_mou¡_™y_ty≥
(

210 
FILE
 *
Â
,

211 
du_t
 *
dp
,

212 
cou¡
,

213 
idt⁄ame_t
 
«mes
,

214 
uöt
 
f‹m
,

215 
uöt
 
ty≥
,

216 
fs_∑th_t
 *
mou¡
,

217 
uöt
 
Êags
)

219 *
˝
;

221 
	`Ârötf
(
Â
, 
	`_
("%s (%s) %s:\n"),

222 
mou¡
->
fs_«me
, mou¡->
fs_dú
, 
	`ty≥_to_°rög
(
ty≥
));

223 
	`qs‹t
(
dp
, 
cou¡
, (dp[0]),

224 ((*)(c⁄° *, c⁄° *))
qcom∑ª
);

225 ; 
dp
 < &dp[
cou¡
]; dp++) {

226 i‡(
dp
->
blocks
 == 0)

228 
	`Ârötf
(
Â
, "%8Œu ", (Ë
dp
->
blocks
);

229 i‡(
f‹m
 & 
XFS_INODE_QUOTA
)

230 
	`Ârötf
(
Â
, "%8llu ",

231 (Ë
dp
->
nfûes
);

232 i‡(!(
Êags
 & 
NO_LOOKUP_FLAG
) &&

233 ((
˝
 = (
«mes
)(
dp
->
id
)Ë!
NULL
))

234 
	`Ârötf
(
Â
, "%-8.8s", 
˝
);

236 
	`Ârötf
(
Â
, "#%-7d", 
dp
->
id
);

237 i‡(
Êags
 & 
VERBOSE_FLAG
)

238 
	`Ârötf
(
Â
, " %8llu %8llu %8llu",

239 (Ë
dp
->
blocks30
,

240 (Ë
dp
->
blocks60
,

241 (Ë
dp
->
blocks90
);

242 
	`Âutc
('\n', 
Â
);

244 
	}
}

247 
	$quŸ_ªp‹t_mou¡
(

248 
FILE
 *
Â
,

249 
uöt
 
f‹m
,

250 
uöt
 
ty≥
,

251 
fs_∑th_t
 *
mou¡
,

252 
uöt
 
Êags
)

254 
ty≥
) {

255 
XFS_GROUP_QUOTA
:

256 
	`quŸ_ªp‹t_mou¡_™y_ty≥
(
Â
, 
du
[1], 
ndu
[1], 
gid_to_«me
,

257 
f‹m
, 
ty≥
, 
mou¡
, 
Êags
);

259 
XFS_PROJ_QUOTA
:

260 
	`quŸ_ªp‹t_mou¡_™y_ty≥
(
Â
, 
du
[2], 
ndu
[2], 
¥id_to_«me
,

261 
f‹m
, 
ty≥
, 
mou¡
, 
Êags
);

263 
XFS_USER_QUOTA
:

264 
	`quŸ_ªp‹t_mou¡_™y_ty≥
(
Â
, 
du
[0], 
ndu
[0], 
uid_to_«me
,

265 
f‹m
, 
ty≥
, 
mou¡
, 
Êags
);

267 
	}
}

270 
	$quŸ_ªp‹t
(

271 
FILE
 *
Â
,

272 
uöt
 
f‹m
,

273 
uöt
 
ty≥
,

274 *
dú
,

275 
uöt
 
Êags
)

277 
fs_curs‹_t
 
curs‹
;

278 
fs_∑th_t
 *
mou¡
;

280 
now
 = 
	`time
(
NULL
);

281 
	`fs_curs‹_öôüli£
(
dú
, 
FS_MOUNT_POINT
, &
curs‹
);

282 (
mou¡
 = 
	`fs_curs‹_√xt_íåy
(&
curs‹
))) {

283 
	`quŸ_bulk°©_mou¡
(
mou¡
->
fs_dú
, 
Êags
);

284 
	`quŸ_ªp‹t_mou¡
(
Â
, 
f‹m
, 
ty≥
, 
mou¡
, 
Êags
);

286 
	}
}

289 
	$quŸ_hi°ogøm_mou¡
(

290 
FILE
 *
Â
,

291 
fs_∑th_t
 *
mou¡
,

292 
uöt
 
Êags
)

294 
__uöt64_t
 
t
 = 0;

295 
i
;

297 
	`Ârötf
(
Â
, 
	`_
("%†(%s):\n"), 
mou¡
->
fs_«me
, mou¡->
fs_dú
);

299 
i
 = 0; i < 
TSIZE
 - 1; i++)

300 i‡(
sizes
[
i
] > 0) {

301 
t
 +
sizes
[
i
] * i;

302 
	`Ârötf
(
Â
, 
	`_
("%d\t%Œu\t%Œu\n"), 
i
,

303 (Ë
sizes
[
i
],

304 (Ë
t
);

306 
	`Ârötf
(
Â
, 
	`_
("%d\t%Œu\t%Œu\n"), 
TSIZE
 - 1,

307 (Ë
sizes
[
TSIZE
 - 1],

308 (Ë(
ovîÊow
 + 
t
));

309 
	}
}

312 
	$quŸ_hi°ogøm
(

313 
FILE
 *
Â
,

314 *
dú
,

315 
uöt
 
Êags
)

317 
fs_curs‹_t
 
curs‹
;

318 
fs_∑th_t
 *
mou¡
;

320 
	`fs_curs‹_öôüli£
(
dú
, 
FS_MOUNT_POINT
, &
curs‹
);

321 (
mou¡
 = 
	`fs_curs‹_√xt_íåy
(&
curs‹
))) {

322 
	`quŸ_bulk°©_mou¡
(
mou¡
->
fs_dú
, 
Êags
);

323 
	`quŸ_hi°ogøm_mou¡
(
Â
, 
mou¡
, 
Êags
);

325 
	}
}

328 
	$quŸ_™y_ty≥
(

329 
FILE
 *
Â
,

330 
uöt
 
f‹m
,

331 
uöt
 
ty≥
,

332 *
dú
,

333 
uöt
 
Êags
)

335 i‡(
Êags
 & 
HISTOGRAM_FLAG
)

336 
	`quŸ_hi°ogøm
(
Â
, 
dú
, 
Êags
);

338 
	`quŸ_ªp‹t
(
Â
, 
f‹m
, 
ty≥
, 
dú
, 
Êags
);

339 
	}
}

342 
	$quŸ_f
(

343 
¨gc
,

344 **
¨gv
)

346 
FILE
 *
Â
 = 
NULL
;

347 *
‚ame
 = 
NULL
;

348 
c
, 
Êags
 = 0, 
ty≥
 = 0, 
f‹m
 = 0;

350 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "abcf:ghö¥uv")Ë!
EOF
) {

351 
c
) {

353 
‚ame
 = 
›èrg
;

356 
f‹m
 |
XFS_BLOCK_QUOTA
;

359 
f‹m
 |
XFS_INODE_QUOTA
;

362 
f‹m
 |
XFS_RTBLOCK_QUOTA
;

365 
ty≥
 |
XFS_GROUP_QUOTA
;

368 
ty≥
 |
XFS_PROJ_QUOTA
;

371 
ty≥
 |
XFS_USER_QUOTA
;

374 
Êags
 |
ALL_MOUNTS_FLAG
;

377 
Êags
 |
HISTOGRAM_FLAG
;

380 
Êags
 |
NO_LOOKUP_FLAG
;

383 
Êags
 |
VERBOSE_FLAG
;

386  
	`comm™d_ußge
(&
quŸ_cmd
);

390 i‡(!
f‹m
)

391 
f‹m
 = 
XFS_BLOCK_QUOTA
;

393 i‡(!
ty≥
) {

394 
ty≥
 = 
XFS_USER_QUOTA
;

395 } i‡(
ty≥
 !
XFS_GROUP_QUOTA
 &&

396 
ty≥
 !
XFS_PROJ_QUOTA
 &&

397 
ty≥
 !
XFS_USER_QUOTA
) {

398  
	`comm™d_ußge
(&
quŸ_cmd
);

401 i‡((
Â
 = 
	`f›í_wrôe_£cuª
(
‚ame
)Ë=
NULL
)

404 i‡(
¨gc
 =
›töd
) {

405 i‡(
Êags
 & 
ALL_MOUNTS_FLAG
)

406 
	`quŸ_™y_ty≥
(
Â
, 
f‹m
, 
ty≥
, 
NULL
, 
Êags
);

407 i‡(
fs_∑th
->
fs_Êags
 & 
FS_MOUNT_POINT
)

408 
	`quŸ_™y_ty≥
(
Â
, 
f‹m
, 
ty≥
, 
fs_∑th
->
fs_dú
, 
Êags
);

409 } 
¨gc
 > 
›töd
) {

410 
	`quŸ_™y_ty≥
(
Â
, 
f‹m
, 
ty≥
, 
¨gv
[
›töd
++], 
Êags
);

413 i‡(
‚ame
)

414 
	`f˛o£
(
Â
);

416 
	}
}

419 
	$quŸ_öô
()

421 
quŸ_cmd
.
«me
 = "quot";

422 
quŸ_cmd
.
cfunc
 = 
quŸ_f
;

423 
quŸ_cmd
.
¨gmö
 = 0;

424 
quŸ_cmd
.
¨gmax
 = -1;

425 
quŸ_cmd
.
¨gs
 = 
	`_
("[-bir] [-g|-p|-u] [-acv] [-f file]");

426 
quŸ_cmd
.
⁄ñöe
 = 
	`_
("summarize filesystem ownership");

427 
quŸ_cmd
.
hñp
 = 
quŸ_hñp
;

429 i‡(
ex≥π
)

430 
	`add_comm™d
(&
quŸ_cmd
);

431 
	}
}

	@quota/quota.c

19 
	~<°dboﬁ.h
>

20 
	~"comm™d.h
"

21 
	~<˘y≥.h
>

22 
	~<pwd.h
>

23 
	~<gΩ.h
>

24 
	~"öô.h
"

25 
	~"quŸa.h
"

27 
cmdöfo_t
 
	gquŸa_cmd
;

30 
	$quŸa_hñp
()

32 
	`¥ötf
(
	`_
(

50 
	}
}

53 
	$quŸa_mou¡
(

54 
FILE
 *
Â
,

55 
__uöt32_t
 
id
,

56 *
«me
,

57 
uöt
 
f‹m
,

58 
uöt
 
ty≥
,

59 
fs_∑th_t
 *
mou¡
,

60 
uöt
 
Êags
)

62 
fs_disk_quŸa_t
 
d
;

63 *
dev
 = 
mou¡
->
fs_«me
;

64 
c
[8], 
h
[8], 
s
[8];

65 
uöt
 
qÊags
;

66 
cou¡
;

68 
	`xfsquŸa˘l
(
XFS_QSYNC
, 
dev
, 
ty≥
, 0, 
NULL
);

69 i‡(
	`xfsquŸa˘l
(
XFS_GETQUOTA
, 
dev
, 
ty≥
, 
id
, (*)&
d
) < 0)

72 i‡(!(
Êags
 & 
VERBOSE_FLAG
)) {

73 
cou¡
 = 0;

74 i‡((
f‹m
 & 
XFS_BLOCK_QUOTA
Ë&& 
d
.
d_bcou¡
)

75 
cou¡
++;

76 i‡((
f‹m
 & 
XFS_INODE_QUOTA
Ë&& 
d
.
d_icou¡
)

77 
cou¡
++;

78 i‡((
f‹m
 & 
XFS_RTBLOCK_QUOTA
Ë&& 
d
.
d_πbcou¡
)

79 
cou¡
++;

80 i‡(!
cou¡
)

84 i‡(!(
Êags
 & 
NO_HEADER_FLAG
)) {

85 
	`Ârötf
(
Â
,

86 
	`_
("Disk quotas for %s %s (%u)\nFilesystem%s"),

87 
	`ty≥_to_°rög
(
ty≥
), 
«me
, 
id
,

88 (
Êags
 & 
HUMAN_FLAG
) ? " " : " ");

89 i‡(
f‹m
 & 
XFS_BLOCK_QUOTA
)

90 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

91 
	`_
(" Blocks Quota Limit Warn/Time ") :

92 
	`_
(" Blocks Quota Limit Warn/Time "));

93 i‡(
f‹m
 & 
XFS_INODE_QUOTA
)

94 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

95 
	`_
(" Files Quota Limit Warn/Time ") :

96 
	`_
(" Files Quota Limit Warn/Time "));

97 i‡(
f‹m
 & 
XFS_RTBLOCK_QUOTA
)

98 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

99 
	`_
("Realtime Quota Limit Warn/Time ") :

100 
	`_
(" Realtime Quota Limit Warn/Time "));

101 
	`Âuts
("Mou¡ed on\n", 
Â
);

104 i‡(
Êags
 & 
HUMAN_FLAG
) {

105 
cou¡
 = 
	`Ârötf
(
Â
, "%-12s", 
dev
);

106 i‡(
cou¡
 > 13)

107 
	`Ârötf
(
Â
, "\n%12s", " ");

109 
cou¡
 = 
	`Ârötf
(
Â
, "%-19s", 
dev
);

110 i‡(
cou¡
 > 20)

111 
	`Ârötf
(
Â
, "\n%19s", " ");

114 i‡(
f‹m
 & 
XFS_BLOCK_QUOTA
) {

115 
qÊags
 = (
Êags
 & 
HUMAN_FLAG
);

116 i‡(
d
.
d_blk_h¨dlimô
 && d.
d_bcou¡
 > d.d_blk_hardlimit)

117 
qÊags
 |
LIMIT_FLAG
;

118 i‡(
d
.
d_blk_so·limô
 && d.
d_bcou¡
 > d.d_blk_softlimit)

119 
qÊags
 |
QUOTA_FLAG
;

120 i‡(
Êags
 & 
HUMAN_FLAG
)

121 
	`Ârötf
(
Â
, " %6s %6s %6s %02d %8s ",

122 
	`bbs_to_°rög
(
d
.
d_bcou¡
, 
c
, (c)),

123 
	`bbs_to_°rög
(
d
.
d_blk_so·limô
, 
s
, (s)),

124 
	`bbs_to_°rög
(
d
.
d_blk_h¨dlimô
, 
h
, (h)),

125 
d
.
d_bw¨ns
,

126 
	`time_to_°rög
(
d
.
d_btimî
, 
qÊags
));

128 
	`Ârötf
(
Â
, " %10llu %10llu %10llu %02d %9s ",

129 ()
d
.
d_bcou¡
 >> 1,

130 ()
d
.
d_blk_so·limô
 >> 1,

131 ()
d
.
d_blk_h¨dlimô
 >> 1,

132 
d
.
d_bw¨ns
,

133 
	`time_to_°rög
(
d
.
d_btimî
, 
qÊags
));

135 i‡(
f‹m
 & 
XFS_INODE_QUOTA
) {

136 
qÊags
 = (
Êags
 & 
HUMAN_FLAG
);

137 i‡(
d
.
d_öo_h¨dlimô
 && d.
d_icou¡
 > d.d_ino_hardlimit)

138 
qÊags
 |
LIMIT_FLAG
;

139 i‡(
d
.
d_öo_so·limô
 && d.
d_icou¡
 > d.d_ino_softlimit)

140 
qÊags
 |
QUOTA_FLAG
;

141 i‡(
Êags
 & 
HUMAN_FLAG
)

142 
	`Ârötf
(
Â
, " %6s %6s %6s %02d %8s ",

143 
	`num_to_°rög
(
d
.
d_icou¡
, 
c
, (c)),

144 
	`num_to_°rög
(
d
.
d_öo_so·limô
, 
s
, (s)),

145 
	`num_to_°rög
(
d
.
d_öo_h¨dlimô
, 
h
, (h)),

146 
d
.
d_iw¨ns
,

147 
	`time_to_°rög
(
d
.
d_ôimî
, 
qÊags
));

149 
	`Ârötf
(
Â
, " %10llu %10llu %10llu %02d %9s ",

150 ()
d
.
d_icou¡
,

151 ()
d
.
d_öo_so·limô
,

152 ()
d
.
d_öo_h¨dlimô
,

153 
d
.
d_iw¨ns
,

154 
	`time_to_°rög
(
d
.
d_ôimî
, 
qÊags
));

156 i‡(
f‹m
 & 
XFS_RTBLOCK_QUOTA
) {

157 
qÊags
 = (
Êags
 & 
HUMAN_FLAG
);

158 i‡(
d
.
d_πb_h¨dlimô
 && d.
d_πbcou¡
 > d.d_rtb_hardlimit)

159 
qÊags
 |
LIMIT_FLAG
;

160 i‡(
d
.
d_πb_so·limô
 && d.
d_πbcou¡
 > d.d_rtb_softlimit)

161 
qÊags
 |
QUOTA_FLAG
;

162 i‡(
Êags
 & 
HUMAN_FLAG
)

163 
	`Ârötf
(
Â
, " %6s %6s %6s %02d %8s ",

164 
	`bbs_to_°rög
(
d
.
d_πbcou¡
, 
c
, (c)),

165 
	`bbs_to_°rög
(
d
.
d_πb_so·limô
, 
s
, (s)),

166 
	`bbs_to_°rög
(
d
.
d_πb_h¨dlimô
, 
h
, (h)),

167 
d
.
d_πbw¨ns
,

168 
	`time_to_°rög
(
d
.
d_πbtimî
, 
qÊags
));

170 
	`Ârötf
(
Â
, " %10llu %10llu %10llu %02d %9s ",

171 ()
d
.
d_πbcou¡
 >> 1,

172 ()
d
.
d_πb_so·limô
 >> 1,

173 ()
d
.
d_πb_h¨dlimô
 >> 1,

174 
d
.
d_πbw¨ns
,

175 
	`time_to_°rög
(
d
.
d_πbtimî
, 
qÊags
));

177 
	`Ârötf
(
Â
, "%s\n", 
mou¡
->
fs_dú
);

179 
	}
}

182 
	$quŸa
(

183 
FILE
 *
Â
,

184 
__uöt32_t
 
id
,

185 *
«me
,

186 
uöt
 
f‹m
,

187 
uöt
 
ty≥
,

188 
uöt
 
Êags
)

190 
fs_curs‹_t
 
curs‹
;

191 
fs_∑th_t
 *
∑th
;

193 
	`fs_curs‹_öôüli£
(
NULL
, 
FS_MOUNT_POINT
, &
curs‹
);

194 (
∑th
 = 
	`fs_curs‹_√xt_íåy
(&
curs‹
))) {

195 i‡(
	`quŸa_mou¡
(
Â
, 
id
, 
«me
, 
f‹m
, 
ty≥
, 
∑th
, 
Êags
))

196 
Êags
 |
NO_HEADER_FLAG
;

198 
	}
}

201 
	$gëu£∫ame
(

202 
uid_t
 
uid
,

203 
numîic
)

205 
buf„r
[32];

207 i‡(!
numîic
) {

208 
∑sswd
 *
u
 = 
	`gëpwuid
(
uid
);

209 i‡(
u
)

210  
u
->
pw_«me
;

212 
	`¢¥ötf
(
buf„r
, (buf„r), "#%u", 
uid
);

213  &
buf„r
[0];

214 
	}
}

217 
	$quŸa_u£r_ty≥
(

218 
FILE
 *
Â
,

219 *
«me
,

220 
uöt
 
f‹m
,

221 
uöt
 
ty≥
,

222 
uöt
 
Êags
)

224 
∑sswd
 *
u
;

225 
uid_t
 
id
;

227 i‡(
«me
) {

228 i‡(
	`isdigôs_⁄ly
(
«me
)) {

229 
id
 = 
	`©oi
(
«me
);

230 
«me
 = 
	`gëu£∫ame
(
id
, 
Êags
 & 
NO_LOOKUP_FLAG
);

231 } i‡((
u
 = 
	`gëpw«m
(
«me
))) {

232 
id
 = 
u
->
pw_uid
;

233 
«me
 = 
u
->
pw_«me
;

235 
exôcode
 = 1;

236 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot find user %s\n"),

237 
¥og«me
, 
«me
);

241 
id
 = 
	`gëuid
();

242 
«me
 = 
	`gëu£∫ame
(
id
, 
Êags
 & 
NO_LOOKUP_FLAG
);

245 
	`quŸa
(
Â
, 
id
, 
«me
, 
f‹m
, 
ty≥
, 
Êags
);

246 
	}
}

249 
	$gëgrou≤ame
(

250 
gid_t
 
gid
,

251 
numîic
)

253 
buf„r
[32];

255 i‡(!
numîic
) {

256 
group
 *
g
 = 
	`gëgrgid
(
gid
);

257 i‡(
g
)

258  
g
->
gr_«me
;

260 
	`¢¥ötf
(
buf„r
, (buf„r), "#%u", 
gid
);

261  &
buf„r
[0];

262 
	}
}

265 
	$quŸa_group_ty≥
(

266 
FILE
 *
Â
,

267 *
«me
,

268 
uöt
 
f‹m
,

269 
uöt
 
ty≥
,

270 
uöt
 
Êags
)

272 
group
 *
g
;

273 
gid_t
 
gid
, *
gids
 = 
NULL
;

274 
i
, 
ngroups
, 
do‰ì
 = 0;

276 i‡(
«me
) {

277 i‡(
	`isdigôs_⁄ly
(
«me
)) {

278 
gid
 = 
	`©oi
(
«me
);

279 
«me
 = 
	`gëgrou≤ame
(
gid
, 
Êags
 & 
NO_LOOKUP_FLAG
);

281 i‡((
g
 = 
	`gëg∫am
(
«me
))) {

282 
gid
 = 
g
->
gr_gid
;

283 
«me
 = 
g
->
gr_«me
;

285 
exôcode
 = 1;

286 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot find group %s\n"),

287 
¥og«me
, 
«me
);

291 
gids
 = &
gid
;

292 
ngroups
 = 1;

294 i‡–((
ngroups
 = 
	`sysc⁄f
(
_SC_NGROUPS_MAX
)) < 0) ||

295 ((
gids
 = 
	`mÆloc
(
ngroups
 * (
gid_t
))Ë=
NULL
) ||

296 ((
ngroups
 = 
	`gëgroups
“groups, 
gids
)) < 0)) {

298 
	`‰ì
(
gids
);

299 
gid
 = 
	`gëgid
();

300 
gids
 = &
gid
;

301 
ngroups
 = 1;

304 
do‰ì
 = 1;

308 
i
 = 0; i < 
ngroups
; i++, 
«me
 = 
NULL
) {

309 i‡(!
«me
)

310 
«me
 = 
	`gëgrou≤ame
(
gids
[
i
], 
Êags
 & 
NO_LOOKUP_FLAG
);

311 
	`quŸa
(
Â
, 
gids
[
i
], 
«me
, 
f‹m
, 
ty≥
, 
Êags
);

314 i‡(
do‰ì
)

315 
	`‰ì
(
gids
);

316 
	}
}

319 
	$gë¥oje˘«me
(

320 
¥id_t
 
¥id
,

321 
numîic
)

323 
buf„r
[32];

325 i‡(!
numîic
) {

326 
fs_¥oje˘_t
 *
p
 = 
	`gë¥¥id
(
¥id
);

327 i‡(
p
)

328  
p
->
¥_«me
;

330 
	`¢¥ötf
(
buf„r
, (buf„r), "#%u", ()
¥id
);

331  &
buf„r
[0];

332 
	}
}

335 
	$quŸa_¥oj_ty≥
(

336 
FILE
 *
Â
,

337 *
«me
,

338 
uöt
 
f‹m
,

339 
uöt
 
ty≥
,

340 
uöt
 
Êags
)

342 
fs_¥oje˘_t
 *
p
;

343 
¥id_t
 
id
;

345 i‡(!
«me
) {

346 
exôcode
 = 1;

347 
	`Ârötf
(
°dîr
, 
	`_
("%s: must specifyáÖrojectÇame/ID\n"),

348 
¥og«me
);

352 i‡(
	`isdigôs_⁄ly
(
«me
)) {

353 
id
 = 
	`©oi
(
«me
);

354 
«me
 = 
	`gë¥oje˘«me
(
id
, 
Êags
 & 
NO_LOOKUP_FLAG
);

355 } i‡((
p
 = 
	`gë¥«m
(
«me
))) {

356 
id
 = 
p
->
¥_¥id
;

357 
«me
 = 
p
->
¥_«me
;

359 
exôcode
 = 1;

360 
	`Ârötf
(
°dîr
, 
	`_
("%s: cannot findÖroject %s\n"),

361 
¥og«me
, 
«me
);

365 
	`quŸa
(
Â
, 
id
, 
«me
, 
f‹m
, 
ty≥
, 
Êags
);

366 
	}
}

369 
	$quŸa_™y_ty≥
(

370 
FILE
 *
Â
,

371 *
«me
,

372 
uöt
 
f‹m
,

373 
uöt
 
ty≥
,

374 
uöt
 
Êags
)

376 
ty≥
) {

377 
XFS_USER_QUOTA
:

378 
	`quŸa_u£r_ty≥
(
Â
, 
«me
, 
f‹m
, 
ty≥
, 
Êags
);

380 
XFS_GROUP_QUOTA
:

381 
	`quŸa_group_ty≥
(
Â
, 
«me
, 
f‹m
, 
ty≥
, 
Êags
);

383 
XFS_PROJ_QUOTA
:

384 
	`quŸa_¥oj_ty≥
(
Â
, 
«me
, 
f‹m
, 
ty≥
, 
Êags
);

387 
	}
}

390 
	$quŸa_f
(

391 
¨gc
,

392 **
¨gv
)

394 
FILE
 *
Â
 = 
NULL
;

395 *
‚ame
 = 
NULL
;

396 
c
, 
Êags
 = 0, 
ty≥
 = 0, 
f‹m
 = 0;

398 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "bf:ghnNùruv")Ë!
EOF
) {

399 
c
) {

401 
‚ame
 = 
›èrg
;

404 
f‹m
 |
XFS_BLOCK_QUOTA
;

407 
f‹m
 |
XFS_INODE_QUOTA
;

410 
f‹m
 |
XFS_RTBLOCK_QUOTA
;

413 
ty≥
 |
XFS_GROUP_QUOTA
;

416 
ty≥
 |
XFS_PROJ_QUOTA
;

419 
ty≥
 |
XFS_USER_QUOTA
;

422 
Êags
 |
HUMAN_FLAG
;

425 
Êags
 |
NO_LOOKUP_FLAG
;

428 
Êags
 |
NO_HEADER_FLAG
;

431 
Êags
 |
VERBOSE_FLAG
;

434  
	`comm™d_ußge
(&
quŸa_cmd
);

438 i‡(!
f‹m
)

439 
f‹m
 = 
XFS_BLOCK_QUOTA
;

441 i‡(!
ty≥
) {

442 
ty≥
 = 
XFS_USER_QUOTA
;

443 } i‡(
ty≥
 !
XFS_GROUP_QUOTA
 &&

444 
ty≥
 !
XFS_PROJ_QUOTA
 &&

445 
ty≥
 !
XFS_USER_QUOTA
) {

446  
	`comm™d_ußge
(&
quŸa_cmd
);

449 i‡((
Â
 = 
	`f›í_wrôe_£cuª
(
‚ame
)Ë=
NULL
)

452 i‡(
¨gc
 =
›töd
)

453 
	`quŸa_™y_ty≥
(
Â
, 
NULL
, 
f‹m
, 
ty≥
, 
Êags
);

454 
¨gc
 > 
›töd
)

455 
	`quŸa_™y_ty≥
(
Â
, 
¨gv
[
›töd
++], 
f‹m
, 
ty≥
, 
Êags
);

457 i‡(
‚ame
)

458 
	`f˛o£
(
Â
);

460 
	}
}

463 
	$quŸa_öô
()

465 
quŸa_cmd
.
«me
 = "quota";

466 
quŸa_cmd
.
Æäame
 = "l";

467 
quŸa_cmd
.
cfunc
 = 
quŸa_f
;

468 
quŸa_cmd
.
¨gmö
 = 0;

469 
quŸa_cmd
.
¨gmax
 = -1;

470 
quŸa_cmd
.
¨gs
 = 
	`_
("[-bir] [-g|-p|-u] [-hnNv] [-f file] [id|name]...");

471 
quŸa_cmd
.
⁄ñöe
 = 
	`_
("show usageándÜimits");

472 
quŸa_cmd
.
hñp
 = 
quŸa_hñp
;

473 
quŸa_cmd
.
Êags
 = 
CMD_FLAG_FOREIGN_OK
;

475 
	`add_comm™d
(&
quŸa_cmd
);

476 
	}
}

	@quota/quota.h

19 
	~"xqm.h
"

20 
	~"∑th.h
"

21 
	~"¥oje˘.h
"

22 
	~<°dboﬁ.h
>

28 
	mXFS_BLOCK_QUOTA
 = 0x1,

29 
	mXFS_INODE_QUOTA
 = 0x2,

30 
	mXFS_RTBLOCK_QUOTA
 = 0x4,

36 
xfsquŸa˘l
(
__cmd
, c⁄° *
__devi˚
,

37 
uöt
 
__ty≥
, uöà
__id
, * 
__addr
);

39 
	mXFS_QUOTAON
,

40 
	mXFS_QUOTAOFF
,

41 
	mXFS_GETQUOTA
,

42 
	mXFS_SETQLIM
,

43 
	mXFS_GETQSTAT
,

44 
	mXFS_QUOTARM
,

45 
	mXFS_QSYNC
,

46 
	mXFS_GETQSTATV
,

47 
	mXFS_GETNEXTQUOTA
,

53 *
ty≥_to_°rög
(
uöt
 
__ty≥
);

54 *
f‹m_to_°rög
(
uöt
 
__f‹m
);

55 *
time_to_°rög
(
time_t
 
__time
, 
uöt
 
__Êags
);

56 *
bbs_to_°rög
(
__uöt64_t
 
__v
, *
__c
, 
uöt
 
__size
);

57 *
num_to_°rög
(
__uöt64_t
 
__v
, *
__c
, 
uöt
 
__size
);

58 *
p˘_to_°rög
(
__uöt64_t
 
__v
, __uöt64_à
__t
, *
__c
, 
uöt
 
__s
);

60 
FILE
 *
f›í_wrôe_£cuª
(*
__fûíame
);

66 
	mNO_HEADER_FLAG
 = 0x0001,

67 
	mVERBOSE_FLAG
 = 0x0002,

68 
	mHUMAN_FLAG
 = 0x0004,

69 
	mQUOTA_FLAG
 = 0x0008,

70 
	mLIMIT_FLAG
 = 0x0010,

71 
	mALL_MOUNTS_FLAG
 = 0x0020,

72 
	mTERSE_FLAG
 = 0x0040,

73 
	mHISTOGRAM_FLAG
 = 0x0080,

74 
	mDEFAULTS_FLAG
 = 0x0100,

75 
	mABSOLUTE_FLAG
 = 0x0200,

76 
	mNO_LOOKUP_FLAG
 = 0x0400,

77 
	mGETNEXTQUOTA_FLAG
 = 0x0800,

83 
	#NMAX
 32

	)

84 *
uid_to_«me
(
__uöt32_t
 
__uid
);

85 *
gid_to_«me
(
__uöt32_t
 
__gid
);

86 *
¥id_to_«me
(
__uöt32_t
 
__¥id
);

87 
boﬁ
 
isdigôs_⁄ly
(const *);

	@quota/report.c

18 
	~<°dboﬁ.h
>

19 
	~"comm™d.h
"

20 
	~<sys/ty≥s.h
>

21 
	~<pwd.h
>

22 
	~<gΩ.h
>

23 
	~<utmp.h
>

24 
	~"öô.h
"

25 
	~"quŸa.h
"

27 
cmdöfo_t
 
	gdump_cmd
;

28 
cmdöfo_t
 
	gªp‹t_cmd
;

31 
	$dump_hñp
()

33 
dump_cmd
.
¨gs
 = 
	`_
("[-g|-p|-u] [-f file]");

34 
dump_cmd
.
⁄ñöe
 = 
	`_
("dump quota information for backup utilities");

35 
	`¥ötf
(
	`_
(

43 
	}
}

46 
	$ªp‹t_hñp
()

48 
ªp‹t_cmd
.
¨gs
 = 
	`_
("[-bir] [-gpu] [-ahntlLNU] [-f file]");

49 
ªp‹t_cmd
.
⁄ñöe
 = 
	`_
("report filesystem quota information");

50 
	`¥ötf
(
	`_
(

74 
	}
}

77 
	$dump_fûe
(

78 
FILE
 *
Â
,

79 
uöt
 
id
,

80 
uöt
 *
oid
,

81 
uöt
 
ty≥
,

82 *
dev
,

83 
Êags
)

85 
fs_disk_quŸa_t
 
d
;

86 
cmd
;

88 i‡(
Êags
 & 
GETNEXTQUOTA_FLAG
)

89 
cmd
 = 
XFS_GETNEXTQUOTA
;

91 
cmd
 = 
XFS_GETQUOTA
;

94 i‡(
	`xfsquŸa˘l
(
cmd
, 
dev
, 
ty≥
, 
id
, (*)&
d
) < 0) {

95 i‡(
î∫o
 !
ENOENT
 &&Éºnÿ!
ENOSYS
 &&Éºnÿ!
ESRCH
 &&

96 
cmd
 =
XFS_GETQUOTA
)

97 
	`≥º‹
("XFS_GETQUOTA");

101 i‡(
oid
) {

102 *
oid
 = 
d
.
d_id
;

104 i‡(*
oid
 < 
id
)

108 i‡(!
d
.
d_blk_so·limô
 && !d.
d_blk_h¨dlimô
 &&

109 !
d
.
d_öo_so·limô
 && !d.
d_öo_h¨dlimô
 &&

110 !
d
.
d_πb_so·limô
 && !d.
d_πb_h¨dlimô
)

112 
	`Ârötf
(
Â
, "f†%s\n", 
dev
);

114 i‡(
d
.
d_πb_so·limô
 || d.
d_πb_h¨dlimô
)

115 
	`Ârötf
(
Â
, "%-10d %7llu %7llu %7llu %7llu %7llu %7llu\n",

116 
d
.
d_id
,

117 ()
d
.
d_blk_so·limô
,

118 ()
d
.
d_blk_h¨dlimô
,

119 ()
d
.
d_öo_so·limô
,

120 ()
d
.
d_öo_h¨dlimô
,

121 ()
d
.
d_πb_so·limô
,

122 ()
d
.
d_πb_h¨dlimô
);

124 
	`Ârötf
(
Â
, "%-10d %7llu %7llu %7llu %7llu\n",

125 
d
.
d_id
,

126 ()
d
.
d_blk_so·limô
,

127 ()
d
.
d_blk_h¨dlimô
,

128 ()
d
.
d_öo_so·limô
,

129 ()
d
.
d_öo_h¨dlimô
);

132 
	}
}

135 
	$dump_limôs_™y_ty≥
(

136 
FILE
 *
Â
,

137 
uöt
 
ty≥
,

138 *
dú
,

139 
uöt
 
lowî
,

140 
uöt
 
uµî
)

142 
fs_∑th_t
 *
mou¡
;

143 
uöt
 
id
 = 0, 
oid
;

145 i‡((
mou¡
 = 
	`fs_èbÀ_lookup
(
dú
, 
FS_MOUNT_POINT
)Ë=
NULL
) {

146 
exôcode
 = 1;

147 
	`Ârötf
(
°dîr
, "%s: cannot find mountÖoint %s\n",

148 
¥og«me
, 
dú
);

153 i‡(
uµî
) {

154 
id
 = 
lowî
; id <
uµî
; id++)

155 
	`dump_fûe
(
Â
, 
id
, 
NULL
, 
ty≥
, 
mou¡
->
fs_«me
, 0);

160 i‡(
	`dump_fûe
(
Â
, 
id
, &
oid
, 
ty≥
, 
mou¡
->
fs_«me
, 
GETNEXTQUOTA_FLAG
)) {

161 
id
 = 
oid
 + 1;

162 
	`dump_fûe
(
Â
, 
id
, &
oid
, 
ty≥
, 
mou¡
->
fs_«me
,

163 
GETNEXTQUOTA_FLAG
))

164 
id
 = 
oid
 + 1;

169 
ty≥
) {

170 
XFS_GROUP_QUOTA
: {

171 
group
 *
g
;

172 
	`£tgª¡
();

173 (
g
 = 
	`gëgª¡
()Ë!
NULL
)

174 
	`dump_fûe
(
Â
, 
g
->
gr_gid
, 
NULL
, 
ty≥
,

175 
mou¡
->
fs_«me
, 0);

176 
	`ídgª¡
();

179 
XFS_PROJ_QUOTA
: {

180 
fs_¥oje˘
 *
p
;

181 
	`£çª¡
();

182 (
p
 = 
	`gë¥ít
()Ë!
NULL
)

183 
	`dump_fûe
(
Â
, 
p
->
¥_¥id
, 
NULL
, 
ty≥
,

184 
mou¡
->
fs_«me
, 0);

185 
	`íd¥ít
();

188 
XFS_USER_QUOTA
: {

189 
∑sswd
 *
u
;

190 
	`£çwít
();

191 (
u
 = 
	`gëpwít
()Ë!
NULL
)

192 
	`dump_fûe
(
Â
, 
u
->
pw_uid
, 
NULL
, 
ty≥
,

193 
mou¡
->
fs_«me
, 0);

194 
	`ídpwít
();

198 
	}
}

201 
	$dump_f
(

202 
¨gc
,

203 **
¨gv
)

205 
FILE
 *
Â
;

206 *
‚ame
 = 
NULL
;

207 
uöt
 
lowî
 = 0, 
uµî
 = 0;

208 
c
, 
ty≥
 = 0;

210 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "f:gpuL:U:")Ë!
EOF
) {

211 
c
) {

213 
‚ame
 = 
›èrg
;

216 
ty≥
 |
XFS_GROUP_QUOTA
;

219 
ty≥
 |
XFS_PROJ_QUOTA
;

222 
ty≥
 |
XFS_USER_QUOTA
;

225 
lowî
 = (
uöt
)
	`©oi
(
›èrg
);

228 
uµî
 = (
uöt
)
	`©oi
(
›èrg
);

231  
	`comm™d_ußge
(&
dump_cmd
);

235 i‡(
¨gc
 !
›töd
)

236  
	`comm™d_ußge
(&
dump_cmd
);

238 i‡(!
ty≥
) {

239 
ty≥
 = 
XFS_USER_QUOTA
;

240 } i‡(
ty≥
 !
XFS_GROUP_QUOTA
 &&

241 
ty≥
 !
XFS_PROJ_QUOTA
 &&

242 
ty≥
 !
XFS_USER_QUOTA
) {

243  
	`comm™d_ußge
(&
dump_cmd
);

246 i‡((
Â
 = 
	`f›í_wrôe_£cuª
(
‚ame
)Ë=
NULL
)

249 
	`dump_limôs_™y_ty≥
(
Â
, 
ty≥
, 
fs_∑th
->
fs_dú
, 
lowî
, 
uµî
);

251 i‡(
‚ame
)

252 
	`f˛o£
(
Â
);

255 
	}
}

258 
	$ªp‹t_hódî
(

259 
FILE
 *
Â
,

260 
uöt
 
f‹m
,

261 
uöt
 
ty≥
,

262 
fs_∑th_t
 *
mou¡
,

263 
Êags
)

265 *
ty≥«me
 = 
	`ty≥_to_°rög
(
ty≥
);

266 
s¸©ch
[64];

267 
uöt
 
i
, 
cou¡
;

269 i‡(
Êags
 & 
NO_HEADER_FLAG
)

273 
	`Ârötf
(
Â
, 
	`_
("%s quota on %s (%s)\n"),

274 
ty≥«me
, 
mou¡
->
fs_dú
, mou¡->
fs_«me
);

277 
i
 = 0; i < 10; i++)

278 
	`Âutc
(' ', 
Â
);

279 i‡(
f‹m
 & 
XFS_BLOCK_QUOTA
)

280 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

282 ' ', 
	`f‹m_to_°rög
(
XFS_BLOCK_QUOTA
), ' ');

283 i‡(
f‹m
 & 
XFS_INODE_QUOTA
)

284 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

286 ' ', 
	`f‹m_to_°rög
(
XFS_INODE_QUOTA
), ' ');

287 i‡(
f‹m
 & 
XFS_RTBLOCK_QUOTA
)

288 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

290 ' ', 
	`f‹m_to_°rög
(
XFS_RTBLOCK_QUOTA
), ' ');

291 
	`Âutc
('\n', 
Â
);

294 
	`¢¥ötf
(
s¸©ch
, (s¸©ch), "%†ID", 
ty≥«me
);

295 
	`Ârötf
(
Â
, "%-10†", 
s¸©ch
);

296 i‡(
f‹m
 & 
XFS_BLOCK_QUOTA
)

297 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

298 
	`_
(" Used Soft Hard Warn/Grace ") :

299 
	`_
(" Used Soft Hard Warn/Grace "));

300 i‡(
f‹m
 & 
XFS_INODE_QUOTA
)

301 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

302 
	`_
(" Used Soft Hard Warn/Grace ") :

303 
	`_
(" Used Soft Hard Warn/ Grace "));

304 i‡(
f‹m
 & 
XFS_RTBLOCK_QUOTA
)

305 
	`Ârötf
(
Â
, (
Êags
 & 
HUMAN_FLAG
) ?

306 
	`_
(" Used Soft Hard Warn/Grace ") :

307 
	`_
(" Used Soft Hard Warn/Grace "));

308 
	`Âutc
('\n', 
Â
);

311 
i
 = 0; i < 10; i++)

312 
	`Âutc
('-', 
Â
);

313 
	`Âutc
(' ', 
Â
);

314 
cou¡
 = (
Êags
 & 
HUMAN_FLAG
) ? 33 : 50;

315 i‡(
f‹m
 & 
XFS_BLOCK_QUOTA
) {

316 
i
 = 0; i < 
cou¡
; i++)

317 
	`Âutc
('-', 
Â
);

318 
	`Âutc
(' ', 
Â
);

320 i‡(
f‹m
 & 
XFS_INODE_QUOTA
) {

321 
i
 = 0; i < 
cou¡
; i++)

322 
	`Âutc
('-', 
Â
);

323 
	`Âutc
(' ', 
Â
);

325 i‡(
f‹m
 & 
XFS_RTBLOCK_QUOTA
) {

326 
i
 = 0; i < 
cou¡
; i++)

327 
	`Âutc
('-', 
Â
);

328 
	`Âutc
(' ', 
Â
);

330 
	`Âutc
('\n', 
Â
);

331 
	}
}

334 
	$ªp‹t_mou¡
(

335 
FILE
 *
Â
,

336 
__uöt32_t
 
id
,

337 *
«me
,

338 
__uöt32_t
 *
oid
,

339 
uöt
 
f‹m
,

340 
uöt
 
ty≥
,

341 
fs_∑th_t
 *
mou¡
,

342 
uöt
 
Êags
)

344 
fs_disk_quŸa_t
 
d
;

345 *
dev
 = 
mou¡
->
fs_«me
;

346 
c
[8], 
h
[8], 
s
[8];

347 
uöt
 
qÊags
;

348 
cou¡
;

349 
cmd
;

351 i‡(
Êags
 & 
GETNEXTQUOTA_FLAG
)

352 
cmd
 = 
XFS_GETNEXTQUOTA
;

354 
cmd
 = 
XFS_GETQUOTA
;

357 i‡(
	`xfsquŸa˘l
(
cmd
, 
dev
, 
ty≥
, 
id
, (*)&
d
) < 0) {

358 i‡(
î∫o
 !
ENOENT
 &&Éºnÿ!
ENOSYS
 &&Éºnÿ!
ESRCH
 &&

359 
cmd
 =
XFS_GETQUOTA
)

360 
	`≥º‹
("XFS_GETQUOTA");

364 i‡(
oid
) {

365 *
oid
 = 
d
.
d_id
;

367 i‡(* 
oid
 < 
id
)

371 i‡(
Êags
 & 
TERSE_FLAG
) {

372 
cou¡
 = 0;

373 i‡((
f‹m
 & 
XFS_BLOCK_QUOTA
Ë&& 
d
.
d_bcou¡
)

374 
cou¡
++;

375 i‡((
f‹m
 & 
XFS_INODE_QUOTA
Ë&& 
d
.
d_icou¡
)

376 
cou¡
++;

377 i‡((
f‹m
 & 
XFS_RTBLOCK_QUOTA
Ë&& 
d
.
d_πbcou¡
)

378 
cou¡
++;

379 i‡(!
cou¡
)

383 i‡(!(
Êags
 & 
NO_HEADER_FLAG
))

384 
	`ªp‹t_hódî
(
Â
, 
f‹m
, 
ty≥
, 
mou¡
, 
Êags
);

386 i‡(
Êags
 & 
NO_LOOKUP_FLAG
) {

387 
	`Ârötf
(
Â
, "#%-10u", 
d
.
d_id
);

389 i‡(
«me
 =
NULL
) {

390 i‡(
ty≥
 =
XFS_USER_QUOTA
) {

391 
∑sswd
 *
u
 = 
	`gëpwuid
(
d
.
d_id
);

392 i‡(
u
)

393 
«me
 = 
u
->
pw_«me
;

394 } i‡(
ty≥
 =
XFS_GROUP_QUOTA
) {

395 
group
 *
g
 = 
	`gëgrgid
(
d
.
d_id
);

396 i‡(
g
)

397 
«me
 = 
g
->
gr_«me
;

398 } i‡(
ty≥
 =
XFS_PROJ_QUOTA
) {

399 
fs_¥oje˘_t
 *
p
 = 
	`gë¥¥id
(
d
.
d_id
);

400 i‡(
p
)

401 
«me
 = 
p
->
¥_«me
;

405 i‡(
«me
 !
NULL
)

406 
	`Ârötf
(
Â
, "%-10s", 
«me
);

408 
	`Ârötf
(
Â
, "#%-9u", 
d
.
d_id
);

411 i‡(
f‹m
 & 
XFS_BLOCK_QUOTA
) {

412 
qÊags
 = (
Êags
 & 
HUMAN_FLAG
);

413 i‡(
d
.
d_blk_h¨dlimô
 && d.
d_bcou¡
 > d.d_blk_hardlimit)

414 
qÊags
 |
LIMIT_FLAG
;

415 i‡(
d
.
d_blk_so·limô
 && d.
d_bcou¡
 > d.d_blk_softlimit)

416 
qÊags
 |
QUOTA_FLAG
;

417 i‡(
Êags
 & 
HUMAN_FLAG
)

418 
	`Ârötf
(
Â
, " %6s %6s %6s %02d %8s",

419 
	`bbs_to_°rög
(
d
.
d_bcou¡
, 
c
, (c)),

420 
	`bbs_to_°rög
(
d
.
d_blk_so·limô
, 
s
, (s)),

421 
	`bbs_to_°rög
(
d
.
d_blk_h¨dlimô
, 
h
, (h)),

422 
d
.
d_bw¨ns
,

423 
	`time_to_°rög
(
d
.
d_btimî
, 
qÊags
));

425 
	`Ârötf
(
Â
, " %10llu %10llu %10llu %02d %9s",

426 ()
d
.
d_bcou¡
 >> 1,

427 ()
d
.
d_blk_so·limô
 >> 1,

428 ()
d
.
d_blk_h¨dlimô
 >> 1,

429 
d
.
d_bw¨ns
,

430 
	`time_to_°rög
(
d
.
d_btimî
, 
qÊags
));

432 i‡(
f‹m
 & 
XFS_INODE_QUOTA
) {

433 
qÊags
 = (
Êags
 & 
HUMAN_FLAG
);

434 i‡(
d
.
d_öo_h¨dlimô
 && d.
d_icou¡
 > d.d_ino_hardlimit)

435 
qÊags
 |
LIMIT_FLAG
;

436 i‡(
d
.
d_öo_so·limô
 && d.
d_icou¡
 > d.d_ino_softlimit)

437 
qÊags
 |
QUOTA_FLAG
;

438 i‡(
Êags
 & 
HUMAN_FLAG
)

439 
	`Ârötf
(
Â
, " %6s %6s %6s %02d %8s",

440 
	`num_to_°rög
(
d
.
d_icou¡
, 
c
, (c)),

441 
	`num_to_°rög
(
d
.
d_öo_so·limô
, 
s
, (s)),

442 
	`num_to_°rög
(
d
.
d_öo_h¨dlimô
, 
h
, (h)),

443 
d
.
d_iw¨ns
,

444 
	`time_to_°rög
(
d
.
d_ôimî
, 
qÊags
));

446 
	`Ârötf
(
Â
, " %10llu %10llu %10llu %02d %9s",

447 ()
d
.
d_icou¡
,

448 ()
d
.
d_öo_so·limô
,

449 ()
d
.
d_öo_h¨dlimô
,

450 
d
.
d_iw¨ns
,

451 
	`time_to_°rög
(
d
.
d_ôimî
, 
qÊags
));

453 i‡(
f‹m
 & 
XFS_RTBLOCK_QUOTA
) {

454 
qÊags
 = (
Êags
 & 
HUMAN_FLAG
);

455 i‡(
d
.
d_πb_h¨dlimô
 && d.
d_πbcou¡
 > d.d_rtb_hardlimit)

456 
qÊags
 |
LIMIT_FLAG
;

457 i‡(
d
.
d_πb_so·limô
 && d.
d_πbcou¡
 > d.d_rtb_softlimit)

458 
qÊags
 |
QUOTA_FLAG
;

459 i‡(
Êags
 & 
HUMAN_FLAG
)

460 
	`Ârötf
(
Â
, " %6s %6s %6s %02d %8s",

461 
	`bbs_to_°rög
(
d
.
d_πbcou¡
, 
c
, (c)),

462 
	`bbs_to_°rög
(
d
.
d_πb_so·limô
, 
s
, (s)),

463 
	`bbs_to_°rög
(
d
.
d_πb_h¨dlimô
, 
h
, (h)),

464 
d
.
d_πbw¨ns
,

465 
	`time_to_°rög
(
d
.
d_πbtimî
, 
qÊags
));

467 
	`Ârötf
(
Â
, " %10llu %10llu %10llu %02d %9s",

468 ()
d
.
d_πbcou¡
 >> 1,

469 ()
d
.
d_πb_so·limô
 >> 1,

470 ()
d
.
d_πb_h¨dlimô
 >> 1,

471 
d
.
d_πbw¨ns
,

472 
	`time_to_°rög
(
d
.
d_πbtimî
, 
qÊags
));

474 
	`Âutc
('\n', 
Â
);

476 
	}
}

479 
	$ªp‹t_u£r_mou¡
(

480 
FILE
 *
Â
,

481 
uöt
 
f‹m
,

482 
fs_∑th_t
 *
mou¡
,

483 
uöt
 
lowî
,

484 
uöt
 
uµî
,

485 
uöt
 
Êags
)

487 
∑sswd
 *
u
;

488 
uöt
 
id
 = 0, 
oid
;

490 i‡(
uµî
) {

491 
id
 = 
lowî
; id <
uµî
; id++) {

492 i‡(
	`ªp‹t_mou¡
(
Â
, 
id
, 
NULL
, NULL,

493 
f‹m
, 
XFS_USER_QUOTA
, 
mou¡
, 
Êags
))

494 
Êags
 |
NO_HEADER_FLAG
;

496 } i‡(
	`ªp‹t_mou¡
(
Â
, 
id
, 
NULL
, &
oid
, 
f‹m
,

497 
XFS_USER_QUOTA
, 
mou¡
,

498 
Êags
|
GETNEXTQUOTA_FLAG
)) {

499 
id
 = 
oid
 + 1;

500 
Êags
 |
GETNEXTQUOTA_FLAG
;

501 
Êags
 |
NO_HEADER_FLAG
;

502 
	`ªp‹t_mou¡
(
Â
, 
id
, 
NULL
, &
oid
, 
f‹m
, 
XFS_USER_QUOTA
,

503 
mou¡
, 
Êags
)) {

504 
id
 = 
oid
 + 1;

507 
	`£çwít
();

508 (
u
 = 
	`gëpwít
()Ë!
NULL
) {

509 i‡(
	`ªp‹t_mou¡
(
Â
, 
u
->
pw_uid
, u->
pw_«me
, 
NULL
,

510 
f‹m
, 
XFS_USER_QUOTA
, 
mou¡
, 
Êags
))

511 
Êags
 |
NO_HEADER_FLAG
;

513 
	`ídpwít
();

516 i‡(
Êags
 & 
NO_HEADER_FLAG
)

517 
	`Âutc
('\n', 
Â
);

518 
	}
}

521 
	$ªp‹t_group_mou¡
(

522 
FILE
 *
Â
,

523 
uöt
 
f‹m
,

524 
fs_∑th_t
 *
mou¡
,

525 
uöt
 
lowî
,

526 
uöt
 
uµî
,

527 
uöt
 
Êags
)

529 
group
 *
g
;

530 
uöt
 
id
 = 0, 
oid
;

532 i‡(
uµî
) {

533 
id
 = 
lowî
; id <
uµî
; id++) {

534 i‡(
	`ªp‹t_mou¡
(
Â
, 
id
, 
NULL
, NULL,

535 
f‹m
, 
XFS_GROUP_QUOTA
, 
mou¡
, 
Êags
))

536 
Êags
 |
NO_HEADER_FLAG
;

538 } i‡(
	`ªp‹t_mou¡
(
Â
, 
id
, 
NULL
, &
oid
, 
f‹m
,

539 
XFS_GROUP_QUOTA
, 
mou¡
,

540 
Êags
|
GETNEXTQUOTA_FLAG
)) {

541 
id
 = 
oid
 + 1;

542 
Êags
 |
GETNEXTQUOTA_FLAG
;

543 
Êags
 |
NO_HEADER_FLAG
;

544 
	`ªp‹t_mou¡
(
Â
, 
id
, 
NULL
, &
oid
, 
f‹m
, 
XFS_GROUP_QUOTA
,

545 
mou¡
, 
Êags
)) {

546 
id
 = 
oid
 + 1;

549 
	`£tgª¡
();

550 (
g
 = 
	`gëgª¡
()Ë!
NULL
) {

551 i‡(
	`ªp‹t_mou¡
(
Â
, 
g
->
gr_gid
, g->
gr_«me
, 
NULL
,

552 
f‹m
, 
XFS_GROUP_QUOTA
, 
mou¡
, 
Êags
))

553 
Êags
 |
NO_HEADER_FLAG
;

556 i‡(
Êags
 & 
NO_HEADER_FLAG
)

557 
	`Âutc
('\n', 
Â
);

558 
	`ídgª¡
();

559 
	}
}

562 
	$ªp‹t_¥oje˘_mou¡
(

563 
FILE
 *
Â
,

564 
uöt
 
f‹m
,

565 
fs_∑th_t
 *
mou¡
,

566 
uöt
 
lowî
,

567 
uöt
 
uµî
,

568 
uöt
 
Êags
)

570 
fs_¥oje˘_t
 *
p
;

571 
uöt
 
id
 = 0, 
oid
;

573 i‡(
uµî
) {

574 
id
 = 
lowî
; id <
uµî
; id++) {

575 i‡(
	`ªp‹t_mou¡
(
Â
, 
id
, 
NULL
, NULL,

576 
f‹m
, 
XFS_PROJ_QUOTA
, 
mou¡
, 
Êags
))

577 
Êags
 |
NO_HEADER_FLAG
;

579 } i‡(
	`ªp‹t_mou¡
(
Â
, 
id
, 
NULL
, &
oid
, 
f‹m
,

580 
XFS_PROJ_QUOTA
, 
mou¡
,

581 
Êags
|
GETNEXTQUOTA_FLAG
)) {

582 
id
 = 
oid
 + 1;

583 
Êags
 |
GETNEXTQUOTA_FLAG
;

584 
Êags
 |
NO_HEADER_FLAG
;

585 
	`ªp‹t_mou¡
(
Â
, 
id
, 
NULL
, &
oid
, 
f‹m
, 
XFS_PROJ_QUOTA
,

586 
mou¡
, 
Êags
)) {

587 
id
 = 
oid
 + 1;

590 i‡(!
	`gë¥¥id
(0)) {

595 i‡(
	`ªp‹t_mou¡
(
Â
, 0, 
NULL
, NULL,

596 
f‹m
, 
XFS_PROJ_QUOTA
, 
mou¡
, 
Êags
))

597 
Êags
 |
NO_HEADER_FLAG
;

600 
	`£çª¡
();

601 (
p
 = 
	`gë¥ít
()Ë!
NULL
) {

602 i‡(
	`ªp‹t_mou¡
(
Â
, 
p
->
¥_¥id
,Ö->
¥_«me
, 
NULL
,

603 
f‹m
, 
XFS_PROJ_QUOTA
, 
mou¡
, 
Êags
))

604 
Êags
 |
NO_HEADER_FLAG
;

606 
	`íd¥ít
();

609 i‡(
Êags
 & 
NO_HEADER_FLAG
)

610 
	`Âutc
('\n', 
Â
);

611 
	}
}

614 
	$ªp‹t_™y_ty≥
(

615 
FILE
 *
Â
,

616 
uöt
 
f‹m
,

617 
uöt
 
ty≥
,

618 *
dú
,

619 
uöt
 
lowî
,

620 
uöt
 
uµî
,

621 
uöt
 
Êags
)

623 
fs_curs‹_t
 
curs‹
;

624 
fs_∑th_t
 *
mou¡
;

626 i‡(
ty≥
 & 
XFS_USER_QUOTA
) {

627 
	`fs_curs‹_öôüli£
(
dú
, 
FS_MOUNT_POINT
, &
curs‹
);

628 (
mou¡
 = 
	`fs_curs‹_√xt_íåy
(&
curs‹
))) {

629 i‡(!
f‹eign_Ælowed
 && (
mou¡
->
fs_Êags
 & 
FS_FOREIGN
))

631 i‡(
	`xfsquŸa˘l
(
XFS_QSYNC
, 
mou¡
->
fs_«me
,

632 
XFS_USER_QUOTA
, 0, 
NULL
) < 0

633 && 
î∫o
 !
ENOENT
 &&Éºnÿ!
ENOSYS
)

634 
	`≥º‹
("XFS_QSYNC user quota");

635 
	`ªp‹t_u£r_mou¡
(
Â
, 
f‹m
, 
mou¡
,

636 
lowî
, 
uµî
, 
Êags
);

639 i‡(
ty≥
 & 
XFS_GROUP_QUOTA
) {

640 
	`fs_curs‹_öôüli£
(
dú
, 
FS_MOUNT_POINT
, &
curs‹
);

641 (
mou¡
 = 
	`fs_curs‹_√xt_íåy
(&
curs‹
))) {

642 i‡(!
f‹eign_Ælowed
 && (
mou¡
->
fs_Êags
 & 
FS_FOREIGN
))

644 i‡(
	`xfsquŸa˘l
(
XFS_QSYNC
, 
mou¡
->
fs_«me
,

645 
XFS_GROUP_QUOTA
, 0, 
NULL
) < 0

646 && 
î∫o
 !
ENOENT
 &&Éºnÿ!
ENOSYS
)

647 
	`≥º‹
("XFS_QSYNC group quota");

648 
	`ªp‹t_group_mou¡
(
Â
, 
f‹m
, 
mou¡
,

649 
lowî
, 
uµî
, 
Êags
);

652 i‡(
ty≥
 & 
XFS_PROJ_QUOTA
) {

653 
	`fs_curs‹_öôüli£
(
dú
, 
FS_MOUNT_POINT
, &
curs‹
);

654 (
mou¡
 = 
	`fs_curs‹_√xt_íåy
(&
curs‹
))) {

655 i‡(!
f‹eign_Ælowed
 && (
mou¡
->
fs_Êags
 & 
FS_FOREIGN
))

657 i‡(
	`xfsquŸa˘l
(
XFS_QSYNC
, 
mou¡
->
fs_«me
,

658 
XFS_PROJ_QUOTA
, 0, 
NULL
) < 0

659 && 
î∫o
 !
ENOENT
 &&Éºnÿ!
ENOSYS
)

660 
	`≥º‹
("XFS_QSYNCÖroj quota");

661 
	`ªp‹t_¥oje˘_mou¡
(
Â
, 
f‹m
, 
mou¡
,

662 
lowî
, 
uµî
, 
Êags
);

665 
	}
}

668 
	$ªp‹t_f
(

669 
¨gc
,

670 **
¨gv
)

672 
FILE
 *
Â
 = 
NULL
;

673 *
‚ame
 = 
NULL
;

674 
uöt
 
lowî
 = 0, 
uµî
 = 0;

675 
boﬁ
 
lookup
 = 
Ál£
;

676 
c
, 
Êags
 = 0, 
ty≥
 = 0, 
f‹m
 = 0;

678 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "abdf:ghûL:N≈πuU:")Ë!
EOF
) {

679 
c
) {

681 
‚ame
 = 
›èrg
;

684 
f‹m
 |
XFS_BLOCK_QUOTA
;

687 
f‹m
 |
XFS_INODE_QUOTA
;

690 
f‹m
 |
XFS_RTBLOCK_QUOTA
;

693 
ty≥
 |
XFS_GROUP_QUOTA
;

696 
ty≥
 |
XFS_PROJ_QUOTA
;

699 
ty≥
 |
XFS_USER_QUOTA
;

702 
Êags
 |
ALL_MOUNTS_FLAG
;

705 
Êags
 |
HUMAN_FLAG
;

708 
Êags
 |
NO_LOOKUP_FLAG
;

711 
Êags
 |
NO_HEADER_FLAG
;

714 
Êags
 |
TERSE_FLAG
;

717 
lowî
 = (
uöt
)
	`©oi
(
›èrg
);

718 
Êags
 |
NO_LOOKUP_FLAG
;

721 
uµî
 = (
uöt
)
	`©oi
(
›èrg
);

722 
Êags
 |
NO_LOOKUP_FLAG
;

725 
lookup
 = 
åue
;

728  
	`comm™d_ußge
(&
ªp‹t_cmd
);

732 i‡(!
f‹m
)

733 
f‹m
 = 
XFS_BLOCK_QUOTA
;

735 i‡(!
ty≥
)

736 
ty≥
 = 
XFS_USER_QUOTA
 | 
XFS_GROUP_QUOTA
 | 
XFS_PROJ_QUOTA
;

738 i‡(
lookup
)

739 
Êags
 &~
NO_LOOKUP_FLAG
;

741 i‡((
Â
 = 
	`f›í_wrôe_£cuª
(
‚ame
)Ë=
NULL
)

744 i‡(
¨gc
 =
›töd
) {

745 i‡(
Êags
 & 
ALL_MOUNTS_FLAG
)

746 
	`ªp‹t_™y_ty≥
(
Â
, 
f‹m
, 
ty≥
, 
NULL
,

747 
lowî
, 
uµî
, 
Êags
);

748 i‡(
fs_∑th
 && (fs_∑th->
fs_Êags
 & 
FS_MOUNT_POINT
))

749 
	`ªp‹t_™y_ty≥
(
Â
, 
f‹m
, 
ty≥
, 
fs_∑th
->
fs_dú
,

750 
lowî
, 
uµî
, 
Êags
);

751 } 
¨gc
 > 
›töd
) {

752 
	`ªp‹t_™y_ty≥
(
Â
, 
f‹m
, 
ty≥
, 
¨gv
[
›töd
++],

753 
lowî
, 
uµî
, 
Êags
);

756 i‡(
‚ame
)

757 
	`f˛o£
(
Â
);

759 
	}
}

762 
	$ªp‹t_öô
()

764 
dump_cmd
.
«me
 = "dump";

765 
dump_cmd
.
cfunc
 = 
dump_f
;

766 
dump_cmd
.
¨gmö
 = 0;

767 
dump_cmd
.
¨gmax
 = -1;

768 
dump_cmd
.
¨gs
 = 
	`_
("[-g|-p|-u] [-f file]");

769 
dump_cmd
.
⁄ñöe
 = 
	`_
("dump quota information for backup utilities");

770 
dump_cmd
.
hñp
 = 
dump_hñp
;

771 
dump_cmd
.
Êags
 = 
CMD_FLAG_FOREIGN_OK
;

773 
ªp‹t_cmd
.
«me
 = "report";

774 
ªp‹t_cmd
.
Æäame
 = "repquota";

775 
ªp‹t_cmd
.
cfunc
 = 
ªp‹t_f
;

776 
ªp‹t_cmd
.
¨gmö
 = 0;

777 
ªp‹t_cmd
.
¨gmax
 = -1;

778 
ªp‹t_cmd
.
¨gs
 = 
	`_
("[-bir] [-gpu] [-ahnt] [-f file]");

779 
ªp‹t_cmd
.
⁄ñöe
 = 
	`_
("report filesystem quota information");

780 
ªp‹t_cmd
.
hñp
 = 
ªp‹t_hñp
;

781 
ªp‹t_cmd
.
Êags
 = 
CMD_FLAG_ONESHOT
 | 
CMD_FLAG_FOREIGN_OK
;

783 i‡(
ex≥π
) {

784 
	`add_comm™d
(&
dump_cmd
);

785 
	`add_comm™d
(&
ªp‹t_cmd
);

787 
	}
}

	@quota/state.c

18 
	~<°dboﬁ.h
>

19 
	~"comm™d.h
"

20 
	~"öô.h
"

21 
	~"quŸa.h
"

23 
cmdöfo_t
 
	goff_cmd
;

24 
cmdöfo_t
 
	g°©e_cmd
;

25 
cmdöfo_t
 
	gíabÀ_cmd
;

26 
cmdöfo_t
 
	gdißbÀ_cmd
;

27 
cmdöfo_t
 
	gªmove_cmd
;

30 
	$off_hñp
()

32 
	`¥ötf
(
	`_
(

50 
	}
}

53 
	$°©e_hñp
()

55 
	`¥ötf
(
	`_
(

66 
	}
}

69 
	$íabÀ_hñp
()

71 
	`¥ötf
(
	`_
(

82 
	}
}

85 
	$dißbÀ_hñp
()

87 
	`¥ötf
(
	`_
(

96 
	}
}

99 
	$ªmove_hñp
()

101 
	`¥ötf
(
	`_
(

110 
	}
}

113 
	$°©e_qfûe°©
(

114 
FILE
 *
Â
,

115 
fs_∑th
 *
mou¡
,

116 
uöt
 
ty≥
,

117 
fs_qfûe°©v
 *
qfs
,

118 
accou¡ög
,

119 
íf‹cög
)

121 
	`Ârötf
(
Â
, 
	`_
("%†quŸ®°©ê⁄ %†(%s)\n"), 
	`ty≥_to_°rög
(
ty≥
),

122 
mou¡
->
fs_dú
, mou¡->
fs_«me
);

123 
	`Ârötf
(
Â
, 
	`_
(" Accou¡ög: %s\n"), 
accou¡ög
 ? _("ON") : _("OFF"));

124 
	`Ârötf
(
Â
, 
	`_
(" Enf‹˚mít: %s\n"), 
íf‹cög
 ? _("ON") : _("OFF"));

125 i‡(
qfs
->
qfs_öo
 !(
__u64
) -1)

126 
	`Ârötf
(
Â
, 
	`_
(" Inode: #%llu (%llu blocks, %luÉxtents)\n"),

127 ()
qfs
->
qfs_öo
,

128 ()
qfs
->
qfs_nblks
,

129 ()
qfs
->
qfs_√xã¡s
);

131 
	`Ârötf
(
Â
, 
	`_
(" Inode: N/A\n"));

132 
	}
}

135 
	$°©e_timñimô
(

136 
FILE
 *
Â
,

137 
uöt
 
f‹m
,

138 
__uöt32_t
 
timñimô
)

140 
	`Ârötf
(
Â
, 
	`_
("%s graceÅime: %s\n"),

141 
	`f‹m_to_°rög
(
f‹m
),

142 
	`time_to_°rög
(
timñimô
, 
VERBOSE_FLAG
 | 
ABSOLUTE_FLAG
));

143 
	}
}

152 
	$°©e_°©_to_°©v
(

153 
fs_quŸa_°©
 *
s
,

154 
fs_quŸa_°©v
 *
sv
)

156 
	`mem£t
(
sv
, 0, (
fs_quŸa_°©v
));

159 
sv
->
qs_vîsi⁄
 = 
s
->qs_version;

160 
sv
->
qs_Êags
 = 
s
->qs_flags;

161 
sv
->
qs_öc‹edqs
 = 
s
->qs_incoredqs;

162 
sv
->
qs_btimñimô
 = 
s
->qs_btimelimit;

163 
sv
->
qs_ôimñimô
 = 
s
->qs_itimelimit;

164 
sv
->
qs_πbtimñimô
 = 
s
->qs_rtbtimelimit;

165 
sv
->
qs_bw¨∆imô
 = 
s
->qs_bwarnlimit;

166 
sv
->
qs_iw¨∆imô
 = 
s
->qs_iwarnlimit;

169 
sv
->
qs_uquŸa
.
qfs_öo
 = 
s
->qs_uquota.qfs_ino;

170 
sv
->
qs_uquŸa
.
qfs_nblks
 = 
s
->qs_uquota.qfs_nblks;

171 
sv
->
qs_uquŸa
.
qfs_√xã¡s
 = 
s
->qs_uquota.qfs_nextents;

182 i‡(
s
->
qs_Êags
 & 
XFS_QUOTA_GDQ_ACCT
) {

184 
sv
->
qs_gquŸa
.
qfs_öo
 = 
s
->qs_gquota.qfs_ino;

185 
sv
->
qs_gquŸa
.
qfs_nblks
 = 
s
->qs_gquota.qfs_nblks;

186 
sv
->
qs_gquŸa
.
qfs_√xã¡s
 = 
s
->qs_gquota.qfs_nextents;

187 } i‡(
s
->
qs_Êags
 & 
XFS_QUOTA_PDQ_ACCT
) {

189 
sv
->
qs_pquŸa
.
qfs_öo
 = 
s
->
qs_gquŸa
.qfs_ino;

190 
sv
->
qs_pquŸa
.
qfs_nblks
 = 
s
->
qs_gquŸa
.qfs_nblks;

191 
sv
->
qs_pquŸa
.
qfs_√xã¡s
 = 
s
->
qs_gquŸa
.qfs_nextents;

193 
	}
}

196 
	$°©e_quŸafûe_mou¡
(

197 
FILE
 *
Â
,

198 
uöt
 
ty≥
,

199 
fs_∑th
 *
mou¡
,

200 
uöt
 
Êags
)

202 
fs_quŸa_°©
 
s
;

203 
fs_quŸa_°©v
 
sv
;

204 *
dev
 = 
mou¡
->
fs_«me
;

206 
sv
.
qs_vîsi⁄
 = 
FS_QSTATV_VERSION1
;

208 i‡(
	`xfsquŸa˘l
(
XFS_GETQSTATV
, 
dev
, 
ty≥
, 0, (*)&
sv
) < 0) {

209 i‡(
	`xfsquŸa˘l
(
XFS_GETQSTAT
, 
dev
, 
ty≥
, 0, (*)&
s
) < 0) {

210 i‡(
Êags
 & 
VERBOSE_FLAG
)

211 
	`Ârötf
(
Â
,

212 
	`_
("%s quotaáreÇotÉnabled on %s\n"),

213 
	`ty≥_to_°rög
(
ty≥
), 
dev
);

216 
	`°©e_°©_to_°©v
(&
s
, &
sv
);

219 i‡(
ty≥
 & 
XFS_USER_QUOTA
)

220 
	`°©e_qfûe°©
(
Â
, 
mou¡
, 
XFS_USER_QUOTA
, &
sv
.
qs_uquŸa
,

221 
sv
.
qs_Êags
 & 
XFS_QUOTA_UDQ_ACCT
,

222 
sv
.
qs_Êags
 & 
XFS_QUOTA_UDQ_ENFD
);

223 i‡(
ty≥
 & 
XFS_GROUP_QUOTA
)

224 
	`°©e_qfûe°©
(
Â
, 
mou¡
, 
XFS_GROUP_QUOTA
, &
sv
.
qs_gquŸa
,

225 
sv
.
qs_Êags
 & 
XFS_QUOTA_GDQ_ACCT
,

226 
sv
.
qs_Êags
 & 
XFS_QUOTA_GDQ_ENFD
);

227 i‡(
ty≥
 & 
XFS_PROJ_QUOTA
)

228 
	`°©e_qfûe°©
(
Â
, 
mou¡
, 
XFS_PROJ_QUOTA
, &
sv
.
qs_pquŸa
,

229 
sv
.
qs_Êags
 & 
XFS_QUOTA_PDQ_ACCT
,

230 
sv
.
qs_Êags
 & 
XFS_QUOTA_PDQ_ENFD
);

232 
	`°©e_timñimô
(
Â
, 
XFS_BLOCK_QUOTA
, 
sv
.
qs_btimñimô
);

233 
	`°©e_timñimô
(
Â
, 
XFS_INODE_QUOTA
, 
sv
.
qs_ôimñimô
);

234 
	`°©e_timñimô
(
Â
, 
XFS_RTBLOCK_QUOTA
, 
sv
.
qs_πbtimñimô
);

235 
	}
}

238 
	$°©e_quŸafûe
(

239 
FILE
 *
Â
,

240 
uöt
 
ty≥
,

241 *
dú
,

242 
uöt
 
Êags
)

244 
fs_curs‹_t
 
curs‹
;

245 
fs_∑th_t
 *
mou¡
;

247 
	`fs_curs‹_öôüli£
(
dú
, 
FS_MOUNT_POINT
, &
curs‹
);

248 (
mou¡
 = 
	`fs_curs‹_√xt_íåy
(&
curs‹
)))

249 
	`°©e_quŸafûe_mou¡
(
Â
, 
ty≥
, 
mou¡
, 
Êags
);

250 
	}
}

253 
	$°©e_f
(

254 
¨gc
,

255 **
¨gv
)

257 
FILE
 *
Â
 = 
NULL
;

258 *
‚ame
 = 
NULL
;

259 
c
, 
Êags
 = 0, 
ty≥
 = 0;

261 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "af:gpuv")Ë!
EOF
) {

262 
c
) {

264 
Êags
 |
ALL_MOUNTS_FLAG
;

267 
‚ame
 = 
›èrg
;

270 
ty≥
 |
XFS_GROUP_QUOTA
;

273 
ty≥
 |
XFS_PROJ_QUOTA
;

276 
ty≥
 |
XFS_USER_QUOTA
;

279 
Êags
 |
VERBOSE_FLAG
;

282  
	`comm™d_ußge
(&
°©e_cmd
);

286 i‡(
¨gc
 !
›töd
)

287  
	`comm™d_ußge
(&
°©e_cmd
);

289 i‡((
Â
 = 
	`f›í_wrôe_£cuª
(
‚ame
)Ë=
NULL
)

292 i‡(!
ty≥
)

293 
ty≥
 = 
XFS_USER_QUOTA
 | 
XFS_GROUP_QUOTA
 | 
XFS_PROJ_QUOTA
;

295 i‡(
Êags
 & 
ALL_MOUNTS_FLAG
)

296 
	`°©e_quŸafûe
(
Â
, 
ty≥
, 
NULL
, 
Êags
);

297 i‡(
fs_∑th
 && fs_∑th->
fs_Êags
 & 
FS_MOUNT_POINT
)

298 
	`°©e_quŸafûe
(
Â
, 
ty≥
, 
fs_∑th
->
fs_dú
, 
Êags
);

300 i‡(
‚ame
)

301 
	`f˛o£
(
Â
);

303 
	}
}

306 
	$íabÀ_íf‹˚mít
(

307 *
dú
,

308 
uöt
 
ty≥
,

309 
uöt
 
qÊags
,

310 
uöt
 
Êags
)

312 
fs_∑th_t
 *
mou¡
;

314 
mou¡
 = 
	`fs_èbÀ_lookup
(
dú
, 
FS_MOUNT_POINT
);

315 i‡(!
mou¡
) {

316 
exôcode
 = 1;

317 
	`Ârötf
(
°dîr
, "%s: unknow¿mou¡Öoöà%s\n", 
¥og«me
, 
dú
);

320 
dú
 = 
mou¡
->
fs_«me
;

321 i‡(
	`xfsquŸa˘l
(
XFS_QUOTAON
, 
dú
, 
ty≥
, 0, (*)&
qÊags
) < 0)

322 
	`≥º‹
("XFS_QUOTAON");

323 i‡(
Êags
 & 
VERBOSE_FLAG
)

324 
	`°©e_quŸafûe_mou¡
(
°dout
, 
ty≥
, 
mou¡
, 
Êags
);

325 
	}
}

328 
	$dißbÀ_íf‹˚mít
(

329 *
dú
,

330 
uöt
 
ty≥
,

331 
uöt
 
qÊags
,

332 
uöt
 
Êags
)

334 
fs_∑th_t
 *
mou¡
;

336 
mou¡
 = 
	`fs_èbÀ_lookup
(
dú
, 
FS_MOUNT_POINT
);

337 i‡(!
mou¡
) {

338 
exôcode
 = 1;

339 
	`Ârötf
(
°dîr
, "%s: unknow¿mou¡Öoöà%s\n", 
¥og«me
, 
dú
);

342 
dú
 = 
mou¡
->
fs_«me
;

343 i‡(
	`xfsquŸa˘l
(
XFS_QUOTAOFF
, 
dú
, 
ty≥
, 0, (*)&
qÊags
) < 0)

344 
	`≥º‹
("XFS_QUOTAOFF");

345 i‡(
Êags
 & 
VERBOSE_FLAG
)

346 
	`°©e_quŸafûe_mou¡
(
°dout
, 
ty≥
, 
mou¡
, 
Êags
);

347 
	}
}

350 
	$quŸaoff
(

351 *
dú
,

352 
uöt
 
ty≥
,

353 
uöt
 
qÊags
,

354 
uöt
 
Êags
)

356 
fs_∑th_t
 *
mou¡
;

358 
mou¡
 = 
	`fs_èbÀ_lookup
(
dú
, 
FS_MOUNT_POINT
);

359 i‡(!
mou¡
) {

360 
exôcode
 = 1;

361 
	`Ârötf
(
°dîr
, "%s: unknow¿mou¡Öoöà%s\n", 
¥og«me
, 
dú
);

364 
dú
 = 
mou¡
->
fs_«me
;

365 i‡(
	`xfsquŸa˘l
(
XFS_QUOTAOFF
, 
dú
, 
ty≥
, 0, (*)&
qÊags
) < 0)

366 
	`≥º‹
("XFS_QUOTAOFF");

367 i‡(
Êags
 & 
VERBOSE_FLAG
)

368 
	`°©e_quŸafûe_mou¡
(
°dout
, 
ty≥
, 
mou¡
, 
Êags
);

369 
	}
}

372 
	$ªmove_qty≥_exã¡s
(

373 *
dú
,

374 
uöt
 
ty≥
)

376 
îr‹
 = 0;

378 i‡((
îr‹
 = 
	`xfsquŸa˘l
(
XFS_QUOTARM
, 
dú
, 
ty≥
, 0, (*)&type)) < 0)

379 
	`≥º‹
("XFS_QUOTARM");

380  
îr‹
;

381 
	}
}

384 
	$ªmove_exã¡s
(

385 *
dú
,

386 
uöt
 
ty≥
,

387 
uöt
 
Êags
)

389 
fs_∑th_t
 *
mou¡
;

391 
mou¡
 = 
	`fs_èbÀ_lookup
(
dú
, 
FS_MOUNT_POINT
);

392 i‡(!
mou¡
) {

393 
exôcode
 = 1;

394 
	`Ârötf
(
°dîr
, "%s: unknow¿mou¡Öoöà%s\n", 
¥og«me
, 
dú
);

397 
dú
 = 
mou¡
->
fs_«me
;

398 i‡(
ty≥
 & 
XFS_USER_QUOTA
) {

399 i‡(
	`ªmove_qty≥_exã¡s
(
dú
, 
XFS_USER_QUOTA
) < 0)

402 i‡(
ty≥
 & 
XFS_GROUP_QUOTA
) {

403 i‡(
	`ªmove_qty≥_exã¡s
(
dú
, 
XFS_GROUP_QUOTA
) < 0)

405 } i‡(
ty≥
 & 
XFS_PROJ_QUOTA
) {

406 i‡(
	`ªmove_qty≥_exã¡s
(
dú
, 
XFS_PROJ_QUOTA
) < 0)

409 i‡(
Êags
 & 
VERBOSE_FLAG
)

410 
	`°©e_quŸafûe_mou¡
(
°dout
, 
ty≥
, 
mou¡
, 
Êags
);

411 
	}
}

414 
	$íabÀ_f
(

415 
¨gc
,

416 **
¨gv
)

418 
c
, 
Êags
 = 0, 
qÊags
 = 0, 
ty≥
 = 0;

420 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "gpuv")Ë!
EOF
) {

421 
c
) {

423 
ty≥
 |
XFS_GROUP_QUOTA
;

424 
qÊags
 |
XFS_QUOTA_GDQ_ACCT
 | 
XFS_QUOTA_GDQ_ENFD
;

427 
ty≥
 |
XFS_PROJ_QUOTA
;

428 
qÊags
 |
XFS_QUOTA_PDQ_ACCT
 | 
XFS_QUOTA_PDQ_ENFD
;

431 
ty≥
 |
XFS_USER_QUOTA
;

432 
qÊags
 |
XFS_QUOTA_UDQ_ACCT
 | 
XFS_QUOTA_UDQ_ENFD
;

435 
Êags
 |
VERBOSE_FLAG
;

438  
	`comm™d_ußge
(&
íabÀ_cmd
);

442 i‡(
¨gc
 !
›töd
)

443  
	`comm™d_ußge
(&
íabÀ_cmd
);

445 i‡(!
ty≥
) {

446 
ty≥
 |
XFS_USER_QUOTA
;

447 
qÊags
 |
XFS_QUOTA_UDQ_ACCT
 | 
XFS_QUOTA_UDQ_ENFD
;

450 i‡(
fs_∑th
->
fs_Êags
 & 
FS_MOUNT_POINT
)

451 
	`íabÀ_íf‹˚mít
(
fs_∑th
->
fs_dú
, 
ty≥
, 
qÊags
, 
Êags
);

453 
	}
}

456 
	$dißbÀ_f
(

457 
¨gc
,

458 **
¨gv
)

460 
c
, 
Êags
 = 0, 
qÊags
 = 0, 
ty≥
 = 0;

462 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "gpuv")Ë!
EOF
) {

463 
c
) {

465 
ty≥
 |
XFS_GROUP_QUOTA
;

466 
qÊags
 |
XFS_QUOTA_GDQ_ENFD
;

469 
ty≥
 |
XFS_PROJ_QUOTA
;

470 
qÊags
 |
XFS_QUOTA_PDQ_ENFD
;

473 
ty≥
 |
XFS_USER_QUOTA
;

474 
qÊags
 |
XFS_QUOTA_UDQ_ENFD
;

477 
Êags
 |
VERBOSE_FLAG
;

480  
	`comm™d_ußge
(&
dißbÀ_cmd
);

484 i‡(
¨gc
 !
›töd
)

485  
	`comm™d_ußge
(&
dißbÀ_cmd
);

487 i‡(!
ty≥
) {

488 
ty≥
 |
XFS_USER_QUOTA
;

489 
qÊags
 |
XFS_QUOTA_UDQ_ENFD
;

492 i‡(
fs_∑th
->
fs_Êags
 & 
FS_MOUNT_POINT
)

493 
	`dißbÀ_íf‹˚mít
(
fs_∑th
->
fs_dú
, 
ty≥
, 
qÊags
, 
Êags
);

495 
	}
}

498 
	$off_f
(

499 
¨gc
,

500 **
¨gv
)

502 
c
, 
Êags
 = 0, 
qÊags
 = 0, 
ty≥
 = 0;

504 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "gpuv")Ë!
EOF
) {

505 
c
) {

507 
ty≥
 |
XFS_GROUP_QUOTA
;

508 
qÊags
 |
XFS_QUOTA_GDQ_ACCT
 | 
XFS_QUOTA_GDQ_ENFD
;

511 
ty≥
 |
XFS_PROJ_QUOTA
;

512 
qÊags
 |
XFS_QUOTA_PDQ_ACCT
 | 
XFS_QUOTA_PDQ_ENFD
;

515 
ty≥
 |
XFS_USER_QUOTA
;

516 
qÊags
 |
XFS_QUOTA_UDQ_ACCT
 | 
XFS_QUOTA_UDQ_ENFD
;

519 
Êags
 |
VERBOSE_FLAG
;

522  
	`comm™d_ußge
(&
off_cmd
);

526 i‡(
¨gc
 !
›töd
)

527  
	`comm™d_ußge
(&
off_cmd
);

529 i‡(!
ty≥
) {

530 
ty≥
 |
XFS_USER_QUOTA
;

531 
qÊags
 |
XFS_QUOTA_UDQ_ACCT
 | 
XFS_QUOTA_UDQ_ENFD
;

534 i‡(
fs_∑th
->
fs_Êags
 & 
FS_MOUNT_POINT
)

535 
	`quŸaoff
(
fs_∑th
->
fs_dú
, 
ty≥
, 
qÊags
, 
Êags
);

537 
	}
}

540 
	$ªmove_f
(

541 
¨gc
,

542 **
¨gv
)

544 
c
, 
Êags
 = 0, 
ty≥
 = 0;

546 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "gpuv")Ë!
EOF
) {

547 
c
) {

549 
ty≥
 |
XFS_GROUP_QUOTA
;

552 
ty≥
 |
XFS_PROJ_QUOTA
;

555 
ty≥
 |
XFS_USER_QUOTA
;

558 
Êags
 |
VERBOSE_FLAG
;

561  
	`comm™d_ußge
(&
ªmove_cmd
);

565 i‡(
¨gc
 !
›töd
)

566  
	`comm™d_ußge
(&
ªmove_cmd
);

568 i‡(!
ty≥
) {

569 
ty≥
 |
XFS_USER_QUOTA
;

572 i‡(
fs_∑th
->
fs_Êags
 & 
FS_MOUNT_POINT
)

573 
	`ªmove_exã¡s
(
fs_∑th
->
fs_dú
, 
ty≥
, 
Êags
);

575 
	}
}

578 
	$°©e_öô
()

580 
off_cmd
.
«me
 = "off";

581 
off_cmd
.
cfunc
 = 
off_f
;

582 
off_cmd
.
¨gmö
 = 0;

583 
off_cmd
.
¨gmax
 = -1;

584 
off_cmd
.
¨gs
 = 
	`_
("[-gpu] [-v]");

585 
off_cmd
.
⁄ñöe
 = 
	`_
("permanently switch quota off foráÖath");

586 
off_cmd
.
hñp
 = 
off_hñp
;

588 
°©e_cmd
.
«me
 = "state";

589 
°©e_cmd
.
cfunc
 = 
°©e_f
;

590 
°©e_cmd
.
¨gmö
 = 0;

591 
°©e_cmd
.
¨gmax
 = -1;

592 
°©e_cmd
.
¨gs
 = 
	`_
("[-gpu] [-a] [-v] [-f file]");

593 
°©e_cmd
.
⁄ñöe
 = 
	`_
("get overall quota state information");

594 
°©e_cmd
.
hñp
 = 
°©e_hñp
;

595 
°©e_cmd
.
Êags
 = 
CMD_FLAG_FOREIGN_OK
;

597 
íabÀ_cmd
.
«me
 = "enable";

598 
íabÀ_cmd
.
cfunc
 = 
íabÀ_f
;

599 
íabÀ_cmd
.
¨gmö
 = 0;

600 
íabÀ_cmd
.
¨gmax
 = -1;

601 
íabÀ_cmd
.
¨gs
 = 
	`_
("[-gpu] [-v]");

602 
íabÀ_cmd
.
⁄ñöe
 = 
	`_
("enable quotaÉnforcement");

603 
íabÀ_cmd
.
hñp
 = 
íabÀ_hñp
;

605 
dißbÀ_cmd
.
«me
 = "disable";

606 
dißbÀ_cmd
.
cfunc
 = 
dißbÀ_f
;

607 
dißbÀ_cmd
.
¨gmö
 = 0;

608 
dißbÀ_cmd
.
¨gmax
 = -1;

609 
dißbÀ_cmd
.
¨gs
 = 
	`_
("[-gpu] [-v]");

610 
dißbÀ_cmd
.
⁄ñöe
 = 
	`_
("disable quotaÉnforcement");

611 
dißbÀ_cmd
.
hñp
 = 
dißbÀ_hñp
;

613 
ªmove_cmd
.
«me
 = "remove";

614 
ªmove_cmd
.
cfunc
 = 
ªmove_f
;

615 
ªmove_cmd
.
¨gmö
 = 0;

616 
ªmove_cmd
.
¨gmax
 = -1;

617 
ªmove_cmd
.
¨gs
 = 
	`_
("[-gpu] [-v]");

618 
ªmove_cmd
.
⁄ñöe
 = 
	`_
("remove quotaÉxtents fromá filesystem");

619 
ªmove_cmd
.
hñp
 = 
ªmove_hñp
;

621 i‡(
ex≥π
) {

622 
	`add_comm™d
(&
off_cmd
);

623 
	`add_comm™d
(&
°©e_cmd
);

624 
	`add_comm™d
(&
íabÀ_cmd
);

625 
	`add_comm™d
(&
dißbÀ_cmd
);

626 
	`add_comm™d
(&
ªmove_cmd
);

628 
	}
}

	@quota/util.c

19 
	~<sys/ty≥s.h
>

20 
	~<°dboﬁ.h
>

21 
	~<pwd.h
>

22 
	~<gΩ.h
>

23 
	~<utmp.h
>

24 
	~"öô.h
"

25 
	~"quŸa.h
"

27 
	#SECONDS_IN_A_DAY
 (24 * 60 * 60)

	)

28 
	#SECONDS_IN_A_HOUR
 (60 * 60)

	)

29 
	#SECONDS_IN_A_MINUTE
 (60)

	)

32 
	$time_to_°rög
(

33 
time_t
 
‹igö
,

34 
uöt
 
Êags
)

36 
time°amp
[32];

37 
time_t
 
now
, 
timî
;

38 
uöt
 
days
, 
hours
, 
möuãs
, 
£c⁄ds
;

40 i‡(
Êags
 & 
ABSOLUTE_FLAG
) {

41 
timî
 = 
‹igö
;

43 
	`time
(&
now
);

44 
timî
 = 
	`MAX
(
‹igö
 - 
now
, 0);

56 i‡((
timî
 > 
SECONDS_IN_A_DAY
Ë&& !(
Êags
 & 
VERBOSE_FLAG
))

57 
timî
 += 30;

59 
days
 = 
timî
 / 
SECONDS_IN_A_DAY
;

60 i‡(
days
)

61 
timî
 %
SECONDS_IN_A_DAY
;

62 
hours
 = 
timî
 / 
SECONDS_IN_A_HOUR
;

63 i‡(
hours
)

64 
timî
 %
SECONDS_IN_A_HOUR
;

65 
möuãs
 = 
timî
 / 
SECONDS_IN_A_MINUTE
;

66 
£c⁄ds
 = 
timî
 % 
SECONDS_IN_A_MINUTE
;

68 i‡(
Êags
 & 
LIMIT_FLAG
) {

69 
	`¢¥ötf
(
time°amp
, —ime°amp), (
Êags
 & 
HUMAN_FLAG
) ?

70 
	`_
("[-none-]") : _("[--none--]"));

71 } i‡(
‹igö
 == 0) {

72 
	`¢¥ötf
(
time°amp
, —ime°amp), (
Êags
 & 
HUMAN_FLAG
) ?

73 
	`_
("[------]") : _("[--------]"));

74 } i‡((
hours
 =0 && 
möuãs
 =0 && 
£c⁄ds
 == 0) ||

75 (!(
Êags
 & 
VERBOSE_FLAG
Ë&& 
days
 > 0)) {

76 
	`¢¥ötf
(
time°amp
, (timestamp), "[%u %s]",

77 
days
, day†=1 ? 
	`_
("day") : _("days"));

78 } i‡(
Êags
 & 
VERBOSE_FLAG
) {

79 
	`¢¥ötf
(
time°amp
, (timestamp), "[%u %s %02u:%02u:%02u]",

80 
days
, day†=1 ? 
	`_
("day") : _("days"),

81 
hours
, 
möuãs
, 
£c⁄ds
);

83 
	`¢¥ötf
(
time°amp
, (timestamp),

84 (
Êags
 & 
HUMAN_FLAG
) ?

86 
hours
, 
möuãs
, 
£c⁄ds
);

88  
time°amp
;

89 
	}
}

92 
	$round_¢¥ötf
(

93 *
•
,

94 
size_t
 
size
,

95 c⁄° *
fmt_round
,

96 c⁄° *
fmt_nŸ_round
,

97 
__uöt64_t
 
vÆue
,

98 
__uöt64_t
 
divis‹
)

100 
v
 = ()
vÆue
 / 
divis‹
;

102 
vÆue
 /
divis‹
;

103 i‡(
v
 =()
vÆue
)

104  
	`¢¥ötf
(
•
, 
size
, 
fmt_round
, (
uöt
)
vÆue
);

106  
	`¢¥ötf
(
•
, 
size
, 
fmt_nŸ_round
, 
v
);

107 
	}
}

110 
	#BBS_TO_EXABYTES
(
bbs
Ë((
__uöt64_t
)(bbs)>>51)

	)

111 
	#BBS_TO_PETABYTES
(
bbs
Ë((
__uöt64_t
)(bbs)>>41)

	)

112 
	#BBS_TO_TERABYTES
(
bbs
Ë((
__uöt64_t
)(bbs)>>31)

	)

113 
	#BBS_TO_GIGABYTES
(
bbs
Ë((
__uöt64_t
)(bbs)>>21)

	)

114 
	#BBS_TO_MEGABYTES
(
bbs
Ë((
__uöt64_t
)(bbs)>>11)

	)

115 
	#BBS_TO_KILOBYTES
(
bbs
Ë((
__uöt64_t
)(bbs)>>1)

	)

117 
	#BBEXABYTE
 ((
__uöt64_t
)1<<51)

	)

118 
	#BBPETABYTE
 ((
__uöt64_t
)1<<41)

	)

119 
	#BBTERABYTE
 ((
__uöt64_t
)1<<31)

	)

120 
	#BBGIGABYTE
 ((
__uöt64_t
)1<<21)

	)

121 
	#BBMEGABYTE
 ((
__uöt64_t
)1<<11)

	)

122 
	#BBKILOBYTE
 ((
__uöt64_t
)1<< 1)

	)

125 
	$bbs_to_°rög
(

126 
__uöt64_t
 
v
,

127 *
•
,

128 
uöt
 
size
)

130 i‡(
v
 == 0)

131 
	`¢¥ötf
(
•
, 
size
, "%4u", (
uöt
)
v
);

132 i‡(
	`BBS_TO_EXABYTES
(
v
))

133 
	`round_¢¥ötf
(
•
, 
size
, "%3uE", "%3.1fE", 
v
, 
BBEXABYTE
);

134 i‡(
	`BBS_TO_PETABYTES
(
v
))

135 
	`round_¢¥ötf
(
•
, 
size
, "%3uP", "%3.1fP", 
v
, 
BBPETABYTE
);

136 i‡(
	`BBS_TO_TERABYTES
(
v
))

137 
	`round_¢¥ötf
(
•
, 
size
, "%3uT", "%3.1fT", 
v
, 
BBTERABYTE
);

138 i‡(
	`BBS_TO_GIGABYTES
(
v
))

139 
	`round_¢¥ötf
(
•
, 
size
, "%3uG", "%3.1fG", 
v
, 
BBGIGABYTE
);

140 i‡(
	`BBS_TO_MEGABYTES
(
v
))

141 
	`round_¢¥ötf
(
•
, 
size
, "%3uM", "%3.1fM", 
v
, 
BBMEGABYTE
);

142 i‡(
	`BBS_TO_KILOBYTES
(
v
))

143 
	`round_¢¥ötf
(
•
, 
size
, "%3uK", "%3.1fK", 
v
, 
BBKILOBYTE
);

145 
	`¢¥ötf
(
•
, 
size
, "%4u", (
uöt
)
v
 << 
BBSHIFT
);

146  
•
;

147 
	}
}

149 
	#THOUSAND
 ((
__uöt64_t
)1000)

	)

150 
	#MILLION
 ((
__uöt64_t
)1000*1000)

	)

151 
	#BILLION
 ((
__uöt64_t
)1000*1000*1000)

	)

152 
	#TRILLION
 ((
__uöt64_t
)1000*1000*1000*1000)

	)

153 
	#GAZILLION
 ((
__uöt64_t
)1000*1000*1000*1000*1000)

	)

154 
	#RIDICULOUS
 ((
__uöt64_t
)1000*1000*1000*1000*1000*1000)

	)

155 
	#STOPALREADY
 ((
__uöt64_t
)1000*1000*1000*1000*1000*1000*1000)

	)

158 
	$num_to_°rög
(

159 
__uöt64_t
 
v
,

160 *
•
,

161 
uöt
 
size
)

163 i‡(
v
 == 0)

164 
	`¢¥ötf
(
•
, 
size
, "%4u", (
uöt
)
v
);

165 i‡(
v
 > 
STOPALREADY
)

166 
	`round_¢¥ötf
(
•
, 
size
, "%3us", "%3.1fs", 
v
, 
STOPALREADY
);

167 i‡(
v
 > 
RIDICULOUS
)

168 
	`round_¢¥ötf
(
•
, 
size
, "%3ur", "%3.1‰", 
v
, 
RIDICULOUS
);

169 i‡(
v
 > 
GAZILLION
)

170 
	`round_¢¥ötf
(
•
, 
size
, "%3ug", "%3.1fg", 
v
, 
GAZILLION
);

171 i‡(
v
 > 
TRILLION
)

172 
	`round_¢¥ötf
(
•
, 
size
, "%3ut", "%3.1·", 
v
, 
TRILLION
);

173 i‡(
v
 > 
BILLION
)

174 
	`round_¢¥ötf
(
•
, 
size
, "%3ub", "%3.1fb", 
v
, 
BILLION
);

175 i‡(
v
 > 
MILLION
)

176 
	`round_¢¥ötf
(
•
, 
size
, "%3um", "%3.1fm", 
v
, 
MILLION
);

177 i‡(
v
 > 
THOUSAND
)

178 
	`round_¢¥ötf
(
•
, 
size
, "%3uk", "%3.1fk", 
v
, 
THOUSAND
);

180 
	`¢¥ötf
(
•
, 
size
, "%4u", (
uöt
)
v
);

181  
•
;

182 
	}
}

185 
	$p˘_to_°rög
(

186 
__uöt64_t
 
p‹ti⁄
,

187 
__uöt64_t
 
whﬁe
,

188 *
buf
,

189 
uöt
 
size
)

191 
uöt
 
≥r˚¡
;

193 
≥r˚¡
 = 
whﬁe
 ? (
uöt
Ë(100.0 * 
p‹ti⁄
 / whole + 0.5) : 0;

194 i‡(
	`¢¥ötf
(
buf
, 
size
, "%3u", 
≥r˚¡
) < 0)

197  
buf
;

198 
	}
}

201 
	$f‹m_to_°rög
(

202 
uöt
 
f‹m
)

204 *
f‹ms
[] = {

205 
	`_
("Blocks"), _("Inodes"), _("Realtime Blocks") };

207 i‡(
f‹m
 & 
XFS_BLOCK_QUOTA
)

208  
f‹ms
[0];

209 i‡(
f‹m
 & 
XFS_INODE_QUOTA
)

210  
f‹ms
[1];

211 i‡(
f‹m
 & 
XFS_RTBLOCK_QUOTA
)

212  
f‹ms
[2];

213  
NULL
;

214 
	}
}

217 
	$ty≥_to_°rög
(

218 
uöt
 
ty≥
)

220 *
ty≥s
[] = { 
	`_
("User"), _("Group"), _("Project") };

222 i‡(
ty≥
 & 
XFS_USER_QUOTA
)

223  
ty≥s
[0];

224 i‡(
ty≥
 & 
XFS_GROUP_QUOTA
)

225  
ty≥s
[1];

226 i‡(
ty≥
 & 
XFS_PROJ_QUOTA
)

227  
ty≥s
[2];

228  
NULL
;

229 
	}
}

236 
	#NID
 4096

	)

237 
	#IDMASK
 (
NID
-1)

	)

240 
__uöt32_t
 
	mid
;

241 
	m«me
[
NMAX
+1];

242 } 
	tidˇche_t
;

244 
idˇche_t
 
	guidnc
[
NID
];

245 
idˇche_t
 
	ggidnc
[
NID
];

246 
idˇche_t
 
	gpidnc
[
NID
];

247 
	guíåõ¶e·
 = 
NID
;

248 
	ggíåõ¶e·
 = 
NID
;

249 
	g≥¡rõ¶e·
 = 
NID
;

251 
idˇche_t
 *

252 
	$gë√xçwít
(

253 
__uöt32_t
 
id
,

254 
byid
)

256 
∑sswd
 *
pw
;

257 
idˇche_t
 
idc
;

260 i‡((
pw
 = 
byid
? 
	`gëpwuid
(
id
Ë: 
	`gëpwít
()Ë=
NULL
)

261  
NULL
;

262 
idc
.
id
 = 
pw
->
pw_uid
;

263 
	`°∫˝y
(
idc
.
«me
, 
pw
->
pw_«me
, 
NMAX
);

264  &
idc
;

265 
	}
}

267 
idˇche_t
 *

268 
	$gë√xtgª¡
(

269 
__uöt32_t
 
id
,

270 
byid
)

272 
group
 *
gr
;

273 
idˇche_t
 
idc
;

275 i‡((
gr
 = 
byid
? 
	`gëgrgid
(
id
Ë: 
	`gëgª¡
()Ë=
NULL
)

276  
NULL
;

277 
idc
.
id
 = 
gr
->
gr_gid
;

278 
	`°∫˝y
(
idc
.
«me
, 
gr
->
gr_«me
, 
NMAX
);

279  &
idc
;

280 
	}
}

282 
idˇche_t
 *

283 
	$gë√xçª¡
(

284 
__uöt32_t
 
id
,

285 
byid
)

287 
fs_¥oje˘_t
 *
¥
;

288 
idˇche_t
 
idc
;

290 i‡((
¥
 = 
byid
? 
	`gë¥¥id
(
id
Ë: 
	`gë¥ít
()Ë=
NULL
)

291  
NULL
;

292 
idc
.
id
 = 
¥
->
¥_¥id
;

293 
	`°∫˝y
(
idc
.
«me
, 
¥
->
¥_«me
, 
NMAX
);

294  &
idc
;

295 
	}
}

298 
	$uid_to_«me
(

299 
__uöt32_t
 
id
)

301 
idˇche_t
 *
n˝
, *
idp
;

304 
n˝
 = &
uidnc
[
id
 & 
IDMASK
];

305 i‡(
n˝
->
id
 =id &&Ç˝->
«me
[0])

306  
n˝
->
«me
;

307 i‡(
uíåõ¶e·
) {

312 i‡(
uíåõ¶e·
 =
NID
)

313 
	`£çwít
();

314 ((
idp
 = 
	`gë√xçwít
(
id
, 0)Ë!
NULL
Ë&& 
uíåõ¶e·
) {

315 
uíåõ¶e·
--;

316 
n˝
 = &
uidnc
[
idp
->
id
 & 
IDMASK
];

317 i‡(
n˝
->
«me
[0] ='\0' || 
idp
->
id
 == id)

318 
	`mem˝y
(
n˝
, 
idp
, (
idˇche_t
));

319 i‡(
idp
->
id
 == id)

320  
n˝
->
«me
;

322 
	`ídpwít
();

323 
uíåõ¶e·
 = 0;

324 
n˝
 = &
uidnc
[
id
 & 
IDMASK
];

328 i‡((
idp
 = 
	`gë√xçwít
(
id
, 1)Ë=
NULL
)

329  
NULL
;

330 
	`mem˝y
(
n˝
, 
idp
, (
idˇche_t
));

331  
n˝
->
«me
;

332 
	}
}

335 
	$gid_to_«me
(

336 
__uöt32_t
 
id
)

338 
idˇche_t
 *
n˝
, *
idp
;

341 
n˝
 = &
gidnc
[
id
 & 
IDMASK
];

342 i‡(
n˝
->
id
 =id &&Ç˝->
«me
[0])

343  
n˝
->
«me
;

344 i‡(
gíåõ¶e·
) {

349 i‡(
gíåõ¶e·
 =
NID
)

350 
	`£tgª¡
();

351 ((
idp
 = 
	`gë√xtgª¡
(
id
, 0)Ë!
NULL
Ë&& 
gíåõ¶e·
) {

352 
gíåõ¶e·
--;

353 
n˝
 = &
gidnc
[
idp
->
id
 & 
IDMASK
];

354 i‡(
n˝
->
«me
[0] ='\0' || 
idp
->
id
 == id)

355 
	`mem˝y
(
n˝
, 
idp
, (
idˇche_t
));

356 i‡(
idp
->
id
 == id)

357  
n˝
->
«me
;

359 
	`ídgª¡
();

360 
gíåõ¶e·
 = 0;

361 
n˝
 = &
gidnc
[
id
 & 
IDMASK
];

365 i‡((
idp
 = 
	`gë√xtgª¡
(
id
, 1)Ë=
NULL
)

366  
NULL
;

367 
	`mem˝y
(
n˝
, 
idp
, (
idˇche_t
));

368  
n˝
->
«me
;

369 
	}
}

372 
	$¥id_to_«me
(

373 
__uöt32_t
 
id
)

375 
idˇche_t
 *
n˝
, *
idp
;

378 
n˝
 = &
pidnc
[
id
 & 
IDMASK
];

379 i‡(
n˝
->
id
 =id &&Ç˝->
«me
[0])

380  
n˝
->
«me
;

381 i‡(
≥¡rõ¶e·
) {

386 i‡(
≥¡rõ¶e·
 =
NID
)

387 
	`£çª¡
();

388 ((
idp
 = 
	`gë√xçª¡
(
id
, 0)Ë!
NULL
Ë&& 
≥¡rõ¶e·
) {

389 
≥¡rõ¶e·
--;

390 
n˝
 = &
pidnc
[
idp
->
id
 & 
IDMASK
];

391 i‡(
n˝
->
«me
[0] ='\0' || 
idp
->
id
 == id)

392 
	`mem˝y
(
n˝
, 
idp
, (
idˇche_t
));

393 i‡(
idp
->
id
 == id)

394  
n˝
->
«me
;

396 
	`íd¥ít
();

397 
≥¡rõ¶e·
 = 0;

398 
n˝
 = &
pidnc
[
id
 & 
IDMASK
];

402 i‡((
idp
 = 
	`gë√xçª¡
(
id
, 1)Ë=
NULL
)

403  
NULL
;

404 
	`mem˝y
(
n˝
, 
idp
, (
idˇche_t
));

405  
n˝
->
«me
;

406 
	}
}

416 
FILE
 *

417 
	$f›í_wrôe_£cuª
(

418 *
‚ame
)

420 
FILE
 *
Â
;

421 
fd
;

423 i‡(!
‚ame
)

424  
°dout
;

426 i‡((
fd
 = 
	`›í
(
‚ame
, 
O_CREAT
|
O_WRONLY
|
O_EXCL
, 0600)) < 0) {

427 
exôcode
 = 1;

428 
	`Ârötf
(
°dîr
, 
	`_
("%s: open on %s failed: %s\n"),

429 
¥og«me
, 
‚ame
, 
	`°ªº‹
(
î∫o
));

430  
NULL
;

432 i‡((
Â
 = 
	`fd›í
(
fd
, "w")Ë=
NULL
) {

433 
exôcode
 = 1;

434 
	`Ârötf
(
°dîr
, 
	`_
("%s: fdopen on %s failed: %s\n"),

435 
¥og«me
, 
‚ame
, 
	`°ªº‹
(
î∫o
));

436 
	`˛o£
(
fd
);

437  
NULL
;

439  
Â
;

440 
	}
}

	@repair/agheader.c

19 
	~"libxfs.h
"

20 
	~"globÆs.h
"

21 
	~"aghódî.h
"

22 
	~"¥Ÿos.h
"

23 
	~"îr_¥Ÿos.h
"

31 
	$vîify_£t_agf
(
xfs_mou¡_t
 *
mp
, 
xfs_agf_t
 *
agf
, 
xfs_agnumbî_t
 
i
)

33 
xfs_rfsblock_t
 
agblocks
;

34 
ªtvÆ
 = 0;

38 i‡(
	`be32_to_˝u
(
agf
->
agf_magi˙um
Ë!
XFS_AGF_MAGIC
) {

39 
ªtvÆ
 = 
XR_AG_AGF
;

40 
	`do_w¨n
(
	`_
("bad magic # 0x%x forágf %d\n"),

41 
	`be32_to_˝u
(
agf
->
agf_magi˙um
), 
i
);

43 i‡(!
no_modify
)

44 
agf
->
agf_magi˙um
 = 
	`˝u_to_be32
(
XFS_AGF_MAGIC
);

47 i‡(!
	`XFS_AGF_GOOD_VERSION
(
	`be32_to_˝u
(
agf
->
agf_vîsi⁄num
))) {

48 
ªtvÆ
 = 
XR_AG_AGF
;

49 
	`do_w¨n
(
	`_
("bad version # %d forágf %d\n"),

50 
	`be32_to_˝u
(
agf
->
agf_vîsi⁄num
), 
i
);

52 i‡(!
no_modify
)

53 
agf
->
agf_vîsi⁄num
 = 
	`˝u_to_be32
(
XFS_AGF_VERSION
);

56 i‡(
	`be32_to_˝u
(
agf
->
agf_£qno
Ë!
i
) {

57 
ªtvÆ
 = 
XR_AG_AGF
;

58 
	`do_w¨n
(
	`_
("bad sequence # %d forágf %d\n"),

59 
	`be32_to_˝u
(
agf
->
agf_£qno
), 
i
);

61 i‡(!
no_modify
)

62 
agf
->
agf_£qno
 = 
	`˝u_to_be32
(
i
);

65 i‡(
	`be32_to_˝u
(
agf
->
agf_Àngth
Ë!
mp
->
m_sb
.
sb_agblocks
) {

66 i‡(
i
 !
mp
->
m_sb
.
sb_agcou¡
 - 1) {

67 
ªtvÆ
 = 
XR_AG_AGF
;

68 
	`do_w¨n
(
	`_
("badÜength %d forágf %d, should be %d\n"),

69 
	`be32_to_˝u
(
agf
->
agf_Àngth
), 
i
,

70 
mp
->
m_sb
.
sb_agblocks
);

71 i‡(!
no_modify
)

72 
agf
->
agf_Àngth
 =

73 
	`˝u_to_be32
(
mp
->
m_sb
.
sb_agblocks
);

75 
agblocks
 = 
mp
->
m_sb
.
sb_dblocks
 -

76 (
xfs_rfsblock_t
Ë
mp
->
m_sb
.
sb_agblocks
 * 
i
;

78 i‡(
	`be32_to_˝u
(
agf
->
agf_Àngth
Ë!
agblocks
) {

79 
ªtvÆ
 = 
XR_AG_AGF
;

80 
	`do_w¨n
(

81 
	`_
("badÜígth %d f‹ág‡%d, should bê%" 
PRIu64
 "\n"),

82 
	`be32_to_˝u
(
agf
->
agf_Àngth
),

83 
i
, 
agblocks
);

84 i‡(!
no_modify
)

85 
agf
->
agf_Àngth
 = 
	`˝u_to_be32
(
agblocks
);

94 i‡(
	`be32_to_˝u
(
agf
->
agf_Êfú°
Ë>
	`XFS_AGFL_SIZE
(
mp
)) {

95 
	`do_w¨n
(
	`_
("flfirst %d inágf %dÅooÜarge (max = %zu)\n"),

96 
	`be32_to_˝u
(
agf
->
agf_Êfú°
),

97 
i
, 
	`XFS_AGFL_SIZE
(
mp
) - 1);

98 i‡(!
no_modify
)

99 
agf
->
agf_Êfú°
 = 
	`˝u_to_be32
(0);

102 i‡(
	`be32_to_˝u
(
agf
->
agf_Êœ°
Ë>
	`XFS_AGFL_SIZE
(
mp
)) {

103 
	`do_w¨n
(
	`_
("fllast %d inágf %dÅooÜarge (max = %zu)\n"),

104 
	`be32_to_˝u
(
agf
->
agf_Êœ°
),

105 
i
, 
	`XFS_AGFL_SIZE
(
mp
) - 1);

106 i‡(!
no_modify
)

107 
agf
->
agf_Êœ°
 = 
	`˝u_to_be32
(0);

112 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

113  
ªtvÆ
;

115 i‡(
	`∂©f‹m_uuid_com∑ª
(&
agf
->
agf_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
)) {

116 
uu
[64];

118 
ªtvÆ
 = 
XR_AG_AGF
;

119 
	`∂©f‹m_uuid_u≈¨£
(&
agf
->
agf_uuid
, 
uu
);

120 
	`do_w¨n
(
	`_
("bad uuid %†f‹ág‡%d\n"), 
uu
, 
i
);

122 i‡(!
no_modify
)

123 
	`∂©f‹m_uuid_c›y
(&
agf
->
agf_uuid
,

124 &
mp
->
m_sb
.
sb_mëa_uuid
);

126  
ªtvÆ
;

127 
	}
}

130 
	$vîify_£t_agi
(
xfs_mou¡_t
 *
mp
, 
xfs_agi_t
 *
agi
, 
xfs_agnumbî_t
 
agno
)

132 
xfs_rfsblock_t
 
agblocks
;

133 
ªtvÆ
 = 0;

137 i‡(
	`be32_to_˝u
(
agi
->
agi_magi˙um
Ë!
XFS_AGI_MAGIC
) {

138 
ªtvÆ
 = 
XR_AG_AGI
;

139 
	`do_w¨n
(
	`_
("bad magic # 0x%x forági %d\n"),

140 
	`be32_to_˝u
(
agi
->
agi_magi˙um
), 
agno
);

142 i‡(!
no_modify
)

143 
agi
->
agi_magi˙um
 = 
	`˝u_to_be32
(
XFS_AGI_MAGIC
);

146 i‡(!
	`XFS_AGI_GOOD_VERSION
(
	`be32_to_˝u
(
agi
->
agi_vîsi⁄num
))) {

147 
ªtvÆ
 = 
XR_AG_AGI
;

148 
	`do_w¨n
(
	`_
("bad version # %d forági %d\n"),

149 
	`be32_to_˝u
(
agi
->
agi_vîsi⁄num
), 
agno
);

151 i‡(!
no_modify
)

152 
agi
->
agi_vîsi⁄num
 = 
	`˝u_to_be32
(
XFS_AGI_VERSION
);

155 i‡(
	`be32_to_˝u
(
agi
->
agi_£qno
Ë!
agno
) {

156 
ªtvÆ
 = 
XR_AG_AGI
;

157 
	`do_w¨n
(
	`_
("bad sequence # %d forági %d\n"),

158 
	`be32_to_˝u
(
agi
->
agi_£qno
), 
agno
);

160 i‡(!
no_modify
)

161 
agi
->
agi_£qno
 = 
	`˝u_to_be32
(
agno
);

164 i‡(
	`be32_to_˝u
(
agi
->
agi_Àngth
Ë!
mp
->
m_sb
.
sb_agblocks
) {

165 i‡(
agno
 !
mp
->
m_sb
.
sb_agcou¡
 - 1) {

166 
ªtvÆ
 = 
XR_AG_AGI
;

167 
	`do_w¨n
(
	`_
("badÜength # %d forági %d, should be %d\n"),

168 
	`be32_to_˝u
(
agi
->
agi_Àngth
), 
agno
,

169 
mp
->
m_sb
.
sb_agblocks
);

170 i‡(!
no_modify
)

171 
agi
->
agi_Àngth
 =

172 
	`˝u_to_be32
(
mp
->
m_sb
.
sb_agblocks
);

174 
agblocks
 = 
mp
->
m_sb
.
sb_dblocks
 -

175 (
xfs_rfsblock_t
Ë
mp
->
m_sb
.
sb_agblocks
 * 
agno
;

177 i‡(
	`be32_to_˝u
(
agi
->
agi_Àngth
Ë!
agblocks
) {

178 
ªtvÆ
 = 
XR_AG_AGI
;

179 
	`do_w¨n
(

180 
	`_
("badÜígth # %d f‹ágò%d, should bê%" 
PRIu64
 "\n"),

181 
	`be32_to_˝u
(
agi
->
agi_Àngth
),

182 
agno
, 
agblocks
);

183 i‡(!
no_modify
)

184 
agi
->
agi_Àngth
 = 
	`˝u_to_be32
(
agblocks
);

191 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

192  
ªtvÆ
;

194 i‡(
	`∂©f‹m_uuid_com∑ª
(&
agi
->
agi_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
)) {

195 
uu
[64];

197 
ªtvÆ
 = 
XR_AG_AGI
;

198 
	`∂©f‹m_uuid_u≈¨£
(&
agi
->
agi_uuid
, 
uu
);

199 
	`do_w¨n
(
	`_
("bad uuid %†f‹ágò%d\n"), 
uu
, 
agno
);

201 i‡(!
no_modify
)

202 
	`∂©f‹m_uuid_c›y
(&
agi
->
agi_uuid
,

203 &
mp
->
m_sb
.
sb_mëa_uuid
);

206  
ªtvÆ
;

207 
	}
}

221 
	$com∑ª_sb
(
xfs_mou¡_t
 *
mp
, 
xfs_sb_t
 *
sb
)

223 
fs_geomëry_t
 
fs_geo
, 
sb_geo
;

225 
	`gë_sb_geomëry
(&
fs_geo
, &
mp
->
m_sb
);

226 
	`gë_sb_geomëry
(&
sb_geo
, 
sb
);

228 i‡(
	`memcmp
(&
fs_geo
, &
sb_geo
,

229 (*Ë&
fs_geo
.
sb_sh¨ed_vn
 - (*) &fs_geo))

230 (
XR_SB_GEO_MISMATCH
);

232 (
XR_OK
);

233 
	}
}

250 
	$£c⁄d¨y_sb_whack
(

251 
xfs_mou¡
 *
mp
,

252 
xfs_buf
 *
sbuf
,

253 
xfs_sb
 *
sb
,

254 
xfs_agnumbî_t
 
i
)

256 
xfs_dsb
 *
dsb
 = 
	`XFS_BUF_TO_SBP
(
sbuf
);

257 
do_bzîo
 = 0;

258 
size
;

259 *
ù
;

260 
rvÆ
 = 0;;

261 
uuid_t
 
tmpuuid
;

263 
rvÆ
 = 
do_bzîo
 = 0;

273 i‡(
	`xfs_sb_vîsi⁄_hasmëauuid
(
sb
))

274 
size
 = 
	`off£tof
(
xfs_sb_t
, 
sb_mëa_uuid
)

275 + (
sb
->
sb_mëa_uuid
);

276 i‡(
	`xfs_sb_vîsi⁄_has¸c
(
sb
))

277 
size
 = 
	`off£tof
(
xfs_sb_t
, 
sb_l¢
)

278 + (
sb
->
sb_l¢
);

279 i‡(
	`xfs_sb_vîsi⁄_hasm‹ebôs
(
sb
))

280 
size
 = 
	`off£tof
(
xfs_sb_t
, 
sb_bad_„©uªs2
)

281 + (
sb
->
sb_bad_„©uªs2
);

282 i‡(
	`xfs_sb_vîsi⁄_ha¶ogv2
(
sb
))

283 
size
 = 
	`off£tof
(
xfs_sb_t
, 
sb_logsunô
)

284 + (
sb
->
sb_logsunô
);

285 i‡(
	`xfs_sb_vîsi⁄_has£˘‹
(
sb
))

286 
size
 = 
	`off£tof
(
xfs_sb_t
, 
sb_log£˘size
)

287 + (
sb
->
sb_log£˘size
);

289 
size
 = 
	`off£tof
(
xfs_sb_t
, 
sb_dúblklog
)

290 + (
sb
->
sb_dúblklog
);

293 
ù
 = 
	`XFS_BUF_PTR
(
sbuf
Ë+ 
size
;

294 
ù
 < 
	`XFS_BUF_PTR
(
sbuf
Ë+ 
mp
->
m_sb
.
sb_£˘size
;

295 
ù
++) {

296 i‡(*
ù
) {

297 
do_bzîo
 = 1;

301 i‡(
do_bzîo
) {

302 
rvÆ
 |
XR_AG_SB_SEC
;

303 i‡(!
no_modify
) {

304 
	`do_w¨n
(

305 
	`_
("zeroing unusedÖortion of %s superblock (AG #%u)\n"),

306 !
i
 ? 
	`_
("primary") : _("secondary"), i);

314 
	`mem˝y
(&
tmpuuid
, &
sb
->
sb_mëa_uuid
, (
uuid_t
));

315 
	`mem£t
((*)((
öçå_t
)
sb
 + 
size
), 0,

316 
mp
->
m_sb
.
sb_£˘size
 - 
size
);

317 
	`mem£t
(
	`XFS_BUF_PTR
(
sbuf
Ë+ 
size
, 0,

318 
mp
->
m_sb
.
sb_£˘size
 - 
size
);

320 
	`mem˝y
(&
sb
->
sb_mëa_uuid
, &
tmpuuid
, (
uuid_t
));

322 
	`do_w¨n
(

323 
	`_
("would zero unusedÖortion of %s superblock (AG #%u)\n"),

324 !
i
 ? 
	`_
("primary") : _("secondary"), i);

336 i‡(
sb
->
sb_Êags
) {

337 i‡(!
no_modify
)

338 
sb
->
sb_Êags
 = 0;

339 i‡(!
do_bzîo
) {

340 
rvÆ
 |
XR_AG_SB
;

341 
	`do_w¨n
(
	`_
("bad fœg†fõld i¿su≥rblock %d\n"), 
i
);

343 
rvÆ
 |
XR_AG_SB_SEC
;

358 i‡(
sb
->
sb_ö¥ogªss
 =1 && sb->
sb_uquŸöo
 !
NULLFSINO
) {

359 i‡(!
no_modify
)

360 
sb
->
sb_uquŸöo
 = 0;

361 i‡(!
do_bzîo
) {

362 
rvÆ
 |
XR_AG_SB
;

363 
	`do_w¨n
(

364 
	`_
("non-null user quota inode field in superblock %d\n"),

365 
i
);

368 
rvÆ
 |
XR_AG_SB_SEC
;

371 i‡(
sb
->
sb_ö¥ogªss
 =1 && sb->
sb_gquŸöo
 !
NULLFSINO
) {

372 i‡(!
no_modify
) {

373 
sb
->
sb_gquŸöo
 = 0;

374 
dsb
->
sb_gquŸöo
 = 0;

376 i‡(!
do_bzîo
) {

377 
rvÆ
 |
XR_AG_SB
;

378 
	`do_w¨n
(

379 
	`_
("non-null group quota inode field in superblock %d\n"),

380 
i
);

383 
rvÆ
 |
XR_AG_SB_SEC
;

391 i‡(
	`xfs_sb_vîsi⁄_has_pquŸöo
(&
mp
->
m_sb
) &&

392 
sb
->
sb_ö¥ogªss
 =1 && sb->
sb_pquŸöo
 !
NULLFSINO
) {

393 i‡(!
no_modify
) {

394 
sb
->
sb_pquŸöo
 = 0;

395 
dsb
->
sb_pquŸöo
 = 0;

397 i‡(!
do_bzîo
) {

398 
rvÆ
 |
XR_AG_SB
;

399 
	`do_w¨n
(

400 
	`_
("non-nullÖroject quota inode field in superblock %d\n"),

401 
i
);

404 
rvÆ
 |
XR_AG_SB_SEC
;

407 i‡(
sb
->
sb_ö¥ogªss
 =1 && sb->
sb_qÊags
) {

408 i‡(!
no_modify
)

409 
sb
->
sb_qÊags
 = 0;

410 i‡(!
do_bzîo
) {

411 
rvÆ
 |
XR_AG_SB
;

412 
	`do_w¨n
(
	`_
("non-null quota flags in superblock %d\n"),

413 
i
);

415 
rvÆ
 |
XR_AG_SB_SEC
;

424 i‡(!
	`xfs_sb_vîsi⁄_haßlign
(
sb
Ë&& sb->
sb_öﬂlignmt
 != 0) {

425 i‡(!
no_modify
)

426 
sb
->
sb_öﬂlignmt
 = 0;

427 i‡(!
do_bzîo
) {

428 
rvÆ
 |
XR_AG_SB
;

429 
	`do_w¨n
(

430 
	`_
("bad inodeálignment field in superblock %d\n"),

431 
i
);

433 
rvÆ
 |
XR_AG_SB_SEC
;

436 i‡(!
	`xfs_sb_vîsi⁄_hasdÆign
(
sb
) &&

437 (
sb
->
sb_unô
 !0 || sb->
sb_width
 != 0)) {

438 i‡(!
no_modify
)

439 
sb
->
sb_unô
 = sb->
sb_width
 = 0;

440 i‡(!
do_bzîo
) {

441 
rvÆ
 |
XR_AG_SB
;

442 
	`do_w¨n
(

443 
	`_
("bad stripe unit/width fields in superblock %d\n"),

444 
i
);

446 
rvÆ
 |
XR_AG_SB_SEC
;

449 i‡(!
	`xfs_sb_vîsi⁄_has£˘‹
(
sb
) &&

450 (
sb
->
sb_£˘size
 !
BBSIZE
 || sb->
sb_£˘log
 !
BBSHIFT
 ||

451 
sb
->
sb_log£˘size
 !0 || sb->
sb_log£˘log
 != 0)) {

452 i‡(!
no_modify
) {

453 
sb
->
sb_£˘size
 = 
BBSIZE
;

454 
sb
->
sb_£˘log
 = 
BBSHIFT
;

455 
sb
->
sb_log£˘size
 = 0;

456 
sb
->
sb_log£˘log
 = 0;

458 i‡(!
do_bzîo
) {

459 
rvÆ
 |
XR_AG_SB
;

460 
	`do_w¨n
(

461 
	`_
("badÜog/data device sector size fields in superblock %d\n"),

462 
i
);

464 
rvÆ
 |
XR_AG_SB_SEC
;

467 (
rvÆ
);

468 
	}
}

482 
	$vîify_£t_aghódî
(
xfs_mou¡_t
 *
mp
, 
xfs_buf_t
 *
sbuf
, 
xfs_sb_t
 *
sb
,

483 
xfs_agf_t
 *
agf
, 
xfs_agi_t
 *
agi
, 
xfs_agnumbî_t
 
i
)

485 
rvÆ
 = 0;

486 
°©us
 = 
XR_OK
;

487 
°©us_sb
 = 
XR_OK
;

489 
°©us
 = 
	`vîify_sb
(
sbuf
->
b_addr
, 
sb
, (
i
 == 0));

491 i‡(
°©us
 !
XR_OK
) {

492 
	`do_w¨n
(
	`_
("bad on-disk superblock %d - %s\n"),

493 
i
, 
	`îr_°rög
(
°©us
));

496 
°©us_sb
 = 
	`com∑ª_sb
(
mp
, 
sb
);

498 i‡(
°©us_sb
 !
XR_OK
) {

499 
	`do_w¨n
(
	`_
("primary/secondary superblock %d conflict - %s\n"),

500 
i
, 
	`îr_°rög
(
°©us_sb
));

503 i‡(
°©us
 !
XR_OK
 || 
°©us_sb
 != XR_OK) {

504 i‡(!
no_modify
) {

505 *
sb
 = 
mp
->
m_sb
;

510 
sb
->
sb_ö¥ogªss
 = 1;

512 
sb
->
sb_icou¡
 = 0;

513 
sb
->
sb_i‰ì
 = 0;

514 
sb
->
sb_fdblocks
 = 0;

515 
sb
->
sb_‰exã¡s
 = 0;

517 
sb
->
sb_qÊags
 = 0;

520 
rvÆ
 |
XR_AG_SB
;

523 
rvÆ
 |
	`£c⁄d¨y_sb_whack
(
mp
, 
sbuf
, 
sb
, 
i
);

525 
rvÆ
 |
	`vîify_£t_agf
(
mp
, 
agf
, 
i
);

526 
rvÆ
 |
	`vîify_£t_agi
(
mp
, 
agi
, 
i
);

528 (
rvÆ
);

529 
	}
}

	@repair/agheader.h

19 
	sfs_geomëry
 {

23 
__uöt32_t
 
	msb_blocksize
;

24 
xfs_rfsblock_t
 
	msb_dblocks
;

25 
xfs_rfsblock_t
 
	msb_rblocks
;

26 
xfs_πblock_t
 
	msb_ªxã¡s
;

27 
xfs_fsblock_t
 
	msb_log°¨t
;

28 
xfs_agblock_t
 
	msb_ªxtsize
;

29 
xfs_agblock_t
 
	msb_agblocks
;

30 
xfs_agnumbî_t
 
	msb_agcou¡
;

31 
xfs_exéí_t
 
	msb_rbmblocks
;

32 
xfs_exéí_t
 
	msb_logblocks
;

33 
__uöt16_t
 
	msb_£˘size
;

34 
__uöt16_t
 
	msb_öodesize
;

35 
__uöt8_t
 
	msb_imax_p˘
;

47 
	msb_extÊgbô
;

52 
__uöt8_t
 
	msb_sh¨ed_vn
;

53 
xfs_exéí_t
 
	msb_öﬂlignmt
;

54 
__uöt32_t
 
	msb_unô
;

55 
__uöt32_t
 
	msb_width
;

67 
	msb_ülignbô
;

68 
	msb_ßlignbô
;

69 
	msb_sh¨edbô
;

71 
	msb_fuŒy_zî€d
;

72 } 
	tfs_geomëry_t
;

74 
	sfs_geo_li°
 {

75 
fs_geo_li°
 *
	m√xt
;

76 
	mªfs
;

77 
	mödex
;

78 
fs_geomëry_t
 
	mgeo
;

79 } 
	tfs_geo_li°_t
;

85 
	#XR_SB_COUNTERS
 0x0001

	)

86 
	#XR_SB_INOALIGN
 0x0002

	)

87 
	#XR_SB_SALIGN
 0x0004

	)

93 
	#XR_AG_SB
 0x1

	)

94 
	#XR_AG_AGF
 0x2

	)

95 
	#XR_AG_AGI
 0x4

	)

96 
	#XR_AG_SB_SEC
 0x8

	)

	@repair/attr_repair.c

19 
	~"libxfs.h
"

20 
	~"globÆs.h
"

21 
	~"îr_¥Ÿos.h
"

22 
	~"©å_ª∑ú.h
"

23 
	~"döode.h
"

24 
	~"bm≠.h
"

25 
	~"¥Ÿos.h
"

26 
	~"dú2.h
"

27 
	~"da_utû.h
"

29 
xfs_a˛_vÆid
(
xfs_mou¡
 *
mp
, 
xfs_a˛
 *
da˛p
);

30 
xfs_mac_vÆid
(
xfs_mac_œbñ_t
 *
Õ
);

38 
	#XR_DA_LEAF_MAPSIZE
 
XFS_ATTR_LEAF_MAPSIZE


	)

40 
	tda_‰ìm≠_t
;

46 
da_‰ìm≠_t
 *

47 
	$Æloc_da_‰ìm≠
(
xfs_mou¡
 *
mp
)

49  
	`ˇŒoc
(1, 
mp
->
m_sb
.
sb_blocksize
 / 
NBBY
);

50 
	}
}

61 
	$£t_da_‰ìm≠
(
xfs_mou¡_t
 *
mp
, 
da_‰ìm≠_t
 *
m≠
, 
°¨t
, 
°›
)

63 c⁄° 
da_‰ìm≠_t
 
mask
 = 0x1;

64 
i
;

66 i‡(
°¨t
 > 
°›
) {

70 
	`do_w¨n
(
	`_
("badÑange claimed [%d, %d) in da block\n"),

71 
°¨t
, 
°›
);

75 i‡(
°›
 > 
mp
->
m_sb
.
sb_blocksize
) {

76 
	`do_w¨n
(

77 
	`_
("byteÑangeÉnd [%d %d) in da blockÜargerÅhan blocksize %d\n"),

78 
°¨t
, 
°›
, 
mp
->
m_sb
.
sb_blocksize
);

82 
i
 = 
°¨t
; i < 
°›
; i ++) {

83 i‡(
m≠
[
i
 / 
NBBY
] & (
mask
 << i % NBBY)) {

84 
	`do_w¨n
(
	`_
("mu…ùly cœimed byã %d i¿d®block\n"), 
i
);

87 
m≠
[
i
 / 
NBBY
] |(
mask
 << i % NBBY);

91 
	}
}

145 
	$vÆuecheck
(

146 
xfs_mou¡
 *
mp
,

147 *
«mevÆue
,

148 *
vÆue
,

149 
«mñí
,

150 
vÆuñí
)

153 
xfs_mac_œbñ_t
 
ma˛
;

154 *
vÆuï
;

155 
˛órô
 = 0;

157 i‡((
«mñí
 =
SGI_ACL_FILE_SIZE
 &&

158 
	`°∫cmp
(
«mevÆue
, 
SGI_ACL_FILE
, 
SGI_ACL_FILE_SIZE
) == 0) ||

159 (
«mñí
 =
SGI_ACL_DEFAULT_SIZE
 &&

160 
	`°∫cmp
(
«mevÆue
, 
SGI_ACL_DEFAULT
, 
SGI_ACL_DEFAULT_SIZE
) == 0)) {

161 i‡(
vÆue
 =
NULL
) {

162 
vÆuï
 = 
	`mÆloc
(
vÆuñí
);

163 i‡(!
vÆuï
)

164 
	`do_îr‹
(
	`_
("No memory for ACL check!\n"));

165 
	`mem˝y
(
vÆuï
, 
«mevÆue
 + 
«mñí
, 
vÆuñí
);

167 
vÆuï
 = 
vÆue
;

169 i‡(
	`xfs_a˛_vÆid
(
mp
, 
vÆuï
) != 0) {

170 
˛órô
 = 1;

171 
	`do_w¨n
(

172 
	`_
("entry contains illegal value ináttributeÇamed SGI_ACL_FILE "

176 i‡(
vÆuï
 !
vÆue
)

177 
	`‰ì
(
vÆuï
);

179 } i‡(
	`°∫cmp
(
«mevÆue
, 
SGI_MAC_FILE
, 
SGI_MAC_FILE_SIZE
) == 0) {

180 i‡(
vÆue
 =
NULL
) {

181 
	`mem£t
(&
ma˛
, 0, (
xfs_mac_œbñ_t
));

182 
	`memmove
(&
ma˛
, 
«mevÆue
+
«mñí
, 
vÆuñí
);

183 
vÆuï
 = &
ma˛
;

185 
vÆuï
 = 
vÆue
;

187 i‡(
	`xfs_mac_vÆid
((
xfs_mac_œbñ_t
 *)
vÆuï
) != 1) {

196 
˛órô
 = 1;

197 
	`do_w¨n
(

198 
	`_
("entry contains illegal value ináttributeÇamed SGI_MAC_LABEL\n"));

200 } i‡(
	`°∫cmp
(
«mevÆue
, 
SGI_CAP_FILE
, 
SGI_CAP_FILE_SIZE
) == 0) {

201 i‡–
vÆuñí
 !(
xfs_ˇp_£t_t
)) {

202 
˛órô
 = 1;

203 
	`do_w¨n
(

204 
	`_
("entry contains illegal value ináttributeÇamed SGI_CAP_FILE\n"));

208 (
˛órô
);

209 
	}
}

220 
	$¥o˚ss_sh‹tf‹m_©å
(

221 
xfs_mou¡
 *
mp
,

222 
xfs_öo_t
 
öo
,

223 
xfs_döode_t
 *
dù
,

224 *
ª∑ú
)

226 
xfs_©å_sh‹tf‹m_t
 *
asf
;

227 
xfs_©å_sf_íåy_t
 *
cuºíã¡ry
, *
√xã¡ry
, *
ãm≥¡ry
;

228 
i
, 
junkô
;

229 
cuºítsize
, 
ªmaöög•a˚
;

231 *
ª∑ú
 = 0;

233 
asf
 = (
xfs_©å_sh‹tf‹m_t
 *Ë
	`XFS_DFORK_APTR
(
dù
);

238 i‡(
asf
->
hdr
.
cou¡
 == 0)

240 i‡(
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
Ë!(
xfs_©å_sf_hdr_t
)) {

242 i‡(!
no_modify
) {

243 
	`do_w¨n
(

244 
	`_
("thîê¨ênÿ©åibuã†öÅhêf‹k f‹ inodê%" 
PRIu64
 "\n"),

245 
öo
);

246 
asf
->
hdr
.
tŸsize
 =

247 
	`˝u_to_be16
((
xfs_©å_sf_hdr_t
));

248 *
ª∑ú
 = 1;

251 
	`do_w¨n
(

252 
	`_
("would junkÅhê©åibuã f‹k sö˚ cou¡ i†0 f‹ inodê%" 
PRIu64
 "\n"),

253 
öo
);

258 
cuºítsize
 = (
xfs_©å_sf_hdr_t
);

259 
ªmaöög•a˚
 = 
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
Ë- 
cuºítsize
;

260 
√xã¡ry
 = &
asf
->
li°
[0];

261 
i
 = 0; i < 
asf
->
hdr
.
cou¡
; i++) {

262 
cuºíã¡ry
 = 
√xã¡ry
;

263 
junkô
 = 0;

266 i‡((
cuºítsize
 + ((
xfs_©å_sf_íåy_t
) - 1)) >

267 
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
))

271 i‡(
cuºíã¡ry
->
«mñí
 == 0) {

272 
	`do_w¨n
(
	`_
("zeroÜengthÇameÉntry ináttribute fork,"));

273 i‡(!
no_modify
) {

274 
	`do_w¨n
(

275 
	`_
("Årunˇtögáâribuã†f‹ inodê%" 
PRIu64
 "Åÿ%d\n"), 
öo
, 
i
);

276 *
ª∑ú
 = 1;

279 
	`do_w¨n
(

280 
	`_
(" wouldÅrunˇãáâribuã†f‹ inodê%" 
PRIu64
 "Åÿ%d\n"), 
öo
, 
i
);

288 i‡(
ªmaöög•a˚
 < 
cuºíã¡ry
->
«mñí
 ||

289 ((
ªmaöög•a˚
 - 
cuºíã¡ry
->

290 
«mñí
Ë< 
cuºíã¡ry
->
vÆuñí
)) {

291 
	`do_w¨n
(

292 
	`_
("name or valueáttributeÜengthsáreÅooÜarge,\n"));

293 i‡(!
no_modify
) {

294 
	`do_w¨n
(

295 
	`_
("Årunˇtögáâribuã†f‹ inodê%" 
PRIu64
 "Åo %d\n"),

296 
öo
, 
i
);

297 *
ª∑ú
 = 1;

300 
	`do_w¨n
(

301 
	`_
(" wouldÅrunˇãáâribuã†f‹ inodê%" 
PRIu64
 "Åo %d\n"),

302 
öo
, 
i
);

311 i‡(
	`«mecheck
((*)&
cuºíã¡ry
->
«mevÆ
[0],

312 
cuºíã¡ry
->
«mñí
)) {

313 
	`do_w¨n
(

314 
	`_
("entry contains illegal character in shortformáttributeÇame\n"));

315 
junkô
 = 1;

318 i‡(
cuºíã¡ry
->
Êags
 & 
XFS_ATTR_INCOMPLETE
) {

319 
	`do_w¨n
(

320 
	`_
("entry has INCOMPLETE flag on in shortformáttribute\n"));

321 
junkô
 = 1;

325 i‡(
cuºíã¡ry
->
Êags
 & 
XFS_ATTR_ROOT
)

326 
junkô
 |
	`vÆuecheck
(
mp
,

327 (*)&
cuºíã¡ry
->
«mevÆ
[0],

328 
NULL
, 
cuºíã¡ry
->
«mñí
,

329 
cuºíã¡ry
->
vÆuñí
);

331 
ªmaöög•a˚
 =Ñemainingspace -

332 
	`XFS_ATTR_SF_ENTSIZE
(
cuºíã¡ry
);

334 i‡(
junkô
) {

335 i‡(!
no_modify
) {

337 
	`do_w¨n
(

338 
	`_
("ªmovögáâribuãÉ¡ry %d f‹ inodê%" 
PRIu64
 "\n"),

339 
i
, 
öo
);

340 
ãm≥¡ry
 = (
xfs_©å_sf_íåy_t
 *)

341 ((
öçå_t
Ë
cuºíã¡ry
 +

342 
	`XFS_ATTR_SF_ENTSIZE
(
cuºíã¡ry
));

343 
	`memmove
(
cuºíã¡ry
,
ãm≥¡ry
,
ªmaöög•a˚
);

344 
asf
->
hdr
.
cou¡
 -= 1;

345 
i
--;

346 *
ª∑ú
 = 1;

349 
	`do_w¨n
(

350 
	`_
("wouldÑemovê©åibuãÉ¡ry %d f‹ inodê%" 
PRIu64
 "\n"),

351 
i
, 
öo
);

356 
√xã¡ry
 = (
xfs_©å_sf_íåy_t
 *)((
öçå_t
)Çextentry +

357 
	`XFS_ATTR_SF_ENTSIZE
(
cuºíã¡ry
));

358 
cuºítsize
 = cuºítsizê+ 
	`XFS_ATTR_SF_ENTSIZE
(
cuºíã¡ry
);

362 i‡(
asf
->
hdr
.
cou¡
 !
i
) {

363 i‡(
no_modify
) {

364 
	`do_w¨n
(

365 
	`_
("would havêc‹ª˘edáâribuãÉ¡ry cou¡ i¿öodê%" 
PRIu64
 " from %dÅo %d\n"),

366 
öo
, 
asf
->
hdr
.
cou¡
, 
i
);

368 
	`do_w¨n
(

369 
	`_
("c‹ª˘edáâribuãÉ¡ry cou¡ i¿öodê%" 
PRIu64
 ", was %d,Çow %d\n"),

370 
öo
, 
asf
->
hdr
.
cou¡
, 
i
);

371 
asf
->
hdr
.
cou¡
 = 
i
;

372 *
ª∑ú
 = 1;

377 i‡(
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
Ë!
cuºítsize
) {

378 i‡(
no_modify
) {

379 
	`do_w¨n
(

380 
	`_
("would havêc‹ª˘edáâribuãÅŸsizêö inodê%" 
PRIu64
 " from %dÅo %d\n"),

381 
öo
, 
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
),

382 
cuºítsize
);

384 
	`do_w¨n
(

385 
	`_
("c‹ª˘edáâribuãÉ¡ryÅŸsizêö inodê%" 
PRIu64
 ", was %d,Çow %d\n"),

386 
öo
, 
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
),

387 
cuºítsize
);

388 
asf
->
hdr
.
tŸsize
 = 
	`˝u_to_be16
(
cuºítsize
);

389 *
ª∑ú
 = 1;

393 (*
ª∑ú
);

394 
	}
}

402 
	$rmtvÆ_gë
(
xfs_mou¡_t
 *
mp
, 
xfs_öo_t
 
öo
, 
blkm≠_t
 *
blkm≠
,

403 
xfs_dablk_t
 
blocknum
, 
vÆuñí
, * 
vÆue
)

405 
xfs_fsblock_t
 
bno
;

406 
xfs_buf_t
 *
bp
;

407 
˛órô
 = 0, 
i
 = 0, 
Àngth
 = 0, 
amou¡d⁄e
 = 0;

408 
hdrsize
 = 0;

410 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

411 
hdrsize
 = (
xfs_©å3_rmt_hdr
);

415 
amou¡d⁄e
 < 
vÆuñí
) {

416 
bno
 = 
	`blkm≠_gë
(
blkm≠
, 
blocknum
 + 
i
);

417 i‡(
bno
 =
NULLFSBLOCK
) {

418 
	`do_w¨n
(

419 
	`_
("ªmŸêblock f‹áâribuã†o‡öodê%" 
PRIu64
 " i†missög\n"), 
öo
);

420 
˛órô
 = 1;

423 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
	`XFS_FSB_TO_DADDR
(mp, 
bno
),

424 
	`XFS_FSB_TO_BB
(
mp
, 1), 0,

425 &
xfs_©å3_rmt_buf_›s
);

426 i‡(!
bp
) {

427 
	`do_w¨n
(

428 
	`_
("ˇn'àªadÑemŸêblock f‹áâribuã†o‡öodê%" 
PRIu64
 "\n"), 
öo
);

429 
˛órô
 = 1;

433 i‡(
bp
->
b_îr‹
 =-
EFSBADCRC
 || bp->b_îr‹ =-
EFSCORRUPTED
) {

434 
	`do_w¨n
(

435 
	`_
("C‹ru±ÑemŸêblock f‹áâribuã†o‡öodê%" 
PRIu64
 "\n"), 
öo
);

436 
˛órô
 = 1;

440 
	`ASSERT
(
mp
->
m_sb
.
sb_blocksize
 =
	`XFS_BUF_COUNT
(
bp
));

442 
Àngth
 = 
	`MIN
(
	`XFS_BUF_COUNT
(
bp
Ë- 
hdrsize
, 
vÆuñí
 - 
amou¡d⁄e
);

443 
	`memmove
(
vÆue
, 
bp
->
b_addr
 + 
hdrsize
, 
Àngth
);

444 
amou¡d⁄e
 +
Àngth
;

445 
vÆue
 +
Àngth
;

446 
i
++;

447 
	`libxfs_putbuf
(
bp
);

449  (
˛órô
);

450 
	}
}

461 
	$¥o˚ss_Àaf_©å_loˇl
(

462 
xfs_mou¡
 *
mp
,

463 
xfs_©å_Àafblock_t
 *
Àaf
,

464 
i
,

465 
xfs_©å_Àaf_íåy_t
 *
íåy
,

466 
xfs_dahash_t
 
œ°_hashvÆ
,

467 
xfs_dablk_t
 
da_bno
,

468 
xfs_öo_t
 
öo
)

470 
xfs_©å_Àaf_«me_loˇl_t
 *
loˇl
;

472 
loˇl
 = 
	`xfs_©å3_Àaf_«me_loˇl
(
Àaf
, 
i
);

473 i‡(
loˇl
->
«mñí
 =0 || 
	`«mecheck
((*)&loˇl->
«mevÆ
[0],

474 
loˇl
->
«mñí
)) {

475 
	`do_w¨n
(

476 
	`_
("©åibuãÉ¡ry %d i¿©å block %u, inodê%" 
PRIu64
 " has badÇame (namelen = %d)\n"),

477 
i
, 
da_bno
, 
öo
, 
loˇl
->
«mñí
);

489 i‡(
	`be32_to_˝u
(
íåy
->
hashvÆ
Ë!
	`libxfs_da_hash«me
(

490 &
loˇl
->
«mevÆ
[0],Üoˇl->
«mñí
) ||

491 
	`be32_to_˝u
(
íåy
->
hashvÆ
Ë< 
œ°_hashvÆ
) {

492 
	`do_w¨n
(

493 
	`_
("bad hashvÆuêf‹áâribuãÉ¡ry %d i¿©å block %u, inodê%" 
PRIu64
 "\n"),

494 
i
, 
da_bno
, 
öo
);

499 i‡(
íåy
->
Êags
 & 
XFS_ATTR_ROOT
) {

500 i‡(
	`vÆuecheck
(
mp
, (*)&
loˇl
->
«mevÆ
[0], 
NULL
,

501 
loˇl
->
«mñí
, 
	`be16_to_˝u
÷oˇl->
vÆuñí
))) {

502 
	`do_w¨n
(

503 
	`_
("bad securôy vÆuêf‹áâribuãÉ¡ry %d i¿©å block %u, inodê%" 
PRIu64
 "\n"),

504 
i
, 
da_bno
, 
öo
);

508  
	`xfs_©å_Àaf_ítsize_loˇl
(
loˇl
->
«mñí
,

509 
	`be16_to_˝u
(
loˇl
->
vÆuñí
));

510 
	}
}

513 
	$¥o˚ss_Àaf_©å_ªmŸe
(

514 
xfs_©å_Àafblock_t
 *
Àaf
,

515 
i
,

516 
xfs_©å_Àaf_íåy_t
 *
íåy
,

517 
xfs_dahash_t
 
œ°_hashvÆ
,

518 
xfs_dablk_t
 
da_bno
,

519 
xfs_öo_t
 
öo
,

520 
xfs_mou¡_t
 *
mp
,

521 
blkm≠_t
 *
blkm≠
)

523 
xfs_©å_Àaf_«me_ªmŸe_t
 *
ªmŸï
;

524 * 
vÆue
;

526 
ªmŸï
 = 
	`xfs_©å3_Àaf_«me_ªmŸe
(
Àaf
, 
i
);

528 i‡(
ªmŸï
->
«mñí
 =0 || 
	`«mecheck
((*)&ªmŸï->
«me
[0],

529 
ªmŸï
->
«mñí
) ||

530 
	`be32_to_˝u
(
íåy
->
hashvÆ
) !=

531 
	`libxfs_da_hash«me
((*)&
ªmŸï
->
«me
[0],

532 
ªmŸï
->
«mñí
) ||

533 
	`be32_to_˝u
(
íåy
->
hashvÆ
Ë< 
œ°_hashvÆ
 ||

534 
	`be32_to_˝u
(
ªmŸï
->
vÆueblk
) == 0) {

535 
	`do_w¨n
(

536 
	`_
("öc⁄si°íàªmŸê©åibuãÉ¡ry %d i¿©å block %u, inÿ%" 
PRIu64
 "\n"), 
i
, 
da_bno
, 
öo
);

540 i‡(!(
íåy
->
Êags
 & 
XFS_ATTR_ROOT
))

541 
out
;

543 
vÆue
 = 
	`mÆloc
(
	`be32_to_˝u
(
ªmŸï
->
vÆuñí
));

544 i‡(
vÆue
 =
NULL
) {

545 
	`do_w¨n
(

546 
	`_
("ˇ¬Ÿ mÆlo¯íough f‹ÑemŸevÆuê©åibuã f‹ inodê%" 
PRIu64
 "\n"),

547 
öo
);

548 
	`do_w¨n
(
	`_
("SKIPPINGÅhisÑemoteáttribute\n"));

549 
out
;

551 i‡(
	`rmtvÆ_gë
(
mp
, 
öo
, 
blkm≠
, 
	`be32_to_˝u
(
ªmŸï
->
vÆueblk
),

552 
	`be32_to_˝u
(
ªmŸï
->
vÆuñí
), 
vÆue
)) {

553 
	`do_w¨n
(

554 
	`_
("ªmŸê©åibuã gë faûed f‹É¡ry %d, inodê%" 
PRIu64
 "\n"),

555 
i
, 
öo
);

556 
bad_‰ì_out
;

558 i‡(
	`vÆuecheck
(
mp
, (*)&
ªmŸï
->
«me
[0], 
vÆue
,ÑemŸï->
«mñí
,

559 
	`be32_to_˝u
(
ªmŸï
->
vÆuñí
))) {

560 
	`do_w¨n
(

561 
	`_
("ªmŸê©åibuã vÆuêcheck faûed f‹É¡ry %d, inodê%" 
PRIu64
 "\n"),

562 
i
, 
öo
);

563 
bad_‰ì_out
;

565 
	`‰ì
(
vÆue
);

566 
out
:

567  
	`xfs_©å_Àaf_ítsize_ªmŸe
(
ªmŸï
->
«mñí
);

569 
bad_‰ì_out
:

570 
	`‰ì
(
vÆue
);

572 
	}
}

575 
	$¥o˚ss_Àaf_©å_block
(

576 
xfs_mou¡_t
 *
mp
,

577 
xfs_©å_Àafblock_t
 *
Àaf
,

578 
xfs_dablk_t
 
da_bno
,

579 
xfs_öo_t
 
öo
,

580 
blkm≠_t
 *
blkm≠
,

581 
xfs_dahash_t
 
œ°_hashvÆ
,

582 
xfs_dahash_t
 *
cuºít_hashvÆ
,

583 *
ª∑ú
)

585 
xfs_©å_Àaf_íåy_t
 *
íåy
;

586 
i
, 
°¨t
, 
°›
, 
˛órô
, 
u£dbs
, 
fú°b
, 
thissize
;

587 
da_‰ìm≠_t
 *
©å_‰ìm≠
;

588 
xfs_©å3_i˛óf_hdr
 
Àafhdr
;

590 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
Àafhdr
, 
Àaf
);

591 
˛órô
 = 
u£dbs
 = 0;

592 
fú°b
 = 
mp
->
m_sb
.
sb_blocksize
;

593 
°›
 = 
	`xfs_©å3_Àaf_hdr_size
(
Àaf
);

596 i‡(!
Àafhdr
.
cou¡
 ||

597 
Àafhdr
.
cou¡
 * (
xfs_©å_Àaf_íåy_t
Ë+ 
°›
 >

598 
mp
->
m_sb
.
sb_blocksize
) {

599 
	`do_w¨n
(

600 
	`_
("badáâribuã cou¡ %d i¿©å block %u, inodê%" 
PRIu64
 "\n"),

601 
Àafhdr
.
cou¡
, 
da_bno
, 
öo
);

605 
©å_‰ìm≠
 = 
	`Æloc_da_‰ìm≠
(
mp
);

606 (Ë
	`£t_da_‰ìm≠
(
mp
, 
©å_‰ìm≠
, 0, 
°›
);

609 
i
 = 0, 
íåy
 = 
	`xfs_©å3_Àaf_íåyp
(
Àaf
);

610 
i
 < 
Àafhdr
.
cou¡
; i++, 
íåy
++) {

613 i‡(
	`be16_to_˝u
(
íåy
->
«meidx
Ë> 
mp
->
m_sb
.
sb_blocksize
) {

614 
	`do_w¨n
(

615 
	`_
("badáâribuãÇameidx %d i¿©å block %u, inodê%" 
PRIu64
 "\n"),

616 
	`be16_to_˝u
(
íåy
->
«meidx
), 
da_bno
, 
öo
);

617 
˛órô
 = 1;

621 i‡(
íåy
->
Êags
 & 
XFS_ATTR_INCOMPLETE
) {

623 
	`do_w¨n
(

624 
	`_
("©åibuãÉ¡ry #%d i¿©å block %u, inodê%" 
PRIu64
 " is INCOMPLETE\n"),

625 
i
, 
da_bno
, 
öo
);

626 
˛órô
 = 1;

631 
°¨t
 = (
öçå_t
)
íåy
 - (öçå_t)
Àaf
;

632 
°›
 = 
°¨t
 + (
xfs_©å_Àaf_íåy_t
);

633 i‡(
	`£t_da_‰ìm≠
(
mp
, 
©å_‰ìm≠
, 
°¨t
, 
°›
)) {

634 
	`do_w¨n
(

635 
	`_
("©åibuãÉ¡ry %d i¿©å block %u, inodê%" 
PRIu64
 " claimsálready used space\n"),

636 
i
, 
da_bno
, 
öo
);

637 
˛órô
 = 1;

641 i‡(
íåy
->
Êags
 & 
XFS_ATTR_LOCAL
)

642 
thissize
 = 
	`¥o˚ss_Àaf_©å_loˇl
(
mp
, 
Àaf
, 
i
, 
íåy
,

643 
œ°_hashvÆ
, 
da_bno
, 
öo
);

645 
thissize
 = 
	`¥o˚ss_Àaf_©å_ªmŸe
(
Àaf
, 
i
, 
íåy
,

646 
œ°_hashvÆ
, 
da_bno
, 
öo
,

647 
mp
, 
blkm≠
);

648 i‡(
thissize
 < 0) {

649 
˛órô
 = 1;

653 *
cuºít_hashvÆ
 = 
œ°_hashvÆ
 = 
	`be32_to_˝u
(
íåy
->
hashvÆ
);

655 i‡(
	`£t_da_‰ìm≠
(
mp
, 
©å_‰ìm≠
, 
	`be16_to_˝u
(
íåy
->
«meidx
),

656 
	`be16_to_˝u
(
íåy
->
«meidx
Ë+ 
thissize
)) {

657 
	`do_w¨n
(

658 
	`_
("©åibuãÉ¡ry %d i¿©å block %u, inodê%" 
PRIu64
 " claims used space\n"),

659 
i
, 
da_bno
, 
öo
);

660 
˛órô
 = 1;

663 
u£dbs
 +
thissize
;

664 i‡(
	`be16_to_˝u
(
íåy
->
«meidx
Ë< 
fú°b
)

665 
fú°b
 = 
	`be16_to_˝u
(
íåy
->
«meidx
);

669 i‡(!
˛órô
) {

677 i‡((
Àafhdr
.
hﬁes
 == 0 &&

678 
fú°b
 !
Àafhdr
.
fú°u£d
) ||

679 
Àafhdr
.
fú°u£d
 > 
fú°b
) {

680 i‡(!
no_modify
) {

681 
	`do_w¨n
(

682 
	`_
("-Ñesetting first used heap value from %dÅo %d in "

683 "block %u o‡©åibuã f‹k o‡öodê%" 
PRIu64
 "\n"),

684 
Àafhdr
.
fú°u£d
,

685 
fú°b
, 
da_bno
, 
öo
);

686 
Àafhdr
.
fú°u£d
 = 
fú°b
;

687 *
ª∑ú
 = 1;

689 
	`do_w¨n
(

690 
	`_
("- wouldÑeset first used value from %dÅo %d in "

691 "block %u o‡©åibuã f‹k o‡öodê%" 
PRIu64
 "\n"),

692 
Àafhdr
.
fú°u£d
,

693 
fú°b
, 
da_bno
, 
öo
);

697 i‡(
u£dbs
 !
Àafhdr
.
u£dbyãs
) {

698 i‡(!
no_modify
) {

699 
	`do_w¨n
(

700 
	`_
("-Ñesetting usedbytes cnt from %dÅo %d in "

701 "block %u o‡©åibuã f‹k o‡öodê%" 
PRIu64
 "\n"),

702 
Àafhdr
.
u£dbyãs
,

703 
u£dbs
, 
da_bno
, 
öo
);

704 
Àafhdr
.
u£dbyãs
 = 
u£dbs
;

705 *
ª∑ú
 = 1;

707 
	`do_w¨n
(

708 
	`_
("- wouldÑeset usedbytes cnt from %dÅo %d in "

709 "block %u o‡©åibuã f‹k o‡%" 
PRIu64
 "\n"),

710 
Àafhdr
.
u£dbyãs
,

711 
u£dbs
, 
da_bno
, 
öo
);

727 i‡(
˛órô
)

728 *
ª∑ú
 = 0;

729 i‡(*
ª∑ú
)

730 
	`xfs_©å3_Àaf_hdr_to_disk
(
mp
->
m_©å_geo
, 
Àaf
, &
Àafhdr
);

732 
	`‰ì
(
©å_‰ìm≠
);

733  (
˛órô
);

734 
	}
}

741 
	$¥o˚ss_Àaf_©å_Àvñ
(
xfs_mou¡_t
 *
mp
,

742 
da_bt_curs‹_t
 *
da_curs‹
)

744 
ª∑ú
;

745 
xfs_©å_Àafblock_t
 *
Àaf
;

746 
xfs_buf_t
 *
bp
;

747 
xfs_öo_t
 
öo
;

748 
xfs_fsblock_t
 
dev_bno
;

749 
xfs_dablk_t
 
da_bno
;

750 
xfs_dablk_t
 
¥ev_bno
;

751 
xfs_dahash_t
 
cuºít_hashvÆ
 = 0;

752 
xfs_dahash_t
 
gª©e°_hashvÆ
;

753 
xfs_©å3_i˛óf_hdr
 
Àafhdr
;

755 
da_bno
 = 
da_curs‹
->
Àvñ
[0].
bno
;

756 
öo
 = 
da_curs‹
->ino;

761 i‡(
da_bno
 == 0) {

762 
	`do_w¨n
(

763 
	`_
("båì cy˛êdëe˘ed i¿©åibuã f‹k f‹ inodê%" 
PRIu64
 "\n"),

764 
öo
);

765 
îr‹_out
;

768 
¥ev_bno
 = 0;

771 
ª∑ú
 = 0;

772 
dev_bno
 = 
	`blkm≠_gë
(
da_curs‹
->
blkm≠
, 
da_bno
);

773 i‡(
dev_bno
 =
NULLFSBLOCK
) {

774 
	`do_w¨n
(

775 
	`_
("ˇn'àm≠ block %u f‹áâribuã f‹k f‹ inodê%" 
PRIu64
 "\n"),

776 
da_bno
, 
öo
);

777 
îr‹_out
;

780 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
	`XFS_FSB_TO_DADDR
(mp, 
dev_bno
),

781 
	`XFS_FSB_TO_BB
(
mp
, 1), 0,

782 &
xfs_©å3_Àaf_buf_›s
);

783 i‡(!
bp
) {

784 
	`do_w¨n
(

785 
	`_
("ˇn'àªad fûêblock %u (fsbnÿ%" 
PRIu64
 ") foráttribute fork of inode %" PRIu64 "\n"),

786 
da_bno
, 
dev_bno
, 
öo
);

787 
îr‹_out
;

790 
Àaf
 = 
bp
->
b_addr
;

791 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
Àafhdr
, 
Àaf
);

794 i‡(!(
Àafhdr
.
magic
 =
XFS_ATTR_LEAF_MAGIC
 ||

795 
Àafhdr
.
magic
 =
XFS_ATTR3_LEAF_MAGIC
)) {

796 
	`do_w¨n
(

797 
	`_
("badáâribuãÜó‡magi¯%#x f‹ inodê%" 
PRIu64
 "\n"),

798 
Àafhdr
.
magic
, 
öo
);

799 
	`libxfs_putbuf
(
bp
);

800 
îr‹_out
;

807 i‡(
	`¥o˚ss_Àaf_©å_block
(
mp
, 
Àaf
, 
da_bno
, 
öo
,

808 
da_curs‹
->
blkm≠
, 
cuºít_hashvÆ
,

809 &
gª©e°_hashvÆ
, &
ª∑ú
)) {

810 
	`libxfs_putbuf
(
bp
);

811 
îr‹_out
;

820 
da_curs‹
->
Àvñ
[0].
hashvÆ
 = 
gª©e°_hashvÆ
;

821 
da_curs‹
->
Àvñ
[0].
bp
 = bp;

822 
da_curs‹
->
Àvñ
[0].
bno
 = 
da_bno
;

823 
da_curs‹
->
Àvñ
[0].
ödex
 = 
Àafhdr
.
cou¡
;

824 
da_curs‹
->
Àvñ
[0].
dúty
 = 
ª∑ú
;

826 i‡(
Àafhdr
.
back
 !
¥ev_bno
) {

827 
	`do_w¨n
(

828 
	`_
("bad siblög backÖoöã∏f‹ block %u i¿©åibuã f‹k f‹ inodê%" 
PRIu64
 "\n"),

829 
da_bno
, 
öo
);

830 
	`libxfs_putbuf
(
bp
);

831 
îr‹_out
;

834 
¥ev_bno
 = 
da_bno
;

835 
da_bno
 = 
Àafhdr
.
f‹w
;

837 i‡(
da_bno
 != 0) {

838 i‡(
	`vîify_da_∑th
(
mp
, 
da_curs‹
, 0, 
XFS_ATTR_FORK
)) {

839 
	`libxfs_putbuf
(
bp
);

840 
îr‹_out
;

844 
cuºít_hashvÆ
 = 
gª©e°_hashvÆ
;

849 i‡(!
no_modify
 && 
bp
->
b_îr‹
 =-
EFSBADCRC
)

850 
ª∑ú
++;

852 i‡(
ª∑ú
 && !
no_modify
)

853 
	`libxfs_wrôebuf
(
bp
, 0);

855 
	`libxfs_putbuf
(
bp
);

856 } 
da_bno
 != 0);

858 i‡(
	`vîify_föÆ_da_∑th
(
mp
, 
da_curs‹
, 0, 
XFS_ATTR_FORK
)) {

862 
	`do_w¨n
(

863 
	`_
("bad hashÖ©h i¿©åibuã f‹k f‹ inodê%" 
PRIu64
 "\n"),

864 
da_curs‹
->
öo
);

865 
îr‹_out
;

869 
	`ªÀa£_da_curs‹
(
mp
, 
da_curs‹
, 0);

872 
îr‹_out
:

874 
	`îr_ªÀa£_da_curs‹
(
mp
, 
da_curs‹
, 0);

876 
	}
}

890 
	$¥o˚ss_node_©å
(

891 
xfs_mou¡_t
 *
mp
,

892 
xfs_öo_t
 
öo
,

893 
xfs_döode_t
 *
dù
,

894 
blkm≠_t
 *
blkm≠
)

896 
xfs_dablk_t
 
bno
;

897 
îr‹
 = 0;

898 
da_bt_curs‹_t
 
da_curs‹
;

906 
	`mem£t
(&
da_curs‹
, 0, (
da_bt_curs‹_t
));

907 
da_curs‹
.
a˘ive
 = 0;

908 
da_curs‹
.
öo
 = ino;

909 
da_curs‹
.
dù
 = dip;

910 
da_curs‹
.
gª©e°_bno
 = 0;

911 
da_curs‹
.
blkm≠
 = blkmap;

916 
îr‹
 = 
	`åavî£_öt_dablock
(
mp
, &
da_curs‹
, &
bno
, 
XFS_ATTR_FORK
);

917 i‡(
îr‹
 == 0)

926  (
	`¥o˚ss_Àaf_©å_Àvñ
(
mp
, &
da_curs‹
));

927 
	}
}

931 
	$__check_©å_hódî
(

932 
xfs_mou¡
 *
mp
,

933 
xfs_buf
 *
bp
,

934 
xfs_öo_t
 
öo
)

936 
xfs_da3_blköfo
 *
öfo
 = 
bp
->
b_addr
;

938 i‡(
öfo
->
hdr
.
magic
 !
	`˝u_to_be16
(
XFS_ATTR3_LEAF_MAGIC
) &&

939 
öfo
->
hdr
.
magic
 !
	`˝u_to_be16
(
XFS_DA3_NODE_MAGIC
))

943 i‡(
	`be64_to_˝u
(
öfo
->
ow√r
Ë!
öo
) {

944 
	`do_w¨n
(

945 
	`_
("ex≥˘ed ow√∏öodê%" 
PRIu64
 ", got %llu,áttr block %" PRIu64 "\n"),

946 
öo
, 
	`be64_to_˝u
(
öfo
->
ow√r
), 
bp
->
b_bn
);

950 i‡(
	`be64_to_˝u
(
öfo
->
blkno
Ë!
bp
->
b_bn
) {

951 
	`do_w¨n
(

952 
	`_
("ex≥˘ed block %" 
PRIu64
 ", got %llu, inode %" PRIu64 "attr block\n"),

953 
bp
->
b_bn
, 
	`be64_to_˝u
(
öfo
->
blkno
), 
öo
);

957 i‡(
	`∂©f‹m_uuid_com∑ª
(&
öfo
->
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
) != 0) {

958 
	`do_w¨n
(

959 
	`_
("wr⁄g FS UUID, inodê%" 
PRIu64
 "áttr block %" PRIu64 "\n"),

960 
öo
, 
bp
->
b_bn
);

965 
	}
}

977 
	$¥o˚ss_l⁄gf‹m_©å
(

978 
xfs_mou¡_t
 *
mp
,

979 
xfs_öo_t
 
öo
,

980 
xfs_döode_t
 *
dù
,

981 
blkm≠_t
 *
blkm≠
,

982 *
ª∑ú
)

984 
xfs_©å_Àafblock_t
 *
Àaf
;

985 
xfs_fsblock_t
 
bno
;

986 
xfs_buf_t
 *
bp
;

987 
xfs_dahash_t
 
√xt_hashvÆ
;

988 
ª∑úlöks
 = 0;

989 
xfs_©å3_i˛óf_hdr
 
Àafhdr
;

990 
îr‹
;

992 *
ª∑ú
 = 0;

994 
bno
 = 
	`blkm≠_gë
(
blkm≠
, 0);

996 i‡–
bno
 =
NULLFSBLOCK
 ) {

997 i‡(
dù
->
di_af‹m©
 =
XFS_DINODE_FMT_EXTENTS
 &&

998 
	`be16_to_˝u
(
dù
->
di_™exã¡s
) == 0)

1000 
	`do_w¨n
(

1001 
	`_
("block 0 o‡öodê%" 
PRIu64
 "áttribute fork is missing\n"),

1002 
öo
);

1006 i‡(
mp
->
m_sb
.
sb_agcou¡
 < 
	`XFS_FSB_TO_AGNO
(mp, 
bno
)) {

1007 
	`do_w¨n
(

1008 
	`_
("agnÿo‡©åibuã f‹k o‡öodê%" 
PRIu64
 " ouào‡ªguœ∏∑πôi⁄\n"), 
öo
);

1012 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
	`XFS_FSB_TO_DADDR
(mp, 
bno
),

1013 
	`XFS_FSB_TO_BB
(
mp
, 1), 0, &
xfs_da3_node_buf_›s
);

1014 i‡(!
bp
) {

1015 
	`do_w¨n
(

1016 
	`_
("ˇn'àªad block 0 o‡öodê%" 
PRIu64
 "áttribute fork\n"),

1017 
öo
);

1020 i‡(
bp
->
b_îr‹
 =-
EFSBADCRC
)

1021 (*
ª∑ú
)++;

1024 i‡(
	`__check_©å_hódî
(
mp
, 
bp
, 
öo
)) {

1025 *
ª∑ú
 = 0;

1026 
	`libxfs_putbuf
(
bp
);

1031 
Àaf
 = 
bp
->
b_addr
;

1032 
	`xfs_©å3_Àaf_hdr_‰om_disk
(
mp
->
m_©å_geo
, &
Àafhdr
, 
Àaf
);

1037 i‡(
Àafhdr
.
f‹w
 !0 ||Üófhdr.
back
 != 0) {

1038 i‡(!
no_modify
) {

1039 
	`do_w¨n
(

1040 
	`_
("˛órög f‹w/backÖoöãr†ö block 0 f‹áâribuã†ö inodê%" 
PRIu64
 "\n"),

1041 
öo
);

1042 
ª∑úlöks
 = 1;

1043 
Àafhdr
.
f‹w
 = 0;

1044 
Àafhdr
.
back
 = 0;

1045 
	`xfs_©å3_Àaf_hdr_to_disk
(
mp
->
m_©å_geo
,

1046 
Àaf
, &
Àafhdr
);

1048 
	`do_w¨n
(

1049 
	`_
("would cÀ¨ f‹w/backÖoöãr†ö block 0 f‹áâribuã†ö inodê%" 
PRIu64
 "\n"), 
öo
);

1058 
Àafhdr
.
magic
) {

1059 
XFS_ATTR_LEAF_MAGIC
:

1060 
XFS_ATTR3_LEAF_MAGIC
:

1061 i‡(
	`¥o˚ss_Àaf_©å_block
(
mp
, 
Àaf
, 0, 
öo
, 
blkm≠
,

1062 0, &
√xt_hashvÆ
, 
ª∑ú
)) {

1063 *
ª∑ú
 = 0;

1065 
	`libxfs_putbuf
(
bp
);

1068 *
ª∑ú
 = *ª∑ú || 
ª∑úlöks
;

1071 
XFS_DA_NODE_MAGIC
:

1072 
XFS_DA3_NODE_MAGIC
:

1074 i‡((*
ª∑ú
 || 
ª∑úlöks
Ë&& !
no_modify
) {

1075 *
ª∑ú
 = 1;

1076 
	`libxfs_wrôebuf
(
bp
, 0);

1078 
	`libxfs_putbuf
(
bp
);

1079 
îr‹
 = 
	`¥o˚ss_node_©å
(
mp
, 
öo
, 
dù
, 
blkm≠
);

1080 i‡(
îr‹
)

1081 *
ª∑ú
 = 0;

1082  
îr‹
;

1084 
	`do_w¨n
(

1085 
	`_
("badáâribuãÜó‡magi¯# %#x f‹ dú inÿ%" 
PRIu64
 "\n"),

1086 
	`be16_to_˝u
(
Àaf
->
hdr
.
öfo
.
magic
), 
öo
);

1087 
	`libxfs_putbuf
(
bp
);

1088 *
ª∑ú
 = 0;

1092 i‡(*
ª∑ú
 && !
no_modify
)

1093 
	`libxfs_wrôebuf
(
bp
, 0);

1095 
	`libxfs_putbuf
(
bp
);

1098 
	}
}

1102 
	$xfs_a˛_‰om_disk
(

1103 
xfs_mou¡
 *
mp
,

1104 
xfs_iˇ˛
 **
a˛p
,

1105 
xfs_a˛
 *
da˛
)

1107 
xfs_iˇ˛
 *
a˛
;

1108 
xfs_iˇ˛_íåy
 *
a˚
;

1109 
xfs_a˛_íåy
 *
da˚
;

1110 
cou¡
;

1111 
i
;

1113 
cou¡
 = 
	`be32_to_˝u
(
da˛
->
a˛_˙t
);

1114 i‡(
cou¡
 > 
	`XFS_ACL_MAX_ENTRIES
(
mp
)) {

1115 
	`do_w¨n
(
	`_
("Toÿm™y ACLÉ¡rõs, cou¡ %d\n"), 
cou¡
);

1116 *
a˛p
 = 
NULL
;

1117  
EINVAL
;

1121 
a˛
 = 
	`mÆloc
((
xfs_iˇ˛
) +

1122 
cou¡
 * (
xfs_iˇ˛_íåy
));

1123 i‡(!
a˛
) {

1124 
	`do_w¨n
(
	`_
("cannot mallocÉnough for ACLáttribute\n"));

1125 
	`do_w¨n
(
	`_
("SKIPPINGÅhis ACL\n"));

1126 *
a˛p
 = 
NULL
;

1127  
ENOMEM
;

1130 
a˛
->
a˛_˙t
 = 
cou¡
;

1131 
i
 = 0; i < 
cou¡
; i++) {

1132 
a˚
 = &
a˛
->
a˛_íåy
[
i
];

1133 
da˚
 = &
da˛
->
a˛_íåy
[
i
];

1135 
a˚
->
´_èg
 = 
	`be32_to_˝u
(
da˚
->ae_tag);

1136 
a˚
->
´_id
 = 
	`be32_to_˝u
(
da˚
->ae_id);

1137 
a˚
->
´_≥rm
 = 
	`be16_to_˝u
(
da˚
->ae_perm);

1140 *
a˛p
 = 
a˛
;

1142 
	}
}

1149 
	$¥o˚ss_©åibuãs
(

1150 
xfs_mou¡_t
 *
mp
,

1151 
xfs_öo_t
 
öo
,

1152 
xfs_döode_t
 *
dù
,

1153 
blkm≠_t
 *
blkm≠
,

1154 *
ª∑ú
)

1156 
îr
;

1157 
__u8
 
af‹m©
 = 
dù
->
di_af‹m©
;

1158 #ifde‡
DEBUG


1159 
xfs_©å_sh‹tf‹m_t
 *
asf
;

1161 
asf
 = (
xfs_©å_sh‹tf‹m_t
 *Ë
	`XFS_DFORK_APTR
(
dù
);

1164 i‡(
af‹m©
 =
XFS_DINODE_FMT_LOCAL
) {

1165 
	`ASSERT
(
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
) <=

1166 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
));

1167 
îr
 = 
	`¥o˚ss_sh‹tf‹m_©å
(
mp
, 
öo
, 
dù
, 
ª∑ú
);

1168 } i‡(
af‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ||

1169 
af‹m©
 =
XFS_DINODE_FMT_BTREE
) {

1170 
îr
 = 
	`¥o˚ss_l⁄gf‹m_©å
(
mp
, 
öo
, 
dù
, 
blkm≠
,

1171 
ª∑ú
);

1175 
	`do_w¨n
(
	`_
("ûÀgÆáâribuã f‹m© %d, inÿ%" 
PRIu64
 "\n"),

1176 
af‹m©
, 
öo
);

1177 
îr
 = 1;

1179  (
îr
);

1180 
	}
}

1186 
	$xfs_a˛_vÆid
(

1187 
xfs_mou¡
 *
mp
,

1188 
xfs_a˛
 *
da˛p
)

1190 
xfs_iˇ˛
 *
a˛p
 = 
NULL
;

1191 
xfs_iˇ˛_íåy
 *
íåy
, *
e
;

1192 
u£r
 = 0, 
group
 = 0, 
Ÿhî
 = 0, 
mask
 = 0, 
mask_ªquúed
 = 0;

1193 
i
, 
j
;

1195 i‡(
da˛p
 =
NULL
)

1196 
a˛_övÆid
;

1198 
	`xfs_a˛_‰om_disk
(
mp
, &
a˛p
, 
da˛p
)) {

1199 
ENOMEM
:

1201 
EINVAL
:

1202 
a˛_övÆid
;

1207 
i
 = 0; i < 
a˛p
->
a˛_˙t
; i++) {

1208 
íåy
 = &
a˛p
->
a˛_íåy
[
i
];

1209 i‡(
íåy
->
´_≥rm
 & ~(
ACL_READ
|
ACL_WRITE
|
ACL_EXECUTE
))

1210 
a˛_övÆid
;

1211 
íåy
->
´_èg
) {

1212 
ACL_USER_OBJ
:

1213 i‡(
u£r
++)

1214 
a˛_övÆid
;

1216 
ACL_GROUP_OBJ
:

1217 i‡(
group
++)

1218 
a˛_övÆid
;

1220 
ACL_OTHER
:

1221 i‡(
Ÿhî
++)

1222 
a˛_övÆid
;

1224 
ACL_USER
:

1225 
ACL_GROUP
:

1226 
j
 = 
i
 + 1; j < 
a˛p
->
a˛_˙t
; j++) {

1227 
e
 = &
a˛p
->
a˛_íåy
[
j
];

1228 i‡(
e
->
´_id
 =
íåy
->ae_id &&

1229 
e
->
´_èg
 =
íåy
->ae_tag)

1230 
a˛_övÆid
;

1232 
mask_ªquúed
++;

1234 
ACL_MASK
:

1235 i‡(
mask
++)

1236 
a˛_övÆid
;

1239 
a˛_övÆid
;

1242 i‡(!
u£r
 || !
group
 || !
Ÿhî
 || (
mask_ªquúed
 && !
mask
))

1243 
a˛_övÆid
;

1244 
	`‰ì
(
a˛p
);

1246 
a˛_övÆid
:

1247 
	`‰ì
(
a˛p
);

1248 
î∫o
 = 
EINVAL
;

1250 
	}
}

1257 
	$__check_£tvÆue
(c⁄° *
li°
, 
cou¡
)

1259 
i
;

1261 
i
 = 1; i < 
cou¡
 ; i++)

1262 i‡(
li°
[
i
] <=Üist[i-1])

1265 
	}
}

1272 
	$xfs_mac_vÆid
(
xfs_mac_œbñ_t
 *
Õ
)

1274 i‡(
Õ
 =
NULL
)

1281 i‡((
Õ
->
ml_ˇtcou¡
 +Üp->
ml_divcou¡
Ë> 
XFS_MAC_MAX_SETS
)

1288 
Õ
->
ml_m£n_ty≥
) {

1289 
XFS_MSEN_ADMIN_LABEL
:

1290 
XFS_MSEN_EQUAL_LABEL
:

1291 
XFS_MSEN_HIGH_LABEL
:

1292 
XFS_MSEN_MLD_HIGH_LABEL
:

1293 
XFS_MSEN_LOW_LABEL
:

1294 
XFS_MSEN_MLD_LOW_LABEL
:

1295 i‡(
Õ
->
ml_Àvñ
 !0 ||Üp->
ml_ˇtcou¡
 > 0 )

1298 
XFS_MSEN_TCSEC_LABEL
:

1299 
XFS_MSEN_MLD_LABEL
:

1300 i‡(
Õ
->
ml_ˇtcou¡
 > 0 &&

1301 
	`__check_£tvÆue
(
Õ
->
ml_li°
,

1302 
Õ
->
ml_ˇtcou¡
) == -1)

1305 
XFS_MSEN_UNKNOWN_LABEL
:

1314 
Õ
->
ml_möt_ty≥
) {

1315 
XFS_MINT_BIBA_LABEL
:

1316 i‡(
Õ
->
ml_divcou¡
 > 0 &&

1317 
	`__check_£tvÆue
(
Õ
->
ml_li°
 +Üp->
ml_ˇtcou¡
,

1318 
Õ
->
ml_divcou¡
) == -1)

1321 
XFS_MINT_EQUAL_LABEL
:

1322 
XFS_MINT_HIGH_LABEL
:

1323 
XFS_MINT_LOW_LABEL
:

1324 i‡(
Õ
->
ml_gøde
 !0 ||Üp->
ml_divcou¡
 > 0 )

1332 
	}
}

	@repair/attr_repair.h

18 #i‚de‡
_XR_ATTRREPAIR_H


19 
	#_XR_ATTRREPAIR_H


	)

24 
	#ACL_USER_OBJ
 0x01

	)

25 
	#ACL_USER
 0x02

	)

26 
	#ACL_GROUP_OBJ
 0x04

	)

27 
	#ACL_GROUP
 0x08

	)

28 
	#ACL_MASK
 0x10

	)

29 
	#ACL_OTHER
 0x20

	)

31 
	#ACL_READ
 04

	)

32 
	#ACL_WRITE
 02

	)

33 
	#ACL_EXECUTE
 01

	)

35 
__uöt16_t
 
	txfs_a˛_≥rm_t
;

36 
__öt32_t
 
	txfs_a˛_ty≥_t
;

37 
__öt32_t
 
	txfs_a˛_èg_t
;

38 
__öt32_t
 
	txfs_a˛_id_t
;

46 
	sxfs_iˇ˛_íåy
 {

47 
xfs_a˛_èg_t
 
	m´_èg
;

48 
xfs_a˛_id_t
 
	m´_id
;

49 
xfs_a˛_≥rm_t
 
	m´_≥rm
;

52 
	sxfs_iˇ˛
 {

53 
__öt32_t
 
	ma˛_˙t
;

54 
xfs_iˇ˛_íåy
 
	ma˛_íåy
[0];

60 
	#XFS_MAC_MAX_SETS
 250

	)

61 
	sxfs_mac_œbñ
 {

62 
__uöt8_t
 
	mml_m£n_ty≥
;

63 
__uöt8_t
 
	mml_möt_ty≥
;

64 
__uöt8_t
 
	mml_Àvñ
;

65 
__uöt8_t
 
	mml_gøde
;

66 
__uöt16_t
 
	mml_ˇtcou¡
;

67 
__uöt16_t
 
	mml_divcou¡
;

69 
__uöt16_t
 
	mml_li°
[
XFS_MAC_MAX_SETS
];

70 } 
	txfs_mac_œbñ_t
;

73 
	#XFS_MSEN_ADMIN_LABEL
 'A'

	)

74 
	#XFS_MSEN_EQUAL_LABEL
 'E'

	)

75 
	#XFS_MSEN_HIGH_LABEL
 'H'

	)

76 
	#XFS_MSEN_MLD_HIGH_LABEL
 'I'

	)

77 
	#XFS_MSEN_LOW_LABEL
 'L'

	)

78 
	#XFS_MSEN_MLD_LABEL
 'M'

	)

79 
	#XFS_MSEN_MLD_LOW_LABEL
 'N'

	)

80 
	#XFS_MSEN_TCSEC_LABEL
 'T'

	)

81 
	#XFS_MSEN_UNKNOWN_LABEL
 'U'

	)

84 
	#XFS_MINT_BIBA_LABEL
 'b'

	)

85 
	#XFS_MINT_EQUAL_LABEL
 'e'

	)

86 
	#XFS_MINT_HIGH_LABEL
 'h'

	)

87 
	#XFS_MINT_LOW_LABEL
 'l'

	)

89 
	#SGI_MAC_FILE
 "SGI_MAC_FILE"

	)

90 
	#SGI_MAC_FILE_SIZE
 ((
SGI_MAC_FILE
)-1)

	)

96 
__uöt64_t
 
	txfs_ˇp_vÆue_t
;

98 
	sxfs_ˇp_£t
 {

99 
xfs_ˇp_vÆue_t
 
	mˇp_ef„˘ive
;

100 
xfs_ˇp_vÆue_t
 
	mˇp_≥rmôãd
;

101 
xfs_ˇp_vÆue_t
 
	mˇp_öhîôabÀ
;

102 } 
	txfs_ˇp_£t_t
;

104 
	#SGI_CAP_FILE
 "SGI_CAP_FILE"

	)

105 
	#SGI_CAP_FILE_SIZE
 ((
SGI_CAP_FILE
)-1)

	)

111 
	gblkm≠
;

112 
¥o˚ss_©åibuãs
 (
xfs_mou¡_t
 *, 
xfs_öo_t
, 
xfs_döode_t
 *,

113 
blkm≠
 *, *);

	@repair/avl.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

22 
	#CERT
 
ASSERT


	)

24 #ifde‡
AVL_DEBUG


27 
	$avl_checknode
(

28 
av…ªe_desc_t
 *
åì
,

29 
av ode_t
 *
≈
)

31 
av ode_t
 *
back
 = 
≈
->
avl_back
;

32 
av ode_t
 *
f‹w
 = 
≈
->
avl_f‹w
;

33 
av ode_t
 *
√xtöo
 = 
≈
->
avl_√xtöo
;

34 
bÆ
 = 
≈
->
avl_bÆ™˚
;

36 
	`ASSERT
(
bÆ
 !
AVL_BALANCE
 || (!
back
 && !
f‹w
) || (back && forw));

37 
	`ASSERT
(
bÆ
 !
AVL_FORW
 || 
f‹w
);

38 
	`ASSERT
(
bÆ
 !
AVL_BACK
 || 
back
);

40 i‡(
f‹w
) {

41 
	`ASSERT
(
	`AVL_START
(
åì
, 
≈
Ë< AVL_START—ªe, 
f‹w
));

42 
	`ASSERT
(
≈
->
avl_f‹w
->
avl_∑ª¡
 ==Çp);

43 
	`ASSERT
(
back
 || 
bÆ
 =
AVL_FORW
);

45 
	`ASSERT
(
bÆ
 !
AVL_FORW
);

46 
	`ASSERT
(
bÆ
 =
AVL_BALANCE
 || 
back
);

47 
	`ASSERT
(
bÆ
 =
AVL_BACK
 || !
back
);

50 i‡(
back
) {

51 
	`ASSERT
(
	`AVL_START
(
åì
, 
≈
Ë> AVL_START—ªe, 
back
));

52 
	`ASSERT
(
≈
->
avl_back
->
avl_∑ª¡
 ==Çp);

53 
	`ASSERT
(
f‹w
 || 
bÆ
 =
AVL_BACK
);

55 
	`ASSERT
(
bÆ
 !
AVL_BACK
);

56 
	`ASSERT
(
bÆ
 =
AVL_BALANCE
 || 
f‹w
);

57 
	`ASSERT
(
bÆ
 =
AVL_FORW
 || !
f‹w
);

60 i‡(
√xtöo
 =
NULL
)

61 
	`ASSERT
(
f‹w
 =
NULL
);

63 
	`ASSERT
(
	`AVL_END
(
åì
, 
≈
Ë<
	`AVL_START
—ªe, 
√xtöo
));

64 
	}
}

67 
	$avl_checkåì
(

68 
av…ªe_desc_t
 *
åì
,

69 
av ode_t
 *
roŸ
)

71 
av ode_t
 *
∆a°
, *
¬ext
, *
≈
;

72 
uöçå_t
 
off£t
 = 0;

73 
uöçå_t
 
íd
;

75 
∆a°
 = 
¬ext
 = 
roŸ
;

77 
	`ASSERT
(!
¬ext
 ||Ç√xt->
avl_∑ª¡
 =
NULL
);

79 
¬ext
) {

81 
	`avl_checknode
(
åì
, 
¬ext
);

82 
íd
 = 
	`AVL_END
(
åì
, 
¬ext
);

84 i‡(
íd
 <
off£t
) {

85 i‡((
≈
 = 
¬ext
->
avl_f‹w
Ë&&Ç∞!
∆a°
) {

86 
∆a°
 = 
¬ext
;

87 
¬ext
 = 
≈
;

89 
∆a°
 = 
¬ext
;

90 
¬ext
 =Ç√xt->
avl_∑ª¡
;

95 
∆a°
 = 
¬ext
;

96 i‡(
≈
 = 
¬ext
->
avl_back
) {

97 i‡(
	`AVL_END
(
åì
, 
≈
Ë> 
off£t
) {

98 
¬ext
 = 
≈
;

103 
≈
 = 
¬ext
;

104 
¬ext
 =Ç√xt->
avl_f‹w
;

105 i‡(!
¬ext
)

106 
¬ext
 = 
≈
->
avl_∑ª¡
;

108 
off£t
 = 
íd
;

110 
	}
}

112 
	#avl_checkåì
(
t
,
x
)

	)

124 
	$ªåót
(

125 
av…ªe_desc_t
 *
åì
,

126 
av ode_t
 *
≈
,

127 
dúe˘i⁄
)

129 
av ode_t
 **
roŸp
 = &
åì
->
avl_roŸ
;

130 
av ode_t
 *
∑ª¡
;

131 
av ode_t
 *
chûd
;

132 
av ode_t
 *
tmp
;

133 
bÆ
;

136 
	`ASSERT
(
dúe˘i⁄
 =
AVL_BACK
 || dúe˘i⁄ =
AVL_FORW
);

138 i‡(
≈
->
avl_bÆ™˚
 =
AVL_BALANCE
) {

139 
≈
->
avl_bÆ™˚
 = 
dúe˘i⁄
;

143 
∑ª¡
 = 
≈
->
avl_∑ª¡
;

150 i‡(
dúe˘i⁄
 !
≈
->
avl_bÆ™˚
) {

151 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

152 i‡(
∑ª¡
) {

153 i‡(
∑ª¡
->
avl_f‹w
 =
≈
)

154 
dúe˘i⁄
 = 
AVL_BACK
;

156 
dúe˘i⁄
 = 
AVL_FORW
;

158 
≈
 = 
∑ª¡
;

168 i‡(
≈
->
avl_bÆ™˚
 =
AVL_BACK
) {

170 
	`ASSERT
(
dúe˘i⁄
 =
AVL_BACK
);

171 
chûd
 = 
≈
->
avl_back
;

172 
bÆ
 = 
chûd
->
avl_bÆ™˚
;

174 i‡(
bÆ
 !
AVL_FORW
) {

185 #ifde‡
AVL_PRINT


186 i‡(!(
åì
->
avl_Êags
 & 
AVLF_DUPLICITY
))

187 
	`cmn_îr
(
CE_CONT
, "!LL delete b 0x%x c 0x%x\n",

188 
≈
, 
chûd
);

190 
≈
->
avl_back
 = 
chûd
->
avl_f‹w
;

191 i‡(
chûd
->
avl_f‹w
)

192 
chûd
->
avl_f‹w
->
avl_∑ª¡
 = 
≈
;

193 
chûd
->
avl_f‹w
 = 
≈
;

195 i‡(
∑ª¡
) {

196 i‡(
∑ª¡
->
avl_f‹w
 =
≈
) {

197 
∑ª¡
->
avl_f‹w
 = 
chûd
;

198 
dúe˘i⁄
 = 
AVL_BACK
;

200 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

201 
∑ª¡
->
avl_back
 = 
chûd
;

202 
dúe˘i⁄
 = 
AVL_FORW
;

205 
	`ASSERT
(*
roŸp
 =
≈
);

206 *
roŸp
 = 
chûd
;

208 
≈
->
avl_∑ª¡
 = 
chûd
;

209 
chûd
->
avl_∑ª¡
 = 
∑ª¡
;

211 i‡(
bÆ
 =
AVL_BALANCE
) {

212 
≈
->
avl_bÆ™˚
 = 
AVL_BACK
;

213 
chûd
->
avl_bÆ™˚
 = 
AVL_FORW
;

216 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

217 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

218 
≈
 = 
∑ª¡
;

219 
	`avl_checkåì
(
åì
, *
roŸp
);

237 #ifde‡
AVL_PRINT


238 i‡(!(
åì
->
avl_Êags
 & 
AVLF_DUPLICITY
))

239 
	`cmn_îr
(
CE_CONT
, "!LR delete b 0x%x c 0x%xÅ 0x%x\n",

240 
≈
, 
chûd
, chûd->
avl_f‹w
);

242 
tmp
 = 
chûd
->
avl_f‹w
;

243 
bÆ
 = 
tmp
->
avl_bÆ™˚
;

245 
chûd
->
avl_f‹w
 = 
tmp
->
avl_back
;

246 i‡(
tmp
->
avl_back
)

247 
tmp
->
avl_back
->
avl_∑ª¡
 = 
chûd
;

249 
tmp
->
avl_back
 = 
chûd
;

250 
chûd
->
avl_∑ª¡
 = 
tmp
;

252 
≈
->
avl_back
 = 
tmp
->
avl_f‹w
;

253 i‡(
tmp
->
avl_f‹w
)

254 
tmp
->
avl_f‹w
->
avl_∑ª¡
 = 
≈
;

255 
tmp
->
avl_f‹w
 = 
≈
;

257 i‡(
bÆ
 =
AVL_FORW
)

258 
chûd
->
avl_bÆ™˚
 = 
AVL_BACK
;

260 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

262 i‡(
bÆ
 =
AVL_BACK
)

263 
≈
->
avl_bÆ™˚
 = 
AVL_FORW
;

265 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

267 
√xt
;

270 
	`ASSERT
(
≈
->
avl_bÆ™˚
 =
AVL_FORW
 && 
dúe˘i⁄
 == AVL_FORW);

272 
chûd
 = 
≈
->
avl_f‹w
;

273 
bÆ
 = 
chûd
->
avl_bÆ™˚
;

275 i‡(
bÆ
 !
AVL_BACK
) {

286 #ifde‡
AVL_PRINT


287 i‡(!(
åì
->
avl_Êags
 & 
AVLF_DUPLICITY
))

288 
	`cmn_îr
(
CE_CONT
, "!RR delete b 0x%x c 0x%x\n",

289 
≈
, 
chûd
);

291 
≈
->
avl_f‹w
 = 
chûd
->
avl_back
;

292 i‡(
chûd
->
avl_back
)

293 
chûd
->
avl_back
->
avl_∑ª¡
 = 
≈
;

294 
chûd
->
avl_back
 = 
≈
;

296 i‡(
∑ª¡
) {

297 i‡(
∑ª¡
->
avl_f‹w
 =
≈
) {

298 
∑ª¡
->
avl_f‹w
 = 
chûd
;

299 
dúe˘i⁄
 = 
AVL_BACK
;

301 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

302 
∑ª¡
->
avl_back
 = 
chûd
;

303 
dúe˘i⁄
 = 
AVL_FORW
;

306 
	`ASSERT
(*
roŸp
 =
≈
);

307 *
roŸp
 = 
chûd
;

309 
≈
->
avl_∑ª¡
 = 
chûd
;

310 
chûd
->
avl_∑ª¡
 = 
∑ª¡
;

312 i‡(
bÆ
 =
AVL_BALANCE
) {

313 
≈
->
avl_bÆ™˚
 = 
AVL_FORW
;

314 
chûd
->
avl_bÆ™˚
 = 
AVL_BACK
;

317 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

318 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

319 
≈
 = 
∑ª¡
;

320 
	`avl_checkåì
(
åì
, *
roŸp
);

326 #ifde‡
AVL_PRINT


327 i‡(!(
åì
->
avl_Êags
 & 
AVLF_DUPLICITY
))

328 
	`cmn_îr
(
CE_CONT
, "!RL delete b 0x%x c 0x%xÅ 0x%x\n",

329 
≈
, 
chûd
, chûd->
avl_back
);

331 
tmp
 = 
chûd
->
avl_back
;

332 
bÆ
 = 
tmp
->
avl_bÆ™˚
;

334 
chûd
->
avl_back
 = 
tmp
->
avl_f‹w
;

335 i‡(
tmp
->
avl_f‹w
)

336 
tmp
->
avl_f‹w
->
avl_∑ª¡
 = 
chûd
;

338 
tmp
->
avl_f‹w
 = 
chûd
;

339 
chûd
->
avl_∑ª¡
 = 
tmp
;

341 
≈
->
avl_f‹w
 = 
tmp
->
avl_back
;

342 i‡(
tmp
->
avl_back
)

343 
tmp
->
avl_back
->
avl_∑ª¡
 = 
≈
;

344 
tmp
->
avl_back
 = 
≈
;

346 i‡(
bÆ
 =
AVL_BACK
)

347 
chûd
->
avl_bÆ™˚
 = 
AVL_FORW
;

349 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

351 i‡(
bÆ
 =
AVL_FORW
)

352 
≈
->
avl_bÆ™˚
 = 
AVL_BACK
;

354 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

355 
√xt
:

356 
≈
->
avl_∑ª¡
 = 
tmp
;

357 
tmp
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

358 
tmp
->
avl_∑ª¡
 = 
∑ª¡
;

360 i‡(
∑ª¡
) {

361 i‡(
∑ª¡
->
avl_f‹w
 =
≈
) {

362 
∑ª¡
->
avl_f‹w
 = 
tmp
;

363 
dúe˘i⁄
 = 
AVL_BACK
;

365 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

366 
∑ª¡
->
avl_back
 = 
tmp
;

367 
dúe˘i⁄
 = 
AVL_FORW
;

370 
	`ASSERT
(*
roŸp
 =
≈
);

371 *
roŸp
 = 
tmp
;

375 
≈
 = 
∑ª¡
;

376 
	`avl_checkåì
(
åì
, *
roŸp
);

377 } 
≈
);

378 
	}
}

386 
	$avl_dñëe
(

387 
av…ªe_desc_t
 *
åì
,

388 
av ode_t
 *
≈
)

390 
av ode_t
 *
f‹w
 = 
≈
->
avl_f‹w
;

391 
av ode_t
 *
back
 = 
≈
->
avl_back
;

392 
av ode_t
 *
∑ª¡
 = 
≈
->
avl_∑ª¡
;

393 
av ode_t
 *
¬ext
;

396 i‡(
≈
->
avl_back
) {

401 
¬ext
 = 
≈
->
avl_back
;

402 
¬ext
) {

403 i‡(!
¬ext
->
avl_f‹w
)

405 
¬ext
 =Ç√xt->
avl_f‹w
;

408 i‡(
≈
->
avl_∑ª¡
) {

413 
¬ext
 = 
≈
->
avl_∑ª¡
;

414 
¬ext
) {

415 i‡(
	`AVL_END
(
åì
, 
¬ext
Ë<AVL_END—ªe, 
≈
))

417 
¬ext
 =Ç√xt->
avl_∑ª¡
;

420 
¬ext
 = 
NULL
;

422 i‡(
¬ext
) {

423 
	`ASSERT
(
¬ext
->
avl_√xtöo
 =
≈
);

424 
¬ext
->
avl_√xtöo
 = 
≈
->avl_nextino;

428 
	`ASSERT
(
åì
->
avl_fú°öo
 !
≈
);

435 
	`ASSERT
(
åì
->
avl_fú°öo
 =
≈
);

436 
åì
->
avl_fú°öo
 = 
≈
->
avl_√xtöo
;

443 i‡(
f‹w
 =
NULL
) {

444 
f‹w
 = 
back
;

445 
©èch
;

448 i‡(
back
 =
NULL
) {

449 
©èch
:

450 i‡(
f‹w
)

451 
f‹w
->
avl_∑ª¡
 = 
∑ª¡
;

452 i‡(
∑ª¡
) {

453 i‡(
∑ª¡
->
avl_f‹w
 =
≈
) {

454 
∑ª¡
->
avl_f‹w
 = 
f‹w
;

455 
	`ªåót
(
åì
, 
∑ª¡
, 
AVL_BACK
);

457 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

458 
∑ª¡
->
avl_back
 = 
f‹w
;

459 
	`ªåót
(
åì
, 
∑ª¡
, 
AVL_FORW
);

462 
	`ASSERT
(
åì
->
avl_roŸ
 =
≈
);

463 
åì
->
avl_roŸ
 = 
f‹w
;

465 
	`avl_checkåì
(
åì
,Åªe->
avl_roŸ
);

483 i‡((
f‹w
 = 
back
->
avl_f‹w
Ë=
NULL
) {

488 
back
->
avl_bÆ™˚
 = 
≈
->avl_balance;

489 
back
->
avl_f‹w
 = 
f‹w
 = 
≈
->avl_forw;

490 
f‹w
->
avl_∑ª¡
 = 
back
;

491 
back
->
avl_∑ª¡
 = 
∑ª¡
;

493 i‡(
∑ª¡
) {

494 i‡(
∑ª¡
->
avl_f‹w
 =
≈
)

495 
∑ª¡
->
avl_f‹w
 = 
back
;

497 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

498 
∑ª¡
->
avl_back
 = 
back
;

501 
	`ASSERT
(
åì
->
avl_roŸ
 =
≈
);

502 
åì
->
avl_roŸ
 = 
back
;

509 
	`ªåót
(
åì
, 
back
, 
AVL_FORW
);

510 
	`avl_checkåì
(
åì
,Åªe->
avl_roŸ
);

530 (
back
 = 
f‹w
->
avl_f‹w
))

531 
f‹w
 = 
back
;

536 
f‹w
->
avl_bÆ™˚
 = 
≈
->avl_balance;

541 
f‹w
->
avl_f‹w
 = 
≈
->avl_forw;

542 
≈
->
avl_f‹w
->
avl_∑ª¡
 = 
f‹w
;

547 
back
 = 
f‹w
->
avl_∑ª¡
;

548 
back
->
avl_f‹w
 = 
f‹w
->
avl_back
;

549 i‡(
f‹w
->
avl_back
)

550 
f‹w
->
avl_back
->
avl_∑ª¡
 = 
back
;

555 
f‹w
->
avl_back
 = 
≈
->avl_back;

556 
≈
->
avl_back
->
avl_∑ª¡
 = 
f‹w
;

561 
f‹w
->
avl_∑ª¡
 = 
∑ª¡
;

563 i‡(
∑ª¡
) {

564 i‡(
∑ª¡
->
avl_f‹w
 =
≈
)

565 
∑ª¡
->
avl_f‹w
 = 
f‹w
;

567 
∑ª¡
->
avl_back
 = 
f‹w
;

569 
	`ASSERT
(
åì
->
avl_roŸ
 =
≈
);

570 
åì
->
avl_roŸ
 = 
f‹w
;

577 
	`ªåót
(
åì
, 
back
, 
AVL_BACK
);

578 
	`avl_checkåì
(
åì
,Åªe->
avl_roŸ
);

579 
	}
}

589 
av ode_t
 *

590 
	$avl_föd™yønge
(

591 
av…ªe_desc_t
 *
åì
,

592 
uöçå_t
 
°¨t
,

593 
uöçå_t
 
íd
,

594 
checkÀn
)

596 
av ode_t
 *
≈
 = 
åì
->
avl_roŸ
;

599 
≈
) {

600 i‡(
°¨t
 < 
	`AVL_START
(
åì
, 
≈
)) {

601 i‡(
≈
->
avl_back
) {

602 
≈
 =Çp->
avl_back
;

612 i‡(
°¨t
 >
	`AVL_END
(
åì
, 
≈
)) {

613 i‡(
≈
->
avl_f‹w
) {

614 
≈
 =Çp->
avl_f‹w
;

623 
≈
 =Çp->
avl_√xtöo
;

629 i‡(
≈
) {

630 i‡(
checkÀn
 =
AVL_INCLUDE_ZEROLEN
) {

631 i‡(
íd
 <
	`AVL_START
(
åì
, 
≈
)) {

635 (
NULL
);

638 (
≈
);

643 
≈
 && (
	`AVL_END
(
åì
,ÇpË- 
	`AVL_START
(tree,Çp) == 0)

644 && (
	`AVL_START
(
åì
, 
≈
Ë< 
íd
))

645 
≈
 =Çp->
avl_√xtöo
;

647 i‡((
≈
 =
NULL
Ë|| (
	`AVL_START
(
åì
,ÇpË>
íd
))

648  
NULL
;

649 (
≈
);

654  
NULL
;

655 
	}
}

660 
av ode_t
 *

661 
	$avl_föd
(

662 
av…ªe_desc_t
 *
åì
,

663 
uöçå_t
 
vÆue
)

665 
av ode_t
 *
≈
 = 
åì
->
avl_roŸ
;

666 
uöçå_t
 
nvÆue
;

668 
≈
) {

669 
nvÆue
 = 
	`AVL_START
(
åì
, 
≈
);

670 i‡(
vÆue
 < 
nvÆue
) {

671 
≈
 =Çp->
avl_back
;

674 i‡(
vÆue
 =
nvÆue
) {

675  
≈
;

677 
≈
 =Çp->
avl_f‹w
;

679  
NULL
;

680 
	}
}

688 
	$avl_bÆ™˚
(

689 
av ode_t
 **
roŸp
,

690 
av ode_t
 *
≈
,

691 
growth
)

699 
av ode_t
 *
∑ª¡
 = 
≈
->
avl_∑ª¡
;

700 
av ode_t
 *
chûd
;

702 
	`CERT
(
growth
 =
AVL_BACK
 || growth =
AVL_FORW
);

710 i‡(
≈
->
avl_bÆ™˚
 =
AVL_BALANCE
) {

711 
≈
->
avl_bÆ™˚
 = 
growth
;

712 i‡(
∑ª¡
) {

713 i‡(
∑ª¡
->
avl_f‹w
 =
≈
)

714 
growth
 = 
AVL_FORW
;

716 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

717 
growth
 = 
AVL_BACK
;

720 
≈
 = 
∑ª¡
;

726 i‡(
growth
 !
≈
->
avl_bÆ™˚
) {

731 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

735 i‡(
growth
 =
AVL_BACK
) {

737 
chûd
 = 
≈
->
avl_back
;

738 
	`CERT
(
≈
->
avl_bÆ™˚
 =
AVL_BACK
 && 
chûd
);

740 i‡(
chûd
->
avl_bÆ™˚
 =
AVL_BACK
) {

758 
≈
->
avl_∑ª¡
 = 
chûd
;

759 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

760 
≈
->
avl_back
 = 
chûd
->
avl_f‹w
;

761 i‡(
chûd
->
avl_f‹w
)

762 
chûd
->
avl_f‹w
->
avl_∑ª¡
 = 
≈
;

763 
chûd
->
avl_f‹w
 = 
≈
;

780 
av ode_t
 *
tmp
 = 
chûd
->
avl_f‹w
;

782 
	`CERT
(
chûd
->
avl_bÆ™˚
 =
AVL_FORW
 && 
tmp
);

784 
chûd
->
avl_f‹w
 = 
tmp
->
avl_back
;

785 i‡(
tmp
->
avl_back
)

786 
tmp
->
avl_back
->
avl_∑ª¡
 = 
chûd
;

788 
tmp
->
avl_back
 = 
chûd
;

789 
chûd
->
avl_∑ª¡
 = 
tmp
;

791 
≈
->
avl_back
 = 
tmp
->
avl_f‹w
;

792 i‡(
tmp
->
avl_f‹w
)

793 
tmp
->
avl_f‹w
->
avl_∑ª¡
 = 
≈
;

795 
tmp
->
avl_f‹w
 = 
≈
;

796 
≈
->
avl_∑ª¡
 = 
tmp
;

798 i‡(
tmp
->
avl_bÆ™˚
 =
AVL_BACK
)

799 
≈
->
avl_bÆ™˚
 = 
AVL_FORW
;

801 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

803 i‡(
tmp
->
avl_bÆ™˚
 =
AVL_FORW
)

804 
chûd
->
avl_bÆ™˚
 = 
AVL_BACK
;

806 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

814 
chûd
 = 
tmp
;

823 
chûd
 = 
≈
->
avl_f‹w
;

824 
	`CERT
(
≈
->
avl_bÆ™˚
 =
AVL_FORW
 && 
chûd
);

826 i‡(
chûd
->
avl_bÆ™˚
 =
AVL_FORW
) {

827 
≈
->
avl_∑ª¡
 = 
chûd
;

828 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

829 
≈
->
avl_f‹w
 = 
chûd
->
avl_back
;

830 i‡(
chûd
->
avl_back
)

831 
chûd
->
avl_back
->
avl_∑ª¡
 = 
≈
;

832 
chûd
->
avl_back
 = 
≈
;

837 
av ode_t
 *
tmp
 = 
chûd
->
avl_back
;

839 
	`ASSERT
(
chûd
->
avl_bÆ™˚
 =
AVL_BACK
 && 
tmp
);

841 
chûd
->
avl_back
 = 
tmp
->
avl_f‹w
;

842 i‡(
tmp
->
avl_f‹w
)

843 
tmp
->
avl_f‹w
->
avl_∑ª¡
 = 
chûd
;

845 
tmp
->
avl_f‹w
 = 
chûd
;

846 
chûd
->
avl_∑ª¡
 = 
tmp
;

848 
≈
->
avl_f‹w
 = 
tmp
->
avl_back
;

849 i‡(
tmp
->
avl_back
)

850 
tmp
->
avl_back
->
avl_∑ª¡
 = 
≈
;

852 
tmp
->
avl_back
 = 
≈
;

853 
≈
->
avl_∑ª¡
 = 
tmp
;

855 i‡(
tmp
->
avl_bÆ™˚
 =
AVL_FORW
)

856 
≈
->
avl_bÆ™˚
 = 
AVL_BACK
;

858 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

860 i‡(
tmp
->
avl_bÆ™˚
 =
AVL_BACK
)

861 
chûd
->
avl_bÆ™˚
 = 
AVL_FORW
;

863 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

865 
chûd
 = 
tmp
;

869 
chûd
->
avl_∑ª¡
 = 
∑ª¡
;

870 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

872 i‡(
∑ª¡
) {

873 i‡(
∑ª¡
->
avl_back
 =
≈
)

874 
∑ª¡
->
avl_back
 = 
chûd
;

876 
∑ª¡
->
avl_f‹w
 = 
chûd
;

878 
	`ASSERT
(*
roŸp
 =
≈
);

879 *
roŸp
 = 
chûd
;

884 
	}
}

887 
av ode_t
 *

888 
	$avl_ö£π_föd_growth
(

889 
av…ªe_desc_t
 *
åì
,

890 
uöçå_t
 
°¨t
,

891 
uöçå_t
 
íd
,

892 *
growthp
)

894 
av ode_t
 *
roŸ
 = 
åì
->
avl_roŸ
;

895 
av ode_t
 *
≈
;

897 
≈
 = 
roŸ
;

898 
	`ASSERT
(
≈
);

901 
	`CERT
(
≈
->
avl_∑ª¡
 || 
roŸ
 ==Çp);

902 
	`CERT
(!
≈
->
avl_∑ª¡
 || 
roŸ
 !=Çp);

903 
	`CERT
(!(
≈
->
avl_back
Ë||Çp->avl_back->
avl_∑ª¡
 ==Çp);

904 
	`CERT
(!(
≈
->
avl_f‹w
Ë||Çp->avl_f‹w->
avl_∑ª¡
 ==Çp);

905 
	`CERT
(
≈
->
avl_bÆ™˚
 !
AVL_FORW
 ||Çp->
avl_f‹w
);

906 
	`CERT
(
≈
->
avl_bÆ™˚
 !
AVL_BACK
 ||Çp->
avl_back
);

907 
	`CERT
(
≈
->
avl_bÆ™˚
 !
AVL_BALANCE
 ||

908 
≈
->
avl_back
 =
NULL
 ||Çp->
avl_f‹w
);

909 
	`CERT
(
≈
->
avl_bÆ™˚
 !
AVL_BALANCE
 ||

910 
≈
->
avl_f‹w
 =
NULL
 ||Çp->
avl_back
);

912 i‡(
	`AVL_START
(
åì
, 
≈
Ë>
íd
) {

913 i‡(
≈
->
avl_back
) {

914 
≈
 =Çp->
avl_back
;

917 *
growthp
 = 
AVL_BACK
;

921 i‡(
	`AVL_END
(
åì
, 
≈
Ë<
°¨t
) {

922 i‡(
≈
->
avl_f‹w
) {

923 
≈
 =Çp->
avl_f‹w
;

926 *
growthp
 = 
AVL_FORW
;

930 (
NULL
);

932 (
≈
);

933 
	}
}

937 
	$avl_ö£π_grow
(

938 
av…ªe_desc_t
 *
åì
,

939 
av ode_t
 *
∑ª¡
,

940 
av ode_t
 *
√wnode
,

941 
growth
)

943 
av ode_t
 *
¬ext
;

944 
uöçå_t
 
°¨t
 = 
	`AVL_START
(
åì
, 
√wnode
);

946 i‡(
growth
 =
AVL_BACK
) {

948 
∑ª¡
->
avl_back
 = 
√wnode
;

956 
√wnode
->
avl_√xtöo
 = 
∑ª¡
;

957 
¬ext
 = 
∑ª¡
;

958 
¬ext
) {

959 i‡(
	`AVL_END
(
åì
, 
¬ext
Ë<
°¨t
)

961 
¬ext
 =Ç√xt->
avl_∑ª¡
;

963 i‡(
¬ext
) {

968 
	`ASSERT
(
¬ext
->
avl_√xtöo
 =
∑ª¡
);

969 
¬ext
->
avl_√xtöo
 = 
√wnode
;

973 
∑ª¡
->
avl_f‹w
 = 
√wnode
;

974 
√wnode
->
avl_√xtöo
 = 
∑ª¡
->avl_nextino;

975 
∑ª¡
->
avl_√xtöo
 = 
√wnode
;

977 
	}
}

980 
av ode_t
 *

981 
	$avl_ö£π
(

982 
av…ªe_desc_t
 *
åì
,

983 
av ode_t
 *
√wnode
)

985 
av ode_t
 *
≈
;

986 
uöçå_t
 
°¨t
 = 
	`AVL_START
(
åì
, 
√wnode
);

987 
uöçå_t
 
íd
 = 
	`AVL_END
(
åì
, 
√wnode
);

988 
growth
;

990 
	`ASSERT
(
√wnode
);

991 
	`ASSERT
(
°¨t
 <
íd
);

996 
√wnode
->
avl_√xtöo
 = 
NULL
;

997 
√wnode
->
avl_∑ª¡
 = 
NULL
;

998 
√wnode
->
avl_f‹w
 = 
NULL
;

999 
√wnode
->
avl_back
 = 
NULL
;

1000 
√wnode
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

1002 i‡((
≈
 = 
åì
->
avl_roŸ
Ë=
NULL
) {

1003 
åì
->
avl_roŸ
 = 
√wnode
;

1004 
åì
->
avl_fú°öo
 = 
√wnode
;

1005  
√wnode
;

1008 i‡((
≈
 = 
	`avl_ö£π_föd_growth
(
åì
, 
°¨t
, 
íd
, &
growth
)Ë=
NULL
) {

1009 i‡(
°¨t
 !
íd
) {

1010 
	`Ârötf
(
°dîr
,

1011 
	`_
("avl_insert: Warning! duplicateÑange [%llu,%llu]\n"),

1012 ()
°¨t
,

1013 ()
íd
);

1015 (
NULL
);

1018 
	`avl_ö£π_grow
(
åì
, 
≈
, 
√wnode
, 
growth
);

1019 i‡(
growth
 =
AVL_BACK
) {

1023 i‡(
åì
->
avl_fú°öo
 =
≈
)

1024 
åì
->
avl_fú°öo
 = 
√wnode
;

1026 #ifde‡
nŸ√eded


1028 i‡(
growth
 =
AVL_FORW
)

1035 
√wnode
->
avl_∑ª¡
 = 
≈
;

1036 
	`CERT
(
≈
->
avl_f‹w
 =
√wnode
 ||Çp->
avl_back
 ==Çewnode);

1038 
	`avl_bÆ™˚
(&
åì
->
avl_roŸ
, 
≈
, 
growth
);

1040 
	`avl_checkåì
(
åì
,Åªe->
avl_roŸ
);

1042  
√wnode
;

1043 
	}
}

1052 
	$avl_ö£π_immedüã
(

1053 
av…ªe_desc_t
 *
åì
,

1054 
av ode_t
 *
a·îp
,

1055 
av ode_t
 *
√wnode
)

1060 
√wnode
->
avl_√xtöo
 = 
NULL
;

1061 
√wnode
->
avl_∑ª¡
 = 
NULL
;

1062 
√wnode
->
avl_f‹w
 = 
NULL
;

1063 
√wnode
->
avl_back
 = 
NULL
;

1064 
√wnode
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

1066 i‡(
a·îp
 =
NULL
) {

1067 
åì
->
avl_roŸ
 = 
√wnode
;

1068 
åì
->
avl_fú°öo
 = 
√wnode
;

1072 
	`ASSERT
(
a·îp
->
avl_f‹w
 =
NULL
);

1073 
	`avl_ö£π_grow
(
åì
, 
a·îp
, 
√wnode
, 
AVL_FORW
);

1074 
	`CERT
(
a·îp
->
avl_f‹w
 =
√wnode
);

1075 
	`avl_bÆ™˚
(&
åì
->
avl_roŸ
, 
a·îp
, 
AVL_FORW
);

1076 
	`avl_checkåì
(
åì
,Åªe->
avl_roŸ
);

1077 
	}
}

1083 
av ode_t
 *

1084 
	$avl_fú°öo
(
av ode_t
 *
roŸ
)

1086 
av ode_t
 *
≈
;

1088 i‡((
≈
 = 
roŸ
Ë=
NULL
)

1089  
NULL
;

1091 
≈
->
avl_back
)

1092 
≈
 =Çp->
avl_back
;

1093  
≈
;

1094 
	}
}

1099 
av ode_t
 *

1100 
	$avl_œ°öo
(
av ode_t
 *
roŸ
)

1102 
av ode_t
 *
≈
;

1104 i‡((
≈
 = 
roŸ
Ë=
NULL
)

1105  
NULL
;

1107 
≈
->
avl_f‹w
)

1108 
≈
 =Çp->
avl_f‹w
;

1109  
≈
;

1110 
	}
}

1113 
	$avl_öô_åì
(
av…ªe_desc_t
 *
åì
, 
avl›s_t
 *
›s
)

1115 
åì
->
avl_roŸ
 = 
NULL
;

1116 
åì
->
avl_fú°öo
 = 
NULL
;

1117 
åì
->
avl_›s
 = 
›s
;

1118 
	}
}

1120 #ifde‡
AVL_DEBUG


1122 
	$avl_¥öäode
(
av…ªe_desc_t
 *
åì
, 
av ode_t
 *
≈
, 
∆
)

1124 
	`¥ötf
("[%d-%d]%c", 
	`AVL_START
(
åì
, 
≈
),

1125 (
	`AVL_END
(
åì
, 
≈
Ë- 1), 
∆
 ? '\n' : ' ');

1126 
	}
}

1128 #ifde‡
STAND_ALONE_DEBUG


1130 
	savl_debug_node
 {

1131 
av ode_t
 
	mavl_node
;

1132 
xfs_off_t
 
	mavl_°¨t
;

1133 
	mavl_size
;

1136 
avl›s_t
 
	gavl_debug_›s
 = {

1137 
avl_debug_°¨t
,

1138 
avl_debug_íd
,

1141 
uöçå_t


1142 
	$avl_debug_°¨t
(
av ode_t
 *
node
)

1144  (
uöçå_t
)(
avl_debug_node
 *)
node
->
avl_°¨t
;

1145 
	}
}

1147 
uöçå_t


1148 
	$avl_debug_íd
(
av ode_t
 *
node
)

1150  (
uöçå_t
)

1151 ((
avl_debug_node
 *)
node
->
avl_°¨t
 +

1152 (
avl_debug_node
 *)
node
->
avl_size
);

1153 
	}
}

1155 
avl_debug_node
 
	g‰ìnodes
[100];

1156 
avl_debug_node
 *
	g‰ìhód
 = &
‰ìnodes
[0];

1158 
av ode_t
 *

1159 
	$Æloc_avl_debug_node
()

1161 
‰ìhód
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

1162 
‰ìhód
->
avl_∑ª¡
 = fªehód->
avl_f‹w
 = fªehód->
avl_back
 = 
NULL
;

1163 (
‰ìhód
++);

1164 
	}
}

1167 
	$avl_¥öt
(
av…ªe_desc_t
 *
åì
, 
av ode_t
 *
roŸ
, 
dïth
)

1169 
i
;

1171 i‡(!
roŸ
)

1173 i‡(
roŸ
->
avl_f‹w
)

1174 
	`avl_¥öt
(
åì
, 
roŸ
->
avl_f‹w
, 
dïth
+5);

1175 
i
 = 0; i < 
dïth
; i++)

1176 
	`putch¨
(() ' ');

1177 
	`avl_¥öäode
(
åì
, 
roŸ
,1);

1178 i‡(
roŸ
->
avl_back
)

1179 
	`avl_¥öt
(
åì
, 
roŸ
->
avl_back
, 
dïth
+5);

1180 
	}
}

1182 
	$maö
()

1184 
i
, 
j
;

1185 
av ode_t
 *
≈
;

1186 
av…ªe_desc_t
 
åì
;

1187 
löebuf
[256], 
cmd
[256];

1189 
	`avl_öô_åì
(&
åì
, &
avl_debug_›s
);

1191 
i
 = 100; i > 0; i = i - 10)

1193 
≈
 = 
	`Æloc__debug_av ode
();

1194 
	`ASSERT
(
≈
);

1195 
≈
->
avl_°¨t
 = 
i
;

1196 
≈
->
avl_size
 = 10;

1197 
	`avl_ö£π
(&
åì
, 
≈
);

1199 
	`avl_¥öt
(&
åì
,Åªe.
avl_roŸ
, 0);

1201 
≈
 = 
åì
.
avl_fú°öo
;Ç∞!
NULL
;Ç∞≈->
avl_√xtöo
)

1202 
	`avl_¥öäode
(&
åì
, 
≈
, 0);

1203 
	`¥ötf
("\n");

1206 
	`¥ötf
(
	`_
("Command [fpdir] : "));

1207 
	`fgës
(
löebuf
, 256, 
°dö
);

1208 i‡(
	`„of
(
°dö
)) ;

1209 
cmd
[0] = 
NULL
;

1210 i‡(
	`ssˇnf
(
löebuf
, "%[Âdú]%d", 
cmd
, &
i
) != 2)

1212 
cmd
[0]) {

1215 
	`¥ötf
(
	`_
("end ofÑange ? "));

1216 
	`fgës
(
löebuf
, 256, 
°dö
);

1217 
j
 = 
	`©oi
(
löebuf
);

1219 i‡(
i
 =
j
) j = i+1;

1220 
≈
 = 
	`avl_födöønge
(&
åì
,
i
,
j
);

1221 i‡(
≈
) {

1222 
	`avl_¥öäode
(&
åì
, 
≈
, 1);

1223 i‡(
cmd
[0] == 'd')

1224 
	`avl_dñëe
(&
åì
, 
≈
);

1226 
	`¥ötf
(
	`_
("C™nŸ föd %d\n"), 
i
);

1229 
	`avl_¥öt
(&
åì
,Åªe.
avl_roŸ
, 0);

1230 
≈
 = 
åì
.
avl_fú°öo
;

1231 
≈
 !
NULL
;Ç∞≈->
avl_√xtöo
)

1232 
	`avl_¥öäode
(&
åì
, 
≈
, 0);

1233 
	`¥ötf
("\n");

1236 
≈
 = 
	`Æloc_av ode
();

1237 
	`ASSERT
(
≈
);

1238 
≈
->
avl_°¨t
 = 
i
;

1239 
	`¥ötf
(
	`_
("size ofÑange ? "));

1240 
	`fgës
(
löebuf
, 256, 
°dö
);

1241 
j
 = 
	`©oi
(
löebuf
);

1243 
≈
->
avl_size
 = 
j
;

1244 
	`avl_ö£π
(&
åì
, 
≈
);

1247 
av ode_t
 *
b
, *
e
, *
t
;

1248 
checkÀn
;

1250 
	`¥ötf
(
	`_
("End ofÑange ? "));

1251 
	`fgës
(
löebuf
, 256, 
°dö
);

1252 
j
 = 
	`©oi
(
löebuf
);

1254 
	`¥ötf
(
	`_
("checklen 0/1 ? "));

1255 
	`fgës
(
löebuf
, 256, 
°dö
);

1256 
checkÀn
 = 
	`©oi
(
löebuf
);

1259 
b
 = 
	`avl_föd™yønge
(&
åì
, 
i
, 
j
, 
checkÀn
);

1260 i‡(
b
) {

1261 
	`¥ötf
(
	`_
("Found something\n"));

1262 
t
 = 
b
;

1263 
t
) {

1264 i‡(
t
 !
b
 &&

1265 
	`AVL_START
(&
åì
, 
t
Ë>
j
)

1267 
	`avl_¥öäode
(&
åì
, 
t
, 0);

1268 
t
 =Å->
avl_√xtöo
;

1270 
	`¥ötf
("\n");

1275 
	}
}

1283 
av ode_t
 *

1284 
	$avl_födadja˚¡
(

1285 
av…ªe_desc_t
 *
åì
,

1286 
uöçå_t
 
vÆue
,

1287 
dú
)

1289 
av ode_t
 *
≈
 = 
åì
->
avl_roŸ
;

1291 
≈
) {

1292 i‡(
vÆue
 < 
	`AVL_START
(
åì
, 
≈
)) {

1293 i‡(
≈
->
avl_back
) {

1294 
≈
 =Çp->
avl_back
;

1300 i‡(
dú
 =
AVL_SUCCEED
) {

1303 (
≈
);

1305 i‡(
dú
 =
AVL_PRECEED
) {

1309 
≈
 =Çp->
avl_∑ª¡
;

1310 
≈
) {

1311 i‡(
	`AVL_END
(
åì
, 
≈
Ë<
vÆue
)

1313 
≈
 =Çp->
avl_∑ª¡
;

1315 (
≈
);

1317 
	`ASSERT
(
dú
 =
AVL_SUCCEED
 || dú =
AVL_PRECEED
);

1320 i‡(
vÆue
 >
	`AVL_END
(
åì
, 
≈
)) {

1321 i‡(
≈
->
avl_f‹w
) {

1322 
≈
 =Çp->
avl_f‹w
;

1328 i‡(
dú
 =
AVL_SUCCEED
) {

1332 (
≈
->
avl_√xtöo
);

1334 i‡(
dú
 =
AVL_PRECEED
) {

1336 (
≈
);

1338 
	`ASSERT
(
dú
 =
AVL_SUCCEED
 || dú =
AVL_PRECEED
);

1341 (
≈
);

1343  
NULL
;

1344 
	}
}

1358 
	$avl_födønges
(

1359 
av…ªe_desc_t
 *
åì
,

1360 
uöçå_t
 
°¨t
,

1361 
uöçå_t
 
íd
,

1362 
av ode_t
 **
°¨ç
,

1363 
av ode_t
 **
ídp
)

1365 
av ode_t
 *
≈
;

1367 
≈
 = 
	`avl_födadja˚¡
(
åì
, 
°¨t
, 
AVL_SUCCEED
);

1368 i‡(
≈
 =
NULL


1369 || (
≈
 && (
íd
 <
	`AVL_START
(
åì
,Çp))))

1373 *
°¨ç
 = 
NULL
;

1374 *
ídp
 = 
NULL
;

1378 *
°¨ç
 = 
≈
;

1381 i‡(
íd
 <
	`AVL_END
(
åì
, 
≈
) ||

1382 
≈
->
avl_√xtöo
 =
NULL
 ||

1383 (
≈
->
avl_√xtöo
 &&

1384 (
íd
 <
	`AVL_START
(
åì
, 
≈
->
avl_√xtöo
)))) {

1385 *
ídp
 = 
≈
;

1395 *
ídp
 = 
	`avl_födadja˚¡
(
åì
, (
íd
-1), 
AVL_PRECEED
);

1396 
	`ASSERT
(*
ídp
);

1397 
	}
}

	@repair/avl.h

18 #i‚de‡
__SYS_AVL_H__


19 
	#__SYS_AVL_H__


	)

22 
	sav ode
 {

23 
av ode
 *
	mavl_f‹w
;

24 
av ode
 *
	mavl_back
;

25 
av ode
 *
	mavl_∑ª¡
;

26 
av ode
 *
	mavl_√xtöo
;

27 
	mavl_bÆ™˚
;

28 } 
	tav ode_t
;

33 
	savl›s
 {

34 
uöçå_t
 (*
avl_°¨t
)(
	mav ode_t
 *);

35 
uöçå_t
 (*
avl_íd
)(
	mav ode_t
 *);

36 } 
	tavl›s_t
;

38 
	#AVL_START
(
åì
, 
n
Ë(*—ªe)->
avl_›s
->
avl_°¨t
)“)

	)

39 
	#AVL_END
(
åì
, 
n
Ë(*—ªe)->
avl_›s
->
avl_íd
)“)

	)

46 
	sav…ªe_desc
 {

47 
av ode_t
 *
	mavl_roŸ
;

48 
av ode_t
 *
	mavl_fú°öo
;

49 
avl›s_t
 *
	mavl_›s
;

50 
	mavl_Êags
;

51 } 
	tav…ªe_desc_t
;

55 
	#AVL_BACK
 1

	)

56 
	#AVL_BALANCE
 0

	)

57 
	#AVL_FORW
 2

	)

61 
	#AVLF_DUPLICITY
 0x0001

	)

66 
av ode_t


67 *
avl_ö£π
(

68 
av…ªe_desc_t
 *
åì
,

69 
av ode_t
 *
√wnode
);

72 
avl_dñëe
(

73 
av…ªe_desc_t
 *
åì
,

74 
av ode_t
 *
≈
);

77 
avl_ö£π_immedüã
(

78 
av…ªe_desc_t
 *
åì
,

79 
av ode_t
 *
a·îp
,

80 
av ode_t
 *
√wnode
);

83 
avl_öô_åì
(

84 
av…ªe_desc_t
 *
åì
,

85 
avl›s_t
 *
›s
);

87 
ölöe
 
av ode_t
 *

88 
	$avl_födønge
(

89 
av…ªe_desc_t
 *
åì
,

90 
uöçå_t
 
vÆue
)

92 
av ode_t
 *
≈
 = 
åì
->
avl_roŸ
;

94 
≈
) {

95 i‡(
vÆue
 < 
	`AVL_START
(
åì
, 
≈
)) {

96 
≈
 =Çp->
avl_back
;

99 i‡(
vÆue
 >
	`AVL_END
(
åì
, 
≈
)) {

100 
≈
 =Çp->
avl_f‹w
;

103 
	`ASSERT
(
	`AVL_START
(
åì
, 
≈
Ë<
vÆue
 &&

104 
vÆue
 < 
	`AVL_END
(
åì
, 
≈
));

105  
≈
;

107  
NULL
;

108 
	}
}

110 
av ode_t
 *

111 
avl_föd
(

112 
av…ªe_desc_t
 *
åì
,

113 
uöçå_t
 
vÆue
);

115 
av ode_t
 *

116 
avl_föd™yønge
(

117 
av…ªe_desc_t
 *
åì
,

118 
uöçå_t
 
°¨t
,

119 
uöçå_t
 
íd
,

120 
checkÀn
);

123 
av ode_t
 *

124 
avl_födadja˚¡
(

125 
av…ªe_desc_t
 *
åì
,

126 
uöçå_t
 
vÆue
,

127 
dú
);

130 
avl_födønges
(

131 
av…ªe_desc_t
 *
åì
,

132 
uöçå_t
 
°¨t
,

133 
uöçå_t
 
íd
,

134 
av ode_t
 **
°¨ç
,

135 
av ode_t
 **
ídp
);

137 
av ode_t
 *

138 
avl_fú°öo
(

139 
av ode_t
 *
roŸ
);

141 
av ode_t
 *

142 
avl_œ°öo
(

143 
av ode_t
 *
roŸ
);

146 
	#AVL_PRECEED
 0x1

	)

147 
	#AVL_SUCCEED
 0x2

	)

149 
	#AVL_INCLUDE_ZEROLEN
 0x0000

	)

150 
	#AVL_EXCLUDE_ZEROLEN
 0x0001

	)

	@repair/avl64.c

19 
	~<°dio.h
>

20 
	~"libxfs.h
"

21 
	~"avl64.h
"

23 
	#CERT
 
ASSERT


	)

25 #ifde‡
AVL_DEBUG


28 
	$avl64_checknode
(

29 
avl64åì_desc_t
 *
åì
,

30 
avl64node_t
 *
≈
)

32 
avl64node_t
 *
back
 = 
≈
->
avl_back
;

33 
avl64node_t
 *
f‹w
 = 
≈
->
avl_f‹w
;

34 
avl64node_t
 *
√xtöo
 = 
≈
->
avl_√xtöo
;

35 
bÆ
 = 
≈
->
avl_bÆ™˚
;

37 
	`ASSERT
(
bÆ
 !
AVL_BALANCE
 || (!
back
 && !
f‹w
) || (back && forw));

38 
	`ASSERT
(
bÆ
 !
AVL_FORW
 || 
f‹w
);

39 
	`ASSERT
(
bÆ
 !
AVL_BACK
 || 
back
);

41 i‡(
f‹w
) {

42 
	`ASSERT
(
	`AVL_START
(
åì
, 
≈
Ë< AVL_START—ªe, 
f‹w
));

43 
	`ASSERT
(
≈
->
avl_f‹w
->
avl_∑ª¡
 ==Çp);

44 
	`ASSERT
(
back
 || 
bÆ
 =
AVL_FORW
);

46 
	`ASSERT
(
bÆ
 !
AVL_FORW
);

47 
	`ASSERT
(
bÆ
 =
AVL_BALANCE
 || 
back
);

48 
	`ASSERT
(
bÆ
 =
AVL_BACK
 || !
back
);

51 i‡(
back
) {

52 
	`ASSERT
(
	`AVL_START
(
åì
, 
≈
Ë> AVL_START—ªe, 
back
));

53 
	`ASSERT
(
≈
->
avl_back
->
avl_∑ª¡
 ==Çp);

54 
	`ASSERT
(
f‹w
 || 
bÆ
 =
AVL_BACK
);

56 
	`ASSERT
(
bÆ
 !
AVL_BACK
);

57 
	`ASSERT
(
bÆ
 =
AVL_BALANCE
 || 
f‹w
);

58 
	`ASSERT
(
bÆ
 =
AVL_FORW
 || !
f‹w
);

61 i‡(
√xtöo
 =
NULL
)

62 
	`ASSERT
(
f‹w
 =
NULL
);

64 
	`ASSERT
(
	`AVL_END
(
åì
, 
≈
Ë<
	`AVL_START
—ªe, 
√xtöo
));

65 
	}
}

68 
	$avl64_checkåì
(

69 
avl64åì_desc_t
 *
åì
,

70 
avl64node_t
 *
roŸ
)

72 
avl64node_t
 *
∆a°
, *
¬ext
, *
≈
;

73 
__uöt64_t
 
off£t
 = 0;

74 
__uöt64_t
 
íd
;

76 
∆a°
 = 
¬ext
 = 
roŸ
;

78 
	`ASSERT
(!
¬ext
 ||Ç√xt->
avl_∑ª¡
 =
NULL
);

80 
¬ext
) {

82 
	`avl64_checknode
(
åì
, 
¬ext
);

83 
íd
 = 
	`AVL_END
(
åì
, 
¬ext
);

85 i‡(
íd
 <
off£t
) {

86 i‡((
≈
 = 
¬ext
->
avl_f‹w
Ë&&Ç∞!
∆a°
) {

87 
∆a°
 = 
¬ext
;

88 
¬ext
 = 
≈
;

90 
∆a°
 = 
¬ext
;

91 
¬ext
 =Ç√xt->
avl_∑ª¡
;

96 
∆a°
 = 
¬ext
;

97 i‡(
≈
 = 
¬ext
->
avl_back
) {

98 i‡(
	`AVL_END
(
åì
, 
≈
Ë> 
off£t
) {

99 
¬ext
 = 
≈
;

104 
≈
 = 
¬ext
;

105 
¬ext
 =Ç√xt->
avl_f‹w
;

106 i‡(!
¬ext
)

107 
¬ext
 = 
≈
->
avl_∑ª¡
;

109 
off£t
 = 
íd
;

111 
	}
}

113 
	#avl64_checkåì
(
t
,
x
)

	)

125 
	$ªåót
(

126 
avl64åì_desc_t
 *
åì
,

127 
avl64node_t
 *
≈
,

128 
dúe˘i⁄
)

130 
avl64node_t
 **
roŸp
 = &
åì
->
avl_roŸ
;

131 
avl64node_t
 *
∑ª¡
;

132 
avl64node_t
 *
chûd
;

133 
avl64node_t
 *
tmp
;

134 
bÆ
;

137 
	`ASSERT
(
dúe˘i⁄
 =
AVL_BACK
 || dúe˘i⁄ =
AVL_FORW
);

139 i‡(
≈
->
avl_bÆ™˚
 =
AVL_BALANCE
) {

140 
≈
->
avl_bÆ™˚
 = 
dúe˘i⁄
;

144 
∑ª¡
 = 
≈
->
avl_∑ª¡
;

151 i‡(
dúe˘i⁄
 !
≈
->
avl_bÆ™˚
) {

152 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

153 i‡(
∑ª¡
) {

154 i‡(
∑ª¡
->
avl_f‹w
 =
≈
)

155 
dúe˘i⁄
 = 
AVL_BACK
;

157 
dúe˘i⁄
 = 
AVL_FORW
;

159 
≈
 = 
∑ª¡
;

169 i‡(
≈
->
avl_bÆ™˚
 =
AVL_BACK
) {

171 
	`ASSERT
(
dúe˘i⁄
 =
AVL_BACK
);

172 
chûd
 = 
≈
->
avl_back
;

173 
bÆ
 = 
chûd
->
avl_bÆ™˚
;

175 i‡(
bÆ
 !
AVL_FORW
) {

189 
≈
->
avl_back
 = 
chûd
->
avl_f‹w
;

190 i‡(
chûd
->
avl_f‹w
)

191 
chûd
->
avl_f‹w
->
avl_∑ª¡
 = 
≈
;

192 
chûd
->
avl_f‹w
 = 
≈
;

194 i‡(
∑ª¡
) {

195 i‡(
∑ª¡
->
avl_f‹w
 =
≈
) {

196 
∑ª¡
->
avl_f‹w
 = 
chûd
;

197 
dúe˘i⁄
 = 
AVL_BACK
;

199 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

200 
∑ª¡
->
avl_back
 = 
chûd
;

201 
dúe˘i⁄
 = 
AVL_FORW
;

204 
	`ASSERT
(*
roŸp
 =
≈
);

205 *
roŸp
 = 
chûd
;

207 
≈
->
avl_∑ª¡
 = 
chûd
;

208 
chûd
->
avl_∑ª¡
 = 
∑ª¡
;

210 i‡(
bÆ
 =
AVL_BALANCE
) {

211 
≈
->
avl_bÆ™˚
 = 
AVL_BACK
;

212 
chûd
->
avl_bÆ™˚
 = 
AVL_FORW
;

215 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

216 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

217 
≈
 = 
∑ª¡
;

218 
	`avl64_checkåì
(
åì
, *
roŸp
);

239 
tmp
 = 
chûd
->
avl_f‹w
;

240 
bÆ
 = 
tmp
->
avl_bÆ™˚
;

242 
chûd
->
avl_f‹w
 = 
tmp
->
avl_back
;

243 i‡(
tmp
->
avl_back
)

244 
tmp
->
avl_back
->
avl_∑ª¡
 = 
chûd
;

246 
tmp
->
avl_back
 = 
chûd
;

247 
chûd
->
avl_∑ª¡
 = 
tmp
;

249 
≈
->
avl_back
 = 
tmp
->
avl_f‹w
;

250 i‡(
tmp
->
avl_f‹w
)

251 
tmp
->
avl_f‹w
->
avl_∑ª¡
 = 
≈
;

252 
tmp
->
avl_f‹w
 = 
≈
;

254 i‡(
bÆ
 =
AVL_FORW
)

255 
chûd
->
avl_bÆ™˚
 = 
AVL_BACK
;

257 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

259 i‡(
bÆ
 =
AVL_BACK
)

260 
≈
->
avl_bÆ™˚
 = 
AVL_FORW
;

262 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

264 
√xt
;

267 
	`ASSERT
(
≈
->
avl_bÆ™˚
 =
AVL_FORW
 && 
dúe˘i⁄
 == AVL_FORW);

269 
chûd
 = 
≈
->
avl_f‹w
;

270 
bÆ
 = 
chûd
->
avl_bÆ™˚
;

272 i‡(
bÆ
 !
AVL_BACK
) {

286 
≈
->
avl_f‹w
 = 
chûd
->
avl_back
;

287 i‡(
chûd
->
avl_back
)

288 
chûd
->
avl_back
->
avl_∑ª¡
 = 
≈
;

289 
chûd
->
avl_back
 = 
≈
;

291 i‡(
∑ª¡
) {

292 i‡(
∑ª¡
->
avl_f‹w
 =
≈
) {

293 
∑ª¡
->
avl_f‹w
 = 
chûd
;

294 
dúe˘i⁄
 = 
AVL_BACK
;

296 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

297 
∑ª¡
->
avl_back
 = 
chûd
;

298 
dúe˘i⁄
 = 
AVL_FORW
;

301 
	`ASSERT
(*
roŸp
 =
≈
);

302 *
roŸp
 = 
chûd
;

304 
≈
->
avl_∑ª¡
 = 
chûd
;

305 
chûd
->
avl_∑ª¡
 = 
∑ª¡
;

307 i‡(
bÆ
 =
AVL_BALANCE
) {

308 
≈
->
avl_bÆ™˚
 = 
AVL_FORW
;

309 
chûd
->
avl_bÆ™˚
 = 
AVL_BACK
;

312 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

313 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

314 
≈
 = 
∑ª¡
;

315 
	`avl64_checkåì
(
åì
, *
roŸp
);

325 
tmp
 = 
chûd
->
avl_back
;

326 
bÆ
 = 
tmp
->
avl_bÆ™˚
;

328 
chûd
->
avl_back
 = 
tmp
->
avl_f‹w
;

329 i‡(
tmp
->
avl_f‹w
)

330 
tmp
->
avl_f‹w
->
avl_∑ª¡
 = 
chûd
;

332 
tmp
->
avl_f‹w
 = 
chûd
;

333 
chûd
->
avl_∑ª¡
 = 
tmp
;

335 
≈
->
avl_f‹w
 = 
tmp
->
avl_back
;

336 i‡(
tmp
->
avl_back
)

337 
tmp
->
avl_back
->
avl_∑ª¡
 = 
≈
;

338 
tmp
->
avl_back
 = 
≈
;

340 i‡(
bÆ
 =
AVL_BACK
)

341 
chûd
->
avl_bÆ™˚
 = 
AVL_FORW
;

343 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

345 i‡(
bÆ
 =
AVL_FORW
)

346 
≈
->
avl_bÆ™˚
 = 
AVL_BACK
;

348 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

349 
√xt
:

350 
≈
->
avl_∑ª¡
 = 
tmp
;

351 
tmp
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

352 
tmp
->
avl_∑ª¡
 = 
∑ª¡
;

354 i‡(
∑ª¡
) {

355 i‡(
∑ª¡
->
avl_f‹w
 =
≈
) {

356 
∑ª¡
->
avl_f‹w
 = 
tmp
;

357 
dúe˘i⁄
 = 
AVL_BACK
;

359 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

360 
∑ª¡
->
avl_back
 = 
tmp
;

361 
dúe˘i⁄
 = 
AVL_FORW
;

364 
	`ASSERT
(*
roŸp
 =
≈
);

365 *
roŸp
 = 
tmp
;

369 
≈
 = 
∑ª¡
;

370 
	`avl64_checkåì
(
åì
, *
roŸp
);

371 } 
≈
);

372 
	}
}

380 
	$avl64_dñëe
(

381 
avl64åì_desc_t
 *
åì
,

382 
avl64node_t
 *
≈
)

384 
avl64node_t
 *
f‹w
 = 
≈
->
avl_f‹w
;

385 
avl64node_t
 *
back
 = 
≈
->
avl_back
;

386 
avl64node_t
 *
∑ª¡
 = 
≈
->
avl_∑ª¡
;

387 
avl64node_t
 *
¬ext
;

390 i‡(
≈
->
avl_back
) {

395 
¬ext
 = 
≈
->
avl_back
;

396 
¬ext
) {

397 i‡(!
¬ext
->
avl_f‹w
)

399 
¬ext
 =Ç√xt->
avl_f‹w
;

402 i‡(
≈
->
avl_∑ª¡
) {

407 
¬ext
 = 
≈
->
avl_∑ª¡
;

408 
¬ext
) {

409 i‡(
	`AVL_END
(
åì
, 
¬ext
Ë<AVL_END—ªe, 
≈
))

411 
¬ext
 =Ç√xt->
avl_∑ª¡
;

414 
¬ext
 = 
NULL
;

416 i‡(
¬ext
) {

417 
	`ASSERT
(
¬ext
->
avl_√xtöo
 =
≈
);

418 
¬ext
->
avl_√xtöo
 = 
≈
->avl_nextino;

422 
	`ASSERT
(
åì
->
avl_fú°öo
 !
≈
);

429 
	`ASSERT
(
åì
->
avl_fú°öo
 =
≈
);

430 
åì
->
avl_fú°öo
 = 
≈
->
avl_√xtöo
;

437 i‡(
f‹w
 =
NULL
) {

438 
f‹w
 = 
back
;

439 
©èch
;

442 i‡(
back
 =
NULL
) {

443 
©èch
:

444 i‡(
f‹w
)

445 
f‹w
->
avl_∑ª¡
 = 
∑ª¡
;

446 i‡(
∑ª¡
) {

447 i‡(
∑ª¡
->
avl_f‹w
 =
≈
) {

448 
∑ª¡
->
avl_f‹w
 = 
f‹w
;

449 
	`ªåót
(
åì
, 
∑ª¡
, 
AVL_BACK
);

451 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

452 
∑ª¡
->
avl_back
 = 
f‹w
;

453 
	`ªåót
(
åì
, 
∑ª¡
, 
AVL_FORW
);

456 
	`ASSERT
(
åì
->
avl_roŸ
 =
≈
);

457 
åì
->
avl_roŸ
 = 
f‹w
;

459 
	`avl64_checkåì
(
åì
,Åªe->
avl_roŸ
);

477 i‡((
f‹w
 = 
back
->
avl_f‹w
Ë=
NULL
) {

482 
back
->
avl_bÆ™˚
 = 
≈
->avl_balance;

483 
back
->
avl_f‹w
 = 
f‹w
 = 
≈
->avl_forw;

484 
f‹w
->
avl_∑ª¡
 = 
back
;

485 
back
->
avl_∑ª¡
 = 
∑ª¡
;

487 i‡(
∑ª¡
) {

488 i‡(
∑ª¡
->
avl_f‹w
 =
≈
)

489 
∑ª¡
->
avl_f‹w
 = 
back
;

491 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

492 
∑ª¡
->
avl_back
 = 
back
;

495 
	`ASSERT
(
åì
->
avl_roŸ
 =
≈
);

496 
åì
->
avl_roŸ
 = 
back
;

503 
	`ªåót
(
åì
, 
back
, 
AVL_FORW
);

504 
	`avl64_checkåì
(
åì
,Åªe->
avl_roŸ
);

524 (
back
 = 
f‹w
->
avl_f‹w
))

525 
f‹w
 = 
back
;

530 
f‹w
->
avl_bÆ™˚
 = 
≈
->avl_balance;

535 
f‹w
->
avl_f‹w
 = 
≈
->avl_forw;

536 
≈
->
avl_f‹w
->
avl_∑ª¡
 = 
f‹w
;

541 
back
 = 
f‹w
->
avl_∑ª¡
;

542 
back
->
avl_f‹w
 = 
f‹w
->
avl_back
;

543 i‡(
f‹w
->
avl_back
)

544 
f‹w
->
avl_back
->
avl_∑ª¡
 = 
back
;

549 
f‹w
->
avl_back
 = 
≈
->avl_back;

550 
≈
->
avl_back
->
avl_∑ª¡
 = 
f‹w
;

555 
f‹w
->
avl_∑ª¡
 = 
∑ª¡
;

557 i‡(
∑ª¡
) {

558 i‡(
∑ª¡
->
avl_f‹w
 =
≈
)

559 
∑ª¡
->
avl_f‹w
 = 
f‹w
;

561 
∑ª¡
->
avl_back
 = 
f‹w
;

563 
	`ASSERT
(
åì
->
avl_roŸ
 =
≈
);

564 
åì
->
avl_roŸ
 = 
f‹w
;

571 
	`ªåót
(
åì
, 
back
, 
AVL_BACK
);

572 
	`avl64_checkåì
(
åì
,Åªe->
avl_roŸ
);

573 
	}
}

583 
avl64node_t
 *

584 
	$avl64_föd™yønge
(

585 
avl64åì_desc_t
 *
åì
,

586 
__uöt64_t
 
°¨t
,

587 
__uöt64_t
 
íd
,

588 
checkÀn
)

590 
avl64node_t
 *
≈
 = 
åì
->
avl_roŸ
;

593 
≈
) {

594 i‡(
°¨t
 < 
	`AVL_START
(
åì
, 
≈
)) {

595 i‡(
≈
->
avl_back
) {

596 
≈
 =Çp->
avl_back
;

606 i‡(
°¨t
 >
	`AVL_END
(
åì
, 
≈
)) {

607 i‡(
≈
->
avl_f‹w
) {

608 
≈
 =Çp->
avl_f‹w
;

617 
≈
 =Çp->
avl_√xtöo
;

623 i‡(
≈
) {

624 i‡(
checkÀn
 =
AVL_INCLUDE_ZEROLEN
) {

625 i‡(
íd
 <
	`AVL_START
(
åì
, 
≈
)) {

629 (
NULL
);

632 (
≈
);

637 
≈
 && (
	`AVL_END
(
åì
,ÇpË- 
	`AVL_START
(tree,Çp) == 0)

638 && (
	`AVL_START
(
åì
, 
≈
Ë< 
íd
))

639 
≈
 =Çp->
avl_√xtöo
;

641 i‡((
≈
 =
NULL
Ë|| (
	`AVL_START
(
åì
,ÇpË>
íd
))

642  
NULL
;

643 (
≈
);

648  
NULL
;

649 
	}
}

655 
avl64node_t
 *

656 
	$avl64_födønge
(

657 
avl64åì_desc_t
 *
åì
,

658 
__uöt64_t
 
vÆue
)

660 
avl64node_t
 *
≈
 = 
åì
->
avl_roŸ
;

662 
≈
) {

663 i‡(
vÆue
 < 
	`AVL_START
(
åì
, 
≈
)) {

664 
≈
 =Çp->
avl_back
;

667 i‡(
vÆue
 >
	`AVL_END
(
åì
, 
≈
)) {

668 
≈
 =Çp->
avl_f‹w
;

671 
	`ASSERT
(
	`AVL_START
(
åì
, 
≈
Ë<
vÆue
 &&

672 
vÆue
 < 
	`AVL_END
(
åì
, 
≈
));

673  
≈
;

675  
NULL
;

676 
	}
}

682 
avl64node_t
 *

683 
	$avl64_föd
(

684 
avl64åì_desc_t
 *
åì
,

685 
__uöt64_t
 
vÆue
)

687 
avl64node_t
 *
≈
 = 
åì
->
avl_roŸ
;

688 
__uöt64_t
 
nvÆue
;

690 
≈
) {

691 
nvÆue
 = 
	`AVL_START
(
åì
, 
≈
);

692 i‡(
vÆue
 < 
nvÆue
) {

693 
≈
 =Çp->
avl_back
;

696 i‡(
vÆue
 =
nvÆue
) {

697  
≈
;

699 
≈
 =Çp->
avl_f‹w
;

701  
NULL
;

702 
	}
}

710 
	$avl64_bÆ™˚
(

711 
avl64node_t
 **
roŸp
,

712 
avl64node_t
 *
≈
,

713 
growth
)

721 
avl64node_t
 *
∑ª¡
 = 
≈
->
avl_∑ª¡
;

722 
avl64node_t
 *
chûd
;

724 
	`CERT
(
growth
 =
AVL_BACK
 || growth =
AVL_FORW
);

732 i‡(
≈
->
avl_bÆ™˚
 =
AVL_BALANCE
) {

733 
≈
->
avl_bÆ™˚
 = 
growth
;

734 i‡(
∑ª¡
) {

735 i‡(
∑ª¡
->
avl_f‹w
 =
≈
)

736 
growth
 = 
AVL_FORW
;

738 
	`ASSERT
(
∑ª¡
->
avl_back
 =
≈
);

739 
growth
 = 
AVL_BACK
;

742 
≈
 = 
∑ª¡
;

748 i‡(
growth
 !
≈
->
avl_bÆ™˚
) {

753 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

757 i‡(
growth
 =
AVL_BACK
) {

759 
chûd
 = 
≈
->
avl_back
;

760 
	`CERT
(
≈
->
avl_bÆ™˚
 =
AVL_BACK
 && 
chûd
);

762 i‡(
chûd
->
avl_bÆ™˚
 =
AVL_BACK
) {

780 
≈
->
avl_∑ª¡
 = 
chûd
;

781 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

782 
≈
->
avl_back
 = 
chûd
->
avl_f‹w
;

783 i‡(
chûd
->
avl_f‹w
)

784 
chûd
->
avl_f‹w
->
avl_∑ª¡
 = 
≈
;

785 
chûd
->
avl_f‹w
 = 
≈
;

802 
avl64node_t
 *
tmp
 = 
chûd
->
avl_f‹w
;

804 
	`CERT
(
chûd
->
avl_bÆ™˚
 =
AVL_FORW
 && 
tmp
);

806 
chûd
->
avl_f‹w
 = 
tmp
->
avl_back
;

807 i‡(
tmp
->
avl_back
)

808 
tmp
->
avl_back
->
avl_∑ª¡
 = 
chûd
;

810 
tmp
->
avl_back
 = 
chûd
;

811 
chûd
->
avl_∑ª¡
 = 
tmp
;

813 
≈
->
avl_back
 = 
tmp
->
avl_f‹w
;

814 i‡(
tmp
->
avl_f‹w
)

815 
tmp
->
avl_f‹w
->
avl_∑ª¡
 = 
≈
;

817 
tmp
->
avl_f‹w
 = 
≈
;

818 
≈
->
avl_∑ª¡
 = 
tmp
;

820 i‡(
tmp
->
avl_bÆ™˚
 =
AVL_BACK
)

821 
≈
->
avl_bÆ™˚
 = 
AVL_FORW
;

823 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

825 i‡(
tmp
->
avl_bÆ™˚
 =
AVL_FORW
)

826 
chûd
->
avl_bÆ™˚
 = 
AVL_BACK
;

828 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

836 
chûd
 = 
tmp
;

845 
chûd
 = 
≈
->
avl_f‹w
;

846 
	`CERT
(
≈
->
avl_bÆ™˚
 =
AVL_FORW
 && 
chûd
);

848 i‡(
chûd
->
avl_bÆ™˚
 =
AVL_FORW
) {

849 
≈
->
avl_∑ª¡
 = 
chûd
;

850 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

851 
≈
->
avl_f‹w
 = 
chûd
->
avl_back
;

852 i‡(
chûd
->
avl_back
)

853 
chûd
->
avl_back
->
avl_∑ª¡
 = 
≈
;

854 
chûd
->
avl_back
 = 
≈
;

859 
avl64node_t
 *
tmp
 = 
chûd
->
avl_back
;

861 
	`ASSERT
(
chûd
->
avl_bÆ™˚
 =
AVL_BACK
 && 
tmp
);

863 
chûd
->
avl_back
 = 
tmp
->
avl_f‹w
;

864 i‡(
tmp
->
avl_f‹w
)

865 
tmp
->
avl_f‹w
->
avl_∑ª¡
 = 
chûd
;

867 
tmp
->
avl_f‹w
 = 
chûd
;

868 
chûd
->
avl_∑ª¡
 = 
tmp
;

870 
≈
->
avl_f‹w
 = 
tmp
->
avl_back
;

871 i‡(
tmp
->
avl_back
)

872 
tmp
->
avl_back
->
avl_∑ª¡
 = 
≈
;

874 
tmp
->
avl_back
 = 
≈
;

875 
≈
->
avl_∑ª¡
 = 
tmp
;

877 i‡(
tmp
->
avl_bÆ™˚
 =
AVL_FORW
)

878 
≈
->
avl_bÆ™˚
 = 
AVL_BACK
;

880 
≈
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

882 i‡(
tmp
->
avl_bÆ™˚
 =
AVL_BACK
)

883 
chûd
->
avl_bÆ™˚
 = 
AVL_FORW
;

885 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

887 
chûd
 = 
tmp
;

891 
chûd
->
avl_∑ª¡
 = 
∑ª¡
;

892 
chûd
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

894 i‡(
∑ª¡
) {

895 i‡(
∑ª¡
->
avl_back
 =
≈
)

896 
∑ª¡
->
avl_back
 = 
chûd
;

898 
∑ª¡
->
avl_f‹w
 = 
chûd
;

900 
	`ASSERT
(*
roŸp
 =
≈
);

901 *
roŸp
 = 
chûd
;

906 
	}
}

909 
avl64node_t
 *

910 
	$avl64_ö£π_föd_growth
(

911 
avl64åì_desc_t
 *
åì
,

912 
__uöt64_t
 
°¨t
,

913 
__uöt64_t
 
íd
,

914 *
growthp
)

916 
avl64node_t
 *
roŸ
 = 
åì
->
avl_roŸ
;

917 
avl64node_t
 *
≈
;

919 
≈
 = 
roŸ
;

920 
	`ASSERT
(
≈
);

923 
	`CERT
(
≈
->
avl_∑ª¡
 || 
roŸ
 ==Çp);

924 
	`CERT
(!
≈
->
avl_∑ª¡
 || 
roŸ
 !=Çp);

925 
	`CERT
(!(
≈
->
avl_back
Ë||Çp->avl_back->
avl_∑ª¡
 ==Çp);

926 
	`CERT
(!(
≈
->
avl_f‹w
Ë||Çp->avl_f‹w->
avl_∑ª¡
 ==Çp);

927 
	`CERT
(
≈
->
avl_bÆ™˚
 !
AVL_FORW
 ||Çp->
avl_f‹w
);

928 
	`CERT
(
≈
->
avl_bÆ™˚
 !
AVL_BACK
 ||Çp->
avl_back
);

929 
	`CERT
(
≈
->
avl_bÆ™˚
 !
AVL_BALANCE
 ||

930 
≈
->
avl_back
 =
NULL
 ||Çp->
avl_f‹w
);

931 
	`CERT
(
≈
->
avl_bÆ™˚
 !
AVL_BALANCE
 ||

932 
≈
->
avl_f‹w
 =
NULL
 ||Çp->
avl_back
);

934 i‡(
	`AVL_START
(
åì
, 
≈
Ë>
íd
) {

935 i‡(
≈
->
avl_back
) {

936 
≈
 =Çp->
avl_back
;

939 *
growthp
 = 
AVL_BACK
;

943 i‡(
	`AVL_END
(
åì
, 
≈
Ë<
°¨t
) {

944 i‡(
≈
->
avl_f‹w
) {

945 
≈
 =Çp->
avl_f‹w
;

948 *
growthp
 = 
AVL_FORW
;

952 (
NULL
);

954 (
≈
);

955 
	}
}

959 
	$avl64_ö£π_grow
(

960 
avl64åì_desc_t
 *
åì
,

961 
avl64node_t
 *
∑ª¡
,

962 
avl64node_t
 *
√wnode
,

963 
growth
)

965 
avl64node_t
 *
¬ext
;

966 
__uöt64_t
 
°¨t
 = 
	`AVL_START
(
åì
, 
√wnode
);

968 i‡(
growth
 =
AVL_BACK
) {

970 
∑ª¡
->
avl_back
 = 
√wnode
;

978 
√wnode
->
avl_√xtöo
 = 
∑ª¡
;

979 
¬ext
 = 
∑ª¡
;

980 
¬ext
) {

981 i‡(
	`AVL_END
(
åì
, 
¬ext
Ë<
°¨t
)

983 
¬ext
 =Ç√xt->
avl_∑ª¡
;

985 i‡(
¬ext
) {

990 
	`ASSERT
(
¬ext
->
avl_√xtöo
 =
∑ª¡
);

991 
¬ext
->
avl_√xtöo
 = 
√wnode
;

995 
∑ª¡
->
avl_f‹w
 = 
√wnode
;

996 
√wnode
->
avl_√xtöo
 = 
∑ª¡
->avl_nextino;

997 
∑ª¡
->
avl_√xtöo
 = 
√wnode
;

999 
	}
}

1002 
avl64node_t
 *

1003 
	$avl64_ö£π
(

1004 
avl64åì_desc_t
 *
åì
,

1005 
avl64node_t
 *
√wnode
)

1007 
avl64node_t
 *
≈
;

1008 
__uöt64_t
 
°¨t
 = 
	`AVL_START
(
åì
, 
√wnode
);

1009 
__uöt64_t
 
íd
 = 
	`AVL_END
(
åì
, 
√wnode
);

1010 
growth
;

1012 
	`ASSERT
(
√wnode
);

1016 
√wnode
->
avl_√xtöo
 = 
NULL
;

1017 
√wnode
->
avl_∑ª¡
 = 
NULL
;

1018 
√wnode
->
avl_f‹w
 = 
NULL
;

1019 
√wnode
->
avl_back
 = 
NULL
;

1020 
√wnode
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

1022 i‡((
≈
 = 
åì
->
avl_roŸ
Ë=
NULL
) {

1023 
åì
->
avl_roŸ
 = 
√wnode
;

1024 
åì
->
avl_fú°öo
 = 
√wnode
;

1025  
√wnode
;

1028 i‡((
≈
 = 
	`avl64_ö£π_föd_growth
(
åì
, 
°¨t
, 
íd
, &
growth
))

1029 =
NULL
) {

1030 i‡(
°¨t
 !
íd
) {

1031 
	`Ârötf
(
°dîr
,

1032 
	`_
("avl_insert: Warning! duplicateÑange [%llu,%llu]\n"),

1033 ()
°¨t
,

1034 ()
íd
);

1036 (
NULL
);

1039 
	`avl64_ö£π_grow
(
åì
, 
≈
, 
√wnode
, 
growth
);

1040 i‡(
growth
 =
AVL_BACK
) {

1044 i‡(
åì
->
avl_fú°öo
 =
≈
)

1045 
åì
->
avl_fú°öo
 = 
√wnode
;

1047 #ifde‡
nŸ√eded


1049 i‡(
growth
 =
AVL_FORW
)

1056 
√wnode
->
avl_∑ª¡
 = 
≈
;

1057 
	`CERT
(
≈
->
avl_f‹w
 =
√wnode
 ||Çp->
avl_back
 ==Çewnode);

1059 
	`avl64_bÆ™˚
(&
åì
->
avl_roŸ
, 
≈
, 
growth
);

1061 
	`avl64_checkåì
(
åì
,Åªe->
avl_roŸ
);

1063  
√wnode
;

1064 
	}
}

1073 
	$avl64_ö£π_immedüã
(

1074 
avl64åì_desc_t
 *
åì
,

1075 
avl64node_t
 *
a·îp
,

1076 
avl64node_t
 *
√wnode
)

1081 
√wnode
->
avl_√xtöo
 = 
NULL
;

1082 
√wnode
->
avl_∑ª¡
 = 
NULL
;

1083 
√wnode
->
avl_f‹w
 = 
NULL
;

1084 
√wnode
->
avl_back
 = 
NULL
;

1085 
√wnode
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

1087 i‡(
a·îp
 =
NULL
) {

1088 
åì
->
avl_roŸ
 = 
√wnode
;

1089 
åì
->
avl_fú°öo
 = 
√wnode
;

1093 
	`ASSERT
(
a·îp
->
avl_f‹w
 =
NULL
);

1094 
	`avl64_ö£π_grow
(
åì
, 
a·îp
, 
√wnode
, 
AVL_FORW
);

1095 
	`CERT
(
a·îp
->
avl_f‹w
 =
√wnode
);

1096 
	`avl64_bÆ™˚
(&
åì
->
avl_roŸ
, 
a·îp
, 
AVL_FORW
);

1097 
	`avl64_checkåì
(
åì
,Åªe->
avl_roŸ
);

1098 
	}
}

1104 
avl64node_t
 *

1105 
	$avl64_fú°öo
(
avl64node_t
 *
roŸ
)

1107 
avl64node_t
 *
≈
;

1109 i‡((
≈
 = 
roŸ
Ë=
NULL
)

1110  
NULL
;

1112 
≈
->
avl_back
)

1113 
≈
 =Çp->
avl_back
;

1114  
≈
;

1115 
	}
}

1120 
avl64node_t
 *

1121 
	$avl64_œ°öo
(
avl64node_t
 *
roŸ
)

1123 
avl64node_t
 *
≈
;

1125 i‡((
≈
 = 
roŸ
Ë=
NULL
)

1126  
NULL
;

1128 
≈
->
avl_f‹w
)

1129 
≈
 =Çp->
avl_f‹w
;

1130  
≈
;

1131 
	}
}

1134 
	$avl64_öô_åì
(
avl64åì_desc_t
 *
åì
, 
avl64›s_t
 *
›s
)

1136 
åì
->
avl_roŸ
 = 
NULL
;

1137 
åì
->
avl_fú°öo
 = 
NULL
;

1138 
åì
->
avl_›s
 = 
›s
;

1139 
	}
}

1141 #ifde‡
AVL_DEBUG


1143 
	$avl64_¥öäode
(
avl64åì_desc_t
 *
åì
, 
avl64node_t
 *
≈
, 
∆
)

1145 
	`¥ötf
("[%d-%d]%c", 
	`AVL_START
(
åì
, 
≈
),

1146 (
	`AVL_END
(
åì
, 
≈
Ë- 1), 
∆
 ? '\n' : ' ');

1147 
	}
}

1149 #ifde‡
STAND_ALONE_DEBUG


1151 
	savl_debug_node
 {

1152 
avl64node_t
 
	mavl_node
;

1153 
xfs_off_t
 
	mavl_°¨t
;

1154 
	mavl_size
;

1157 
avl64›s_t
 
	gavl_debug_›s
 = {

1158 
avl_debug_°¨t
,

1159 
avl_debug_íd
,

1162 
__uöt64_t


1163 
	$avl64_debug_°¨t
(
avl64node_t
 *
node
)

1165  (
__uöt64_t
)(
avl_debug_node
 *)
node
->
avl_°¨t
;

1166 
	}
}

1168 
__uöt64_t


1169 
	$avl64_debug_íd
(
avl64node_t
 *
node
)

1171  (
__uöt64_t
)

1172 ((
avl_debug_node
 *)
node
->
avl_°¨t
 +

1173 (
avl_debug_node
 *)
node
->
avl_size
);

1174 
	}
}

1176 
avl_debug_node
 
	g‰ìnodes
[100];

1177 
avl_debug_node
 *
	g‰ìhód
 = &
‰ìnodes
[0];

1179 
avl64node_t
 *

1180 
	$Æloc_avl64_debug_node
()

1182 
‰ìhód
->
avl_bÆ™˚
 = 
AVL_BALANCE
;

1183 
‰ìhód
->
avl_∑ª¡
 = fªehód->
avl_f‹w
 = fªehód->
avl_back
 = 
NULL
;

1184 (
‰ìhód
++);

1185 
	}
}

1188 
	$avl64_¥öt
(
avl64åì_desc_t
 *
åì
, 
avl64node_t
 *
roŸ
, 
dïth
)

1190 
i
;

1192 i‡(!
roŸ
)

1194 i‡(
roŸ
->
avl_f‹w
)

1195 
	`avl64_¥öt
(
åì
, 
roŸ
->
avl_f‹w
, 
dïth
+5);

1196 
i
 = 0; i < 
dïth
; i++)

1197 
	`putch¨
(() ' ');

1198 
	`avl64_¥öäode
(
åì
, 
roŸ
,1);

1199 i‡(
roŸ
->
avl_back
)

1200 
	`avl64_¥öt
(
åì
, 
roŸ
->
avl_back
, 
dïth
+5);

1201 
	}
}

1203 
	$maö
()

1205 
i
, 
j
;

1206 
avl64node_t
 *
≈
;

1207 
avl64åì_desc_t
 
åì
;

1208 
löebuf
[256], 
cmd
[256];

1210 
	`avl64_öô_åì
(&
åì
, &
avl_debug_›s
);

1212 
i
 = 100; i > 0; i = i - 10)

1214 
≈
 = 
	`Æloc__debug_av ode
();

1215 
	`ASSERT
(
≈
);

1216 
≈
->
avl_°¨t
 = 
i
;

1217 
≈
->
avl_size
 = 10;

1218 
	`avl64_ö£π
(&
åì
, 
≈
);

1220 
	`avl64_¥öt
(&
åì
,Åªe.
avl_roŸ
, 0);

1222 
≈
 = 
åì
.
avl_fú°öo
;Ç∞!
NULL
;Ç∞≈->
avl_√xtöo
)

1223 
	`avl64_¥öäode
(&
åì
, 
≈
, 0);

1224 
	`¥ötf
("\n");

1227 
	`¥ötf
(
	`_
("Command [fpdir] : "));

1228 
	`fgës
(
löebuf
, 256, 
°dö
);

1229 i‡(
	`„of
(
°dö
)) ;

1230 
cmd
[0] = 
NULL
;

1231 i‡(
	`ssˇnf
(
löebuf
, "%[Âdú]%d", 
cmd
, &
i
) != 2)

1233 
cmd
[0]) {

1236 
	`¥ötf
(
	`_
("end ofÑange ? "));

1237 
	`fgës
(
löebuf
, 256, 
°dö
);

1238 
j
 = 
	`©oi
(
löebuf
);

1240 i‡(
i
 =
j
) j = i+1;

1241 
≈
 = 
	`avl64_födöønge
(&
åì
,
i
,
j
);

1242 i‡(
≈
) {

1243 
	`avl64_¥öäode
(&
åì
, 
≈
, 1);

1244 i‡(
cmd
[0] == 'd')

1245 
	`avl64_dñëe
(&
åì
, 
≈
);

1247 
	`¥ötf
(
	`_
("C™nŸ föd %d\n"), 
i
);

1250 
	`avl64_¥öt
(&
åì
,Åªe.
avl_roŸ
, 0);

1251 
≈
 = 
åì
.
avl_fú°öo
;

1252 
≈
 !
NULL
;Ç∞≈->
avl_√xtöo
)

1253 
	`avl64_¥öäode
(&
åì
, 
≈
, 0);

1254 
	`¥ötf
("\n");

1257 
≈
 = 
	`Æloc_av ode
();

1258 
	`ASSERT
(
≈
);

1259 
≈
->
avl_°¨t
 = 
i
;

1260 
	`¥ötf
(
	`_
("size ofÑange ? "));

1261 
	`fgës
(
löebuf
, 256, 
°dö
);

1262 
j
 = 
	`©oi
(
löebuf
);

1264 
≈
->
avl_size
 = 
j
;

1265 
	`avl64_ö£π
(&
åì
, 
≈
);

1268 
avl64node_t
 *
b
, *
e
, *
t
;

1269 
checkÀn
;

1271 
	`¥ötf
(
	`_
("End ofÑange ? "));

1272 
	`fgës
(
löebuf
, 256, 
°dö
);

1273 
j
 = 
	`©oi
(
löebuf
);

1275 
	`¥ötf
(
	`_
("checklen 0/1 ? "));

1276 
	`fgës
(
löebuf
, 256, 
°dö
);

1277 
checkÀn
 = 
	`©oi
(
löebuf
);

1280 
b
 = 
	`avl64_föd™yønge
(&
åì
, 
i
, 
j
, 
checkÀn
);

1281 i‡(
b
) {

1282 
	`¥ötf
(
	`_
("Found something\n"));

1283 
t
 = 
b
;

1284 
t
) {

1285 i‡(
t
 !
b
 &&

1286 
	`AVL_START
(&
åì
, 
t
Ë>
j
)

1288 
	`avl64_¥öäode
(&
åì
, 
t
, 0);

1289 
t
 =Å->
avl_√xtöo
;

1291 
	`¥ötf
("\n");

1296 
	}
}

1304 
avl64node_t
 *

1305 
	$avl64_födadja˚¡
(

1306 
avl64åì_desc_t
 *
åì
,

1307 
__uöt64_t
 
vÆue
,

1308 
dú
)

1310 
avl64node_t
 *
≈
 = 
åì
->
avl_roŸ
;

1312 
≈
) {

1313 i‡(
vÆue
 < 
	`AVL_START
(
åì
, 
≈
)) {

1314 i‡(
≈
->
avl_back
) {

1315 
≈
 =Çp->
avl_back
;

1321 i‡(
dú
 =
AVL_SUCCEED
) {

1324 (
≈
);

1326 i‡(
dú
 =
AVL_PRECEED
) {

1330 
≈
 =Çp->
avl_∑ª¡
;

1331 
≈
) {

1332 i‡(
	`AVL_END
(
åì
, 
≈
Ë<
vÆue
)

1334 
≈
 =Çp->
avl_∑ª¡
;

1336 (
≈
);

1338 
	`ASSERT
(
dú
 =
AVL_SUCCEED
 || dú =
AVL_PRECEED
);

1341 i‡(
vÆue
 >
	`AVL_END
(
åì
, 
≈
)) {

1342 i‡(
≈
->
avl_f‹w
) {

1343 
≈
 =Çp->
avl_f‹w
;

1349 i‡(
dú
 =
AVL_SUCCEED
) {

1353 (
≈
->
avl_√xtöo
);

1355 i‡(
dú
 =
AVL_PRECEED
) {

1357 (
≈
);

1359 
	`ASSERT
(
dú
 =
AVL_SUCCEED
 || dú =
AVL_PRECEED
);

1362 (
≈
);

1364  
NULL
;

1365 
	}
}

1379 
	$avl64_födønges
(

1380 
avl64åì_desc_t
 *
åì
,

1381 
__uöt64_t
 
°¨t
,

1382 
__uöt64_t
 
íd
,

1383 
avl64node_t
 **
°¨ç
,

1384 
avl64node_t
 **
ídp
)

1386 
avl64node_t
 *
≈
;

1388 
≈
 = 
	`avl64_födadja˚¡
(
åì
, 
°¨t
, 
AVL_SUCCEED
);

1389 i‡(
≈
 =
NULL


1390 || (
≈
 && (
íd
 <
	`AVL_START
(
åì
,Çp))))

1394 *
°¨ç
 = 
NULL
;

1395 *
ídp
 = 
NULL
;

1399 *
°¨ç
 = 
≈
;

1402 i‡(
íd
 <
	`AVL_END
(
åì
, 
≈
) ||

1403 
≈
->
avl_√xtöo
 =
NULL
 ||

1404 (
≈
->
avl_√xtöo
 &&

1405 (
íd
 <
	`AVL_START
(
åì
, 
≈
->
avl_√xtöo
)))) {

1406 *
ídp
 = 
≈
;

1416 *
ídp
 = 
	`avl64_födadja˚¡
(
åì
, (
íd
-1), 
AVL_PRECEED
);

1417 
	`ASSERT
(*
ídp
);

1418 
	}
}

	@repair/avl64.h

18 #i‚de‡
__XR_AVL64_H__


19 
	#__XR_AVL64_H__


	)

21 
	~<sys/ty≥s.h
>

23 
	savl64node
 {

24 
avl64node
 *
	mavl_f‹w
;

25 
avl64node
 *
	mavl_back
;

26 
avl64node
 *
	mavl_∑ª¡
;

27 
avl64node
 *
	mavl_√xtöo
;

28 
	mavl_bÆ™˚
;

29 } 
	tavl64node_t
;

34 
	savl64›s
 {

35 
__uöt64_t
 (*
avl_°¨t
)(
	mavl64node_t
 *);

36 
__uöt64_t
 (*
avl_íd
)(
	mavl64node_t
 *);

37 } 
	tavl64›s_t
;

43 #i‚de‡
AVL_START


44 
	#AVL_START
(
åì
, 
n
Ë(*—ªe)->
avl_›s
->
avl_°¨t
)“)

	)

45 
	#AVL_END
(
åì
, 
n
Ë(*—ªe)->
avl_›s
->
avl_íd
)“)

	)

53 
	savl64åì_desc
 {

54 
avl64node_t
 *
	mavl_roŸ
;

55 
avl64node_t
 *
	mavl_fú°öo
;

56 
avl64›s_t
 *
	mavl_›s
;

57 } 
	tavl64åì_desc_t
;

61 
	#AVL_BACK
 1

	)

62 
	#AVL_BALANCE
 0

	)

63 
	#AVL_FORW
 2

	)

68 
avl64node_t


69 *
avl64_ö£π
(

70 
avl64åì_desc_t
 *
åì
,

71 
avl64node_t
 *
√wnode
);

74 
avl64_dñëe
(

75 
avl64åì_desc_t
 *
åì
,

76 
avl64node_t
 *
≈
);

79 
avl64_ö£π_immedüã
(

80 
avl64åì_desc_t
 *
åì
,

81 
avl64node_t
 *
a·îp
,

82 
avl64node_t
 *
√wnode
);

85 
avl64_öô_åì
(

86 
avl64åì_desc_t
 *
åì
,

87 
avl64›s_t
 *
›s
);

89 
avl64node_t
 *

90 
avl64_födønge
(

91 
avl64åì_desc_t
 *
åì
,

92 
__uöt64_t
 
vÆue
);

94 
avl64node_t
 *

95 
avl64_föd
(

96 
avl64åì_desc_t
 *
åì
,

97 
__uöt64_t
 
vÆue
);

99 
avl64node_t
 *

100 
avl64_föd™yønge
(

101 
avl64åì_desc_t
 *
åì
,

102 
__uöt64_t
 
°¨t
,

103 
__uöt64_t
 
íd
,

104 
checkÀn
);

107 
avl64node_t
 *

108 
avl64_födadja˚¡
(

109 
avl64åì_desc_t
 *
åì
,

110 
__uöt64_t
 
vÆue
,

111 
dú
);

114 
avl64_födønges
(

115 
avl64åì_desc_t
 *
åì
,

116 
__uöt64_t
 
°¨t
,

117 
__uöt64_t
 
íd
,

118 
avl64node_t
 **
°¨ç
,

119 
avl64node_t
 **
ídp
);

125 #i‚de‡
AVL_PRECEED


126 
	#AVL_PRECEED
 0x1

	)

127 
	#AVL_SUCCEED
 0x2

	)

129 
	#AVL_INCLUDE_ZEROLEN
 0x0000

	)

130 
	#AVL_EXCLUDE_ZEROLEN
 0x0001

	)

	@repair/bmap.c

19 
	~"libxfs.h
"

20 
	~"îr_¥Ÿos.h
"

21 
	~"bm≠.h
"

34 
±hªad_key_t
 
	gdblkm≠_key
;

35 
±hªad_key_t
 
	gablkm≠_key
;

37 
blkm≠_t
 *

38 
	$blkm≠_Æloc
(

39 
xfs_exäum_t
 
√x
,

40 
whichf‹k
)

42 
±hªad_key_t
 
key
;

43 
blkm≠_t
 *
blkm≠
;

45 
	`ASSERT
(
whichf‹k
 =
XFS_DATA_FORK
 || whichf‹k =
XFS_ATTR_FORK
);

47 i‡(
√x
 < 1)

48 
√x
 = 1;

50 #i‡(
BITS_PER_LONG
 == 32)

51 i‡(
√x
 > 
BLKMAP_NEXTS_MAX
) {

52 
	`do_w¨n
(

53 
	`_
("Number ofÉxtentsÑequested in blkmap_alloc (%d) overflows 32 bits.\n"

56 
√x
);

57  
NULL
;

61 
key
 = 
whichf‹k
 ? 
ablkm≠_key
 : 
dblkm≠_key
;

62 
blkm≠
 = 
	`±hªad_gë•ecific
(
key
);

63 i‡(!
blkm≠
 || blkm≠->
«exts
 < 
√x
) {

64 
blkm≠
 = 
	`ªÆloc
(blkm≠, 
	`BLKMAP_SIZE
(
√x
));

65 i‡(!
blkm≠
) {

66 
	`do_w¨n
(
	`_
("malloc failed in blkmap_alloc (%zu bytes)\n"),

67 
	`BLKMAP_SIZE
(
√x
));

68  
NULL
;

70 
	`±hªad_£t•ecific
(
key
, 
blkm≠
);

71 
blkm≠
->
«exts
 = 
√x
;

74 
blkm≠
->
√xts
 = 0;

75  
blkm≠
;

76 
	}
}

89 
	$blkm≠_‰ì
(

90 
blkm≠_t
 *
blkm≠
)

92 i‡(!
blkm≠
)

96 i‡(
blkm≠
->
«exts
 < 100 * 1024)

99 i‡(
blkm≠
 =
	`±hªad_gë•ecific
(
dblkm≠_key
))

100 
	`±hªad_£t•ecific
(
dblkm≠_key
, 
NULL
);

102 
	`±hªad_£t•ecific
(
ablkm≠_key
, 
NULL
);

104 
	`‰ì
(
blkm≠
);

105 
	}
}

108 
	$blkm≠_‰ì_föÆ
()

110 
blkm≠_t
 *
blkm≠
;

112 
blkm≠
 = 
	`±hªad_gë•ecific
(
dblkm≠_key
);

113 
	`±hªad_£t•ecific
(
dblkm≠_key
, 
NULL
);

114 
	`‰ì
(
blkm≠
);

116 
blkm≠
 = 
	`±hªad_gë•ecific
(
ablkm≠_key
);

117 
	`±hªad_£t•ecific
(
ablkm≠_key
, 
NULL
);

118 
	`‰ì
(
blkm≠
);

119 
	}
}

124 
xfs_fsblock_t


125 
	$blkm≠_gë
(

126 
blkm≠_t
 *
blkm≠
,

127 
xfs_fûeoff_t
 
o
)

129 
bm≠_ext_t
 *
ext
 = 
blkm≠
->
exts
;

130 
i
;

132 
i
 = 0; i < 
blkm≠
->
√xts
; i++, 
ext
++) {

133 i‡(
o
 >
ext
->
°¨toff
 && o <Éxt->°¨tof‡+Éxt->
blockcou¡
)

134  
ext
->
°¨tblock
 + (
o
 -Éxt->
°¨toff
);

136  
NULLFSBLOCK
;

137 
	}
}

143 
	$blkm≠_gën
(

144 
blkm≠_t
 *
blkm≠
,

145 
xfs_fûeoff_t
 
o
,

146 
xfs_fûblks_t
 
nb
,

147 
bm≠_ext_t
 **
bmµ
,

148 
bm≠_ext_t
 *
bmµ_sögÀ
)

150 
bm≠_ext_t
 *
bmp
 = 
NULL
;

151 
bm≠_ext_t
 *
ext
;

152 
i
;

153 
√x
;

155 i‡(
nb
 == 1) {

160 
bmµ_sögÀ
->
°¨tblock
 = 
	`blkm≠_gë
(
blkm≠
, 
o
);

161 
sögÀ_ext
;

163 
ext
 = 
blkm≠
->
exts
;

164 
√x
 = 0;

165 
i
 = 0; i < 
blkm≠
->
√xts
; i++, 
ext
++) {

167 i‡(
ext
->
°¨toff
 >
o
 + 
nb
)

169 i‡(
ext
->
°¨toff
 +Éxt->
blockcou¡
 <
o
)

176 i‡(!
bmp
 && 
o
 >
ext
->
°¨toff
 &&

177 
o
 + 
nb
 <
ext
->
°¨toff
 +Éxt->
blockcou¡
) {

178 
bmµ_sögÀ
->
°¨tblock
 =

179 
ext
->
°¨tblock
 + (
o
 -Éxt->
°¨toff
);

180 
sögÀ_ext
;

186 i‡(!
bmp
)

187 
bmp
 = 
	`mÆloc
(
nb
 * (
bm≠_ext_t
));

188 i‡(!
bmp
)

189 
	`do_îr‹
(
	`_
("blkm≠_gë¿mÆlo¯Áûed (%" 
PRIu64
 " bytes)\n"),

190 
nb
 * (
bm≠_ext_t
));

192 
bmp
[
√x
].
°¨tblock
 = 
ext
->°¨tblock + (
o
 -Éxt->
°¨toff
);

193 
bmp
[
√x
].
blockcou¡
 = 
	`MIN
(
nb
, 
ext
->blockcount -

194 (
bmp
[
√x
].
°¨tblock
 - 
ext
->startblock));

195 
o
 +
bmp
[
√x
].
blockcou¡
;

196 
nb
 -
bmp
[
√x
].
blockcou¡
;

197 
√x
++;

199 *
bmµ
 = 
bmp
;

200  
√x
;

202 
sögÀ_ext
:

203 
bmµ_sögÀ
->
blockcou¡
 = 
nb
;

204 
bmµ_sögÀ
->
°¨toff
 = 0;

205 *
bmµ
 = 
bmµ_sögÀ
;

206  (
bmµ_sögÀ
->
°¨tblock
 !
NULLFSBLOCK
) ? 1 : 0;

207 
	}
}

212 
xfs_fûeoff_t


213 
	$blkm≠_œ°_off
(

214 
blkm≠_t
 *
blkm≠
)

216 
bm≠_ext_t
 *
ext
;

218 i‡(!
blkm≠
->
√xts
)

219  
NULLFILEOFF
;

220 
ext
 = 
blkm≠
->
exts
 + blkm≠->
√xts
 - 1;

221  
ext
->
°¨toff
 +Éxt->
blockcou¡
;

222 
	}
}

244 
xfs_fûeoff_t


245 
	$blkm≠_√xt_off
(

246 
blkm≠_t
 *
blkm≠
,

247 
xfs_fûeoff_t
 
o
,

248 *
t
)

250 
bm≠_ext_t
 *
ext
;

252 i‡(!
blkm≠
->
√xts
)

253  
NULLFILEOFF
;

254 i‡(
o
 =
NULLFILEOFF
) {

255 *
t
 = 0;

256  
blkm≠
->
exts
[0].
°¨toff
;

258 i‡(*
t
 >
blkm≠
->
√xts
)

259  
NULLFILEOFF
;

260 
ext
 = 
blkm≠
->
exts
 + *
t
;

261 i‡(
o
 < 
ext
->
°¨toff
 +Éxt->
blockcou¡
 - 1)

262  
o
 + 1;

263 i‡(*
t
 =
blkm≠
->
√xts
 - 1)

264  
NULLFILEOFF
;

265 (*
t
)++;

266  
ext
[1].
°¨toff
;

267 
	}
}

272 
blkm≠_t
 *

273 
	$blkm≠_grow
(

274 
blkm≠_t
 *
blkm≠
)

276 
±hªad_key_t
 
key
 = 
dblkm≠_key
;

277 
blkm≠_t
 *
√w_blkm≠
;

278 
√w_«exts
;

281 i‡(
blkm≠
->
«exts
 < 1000)

282 
√w_«exts
 = 
blkm≠
->
«exts
 + 4;

283 i‡(
blkm≠
->
«exts
 < 10000)

284 
√w_«exts
 = 
blkm≠
->
«exts
 + 100;

286 
√w_«exts
 = 
blkm≠
->
«exts
 + 1000;

288 i‡(
	`±hªad_gë•ecific
(
key
Ë!
blkm≠
) {

289 
key
 = 
ablkm≠_key
;

290 
	`ASSERT
(
	`±hªad_gë•ecific
(
key
Ë=
blkm≠
);

293 #i‡(
BITS_PER_LONG
 == 32)

294 i‡(
√w_«exts
 > 
BLKMAP_NEXTS_MAX
) {

295 
	`do_îr‹
(

296 
	`_
("Number ofÉxtentsÑequested in blkmap_grow (%d) overflows 32 bits.\n"

298 
√w_«exts
);

299  
NULL
;

302 i‡(
√w_«exts
 <= 0) {

303 
	`do_îr‹
(

304 
	`_
("Number ofÉxtentsÑequested in blkmap_grow (%d) overflowedÅhe\n"

306 
√w_«exts
, 
BLKMAP_NEXTS_MAX
);

307  
NULL
;

310 
√w_blkm≠
 = 
	`ªÆloc
(
blkm≠
, 
	`BLKMAP_SIZE
(
√w_«exts
));

311 i‡(!
√w_blkm≠
) {

312 
	`do_îr‹
(
	`_
("realloc failed in blkmap_grow\n"));

313  
NULL
;

315 
√w_blkm≠
->
«exts
 = 
√w_«exts
;

316 
	`±hªad_£t•ecific
(
key
, 
√w_blkm≠
);

317  
√w_blkm≠
;

318 
	}
}

327 
	$blkm≠_£t_ext
(

328 
blkm≠_t
 **
blkm≠p
,

329 
xfs_fûeoff_t
 
o
,

330 
xfs_fsblock_t
 
b
,

331 
xfs_fûblks_t
 
c
)

333 
blkm≠_t
 *
blkm≠
 = *
blkm≠p
;

334 
xfs_exäum_t
 
i
;

336 i‡(
blkm≠
->
√xts
 =blkm≠->
«exts
) {

337 
blkm≠
 = 
	`blkm≠_grow
(blkmap);

338 i‡(!
blkm≠
)

339  
ENOMEM
;

340 *
blkm≠p
 = 
blkm≠
;

343 
	`ASSERT
(
blkm≠
->
√xts
 < blkm≠->
«exts
);

345 i‡(
blkm≠
->
√xts
 == 0) {

346 
i
 = 0;

347 
ö£π
;

360 
i
 = 
blkm≠
->
√xts
; i > 0; i--) {

361 i‡(
blkm≠
->
exts
[
i
 - 1].
°¨toff
 < 
o
)

366 
	`memmove
(
blkm≠
->
exts
 + 
i
 + 1,

367 
blkm≠
->
exts
 + 
i
,

368 (
bm≠_ext_t
Ë* (
blkm≠
->
√xts
 - 
i
));

370 
ö£π
:

371 
blkm≠
->
exts
[
i
].
°¨toff
 = 
o
;

372 
blkm≠
->
exts
[
i
].
°¨tblock
 = 
b
;

373 
blkm≠
->
exts
[
i
].
blockcou¡
 = 
c
;

374 
blkm≠
->
√xts
++;

376 
	}
}

	@repair/bmap.h

19 #i‚de‡
_XFS_REPAIR_BMAP_H


20 
	#_XFS_REPAIR_BMAP_H


	)

25 
	sbm≠_ext
 {

26 
xfs_fûeoff_t
 
	m°¨toff
;

27 
xfs_fsblock_t
 
	m°¨tblock
;

28 
xfs_fûblks_t
 
	mblockcou¡
;

29 } 
	tbm≠_ext_t
;

34 
	sblkm≠
 {

35 
	m«exts
;

36 
	m√xts
;

37 
bm≠_ext_t
 
	mexts
[1];

38 } 
	tblkm≠_t
;

40 
	#BLKMAP_SIZE
(
n
) \

41 (
	`off£tof
(
blkm≠_t
, 
exts
Ë+ ((
bm≠_ext_t
Ë* (
n
)))

	)

50 #i‡
BITS_PER_LONG
 == 32

51 
	#BLKMAP_NEXTS_MAX
 ((
INT_MAX
 / (
bm≠_ext_t
)Ë- 1)

	)

53 
	#BLKMAP_NEXTS_MAX
 
INT_MAX


	)

56 
±hªad_key_t
 
dblkm≠_key
;

57 
±hªad_key_t
 
ablkm≠_key
;

59 
blkm≠_t
 *
blkm≠_Æloc
(
xfs_exäum_t
 
√x
, 
whichf‹k
);

60 
blkm≠_‰ì
(
blkm≠_t
 *
blkm≠
);

61 
blkm≠_‰ì_föÆ
();

63 
blkm≠_£t_ext
(
blkm≠_t
 **
blkm≠p
, 
xfs_fûeoff_t
 
o
,

64 
xfs_fsblock_t
 
b
, 
xfs_fûblks_t
 
c
);

66 
xfs_fsblock_t
 
blkm≠_gë
(
blkm≠_t
 *
blkm≠
, 
xfs_fûeoff_t
 
o
);

67 
blkm≠_gën
(
blkm≠_t
 *
blkm≠
, 
xfs_fûeoff_t
 
o
,

68 
xfs_fûblks_t
 
nb
, 
bm≠_ext_t
 **
bmµ
,

69 
bm≠_ext_t
 *
bmµ_sögÀ
);

70 
xfs_fûeoff_t
 
blkm≠_œ°_off
(
blkm≠_t
 *
blkm≠
);

71 
xfs_fûeoff_t
 
blkm≠_√xt_off
(
blkm≠_t
 *
blkm≠
, xfs_fûeoff_à
o
, *
t
);

	@repair/btree.c

19 
	~"libxfs.h
"

20 
	~"båì.h
"

26 
	#BTREE_KEY_MAX
 7

	)

27 
	#BTREE_KEY_MIN
 (
BTREE_KEY_MAX
 / 2)

	)

29 
	#BTREE_PTR_MAX
 (
BTREE_KEY_MAX
 + 1)

	)

31 
	sbåì_node
 {

32 
	mnum_keys
;

33 
	mkeys
[
BTREE_KEY_MAX
];

34 
båì_node
 *
	m±rs
[
BTREE_PTR_MAX
];

37 
	sbåì_curs‹
 {

38 
båì_node
 *
	mnode
;

39 
	mödex
;

42 
	sbåì_roŸ
 {

43 
båì_node
 *
	mroŸ_node
;

44 
båì_curs‹
 *
	mcurs‹
;

45 
	mheight
;

47 
	mkeys_vÆid
;

48 
	mcur_key
;

49 
	m√xt_key
;

50 *
	m√xt_vÆue
;

51 
	m¥ev_key
;

52 *
	m¥ev_vÆue
;

53 #ifde‡
BTREE_STATS


54 
	sbåì_°©s
 {

55 
	mnum_ôems
;

56 
	mmax_ôems
;

57 
	mÆlo˚d
;

58 
	mˇche_hôs
;

59 
	mˇche_mis£s
;

60 
	mlookup
;

61 
	mföd
;

62 
	mkey_upd©e
;

63 
	mvÆue_upd©e
;

64 
	mö£π
;

65 
	mdñëe
;

66 
	möc_height
;

67 
	mdec_height
;

68 
	mshi·_¥ev
;

69 
	mshi·_√xt
;

70 
	m•lô
;

71 
	mmîge_¥ev
;

72 
	mmîge_√xt
;

73 
	mbÆ™˚_¥ev
;

74 
	mbÆ™˚_√xt
;

75 } 
	m°©s
;

80 
båì_node
 *

81 
	$båì_node_Æloc
()

83  
	`ˇŒoc
(1, (
båì_node
));

84 
	}
}

87 
	$båì_node_‰ì
(

88 
båì_node
 *
node
)

90 
	`‰ì
(
node
);

91 
	}
}

94 
	$båì_‰ì_nodes
(

95 
båì_node
 *
node
,

96 
Àvñ
)

98 
i
;

100 i‡(
Àvñ
)

101 
i
 = 0; i <
node
->
num_keys
; i++)

102 
	`båì_‰ì_nodes
(
node
->
±rs
[
i
], 
Àvñ
 - 1);

103 
	`båì_node_‰ì
(
node
);

104 
	}
}

107 
	$__båì_öô
(

108 
båì_roŸ
 *
roŸ
)

110 
	`mem£t
(
roŸ
, 0, (
båì_roŸ
));

111 
roŸ
->
height
 = 1;

112 
roŸ
->
curs‹
 = 
	`ˇŒoc
(1, (
båì_curs‹
));

113 
roŸ
->
roŸ_node
 = 
	`båì_node_Æloc
();

114 
	`ASSERT
(
roŸ
->
roŸ_node
);

115 #ifde‡
BTREE_STATS


116 
roŸ
->
°©s
.
max_ôems
 = 1;

117 
roŸ
->
°©s
.
Ælo˚d
 += 1;

119 
	}
}

122 
	$__båì_‰ì
(

123 
båì_roŸ
 *
roŸ
)

125 
	`båì_‰ì_nodes
(
roŸ
->
roŸ_node
,ÑoŸ->
height
 - 1);

126 
	`‰ì
(
roŸ
->
curs‹
);

127 
roŸ
->
height
 = 0;

128 
roŸ
->
curs‹
 = 
NULL
;

129 
roŸ
->
roŸ_node
 = 
NULL
;

130 
	}
}

133 
	$båì_öô
(

134 
båì_roŸ
 **
roŸ
)

136 *
roŸ
 = 
	`ˇŒoc
(1, (
båì_roŸ
));

137 
	`__båì_öô
(*
roŸ
);

138 
	}
}

141 
	$båì_˛ór
(

142 
båì_roŸ
 *
roŸ
)

144 
	`__båì_‰ì
(
roŸ
);

145 
	`__båì_öô
(
roŸ
);

146 
	}
}

149 
	$båì_de°roy
(

150 
båì_roŸ
 *
roŸ
)

152 
	`__båì_‰ì
(
roŸ
);

153 
	`‰ì
(
roŸ
);

154 
	}
}

157 
	$båì_is_em±y
(

158 
båì_roŸ
 *
roŸ
)

160  
roŸ
->
roŸ_node
->
num_keys
 == 0;

161 
	}
}

163 
ölöe
 

164 
	$båì_övÆid©e_curs‹
(

165 
båì_roŸ
 *
roŸ
)

167 
roŸ
->
curs‹
[0].
node
 = 
NULL
;

168 
roŸ
->
keys_vÆid
 = 0;

169 
	}
}

171 
ölöe
 

172 
	$båì_key_of_curs‹
(

173 
båì_curs‹
 *
curs‹
,

174 
height
)

176 
curs‹
->
node
->
num_keys
 =curs‹->
ödex
 && --
height
 > 0)

177 
curs‹
++;

178  
curs‹
->
node
->
keys
[curs‹->
ödex
];

179 
	}
}

182 
	$båì_gë_¥ev
(

183 
båì_roŸ
 *
roŸ
,

184 *
key
)

186 
båì_curs‹
 *
cur
 = 
roŸ
->
curs‹
;

187 
Àvñ
 = 0;

188 
båì_node
 *
node
;

190 i‡(
cur
->
ödex
 > 0) {

191 i‡(
key
)

192 *
key
 = 
cur
->
node
->
keys
[cur->
ödex
 - 1];

193  
cur
->
node
->
±rs
[cur->
ödex
 - 1];

198 i‡(
cur
->
ödex
)

200 
cur
++;

201 } ++
Àvñ
 < 
roŸ
->
height
);

203 i‡(
Àvñ
 =
roŸ
->
height
)

204  
NULL
;

207 i‡(
key
)

208 *
key
 = 
cur
->
node
->
keys
[cur->
ödex
 - 1];

211 
node
 = 
cur
->node->
±rs
[cur->
ödex
 - 1];

212 
Àvñ
--)

213 
node
 =Çode->
±rs
[node->
num_keys
];

214  
node
;

215 
	}
}

218 
	$båì_gë_√xt
(

219 
båì_roŸ
 *
roŸ
,

220 *
key
)

222 
båì_curs‹
 *
cur
 = 
roŸ
->
curs‹
;

223 
Àvñ
 = 0;

224 
båì_node
 *
node
;

226 
cur
->
ödex
 =cur->
node
->
num_keys
) {

227 i‡(++
Àvñ
 =
roŸ
->
height
)

228  
NULL
;

229 
cur
++;

231 i‡(
Àvñ
 == 0) {

232 i‡(
key
) {

233 
cur
->
ödex
++;

234 *
key
 = 
	`båì_key_of_curs‹
(
cur
, 
roŸ
->
height
);

235 
cur
->
ödex
--;

237  
cur
->
node
->
±rs
[cur->
ödex
 + 1];

240 
node
 = 
cur
->node->
±rs
[cur->
ödex
 + 1];

241 --
Àvñ
 > 0)

242 
node
 =Çode->
±rs
[0];

243 i‡(
key
)

244 *
key
 = 
node
->
keys
[0];

245  
node
->
±rs
[0];

246 
	}
}

253 
	$båì_do_£¨ch
(

254 
båì_roŸ
 *
roŸ
,

255 
key
)

257 
k
 = 0;

258 
båì_curs‹
 *
cur
 = 
roŸ
->
curs‹
 +ÑoŸ->
height
;

259 
båì_node
 *
node
 = 
roŸ
->
roŸ_node
;

260 
height
 = 
roŸ
->height;

261 
key_found
 = 0;

262 
i
;

264 --
height
 >= 0) {

265 
cur
--;

266 
i
 = 0; i < 
node
->
num_keys
; i++)

267 i‡(
node
->
keys
[
i
] >
key
) {

268 
k
 = 
node
->
keys
[
i
];

269 
key_found
 = 1;

272 
cur
->
node
 =Çode;

273 
cur
->
ödex
 = 
i
;

274 
node
 =Çode->
±rs
[
i
];

276 
roŸ
->
keys_vÆid
 = 
key_found
;

277 i‡(!
key_found
)

280 
roŸ
->
cur_key
 = 
k
;

281 
roŸ
->
√xt_vÆue
 = 
NULL
;

282 
roŸ
->
¥ev_vÆue
 = 
	`båì_gë_¥ev
‘oŸ, &roŸ->
¥ev_key
);

284 
	}
}

287 
	$båì_£¨ch
(

288 
båì_roŸ
 *
roŸ
,

289 
key
)

291 i‡(
roŸ
->
keys_vÆid
 && 
key
 <roŸ->
cur_key
 &&

292 (!
roŸ
->
¥ev_vÆue
 || 
key
 >ÑoŸ->
¥ev_key
)) {

293 #ifde‡
BTREE_STATS


294 
roŸ
->
°©s
.
ˇche_hôs
++;

298 #ifde‡
BTREE_STATS


299 
roŸ
->
°©s
.
ˇche_mis£s
++;

301  
	`båì_do_£¨ch
(
roŸ
, 
key
);

302 
	}
}

305 
	$båì_föd
(

306 
båì_roŸ
 *
roŸ
,

307 
key
,

308 *
a˘uÆ_key
)

310 #ifde‡
BTREE_STATS


311 
roŸ
->
°©s
.
föd
 += 1;

313 i‡(!
	`båì_£¨ch
(
roŸ
, 
key
))

314  
NULL
;

316 i‡(
a˘uÆ_key
)

317 *
a˘uÆ_key
 = 
roŸ
->
cur_key
;

318  
roŸ
->
curs‹
->
node
->
±rs
[roŸ->curs‹->
ödex
];

319 
	}
}

322 
	$båì_lookup
(

323 
båì_roŸ
 *
roŸ
,

324 
key
)

326 #ifde‡
BTREE_STATS


327 
roŸ
->
°©s
.
lookup
 += 1;

329 i‡(!
	`båì_£¨ch
(
roŸ
, 
key
Ë||ÑoŸ->
cur_key
 != key)

330  
NULL
;

331  
roŸ
->
curs‹
->
node
->
±rs
[roŸ->curs‹->
ödex
];

332 
	}
}

335 
	$båì_≥ek_¥ev
(

336 
båì_roŸ
 *
roŸ
,

337 *
key
)

339 i‡(!
roŸ
->
keys_vÆid
)

340  
NULL
;

341 i‡(
key
)

342 *
key
 = 
roŸ
->
¥ev_key
;

343  
roŸ
->
¥ev_vÆue
;

344 
	}
}

347 
	$båì_≥ek_√xt
(

348 
båì_roŸ
 *
roŸ
,

349 *
key
)

351 i‡(!
roŸ
->
keys_vÆid
)

352  
NULL
;

353 i‡(!
roŸ
->
√xt_vÆue
)

354 
roŸ
->
√xt_vÆue
 = 
	`båì_gë_√xt
‘oŸ, &roŸ->
√xt_key
);

355 i‡(
key
)

356 *
key
 = 
roŸ
->
√xt_key
;

357  
roŸ
->
√xt_vÆue
;

358 
	}
}

361 
	$båì_move_curs‹_to_√xt
(

362 
båì_roŸ
 *
roŸ
,

363 *
key
)

365 
båì_curs‹
 *
cur
 = 
roŸ
->
curs‹
;

366 
Àvñ
 = 0;

368 
cur
->
ödex
 =cur->
node
->
num_keys
) {

369 i‡(++
Àvñ
 =
roŸ
->
height
)

370  
NULL
;

371 
cur
++;

373 
cur
->
ödex
++;

374 i‡(
Àvñ
 == 0) {

375 i‡(
key
)

376 *
key
 = 
	`båì_key_of_curs‹
(
cur
, 
roŸ
->
height
);

377  
cur
->
node
->
±rs
[cur->
ödex
];

380 --
Àvñ
 >= 0) {

381 
roŸ
->
curs‹
[
Àvñ
].
node
 = 
cur
->node->
±rs
[cur->
ödex
];

382 
roŸ
->
curs‹
[
Àvñ
].
ödex
 = 0;

383 
cur
--;

385 i‡(
key
)

386 *
key
 = 
cur
->
node
->
keys
[0];

387  
cur
->
node
->
±rs
[0];

388 
	}
}

391 
	$båì_lookup_√xt
(

392 
båì_roŸ
 *
roŸ
,

393 *
key
)

395 *
vÆue
;

397 i‡(!
roŸ
->
keys_vÆid
)

398  
NULL
;

400 
roŸ
->
¥ev_key
 =ÑoŸ->
cur_key
;

401 
roŸ
->
¥ev_vÆue
 =ÑoŸ->
curs‹
->
node
->
±rs
[roŸ->curs‹->
ödex
];

403 
vÆue
 = 
	`båì_move_curs‹_to_√xt
(
roŸ
, &roŸ->
cur_key
);

404 i‡(!
vÆue
) {

405 
	`båì_övÆid©e_curs‹
(
roŸ
);

406  
NULL
;

408 
roŸ
->
√xt_vÆue
 = 
NULL
;

409 i‡(
key
)

410 *
key
 = 
roŸ
->
cur_key
;

411  
vÆue
;

412 
	}
}

415 
	$båì_move_curs‹_to_¥ev
(

416 
båì_roŸ
 *
roŸ
,

417 *
key
)

419 
båì_curs‹
 *
cur
 = 
roŸ
->
curs‹
;

420 
Àvñ
 = 0;

422 
cur
->
ödex
 == 0) {

423 i‡(++
Àvñ
 =
roŸ
->
height
)

424  
NULL
;

425 
cur
++;

427 
cur
->
ödex
--;

428 i‡(
key
)

429 *
key
 = 
cur
->
node
->
keys
[cur->
ödex
];

430 
Àvñ
 > 0) {

431 
Àvñ
--;

432 
roŸ
->
curs‹
[
Àvñ
].
node
 = 
cur
->node->
±rs
[cur->
ödex
];

433 
roŸ
->
curs‹
[
Àvñ
].
ödex
 =ÑoŸ->curs‹[Àvñ].
node
->
num_keys
;

434 
cur
--;

436  
cur
->
node
->
±rs
[cur->
ödex
];

437 
	}
}

440 
	$båì_lookup_¥ev
(

441 
båì_roŸ
 *
roŸ
,

442 *
key
)

444 *
vÆue
;

446 i‡(!
roŸ
->
keys_vÆid
)

447  
NULL
;

449 
vÆue
 = 
	`båì_move_curs‹_to_¥ev
(
roŸ
, &roŸ->
cur_key
);

450 i‡(!
vÆue
)

451  
NULL
;

452 
roŸ
->
¥ev_vÆue
 = 
	`båì_gë_¥ev
‘oŸ, &roŸ->
¥ev_key
);

453 
roŸ
->
√xt_vÆue
 = 
NULL
;

454 i‡(
key
)

455 *
key
 = 
roŸ
->
cur_key
;

456  
vÆue
;

457 
	}
}

460 
	$båì_unˇched_lookup
(

461 
båì_roŸ
 *
roŸ
,

462 
key
)

465 
height
 = 
roŸ
->height - 1;

466 
båì_node
 *
node
 = 
roŸ
->
roŸ_node
;

467 
i
;

468 
key_found
 = 0;

470 
height
 >= 0) {

471 
i
 = 0; i < 
node
->
num_keys
; i++)

472 i‡(
node
->
keys
[
i
] >
key
) {

473 
key_found
 = 
node
->
keys
[
i
] =
key
;

476 
node
 =Çode->
±rs
[
i
];

477 
height
--;

479  
key_found
 ? 
node
 : 
NULL
;

480 
	}
}

484 
ölöe
 

485 
	$båì_upd©e_node_key
(

486 
båì_roŸ
 *
roŸ
,

487 
båì_curs‹
 *
curs‹
,

488 
Àvñ
,

489 
√w_key
)

491 
i
;

493 #ifde‡
BTREE_STATS


494 
roŸ
->
°©s
.
key_upd©e
 += 1;

497 
curs‹
 +
Àvñ
;

498 
i
 = 
Àvñ
; i < 
roŸ
->
height
; i++) {

499 i‡(
curs‹
->
ödex
 < curs‹->
node
->
num_keys
) {

500 
curs‹
->
node
->
keys
[curs‹->
ödex
] = 
√w_key
;

503 
curs‹
++;

505 
	}
}

508 
	$båì_upd©e_key
(

509 
båì_roŸ
 *
roŸ
,

510 
ﬁd_key
,

511 
√w_key
)

513 i‡(!
	`båì_£¨ch
(
roŸ
, 
ﬁd_key
Ë||ÑoŸ->
cur_key
 != old_key)

514  
ENOENT
;

516 i‡(
roŸ
->
√xt_vÆue
 && 
√w_key
 >roŸ->
√xt_key
)

517  
EINVAL
;

519 i‡(
roŸ
->
¥ev_vÆue
 && 
√w_key
 <roŸ->
¥ev_key
)

520  
EINVAL
;

522 
	`båì_upd©e_node_key
(
roŸ
,ÑoŸ->
curs‹
, 0, 
√w_key
);

523 
roŸ
->
cur_key
 = 
√w_key
;

526 
	}
}

529 
	$båì_upd©e_vÆue
(

530 
båì_roŸ
 *
roŸ
,

531 
key
,

532 *
√w_vÆue
)

534 i‡(!
√w_vÆue
)

535  
EINVAL
;

537 i‡(!
	`båì_£¨ch
(
roŸ
, 
key
Ë||ÑoŸ->
cur_key
 != key)

538  
ENOENT
;

540 #ifde‡
BTREE_STATS


541 
roŸ
->
°©s
.
vÆue_upd©e
 += 1;

543 
roŸ
->
curs‹
->
node
->
±rs
[roŸ->curs‹->
ödex
] = 
√w_vÆue
;

546 
	}
}

552 
båì_curs‹
 *

553 
	$båì_c›y_curs‹_¥ev
(

554 
båì_roŸ
 *
roŸ
,

555 
båì_curs‹
 *
de°_curs‹
,

556 
Àvñ
)

558 
båì_curs‹
 *
§c_cur
 = 
roŸ
->
curs‹
 + 
Àvñ
;

559 
båì_curs‹
 *
d°_cur
;

560 
l
 = 
Àvñ
;

561 
i
;

563 i‡(
Àvñ
 >
roŸ
->
height
)

564  
NULL
;

566 
§c_cur
->
ödex
 == 0) {

567 i‡(++
l
 >
roŸ
->
height
)

568  
NULL
;

569 
§c_cur
++;

571 
i
 = 
l
; i < 
roŸ
->
height
; i++)

572 
de°_curs‹
[
i
] = *
§c_cur
++;

574 
d°_cur
 = 
de°_curs‹
 + 
l
;

575 
d°_cur
->
ödex
--;

576 
l
-- >
Àvñ
) {

577 
de°_curs‹
[
l
].
node
 = 
d°_cur
->node->
±rs
[d°_cur->
ödex
];

578 
de°_curs‹
[
l
].
ödex
 = de°_curs‹[l].
node
->
num_keys
;

579 
d°_cur
--;

581  
de°_curs‹
;

582 
	}
}

584 
båì_curs‹
 *

585 
	$båì_c›y_curs‹_√xt
(

586 
båì_roŸ
 *
roŸ
,

587 
båì_curs‹
 *
de°_curs‹
,

588 
Àvñ
)

590 
båì_curs‹
 *
§c_cur
 = 
roŸ
->
curs‹
 + 
Àvñ
;

591 
båì_curs‹
 *
d°_cur
;

592 
l
 = 
Àvñ
;

593 
i
;

595 i‡(
Àvñ
 >
roŸ
->
height
)

596  
NULL
;

598 
§c_cur
->
ödex
 =§c_cur->
node
->
num_keys
) {

599 i‡(++
l
 >
roŸ
->
height
)

600  
NULL
;

601 
§c_cur
++;

603 
i
 = 
l
; i < 
roŸ
->
height
; i++)

604 
de°_curs‹
[
i
] = *
§c_cur
++;

606 
d°_cur
 = 
de°_curs‹
 + 
l
;

607 
d°_cur
->
ödex
++;

608 
l
-- >
Àvñ
) {

609 
de°_curs‹
[
l
].
node
 = 
d°_cur
->node->
±rs
[d°_cur->
ödex
];

610 
de°_curs‹
[
l
].
ödex
 = 0;

611 
d°_cur
--;

613  
de°_curs‹
;

614 
	}
}

625 
	$båì_shi·_to_¥ev
(

626 
båì_roŸ
 *
roŸ
,

627 
Àvñ
,

628 
båì_curs‹
 *
¥ev_curs‹
,

629 
num_chûdªn
)

631 
båì_node
 *
node
;

632 
båì_node
 *
¥ev_node
;

633 
num_ªmaö
;

634 
key
;

635 
i
;

637 i‡(!
¥ev_curs‹
 || !
num_chûdªn
)

640 
¥ev_node
 = 
¥ev_curs‹
[
Àvñ
].
node
;

641 
node
 = 
roŸ
->
curs‹
[
Àvñ
].node;

643 
	`ASSERT
(
num_chûdªn
 > 0 &&Çum_chûdª¿<
node
->
num_keys
 + 1);

645 i‡((
¥ev_node
->
num_keys
 + 
num_chûdªn
Ë> 
BTREE_KEY_MAX
)

648 #ifde‡
BTREE_STATS


649 
roŸ
->
°©s
.
shi·_¥ev
 += 1;

652 
num_ªmaö
 = 
node
->
num_keys
 - 
num_chûdªn
;

653 
	`ASSERT
(
num_ªmaö
 =-1 ||Çum_ªmaö >
BTREE_KEY_MIN
);

656 
Àvñ
++;

657 i‡(
num_ªmaö
 > 0)

658 
key
 = 
node
->
keys
[
num_chûdªn
 - 1];

660 
key
 = 
	`båì_key_of_curs‹
(
roŸ
->
curs‹
 + 
Àvñ
,

661 
roŸ
->
height
 - 
Àvñ
);

662 
¥ev_curs‹
[
Àvñ
].
ödex
 =¥ev_curs‹[Àvñ].
node
->
num_keys
) {

663 
Àvñ
++;

664 
	`ASSERT
(
Àvñ
 < 
roŸ
->
height
);

666 
¥ev_node
->
keys
[¥ev_node->
num_keys
] =

667 
¥ev_curs‹
[
Àvñ
].
node
->
keys
[¥ev_curs‹[Àvñ].
ödex
];

668 
¥ev_curs‹
[
Àvñ
].
node
->
keys
[¥ev_curs‹[Àvñ].
ödex
] = 
key
;

671 
i
 = 0; i < 
num_chûdªn
 - 1; i++) {

672 
¥ev_node
->
keys
[¥ev_node->
num_keys
 + 1 + 
i
] = 
node
->keys[i];

673 
¥ev_node
->
±rs
[¥ev_node->
num_keys
 + 1 + 
i
] = 
node
->ptrs[i];

675 
¥ev_node
->
±rs
[¥ev_node->
num_keys
 + 1 + 
i
] = 
node
->ptrs[i];

676 
¥ev_node
->
num_keys
 +
num_chûdªn
;

679 i‡(
num_ªmaö
 >= 0) {

680 
i
 = 0; i < 
num_ªmaö
; i++) {

681 
node
->
keys
[
i
] =Çode->keys[
num_chûdªn
 + i];

682 
node
->
±rs
[
i
] =Çode->±rs[
num_chûdªn
 + i];

684 
node
->
±rs
[
i
] =Çode->±rs[
num_chûdªn
 + i];

685 
node
->
num_keys
 = 
num_ªmaö
;

687 
node
->
num_keys
 = 0;

689  
num_chûdªn
;

690 
	}
}

693 
	$båì_shi·_to_√xt
(

694 
båì_roŸ
 *
roŸ
,

695 
Àvñ
,

696 
båì_curs‹
 *
√xt_curs‹
,

697 
num_chûdªn
)

699 
båì_node
 *
node
;

700 
båì_node
 *
√xt_node
;

701 
num_ªmaö
;

702 
i
;

704 i‡(!
√xt_curs‹
 || !
num_chûdªn
)

707 
node
 = 
roŸ
->
curs‹
[
Àvñ
].node;

708 
√xt_node
 = 
√xt_curs‹
[
Àvñ
].
node
;

710 
	`ASSERT
(
num_chûdªn
 > 0 &&Çum_chûdª¿<
node
->
num_keys
 + 1);

712 i‡((
√xt_node
->
num_keys
 + 
num_chûdªn
Ë> 
BTREE_KEY_MAX
)

715 
num_ªmaö
 = 
node
->
num_keys
 + 1 - 
num_chûdªn
;

716 
	`ASSERT
(
num_ªmaö
 =0 ||Çum_ªmaö > 
BTREE_KEY_MIN
);

718 #ifde‡
BTREE_STATS


719 
roŸ
->
°©s
.
shi·_√xt
 += 1;

723 
i
 = 
√xt_node
->
num_keys
;

724 
√xt_node
->
±rs
[
num_chûdªn
 + 
i
] =Çext_node->ptrs[i];

725 --
i
 >= 0) {

726 
√xt_node
->
keys
[
num_chûdªn
 + 
i
] =Çext_node->keys[i];

727 
√xt_node
->
±rs
[
num_chûdªn
 + 
i
] =Çext_node->ptrs[i];

732 
Àvñ
++;

733 
	`ASSERT
(
Àvñ
 < 
roŸ
->
height
);

734 } 
roŸ
->
curs‹
[
Àvñ
].
ödex
 ==

735 
roŸ
->
curs‹
[
Àvñ
].
node
->
num_keys
);

737 
√xt_node
->
keys
[
num_chûdªn
 - 1] =

738 
roŸ
->
curs‹
[
Àvñ
].
node
->
keys
[roŸ->curs‹[Àvñ].
ödex
];

739 
roŸ
->
curs‹
[
Àvñ
].
node
->
keys
[roŸ->curs‹[Àvñ].
ödex
] =

740 
node
->
keys
[node->
num_keys
 - 
num_chûdªn
];

743 
i
 = 0; i < 
num_chûdªn
 - 1; i++) {

744 
√xt_node
->
keys
[
i
] = 
node
->keys[
num_ªmaö
 + i];

745 
√xt_node
->
±rs
[
i
] = 
node
->±rs[
num_ªmaö
 + i];

747 
√xt_node
->
±rs
[
i
] = 
node
->±rs[
num_ªmaö
 + i];

748 
√xt_node
->
num_keys
 +
num_chûdªn
;

750 i‡(
num_ªmaö
 > 0)

751 
node
->
num_keys
 -
num_chûdªn
;

753 
node
->
num_keys
 = 0;

755  
num_chûdªn
;

756 
	}
}

762 
båì_node
 *

763 
	$båì_ö¸ó£_height
(

764 
båì_roŸ
 *
roŸ
)

766 
båì_node
 *
√w_roŸ
;

767 
båì_curs‹
 *
√w_curs‹
;

769 
√w_curs‹
 = 
	`ªÆloc
(
roŸ
->
curs‹
, (roŸ->
height
 + 1) *

770 (
båì_curs‹
));

771 i‡(!
√w_curs‹
)

772  
NULL
;

773 
roŸ
->
curs‹
 = 
√w_curs‹
;

775 
√w_roŸ
 = 
	`båì_node_Æloc
();

776 i‡(!
√w_roŸ
)

777  
NULL
;

779 #ifde‡
BTREE_STATS


780 
roŸ
->
°©s
.
Ælo˚d
 += 1;

781 
roŸ
->
°©s
.
öc_height
 += 1;

782 
roŸ
->
°©s
.
max_ôems
 *
BTREE_PTR_MAX
;

785 
√w_roŸ
->
±rs
[0] = 
roŸ
->
roŸ_node
;

786 
roŸ
->
roŸ_node
 = 
√w_roŸ
;

788 
roŸ
->
curs‹
[roŸ->
height
].
node
 = 
√w_roŸ
;

789 
roŸ
->
curs‹
[roŸ->
height
].
ödex
 = 0;

791 
roŸ
->
height
++;

793  
√w_roŸ
;

794 
	}
}

797 
båì_ö£π_ôem
(

798 
båì_roŸ
 *
roŸ
,

799 
Àvñ
,

800 
key
,

801 *
vÆue
);

804 
båì_node
 *

805 
	$båì_•lô
(

806 
båì_roŸ
 *
roŸ
,

807 
Àvñ
,

808 
key
,

809 *
ödex
)

811 
båì_node
 *
node
 = 
roŸ
->
curs‹
[
Àvñ
].node;

812 
båì_node
 *
√w_node
;

813 
i
;

815 
√w_node
 = 
	`båì_node_Æloc
();

816 i‡(!
√w_node
)

817  
NULL
;

819 i‡(
	`båì_ö£π_ôem
(
roŸ
, 
Àvñ
 + 1, 
node
->
keys
[
BTREE_KEY_MIN
],

820 
√w_node
) != 0) {

821 
	`båì_node_‰ì
(
√w_node
);

822  
NULL
;

825 #ifde‡
BTREE_STATS


826 
roŸ
->
°©s
.
Ælo˚d
 += 1;

827 
roŸ
->
°©s
.
•lô
 += 1;

830 
i
 = 0; i < 
BTREE_KEY_MAX
 - 
BTREE_KEY_MIN
 - 1; i++) {

831 
√w_node
->
keys
[
i
] = 
node
->keys[
BTREE_KEY_MIN
 + 1 + i];

832 
√w_node
->
±rs
[
i
] = 
node
->±rs[
BTREE_KEY_MIN
 + 1 + i];

834 
√w_node
->
±rs
[
i
] = 
node
->±rs[
BTREE_KEY_MIN
 + 1 + i];

835 
√w_node
->
num_keys
 = 
BTREE_KEY_MAX
 - 
BTREE_KEY_MIN
 - 1;

837 
node
->
num_keys
 = 
BTREE_KEY_MIN
;

838 i‡(
key
 < 
node
->
keys
[
BTREE_KEY_MIN
])

839  
node
;

842 *
ödex
 -
BTREE_KEY_MIN
 + 1;

843  
√w_node
;

844 
	}
}

847 
	$båì_ö£π_shi·_to_¥ev
(

848 
båì_roŸ
 *
roŸ
,

849 
Àvñ
,

850 *
ödex
)

852 
båì_curs‹
 
tmp_curs‹
[
roŸ
->
height
];

853 
n
;

855 i‡(*
ödex
 <= 0)

858 i‡(!
	`båì_c›y_curs‹_¥ev
(
roŸ
, 
tmp_curs‹
, 
Àvñ
 + 1))

861 
n
 = 
	`MIN
(*
ödex
, (
BTREE_PTR_MAX
 - 
tmp_curs‹
[
Àvñ
].
node
->
num_keys
) / 2);

862 i‡(!
n
 || !
	`båì_shi·_to_¥ev
(
roŸ
, 
Àvñ
, 
tmp_curs‹
,Ç))

865 *
ödex
 -
n
;

867 
	}
}

870 
	$båì_ö£π_shi·_to_√xt
(

871 
båì_roŸ
 *
roŸ
,

872 
Àvñ
,

873 *
ödex
)

875 
båì_curs‹
 
tmp_curs‹
[
roŸ
->
height
];

876 
n
;

878 i‡(*
ödex
 >
BTREE_KEY_MAX
)

881 i‡(!
	`båì_c›y_curs‹_√xt
(
roŸ
, 
tmp_curs‹
, 
Àvñ
 + 1))

884 
n
 = 
	`MIN
(
BTREE_KEY_MAX
 - *
ödex
,

885 (
BTREE_PTR_MAX
 - 
tmp_curs‹
[
Àvñ
].
node
->
num_keys
) / 2);

886 i‡(!
n
 || !
	`båì_shi·_to_√xt
(
roŸ
, 
Àvñ
, 
tmp_curs‹
,Ç))

889 
	}
}

892 
	$båì_ö£π_ôem
(

893 
båì_roŸ
 *
roŸ
,

894 
Àvñ
,

895 
key
,

896 *
vÆue
)

898 
båì_node
 *
node
 = 
roŸ
->
curs‹
[
Àvñ
].node;

899 
ödex
 = 
roŸ
->
curs‹
[
Àvñ
].index;

900 
i
;

902 i‡(
node
->
num_keys
 =
BTREE_KEY_MAX
) {

903 i‡(
	`båì_ö£π_shi·_to_¥ev
(
roŸ
, 
Àvñ
, &
ödex
) == 0)

904 
ö£π
;

905 i‡(
	`båì_ö£π_shi·_to_√xt
(
roŸ
, 
Àvñ
, &
ödex
) == 0)

906 
ö£π
;

907 i‡(
Àvñ
 =
roŸ
->
height
 - 1) {

908 i‡(!
	`båì_ö¸ó£_height
(
roŸ
))

909  
ENOMEM
;

911 
node
 = 
	`båì_•lô
(
roŸ
, 
Àvñ
, 
key
, &
ödex
);

912 i‡(!
node
)

913  
ENOMEM
;

915 
ö£π
:

916 
	`ASSERT
(
ödex
 <
node
->
num_keys
);

918 
i
 = 
node
->
num_keys
;

919 
node
->
±rs
[
i
 + 1] =Çode->ptrs[i];

920 --
i
 >
ödex
) {

921 
node
->
keys
[
i
 + 1] =Çode->keys[i];

922 
node
->
±rs
[
i
 + 1] =Çode->ptrs[i];

925 
node
->
num_keys
++;

926 
node
->
keys
[
ödex
] = 
key
;

928 i‡(
Àvñ
 == 0)

929 
node
->
±rs
[
ödex
] = 
vÆue
;

931 
node
->
±rs
[
ödex
 + 1] = 
vÆue
;

934 
	}
}

939 
	$båì_ö£π
(

940 
båì_roŸ
 *
roŸ
,

941 
key
,

942 *
vÆue
)

944 
ªsu…
;

946 i‡(!
vÆue
)

947  
EINVAL
;

949 i‡(
	`båì_£¨ch
(
roŸ
, 
key
Ë&&ÑoŸ->
cur_key
 == key)

950  
EEXIST
;

952 #ifde‡
BTREE_STATS


953 
roŸ
->
°©s
.
ö£π
 += 1;

954 
roŸ
->
°©s
.
num_ôems
 += 1;

957 
ªsu…
 = 
	`båì_ö£π_ôem
(
roŸ
, 0, 
key
, 
vÆue
);

959 
	`båì_övÆid©e_curs‹
(
roŸ
);

961  
ªsu…
;

962 
	}
}

978 
	$båì_de¸ó£_height
(

979 
båì_roŸ
 *
roŸ
)

981 
båì_node
 *
ﬁd_roŸ
 = 
roŸ
->
roŸ_node
;

983 
	`ASSERT
(
ﬁd_roŸ
->
num_keys
 == 0);

985 #ifde‡
BTREE_STATS


986 
roŸ
->
°©s
.
Ælo˚d
 -= 1;

987 
roŸ
->
°©s
.
dec_height
 += 1;

988 
roŸ
->
°©s
.
max_ôems
 /
BTREE_PTR_MAX
;

990 
roŸ
->
roŸ_node
 = 
ﬁd_roŸ
->
±rs
[0];

991 
	`båì_node_‰ì
(
ﬁd_roŸ
);

992 
roŸ
->
height
--;

993 
	}
}

996 
	$båì_mîge_wôh_¥ev
(

997 
båì_roŸ
 *
roŸ
,

998 
Àvñ
,

999 
båì_curs‹
 *
¥ev_curs‹
)

1001 i‡(!
¥ev_curs‹
)

1004 i‡(!
	`båì_shi·_to_¥ev
(
roŸ
, 
Àvñ
, 
¥ev_curs‹
,

1005 
roŸ
->
curs‹
[
Àvñ
].
node
->
num_keys
 + 1))

1008 #ifde‡
BTREE_STATS


1009 
roŸ
->
°©s
.
mîge_¥ev
 += 1;

1012 
	}
}

1015 
	$båì_mîge_wôh_√xt
(

1016 
båì_roŸ
 *
roŸ
,

1017 
Àvñ
,

1018 
båì_curs‹
 *
√xt_curs‹
)

1020 i‡(!
√xt_curs‹
)

1023 i‡(!
	`båì_shi·_to_√xt
(
roŸ
, 
Àvñ
, 
√xt_curs‹
,

1024 
roŸ
->
curs‹
[
Àvñ
].
node
->
num_keys
 + 1))

1027 #ifde‡
BTREE_STATS


1028 
roŸ
->
°©s
.
mîge_√xt
 += 1;

1031 
	}
}

1034 
	$båì_bÆ™˚_wôh_¥ev
(

1035 
båì_roŸ
 *
roŸ
,

1036 
Àvñ
,

1037 
båì_curs‹
 *
¥ev_curs‹
)

1039 
båì_curs‹
 *
roŸ_curs‹
 = 
roŸ
->
curs‹
;

1041 i‡(!
¥ev_curs‹
)

1043 
	`ASSERT
(
¥ev_curs‹
[
Àvñ
].
node
->
num_keys
 > 
BTREE_KEY_MIN
);

1045 #ifde‡
BTREE_STATS


1046 
roŸ
->
°©s
.
bÆ™˚_¥ev
 += 1;

1055 
roŸ
->
curs‹
 = 
¥ev_curs‹
;

1056 i‡(!
	`båì_shi·_to_√xt
(
roŸ
, 
Àvñ
, 
roŸ_curs‹
,

1057 (
¥ev_curs‹
[
Àvñ
].
node
->
num_keys
 + 1 - 
BTREE_KEY_MIN
) / 2))

1058 
	`ab‹t
();

1059 
roŸ
->
curs‹
 = 
roŸ_curs‹
;

1062 
	}
}

1065 
	$båì_bÆ™˚_wôh_√xt
(

1066 
båì_roŸ
 *
roŸ
,

1067 
Àvñ
,

1068 
båì_curs‹
 *
√xt_curs‹
)

1070 
båì_curs‹
 *
roŸ_curs‹
 = 
roŸ
->
curs‹
;

1072 i‡(!
√xt_curs‹
)

1074 
	`as£π
(
√xt_curs‹
[
Àvñ
].
node
->
num_keys
 > 
BTREE_KEY_MIN
);

1076 #ifde‡
båì_°©s


1077 
roŸ
->
°©s
.
bÆ™˚_√xt
 += 1;

1086 
roŸ
->
curs‹
 = 
√xt_curs‹
;

1087 i‡(!
	`båì_shi·_to_¥ev
(
roŸ
, 
Àvñ
, 
roŸ_curs‹
,

1088 (
√xt_curs‹
[
Àvñ
].
node
->
num_keys
 + 1 - 
BTREE_KEY_MIN
) / 2))

1089 
	`ab‹t
();

1090 
roŸ
->
curs‹
 = 
roŸ_curs‹
;

1094 
	}
}

1097 
båì_dñëe_key
(

1098 
båì_roŸ
 *
roŸ
,

1099 
Àvñ
);

1107 
	$båì_dñëe_node
(

1108 
båì_roŸ
 *
roŸ
,

1109 
Àvñ
)

1111 
båì_curs‹
 
¥ev_curs‹
[
roŸ
->
height
];

1112 
båì_curs‹
 
√xt_curs‹
[
roŸ
->
height
];

1113 
båì_curs‹
 *
pc
;

1114 
båì_curs‹
 *
nc
;

1121 i‡(
Àvñ
 =
roŸ
->
height
 - 1) {

1122 i‡(
Àvñ
 > 0 && 
roŸ
->
roŸ_node
->
num_keys
 == 0)

1123 
	`båì_de¸ó£_height
(
roŸ
);

1127 
pc
 = 
	`båì_c›y_curs‹_¥ev
(
roŸ
, 
¥ev_curs‹
, 
Àvñ
 + 1);

1128 i‡(!
	`båì_mîge_wôh_¥ev
(
roŸ
, 
Àvñ
, 
pc
)) {

1129 
nc
 = 
	`båì_c›y_curs‹_√xt
(
roŸ
, 
√xt_curs‹
, 
Àvñ
 + 1);

1130 i‡(!
	`båì_mîge_wôh_√xt
(
roŸ
, 
Àvñ
, 
nc
)) {

1132 i‡(!
	`båì_bÆ™˚_wôh_¥ev
(
roŸ
, 
Àvñ
, 
pc
) &&

1133 !
	`båì_bÆ™˚_wôh_√xt
(
roŸ
, 
Àvñ
, 
nc
))

1134 
	`ab‹t
();

1139 #ifde‡
BTREE_STATS


1140 
roŸ
->
°©s
.
Ælo˚d
 -= 1;

1142 
	`båì_node_‰ì
(
roŸ
->
curs‹
[
Àvñ
].
node
);

1144 
	`båì_dñëe_key
(
roŸ
, 
Àvñ
 + 1);

1145 
	}
}

1148 
	$båì_dñëe_key
(

1149 
båì_roŸ
 *
roŸ
,

1150 
Àvñ
)

1152 
båì_node
 *
node
 = 
roŸ
->
curs‹
[
Àvñ
].node;

1153 
ödex
 = 
roŸ
->
curs‹
[
Àvñ
].index;

1155 
node
->
num_keys
--;

1156 i‡(
ödex
 <
node
->
num_keys
) {

1161 
ödex
 < 
node
->
num_keys
) {

1162 
node
->
keys
[
ödex
] =Çode->keys[index + 1];

1163 
node
->
±rs
[
ödex
] =Çode->ptrs[index + 1];

1164 
ödex
++;

1166 
node
->
±rs
[
ödex
] =Çode->ptrs[index + 1];

1172 
	`båì_upd©e_node_key
(
roŸ
,ÑoŸ->
curs‹
, 
Àvñ
 + 1,

1173 
node
->
keys
[node->
num_keys
]);

1179 i‡(
node
->
num_keys
 < 
BTREE_KEY_MIN
)

1180 
	`båì_dñëe_node
(
roŸ
, 
Àvñ
);

1181 
	}
}

1184 
	$båì_dñëe
(

1185 
båì_roŸ
 *
roŸ
,

1186 
key
)

1188 *
vÆue
;

1190 
vÆue
 = 
	`båì_lookup
(
roŸ
, 
key
);

1191 i‡(!
vÆue
)

1192  
NULL
;

1194 #ifde‡
BTREE_STATS


1195 
roŸ
->
°©s
.
dñëe
 += 1;

1196 
roŸ
->
°©s
.
num_ôems
 -= 1;

1199 
	`båì_dñëe_key
(
roŸ
, 0);

1201 
	`båì_övÆid©e_curs‹
(
roŸ
);

1203  
vÆue
;

1204 
	}
}

1206 #ifde‡
BTREE_STATS


1208 
	$båì_¥öt_°©s
(

1209 
båì_roŸ
 *
roŸ
,

1210 
FILE
 *
f
)

1212 
max_ôems
 = 
roŸ
->
°©s
.max_items *

1213 (
roŸ
->
roŸ_node
->
num_keys
 + 1);

1215 
	`Ârötf
(
f
, "\tnum_items = %lu, max_items = %lu (%lu%%)\n",

1216 
roŸ
->
°©s
.
num_ôems
, 
max_ôems
,

1217 
roŸ
->
°©s
.
num_ôems
 * 100 / 
max_ôems
);

1218 
	`Ârötf
(
f
, "\talloced = %dÇodes, %lu bytes, %lu bytesÖer item\n",

1219 
roŸ
->
°©s
.
Ælo˚d
,

1220 
roŸ
->
°©s
.
Ælo˚d
 * (
båì_node
),

1221 
roŸ
->
°©s
.
Ælo˚d
 * (
båì_node
) /

1222 
roŸ
->
°©s
.
num_ôems
);

1223 
	`Ârötf
(
f
, "\éooku∞%d\n", 
roŸ
->
°©s
.
lookup
);

1224 
	`Ârötf
(
f
, "\tföd = %d\n", 
roŸ
->
°©s
.
föd
);

1225 
	`Ârötf
(
f
, "\tˇche_hô†%d\n", 
roŸ
->
°©s
.
ˇche_hôs
);

1226 
	`Ârötf
(
f
, "\tˇche_mis£†%d\n", 
roŸ
->
°©s
.
ˇche_mis£s
);

1227 
	`Ârötf
(
f
, "\tkey_upd©ê%d\n", 
roŸ
->
°©s
.
key_upd©e
);

1228 
	`Ârötf
(
f
, "\tvÆue_upd©ê%d\n", 
roŸ
->
°©s
.
vÆue_upd©e
);

1229 
	`Ârötf
(
f
, "\tö£π = %d\n", 
roŸ
->
°©s
.
ö£π
);

1230 
	`Ârötf
(
f
, "\tshi·_¥ev = %d\n", 
roŸ
->
°©s
.
shi·_¥ev
);

1231 
	`Ârötf
(
f
, "\tshi·_√xà%d\n", 
roŸ
->
°©s
.
shi·_√xt
);

1232 
	`Ârötf
(
f
, "\t•lô = %d\n", 
roŸ
->
°©s
.
•lô
);

1233 
	`Ârötf
(
f
, "\töc_heighà%d\n", 
roŸ
->
°©s
.
öc_height
);

1234 
	`Ârötf
(
f
, "\tdñëê%d\n", 
roŸ
->
°©s
.
dñëe
);

1235 
	`Ârötf
(
f
, "\tmîge_¥ev = %d\n", 
roŸ
->
°©s
.
mîge_¥ev
);

1236 
	`Ârötf
(
f
, "\tmîge_√xà%d\n", 
roŸ
->
°©s
.
mîge_√xt
);

1237 
	`Ârötf
(
f
, "\tbÆ™˚_¥ev = %d\n", 
roŸ
->
°©s
.
bÆ™˚_¥ev
);

1238 
	`Ârötf
(
f
, "\tbÆ™˚_√xà%d\n", 
roŸ
->
°©s
.
bÆ™˚_√xt
);

1239 
	`Ârötf
(
f
, "\tdec_heighà%d\n", 
roŸ
->
°©s
.
dec_height
);

1240 
	}
}

	@repair/btree.h

19 #i‚de‡
_BTREE_H


20 
	#_BTREE_H


	)

23 
	gbåì_roŸ
;

26 
båì_öô
(

27 
båì_roŸ
 **
roŸ
);

30 
båì_de°roy
(

31 
båì_roŸ
 *
roŸ
);

34 
båì_is_em±y
(

35 
båì_roŸ
 *
roŸ
);

38 
båì_lookup
(

39 
båì_roŸ
 *
roŸ
,

40 
key
);

43 
båì_föd
(

44 
båì_roŸ
 *
roŸ
,

45 
key
,

46 *
a˘uÆ_key
);

49 
båì_≥ek_¥ev
(

50 
båì_roŸ
 *
roŸ
,

51 *
key
);

54 
båì_≥ek_√xt
(

55 
båì_roŸ
 *
roŸ
,

56 *
key
);

59 
båì_lookup_√xt
(

60 
båì_roŸ
 *
roŸ
,

61 *
key
);

64 
båì_lookup_¥ev
(

65 
båì_roŸ
 *
roŸ
,

66 *
key
);

69 
båì_ö£π
(

70 
båì_roŸ
 *
roŸ
,

71 
key
,

72 *
vÆue
);

75 
båì_dñëe
(

76 
båì_roŸ
 *
roŸ
,

77 
key
);

80 
båì_upd©e_key
(

81 
båì_roŸ
 *
roŸ
,

82 
ﬁd_key
,

83 
√w_key
);

86 
båì_upd©e_vÆue
(

87 
båì_roŸ
 *
roŸ
,

88 
key
,

89 *
√w_vÆue
);

92 
båì_˛ór
(

93 
båì_roŸ
 *
roŸ
);

95 #ifde‡
BTREE_STATS


97 
båì_¥öt_°©s
(

98 
båì_roŸ
 *
roŸ
,

99 
FILE
 *
f
);

	@repair/da_util.c

20 
	~"libxfs.h
"

21 
	~"globÆs.h
"

22 
	~"îr_¥Ÿos.h
"

23 
	~"bm≠.h
"

24 
	~"da_utû.h
"

32 
	$«mecheck
(*
«me
, 
Àngth
)

34 *
c
;

35 
i
;

37 
	`ASSERT
(
Àngth
 < 
MAXNAMELEN
);

39 
c
 = 
«me
, 
i
 = 0; i < 
Àngth
; i++, c++) {

40 i‡(*
c
 == '/' || *c == '\0')

45 
	}
}

72 
xfs_buf
 *

73 
	$da_ªad_buf
(

74 
xfs_mou¡_t
 *
mp
,

75 
√x
,

76 
bm≠_ext_t
 *
bmp
,

77 c⁄° 
xfs_buf_›s
 *
›s
)

79 
	#MAP_ARRAY_SZ
 4

	)

80 
xfs_buf_m≠
 
m≠_¨øy
[
MAP_ARRAY_SZ
];

81 
xfs_buf_m≠
 *
m≠
;

82 
xfs_buf
 *
bp
;

83 
i
;

85 i‡(
√x
 > 
MAP_ARRAY_SZ
) {

86 
m≠
 = 
	`ˇŒoc
(
√x
, (*map));

87 i‡(
m≠
 =
NULL
) {

88 
	`do_îr‹
(
	`_
("couldn't malloc dir2 bufferÜist\n"));

89 
	`exô
(1);

93 
m≠
 = 
m≠_¨øy
;

95 
i
 = 0; i < 
√x
; i++) {

96 
m≠
[
i
].
bm_bn
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
bmp
[i].
°¨tblock
);

97 
m≠
[
i
].
bm_Àn
 = 
	`XFS_FSB_TO_BB
(
mp
, 
bmp
[i].
blockcou¡
);

99 
bp
 = 
	`libxfs_ªadbuf_m≠
(
mp
->
m_dev
, 
m≠
, 
√x
, 0, 
›s
);

100 i‡(
m≠
 !
m≠_¨øy
)

101 
	`‰ì
(
m≠
);

102  
bp
;

103 
	}
}

105 
	#FORKNAME
(
ty≥
Ë—y≥ =
XFS_DATA_FORK
 ? 
	`_
("dúe˘‹y"Ë: _("©åibuã"))

	)

114 
	$åavî£_öt_dablock
(

115 
xfs_mou¡_t
 *
mp
,

116 
da_bt_curs‹_t
 *
da_curs‹
,

117 
xfs_dablk_t
 *
rbno
,

118 
whichf‹k
)

120 
bm≠_ext_t
 *
bmp
;

121 
xfs_dablk_t
 
bno
;

122 
xfs_buf
 *
bp
;

123 
i
;

124 
√x
;

125 
xfs_da_öäode_t
 *
node
;

126 
bm≠_ext_t
 
lbmp
;

127 
xfs_da_geomëry
 *
geo
;

128 
xfs_da_node_íåy
 *
båì
;

129 
xfs_da3_i˙ode_hdr
 
nodehdr
;

131 i‡(
whichf‹k
 =
XFS_DATA_FORK
) {

132 
geo
 = 
mp
->
m_dú_geo
;

133 
bno
 = 
geo
->
Àafblk
;

135 
geo
 = 
mp
->
m_©å_geo
;

136 
bno
 = 0;

144 
i
 = -1;

145 
node
 = 
NULL
;

146 
da_curs‹
->
a˘ive
 = 0;

152 
√x
 = 
	`blkm≠_gën
(
da_curs‹
->
blkm≠
, 
bno
,

153 
geo
->
fsbcou¡
, &
bmp
, &
lbmp
);

155 i‡(
√x
 == 0)

156 
îr‹_out
;

158 
bp
 = 
	`da_ªad_buf
(
mp
, 
√x
, 
bmp
, &
xfs_da3_node_buf_›s
);

159 i‡(
bmp
 !&
lbmp
)

160 
	`‰ì
(
bmp
);

162 i‡(!
bp
) {

163 
	`do_w¨n
(

164 
	`_
("ˇn'àªad %†block %u f‹ inodê%" 
PRIu64
 "\n"),

165 
	`FORKNAME
(
whichf‹k
), 
bno
, 
da_curs‹
->
öo
);

166 
îr‹_out
;

169 
node
 = 
bp
->
b_addr
;

170 
	`M_DIROPS
(
mp
)->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

172 i‡(
whichf‹k
 =
XFS_DATA_FORK
 &&

173 (
nodehdr
.
magic
 =
XFS_DIR2_LEAFN_MAGIC
 ||

174 
nodehdr
.
magic
 =
XFS_DIR3_LEAFN_MAGIC
)) {

175 i‡(
i
 != -1) {

176 
	`do_w¨n
(

177 
	`_
("foundÇ⁄-roŸ LEAFNÇodêö inodê%" 
PRIu64
 " bno = %u\n"),

178 
da_curs‹
->
öo
, 
bno
);

180 *
rbno
 = 0;

181 
	`libxfs_putbuf
(
bp
);

185 i‡(
nodehdr
.
magic
 !
XFS_DA_NODE_MAGIC
 &&

186 
nodehdr
.
magic
 !
XFS_DA3_NODE_MAGIC
) {

187 
	`do_w¨n
(

188 
	`_
("bad %†magi¯numbî 0x%x i¿öodê%" 
PRIu64
 " bno = %u\n"),

189 
	`FORKNAME
(
whichf‹k
), 
nodehdr
.
magic
,

190 
da_curs‹
->
öo
, 
bno
);

191 
	`libxfs_putbuf
(
bp
);

192 
îr‹_out
;

196 i‡(
bp
->
b_îr‹
 =-
EFSBADCRC
 || bp->b_îr‹ =-
EFSCORRUPTED
) {

197 
	`libxfs_putbuf
(
bp
);

198 
	`do_w¨n
(

199 
	`_
("c‹ru± %†åì block %u f‹ inodê%" 
PRIu64
 "\n"),

200 
	`FORKNAME
(
whichf‹k
), 
bno
, 
da_curs‹
->
öo
);

201 
îr‹_out
;

204 
båì
 = 
	`M_DIROPS
(
mp
)->
	`node_åì_p
(
node
);

205 i‡(
nodehdr
.
cou¡
 > 
geo
->
node_íts
) {

206 
	`do_w¨n
(

207 
	`_
("bad %†ªc‹d cou¡ i¿öodê%" 
PRIu64
 ", count = %d, max = %d\n"),

208 
	`FORKNAME
(
whichf‹k
), 
da_curs‹
->
öo
,

209 
nodehdr
.
cou¡
, 
geo
->
node_íts
);

210 
	`libxfs_putbuf
(
bp
);

211 
îr‹_out
;

217 i‡(
i
 == -1) {

218 
i
 = 
da_curs‹
->
a˘ive
 = 
nodehdr
.
Àvñ
;

219 i‡(
i
 < 1 || i >
XFS_DA_NODE_MAXDEPTH
) {

220 
	`do_w¨n
(

221 
	`_
("bad hódî dïth f‹ dúe˘‹y inodê%" 
PRIu64
 "\n"),

222 
da_curs‹
->
öo
);

223 
	`libxfs_putbuf
(
bp
);

224 
i
 = -1;

225 
îr‹_out
;

228 i‡(
nodehdr
.
Àvñ
 =
i
 - 1) {

229 
i
--;

231 
	`do_w¨n
(

232 
	`_
("bad %†båì f‹ inodê%" 
PRIu64
 "\n"),

233 
	`FORKNAME
(
whichf‹k
), 
da_curs‹
->
öo
);

234 
	`libxfs_putbuf
(
bp
);

235 
îr‹_out
;

239 
da_curs‹
->
Àvñ
[
i
].
hashvÆ
 = 
	`be32_to_˝u
(
båì
[0].hashval);

240 
da_curs‹
->
Àvñ
[
i
].
bp
 = bp;

241 
da_curs‹
->
Àvñ
[
i
].
bno
 = bno;

242 
da_curs‹
->
Àvñ
[
i
].
ödex
 = 0;

247 
bno
 = 
	`be32_to_˝u
(
båì
[0].
bef‹e
);

248 } 
node
 !
NULL
 && 
i
 > 1);

253 *
rbno
 = 
da_curs‹
->
Àvñ
[0].
bno
 = bno;

256 
îr‹_out
:

257 
i
 > 1 && i <
da_curs‹
->
a˘ive
) {

258 
	`libxfs_putbuf
(
da_curs‹
->
Àvñ
[
i
].
bp
);

259 
i
++;

263 
	}
}

272 
	$ªÀa£_da_curs‹_öt
(

273 
xfs_mou¡_t
 *
mp
,

274 
da_bt_curs‹_t
 *
curs‹
,

275 
¥ev_Àvñ
,

276 
îr‹
)

278 
Àvñ
 = 
¥ev_Àvñ
 + 1;

280 i‡(
curs‹
->
Àvñ
[Àvñ].
bp
 !
NULL
) {

281 i‡(!
îr‹
) {

282 
	`do_w¨n
(
	`_
("release_da_cursor_int got unexpected "

284 
curs‹
->
Àvñ
[Àvñ].
bno
);

286 
	`ASSERT
(
îr‹
 != 0);

288 
	`libxfs_putbuf
(
curs‹
->
Àvñ
[Àvñ].
bp
);

289 
curs‹
->
Àvñ
[Àvñ].
bp
 = 
NULL
;

292 i‡(
Àvñ
 < 
curs‹
->
a˘ive
)

293 
	`ªÀa£_da_curs‹_öt
(
mp
, 
curs‹
, 
Àvñ
, 
îr‹
);

296 
	}
}

299 
	$ªÀa£_da_curs‹
(

300 
xfs_mou¡_t
 *
mp
,

301 
da_bt_curs‹_t
 *
curs‹
,

302 
¥ev_Àvñ
)

304 
	`ªÀa£_da_curs‹_öt
(
mp
, 
curs‹
, 
¥ev_Àvñ
, 0);

305 
	}
}

308 
	$îr_ªÀa£_da_curs‹
(

309 
xfs_mou¡_t
 *
mp
,

310 
da_bt_curs‹_t
 *
curs‹
,

311 
¥ev_Àvñ
)

313 
	`ªÀa£_da_curs‹_öt
(
mp
, 
curs‹
, 
¥ev_Àvñ
, 1);

314 
	}
}

325 
	$vîify_föÆ_da_∑th
(

326 
xfs_mou¡_t
 *
mp
,

327 
da_bt_curs‹_t
 *
curs‹
,

328 c⁄° 
p_Àvñ
,

329 
whichf‹k
)

331 
xfs_da_öäode_t
 *
node
;

332 
xfs_dahash_t
 
hashvÆ
;

333 
bad
 = 0;

334 
íåy
;

335 
this_Àvñ
 = 
p_Àvñ
 + 1;

336 
xfs_da_node_íåy
 *
båì
;

337 
xfs_da3_i˙ode_hdr
 
nodehdr
;

339 #ifde‡
XR_DIR_TRACE


340 
	`Ârötf
(
°dîr
, "in verify_final_da_path,Åhis_level = %d\n",

341 
this_Àvñ
);

348 
íåy
 = 
curs‹
->
Àvñ
[
this_Àvñ
].
ödex
;

349 
node
 = 
curs‹
->
Àvñ
[
this_Àvñ
].
bp
->
b_addr
;

350 
båì
 = 
	`M_DIROPS
(
mp
)->
	`node_åì_p
(
node
);

351 
	`M_DIROPS
(
mp
)->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

358 i‡(
íåy
 !
nodehdr
.
cou¡
 - 1) {

359 
	`do_w¨n
(

360 
	`_
("%s block used/count inconsistency - %d/%hu\n"),

361 
	`FORKNAME
(
whichf‹k
), 
íåy
, 
nodehdr
.
cou¡
);

362 
bad
++;

367 i‡(
curs‹
->
Àvñ
[
this_Àvñ
].
hashvÆ
 >=

368 
	`be32_to_˝u
(
båì
[
íåy
].
hashvÆ
)) {

369 
	`do_w¨n
(

370 
	`_
("%s block hashvalue inconsistency,Éxpected > %u / saw %u\n"),

371 
	`FORKNAME
(
whichf‹k
),

372 
curs‹
->
Àvñ
[
this_Àvñ
].
hashvÆ
,

373 
	`be32_to_˝u
(
båì
[
íåy
].
hashvÆ
));

374 
bad
++;

376 i‡(
nodehdr
.
f‹w
 != 0) {

377 
	`do_w¨n
(

378 
	`_
("bad %s forward blockÖointer,Éxpected 0, saw %u\n"),

379 
	`FORKNAME
(
whichf‹k
), 
nodehdr
.
f‹w
);

380 
bad
++;

382 i‡(
bad
) {

383 
	`do_w¨n
(
	`_
("bad %†block i¿öodê%" 
PRIu64
 "\n"),

384 
	`FORKNAME
(
whichf‹k
), 
curs‹
->
öo
);

391 i‡(
curs‹
->
Àvñ
[
this_Àvñ
].
bno
 > curs‹->
gª©e°_bno
)

392 
curs‹
->
gª©e°_bno
 = curs‹->
Àvñ
[
this_Àvñ
].
bno
;

397 i‡(
curs‹
->
Àvñ
[
p_Àvñ
].
bno
 !
	`be32_to_˝u
(
båì
[
íåy
].
bef‹e
)) {

398 #ifde‡
XR_DIR_TRACE


399 
	`Ârötf
(
°dîr
, "bad %s btreeÖointer, child bno should "

401 
	`FORKNAME
(
whichf‹k
), 
	`be16_to_˝u
(
båì
[
íåy
].
bef‹e
),

402 
curs‹
->
Àvñ
[
p_Àvñ
].
bno
,

403 
curs‹
->
Àvñ
[
p_Àvñ
].
hashvÆ
);

404 
	`Ârötf
(
°dîr
, "verify_final_da_pathÑeturns 1 (bad) #1a\n");

409 i‡(
curs‹
->
Àvñ
[
p_Àvñ
].
hashvÆ
 !=

410 
	`be32_to_˝u
(
båì
[
íåy
].
hashvÆ
)) {

411 i‡(!
no_modify
) {

412 
	`do_w¨n
(

413 
	`_
("correcting bad hashval inÇon-leaf %s block\n"

414 "\tö (Àvñ %dËö inodê%" 
PRIu64
 ".\n"),

415 
	`FORKNAME
(
whichf‹k
), 
this_Àvñ
, 
curs‹
->
öo
);

416 
båì
[
íåy
].
hashvÆ
 = 
	`˝u_to_be32
(

417 
curs‹
->
Àvñ
[
p_Àvñ
].
hashvÆ
);

418 
curs‹
->
Àvñ
[
this_Àvñ
].
dúty
++;

420 
	`do_w¨n
(

421 
	`_
("would correct bad hashval inÇon-leaf %s block\n"

422 "\tö (Àvñ %dËö inodê%" 
PRIu64
 ".\n"),

423 
	`FORKNAME
(
whichf‹k
), 
this_Àvñ
, 
curs‹
->
öo
);

431 
hashvÆ
 = 
	`be32_to_˝u
(
båì
[
íåy
].hashval);

436 
	`ASSERT
(
curs‹
->
Àvñ
[
this_Àvñ
].
dúty
 == 0 ||

437 (
curs‹
->
Àvñ
[
this_Àvñ
].
dúty
 && !
no_modify
));

439 i‡(
curs‹
->
Àvñ
[
this_Àvñ
].
dúty
 && !
no_modify
)

440 
	`libxfs_wrôebuf
(
curs‹
->
Àvñ
[
this_Àvñ
].
bp
, 0);

442 
	`libxfs_putbuf
(
curs‹
->
Àvñ
[
this_Àvñ
].
bp
);

444 
curs‹
->
Àvñ
[
this_Àvñ
].
bp
 = 
NULL
;

449 i‡(
this_Àvñ
 >
curs‹
->
a˘ive
) {

450 #ifde‡
XR_DIR_TRACE


451 
	`Ârötf
(
°dîr
, "verify_final_da_pathÑeturns 0 (ok)\n");

459 
curs‹
->
Àvñ
[
this_Àvñ
].
hashvÆ
 = hashval;

461  
	`vîify_föÆ_da_∑th
(
mp
, 
curs‹
, 
this_Àvñ
, 
whichf‹k
);

462 
	}
}

504 
	$vîify_da_∑th
(

505 
xfs_mou¡_t
 *
mp
,

506 
da_bt_curs‹_t
 *
curs‹
,

507 c⁄° 
p_Àvñ
,

508 
whichf‹k
)

510 
xfs_da_öäode_t
 *
node
;

511 
xfs_da_öäode_t
 *
√wnode
;

512 
xfs_dablk_t
 
dabno
;

513 
xfs_buf
 *
bp
;

514 
bad
;

515 
íåy
;

516 
this_Àvñ
 = 
p_Àvñ
 + 1;

517 
bm≠_ext_t
 *
bmp
;

518 
√x
;

519 
bm≠_ext_t
 
lbmp
;

520 
xfs_da_geomëry
 *
geo
;

521 
xfs_da_node_íåy
 *
båì
;

522 
xfs_da3_i˙ode_hdr
 
nodehdr
;

524 i‡(
whichf‹k
 =
XFS_DATA_FORK
)

525 
geo
 = 
mp
->
m_dú_geo
;

527 
geo
 = 
mp
->
m_©å_geo
;

533 
íåy
 = 
curs‹
->
Àvñ
[
this_Àvñ
].
ödex
;

534 
node
 = 
curs‹
->
Àvñ
[
this_Àvñ
].
bp
->
b_addr
;

535 
båì
 = 
	`M_DIROPS
(
mp
)->
	`node_åì_p
(
node
);

536 
	`M_DIROPS
(
mp
)->
	`node_hdr_‰om_disk
(&
nodehdr
, 
node
);

543 i‡(
íåy
 >
nodehdr
.
cou¡
) {

549 
curs‹
->
Àvñ
[
this_Àvñ
].
hashvÆ
 =

550 
	`be32_to_˝u
(
båì
[
íåy
 - 1].
hashvÆ
);

556 i‡(
curs‹
->
Àvñ
[
this_Àvñ
].
bno
 > curs‹->
gª©e°_bno
)

557 
curs‹
->
gª©e°_bno
 = curs‹->
Àvñ
[
this_Àvñ
].
bno
;

563 i‡(
	`vîify_da_∑th
(
mp
, 
curs‹
, 
this_Àvñ
, 
whichf‹k
))

568 
dabno
 = 
nodehdr
.
f‹w
;

569 
	`ASSERT
(
dabno
 != 0);

570 
√x
 = 
	`blkm≠_gën
(
curs‹
->
blkm≠
, 
dabno
, 
geo
->
fsbcou¡
,

571 &
bmp
, &
lbmp
);

572 i‡(
√x
 == 0) {

573 
	`do_w¨n
(

574 
	`_
("ˇn'àgë m≠ infÿf‹ %†block %u o‡öodê%" 
PRIu64
 "\n"),

575 
	`FORKNAME
(
whichf‹k
), 
dabno
, 
curs‹
->
öo
);

579 
bp
 = 
	`da_ªad_buf
(
mp
, 
√x
, 
bmp
, &
xfs_da3_node_buf_›s
);

580 i‡(
bmp
 !&
lbmp
)

581 
	`‰ì
(
bmp
);

583 i‡(!
bp
) {

584 
	`do_w¨n
(

585 
	`_
("ˇn'àªad %†block %u f‹ inodê%" 
PRIu64
 "\n"),

586 
	`FORKNAME
(
whichf‹k
), 
dabno
, 
curs‹
->
öo
);

590 
√wnode
 = 
bp
->
b_addr
;

591 
båì
 = 
	`M_DIROPS
(
mp
)->
	`node_åì_p
(
√wnode
);

592 
	`M_DIROPS
(
mp
)->
	`node_hdr_‰om_disk
(&
nodehdr
, 
√wnode
);

598 
bad
 = 0;

599 i‡(
nodehdr
.
magic
 !
XFS_DA_NODE_MAGIC
 &&

600 
nodehdr
.
magic
 !
XFS_DA3_NODE_MAGIC
) {

601 
	`do_w¨n
(

602 
	`_
("bad magi¯numbî %x i¿%†block %u f‹ inodê%" 
PRIu64
 "\n"),

603 
nodehdr
.
magic
, 
	`FORKNAME
(
whichf‹k
),

604 
dabno
, 
curs‹
->
öo
);

605 
bad
++;

607 i‡(
nodehdr
.
back
 !
curs‹
->
Àvñ
[
this_Àvñ
].
bno
) {

608 
	`do_w¨n
(

609 
	`_
("bad backÖoöã∏ö %†block %u f‹ inodê%" 
PRIu64
 "\n"),

610 
	`FORKNAME
(
whichf‹k
), 
dabno
, 
curs‹
->
öo
);

611 
bad
++;

613 i‡(
nodehdr
.
cou¡
 > 
geo
->
node_íts
) {

614 
	`do_w¨n
(

615 
	`_
("íåy cou¡ %dÅoÿœrgêö %†block %u f‹ inodê%" 
PRIu64
 "\n"),

616 
nodehdr
.
cou¡
, 
	`FORKNAME
(
whichf‹k
),

617 
dabno
, 
curs‹
->
öo
);

618 
bad
++;

620 i‡(
nodehdr
.
Àvñ
 !
this_Àvñ
) {

621 
	`do_w¨n
(

622 
	`_
("badÜevñ %d i¿%†block %u f‹ inodê%" 
PRIu64
 "\n"),

623 
nodehdr
.
Àvñ
, 
	`FORKNAME
(
whichf‹k
),

624 
dabno
, 
curs‹
->
öo
);

625 
bad
++;

627 i‡(
bad
) {

628 #ifde‡
XR_DIR_TRACE


629 
	`Ârötf
(
°dîr
, "verify_da_pathÑeturns 1 (bad) #4\n");

631 
	`libxfs_putbuf
(
bp
);

639 
	`ASSERT
(
curs‹
->
Àvñ
[
this_Àvñ
].
dúty
 == 0 ||

640 (
curs‹
->
Àvñ
[
this_Àvñ
].
dúty
 && !
no_modify
));

646 i‡(!
no_modify
 &&

647 
curs‹
->
Àvñ
[
this_Àvñ
].
bp
->
b_îr‹
 =-
EFSBADCRC
)

648 
curs‹
->
Àvñ
[
this_Àvñ
].
dúty
 = 1;

650 i‡(
curs‹
->
Àvñ
[
this_Àvñ
].
dúty
 && !
no_modify
)

651 
	`libxfs_wrôebuf
(
curs‹
->
Àvñ
[
this_Àvñ
].
bp
, 0);

653 
	`libxfs_putbuf
(
curs‹
->
Àvñ
[
this_Àvñ
].
bp
);

656 
curs‹
->
Àvñ
[
this_Àvñ
].
bp
 = bp;

657 
curs‹
->
Àvñ
[
this_Àvñ
].
dúty
 = 0;

658 
curs‹
->
Àvñ
[
this_Àvñ
].
bno
 = 
dabno
;

659 
curs‹
->
Àvñ
[
this_Àvñ
].
hashvÆ
 =

660 
	`be32_to_˝u
(
båì
[0].
hashvÆ
);

662 
íåy
 = 
curs‹
->
Àvñ
[
this_Àvñ
].
ödex
 = 0;

667 i‡(
curs‹
->
Àvñ
[
p_Àvñ
].
bno
 !
	`be32_to_˝u
(
båì
[
íåy
].
bef‹e
)) {

668 #ifde‡
XR_DIR_TRACE


669 
	`Ârötf
(
°dîr
, "bad %s btreeÖointer, child bno "

671 
	`FORKNAME
(
whichf‹k
), 
	`be32_to_˝u
(
båì
[
íåy
].
bef‹e
),

672 
curs‹
->
Àvñ
[
p_Àvñ
].
bno
,

673 
curs‹
->
Àvñ
[
p_Àvñ
].
hashvÆ
);

674 
	`Ârötf
(
°dîr
, "verify_da_pathÑeturns 1 (bad) #1a\n");

682 i‡(
curs‹
->
Àvñ
[
p_Àvñ
].
hashvÆ
 !=

683 
	`be32_to_˝u
(
båì
[
íåy
].
hashvÆ
)) {

684 i‡(!
no_modify
) {

685 
	`do_w¨n
(

686 
	`_
("correcting bad hashval in interior %s block\n"

687 "\tö (Àvñ %dËö inodê%" 
PRIu64
 ".\n"),

688 
	`FORKNAME
(
whichf‹k
), 
this_Àvñ
, 
curs‹
->
öo
);

689 
båì
[
íåy
].
hashvÆ
 = 
	`˝u_to_be32
(

690 
curs‹
->
Àvñ
[
p_Àvñ
].
hashvÆ
);

691 
curs‹
->
Àvñ
[
this_Àvñ
].
dúty
++;

693 
	`do_w¨n
(

694 
	`_
("would correct bad hashval in interior %s block\n"

695 "\tö (Àvñ %dËö inodê%" 
PRIu64
 ".\n"),

696 
	`FORKNAME
(
whichf‹k
), 
this_Àvñ
, 
curs‹
->
öo
);

703 
curs‹
->
Àvñ
[
this_Àvñ
].
ödex
++;

704 #ifde‡
XR_DIR_TRACE


705 
	`Ârötf
(
°dîr
, "verify_da_pathÑeturns 0 (ok)\n");

708 
	}
}

	@repair/da_util.h

19 #i‚de‡
_XR_DA_UTIL_H


20 
	#_XR_DA_UTIL_H


	)

22 
	sda_Àvñ_°©e
 {

23 
xfs_buf_t
 *
	mbp
;

24 
xfs_dablk_t
 
	mbno
;

25 
xfs_dahash_t
 
	mhashvÆ
;

26 
	mödex
;

27 
	mdúty
;

30 
	sda_bt_curs‹
 {

31 
	ma˘ive
;

32 
xfs_öo_t
 
	möo
;

33 
xfs_dablk_t
 
	mgª©e°_bno
;

34 
xfs_döode_t
 *
	mdù
;

35 
da_Àvñ_°©e
 
	mÀvñ
[
XFS_DA_NODE_MAXDEPTH
];

36 
blkm≠
 *
	mblkm≠
;

37 } 
	tda_bt_curs‹_t
;

40 
«mecheck
(

41 *
«me
,

42 
Àngth
);

44 
xfs_buf
 *

45 
da_ªad_buf
(

46 
xfs_mou¡_t
 *
mp
,

47 
√x
,

48 
bm≠_ext_t
 *
bmp
,

49 c⁄° 
xfs_buf_›s
 *
›s
);

52 
ªÀa£_da_curs‹
(

53 
xfs_mou¡_t
 *
mp
,

54 
da_bt_curs‹_t
 *
curs‹
,

55 
¥ev_Àvñ
);

58 
îr_ªÀa£_da_curs‹
(

59 
xfs_mou¡_t
 *
mp
,

60 
da_bt_curs‹_t
 *
curs‹
,

61 
¥ev_Àvñ
);

64 
åavî£_öt_dablock
(

65 
xfs_mou¡_t
 *
mp
,

66 
da_bt_curs‹_t
 *
da_curs‹
,

67 
xfs_dablk_t
 *
rbno
,

68 
whichf‹k
);

71 
vîify_da_∑th
(

72 
xfs_mou¡_t
 *
mp
,

73 
da_bt_curs‹_t
 *
curs‹
,

74 c⁄° 
p_Àvñ
,

75 
whichf‹k
);

78 
vîify_föÆ_da_∑th
(

79 
xfs_mou¡_t
 *
mp
,

80 
da_bt_curs‹_t
 *
curs‹
,

81 c⁄° 
p_Àvñ
,

82 
whichf‹k
);

	@repair/dino_chunks.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

21 
	~"globÆs.h
"

22 
	~"aghódî.h
"

23 
	~"öc‹e.h
"

24 
	~"¥Ÿos.h
"

25 
	~"îr_¥Ÿos.h
"

26 
	~"döode.h
"

27 
	~"vîsi⁄s.h
"

28 
	~"¥e„tch.h
"

29 
	~"¥ogªss.h
"

37 
	$check_agöode_block
(
xfs_mou¡_t
 *
mp
,

38 
xfs_agnumbî_t
 
agno
,

39 
xfs_agblock_t
 
agbno
)

42 
xfs_döode_t
 *
döo_p
;

43 
i
;

44 
˙t
 = 0;

45 
xfs_buf_t
 *
bp
;

54 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
	`XFS_AGB_TO_DADDR
(mp, 
agno
, 
agbno
),

55 
	`XFS_FSB_TO_BB
(
mp
, 1), 0, 
NULL
);

56 i‡(!
bp
) {

57 
	`do_w¨n
(
	`_
("ˇ¬ŸÑódágbnÿ(%u/%u), disk block %" 
PRId64
 "\n"),

58 
agno
, 
agbno
, 
	`XFS_AGB_TO_DADDR
(
mp
,ágno,ágbno));

62 
i
 = 0; i < 
mp
->
m_sb
.
sb_ö›block
; i++) {

63 
döo_p
 = 
	`xfs_make_ùå
(
mp
, 
bp
, 
i
);

64 i‡(!
	`vîify_un˚πaö_döode
(
mp
, 
döo_p
, 
agno
,

65 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
agbno
, 
i
)))

66 
˙t
++;

68 i‡(
˙t
)

69 
bp
->
b_›s
 = &
xfs_öode_buf_›s
;

71 
	`libxfs_putbuf
(
bp
);

72 (
˙t
);

73 
	}
}

89 
	$vîify_öode_chunk
(
xfs_mou¡_t
 *
mp
,

90 
xfs_öo_t
 
öo
,

91 
xfs_öo_t
 *
°¨t_öo
)

93 
xfs_agnumbî_t
 
agno
;

94 
xfs_agöo_t
 
agöo
;

95 
xfs_agöo_t
 
°¨t_agöo
;

96 
xfs_agblock_t
 
agbno
;

97 
xfs_agblock_t
 
°¨t_agbno
 = 0;

98 
xfs_agblock_t
 
íd_agbno
;

99 
xfs_agblock_t
 
max_agbno
;

100 
xfs_agblock_t
 
cur_agbno
;

101 
xfs_agblock_t
 
chunk_°¨t_agbno
;

102 
xfs_agblock_t
 
chunk_°›_agbno
;

103 
öo_åì_node_t
 *
úec_bef‹e_p
 = 
NULL
;

104 
öo_åì_node_t
 *
úec_a·î_p
 = 
NULL
;

105 
öo_åì_node_t
 *
úec_p
;

106 
öo_åì_node_t
 *
úec_√xt_p
;

107 
úec_˙t
;

108 
öo_˙t
 = 0;

109 
num_blks
;

110 
i
;

111 
j
;

112 
°©e
;

113 
xfs_exéí_t
 
bÀn
;

115 
agno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
öo
);

116 
agöo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
);

117 
agbno
 = 
	`XFS_INO_TO_AGBNO
(
mp
, 
öo
);

118 *
°¨t_öo
 = 
NULLFSINO
;

120 
	`ASSERT
(
mp
->
m_üŒoc_blks
 > 0);

122 i‡(
agno
 =
mp
->
m_sb
.
sb_agcou¡
 - 1)

123 
max_agbno
 = 
mp
->
m_sb
.
sb_dblocks
 -

124 (
xfs_rfsblock_t
Ë
mp
->
m_sb
.
sb_agblocks
 * 
agno
;

126 
max_agbno
 = 
mp
->
m_sb
.
sb_agblocks
;

131 i‡(
agbno
 >
max_agbno
)

138 i‡(
mp
->
m_üŒoc_blks
 == 1) {

139 i‡(
agbno
 > 
max_agbno
)

141 i‡(
	`check_agöode_block
(
mp
, 
agno
, 
agöo
) == 0)

144 
	`±hªad_muãx_lock
(&
ag_locks
[
agno
].
lock
);

146 
°©e
 = 
	`gë_bm≠
(
agno
, 
agbno
);

147 
°©e
) {

148 
XR_E_INO
:

149 
	`do_w¨n
(

150 
	`_
("uncertain inode block %d/%dálready known\n"),

151 
agno
, 
agbno
);

153 
XR_E_UNKNOWN
:

154 
XR_E_FREE1
:

155 
XR_E_FREE
:

156 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_INO
);

158 
XR_E_MULT
:

159 
XR_E_INUSE
:

160 
XR_E_INUSE_FS
:

161 
XR_E_FS_MAP
:

165 
	`do_w¨n
(

166 
	`_
("inode block %d/%d multiply claimed, (state %d)\n"),

167 
agno
, 
agbno
, 
°©e
);

168 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_MULT
);

169 
	`±hªad_muãx_u∆ock
(&
ag_locks
[
agno
].
lock
);

172 
	`do_w¨n
(

173 
	`_
("inode block %d/%d bad state, (state %d)\n"),

174 
agno
, 
agbno
, 
°©e
);

175 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_INO
);

179 
	`±hªad_muãx_u∆ock
(&
ag_locks
[
agno
].
lock
);

181 
°¨t_agöo
 = 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
agbno
, 0);

182 *
°¨t_öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
°¨t_agöo
);

187 
j
 = 0; j < 
chunks_pblock
; j++) {

188 i‡((
úec_p
 = 
	`föd_öode_ªc
(
mp
, 
agno
, 
°¨t_agöo
))

189 =
NULL
) {

190 
úec_p
 = 
	`£t_öode_‰ì_Æloc
(
mp
, 
agno
,

191 
°¨t_agöo
);

192 
i
 = 1; i < 
XFS_INODES_PER_CHUNK
; i++)

193 
	`£t_öode_‰ì
(
úec_p
, 
i
);

195 i‡(
°¨t_agöo
 <
agöo
 &&ágino <

196 
°¨t_agöo
 + 
XFS_INODES_PER_CHUNK
)

197 
	`£t_öode_u£d
(
úec_p
, 
agöo
 - 
°¨t_agöo
);

199 
°¨t_agöo
 +
XFS_INODES_PER_CHUNK
;

200 
öo_˙t
 +
XFS_INODES_PER_CHUNK
;

203 (
öo_˙t
);

204 } i‡(
fs_Æig√d_öodes
) {

209 
°¨t_agbno
 = 
	`rounddown
(
	`XFS_INO_TO_AGBNO
(
mp
, 
öo
),

210 
fs_öo_Æignmít
);

211 
íd_agbno
 = 
°¨t_agbno
 + 
mp
->
m_üŒoc_blks
;

218 i‡(
íd_agbno
 > 
max_agbno
)

224 
öo_˙t
 = 0;

225 
cur_agbno
 = 
°¨t_agbno
; cur_agbnÿ< 
íd_agbno
;

226 
cur_agbno
++) {

227 
öo_˙t
 +
	`check_agöode_block
(
mp
, 
agno
, 
cur_agbno
);

234 i‡(
öo_˙t
 < 
XFS_INODES_PER_CHUNK
 - 2 * 
mp
->
m_sb
.
sb_ö›block


235 || 
öo_˙t
 < 
XFS_INODES_PER_CHUNK
 - 16)

241 i‡(
	`föd_un˚πaö_öode_ªc
(
agno
,

242 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
°¨t_agbno
, 0)))

245 
°¨t_agöo
 = 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
°¨t_agbno
, 0);

246 *
°¨t_öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
°¨t_agöo
);

248 
úec_p
 = 
	`£t_öode_‰ì_Æloc
(
mp
, 
agno
,

249 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
°¨t_agbno
, 0));

251 
i
 = 1; i < 
XFS_INODES_PER_CHUNK
; i++)

252 
	`£t_öode_‰ì
(
úec_p
, 
i
);

254 
	`ASSERT
(
°¨t_agöo
 <
agöo
 &&

255 
°¨t_agöo
 + 
XFS_INODES_PER_CHUNK
 > 
agöo
);

257 
	`£t_öode_u£d
(
úec_p
, 
agöo
 - 
°¨t_agöo
);

259 (
XFS_INODES_PER_CHUNK
);

269 i‡(
mp
->
m_üŒoc_blks
 > 1) {

270 i‡(
agöo
 > 
mp
->
m_üŒoc_öos
)

271 
°¨t_agbno
 = 
agbno
 - 
mp
->
m_üŒoc_blks
 + 1;

273 
°¨t_agbno
 = 1;

276 
íd_agbno
 = 
agbno
 + 
mp
->
m_üŒoc_blks
;

278 i‡(
íd_agbno
 > 
max_agbno
)

279 
íd_agbno
 = 
max_agbno
;

284 
úec_bef‹e_p
 = 
úec_a·î_p
 = 
NULL
;

286 
	`föd_öode_ªc_ønge
(
mp
, 
agno
, 
	`XFS_OFFBNO_TO_AGINO
(mp, 
°¨t_agbno
, 0),

287 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
íd_agbno
, mp->
m_sb
.
sb_ö›block
 - 1),

288 &
úec_bef‹e_p
, &
úec_a·î_p
);

296 i‡(
úec_bef‹e_p
) {

300 i‡(
úec_bef‹e_p
 =
úec_a·î_p
) {

301 i‡(
úec_bef‹e_p
->
öo_°¨äum
 < 
agöo
)

302 
°¨t_agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
,

303 
úec_bef‹e_p
->
öo_°¨äum
 +

304 
XFS_INODES_PER_CHUNK
);

306 
íd_agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
,

307 
úec_bef‹e_p
->
öo_°¨äum
);

318 i‡(
úec_bef‹e_p
->
öo_°¨äum
 < 
agöo
) {

319 
úec_p
 = 
úec_bef‹e_p
;

320 
úec_√xt_p
 = 
	`√xt_öo_ªc
(
úec_p
);

322 
úec_√xt_p
 !
NULL
 &&

323 
úec_p
->
öo_°¨äum
 + 
XFS_INODES_PER_CHUNK
 ==

324 
úec_√xt_p
->
öo_°¨äum
) {

325 
úec_p
 = 
úec_√xt_p
;

326 
úec_√xt_p
 = 
	`√xt_öo_ªc
(irec_next_p);

329 
°¨t_agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
,

330 
úec_p
->
öo_°¨äum
) +

331 
mp
->
m_üŒoc_blks
;

338 i‡(
úec_√xt_p
 !
NULL
 &&

339 
agöo
 + 
mp
->
m_üŒoc_öos
 >=

340 
úec_√xt_p
->
öo_°¨äum
)

341 
íd_agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
,

342 
úec_√xt_p
->
öo_°¨äum
);

345 
	`ASSERT
(
°¨t_agbno
 < 
íd_agbno
);

354 i‡(
íd_agbno
 - 
°¨t_agbno
 < 
mp
->
m_üŒoc_blks
)

369 
cur_agbno
 = 
agbno
; cur_agbnÿ>
°¨t_agbno
; cur_agbno--) {

375 i‡(!(
úec_˙t
 = 
	`check_agöode_block
(
mp
, 
agno
, 
cur_agbno
)))

377 
öo_˙t
 +
úec_˙t
;

380 
chunk_°¨t_agbno
 = 
cur_agbno
 + 1;

382 
cur_agbno
 = 
agbno
 + 1; cur_agbnÿ< 
íd_agbno
; cur_agbno++) {

389 i‡(!(
úec_˙t
 = 
	`check_agöode_block
(
mp
, 
agno
, 
cur_agbno
)))

391 
öo_˙t
 +
úec_˙t
;

394 
chunk_°›_agbno
 = 
cur_agbno
;

396 
num_blks
 = 
chunk_°›_agbno
 - 
chunk_°¨t_agbno
;

398 i‡(
num_blks
 < 
mp
->
m_üŒoc_blks
 || 
öo_˙t
 == 0)

414 i‡(
num_blks
 % 
mp
->
m_üŒoc_blks
 != 0) {

415 
num_blks
 = 
	`rounddown
“um_blks, 
mp
->
m_üŒoc_blks
);

416 
chunk_°›_agbno
 = 
chunk_°¨t_agbno
 + 
num_blks
;

427 
	`±hªad_muãx_lock
(&
ag_locks
[
agno
].
lock
);

428 
cur_agbno
 = 
chunk_°¨t_agbno
;

429 
cur_agbno
 < 
chunk_°›_agbno
;

430 
cur_agbno
 +
bÀn
) {

431 
°©e
 = 
	`gë_bm≠_ext
(
agno
, 
cur_agbno
, 
chunk_°›_agbno
, &
bÀn
);

432 
°©e
) {

433 
XR_E_MULT
:

434 
XR_E_INUSE
:

435 
XR_E_INUSE_FS
:

436 
XR_E_FS_MAP
:

437 
	`do_w¨n
(

438 
	`_
("inode block %d/%d multiply claimed, (state %d)\n"),

439 
agno
, 
cur_agbno
, 
°©e
);

440 
	`£t_bm≠_ext
(
agno
, 
cur_agbno
, 
bÀn
, 
XR_E_MULT
);

441 
	`±hªad_muãx_u∆ock
(&
ag_locks
[
agno
].
lock
);

443 
XR_E_INO
:

444 
	`do_îr‹
(

445 
	`_
("un˚πaö inodêblock ovîœp,ágbnÿ%d, inÿ%" 
PRIu64
 "\n"),

446 
agbno
, 
öo
);

452 
	`±hªad_muãx_u∆ock
(&
ag_locks
[
agno
].
lock
);

461 
°¨t_agöo
 = 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
chunk_°¨t_agbno
, 0);

462 *
°¨t_öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
°¨t_agöo
);

464 
	`ASSERT
(
	`föd_öode_ªc
(
mp
, 
agno
, 
°¨t_agöo
Ë=
NULL
);

466 
úec_p
 = 
	`£t_öode_‰ì_Æloc
(
mp
, 
agno
, 
°¨t_agöo
);

467 
i
 = 1; i < 
XFS_INODES_PER_CHUNK
; i++)

468 
	`£t_öode_‰ì
(
úec_p
, 
i
);

470 
	`ASSERT
(
°¨t_agöo
 <
agöo
 &&

471 
°¨t_agöo
 + 
XFS_INODES_PER_CHUNK
 > 
agöo
);

473 
	`£t_öode_u£d
(
úec_p
, 
agöo
 - 
°¨t_agöo
);

475 
	`±hªad_muãx_lock
(&
ag_locks
[
agno
].
lock
);

477 
cur_agbno
 = 
chunk_°¨t_agbno
;

478 
cur_agbno
 < 
chunk_°›_agbno
;

479 
cur_agbno
 +
bÀn
) {

480 
°©e
 = 
	`gë_bm≠_ext
(
agno
, 
cur_agbno
, 
chunk_°›_agbno
, &
bÀn
);

481 
°©e
) {

482 
XR_E_INO
:

483 
	`do_îr‹
(

484 
	`_
("un˚πaö inodêblock %" 
PRIu64
 "álready known\n"),

485 
	`XFS_AGB_TO_FSB
(
mp
, 
agno
, 
cur_agbno
));

487 
XR_E_UNKNOWN
:

488 
XR_E_FREE1
:

489 
XR_E_FREE
:

490 
	`£t_bm≠_ext
(
agno
, 
cur_agbno
, 
bÀn
, 
XR_E_INO
);

492 
XR_E_MULT
:

493 
XR_E_INUSE
:

494 
XR_E_INUSE_FS
:

495 
XR_E_FS_MAP
:

496 
	`do_îr‹
(

497 
	`_
("inode block %d/%d multiply claimed, (state %d)\n"),

498 
agno
, 
cur_agbno
, 
°©e
);

501 
	`do_w¨n
(

502 
	`_
("inode block %d/%d bad state, (state %d)\n"),

503 
agno
, 
cur_agbno
, 
°©e
);

504 
	`£t_bm≠_ext
(
agno
, 
cur_agbno
, 
bÀn
, 
XR_E_INO
);

508 
	`±hªad_muãx_u∆ock
(&
ag_locks
[
agno
].
lock
);

510 (
öo_˙t
);

511 
	}
}

517 
	$vîify_agöode_chunk
(
xfs_mou¡_t
 *
mp
,

518 
xfs_agnumbî_t
 
agno
,

519 
xfs_agöo_t
 
agöo
,

520 
xfs_agöo_t
 *
agöo_°¨t
)

522 
xfs_öo_t
 
öo
;

523 
ªs
;

525 
ªs
 = 
	`vîify_öode_chunk
(
mp
, 
	`XFS_AGINO_TO_INO
(mp, 
agno
, 
agöo
), &
öo
);

527 i‡(
ªs
)

528 *
agöo_°¨t
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
);

530 *
agöo_°¨t
 = 
NULLAGINO
;

532 (
ªs
);

533 
	}
}

539 
öo_åì_node_t
 *

540 
	$vîify_agöode_chunk_úec
(
xfs_mou¡_t
 *
mp
,

541 
xfs_agnumbî_t
 
agno
,

542 
xfs_agöo_t
 
agöo
)

544 
xfs_agöo_t
 
°¨t_agöo
;

545 
öo_åì_node_t
 *
úec
 = 
NULL
;

547 i‡(
	`vîify_agöode_chunk
(
mp
, 
agno
, 
agöo
, &
°¨t_agöo
))

548 
úec
 = 
	`föd_öode_ªc
(
mp
, 
agno
, 
°¨t_agöo
);

550 (
úec
);

551 
	}
}

560 
	$¥o˚ss_öode_agbno_°©e
(

561 
xfs_mou¡
 *
mp
,

562 
xfs_agnumbî_t
 
agno
,

563 
xfs_agblock_t
 
agbno
)

565 
°©e
;

567 
	`±hªad_muãx_lock
(&
ag_locks
[
agno
].
lock
);

568 
°©e
 = 
	`gë_bm≠
(
agno
, 
agbno
);

569 
°©e
) {

570 
XR_E_INO
:

572 
XR_E_UNKNOWN
:

573 
XR_E_FREE
:

574 
XR_E_FREE1
:

575 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_INO
);

577 
XR_E_BAD_STATE
:

578 
	`do_îr‹
(
	`_
("bad sèã i¿block m≠ %d\n"), 
°©e
);

581 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_MULT
);

582 
	`do_w¨n
(

583 
	`_
("öodêblock %" 
PRIu64
 " multiply claimed, state was %d\n"),

584 
	`XFS_AGB_TO_FSB
(
mp
, 
agno
, 
agbno
), 
°©e
);

587 
	`±hªad_muãx_u∆ock
(&
ag_locks
[
agno
].
lock
);

588 
	}
}

597 
	$¥o˚ss_öode_chunk
(

598 
xfs_mou¡_t
 *
mp
,

599 
xfs_agnumbî_t
 
agno
,

600 
num_öos
,

601 
öo_åì_node_t
 *
fú°_úec
,

602 
öo_discovîy
,

603 
check_dups
,

604 
exåa_©å_check
,

605 *
bogus
)

607 
xfs_öo_t
 
∑ª¡
;

608 
öo_åì_node_t
 *
öo_ªc
;

609 
xfs_buf_t
 **
b∂i°
;

610 
xfs_döode_t
 *
döo
;

611 
i˙t
;

612 
°©us
;

613 
is_u£d
;

614 
öo_dúty
;

615 
úec_off£t
;

616 
ibuf_off£t
;

617 
xfs_agöo_t
 
agöo
;

618 
xfs_agblock_t
 
agbno
;

619 
xfs_öo_t
 
öo
;

620 
dúty
 = 0;

621 
iß_dú
 = 0;

622 
blks_≥r_˛u°î
;

623 
˛u°î_cou¡
;

624 
bp_ödex
;

625 
˛u°î_off£t
;

627 
	`ASSERT
(
fú°_úec
 !
NULL
);

628 
	`ASSERT
(
	`XFS_AGINO_TO_OFFSET
(
mp
, 
fú°_úec
->
öo_°¨äum
) == 0);

630 *
bogus
 = 0;

631 
	`ASSERT
(
mp
->
m_üŒoc_blks
 > 0);

633 
blks_≥r_˛u°î
 = 
mp
->
m_öode_˛u°î_size
 >> mp->
m_sb
.
sb_blocklog
;

634 i‡(
blks_≥r_˛u°î
 == 0)

635 
blks_≥r_˛u°î
 = 1;

636 
˛u°î_cou¡
 = 
XFS_INODES_PER_CHUNK
 / 
öodes_≥r_˛u°î
;

637 i‡(
˛u°î_cou¡
 == 0)

638 
˛u°î_cou¡
 = 1;

644 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
fú°_úec
->
öo_°¨äum
);

649 
öo_ªc
 = 
fú°_úec
;

650 
úec_off£t
 = 0;

652 
b∂i°
 = 
	`mÆloc
(
˛u°î_cou¡
 * (
xfs_buf_t
 *));

653 i‡(
b∂i°
 =
NULL
)

654 
	`do_îr‹
(
	`_
("failedÅoállocate %zd bytes of memory\n"),

655 
˛u°î_cou¡
 * (
xfs_buf_t
 *));

657 
bp_ödex
 = 0; bp_ödex < 
˛u°î_cou¡
; bp_index++) {

663 i‡(
	`is_öode_•¨£
(
öo_ªc
, 
úec_off£t
)) {

664 
	`p·ø˚
("skip sparse inode, startnum 0x%x idx %d",

665 
öo_ªc
->
öo_°¨äum
, 
úec_off£t
);

666 
b∂i°
[
bp_ödex
] = 
NULL
;

667 
√xt_ªadbuf
;

670 
	`p·ø˚
("aboutÅoÑead off %llu in AG %d",

671 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),ágno);

673 
b∂i°
[
bp_ödex
] = 
	`libxfs_ªadbuf
(
mp
->
m_dev
,

674 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

675 
	`XFS_FSB_TO_BB
(
mp
, 
blks_≥r_˛u°î
), 0,

676 &
xfs_öode_buf_›s
);

677 i‡(!
b∂i°
[
bp_ödex
]) {

678 
	`do_w¨n
(
	`_
("ˇ¬ŸÑód inodê%" 
PRIu64
 ", disk block %" 
PRId64
 ", cnt %d\n"),

679 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
fú°_úec
->
öo_°¨äum
),

680 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

681 
	`XFS_FSB_TO_BB
(
mp
, 
blks_≥r_˛u°î
));

682 
bp_ödex
 > 0) {

683 
bp_ödex
--;

684 
	`libxfs_putbuf
(
b∂i°
[
bp_ödex
]);

686 
	`‰ì
(
b∂i°
);

690 
	`p·ø˚
("ªadbu‡%∞(%Œu, %dËö AG %d", 
b∂i°
[
bp_ödex
],

691 ()
	`XFS_BUF_ADDR
(
b∂i°
[
bp_ödex
]),

692 
	`XFS_BUF_COUNT
(
b∂i°
[
bp_ödex
]), 
agno
);

694 
b∂i°
[
bp_ödex
]->
b_›s
 = &
xfs_öode_buf_›s
;

696 
√xt_ªadbuf
:

697 
úec_off£t
 +
mp
->
m_sb
.
sb_ö›block
 * 
blks_≥r_˛u°î
;

698 
agbno
 +
blks_≥r_˛u°î
;

700 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
fú°_úec
->
öo_°¨äum
);

705 
úec_off£t
 = 0;

706 
ibuf_off£t
 = 0;

707 
˛u°î_off£t
 = 0;

708 
i˙t
 = 0;

709 
°©us
 = 0;

710 
bp_ödex
 = 0;

715 i‡(
öo_discovîy
) {

717 
agöo
 = 
úec_off£t
 + 
öo_ªc
->
öo_°¨äum
;

720 i‡(
b∂i°
[
bp_ödex
]) {

722 
döo
 = 
	`xfs_make_ùå
(
mp
, 
b∂i°
[
bp_ödex
],

723 
˛u°î_off£t
);

731 i‡(
	`vîify_döode
(
mp
, 
döo
, 
agno
, 
agöo
) == 0 ||

732 (
agno
 == 0 &&

733 (
mp
->
m_sb
.
sb_roŸöo
 =
agöo
 ||

734 
mp
->
m_sb
.
sb_rsumöo
 =
agöo
 ||

735 
mp
->
m_sb
.
sb_rbmöo
 =
agöo
)))

736 
°©us
++;

739 
úec_off£t
++;

740 
i˙t
++;

741 
˛u°î_off£t
++;

743 i‡(
i˙t
 =
mp
->
m_üŒoc_öos
 &&

744 
úec_off£t
 =
XFS_INODES_PER_CHUNK
) {

750 } i‡(
úec_off£t
 =
XFS_INODES_PER_CHUNK
) {

754 
öo_ªc
 = 
	`√xt_öo_ªc
(ino_rec);

755 
	`ASSERT
(
öo_ªc
->
öo_°¨äum
 =
agöo
 + 1);

756 
úec_off£t
 = 0;

758 i‡(
˛u°î_off£t
 =
öodes_≥r_˛u°î
) {

759 
bp_ödex
++;

760 
˛u°î_off£t
 = 0;

768 i‡(!
°©us
) {

769 *
bogus
 = 1;

770 
bp_ödex
 = 0; bp_ödex < 
˛u°î_cou¡
; bp_index++)

771 i‡(
b∂i°
[
bp_ödex
])

772 
	`libxfs_putbuf
(
b∂i°
[
bp_ödex
]);

773 
	`‰ì
(
b∂i°
);

780 
öo_ªc
 = 
fú°_úec
;

782 
úec_off£t
 = 0;

783 
˛u°î_off£t
 = 0;

784 
bp_ödex
 = 0;

785 
i˙t
 = 0;

786 
°©us
 = 0;

792 i‡(!
	`is_öode_•¨£
(
öo_ªc
, 
úec_off£t
))

793 
	`¥o˚ss_öode_agbno_°©e
(
mp
, 
agno
, 
agbno
);

796 
agöo
 = 
úec_off£t
 + 
öo_ªc
->
öo_°¨äum
;

797 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
);

799 i‡(
	`is_öode_•¨£
(
öo_ªc
, 
úec_off£t
))

800 
¥o˚ss_√xt
;

803 
döo
 = 
	`xfs_make_ùå
(
mp
, 
b∂i°
[
bp_ödex
], 
˛u°î_off£t
);

806 
is_u£d
 = 3;

807 
öo_dúty
 = 0;

808 
∑ª¡
 = 0;

810 
°©us
 = 
	`¥o˚ss_döode
(
mp
, 
döo
, 
agno
, 
agöo
,

811 
	`is_öode_‰ì
(
öo_ªc
, 
úec_off£t
),

812 &
öo_dúty
, &
is_u£d
,
öo_discovîy
, 
check_dups
,

813 
exåa_©å_check
, &
iß_dú
, &
∑ª¡
);

815 
	`ASSERT
(
is_u£d
 != 3);

816 i‡(
öo_dúty
) {

817 
dúty
 = 1;

818 
	`libxfs_döode_ˇlc_¸c
(
mp
, 
döo
);

828 i‡(
is_u£d
) {

829 i‡(
	`is_öode_‰ì
(
öo_ªc
, 
úec_off£t
)) {

830 i‡(
vîbo£
 || 
no_modify
) {

831 
	`do_w¨n
(

832 
	`_
("im≠ cœim†ö-u£ inodê%" 
PRIu64
 " is free, "),

833 
öo
);

836 i‡(
vîbo£
 || !
no_modify
)

837 
	`do_w¨n
(
	`_
("correcting imap\n"));

839 
	`do_w¨n
(
	`_
("would correct imap\n"));

841 
	`£t_öode_u£d
(
öo_ªc
, 
úec_off£t
);

847 
	`£t_öode_·y≥
(
öo_ªc
, 
úec_off£t
,

848 
	`xfs_mode_to_·y≥
(
	`be16_to_˝u
(
döo
->
di_mode
)));

853 
	`£t_öode_disk_∆öks
(
öo_ªc
, 
úec_off£t
,

854 
döo
->
di_vîsi⁄
 > 1

855 ? 
	`be32_to_˝u
(
döo
->
di_∆ök
)

856 : 
	`be16_to_˝u
(
döo
->
di_⁄lök
));

859 
	`£t_öode_‰ì
(
öo_ªc
, 
úec_off£t
);

867 i‡(
iß_dú
) {

868 
	`£t_öode_ißdú
(
öo_ªc
, 
úec_off£t
);

876 i‡(!
öo_discovîy
) {

877 
	`ASSERT
(
∑ª¡
 != 0);

878 
	`£t_öode_∑ª¡
(
öo_ªc
, 
úec_off£t
, 
∑ª¡
);

879 
	`ASSERT
(
∑ª¡
 ==

880 
	`gë_öode_∑ª¡
(
öo_ªc
, 
úec_off£t
));

883 
	`˛ór_öode_ißdú
(
öo_ªc
, 
úec_off£t
);

886 i‡(
°©us
) {

887 i‡(
mp
->
m_sb
.
sb_roŸöo
 =
öo
) {

888 
√ed_roŸ_öode
 = 1;

890 i‡(!
no_modify
) {

891 
	`do_w¨n
(

892 
	`_
("˛óªdÑoŸ inodê%" 
PRIu64
 "\n"),

893 
öo
);

895 
	`do_w¨n
(

896 
	`_
("would cÀ¨ÑoŸ inodê%" 
PRIu64
 "\n"),

897 
öo
);

899 } i‡(
mp
->
m_sb
.
sb_rbmöo
 =
öo
) {

900 
√ed_rbmöo
 = 1;

902 i‡(!
no_modify
) {

903 
	`do_w¨n
(

904 
	`_
("˛óªdÑó…imêbôm≠ inodê%" 
PRIu64
 "\n"),

905 
öo
);

907 
	`do_w¨n
(

908 
	`_
("would cÀ¨Ñó…imêbôm≠ inodê%" 
PRIu64
 "\n"),

909 
öo
);

911 } i‡(
mp
->
m_sb
.
sb_rsumöo
 =
öo
) {

912 
√ed_rsumöo
 = 1;

914 i‡(!
no_modify
) {

915 
	`do_w¨n
(

916 
	`_
("˛óªdÑó…imêsumm¨y inodê%" 
PRIu64
 "\n"),

917 
öo
);

919 
	`do_w¨n
(

920 
	`_
("would cÀ¨Ñó…imêsumm¨y inodê%" 
PRIu64
 "\n"),

921 
öo
);

923 } i‡(!
no_modify
) {

924 
	`do_w¨n
(
	`_
("˛óªd inodê%" 
PRIu64
 "\n"),

925 
öo
);

927 
	`do_w¨n
(
	`_
("would havê˛óªd inodê%" 
PRIu64
 "\n"),

928 
öo
);

930 
	`˛ór_öode_was_æ
(
öo_ªc
, 
úec_off£t
);

933 
¥o˚ss_√xt
:

934 
úec_off£t
++;

935 
ibuf_off£t
++;

936 
i˙t
++;

937 
˛u°î_off£t
++;

939 i‡(
i˙t
 =
mp
->
m_üŒoc_öos
 &&

940 
úec_off£t
 =
XFS_INODES_PER_CHUNK
) {

944 
bp_ödex
 = 0; bp_ödex < 
˛u°î_cou¡
; bp_index++) {

945 i‡(!
b∂i°
[
bp_ödex
])

948 
	`p·ø˚
("put/writebuf %p (%llu) in AG %d",

949 
b∂i°
[
bp_ödex
], ()

950 
	`XFS_BUF_ADDR
(
b∂i°
[
bp_ödex
]), 
agno
);

952 i‡(
dúty
 && !
no_modify
)

953 
	`libxfs_wrôebuf
(
b∂i°
[
bp_ödex
], 0);

955 
	`libxfs_putbuf
(
b∂i°
[
bp_ödex
]);

957 
	`‰ì
(
b∂i°
);

959 } i‡(
ibuf_off£t
 =
mp
->
m_sb
.
sb_ö›block
) {

964 
ibuf_off£t
 = 0;

965 
agbno
++;

967 i‡(!
	`is_öode_•¨£
(
öo_ªc
, 
úec_off£t
))

968 
	`¥o˚ss_öode_agbno_°©e
(
mp
, 
agno
, 
agbno
);

969 } i‡(
úec_off£t
 =
XFS_INODES_PER_CHUNK
) {

973 
öo_ªc
 = 
	`√xt_öo_ªc
(ino_rec);

974 
	`ASSERT
(
öo_ªc
->
öo_°¨äum
 =
agöo
 + 1);

975 
úec_off£t
 = 0;

977 i‡(
˛u°î_off£t
 =
öodes_≥r_˛u°î
) {

978 
bp_ödex
++;

979 
˛u°î_off£t
 = 0;

983 
	}
}

998 
	$¥o˚ss_agöodes
(

999 
xfs_mou¡_t
 *
mp
,

1000 
¥e„tch_¨gs_t
 *
pf_¨gs
,

1001 
xfs_agnumbî_t
 
agno
,

1002 
öo_discovîy
,

1003 
check_dups
,

1004 
exåa_©å_check
)

1006 
num_öos
, 
bogus
;

1007 
öo_åì_node_t
 *
öo_ªc
, *
fú°_öo_ªc
, *
¥ev_öo_ªc
;

1008 #ifde‡
XR_PF_TRACE


1009 
cou¡
;

1011 
fú°_öo_ªc
 = 
öo_ªc
 = 
	`födfú°_öode_ªc
(
agno
);

1013 
öo_ªc
 !
NULL
) {

1022 
num_öos
 = 
XFS_INODES_PER_CHUNK
;

1023 
num_öos
 < 
mp
->
m_üŒoc_öos
 && 
öo_ªc
 !
NULL
) {

1028 i‡((
öo_ªc
 = 
	`√xt_öo_ªc
(öo_ªc)Ë!
NULL
)

1029 
num_öos
 +
XFS_INODES_PER_CHUNK
;

1032 
	`ASSERT
(
num_öos
 =
mp
->
m_üŒoc_öos
);

1034 i‡(
pf_¨gs
) {

1035 
	`£m_po°
(&
pf_¨gs
->
ø_cou¡
);

1036 #ifde‡
XR_PF_TRACE


1037 
	`£m_gëvÆue
(&
pf_¨gs
->
ø_cou¡
, &
cou¡
);

1038 
	`p·ø˚
("processing inode chunk %p in AG %d (sem count = %d)",

1039 
fú°_öo_ªc
, 
agno
, 
cou¡
);

1043 i‡(
	`¥o˚ss_öode_chunk
(
mp
, 
agno
, 
num_öos
, 
fú°_öo_ªc
,

1044 
öo_discovîy
, 
check_dups
, 
exåa_©å_check
,

1045 &
bogus
)) {

1047 
	`ab‹t
();

1050 i‡(!
bogus
)

1051 
fú°_öo_ªc
 = 
öo_ªc
 = 
	`√xt_öo_ªc
(ino_rec);

1062 
num_öos
 = 0;

1063 
öo_ªc
 = 
fú°_öo_ªc
;

1064 
num_öos
 < 
mp
->
m_üŒoc_öos
 &&

1065 
öo_ªc
 !
NULL
) {

1066 
¥ev_öo_ªc
 = 
öo_ªc
;

1068 i‡((
öo_ªc
 = 
	`√xt_öo_ªc
(öo_ªc)Ë!
NULL
)

1069 
num_öos
 +
XFS_INODES_PER_CHUNK
;

1071 
	`gë_öode_ªc
(
mp
, 
agno
, 
¥ev_öo_ªc
);

1072 
	`‰ì_öode_ªc
(
agno
, 
¥ev_öo_ªc
);

1075 
fú°_öo_ªc
 = 
öo_ªc
;

1077 
	`PROG_RPT_INC
(
¥og_Ωt_d⁄e
[
agno
], 
num_öos
);

1079 
	}
}

1089 
	$check_un˚πaö_agöodes
(
xfs_mou¡_t
 *
mp
, 
xfs_agnumbî_t
 
agno
)

1091 
öo_åì_node_t
 *
úec
;

1092 
öo_åì_node_t
 *
ƒec
;

1093 
xfs_agöo_t
 
°¨t
;

1094 
xfs_agöo_t
 
i
;

1095 
xfs_agöo_t
 
agöo
;

1096 
gŸ_some
;

1098 
ƒec
 = 
NULL
;

1099 
gŸ_some
 = 0;

1101 
	`˛ór_un˚πaö_öo_ˇche
(
agno
);

1103 i‡((
úec
 = 
	`födfú°_un˚πaö_öode_ªc
(
agno
)Ë=
NULL
)

1118 
	`do_w¨n
(
	`_
("found inodesÇot inÅhe inodeállocationÅree\n"));

1125 
i
 = 0; i < 
XFS_INODES_PER_CHUNK
; i++) {

1126 i‡(!
	`is_öode_c⁄fúmed
(
úec
, 
i
))

1129 
agöo
 = 
i
 + 
úec
->
öo_°¨äum
;

1131 i‡(
	`vîify_agöum
(
mp
, 
agno
, 
agöo
))

1134 i‡(
ƒec
 !
NULL
 &&Çªc->
öo_°¨äum
 <
agöo
 &&

1135 
agöo
 < 
ƒec
->
öo_°¨äum
 +

1136 
XFS_INODES_PER_CHUNK
)

1139 i‡((
ƒec
 = 
	`föd_öode_ªc
(
mp
, 
agno
, 
agöo
)Ë=
NULL
)

1140 i‡(!
	`vîify_agöum
(
mp
, 
agno
, 
agöo
))

1141 i‡(
	`vîify_agöode_chunk
(
mp
, 
agno
,

1142 
agöo
, &
°¨t
))

1143 
gŸ_some
 = 1;

1146 
	`gë_un˚πaö_öode_ªc
(
mp
, 
agno
, 
úec
);

1147 
	`‰ì_öode_ªc
(
agno
, 
úec
);

1149 
úec
 = 
	`födfú°_un˚πaö_öode_ªc
(
agno
);

1150 } 
úec
 !
NULL
);

1152 i‡(
gŸ_some
)

1153 
	`do_w¨n
(
	`_
("found inodesÇot inÅhe inodeállocationÅree\n"));

1156 
	}
}

1181 
	$¥o˚ss_un˚πaö_agöodes
(
xfs_mou¡_t
 *
mp
, 
xfs_agnumbî_t
 
agno
)

1183 
öo_åì_node_t
 *
úec
;

1184 
öo_åì_node_t
 *
ƒec
;

1185 
xfs_agöo_t
 
agöo
;

1186 
i
;

1187 
bogus
;

1188 
˙t
;

1189 
gŸ_some
;

1191 #ifde‡
XR_INODE_TRACE


1192 
	`Ârötf
(
°dîr
, "öÖro˚ss_un˚πaö_agöodes,ágnÿ%d\n", 
agno
);

1195 
gŸ_some
 = 0;

1197 
	`˛ór_un˚πaö_öo_ˇche
(
agno
);

1199 i‡((
úec
 = 
	`födfú°_un˚πaö_öode_ªc
(
agno
)Ë=
NULL
)

1202 
ƒec
 = 
NULL
;

1208 
˙t
 = 
i
 = 0; i < 
XFS_INODES_PER_CHUNK
; i++) {

1209 i‡(!
	`is_öode_c⁄fúmed
(
úec
, 
i
))

1211 
˙t
++;

1212 
agöo
 = 
i
 + 
úec
->
öo_°¨äum
;

1213 #ifde‡
XR_INODE_TRACE


1214 
	`Ârötf
(
°dîr
, "ag inodê%d (0x%x)\n", 
agöo
,ágino);

1221 i‡(
	`vîify_agöum
(
mp
, 
agno
, 
agöo
))

1224 i‡(
ƒec
 !
NULL
 &&Çªc->
öo_°¨äum
 <
agöo
 &&

1225 
agöo
 < 
ƒec
->
öo_°¨äum
 +

1226 
XFS_INODES_PER_CHUNK
)

1229 i‡((
ƒec
 = 
	`föd_öode_ªc
(
mp
, 
agno
, 
agöo
)Ë!
NULL
)

1236 i‡((
ƒec
 = 
	`vîify_agöode_chunk_úec
(
mp
,

1237 
agno
, 
agöo
)Ë=
NULL
)

1240 
gŸ_some
 = 1;

1248 i‡(
	`¥o˚ss_öode_chunk
(
mp
, 
agno
, mp->
m_üŒoc_öos
,

1249 
ƒec
, 1, 0, 0, &
bogus
)) {

1251 
	`ab‹t
();

1255 
	`ASSERT
(
˙t
 != 0);

1260 
	`gë_un˚πaö_öode_ªc
(
mp
, 
agno
, 
úec
);

1261 
	`‰ì_öode_ªc
(
agno
, 
úec
);

1263 
úec
 = 
	`födfú°_un˚πaö_öode_ªc
(
agno
);

1264 } 
úec
 !
NULL
);

1266 i‡(
gŸ_some
)

1267 
	`do_w¨n
(
	`_
("found inodesÇot inÅhe inodeállocationÅree\n"));

1270 
	}
}

	@repair/dinode.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

21 
	~"globÆs.h
"

22 
	~"aghódî.h
"

23 
	~"öc‹e.h
"

24 
	~"¥Ÿos.h
"

25 
	~"îr_¥Ÿos.h
"

26 
	~"dú2.h
"

27 
	~"döode.h
"

28 
	~"sˇn.h
"

29 
	~"vîsi⁄s.h
"

30 
	~"©å_ª∑ú.h
"

31 
	~"bm≠.h
"

32 
	~"thªads.h
"

33 
	~"¶ab.h
"

34 
	~"rm≠.h
"

44 *
	gf‹k«me_d©a
;

45 *
	gf‹k«me_©å
;

46 *
	g·y≥_ªÆ_time
;

47 *
	g·y≥_ªguœr
;

50 
	$döode_bmbt_å™¶©i⁄_öô
()

52 
f‹k«me_d©a
 = 
	`_
("data");

53 
f‹k«me_©å
 = 
	`_
("attr");

54 
·y≥_ªÆ_time
 = 
	`_
("real-time");

55 
·y≥_ªguœr
 = 
	`_
("regular");

56 
	}
}

59 
	$gë_f‹k«me
(
whichf‹k
)

62 i‡(
whichf‹k
 =
XFS_DATA_FORK
)

63  
f‹k«me_d©a
;

64  
f‹k«me_©å
;

65 
	}
}

72 
	$˛ór_döode_©å
(
xfs_mou¡_t
 *
mp
, 
xfs_döode_t
 *
döo
, 
xfs_öo_t
 
öo_num
)

74 
	`ASSERT
(
döo
->
di_f‹koff
 != 0);

76 i‡(!
no_modify
)

77 
	`Ârötf
(
°dîr
,

78 
	`_
("˛órög inodê%" 
PRIu64
 "áâribuãs\n"), 
öo_num
);

80 
	`Ârötf
(
°dîr
,

81 
	`_
("would havê˛óªd inodê%" 
PRIu64
 "áâribuãs\n"), 
öo_num
);

83 i‡(
	`be16_to_˝u
(
döo
->
di_™exã¡s
) != 0) {

84 i‡(
no_modify
)

86 
döo
->
di_™exã¡s
 = 
	`˝u_to_be16
(0);

89 i‡(
döo
->
di_af‹m©
 !
XFS_DINODE_FMT_EXTENTS
) {

90 i‡(
no_modify
)

92 
döo
->
di_af‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

106 i‡(!
no_modify
) {

107 
xfs_©å_sh‹tf‹m_t
 *
asf
 = (xfs_attr_shortform_t *)

108 
	`XFS_DFORK_APTR
(
döo
);

109 
asf
->
hdr
.
tŸsize
 = 
	`˝u_to_be16
((
xfs_©å_sf_hdr_t
));

110 
asf
->
hdr
.
cou¡
 = 0;

111 
döo
->
di_f‹koff
 = 0;

118 
	}
}

121 
	$˛ór_döode_c‹e
(
xfs_mou¡
 *
mp
, 
xfs_döode_t
 *
döoc
, 
xfs_öo_t
 
öo_num
)

123 
dúty
 = 0;

124 
i
;

126 
	#__dúty_no_modify_ªt
(
dúty
) \

127 ({ (
dúty
Ë1; i‡(
no_modify
Ë 1; })

	)

129 i‡(
	`be16_to_˝u
(
döoc
->
di_magic
Ë!
XFS_DINODE_MAGIC
) {

130 
	`__dúty_no_modify_ªt
(
dúty
);

131 
döoc
->
di_magic
 = 
	`˝u_to_be16
(
XFS_DINODE_MAGIC
);

134 i‡(!
	`libxfs_döode_good_vîsi⁄
(
mp
, 
döoc
->
di_vîsi⁄
)) {

135 
	`__dúty_no_modify_ªt
(
dúty
);

136 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

137 
döoc
->
di_vîsi⁄
 = 3;

139 
döoc
->
di_vîsi⁄
 = 2;

142 i‡(
	`be16_to_˝u
(
döoc
->
di_mode
) != 0) {

143 
	`__dúty_no_modify_ªt
(
dúty
);

144 
döoc
->
di_mode
 = 0;

147 i‡(
	`be16_to_˝u
(
döoc
->
di_Êags
) != 0) {

148 
	`__dúty_no_modify_ªt
(
dúty
);

149 
döoc
->
di_Êags
 = 0;

152 i‡(
	`be32_to_˝u
(
döoc
->
di_dmevmask
) != 0) {

153 
	`__dúty_no_modify_ªt
(
dúty
);

154 
döoc
->
di_dmevmask
 = 0;

157 i‡(
döoc
->
di_f‹koff
 != 0) {

158 
	`__dúty_no_modify_ªt
(
dúty
);

159 
döoc
->
di_f‹koff
 = 0;

162 i‡(
döoc
->
di_f‹m©
 !
XFS_DINODE_FMT_EXTENTS
) {

163 
	`__dúty_no_modify_ªt
(
dúty
);

164 
döoc
->
di_f‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

167 i‡(
döoc
->
di_af‹m©
 !
XFS_DINODE_FMT_EXTENTS
) {

168 
	`__dúty_no_modify_ªt
(
dúty
);

169 
döoc
->
di_af‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

172 i‡(
	`be64_to_˝u
(
döoc
->
di_size
) != 0) {

173 
	`__dúty_no_modify_ªt
(
dúty
);

174 
döoc
->
di_size
 = 0;

177 i‡(
	`be64_to_˝u
(
döoc
->
di_nblocks
) != 0) {

178 
	`__dúty_no_modify_ªt
(
dúty
);

179 
döoc
->
di_nblocks
 = 0;

182 i‡(
	`be16_to_˝u
(
döoc
->
di_⁄lök
) != 0) {

183 
	`__dúty_no_modify_ªt
(
dúty
);

184 
döoc
->
di_⁄lök
 = 0;

187 i‡(
	`be32_to_˝u
(
döoc
->
di_√xã¡s
) != 0) {

188 
	`__dúty_no_modify_ªt
(
dúty
);

189 
döoc
->
di_√xã¡s
 = 0;

192 i‡(
	`be16_to_˝u
(
döoc
->
di_™exã¡s
) != 0) {

193 
	`__dúty_no_modify_ªt
(
dúty
);

194 
döoc
->
di_™exã¡s
 = 0;

197 i‡(
döoc
->
di_vîsi⁄
 > 1 &&

198 
	`be32_to_˝u
(
döoc
->
di_∆ök
) != 0) {

199 
	`__dúty_no_modify_ªt
(
dúty
);

200 
döoc
->
di_∆ök
 = 0;

204 i‡(
döoc
->
di_vîsi⁄
 < 3)

205  
dúty
;

207 i‡(
	`be64_to_˝u
(
döoc
->
di_öo
Ë!
öo_num
) {

208 
	`__dúty_no_modify_ªt
(
dúty
);

209 
döoc
->
di_öo
 = 
	`˝u_to_be64
(
öo_num
);

212 i‡(
	`∂©f‹m_uuid_com∑ª
(&
döoc
->
di_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
)) {

213 
	`__dúty_no_modify_ªt
(
dúty
);

214 
	`∂©f‹m_uuid_c›y
(&
döoc
->
di_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

217 
i
 = 0; i < (
döoc
->
di_∑d2
)/(dinoc->di_pad2[0]); i++) {

218 i‡(
döoc
->
di_∑d2
[
i
] != 0) {

219 
	`__dúty_no_modify_ªt
(
dúty
);

220 
	`mem£t
(
döoc
->
di_∑d2
, 0, (dinoc->di_pad2));

225 i‡(
	`be64_to_˝u
(
döoc
->
di_Êags2
) != 0) {

226 
	`__dúty_no_modify_ªt
(
dúty
);

227 
döoc
->
di_Êags2
 = 0;

230 i‡(
	`be64_to_˝u
(
döoc
->
di_l¢
) != 0) {

231 
	`__dúty_no_modify_ªt
(
dúty
);

232 
döoc
->
di_l¢
 = 0;

235 i‡(
	`be64_to_˝u
(
döoc
->
di_ch™gecou¡
) != 0) {

236 
	`__dúty_no_modify_ªt
(
dúty
);

237 
döoc
->
di_ch™gecou¡
 = 0;

240  
dúty
;

241 
	}
}

244 
	$˛ór_döode_u∆öked
(
xfs_mou¡_t
 *
mp
, 
xfs_döode_t
 *
döo
)

247 i‡(
	`be32_to_˝u
(
döo
->
di_√xt_u∆öked
Ë!
NULLAGINO
) {

248 i‡(!
no_modify
)

249 
döo
->
di_√xt_u∆öked
 = 
	`˝u_to_be32
(
NULLAGINO
);

254 
	}
}

262 
	$˛ór_döode
(
xfs_mou¡_t
 *
mp
, 
xfs_döode_t
 *
döo
, 
xfs_öo_t
 
öo_num
)

264 
dúty
;

266 
dúty
 = 
	`˛ór_döode_c‹e
(
mp
, 
döo
, 
öo_num
);

267 
dúty
 +
	`˛ór_döode_u∆öked
(
mp
, 
döo
);

271 i‡(
dúty
 && !
no_modify
)

272 
	`mem£t
(
	`XFS_DFORK_DPTR
(
döo
), 0,

273 
	`XFS_LITINO
(
mp
, 
döo
->
di_vîsi⁄
));

275 (
dúty
);

276 
	}
}

288 
__ölöe
 

289 
	$vîify_ag_bno
(
xfs_sb_t
 *
sbp
,

290 
xfs_agnumbî_t
 
agno
,

291 
xfs_agblock_t
 
agbno
)

293 i‡(
agno
 < (
sbp
->
sb_agcou¡
 - 1))

294  (
agbno
 >
sbp
->
sb_agblocks
);

295 i‡(
agno
 =(
sbp
->
sb_agcou¡
 - 1))

296  (
agbno
 >(
sbp
->
sb_dblocks
 -

297 ((
xfs_rfsblock_t
)(
sbp
->
sb_agcou¡
 - 1) *

298 
sbp
->
sb_agblocks
)));

300 
	}
}

306 
	$vîify_öum
(
xfs_mou¡_t
 *
mp
,

307 
xfs_öo_t
 
öo
)

309 
xfs_agnumbî_t
 
agno
;

310 
xfs_agöo_t
 
agöo
;

311 
xfs_agblock_t
 
agbno
;

312 
xfs_sb_t
 *
sbp
 = &
mp
->
m_sb
;;

316 
agno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
öo
);

317 
agöo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
);

318 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

319 i‡(
agbno
 == 0)

322 i‡(
öo
 =0 || inÿ=
NULLFSINO
)

325 i‡(
öo
 !
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
))

328  
	`vîify_ag_bno
(
sbp
, 
agno
, 
agbno
);

329 
	}
}

337 
	$vîify_agöum
(
xfs_mou¡_t
 *
mp
,

338 
xfs_agnumbî_t
 
agno
,

339 
xfs_agöo_t
 
agöo
)

341 
xfs_agblock_t
 
agbno
;

342 
xfs_sb_t
 *
sbp
 = &
mp
->
m_sb
;;

346 i‡(
agöo
 =0 ||ágöÿ=
NULLAGINO
)

356 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

357 i‡(
agbno
 == 0)

360  
	`vîify_ag_bno
(
sbp
, 
agno
, 
agbno
);

361 
	}
}

367 
	$vîify_dfsbno
(
xfs_mou¡_t
 *
mp
,

368 
xfs_fsblock_t
 
fsbno
)

370 
xfs_agnumbî_t
 
agno
;

371 
xfs_agblock_t
 
agbno
;

372 
xfs_sb_t
 *
sbp
 = &
mp
->
m_sb
;;

376 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
fsbno
);

377 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
fsbno
);

379  
	`vîify_ag_bno
(
sbp
, 
agno
, 
agbno
) == 0;

380 
	}
}

382 
	#XR_DFSBNORANGE_VALID
 0

	)

383 
	#XR_DFSBNORANGE_BADSTART
 1

	)

384 
	#XR_DFSBNORANGE_BADEND
 2

	)

385 
	#XR_DFSBNORANGE_OVERFLOW
 3

	)

387 
__ölöe
 

388 
	$vîify_dfsbno_ønge
(
xfs_mou¡_t
 *
mp
,

389 
xfs_fsblock_t
 
fsbno
,

390 
xfs_fûblks_t
 
cou¡
)

392 
xfs_agnumbî_t
 
agno
;

393 
xfs_agblock_t
 
agbno
;

394 
xfs_sb_t
 *
sbp
 = &
mp
->
m_sb
;;

397 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
fsbno
);

398 i‡(
agno
 !
	`XFS_FSB_TO_AGNO
(
mp
, 
fsbno
 + 
cou¡
 - 1)) {

399  
XR_DFSBNORANGE_OVERFLOW
;

402 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
fsbno
);

403 i‡(
	`vîify_ag_bno
(
sbp
, 
agno
, 
agbno
)) {

404  
XR_DFSBNORANGE_BADSTART
;

407 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
fsbno
 + 
cou¡
 - 1);

408 i‡(
	`vîify_ag_bno
(
sbp
, 
agno
, 
agbno
)) {

409  
XR_DFSBNORANGE_BADEND
;

412  (
XR_DFSBNORANGE_VALID
);

413 
	}
}

416 
	$vîify_agbno
(
xfs_mou¡_t
 *
mp
,

417 
xfs_agnumbî_t
 
agno
,

418 
xfs_agblock_t
 
agbno
)

420 
xfs_sb_t
 *
sbp
 = &
mp
->
m_sb
;;

423  
	`vîify_ag_bno
(
sbp
, 
agno
, 
agbno
) == 0;

424 
	}
}

427 
	$¥o˚ss_π_ªc
(

428 
xfs_mou¡_t
 *
mp
,

429 
xfs_bmbt_úec_t
 *
úec
,

430 
xfs_öo_t
 
öo
,

431 
xfs_rfsblock_t
 *
tŸ
,

432 
check_dups
)

434 
xfs_fsblock_t
 
b
;

435 
xfs_πblock_t
 
ext
;

436 
°©e
;

437 
pwe
;

442 i‡(
úec
->
br_°¨tblock
 >
mp
->
m_sb
.
sb_rblocks
) {

443 
	`do_w¨n
(

444 
	`_
("öodê%" 
PRIu64
 " - badÑtÉxtent start blockÇumber %" PRIu64 ", offset %" PRIu64 "\n"),

445 
öo
,

446 
úec
->
br_°¨tblock
,

447 
úec
->
br_°¨toff
);

450 i‡(
úec
->
br_°¨tblock
 + iªc->
br_blockcou¡
 - 1 >
mp
->
m_sb
.
sb_rblocks
) {

451 
	`do_w¨n
(

452 
	`_
("öodê%" 
PRIu64
 " - badÑtÉxtentÜast blockÇumber %" PRIu64 ", offset %" PRIu64 "\n"),

453 
öo
,

454 
úec
->
br_°¨tblock
 + iªc->
br_blockcou¡
 - 1,

455 
úec
->
br_°¨toff
);

458 i‡(
úec
->
br_°¨tblock
 + iªc->
br_blockcou¡
 - 1 < irec->br_startblock) {

459 
	`do_w¨n
(

460 
	`_
("öodê%" 
PRIu64
 " - badÑtÉxtent overflows - start %" PRIu64 ", "

461 "íd %" 
PRIu64
 ", offset %" PRIu64 "\n"),

462 
öo
,

463 
úec
->
br_°¨tblock
,

464 
úec
->
br_°¨tblock
 + iªc->
br_blockcou¡
 - 1,

465 
úec
->
br_°¨toff
);

473 i‡(
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(&
mp
->
m_sb
) == 0 &&

474 (
úec
->
br_°¨tblock
 % 
mp
->
m_sb
.
sb_ªxtsize
 != 0 ||

475 
úec
->
br_blockcou¡
 % 
mp
->
m_sb
.
sb_ªxtsize
 != 0)) {

476 
	`do_w¨n
(

477 
	`_
("mÆf‹medÑàöodêexã¡ [%" 
PRIu64
 " %" PRIu64 "] (fsÑtext size = %u)\n"),

478 
úec
->
br_°¨tblock
,

479 
úec
->
br_blockcou¡
,

480 
mp
->
m_sb
.
sb_ªxtsize
);

488 
b
 = 
úec
->
br_°¨tblock
; b < irec->br_startblock +

489 
úec
->
br_blockcou¡
; 
b
 +
mp
->
m_sb
.
sb_ªxtsize
) {

490 
ext
 = (
xfs_πblock_t
Ë
b
 / 
mp
->
m_sb
.
sb_ªxtsize
;

491 
pwe
 = 
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(&
mp
->
m_sb
) &&

492 
úec
->
br_°©e
 =
XFS_EXT_UNWRITTEN
 &&

493 (
b
 % 
mp
->
m_sb
.
sb_ªxtsize
 != 0);

495 i‡(
check_dups
 == 1) {

496 i‡(
	`£¨ch_π_dup_exã¡
(
mp
, 
ext
Ë&& !
pwe
) {

497 
	`do_w¨n
(

498 
	`_
("d©®f‹k i¿π inÿ%" 
PRIu64
 " claims dupÑtÉxtent,"

499 "of‡- %" 
PRIu64
 ", start - %" PRIu64 ", count %" PRIu64 "\n"),

500 
öo
,

501 
úec
->
br_°¨toff
,

502 
úec
->
br_°¨tblock
,

503 
úec
->
br_blockcou¡
);

509 
°©e
 = 
	`gë_πbm≠
(
ext
);

510 
°©e
) {

511 
XR_E_FREE
:

512 
XR_E_UNKNOWN
:

513 
	`£t_πbm≠
(
ext
, 
XR_E_INUSE
);

515 
XR_E_BAD_STATE
:

516 
	`do_îr‹
(

517 
	`_
("bad sèã i¿π block m≠ %" 
PRIu64
 "\n"),

518 
ext
);

519 
XR_E_FS_MAP
:

520 
XR_E_INO
:

521 
XR_E_INUSE_FS
:

522 
	`do_îr‹
(

523 
	`_
("d©®f‹k i¿π inodê%" 
PRIu64
 " found metadata block %" PRIu64 " inÑt bmap\n"),

524 
öo
, 
ext
);

525 
XR_E_INUSE
:

526 i‡(
pwe
)

528 
XR_E_MULT
:

529 
	`£t_πbm≠
(
ext
, 
XR_E_MULT
);

530 
	`do_w¨n
(

531 
	`_
("d©®f‹k i¿π inodê%" 
PRIu64
 " claims usedÑt block %" PRIu64 "\n"),

532 
öo
, 
ext
);

534 
XR_E_FREE1
:

536 
	`do_îr‹
(

537 
	`_
("ûÀgÆ sèã %d i¿π block m≠ %" 
PRIu64
 "\n"),

538 
°©e
, 
b
);

545 *
tŸ
 +
úec
->
br_blockcou¡
;

548 
	}
}

558 
	$¥o˚ss_bmbt_ª˛i°_öt
(

559 
xfs_mou¡_t
 *
mp
,

560 
xfs_bmbt_ªc_t
 *
Ω
,

561 *
numªcs
,

562 
ty≥
,

563 
xfs_öo_t
 
öo
,

564 
xfs_rfsblock_t
 *
tŸ
,

565 
blkm≠_t
 **
blkm≠p
,

566 
xfs_fûeoff_t
 *
fú°_key
,

567 
xfs_fûeoff_t
 *
œ°_key
,

568 
check_dups
,

569 
whichf‹k
)

571 
xfs_bmbt_úec_t
 
úec
;

572 
xfs_fûblks_t
 
˝
 = 0;

573 
xfs_fsblock_t
 
•
 = 0;

574 
xfs_fûeoff_t
 
›
 = 0;

575 
xfs_fsblock_t
 
b
;

576 *
·y≥
;

577 *
f‹k«me
 = 
	`gë_f‹k«me
(
whichf‹k
);

578 
i
;

579 
°©e
;

580 
xfs_agnumbî_t
 
agno
;

581 
xfs_agblock_t
 
agbno
;

582 
xfs_agblock_t
 
ebno
;

583 
xfs_exéí_t
 
bÀn
;

584 
xfs_agnumbî_t
 
locked_agno
 = -1;

585 
îr‹
 = 1;

587 i‡(
ty≥
 =
XR_INO_RTDATA
)

588 
·y≥
 = 
·y≥_ªÆ_time
;

590 
·y≥
 = 
·y≥_ªguœr
;

592 
i
 = 0; i < *
numªcs
; i++) {

593 
	`libxfs_bmbt_disk_gë_Æl
((
Ω
 +
i
), &
úec
);

594 i‡(
i
 == 0)

595 *
œ°_key
 = *
fú°_key
 = 
úec
.
br_°¨toff
;

597 *
œ°_key
 = 
úec
.
br_°¨toff
;

598 i‡(
i
 > 0 && 
›
 + 
˝
 > 
úec
.
br_°¨toff
) {

599 
	`do_w¨n
(

600 
	`_
("bm≠Ñe¯ouào‡‹dî, inodê%" 
PRIu64
"Éntry %d "

601 "[ÿ†c] [%" 
PRIu64
 " %" PRIu64 " %" PRIu64 "], "

602 "%d [%" 
PRIu64
 " %" PRIu64 " %" PRIu64 "]\n"),

603 
öo
, 
i
, 
úec
.
br_°¨toff
, iªc.
br_°¨tblock
,

604 
úec
.
br_blockcou¡
, 
i
 - 1, 
›
, 
•
, 
˝
);

605 
d⁄e
;

607 
›
 = 
úec
.
br_°¨toff
;

608 
˝
 = 
úec
.
br_blockcou¡
;

609 
•
 = 
úec
.
br_°¨tblock
;

614 i‡(
úec
.
br_blockcou¡
 == 0) {

615 
	`do_w¨n
(

616 
	`_
("zîÿÀngthÉxã¡ (of‡%" 
PRIu64
 ", fsbno = %" PRIu64 ") in ino %" PRIu64 "\n"),

617 
úec
.
br_°¨toff
,

618 
úec
.
br_°¨tblock
,

619 
öo
);

620 
d⁄e
;

623 i‡(
ty≥
 =
XR_INO_RTDATA
 && 
whichf‹k
 =
XFS_DATA_FORK
) {

628 i‡(
	`¥o˚ss_π_ªc
(
mp
, &
úec
, 
öo
, 
tŸ
, 
check_dups
))

640 
	`vîify_dfsbno_ønge
(
mp
, 
úec
.
br_°¨tblock
,

641 
úec
.
br_blockcou¡
)) {

642 
XR_DFSBNORANGE_VALID
:

645 
XR_DFSBNORANGE_BADSTART
:

646 
	`do_w¨n
(

647 
	`_
("öodê%" 
PRIu64
 " - badÉxtent starting blockÇumber %" PRIu64 ", offset %" PRIu64 "\n"),

648 
öo
,

649 
úec
.
br_°¨tblock
,

650 
úec
.
br_°¨toff
);

651 
d⁄e
;

653 
XR_DFSBNORANGE_BADEND
:

654 
	`do_w¨n
(

655 
	`_
("öodê%" 
PRIu64
 " - badÉxtentÜast blockÇumber %" PRIu64 ", offset %" PRIu64 "\n"),

656 
öo
,

657 
úec
.
br_°¨tblock
 + iªc.
br_blockcou¡
 - 1,

658 
úec
.
br_°¨toff
);

659 
d⁄e
;

661 
XR_DFSBNORANGE_OVERFLOW
:

662 
	`do_w¨n
(

663 
	`_
("öodê%" 
PRIu64
 " - badÉxtent overflows - start %" PRIu64 ", "

664 "íd %" 
PRIu64
 ", offset %" PRIu64 "\n"),

665 
öo
,

666 
úec
.
br_°¨tblock
,

667 
úec
.
br_°¨tblock
 + iªc.
br_blockcou¡
 - 1,

668 
úec
.
br_°¨toff
);

669 
d⁄e
;

672 i‡(
úec
.
br_°¨toff
 + iªc.
br_blockcou¡
 - 1 >

673 
fs_max_fûe_off£t
) {

674 
	`do_w¨n
(

675 
	`_
("öodê%" 
PRIu64
 " -ÉxtentÉxceeds max offset - start %" PRIu64 ", "

676 "cou¡ %" 
PRIu64
 ",Öhysical block %" PRIu64 "\n"),

677 
öo
, 
úec
.
br_°¨toff
, iªc.
br_blockcou¡
,

678 
úec
.
br_°¨tblock
);

679 
d⁄e
;

682 i‡(
blkm≠p
 && *blkmapp) {

683 
îr‹2
;

684 
îr‹2
 = 
	`blkm≠_£t_ext
(
blkm≠p
, 
úec
.
br_°¨toff
,

685 
úec
.
br_°¨tblock
, iªc.
br_blockcou¡
);

686 i‡(
îr‹2
) {

695 
	`do_ab‹t
(

696 
	`_
("F©ÆÉº‹: inodê%" 
PRIu64
 " - blkmap_set_ext(): %s\n"

697 "\t%†f‹k, of‡- %" 
PRIu64
 ", start - %" PRIu64 ", cnt %" PRIu64 "\n"),

698 
öo
, 
	`°ªº‹
(
îr‹2
), 
f‹k«me
,

699 
úec
.
br_°¨toff
, iªc.
br_°¨tblock
,

700 
úec
.
br_blockcou¡
);

708 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
úec
.
br_°¨tblock
);

709 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
úec
.
br_°¨tblock
);

710 
ebno
 = 
agbno
 + 
úec
.
br_blockcou¡
;

711 i‡(
agno
 !
locked_agno
) {

712 i‡(
locked_agno
 != -1)

713 
	`±hªad_muãx_u∆ock
(&
ag_locks
[
locked_agno
].
lock
);

714 
	`±hªad_muãx_lock
(&
ag_locks
[
agno
].
lock
);

715 
locked_agno
 = 
agno
;

718 i‡(
check_dups
) {

725 i‡(!(
ty≥
 =
XR_INO_DATA
 &&

726 
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
)) &&

727 
	`£¨ch_dup_exã¡
(
agno
, 
agbno
, 
ebno
)) {

728 
	`do_w¨n
(

729 
	`_
("%†f‹k i¿öÿ%" 
PRIu64
 " claims dupÉxtent, "

730 "of‡- %" 
PRIu64
 ", start - %" PRIu64 ", cnt %" PRIu64 "\n"),

731 
f‹k«me
, 
öo
, 
úec
.
br_°¨toff
,

732 
úec
.
br_°¨tblock
,

733 
úec
.
br_blockcou¡
);

734 
d⁄e
;

736 *
tŸ
 +
úec
.
br_blockcou¡
;

740 
b
 = 
úec
.
br_°¨tblock
;

741 
agbno
 < 
ebno
;

742 
b
 +
bÀn
, 
agbno
 += blen) {

743 
°©e
 = 
	`gë_bm≠_ext
(
agno
, 
agbno
, 
ebno
, &
bÀn
);

744 
°©e
) {

745 
XR_E_FREE
:

746 
XR_E_FREE1
:

747 
	`do_w¨n
(

748 
	`_
("%†f‹k i¿öÿ%" 
PRIu64
 " claims free block %" PRIu64 "\n"),

749 
f‹k«me
, 
öo
, (
__uöt64_t
Ë
b
);

751 
XR_E_INUSE1
:

752 
XR_E_UNKNOWN
:

753 
	`£t_bm≠_ext
(
agno
, 
agbno
, 
bÀn
, 
XR_E_INUSE
);

756 
XR_E_BAD_STATE
:

757 
	`do_îr‹
(
	`_
("bad sèã i¿block m≠ %" 
PRIu64
 "\n"), 
b
);

759 
XR_E_FS_MAP1
:

760 
XR_E_INO1
:

761 
XR_E_INUSE_FS1
:

762 
	`do_w¨n
(
	`_
("rmap claims metadata use!\n"));

764 
XR_E_FS_MAP
:

765 
XR_E_INO
:

766 
XR_E_INUSE_FS
:

767 
	`do_w¨n
(

768 
	`_
("%†f‹k i¿öodê%" 
PRIu64
 " claims metadata block %" PRIu64 "\n"),

769 
f‹k«me
, 
öo
, 
b
);

770 
d⁄e
;

772 
XR_E_INUSE
:

773 
XR_E_MULT
:

774 
	`£t_bm≠_ext
(
agno
, 
agbno
, 
bÀn
, 
XR_E_MULT
);

775 i‡(
ty≥
 =
XR_INO_DATA
 &&

776 
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

778 
	`do_w¨n
(

779 
	`_
("%†f‹k i¿%†öodê%" 
PRIu64
 " claims used block %" PRIu64 "\n"),

780 
f‹k«me
, 
·y≥
, 
öo
, 
b
);

781 
d⁄e
;

784 
	`do_îr‹
(

785 
	`_
("ûÀgÆ sèã %d i¿block m≠ %" 
PRIu64
 "\n"),

786 
°©e
, 
b
);

789 i‡(
cﬁÀ˘_rm≠s
) {

790 
îr‹
 = 
	`rm≠_add_ªc
(
mp
, 
öo
, 
whichf‹k
, &
úec
);

791 i‡(
îr‹
)

792 
	`do_îr‹
(

793 
	`_
("couldn'táddÑeverse mapping\n")

796 *
tŸ
 +
úec
.
br_blockcou¡
;

798 
îr‹
 = 0;

799 
d⁄e
:

800 i‡(
locked_agno
 != -1)

801 
	`±hªad_muãx_u∆ock
(&
ag_locks
[
locked_agno
].
lock
);

803 i‡(
i
 !*
numªcs
) {

804 
	`ASSERT
(
i
 < *
numªcs
);

805 
	`do_w¨n
(
	`_
("c‹ª˘ögÇexã¡†f‹ inodê%" 
PRIu64
 "\n"), 
öo
);

806 *
numªcs
 = 
i
;

809  
îr‹
;

810 
	}
}

817 
	$¥o˚ss_bmbt_ª˛i°
(

818 
xfs_mou¡_t
 *
mp
,

819 
xfs_bmbt_ªc_t
 *
Ω
,

820 *
numªcs
,

821 
ty≥
,

822 
xfs_öo_t
 
öo
,

823 
xfs_rfsblock_t
 *
tŸ
,

824 
blkm≠_t
 **
blkm≠p
,

825 
xfs_fûeoff_t
 *
fú°_key
,

826 
xfs_fûeoff_t
 *
œ°_key
,

827 
whichf‹k
)

829  
	`¥o˚ss_bmbt_ª˛i°_öt
(
mp
, 
Ω
, 
numªcs
, 
ty≥
, 
öo
, 
tŸ
,

830 
blkm≠p
, 
fú°_key
, 
œ°_key
, 0, 
whichf‹k
);

831 
	}
}

838 
	$sˇn_bmbt_ª˛i°
(

839 
xfs_mou¡_t
 *
mp
,

840 
xfs_bmbt_ªc_t
 *
Ω
,

841 *
numªcs
,

842 
ty≥
,

843 
xfs_öo_t
 
öo
,

844 
xfs_rfsblock_t
 *
tŸ
,

845 
whichf‹k
)

847 
xfs_fûeoff_t
 
fú°_key
 = 0;

848 
xfs_fûeoff_t
 
œ°_key
 = 0;

850  
	`¥o˚ss_bmbt_ª˛i°_öt
(
mp
, 
Ω
, 
numªcs
, 
ty≥
, 
öo
, 
tŸ
,

851 
NULL
, &
fú°_key
, &
œ°_key
, 1, 
whichf‹k
);

852 
	}
}

860 
xfs_buf
 *

861 
	$gë_agöo_buf
(

862 
xfs_mou¡
 *
mp
,

863 
xfs_agnumbî_t
 
agno
,

864 
xfs_agöo_t
 
agöo
,

865 
xfs_döode
 **
dùp
)

867 
xfs_buf
 *
bp
;

868 
˛u°î_size
;

869 
öo_≥r_˛u°î
;

870 
xfs_agöo_t
 
˛u°î_agöo
;

871 
xfs_daddr_t
 
˛u°î_daddr
;

872 
xfs_daddr_t
 
˛u°î_blks
;

880 
˛u°î_size
 = 
	`MAX
(
mp
->
m_öode_˛u°î_size
, mp->
m_sb
.
sb_blocksize
);

881 
öo_≥r_˛u°î
 = 
˛u°î_size
 / 
mp
->
m_sb
.
sb_öodesize
;

882 
˛u°î_agöo
 = 
agöo
 & ~(
öo_≥r_˛u°î
 - 1);

883 
˛u°î_blks
 = 
	`XFS_FSB_TO_DADDR
(
mp
, 
	`MAX
(1,

884 
mp
->
m_öode_˛u°î_size
 >> mp->
m_sb
.
sb_blocklog
));

885 
˛u°î_daddr
 = 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
,

886 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
˛u°î_agöo
));

888 #ifde‡
XR_INODE_TRACE


889 
	`¥ötf
("cluster_size %d ipc %d clusagino %d daddr %lld sectors %lld\n",

890 
˛u°î_size
, 
öo_≥r_˛u°î
, 
˛u°î_agöo
, 
˛u°î_daddr
,

891 
˛u°î_blks
);

894 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
˛u°î_daddr
, 
˛u°î_blks
,

895 0, &
xfs_öode_buf_›s
);

896 i‡(!
bp
) {

897 
	`do_w¨n
(
	`_
("ˇ¬ŸÑód inodê(%u/%u), disk block %" 
PRIu64
 "\n"),

898 
agno
, 
˛u°î_agöo
, 
˛u°î_daddr
);

899  
NULL
;

902 *
dùp
 = 
	`xfs_make_ùå
(
mp
, 
bp
, 
agöo
 - 
˛u°î_agöo
);

903 
	`ASSERT
(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) ||

904 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
) ==

905 
	`be64_to_˝u
((*
dùp
)->
di_öo
));

906  
bp
;

907 
	}
}

918 
	$¥o˚ss_btöode
(

919 
xfs_mou¡_t
 *
mp
,

920 
xfs_agnumbî_t
 
agno
,

921 
xfs_agöo_t
 
öo
,

922 
xfs_döode_t
 *
dù
,

923 
ty≥
,

924 *
dúty
,

925 
xfs_rfsblock_t
 *
tŸ
,

926 
__uöt64_t
 *
√x
,

927 
blkm≠_t
 **
blkm≠p
,

928 
whichf‹k
,

929 
check_dups
)

931 
xfs_bmdr_block_t
 *
dib
;

932 
xfs_fûeoff_t
 
œ°_key
;

933 
xfs_fûeoff_t
 
fú°_key
 = 0;

934 
xfs_öo_t
 
löo
;

935 
xfs_bmbt_±r_t
 *
µ
;

936 
xfs_bmbt_key_t
 *
pkey
;

937 *
f‹k«me
 = 
	`gë_f‹k«me
(
whichf‹k
);

938 
i
;

939 
Àvñ
;

940 
numªcs
;

941 
bm≠_curs‹_t
 
curs‹
;

942 
__uöt64_t
 
magic
;

944 
dib
 = (
xfs_bmdr_block_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

945 
löo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
);

946 *
tŸ
 = 0;

947 *
√x
 = 0;

949 
magic
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
Ë? 
XFS_BMAP_CRC_MAGIC


950 : 
XFS_BMAP_MAGIC
;

952 
Àvñ
 = 
	`be16_to_˝u
(
dib
->
bb_Àvñ
);

953 
numªcs
 = 
	`be16_to_˝u
(
dib
->
bb_numªcs
);

955 i‡((
Àvñ
 =0Ë|| (Àvñ > 
	`XFS_BM_MAXLEVELS
(
mp
, 
whichf‹k
))) {

964 
	`do_w¨n
(

965 
	`_
("badÜevñ %d i¿öodê%" 
PRIu64
 " bmap btreeÑoot block\n"),

966 
Àvñ
, 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
));

969 i‡(
numªcs
 == 0) {

970 
	`do_w¨n
(

971 
	`_
("badÇumªc†0 i¿öodê%" 
PRIu64
 " bmap btreeÑoot block\n"),

972 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
));

978 i‡(
	`XFS_BMDR_SPACE_CALC
(
numªcs
Ë> 
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
)) {

979 
	`do_w¨n
(

980 
	`_
("indicated size of %s btreeÑoot (%d bytes) greaterÅhan space in "

981 "öodê%" 
PRIu64
 " %s fork\n"),

982 
f‹k«me
, 
	`XFS_BMDR_SPACE_CALC
(
numªcs
), 
löo
, forkname);

986 
	`öô_bm_curs‹
(&
curs‹
, 
Àvñ
 + 1);

988 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
dib
, 1,

989 
	`libxfs_bmdr_maxªcs
(
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
), 0));

990 
pkey
 = 
	`XFS_BMDR_KEY_ADDR
(
dib
, 1);

991 
œ°_key
 = 
NULLFILEOFF
;

993 
i
 = 0; i < 
numªcs
; i++) {

999 i‡(!
	`vîify_dfsbno
(
mp
, 
	`gë_u«lig√d_be64
(&
µ
[
i
]))) {

1000 
	`do_w¨n
(

1001 
	`_
("bad bm≠ båìÖå 0x%" 
PRIx64
 " i¿öÿ%" 
PRIu64
 "\n"),

1002 
	`gë_u«lig√d_be64
(&
µ
[
i
]), 
löo
);

1006 i‡(
	`sˇn_lbåì
(
	`gë_u«lig√d_be64
(&
µ
[
i
]), 
Àvñ
, 
sˇn_bm≠bt
,

1007 
ty≥
, 
whichf‹k
, 
löo
, 
tŸ
, 
√x
, 
blkm≠p
,

1008 &
curs‹
, 1, 
check_dups
, 
magic
,

1009 &
xfs_bmbt_buf_›s
))

1017 i‡(!
check_dups
 && 
curs‹
.
Àvñ
[Àvñ-1].
fú°_key
 !=

1018 
	`gë_u«lig√d_be64
(&
pkey
[
i
].
br_°¨toff
)) {

1019 i‡(!
no_modify
) {

1020 
	`do_w¨n
(

1021 
	`_
("c‹ª˘ög key i¿bmbàroŸ (wa†%" 
PRIu64
 ",Çow %" PRIu64") in inode "

1022 "%" 
PRIu64
" %s fork\n"),

1023 
	`gë_u«lig√d_be64
(&
pkey
[
i
].
br_°¨toff
),

1024 
curs‹
.
Àvñ
[Àvñ-1].
fú°_key
,

1025 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
),

1026 
f‹k«me
);

1027 *
dúty
 = 1;

1028 
	`put_u«lig√d_be64
(

1029 
curs‹
.
Àvñ
[Àvñ-1].
fú°_key
,

1030 &
pkey
[
i
].
br_°¨toff
);

1032 
	`do_w¨n
(

1033 
	`_
("bad key i¿bmbàroŸ (i†%" 
PRIu64
 ", wouldÑesetÅo %" PRIu64 ") in inode "

1034 "%" 
PRIu64
 " %s fork\n"),

1035 
	`gë_u«lig√d_be64
(&
pkey
[
i
].
br_°¨toff
),

1036 
curs‹
.
Àvñ
[Àvñ-1].
fú°_key
,

1037 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
),

1038 
f‹k«me
);

1045 i‡(
check_dups
 == 0) {

1046 i‡(
œ°_key
 !
NULLFILEOFF
 &&Üast_key >=

1047 
curs‹
.
Àvñ
[Àvñ-1].
fú°_key
) {

1048 
	`do_w¨n
(

1049 
	`_
("ouào‡‹dî bmbàroŸ key %" 
PRIu64
 " in inode %" PRIu64 " %s fork\n"),

1050 
fú°_key
,

1051 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
),

1052 
f‹k«me
);

1055 
œ°_key
 = 
curs‹
.
Àvñ
[Àvñ-1].
fú°_key
;

1063 i‡(*
√x
 <
	`XFS_DFORK_SIZE
(
dù
, 
mp
, 
whichf‹k
) /

1064 (
xfs_bmbt_ªc_t
)) {

1065 
	`do_w¨n
(

1066 
	`_
("exã¡ cou¡ f‹ inÿ%" 
PRIu64
 " %s forkÅooÜow (%" PRIu64 ") for file format\n"),

1067 
löo
, 
f‹k«me
, *
√x
);

1074 i‡(
check_dups
 == 0 &&

1075 
curs‹
.
Àvñ
[0].
right_fsbno
 !
NULLFSBLOCK
) {

1076 
	`do_w¨n
(

1077 
	`_
("bad fwd (rightËsiblögÖoöã∏(ßw %" 
PRIu64
 " should be NULLFSBLOCK)\n"),

1078 
curs‹
.
Àvñ
[0].
right_fsbno
);

1079 
	`do_w¨n
(

1080 
	`_
("\tö inodê%" 
PRIu64
 " (%s fork) bmap btree block %" PRIu64 "\n"),

1081 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
), 
f‹k«me
,

1082 
curs‹
.
Àvñ
[0].
fsbno
);

1087 
	}
}

1093 
	$¥o˚ss_exöode
(

1094 
xfs_mou¡_t
 *
mp
,

1095 
xfs_agnumbî_t
 
agno
,

1096 
xfs_agöo_t
 
öo
,

1097 
xfs_döode_t
 *
dù
,

1098 
ty≥
,

1099 *
dúty
,

1100 
xfs_rfsblock_t
 *
tŸ
,

1101 
__uöt64_t
 *
√x
,

1102 
blkm≠_t
 **
blkm≠p
,

1103 
whichf‹k
,

1104 
check_dups
)

1106 
xfs_öo_t
 
löo
;

1107 
xfs_bmbt_ªc_t
 *
Ω
;

1108 
xfs_fûeoff_t
 
fú°_key
;

1109 
xfs_fûeoff_t
 
œ°_key
;

1110 
öt32_t
 
numªcs
;

1111 
ªt
;

1113 
löo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
);

1114 
Ω
 = (
xfs_bmbt_ªc_t
 *)
	`XFS_DFORK_PTR
(
dù
, 
whichf‹k
);

1115 *
tŸ
 = 0;

1116 
numªcs
 = 
	`XFS_DFORK_NEXTENTS
(
dù
, 
whichf‹k
);

1124 i‡(
numªcs
 < 0)

1125 
numªcs
 = *
√x
;

1132 i‡(
check_dups
 == 0)

1133 
ªt
 = 
	`¥o˚ss_bmbt_ª˛i°
(
mp
, 
Ω
, &
numªcs
, 
ty≥
, 
löo
,

1134 
tŸ
, 
blkm≠p
, &
fú°_key
, &
œ°_key
,

1135 
whichf‹k
);

1137 
ªt
 = 
	`sˇn_bmbt_ª˛i°
(
mp
, 
Ω
, &
numªcs
, 
ty≥
, 
löo
, 
tŸ
,

1138 
whichf‹k
);

1140 *
√x
 = 
numªcs
;

1141  
ªt
;

1142 
	}
}

1148 
	$¥o˚ss_l˛öode
(

1149 
xfs_mou¡_t
 *
mp
,

1150 
xfs_agnumbî_t
 
agno
,

1151 
xfs_agöo_t
 
öo
,

1152 
xfs_döode_t
 *
dù
,

1153 
whichf‹k
)

1155 
xfs_©å_sh‹tf‹m_t
 *
asf
;

1156 
xfs_öo_t
 
löo
;

1158 
löo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
);

1159 i‡(
whichf‹k
 =
XFS_DATA_FORK
 && 
	`be64_to_˝u
(
dù
->
di_size
) >

1160 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
)) {

1161 
	`do_w¨n
(

1162 
	`_
("loˇ»öodê%" 
PRIu64
 " data fork isÅooÜarge (size = %lld, max = %d)\n"),

1163 
löo
, (Ë
	`be64_to_˝u
(
dù
->
di_size
),

1164 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
));

1166 } i‡(
whichf‹k
 =
XFS_ATTR_FORK
) {

1167 
asf
 = (
xfs_©å_sh‹tf‹m_t
 *)
	`XFS_DFORK_APTR
(
dù
);

1168 i‡(
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
Ë> 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
)) {

1169 
	`do_w¨n
(

1170 
	`_
("loˇ»öodê%" 
PRIu64
 "áttr forkÅooÜarge (size %d, max = %d)\n"),

1171 
löo
, 
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
),

1172 
	`XFS_DFORK_ASIZE
(
dù
, 
mp
));

1175 i‡(
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
Ë< (
xfs_©å_sf_hdr_t
)) {

1176 
	`do_w¨n
(

1177 
	`_
("loˇ»öodê%" 
PRIu64
 "áttrÅoo small (size = %d, min size = %zd)\n"),

1178 
löo
, 
	`be16_to_˝u
(
asf
->
hdr
.
tŸsize
),

1179 (
xfs_©å_sf_hdr_t
));

1185 
	}
}

1188 
	$¥o˚ss_symlök_exéi°
(
xfs_mou¡_t
 *
mp
, 
xfs_öo_t
 
löo
, 
xfs_döode_t
 *
döo
)

1190 
xfs_fûeoff_t
 
ex≥˘ed_off£t
;

1191 
xfs_bmbt_ªc_t
 *
Ω
;

1192 
xfs_bmbt_úec_t
 
úec
;

1193 
numªcs
;

1194 
i
;

1195 
max_blocks
;

1197 i‡(
	`be64_to_˝u
(
döo
->
di_size
Ë<
	`XFS_DFORK_DSIZE
(döo, 
mp
)) {

1198 i‡(
döo
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
)

1200 
	`do_w¨n
(

1201 
	`_
("mism©ch bëwì¿f‹m© (%dË™d sizê(%" 
PRId64
 "Ëö symlök inÿ%" 
PRIu64
 "\n"),

1202 
döo
->
di_f‹m©
,

1203 (
__öt64_t
)
	`be64_to_˝u
(
döo
->
di_size
), 
löo
);

1206 i‡(
döo
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
) {

1207 
	`do_w¨n
(

1208 
	`_
("mism©ch bëwì¿f‹m© (%dË™d sizê(%" 
PRId64
 "Ëö symlök inodê%" 
PRIu64
 "\n"),

1209 
döo
->
di_f‹m©
,

1210 (
__öt64_t
)
	`be64_to_˝u
(
döo
->
di_size
), 
löo
);

1214 
Ω
 = (
xfs_bmbt_ªc_t
 *)
	`XFS_DFORK_DPTR
(
döo
);

1215 
numªcs
 = 
	`be32_to_˝u
(
döo
->
di_√xã¡s
);

1221 i‡(
numªcs
 > 
max_symlök_blocks
) {

1222 
	`do_w¨n
(

1223 
	`_
("badÇumbî o‡exã¡†(%dËö symlök %" 
PRIu64
 " data fork\n"),

1224 
numªcs
, 
löo
);

1228 
max_blocks
 = 
max_symlök_blocks
;

1229 
ex≥˘ed_off£t
 = 0;

1231 
i
 = 0; i < 
numªcs
; i++) {

1232 
	`libxfs_bmbt_disk_gë_Æl
((
Ω
 +
i
), &
úec
);

1233 i‡(
úec
.
br_°¨toff
 !
ex≥˘ed_off£t
) {

1234 
	`do_w¨n
(

1235 
	`_
("badÉxã¡ #%d off£à(%" 
PRIu64
 ") in symlink %" PRIu64 " data fork\n"),

1236 
i
, 
úec
.
br_°¨toff
, 
löo
);

1239 i‡(
úec
.
br_blockcou¡
 =0 || iªc.br_blockcou¡ > 
max_blocks
) {

1240 
	`do_w¨n
(

1241 
	`_
("badÉxã¡ #%d cou¡ (%" 
PRIu64
 ") in symlink %" PRIu64 " data fork\n"),

1242 
i
, 
úec
.
br_blockcou¡
, 
löo
);

1246 
max_blocks
 -
úec
.
br_blockcou¡
;

1247 
ex≥˘ed_off£t
 +
úec
.
br_blockcou¡
;

1251 
	}
}

1258 
	$nuŒ_check
(*
«me
, 
Àngth
)

1260 
i
;

1262 
	`ASSERT
(
Àngth
 < 
MAXPATHLEN
);

1264 
i
 = 0; i < 
Àngth
; i++, 
«me
++) {

1265 i‡(*
«me
 == '\0')

1270 
	}
}

1273 
	$¥o˚ss_symlök_ªmŸe
(

1274 
xfs_mou¡
 *
mp
,

1275 
xfs_öo_t
 
löo
,

1276 
xfs_döode
 *
döo
,

1277 
blkm≠
 *blkmap,

1278 *
d°
)

1280 
xfs_fsblock_t
 
fsbno
;

1281 
xfs_buf
 *
bp
;

1282 *
§c
;

1283 
∑thÀn
;

1284 
off£t
;

1285 
i
;

1287 
off£t
 = 0;

1288 
∑thÀn
 = 
	`be64_to_˝u
(
döo
->
di_size
);

1289 
i
 = 0;

1291 
∑thÀn
 > 0) {

1292 
blk_˙t
 = 1;

1293 
byã_˙t
;

1294 
bad¸c
 = 0;

1296 
fsbno
 = 
	`blkm≠_gë
(
blkm≠
, 
i
);

1297 i‡(
fsbno
 =
NULLFSBLOCK
) {

1298 
	`do_w¨n
(

1299 
	`_
("ˇ¬ŸÑód inodê%" 
PRIu64
 ", file block %d, NULL disk block\n"),

1300 
löo
, 
i
);

1308 
blk_˙t
 <
max_symlök_blocks
) {

1309 i‡(
	`blkm≠_gë
(
blkm≠
, 
i
 + 1Ë!
fsbno
 + 1)

1311 
blk_˙t
++;

1312 
i
++;

1315 
byã_˙t
 = 
	`XFS_FSB_TO_B
(
mp
, 
blk_˙t
);

1317 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
	`XFS_FSB_TO_DADDR
(mp, 
fsbno
),

1318 
	`BTOBB
(
byã_˙t
), 0, &
xfs_symlök_buf_›s
);

1319 i‡(!
bp
) {

1320 
	`do_w¨n
(

1321 
	`_
("ˇ¬ŸÑód inodê%" 
PRIu64
 ", file block %d, disk block %" PRIu64 "\n"),

1322 
löo
, 
i
, 
fsbno
);

1325 i‡(
bp
->
b_îr‹
 =-
EFSBADCRC
) {

1326 
	`do_w¨n
(

1327 
	`_
("Bad symlök buf„∏CRC, block %" 
PRIu64
 ", inode %" PRIu64 ".\n"

1328 "C‹ª˘ög CRC, buàsymlök may bêbad.\n"), 
fsbno
, 
löo
);

1329 
bad¸c
 = 1;

1332 
byã_˙t
 = 
	`XFS_SYMLINK_BUF_SPACE
(
mp
, byte_cnt);

1333 
byã_˙t
 = 
	`MIN
(
∑thÀn
, byte_cnt);

1335 
§c
 = 
bp
->
b_addr
;

1336 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

1337 i‡(!
	`libxfs_symlök_hdr_ok
(
löo
, 
off£t
,

1338 
byã_˙t
, 
bp
)) {

1339 
	`do_w¨n
(

1340 
	`_
("bad symlök hódî inÿ%" 
PRIu64
 ", file block %d, disk block %" PRIu64 "\n"),

1341 
löo
, 
i
, 
fsbno
);

1342 
	`libxfs_putbuf
(
bp
);

1345 
§c
 +(
xfs_dsymlök_hdr
);

1348 
	`memmove
(
d°
 + 
off£t
, 
§c
, 
byã_˙t
);

1350 
∑thÀn
 -
byã_˙t
;

1351 
off£t
 +
byã_˙t
;

1352 
i
++;

1354 i‡(
bad¸c
 && !
no_modify
)

1355 
	`libxfs_wrôebuf
(
bp
, 0);

1357 
	`libxfs_putbuf
(
bp
);

1360 
	}
}

1367 
	$¥o˚ss_symlök
(

1368 
xfs_mou¡_t
 *
mp
,

1369 
xfs_öo_t
 
löo
,

1370 
xfs_döode_t
 *
döo
,

1371 
blkm≠_t
 *
blkm≠
)

1373 *
symlök
;

1374 
d©a
[
MAXPATHLEN
];

1382 i‡(
	`be64_to_˝u
(
döo
->
di_size
Ë>
MAXPATHLEN
) {

1383 
	`do_w¨n
(
	`_
("symlök i¿öodê%" 
PRIu64
 "ÅooÜong (%llu chars)\n"),

1384 
löo
, (Ë
	`be64_to_˝u
(
döo
->
di_size
));

1392 
symlök
 = &
d©a
[0];

1393 i‡(
	`be64_to_˝u
(
döo
->
di_size
Ë<
	`XFS_DFORK_DSIZE
(döo, 
mp
)) {

1398 
	`memmove
(
symlök
, 
	`XFS_DFORK_DPTR
(
döo
),

1399 
	`be64_to_˝u
(
döo
->
di_size
));

1401 
îr‹
;

1403 
îr‹
 = 
	`¥o˚ss_symlök_ªmŸe
(
mp
, 
löo
, 
döo
, 
blkm≠
, 
symlök
);

1404 i‡(
îr‹
)

1405  
îr‹
;

1408 
d©a
[
	`be64_to_˝u
(
döo
->
di_size
)] = '\0';

1413 i‡(
	`nuŒ_check
(
symlök
, 
	`be64_to_˝u
(
döo
->
di_size
))) {

1414 
	`do_w¨n
(

1415 
	`_
("found iŒegÆÇuŒ ch¨a˘î i¿symlök inodê%" 
PRIu64
 "\n"),

1416 
löo
);

1421 
	}
}

1428 
	$¥o˚ss_misc_öo_ty≥s
(
xfs_mou¡_t
 *
mp
,

1429 
xfs_döode_t
 *
döo
,

1430 
xfs_öo_t
 
löo
,

1431 
ty≥
)

1438 i‡(
ty≥
 =
XR_INO_MOUNTPOINT
) {

1439 
	`do_w¨n
(

1440 
	`_
("öodê%" 
PRIu64
 " ha†bad inodêty≥ (IFMNT)\n"), 
löo
);

1447 i‡(
	`be64_to_˝u
(
döo
->
di_size
) != 0) {

1448 
ty≥
) {

1449 
XR_INO_CHRDEV
:

1450 
	`do_w¨n
(

1451 
	`_
("sizêo‡ch¨a˘î devi˚ inodê%" 
PRIu64
 " !0 (%" 
PRId64
 " byãs)\n"), 
löo
,

1452 (
__öt64_t
)
	`be64_to_˝u
(
döo
->
di_size
));

1454 
XR_INO_BLKDEV
:

1455 
	`do_w¨n
(

1456 
	`_
("sizêo‡block devi˚ inodê%" 
PRIu64
 " !0 (%" 
PRId64
 " byãs)\n"), 
löo
,

1457 (
__öt64_t
)
	`be64_to_˝u
(
döo
->
di_size
));

1459 
XR_INO_SOCK
:

1460 
	`do_w¨n
(

1461 
	`_
("sizêo‡sockë inodê%" 
PRIu64
 " !0 (%" 
PRId64
 " byãs)\n"), 
löo
,

1462 (
__öt64_t
)
	`be64_to_˝u
(
döo
->
di_size
));

1464 
XR_INO_FIFO
:

1465 
	`do_w¨n
(

1466 
	`_
("sizêo‡fifÿöodê%" 
PRIu64
 " !0 (%" 
PRId64
 " byãs)\n"), 
löo
,

1467 (
__öt64_t
)
	`be64_to_˝u
(
döo
->
di_size
));

1470 
	`do_w¨n
(
	`_
("InternalÉrror -Örocess_misc_ino_types, "

1471 "ûÀgÆÅy≥ %d\n"), 
ty≥
);

1472 
	`ab‹t
();

1479 
	}
}

1482 
	$¥o˚ss_misc_öo_ty≥s_blocks
(
xfs_rfsblock_t
 
tŸblocks
, 
xfs_öo_t
 
löo
, 
ty≥
)

1493 i‡(
tŸblocks
 != 0) {

1494 
ty≥
) {

1495 
XR_INO_CHRDEV
:

1496 
	`do_w¨n
(

1497 
	`_
("sizêo‡ch¨a˘î devi˚ inodê%" 
PRIu64
 " != 0 (%" PRIu64 " blocks)\n"),

1498 
löo
, 
tŸblocks
);

1500 
XR_INO_BLKDEV
:

1501 
	`do_w¨n
(

1502 
	`_
("sizêo‡block devi˚ inodê%" 
PRIu64
 " != 0 (%" PRIu64 " blocks)\n"),

1503 
löo
, 
tŸblocks
);

1505 
XR_INO_SOCK
:

1506 
	`do_w¨n
(

1507 
	`_
("sizêo‡sockë inodê%" 
PRIu64
 " != 0 (%" PRIu64 " blocks)\n"),

1508 
löo
, 
tŸblocks
);

1510 
XR_INO_FIFO
:

1511 
	`do_w¨n
(

1512 
	`_
("sizêo‡fifÿöodê%" 
PRIu64
 " != 0 (%" PRIu64 " blocks)\n"),

1513 
löo
, 
tŸblocks
);

1521 
	}
}

1523 
ölöe
 

1524 
	$döode_fmt
(

1525 
xfs_döode_t
 *
döo
)

1527  
	`be16_to_˝u
(
döo
->
di_mode
Ë& 
S_IFMT
;

1528 
	}
}

1530 
ölöe
 

1531 
	$ch™ge_döode_fmt
(

1532 
xfs_döode_t
 *
döo
,

1533 
√w_fmt
)

1535 
mode
 = 
	`be16_to_˝u
(
döo
->
di_mode
);

1537 
	`ASSERT
((
√w_fmt
 & ~
S_IFMT
) == 0);

1539 
mode
 &~
S_IFMT
;

1540 
mode
 |
√w_fmt
;

1541 
döo
->
di_mode
 = 
	`˝u_to_be16
(
mode
);

1542 
	}
}

1545 
	$check_döode_mode_f‹m©
(

1546 
xfs_döode_t
 *
döoc
)

1548 i‡(
döoc
->
di_f‹m©
 >
XFS_DINODE_FMT_UUID
)

1551 
	`döode_fmt
(
döoc
)) {

1552 
S_IFIFO
:

1553 
S_IFCHR
:

1554 
S_IFBLK
:

1555 
S_IFSOCK
:

1556  (
döoc
->
di_f‹m©
 !
XFS_DINODE_FMT_DEV
) ? -1 : 0;

1558 
S_IFDIR
:

1559  (
döoc
->
di_f‹m©
 < 
XFS_DINODE_FMT_LOCAL
 ||

1560 
döoc
->
di_f‹m©
 > 
XFS_DINODE_FMT_BTREE
) ? -1 : 0;

1562 
S_IFREG
:

1563  (
döoc
->
di_f‹m©
 < 
XFS_DINODE_FMT_EXTENTS
 ||

1564 
döoc
->
di_f‹m©
 > 
XFS_DINODE_FMT_BTREE
) ? -1 : 0;

1566 
S_IFLNK
:

1567  (
döoc
->
di_f‹m©
 < 
XFS_DINODE_FMT_LOCAL
 ||

1568 
döoc
->
di_f‹m©
 > 
XFS_DINODE_FMT_EXTENTS
) ? -1 : 0;

1573 
	}
}

1581 
	$¥o˚ss_check_sb_öodes
(

1582 
xfs_mou¡_t
 *
mp
,

1583 
xfs_döode_t
 *
döoc
,

1584 
xfs_öo_t
 
löo
,

1585 *
ty≥
,

1586 *
dúty
)

1588 i‡(
löo
 =
mp
->
m_sb
.
sb_roŸöo
) {

1589 i‡(*
ty≥
 !
XR_INO_DIR
) {

1590 
	`do_w¨n
(
	`_
("roŸ inodê%" 
PRIu64
 " has badÅype 0x%x\n"),

1591 
löo
, 
	`döode_fmt
(
döoc
));

1592 *
ty≥
 = 
XR_INO_DIR
;

1593 i‡(!
no_modify
) {

1594 
	`do_w¨n
(
	`_
("resettingÅo directory\n"));

1595 
	`ch™ge_döode_fmt
(
döoc
, 
S_IFDIR
);

1596 *
dúty
 = 1;

1598 
	`do_w¨n
(
	`_
("wouldÑesetÅo directory\n"));

1602 i‡(
löo
 =
mp
->
m_sb
.
sb_uquŸöo
) {

1603 i‡(*
ty≥
 !
XR_INO_DATA
) {

1604 
	`do_w¨n
(
	`_
("u£∏quŸ®öodê%" 
PRIu64
 " has badÅype 0x%x\n"),

1605 
löo
, 
	`döode_fmt
(
döoc
));

1606 
mp
->
m_sb
.
sb_uquŸöo
 = 
NULLFSINO
;

1611 i‡(
löo
 =
mp
->
m_sb
.
sb_gquŸöo
) {

1612 i‡(*
ty≥
 !
XR_INO_DATA
) {

1613 
	`do_w¨n
(
	`_
("grou∞quŸ®öodê%" 
PRIu64
 " has badÅype 0x%x\n"),

1614 
löo
, 
	`döode_fmt
(
döoc
));

1615 
mp
->
m_sb
.
sb_gquŸöo
 = 
NULLFSINO
;

1620 i‡(
löo
 =
mp
->
m_sb
.
sb_pquŸöo
) {

1621 i‡(*
ty≥
 !
XR_INO_DATA
) {

1622 
	`do_w¨n
(
	`_
("¥oje˘ quŸ®öodê%" 
PRIu64
 " has badÅype 0x%x\n"),

1623 
löo
, 
	`döode_fmt
(
döoc
));

1624 
mp
->
m_sb
.
sb_pquŸöo
 = 
NULLFSINO
;

1629 i‡(
löo
 =
mp
->
m_sb
.
sb_rsumöo
) {

1630 i‡(*
ty≥
 !
XR_INO_RTSUM
) {

1631 
	`do_w¨n
(

1632 
	`_
("ªÆtimêsumm¨y inodê%" 
PRIu64
 " has badÅype 0x%x, "),

1633 
löo
, 
	`döode_fmt
(
döoc
));

1634 i‡(!
no_modify
) {

1635 
	`do_w¨n
(
	`_
("resettingÅoÑegular file\n"));

1636 
	`ch™ge_döode_fmt
(
döoc
, 
S_IFREG
);

1637 *
dúty
 = 1;

1639 
	`do_w¨n
(
	`_
("wouldÑesetÅoÑegular file\n"));

1642 i‡(
mp
->
m_sb
.
sb_rblocks
 =0 && 
döoc
->
di_√xã¡s
 != 0) {

1643 
	`do_w¨n
(

1644 
	`_
("bad # o‡exã¡†(%uËf‹Ñó…imêsumm¨y inodê%" 
PRIu64
 "\n"),

1645 
	`be32_to_˝u
(
döoc
->
di_√xã¡s
), 
löo
);

1650 i‡(
löo
 =
mp
->
m_sb
.
sb_rbmöo
) {

1651 i‡(*
ty≥
 !
XR_INO_RTBITMAP
) {

1652 
	`do_w¨n
(

1653 
	`_
("ªÆtimêbôm≠ inodê%" 
PRIu64
 " has badÅype 0x%x, "),

1654 
löo
, 
	`döode_fmt
(
döoc
));

1655 i‡(!
no_modify
) {

1656 
	`do_w¨n
(
	`_
("resettingÅoÑegular file\n"));

1657 
	`ch™ge_döode_fmt
(
döoc
, 
S_IFREG
);

1658 *
dúty
 = 1;

1660 
	`do_w¨n
(
	`_
("wouldÑesetÅoÑegular file\n"));

1663 i‡(
mp
->
m_sb
.
sb_rblocks
 =0 && 
döoc
->
di_√xã¡s
 != 0) {

1664 
	`do_w¨n
(

1665 
	`_
("bad # o‡exã¡†(%uËf‹Ñó…imêbôm≠ inodê%" 
PRIu64
 "\n"),

1666 
	`be32_to_˝u
(
döoc
->
di_√xã¡s
), 
löo
);

1672 
	}
}

1686 
	$¥o˚ss_check_öode_sizes
(

1687 
xfs_mou¡_t
 *
mp
,

1688 
xfs_döode_t
 *
döo
,

1689 
xfs_öo_t
 
löo
,

1690 
ty≥
)

1692 
xfs_fsize_t
 
size
 = 
	`be64_to_˝u
(
döo
->
di_size
);

1694 
ty≥
) {

1696 
XR_INO_DIR
:

1697 i‡(
size
 <
	`XFS_DFORK_DSIZE
(
döo
, 
mp
) &&

1698 
döo
->
di_f‹m©
 !
XFS_DINODE_FMT_LOCAL
) {

1699 
	`do_w¨n
(

1700 
	`_
("mism©ch bëwì¿f‹m© (%dË™d sizê(%" 
PRId64
 "Ëö dúe˘‹y inÿ%" 
PRIu64
 "\n"),

1701 
döo
->
di_f‹m©
, 
size
, 
löo
);

1704 i‡(
size
 > 
XFS_DIR2_LEAF_OFFSET
) {

1705 
	`do_w¨n
(

1706 
	`_
("dúe˘‹y inodê%" 
PRIu64
 " ha†bad sizê%" 
PRId64
 "\n"),

1707 
löo
, 
size
);

1712 
XR_INO_SYMLINK
:

1713 i‡(
	`¥o˚ss_symlök_exéi°
(
mp
, 
löo
, 
döo
)) {

1714 
	`do_w¨n
(
	`_
("bad d©®f‹k i¿symlök %" 
PRIu64
 "\n"), 
löo
);

1719 
XR_INO_CHRDEV
:

1720 
XR_INO_BLKDEV
:

1721 
XR_INO_SOCK
:

1722 
XR_INO_MOUNTPOINT
:

1723 
XR_INO_FIFO
:

1724 i‡(
	`¥o˚ss_misc_öo_ty≥s
(
mp
, 
döo
, 
löo
, 
ty≥
))

1728 
XR_INO_RTDATA
:

1733 i‡(
mp
->
m_sb
.
sb_rblocks
 == 0) {

1734 
	`do_w¨n
(

1735 
	`_
("found inodê%" 
PRIu64
 " cœimögÅÿbê®ªÆ-timêfûe\n"), 
löo
);

1740 
XR_INO_RTBITMAP
:

1741 i‡(
size
 !(
__öt64_t
)
mp
->
m_sb
.
sb_rbmblocks
 *

1742 
mp
->
m_sb
.
sb_blocksize
) {

1743 
	`do_w¨n
(

1744 
	`_
("ªÆtimêbôm≠ inodê%" 
PRIu64
 " ha†bad sizê%" 
PRId64
 " (should be %" PRIu64 ")\n"),

1745 
löo
, 
size
,

1746 (
__öt64_t
Ë
mp
->
m_sb
.
sb_rbmblocks
 *

1747 
mp
->
m_sb
.
sb_blocksize
);

1752 
XR_INO_RTSUM
:

1753 i‡(
size
 !
mp
->
m_rsumsize
) {

1754 
	`do_w¨n
(

1755 
	`_
("ªÆtimêsumm¨y inodê%" 
PRIu64
 " ha†bad sizê%" 
PRId64
 " (should be %d)\n"),

1756 
löo
, 
size
, 
mp
->
m_rsumsize
);

1765 
	}
}

1771 
	$¥o˚ss_check_öode_f‹koff
(

1772 
xfs_mou¡_t
 *
mp
,

1773 
xfs_döode_t
 *
döo
,

1774 
xfs_öo_t
 
löo
)

1776 i‡(
döo
->
di_f‹koff
 == 0)

1779 
döo
->
di_f‹m©
) {

1780 
XFS_DINODE_FMT_DEV
:

1781 i‡(
döo
->
di_f‹koff
 !(
	`roundup
((
xfs_dev_t
), 8) >> 3)) {

1782 
	`do_w¨n
(

1783 
	`_
("badáâ∏f‹k off£à%d i¿dev inodê%" 
PRIu64
 ", should be %d\n"),

1784 
döo
->
di_f‹koff
, 
löo
,

1785 ()(
	`roundup
((
xfs_dev_t
), 8) >> 3));

1789 
XFS_DINODE_FMT_LOCAL
:

1790 
XFS_DINODE_FMT_EXTENTS
:

1791 
XFS_DINODE_FMT_BTREE
:

1792 i‡(
döo
->
di_f‹koff
 >=

1793 (
	`XFS_LITINO
(
mp
, 
döo
->
di_vîsi⁄
) >> 3)) {

1794 
	`do_w¨n
(

1795 
	`_
("badáâ∏f‹k off£à%d i¿öodê%" 
PRIu64
 ", max=%d\n"),

1796 
döo
->
di_f‹koff
, 
löo
,

1797 
	`XFS_LITINO
(
mp
, 
döo
->
di_vîsi⁄
) >> 3);

1802 
	`do_îr‹
(
	`_
("u√x≥˘ed inodêf‹m© %d\n"), 
döo
->
di_f‹m©
);

1806 
	}
}

1812 
	$¥o˚ss_öode_blocks_™d_exã¡s
(

1813 
xfs_döode_t
 *
döo
,

1814 
xfs_rfsblock_t
 
nblocks
,

1815 
__uöt64_t
 
√xã¡s
,

1816 
__uöt64_t
 
™exã¡s
,

1817 
xfs_öo_t
 
löo
,

1818 *
dúty
)

1820 i‡(
nblocks
 !
	`be64_to_˝u
(
döo
->
di_nblocks
)) {

1821 i‡(!
no_modify
) {

1822 
	`do_w¨n
(

1823 
	`_
("c‹ª˘ögÇblock†f‹ inodê%" 
PRIu64
 ", wa†%Œu - cou¡ed %" PRIu64 "\n"), 
löo
,

1824 (Ë
	`be64_to_˝u
(
döo
->
di_nblocks
),

1825 
nblocks
);

1826 
döo
->
di_nblocks
 = 
	`˝u_to_be64
(
nblocks
);

1827 *
dúty
 = 1;

1829 
	`do_w¨n
(

1830 
	`_
("badÇblock†%Œu f‹ inodê%" 
PRIu64
 ", wouldÑesetÅo %" PRIu64 "\n"),

1831 (Ë
	`be64_to_˝u
(
döo
->
di_nblocks
),

1832 
löo
, 
nblocks
);

1836 i‡(
√xã¡s
 > 
MAXEXTNUM
) {

1837 
	`do_w¨n
(

1838 
	`_
("toÿm™y d©®f‹kÉxã¡†(%" 
PRIu64
 ") in inode %" PRIu64 "\n"),

1839 
√xã¡s
, 
löo
);

1842 i‡(
√xã¡s
 !
	`be32_to_˝u
(
döo
->
di_√xã¡s
)) {

1843 i‡(!
no_modify
) {

1844 
	`do_w¨n
(

1845 
	`_
("c‹ª˘ögÇexã¡†f‹ inodê%" 
PRIu64
 ", was %d - counted %" PRIu64 "\n"),

1846 
löo
,

1847 
	`be32_to_˝u
(
döo
->
di_√xã¡s
),

1848 
√xã¡s
);

1849 
döo
->
di_√xã¡s
 = 
	`˝u_to_be32
(
√xã¡s
);

1850 *
dúty
 = 1;

1852 
	`do_w¨n
(

1853 
	`_
("badÇexã¡†%d f‹ inodê%" 
PRIu64
 ", wouldÑesetÅo %" PRIu64 "\n"),

1854 
	`be32_to_˝u
(
döo
->
di_√xã¡s
),

1855 
löo
, 
√xã¡s
);

1859 i‡(
™exã¡s
 > 
MAXAEXTNUM
) {

1860 
	`do_w¨n
(

1861 
	`_
("toÿm™yáâ∏f‹kÉxã¡†(%" 
PRIu64
 ") in inode %" PRIu64 "\n"),

1862 
™exã¡s
, 
löo
);

1865 i‡(
™exã¡s
 !
	`be16_to_˝u
(
döo
->
di_™exã¡s
)) {

1866 i‡(!
no_modify
) {

1867 
	`do_w¨n
(

1868 
	`_
("c‹ª˘ögá√xã¡†f‹ inodê%" 
PRIu64
 ", was %d - counted %" PRIu64 "\n"),

1869 
löo
,

1870 
	`be16_to_˝u
(
döo
->
di_™exã¡s
), 
™exã¡s
);

1871 
döo
->
di_™exã¡s
 = 
	`˝u_to_be16
(
™exã¡s
);

1872 *
dúty
 = 1;

1874 
	`do_w¨n
(

1875 
	`_
("badá√xã¡†%d f‹ inodê%" 
PRIu64
 ", wouldÑesetÅo %" PRIu64 "\n"),

1876 
	`be16_to_˝u
(
döo
->
di_™exã¡s
),

1877 
löo
, 
™exã¡s
);

1885 i‡(
nblocks
 < 
√xã¡s
 + 
™exã¡s
) {

1886 
	`do_w¨n
(

1887 
	`_
("nblock†(%" 
PRIu64
 "ËsmÆÀ∏th™Çexã¡†f‹ inodê%" PRIu64 "\n"), 
nblocks
, 
löo
);

1892 
	}
}

1898 
	$¥o˚ss_öode_d©a_f‹k
(

1899 
xfs_mou¡_t
 *
mp
,

1900 
xfs_agnumbî_t
 
agno
,

1901 
xfs_agöo_t
 
öo
,

1902 
xfs_döode_t
 *
döo
,

1903 
ty≥
,

1904 *
dúty
,

1905 
xfs_rfsblock_t
 *
tŸblocks
,

1906 
__uöt64_t
 *
√xã¡s
,

1907 
blkm≠_t
 **
dblkm≠
,

1908 
check_dups
)

1910 
xfs_öo_t
 
löo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
);

1911 
îr
 = 0;

1912 
√x
;

1919 
√x
 = 
	`be32_to_˝u
(
döo
->
di_√xã¡s
);

1920 i‡(
√x
 < 0)

1921 *
√xã¡s
 = 1;

1923 *
√xã¡s
 = 
√x
;

1925 i‡(*
√xã¡s
 > 
	`be64_to_˝u
(
döo
->
di_nblocks
))

1926 *
√xã¡s
 = 1;

1929 i‡(
döo
->
di_f‹m©
 !
XFS_DINODE_FMT_LOCAL
 && 
ty≥
 !
XR_INO_RTDATA
)

1930 *
dblkm≠
 = 
	`blkm≠_Æloc
(*
√xã¡s
, 
XFS_DATA_FORK
);

1931 *
√xã¡s
 = 0;

1933 
döo
->
di_f‹m©
) {

1934 
XFS_DINODE_FMT_LOCAL
:

1935 
îr
 = 
	`¥o˚ss_l˛öode
(
mp
, 
agno
, 
öo
, 
döo
, 
XFS_DATA_FORK
);

1936 *
tŸblocks
 = 0;

1938 
XFS_DINODE_FMT_EXTENTS
:

1939 
îr
 = 
	`¥o˚ss_exöode
(
mp
, 
agno
, 
öo
, 
döo
, 
ty≥
, 
dúty
,

1940 
tŸblocks
, 
√xã¡s
, 
dblkm≠
, 
XFS_DATA_FORK
,

1941 
check_dups
);

1943 
XFS_DINODE_FMT_BTREE
:

1944 
îr
 = 
	`¥o˚ss_btöode
(
mp
, 
agno
, 
öo
, 
döo
, 
ty≥
, 
dúty
,

1945 
tŸblocks
, 
√xã¡s
, 
dblkm≠
, 
XFS_DATA_FORK
,

1946 
check_dups
);

1948 
XFS_DINODE_FMT_DEV
:

1949 
îr
 = 0;

1952 
	`do_îr‹
(
	`_
("unknow¿f‹m© %d, inÿ%" 
PRIu64
 " (mode = %d)\n"),

1953 
döo
->
di_f‹m©
, 
löo
, 
	`be16_to_˝u
(döo->
di_mode
));

1956 i‡(
îr
) {

1957 
	`do_w¨n
(
	`_
("bad d©®f‹k i¿öodê%" 
PRIu64
 "\n"), 
löo
);

1958 i‡(!
no_modify
) {

1959 *
dúty
 +
	`˛ór_döode
(
mp
, 
döo
, 
löo
);

1960 
	`ASSERT
(*
dúty
 > 0);

1965 i‡(
check_dups
) {

1971 
döo
->
di_f‹m©
) {

1972 
XFS_DINODE_FMT_LOCAL
:

1973 
îr
 = 
	`¥o˚ss_l˛öode
(
mp
, 
agno
, 
öo
, 
döo
,

1974 
XFS_DATA_FORK
);

1976 
XFS_DINODE_FMT_EXTENTS
:

1977 
îr
 = 
	`¥o˚ss_exöode
(
mp
, 
agno
, 
öo
, 
döo
, 
ty≥
,

1978 
dúty
, 
tŸblocks
, 
√xã¡s
, 
dblkm≠
,

1979 
XFS_DATA_FORK
, 0);

1981 
XFS_DINODE_FMT_BTREE
:

1982 
îr
 = 
	`¥o˚ss_btöode
(
mp
, 
agno
, 
öo
, 
döo
, 
ty≥
,

1983 
dúty
, 
tŸblocks
, 
√xã¡s
, 
dblkm≠
,

1984 
XFS_DATA_FORK
, 0);

1986 
XFS_DINODE_FMT_DEV
:

1987 
îr
 = 0;

1990 
	`do_îr‹
(
	`_
("unknow¿f‹m© %d, inÿ%" 
PRIu64
 " (mode = %d)\n"),

1991 
döo
->
di_f‹m©
, 
löo
,

1992 
	`be16_to_˝u
(
döo
->
di_mode
));

1995 i‡(
no_modify
 && 
îr
 != 0)

1998 
	`ASSERT
(
îr
 == 0);

2001 
	}
}

2007 
	$¥o˚ss_öode_©å_f‹k
(

2008 
xfs_mou¡_t
 *
mp
,

2009 
xfs_agnumbî_t
 
agno
,

2010 
xfs_agöo_t
 
öo
,

2011 
xfs_döode_t
 *
döo
,

2012 
ty≥
,

2013 *
dúty
,

2014 
xfs_rfsblock_t
 *
©Ÿblocks
,

2015 
__uöt64_t
 *
™exã¡s
,

2016 
check_dups
,

2017 
exåa_©å_check
,

2018 *
ªtvÆ
)

2020 
xfs_öo_t
 
löo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
);

2021 
blkm≠_t
 *
ablkm≠
 = 
NULL
;

2022 
ª∑ú
 = 0;

2023 
îr
;

2025 i‡(!
	`XFS_DFORK_Q
(
döo
)) {

2026 *
™exã¡s
 = 0;

2027 i‡(
döo
->
di_af‹m©
 !
XFS_DINODE_FMT_EXTENTS
) {

2028 
	`do_w¨n
(
	`_
("badáâribuã f‹m© %d i¿öodê%" 
PRIu64
 ", "),

2029 
döo
->
di_af‹m©
, 
löo
);

2030 i‡(!
no_modify
) {

2031 
	`do_w¨n
(
	`_
("resetting value\n"));

2032 
döo
->
di_af‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

2033 *
dúty
 = 1;

2035 
	`do_w¨n
(
	`_
("wouldÑeset value\n"));

2040 *
™exã¡s
 = 
	`be16_to_˝u
(
döo
->
di_™exã¡s
);

2041 i‡(*
™exã¡s
 > 
	`be64_to_˝u
(
döo
->
di_nblocks
))

2042 *
™exã¡s
 = 1;

2044 
döo
->
di_af‹m©
) {

2045 
XFS_DINODE_FMT_LOCAL
:

2046 *
™exã¡s
 = 0;

2047 *
©Ÿblocks
 = 0;

2048 
îr
 = 
	`¥o˚ss_l˛öode
(
mp
, 
agno
, 
öo
, 
döo
, 
XFS_ATTR_FORK
);

2050 
XFS_DINODE_FMT_EXTENTS
:

2051 
ablkm≠
 = 
	`blkm≠_Æloc
(*
™exã¡s
, 
XFS_ATTR_FORK
);

2052 *
™exã¡s
 = 0;

2053 
îr
 = 
	`¥o˚ss_exöode
(
mp
, 
agno
, 
öo
, 
döo
, 
ty≥
, 
dúty
,

2054 
©Ÿblocks
, 
™exã¡s
, &
ablkm≠
,

2055 
XFS_ATTR_FORK
, 
check_dups
);

2057 
XFS_DINODE_FMT_BTREE
:

2058 
ablkm≠
 = 
	`blkm≠_Æloc
(*
™exã¡s
, 
XFS_ATTR_FORK
);

2059 *
™exã¡s
 = 0;

2060 
îr
 = 
	`¥o˚ss_btöode
(
mp
, 
agno
, 
öo
, 
döo
, 
ty≥
, 
dúty
,

2061 
©Ÿblocks
, 
™exã¡s
, &
ablkm≠
,

2062 
XFS_ATTR_FORK
, 
check_dups
);

2065 
	`do_w¨n
(
	`_
("ûÀgÆáâribuã f‹m© %d, inÿ%" 
PRIu64
 "\n"),

2066 
döo
->
di_af‹m©
, 
löo
);

2067 
îr
 = 1;

2071 i‡(
îr
) {

2080 
	`do_w¨n
(
	`_
("badáâribuã f‹k i¿öodê%" 
PRIu64
), 
löo
);

2082 i‡(!
no_modify
) {

2083 i‡(
dñëe_©å_ok
) {

2084 
	`do_w¨n
(
	`_
(", clearingáttr fork\n"));

2085 *
dúty
 +
	`˛ór_döode_©å
(
mp
, 
döo
, 
löo
);

2086 
döo
->
di_af‹m©
 = 
XFS_DINODE_FMT_LOCAL
;

2088 
	`do_w¨n
("\n");

2089 *
dúty
 +
	`˛ór_döode
(
mp
, 
döo
, 
löo
);

2091 
	`ASSERT
(*
dúty
 > 0);

2093 
	`do_w¨n
(
	`_
(", would clearáttr fork\n"));

2096 *
©Ÿblocks
 = 0;

2097 *
™exã¡s
 = 0;

2098 
	`blkm≠_‰ì
(
ablkm≠
);

2099 *
ªtvÆ
 = 1;

2101  
dñëe_©å_ok
 ? 0 : 1;

2104 i‡(
check_dups
) {

2105 
döo
->
di_af‹m©
) {

2106 
XFS_DINODE_FMT_LOCAL
:

2107 
îr
 = 
	`¥o˚ss_l˛öode
(
mp
, 
agno
, 
öo
, 
döo
,

2108 
XFS_ATTR_FORK
);

2110 
XFS_DINODE_FMT_EXTENTS
:

2111 
îr
 = 
	`¥o˚ss_exöode
(
mp
, 
agno
, 
öo
, 
döo
,

2112 
ty≥
, 
dúty
, 
©Ÿblocks
, 
™exã¡s
,

2113 &
ablkm≠
, 
XFS_ATTR_FORK
, 0);

2115 
XFS_DINODE_FMT_BTREE
:

2116 
îr
 = 
	`¥o˚ss_btöode
(
mp
, 
agno
, 
öo
, 
döo
,

2117 
ty≥
, 
dúty
, 
©Ÿblocks
, 
™exã¡s
,

2118 &
ablkm≠
, 
XFS_ATTR_FORK
, 0);

2121 
	`do_îr‹
(
	`_
("ûÀgÆáâribuã fmà%d, inÿ%" 
PRIu64
 "\n"),

2122 
döo
->
di_af‹m©
, 
löo
);

2125 i‡(
no_modify
 && 
îr
 != 0) {

2126 
	`blkm≠_‰ì
(
ablkm≠
);

2130 
	`ASSERT
(
îr
 == 0);

2138 i‡(
exåa_©å_check
 &&

2139 
	`¥o˚ss_©åibuãs
(
mp
, 
löo
, 
döo
, 
ablkm≠
, &
ª∑ú
)) {

2140 
	`do_w¨n
(

2141 
	`_
("¥obÀm wôháâribuã c⁄ã¡†ö inodê%" 
PRIu64
 "\n"),

2142 
löo
);

2143 i‡(!
ª∑ú
) {

2145 i‡(!
no_modify
) {

2146 *
dúty
 +
	`˛ór_döode_©å
(
mp
, 
döo
, 
löo
);

2147 
döo
->
di_af‹m©
 = 
XFS_DINODE_FMT_LOCAL
;

2149 
	`do_w¨n
(
	`_
("would clearáttr fork\n"));

2151 *
©Ÿblocks
 = 0;

2152 *
™exã¡s
 = 0;

2155 *
dúty
 = 1;

2158 
	`blkm≠_‰ì
(
ablkm≠
);

2160 
	}
}

2169 
	$¥o˚ss_check_öode_∆ök_vîsi⁄
(

2170 
xfs_döode_t
 *
döo
,

2171 
xfs_öo_t
 
löo
)

2173 
dúty
 = 0;

2179 i‡(
döo
->
di_vîsi⁄
 > 1 && döo->
di_⁄lök
 != 0) {

2180 i‡(!
no_modify
) {

2181 
	`do_w¨n
(

2182 
	`_
("˛órög obsﬁëê∆ök fõld i¿vîsi⁄ 2 inodê%" 
PRIu64
 ", was %d,Çow 0\n"),

2183 
löo
, 
	`be16_to_˝u
(
döo
->
di_⁄lök
));

2184 
döo
->
di_⁄lök
 = 0;

2185 
dúty
 = 1;

2187 
	`do_w¨n
(

2188 
	`_
("would cÀ¨ obsﬁëê∆ök fõld i¿vîsi⁄ 2 inodê%" 
PRIu64
 ", currently %d\n"),

2189 
löo
, 
	`be16_to_˝u
(
döo
->
di_⁄lök
));

2192  
dúty
;

2193 
	}
}

2205 
	$¥o˚ss_döode_öt
(
xfs_mou¡_t
 *
mp
,

2206 
xfs_döode_t
 *
döo
,

2207 
xfs_agnumbî_t
 
agno
,

2208 
xfs_agöo_t
 
öo
,

2209 
was_‰ì
,

2210 *
dúty
,

2211 *
u£d
,

2212 
vîify_mode
,

2213 
un˚πaö
,

2214 
öo_discovîy
,

2215 
check_dups
,

2217 
exåa_©å_check
,

2218 *
iß_dú
,

2219 
xfs_öo_t
 *
∑ª¡
)

2221 
xfs_rfsblock_t
 
tŸblocks
 = 0;

2222 
xfs_rfsblock_t
 
©Ÿblocks
 = 0;

2223 
di_mode
;

2224 
ty≥
;

2225 
ªtvÆ
 = 0;

2226 
__uöt64_t
 
√xã¡s
;

2227 
__uöt64_t
 
™exã¡s
;

2228 
xfs_öo_t
 
löo
;

2229 c⁄° 
is_‰ì
 = 0;

2230 c⁄° 
is_u£d
 = 1;

2231 
blkm≠_t
 *
dblkm≠
 = 
NULL
;

2233 *
dúty
 = *
iß_dú
 = 0;

2234 *
u£d
 = 
is_u£d
;

2235 
ty≥
 = 
XR_INO_UNKNOWN
;

2237 
löo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
);

2238 
di_mode
 = 
	`be16_to_˝u
(
döo
->di_mode);

2252 
	`ASSERT
(
un˚πaö
 =0 || 
vîify_mode
 != 0);

2262 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) &&

2263 !
	`libxfs_vîify_cksum
((*)
döo
, 
mp
->
m_sb
.
sb_öodesize
,

2264 
XFS_DINODE_CRC_OFF
)) {

2265 
ªtvÆ
 = 1;

2266 i‡(!
un˚πaö
)

2267 
	`do_w¨n
(
	`_
("bad CRC f‹ inodê%" 
PRIu64
 "%c"),

2268 
löo
, 
vîify_mode
 ? '\n' : ',');

2269 i‡(!
vîify_mode
) {

2270 i‡(!
no_modify
) {

2271 
	`do_w¨n
(
	`_
(" willÑewrite\n"));

2272 *
dúty
 = 1;

2274 
	`do_w¨n
(
	`_
(" wouldÑewrite\n"));

2278 i‡(
	`be16_to_˝u
(
döo
->
di_magic
Ë!
XFS_DINODE_MAGIC
) {

2279 
ªtvÆ
 = 1;

2280 i‡(!
un˚πaö
)

2281 
	`do_w¨n
(
	`_
("bad magi¯numbî 0x%x o¿öodê%" 
PRIu64
 "%c"),

2282 
	`be16_to_˝u
(
döo
->
di_magic
), 
löo
,

2283 
vîify_mode
 ? '\n' : ',');

2284 i‡(!
vîify_mode
) {

2285 i‡(!
no_modify
) {

2286 
	`do_w¨n
(
	`_
("Ñesetting magicÇumber\n"));

2287 
döo
->
di_magic
 = 
	`˝u_to_be16
(
XFS_DINODE_MAGIC
);

2288 *
dúty
 = 1;

2290 
	`do_w¨n
(
	`_
(" wouldÑeset magicÇumber\n"));

2294 i‡(!
	`libxfs_döode_good_vîsi⁄
(
mp
, 
döo
->
di_vîsi⁄
)) {

2295 
ªtvÆ
 = 1;

2296 i‡(!
un˚πaö
)

2297 
	`do_w¨n
(
	`_
("bad vîsi⁄Çumbî 0x%x o¿öodê%" 
PRIu64
 "%c"),

2298 (
__s8
)
döo
->
di_vîsi⁄
, 
löo
,

2299 
vîify_mode
 ? '\n' : ',');

2300 i‡(!
vîify_mode
) {

2301 i‡(!
no_modify
) {

2302 
	`do_w¨n
(
	`_
("Ñesetting versionÇumber\n"));

2303 
döo
->
di_vîsi⁄
 =

2304 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) ? 3 : 2;

2305 *
dúty
 = 1;

2307 
	`do_w¨n
(
	`_
(" wouldÑeset versionÇumber\n"));

2316 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

2317 i‡(
	`be64_to_˝u
(
döo
->
di_öo
Ë!
löo
) {

2318 i‡(!
un˚πaö
)

2319 
	`do_w¨n
(

2320 
	`_
("öodêidítifõ∏%Œu mism©ch o¿öodê%" 
PRIu64
 "\n"),

2321 
	`be64_to_˝u
(
döo
->
di_öo
), 
löo
);

2322 i‡(
vîify_mode
)

2324 
˛ór_bad_out
;

2326 i‡(
	`∂©f‹m_uuid_com∑ª
(&
döo
->
di_uuid
,

2327 &
mp
->
m_sb
.
sb_mëa_uuid
)) {

2328 i‡(!
un˚πaö
)

2329 
	`do_w¨n
(

2330 
	`_
("UUID mism©ch o¿öodê%" 
PRIu64
 "\n"), 
löo
);

2331 i‡(
vîify_mode
)

2333 
˛ór_bad_out
;

2340 i‡((
xfs_fsize_t
)
	`be64_to_˝u
(
döo
->
di_size
) < 0) {

2341 i‡(!
un˚πaö
)

2342 
	`do_w¨n
(

2343 
	`_
("bad (√g©iveËsizê%" 
PRId64
 " o¿öodê%" 
PRIu64
 "\n"),

2344 (
__öt64_t
)
	`be64_to_˝u
(
döo
->
di_size
),

2345 
löo
);

2346 i‡(
vîify_mode
)

2348 
˛ór_bad_out
;

2355 i‡(!
vîify_mode
 && 
di_mode
 == 0) {

2359 i‡(
was_‰ì
) {

2365 i‡(!
no_modify
)

2366 *
dúty
 +
	`˛ór_döode
(
mp
, 
döo
, 
löo
);

2367 *
u£d
 = 
is_‰ì
;

2375 
	`do_w¨n
(

2376 
	`_
("im≠ cœim†®‰ì inodê%" 
PRIu64
 " i†ö u£, "), 
löo
);

2377 i‡(!
no_modify
) {

2378 
	`do_w¨n
(
	`_
("correcting imapánd clearing inode\n"));

2379 *
dúty
 +
	`˛ór_döode
(
mp
, 
döo
, 
löo
);

2380 
ªtvÆ
 = 1;

2382 
	`do_w¨n
(
	`_
("would correct imapánd clear inode\n"));

2383 *
u£d
 = 
is_‰ì
;

2384  
ªtvÆ
;

2396 i‡(
di_mode
 !0 && 
	`check_döode_mode_f‹m©
(
döo
) != 0) {

2397 i‡(!
un˚πaö
)

2398 
	`do_w¨n
(

2399 
	`_
("bad inodêf‹m© i¿öodê%" 
PRIu64
 "\n"), 
löo
);

2400 i‡(
vîify_mode
)

2402 
˛ór_bad_out
;

2409 i‡(
döo
->
di_Êags
) {

2410 
uöt16_t
 
Êags
 = 
	`be16_to_˝u
(
döo
->
di_Êags
);

2412 i‡(
Êags
 & ~
XFS_DIFLAG_ANY
) {

2413 i‡(!
un˚πaö
) {

2414 
	`do_w¨n
(

2415 
	`_
("Bad fœg†£àö inodê%" 
PRIu64
 "\n"),

2416 
löo
);

2418 
Êags
 &
XFS_DIFLAG_ANY
;

2421 i‡(
Êags
 & (
XFS_DIFLAG_REALTIME
 | 
XFS_DIFLAG_RTINHERIT
)) {

2423 i‡(!
π_«me
) {

2424 i‡(!
un˚πaö
) {

2425 
	`do_w¨n
(

2426 
	`_
("öodê%" 
PRIu64
 " has RT flag set butÅhere isÇo RT device\n"),

2427 
löo
);

2429 
Êags
 &~(
XFS_DIFLAG_REALTIME
 |

2430 
XFS_DIFLAG_RTINHERIT
);

2433 i‡(
Êags
 & 
XFS_DIFLAG_NEWRTBM
) {

2435 i‡(
löo
 !
mp
->
m_sb
.
sb_rbmöo
) {

2436 i‡(!
un˚πaö
) {

2437 
	`do_w¨n
(

2438 
	`_
("öodê%" 
PRIu64
 "ÇotÑt bitmap\n"),

2439 
löo
);

2441 
Êags
 &~
XFS_DIFLAG_NEWRTBM
;

2444 i‡(
Êags
 & (
XFS_DIFLAG_RTINHERIT
 |

2445 
XFS_DIFLAG_EXTSZINHERIT
 |

2446 
XFS_DIFLAG_PROJINHERIT
 |

2447 
XFS_DIFLAG_NOSYMLINKS
)) {

2449 i‡(
di_mode
 && !
	`S_ISDIR
(di_mode)) {

2450 i‡(!
un˚πaö
) {

2451 
	`do_w¨n
(

2452 
	`_
("dúe˘‹y fœg†£à⁄Ç⁄-dúe˘‹y inodê%" 
PRIu64
 "\n" ),

2453 
löo
);

2455 
Êags
 &~(
XFS_DIFLAG_RTINHERIT
 |

2456 
XFS_DIFLAG_EXTSZINHERIT
 |

2457 
XFS_DIFLAG_PROJINHERIT
 |

2458 
XFS_DIFLAG_NOSYMLINKS
);

2461 i‡(
Êags
 & (
XFS_DIFLAG_REALTIME
 | 
FS_XFLAG_EXTSIZE
)) {

2463 i‡(
di_mode
 && !
	`S_ISREG
(di_mode)) {

2464 i‡(!
un˚πaö
) {

2465 
	`do_w¨n
(

2466 
	`_
("fûêÊag†£à⁄Ç⁄-fûêöodê%" 
PRIu64
 "\n"),

2467 
löo
);

2469 
Êags
 &~(
XFS_DIFLAG_REALTIME
 |

2470 
FS_XFLAG_EXTSIZE
);

2473 i‡(!
vîify_mode
 && 
Êags
 !
	`be16_to_˝u
(
döo
->
di_Êags
)) {

2474 i‡(!
no_modify
) {

2475 
	`do_w¨n
(
	`_
("fixing bad flags.\n"));

2476 
döo
->
di_Êags
 = 
	`˝u_to_be16
(
Êags
);

2477 *
dúty
 = 1;

2479 
	`do_w¨n
(
	`_
("would fix bad flags.\n"));

2487 i‡(
döo
->
di_vîsi⁄
 >= 3) {

2488 
uöt16_t
 
Êags
 = 
	`be16_to_˝u
(
döo
->
di_Êags
);

2489 
uöt64_t
 
Êags2
 = 
	`be64_to_˝u
(
döo
->
di_Êags2
);

2491 i‡(
Êags2
 & ~
XFS_DIFLAG2_ANY
) {

2492 i‡(!
un˚πaö
) {

2493 
	`do_w¨n
(

2494 
	`_
("Bad fœgs2 së i¿öodê%" 
PRIu64
 "\n"),

2495 
löo
);

2497 
Êags2
 &
XFS_DIFLAG2_ANY
;

2500 i‡((
Êags2
 & 
XFS_DIFLAG2_REFLINK
) &&

2501 !
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
)) {

2502 i‡(!
un˚πaö
) {

2503 
	`do_w¨n
(

2504 
	`_
("öodê%" 
PRIu64
 " is markedÑeflinked but file system doesÇot supportÑeflink\n"),

2505 
löo
);

2507 
˛ór_bad_out
;

2510 i‡(
Êags2
 & 
XFS_DIFLAG2_REFLINK
) {

2512 i‡(
di_mode
 && !
	`S_ISREG
(di_mode)) {

2513 i‡(!
un˚πaö
) {

2514 
	`do_w¨n
(

2515 
	`_
("ªÊök fœg së o¿n⁄-fûêöodê%" 
PRIu64
 "\n"),

2516 
löo
);

2518 
˛ór_bad_out
;

2522 i‡((
Êags2
 & 
XFS_DIFLAG2_REFLINK
) &&

2523 (
Êags
 & (
XFS_DIFLAG_REALTIME
 | 
XFS_DIFLAG_RTINHERIT
))) {

2524 i‡(!
un˚πaö
) {

2525 
	`do_w¨n
(

2526 
	`_
("C™nŸ havê®ªÊökedÑó…imêöodê%" 
PRIu64
 "\n"),

2527 
löo
);

2529 
˛ór_bad_out
;

2532 i‡((
Êags2
 & 
XFS_DIFLAG2_COWEXTSIZE
) &&

2533 !
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
)) {

2534 i‡(!
un˚πaö
) {

2535 
	`do_w¨n
(

2536 
	`_
("öodê%" 
PRIu64
 " has CoWÉxtent size hint but file system doesÇot supportÑeflink\n"),

2537 
löo
);

2539 
Êags2
 &~
XFS_DIFLAG2_COWEXTSIZE
;

2542 i‡(
Êags2
 & 
XFS_DIFLAG2_COWEXTSIZE
) {

2544 i‡(
di_mode
 && !
	`S_ISDIR
(di_modeË&& !
	`S_ISREG
(di_mode)) {

2545 i‡(!
un˚πaö
) {

2546 
	`do_w¨n
(

2547 
	`_
("CoWÉxã¡ sizêÊag së o¿n⁄-fûe,Ç⁄-dúe˘‹y inodê%" 
PRIu64
 "\n" ),

2548 
löo
);

2550 
Êags2
 &~
XFS_DIFLAG2_COWEXTSIZE
;

2554 i‡((
Êags2
 & 
XFS_DIFLAG2_COWEXTSIZE
) &&

2555 (
Êags
 & (
XFS_DIFLAG_REALTIME
 | 
XFS_DIFLAG_RTINHERIT
))) {

2556 i‡(!
un˚πaö
) {

2557 
	`do_w¨n
(

2558 
	`_
("C™nŸ havêCoWÉxã¡ sizêhöà⁄áÑó…imêöodê%" 
PRIu64
 "\n"),

2559 
löo
);

2561 
Êags2
 &~
XFS_DIFLAG2_COWEXTSIZE
;

2564 i‡(!
vîify_mode
 && 
Êags2
 !
	`be64_to_˝u
(
döo
->
di_Êags2
)) {

2565 i‡(!
no_modify
) {

2566 
	`do_w¨n
(
	`_
("fixing bad flags2.\n"));

2567 
döo
->
di_Êags2
 = 
	`˝u_to_be64
(
Êags2
);

2568 *
dúty
 = 1;

2570 
	`do_w¨n
(
	`_
("would fix bad flags2.\n"));

2574 i‡(
vîify_mode
)

2575  
ªtvÆ
;

2585 i‡(
check_dups
 && !
no_modify
)

2586 *
dúty
 +
	`˛ór_döode_u∆öked
(
mp
, 
döo
);

2590 
di_mode
 & 
S_IFMT
) {

2591 
S_IFDIR
:

2592 
ty≥
 = 
XR_INO_DIR
;

2593 *
iß_dú
 = 1;

2595 
S_IFREG
:

2596 i‡(
	`be16_to_˝u
(
döo
->
di_Êags
Ë& 
XFS_DIFLAG_REALTIME
)

2597 
ty≥
 = 
XR_INO_RTDATA
;

2598 i‡(
löo
 =
mp
->
m_sb
.
sb_rbmöo
)

2599 
ty≥
 = 
XR_INO_RTBITMAP
;

2600 i‡(
löo
 =
mp
->
m_sb
.
sb_rsumöo
)

2601 
ty≥
 = 
XR_INO_RTSUM
;

2603 
ty≥
 = 
XR_INO_DATA
;

2605 
S_IFLNK
:

2606 
ty≥
 = 
XR_INO_SYMLINK
;

2608 
S_IFCHR
:

2609 
ty≥
 = 
XR_INO_CHRDEV
;

2611 
S_IFBLK
:

2612 
ty≥
 = 
XR_INO_BLKDEV
;

2614 
S_IFSOCK
:

2615 
ty≥
 = 
XR_INO_SOCK
;

2617 
S_IFIFO
:

2618 
ty≥
 = 
XR_INO_FIFO
;

2621 
	`do_w¨n
(
	`_
("bad inodêty≥ %#ÿöodê%" 
PRIu64
 "\n"),

2622 
di_mode
 & 
S_IFMT
, 
löo
);

2623 
˛ór_bad_out
;

2629 i‡(
	`¥o˚ss_check_sb_öodes
(
mp
, 
döo
, 
löo
, &
ty≥
, 
dúty
) != 0)

2630 
˛ór_bad_out
;

2636 i‡(
	`be32_to_˝u
(
döo
->
di_extsize
) != 0) {

2637 i‡((
ty≥
 =
XR_INO_RTDATA
) ||

2638 (
ty≥
 =
XR_INO_DIR
 && (
	`be16_to_˝u
(
döo
->
di_Êags
) &

2639 
XFS_DIFLAG_EXTSZINHERIT
)) ||

2640 (
ty≥
 =
XR_INO_DATA
 && (
	`be16_to_˝u
(
döo
->
di_Êags
) &

2641 
XFS_DIFLAG_EXTSIZE
))) {

2644 
	`do_w¨n
(

2645 
	`_
("badÇ⁄-zîÿexã¡ sizê%u f‹Ç⁄-ªÆtime/extsizêöodê%" 
PRIu64
 ", "),

2646 
	`be32_to_˝u
(
döo
->
di_extsize
), 
löo
);

2647 i‡(!
no_modify
) {

2648 
	`do_w¨n
(
	`_
("resettingÅo zero\n"));

2649 
döo
->
di_extsize
 = 0;

2650 *
dúty
 = 1;

2652 
	`do_w¨n
(
	`_
("wouldÑesetÅo zero\n"));

2660 i‡(
döo
->
di_vîsi⁄
 >= 3 &&

2661 
	`be32_to_˝u
(
döo
->
di_cowextsize
) != 0) {

2662 i‡((
ty≥
 =
XR_INO_DIR
 ||Åy≥ =
XR_INO_DATA
) &&

2663 (
	`be64_to_˝u
(
döo
->
di_Êags2
) &

2664 
XFS_DIFLAG2_COWEXTSIZE
)) {

2667 
	`do_w¨n
(

2668 
	`_
("C™nŸ havên⁄-zîÿCoWÉxã¡ sizê%u o¿n⁄-cowextsizêöodê%" 
PRIu64
 ", "),

2669 
	`be32_to_˝u
(
döo
->
di_cowextsize
), 
löo
);

2670 i‡(!
no_modify
) {

2671 
	`do_w¨n
(
	`_
("resettingÅo zero\n"));

2672 
döo
->
di_cowextsize
 = 0;

2673 *
dúty
 = 1;

2675 
	`do_w¨n
(
	`_
("wouldÑesetÅo zero\n"));

2682 i‡(
	`¥o˚ss_check_öode_sizes
(
mp
, 
döo
, 
löo
, 
ty≥
) != 0)

2683 
˛ór_bad_out
;

2688 i‡(
	`¥o˚ss_check_öode_f‹koff
(
mp
, 
döo
, 
löo
) != 0)

2689 
˛ór_bad_out
;

2694 i‡(
cﬁÀ˘_rm≠s
)

2695 
	`ªc‹d_öode_ªÊök_Êag
(
mp
, 
döo
, 
agno
, 
öo
, 
löo
);

2700 i‡(
	`¥o˚ss_öode_d©a_f‹k
(
mp
, 
agno
, 
öo
, 
döo
, 
ty≥
, 
dúty
,

2701 &
tŸblocks
, &
√xã¡s
, &
dblkm≠
, 
check_dups
) != 0)

2702 
bad_out
;

2708 i‡(
	`¥o˚ss_öode_©å_f‹k
(
mp
, 
agno
, 
öo
, 
döo
, 
ty≥
, 
dúty
,

2709 &
©Ÿblocks
, &
™exã¡s
, 
check_dups
, 
exåa_©å_check
,

2710 &
ªtvÆ
))

2711 
bad_out
;

2716 i‡(
	`¥o˚ss_misc_öo_ty≥s_blocks
(
tŸblocks
, 
löo
, 
ty≥
))

2717 
˛ór_bad_out
;

2722 i‡(
	`¥o˚ss_öode_blocks_™d_exã¡s
(
döo
, 
tŸblocks
 + 
©Ÿblocks
,

2723 
√xã¡s
, 
™exã¡s
, 
löo
, 
dúty
) != 0)

2724 
˛ór_bad_out
;

2729 
ty≥
) {

2730 
XR_INO_DIR
:

2731 i‡(
	`¥o˚ss_dú2
(
mp
, 
löo
, 
döo
, 
öo_discovîy
,

2732 
dúty
, "", 
∑ª¡
, 
dblkm≠
)) {

2733 
	`do_w¨n
(

2734 
	`_
("¥obÀm wôh dúe˘‹y c⁄ã¡†ö inodê%" 
PRIu64
 "\n"),

2735 
löo
);

2736 
˛ór_bad_out
;

2739 
XR_INO_SYMLINK
:

2740 i‡(
	`¥o˚ss_symlök
(
mp
, 
löo
, 
döo
, 
dblkm≠
) != 0) {

2741 
	`do_w¨n
(

2742 
	`_
("¥obÀm wôh symbﬁi¯lök i¿öodê%" 
PRIu64
 "\n"),

2743 
löo
);

2744 
˛ór_bad_out
;

2751 
	`blkm≠_‰ì
(
dblkm≠
);

2758 *
dúty
 +
	`¥o˚ss_check_öode_∆ök_vîsi⁄
(
döo
, 
löo
);

2760  
ªtvÆ
;

2762 
˛ór_bad_out
:

2763 i‡(!
no_modify
) {

2764 *
dúty
 +
	`˛ór_döode
(
mp
, 
döo
, 
löo
);

2765 
	`ASSERT
(*
dúty
 > 0);

2767 
bad_out
:

2768 *
u£d
 = 
is_‰ì
;

2769 *
iß_dú
 = 0;

2770 
	`blkm≠_‰ì
(
dblkm≠
);

2772 
	}
}

2819 
	$¥o˚ss_döode
(

2820 
xfs_mou¡_t
 *
mp
,

2821 
xfs_döode_t
 *
döo
,

2822 
xfs_agnumbî_t
 
agno
,

2823 
xfs_agöo_t
 
öo
,

2824 
was_‰ì
,

2825 *
dúty
,

2826 *
u£d
,

2827 
öo_discovîy
,

2828 
check_dups
,

2829 
exåa_©å_check
,

2830 *
iß_dú
,

2831 
xfs_öo_t
 *
∑ª¡
)

2833 c⁄° 
vîify_mode
 = 0;

2834 c⁄° 
un˚πaö
 = 0;

2836 #ifde‡
XR_INODE_TRACE


2837 
	`Ârötf
(
°dîr
, 
	`_
("¥o˚ssög inodê%d/%d\n"), 
agno
, 
öo
);

2839  
	`¥o˚ss_döode_öt
(
mp
, 
döo
, 
agno
, 
öo
, 
was_‰ì
, 
dúty
, 
u£d
,

2840 
vîify_mode
, 
un˚πaö
, 
öo_discovîy
,

2841 
check_dups
, 
exåa_©å_check
, 
iß_dú
, 
∑ª¡
);

2842 
	}
}

2851 
	$vîify_döode
(

2852 
xfs_mou¡_t
 *
mp
,

2853 
xfs_döode_t
 *
döo
,

2854 
xfs_agnumbî_t
 
agno
,

2855 
xfs_agöo_t
 
öo
)

2857 
xfs_öo_t
 
∑ª¡
;

2858 
u£d
 = 0;

2859 
dúty
 = 0;

2860 
iß_dú
 = 0;

2861 c⁄° 
vîify_mode
 = 1;

2862 c⁄° 
check_dups
 = 0;

2863 c⁄° 
öo_discovîy
 = 0;

2864 c⁄° 
un˚πaö
 = 0;

2866  
	`¥o˚ss_döode_öt
(
mp
, 
döo
, 
agno
, 
öo
, 0, &
dúty
, &
u£d
,

2867 
vîify_mode
, 
un˚πaö
, 
öo_discovîy
,

2868 
check_dups
, 0, &
iß_dú
, &
∑ª¡
);

2869 
	}
}

2877 
	$vîify_un˚πaö_döode
(

2878 
xfs_mou¡_t
 *
mp
,

2879 
xfs_döode_t
 *
döo
,

2880 
xfs_agnumbî_t
 
agno
,

2881 
xfs_agöo_t
 
öo
)

2883 
xfs_öo_t
 
∑ª¡
;

2884 
u£d
 = 0;

2885 
dúty
 = 0;

2886 
iß_dú
 = 0;

2887 c⁄° 
vîify_mode
 = 1;

2888 c⁄° 
check_dups
 = 0;

2889 c⁄° 
öo_discovîy
 = 0;

2890 c⁄° 
un˚πaö
 = 1;

2892  
	`¥o˚ss_döode_öt
(
mp
, 
döo
, 
agno
, 
öo
, 0, &
dúty
, &
u£d
,

2893 
vîify_mode
, 
un˚πaö
, 
öo_discovîy
,

2894 
check_dups
, 0, &
iß_dú
, &
∑ª¡
);

2895 
	}
}

	@repair/dinode.h

18 #i‚de‡
_XR_DINODE_H


19 
	#_XR_DINODE_H


	)

21 
	gblkm≠
;

22 
	g¥e„tch_¨gs
;

25 
vîify_agbno
(
xfs_mou¡_t
 *
mp
,

26 
xfs_agnumbî_t
 
agno
,

27 
xfs_agblock_t
 
agbno
);

30 
vîify_dfsbno
(
xfs_mou¡_t
 *
mp
,

31 
xfs_fsblock_t
 
fsbno
);

34 
c⁄vît_exã¡
(

35 
xfs_bmbt_ªc_t
 *
Ω
,

36 
xfs_fûeoff_t
 *
›
,

37 
xfs_fsblock_t
 *
•
,

38 
xfs_fûblks_t
 *
˝
,

39 *
Â
);

42 
¥o˚ss_bmbt_ª˛i°
(
xfs_mou¡_t
 *
mp
,

43 
xfs_bmbt_ªc_t
 *
Ω
,

44 *
numªcs
,

45 
ty≥
,

46 
xfs_öo_t
 
öo
,

47 
xfs_rfsblock_t
 *
tŸ
,

48 
blkm≠
 **
blkm≠p
,

49 
__uöt64_t
 *
fú°_key
,

50 
__uöt64_t
 *
œ°_key
,

51 
whichf‹k
);

54 
sˇn_bmbt_ª˛i°
(

55 
xfs_mou¡_t
 *
mp
,

56 
xfs_bmbt_ªc_t
 *
Ω
,

57 *
numªcs
,

58 
ty≥
,

59 
xfs_öo_t
 
öo
,

60 
xfs_rfsblock_t
 *
tŸ
,

61 
whichf‹k
);

64 
upd©e_roŸöo
(
xfs_mou¡_t
 *
mp
);

67 
¥o˚ss_döode
(
xfs_mou¡_t
 *
mp
,

68 
xfs_döode_t
 *
döo
,

69 
xfs_agnumbî_t
 
agno
,

70 
xfs_agöo_t
 
öo
,

71 
was_‰ì
,

72 *
dúty
,

73 *
u£d
,

74 
check_dús
,

75 
check_dups
,

76 
exåa_©å_check
,

77 *
iß_dú
,

78 
xfs_öo_t
 *
∑ª¡
);

81 
vîify_döode
(
xfs_mou¡_t
 *
mp
,

82 
xfs_döode_t
 *
döo
,

83 
xfs_agnumbî_t
 
agno
,

84 
xfs_agöo_t
 
öo
);

87 
vîify_un˚πaö_döode
(
xfs_mou¡_t
 *
mp
,

88 
xfs_döode_t
 *
döo
,

89 
xfs_agnumbî_t
 
agno
,

90 
xfs_agöo_t
 
öo
);

93 
vîify_öum
(
xfs_mou¡_t
 *
mp
,

94 
xfs_öo_t
 
öo
);

97 
vîify_agöum
(
xfs_mou¡_t
 *
mp
,

98 
xfs_agnumbî_t
 
agno
,

99 
xfs_agöo_t
 
agöo
);

102 
¥o˚ss_un˚πaö_agöodes
(
xfs_mou¡_t
 *
mp
,

103 
xfs_agnumbî_t
 
agno
);

105 
¥o˚ss_agöodes
(
xfs_mou¡_t
 *
mp
,

106 
¥e„tch_¨gs
 *
pf_¨gs
,

107 
xfs_agnumbî_t
 
agno
,

108 
check_dús
,

109 
check_dups
,

110 
exåa_©å_check
);

113 
check_un˚πaö_agöodes
(
xfs_mou¡_t
 *
mp
,

114 
xfs_agnumbî_t
 
agno
);

116 
xfs_buf
 *

117 
gë_agöo_buf
(

118 
xfs_mou¡
 *
mp
,

119 
xfs_agnumbî_t
 
agno
,

120 
xfs_agöo_t
 
agöo
,

121 
xfs_döode
 **
dùp
);

123 
döode_bmbt_å™¶©i⁄_öô
();

124 * 
gë_f‹k«me
(
whichf‹k
);

	@repair/dir2.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

21 
	~"globÆs.h
"

22 
	~"öc‹e.h
"

23 
	~"îr_¥Ÿos.h
"

24 
	~"döode.h
"

25 
	~"dú2.h
"

26 
	~"bm≠.h
"

27 
	~"da_utû.h
"

28 
	~"¥e„tch.h
"

29 
	~"¥ogªss.h
"

35 
	sdú2_bad
 {

36 
xfs_öo_t
 
	möo
;

37 
dú2_bad
 *
	m√xt
;

38 } 
	tdú2_bad_t
;

40 
dú2_bad_t
 *
	gdú2_bad_li°
;

43 
	$dú2_add_badli°
(

44 
xfs_öo_t
 
öo
)

46 
dú2_bad_t
 *
l
;

48 i‡((
l
 = 
	`mÆloc
((
dú2_bad_t
))Ë=
NULL
) {

49 
	`do_îr‹
(

50 
	`_
("mÆlo¯Áûed (%zu byãsËdú2_add_badli°:öÿ%" 
PRIu64
 "\n"),

51 (
dú2_bad_t
), 
öo
);

52 
	`exô
(1);

54 
l
->
√xt
 = 
dú2_bad_li°
;

55 
dú2_bad_li°
 = 
l
;

56 
l
->
öo
 = ino;

57 
	}
}

60 
	$dú2_is_badöo
(

61 
xfs_öo_t
 
öo
)

63 
dú2_bad_t
 *
l
;

65 
l
 = 
dú2_bad_li°
;Ü;Ü =Ü->
√xt
)

66 i‡(
l
->
öo
 == ino)

69 
	}
}

77 
	$¥o˚ss_sf_dú2_fixi8
(

78 
xfs_mou¡
 *
mp
,

79 
xfs_dú2_sf_hdr
 *
sÂ
,

80 
xfs_dú2_sf_íåy_t
 **
√xt_s„p
)

82 
xfs_öo_t
 
öo
;

83 
xfs_dú2_sf_hdr
 *
√wsÂ
;

84 
xfs_dú2_sf_íåy_t
 *
√ws„p
;

85 
xfs_dú2_sf_hdr
 *
ﬁdsÂ
;

86 
xfs_dú2_sf_íåy_t
 *
ﬁds„p
;

87 
ﬁdsize
;

89 
√wsÂ
 = 
sÂ
;

90 
ﬁdsize
 = (
öçå_t
)*
√xt_s„p
 - (öçå_t)
sÂ
;

91 
ﬁdsÂ
 = 
	`mÆloc
(
ﬁdsize
);

92 i‡(
ﬁdsÂ
 =
NULL
) {

93 
	`do_îr‹
(
	`_
("couldn't malloc dir2 shortform copy\n"));

94 
	`exô
(1);

96 
	`memmove
(
ﬁdsÂ
, 
√wsÂ
, 
ﬁdsize
);

97 
√wsÂ
->
cou¡
 = 
ﬁdsÂ
->count;

98 
√wsÂ
->
i8cou¡
 = 0;

99 
öo
 = 
	`M_DIROPS
(
mp
)->
	`sf_gë_∑ª¡_öo
(
sÂ
);

100 
	`M_DIROPS
(
mp
)->
	`sf_put_∑ª¡_öo
(
√wsÂ
, 
öo
);

101 
ﬁds„p
 = 
	`xfs_dú2_sf_fú°íåy
(
ﬁdsÂ
);

102 
√ws„p
 = 
	`xfs_dú2_sf_fú°íåy
(
√wsÂ
);

103 ()((*)
ﬁds„p
 - (*)
ﬁdsÂ
Ë< 
ﬁdsize
) {

104 
√ws„p
->
«mñí
 = 
ﬁds„p
->namelen;

105 
	`xfs_dú2_sf_put_off£t
(
√ws„p
,

106 
	`xfs_dú2_sf_gë_off£t
(
ﬁds„p
));

107 
	`memmove
(
√ws„p
->
«me
, 
ﬁds„p
->«me,Çews„p->
«mñí
);

108 
öo
 = 
	`M_DIROPS
(
mp
)->
	`sf_gë_öo
(
ﬁdsÂ
, 
ﬁds„p
);

109 
	`M_DIROPS
(
mp
)->
	`sf_put_öo
(
√wsÂ
, 
√ws„p
, 
öo
);

110 
ﬁds„p
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
ﬁdsÂ
, oldsfep);

111 
√ws„p
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
√wsÂ
,Çewsfep);

113 *
√xt_s„p
 = 
√ws„p
;

114 
	`‰ì
(
ﬁdsÂ
);

115 
	}
}

121 
	$¥o˚ss_sf_dú2_fixoff
(

122 
xfs_mou¡_t
 *
mp
,

123 
xfs_döode_t
 *
dù
)

125 
i
;

126 
off£t
;

127 
xfs_dú2_sf_íåy_t
 *
s„p
;

128 
xfs_dú2_sf_hdr
 *
sÂ
;

130 
sÂ
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

131 
s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
);

132 
off£t
 = 
	`M_DIROPS
(
mp
)->
d©a_fú°_off£t
;

134 
i
 = 0; i < 
sÂ
->
cou¡
; i++) {

135 
	`xfs_dú2_sf_put_off£t
(
s„p
, 
off£t
);

136 
off£t
 +
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
s„p
->
«mñí
);

137 
s„p
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
sÂ
, sfep);

139 
	}
}

149 
	$¥o˚ss_sf_dú2
(

150 
xfs_mou¡_t
 *
mp
,

151 
xfs_öo_t
 
öo
,

152 
xfs_döode_t
 *
dù
,

153 
öo_discovîy
,

154 *
döo_dúty
,

155 *
dú«me
,

156 
xfs_öo_t
 *
∑ª¡
,

157 *
ª∑ú
)

159 
bad_off£t
;

160 
bad_s‚amñí
;

161 
i
;

162 
i8
;

163 
__öt64_t
 
öo_dú_size
;

164 
öo_off
;

165 
öo_åì_node_t
 *
úec_p
;

166 
junkô
;

167 *
junkªas⁄
 = 
NULL
;

168 
xfs_öo_t
 
löo
;

169 
max_size
;

170 
«me
[
MAXNAMELEN
 + 1];

171 
«mñí
;

172 
xfs_dú2_sf_íåy_t
 *
√xt_s„p
;

173 
num_íåõs
;

174 
off£t
;

175 
xfs_dú2_sf_hdr
 *
sÂ
;

176 
xfs_dú2_sf_íåy_t
 *
s„p
;

177 
tmp_ñí
;

178 
tmp_Àn
;

179 
xfs_dú2_sf_íåy_t
 *
tmp_s„p
;

180 
xfs_öo_t
 
zîo
 = 0;

182 
sÂ
 = (
xfs_dú2_sf_hdr
 *)
	`XFS_DFORK_DPTR
(
dù
);

183 
max_size
 = 
	`XFS_DFORK_DSIZE
(
dù
, 
mp
);

184 
num_íåõs
 = 
sÂ
->
cou¡
;

185 
öo_dú_size
 = 
	`be64_to_˝u
(
dù
->
di_size
);

186 
off£t
 = 
	`M_DIROPS
(
mp
)->
d©a_fú°_off£t
;

187 
bad_off£t
 = *
ª∑ú
 = 0;

189 
	`ASSERT
(
öo_dú_size
 <
max_size
);

194 
i8
 = (
	`M_DIROPS
(
mp
)->
	`sf_gë_∑ª¡_öo
(
sÂ
Ë> 
XFS_DIR2_MAX_SHORT_INUM
);

199 i‡(
num_íåõs
 * 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 1) +

200 
	`xfs_dú2_sf_hdr_size
(0Ë> 
max_size
 || 
num_íåõs
 == 0)

201 
num_íåõs
 = 0xFF;

207 
√xt_s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
);

208 
i
 = 0;

209 
i
 < 
num_íåõs
 && 
öo_dú_size
 > (*)
√xt_s„p
 - (*)
sÂ
;

210 
i
++) {

211 
tmp_s„p
 = 
NULL
;

212 
s„p
 = 
√xt_s„p
;

213 
junkô
 = 0;

214 
bad_s‚amñí
 = 0;

215 
löo
 = 
	`M_DIROPS
(
mp
)->
	`sf_gë_öo
(
sÂ
, 
s„p
);

227 i‡(
löo
 =
öo
) {

228 
junkô
 = 1;

229 
junkªas⁄
 = 
	`_
("current");

230 } i‡(
	`vîify_öum
(
mp
, 
löo
)) {

231 
junkô
 = 1;

232 
junkªas⁄
 = 
	`_
("invalid");

233 } i‡(
löo
 =
mp
->
m_sb
.
sb_rbmöo
) {

234 
junkô
 = 1;

235 
junkªas⁄
 = 
	`_
("realtime bitmap");

236 } i‡(
löo
 =
mp
->
m_sb
.
sb_rsumöo
) {

237 
junkô
 = 1;

238 
junkªas⁄
 = 
	`_
("realtime summary");

239 } i‡(
löo
 =
mp
->
m_sb
.
sb_uquŸöo
) {

240 
junkô
 = 1;

241 
junkªas⁄
 = 
	`_
("user quota");

242 } i‡(
löo
 =
mp
->
m_sb
.
sb_gquŸöo
) {

243 
junkô
 = 1;

244 
junkªas⁄
 = 
	`_
("group quota");

245 } i‡(
löo
 =
mp
->
m_sb
.
sb_pquŸöo
) {

246 
junkô
 = 1;

247 
junkªas⁄
 = 
	`_
("project quota");

248 } i‡((
úec_p
 = 
	`föd_öode_ªc
(
mp
,

249 
	`XFS_INO_TO_AGNO
(
mp
, 
löo
),

250 
	`XFS_INO_TO_AGINO
(
mp
, 
löo
))Ë!
NULL
) {

260 
öo_off
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
löo
) -

261 
úec_p
->
öo_°¨äum
;

262 
	`ASSERT
(
	`is_öode_c⁄fúmed
(
úec_p
, 
öo_off
));

263 i‡(
	`is_öode_‰ì
(
úec_p
, 
öo_off
Ë&& !
öo_discovîy
) {

264 
junkô
 = 1;

265 
junkªas⁄
 = 
	`_
("free");

267 } i‡(
öo_discovîy
) {

274 
	`add_öode_un˚πaö
(
mp
, 
löo
, 0);

281 
junkô
 = 1;

282 
junkªas⁄
 = 
	`_
("non-existent");

284 
«mñí
 = 
s„p
->namelen;

285 i‡(
junkô
)

286 
	`do_w¨n
(

287 
	`_
("íåy \"%*.*s\" i¿sh‹tf‹m dúe˘‹y %" 
PRIu64
 "Ñeferences %s inode %" PRIu64 "\n"),

288 
«mñí
,Çamñí, 
s„p
->
«me
, 
öo
, 
junkªas⁄
,

289 
löo
);

292 i‡(
«mñí
 == 0) {

293 
junkªas⁄
 = 
	`_
("is zeroÜength");

294 
bad_s‚amñí
 = 1;

295 } i‡((
öçå_t
Ë
s„p
 - (öçå_tË
sÂ
 +

296 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 
s„p
->
«mñí
)

297 > 
öo_dú_size
) {

298 
junkªas⁄
 = 
	`_
("extendsÖastÉnd of dir");

299 
bad_s‚amñí
 = 1;

302 i‡(
bad_s‚amñí
) {

303 
	`do_w¨n
(

304 
	`_
("íåy #%d %†ö sh‹tf‹m dú %" 
PRIu64
),

305 
i
, 
junkªas⁄
, 
öo
);

306 i‡(!
no_modify
)

307 
	`do_w¨n
(
	`_
(", junking %dÉntries\n"),

308 
num_íåõs
 - 
i
);

310 
	`do_w¨n
(
	`_
(", would junk %dÉntries\n"),

311 
num_íåõs
 - 
i
);

325 i‡(
	`«mecheck
((*)&
s„p
->
«me
[0], 
«mñí
)) {

329 
	`do_w¨n
(

330 
	`_
("íåy c⁄èö†ûÀgÆ ch¨a˘î i¿sh‹tf‹m dú %" 
PRIu64
 "\n"),

331 
öo
);

332 
junkô
 = 1;

335 i‡(
	`xfs_dú2_sf_gë_off£t
(
s„p
Ë< 
off£t
) {

336 
	`do_w¨n
(

337 
	`_
("íåy c⁄èö†off£àouào‡‹dî i¿sh‹tf‹m dú %" 
PRIu64
 "\n"),

338 
öo
);

339 
bad_off£t
 = 1;

341 
off£t
 = 
	`xfs_dú2_sf_gë_off£t
(
s„p
) +

342 
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
«mñí
);

354 i‡(
junkô
) {

355 
	`memmove
(
«me
, 
s„p
->«me, 
«mñí
);

356 
«me
[
«mñí
] = '\0';

358 i‡(!
no_modify
) {

359 
tmp_ñí
 = 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
,

360 
s„p
->
«mñí
);

361 
	`be64_add_˝u
(&
dù
->
di_size
, -
tmp_ñí
);

362 
öo_dú_size
 -
tmp_ñí
;

364 
tmp_s„p
 = (
xfs_dú2_sf_íåy_t
 *)

365 ((
öçå_t
Ë
s„p
 + 
tmp_ñí
);

366 
tmp_Àn
 = 
max_size
 - ((
öçå_t
Ë
tmp_s„p


367 - (
öçå_t
Ë
sÂ
);

369 
	`memmove
(
s„p
, 
tmp_s„p
, 
tmp_Àn
);

371 
sÂ
->
cou¡
 -= 1;

372 
num_íåõs
--;

373 
	`mem£t
((*Ë((
öçå_t
Ë
s„p
 + 
tmp_Àn
), 0,

374 
tmp_ñí
);

381 
tmp_s„p
 = 
s„p
;

388 
i
--;

390 *
döo_dúty
 = 1;

391 *
ª∑ú
 = 1;

393 
	`do_w¨n
(

394 
	`_
("junkögÉ¡ry \"%s\" i¿dúe˘‹y inodê%" 
PRIu64
 "\n"),

395 
«me
, 
öo
);

397 
	`do_w¨n
(

398 
	`_
("would havêjunkedÉ¡ry \"%s\" i¿dúe˘‹y inodê%" 
PRIu64
 "\n"),

399 
«me
, 
öo
);

401 } i‡(
löo
 > 
XFS_DIR2_MAX_SHORT_INUM
)

402 
i8
++;

410 
√xt_s„p
 = (
tmp_s„p
 =
NULL
)

411 ? (
xfs_dú2_sf_íåy_t
 *Ë((
öçå_t
Ë
s„p


412 + ((!
bad_s‚amñí
)

413 ? 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 
s„p
->
«mñí
)

414 : 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 
«mñí
)))

415 : 
tmp_s„p
;

420 i‡(
sÂ
->
cou¡
 !
i
) {

421 i‡(
no_modify
) {

422 
	`do_w¨n
(

423 
	`_
("would havêc‹ª˘edÉ¡ry cou¡ i¿dúe˘‹y %" 
PRIu64
 " from %dÅo %d\n"),

424 
öo
, 
sÂ
->
cou¡
, 
i
);

426 
	`do_w¨n
(

427 
	`_
("c‹ª˘edÉ¡ry cou¡ i¿dúe˘‹y %" 
PRIu64
 ", was %d,Çow %d\n"),

428 
öo
, 
sÂ
->
cou¡
, 
i
);

429 
sÂ
->
cou¡
 = 
i
;

430 *
döo_dúty
 = 1;

431 *
ª∑ú
 = 1;

435 i‡(
sÂ
->
i8cou¡
 !
i8
) {

436 i‡(
no_modify
) {

437 
	`do_w¨n
(

438 
	`_
("would havêc‹ª˘ed i8 cou¡ i¿dúe˘‹y %" 
PRIu64
 " from %dÅo %d\n"),

439 
öo
, 
sÂ
->
i8cou¡
, 
i8
);

441 
	`do_w¨n
(

442 
	`_
("c‹ª˘ed i8 cou¡ i¿dúe˘‹y %" 
PRIu64
 ", was %d,Çow %d\n"),

443 
öo
, 
sÂ
->
i8cou¡
, 
i8
);

444 i‡(
i8
 == 0)

445 
	`¥o˚ss_sf_dú2_fixi8
(
mp
, 
sÂ
, &
√xt_s„p
);

447 
sÂ
->
i8cou¡
 = 
i8
;

448 *
döo_dúty
 = 1;

449 *
ª∑ú
 = 1;

453 i‡((
öçå_t
)
√xt_s„p
 - (öçå_t)
sÂ
 !
öo_dú_size
) {

454 i‡(
no_modify
) {

455 
	`do_w¨n
(

456 
	`_
("would havêc‹ª˘ed dúe˘‹y %" 
PRIu64
 " sizê‰om %" 
PRId64
 "Åÿ%" 
PRIdPTR
 "\n"),

457 
öo
, 
öo_dú_size
,

458 (
öçå_t
)
√xt_s„p
 - (öçå_t)
sÂ
);

460 
	`do_w¨n
(

461 
	`_
("c‹ª˘ed dúe˘‹y %" 
PRIu64
 " size, wa†%" 
PRId64
 ",Çow %" 
PRIdPTR
 "\n"),

462 
öo
, 
öo_dú_size
,

463 (
öçå_t
)
√xt_s„p
 - (öçå_t)
sÂ
);

465 
dù
->
di_size
 = 
	`˝u_to_be64
(

466 (
öçå_t
)
√xt_s„p
 - (öçå_t)
sÂ
);

467 *
döo_dúty
 = 1;

468 *
ª∑ú
 = 1;

471 i‡(
off£t
 + (
sÂ
->
cou¡
 + 2Ë* (
xfs_dú2_Àaf_íåy_t
) +

472 (
xfs_dú2_block_èû_t
Ë> 
mp
->
m_dú_geo
->
blksize
) {

473 
	`do_w¨n
(
	`_
("dúe˘‹y %" 
PRIu64
 " off£t†toÿhigh\n"), 
öo
);

474 
bad_off£t
 = 1;

476 i‡(
bad_off£t
) {

477 i‡(
no_modify
) {

478 
	`do_w¨n
(

479 
	`_
("would havêc‹ª˘edÉ¡ry off£t†ö dúe˘‹y %" 
PRIu64
 "\n"),

480 
öo
);

482 
	`do_w¨n
(

483 
	`_
("c‹ª˘edÉ¡ry off£t†ö dúe˘‹y %" 
PRIu64
 "\n"),

484 
öo
);

485 
	`¥o˚ss_sf_dú2_fixoff
(
mp
, 
dù
);

486 *
döo_dúty
 = 1;

487 *
ª∑ú
 = 1;

494 *
∑ª¡
 = 
	`M_DIROPS
(
mp
)->
	`sf_gë_∑ª¡_öo
(
sÂ
);

499 i‡(
	`vîify_öum
(
mp
, *
∑ª¡
)) {

501 
	`do_w¨n
(

502 
	`_
("bogu†.. inodênumbî (%" 
PRIu64
 ") in directory inode %" PRIu64 ", "),

503 *
∑ª¡
, 
öo
);

504 *
∑ª¡
 = 
NULLFSINO
;

505 i‡(!
no_modify
) {

506 
	`do_w¨n
(
	`_
("clearing inodeÇumber\n"));

508 
	`M_DIROPS
(
mp
)->
	`sf_put_∑ª¡_öo
(
sÂ
, 
zîo
);

509 *
döo_dúty
 = 1;

510 *
ª∑ú
 = 1;

512 
	`do_w¨n
(
	`_
("would clear inodeÇumber\n"));

514 } i‡(
öo
 =
mp
->
m_sb
.
sb_roŸöo
 && inÿ!*
∑ª¡
) {

518 i‡(!
no_modify
) {

519 
	`do_w¨n
(

520 
	`_
("c‹ª˘edÑoŸ dúe˘‹y %" 
PRIu64
 " ..Éntry, was %" PRIu64 ",Çow %" PRIu64 "\n"),

521 
öo
, *
∑ª¡
, ino);

522 *
∑ª¡
 = 
öo
;

523 
	`M_DIROPS
(
mp
)->
	`sf_put_∑ª¡_öo
(
sÂ
, 
öo
);

524 *
döo_dúty
 = 1;

525 *
ª∑ú
 = 1;

527 
	`do_w¨n
(

528 
	`_
("would havêc‹ª˘edÑoŸ dúe˘‹y %" 
PRIu64
 " ..Éntry from %" PRIu64"Åo %" PRIu64 "\n"),

529 
öo
, *
∑ª¡
, ino);

531 } i‡(
öo
 =*
∑ª¡
 && inÿ!
mp
->
m_sb
.
sb_roŸöo
) {

536 *
∑ª¡
 = 
NULLFSINO
;

537 
	`do_w¨n
(

538 
	`_
("bad ..É¡ry i¿dúe˘‹y inodê%" 
PRIu64
 ",ÖointsÅo self, "),

539 
öo
);

540 i‡(!
no_modify
) {

541 
	`do_w¨n
(
	`_
("clearing inodeÇumber\n"));

543 
	`M_DIROPS
(
mp
)->
	`sf_put_∑ª¡_öo
(
sÂ
, 
zîo
);

544 *
döo_dúty
 = 1;

545 *
ª∑ú
 = 1;

547 
	`do_w¨n
(
	`_
("would clear inodeÇumber\n"));

552 
	}
}

559 
	$¥o˚ss_dú2_d©a
(

560 
xfs_mou¡_t
 *
mp
,

561 
xfs_öo_t
 
öo
,

562 
xfs_döode_t
 *
dù
,

563 
öo_discovîy
,

564 *
dú«me
,

565 
xfs_öo_t
 *
∑ª¡
,

566 
xfs_buf
 *
bp
,

567 *
dŸ
,

568 *
dŸdŸ
,

569 
xfs_dablk_t
 
da_bno
,

570 *
íd±r
,

571 *
dúty
)

573 
badbe°
;

574 
xfs_dú2_d©a_‰ì_t
 *
bf
;

575 
˛óröo
;

576 *
˛óºós⁄
 = 
NULL
;

577 
xfs_dú2_d©a_hdr
 *
d
;

578 
xfs_dú2_d©a_íåy_t
 *
dï
;

579 
xfs_dú2_d©a_‰ì_t
 *
dÂ
;

580 
xfs_dú2_d©a_unu£d_t
 *
dup
;

581 
‰ì£í
;

582 
i
;

583 
öo_off
;

584 
öo_åì_node_t
 *
úec_p
;

585 
junkô
;

586 
œ°‰ì
;

587 
nm_ûÀgÆ
;

588 *
±r
;

589 
xfs_öo_t
 
ít_öo
;

591 
d
 = 
bp
->
b_addr
;

592 
bf
 = 
	`M_DIROPS
(
mp
)->
	`d©a_be°‰ì_p
(
d
);

593 
±r
 = (*)
	`M_DIROPS
(
mp
)->
	`d©a_íåy_p
(
d
);

594 
badbe°
 = 
œ°‰ì
 = 
‰ì£í
 = 0;

595 i‡(
	`be16_to_˝u
(
bf
[0].
Àngth
) == 0) {

596 
badbe°
 |
	`be16_to_˝u
(
bf
[0].
off£t
) != 0;

597 
‰ì£í
 |= 1 << 0;

599 i‡(
	`be16_to_˝u
(
bf
[1].
Àngth
) == 0) {

600 
badbe°
 |
	`be16_to_˝u
(
bf
[1].
off£t
) != 0;

601 
‰ì£í
 |= 1 << 1;

603 i‡(
	`be16_to_˝u
(
bf
[2].
Àngth
) == 0) {

604 
badbe°
 |
	`be16_to_˝u
(
bf
[2].
off£t
) != 0;

605 
‰ì£í
 |= 1 << 2;

607 
badbe°
 |
	`be16_to_˝u
(
bf
[0].
Àngth
) < be16_to_cpu(bf[1].length);

608 
badbe°
 |
	`be16_to_˝u
(
bf
[1].
Àngth
) < be16_to_cpu(bf[2].length);

609 
±r
 < 
íd±r
) {

610 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

616 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

617 i‡(
±r
 + 
	`be16_to_˝u
(
dup
->
Àngth
Ë> 
íd±r
 ||

618 
	`be16_to_˝u
(
dup
->
Àngth
) == 0 ||

619 (
	`be16_to_˝u
(
dup
->
Àngth
Ë& (
XFS_DIR2_DATA_ALIGN
 - 1)))

621 i‡(
	`be16_to_˝u
(*
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
)) !=

622 (*)
dup
 - (*)
d
)

624 
badbe°
 |
œ°‰ì
 != 0;

625 
dÂ
 = 
	`xfs_dú2_d©a_‰ìföd
(
d
, 
bf
, 
dup
);

626 i‡(
dÂ
) {

627 
i
 = 
dÂ
 - 
bf
;

628 
badbe°
 |(
‰ì£í
 & (1 << 
i
)) != 0;

629 
‰ì£í
 |1 << 
i
;

631 
badbe°
 |
	`be16_to_˝u
(
dup
->
Àngth
) >

632 
	`be16_to_˝u
(
bf
[2].
Àngth
);

633 
±r
 +
	`be16_to_˝u
(
dup
->
Àngth
);

634 
œ°‰ì
 = 1;

637 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
±r
;

638 i‡(
±r
 + 
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
Ë> 
íd±r
)

640 i‡(
	`be16_to_˝u
(*
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
)) !=

641 (*)
dï
 - (*)
d
)

643 
±r
 +
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

644 
œ°‰ì
 = 0;

650 i‡(
±r
 !
íd±r
) {

651 
	`do_w¨n
(
	`_
("c‹ru± block %u i¿dúe˘‹y inodê%" 
PRIu64
 "\n"),

652 
da_bno
, 
öo
);

653 i‡(!
no_modify
)

654 
	`do_w¨n
(
	`_
("\twill junk block\n"));

656 
	`do_w¨n
(
	`_
("\twould junk block\n"));

659 
±r
 = (*)
	`M_DIROPS
(
mp
)->
	`d©a_íåy_p
(
d
);

663 
±r
 < 
íd±r
) {

664 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

665 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

666 
±r
 +
	`be16_to_˝u
(
dup
->
Àngth
);

669 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
±r
;

670 
ít_öo
 = 
	`be64_to_˝u
(
dï
->
öumbî
);

671 
˛óröo
 = 1;

672 
˛óºós⁄
 = 
NULL
;

681 i‡(!
öo_discovîy
 && 
dï
->
«me
[0] == '/') {

686 
˛óröo
 = 0;

687 } i‡(
	`vîify_öum
(
mp
, 
ít_öo
)) {

693 
˛óºós⁄
 = 
	`_
("invalid");

694 } i‡(
ít_öo
 =
mp
->
m_sb
.
sb_rbmöo
) {

695 
˛óºós⁄
 = 
	`_
("realtime bitmap");

696 } i‡(
ít_öo
 =
mp
->
m_sb
.
sb_rsumöo
) {

697 
˛óºós⁄
 = 
	`_
("realtime summary");

698 } i‡(
ít_öo
 =
mp
->
m_sb
.
sb_uquŸöo
) {

699 
˛óºós⁄
 = 
	`_
("user quota");

700 } i‡(
ít_öo
 =
mp
->
m_sb
.
sb_gquŸöo
) {

701 
˛óºós⁄
 = 
	`_
("group quota");

702 } i‡(
ít_öo
 =
mp
->
m_sb
.
sb_pquŸöo
) {

703 
˛óºós⁄
 = 
	`_
("project quota");

705 
úec_p
 = 
	`föd_öode_ªc
(
mp
,

706 
	`XFS_INO_TO_AGNO
(
mp
, 
ít_öo
),

707 
	`XFS_INO_TO_AGINO
(
mp
, 
ít_öo
));

708 i‡(
úec_p
 =
NULL
) {

709 i‡(
öo_discovîy
) {

710 
	`add_öode_un˚πaö
(
mp
, 
ít_öo
, 0);

711 
˛óröo
 = 0;

713 
˛óºós⁄
 = 
	`_
("non-existent");

719 
öo_off
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
ít_öo
)

720 - 
úec_p
->
öo_°¨äum
;

721 
	`ASSERT
(
	`is_öode_c⁄fúmed
(
úec_p
, 
öo_off
));

731 i‡(!
öo_discovîy
 && 
	`is_öode_‰ì
(
úec_p
,

732 
öo_off
))

733 
˛óºós⁄
 = 
	`_
("free");

735 
˛óröo
 = 0;

738 
	`ASSERT
((
˛óröo
 =0 && 
˛óºós⁄
 =
NULL
) ||

739 (
˛óröo
 !0 && 
˛óºós⁄
 !
NULL
));

740 i‡(
˛óröo
)

741 
	`do_w¨n
(

742 
	`_
("íåy \"%*.*s\"áàblock %d off£à%" 
PRIdPTR
 " i¿dúe˘‹y inodê%" 
PRIu64


743 "Ñe„ªn˚†%†öodê%" 
PRIu64
 "\n"),

744 
dï
->
«mñí
, dï->«mñí, dï->
«me
,

745 
da_bno
, (
öçå_t
)
±r
 - (öçå_t)
d
, 
öo
,

746 
˛óºós⁄
, 
ít_öo
);

752 i‡((
dï
->
«mñí
 =1 && dï->
«me
[0] == '.') ||

753 (
dï
->
«mñí
 == 2 &&

754 
dï
->
«me
[0] == '.' && dep->name[1] == '.')) {

755 
˛óröo
 = 0;

756 
˛óºós⁄
 = 
NULL
;

763 i‡(
dï
->
«mñí
 == 0) {

764 
	`do_w¨n
(

765 
	`_
("íåyáàblock %u off£à%" 
PRIdPTR
 " i¿dúe˘‹y inodê%" 
PRIu64


767 
da_bno
, (
öçå_t
)
±r
 - (öçå_t)
d
, 
öo
);

768 i‡(!
no_modify
)

769 
dï
->
«mñí
 = 1;

770 
˛óröo
 = 1;

775 i‡(
˛óröo
) {

776 i‡(!
no_modify
) {

777 
	`do_w¨n
(

778 
	`_
("\t˛órög inodênumbî i¿íåyáàoff£à%" 
PRIdPTR
 "...\n"),

779 (
öçå_t
)
±r
 - (öçå_t)
d
);

780 
dï
->
«me
[0] = '/';

781 *
dúty
 = 1;

783 
	`do_w¨n
(

784 
	`_
("\twould cÀ¨ inodênumbî i¿íåyáàoff£à%" 
PRIdPTR
 "...\n"),

785 (
öçå_t
)
±r
 - (öçå_t)
d
);

793 
junkô
 = 
dï
->
«me
[0] == '/';

794 
nm_ûÀgÆ
 = 
	`«mecheck
((*)
dï
->
«me
, dï->
«mñí
);

795 i‡(
öo_discovîy
 && 
nm_ûÀgÆ
) {

796 
	`do_w¨n
(

797 
	`_
("íåyáàblock %u off£à%" 
PRIdPTR
 " i¿dúe˘‹y inodê%" 
PRIu64
 " has illegalÇame \"%*.*s\": "),

798 
da_bno
, (
öçå_t
)
±r
 - (öçå_t)
d
, 
öo
,

799 
dï
->
«mñí
, dï->«mñí, dï->
«me
);

800 
junkô
 = 1;

806 i‡(!
no_modify
 && 
dï
->
«me
[0] == '/') {

807 *
dúty
 = 1;

808 
junkô
 = 0;

814 i‡(
dï
->
«mñí
 == 2 &&

815 
dï
->
«me
[0] == '.' && dep->name[1] == '.') {

816 i‡(!*
dŸdŸ
) {

817 (*
dŸdŸ
)++;

818 *
∑ª¡
 = 
ít_öo
;

824 i‡(
öo
 =
ít_öo
 &&

825 
öo
 !
mp
->
m_sb
.
sb_roŸöo
) {

826 *
∑ª¡
 = 
NULLFSINO
;

827 
	`do_w¨n
(

828 
	`_
("bad ..É¡ry i¿dúe˘‹y inodê%" 
PRIu64
 ",ÖointsÅo self: "),

829 
öo
);

830 
junkô
 = 1;

836 i‡(
öo
 !
ít_öo
 &&

837 
öo
 =
mp
->
m_sb
.
sb_roŸöo
) {

838 
	`do_w¨n
(

839 
	`_
("bad ..É¡ry i¿roŸ dúe˘‹y inodê%" 
PRIu64
 ", was %" PRIu64 ": "),

840 
öo
, 
ít_öo
);

841 i‡(!
no_modify
) {

842 
	`do_w¨n
(
	`_
("correcting\n"));

843 
dï
->
öumbî
 = 
	`˝u_to_be64
(
öo
);

844 *
dúty
 = 1;

846 
	`do_w¨n
(
	`_
("would correct\n"));

848 *
∑ª¡
 = 
öo
;

858 
	`do_w¨n
(

859 
	`_
("mu…ùÀ ..É¡rõ†ö dúe˘‹y inodê%" 
PRIu64
 ": "),

860 
öo
);

861 
junkô
 = 1;

867 i‡(
dï
->
«mñí
 =1 && dï->
«me
[0] == '.') {

868 i‡(!*
dŸ
) {

869 (*
dŸ
)++;

870 i‡(
ít_öo
 !
öo
) {

871 
	`do_w¨n
(

872 
	`_
("bad .É¡ry i¿dúe˘‹y inodê%" 
PRIu64
 ", was %" PRIu64 ": "),

873 
öo
, 
ít_öo
);

874 i‡(!
no_modify
) {

875 
	`do_w¨n
(
	`_
("correcting\n"));

876 
dï
->
öumbî
 = 
	`˝u_to_be64
(
öo
);

877 *
dúty
 = 1;

879 
	`do_w¨n
(
	`_
("would correct\n"));

883 
	`do_w¨n
(

884 
	`_
("mu…ùÀ .É¡rõ†ö dúe˘‹y inodê%" 
PRIu64
 ": "),

885 
öo
);

886 
junkô
 = 1;

892 i‡(
ít_öo
 =
öo
) {

893 
	`do_w¨n
(

894 
	`_
("íåy \"%*.*s\" i¿dúe˘‹y inodê%" 
PRIu64
 "ÖointsÅo self: "),

895 
dï
->
«mñí
, dï->«mñí, dï->
«me
, 
öo
);

896 
junkô
 = 1;

901 i‡(
junkô
) {

902 i‡(!
no_modify
) {

903 
dï
->
«me
[0] = '/';

904 *
dúty
 = 1;

905 
	`do_w¨n
(
	`_
("clearingÉntry\n"));

907 
	`do_w¨n
(
	`_
("would clearÉntry\n"));

913 
±r
 +
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

918 i‡(
‰ì£í
 !7 || 
badbe°
) {

919 
	`do_w¨n
(

920 
	`_
("bad be°‰ìÅabÀ i¿block %u i¿dúe˘‹y inodê%" 
PRIu64
 ": "),

921 
da_bno
, 
öo
);

922 i‡(!
no_modify
) {

923 
	`do_w¨n
(
	`_
("repairingÅable\n"));

924 
	`libxfs_dú2_d©a_‰ìsˇn_öt
(
mp
->
m_dú_geo
,

925 
	`M_DIROPS
(
mp
), 
d
, &
i
);

926 *
dúty
 = 1;

928 
	`do_w¨n
(
	`_
("wouldÑepairÅable\n"));

932 
	}
}

939 
	$¥o˚ss_block_dú2
(

940 
xfs_mou¡_t
 *
mp
,

941 
xfs_öo_t
 
öo
,

942 
xfs_döode_t
 *
dù
,

943 
öo_discovîy
,

944 *
döo_dúty
,

945 *
dú«me
,

946 
xfs_öo_t
 *
∑ª¡
,

947 
blkm≠_t
 *
blkm≠
,

948 *
dŸ
,

949 *
dŸdŸ
,

950 *
ª∑ú
)

952 
xfs_dú2_d©a_hdr
 *
block
;

953 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

954 
bm≠_ext_t
 *
bmp
;

955 
xfs_buf
 *
bp
;

956 
xfs_dú2_block_èû_t
 *
bç
;

957 
√x
;

958 
rvÆ
;

959 
bm≠_ext_t
 
lbmp
;

960 
dúty
 = 0;

962 *
ª∑ú
 = *
dŸ
 = *
dŸdŸ
 = 0;

963 *
∑ª¡
 = 
NULLFSINO
;

964 
√x
 = 
	`blkm≠_gën
(
blkm≠
, 
mp
->
m_dú_geo
->
d©ablk
,

965 
mp
->
m_dú_geo
->
fsbcou¡
, &
bmp
, &
lbmp
);

966 i‡(
√x
 == 0) {

967 
	`do_w¨n
(

968 
	`_
("block %u f‹ dúe˘‹y inodê%" 
PRIu64
 " is missing\n"),

969 
mp
->
m_dú_geo
->
d©ablk
, 
öo
);

972 
bp
 = 
	`da_ªad_buf
(
mp
, 
√x
, 
bmp
, &
xfs_dú3_block_buf_›s
);

973 i‡(
bmp
 !&
lbmp
)

974 
	`‰ì
(
bmp
);

975 i‡(
bp
 =
NULL
) {

976 
	`do_w¨n
(

977 
	`_
("ˇn'àªad block %u f‹ dúe˘‹y inodê%" 
PRIu64
 "\n"),

978 
mp
->
m_dú_geo
->
d©ablk
, 
öo
);

984 
block
 = 
bp
->
b_addr
;

985 i‡(!(
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR2_BLOCK_MAGIC
 ||

986 
	`be32_to_˝u
(
block
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
))

987 
	`do_w¨n
(

988 
	`_
("bad dúe˘‹y block magi¯# %#x i¿block %u f‹ dúe˘‹y inodê%" 
PRIu64
 "\n"),

989 
	`be32_to_˝u
(
block
->
magic
), 
mp
->
m_dú_geo
->
d©ablk
, 
öo
);

994 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

995 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

999 i‡((*)
bÕ
 > (*)
bç
)

1000 
bÕ
 = (
xfs_dú2_Àaf_íåy_t
 *)
bç
;

1001 
rvÆ
 = 
	`¥o˚ss_dú2_d©a
(
mp
, 
öo
, 
dù
, 
öo_discovîy
, 
dú«me
, 
∑ª¡
,

1002 
bp
, 
dŸ
, 
dŸdŸ
, 
mp
->
m_dú_geo
->
d©ablk
, (*)
bÕ
, &
dúty
);

1004 i‡(!
rvÆ
 && 
bp
->
b_îr‹
 =-
EFSBADCRC
)

1005 
dúty
 = 1;

1006 i‡(
dúty
 && !
no_modify
) {

1007 *
ª∑ú
 = 1;

1008 
	`libxfs_wrôebuf
(
bp
, 0);

1010 
	`libxfs_putbuf
(
bp
);

1011  
rvÆ
;

1012 
	}
}

1021 
	$¥o˚ss_Àaf_block_dú2
(

1022 
xfs_mou¡_t
 *
mp
,

1023 
xfs_dú2_Àaf_t
 *
Àaf
,

1024 
xfs_dablk_t
 
da_bno
,

1025 
xfs_öo_t
 
öo
,

1026 
xfs_dahash_t
 
œ°_hashvÆ
,

1027 
xfs_dahash_t
 *
√xt_hashvÆ
)

1029 
i
;

1030 
°Æe
;

1031 
xfs_dú2_Àaf_íåy
 *
íts
;

1032 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

1034 
	`M_DIROPS
(
mp
)->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

1035 
íts
 = 
	`M_DIROPS
(
mp
)->
	`Àaf_íts_p
(
Àaf
);

1037 
i
 = 
°Æe
 = 0; i < 
Àafhdr
.
cou¡
; i++) {

1038 i‡((*)&
íts
[
i
] >(*)
Àaf
 + 
mp
->
m_dú_geo
->
blksize
) {

1039 
	`do_w¨n
(

1040 
	`_
("badÉ¡ry cou¡ i¿block %u o‡dúe˘‹y inodê%" 
PRIu64
 "\n"),

1041 
da_bno
, 
öo
);

1044 i‡(
	`be32_to_˝u
(
íts
[
i
].
addªss
Ë=
XFS_DIR2_NULL_DATAPTR
)

1045 
°Æe
++;

1046 i‡(
	`be32_to_˝u
(
íts
[
i
].
hashvÆ
Ë< 
œ°_hashvÆ
) {

1047 
	`do_w¨n
(

1048 
	`_
("bad hash ordîög i¿block %u o‡dúe˘‹y inodê%" 
PRIu64
 "\n"),

1049 
da_bno
, 
öo
);

1052 *
√xt_hashvÆ
 = 
œ°_hashvÆ
 = 
	`be32_to_˝u
(
íts
[
i
].
hashvÆ
);

1054 i‡(
°Æe
 !
Àafhdr
.stale) {

1055 
	`do_w¨n
(

1056 
	`_
("bad sèÀ cou¡ i¿block %u o‡dúe˘‹y inodê%" 
PRIu64
 "\n"),

1057 
da_bno
, 
öo
);

1061 
	}
}

1067 
	$¥o˚ss_Àaf_Àvñ_dú2
(

1068 
xfs_mou¡_t
 *
mp
,

1069 
da_bt_curs‹_t
 *
da_curs‹
,

1070 *
ª∑ú
)

1072 
bm≠_ext_t
 *
bmp
;

1073 
xfs_buf
 *
bp
;

1074 
buf_dúty
;

1075 
xfs_dahash_t
 
cuºít_hashvÆ
;

1076 
xfs_dablk_t
 
da_bno
;

1077 
xfs_dahash_t
 
gª©e°_hashvÆ
;

1078 
xfs_öo_t
 
öo
;

1079 
xfs_dú2_Àaf_t
 *
Àaf
;

1080 
√x
;

1081 
xfs_dablk_t
 
¥ev_bno
;

1082 
bm≠_ext_t
 
lbmp
;

1083 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

1085 
da_bno
 = 
da_curs‹
->
Àvñ
[0].
bno
;

1086 
öo
 = 
da_curs‹
->ino;

1087 
¥ev_bno
 = 0;

1088 
bmp
 = 
NULL
;

1089 
cuºít_hashvÆ
 = 0;

1090 
gª©e°_hashvÆ
 = 0;

1091 
buf_dúty
 = 0;

1094 
√x
 = 
	`blkm≠_gën
(
da_curs‹
->
blkm≠
, 
da_bno
,

1095 
mp
->
m_dú_geo
->
fsbcou¡
, &
bmp
, &
lbmp
);

1101 
	`ASSERT
(
da_bno
 != 0);

1103 i‡(
√x
 == 0) {

1104 
	`do_w¨n
(

1105 
	`_
("ˇn'àm≠ block %u f‹ dúe˘‹y inodê%" 
PRIu64
 "\n"),

1106 
da_bno
, 
öo
);

1107 
îr‹_out
;

1109 
bp
 = 
	`da_ªad_buf
(
mp
, 
√x
, 
bmp
, &
xfs_dú3_Àa‚_buf_›s
);

1110 i‡(
bmp
 !&
lbmp
)

1111 
	`‰ì
(
bmp
);

1112 
bmp
 = 
NULL
;

1113 i‡(
bp
 =
NULL
) {

1114 
	`do_w¨n
(

1115 
	`_
("ˇn'àªad fûêblock %u f‹ dúe˘‹y inodê%" 
PRIu64
 "\n"),

1116 
da_bno
, 
öo
);

1117 
îr‹_out
;

1119 
Àaf
 = 
bp
->
b_addr
;

1120 
	`M_DIROPS
(
mp
)->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

1124 i‡(!(
Àafhdr
.
magic
 =
XFS_DIR2_LEAFN_MAGIC
 ||

1125 
Àafhdr
.
magic
 =
XFS_DIR3_LEAFN_MAGIC
)) {

1126 
	`do_w¨n
(

1127 
	`_
("bad dúe˘‹yÜó‡magi¯# %#x f‹ dúe˘‹y inodê%" 
PRIu64
 " block %u\n"),

1128 
Àafhdr
.
magic
, 
öo
, 
da_bno
);

1129 
	`libxfs_putbuf
(
bp
);

1130 
îr‹_out
;

1132 
buf_dúty
 = 0;

1137 i‡(
	`¥o˚ss_Àaf_block_dú2
(
mp
, 
Àaf
, 
da_bno
, 
öo
,

1138 
cuºít_hashvÆ
, &
gª©e°_hashvÆ
)) {

1139 
	`libxfs_putbuf
(
bp
);

1140 
îr‹_out
;

1147 
da_curs‹
->
Àvñ
[0].
hashvÆ
 = 
gª©e°_hashvÆ
;

1148 
da_curs‹
->
Àvñ
[0].
bp
 = bp;

1149 
da_curs‹
->
Àvñ
[0].
bno
 = 
da_bno
;

1150 
da_curs‹
->
Àvñ
[0].
ödex
 = 
Àafhdr
.
cou¡
;

1151 
da_curs‹
->
Àvñ
[0].
dúty
 = 
buf_dúty
;

1153 i‡(
Àafhdr
.
back
 !
¥ev_bno
) {

1154 
	`do_w¨n
(

1155 
	`_
("bad siblög backÖoöã∏f‹ block %u i¿dúe˘‹y inodê%" 
PRIu64
 "\n"),

1156 
da_bno
, 
öo
);

1157 
	`libxfs_putbuf
(
bp
);

1158 
îr‹_out
;

1160 
¥ev_bno
 = 
da_bno
;

1161 
da_bno
 = 
Àafhdr
.
f‹w
;

1162 i‡(
da_bno
 != 0) {

1163 i‡(
	`vîify_da_∑th
(
mp
, 
da_curs‹
, 0, 
XFS_DATA_FORK
)) {

1164 
	`libxfs_putbuf
(
bp
);

1165 
îr‹_out
;

1168 
cuºít_hashvÆ
 = 
gª©e°_hashvÆ
;

1173 i‡(!
no_modify
 && 
bp
->
b_îr‹
 =-
EFSBADCRC
)

1174 
buf_dúty
 = 1;

1175 
	`ASSERT
(
buf_dúty
 =0 || (buf_dúty && !
no_modify
));

1176 i‡(
buf_dúty
 && !
no_modify
) {

1177 *
ª∑ú
 = 1;

1178 
	`libxfs_wrôebuf
(
bp
, 0);

1180 
	`libxfs_putbuf
(
bp
);

1181 } 
da_bno
 != 0);

1182 i‡(
	`vîify_föÆ_da_∑th
(
mp
, 
da_curs‹
, 0, 
XFS_DATA_FORK
)) {

1186 
	`do_w¨n
(
	`_
("bad hashÖ©h i¿dúe˘‹y %" 
PRIu64
 "\n"), 
öo
);

1187 
îr‹_out
;

1192 
	`ªÀa£_da_curs‹
(
mp
, 
da_curs‹
, 0);

1195 
îr‹_out
:

1199 
	`îr_ªÀa£_da_curs‹
(
mp
, 
da_curs‹
, 0);

1200 i‡(
bmp
 && (bm∞!&
lbmp
))

1201 
	`‰ì
(
bmp
);

1203 
	}
}

1210 
	$¥o˚ss_node_dú2
(

1211 
xfs_mou¡_t
 *
mp
,

1212 
xfs_öo_t
 
öo
,

1213 
xfs_döode_t
 *
dù
,

1214 
blkm≠_t
 *
blkm≠
,

1215 *
ª∑ú
)

1217 
xfs_dablk_t
 
bno
;

1218 
da_bt_curs‹_t
 
da_curs‹
;

1226 
	`mem£t
(&
da_curs‹
, 0, (da_cursor));

1227 
da_curs‹
.
öo
 = ino;

1228 
da_curs‹
.
dù
 = dip;

1229 
da_curs‹
.
blkm≠
 = blkmap;

1234 i‡(
	`åavî£_öt_dablock
(
mp
, &
da_curs‹
, &
bno
, 
XFS_DATA_FORK
) == 0)

1240 i‡(
bno
 == 0) {

1241 
	`ªÀa£_da_curs‹
(
mp
, &
da_curs‹
, 0);

1249  
	`¥o˚ss_Àaf_Àvñ_dú2
(
mp
, &
da_curs‹
, 
ª∑ú
);

1251 
	}
}

1259 
	$¥o˚ss_Àaf_node_dú2
(

1260 
xfs_mou¡_t
 *
mp
,

1261 
xfs_öo_t
 
öo
,

1262 
xfs_döode_t
 *
dù
,

1263 
öo_discovîy
,

1264 *
dú«me
,

1265 
xfs_öo_t
 *
∑ª¡
,

1266 
blkm≠_t
 *
blkm≠
,

1267 *
dŸ
,

1268 *
dŸdŸ
,

1269 *
ª∑ú
,

1270 
i¢ode
)

1272 
bm≠_ext_t
 *
bmp
;

1273 
xfs_buf
 *
bp
;

1274 
xfs_dú2_d©a_hdr
 *
d©a
;

1275 
xfs_fûeoff_t
 
dbno
;

1276 
good
;

1277 
i
;

1278 
xfs_fûeoff_t
 
ndbno
;

1279 
√x
;

1280 
t
;

1281 
bm≠_ext_t
 
lbmp
;

1282 
dúty
 = 0;

1284 *
ª∑ú
 = *
dŸ
 = *
dŸdŸ
 = 
good
 = 0;

1285 *
∑ª¡
 = 
NULLFSINO
;

1286 
ndbno
 = 
NULLFILEOFF
;

1287 (
dbno
 = 
	`blkm≠_√xt_off
(
blkm≠
, 
ndbno
, &
t
)Ë< 
mp
->
m_dú_geo
->
Àafblk
) {

1288 
√x
 = 
	`blkm≠_gën
(
blkm≠
, 
dbno
, 
mp
->
m_dú_geo
->
fsbcou¡
, &
bmp
, &
lbmp
);

1290 
ndbno
 = 
dbno
;

1291 
ndbno
 < 
dbno
 + 
mp
->
m_dú_geo
->
fsbcou¡
 - 1) {

1292 
ndbno
 = 
	`blkm≠_√xt_off
(
blkm≠
,Çdbno, &
t
);

1294 i‡(
√x
 == 0) {

1295 
	`do_w¨n
(

1296 
	`_
("block %" 
PRIu64
 " for directory inode %" PRIu64 " is missing\n"),

1297 
dbno
, 
öo
);

1300 
bp
 = 
	`da_ªad_buf
(
mp
, 
√x
, 
bmp
, &
xfs_dú3_d©a_buf_›s
);

1301 i‡(
bmp
 !&
lbmp
)

1302 
	`‰ì
(
bmp
);

1303 i‡(
bp
 =
NULL
) {

1304 
	`do_w¨n
(

1305 
	`_
("ˇn'àªad block %" 
PRIu64
 " for directory inode %" PRIu64 "\n"),

1306 
dbno
, 
öo
);

1309 
d©a
 = 
bp
->
b_addr
;

1310 i‡(!(
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR2_DATA_MAGIC
 ||

1311 
	`be32_to_˝u
(
d©a
->
magic
Ë=
XFS_DIR3_DATA_MAGIC
))

1312 
	`do_w¨n
(

1313 
	`_
("bad dúe˘‹y block magi¯# %#x i¿block %" 
PRIu64
 " for directory inode %" PRIu64 "\n"),

1314 
	`be32_to_˝u
(
d©a
->
magic
), 
dbno
, 
öo
);

1315 
i
 = 
	`¥o˚ss_dú2_d©a
(
mp
, 
öo
, 
dù
, 
öo_discovîy
, 
dú«me
,

1316 
∑ª¡
, 
bp
, 
dŸ
, 
dŸdŸ
, (
xfs_dablk_t
)
dbno
,

1317 (*)
d©a
 + 
mp
->
m_dú_geo
->
blksize
, &
dúty
);

1318 i‡(
i
 == 0) {

1319 
good
++;

1321 i‡(
bp
->
b_îr‹
 =-
EFSBADCRC
)

1322 
dúty
 = 1;

1324 i‡(
dúty
 && !
no_modify
) {

1325 *
ª∑ú
 = 1;

1326 
	`libxfs_wrôebuf
(
bp
, 0);

1328 
	`libxfs_putbuf
(
bp
);

1330 i‡(
good
 == 0)

1332 i‡(!
i¢ode
)

1334 i‡(
	`dú2_is_badöo
(
öo
))

1337 i‡(
	`¥o˚ss_node_dú2
(
mp
, 
öo
, 
dù
, 
blkm≠
, 
ª∑ú
))

1338 
	`dú2_add_badli°
(
öo
);

1341 
	}
}

1349 
	$¥o˚ss_dú2
(

1350 
xfs_mou¡_t
 *
mp
,

1351 
xfs_öo_t
 
öo
,

1352 
xfs_döode_t
 *
dù
,

1353 
öo_discovîy
,

1354 *
döo_dúty
,

1355 *
dú«me
,

1356 
xfs_öo_t
 *
∑ª¡
,

1357 
blkm≠_t
 *
blkm≠
)

1359 
dŸ
;

1360 
dŸdŸ
;

1361 
xfs_fûeoff_t
 
œ°
;

1362 
ª∑ú
;

1363 
ªs
;

1365 *
∑ª¡
 = 
NULLFSINO
;

1366 
dŸ
 = 
dŸdŸ
 = 0;

1367 
œ°
 = 0;

1374 i‡(
blkm≠
)

1375 
œ°
 = 
	`blkm≠_œ°_off
(
blkm≠
);

1376 i‡(
	`be64_to_˝u
(
dù
->
di_size
Ë<
	`XFS_DFORK_DSIZE
(dù, 
mp
) &&

1377 
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_LOCAL
) {

1378 
dŸ
 = 
dŸdŸ
 = 1;

1379 
ªs
 = 
	`¥o˚ss_sf_dú2
(
mp
, 
öo
, 
dù
, 
öo_discovîy
, 
döo_dúty
,

1380 
dú«me
, 
∑ª¡
, &
ª∑ú
);

1381 } i‡(
œ°
 =
mp
->
m_dú_geo
->
fsbcou¡
 &&

1382 (
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ||

1383 
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
)) {

1384 
ªs
 = 
	`¥o˚ss_block_dú2
(
mp
, 
öo
, 
dù
, 
öo_discovîy
,

1385 
döo_dúty
, 
dú«me
, 
∑ª¡
, 
blkm≠
, &
dŸ
, &
dŸdŸ
,

1386 &
ª∑ú
);

1387 } i‡(
œ°
 >
mp
->
m_dú_geo
->
Àafblk
 + mp->m_dú_geo->
fsbcou¡
 &&

1388 (
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ||

1389 
dù
->
di_f‹m©
 =
XFS_DINODE_FMT_BTREE
)) {

1390 
ªs
 = 
	`¥o˚ss_Àaf_node_dú2
(
mp
, 
öo
, 
dù
, 
öo_discovîy
,

1391 
dú«me
, 
∑ª¡
, 
blkm≠
, &
dŸ
, &
dŸdŸ
, &
ª∑ú
,

1392 
œ°
 > 
mp
->
m_dú_geo
->
Àafblk
 + mp->m_dú_geo->
fsbcou¡
);

1394 
	`do_w¨n
(
	`_
("bad size/f‹m© f‹ dúe˘‹y %" 
PRIu64
 "\n"), 
öo
);

1400 i‡(
dŸ
 == 0) {

1401 
	`do_w¨n
(
	`_
("nÿ.É¡ry f‹ dúe˘‹y %" 
PRIu64
 "\n"), 
öo
);

1410 i‡(
dŸdŸ
 =0 && 
öo
 !
mp
->
m_sb
.
sb_roŸöo
) {

1411 
	`do_w¨n
(
	`_
("nÿ..É¡ry f‹ dúe˘‹y %" 
PRIu64
 "\n"), 
öo
);

1412 } i‡(
dŸdŸ
 =0 && 
öo
 =
mp
->
m_sb
.
sb_roŸöo
) {

1413 
	`do_w¨n
(
	`_
("nÿ..É¡ry f‹ÑoŸ dúe˘‹y %" 
PRIu64
 "\n"), 
öo
);

1414 
√ed_roŸ_dŸdŸ
 = 1;

1417 
	`ASSERT
((
öo
 !
mp
->
m_sb
.
sb_roŸöo
 && inÿ!*
∑ª¡
) ||

1418 (
öo
 =
mp
->
m_sb
.
sb_roŸöo
 &&

1419 (
öo
 =*
∑ª¡
 || 
√ed_roŸ_dŸdŸ
 == 1)));

1421  
ªs
;

1422 
	}
}

	@repair/dir2.h

19 #i‚de‡
_XR_DIR2_H


20 
	#_XR_DIR2_H


	)

22 
	gblkm≠
;

23 
	gbm≠_ext
;

26 
¥o˚ss_dú2
(

27 
xfs_mou¡_t
 *
mp
,

28 
xfs_öo_t
 
öo
,

29 
xfs_döode_t
 *
dù
,

30 
öo_discovîy
,

31 *
dúty
,

32 *
dú«me
,

33 
xfs_öo_t
 *
∑ª¡
,

34 
blkm≠
 *blkmap);

37 
¥o˚ss_sf_dú2_fixi8
(

38 
xfs_mou¡
 *
mp
,

39 
xfs_dú2_sf_hdr
 *
sÂ
,

40 
xfs_dú2_sf_íåy_t
 **
√xt_s„p
);

43 
dú2_is_badöo
(

44 
xfs_öo_t
 
öo
);

	@repair/err_protos.h

20 
__©åibuã__
((
n‹ëu∫
)Ë
	$do_ab‹t
(const *, ...)

21 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,1,2)));

23 
	`__©åibuã__
((
n‹ëu∫
)Ë
	$do_îr‹
(const *, ...)

24 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,1,2)));

26 
	$do_w¨n
(const *, ...)

27 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,1,2)));

29 
	$do_log
(const *, ...)

30 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,1,2)));

	@repair/globals.c

19 
	~"libxfs.h
"

21 
	#EXTERN


	)

22 
	~"globÆs.h
"

	@repair/globals.h

19 #i‚de‡
_XFS_REPAIR_GLOBAL_H


20 
	#_XFS_REPAIR_GLOBAL_H


	)

22 #i‚de‡
EXTERN


23 
	#EXTERN
 

	)

28 
	#rounddown
(
x
, 
y
Ë(((x)/(y))*(y))

	)

32 
	#XR_OK
 0

	)

33 
	#XR_BAD_MAGIC
 1

	)

34 
	#XR_BAD_BLOCKSIZE
 2

	)

35 
	#XR_BAD_BLOCKLOG
 3

	)

36 
	#XR_BAD_VERSION
 4

	)

37 
	#XR_BAD_INPROGRESS
 5

	)

38 
	#XR_BAD_FS_SIZE_DATA
 6

	)

39 
	#XR_BAD_INO_SIZE_DATA
 7

	)

40 
	#XR_BAD_SECT_SIZE_DATA
 8

	)

41 
	#XR_AGF_GEO_MISMATCH
 9

	)

42 
	#XR_AGI_GEO_MISMATCH
 10

	)

43 
	#XR_SB_GEO_MISMATCH
 11

	)

44 
	#XR_EOF
 12

	)

45 
	#XR_BAD_RT_GEO_DATA
 13

	)

46 
	#XR_BAD_INO_MAX_PCT
 14

	)

47 
	#XR_BAD_INO_ALIGN
 15

	)

48 
	#XR_INSUFF_SEC_SB
 16

	)

49 
	#XR_BAD_SB_UNIT
 17

	)

50 
	#XR_BAD_SB_WIDTH
 18

	)

51 
	#XR_BAD_SVN
 19

	)

52 
	#XR_BAD_CRC
 20

	)

53 
	#XR_BAD_DIR_SIZE_DATA
 21

	)

54 
	#XR_BAD_ERR_CODE
 22

	)

58 
	#XR_LOG2BSIZE_MIN
 9

	)

59 
	#XR_LOG2BSIZE_MAX
 16

	)

61 
	#NUM_AGH_SECTS
 4

	)

67 
EXTERN
 *
fs_«me
;

68 
EXTERN
 
	gvîbo£
;

73 
EXTERN
 *
	giobuf
;

74 
EXTERN
 
	giobuf_size
;

75 
EXTERN
 *
	gsmÆlbuf
;

76 
EXTERN
 
	gsmÆlbuf_size
;

77 
EXTERN
 
	gsbbuf_size
;

81 
EXTERN
 
	gmöio_Æign
;

82 
EXTERN
 
	gmem_Æign
;

83 
EXTERN
 
	gmax_iosize
;

87 
EXTERN
 
	gfs_fd
;

91 
EXTERN
 
	gvîbo£
;

92 
EXTERN
 
	gno_modify
;

93 
EXTERN
 
	gd™gîou¶y
;

94 
EXTERN
 
	giß_fûe
;

95 
EXTERN
 
	gz≠_log
;

96 
EXTERN
 
	gdumpc‹e
;

97 
EXTERN
 
	gdñëe_©å_ok
;

98 
EXTERN
 
	gf‹˚_geo
;

99 
EXTERN
 
	gassume_xfs
;

100 
EXTERN
 
	g¥e_65_bëa
;

101 
EXTERN
 *
	glog_«me
;

102 
EXTERN
 
	glog_•ec
;

103 
EXTERN
 *
	gπ_«me
;

104 
EXTERN
 
	gπ_•ec
;

105 
EXTERN
 
	gc⁄vît_œzy_cou¡
;

106 
EXTERN
 
	gœzy_cou¡
;

110 
EXTERN
 
	g¥im¨y_sb_modifõd
;

111 
EXTERN
 
	gbad_öo_båì
;

112 
EXTERN
 
	gc›õd_sunô
;

113 
EXTERN
 
	gfs_is_dúty
;

117 
EXTERN
 
	g√ed_roŸ_öode
;

118 
EXTERN
 
	g√ed_roŸ_dŸdŸ
;

120 
EXTERN
 
	g√ed_rbmöo
;

121 
EXTERN
 
	g√ed_rsumöo
;

123 
EXTERN
 
	glo°_quŸas
;

124 
EXTERN
 
	ghave_uquŸöo
;

125 
EXTERN
 
	ghave_gquŸöo
;

126 
EXTERN
 
	ghave_pquŸöo
;

127 
EXTERN
 
	glo°_uquŸöo
;

128 
EXTERN
 
	glo°_gquŸöo
;

129 
EXTERN
 
	glo°_pquŸöo
;

131 
EXTERN
 
xfs_agöo_t
 
	gfú°_¥óŒoc_öo
;

132 
EXTERN
 
xfs_agöo_t
 
	gœ°_¥óŒoc_öo
;

133 
EXTERN
 
xfs_agblock_t
 
	gbnobt_roŸ
;

134 
EXTERN
 
xfs_agblock_t
 
	gb˙tbt_roŸ
;

135 
EXTERN
 
xfs_agblock_t
 
	göobt_roŸ
;

139 
EXTERN
 
	göodes_≥r_block
;

140 
EXTERN
 
	göodes_≥r_˛u°î
;

141 
EXTERN
 
	gglob_agcou¡
;

142 
EXTERN
 
	gchunks_pblock
;

143 
EXTERN
 
	gmax_symlök_blocks
;

144 
EXTERN
 
__öt64_t
 
	gfs_max_fûe_off£t
;

148 
EXTERN
 
xfs_πw‹d_t
 *
	gbtmcompuã
;

149 
EXTERN
 
xfs_sumöfo_t
 *
	gsumcompuã
;

153 
EXTERN
 
	gfuŒ_öo_ex_d©a
;

160 
	#ORPHANAGE
 "lo°+found"

	)

164 
EXTERN
 
__uöt64_t
 
	gsb_icou¡
;

165 
EXTERN
 
__uöt64_t
 
	gsb_i‰ì
;

166 
EXTERN
 
__uöt64_t
 
	gsb_fdblocks
;

167 
EXTERN
 
__uöt64_t
 
	gsb_‰exã¡s
;

171 
EXTERN
 
xfs_exéí_t
 
	gsb_öﬂlignmt
;

172 
EXTERN
 
__uöt32_t
 
	gsb_unô
;

173 
EXTERN
 
__uöt32_t
 
	gsb_width
;

175 
	saglock
 {

176 
±hªad_muãx_t
 
lock
 
__©åibuã__
((
__Æig√d__
(64)));

178 
EXTERN
 
aglock
 *
	gag_locks
;

180 
EXTERN
 
	gªp‹t_öãrvÆ
;

181 
EXTERN
 
__uöt64_t
 *
	g¥og_Ωt_d⁄e
;

183 
EXTERN
 
	gag_°ride
;

184 
EXTERN
 
	gthªad_cou¡
;

	@repair/incore.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

21 
	~"båì.h
"

22 
	~"globÆs.h
"

23 
	~"öc‹e.h
"

24 
	~"aghódî.h
"

25 
	~"¥Ÿos.h
"

26 
	~"îr_¥Ÿos.h
"

27 
	~"thªads.h
"

36 
	g°©es
[16] =

39 
båì_roŸ
 **
	gag_bm≠
;

42 
	$upd©e_bm≠
(

43 
båì_roŸ
 *
bm≠
,

44 
off£t
,

45 
xfs_exéí_t
 
bÀn
,

46 *
√w_°©e
)

48 
íd
 = 
off£t
 + 
bÀn
;

49 *
cur_°©e
;

50 
cur_key
;

51 *
√xt_°©e
;

52 
√xt_key
;

53 *
¥ev_°©e
;

55 
cur_°©e
 = 
	`båì_föd
(
bm≠
, 
off£t
, &
cur_key
);

56 i‡(!
cur_°©e
)

59 i‡(
off£t
 =
cur_key
) {

61 i‡(
cur_°©e
 =
√w_°©e
)

68 
¥ev_°©e
 = 
	`båì_≥ek_¥ev
(
bm≠
, 
NULL
);

70 
√xt_°©e
 = 
	`båì_≥ek_√xt
(
bm≠
, &
√xt_key
);

71 i‡(
√xt_key
 > 
íd
) {

73 i‡(
√w_°©e
 =
¥ev_°©e
) {

75 
	`båì_upd©e_key
(
bm≠
, 
off£t
, 
íd
);

80 
	`båì_upd©e_vÆue
(
bm≠
, 
off£t
, 
√w_°©e
);

81 
	`båì_ö£π
(
bm≠
, 
íd
, 
cur_°©e
);

86 i‡(
√w_°©e
 =
√xt_°©e
) {

88 i‡(
√w_°©e
 =
¥ev_°©e
) {

90 
	`båì_dñëe
(
bm≠
, 
off£t
);

91 
	`båì_dñëe
(
bm≠
, 
íd
);

96 
	`båì_upd©e_vÆue
(
bm≠
, 
off£t
, 
√w_°©e
);

97 
	`båì_dñëe
(
bm≠
, 
íd
);

102 i‡(
√w_°©e
 =
¥ev_°©e
) {

104 
	`båì_dñëe
(
bm≠
, 
off£t
);

109 
	`båì_upd©e_vÆue
(
bm≠
, 
off£t
, 
√w_°©e
);

114 
¥ev_°©e
 = 
	`båì_≥ek_¥ev
(
bm≠
, 
NULL
);

115 
	`ASSERT
(
¥ev_°©e
 !
NULL
);

116 i‡(
¥ev_°©e
 =
√w_°©e
)

119 i‡(
íd
 =
cur_key
) {

121 i‡(
√w_°©e
 =
cur_°©e
) {

123 
	`båì_upd©e_key
(
bm≠
, 
íd
, 
off£t
);

128 
	`båì_ö£π
(
bm≠
, 
off£t
, 
√w_°©e
);

133 
	`båì_ö£π
(
bm≠
, 
off£t
, 
√w_°©e
);

134 
	`båì_ö£π
(
bm≠
, 
íd
, 
¥ev_°©e
);

135 
	}
}

138 
	$£t_bm≠_ext
(

139 
xfs_agnumbî_t
 
agno
,

140 
xfs_agblock_t
 
agbno
,

141 
xfs_exéí_t
 
bÀn
,

142 
°©e
)

144 
	`upd©e_bm≠
(
ag_bm≠
[
agno
], 
agbno
, 
bÀn
, &
°©es
[
°©e
]);

145 
	}
}

148 
	$gë_bm≠_ext
(

149 
xfs_agnumbî_t
 
agno
,

150 
xfs_agblock_t
 
agbno
,

151 
xfs_agblock_t
 
maxbno
,

152 
xfs_exéí_t
 *
bÀn
)

154 *
°©ï
;

155 
key
;

157 
°©ï
 = 
	`båì_föd
(
ag_bm≠
[
agno
], 
agbno
, &
key
);

158 i‡(!
°©ï
)

161 i‡(
key
 =
agbno
) {

162 i‡(
bÀn
) {

163 i‡(!
	`båì_≥ek_√xt
(
ag_bm≠
[
agno
], &
key
))

165 *
bÀn
 = 
	`MIN
(
maxbno
, 
key
Ë- 
agbno
;

167  *
°©ï
;

170 
°©ï
 = 
	`båì_≥ek_¥ev
(
ag_bm≠
[
agno
], 
NULL
);

171 i‡(!
°©ï
)

173 i‡(
bÀn
)

174 *
bÀn
 = 
	`MIN
(
maxbno
, 
key
Ë- 
agbno
;

176  *
°©ï
;

177 
	}
}

179 
uöt64_t
 *
	gπ_bm≠
;

180 
size_t
 
	gπ_bm≠_size
;

183 
	#XR_BB_UNIT
 64

	)

184 
	#XR_BB
 4

	)

185 
	#XR_BB_NUM
 (
XR_BB_UNIT
/
XR_BB
Ë

	)

186 
	#XR_BB_MASK
 0xF

	)

192 
	$gë_πbm≠
(

193 
xfs_πblock_t
 
bno
)

195  (*(
π_bm≠
 + 
bno
 / 
XR_BB_NUM
) >>

196 ((
bno
 % 
XR_BB_NUM
Ë* 
XR_BB
)Ë& 
XR_BB_MASK
;

197 
	}
}

200 
	$£t_πbm≠
(

201 
xfs_πblock_t
 
bno
,

202 
°©e
)

204 *(
π_bm≠
 + 
bno
 / 
XR_BB_NUM
) =

205 ((*(
π_bm≠
 + 
bno
 / 
XR_BB_NUM
) &

206 (~((
__uöt64_t
Ë
XR_BB_MASK
 << ((
bno
 % 
XR_BB_NUM
Ë* 
XR_BB
)))) |

207 (((
__uöt64_t
Ë
°©e
Ë<< ((
bno
 % 
XR_BB_NUM
Ë* 
XR_BB
)));

208 
	}
}

211 
	$ª£t_π_bm≠
()

213 i‡(
π_bm≠
)

214 
	`mem£t
(
π_bm≠
, 0x22, 
π_bm≠_size
);

215 
	}
}

218 
	$öô_π_bm≠
(

219 
xfs_mou¡_t
 *
mp
)

221 i‡(
mp
->
m_sb
.
sb_ªxã¡s
 == 0)

224 
π_bm≠_size
 = 
	`roundup
(
mp
->
m_sb
.
sb_ªxã¡s
 / (
NBBY
 / 
XR_BB
),

225 (
__uöt64_t
));

227 
π_bm≠
 = 
	`memÆign
((
__uöt64_t
), 
π_bm≠_size
);

228 i‡(!
π_bm≠
) {

229 
	`do_îr‹
(

230 
	`_
("couldn'àÆloˇãÑó…imêblock m≠, sizê%" 
PRIu64
 "\n"),

231 
mp
->
m_sb
.
sb_ªxã¡s
);

234 
	}
}

237 
	$‰ì_π_bm≠
(
xfs_mou¡_t
 *
mp
)

239 
	`‰ì
(
π_bm≠
);

240 
π_bm≠
 = 
NULL
;

241 
	}
}

245 
	$ª£t_bm≠s
(
xfs_mou¡_t
 *
mp
)

247 
xfs_agnumbî_t
 
agno
;

248 
xfs_agblock_t
 
ag_size
;

249 
ag_hdr_block
;

251 
ag_hdr_block
 = 
	`howm™y
(4 * 
mp
->
m_sb
.
sb_£˘size
, mp->m_sb.
sb_blocksize
);

252 
ag_size
 = 
mp
->
m_sb
.
sb_agblocks
;

254 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

255 i‡(
agno
 =
mp
->
m_sb
.
sb_agcou¡
 - 1)

256 
ag_size
 = (
xfs_exéí_t
)(
mp
->
m_sb
.
sb_dblocks
 -

257 (
xfs_rfsblock_t
)
mp
->
m_sb
.
sb_agblocks
 * 
agno
);

258 #ifde‡
BTREE_STATS


259 i‡(
	`båì_föd
(
ag_bm≠
[
agno
], 0, 
NULL
)) {

260 
	`¥ötf
("ag_bm≠[%d] båì sèts:\n", 
i
);

261 
	`båì_¥öt_°©s
(
ag_bm≠
[
agno
], 
°dout
);

272 
	`båì_˛ór
(
ag_bm≠
[
agno
]);

273 
	`båì_ö£π
(
ag_bm≠
[
agno
], 0, &
°©es
[
XR_E_INUSE_FS
]);

274 
	`båì_ö£π
(
ag_bm≠
[
agno
],

275 
ag_hdr_block
, &
°©es
[
XR_E_UNKNOWN
]);

276 
	`båì_ö£π
(
ag_bm≠
[
agno
], 
ag_size
, &
°©es
[
XR_E_BAD_STATE
]);

279 i‡(
mp
->
m_sb
.
sb_log°¨t
 != 0) {

280 
	`£t_bm≠_ext
(
	`XFS_FSB_TO_AGNO
(
mp
, mp->
m_sb
.
sb_log°¨t
),

281 
	`XFS_FSB_TO_AGBNO
(
mp
, mp->
m_sb
.
sb_log°¨t
),

282 
mp
->
m_sb
.
sb_logblocks
, 
XR_E_INUSE_FS
);

285 
	`ª£t_π_bm≠
();

286 
	}
}

289 
	$öô_bm≠s
(
xfs_mou¡_t
 *
mp
)

291 
xfs_agnumbî_t
 
i
;

293 
ag_bm≠
 = 
	`ˇŒoc
(
mp
->
m_sb
.
sb_agcou¡
, (
båì_roŸ
 *));

294 i‡(!
ag_bm≠
)

295 
	`do_îr‹
(
	`_
("couldn'tállocate block map btreeÑoots\n"));

297 
ag_locks
 = 
	`ˇŒoc
(
mp
->
m_sb
.
sb_agcou¡
, (
aglock
));

298 i‡(!
ag_locks
)

299 
	`do_îr‹
(
	`_
("couldn'tállocate block mapÜocks\n"));

301 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++) {

302 
	`båì_öô
(&
ag_bm≠
[
i
]);

303 
	`±hªad_muãx_öô
(&
ag_locks
[
i
].
lock
, 
NULL
);

306 
	`öô_π_bm≠
(
mp
);

307 
	`ª£t_bm≠s
(
mp
);

308 
	}
}

311 
	$‰ì_bm≠s
(
xfs_mou¡_t
 *
mp
)

313 
xfs_agnumbî_t
 
i
;

315 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++)

316 
	`båì_de°roy
(
ag_bm≠
[
i
]);

317 
	`‰ì
(
ag_bm≠
);

318 
ag_bm≠
 = 
NULL
;

320 
	`‰ì_π_bm≠
(
mp
);

321 
	}
}

	@repair/incore.h

19 #i‚de‡
XFS_REPAIR_INCORE_H


20 
	#XFS_REPAIR_INCORE_H


	)

22 
	~"avl.h
"

34 
öô_bm≠s
(
xfs_mou¡_t
 *
mp
);

35 
ª£t_bm≠s
(
xfs_mou¡_t
 *
mp
);

36 
‰ì_bm≠s
(
xfs_mou¡_t
 *
mp
);

38 
£t_bm≠_ext
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

39 
xfs_exéí_t
 
bÀn
, 
°©e
);

40 
gë_bm≠_ext
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
,

41 
xfs_agblock_t
 
maxbno
, 
xfs_exéí_t
 *
bÀn
);

43 
£t_πbm≠
(
xfs_πblock_t
 
bno
, 
°©e
);

44 
gë_πbm≠
(
xfs_πblock_t
 
bno
);

46 
ölöe
 

47 
	$£t_bm≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
, 
°©e
)

49 
	`£t_bm≠_ext
(
agno
, 
agbno
, 1, 
°©e
);

50 
	}
}

52 
ölöe
 

53 
	$gë_bm≠
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
)

55  
	`gë_bm≠_ext
(
agno
, 
agbno
,ágbnÿ+ 1, 
NULL
);

56 
	}
}

67 
	texã¡_°©e_t
;

69 
	sexã¡_åì_node
 {

70 
av ode_t
 
	mavl_node
;

71 
xfs_agblock_t
 
	mex_°¨tblock
;

72 
xfs_exéí_t
 
	mex_blockcou¡
;

73 
exã¡_°©e_t
 
	mex_°©e
;

75 
exã¡_åì_node
 *
	m√xt
;

76 
exã¡_åì_node
 *
	mœ°
;

78 
xfs_öo_t
 
	mex_öode
;

81 } 
	texã¡_åì_node_t
;

83 
	sπ_exã¡_åì_node
 {

84 
av ode_t
 
	mavl_node
;

85 
xfs_πblock_t
 
	mπ_°¨tblock
;

86 
xfs_exéí_t
 
	mπ_blockcou¡
;

87 
exã¡_°©e_t
 
	mπ_°©e
;

90 
xfs_öo_t
 
	mex_öode
;

93 } 
	tπ_exã¡_åì_node_t
;

97 
	#XR_E_UNKNOWN
 0

	)

98 
	#XR_E_FREE1
 1

	)

99 
	#XR_E_FREE
 2

	)

100 
	#XR_E_INUSE
 3

	)

101 
	#XR_E_INUSE_FS
 4

	)

102 
	#XR_E_MULT
 5

	)

103 
	#XR_E_INO
 6

	)

104 
	#XR_E_FS_MAP
 7

	)

105 
	#XR_E_INUSE1
 8

	)

106 
	#XR_E_INUSE_FS1
 9

	)

107 
	#XR_E_INO1
 10

	)

108 
	#XR_E_FS_MAP1
 11

	)

109 
	#XR_E_REFC
 12

	)

110 
	#XR_E_COW
 13

	)

111 
	#XR_E_BAD_STATE
 14

	)

115 
	#XR_E_WRITTEN
 0x8

	)

116 
	#good_°©e
(
°©e
Ë(((°©eË& (~
XR_E_WRITTEN
)Ë>
XR_E_UNKNOWN
 && \

117 ((
°©e
Ë& (~
XR_E_WRITTEN
Ë< 
XF_E_BAD_STATE
))

	)

118 
	#wrôãn
(
°©e
Ë((°©eË& 
XR_E_WRITTEN
)

	)

119 
	#£t_wrôãn
(
°©e
Ë(°©eË&
XR_E_WRITTEN


	)

125 
add_bno_exã¡
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
°¨tblock
,

126 
xfs_exéí_t
 
blockcou¡
);

128 
exã¡_åì_node_t
 *

129 
födfú°_bno_exã¡
(
xfs_agnumbî_t
 
agno
);

131 
exã¡_åì_node_t
 *

132 
föd_bno_exã¡
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
);

134 
exã¡_åì_node_t
 *

135 
födfú°_bno_exã¡
(
xfs_agnumbî_t
 
agno
);

137 
	#föd√xt_bno_exã¡
(
exít_±r
) \

138 ((
exã¡_åì_node_t
 *Ë((
exít_±r
)->
avl_node
.
avl_√xtöo
))

	)

141 
gë_bno_exã¡
(
xfs_agnumbî_t
 
agno
, 
exã¡_åì_node_t
 *
ext
);

147 
add_b˙t_exã¡
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
°¨tblock
,

148 
xfs_exéí_t
 
blockcou¡
);

150 
exã¡_åì_node_t
 *

151 
födfú°_b˙t_exã¡
(
xfs_agnumbî_t
 
agno
);

153 
exã¡_åì_node_t
 *

154 
föd_b˙t_exã¡
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
agbno
);

156 
exã¡_åì_node_t
 *

157 
födbigge°_b˙t_exã¡
(
xfs_agnumbî_t
 
agno
);

159 
exã¡_åì_node_t
 *

160 
föd√xt_b˙t_exã¡
(
xfs_agnumbî_t
 
agno
, 
exã¡_åì_node_t
 *
ext
);

162 
exã¡_åì_node_t
 *

163 
gë_b˙t_exã¡
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
°¨tblock
,

164 
xfs_exéí_t
 
blockcou¡
);

170 
add_dup_exã¡
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
°¨tblock
,

171 
xfs_exéí_t
 
blockcou¡
);

172 
£¨ch_dup_exã¡
(
xfs_agnumbî_t
 
agno
,

173 
xfs_agblock_t
 
°¨t_agbno
, xfs_agblock_à
íd_agbno
);

174 
add_π_dup_exã¡
(
xfs_πblock_t
 
°¨tblock
,

175 
xfs_exéí_t
 
blockcou¡
);

177 
£¨ch_π_dup_exã¡
(
xfs_mou¡_t
 *
mp
,

178 
xfs_πblock_t
 
bno
);

187 
ªÀa£_exã¡_åì_node
(
exã¡_åì_node_t
 *
node
);

192 
ªÀa£_dup_exã¡_åì
(
xfs_agnumbî_t
 
agno
);

193 
ªÀa£_agbno_exã¡_åì
(
xfs_agnumbî_t
 
agno
);

194 
ªÀa£_agb˙t_exã¡_åì
(
xfs_agnumbî_t
 
agno
);

199 
‰ì_π_dup_exã¡_åì
(
xfs_mou¡_t
 *
mp
);

201 
öc‹e_ext_öô
(
xfs_mou¡_t
 *);

207 
öc‹e_ext_ã¨down
(
xfs_mou¡_t
 *
mp
);

208 
öc‹e_öo_öô
(
xfs_mou¡_t
 *);

210 
cou¡_bno_exã¡s
(
xfs_agnumbî_t
);

211 
cou¡_bno_exã¡s_blocks
(
xfs_agnumbî_t
, 
uöt
 *);

212 
cou¡_b˙t_exã¡s
(
xfs_agnumbî_t
);

220 
	#XR_INO_UNKNOWN
 0

	)

221 
	#XR_INO_DIR
 1

	)

222 
	#XR_INO_RTDATA
 2

	)

223 
	#XR_INO_RTBITMAP
 3

	)

224 
	#XR_INO_RTSUM
 4

	)

225 
	#XR_INO_DATA
 5

	)

226 
	#XR_INO_SYMLINK
 6

	)

227 
	#XR_INO_CHRDEV
 7

	)

228 
	#XR_INO_BLKDEV
 8

	)

229 
	#XR_INO_SOCK
 9

	)

230 
	#XR_INO_FIFO
 10

	)

231 
	#XR_INO_MOUNTPOINT
 11

	)

253 
	#PLIST_CHUNK_SIZE
 4

	)

255 
xfs_öo_t
 
	t∑ª¡_íåy_t
;

257 
	g∆ök_›s
;

259 
	s∑ª¡_li°
 {

260 
__uöt64_t
 
	mpmask
;

261 
∑ª¡_íåy_t
 *
	m≥¡rõs
;

262 #ifde‡
DEBUG


263 
	m˙t
;

265 } 
	t∑ª¡_li°_t
;

267 
	uöo_∆ök
 {

268 
__uöt8_t
 *
	mun8
;

269 
__uöt16_t
 *
	mun16
;

270 
__uöt32_t
 *
	mun32
;

273 
	söo_ex_d©a
 {

274 
__uöt64_t
 
	möo_ªached
;

275 
__uöt64_t
 
	möo_¥o˚s£d
;

276 
∑ª¡_li°_t
 *
	m∑ª¡s
;

277 
öo_∆ök
 
	mcou¡ed_∆öks
;

278 } 
	töo_ex_d©a_t
;

280 
	söo_åì_node
 {

281 
av ode_t
 
	mavl_node
;

282 
xfs_agöo_t
 
	möo_°¨äum
;

283 
xfs_öo‰ì_t
 
	mú_‰ì
;

284 
__uöt64_t
 
	mú_•¨£
;

285 
__uöt64_t
 
	möo_c⁄fúmed
;

286 
__uöt64_t
 
	möo_iß_dú
;

287 
__uöt64_t
 
	möo_was_æ
;

288 
__uöt64_t
 
	möo_is_æ
;

289 
__uöt8_t
 
	m∆ök_size
;

290 
öo_∆ök
 
	mdisk_∆öks
;

292 
öo_ex_d©a_t
 *
	mex_d©a
;

293 
∑ª¡_li°_t
 *
	m∂i°
;

294 } 
	möo_un
;

295 
__uöt8_t
 *
	m·y≥s
;

296 } 
	töo_åì_node_t
;

298 
	#INOS_PER_IREC
 ((
__uöt64_t
Ë* 
NBBY
)

	)

299 
	#IREC_MASK
(
i
Ë((
__uöt64_t
)1 << (i))

	)

301 
add_öo_ex_d©a
(
xfs_mou¡_t
 *
mp
);

306 
‰ì_öode_ªc
(
xfs_agnumbî_t
 
agno
, 
öo_åì_node_t
 *
öo_ªc
);

311 
gë_öode_ªc
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
,

312 
öo_åì_node_t
 *
öo_ªc
);

314 
av…ªe_desc_t
 **
öode_åì_±rs
;

316 
ölöe
 

317 
	$gë_öode_off£t
(
xfs_mou¡
 *
mp
, 
xfs_öo_t
 
öo
, 
öo_åì_node_t
 *
úec
)

319  
	`XFS_INO_TO_AGINO
(
mp
, 
öo
Ë- 
úec
->
öo_°¨äum
;

320 
	}
}

321 
ölöe
 
öo_åì_node_t
 *

322 
	$födfú°_öode_ªc
(
xfs_agnumbî_t
 
agno
)

324 ((
öo_åì_node_t
 *Ë
öode_åì_±rs
[
agno
]->
avl_fú°öo
);

325 
	}
}

326 
ölöe
 
öo_åì_node_t
 *

327 
	$föd_öode_ªc
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
, 
xfs_agöo_t
 
öo
)

332 i‡(
agno
 >
mp
->
m_sb
.
sb_agcou¡
)

333  
NULL
;

334 ((
öo_åì_node_t
 *)

335 
	`avl_födønge
(
öode_åì_±rs
[
agno
], 
öo
));

336 
	}
}

337 
föd_öode_ªc_ønge
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
,

338 
xfs_agöo_t
 
°¨t_öo
, xfs_agöo_à
íd_öo
,

339 
öo_åì_node_t
 **
fú°
, ino_åì_node_à**
œ°
);

346 
öo_åì_node_t
 *
£t_öode_u£d_Æloc
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
,

347 
xfs_agöo_t
 
öo
);

348 
öo_åì_node_t
 *
£t_öode_‰ì_Æloc
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
,

349 
xfs_agöo_t
 
öo
);

351 
¥öt_öode_li°
(
xfs_agnumbî_t
 
agno
);

352 
¥öt_un˚πaö_öode_li°
(
xfs_agnumbî_t
 
agno
);

357 
öo_åì_node_t
 *
födfú°_un˚πaö_öode_ªc
(
xfs_agnumbî_t
 
agno
);

358 
öo_åì_node_t
 *
föd_un˚πaö_öode_ªc
(
xfs_agnumbî_t
 
agno
,

359 
xfs_agöo_t
 
öo
);

360 
add_öode_un˚πaö
(
xfs_mou¡_t
 *
mp
,

361 
xfs_öo_t
 
öo
, 
‰ì
);

362 
add_agöode_un˚πaö
(
xfs_mou¡
 *
mp
,

363 
xfs_agnumbî_t
 
agno
,

364 
xfs_agöo_t
 
agöo
, 
‰ì
);

365 
gë_un˚πaö_öode_ªc
(
xfs_mou¡
 *
mp
,

366 
xfs_agnumbî_t
 
agno
,

367 
öo_åì_node_t
 *
öo_ªc
);

368 
˛ór_un˚πaö_öo_ˇche
(
xfs_agnumbî_t
 
agno
);

373 
	#√xt_öo_ªc
(
öo_node_±r
) \

374 ((
öo_åì_node_t
 *Ë((
öo_node_±r
)->
avl_node
.
avl_√xtöo
))

	)

379 
	#√xt_lök_ªc
(
öo_node_±r
) \

380 ((
öo_åì_node_t
 *Ë((
öo_node_±r
)->
avl_node
.
avl_f‹w
))

	)

386 
ölöe
 
boﬁ


387 
	$öode_ªc_has_‰ì
(
öo_åì_node
 *
öo_ªc
)

390  
öo_ªc
->
ú_‰ì
 & ~öo_ªc->
ú_•¨£
;

391 
	}
}

393 
ölöe
 
öo_åì_node_t
 *

394 
	$födfú°_‰ì_öode_ªc
(
xfs_agnumbî_t
 
agno
)

396 
öo_åì_node_t
 *
öo_ªc
;

398 
öo_ªc
 = 
	`födfú°_öode_ªc
(
agno
);

400 
öo_ªc
 && !
	`öode_ªc_has_‰ì
(ino_rec))

401 
öo_ªc
 = 
	`√xt_öo_ªc
(ino_rec);

403  
öo_ªc
;

404 
	}
}

406 
ölöe
 
öo_åì_node_t
 *

407 
	$√xt_‰ì_öo_ªc
(
öo_åì_node_t
 *
öo_ªc
)

409 
öo_ªc
 = 
	`√xt_öo_ªc
(ino_rec);

411 
öo_ªc
 && !
	`öode_ªc_has_‰ì
(ino_rec))

412 
öo_ªc
 = 
	`√xt_öo_ªc
(ino_rec);

414  
öo_ªc
;

415 
	}
}

424 
ölöe
 
	$add_öode_ªfchecked
(
öo_åì_node
 *
úec
, 
off£t
)

426 
úec
->
öo_un
.
ex_d©a
->
öo_¥o˚s£d
 |
	`IREC_MASK
(
off£t
);

427 
	}
}

429 
ölöe
 
	$is_öode_ªfchecked
(
öo_åì_node
 *
úec
, 
off£t
)

431  (
úec
->
öo_un
.
ex_d©a
->
öo_¥o˚s£d
 & 
	`IREC_MASK
(
off£t
)) != 0;

432 
	}
}

437 
ölöe
 
	$£t_öode_c⁄fúmed
(
öo_åì_node
 *
úec
, 
off£t
)

439 
úec
->
öo_c⁄fúmed
 |
	`IREC_MASK
(
off£t
);

440 
	}
}

442 
ölöe
 
	$is_öode_c⁄fúmed
(
öo_åì_node
 *
úec
, 
off£t
)

444  (
úec
->
öo_c⁄fúmed
 & 
	`IREC_MASK
(
off£t
)) != 0;

445 
	}
}

450 
ölöe
 
	$£t_öode_ißdú
(
öo_åì_node
 *
úec
, 
off£t
)

452 
úec
->
öo_iß_dú
 |
	`IREC_MASK
(
off£t
);

453 
	}
}

455 
ölöe
 
	$˛ór_öode_ißdú
(
öo_åì_node
 *
úec
, 
off£t
)

457 
úec
->
öo_iß_dú
 &~
	`IREC_MASK
(
off£t
);

458 
	}
}

460 
ölöe
 
	$öode_ißdú
(
öo_åì_node
 *
úec
, 
off£t
)

462  (
úec
->
öo_iß_dú
 & 
	`IREC_MASK
(
off£t
)) != 0;

463 
	}
}

468 
ölöe
 
	$£t_öode_‰ì
(
öo_åì_node
 *
úec
, 
off£t
)

470 
	`£t_öode_c⁄fúmed
(
úec
, 
off£t
);

471 
úec
->
ú_‰ì
 |
	`XFS_INOBT_MASK
(
off£t
);

473 
	}
}

475 
ölöe
 
	$£t_öode_u£d
(
öo_åì_node
 *
úec
, 
off£t
)

477 
	`£t_öode_c⁄fúmed
(
úec
, 
off£t
);

478 
úec
->
ú_‰ì
 &~
	`XFS_INOBT_MASK
(
off£t
);

479 
	}
}

481 
ölöe
 
	$is_öode_‰ì
(
öo_åì_node
 *
úec
, 
off£t
)

483  (
úec
->
ú_‰ì
 & 
	`XFS_INOBT_MASK
(
off£t
)) != 0;

484 
	}
}

489 
ölöe
 
	$£t_öode_•¨£
(
öo_åì_node
 *
úec
, 
off£t
)

491 
úec
->
ú_•¨£
 |
	`XFS_INOBT_MASK
(
off£t
);

492 
	}
}

494 
ölöe
 
boﬁ
 
	$is_öode_•¨£
(
öo_åì_node
 *
úec
, 
off£t
)

496  
úec
->
ú_•¨£
 & 
	`XFS_INOBT_MASK
(
off£t
);

497 
	}
}

502 
ölöe
 
	$£t_öode_was_æ
(
öo_åì_node
 *
úec
, 
off£t
)

504 
úec
->
öo_was_æ
 |
	`IREC_MASK
(
off£t
);

505 
	}
}

507 
ölöe
 
	$˛ór_öode_was_æ
(
öo_åì_node
 *
úec
, 
off£t
)

509 
úec
->
öo_was_æ
 &~
	`IREC_MASK
(
off£t
);

510 
	}
}

512 
ölöe
 
	$öode_was_æ
(
öo_åì_node
 *
úec
, 
off£t
)

514  (
úec
->
öo_was_æ
 & 
	`IREC_MASK
(
off£t
)) != 0;

515 
	}
}

520 
ölöe
 
	$£t_öode_is_æ
(
öo_åì_node
 *
úec
, 
off£t
)

522 
úec
->
öo_is_æ
 |
	`IREC_MASK
(
off£t
);

523 
	}
}

525 
ölöe
 
	$˛ór_öode_is_æ
(
öo_åì_node
 *
úec
, 
off£t
)

527 
úec
->
öo_is_æ
 &~
	`IREC_MASK
(
off£t
);

528 
	}
}

530 
ölöe
 
	$öode_is_æ
(
öo_åì_node
 *
úec
, 
off£t
)

532  (
úec
->
öo_is_æ
 & 
	`IREC_MASK
(
off£t
)) != 0;

533 
	}
}

544 
add_öode_ªf
(
öo_åì_node
 *
úec
, 
off£t
);

545 
dr›_öode_ªf
(
öo_åì_node
 *
úec
, 
off£t
);

546 
__uöt32_t
 
num_öode_ª„ªn˚s
(
öo_åì_node
 *
úec
, 
off£t
);

548 
£t_öode_disk_∆öks
(
öo_åì_node
 *
úec
, 
off£t
, 
__uöt32_t
 
∆öks
);

549 
__uöt32_t
 
gë_öode_disk_∆öks
(
öo_åì_node
 *
úec
, 
off£t
);

551 
ölöe
 
	$is_öode_ªached
(
öo_åì_node
 *
úec
, 
off£t
)

553 
	`ASSERT
(
úec
->
öo_un
.
ex_d©a
 !
NULL
);

554  (
úec
->
öo_un
.
ex_d©a
->
öo_ªached
 & 
	`IREC_MASK
(
off£t
)) != 0;

555 
	}
}

557 
ölöe
 
	$add_öode_ªached
(
öo_åì_node
 *
úec
, 
off£t
)

559 
	`add_öode_ªf
(
úec
, 
off£t
);

560 
úec
->
öo_un
.
ex_d©a
->
öo_ªached
 |
	`IREC_MASK
(
off£t
);

561 
	}
}

567 
ölöe
 

568 
	$£t_öode_·y≥
(
öo_åì_node
 *
úec
,

569 
öo_off£t
,

570 
__uöt8_t
 
·y≥
)

572 i‡(
úec
->
·y≥s
)

573 
úec
->
·y≥s
[
öo_off£t
] = 
·y≥
;

574 
	}
}

576 
ölöe
 
__uöt8_t


577 
	$gë_öode_·y≥
(

578 
öo_åì_node
 *
úec
,

579 
öo_off£t
)

581 i‡(!
úec
->
·y≥s
)

582  
XFS_DIR3_FT_UNKNOWN
;

583  
úec
->
·y≥s
[
öo_off£t
];

584 
	}
}

589 
£t_öode_∑ª¡
(
öo_åì_node_t
 *
úec
, 
öo_off£t
,

590 
xfs_öo_t
 
öo
);

591 
xfs_öo_t
 
gë_öode_∑ª¡
(
öo_åì_node_t
 *
úec
, 
öo_off£t
);

596 
Æloc_ex_d©a
(
öo_åì_node_t
 *
úec
);

603 
	#XR_MAX_BMLEVELS
 10

	)

605 
	sbm_Àvñ_°©e
 {

606 
xfs_fsblock_t
 
	mfsbno
;

607 
xfs_fsblock_t
 
	mÀ·_fsbno
;

608 
xfs_fsblock_t
 
	mright_fsbno
;

609 
__uöt64_t
 
	mfú°_key
;

610 
__uöt64_t
 
	mœ°_key
;

617 } 
	tbm_Àvñ_°©e_t
;

619 
	sbm_curs‹
 {

620 
	mnum_Àvñs
;

621 
xfs_öo_t
 
	möo
;

622 
xfs_döode_t
 *
	mdù
;

623 
bm_Àvñ_°©e_t
 
	mÀvñ
[
XR_MAX_BMLEVELS
];

624 } 
	tbm≠_curs‹_t
;

626 
öô_bm_curs‹
(
bm≠_curs‹_t
 *
curs‹
, 
num_Àvñ
);

634 
ölöe
 

635 
	$ö‹ec_gë_‰ìcou¡
(

636 
xfs_mou¡
 *
mp
,

637 
xfs_öobt_ªc
 *
Ω
)

639 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

640  
Ω
->
ú_u
.
•
.
ú_‰ìcou¡
;

641  
	`be32_to_˝u
(
Ω
->
ú_u
.
f
.
ú_‰ìcou¡
);

642 
	}
}

644 
ölöe
 

645 
	$ö‹ec_£t_‰ìcou¡
(

646 
xfs_mou¡
 *
mp
,

647 
xfs_öobt_ªc
 *
Ω
,

648 
‰ìcou¡
)

650 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

651 
Ω
->
ú_u
.
•
.
ú_‰ìcou¡
 = 
‰ìcou¡
;

653 
Ω
->
ú_u
.
f
.
ú_‰ìcou¡
 = 
	`˝u_to_be32
(
‰ìcou¡
);

654 
	}
}

	@repair/incore_bmc.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

21 
	~"globÆs.h
"

22 
	~"öc‹e.h
"

23 
	~"aghódî.h
"

24 
	~"¥Ÿos.h
"

25 
	~"îr_¥Ÿos.h
"

28 
	$öô_bm_curs‹
(
bm≠_curs‹_t
 *
curs‹
, 
num_Àvñs
)

30 
i
;

32 
	`mem£t
(
curs‹
, 0, (
bm≠_curs‹_t
));

33 
curs‹
->
öo
 = 
NULLFSINO
;

34 
curs‹
->
num_Àvñs
 =Çum_levels;

36 
i
 = 0; i < 
XR_MAX_BMLEVELS
; i++) {

37 
curs‹
->
Àvñ
[
i
].
fsbno
 = 
NULLFSBLOCK
;

38 
curs‹
->
Àvñ
[
i
].
right_fsbno
 = 
NULLFSBLOCK
;

39 
curs‹
->
Àvñ
[
i
].
À·_fsbno
 = 
NULLFSBLOCK
;

40 
curs‹
->
Àvñ
[
i
].
fú°_key
 = 
NULLFILEOFF
;

41 
curs‹
->
Àvñ
[
i
].
œ°_key
 = 
NULLFILEOFF
;

43 
	}
}

	@repair/incore_ext.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

21 
	~"båì.h
"

22 
	~"globÆs.h
"

23 
	~"öc‹e.h
"

24 
	~"aghódî.h
"

25 
	~"¥Ÿos.h
"

26 
	~"îr_¥Ÿos.h
"

27 
	~"avl64.h
"

28 
	~"thªads.h
"

47 
avl64åì_desc_t
 *
	gπ_ext_åì_±r
;

48 
±hªad_muãx_t
 
	gπ_ext_åì_lock
;

50 
båì_roŸ
 **
	gdup_exã¡_åìs
;

51 
±hªad_muãx_t
 *
	gdup_exã¡_åì_locks
;

53 
av…ªe_desc_t
 **
	gexã¡_bno_±rs
;

59 
av…ªe_desc_t
 **
	gexã¡_b˙t_±rs
;

70 
	$ªÀa£_dup_exã¡_åì
(

71 
xfs_agnumbî_t
 
agno
)

73 
	`±hªad_muãx_lock
(&
dup_exã¡_åì_locks
[
agno
]);

74 
	`båì_˛ór
(
dup_exã¡_åìs
[
agno
]);

75 
	`±hªad_muãx_u∆ock
(&
dup_exã¡_åì_locks
[
agno
]);

76 
	}
}

79 
	$add_dup_exã¡
(

80 
xfs_agnumbî_t
 
agno
,

81 
xfs_agblock_t
 
°¨tblock
,

82 
xfs_exéí_t
 
blockcou¡
)

84 
ªt
;

85 #ifde‡
XR_DUP_TRACE


86 
	`Ârötf
(
°dîr
, "Addög du∞exã¡ - %d/%d %d\n", 
agno
, 
°¨tblock
,

87 
blockcou¡
);

89 
	`±hªad_muãx_lock
(&
dup_exã¡_åì_locks
[
agno
]);

90 
ªt
 = 
	`båì_ö£π
(
dup_exã¡_åìs
[
agno
], 
°¨tblock
,

91 (*)(
uöçå_t
)(
°¨tblock
 + 
blockcou¡
));

92 
	`±hªad_muãx_u∆ock
(&
dup_exã¡_åì_locks
[
agno
]);

93  
ªt
;

94 
	}
}

97 
	$£¨ch_dup_exã¡
(

98 
xfs_agnumbî_t
 
agno
,

99 
xfs_agblock_t
 
°¨t_agbno
,

100 
xfs_agblock_t
 
íd_agbno
)

102 
bno
;

103 
ªt
;

105 
	`±hªad_muãx_lock
(&
dup_exã¡_åì_locks
[
agno
]);

106 i‡(!
	`båì_föd
(
dup_exã¡_åìs
[
agno
], 
°¨t_agbno
, &
bno
)) {

107 
ªt
 = 0;

108 
out
;

110 i‡(
bno
 < 
íd_agbno
) {

111 
ªt
 = 1;

112 
out
;

114 
ªt
 = (
uöçå_t
)
	`båì_≥ek_¥ev
(
dup_exã¡_åìs
[
agno
], 
NULL
) >

115 
°¨t_agbno
;

116 
out
:

117 
	`±hªad_muãx_u∆ock
(&
dup_exã¡_åì_locks
[
agno
]);

118  
ªt
;

119 
	}
}

127 
exã¡_åì_node_t
 *

128 
	$mk_exã¡_åì_nodes
(
xfs_agblock_t
 
√w_°¨tblock
,

129 
xfs_exéí_t
 
√w_blockcou¡
, 
exã¡_°©e_t
 
√w_°©e
)

131 
exã¡_åì_node_t
 *
√w
;

133 
√w
 = 
	`mÆloc
((*new));

134 i‡(!
√w
)

135 
	`do_îr‹
(
	`_
("couldn'tállocateÇewÉxtent descriptor.\n"));

137 
√w
->
avl_node
.
avl_√xtöo
 = 
NULL
;

138 
√w
->
ex_°¨tblock
 = 
√w_°¨tblock
;

139 
√w
->
ex_blockcou¡
 = 
√w_blockcou¡
;

140 
√w
->
ex_°©e
 = 
√w_°©e
;

141 
√w
->
√xt
 = 
NULL
;

142 
√w
->
œ°
 = 
NULL
;

144  
√w
;

145 
	}
}

148 
	$ªÀa£_exã¡_åì_node
(
exã¡_åì_node_t
 *
node
)

150 
	`‰ì
(
node
);

151 
	}
}

160 
	$ªÀa£_exã¡_åì
(
av…ªe_desc_t
 *
åì
)

162 
exã¡_åì_node_t
 *
ext
;

163 
exã¡_åì_node_t
 *
tmp
;

164 
exã¡_åì_node_t
 *
Àxt
;

165 
exã¡_åì_node_t
 *
…mp
;

167 i‡(
åì
->
avl_fú°öo
 =
NULL
)

170 
ext
 = (
exã¡_åì_node_t
 *Ë
åì
->
avl_fú°öo
;

172 
ext
 !
NULL
) {

173 
tmp
 = (
exã¡_åì_node_t
 *Ë
ext
->
avl_node
.
avl_√xtöo
;

178 i‡(
ext
->
√xt
 !
NULL
) {

179 
Àxt
 = 
ext
->
√xt
;

180 
Àxt
 !
NULL
) {

181 
…mp
 = 
Àxt
->
√xt
;

182 
	`ªÀa£_exã¡_åì_node
(
Àxt
);

183 
Àxt
 = 
…mp
;

187 
	`ªÀa£_exã¡_åì_node
(
ext
);

188 
ext
 = 
tmp
;

191 
åì
->
avl_roŸ
 =Åªe->
avl_fú°öo
 = 
NULL
;

194 
	}
}

200 
	$ªÀa£_agbno_exã¡_åì
(
xfs_agnumbî_t
 
agno
)

202 
	`ªÀa£_exã¡_åì
(
exã¡_bno_±rs
[
agno
]);

205 
	}
}

208 
	$ªÀa£_agb˙t_exã¡_åì
(
xfs_agnumbî_t
 
agno
)

210 
	`ªÀa£_exã¡_åì
(
exã¡_b˙t_±rs
[
agno
]);

213 
	}
}

221 
	$add_bno_exã¡
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
°¨tblock
,

222 
xfs_exéí_t
 
blockcou¡
)

224 
exã¡_åì_node_t
 *
ext
;

226 
	`ASSERT
(
exã¡_bno_±rs
 !
NULL
);

227 
	`ASSERT
(
exã¡_bno_±rs
[
agno
] !
NULL
);

229 
ext
 = 
	`mk_exã¡_åì_nodes
(
°¨tblock
, 
blockcou¡
, 
XR_E_FREE
);

231 i‡(
	`avl_ö£π
(
exã¡_bno_±rs
[
agno
], (
av ode_t
 *Ë
ext
Ë=
NULL
) {

232 
	`do_îr‹
(
	`_
("duplicate bnoÉxtentÑange\n"));

234 
	}
}

236 
exã¡_åì_node_t
 *

237 
	$födfú°_bno_exã¡
(
xfs_agnumbî_t
 
agno
)

239 
	`ASSERT
(
exã¡_bno_±rs
 !
NULL
);

240 
	`ASSERT
(
exã¡_bno_±rs
[
agno
] !
NULL
);

242 ((
exã¡_åì_node_t
 *Ë
exã¡_bno_±rs
[
agno
]->
avl_fú°öo
);

243 
	}
}

245 
exã¡_åì_node_t
 *

246 
	$föd_bno_exã¡
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
°¨tblock
)

248 
	`ASSERT
(
exã¡_bno_±rs
 !
NULL
);

249 
	`ASSERT
(
exã¡_bno_±rs
[
agno
] !
NULL
);

251 ((
exã¡_åì_node_t
 *Ë
	`avl_föd
(
exã¡_bno_±rs
[
agno
],

252 
°¨tblock
));

253 
	}
}

259 
	$gë_bno_exã¡
(
xfs_agnumbî_t
 
agno
, 
exã¡_åì_node_t
 *
ext
)

261 
	`ASSERT
(
exã¡_bno_±rs
 !
NULL
);

262 
	`ASSERT
(
exã¡_bno_±rs
[
agno
] !
NULL
);

264 
	`avl_dñëe
(
exã¡_bno_±rs
[
agno
], &
ext
->
avl_node
);

267 
	}
}

274 
	#MAXBCNT
 0xFFFFFFFF

	)

275 
	#BCNT_ADDR
(
˙t
Ë((Ë
MAXBCNT
 - (˙t))

	)

283 
	$add_b˙t_exã¡
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
°¨tblock
,

284 
xfs_exéí_t
 
blockcou¡
)

286 
exã¡_åì_node_t
 *
ext
, *
¥ev
, *
cuºít
, *
t›
;

287 
xfs_agblock_t
 
tmp_°¨tblock
;

288 
xfs_exéí_t
 
tmp_blockcou¡
;

289 
exã¡_°©e_t
 
tmp_°©e
;

291 
	`ASSERT
(
exã¡_b˙t_±rs
 !
NULL
);

292 
	`ASSERT
(
exã¡_b˙t_±rs
[
agno
] !
NULL
);

294 
ext
 = 
	`mk_exã¡_åì_nodes
(
°¨tblock
, 
blockcou¡
, 
XR_E_FREE
);

296 
	`ASSERT
(
ext
->
√xt
 =
NULL
);

298 #ifde‡
XR_BCNT_TRACE


299 
	`Ârötf
(
°dîr
, "adding bcnt:ágno = %d, start = %u, count = %u\n",

300 
agno
, 
°¨tblock
, 
blockcou¡
);

302 i‡((
cuºít
 = (
exã¡_åì_node_t
 *Ë
	`avl_föd
(
exã¡_b˙t_±rs
[
agno
],

303 
blockcou¡
)Ë!
NULL
) {

315 
	`ASSERT
(
cuºít
->
œ°
 !
NULL
);

316 i‡(
°¨tblock
 > 
cuºít
->
œ°
->
ex_°¨tblock
) {

317 
cuºít
->
œ°
->
√xt
 = 
ext
;

318 
cuºít
->
œ°
 = 
ext
;

327 
t›
 = 
¥ev
 = 
cuºít
;

328 
cuºít
 !
NULL
 &&

329 
°¨tblock
 > 
cuºít
->
ex_°¨tblock
) {

330 
¥ev
 = 
cuºít
;

331 
cuºít
 = cuºít->
√xt
;

334 i‡(
t›
 =
cuºít
) {

335 
	`ASSERT
(
t›
 =
¥ev
);

346 
tmp_°¨tblock
 = 
t›
->
ex_°¨tblock
;

347 
tmp_blockcou¡
 = 
t›
->
ex_blockcou¡
;

348 
tmp_°©e
 = 
t›
->
ex_°©e
;

350 
t›
->
ex_°¨tblock
 = 
ext
->ex_startblock;

351 
t›
->
ex_blockcou¡
 = 
ext
->ex_blockcount;

352 
t›
->
ex_°©e
 = 
ext
->ex_state;

354 
ext
->
ex_°¨tblock
 = 
tmp_°¨tblock
;

355 
ext
->
ex_blockcou¡
 = 
tmp_blockcou¡
;

356 
ext
->
ex_°©e
 = 
tmp_°©e
;

358 
cuºít
 = 
t›
->
√xt
;

359 
¥ev
 = 
t›
;

362 
¥ev
->
√xt
 = 
ext
;

363 
ext
->
√xt
 = 
cuºít
;

368 i‡(
	`avl_ö£π
(
exã¡_b˙t_±rs
[
agno
], (
av ode_t
 *Ë
ext
Ë=
NULL
) {

369 
	`do_îr‹
(
	`_
(": duplicate bnoÉxtentÑange\n"));

372 
ext
->
œ°
 =Éxt;

375 
	}
}

377 
exã¡_åì_node_t
 *

378 
	$födfú°_b˙t_exã¡
(
xfs_agnumbî_t
 
agno
)

380 
	`ASSERT
(
exã¡_b˙t_±rs
 !
NULL
);

381 
	`ASSERT
(
exã¡_b˙t_±rs
[
agno
] !
NULL
);

383 ((
exã¡_åì_node_t
 *Ë
exã¡_b˙t_±rs
[
agno
]->
avl_fú°öo
);

384 
	}
}

386 
exã¡_åì_node_t
 *

387 
	$födbigge°_b˙t_exã¡
(
xfs_agnumbî_t
 
agno
)

389 
	`ASSERT
(
exã¡_b˙t_±rs
 !
NULL
);

390 
	`ASSERT
(
exã¡_b˙t_±rs
[
agno
] !
NULL
);

392 ((
exã¡_åì_node_t
 *Ë
	`avl_œ°öo
(
exã¡_b˙t_±rs
[
agno
]->
avl_roŸ
));

393 
	}
}

395 
exã¡_åì_node_t
 *

396 
	$föd√xt_b˙t_exã¡
(
xfs_agnumbî_t
 
agno
, 
exã¡_åì_node_t
 *
ext
)

398 
av ode_t
 *
√xtöo
;

400 i‡(
ext
->
√xt
 !
NULL
) {

401 
	`ASSERT
(
ext
->
ex_blockcou¡
 =ext->
√xt
->ex_blockcount);

402 
	`ASSERT
(
ext
->
ex_°¨tblock
 <Éxt->
√xt
->ex_startblock);

403 (
ext
->
√xt
);

410 
√xtöo
 = 
	`avl_föd
(
exã¡_b˙t_±rs
[
agno
], 
ext
->
ex_blockcou¡
);

411 
	`ASSERT
(
√xtöo
 !
NULL
);

412 i‡(
√xtöo
->
avl_√xtöo
 !
NULL
) {

413 
	`ASSERT
(
ext
->
ex_blockcou¡
 < ((
exã¡_åì_node_t
 *)

414 
√xtöo
->
avl_√xtöo
)->
ex_blockcou¡
);

416 ((
exã¡_åì_node_t
 *Ë
√xtöo
->
avl_√xtöo
);

418 
	}
}

425 
exã¡_åì_node_t
 *

426 
	$gë_b˙t_exã¡
(
xfs_agnumbî_t
 
agno
, 
xfs_agblock_t
 
°¨tblock
,

427 
xfs_exéí_t
 
blockcou¡
)

429 
exã¡_åì_node_t
 *
ext
, *
¥ev
, *
t›
;

430 
xfs_agblock_t
 
tmp_°¨tblock
;

431 
xfs_exéí_t
 
tmp_blockcou¡
;

432 
exã¡_°©e_t
 
tmp_°©e
;

434 
¥ev
 = 
NULL
;

435 
	`ASSERT
(
exã¡_b˙t_±rs
 !
NULL
);

436 
	`ASSERT
(
exã¡_b˙t_±rs
[
agno
] !
NULL
);

438 i‡((
ext
 = (
exã¡_åì_node_t
 *Ë
	`avl_föd
(
exã¡_b˙t_±rs
[
agno
],

439 
blockcou¡
)Ë=
NULL
)

440 (
NULL
);

442 
t›
 = 
ext
;

444 i‡(
ext
->
√xt
 !
NULL
) {

448 
ext
 !
NULL
 && 
°¨tblock
 !ext->
ex_°¨tblock
) {

449 
¥ev
 = 
ext
;

450 
ext
 =Éxt->
√xt
;

452 
	`ASSERT
(
ext
 !
NULL
);

453 i‡(
ext
 =
t›
) {

469 
tmp_°¨tblock
 = 
ext
->
√xt
->
ex_°¨tblock
;

470 
tmp_blockcou¡
 = 
ext
->
√xt
->
ex_blockcou¡
;

471 
tmp_°©e
 = 
ext
->
√xt
->
ex_°©e
;

473 
ext
->
√xt
->
ex_°¨tblock
 =Éxt->ex_startblock;

474 
ext
->
√xt
->
ex_blockcou¡
 =Éxt->ex_blockcount;

475 
ext
->
√xt
->
ex_°©e
 =Éxt->ex_state;

477 
ext
->
ex_°¨tblock
 = 
tmp_°¨tblock
;

478 
ext
->
ex_blockcou¡
 = 
tmp_blockcou¡
;

479 
ext
->
ex_°©e
 = 
tmp_°©e
;

481 
ext
 =Éxt->
√xt
;

482 
¥ev
 = 
t›
;

487 
¥ev
->
√xt
 = 
ext
->next;

488 
ext
->
√xt
 = 
NULL
;

493 
	`avl_dñëe
(
exã¡_b˙t_±rs
[
agno
], &
ext
->
avl_node
);

496 
	`ASSERT
(
ext
->
ex_°¨tblock
 =
°¨tblock
);

497 
	`ASSERT
(
ext
->
ex_blockcou¡
 =
blockcou¡
);

498 (
ext
);

499 
	}
}

501 
uöçå_t


502 
	$avl_ext_°¨t
(
av ode_t
 *
node
)

504 ((
uöçå_t
)

505 ((
exã¡_åì_node_t
 *Ë
node
)->
ex_°¨tblock
);

506 
	}
}

508 
uöçå_t


509 
	$avl_ext_íd
(
av ode_t
 *
node
)

511 ((
uöçå_t
) (

512 ((
exã¡_åì_node_t
 *Ë
node
)->
ex_°¨tblock
 +

513 ((
exã¡_åì_node_t
 *Ë
node
)->
ex_blockcou¡
));

514 
	}
}

520 
uöçå_t


521 
	$avl_ext_b˙t_°¨t
(
av ode_t
 *
node
)

527 ((
uöçå_t
Ë((
exã¡_åì_node_t
 *)
node
)->
ex_blockcou¡
);

528 
	}
}

530 
uöçå_t


531 
	$avl_ext_b˙t_íd
(
av ode_t
 *
node
)

537 ((
uöçå_t
Ë((
exã¡_åì_node_t
 *)
node
)->
ex_blockcou¡
);

538 
	}
}

540 
avl›s_t
 
	gavl_exã¡_b˙t_åì_›s
 = {

541 
avl_ext_b˙t_°¨t
,

542 
avl_ext_b˙t_íd


545 
avl›s_t
 
	gavl_exã¡_åì_›s
 = {

546 
avl_ext_°¨t
,

547 
avl_ext_íd


554 
π_exã¡_åì_node_t
 *

555 
	$mk_π_exã¡_åì_nodes
(
xfs_πblock_t
 
√w_°¨tblock
,

556 
xfs_exéí_t
 
√w_blockcou¡
, 
exã¡_°©e_t
 
√w_°©e
)

558 
π_exã¡_åì_node_t
 *
√w
;

560 
√w
 = 
	`mÆloc
((*new));

561 i‡(!
√w
)

562 
	`do_îr‹
(
	`_
("couldn'tállocateÇewÉxtent descriptor.\n"));

564 
√w
->
avl_node
.
avl_√xtöo
 = 
NULL
;

565 
√w
->
π_°¨tblock
 = 
√w_°¨tblock
;

566 
√w
->
π_blockcou¡
 = 
√w_blockcou¡
;

567 
√w
->
π_°©e
 = 
√w_°©e
;

568  
√w
;

569 
	}
}

573 
	$ªÀa£_π_exã¡_åì_node
(
π_exã¡_åì_node_t
 *
node
)

575 
	`‰ì
(
node
);

576 
	}
}

579 
	$ªÀa£_π_exã¡_åì
()

581 
exã¡_åì_node_t
 *
ext
;

582 
exã¡_åì_node_t
 *
tmp
;

583 
exã¡_åì_node_t
 *
Àxt
;

584 
exã¡_åì_node_t
 *
…mp
;

585 
avl64åì_desc_t
 *
åì
;

587 
åì
 = 
π_exã¡_åì_±r
;

589 i‡(
åì
->
avl_fú°öo
 =
NULL
)

592 
ext
 = (
exã¡_åì_node_t
 *Ë
åì
->
avl_fú°öo
;

594 
ext
 !
NULL
) {

595 
tmp
 = (
exã¡_åì_node_t
 *Ë
ext
->
avl_node
.
avl_√xtöo
;

596 
	`ªÀa£_π_exã¡_åì_node
(
ext
);

597 
ext
 = 
tmp
;

600 
åì
->
avl_roŸ
 =Åªe->
avl_fú°öo
 = 
NULL
;

603 
	}
}

612 
	$‰ì_π_dup_exã¡_åì
(
xfs_mou¡_t
 *
mp
)

614 
	`ASSERT
(
mp
->
m_sb
.
sb_rblocks
 != 0);

615 
	`‰ì
(
π_ext_åì_±r
);

616 
π_ext_åì_±r
 = 
NULL
;

617 
	}
}

623 
	$add_π_dup_exã¡
(
xfs_πblock_t
 
°¨tblock
, 
xfs_exéí_t
 
blockcou¡
)

625 
π_exã¡_åì_node_t
 *
fú°
, *
œ°
, *
ext
, *
√xt_ext
;

626 
xfs_πblock_t
 
√w_°¨tblock
;

627 
xfs_exéí_t
 
√w_blockcou¡
;

629 
	`±hªad_muãx_lock
(&
π_ext_åì_lock
);

630 
	`avl64_födønges
(
π_ext_åì_±r
, 
°¨tblock
 - 1,

631 
°¨tblock
 + 
blockcou¡
 + 1,

632 (
avl64node_t
 **Ë&
fú°
, (avl64node_à**Ë&
œ°
);

636 i‡(
fú°
 =
NULL
 && 
œ°
 == NULL) {

639 
ext
 = 
	`mk_π_exã¡_åì_nodes
(
°¨tblock
,

640 
blockcou¡
, 
XR_E_MULT
);

642 i‡(
	`avl64_ö£π
(
π_ext_åì_±r
,

643 (
avl64node_t
 *Ë
ext
Ë=
NULL
) {

644 
	`do_îr‹
(
	`_
("duplicateÉxtentÑange\n"));

647 
	`±hªad_muãx_u∆ock
(&
π_ext_åì_lock
);

651 
	`ASSERT
(
fú°
 !
NULL
 && 
œ°
 != NULL);

657 
√w_°¨tblock
 = 
°¨tblock
;

658 
√w_blockcou¡
 = 
blockcou¡
;

660 
ext
 = 
fú°
;

661 
ext
 !(
π_exã¡_åì_node_t
 *Ë
œ°
->
avl_node
.
avl_√xtöo
;

662 
ext
 = 
√xt_ext
) {

666 
√xt_ext
 = (
π_exã¡_åì_node_t
 *Ë
ext
->
avl_node
.
avl_√xtöo
;

670 i‡(
ext
->
π_°¨tblock
 <
°¨tblock
 &&

671 
ext
->
π_blockcou¡
 >
blockcou¡
) {

672 
	`±hªad_muãx_u∆ock
(&
π_ext_åì_lock
);

678 i‡(
ext
->
π_°¨tblock
 +Éxt->
π_blockcou¡
 >
°¨tblock


679 || 
ext
->
π_°¨tblock
 <
°¨tblock
 + 
blockcou¡
) {

681 i‡(
ext
->
π_°¨tblock
 < 
√w_°¨tblock
)

682 
√w_°¨tblock
 = 
ext
->
π_°¨tblock
;

684 i‡(
ext
->
π_°¨tblock
 +Éxt->
π_blockcou¡
 >

685 
√w_°¨tblock
 + 
√w_blockcou¡
)

686 
√w_blockcou¡
 = 
ext
->
π_°¨tblock
 +

687 
ext
->
π_blockcou¡
 -

688 
√w_°¨tblock
;

690 
	`avl64_dñëe
(
π_ext_åì_±r
, (
avl64node_t
 *Ë
ext
);

695 
ext
 = 
	`mk_π_exã¡_åì_nodes
(
√w_°¨tblock
,

696 
√w_blockcou¡
, 
XR_E_MULT
);

698 i‡(
	`avl64_ö£π
(
π_ext_åì_±r
, (
avl64node_t
 *Ë
ext
Ë=
NULL
) {

699 
	`do_îr‹
(
	`_
("duplicateÉxtentÑange\n"));

702 
	`±hªad_muãx_u∆ock
(&
π_ext_åì_lock
);

704 
	}
}

711 
	$£¨ch_π_dup_exã¡
(
xfs_mou¡_t
 *
mp
, 
xfs_πblock_t
 
bno
)

713 
ªt
;

715 
	`±hªad_muãx_lock
(&
π_ext_åì_lock
);

716 i‡(
	`avl64_födønge
(
π_ext_åì_±r
, 
bno
Ë!
NULL
)

717 
ªt
 = 1;

719 
ªt
 = 0;

720 
	`±hªad_muãx_u∆ock
(&
π_ext_åì_lock
);

721 (
ªt
);

722 
	}
}

724 
__uöt64_t


725 
	$avl64_π_ext_°¨t
(
avl64node_t
 *
node
)

727 (((
π_exã¡_åì_node_t
 *Ë
node
)->
π_°¨tblock
);

728 
	}
}

730 
__uöt64_t


731 
	$avl64_ext_íd
(
avl64node_t
 *
node
)

733 (((
π_exã¡_åì_node_t
 *Ë
node
)->
π_°¨tblock
 +

734 ((
π_exã¡_åì_node_t
 *Ë
node
)->
π_blockcou¡
);

735 
	}
}

737 
avl64›s_t
 
	gavl64_exã¡_åì_›s
 = {

738 
avl64_π_ext_°¨t
,

739 
avl64_ext_íd


743 
	$öc‹e_ext_öô
(
xfs_mou¡_t
 *
mp
)

745 
i
;

746 
xfs_agnumbî_t
 
agcou¡
 = 
mp
->
m_sb
.
sb_agcou¡
;

748 
	`±hªad_muãx_öô
(&
π_ext_åì_lock
, 
NULL
);

750 
dup_exã¡_åìs
 = 
	`ˇŒoc
(
agcou¡
, (
båì_roŸ
 *));

751 i‡(!
dup_exã¡_åìs
)

752 
	`do_îr‹
(
	`_
("couldn't malloc dupÉxtentÅree descriptorÅable\n"));

754 
dup_exã¡_åì_locks
 = 
	`ˇŒoc
(
agcou¡
, (
±hªad_muãx_t
));

755 i‡(!
dup_exã¡_åì_locks
)

756 
	`do_îr‹
(
	`_
("couldn't malloc dupÉxtentÅree descriptorÅable\n"));

758 i‡((
exã¡_bno_±rs
 = 
	`mÆloc
(
agcou¡
 *

759 (
av…ªe_desc_t
 *))Ë=
NULL
)

760 
	`do_îr‹
(

761 
	`_
("couldn't malloc free by-bnoÉxtentÅree descriptorÅable\n"));

763 i‡((
exã¡_b˙t_±rs
 = 
	`mÆloc
(
agcou¡
 *

764 (
av…ªe_desc_t
 *))Ë=
NULL
)

765 
	`do_îr‹
(

766 
	`_
("couldn't malloc free by-bcntÉxtentÅree descriptorÅable\n"));

768 
i
 = 0; i < 
agcou¡
; i++) {

769 i‡((
exã¡_bno_±rs
[
i
] =

770 
	`mÆloc
((
av…ªe_desc_t
))Ë=
NULL
)

771 
	`do_îr‹
(

772 
	`_
("couldn't malloc bnoÉxtentÅree descriptor\n"));

773 i‡((
exã¡_b˙t_±rs
[
i
] =

774 
	`mÆloc
((
av…ªe_desc_t
))Ë=
NULL
)

775 
	`do_îr‹
(

776 
	`_
("couldn't malloc bcntÉxtentÅree descriptor\n"));

779 
i
 = 0; i < 
agcou¡
; i++) {

780 
	`båì_öô
(&
dup_exã¡_åìs
[
i
]);

781 
	`±hªad_muãx_öô
(&
dup_exã¡_åì_locks
[
i
], 
NULL
);

782 
	`avl_öô_åì
(
exã¡_bno_±rs
[
i
], &
avl_exã¡_åì_›s
);

783 
	`avl_öô_åì
(
exã¡_b˙t_±rs
[
i
], &
avl_exã¡_b˙t_åì_›s
);

786 i‡((
π_ext_åì_±r
 = 
	`mÆloc
((
avl64åì_desc_t
))Ë=
NULL
)

787 
	`do_îr‹
(
	`_
("couldn't malloc dupÑtÉxtentÅree descriptor\n"));

789 
	`avl64_öô_åì
(
π_ext_åì_±r
, &
avl64_exã¡_åì_›s
);

790 
	}
}

796 
	$öc‹e_ext_ã¨down
(
xfs_mou¡_t
 *
mp
)

798 
xfs_agnumbî_t
 
i
;

800 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++) {

801 
	`båì_de°roy
(
dup_exã¡_åìs
[
i
]);

802 
	`‰ì
(
exã¡_bno_±rs
[
i
]);

803 
	`‰ì
(
exã¡_b˙t_±rs
[
i
]);

806 
	`‰ì
(
dup_exã¡_åìs
);

807 
	`‰ì
(
exã¡_b˙t_±rs
);

808 
	`‰ì
(
exã¡_bno_±rs
);

810 
dup_exã¡_åìs
 = 
NULL
;

811 
exã¡_b˙t_±rs
 = 
NULL
;

812 
exã¡_bno_±rs
 = 
NULL
;

813 
	}
}

816 
	$cou¡_exã¡s
(
xfs_agnumbî_t
 
agno
, 
av…ªe_desc_t
 *
åì
, 
whichåì
)

818 
exã¡_åì_node_t
 *
node
;

819 
i
 = 0;

821 
node
 = (
exã¡_åì_node_t
 *Ë
åì
->
avl_fú°öo
;

823 
node
 !
NULL
) {

824 
i
++;

825 i‡(
whichåì
)

826 
node
 = 
	`föd√xt_b˙t_exã¡
(
agno
,Çode);

828 
node
 = 
	`föd√xt_bno_exã¡
(node);

831 (
i
);

832 
	}
}

835 
	$cou¡_bno_exã¡s_blocks
(
xfs_agnumbî_t
 
agno
, 
uöt
 *
numblocks
)

837 
__uöt64_t
 
nblocks
;

838 
exã¡_åì_node_t
 *
node
;

839 
i
 = 0;

841 
	`ASSERT
(
agno
 < 
glob_agcou¡
);

843 
nblocks
 = 0;

845 
node
 = (
exã¡_åì_node_t
 *Ë
exã¡_bno_±rs
[
agno
]->
avl_fú°öo
;

847 
node
 !
NULL
) {

848 
nblocks
 +
node
->
ex_blockcou¡
;

849 
i
++;

850 
node
 = 
	`föd√xt_bno_exã¡
(node);

853 *
numblocks
 = 
nblocks
;

854 (
i
);

855 
	}
}

858 
	$cou¡_bno_exã¡s
(
xfs_agnumbî_t
 
agno
)

860 
	`ASSERT
(
agno
 < 
glob_agcou¡
);

861 (
	`cou¡_exã¡s
(
agno
, 
exã¡_bno_±rs
[agno], 0));

862 
	}
}

865 
	$cou¡_b˙t_exã¡s
(
xfs_agnumbî_t
 
agno
)

867 
	`ASSERT
(
agno
 < 
glob_agcou¡
);

868 (
	`cou¡_exã¡s
(
agno
, 
exã¡_b˙t_±rs
[agno], 1));

869 
	}
}

	@repair/incore_ino.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

21 
	~"globÆs.h
"

22 
	~"öc‹e.h
"

23 
	~"aghódî.h
"

24 
	~"¥Ÿos.h
"

25 
	~"thªads.h
"

26 
	~"îr_¥Ÿos.h
"

31 
av…ªe_desc_t
 **
	göode_åì_±rs
;

36 
av…ªe_desc_t
 **
	göode_un˚πaö_åì_±rs
;

41 
	$Æloc_∆ök_¨øy
(
__uöt8_t
 
∆ök_size
)

43 *
±r
;

45 
±r
 = 
	`ˇŒoc
(
XFS_INODES_PER_CHUNK
, 
∆ök_size
);

46 i‡(!
±r
)

47 
	`do_îr‹
(
	`_
("couldÇotállocateÇlinkárray\n"));

48  
±r
;

49 
	}
}

52 
	$∆ök_grow_8_to_16
(
öo_åì_node_t
 *
úec
)

54 
__uöt16_t
 *
√w_∆öks
;

55 
i
;

57 
úec
->
∆ök_size
 = (
__uöt16_t
);

59 
√w_∆öks
 = 
	`Æloc_∆ök_¨øy
(
úec
->
∆ök_size
);

60 
i
 = 0; i < 
XFS_INODES_PER_CHUNK
; i++)

61 
√w_∆öks
[
i
] = 
úec
->
disk_∆öks
.
un8
[i];

62 
	`‰ì
(
úec
->
disk_∆öks
.
un8
);

63 
úec
->
disk_∆öks
.
un16
 = 
√w_∆öks
;

65 i‡(
fuŒ_öo_ex_d©a
) {

66 
√w_∆öks
 = 
	`Æloc_∆ök_¨øy
(
úec
->
∆ök_size
);

67 
i
 = 0; i < 
XFS_INODES_PER_CHUNK
; i++) {

68 
√w_∆öks
[
i
] =

69 
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un8
[
i
];

71 
	`‰ì
(
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un8
);

72 
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un16
 = 
√w_∆öks
;

74 
	}
}

77 
	$∆ök_grow_16_to_32
(
öo_åì_node_t
 *
úec
)

79 
__uöt32_t
 *
√w_∆öks
;

80 
i
;

82 
úec
->
∆ök_size
 = (
__uöt32_t
);

84 
√w_∆öks
 = 
	`Æloc_∆ök_¨øy
(
úec
->
∆ök_size
);

85 
i
 = 0; i < 
XFS_INODES_PER_CHUNK
; i++)

86 
√w_∆öks
[
i
] = 
úec
->
disk_∆öks
.
un16
[i];

87 
	`‰ì
(
úec
->
disk_∆öks
.
un16
);

88 
úec
->
disk_∆öks
.
un32
 = 
√w_∆öks
;

90 i‡(
fuŒ_öo_ex_d©a
) {

91 
√w_∆öks
 = 
	`Æloc_∆ök_¨øy
(
úec
->
∆ök_size
);

93 
i
 = 0; i < 
XFS_INODES_PER_CHUNK
; i++) {

94 
√w_∆öks
[
i
] =

95 
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un16
[
i
];

97 
	`‰ì
(
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un16
);

98 
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un32
 = 
√w_∆öks
;

100 
	}
}

102 
	$add_öode_ªf
(
öo_åì_node
 *
úec
, 
öo_off£t
)

104 
	`ASSERT
(
úec
->
öo_un
.
ex_d©a
 !
NULL
);

106 
úec
->
∆ök_size
) {

107 (
__uöt8_t
):

108 i‡(
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un8
[
öo_off£t
] < 0xff) {

109 
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un8
[
öo_off£t
]++;

112 
	`∆ök_grow_8_to_16
(
úec
);

114 (
__uöt16_t
):

115 i‡(
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un16
[
öo_off£t
] < 0xffff) {

116 
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un16
[
öo_off£t
]++;

119 
	`∆ök_grow_16_to_32
(
úec
);

121 (
__uöt32_t
):

122 
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un32
[
öo_off£t
]++;

125 
	`ASSERT
(0);

127 
	}
}

129 
	$dr›_öode_ªf
(
öo_åì_node
 *
úec
, 
öo_off£t
)

131 
__uöt32_t
 
ªfs
 = 0;

133 
	`ASSERT
(
úec
->
öo_un
.
ex_d©a
 !
NULL
);

135 
úec
->
∆ök_size
) {

136 (
__uöt8_t
):

137 
	`ASSERT
(
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un8
[
öo_off£t
] > 0);

138 
ªfs
 = --
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un8
[
öo_off£t
];

140 (
__uöt16_t
):

141 
	`ASSERT
(
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un16
[
öo_off£t
] > 0);

142 
ªfs
 = --
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un16
[
öo_off£t
];

144 (
__uöt32_t
):

145 
	`ASSERT
(
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un32
[
öo_off£t
] > 0);

146 
ªfs
 = --
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un32
[
öo_off£t
];

149 
	`ASSERT
(0);

152 i‡(
ªfs
 == 0)

153 
úec
->
öo_un
.
ex_d©a
->
öo_ªached
 &~
	`IREC_MASK
(
öo_off£t
);

154 
	}
}

156 
__uöt32_t
 
	$num_öode_ª„ªn˚s
(
öo_åì_node
 *
úec
, 
öo_off£t
)

158 
	`ASSERT
(
úec
->
öo_un
.
ex_d©a
 !
NULL
);

160 
úec
->
∆ök_size
) {

161 (
__uöt8_t
):

162  
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un8
[
öo_off£t
];

163 (
__uöt16_t
):

164  
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un16
[
öo_off£t
];

165 (
__uöt32_t
):

166  
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un32
[
öo_off£t
];

168 
	`ASSERT
(0);

171 
	}
}

173 
	$£t_öode_disk_∆öks
(
öo_åì_node
 *
úec
, 
öo_off£t
,

174 
__uöt32_t
 
∆öks
)

176 
úec
->
∆ök_size
) {

177 (
__uöt8_t
):

178 i‡(
∆öks
 < 0xff) {

179 
úec
->
disk_∆öks
.
un8
[
öo_off£t
] = 
∆öks
;

182 
	`∆ök_grow_8_to_16
(
úec
);

184 (
__uöt16_t
):

185 i‡(
∆öks
 < 0xffff) {

186 
úec
->
disk_∆öks
.
un16
[
öo_off£t
] = 
∆öks
;

189 
	`∆ök_grow_16_to_32
(
úec
);

191 (
__uöt32_t
):

192 
úec
->
disk_∆öks
.
un32
[
öo_off£t
] = 
∆öks
;

195 
	`ASSERT
(0);

197 
	}
}

199 
__uöt32_t
 
	$gë_öode_disk_∆öks
(
öo_åì_node
 *
úec
, 
öo_off£t
)

201 
úec
->
∆ök_size
) {

202 (
__uöt8_t
):

203  
úec
->
disk_∆öks
.
un8
[
öo_off£t
];

204 (
__uöt16_t
):

205  
úec
->
disk_∆öks
.
un16
[
öo_off£t
];

206 (
__uöt32_t
):

207  
úec
->
disk_∆öks
.
un32
[
öo_off£t
];

209 
	`ASSERT
(0);

212 
	}
}

214 
__uöt8_t
 *

215 
	$Æloc_·y≥s_¨øy
(

216 
xfs_mou¡
 *
mp
)

218 
__uöt8_t
 *
±r
;

220 i‡(!
	`xfs_sb_vîsi⁄_has·y≥
(&
mp
->
m_sb
))

221  
NULL
;

223 
±r
 = 
	`ˇŒoc
(
XFS_INODES_PER_CHUNK
, (*ptr));

224 i‡(!
±r
)

225 
	`do_îr‹
(
	`_
("couldÇotállocate ftypesárray\n"));

226  
±r
;

227 
	}
}

242 
öo_åì_node
 *

243 
	$Æloc_öo_node
(

244 
xfs_mou¡
 *
mp
,

245 
xfs_agöo_t
 
°¨tög_öo
)

247 
öo_åì_node
 *
úec
;

249 
úec
 = 
	`mÆloc
((*irec));

250 i‡(!
úec
)

251 
	`do_îr‹
(
	`_
("inode map malloc failed\n"));

253 
úec
->
avl_node
.
avl_√xtöo
 = 
NULL
;

254 
úec
->
avl_node
.
avl_f‹w
 = 
NULL
;

255 
úec
->
avl_node
.
avl_back
 = 
NULL
;

257 
úec
->
öo_°¨äum
 = 
°¨tög_öo
;

258 
úec
->
öo_c⁄fúmed
 = 0;

259 
úec
->
öo_iß_dú
 = 0;

260 
úec
->
öo_was_æ
 = 0;

261 
úec
->
öo_is_æ
 = 0;

262 
úec
->
ú_‰ì
 = (
xfs_öo‰ì_t
) - 1;

263 
úec
->
ú_•¨£
 = 0;

264 
úec
->
öo_un
.
ex_d©a
 = 
NULL
;

265 
úec
->
∆ök_size
 = (
__uöt8_t
);

266 
úec
->
disk_∆öks
.
un8
 = 
	`Æloc_∆ök_¨øy
(úec->
∆ök_size
);

267 
úec
->
·y≥s
 = 
	`Æloc_·y≥s_¨øy
(
mp
);

268  
úec
;

269 
	}
}

272 
	$‰ì_∆ök_¨øy
(
öo_∆ök
 
∆öks
, 
__uöt8_t
 
∆ök_size
)

274 
∆ök_size
) {

275 (
__uöt8_t
):

276 
	`‰ì
(
∆öks
.
un8
);

278 (
__uöt16_t
):

279 
	`‰ì
(
∆öks
.
un16
);

281 (
__uöt32_t
):

282 
	`‰ì
(
∆öks
.
un32
);

285 
	`ASSERT
(0);

287 
	}
}

290 
	$‰ì_öo_åì_node
(

291 
öo_åì_node
 *
úec
)

293 
úec
->
avl_node
.
avl_√xtöo
 = 
NULL
;

294 
úec
->
avl_node
.
avl_f‹w
 = 
NULL
;

295 
úec
->
avl_node
.
avl_back
 = 
NULL
;

297 
	`‰ì_∆ök_¨øy
(
úec
->
disk_∆öks
, iªc->
∆ök_size
);

298 i‡(
úec
->
öo_un
.
ex_d©a
 !
NULL
) {

299 i‡(
fuŒ_öo_ex_d©a
) {

300 
	`‰ì
(
úec
->
öo_un
.
ex_d©a
->
∑ª¡s
);

301 
	`‰ì_∆ök_¨øy
(
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
,

302 
úec
->
∆ök_size
);

304 
	`‰ì
(
úec
->
öo_un
.
ex_d©a
);

308 
	`‰ì
(
úec
->
·y≥s
);

309 
	`‰ì
(
úec
);

310 
	}
}

315 
öo_åì_node_t
 **
	gœ°_ªc
;

327 
	$add_agöode_un˚πaö
(

328 
xfs_mou¡
 *
mp
,

329 
xfs_agnumbî_t
 
agno
,

330 
xfs_agöo_t
 
öo
,

331 
‰ì
)

333 
öo_åì_node_t
 *
öo_ªc
;

334 
xfs_agöo_t
 
s_öo
;

335 
off£t
;

337 
	`ASSERT
(
agno
 < 
glob_agcou¡
);

338 
	`ASSERT
(
œ°_ªc
 !
NULL
);

340 
s_öo
 = 
	`rounddown
(
öo
, 
XFS_INODES_PER_CHUNK
);

345 i‡(
œ°_ªc
[
agno
] !
NULL
 &&Üa°_ªc[agno]->
öo_°¨äum
 =
s_öo
) {

346 
off£t
 = 
öo
 - 
s_öo
;

347 i‡(
‰ì
)

348 
	`£t_öode_‰ì
(
œ°_ªc
[
agno
], 
off£t
);

350 
	`£t_öode_u£d
(
œ°_ªc
[
agno
], 
off£t
);

359 
öo_ªc
 = (
öo_åì_node_t
 *)

360 
	`avl_födønge
(
öode_un˚πaö_åì_±rs
[
agno
], 
s_öo
);

361 i‡(!
öo_ªc
) {

362 
öo_ªc
 = 
	`Æloc_öo_node
(
mp
, 
s_öo
);

364 i‡(!
	`avl_ö£π
(
öode_un˚πaö_åì_±rs
[
agno
],

365 &
öo_ªc
->
avl_node
))

366 
	`do_îr‹
(

367 
	`_
("add_aginode_uncertain - duplicate inodeÑange\n"));

370 i‡(
‰ì
)

371 
	`£t_öode_‰ì
(
öo_ªc
, 
öo
 - 
s_öo
);

373 
	`£t_öode_u£d
(
öo_ªc
, 
öo
 - 
s_öo
);

378 
œ°_ªc
[
agno
] = 
öo_ªc
;

379 
	}
}

386 
	$add_öode_un˚πaö
(
xfs_mou¡_t
 *
mp
, 
xfs_öo_t
 
öo
, 
‰ì
)

388 
	`add_agöode_un˚πaö
(
mp
, 
	`XFS_INO_TO_AGNO
(mp, 
öo
),

389 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
), 
‰ì
);

390 
	}
}

396 
	$gë_un˚πaö_öode_ªc
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
,

397 
öo_åì_node_t
 *
öo_ªc
)

399 
	`ASSERT
(
öode_åì_±rs
 !
NULL
);

400 
	`ASSERT
(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
);

401 
	`ASSERT
(
öode_åì_±rs
[
agno
] !
NULL
);

403 
	`avl_dñëe
(
öode_un˚πaö_åì_±rs
[
agno
], &
öo_ªc
->
avl_node
);

405 
öo_ªc
->
avl_node
.
avl_√xtöo
 = 
NULL
;

406 
öo_ªc
->
avl_node
.
avl_f‹w
 = 
NULL
;

407 
öo_ªc
->
avl_node
.
avl_back
 = 
NULL
;

408 
	}
}

410 
öo_åì_node_t
 *

411 
	$födfú°_un˚πaö_öode_ªc
(
xfs_agnumbî_t
 
agno
)

413 ((
öo_åì_node_t
 *)

414 
öode_un˚πaö_åì_±rs
[
agno
]->
avl_fú°öo
);

415 
	}
}

417 
öo_åì_node_t
 *

418 
	$föd_un˚πaö_öode_ªc
(
xfs_agnumbî_t
 
agno
, 
xfs_agöo_t
 
öo
)

420 ((
öo_åì_node_t
 *)

421 
	`avl_födønge
(
öode_un˚πaö_åì_±rs
[
agno
], 
öo
));

422 
	}
}

425 
	$˛ór_un˚πaö_öo_ˇche
(
xfs_agnumbî_t
 
agno
)

427 
œ°_ªc
[
agno
] = 
NULL
;

428 
	}
}

452 
öo_åì_node
 *

453 
	$add_öode
(

454 
xfs_mou¡
 *
mp
,

455 
xfs_agnumbî_t
 
agno
,

456 
xfs_agöo_t
 
agöo
)

458 
öo_åì_node
 *
úec
;

460 
úec
 = 
	`Æloc_öo_node
(
mp
, 
agöo
);

461 i‡(!
	`avl_ö£π
(
öode_åì_±rs
[
agno
], &
úec
->
avl_node
))

462 
	`do_w¨n
(
	`_
("add_inode - duplicate inodeÑange\n"));

463  
úec
;

464 
	}
}

470 
	$gë_öode_ªc
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
, 
öo_åì_node_t
 *
öo_ªc
)

472 
	`ASSERT
(
öode_åì_±rs
 !
NULL
);

473 
	`ASSERT
(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
);

474 
	`ASSERT
(
öode_åì_±rs
[
agno
] !
NULL
);

476 
	`avl_dñëe
(
öode_åì_±rs
[
agno
], &
öo_ªc
->
avl_node
);

478 
öo_ªc
->
avl_node
.
avl_√xtöo
 = 
NULL
;

479 
öo_ªc
->
avl_node
.
avl_f‹w
 = 
NULL
;

480 
öo_ªc
->
avl_node
.
avl_back
 = 
NULL
;

481 
	}
}

488 
	$‰ì_öode_ªc
(
xfs_agnumbî_t
 
agno
, 
öo_åì_node_t
 *
öo_ªc
)

490 
	`‰ì_öo_åì_node
(
öo_ªc
);

491 
	}
}

494 
	$föd_öode_ªc_ønge
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
,

495 
xfs_agöo_t
 
°¨t_öo
, xfs_agöo_à
íd_öo
,

496 
öo_åì_node_t
 **
fú°
, ino_åì_node_à**
œ°
)

498 *
fú°
 = *
œ°
 = 
NULL
;

503 i‡(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
)

504 
	`avl_födønges
(
öode_åì_±rs
[
agno
], 
°¨t_öo
,

505 
íd_öo
, (
av ode_t
 **Ë
fú°
, (av ode_à**Ë
œ°
);

506 
	}
}

513 
öo_åì_node_t
 *

514 
	$£t_öode_u£d_Æloc
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
, 
xfs_agöo_t
 
öo
)

516 
öo_åì_node_t
 *
öo_ªc
;

523 
öo_ªc
 = 
	`add_öode
(
mp
, 
agno
, 
öo
);

525 
	`ASSERT
(
öo_ªc
 !
NULL
);

526 
	`ASSERT
(
öo
 >
öo_ªc
->
öo_°¨äum
 &&

527 
öo
 - 
öo_ªc
->
öo_°¨äum
 < 
XFS_INODES_PER_CHUNK
);

529 
	`£t_öode_u£d
(
öo_ªc
, 
öo
 - ino_ªc->
öo_°¨äum
);

531 (
öo_ªc
);

532 
	}
}

534 
öo_åì_node_t
 *

535 
	$£t_öode_‰ì_Æloc
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
, 
xfs_agöo_t
 
öo
)

537 
öo_åì_node_t
 *
öo_ªc
;

539 
öo_ªc
 = 
	`add_öode
(
mp
, 
agno
, 
öo
);

541 
	`ASSERT
(
öo_ªc
 !
NULL
);

542 
	`ASSERT
(
öo
 >
öo_ªc
->
öo_°¨äum
 &&

543 
öo
 - 
öo_ªc
->
öo_°¨äum
 < 
XFS_INODES_PER_CHUNK
);

545 
	`£t_öode_‰ì
(
öo_ªc
, 
öo
 - ino_ªc->
öo_°¨äum
);

547 (
öo_ªc
);

548 
	}
}

551 
	$¥öt_öode_li°_öt
(
xfs_agnumbî_t
 
agno
, 
un˚πaö
)

553 
öo_åì_node_t
 *
öo_ªc
;

555 i‡(!
un˚πaö
) {

556 
	`Ârötf
(
°dîr
, 
	`_
("good inodeÜist is --\n"));

557 
öo_ªc
 = 
	`födfú°_öode_ªc
(
agno
);

559 
	`Ârötf
(
°dîr
, 
	`_
("uncertain inodeÜist is --\n"));

560 
öo_ªc
 = 
	`födfú°_un˚πaö_öode_ªc
(
agno
);

563 i‡(
öo_ªc
 =
NULL
) {

564 
	`Ârötf
(
°dîr
, 
	`_
("agnÿ%d --Çÿöodes\n"), 
agno
);

568 
	`¥ötf
(
	`_
("agnÿ%d\n"), 
agno
);

570 
öo_ªc
 !
NULL
) {

571 
	`Ârötf
(
°dîr
,

572 
	`_
("\tptr = %lx, start = 0x%x, free = 0x%llx, confirmed = 0x%llx\n"),

573 ()
öo_ªc
,

574 
öo_ªc
->
öo_°¨äum
,

575 ()
öo_ªc
->
ú_‰ì
,

576 ()
öo_ªc
->
öo_c⁄fúmed
);

577 i‡(
öo_ªc
->
öo_°¨äum
 == 0)

578 
öo_ªc
 = ino_rec;

579 
öo_ªc
 = 
	`√xt_öo_ªc
(ino_rec);

581 
	}
}

584 
	$¥öt_öode_li°
(
xfs_agnumbî_t
 
agno
)

586 
	`¥öt_öode_li°_öt
(
agno
, 0);

587 
	}
}

590 
	$¥öt_un˚πaö_öode_li°
(
xfs_agnumbî_t
 
agno
)

592 
	`¥öt_öode_li°_öt
(
agno
, 1);

593 
	}
}

603 
	$£t_öode_∑ª¡
(

604 
öo_åì_node_t
 *
úec
,

605 
off£t
,

606 
xfs_öo_t
 
∑ª¡
)

608 
∑ª¡_li°_t
 *
±bl
;

609 
i
;

610 
˙t
;

611 
èrgë
;

612 
__uöt64_t
 
bômask
;

613 
∑ª¡_íåy_t
 *
tmp
;

615 i‡(
fuŒ_öo_ex_d©a
)

616 
±bl
 = 
úec
->
öo_un
.
ex_d©a
->
∑ª¡s
;

618 
±bl
 = 
úec
->
öo_un
.
∂i°
;

620 i‡(
±bl
 =
NULL
) {

621 
±bl
 = (
∑ª¡_li°_t
 *)
	`mÆloc
((parent_list_t));

622 i‡(!
±bl
)

623 
	`do_îr‹
(
	`_
("couldn't mallocÖarentÜistÅable\n"));

625 i‡(
fuŒ_öo_ex_d©a
)

626 
úec
->
öo_un
.
ex_d©a
->
∑ª¡s
 = 
±bl
;

628 
úec
->
öo_un
.
∂i°
 = 
±bl
;

630 
±bl
->
pmask
 = 1ULL << 
off£t
;

631 
±bl
->
≥¡rõs
 = (
xfs_öo_t
*)
	`memÆign
((xfs_ino_t),

632 (
xfs_öo_t
));

633 i‡(!
±bl
->
≥¡rõs
)

634 
	`do_îr‹
(
	`_
("couldn't memalignÖentriesÅable\n"));

635 #ifde‡
DEBUG


636 
±bl
->
˙t
 = 1;

638 
±bl
->
≥¡rõs
[0] = 
∑ª¡
;

643 i‡(
±bl
->
pmask
 & (1ULL << 
off£t
)) {

644 
bômask
 = 1ULL;

645 
èrgë
 = 0;

647 
i
 = 0; i < 
off£t
; i++) {

648 i‡(
±bl
->
pmask
 & 
bômask
)

649 
èrgë
++;

650 
bômask
 <<= 1;

652 #ifde‡
DEBUG


653 
	`ASSERT
(
èrgë
 < 
±bl
->
˙t
);

655 
±bl
->
≥¡rõs
[
èrgë
] = 
∑ª¡
;

660 
bômask
 = 1ULL;

661 
˙t
 = 
èrgë
 = 0;

663 
i
 = 0; i < 
XFS_INODES_PER_CHUNK
; i++) {

664 i‡(
±bl
->
pmask
 & 
bômask
) {

665 
˙t
++;

666 i‡(
i
 < 
off£t
)

667 
èrgë
++;

670 
bômask
 <<= 1;

673 #ifde‡
DEBUG


674 
	`ASSERT
(
˙t
 =
±bl
->cnt);

676 
	`ASSERT
(
˙t
 >
èrgë
);

678 
tmp
 = (
xfs_öo_t
*)
	`memÆign
((xfs_öo_t), (
˙t
 + 1) * (xfs_ino_t));

679 i‡(!
tmp
)

680 
	`do_îr‹
(
	`_
("couldn't memalignÖentriesÅable\n"));

682 
	`memmove
(
tmp
, 
±bl
->
≥¡rõs
, 
èrgë
 * (
∑ª¡_íåy_t
));

684 i‡(
˙t
 > 
èrgë
)

685 
	`memmove
(
tmp
 + 
èrgë
 + 1, 
±bl
->
≥¡rõs
 +Åarget,

686 (
˙t
 - 
èrgë
Ë* (
∑ª¡_íåy_t
));

688 
	`‰ì
(
±bl
->
≥¡rõs
);

690 
±bl
->
≥¡rõs
 = 
tmp
;

692 #ifde‡
DEBUG


693 
±bl
->
˙t
++;

695 
±bl
->
≥¡rõs
[
èrgë
] = 
∑ª¡
;

696 
±bl
->
pmask
 |(1ULL << 
off£t
);

697 
	}
}

699 
xfs_öo_t


700 
	$gë_öode_∑ª¡
(
öo_åì_node_t
 *
úec
, 
off£t
)

702 
__uöt64_t
 
bômask
;

703 
∑ª¡_li°_t
 *
±bl
;

704 
i
;

705 
èrgë
;

707 i‡(
fuŒ_öo_ex_d©a
)

708 
±bl
 = 
úec
->
öo_un
.
ex_d©a
->
∑ª¡s
;

710 
±bl
 = 
úec
->
öo_un
.
∂i°
;

712 i‡(
±bl
->
pmask
 & (1ULL << 
off£t
)) {

713 
bômask
 = 1ULL;

714 
èrgë
 = 0;

716 
i
 = 0; i < 
off£t
; i++) {

717 i‡(
±bl
->
pmask
 & 
bômask
)

718 
èrgë
++;

719 
bômask
 <<= 1;

721 #ifde‡
DEBUG


722 
	`ASSERT
(
èrgë
 < 
±bl
->
˙t
);

724 (
±bl
->
≥¡rõs
[
èrgë
]);

728 
	}
}

731 
	$Æloc_ex_d©a
(
öo_åì_node_t
 *
úec
)

733 
∑ª¡_li°_t
 *
±bl
;

735 
±bl
 = 
úec
->
öo_un
.
∂i°
;

736 
úec
->
öo_un
.
ex_d©a
 = (
öo_ex_d©a_t
 *)
	`ˇŒoc
(1, (ino_ex_data_t));

737 i‡(
úec
->
öo_un
.
ex_d©a
 =
NULL
)

738 
	`do_îr‹
(
	`_
("couldÇot malloc inodeÉxtra data\n"));

740 
úec
->
öo_un
.
ex_d©a
->
∑ª¡s
 = 
±bl
;

742 
úec
->
∆ök_size
) {

743 (
__uöt8_t
):

744 
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un8
 =

745 
	`Æloc_∆ök_¨øy
(
úec
->
∆ök_size
);

747 (
__uöt16_t
):

748 
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un16
 =

749 
	`Æloc_∆ök_¨øy
(
úec
->
∆ök_size
);

751 (
__uöt32_t
):

752 
úec
->
öo_un
.
ex_d©a
->
cou¡ed_∆öks
.
un32
 =

753 
	`Æloc_∆ök_¨øy
(
úec
->
∆ök_size
);

756 
	`ASSERT
(0);

758 
	}
}

761 
	$add_öo_ex_d©a
(
xfs_mou¡_t
 *
mp
)

763 
öo_åì_node_t
 *
öo_ªc
;

764 
xfs_agnumbî_t
 
i
;

766 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++) {

767 
öo_ªc
 = 
	`födfú°_öode_ªc
(
i
);

769 
öo_ªc
 !
NULL
) {

770 
	`Æloc_ex_d©a
(
öo_ªc
);

771 
öo_ªc
 = 
	`√xt_öo_ªc
(ino_rec);

774 
fuŒ_öo_ex_d©a
 = 1;

775 
	}
}

777 
uöçå_t


778 
	$avl_öo_°¨t
(
av ode_t
 *
node
)

780 ((
uöçå_t
Ë((
öo_åì_node_t
 *Ë
node
)->
öo_°¨äum
);

781 
	}
}

783 
uöçå_t


784 
	$avl_öo_íd
(
av ode_t
 *
node
)

786 ((
uöçå_t
) (

787 ((
öo_åì_node_t
 *Ë
node
)->
öo_°¨äum
 +

788 
XFS_INODES_PER_CHUNK
));

789 
	}
}

791 
avl›s_t
 
	gavl_öo_åì_›s
 = {

792 
avl_öo_°¨t
,

793 
avl_öo_íd


797 
	$öc‹e_öo_öô
(
xfs_mou¡_t
 *
mp
)

799 
i
;

800 
agcou¡
 = 
mp
->
m_sb
.
sb_agcou¡
;

802 i‡((
öode_åì_±rs
 = 
	`mÆloc
(
agcou¡
 *

803 (
av…ªe_desc_t
 *))Ë=
NULL
)

804 
	`do_îr‹
(
	`_
("couldn't malloc inodeÅree descriptorÅable\n"));

805 i‡((
öode_un˚πaö_åì_±rs
 = 
	`mÆloc
(
agcou¡
 *

806 (
av…ªe_desc_t
 *))Ë=
NULL
)

807 
	`do_îr‹
(

808 
	`_
("couldn't malloc uncertain inoÅree descriptorÅable\n"));

810 
i
 = 0; i < 
agcou¡
; i++) {

811 i‡((
öode_åì_±rs
[
i
] =

812 
	`mÆloc
((
av…ªe_desc_t
))Ë=
NULL
)

813 
	`do_îr‹
(
	`_
("couldn't malloc inodeÅree descriptor\n"));

814 i‡((
öode_un˚πaö_åì_±rs
[
i
] =

815 
	`mÆloc
((
av…ªe_desc_t
))Ë=
NULL
)

816 
	`do_îr‹
(

817 
	`_
("couldn't malloc uncertain inoÅree descriptor\n"));

819 
i
 = 0; i < 
agcou¡
; i++) {

820 
	`avl_öô_åì
(
öode_åì_±rs
[
i
], &
avl_öo_åì_›s
);

821 
	`avl_öô_åì
(
öode_un˚πaö_åì_±rs
[
i
], &
avl_öo_åì_›s
);

824 i‡((
œ°_ªc
 = 
	`mÆloc
((
öo_åì_node_t
 *Ë* 
agcou¡
)Ë=
NULL
)

825 
	`do_îr‹
(
	`_
("couldn't malloc uncertain inode cacheárea\n"));

827 
	`mem£t
(
œ°_ªc
, 0, (
öo_åì_node_t
 *Ë* 
agcou¡
);

829 
fuŒ_öo_ex_d©a
 = 0;

830 
	}
}

	@repair/init.c

19 
	~"libxfs.h
"

20 
	~"globÆs.h
"

21 
	~"aghódî.h
"

22 
	~"¥Ÿos.h
"

23 
	~"îr_¥Ÿos.h
"

24 
	~"±hªad.h
"

25 
	~"avl.h
"

26 
	~"bm≠.h
"

27 
	~"öc‹e.h
"

28 
	~"¥e„tch.h
"

29 
	~<sys/ªsour˚.h
>

32 
	$ts_¸óã
()

34 
	`±hªad_key_¸óã
(&
dblkm≠_key
, 
NULL
);

35 
	`±hªad_key_¸óã
(&
ablkm≠_key
, 
NULL
);

36 
	}
}

39 
	$ö¸ó£_æimô
()

41 
æimô
 
æ
;

44 i‡(
	`gëæimô
(
RLIMIT_FSIZE
, &
æ
) == -1) {

45 
	`≥º‹
("getrlimit");

46 
	`Ârötf
(
°dîr
, 
	`_
("getrlimit(RLIMIT_FSIZE) failed!\n"));

47 
	`exô
(1);

49 i‡(
æ
.
æim_cur
 !
RLIM_INFINITY
) {

50 
æ
.
æim_max
 =Ñl.
æim_cur
 = 
RLIM_INFINITY
;

51 i‡(
	`£ålimô
(
RLIMIT_FSIZE
, &
æ
) == -1) {

52 
	`≥º‹
("setrlimit");

53 
	`Ârötf
(
°dîr
,

54 
	`_
("setrlimit failed - current: %lld, max: %lld\n"),

55 ()
æ
.
æim_cur
,

56 ()
æ
.
æim_max
);

57 
	`exô
(1);

60 
	}
}

63 
	$xfs_öô
(
libxfs_öô_t
 *
¨gs
)

65 
	`mem£t
(
¨gs
, 0, (
libxfs_öô_t
));

67 i‡(
iß_fûe
) {

68 
¨gs
->
disfûe
 = 1;

69 
¨gs
->
d«me
 = 
fs_«me
;

70 
¨gs
->
vﬁ«me
 = 
NULL
;

72 
¨gs
->
disfûe
 = 0;

73 
¨gs
->
vﬁ«me
 = 
fs_«me
;

74 
¨gs
->
d«me
 = 
NULL
;

77 i‡(
log_•ec
) {

78 
¨gs
->
log«me
 = 
log_«me
;

79 
¨gs
->
lisfûe
 = (
iß_fûe
?1:0);

84 i‡(
π_•ec
) {

85 
¨gs
->
π«me
 = 
π_«me
;

86 
¨gs
->
risfûe
 = (
iß_fûe
?1:0);

90 
¨gs
->
u£buÊock
 = 
do_¥e„tch
;

91 
¨gs
->
£tblksize
 = 0;

92 
¨gs
->
isdúe˘
 = 
LIBXFS_DIRECT
;

93 i‡(
no_modify
)

94 
¨gs
->
i§ód⁄ly
 = (
LIBXFS_ISREADONLY
 | 
LIBXFS_ISINACTIVE
);

95 i‡(
d™gîou¶y
)

96 
¨gs
->
i§ód⁄ly
 = (
LIBXFS_ISINACTIVE
 | 
LIBXFS_DANGEROUSLY
);

98 
¨gs
->
i§ód⁄ly
 = 
LIBXFS_EXCLUSIVELY
;

100 i‡(!
	`libxfs_öô
(
¨gs
)) {

102 i‡(!
no_modify
 && !
d™gîou¶y
) {

103 
¨gs
->
i§ód⁄ly
 = (
LIBXFS_ISINACTIVE
 |

104 
LIBXFS_DANGEROUSLY
);

105 i‡(
	`libxfs_öô
(
¨gs
))

106 
	`Ârötf
(
°dîr
,

107 
	`_
("Unmount or useÅhe dangerous (-d) optionÅoÑepairáÑead-only mounted filesystem\n"));

109 
	`do_îr‹
(
	`_
("couldn't initialize XFSÜibrary\n"));

112 
	`ts_¸óã
();

113 
	`ö¸ó£_æimô
();

114 
	`p·ø˚_öô
();

115 
	}
}

	@repair/phase1.c

19 
	~"libxfs.h
"

20 
	~"globÆs.h
"

21 
	~"aghódî.h
"

22 
	~"¥Ÿos.h
"

23 
	~"îr_¥Ÿos.h
"

26 
	$no_sb
()

28 
	`do_w¨n
(
	`_
("Sorry, couldÇot find valid secondary superblock\n"));

29 
	`do_w¨n
(
	`_
("ExitingÇow.\n"));

30 
	`exô
(1);

31 
	}
}

34 
	$Æloc_ag_buf
(
size
)

36 *
bp
;

38 
bp
 = (*)
	`memÆign
(
	`libxfs_devi˚_Æignmít
(), 
size
);

39 i‡(!
bp
)

40 
	`do_îr‹
(
	`_
("couldÇotállocateág header buffer (%d bytes)\n"),

41 
size
);

42 (
bp
);

43 
	}
}

48 
	#MAX_SECTSIZE
 (512 * 1024)

	)

52 
	$pha£1
(
xfs_mou¡_t
 *
mp
)

54 
xfs_sb_t
 *
sb
;

55 *
ag_bp
;

56 
rvÆ
;

58 
	`do_log
(
	`_
("Phase 1 - findánd verify superblock...\n"));

60 
¥im¨y_sb_modifõd
 = 0;

61 
√ed_roŸ_öode
 = 0;

62 
√ed_roŸ_dŸdŸ
 = 0;

63 
√ed_rbmöo
 = 0;

64 
√ed_rsumöo
 = 0;

65 
lo°_quŸas
 = 0;

70 
ag_bp
 = 
	`Æloc_ag_buf
(
MAX_SECTSIZE
);

71 
sb
 = (
xfs_sb_t
 *Ë
ag_bp
;

73 
rvÆ
 = 
	`gë_sb
(
sb
, 0LL, 
MAX_SECTSIZE
, 0);

74 i‡(
rvÆ
 =
XR_EOF
)

75 
	`do_îr‹
(
	`_
("errorÑeadingÖrimary superblock\n"));

80 i‡(
rvÆ
 !
XR_OK
) {

81 
	`do_w¨n
(
	`_
("badÖrimary superblock - %s !!!\n"),

82 
	`îr_°rög
(
rvÆ
));

83 i‡(!
	`föd_£c⁄d¨y_sb
(
sb
))

84 
	`no_sb
();

85 
¥im¨y_sb_modifõd
 = 1;

86 } i‡((
rvÆ
 = 
	`vîify_£t_¥im¨y_sb
(
sb
, 0,

87 &
¥im¨y_sb_modifõd
)Ë!
XR_OK
) {

88 
	`do_w¨n
(
	`_
("couldn't verifyÖrimary superblock - %s !!!\n"),

89 
	`îr_°rög
(
rvÆ
));

90 i‡(!
	`föd_£c⁄d¨y_sb
(
sb
))

91 
	`no_sb
();

92 
¥im¨y_sb_modifõd
 = 1;

101 i‡(
sb
->
sb_bad_„©uªs2
 != 0 &&

102 
sb
->
sb_bad_„©uªs2
 !sb->
sb_„©uªs2
) {

103 
sb
->
sb_„©uªs2
 |sb->
sb_bad_„©uªs2
;

104 
sb
->
sb_bad_„©uªs2
 = sb->
sb_„©uªs2
;

105 
¥im¨y_sb_modifõd
 = 1;

106 
	`do_w¨n
(
	`_
("superblock hasá features2 mismatch, correcting\n"));

117 i‡(
c⁄vît_œzy_cou¡
) {

118 i‡(
œzy_cou¡
 && !
	`xfs_sb_vîsi⁄_ha¶azysbcou¡
(
sb
)) {

119 
sb
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_MOREBITSBIT
;

120 
sb
->
sb_„©uªs2
 |
XFS_SB_VERSION2_LAZYSBCOUNTBIT
;

121 
sb
->
sb_bad_„©uªs2
 |
XFS_SB_VERSION2_LAZYSBCOUNTBIT
;

122 
¥im¨y_sb_modifõd
 = 1;

123 
	`¥ötf
(
	`_
("EnablingÜazy-counters\n"));

124 } i‡(!
œzy_cou¡
 && 
	`xfs_sb_vîsi⁄_ha¶azysbcou¡
(
sb
)) {

125 i‡(
	`XFS_SB_VERSION_NUM
(
sb
Ë=
XFS_SB_VERSION_5
) {

126 
	`¥ötf
(

127 
	`_
("Cannot disableÜazy-counters on V5 fs\n"));

128 
	`exô
(1);

130 
sb
->
sb_„©uªs2
 &~
XFS_SB_VERSION2_LAZYSBCOUNTBIT
;

131 
sb
->
sb_bad_„©uªs2
 &~
XFS_SB_VERSION2_LAZYSBCOUNTBIT
;

132 
	`¥ötf
(
	`_
("DisablingÜazy-counters\n"));

133 
¥im¨y_sb_modifõd
 = 1;

135 
	`¥ötf
(
	`_
("Lazy-countersáreálready %s\n"),

136 
œzy_cou¡
 ? 
	`_
("enabled") : _("disabled"));

137 
	`exô
(0);

142 i‡(
sb
->
sb_sh¨ed_vn
) {

143 
	`do_w¨n
(
	`_
("resetting shared_vnÅo zero\n"));

144 
sb
->
sb_sh¨ed_vn
 = 0;

145 
¥im¨y_sb_modifõd
 = 1;

148 i‡(
¥im¨y_sb_modifõd
) {

149 i‡(!
no_modify
) {

150 
	`do_w¨n
(
	`_
("writing modifiedÖrimary superblock\n"));

151 
	`wrôe_¥im¨y_sb
(
sb
, sb->
sb_£˘size
);

153 
	`do_w¨n
(
	`_
("would write modifiedÖrimary superblock\n"));

160 
sb_i‰ì
 = 
sb_icou¡
 = 
sb_fdblocks
 = 
sb_‰exã¡s
 = 0;

162 
	`‰ì
(
sb
);

163 
	}
}

	@repair/phase2.c

19 
	~"libxfs.h
"

20 
	~"libxlog.h
"

21 
	~"avl.h
"

22 
	~"globÆs.h
"

23 
	~"aghódî.h
"

24 
	~"¥Ÿos.h
"

25 
	~"îr_¥Ÿos.h
"

26 
	~"öc‹e.h
"

27 
	~"¥ogªss.h
"

28 
	~"sˇn.h
"

30 
£t_mp
(
xfs_mou¡_t
 *
mµ
);

33 
	$xlog_ªcovî_do_å™s
(
xlog
 *
log
, 
xlog_ªcovî_t
 *
t
, 
p
)

36 
	}
}

39 
	$zîo_log
(

40 
xfs_mou¡
 *
mp
)

42 
îr‹
;

43 
xfs_daddr_t
 
hód_blk
;

44 
xfs_daddr_t
 
èû_blk
;

45 
xlog
 *
log
 = 
mp
->
m_log
;

47 
	`mem£t
(
log
, 0, (
xlog
));

48 
x
.
logBBsize
 = 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_logblocks
);

49 
x
.
logBB°¨t
 = 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
);

50 
x
.
lbsize
 = 
BBSIZE
;

51 i‡(
	`xfs_sb_vîsi⁄_has£˘‹
(&
mp
->
m_sb
))

52 
x
.
lbsize
 <<(
mp
->
m_sb
.
sb_log£˘log
 - 
BBSHIFT
);

54 
log
->
l_dev
 = 
mp
->
m_logdev_èrgp
;

55 
log
->
l_logBBsize
 = 
x
.
logBBsize
;

56 
log
->
l_logBB°¨t
 = 
x
.
logBB°¨t
;

57 
log
->
l_£˘BBsize
 = 
	`BTOBB
(
x
.
lbsize
);

58 
log
->
l_mp
 = 
mp
;

59 i‡(
	`xfs_sb_vîsi⁄_has£˘‹
(&
mp
->
m_sb
)) {

60 
log
->
l_£˘bb_log
 = 
mp
->
m_sb
.
sb_log£˘log
 - 
BBSHIFT
;

61 
	`ASSERT
(
log
->
l_£˘bb_log
 <
mp
->
m_£˘bb_log
);

63 
	`ASSERT
(
log
->
l_£˘bb_log
 == 0 ||

64 
log
->
l_logBB°¨t
 == 0 ||

65 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
));

66 
	`ASSERT
(
mp
->
m_sb
.
sb_log£˘log
 >
BBSHIFT
);

68 
log
->
l_£˘bb_mask
 = (1 <<Üog->
l_£˘bb_log
) - 1;

76 
îr‹
 = 
	`xlog_föd_èû
(
log
, &
hód_blk
, &
èû_blk
);

77 i‡(
îr‹
) {

78 
	`do_w¨n
(

79 
	`_
("zero_log: cannot findÜog head/tail (xlog_find_tail=%d)\n"),

80 
îr‹
);

81 i‡(!
no_modify
 && !
z≠_log
)

82 
	`do_w¨n
(
	`_
(

86 
	`exô
(2);

88 i‡(
vîbo£
) {

89 
	`do_w¨n
(

90 
	`_
("zîo_log: hód block %" 
PRId64
 "Åail block %" PRId64 "\n"),

91 
hód_blk
, 
èû_blk
);

93 i‡(!
no_modify
 && 
hód_blk
 !
èû_blk
) {

94 i‡(
z≠_log
) {

95 
	`do_w¨n
(
	`_
(

99 
	`do_w¨n
(
	`_
(

106 
	`exô
(2);

117 i‡(!
no_modify
 && 
z≠_log
) {

118 
	`libxfs_log_˛ór
(
log
->
l_dev
, 
NULL
,

119 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
),

120 (
xfs_exéí_t
)
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_logblocks
),

121 &
mp
->
m_sb
.
sb_uuid
,

122 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
) ? 2 : 1,

123 
mp
->
m_sb
.
sb_logsunô
, 
XLOG_FMT
, 
XLOG_INIT_CYCLE
, 
åue
);

126 
îr‹
 = 
	`xlog_föd_èû
(
log
, &
hód_blk
, &
èû_blk
);

127 i‡(
îr‹
 || 
hód_blk
 !
èû_blk
)

128 
	`do_îr‹
(
	`_
("failedÅo clearÜog"));

135 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

136 
libxfs_max_l¢
 = 
log
->
l_œ°_sync_l¢
;

137 
	}
}

149 
	$pha£2
(

150 
xfs_mou¡
 *
mp
,

151 
sˇn_thªads
)

153 
j
;

154 
öo_åì_node_t
 *
öo_ªc
;

157 
	`£t_mp
(
mp
);

160 i‡(
mp
->
m_sb
.
sb_log°¨t
 == 0) {

161 i‡(!
x
.
log«me
)

162 
	`do_îr‹
(
	`_
("This filesystem hasánÉxternalÜog. "

165 
	`do_log
(
	`_
("Pha£ 2 - usögÉxã∫ÆÜog o¿%s\n"), 
x
.
log«me
);

167 
	`do_log
(
	`_
("Phase 2 - using internalÜog\n"));

170 
	`do_log
(
	`_
(" - zeroÜog...\n"));

171 
	`zîo_log
(
mp
);

173 
	`do_log
(
	`_
(" - scan filesystem freespaceánd inode maps...\n"));

175 
bad_öo_båì
 = 0;

177 
	`£t_¥ogªss_msg
(
PROG_FMT_SCAN_AG
, (
__uöt64_t
Ë
glob_agcou¡
);

179 
	`sˇn_ags
(
mp
, 
sˇn_thªads
);

181 
	`¥öt_föÆ_Ωt
();

186 i‡((
öo_ªc
 = 
	`föd_öode_ªc
(
mp
, 0, mp->
m_sb
.
sb_roŸöo
)Ë=
NULL
) {

187 
	`ASSERT
(
mp
->
m_sb
.
sb_rbmöo
 =mp->m_sb.
sb_roŸöo
 + 1 &&

188 
mp
->
m_sb
.
sb_rsumöo
 =mp->m_sb.
sb_roŸöo
 + 2);

189 
	`do_w¨n
(
	`_
("root inode chunkÇot found\n"));

194 
öo_ªc
 = 
	`£t_öode_u£d_Æloc
(
mp
, 0,

195 (
xfs_agöo_t
Ë
mp
->
m_sb
.
sb_roŸöo
);

196 
	`£t_öode_u£d
(
öo_ªc
, 1);

197 
	`£t_öode_u£d
(
öo_ªc
, 2);

199 
j
 = 3; j < 
XFS_INODES_PER_CHUNK
; j++)

200 
	`£t_öode_‰ì
(
öo_ªc
, 
j
);

205 
	`£t_bm≠_ext
(0, 
	`XFS_INO_TO_AGBNO
(
mp
, mp->
m_sb
.
sb_roŸöo
),

206 
mp
->
m_üŒoc_blks
, 
XR_E_INO
);

208 
	`do_log
(
	`_
(" - foundÑoot inode chunk\n"));

213 i‡(
	`is_öode_‰ì
(
öo_ªc
, 0)) {

214 
	`do_w¨n
(
	`_
("root inode marked free, "));

215 
	`£t_öode_u£d
(
öo_ªc
, 0);

216 i‡(!
no_modify
)

217 
	`do_w¨n
(
	`_
("correcting\n"));

219 
	`do_w¨n
(
	`_
("would correct\n"));

222 i‡(
	`is_öode_‰ì
(
öo_ªc
, 1)) {

223 
	`do_w¨n
(
	`_
("realtime bitmap inode marked free, "));

224 
	`£t_öode_u£d
(
öo_ªc
, 1);

225 i‡(!
no_modify
)

226 
	`do_w¨n
(
	`_
("correcting\n"));

228 
	`do_w¨n
(
	`_
("would correct\n"));

231 i‡(
	`is_öode_‰ì
(
öo_ªc
, 2)) {

232 
	`do_w¨n
(
	`_
("realtime summary inode marked free, "));

233 
	`£t_öode_u£d
(
öo_ªc
, 2);

234 i‡(!
no_modify
)

235 
	`do_w¨n
(
	`_
("correcting\n"));

237 
	`do_w¨n
(
	`_
("would correct\n"));

240 
	}
}

	@repair/phase3.c

19 
	~"libxfs.h
"

20 
	~"thªads.h
"

21 
	~"¥e„tch.h
"

22 
	~"avl.h
"

23 
	~"globÆs.h
"

24 
	~"aghódî.h
"

25 
	~"öc‹e.h
"

26 
	~"¥Ÿos.h
"

27 
	~"îr_¥Ÿos.h
"

28 
	~"döode.h
"

29 
	~"¥ogªss.h
"

30 
	~"bm≠.h
"

31 
	~"thªads.h
"

34 
	$¥o˚ss_agi_u∆öked
(

35 
xfs_mou¡
 *
mp
,

36 
xfs_agnumbî_t
 
agno
)

38 
xfs_buf
 *
bp
;

39 
xfs_agi
 *
agù
;

40 
xfs_agnumbî_t
 
i
;

41 
agi_dúty
 = 0;

43 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
,

44 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),

45 
mp
->
m_sb
.
sb_£˘size
/
BBSIZE
, 0, &
xfs_agi_buf_›s
);

46 i‡(!
bp
)

47 
	`do_îr‹
(
	`_
("ˇ¬ŸÑódágòblock %" 
PRId64
 " forág %u\n"),

48 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),ágno);

50 
agù
 = 
	`XFS_BUF_TO_AGI
(
bp
);

52 
	`ASSERT
(
	`be32_to_˝u
(
agù
->
agi_£qno
Ë=
agno
);

54 
i
 = 0; i < 
XFS_AGI_UNLINKED_BUCKETS
; i++) {

55 i‡(
agù
->
agi_u∆öked
[
i
] !
	`˝u_to_be32
(
NULLAGINO
)) {

56 
agù
->
agi_u∆öked
[
i
] = 
	`˝u_to_be32
(
NULLAGINO
);

57 
agi_dúty
 = 1;

61 i‡(
agi_dúty
)

62 
	`libxfs_wrôebuf
(
bp
, 0);

64 
	`libxfs_putbuf
(
bp
);

65 
	}
}

68 
	$¥o˚ss_ag_func
(

69 
w‹k_queue_t
 *
wq
,

70 
xfs_agnumbî_t
 
agno
,

71 *
¨g
)

77 
	`waô_f‹_öode_¥e„tch
(
¨g
);

78 
	`do_log
(
	`_
(" -ágnÿ%d\n"), 
agno
);

79 
	`¥o˚ss_agöodes
(
wq
->
mp
, 
¨g
, 
agno
, 1, 0, 1);

80 
	`blkm≠_‰ì_föÆ
();

81 
	`˛ónup_öode_¥e„tch
(
¨g
);

82 
	}
}

85 
	$¥o˚ss_ags
(

86 
xfs_mou¡_t
 *
mp
)

88 
	`do_öode_¥e„tch
(
mp
, 
ag_°ride
, 
¥o˚ss_ag_func
, 
Ál£
, false);

89 
	}
}

92 
	$do_un˚πaö_agöodes
(

93 
w‹k_queue_t
 *
wq
,

94 
xfs_agnumbî_t
 
agno
,

95 *
¨g
)

97 *
cou¡
 = 
¨g
;

99 *
cou¡
 = 
	`¥o˚ss_un˚πaö_agöodes
(
wq
->
mp
, 
agno
);

101 #ifde‡
XR_INODE_TRACE


102 
	`Ârötf
(
°dîr
,

104 *
cou¡
, 
j
);

107 
	`PROG_RPT_INC
(
¥og_Ωt_d⁄e
[
agno
], 1);

108 
	}
}

111 
	$pha£3
(

112 
xfs_mou¡
 *
mp
,

113 
sˇn_thªads
)

115 
i
, 
j
;

116 *
cou¡s
;

117 
w‹k_queue_t
 
wq
;

119 
	`do_log
(
	`_
("Phase 3 - forÉach AG...\n"));

120 i‡(!
no_modify
)

121 
	`do_log
(
	`_
(" - scanánd clearági unlinkedÜists...\n"));

123 
	`do_log
(
	`_
(" - scan (but don't clear)ági unlinkedÜists...\n"));

125 
	`£t_¥ogªss_msg
(
PROG_FMT_AGI_UNLINKED
, (
__uöt64_t
Ë
glob_agcou¡
);

128 i‡(!
no_modify
) {

129 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++)

130 
	`¥o˚ss_agi_u∆öked
(
mp
, 
i
);

134 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++) {

135 
	`check_un˚πaö_agöodes
(
mp
, 
i
);

136 
	`PROG_RPT_INC
(
¥og_Ωt_d⁄e
[
i
], 1);

138 
	`¥öt_föÆ_Ωt
();

142 
	`do_log
(
	`_
(

145 
	`£t_¥ogªss_msg
(
PROG_FMT_PROCESS_INO
, (
__uöt64_t
Ë
mp
->
m_sb
.
sb_icou¡
);

147 
	`¥o˚ss_ags
(
mp
);

149 
	`¥öt_föÆ_Ωt
();

154 
	`do_log
(
	`_
(" -ÖrocessÇewly discovered inodes...\n"));

155 
	`£t_¥ogªss_msg
(
PROG_FMT_NEW_INODES
, (
__uöt64_t
Ë
glob_agcou¡
);

157 
cou¡s
 = 
	`ˇŒoc
((*cou¡s), 
mp
->
m_sb
.
sb_agcou¡
);

158 i‡(!
cou¡s
) {

159 
	`do_ab‹t
(
	`_
("no memory for uncertain inode counts\n"));

168 
j
 = 0;

169 
	`mem£t
(
cou¡s
, 0, 
mp
->
m_sb
.
sb_agcou¡
 * (*counts));

171 
	`¸óã_w‹k_queue
(&
wq
, 
mp
, 
sˇn_thªads
);

173 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++)

174 
	`queue_w‹k
(&
wq
, 
do_un˚πaö_agöodes
, 
i
, &
cou¡s
[i]);

176 
	`de°roy_w‹k_queue
(&
wq
);

179 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++)

180 
j
 +
cou¡s
[
i
];

182 } 
j
 != 0);

184 
	`‰ì
(
cou¡s
);

186 
	`¥öt_föÆ_Ωt
();

187 
	}
}

	@repair/phase4.c

19 
	~"libxfs.h
"

20 
	~"thªads.h
"

21 
	~"¥e„tch.h
"

22 
	~"avl.h
"

23 
	~"globÆs.h
"

24 
	~"aghódî.h
"

25 
	~"öc‹e.h
"

26 
	~"¥Ÿos.h
"

27 
	~"îr_¥Ÿos.h
"

28 
	~"döode.h
"

29 
	~"bm≠.h
"

30 
	~"vîsi⁄s.h
"

31 
	~"dú2.h
"

32 
	~"¥ogªss.h
"

33 
	~"¶ab.h
"

34 
	~"rm≠.h
"

36 
boﬁ
 
	gcﬁÀ˘_rm≠s
;

46 
	$quŸöo_check
(
xfs_mou¡_t
 *
mp
)

48 
öo_åì_node_t
 *
úec
;

50 i‡(
mp
->
m_sb
.
sb_uquŸöo
 !
NULLFSINO
 && mp->m_sb.sb_uquotino != 0) {

51 i‡(
	`vîify_öum
(
mp
, mp->
m_sb
.
sb_uquŸöo
))

52 
úec
 = 
NULL
;

54 
úec
 = 
	`föd_öode_ªc
(
mp
,

55 
	`XFS_INO_TO_AGNO
(
mp
, mp->
m_sb
.
sb_uquŸöo
),

56 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_uquŸöo
));

58 i‡(
úec
 =
NULL
 || 
	`is_öode_‰ì
(irec,

59 
mp
->
m_sb
.
sb_uquŸöo
 - 
úec
->
öo_°¨äum
)) {

60 
mp
->
m_sb
.
sb_uquŸöo
 = 
NULLFSINO
;

61 
lo°_uquŸöo
 = 1;

63 
lo°_uquŸöo
 = 0;

66 i‡(
mp
->
m_sb
.
sb_gquŸöo
 !
NULLFSINO
 && mp->m_sb.sb_gquotino != 0) {

67 i‡(
	`vîify_öum
(
mp
, mp->
m_sb
.
sb_gquŸöo
))

68 
úec
 = 
NULL
;

70 
úec
 = 
	`föd_öode_ªc
(
mp
,

71 
	`XFS_INO_TO_AGNO
(
mp
, mp->
m_sb
.
sb_gquŸöo
),

72 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_gquŸöo
));

74 i‡(
úec
 =
NULL
 || 
	`is_öode_‰ì
(irec,

75 
mp
->
m_sb
.
sb_gquŸöo
 - 
úec
->
öo_°¨äum
)) {

76 
mp
->
m_sb
.
sb_gquŸöo
 = 
NULLFSINO
;

77 
lo°_gquŸöo
 = 1;

79 
lo°_gquŸöo
 = 0;

82 i‡(
mp
->
m_sb
.
sb_pquŸöo
 !
NULLFSINO
 && mp->m_sb.sb_pquotino != 0) {

83 i‡(
	`vîify_öum
(
mp
, mp->
m_sb
.
sb_pquŸöo
))

84 
úec
 = 
NULL
;

86 
úec
 = 
	`föd_öode_ªc
(
mp
,

87 
	`XFS_INO_TO_AGNO
(
mp
, mp->
m_sb
.
sb_pquŸöo
),

88 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_pquŸöo
));

90 i‡(
úec
 =
NULL
 || 
	`is_öode_‰ì
(irec,

91 
mp
->
m_sb
.
sb_pquŸöo
 - 
úec
->
öo_°¨äum
)) {

92 
mp
->
m_sb
.
sb_pquŸöo
 = 
NULLFSINO
;

93 
lo°_pquŸöo
 = 1;

95 
lo°_pquŸöo
 = 0;

97 
	}
}

100 
	$quŸa_sb_check
(
xfs_mou¡_t
 *
mp
)

121 i‡(
fs_quŸas
 &&

122 (
mp
->
m_sb
.
sb_uquŸöo
 =
NULLFSINO
 || mp->m_sb.sb_uquotino == 0) &&

123 (
mp
->
m_sb
.
sb_gquŸöo
 =
NULLFSINO
 || mp->m_sb.sb_gquotino == 0) &&

124 (
mp
->
m_sb
.
sb_pquŸöo
 =
NULLFSINO
 || mp->m_sb.sb_pquotino == 0)) {

125 
lo°_quŸas
 = 1;

126 
fs_quŸas
 = 0;

127 } i‡(!
	`vîify_öum
(
mp
, mp->
m_sb
.
sb_uquŸöo
) &&

128 !
	`vîify_öum
(
mp
, mp->
m_sb
.
sb_gquŸöo
) &&

129 !
	`vîify_öum
(
mp
, mp->
m_sb
.
sb_pquŸöo
)) {

130 
fs_quŸas
 = 1;

132 
	}
}

136 
	$¥o˚ss_ag_func
(

137 
w‹k_queue_t
 *
wq
,

138 
xfs_agnumbî_t
 
agno
,

139 *
¨g
)

141 
	`waô_f‹_öode_¥e„tch
(
¨g
);

142 
	`do_log
(
	`_
(" -ágnÿ%d\n"), 
agno
);

143 
	`¥o˚ss_agöodes
(
wq
->
mp
, 
¨g
, 
agno
, 0, 1, 0);

144 
	`blkm≠_‰ì_föÆ
();

145 
	`˛ónup_öode_¥e„tch
(
¨g
);

150 
	`ªÀa£_dup_exã¡_åì
(
agno
);

151 
	}
}

154 
	$¥o˚ss_ags
(

155 
xfs_mou¡_t
 *
mp
)

157 
xfs_agnumbî_t
 
i
;

158 
îr‹
;

160 
	`do_öode_¥e„tch
(
mp
, 
ag_°ride
, 
¥o˚ss_ag_func
, 
åue
, 
Ál£
);

161 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++) {

162 
îr‹
 = 
	`rm≠_föish_cﬁÀ˘ög_f‹k_ªcs
(
mp
, 
i
);

163 i‡(
îr‹
)

164 
	`do_îr‹
(

165 
	`_
("unableÅo finisháddingáttr/data forkÑeverse-mapping data for AG %u.\n"),

166 
i
);

168 
	}
}

171 
	$check_rm≠_båìs
(

172 
w‹k_queue_t
 *
wq
,

173 
xfs_agnumbî_t
 
agno
,

174 *
¨g
)

176 
îr‹
;

178 
îr‹
 = 
	`rm≠_add_fixed_ag_ªc
(
wq
->
mp
, 
agno
);

179 i‡(
îr‹
)

180 
	`do_îr‹
(

181 
	`_
("u«bÀÅÿadd AG %u mëad©®ªvî£-m≠pög d©a.\n"), 
agno
);

183 
îr‹
 = 
	`rm≠_fﬁd_øw_ªcs
(
wq
->
mp
, 
agno
);

184 i‡(
îr‹
)

185 
	`do_îr‹
(

186 
	`_
("u«bÀÅÿmîgêAG %u mëad©®ªvî£-m≠pög d©a.\n"), 
agno
);

188 
îr‹
 = 
	`rm≠s_vîify_båì
(
wq
->
mp
, 
agno
);

189 i‡(
îr‹
)

190 
	`do_îr‹
(

191 
	`_
("%s while checkingÑeverse-mappings"),

192 
	`°ªº‹
(-
îr‹
));

193 
	}
}

196 
	$compuã_ag_ªfcou¡s
(

197 
w‹k_queue_t
 *
wq
,

198 
xfs_agnumbî_t
 
agno
,

199 *
¨g
)

201 
îr‹
;

203 
îr‹
 = 
	`compuã_ªfcou¡s
(
wq
->
mp
, 
agno
);

204 i‡(
îr‹
)

205 
	`do_îr‹
(

206 
	`_
("%s while computingÑeference countÑecords.\n"),

207 
	`°ªº‹
(-
îr‹
));

208 
	}
}

211 
	$¥o˚ss_öode_ªÊök_Êags
(

212 
w‹k_queue
 *
wq
,

213 
xfs_agnumbî_t
 
agno
,

214 *
¨g
)

216 
îr‹
;

218 
îr‹
 = 
	`fix_öode_ªÊök_Êags
(
wq
->
mp
, 
agno
);

219 i‡(
îr‹
)

220 
	`do_îr‹
(

221 
	`_
("%s while fixing inodeÑeflink flags.\n"),

222 
	`°ªº‹
(-
îr‹
));

223 
	}
}

226 
	$check_ªfcou¡_båìs
(

227 
w‹k_queue_t
 *
wq
,

228 
xfs_agnumbî_t
 
agno
,

229 *
¨g
)

231 
îr‹
;

233 
îr‹
 = 
	`check_ªfcou¡s
(
wq
->
mp
, 
agno
);

234 i‡(
îr‹
)

235 
	`do_îr‹
(

236 
	`_
("%s while checkingÑeference counts"),

237 
	`°ªº‹
(-
îr‹
));

238 
	}
}

241 
	$¥o˚ss_rm≠_d©a
(

242 
xfs_mou¡
 *
mp
)

244 
w‹k_queue
 
wq
;

245 
xfs_agnumbî_t
 
i
;

247 i‡(!
	`rm≠_√eds_w‹k
(
mp
))

250 
	`¸óã_w‹k_queue
(&
wq
, 
mp
, 
	`libxfs_≈roc
());

251 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++)

252 
	`queue_w‹k
(&
wq
, 
check_rm≠_båìs
, 
i
, 
NULL
);

253 
	`de°roy_w‹k_queue
(&
wq
);

255 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

258 
	`¸óã_w‹k_queue
(&
wq
, 
mp
, 
	`libxfs_≈roc
());

259 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++)

260 
	`queue_w‹k
(&
wq
, 
compuã_ag_ªfcou¡s
, 
i
, 
NULL
);

261 
	`de°roy_w‹k_queue
(&
wq
);

263 
	`¸óã_w‹k_queue
(&
wq
, 
mp
, 
	`libxfs_≈roc
());

264 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++) {

265 
	`queue_w‹k
(&
wq
, 
¥o˚ss_öode_ªÊök_Êags
, 
i
, 
NULL
);

266 
	`queue_w‹k
(&
wq
, 
check_ªfcou¡_båìs
, 
i
, 
NULL
);

268 
	`de°roy_w‹k_queue
(&
wq
);

269 
	}
}

272 
	$pha£4
(
xfs_mou¡_t
 *
mp
)

274 
öo_åì_node_t
 *
úec
;

275 
xfs_πblock_t
 
bno
;

276 
xfs_πblock_t
 
π_°¨t
;

277 
xfs_exéí_t
 
π_Àn
;

278 
xfs_agnumbî_t
 
i
;

279 
xfs_agblock_t
 
j
;

280 
xfs_agblock_t
 
ag_íd
;

281 
xfs_exéí_t
 
bÀn
;

282 
ag_hdr_Àn
 = 4 * 
mp
->
m_sb
.
sb_£˘size
;

283 
ag_hdr_block
;

284 
b°©e
;

286 i‡(
	`rm≠_√eds_w‹k
(
mp
))

287 
cﬁÀ˘_rm≠s
 = 
åue
;

288 
ag_hdr_block
 = 
	`howm™y
(
ag_hdr_Àn
, 
mp
->
m_sb
.
sb_blocksize
);

290 
	`do_log
(
	`_
("Phase 4 - check for duplicate blocks...\n"));

291 
	`do_log
(
	`_
(" - setting up duplicateÉxtentÜist...\n"));

293 
	`£t_¥ogªss_msg
(
PROG_FMT_DUP_EXTENT
, (
__uöt64_t
Ë
glob_agcou¡
);

295 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp, mp->
m_sb
.
sb_roŸöo
),

296 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_roŸöo
));

302 i‡(
	`is_öode_‰ì
(
úec
, 0Ë|| !
	`öode_ißdú
(irec, 0)) {

303 
√ed_roŸ_öode
 = 1;

304 i‡(
no_modify
)

305 
	`do_w¨n
(
	`_
("root inode would beÜost\n"));

307 
	`do_w¨n
(
	`_
("root inodeÜost\n"));

310 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++) {

311 
ag_íd
 = (
i
 < 
mp
->
m_sb
.
sb_agcou¡
 - 1Ë? mp->m_sb.
sb_agblocks
 :

312 
mp
->
m_sb
.
sb_dblocks
 -

313 (
xfs_rfsblock_t
Ë
mp
->
m_sb
.
sb_agblocks
 * 
i
;

318 
j
 = 
ag_hdr_block
; j < 
ag_íd
; j +
bÀn
) {

319 
b°©e
 = 
	`gë_bm≠_ext
(
i
, 
j
, 
ag_íd
, &
bÀn
);

320 
b°©e
) {

321 
XR_E_BAD_STATE
:

323 
	`do_w¨n
(

324 
	`_
("unknown block state,ág %d, block %d\n"),

325 
i
, 
j
);

327 
XR_E_UNKNOWN
:

328 
XR_E_FREE1
:

329 
XR_E_FREE
:

330 
XR_E_INUSE
:

331 
XR_E_INUSE_FS
:

332 
XR_E_INO
:

333 
XR_E_FS_MAP
:

335 
XR_E_MULT
:

336 
	`add_dup_exã¡
(
i
, 
j
, 
bÀn
);

341 
	`PROG_RPT_INC
(
¥og_Ωt_d⁄e
[
i
], 1);

343 
	`¥öt_föÆ_Ωt
();

348 
π_°¨t
 = 0;

349 
π_Àn
 = 0;

351 
bno
 = 0; bnÿ< 
mp
->
m_sb
.
sb_ªxã¡s
; bno++) {

352 
b°©e
 = 
	`gë_πbm≠
(
bno
);

353 
b°©e
) {

354 
XR_E_BAD_STATE
:

356 
	`do_w¨n
(

357 
	`_
("unknow¿πÉxã¡ sèã,Éxã¡ %" 
PRIu64
 "\n"),

358 
bno
);

360 
XR_E_UNKNOWN
:

361 
XR_E_FREE1
:

362 
XR_E_FREE
:

363 
XR_E_INUSE
:

364 
XR_E_INUSE_FS
:

365 
XR_E_INO
:

366 
XR_E_FS_MAP
:

367 i‡(
π_°¨t
 == 0)

373 
	`add_π_dup_exã¡
(
π_°¨t
, 
π_Àn
);

374 
π_°¨t
 = 0;

375 
π_Àn
 = 0;

378 
XR_E_MULT
:

379 i‡(
π_°¨t
 == 0) {

380 
π_°¨t
 = 
bno
;

381 
π_Àn
 = 1;

382 } i‡(
π_Àn
 =
MAXEXTLEN
) {

386 
	`add_π_dup_exã¡
(
π_°¨t
, 
π_Àn
);

387 
π_°¨t
 = 
bno
;

388 
π_Àn
 = 1;

390 
π_Àn
++;

398 i‡(
π_°¨t
 != 0)

399 
	`add_π_dup_exã¡
(
π_°¨t
, 
π_Àn
);

404 
	`ª£t_bm≠s
(
mp
);

406 
	`do_log
(
	`_
(" - check for inodes claiming duplicate blocks...\n"));

407 
	`£t_¥ogªss_msg
(
PROG_FMT_DUP_BLOCKS
, (
__uöt64_t
Ë
mp
->
m_sb
.
sb_icou¡
);

418 
	`¥o˚ss_ags
(
mp
);

426 
	`¥o˚ss_rm≠_d©a
(
mp
);

428 
	`¥öt_föÆ_Ωt
();

433 i‡(
π_°¨t
 != 0)

434 
	`‰ì_π_dup_exã¡_åì
(
mp
);

440 
	`quŸöo_check
(
mp
);

441 
	`quŸa_sb_check
(
mp
);

442 
	}
}

	@repair/phase5.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

21 
	~"globÆs.h
"

22 
	~"aghódî.h
"

23 
	~"öc‹e.h
"

24 
	~"¥Ÿos.h
"

25 
	~"îr_¥Ÿos.h
"

26 
	~"döode.h
"

27 
	~"π.h
"

28 
	~"vîsi⁄s.h
"

29 
	~"thªads.h
"

30 
	~"¥ogªss.h
"

31 
	~"¶ab.h
"

32 
	~"rm≠.h
"

42 
	sbt_°©_Àvñ
 {

47 
xfs_buf_t
 *
	mbuf_p
;

48 
xfs_buf_t
 *
	m¥ev_buf_p
;

49 
xfs_agblock_t
 
	magbno
;

50 
xfs_agblock_t
 
	m¥ev_agbno
;

54 
	mnum_ªcs_tŸ
;

55 
	mnum_blocks
;

56 
	mnum_ªcs_pb
;

57 
	mmodulo
;

58 } 
	tbt_°©_Àvñ_t
;

60 
	sbt_°©us
 {

61 
	möô
;

62 
	mnum_Àvñs
;

63 
xfs_exéí_t
 
	mnum_tŸ_blocks
;

64 
xfs_exéí_t
 
	mnum_‰ì_blocks
;

66 
xfs_agblock_t
 
	mroŸ
;

71 
xfs_agblock_t
 *
	mbåì_blocks
;

72 
xfs_agblock_t
 *
	m‰ì_båì_blocks
;

76 
bt_°©_Àvñ_t
 
	mÀvñ
[
XFS_BTREE_MAXLEVELS
];

77 
uöt64_t
 
	mow√r
;

78 } 
	tbt_°©us_t
;

83 
	sagi_°©
 {

84 
xfs_agöo_t
 
	mfú°_agöo
;

85 
xfs_agöo_t
 
	mcou¡
;

86 
xfs_agöo_t
 
	m‰ìcou¡
;

89 
__uöt64_t
 *
	gsb_icou¡_ag
;

90 
__uöt64_t
 *
	gsb_i‰ì_ag
;

91 
__uöt64_t
 *
	gsb_fdblocks_ag
;

94 
	$mk_öc‹e_f°ªe
(
xfs_mou¡_t
 *
mp
, 
xfs_agnumbî_t
 
agno
)

96 
ö_exã¡
;

97 
num_exã¡s
;

98 
xfs_agblock_t
 
exã¡_°¨t
;

99 
xfs_exéí_t
 
exã¡_Àn
;

100 
xfs_agblock_t
 
agbno
;

101 
xfs_agblock_t
 
ag_íd
;

102 
uöt
 
‰ì_blocks
;

103 
xfs_exéí_t
 
bÀn
;

104 
b°©e
;

116 
	`ASSERT
(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
);

118 
exã¡_°¨t
 = 
exã¡_Àn
 = 0;

119 
ö_exã¡
 = 0;

120 
num_exã¡s
 = 
‰ì_blocks
 = 0;

122 i‡(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
 - 1)

123 
ag_íd
 = 
mp
->
m_sb
.
sb_agblocks
;

125 
ag_íd
 = 
mp
->
m_sb
.
sb_dblocks
 -

126 (
xfs_rfsblock_t
)
mp
->
m_sb
.
sb_agblocks
 *

127 (
mp
->
m_sb
.
sb_agcou¡
 - 1);

133 
agbno
 = 0;ágbnÿ< 
ag_íd
;ágbnÿ+
bÀn
) {

134 
b°©e
 = 
	`gë_bm≠_ext
(
agno
, 
agbno
, 
ag_íd
, &
bÀn
);

135 i‡(
b°©e
 < 
XR_E_INUSE
) {

136 
‰ì_blocks
 +
bÀn
;

137 i‡(
ö_exã¡
 == 0) {

141 
ö_exã¡
 = 1;

142 
num_exã¡s
++;

143 
exã¡_°¨t
 = 
agbno
;

144 
exã¡_Àn
 = 
bÀn
;

146 
exã¡_Àn
 +
bÀn
;

149 i‡(
ö_exã¡
) {

154 
ö_exã¡
 = 0;

155 #i‡
	`deföed
(
XR_BLD_FREE_TRACE
Ë&& deföed(
XR_BLD_ADD_EXTENT
)

156 
	`Ârötf
(
°dîr
, "addingÉxtent %u [%u %u]\n",

157 
agno
, 
exã¡_°¨t
, 
exã¡_Àn
);

159 
	`add_bno_exã¡
(
agno
, 
exã¡_°¨t
, 
exã¡_Àn
);

160 
	`add_b˙t_exã¡
(
agno
, 
exã¡_°¨t
, 
exã¡_Àn
);

164 i‡(
ö_exã¡
) {

168 #i‡
	`deföed
(
XR_BLD_FREE_TRACE
Ë&& deföed(
XR_BLD_ADD_EXTENT
)

169 
	`Ârötf
(
°dîr
, "addingÉxtent %u [%u %u]\n",

170 
agno
, 
exã¡_°¨t
, 
exã¡_Àn
);

172 
	`add_bno_exã¡
(
agno
, 
exã¡_°¨t
, 
exã¡_Àn
);

173 
	`add_b˙t_exã¡
(
agno
, 
exã¡_°¨t
, 
exã¡_Àn
);

176 (
num_exã¡s
);

177 
	}
}

179 
xfs_agblock_t


180 
	$gë_√xt_blockaddr
(
xfs_agnumbî_t
 
agno
, 
Àvñ
, 
bt_°©us_t
 *
curs
)

182 
	`ASSERT
(
curs
->
‰ì_båì_blocks
 < curs->
båì_blocks
 +

183 
curs
->
num_tŸ_blocks
);

184 
	`ASSERT
(
curs
->
num_‰ì_blocks
 > 0);

186 
curs
->
num_‰ì_blocks
--;

187 (*
curs
->
‰ì_båì_blocks
++);

188 
	}
}

199 
	$£tup_curs‹
(
xfs_mou¡_t
 *
mp
, 
xfs_agnumbî_t
 
agno
, 
bt_°©us_t
 *
curs
)

201 
j
;

202 
u
;

203 
xfs_exéí_t
 
big_exã¡_Àn
;

204 
xfs_agblock_t
 
big_exã¡_°¨t
;

205 
exã¡_åì_node_t
 *
ext_±r
;

206 
exã¡_åì_node_t
 *
bno_ext_±r
;

207 
xfs_exéí_t
 
blocks_Æloˇãd
;

208 
xfs_agblock_t
 *
agb_±r
;

209 
îr‹
;

216 
big_exã¡_Àn
 = 
curs
->
num_tŸ_blocks
;

217 
blocks_Æloˇãd
 = 0;

219 
	`ASSERT
(
big_exã¡_Àn
 > 0);

221 i‡((
curs
->
båì_blocks
 = 
	`mÆloc
((
xfs_agblock_t
)

222 * 
big_exã¡_Àn
)Ë=
NULL
)

223 
	`do_îr‹
(
	`_
("couldÇot set up btree blockárray\n"));

225 
agb_±r
 = 
curs
->
‰ì_båì_blocks
 = curs->
båì_blocks
;

227 
j
 = 0; j < 
curs
->
num_‰ì_blocks
; j++, 
agb_±r
++)

228 *
agb_±r
 = 
NULLAGBLOCK
;

234 
ext_±r
 = 
	`födfú°_b˙t_exã¡
(
agno
);

236 
agb_±r
 = 
curs
->
båì_blocks
;

241 
blocks_Æloˇãd
 < 
big_exã¡_Àn
) {

242 i‡(!
ext_±r
)

243 
	`do_îr‹
(

244 
	`_
("error -ÇotÉnough free space in filesystem\n"));

248 
u
 = 0; u < 
ext_±r
->
ex_blockcou¡
 &&

249 
blocks_Æloˇãd
 < 
big_exã¡_Àn
; 
u
++) {

250 
	`ASSERT
(
agb_±r
 < 
curs
->
båì_blocks


251 + 
curs
->
num_tŸ_blocks
);

252 *
agb_±r
++ = 
ext_±r
->
ex_°¨tblock
 + 
u
;

253 
blocks_Æloˇãd
++;

256 
îr‹
 = 
	`rm≠_add_ag_ªc
(
mp
, 
agno
, 
ext_±r
->
ex_°¨tblock
, 
u
,

257 
curs
->
ow√r
);

258 i‡(
îr‹
)

259 
	`do_îr‹
(
	`_
("couldÇot set up btreeÑmaps: %s\n"),

260 
	`°ªº‹
(-
îr‹
));

267 i‡(
u
 < 
ext_±r
->
ex_blockcou¡
) {

268 
big_exã¡_°¨t
 = 
ext_±r
->
ex_°¨tblock
 + 
u
;

269 
big_exã¡_Àn
 = 
ext_±r
->
ex_blockcou¡
 - 
u
;

271 
	`ASSERT
(
big_exã¡_Àn
 > 0);

273 
bno_ext_±r
 = 
	`föd_bno_exã¡
(
agno
,

274 
ext_±r
->
ex_°¨tblock
);

275 
	`ASSERT
(
bno_ext_±r
 !
NULL
);

276 
	`gë_bno_exã¡
(
agno
, 
bno_ext_±r
);

277 
	`ªÀa£_exã¡_åì_node
(
bno_ext_±r
);

279 
ext_±r
 = 
	`gë_b˙t_exã¡
(
agno
,Éxt_±r->
ex_°¨tblock
,

280 
ext_±r
->
ex_blockcou¡
);

281 
	`ªÀa£_exã¡_åì_node
(
ext_±r
);

282 #ifde‡
XR_BLD_FREE_TRACE


283 
	`Ârötf
(
°dîr
, "releasingÉxtent: %u [%u %u]\n",

284 
agno
, 
ext_±r
->
ex_°¨tblock
,

285 
ext_±r
->
ex_blockcou¡
);

286 
	`Ârötf
(
°dîr
, "blocks_allocated = %d\n",

287 
blocks_Æloˇãd
);

290 
	`add_bno_exã¡
(
agno
, 
big_exã¡_°¨t
, 
big_exã¡_Àn
);

291 
	`add_b˙t_exã¡
(
agno
, 
big_exã¡_°¨t
, 
big_exã¡_Àn
);

299 #ifde‡
XR_BLD_FREE_TRACE


300 
	`Ârötf
(
°dîr
, "releasingÉxtent: %u [%u %u]\n",

301 
agno
, 
ext_±r
->
ex_°¨tblock
,Éxt_±r->
ex_blockcou¡
);

303 
bno_ext_±r
 = 
	`föd_bno_exã¡
(
agno
, 
ext_±r
->
ex_°¨tblock
);

304 
	`ASSERT
(
bno_ext_±r
 !
NULL
);

305 
	`gë_bno_exã¡
(
agno
, 
bno_ext_±r
);

306 
	`ªÀa£_exã¡_åì_node
(
bno_ext_±r
);

308 
ext_±r
 = 
	`gë_b˙t_exã¡
(
agno
,Éxt_±r->
ex_°¨tblock
,

309 
ext_±r
->
ex_blockcou¡
);

310 
	`ASSERT
(
ext_±r
 !
NULL
);

311 
	`ªÀa£_exã¡_åì_node
(
ext_±r
);

313 
ext_±r
 = 
	`födfú°_b˙t_exã¡
(
agno
);

315 #ifde‡
XR_BLD_FREE_TRACE


316 
	`Ârötf
(
°dîr
, "blocks_allocated = %d\n",

317 
blocks_Æloˇãd
);

319 
	}
}

322 
	$wrôe_curs‹
(
bt_°©us_t
 *
curs
)

324 
i
;

326 
i
 = 0; i < 
curs
->
num_Àvñs
; i++) {

327 #i‡
	`deföed
(
XR_BLD_FREE_TRACE
Ë|| deföed(
XR_BLD_INO_TRACE
)

328 
	`Ârötf
(
°dîr
, "wrôög bàblock %u\n", 
curs
->
Àvñ
[
i
].
agbno
);

330 i‡(
curs
->
Àvñ
[
i
].
¥ev_buf_p
 !
NULL
) {

331 
	`ASSERT
(
curs
->
Àvñ
[
i
].
¥ev_agbno
 !
NULLAGBLOCK
);

332 #i‡
	`deföed
(
XR_BLD_FREE_TRACE
Ë|| deföed(
XR_BLD_INO_TRACE
)

333 
	`Ârötf
(
°dîr
, "writing btÖrev block %u\n",

334 
curs
->
Àvñ
[
i
].
¥ev_agbno
);

336 
	`libxfs_wrôebuf
(
curs
->
Àvñ
[
i
].
¥ev_buf_p
, 0);

338 
	`libxfs_wrôebuf
(
curs
->
Àvñ
[
i
].
buf_p
, 0);

340 
	}
}

343 
	$föish_curs‹
(
bt_°©us_t
 *
curs
)

345 
	`ASSERT
(
curs
->
num_‰ì_blocks
 == 0);

346 
	`‰ì
(
curs
->
båì_blocks
);

347 
	}
}

364 
	#XR_ALLOC_BLOCK_MAXRECS
(
mp
, 
Àvñ
) \

365 (
	`libxfs_Ælocbt_maxªcs
((
mp
), (mp)->
m_sb
.
sb_blocksize
, (
Àvñ
Ë=0Ë- 2)

	)

373 
	$ˇlcuœã_‰ì•a˚_curs‹
(
xfs_mou¡_t
 *
mp
, 
xfs_agnumbî_t
 
agno
,

374 
xfs_agblock_t
 *
exã¡s
, 
bt_°©us_t
 *
båì_curs
)

376 
xfs_exéí_t
 
blocks_√eded
;

377 
xfs_exéí_t
 
blocks_Æloˇãd_±
;

378 
xfs_exéí_t
 
blocks_Æloˇãd_tŸÆ
;

379 
xfs_agblock_t
 
num_exã¡s
;

380 
i
;

381 
exã¡s_u£d
;

382 
exåa_blocks
;

383 
bt_°©_Àvñ_t
 *
Õå
;

384 
bt_°©_Àvñ_t
 *
p_Õå
;

385 
exã¡_åì_node_t
 *
ext_±r
;

386 
Àvñ
;

388 
num_exã¡s
 = *
exã¡s
;

389 
exã¡s_u£d
 = 0;

391 
	`ASSERT
(
num_exã¡s
 != 0);

393 
Õå
 = &
båì_curs
->
Àvñ
[0];

394 
båì_curs
->
öô
 = 1;

401 
Õå
->
num_blocks
 = 
	`howm™y
(
num_exã¡s
, 
	`XR_ALLOC_BLOCK_MAXRECS
(
mp
, 0));

402 
Õå
->
num_ªcs_pb
 = 
num_exã¡s
 /Ü±r->
num_blocks
;

403 
Õå
->
modulo
 = 
num_exã¡s
 %Ü±r->
num_blocks
;

404 
Õå
->
num_ªcs_tŸ
 = 
num_exã¡s
;

405 
Àvñ
 = 1;

407 #ifde‡
XR_BLD_FREE_TRACE


408 
	`Ârötf
(
°dîr
, "%†0 %d %d %d %d\n", 
__func__
,

409 
Õå
->
num_blocks
,

410 
Õå
->
num_ªcs_pb
,

411 
Õå
->
modulo
,

412 
Õå
->
num_ªcs_tŸ
);

418 i‡(
Õå
->
num_blocks
 > 1) {

419 ; 
båì_curs
->
Àvñ
[Àvñ - 1].
num_blocks
 > 1

420 && 
Àvñ
 < 
XFS_BTREE_MAXLEVELS
;

421 
Àvñ
++) {

422 
Õå
 = &
båì_curs
->
Àvñ
[level];

423 
p_Õå
 = &
båì_curs
->
Àvñ
[level - 1];

424 
Õå
->
num_blocks
 = 
	`howm™y
(
p_Õå
->num_blocks,

425 
	`XR_ALLOC_BLOCK_MAXRECS
(
mp
, 
Àvñ
));

426 
Õå
->
modulo
 = 
p_Õå
->
num_blocks


427 % 
Õå
->
num_blocks
;

428 
Õå
->
num_ªcs_pb
 = 
p_Õå
->
num_blocks


429 / 
Õå
->
num_blocks
;

430 
Õå
->
num_ªcs_tŸ
 = 
p_Õå
->
num_blocks
;

431 #ifde‡
XR_BLD_FREE_TRACE


432 
	`Ârötf
(
°dîr
, "%†%d %d %d %d %d\n", 
__func__
,

433 
Àvñ
,

434 
Õå
->
num_blocks
,

435 
Õå
->
num_ªcs_pb
,

436 
Õå
->
modulo
,

437 
Õå
->
num_ªcs_tŸ
);

442 
	`ASSERT
(
Õå
->
num_blocks
 == 1);

443 
båì_curs
->
num_Àvñs
 = 
Àvñ
;

459 
blocks_√eded
 = 0, 
i
 = 0; i < 
Àvñ
; i++) {

460 
blocks_√eded
 +
båì_curs
->
Àvñ
[
i
].
num_blocks
;

466 
blocks_Æloˇãd_±
 = 
blocks_√eded
;

467 
blocks_√eded
 *= 2;

468 
blocks_Æloˇãd_tŸÆ
 = 
blocks_√eded
;

474 i‡((
ext_±r
 = 
	`födfú°_b˙t_exã¡
(
agno
)Ë=
NULL
)

475 
	`do_îr‹
(
	`_
("can'tÑebuild fsÅrees --ÇotÉnough free space "

476 "⁄ág %u\n"), 
agno
);

478 
ext_±r
 !
NULL
 && 
blocks_√eded
 > 0) {

479 i‡(
ext_±r
->
ex_blockcou¡
 <
blocks_√eded
) {

480 
blocks_√eded
 -
ext_±r
->
ex_blockcou¡
;

481 
exã¡s_u£d
++;

483 
blocks_√eded
 = 0;

486 
ext_±r
 = 
	`föd√xt_b˙t_exã¡
(
agno
,Éxt_ptr);

488 #ifde‡
XR_BLD_FREE_TRACE


489 i‡(
ext_±r
 !
NULL
) {

490 
	`Ârötf
(
°dîr
, "gotÇextÉxtent [%u %u]\n",

491 
ext_±r
->
ex_°¨tblock
,Éxt_±r->
ex_blockcou¡
);

493 
	`Ârötf
(
°dîr
, "out ofÉxtents\n");

497 i‡(
blocks_√eded
 > 0)

498 
	`do_îr‹
(
	`_
("ag %u -ÇotÉnough free spaceÅo build freespace "

499 "båìs\n"), 
agno
);

501 
	`ASSERT
(
num_exã¡s
 >
exã¡s_u£d
);

503 
num_exã¡s
 -
exã¡s_u£d
;

509 i‡(
	`howm™y
(
num_exã¡s
, 
	`XR_ALLOC_BLOCK_MAXRECS
(
mp
, 0))

510 !
båì_curs
->
Àvñ
[0].
num_blocks
) {

520 i‡(
num_exã¡s
 == 0) {

527 i‡(
båì_curs
->
Àvñ
[0].
num_blocks
 != 1) {

533 
	`do_w¨n
(
	`_
("notÉnough free blocksÜeftÅo "

535 "%u\n"), 
agno
);

537 #ifde‡
XR_BLD_FREE_TRACE


538 
	`Ârötf
(
°dîr
,

540 
agno
, 
blocks_Æloˇãd_±
);

542 
Õå
->
num_blocks
 = 1;

543 
Õå
->
modulo
 = 0;

544 
Õå
->
num_ªcs_pb
 = 0;

545 
Õå
->
num_ªcs_tŸ
 = 0;

547 
båì_curs
->
num_Àvñs
 = 1;

557 
båì_curs
->
num_tŸ_blocks
 = 
blocks_Æloˇãd_±
;

558 
båì_curs
->
num_‰ì_blocks
 = 
blocks_Æloˇãd_±
;

560 *
exã¡s
 = 0;

562 (
blocks_Æloˇãd_tŸÆ
 - 2);

565 
Õå
 = &
båì_curs
->
Àvñ
[0];

566 
Õå
->
num_blocks
 = 
	`howm™y
(
num_exã¡s
,

567 
	`XR_ALLOC_BLOCK_MAXRECS
(
mp
, 0));

568 
Õå
->
num_ªcs_pb
 = 
num_exã¡s
 /Ü±r->
num_blocks
;

569 
Õå
->
modulo
 = 
num_exã¡s
 %Ü±r->
num_blocks
;

570 
Õå
->
num_ªcs_tŸ
 = 
num_exã¡s
;

571 
Àvñ
 = 1;

576 i‡(
Õå
->
num_blocks
 > 1) {

577 
Àvñ
 = 1; 
båì_curs
->Àvñ[Àvñ-1].
num_blocks


578 > 1 && 
Àvñ
 < 
XFS_BTREE_MAXLEVELS
;

579 
Àvñ
++) {

580 
Õå
 = &
båì_curs
->
Àvñ
[level];

581 
p_Õå
 = &
båì_curs
->
Àvñ
[level-1];

582 
Õå
->
num_blocks
 = 
	`howm™y
(
p_Õå
->num_blocks,

583 
	`XR_ALLOC_BLOCK_MAXRECS
(
mp
, 
Àvñ
));

584 
Õå
->
modulo
 = 
p_Õå
->
num_blocks


585 % 
Õå
->
num_blocks
;

586 
Õå
->
num_ªcs_pb
 = 
p_Õå
->
num_blocks


587 / 
Õå
->
num_blocks
;

588 
Õå
->
num_ªcs_tŸ
 = 
p_Õå
->
num_blocks
;

591 
	`ASSERT
(
Õå
->
num_blocks
 == 1);

592 
båì_curs
->
num_Àvñs
 = 
Àvñ
;

597 
blocks_√eded
 = 0, 
i
 = 0; i < 
Àvñ
; i++) {

598 
blocks_√eded
 +
båì_curs
->
Àvñ
[
i
].
num_blocks
;

600 
blocks_√eded
 *= 2;

602 
	`ASSERT
(
blocks_Æloˇãd_tŸÆ
 >
blocks_√eded
);

603 
exåa_blocks
 = 
blocks_Æloˇãd_tŸÆ
 - 
blocks_√eded
;

605 i‡(
exã¡s_u£d
 > 0) {

612 
Õå
 = &
båì_curs
->
Àvñ
[0];

614 
Õå
->
num_ªcs_pb
 = 
num_exã¡s
 /Ü±r->
num_blocks
;

615 
Õå
->
modulo
 = 
num_exã¡s
 %Ü±r->
num_blocks
;

616 
Õå
->
num_ªcs_tŸ
 = 
num_exã¡s
;

619 
exåa_blocks
 = 0;

622 
båì_curs
->
num_tŸ_blocks
 = 
blocks_Æloˇãd_±
;

623 
båì_curs
->
num_‰ì_blocks
 = 
blocks_Æloˇãd_±
;

625 *
exã¡s
 = 
num_exã¡s
;

627 (
exåa_blocks
);

628 
	}
}

631 
	$¥›_‰ì•a˚_curs‹
(
xfs_mou¡_t
 *
mp
, 
xfs_agnumbî_t
 
agno
,

632 
bt_°©us_t
 *
båì_curs
, 
xfs_agblock_t
 
°¨tblock
,

633 
xfs_exéí_t
 
blockcou¡
, 
Àvñ
, 
__uöt32_t
 
magic
)

635 
xfs_båì_block
 *
bt_hdr
;

636 
xfs_Æloc_key_t
 *
bt_key
;

637 
xfs_Æloc_±r_t
 *
bt_±r
;

638 
xfs_agblock_t
 
agbno
;

639 
bt_°©_Àvñ_t
 *
Õå
;

640 
xfs_bäum_t
 
bäum
;

642 i‡(
magic
 =
XFS_ABTB_MAGIC
)

643 
bäum
 = 
XFS_BTNUM_BNO
;

645 
bäum
 = 
XFS_BTNUM_CNT
;

647 
Àvñ
++;

649 i‡(
Àvñ
 >
båì_curs
->
num_Àvñs
)

652 
Õå
 = &
båì_curs
->
Àvñ
[level];

653 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

655 i‡(
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
) == 0) {

660 
	`¥›_‰ì•a˚_curs‹
(
mp
, 
agno
, 
båì_curs
, 
°¨tblock
,

661 
blockcou¡
, 
Àvñ
, 
magic
);

664 i‡(
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
) ==

665 
Õå
->
num_ªcs_pb
 + (Õå->
modulo
 > 0)) {

670 #ifde‡
XR_BLD_FREE_TRACE


671 
	`Ârötf
(
°dîr
, " %d ", 
Õå
->
¥ev_agbno
);

673 i‡(
Õå
->
¥ev_agbno
 !
NULLAGBLOCK
) {

674 
	`ASSERT
(
Õå
->
¥ev_buf_p
 !
NULL
);

675 
	`libxfs_wrôebuf
(
Õå
->
¥ev_buf_p
, 0);

677 
Õå
->
¥ev_agbno
 =Ü±r->
agbno
;;

678 
Õå
->
¥ev_buf_p
 =Ü±r->
buf_p
;

679 
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 
Àvñ
, 
båì_curs
);

681 
bt_hdr
->
bb_u
.
s
.
bb_rightsib
 = 
	`˝u_to_be32
(
agbno
);

683 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

684 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

685 
	`XFS_FSB_TO_BB
(
mp
, 1));

686 
Õå
->
agbno
 =ágbno;

688 i‡(
Õå
->
modulo
)

689 
Õå
->
modulo
--;

694 
Õå
->
buf_p
->
b_›s
 = &
xfs_Ælocbt_buf_›s
;

695 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

696 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

697 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
bäum
, 
Àvñ
,

698 0, 
agno
, 0);

700 
bt_hdr
->
bb_u
.
s
.
bb_À·sib
 = 
	`˝u_to_be32
(
Õå
->
¥ev_agbno
);

705 
	`¥›_‰ì•a˚_curs‹
(
mp
, 
agno
, 
båì_curs
, 
°¨tblock
,

706 
blockcou¡
, 
Àvñ
, 
magic
);

711 
	`be16_add_˝u
(&
bt_hdr
->
bb_numªcs
, 1);

713 
bt_key
 = 
	`XFS_ALLOC_KEY_ADDR
(
mp
, 
bt_hdr
,

714 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
));

715 
bt_±r
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
bt_hdr
,

716 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
),

717 
mp
->
m_Æloc_mxr
[1]);

719 
bt_key
->
¨_°¨tblock
 = 
	`˝u_to_be32
(
°¨tblock
);

720 
bt_key
->
¨_blockcou¡
 = 
	`˝u_to_be32
(
blockcou¡
);

721 *
bt_±r
 = 
	`˝u_to_be32
(
båì_curs
->
Àvñ
[Àvñ-1].
agbno
);

722 
	}
}

729 
xfs_exéí_t


730 
	$buûd_‰ì•a˚_åì
(
xfs_mou¡_t
 *
mp
, 
xfs_agnumbî_t
 
agno
,

731 
bt_°©us_t
 *
båì_curs
, 
__uöt32_t
 
magic
)

733 
xfs_agnumbî_t
 
i
;

734 
xfs_agblock_t
 
j
;

735 
xfs_båì_block
 *
bt_hdr
;

736 
xfs_Æloc_ªc_t
 *
bt_ªc
;

737 
Àvñ
;

738 
xfs_agblock_t
 
agbno
;

739 
exã¡_åì_node_t
 *
ext_±r
;

740 
bt_°©_Àvñ_t
 *
Õå
;

741 
xfs_exéí_t
 
‰ìblks
;

742 
xfs_bäum_t
 
bäum
;

744 #ifde‡
XR_BLD_FREE_TRACE


745 
	`Ârötf
(
°dîr
, "ö buûd_‰ì•a˚_åì,ágnÿ%d\n", 
agno
);

747 
Àvñ
 = 
båì_curs
->
num_Àvñs
;

748 
‰ìblks
 = 0;

750 
	`ASSERT
(
Àvñ
 > 0);

751 i‡(
magic
 =
XFS_ABTB_MAGIC
)

752 
bäum
 = 
XFS_BTNUM_BNO
;

754 
bäum
 = 
XFS_BTNUM_CNT
;

759 
i
 = 0; i < 
Àvñ
; i++) {

760 
Õå
 = &
båì_curs
->
Àvñ
[
i
];

762 
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 
i
, 
båì_curs
);

763 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

764 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

765 
	`XFS_FSB_TO_BB
(
mp
, 1));

767 i‡(
i
 =
båì_curs
->
num_Àvñs
 - 1)

768 
båì_curs
->
roŸ
 = 
agbno
;

770 
Õå
->
agbno
 =ágbno;

771 
Õå
->
¥ev_agbno
 = 
NULLAGBLOCK
;

772 
Õå
->
¥ev_buf_p
 = 
NULL
;

776 
Õå
->
buf_p
->
b_›s
 = &
xfs_Ælocbt_buf_›s
;

777 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

778 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

779 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
bäum
, 
i
, 0, 
agno
, 0);

787 i‡(
magic
 =
XFS_ABTB_MAGIC
)

788 
ext_±r
 = 
	`födfú°_bno_exã¡
(
agno
);

790 
ext_±r
 = 
	`födfú°_b˙t_exã¡
(
agno
);

792 #ifde‡
XR_BLD_FREE_TRACE


793 
	`Ârötf
(
°dîr
, "bft,ágno = %d, start = %u, count = %u\n",

794 
agno
, 
ext_±r
->
ex_°¨tblock
,Éxt_±r->
ex_blockcou¡
);

797 
Õå
 = &
båì_curs
->
Àvñ
[0];

799 
i
 = 0; i < 
båì_curs
->
Àvñ
[0].
num_blocks
; i++) {

803 
Õå
->
buf_p
->
b_›s
 = &
xfs_Ælocbt_buf_›s
;

804 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

805 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

806 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
bäum
, 0, 0, 
agno
, 0);

808 
bt_hdr
->
bb_u
.
s
.
bb_À·sib
 = 
	`˝u_to_be32
(
Õå
->
¥ev_agbno
);

809 
bt_hdr
->
bb_numªcs
 = 
	`˝u_to_be16
(
Õå
->
num_ªcs_pb
 +

810 (
Õå
->
modulo
 > 0));

811 #ifde‡
XR_BLD_FREE_TRACE


812 
	`Ârötf
(
°dîr
, "bft, bb_numrecs = %d\n",

813 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
));

816 i‡(
Õå
->
modulo
 > 0)

817 
Õå
->
modulo
--;

823 i‡(
båì_curs
->
num_Àvñs
 > 1)

824 
	`¥›_‰ì•a˚_curs‹
(
mp
, 
agno
, 
båì_curs
,

825 
ext_±r
->
ex_°¨tblock
,

826 
ext_±r
->
ex_blockcou¡
,

827 0, 
magic
);

829 
bt_ªc
 = (
xfs_Æloc_ªc_t
 *)

830 ((*)
bt_hdr
 + 
	`XFS_ALLOC_BLOCK_LEN
(
mp
));

831 
j
 = 0; j < 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
); j++) {

832 
	`ASSERT
(
ext_±r
 !
NULL
);

833 
bt_ªc
[
j
].
¨_°¨tblock
 = 
	`˝u_to_be32
(

834 
ext_±r
->
ex_°¨tblock
);

835 
bt_ªc
[
j
].
¨_blockcou¡
 = 
	`˝u_to_be32
(

836 
ext_±r
->
ex_blockcou¡
);

837 
‰ìblks
 +
ext_±r
->
ex_blockcou¡
;

838 i‡(
magic
 =
XFS_ABTB_MAGIC
)

839 
ext_±r
 = 
	`föd√xt_bno_exã¡
(ext_ptr);

841 
ext_±r
 = 
	`föd√xt_b˙t_exã¡
(
agno
,Éxt_ptr);

843 #ifde‡
XR_BLD_FREE_TRACE


844 i‡(
ext_±r
 =
NULL
)

845 
	`Ârötf
(
°dîr
, "nullÉxtentÖointer, j = %d\n",

846 
j
);

848 
	`Ârötf
(
°dîr
,

850 
agno
, 
ext_±r
->
ex_°¨tblock
,

851 
ext_±r
->
ex_blockcou¡
);

856 i‡(
ext_±r
 !
NULL
) {

860 i‡(
Õå
->
¥ev_buf_p
 !
NULL
) {

861 #ifde‡
XR_BLD_FREE_TRACE


862 
	`Ârötf
(
°dîr
, " writing fstágbno %u\n",

863 
Õå
->
¥ev_agbno
);

865 
	`ASSERT
(
Õå
->
¥ev_agbno
 !
NULLAGBLOCK
);

866 
	`libxfs_wrôebuf
(
Õå
->
¥ev_buf_p
, 0);

868 
Õå
->
¥ev_buf_p
 =Ü±r->
buf_p
;

869 
Õå
->
¥ev_agbno
 =Ü±r->
agbno
;

870 
Õå
->
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 0, 
båì_curs
);

871 
bt_hdr
->
bb_u
.
s
.
bb_rightsib
 = 
	`˝u_to_be32
(
Õå
->
agbno
);

873 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

874 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
Õå
->
agbno
),

875 
	`XFS_FSB_TO_BB
(
mp
, 1));

879 (
‰ìblks
);

880 
	}
}

885 
	#XR_INOBT_BLOCK_MAXRECS
(
mp
, 
Àvñ
) \

886 
	`libxfs_öobt_maxªcs
((
mp
), (mp)->
m_sb
.
sb_blocksize
, \

887 (
Àvñ
Ë=0)

	)

895 
	$öô_öo_curs‹
(
xfs_mou¡_t
 *
mp
, 
xfs_agnumbî_t
 
agno
, 
bt_°©us_t
 *
båì_curs
,

896 
__uöt64_t
 *
num_öos
, __uöt64_à*
num_‰ì_öos
, 
föobt
)

898 
__uöt64_t
 
nöos
;

899 
__uöt64_t
 
nföos
;

900 
ªc_nföos
;

901 
ªc_nöos
;

902 
öo_åì_node_t
 *
öo_ªc
;

903 
num_ªcs
;

904 
Àvñ
;

905 
bt_°©_Àvñ_t
 *
Õå
;

906 
bt_°©_Àvñ_t
 *
p_Õå
;

907 
xfs_exéí_t
 
blocks_Æloˇãd
;

908 
i
;

910 *
num_öos
 = *
num_‰ì_öos
 = 0;

911 
nöos
 = 
nföos
 = 0;

913 
Õå
 = &
båì_curs
->
Àvñ
[0];

914 
båì_curs
->
öô
 = 1;

915 
båì_curs
->
ow√r
 = 
XFS_RMAP_OWN_INOBT
;

920 
öo_ªc
 = 
	`födfú°_öode_ªc
(
agno
);

921 
num_ªcs
 = 0; 
öo_ªc
 !
NULL
; ino_ª¯
	`√xt_öo_ªc
(ino_rec)) {

922 
ªc_nöos
 = 0;

923 
ªc_nföos
 = 0;

924 
i
 = 0; i < 
XFS_INODES_PER_CHUNK
; i++) {

925 
	`ASSERT
(
	`is_öode_c⁄fúmed
(
öo_ªc
, 
i
));

930 i‡(
	`is_öode_•¨£
(
öo_ªc
, 
i
))

932 i‡(
	`is_öode_‰ì
(
öo_ªc
, 
i
))

933 
ªc_nföos
++;

934 
ªc_nöos
++;

940 i‡(
föobt
 && !
ªc_nföos
)

943 
nföos
 +
ªc_nföos
;

944 
nöos
 +
ªc_nöos
;

945 
num_ªcs
++;

948 i‡(
num_ªcs
 == 0) {

952 
Õå
->
num_blocks
 = 1;

953 
Õå
->
modulo
 = 0;

954 
Õå
->
num_ªcs_pb
 = 0;

955 
Õå
->
num_ªcs_tŸ
 = 0;

957 
båì_curs
->
num_Àvñs
 = 1;

958 
båì_curs
->
num_tŸ_blocks
 = båì_curs->
num_‰ì_blocks
 = 1;

960 
	`£tup_curs‹
(
mp
, 
agno
, 
båì_curs
);

965 
blocks_Æloˇãd
 = 
Õå
->
num_blocks
 = 
	`howm™y
(
num_ªcs
,

966 
	`XR_INOBT_BLOCK_MAXRECS
(
mp
, 0));

968 
Õå
->
modulo
 = 
num_ªcs
 %Ü±r->
num_blocks
;

969 
Õå
->
num_ªcs_pb
 = 
num_ªcs
 /Ü±r->
num_blocks
;

970 
Õå
->
num_ªcs_tŸ
 = 
num_ªcs
;

971 
Àvñ
 = 1;

973 i‡(
Õå
->
num_blocks
 > 1) {

974 ; 
båì_curs
->
Àvñ
[Àvñ-1].
num_blocks
 > 1

975 && 
Àvñ
 < 
XFS_BTREE_MAXLEVELS
;

976 
Àvñ
++) {

977 
Õå
 = &
båì_curs
->
Àvñ
[level];

978 
p_Õå
 = &
båì_curs
->
Àvñ
[level - 1];

979 
Õå
->
num_blocks
 = 
	`howm™y
(
p_Õå
->num_blocks,

980 
	`XR_INOBT_BLOCK_MAXRECS
(
mp
, 
Àvñ
));

981 
Õå
->
modulo
 = 
p_Õå
->
num_blocks
 %Üptr->num_blocks;

982 
Õå
->
num_ªcs_pb
 = 
p_Õå
->
num_blocks


983 / 
Õå
->
num_blocks
;

984 
Õå
->
num_ªcs_tŸ
 = 
p_Õå
->
num_blocks
;

986 
blocks_Æloˇãd
 +
Õå
->
num_blocks
;

989 
	`ASSERT
(
Õå
->
num_blocks
 == 1);

990 
båì_curs
->
num_Àvñs
 = 
Àvñ
;

992 
båì_curs
->
num_tŸ_blocks
 = båì_curs->
num_‰ì_blocks


993 
blocks_Æloˇãd
;

995 
	`£tup_curs‹
(
mp
, 
agno
, 
båì_curs
);

997 *
num_öos
 = 
nöos
;

998 *
num_‰ì_öos
 = 
nföos
;

1001 
	}
}

1004 
	$¥›_öo_curs‹
(
xfs_mou¡_t
 *
mp
, 
xfs_agnumbî_t
 
agno
, 
bt_°©us_t
 *
båì_curs
,

1005 
xfs_agöo_t
 
°¨töo
, 
Àvñ
)

1007 
xfs_båì_block
 *
bt_hdr
;

1008 
xfs_öobt_key_t
 *
bt_key
;

1009 
xfs_öobt_±r_t
 *
bt_±r
;

1010 
xfs_agblock_t
 
agbno
;

1011 
bt_°©_Àvñ_t
 *
Õå
;

1013 
Àvñ
++;

1015 i‡(
Àvñ
 >
båì_curs
->
num_Àvñs
)

1018 
Õå
 = &
båì_curs
->
Àvñ
[level];

1019 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1021 i‡(
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
) == 0) {

1027 
	`¥›_öo_curs‹
(
mp
, 
agno
, 
båì_curs
, 
°¨töo
, 
Àvñ
);

1030 i‡(
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
) ==

1031 
Õå
->
num_ªcs_pb
 + (Õå->
modulo
 > 0)) {

1036 #ifde‡
XR_BLD_INO_TRACE


1037 
	`Ârötf
(
°dîr
, " inÿ¥›ágbnÿ%d ", 
Õå
->
¥ev_agbno
);

1039 i‡(
Õå
->
¥ev_agbno
 !
NULLAGBLOCK
) {

1040 
	`ASSERT
(
Õå
->
¥ev_buf_p
 !
NULL
);

1041 
	`libxfs_wrôebuf
(
Õå
->
¥ev_buf_p
, 0);

1043 
Õå
->
¥ev_agbno
 =Ü±r->
agbno
;;

1044 
Õå
->
¥ev_buf_p
 =Ü±r->
buf_p
;

1045 
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 
Àvñ
, 
båì_curs
);

1047 
bt_hdr
->
bb_u
.
s
.
bb_rightsib
 = 
	`˝u_to_be32
(
agbno
);

1049 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

1050 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

1051 
	`XFS_FSB_TO_BB
(
mp
, 1));

1052 
Õå
->
agbno
 =ágbno;

1054 i‡(
Õå
->
modulo
)

1055 
Õå
->
modulo
--;

1060 
Õå
->
buf_p
->
b_›s
 = &
xfs_öobt_buf_›s
;

1061 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1062 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

1063 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
XFS_BTNUM_INO
,

1064 
Àvñ
, 0, 
agno
, 0);

1066 
bt_hdr
->
bb_u
.
s
.
bb_À·sib
 = 
	`˝u_to_be32
(
Õå
->
¥ev_agbno
);

1071 
	`¥›_öo_curs‹
(
mp
, 
agno
, 
båì_curs
, 
°¨töo
, 
Àvñ
);

1076 
	`be16_add_˝u
(&
bt_hdr
->
bb_numªcs
, 1);

1078 
bt_key
 = 
	`XFS_INOBT_KEY_ADDR
(
mp
, 
bt_hdr
,

1079 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
));

1080 
bt_±r
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
bt_hdr
,

1081 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
),

1082 
mp
->
m_öobt_mxr
[1]);

1084 
bt_key
->
ú_°¨töo
 = 
	`˝u_to_be32
(
°¨töo
);

1085 *
bt_±r
 = 
	`˝u_to_be32
(
båì_curs
->
Àvñ
[Àvñ-1].
agbno
);

1086 
	}
}

1092 
	$buûd_agi
(
xfs_mou¡_t
 *
mp
, 
xfs_agnumbî_t
 
agno
, 
bt_°©us_t
 *
båì_curs
,

1093 
bt_°©us_t
 *
föobt_curs
, 
agi_°©
 *agi_stat)

1095 
xfs_buf_t
 *
agi_buf
;

1096 
xfs_agi_t
 *
agi
;

1097 
i
;

1099 
agi_buf
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

1100 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),

1101 
mp
->
m_sb
.
sb_£˘size
/
BBSIZE
);

1102 
agi_buf
->
b_›s
 = &
xfs_agi_buf_›s
;

1103 
agi
 = 
	`XFS_BUF_TO_AGI
(
agi_buf
);

1104 
	`mem£t
(
agi
, 0, 
mp
->
m_sb
.
sb_£˘size
);

1106 
agi
->
agi_magi˙um
 = 
	`˝u_to_be32
(
XFS_AGI_MAGIC
);

1107 
agi
->
agi_vîsi⁄num
 = 
	`˝u_to_be32
(
XFS_AGI_VERSION
);

1108 
agi
->
agi_£qno
 = 
	`˝u_to_be32
(
agno
);

1109 i‡(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
 - 1)

1110 
agi
->
agi_Àngth
 = 
	`˝u_to_be32
(
mp
->
m_sb
.
sb_agblocks
);

1112 
agi
->
agi_Àngth
 = 
	`˝u_to_be32
(
mp
->
m_sb
.
sb_dblocks
 -

1113 (
xfs_rfsblock_t
Ë
mp
->
m_sb
.
sb_agblocks
 * 
agno
);

1114 
agi
->
agi_cou¡
 = 
	`˝u_to_be32
(
agi_°©
->
cou¡
);

1115 
agi
->
agi_roŸ
 = 
	`˝u_to_be32
(
båì_curs
->
roŸ
);

1116 
agi
->
agi_Àvñ
 = 
	`˝u_to_be32
(
båì_curs
->
num_Àvñs
);

1117 
agi
->
agi_‰ìcou¡
 = 
	`˝u_to_be32
(
agi_°©
->
‰ìcou¡
);

1118 
agi
->
agi_√wöo
 = 
	`˝u_to_be32
(
agi_°©
->
fú°_agöo
);

1119 
agi
->
agi_dúöo
 = 
	`˝u_to_be32
(
NULLAGINO
);

1121 
i
 = 0; i < 
XFS_AGI_UNLINKED_BUCKETS
; i++)

1122 
agi
->
agi_u∆öked
[
i
] = 
	`˝u_to_be32
(
NULLAGINO
);

1124 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1125 
	`∂©f‹m_uuid_c›y
(&
agi
->
agi_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

1127 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
)) {

1128 
agi
->
agi_‰ì_roŸ
 = 
	`˝u_to_be32
(
föobt_curs
->
roŸ
);

1129 
agi
->
agi_‰ì_Àvñ
 = 
	`˝u_to_be32
(
föobt_curs
->
num_Àvñs
);

1132 
	`libxfs_wrôebuf
(
agi_buf
, 0);

1133 
	}
}

1140 
	$buûd_öo_åì
(
xfs_mou¡_t
 *
mp
, 
xfs_agnumbî_t
 
agno
,

1141 
bt_°©us_t
 *
båì_curs
, 
__uöt32_t
 
magic
,

1142 
agi_°©
 *agi_°©, 
föobt
)

1144 
xfs_agnumbî_t
 
i
;

1145 
xfs_agblock_t
 
j
;

1146 
xfs_agblock_t
 
agbno
;

1147 
xfs_agöo_t
 
fú°_agöo
;

1148 
xfs_båì_block
 *
bt_hdr
;

1149 
xfs_öobt_ªc_t
 *
bt_ªc
;

1150 
öo_åì_node_t
 *
öo_ªc
;

1151 
bt_°©_Àvñ_t
 *
Õå
;

1152 
xfs_agöo_t
 
cou¡
 = 0;

1153 
xfs_agöo_t
 
‰ìcou¡
 = 0;

1154 
öo˙t
;

1155 
uöt8_t
 
föo˙t
;

1156 
k
;

1157 
Àvñ
 = 
båì_curs
->
num_Àvñs
;

1158 
•mask
;

1159 
uöt64_t
 
•¨£
;

1160 
uöt16_t
 
hﬁemask
;

1161 
xfs_bäum_t
 
bäum
;

1163 i‡(
magic
 =
XFS_IBT_CRC_MAGIC
 || magi¯=
XFS_IBT_MAGIC
)

1164 
bäum
 = 
XFS_BTNUM_INO
;

1165 i‡(
magic
 =
XFS_FIBT_CRC_MAGIC
 || magi¯=
XFS_FIBT_MAGIC
)

1166 
bäum
 = 
XFS_BTNUM_FINO
;

1168 
	`ASSERT
(0);

1170 
i
 = 0; i < 
Àvñ
; i++) {

1171 
Õå
 = &
båì_curs
->
Àvñ
[
i
];

1173 
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 
i
, 
båì_curs
);

1174 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

1175 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

1176 
	`XFS_FSB_TO_BB
(
mp
, 1));

1178 i‡(
i
 =
båì_curs
->
num_Àvñs
 - 1)

1179 
båì_curs
->
roŸ
 = 
agbno
;

1181 
Õå
->
agbno
 =ágbno;

1182 
Õå
->
¥ev_agbno
 = 
NULLAGBLOCK
;

1183 
Õå
->
¥ev_buf_p
 = 
NULL
;

1188 
Õå
->
buf_p
->
b_›s
 = &
xfs_öobt_buf_›s
;

1189 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1190 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

1191 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
bäum
, 
i
, 0, 
agno
, 0);

1200 i‡(
föobt
)

1201 
öo_ªc
 = 
	`födfú°_‰ì_öode_ªc
(
agno
);

1203 
öo_ªc
 = 
	`födfú°_öode_ªc
(
agno
);

1205 i‡(
öo_ªc
 !
NULL
)

1206 
fú°_agöo
 = 
öo_ªc
->
öo_°¨äum
;

1208 
fú°_agöo
 = 
NULLAGINO
;

1210 
Õå
 = &
båì_curs
->
Àvñ
[0];

1212 
i
 = 0; i < 
Õå
->
num_blocks
; i++) {

1216 
Õå
->
buf_p
->
b_›s
 = &
xfs_öobt_buf_›s
;

1217 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1218 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

1219 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
bäum
, 0, 0, 
agno
, 0);

1221 
bt_hdr
->
bb_u
.
s
.
bb_À·sib
 = 
	`˝u_to_be32
(
Õå
->
¥ev_agbno
);

1222 
bt_hdr
->
bb_numªcs
 = 
	`˝u_to_be16
(
Õå
->
num_ªcs_pb
 +

1223 (
Õå
->
modulo
 > 0));

1225 i‡(
Õå
->
modulo
 > 0)

1226 
Õå
->
modulo
--;

1228 i‡(
Õå
->
num_ªcs_pb
 > 0)

1229 
	`¥›_öo_curs‹
(
mp
, 
agno
, 
båì_curs
,

1230 
öo_ªc
->
öo_°¨äum
, 0);

1232 
bt_ªc
 = (
xfs_öobt_ªc_t
 *)

1233 ((*)
bt_hdr
 + 
	`XFS_INOBT_BLOCK_LEN
(
mp
));

1234 
j
 = 0; j < 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
); j++) {

1235 
	`ASSERT
(
öo_ªc
 !
NULL
);

1236 
bt_ªc
[
j
].
ú_°¨töo
 =

1237 
	`˝u_to_be32
(
öo_ªc
->
öo_°¨äum
);

1238 
bt_ªc
[
j
].
ú_‰ì
 = 
	`˝u_to_be64
(
öo_ªc
->ir_free);

1240 
öo˙t
 = 
föo˙t
 = 0;

1241 
k
 = 0; k < (
xfs_öo‰ì_t
)*
NBBY
; k++) {

1242 
	`ASSERT
(
	`is_öode_c⁄fúmed
(
öo_ªc
, 
k
));

1244 i‡(
	`is_öode_•¨£
(
öo_ªc
, 
k
))

1246 i‡(
	`is_öode_‰ì
(
öo_ªc
, 
k
))

1247 
föo˙t
++;

1248 
öo˙t
++;

1256 
	`ö‹ec_£t_‰ìcou¡
(
mp
, &
bt_ªc
[
j
], 
föo˙t
);

1257 i‡(!
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

1258 
√xåec
;

1264 
hﬁemask
 = 0;

1265 
•mask
 = (1 << 
XFS_INODES_PER_HOLEMASK_BIT
) - 1;

1266 
•¨£
 = 
öo_ªc
->
ú_•¨£
;

1267 
k
 = 0; k < 
XFS_INOBT_HOLEMASK_BITS
; k++) {

1268 i‡(
•¨£
 & 
•mask
) {

1269 
	`ASSERT
((
•¨£
 & 
•mask
) == spmask);

1270 
hﬁemask
 |(1 << 
k
);

1272 
	`ASSERT
((
•¨£
 & 
•mask
) == 0);

1273 
•¨£
 >>
XFS_INODES_PER_HOLEMASK_BIT
;

1276 
bt_ªc
[
j
].
ú_u
.
•
.
ú_cou¡
 = 
öo˙t
;

1277 
bt_ªc
[
j
].
ú_u
.
•
.
ú_hﬁemask
 = 
	`˝u_to_be16
(
hﬁemask
);

1279 
√xåec
:

1280 
‰ìcou¡
 +
föo˙t
;

1281 
cou¡
 +
öo˙t
;

1283 i‡(
föobt
)

1284 
öo_ªc
 = 
	`√xt_‰ì_öo_ªc
(ino_rec);

1286 
öo_ªc
 = 
	`√xt_öo_ªc
(ino_rec);

1289 i‡(
öo_ªc
 !
NULL
) {

1293 i‡(
Õå
->
¥ev_buf_p
 !
NULL
) {

1294 #ifde‡
XR_BLD_INO_TRACE


1295 
	`Ârötf
(
°dîr
, "writing inobtágbno %u\n",

1296 
Õå
->
¥ev_agbno
);

1298 
	`ASSERT
(
Õå
->
¥ev_agbno
 !
NULLAGBLOCK
);

1299 
	`libxfs_wrôebuf
(
Õå
->
¥ev_buf_p
, 0);

1301 
Õå
->
¥ev_buf_p
 =Ü±r->
buf_p
;

1302 
Õå
->
¥ev_agbno
 =Ü±r->
agbno
;

1303 
Õå
->
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 0, 
båì_curs
);

1304 
bt_hdr
->
bb_u
.
s
.
bb_rightsib
 = 
	`˝u_to_be32
(
Õå
->
agbno
);

1306 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

1307 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
Õå
->
agbno
),

1308 
	`XFS_FSB_TO_BB
(
mp
, 1));

1312 i‡(
agi_°©
) {

1313 
agi_°©
->
fú°_agöo
 = first_agino;

1314 
agi_°©
->
cou¡
 = count;

1315 
agi_°©
->
‰ìcou¡
 = freecount;

1317 
	}
}

1327 
	$öô_rm≠bt_curs‹
(

1328 
xfs_mou¡
 *
mp
,

1329 
xfs_agnumbî_t
 
agno
,

1330 
bt_°©us
 *
båì_curs
)

1332 
size_t
 
num_ªcs
;

1333 
Àvñ
;

1334 
bt_°©_Àvñ
 *
Õå
;

1335 
bt_°©_Àvñ
 *
p_Õå
;

1336 
xfs_exéí_t
 
blocks_Æloˇãd
;

1337 
maxªcs
;

1339 i‡(!
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
)) {

1340 
	`mem£t
(
båì_curs
, 0, (
bt_°©us
));

1344 
Õå
 = &
båì_curs
->
Àvñ
[0];

1345 
båì_curs
->
öô
 = 1;

1346 
båì_curs
->
ow√r
 = 
XFS_RMAP_OWN_AG
;

1351 
num_ªcs
 = 
	`rm≠_ªc‹d_cou¡
(
mp
, 
agno
);

1352 i‡(
num_ªcs
 == 0) {

1356 
Õå
->
num_blocks
 = 1;

1357 
Õå
->
modulo
 = 0;

1358 
Õå
->
num_ªcs_pb
 = 0;

1359 
Õå
->
num_ªcs_tŸ
 = 0;

1361 
båì_curs
->
num_Àvñs
 = 1;

1362 
båì_curs
->
num_tŸ_blocks
 = båì_curs->
num_‰ì_blocks
 = 1;

1364 
	`£tup_curs‹
(
mp
, 
agno
, 
båì_curs
);

1373 
maxªcs
 = 
mp
->
m_rm≠_mxr
[0];

1374 i‡(
num_ªcs
 > 
maxªcs
)

1375 
maxªcs
 -= 10;

1376 
blocks_Æloˇãd
 = 
Õå
->
num_blocks
 = 
	`howm™y
(
num_ªcs
, 
maxªcs
);

1378 
Õå
->
modulo
 = 
num_ªcs
 %Ü±r->
num_blocks
;

1379 
Õå
->
num_ªcs_pb
 = 
num_ªcs
 /Ü±r->
num_blocks
;

1380 
Õå
->
num_ªcs_tŸ
 = 
num_ªcs
;

1381 
Àvñ
 = 1;

1383 i‡(
Õå
->
num_blocks
 > 1) {

1384 ; 
båì_curs
->
Àvñ
[Àvñ-1].
num_blocks
 > 1

1385 && 
Àvñ
 < 
XFS_BTREE_MAXLEVELS
;

1386 
Àvñ
++) {

1387 
Õå
 = &
båì_curs
->
Àvñ
[level];

1388 
p_Õå
 = &
båì_curs
->
Àvñ
[level - 1];

1389 
Õå
->
num_blocks
 = 
	`howm™y
(
p_Õå
->num_blocks,

1390 
mp
->
m_rm≠_mxr
[1]);

1391 
Õå
->
modulo
 = 
p_Õå
->
num_blocks
 %Üptr->num_blocks;

1392 
Õå
->
num_ªcs_pb
 = 
p_Õå
->
num_blocks


1393 / 
Õå
->
num_blocks
;

1394 
Õå
->
num_ªcs_tŸ
 = 
p_Õå
->
num_blocks
;

1396 
blocks_Æloˇãd
 +
Õå
->
num_blocks
;

1399 
	`ASSERT
(
Õå
->
num_blocks
 == 1);

1400 
båì_curs
->
num_Àvñs
 = 
Àvñ
;

1402 
båì_curs
->
num_tŸ_blocks
 = båì_curs->
num_‰ì_blocks


1403 
blocks_Æloˇãd
;

1405 
	`£tup_curs‹
(
mp
, 
agno
, 
båì_curs
);

1406 
	}
}

1409 
	$¥›_rm≠_curs‹
(

1410 
xfs_mou¡
 *
mp
,

1411 
xfs_agnumbî_t
 
agno
,

1412 
bt_°©us
 *
båì_curs
,

1413 
xfs_rm≠_úec
 *
rm_ªc
,

1414 
Àvñ
)

1416 
xfs_båì_block
 *
bt_hdr
;

1417 
xfs_rm≠_key
 *
bt_key
;

1418 
xfs_rm≠_±r_t
 *
bt_±r
;

1419 
xfs_agblock_t
 
agbno
;

1420 
bt_°©_Àvñ
 *
Õå
;

1422 
Àvñ
++;

1424 i‡(
Àvñ
 >
båì_curs
->
num_Àvñs
)

1427 
Õå
 = &
båì_curs
->
Àvñ
[level];

1428 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1430 i‡(
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
) == 0) {

1436 
	`¥›_rm≠_curs‹
(
mp
, 
agno
, 
båì_curs
, 
rm_ªc
, 
Àvñ
);

1439 i‡(
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
) ==

1440 
Õå
->
num_ªcs_pb
 + (Õå->
modulo
 > 0)) {

1445 #ifde‡
XR_BLD_INO_TRACE


1446 
	`Ârötf
(
°dîr
, "Ñm≠Ör›ágbnÿ%d ", 
Õå
->
¥ev_agbno
);

1448 i‡(
Õå
->
¥ev_agbno
 !
NULLAGBLOCK
) {

1449 
	`ASSERT
(
Õå
->
¥ev_buf_p
 !
NULL
);

1450 
	`libxfs_wrôebuf
(
Õå
->
¥ev_buf_p
, 0);

1452 
Õå
->
¥ev_agbno
 =Ü±r->
agbno
;

1453 
Õå
->
¥ev_buf_p
 =Ü±r->
buf_p
;

1454 
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 
Àvñ
, 
båì_curs
);

1456 
bt_hdr
->
bb_u
.
s
.
bb_rightsib
 = 
	`˝u_to_be32
(
agbno
);

1458 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

1459 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

1460 
	`XFS_FSB_TO_BB
(
mp
, 1));

1461 
Õå
->
agbno
 =ágbno;

1463 i‡(
Õå
->
modulo
)

1464 
Õå
->
modulo
--;

1469 
Õå
->
buf_p
->
b_›s
 = &
xfs_rm≠bt_buf_›s
;

1470 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1471 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

1472 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
XFS_BTNUM_RMAP
,

1473 
Àvñ
, 0, 
agno
, 0);

1475 
bt_hdr
->
bb_u
.
s
.
bb_À·sib
 = 
	`˝u_to_be32
(
Õå
->
¥ev_agbno
);

1480 
	`¥›_rm≠_curs‹
(
mp
, 
agno
, 
båì_curs
, 
rm_ªc
, 
Àvñ
);

1485 
	`be16_add_˝u
(&
bt_hdr
->
bb_numªcs
, 1);

1487 
bt_key
 = 
	`XFS_RMAP_KEY_ADDR
(
bt_hdr
,

1488 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
));

1489 
bt_±r
 = 
	`XFS_RMAP_PTR_ADDR
(
bt_hdr
,

1490 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
),

1491 
mp
->
m_rm≠_mxr
[1]);

1493 
bt_key
->
rm_°¨tblock
 = 
	`˝u_to_be32
(
rm_ªc
->rm_startblock);

1494 
bt_key
->
rm_ow√r
 = 
	`˝u_to_be64
(
rm_ªc
->rm_owner);

1495 
bt_key
->
rm_off£t
 = 
	`˝u_to_be64
(
rm_ªc
->rm_offset);

1497 *
bt_±r
 = 
	`˝u_to_be32
(
båì_curs
->
Àvñ
[Àvñ-1].
agbno
);

1498 
	}
}

1501 
	$¥›_rm≠_highkey
(

1502 
xfs_mou¡
 *
mp
,

1503 
xfs_agnumbî_t
 
agno
,

1504 
bt_°©us
 *
båì_curs
,

1505 
xfs_rm≠_úec
 *
rm_highkey
)

1507 
xfs_båì_block
 *
bt_hdr
;

1508 
xfs_rm≠_key
 *
bt_key
;

1509 
bt_°©_Àvñ
 *
Õå
;

1510 
xfs_rm≠_úec
 
key
 = {0};

1511 
xfs_rm≠_úec
 
high_key
;

1512 
Àvñ
;

1513 
i
;

1514 
numªcs
;

1516 
high_key
 = *
rm_highkey
;

1517 
Àvñ
 = 1;Üevñ < 
båì_curs
->
num_Àvñs
;Üevel++) {

1518 
Õå
 = &
båì_curs
->
Àvñ
[level];

1519 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1520 
numªcs
 = 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
);

1521 
bt_key
 = 
	`XFS_RMAP_HIGH_KEY_ADDR
(
bt_hdr
, 
numªcs
);

1523 
bt_key
->
rm_°¨tblock
 = 
	`˝u_to_be32
(
high_key
.rm_startblock);

1524 
bt_key
->
rm_ow√r
 = 
	`˝u_to_be64
(
high_key
.rm_owner);

1525 
bt_key
->
rm_off£t
 = 
	`˝u_to_be64
(

1526 
	`libxfs_rm≠_úec_off£t_∑ck
(&
high_key
));

1528 
i
 = 1; i < 
numªcs
 - 1; i++) {

1529 
bt_key
 = 
	`XFS_RMAP_HIGH_KEY_ADDR
(
bt_hdr
, 
i
);

1530 
key
.
rm_°¨tblock
 = 
	`be32_to_˝u
(
bt_key
->rm_startblock);

1531 
key
.
rm_ow√r
 = 
	`be64_to_˝u
(
bt_key
->rm_owner);

1532 
key
.
rm_off£t
 = 
	`be64_to_˝u
(
bt_key
->rm_offset);

1533 i‡(
	`rm≠_diffkeys
(&
key
, &
high_key
) > 0)

1534 
high_key
 = 
key
;

1537 
	}
}

1543 
	$buûd_rm≠_åì
(

1544 
xfs_mou¡
 *
mp
,

1545 
xfs_agnumbî_t
 
agno
,

1546 
bt_°©us
 *
båì_curs
)

1548 
xfs_agnumbî_t
 
i
;

1549 
xfs_agblock_t
 
j
;

1550 
xfs_agblock_t
 
agbno
;

1551 
xfs_båì_block
 *
bt_hdr
;

1552 
xfs_rm≠_úec
 *
rm_ªc
;

1553 
xfs_¶ab_curs‹
 *
rm≠_cur
;

1554 
xfs_rm≠_ªc
 *
bt_ªc
;

1555 
xfs_rm≠_úec
 
highe°_key
 = {0};

1556 
xfs_rm≠_úec
 
hi_key
 = {0};

1557 
bt_°©_Àvñ
 *
Õå
;

1558 
numªcs
;

1559 
Àvñ
 = 
båì_curs
->
num_Àvñs
;

1560 
îr‹
;

1562 
highe°_key
.
rm_Êags
 = 0;

1563 
i
 = 0; i < 
Àvñ
; i++) {

1564 
Õå
 = &
båì_curs
->
Àvñ
[
i
];

1566 
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 
i
, 
båì_curs
);

1567 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

1568 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

1569 
	`XFS_FSB_TO_BB
(
mp
, 1));

1571 i‡(
i
 =
båì_curs
->
num_Àvñs
 - 1)

1572 
båì_curs
->
roŸ
 = 
agbno
;

1574 
Õå
->
agbno
 =ágbno;

1575 
Õå
->
¥ev_agbno
 = 
NULLAGBLOCK
;

1576 
Õå
->
¥ev_buf_p
 = 
NULL
;

1581 
Õå
->
buf_p
->
b_›s
 = &
xfs_rm≠bt_buf_›s
;

1582 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1583 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

1584 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
XFS_BTNUM_RMAP
,

1585 
i
, 0, 
agno
, 0);

1594 
îr‹
 = 
	`rm≠_öô_curs‹
(
agno
, &
rm≠_cur
);

1595 i‡(
îr‹
)

1596 
	`do_îr‹
(

1597 
	`_
("Insufficient memoryÅo constructÑeverse-map cursor."));

1598 
rm_ªc
 = 
	`p›_¶ab_curs‹
(
rm≠_cur
);

1599 
Õå
 = &
båì_curs
->
Àvñ
[0];

1601 
i
 = 0; i < 
Õå
->
num_blocks
; i++) {

1602 
numªcs
 = 
Õå
->
num_ªcs_pb
 + (Õå->
modulo
 > 0);

1603 
	`ASSERT
(
rm_ªc
 !
NULL
 || 
numªcs
 == 0);

1608 
Õå
->
buf_p
->
b_›s
 = &
xfs_rm≠bt_buf_›s
;

1609 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1610 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

1611 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
XFS_BTNUM_RMAP
,

1612 0, 0, 
agno
, 0);

1614 
bt_hdr
->
bb_u
.
s
.
bb_À·sib
 = 
	`˝u_to_be32
(
Õå
->
¥ev_agbno
);

1615 
bt_hdr
->
bb_numªcs
 = 
	`˝u_to_be16
(
numªcs
);

1617 i‡(
Õå
->
modulo
 > 0)

1618 
Õå
->
modulo
--;

1620 i‡(
Õå
->
num_ªcs_pb
 > 0) {

1621 
	`ASSERT
(
rm_ªc
 !
NULL
);

1622 
	`¥›_rm≠_curs‹
(
mp
, 
agno
, 
båì_curs
, 
rm_ªc
, 0);

1625 
bt_ªc
 = (
xfs_rm≠_ªc
 *)

1626 ((*)
bt_hdr
 + 
XFS_RMAP_BLOCK_LEN
);

1627 
highe°_key
.
rm_°¨tblock
 = 0;

1628 
highe°_key
.
rm_ow√r
 = 0;

1629 
highe°_key
.
rm_off£t
 = 0;

1630 
j
 = 0; j < 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
); j++) {

1631 
	`ASSERT
(
rm_ªc
 !
NULL
);

1632 
bt_ªc
[
j
].
rm_°¨tblock
 =

1633 
	`˝u_to_be32
(
rm_ªc
->
rm_°¨tblock
);

1634 
bt_ªc
[
j
].
rm_blockcou¡
 =

1635 
	`˝u_to_be32
(
rm_ªc
->
rm_blockcou¡
);

1636 
bt_ªc
[
j
].
rm_ow√r
 = 
	`˝u_to_be64
(
rm_ªc
->rm_owner);

1637 
bt_ªc
[
j
].
rm_off£t
 = 
	`˝u_to_be64
(

1638 
	`libxfs_rm≠_úec_off£t_∑ck
(
rm_ªc
));

1639 
	`rm≠_high_key_‰om_ªc
(
rm_ªc
, &
hi_key
);

1640 i‡(
	`rm≠_diffkeys
(&
hi_key
, &
highe°_key
) > 0)

1641 
highe°_key
 = 
hi_key
;

1643 
rm_ªc
 = 
	`p›_¶ab_curs‹
(
rm≠_cur
);

1647 
	`¥›_rm≠_highkey
(
mp
, 
agno
, 
båì_curs
, &
highe°_key
);

1649 i‡(
rm_ªc
 !
NULL
) {

1653 i‡(
Õå
->
¥ev_buf_p
 !
NULL
) {

1654 #ifde‡
XR_BLD_RL_TRACE


1655 
	`Ârötf
(
°dîr
, "writingÑmapbtágbno %u\n",

1656 
Õå
->
¥ev_agbno
);

1658 
	`ASSERT
(
Õå
->
¥ev_agbno
 !
NULLAGBLOCK
);

1659 
	`libxfs_wrôebuf
(
Õå
->
¥ev_buf_p
, 0);

1661 
Õå
->
¥ev_buf_p
 =Ü±r->
buf_p
;

1662 
Õå
->
¥ev_agbno
 =Ü±r->
agbno
;

1663 
Õå
->
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 0, 
båì_curs
);

1664 
bt_hdr
->
bb_u
.
s
.
bb_rightsib
 = 
	`˝u_to_be32
(
Õå
->
agbno
);

1666 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

1667 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
Õå
->
agbno
),

1668 
	`XFS_FSB_TO_BB
(
mp
, 1));

1671 
	`‰ì_¶ab_curs‹
(&
rm≠_cur
);

1672 
	}
}

1682 
	$öô_ªfc_curs‹
(

1683 
xfs_mou¡
 *
mp
,

1684 
xfs_agnumbî_t
 
agno
,

1685 
bt_°©us
 *
båì_curs
)

1687 
size_t
 
num_ªcs
;

1688 
Àvñ
;

1689 
bt_°©_Àvñ
 *
Õå
;

1690 
bt_°©_Àvñ
 *
p_Õå
;

1691 
xfs_exéí_t
 
blocks_Æloˇãd
;

1693 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
)) {

1694 
	`mem£t
(
båì_curs
, 0, (
bt_°©us
));

1698 
Õå
 = &
båì_curs
->
Àvñ
[0];

1699 
båì_curs
->
öô
 = 1;

1700 
båì_curs
->
ow√r
 = 
XFS_RMAP_OWN_REFC
;

1705 
num_ªcs
 = 
	`ªfcou¡_ªc‹d_cou¡
(
mp
, 
agno
);

1706 i‡(
num_ªcs
 == 0) {

1710 
Õå
->
num_blocks
 = 1;

1711 
Õå
->
modulo
 = 0;

1712 
Õå
->
num_ªcs_pb
 = 0;

1713 
Õå
->
num_ªcs_tŸ
 = 0;

1715 
båì_curs
->
num_Àvñs
 = 1;

1716 
båì_curs
->
num_tŸ_blocks
 = båì_curs->
num_‰ì_blocks
 = 1;

1718 
	`£tup_curs‹
(
mp
, 
agno
, 
båì_curs
);

1723 
blocks_Æloˇãd
 = 
Õå
->
num_blocks
 = 
	`howm™y
(
num_ªcs
,

1724 
mp
->
m_ªfc_mxr
[0]);

1726 
Õå
->
modulo
 = 
num_ªcs
 %Ü±r->
num_blocks
;

1727 
Õå
->
num_ªcs_pb
 = 
num_ªcs
 /Ü±r->
num_blocks
;

1728 
Õå
->
num_ªcs_tŸ
 = 
num_ªcs
;

1729 
Àvñ
 = 1;

1731 i‡(
Õå
->
num_blocks
 > 1) {

1732 ; 
båì_curs
->
Àvñ
[Àvñ-1].
num_blocks
 > 1

1733 && 
Àvñ
 < 
XFS_BTREE_MAXLEVELS
;

1734 
Àvñ
++) {

1735 
Õå
 = &
båì_curs
->
Àvñ
[level];

1736 
p_Õå
 = &
båì_curs
->
Àvñ
[level - 1];

1737 
Õå
->
num_blocks
 = 
	`howm™y
(
p_Õå
->num_blocks,

1738 
mp
->
m_ªfc_mxr
[1]);

1739 
Õå
->
modulo
 = 
p_Õå
->
num_blocks
 %Üptr->num_blocks;

1740 
Õå
->
num_ªcs_pb
 = 
p_Õå
->
num_blocks


1741 / 
Õå
->
num_blocks
;

1742 
Õå
->
num_ªcs_tŸ
 = 
p_Õå
->
num_blocks
;

1744 
blocks_Æloˇãd
 +
Õå
->
num_blocks
;

1747 
	`ASSERT
(
Õå
->
num_blocks
 == 1);

1748 
båì_curs
->
num_Àvñs
 = 
Àvñ
;

1750 
båì_curs
->
num_tŸ_blocks
 = båì_curs->
num_‰ì_blocks


1751 
blocks_Æloˇãd
;

1753 
	`£tup_curs‹
(
mp
, 
agno
, 
båì_curs
);

1754 
	}
}

1757 
	$¥›_ªfc_curs‹
(

1758 
xfs_mou¡
 *
mp
,

1759 
xfs_agnumbî_t
 
agno
,

1760 
bt_°©us
 *
båì_curs
,

1761 
xfs_agblock_t
 
°¨tbno
,

1762 
Àvñ
)

1764 
xfs_båì_block
 *
bt_hdr
;

1765 
xfs_ªfcou¡_key
 *
bt_key
;

1766 
xfs_ªfcou¡_±r_t
 *
bt_±r
;

1767 
xfs_agblock_t
 
agbno
;

1768 
bt_°©_Àvñ
 *
Õå
;

1770 
Àvñ
++;

1772 i‡(
Àvñ
 >
båì_curs
->
num_Àvñs
)

1775 
Õå
 = &
båì_curs
->
Àvñ
[level];

1776 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1778 i‡(
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
) == 0) {

1784 
	`¥›_ªfc_curs‹
(
mp
, 
agno
, 
båì_curs
, 
°¨tbno
, 
Àvñ
);

1787 i‡(
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
) ==

1788 
Õå
->
num_ªcs_pb
 + (Õå->
modulo
 > 0)) {

1793 #ifde‡
XR_BLD_INO_TRACE


1794 
	`Ârötf
(
°dîr
, " inÿ¥›ágbnÿ%d ", 
Õå
->
¥ev_agbno
);

1796 i‡(
Õå
->
¥ev_agbno
 !
NULLAGBLOCK
) {

1797 
	`ASSERT
(
Õå
->
¥ev_buf_p
 !
NULL
);

1798 
	`libxfs_wrôebuf
(
Õå
->
¥ev_buf_p
, 0);

1800 
Õå
->
¥ev_agbno
 =Ü±r->
agbno
;

1801 
Õå
->
¥ev_buf_p
 =Ü±r->
buf_p
;

1802 
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 
Àvñ
, 
båì_curs
);

1804 
bt_hdr
->
bb_u
.
s
.
bb_rightsib
 = 
	`˝u_to_be32
(
agbno
);

1806 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

1807 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

1808 
	`XFS_FSB_TO_BB
(
mp
, 1));

1809 
Õå
->
agbno
 =ágbno;

1811 i‡(
Õå
->
modulo
)

1812 
Õå
->
modulo
--;

1817 
Õå
->
buf_p
->
b_›s
 = &
xfs_ªfcou¡bt_buf_›s
;

1818 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1819 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

1820 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
XFS_BTNUM_REFC
,

1821 
Àvñ
, 0, 
agno
, 0);

1823 
bt_hdr
->
bb_u
.
s
.
bb_À·sib
 = 
	`˝u_to_be32
(
Õå
->
¥ev_agbno
);

1828 
	`¥›_ªfc_curs‹
(
mp
, 
agno
, 
båì_curs
, 
°¨tbno
, 
Àvñ
);

1833 
	`be16_add_˝u
(&
bt_hdr
->
bb_numªcs
, 1);

1835 
bt_key
 = 
	`XFS_REFCOUNT_KEY_ADDR
(
bt_hdr
,

1836 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
));

1837 
bt_±r
 = 
	`XFS_REFCOUNT_PTR_ADDR
(
bt_hdr
,

1838 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
),

1839 
mp
->
m_ªfc_mxr
[1]);

1841 
bt_key
->
rc_°¨tblock
 = 
	`˝u_to_be32
(
°¨tbno
);

1842 *
bt_±r
 = 
	`˝u_to_be32
(
båì_curs
->
Àvñ
[Àvñ-1].
agbno
);

1843 
	}
}

1849 
	$buûd_ªfcou¡_åì
(

1850 
xfs_mou¡
 *
mp
,

1851 
xfs_agnumbî_t
 
agno
,

1852 
bt_°©us
 *
båì_curs
)

1854 
xfs_agnumbî_t
 
i
;

1855 
xfs_agblock_t
 
j
;

1856 
xfs_agblock_t
 
agbno
;

1857 
xfs_båì_block
 *
bt_hdr
;

1858 
xfs_ªfcou¡_úec
 *
ªfc_ªc
;

1859 
xfs_¶ab_curs‹
 *
ªfc_cur
;

1860 
xfs_ªfcou¡_ªc
 *
bt_ªc
;

1861 
bt_°©_Àvñ
 *
Õå
;

1862 
numªcs
;

1863 
Àvñ
 = 
båì_curs
->
num_Àvñs
;

1864 
îr‹
;

1866 
i
 = 0; i < 
Àvñ
; i++) {

1867 
Õå
 = &
båì_curs
->
Àvñ
[
i
];

1869 
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 
i
, 
båì_curs
);

1870 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

1871 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
agbno
),

1872 
	`XFS_FSB_TO_BB
(
mp
, 1));

1874 i‡(
i
 =
båì_curs
->
num_Àvñs
 - 1)

1875 
båì_curs
->
roŸ
 = 
agbno
;

1877 
Õå
->
agbno
 =ágbno;

1878 
Õå
->
¥ev_agbno
 = 
NULLAGBLOCK
;

1879 
Õå
->
¥ev_buf_p
 = 
NULL
;

1884 
Õå
->
buf_p
->
b_›s
 = &
xfs_ªfcou¡bt_buf_›s
;

1885 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1886 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

1887 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
XFS_BTNUM_REFC
,

1888 
i
, 0, 
agno
, 0);

1897 
îr‹
 = 
	`öô_ªfcou¡_curs‹
(
agno
, &
ªfc_cur
);

1898 i‡(
îr‹
)

1899 
	`do_îr‹
(

1900 
	`_
("Insufficient memoryÅo constructÑefcount cursor."));

1901 
ªfc_ªc
 = 
	`p›_¶ab_curs‹
(
ªfc_cur
);

1902 
Õå
 = &
båì_curs
->
Àvñ
[0];

1904 
i
 = 0; i < 
Õå
->
num_blocks
; i++) {

1905 
numªcs
 = 
Õå
->
num_ªcs_pb
 + (Õå->
modulo
 > 0);

1906 
	`ASSERT
(
ªfc_ªc
 !
NULL
 || 
numªcs
 == 0);

1911 
Õå
->
buf_p
->
b_›s
 = &
xfs_ªfcou¡bt_buf_›s
;

1912 
bt_hdr
 = 
	`XFS_BUF_TO_BLOCK
(
Õå
->
buf_p
);

1913 
	`mem£t
(
bt_hdr
, 0, 
mp
->
m_sb
.
sb_blocksize
);

1914 
	`libxfs_båì_öô_block
(
mp
, 
Õå
->
buf_p
, 
XFS_BTNUM_REFC
,

1915 0, 0, 
agno
, 0);

1917 
bt_hdr
->
bb_u
.
s
.
bb_À·sib
 = 
	`˝u_to_be32
(
Õå
->
¥ev_agbno
);

1918 
bt_hdr
->
bb_numªcs
 = 
	`˝u_to_be16
(
numªcs
);

1920 i‡(
Õå
->
modulo
 > 0)

1921 
Õå
->
modulo
--;

1923 i‡(
Õå
->
num_ªcs_pb
 > 0)

1924 
	`¥›_ªfc_curs‹
(
mp
, 
agno
, 
båì_curs
,

1925 
ªfc_ªc
->
rc_°¨tblock
, 0);

1927 
bt_ªc
 = (
xfs_ªfcou¡_ªc
 *)

1928 ((*)
bt_hdr
 + 
XFS_REFCOUNT_BLOCK_LEN
);

1929 
j
 = 0; j < 
	`be16_to_˝u
(
bt_hdr
->
bb_numªcs
); j++) {

1930 
	`ASSERT
(
ªfc_ªc
 !
NULL
);

1931 
bt_ªc
[
j
].
rc_°¨tblock
 =

1932 
	`˝u_to_be32
(
ªfc_ªc
->
rc_°¨tblock
);

1933 
bt_ªc
[
j
].
rc_blockcou¡
 =

1934 
	`˝u_to_be32
(
ªfc_ªc
->
rc_blockcou¡
);

1935 
bt_ªc
[
j
].
rc_ªfcou¡
 = 
	`˝u_to_be32
(
ªfc_ªc
->rc_refcount);

1937 
ªfc_ªc
 = 
	`p›_¶ab_curs‹
(
ªfc_cur
);

1940 i‡(
ªfc_ªc
 !
NULL
) {

1944 i‡(
Õå
->
¥ev_buf_p
 !
NULL
) {

1945 #ifde‡
XR_BLD_RL_TRACE


1946 
	`Ârötf
(
°dîr
, "writingÑefcntbtágbno %u\n",

1947 
Õå
->
¥ev_agbno
);

1949 
	`ASSERT
(
Õå
->
¥ev_agbno
 !
NULLAGBLOCK
);

1950 
	`libxfs_wrôebuf
(
Õå
->
¥ev_buf_p
, 0);

1952 
Õå
->
¥ev_buf_p
 =Ü±r->
buf_p
;

1953 
Õå
->
¥ev_agbno
 =Ü±r->
agbno
;

1954 
Õå
->
agbno
 = 
	`gë_√xt_blockaddr
(
agno
, 0, 
båì_curs
);

1955 
bt_hdr
->
bb_u
.
s
.
bb_rightsib
 = 
	`˝u_to_be32
(
Õå
->
agbno
);

1957 
Õå
->
buf_p
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

1958 
	`XFS_AGB_TO_DADDR
(
mp
, 
agno
, 
Õå
->
agbno
),

1959 
	`XFS_FSB_TO_BB
(
mp
, 1));

1962 
	`‰ì_¶ab_curs‹
(&
ªfc_cur
);

1963 
	}
}

1972 
	$buûd_agf_agÊ
(

1973 
xfs_mou¡
 *
mp
,

1974 
xfs_agnumbî_t
 
agno
,

1975 
bt_°©us
 *
bno_bt
,

1976 
bt_°©us
 *
b˙t_bt
,

1977 
xfs_exéí_t
 
‰ìblks
,

1978 
lo°blocks
,

1979 
bt_°©us
 *
rm≠_bt
,

1980 
bt_°©us
 *
ªf˙t_bt
,

1981 
xfs_¶ab
 *
lo°_fsb
)

1983 
exã¡_åì_node
 *
ext_±r
;

1984 
xfs_buf
 *
agf_buf
, *
agÊ_buf
;

1985 
i
;

1986 
xfs_agÊ
 *
agÊ
;

1987 
xfs_agf
 *
agf
;

1988 
xfs_fsblock_t
 
fsb
;

1989 
__be32
 *
‰ìli°
;

1990 
îr‹
;

1992 
agf_buf
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

1993 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

1994 
mp
->
m_sb
.
sb_£˘size
/
BBSIZE
);

1995 
agf_buf
->
b_›s
 = &
xfs_agf_buf_›s
;

1996 
agf
 = 
	`XFS_BUF_TO_AGF
(
agf_buf
);

1997 
	`mem£t
(
agf
, 0, 
mp
->
m_sb
.
sb_£˘size
);

1999 #ifde‡
XR_BLD_FREE_TRACE


2000 
	`Ârötf
(
°dîr
, "agf = 0x%p,ágf_buf->b_addr = 0x%p\n",

2001 
agf
, 
agf_buf
->
b_addr
);

2007 
agf
->
agf_magi˙um
 = 
	`˝u_to_be32
(
XFS_AGF_MAGIC
);

2008 
agf
->
agf_vîsi⁄num
 = 
	`˝u_to_be32
(
XFS_AGF_VERSION
);

2009 
agf
->
agf_£qno
 = 
	`˝u_to_be32
(
agno
);

2011 i‡(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
 - 1)

2012 
agf
->
agf_Àngth
 = 
	`˝u_to_be32
(
mp
->
m_sb
.
sb_agblocks
);

2014 
agf
->
agf_Àngth
 = 
	`˝u_to_be32
(
mp
->
m_sb
.
sb_dblocks
 -

2015 (
xfs_rfsblock_t
Ë
mp
->
m_sb
.
sb_agblocks
 * 
agno
);

2017 
agf
->
agf_roŸs
[
XFS_BTNUM_BNO
] = 
	`˝u_to_be32
(
bno_bt
->
roŸ
);

2018 
agf
->
agf_Àvñs
[
XFS_BTNUM_BNO
] = 
	`˝u_to_be32
(
bno_bt
->
num_Àvñs
);

2019 
agf
->
agf_roŸs
[
XFS_BTNUM_CNT
] = 
	`˝u_to_be32
(
b˙t_bt
->
roŸ
);

2020 
agf
->
agf_Àvñs
[
XFS_BTNUM_CNT
] = 
	`˝u_to_be32
(
b˙t_bt
->
num_Àvñs
);

2021 
agf
->
agf_roŸs
[
XFS_BTNUM_RMAP
] = 
	`˝u_to_be32
(
rm≠_bt
->
roŸ
);

2022 
agf
->
agf_Àvñs
[
XFS_BTNUM_RMAP
] = 
	`˝u_to_be32
(
rm≠_bt
->
num_Àvñs
);

2023 
agf
->
agf_‰ìblks
 = 
	`˝u_to_be32
(
‰ìblks
);

2024 
agf
->
agf_rm≠_blocks
 = 
	`˝u_to_be32
(
rm≠_bt
->
num_tŸ_blocks
 -

2025 
rm≠_bt
->
num_‰ì_blocks
);

2026 
agf
->
agf_ªfcou¡_roŸ
 = 
	`˝u_to_be32
(
ªf˙t_bt
->
roŸ
);

2027 
agf
->
agf_ªfcou¡_Àvñ
 = 
	`˝u_to_be32
(
ªf˙t_bt
->
num_Àvñs
);

2028 
agf
->
agf_ªfcou¡_blocks
 = 
	`˝u_to_be32
(
ªf˙t_bt
->
num_tŸ_blocks
 -

2029 
ªf˙t_bt
->
num_‰ì_blocks
);

2034 i‡(
	`xfs_sb_vîsi⁄_ha¶azysbcou¡
(&
mp
->
m_sb
)) {

2035 
blks
;

2040 
blks
 = (
bno_bt
->
num_tŸ_blocks
 - bno_bt->
num_‰ì_blocks
) +

2041 (
b˙t_bt
->
num_tŸ_blocks
 - b˙t_bt->
num_‰ì_blocks
) -

2043 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

2044 
blks
 +
rm≠_bt
->
num_tŸ_blocks
 -Ñm≠_bt->
num_‰ì_blocks
 - 1;

2045 
agf
->
agf_båìblks
 = 
	`˝u_to_be32
(
blks
);

2046 #ifde‡
XR_BLD_FREE_TRACE


2047 
	`Ârötf
(
°dîr
, "agf->agf_btreeblks = %u\n",

2048 
	`be32_to_˝u
(
agf
->
agf_båìblks
));

2052 #ifde‡
XR_BLD_FREE_TRACE


2053 
	`Ârötf
(
°dîr
, "bnoÑoot = %u, bcntÑoot = %u, indices = %u %u\n",

2054 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_BNO
]),

2055 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_CNT
]),

2056 
XFS_BTNUM_BNO
,

2057 
XFS_BTNUM_CNT
);

2060 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

2061 
	`∂©f‹m_uuid_c›y
(&
agf
->
agf_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

2064 
agÊ_buf
 = 
	`libxfs_gëbuf
(
mp
->
m_dev
,

2065 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGFL_DADDR
(mp)),

2066 
mp
->
m_sb
.
sb_£˘size
/
BBSIZE
);

2067 
agÊ_buf
->
b_›s
 = &
xfs_agÊ_buf_›s
;

2068 
agÊ
 = 
	`XFS_BUF_TO_AGFL
(
agÊ_buf
);

2071 
	`mem£t
(
agÊ
, 0xff, 
mp
->
m_sb
.
sb_£˘size
);

2072 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
)) {

2073 
agÊ
->
agÊ_magi˙um
 = 
	`˝u_to_be32
(
XFS_AGFL_MAGIC
);

2074 
agÊ
->
agÊ_£qno
 = 
	`˝u_to_be32
(
agno
);

2075 
	`∂©f‹m_uuid_c›y
(&
agÊ
->
agÊ_uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
);

2076 
i
 = 0; i < 
	`XFS_AGFL_SIZE
(
mp
); i++)

2077 
agÊ
->
agÊ_bno
[
i
] = 
	`˝u_to_be32
(
NULLAGBLOCK
);

2079 
‰ìli°
 = 
	`XFS_BUF_TO_AGFL_BNO
(
mp
, 
agÊ_buf
);

2085 i‡(
bno_bt
->
num_‰ì_blocks
 > 0 || 
b˙t_bt
->num_free_blocks > 0) {

2089 
i
 = 0;

2090 
bno_bt
->
num_‰ì_blocks
 > 0 && 
i
 < 
	`XFS_AGFL_SIZE
(
mp
)) {

2091 
‰ìli°
[
i
] = 
	`˝u_to_be32
(

2092 
	`gë_√xt_blockaddr
(
agno
, 0, 
bno_bt
));

2093 
i
++;

2096 
b˙t_bt
->
num_‰ì_blocks
 > 0 && 
i
 < 
	`XFS_AGFL_SIZE
(
mp
)) {

2097 
‰ìli°
[
i
] = 
	`˝u_to_be32
(

2098 
	`gë_√xt_blockaddr
(
agno
, 0, 
b˙t_bt
));

2099 
i
++;

2104 
bno_bt
->
num_‰ì_blocks
 > 0) {

2105 
fsb
 = 
	`XFS_AGB_TO_FSB
(
mp
, 
agno
,

2106 
	`gë_√xt_blockaddr
(
agno
, 0, 
bno_bt
));

2107 
îr‹
 = 
	`¶ab_add
(
lo°_fsb
, &
fsb
);

2108 i‡(
îr‹
)

2109 
	`do_îr‹
(

2110 
	`_
("Insufficient memory savingÜost blocks.\n"));

2112 
b˙t_bt
->
num_‰ì_blocks
 > 0) {

2113 
fsb
 = 
	`XFS_AGB_TO_FSB
(
mp
, 
agno
,

2114 
	`gë_√xt_blockaddr
(
agno
, 0, 
b˙t_bt
));

2115 
îr‹
 = 
	`¶ab_add
(
lo°_fsb
, &
fsb
);

2116 i‡(
îr‹
)

2117 
	`do_îr‹
(

2118 
	`_
("Insufficient memory savingÜost blocks.\n"));

2121 
agf
->
agf_Êfú°
 = 0;

2122 
agf
->
agf_Êœ°
 = 
	`˝u_to_be32
(
i
 - 1);

2123 
agf
->
agf_Êcou¡
 = 
	`˝u_to_be32
(
i
);

2124 
	`rm≠_°‹e_agÊcou¡
(
mp
, 
agno
, 
i
);

2126 #ifde‡
XR_BLD_FREE_TRACE


2127 
	`Ârötf
(
°dîr
, "wrôögágÊ f‹ág %u\n", 
agno
);

2131 
agf
->
agf_Êfú°
 = 0;

2132 
agf
->
agf_Êœ°
 = 
	`˝u_to_be32
(
	`XFS_AGFL_SIZE
(
mp
) - 1);

2133 
agf
->
agf_Êcou¡
 = 0;

2136 
	`libxfs_wrôebuf
(
agÊ_buf
, 0);

2138 
ext_±r
 = 
	`födbigge°_b˙t_exã¡
(
agno
);

2139 
agf
->
agf_l⁄ge°
 = 
	`˝u_to_be32
((
ext_±r
 !
NULL
) ?

2140 
ext_±r
->
ex_blockcou¡
 : 0);

2142 
	`ASSERT
(
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_BNOi
]) !=

2143 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_CNTi
]));

2144 
	`ASSERT
(
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_roŸ
) !=

2145 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_BNOi
]));

2146 
	`ASSERT
(
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_roŸ
) !=

2147 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_CNTi
]));

2149 
	`libxfs_wrôebuf
(
agf_buf
, 0);

2154 
	`fix_‰ìli°
(
mp
, 
agno
, 
åue
);

2156 #ifde‡
XR_BLD_FREE_TRACE


2157 
	`Ârötf
(
°dîr
, "wrŸêag‡f‹ág %u\n", 
agno
);

2159 
	}
}

2167 
	$sync_sb
(
xfs_mou¡_t
 *
mp
)

2169 
xfs_buf_t
 *
bp
;

2171 
bp
 = 
	`libxfs_gësb
(
mp
, 0);

2172 i‡(!
bp
)

2173 
	`do_îr‹
(
	`_
("couldn't get superblock\n"));

2175 
mp
->
m_sb
.
sb_icou¡
 = sb_icount;

2176 
mp
->
m_sb
.
sb_i‰ì
 = sb_ifree;

2177 
mp
->
m_sb
.
sb_fdblocks
 = sb_fdblocks;

2178 
mp
->
m_sb
.
sb_‰exã¡s
 = sb_frextents;

2180 
	`upd©e_sb_vîsi⁄
(
mp
);

2182 
	`libxfs_sb_to_disk
(
	`XFS_BUF_TO_SBP
(
bp
), &
mp
->
m_sb
);

2183 
	`libxfs_wrôebuf
(
bp
, 0);

2184 
	}
}

2191 
	$kìp_fsöos
(
xfs_mou¡_t
 *
mp
)

2193 
öo_åì_node_t
 *
úec
;

2194 
i
;

2196 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp, mp->
m_sb
.
sb_roŸöo
),

2197 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_roŸöo
));

2199 
i
 = 0; i < 3; i++)

2200 
	`£t_öode_u£d
(
úec
, 
i
);

2201 
	}
}

2204 
	$pha£5_func
(

2205 
xfs_mou¡_t
 *
mp
,

2206 
xfs_agnumbî_t
 
agno
,

2207 
xfs_¶ab
 *
lo°_fsb
)

2209 
__uöt64_t
 
num_öos
;

2210 
__uöt64_t
 
num_‰ì_öos
;

2211 
__uöt64_t
 
föobt_num_öos
;

2212 
__uöt64_t
 
föobt_num_‰ì_öos
;

2213 
bt_°©us_t
 
bno_båì_curs
;

2214 
bt_°©us_t
 
b˙t_båì_curs
;

2215 
bt_°©us_t
 
öo_båì_curs
;

2216 
bt_°©us_t
 
föo_båì_curs
;

2217 
bt_°©us_t
 
rm≠_båì_curs
;

2218 
bt_°©us_t
 
ªf˙t_båì_curs
;

2219 
exåa_blocks
 = 0;

2220 
uöt
 
num_‰ìblocks
;

2221 
xfs_exéí_t
 
‰ìblks1
;

2222 #ifde‡
DEBUG


2223 
xfs_exéí_t
 
‰ìblks2
;

2225 
xfs_agblock_t
 
num_exã¡s
;

2226 
__uöt32_t
 
magic
;

2227 
agi_°©
ági_stat = {0,};

2228 
îr‹
;

2230 i‡(
vîbo£
)

2231 
	`do_log
(
	`_
(" -ágnÿ%d\n"), 
agno
);

2237 
num_exã¡s
 = 
	`mk_öc‹e_f°ªe
(
mp
, 
agno
);

2239 #ifde‡
XR_BLD_FREE_TRACE


2240 
	`Ârötf
(
°dîr
, "# of bnoÉxtents is %d\n",

2241 
	`cou¡_bno_exã¡s
(
agno
));

2244 i‡(
num_exã¡s
 == 0) {

2254 
	`do_îr‹
(
	`_
("unableÅoÑebuild AG %u. "

2256 
agno
);

2264 
	`öô_öo_curs‹
(
mp
, 
agno
, &
öo_båì_curs
, &
num_öos
,

2265 &
num_‰ì_öos
, 0);

2267 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
))

2268 
	`öô_öo_curs‹
(
mp
, 
agno
, &
föo_båì_curs
,

2269 &
föobt_num_öos
, &
föobt_num_‰ì_öos
,

2272 
sb_icou¡_ag
[
agno
] +
num_öos
;

2273 
sb_i‰ì_ag
[
agno
] +
num_‰ì_öos
;

2279 
	`öô_rm≠bt_curs‹
(
mp
, 
agno
, &
rm≠_båì_curs
);

2285 
	`öô_ªfc_curs‹
(
mp
, 
agno
, &
ªf˙t_båì_curs
);

2287 
num_exã¡s
 = 
	`cou¡_bno_exã¡s_blocks
(
agno
, &
num_‰ìblocks
);

2293 
sb_fdblocks_ag
[
agno
] +
num_‰ìblocks
 - 2;

2295 i‡(
num_exã¡s
 == 0) {

2305 
	`do_îr‹
(

2306 
	`_
("u«bÀÅÿªbuûd AG %u. Nÿ‰ì s∑˚.\n"), 
agno
);

2309 #ifde‡
XR_BLD_FREE_TRACE


2310 
	`Ârötf
(
°dîr
, "# o‡bnÿexã¡†i†%d\n", 
num_exã¡s
);

2316 
exåa_blocks
 = 
	`ˇlcuœã_‰ì•a˚_curs‹
(
mp
, 
agno
,

2317 &
num_exã¡s
, &
bno_båì_curs
);

2328 
exåa_blocks
 = (exåa_block†- 
	`XFS_AGFL_SIZE
(
mp
) > 0)

2329 ? 
exåa_blocks
 - 
	`XFS_AGFL_SIZE
(
mp
)

2332 i‡(
exåa_blocks
 > 0)

2333 
sb_fdblocks_ag
[
agno
] -
exåa_blocks
;

2335 
b˙t_båì_curs
 = 
bno_båì_curs
;

2337 
bno_båì_curs
.
ow√r
 = 
XFS_RMAP_OWN_AG
;

2338 
b˙t_båì_curs
.
ow√r
 = 
XFS_RMAP_OWN_AG
;

2339 
	`£tup_curs‹
(
mp
, 
agno
, &
bno_båì_curs
);

2340 
	`£tup_curs‹
(
mp
, 
agno
, &
b˙t_båì_curs
);

2342 #ifde‡
XR_BLD_FREE_TRACE


2343 
	`Ârötf
(
°dîr
, "# of bnoÉxtents is %d\n",

2344 
	`cou¡_bno_exã¡s
(
agno
));

2345 
	`Ârötf
(
°dîr
, "# of bcntÉxtents is %d\n",

2346 
	`cou¡_b˙t_exã¡s
(
agno
));

2352 
‰ìblks1
 = 
	`buûd_‰ì•a˚_åì
(
mp
, 
agno
,

2353 &
bno_båì_curs
, 
XFS_ABTB_MAGIC
);

2354 #ifde‡
XR_BLD_FREE_TRACE


2355 
	`Ârötf
(
°dîr
, "# o‡‰ì block†=%d\n", 
‰ìblks1
);

2357 
	`wrôe_curs‹
(&
bno_båì_curs
);

2359 #ifde‡
DEBUG


2360 
‰ìblks2
 = 
	`buûd_‰ì•a˚_åì
(
mp
, 
agno
,

2361 &
b˙t_båì_curs
, 
XFS_ABTC_MAGIC
);

2363 (Ë
	`buûd_‰ì•a˚_åì
(
mp
, 
agno
,

2364 &
b˙t_båì_curs
, 
XFS_ABTC_MAGIC
);

2366 
	`wrôe_curs‹
(&
b˙t_båì_curs
);

2368 
	`ASSERT
(
‰ìblks1
 =
‰ìblks2
);

2370 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
)) {

2371 
	`buûd_rm≠_åì
(
mp
, 
agno
, &
rm≠_båì_curs
);

2372 
	`wrôe_curs‹
(&
rm≠_båì_curs
);

2373 
sb_fdblocks_ag
[
agno
] +(
rm≠_båì_curs
.
num_tŸ_blocks
 -

2374 
rm≠_båì_curs
.
num_‰ì_blocks
) - 1;

2377 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
)) {

2378 
	`buûd_ªfcou¡_åì
(
mp
, 
agno
, &
ªf˙t_båì_curs
);

2379 
	`wrôe_curs‹
(&
ªf˙t_båì_curs
);

2385 
	`buûd_agf_agÊ
(
mp
, 
agno
, &
bno_båì_curs
,

2386 &
b˙t_båì_curs
, 
‰ìblks1
, 
exåa_blocks
,

2387 &
rm≠_båì_curs
, &
ªf˙t_båì_curs
, 
lo°_fsb
);

2391 
magic
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) ?

2392 
XFS_IBT_CRC_MAGIC
 : 
XFS_IBT_MAGIC
;

2393 
	`buûd_öo_åì
(
mp
, 
agno
, &
öo_båì_curs
, 
magic
, &
agi_°©
, 0);

2394 
	`wrôe_curs‹
(&
öo_båì_curs
);

2399 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
)) {

2400 
magic
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) ?

2401 
XFS_FIBT_CRC_MAGIC
 : 
XFS_FIBT_MAGIC
;

2402 
	`buûd_öo_åì
(
mp
, 
agno
, &
föo_båì_curs
, 
magic
,

2403 
NULL
, 1);

2404 
	`wrôe_curs‹
(&
föo_båì_curs
);

2408 
	`buûd_agi
(
mp
, 
agno
, &
öo_båì_curs
, &
föo_båì_curs
,

2409 &
agi_°©
);

2414 
	`föish_curs‹
(&
bno_båì_curs
);

2415 
	`föish_curs‹
(&
öo_båì_curs
);

2416 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

2417 
	`föish_curs‹
(&
rm≠_båì_curs
);

2418 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

2419 
	`föish_curs‹
(&
ªf˙t_båì_curs
);

2420 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
))

2421 
	`föish_curs‹
(&
föo_båì_curs
);

2422 
	`föish_curs‹
(&
b˙t_båì_curs
);

2427 
îr‹
 = 
	`rm≠_°‹e_ag_båì_ªc
(
mp
, 
agno
);

2428 i‡(
îr‹
)

2429 
	`do_îr‹
(

2430 
	`_
("u«bÀÅÿadd AG %uÑevî£-m≠pög d©®tÿbåì.\n"), 
agno
);

2436 
	`ªÀa£_agbno_exã¡_åì
(
agno
);

2437 
	`ªÀa£_agb˙t_exã¡_åì
(
agno
);

2439 
	`PROG_RPT_INC
(
¥og_Ωt_d⁄e
[
agno
], 1);

2440 
	}
}

2444 
	$öje˘_lo°_blocks
(

2445 
xfs_mou¡
 *
mp
,

2446 
xfs_¶ab
 *
lo°_fsbs
)

2448 
xfs_å™s
 *
ç
 = 
NULL
;

2449 
xfs_¶ab_curs‹
 *
cur
 = 
NULL
;

2450 
xfs_fsblock_t
 *
fsb
;

2451 
xfs_å™s_ªs
 
åes
 = {0};

2452 
xfs_ow√r_öfo
 
oöfo
;

2453 
îr‹
;

2455 
	`libxfs_rm≠_ag_ow√r
(&
oöfo
, 
XFS_RMAP_OWN_AG
);

2456 
îr‹
 = 
	`öô_¶ab_curs‹
(
lo°_fsbs
, 
NULL
, &
cur
);

2457 i‡(
îr‹
)

2458  
îr‹
;

2460 (
fsb
 = 
	`p›_¶ab_curs‹
(
cur
)Ë!
NULL
) {

2461 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
, 16, 0, 0, &
ç
);

2462 i‡(
îr‹
)

2463 
out_ˇn˚l
;

2465 
îr‹
 = -
	`libxfs_‰ì_exã¡
(
ç
, *
fsb
, 1, &
oöfo
,

2466 
XFS_AG_RESV_NONE
);

2467 i‡(
îr‹
)

2468 
out_ˇn˚l
;

2470 
îr‹
 = -
	`libxfs_å™s_commô
(
ç
);

2471 i‡(
îr‹
)

2472 
out_ˇn˚l
;

2473 
ç
 = 
NULL
;

2476 
out_ˇn˚l
:

2477 i‡(
ç
)

2478 
	`libxfs_å™s_ˇn˚l
(
ç
);

2479 
	`‰ì_¶ab_curs‹
(&
cur
);

2480  
îr‹
;

2481 
	}
}

2484 
	$pha£5
(
xfs_mou¡_t
 *
mp
)

2486 
xfs_¶ab
 *
lo°_fsb
;

2487 
xfs_agnumbî_t
 
agno
;

2488 
îr‹
;

2490 
	`do_log
(
	`_
("Phase 5 -Ñebuild AG headersándÅrees...\n"));

2491 
	`£t_¥ogªss_msg
(
PROG_FMT_REBUILD_AG
, (
__uöt64_t
 )
glob_agcou¡
);

2493 #ifde‡
XR_BLD_FREE_TRACE


2494 
	`Ârötf
(
°dîr
, "inobtÜevel 1, maxrec = %d, minrec = %d\n",

2495 
	`libxfs_öobt_maxªcs
(
mp
, mp->
m_sb
.
sb_blocksize
, 0),

2496 
	`libxfs_öobt_maxªcs
(
mp
, mp->
m_sb
.
sb_blocksize
, 0) / 2);

2497 
	`Ârötf
(
°dîr
, "inobtÜevel 0 (leaf), maxrec = %d, minrec = %d\n",

2498 
	`libxfs_öobt_maxªcs
(
mp
, mp->
m_sb
.
sb_blocksize
, 1),

2499 
	`libxfs_öobt_maxªcs
(
mp
, mp->
m_sb
.
sb_blocksize
, 1) / 2);

2500 
	`Ârötf
(
°dîr
, "xr inobtÜevel 0 (leaf), maxrec = %d\n",

2501 
	`XR_INOBT_BLOCK_MAXRECS
(
mp
, 0));

2502 
	`Ârötf
(
°dîr
, "xr inobtÜevel 1 (int), maxrec = %d\n",

2503 
	`XR_INOBT_BLOCK_MAXRECS
(
mp
, 1));

2504 
	`Ârötf
(
°dîr
, "bnobtÜevel 1, maxrec = %d, minrec = %d\n",

2505 
	`libxfs_Ælocbt_maxªcs
(
mp
, mp->
m_sb
.
sb_blocksize
, 0),

2506 
	`libxfs_Ælocbt_maxªcs
(
mp
, mp->
m_sb
.
sb_blocksize
, 0) / 2);

2507 
	`Ârötf
(
°dîr
, "bnobtÜevel 0 (leaf), maxrec = %d, minrec = %d\n",

2508 
	`libxfs_Ælocbt_maxªcs
(
mp
, mp->
m_sb
.
sb_blocksize
, 1),

2509 
	`libxfs_Ælocbt_maxªcs
(
mp
, mp->
m_sb
.
sb_blocksize
, 1) / 2);

2514 
	`kìp_fsöos
(
mp
);

2517 
sb_icou¡_ag
 = 
	`ˇŒoc
(
mp
->
m_sb
.
sb_agcou¡
, (
__uöt64_t
));

2518 i‡(
sb_icou¡_ag
 =
NULL
)

2519 
	`do_îr‹
(
	`_
("cannotálloc sb_icount_ag buffers\n"));

2521 
sb_i‰ì_ag
 = 
	`ˇŒoc
(
mp
->
m_sb
.
sb_agcou¡
, (
__uöt64_t
));

2522 i‡(
sb_i‰ì_ag
 =
NULL
)

2523 
	`do_îr‹
(
	`_
("cannotálloc sb_ifree_ag buffers\n"));

2525 
sb_fdblocks_ag
 = 
	`ˇŒoc
(
mp
->
m_sb
.
sb_agcou¡
, (
__uöt64_t
));

2526 i‡(
sb_fdblocks_ag
 =
NULL
)

2527 
	`do_îr‹
(
	`_
("cannotálloc sb_fdblocks_ag buffers\n"));

2529 
îr‹
 = 
	`öô_¶ab
(&
lo°_fsb
, (
xfs_fsblock_t
));

2530 i‡(
îr‹
)

2531 
	`do_îr‹
(
	`_
("cannotállocÜost block slab\n"));

2533 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++)

2534 
	`pha£5_func
(
mp
, 
agno
, 
lo°_fsb
);

2536 
	`¥öt_föÆ_Ωt
();

2539 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++) {

2540 
sb_icou¡
 +
sb_icou¡_ag
[
agno
];

2541 
sb_i‰ì
 +
sb_i‰ì_ag
[
agno
];

2542 
sb_fdblocks
 +
sb_fdblocks_ag
[
agno
];

2544 
	`‰ì
(
sb_icou¡_ag
);

2545 
	`‰ì
(
sb_i‰ì_ag
);

2546 
	`‰ì
(
sb_fdblocks_ag
);

2548 i‡(
mp
->
m_sb
.
sb_rblocks
) {

2549 
	`do_log
(

2550 
	`_
(" - generateÑealtime summary infoánd bitmap...\n"));

2551 
	`πöô
(
mp
);

2552 
	`gíî©e_πöfo
(
mp
, 
btmcompuã
, 
sumcompuã
);

2555 
	`do_log
(
	`_
(" -Ñeset superblock...\n"));

2560 
	`sync_sb
(
mp
);

2562 
îr‹
 = 
	`öje˘_lo°_blocks
(
mp
, 
lo°_fsb
);

2563 i‡(
îr‹
)

2564 
	`do_îr‹
(
	`_
("UnableÅoÑeinsertÜost blocks into filesystem.\n"));

2565 
	`‰ì_¶ab
(&
lo°_fsb
);

2567 
bad_öo_båì
 = 0;

2569 
	}
}

	@repair/phase6.c

19 
	~"libxfs.h
"

20 
	~"thªads.h
"

21 
	~"¥e„tch.h
"

22 
	~"avl.h
"

23 
	~"globÆs.h
"

24 
	~"aghódî.h
"

25 
	~"öc‹e.h
"

26 
	~"dú2.h
"

27 
	~"¥Ÿos.h
"

28 
	~"îr_¥Ÿos.h
"

29 
	~"döode.h
"

30 
	~"¥ogªss.h
"

31 
	~"vîsi⁄s.h
"

33 
¸ed
 
	gzîo¸
;

34 
fsx©å
 
	gzîofsx
;

35 
xfs_öo_t
 
	g‹ph™age_öo
;

37 
xfs_«me
 
	gxfs_«me_dŸ
 = {(*)".",

39 
XFS_DIR3_FT_DIR
};

45 
	sdŸdŸ_upd©e
 {

46 
li°_hód
 
	mli°
;

47 
öo_åì_node_t
 *
	múec
;

48 
xfs_agnumbî_t
 
	magno
;

49 
	möo_off£t
;

50 } 
	tdŸdŸ_upd©e_t
;

52 
LIST_HEAD
(
dŸdŸ_upd©e_li°
);

53 
	gdŸdŸ_upd©e
;

56 
	$add_dŸdŸ_upd©e
(

57 
xfs_agnumbî_t
 
agno
,

58 
öo_åì_node_t
 *
úec
,

59 
öo_off£t
)

61 
dŸdŸ_upd©e_t
 *
dú
 = 
	`mÆloc
((dotdot_update_t));

63 i‡(!
dú
)

64 
	`do_îr‹
(
	`_
("malloc failedádd_dotdot_update (%zu bytes)\n"),

65 (
dŸdŸ_upd©e_t
));

67 
	`INIT_LIST_HEAD
(&
dú
->
li°
);

68 
dú
->
úec
 = irec;

69 
dú
->
agno
 =ágno;

70 
dú
->
öo_off£t
 = ino_offset;

72 
	`li°_add
(&
dú
->
li°
, &
dŸdŸ_upd©e_li°
);

73 
	}
}

80 
	sdú_hash_ít
 {

81 
dú_hash_ít
 *
	m√xtbyaddr
;

82 
dú_hash_ít
 *
	m√xtbyhash
;

83 
dú_hash_ít
 *
	m√xtby‹dî
;

84 
xfs_dahash_t
 
	mhashvÆ
;

85 
__uöt32_t
 
	maddªss
;

86 
xfs_öo_t
 
	möum
;

87 
	mjunkô
;

88 
	m£í
;

89 
xfs_«me
 
	m«me
;

90 } 
	tdú_hash_ít_t
;

92 
	sdú_hash_èb
 {

93 
	msize
;

94 
	m«mes_du≥d
;

95 
dú_hash_ít_t
 *
	mfú°
;

96 
dú_hash_ít_t
 *
	mœ°
;

97 
dú_hash_ít_t
 **
	mbyhash
;

98 
dú_hash_ít_t
 **
	mbyaddr
;

99 } 
	tdú_hash_èb_t
;

101 
	#DIR_HASH_TAB_SIZE
(
n
) \

102 ((
dú_hash_èb_t
Ë+ ((
dú_hash_ít_t
 *Ë* (
n
Ë* 2))

	)

103 
	#DIR_HASH_FUNC
(
t
,
a
Ë(◊Ë% (t)->
size
)

	)

108 
	s‰ìèb
 {

109 
	m«íts
;

110 
	m√¡s
;

111 
	s‰ìèb_ít
 {

112 
xfs_dú2_d©a_off_t
 
	mv
;

113 
	ms
;

114 } 
	míts
[1];

115 } 
	t‰ìèb_t
;

116 
	#FREETAB_SIZE
(
n
) \

117 (
	`off£tof
(
‰ìèb_t
, 
íts
Ë+ ((
‰ìèb_ít
Ë* (
n
)))

	)

119 
	#DIR_HASH_CK_OK
 0

	)

120 
	#DIR_HASH_CK_DUPLEAF
 1

	)

121 
	#DIR_HASH_CK_BADHASH
 2

	)

122 
	#DIR_HASH_CK_NODATA
 3

	)

123 
	#DIR_HASH_CK_NOLEAF
 4

	)

124 
	#DIR_HASH_CK_BADSTALE
 5

	)

125 
	#DIR_HASH_CK_TOTAL
 6

	)

139 
	$dú_ªad_buf
(

140 
xfs_öode
 *
ù
,

141 
xfs_dablk_t
 
bno
,

142 
xfs_daddr_t
 
m≠≥dbno
,

143 
xfs_buf
 **
bµ
,

144 c⁄° 
xfs_buf_›s
 *
›s
,

145 *
¸c_îr‹
)

147 
îr‹
;

148 
îr‹2
;

150 
îr‹
 = -
	`libxfs_da_ªad_buf
(
NULL
, 
ù
, 
bno
, 
m≠≥dbno
, 
bµ
,

151 
XFS_DATA_FORK
, 
›s
);

153 i‡(
îr‹
 !
EFSBADCRC
 &&Éº‹ !
EFSCORRUPTED
)

154  
îr‹
;

156 
îr‹2
 = -
	`libxfs_da_ªad_buf
(
NULL
, 
ù
, 
bno
, 
m≠≥dbno
, 
bµ
,

157 
XFS_DATA_FORK
, 
NULL
);

158 i‡(
îr‹2
)

159  
îr‹2
;

161 (*
¸c_îr‹
)++;

162 (*
bµ
)->
b_›s
 = 
›s
;

164 
	}
}

170 
	$dú_hash_add
(

171 
xfs_mou¡_t
 *
mp
,

172 
dú_hash_èb_t
 *
hashèb
,

173 
__uöt32_t
 
addr
,

174 
xfs_öo_t
 
öum
,

175 
«mñí
,

176 *
«me
,

177 
__uöt8_t
 
·y≥
)

179 
xfs_dahash_t
 
hash
 = 0;

180 
byaddr
;

181 
byhash
 = 0;

182 
dú_hash_ít_t
 *
p
;

183 
dup
;

184 
junk
;

185 
xfs_«me
 
x«me
;

187 
	`ASSERT
(!
hashèb
->
«mes_du≥d
);

189 
x«me
.
«me
 =Çame;

190 
x«me
.
Àn
 = 
«mñí
;

191 
x«me
.
ty≥
 = 
·y≥
;

193 
junk
 = 
«me
[0] == '/';

194 
byaddr
 = 
	`DIR_HASH_FUNC
(
hashèb
, 
addr
);

195 
dup
 = 0;

197 i‡(!
junk
) {

198 
hash
 = 
mp
->
m_dú«me›s
->
	`hash«me
(&
x«me
);

199 
byhash
 = 
	`DIR_HASH_FUNC
(
hashèb
, 
hash
);

204 
p
 = 
hashèb
->
byhash
[byhash];Ö;Ö =Ö->
√xtbyhash
) {

205 i‡(
p
->
hashvÆ
 =
hash
 &&Ö->
«me
.
Àn
 =
«mñí
) {

206 i‡(
	`memcmp
(
p
->
«me
.«me,Çame, 
«mñí
) == 0) {

207 
dup
 = 1;

208 
junk
 = 1;

215 i‡((
p
 = 
	`mÆloc
((*p))Ë=
NULL
)

216 
	`do_îr‹
(
	`_
("malloc failed in dir_hash_add (%zu bytes)\n"),

217 (*
p
));

219 
p
->
√xtbyaddr
 = 
hashèb
->
byaddr
[byaddr];

220 
hashèb
->
byaddr
[byaddr] = 
p
;

221 i‡(
hashèb
->
œ°
)

222 
hashèb
->
œ°
->
√xtby‹dî
 = 
p
;

224 
hashèb
->
fú°
 = 
p
;

225 
p
->
√xtby‹dî
 = 
NULL
;

226 
hashèb
->
œ°
 = 
p
;

228 i‡(!(
p
->
junkô
 = 
junk
)) {

229 
p
->
hashvÆ
 = 
hash
;

230 
p
->
√xtbyhash
 = 
hashèb
->
byhash
[byhash];

231 
hashèb
->
byhash
[byhash] = 
p
;

233 
p
->
addªss
 = 
addr
;

234 
p
->
öum
 = inum;

235 
p
->
£í
 = 0;

236 
p
->
«me
 = 
x«me
;

238  !
dup
;

239 
	}
}

245 
	$dú_hash_un£í
(

246 
dú_hash_èb_t
 *
hashèb
)

248 
i
;

249 
dú_hash_ít_t
 *
p
;

251 
i
 = 0; i < 
hashèb
->
size
; i++) {

252 
p
 = 
hashèb
->
byaddr
[
i
];Ö;Ö =Ö->
√xtbyaddr
) {

253 i‡(
p
->
£í
 == 0)

258 
	}
}

261 
	$dú_hash_check
(

262 
dú_hash_èb_t
 *
hashèb
,

263 
xfs_öode_t
 *
ù
,

264 
£evÆ
)

266 *
£evÆ°r
[
DIR_HASH_CK_TOTAL
];

267 
d⁄e
;

269 i‡(!
d⁄e
) {

270 
£evÆ°r
[
DIR_HASH_CK_OK
] = 
	`_
("ok");

271 
£evÆ°r
[
DIR_HASH_CK_DUPLEAF
] = 
	`_
("duplicateÜeaf");

272 
£evÆ°r
[
DIR_HASH_CK_BADHASH
] = 
	`_
("hash value mismatch");

273 
£evÆ°r
[
DIR_HASH_CK_NODATA
] = 
	`_
("no dataÉntry");

274 
£evÆ°r
[
DIR_HASH_CK_NOLEAF
] = 
	`_
("noÜeafÉntry");

275 
£evÆ°r
[
DIR_HASH_CK_BADSTALE
] = 
	`_
("bad stale count");

276 
d⁄e
 = 1;

279 i‡(
£evÆ
 =
DIR_HASH_CK_OK
 && 
	`dú_hash_un£í
(
hashèb
))

280 
£evÆ
 = 
DIR_HASH_CK_NOLEAF
;

281 i‡(
£evÆ
 =
DIR_HASH_CK_OK
)

283 
	`do_w¨n
(
	`_
("bad hashÅabÀ f‹ dúe˘‹y inodê%" 
PRIu64
 " (%s): "),

284 
ù
->
i_öo
, 
£evÆ°r
[
£evÆ
]);

285 i‡(!
no_modify
)

286 
	`do_w¨n
(
	`_
("rebuilding\n"));

288 
	`do_w¨n
(
	`_
("wouldÑebuild\n"));

290 
	}
}

293 
	$dú_hash_d⁄e
(

294 
dú_hash_èb_t
 *
hashèb
)

296 
i
;

297 
dú_hash_ít_t
 *
n
;

298 
dú_hash_ít_t
 *
p
;

300 
i
 = 0; i < 
hashèb
->
size
; i++) {

301 
p
 = 
hashèb
->
byaddr
[
i
];Ö;Ö = 
n
) {

302 
n
 = 
p
->
√xtbyaddr
;

303 i‡(
hashèb
->
«mes_du≥d
)

304 
	`‰ì
((*)
p
->
«me
.name);

305 
	`‰ì
(
p
);

308 
	`‰ì
(
hashèb
);

309 
	}
}

311 
dú_hash_èb_t
 *

312 
	$dú_hash_öô
(

313 
xfs_fsize_t
 
size
)

315 
dú_hash_èb_t
 *
hashèb
;

316 
hsize
;

318 
hsize
 = 
size
 / (16 * 4);

319 i‡(
hsize
 > 65536)

320 
hsize
 = 63336;

321 i‡(
hsize
 < 16)

322 
hsize
 = 16;

323 i‡((
hashèb
 = 
	`ˇŒoc
(
	`DIR_HASH_TAB_SIZE
(
hsize
), 1)Ë=
NULL
)

324 
	`do_îr‹
(
	`_
("calloc failed in dir_hash_init\n"));

325 
hashèb
->
size
 = 
hsize
;

326 
hashèb
->
byhash
 = (
dú_hash_ít_t
**)((*)hashtab +

327 (
dú_hash_èb_t
));

328 
hashèb
->
byaddr
 = (
dú_hash_ít_t
**)((*)hashtab +

329 (
dú_hash_èb_t
Ë+ (
dú_hash_ít_t
*Ë* 
hsize
);

330  
hashèb
;

331 
	}
}

334 
	$dú_hash_£e
(

335 
dú_hash_èb_t
 *
hashèb
,

336 
xfs_dahash_t
 
hash
,

337 
xfs_dú2_d©≠å_t
 
addr
)

339 
i
;

340 
dú_hash_ít_t
 *
p
;

342 
i
 = 
	`DIR_HASH_FUNC
(
hashèb
, 
addr
);

343 
p
 = 
hashèb
->
byaddr
[
i
];Ö;Ö =Ö->
√xtbyaddr
) {

344 i‡(
p
->
addªss
 !
addr
)

346 i‡(
p
->
£í
)

347  
DIR_HASH_CK_DUPLEAF
;

348 i‡(
p
->
junkô
 =0 &&Ö->
hashvÆ
 !
hash
)

349  
DIR_HASH_CK_BADHASH
;

350 
p
->
£í
 = 1;

351  
DIR_HASH_CK_OK
;

353  
DIR_HASH_CK_NODATA
;

354 
	}
}

357 
	$dú_hash_upd©e_·y≥
(

358 
dú_hash_èb_t
 *
hashèb
,

359 
xfs_dú2_d©≠å_t
 
addr
,

360 
__uöt8_t
 
·y≥
)

362 
i
;

363 
dú_hash_ít_t
 *
p
;

365 
i
 = 
	`DIR_HASH_FUNC
(
hashèb
, 
addr
);

366 
p
 = 
hashèb
->
byaddr
[
i
];Ö;Ö =Ö->
√xtbyaddr
) {

367 i‡(
p
->
addªss
 !
addr
)

369 
p
->
«me
.
ty≥
 = 
·y≥
;

371 
	}
}

378 
	$dú_hash_£e_Æl
(

379 
dú_hash_èb_t
 *
hashèb
,

380 
xfs_dú2_Àaf_íåy_t
 *
íts
,

381 
cou¡
,

382 
°Æe
)

384 
i
;

385 
j
;

386 
rvÆ
;

388 
i
 = 
j
 = 0; i < 
cou¡
; i++) {

389 i‡(
	`be32_to_˝u
(
íts
[
i
].
addªss
Ë=
XFS_DIR2_NULL_DATAPTR
) {

390 
j
++;

393 
rvÆ
 = 
	`dú_hash_£e
(
hashèb
, 
	`be32_to_˝u
(
íts
[
i
].
hashvÆ
),

394 
	`be32_to_˝u
(
íts
[
i
].
addªss
));

395 i‡(
rvÆ
 !
DIR_HASH_CK_OK
)

396  
rvÆ
;

398  
j
 =
°Æe
 ? 
DIR_HASH_CK_OK
 : 
DIR_HASH_CK_BADSTALE
;

399 
	}
}

406 
	$dú_hash_dup_«mes
(
dú_hash_èb_t
 *
hashèb
)

408 *
«me
;

409 
dú_hash_ít_t
 *
p
;

411 i‡(
hashèb
->
«mes_du≥d
)

414 
p
 = 
hashèb
->
fú°
;Ö;Ö =Ö->
√xtby‹dî
) {

415 
«me
 = 
	`mÆloc
(
p
->«me.
Àn
);

416 
	`mem˝y
(
«me
, 
p
->«me.«me,Ö->«me.
Àn
);

417 
p
->
«me
.name =Çame;

419 
hashèb
->
«mes_du≥d
 = 1;

420 
	}
}

430 
	$bm≠_√xt_off£t
(

431 
xfs_å™s_t
 *
ç
,

432 
xfs_öode_t
 *
ù
,

433 
xfs_fûeoff_t
 *
bn›
,

434 
whichf‹k
)

436 
xfs_fûeoff_t
 
bno
;

437 
îr‹
;

438 
xfs_bmbt_úec_t
 
gŸ
;

439 
xfs_if‹k_t
 *
iÂ
;

440 
xfs_exäum_t
 
idx
;

442 i‡(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_BTREE
 &&

443 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_EXTENTS
 &&

444 
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë!
XFS_DINODE_FMT_LOCAL
)

445  
EIO
;

446 i‡(
	`XFS_IFORK_FORMAT
(
ù
, 
whichf‹k
Ë=
XFS_DINODE_FMT_LOCAL
) {

447 *
bn›
 = 
NULLFILEOFF
;

450 
iÂ
 = 
	`XFS_IFORK_PTR
(
ù
, 
whichf‹k
);

451 i‡(!(
iÂ
->
if_Êags
 & 
XFS_IFEXTENTS
) &&

452 (
îr‹
 = -
	`libxfs_úód_exã¡s
(
ç
, 
ù
, 
whichf‹k
)))

453  
îr‹
;

454 
bno
 = *
bn›
 + 1;

455 i‡(!
	`libxfs_õxt_lookup_exã¡
(
ù
, 
iÂ
, 
bno
, &
idx
, &
gŸ
))

456 *
bn›
 = 
NULLFILEOFF
;

458 *
bn›
 = 
gŸ
.
br_°¨toff
 < 
bno
 ? bno : got.br_startoff;

460 
	}
}

464 
	$ªs_Áûed
(

465 
îr
)

467 i‡(
îr
 =
ENOSPC
) {

468 
	`do_îr‹
(
	`_
("ran out of disk space!\n"));

470 
	`do_îr‹
(
	`_
("xfs_å™s_ª£rvêªtu∫ed %d\n"), 
îr
);

471 
	}
}

474 
	$mk_rbmöo
(
xfs_mou¡_t
 *
mp
)

476 
xfs_å™s_t
 *
ç
;

477 
xfs_öode_t
 *
ù
;

478 
xfs_bmbt_úec_t
 *
ï
;

479 
xfs_fsblock_t
 
fú°
;

480 
i
;

481 
nm≠
;

482 
îr‹
;

483 
xfs_de„r_›s
 
df›s
;

484 
xfs_fûeoff_t
 
bno
;

485 
xfs_bmbt_úec_t
 
m≠
[
XFS_BMAP_MAX_NMAP
];

486 
vîs
;

487 
times
;

488 
xfs_å™s_ªs
 
åes
 = {0};

493 
i
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
, 10, 0, 0, &
ç
);

494 i‡(
i
)

495 
	`ªs_Áûed
(
i
);

497 
îr‹
 = -
	`libxfs_å™s_igë
(
mp
, 
ç
, mp->
m_sb
.
sb_rbmöo
, 0, 0, &
ù
);

498 i‡(
îr‹
) {

499 
	`do_îr‹
(

500 
	`_
("couldn't igetÑealtime bitmap inode --Érror - %d\n"),

501 
îr‹
);

504 
vîs
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) ? 3 : 2;

505 
	`mem£t
(&
ù
->
i_d
, 0, (ip->i_d));

507 
	`VFS_I
(
ù
)->
i_mode
 = 
S_IFREG
;

508 
ù
->
i_d
.
di_vîsi⁄
 = 
vîs
;

509 
ù
->
i_d
.
di_f‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

510 
ù
->
i_d
.
di_af‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

512 
	`£t_∆ök
(
	`VFS_I
(
ù
), 1);

514 
times
 = 
XFS_ICHGTIME_CHG
 | 
XFS_ICHGTIME_MOD
;

515 i‡(
ù
->
i_d
.
di_vîsi⁄
 == 3) {

516 
	`VFS_I
(
ù
)->
i_vîsi⁄
 = 1;

517 
ù
->
i_d
.
di_Êags2
 = 0;

518 
times
 |
XFS_ICHGTIME_CREATE
;

520 
	`libxfs_å™s_ichgtime
(
ç
, 
ù
, 
times
);

525 
ù
->
i_df
.
if_Êags
 = 
XFS_IFEXTENTS
;

526 
ù
->
i_df
.
if_byãs
 = ip->i_df.
if_ªÆ_byãs
 = 0;

527 
ù
->
i_df
.
if_u1
.
if_exã¡s
 = 
NULL
;

529 
ù
->
i_d
.
di_size
 = 
mp
->
m_sb
.
sb_rbmblocks
 * mp->m_sb.
sb_blocksize
;

534 
	`libxfs_å™s_log_öode
(
ç
, 
ù
, 
XFS_ILOG_CORE
);

535 
	`libxfs_å™s_commô
(
ç
);

541 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
,

542 
mp
->
m_sb
.
sb_rbmblocks
 + (
	`XFS_BM_MAXLEVELS
(mp,
XFS_DATA_FORK
) - 1),

543 0, 0, &
ç
);

544 i‡(
îr‹
)

545 
	`ªs_Áûed
(
îr‹
);

547 
	`libxfs_å™s_ijoö
(
ç
, 
ù
, 0);

548 
bno
 = 0;

549 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

550 
bno
 < 
mp
->
m_sb
.
sb_rbmblocks
) {

551 
nm≠
 = 
XFS_BMAP_MAX_NMAP
;

552 
îr‹
 = -
	`libxfs_bm≠i_wrôe
(
ç
, 
ù
, 
bno
,

553 (
xfs_exéí_t
)(
mp
->
m_sb
.
sb_rbmblocks
 - 
bno
),

554 0, &
fú°
, 
mp
->
m_sb
.
sb_rbmblocks
,

555 
m≠
, &
nm≠
, &
df›s
);

556 i‡(
îr‹
) {

557 
	`do_îr‹
(

558 
	`_
("couldn'tállocateÑealtime bitmap,Érror = %d\n"),

559 
îr‹
);

561 
i
 = 0, 
ï
 = 
m≠
; i < 
nm≠
; i++,Ép++) {

562 
	`libxfs_devi˚_zîo
(
mp
->
m_ddev_èrgp
,

563 
	`XFS_FSB_TO_DADDR
(
mp
, 
ï
->
br_°¨tblock
),

564 
	`XFS_FSB_TO_BB
(
mp
, 
ï
->
br_blockcou¡
));

565 
bno
 +
ï
->
br_blockcou¡
;

568 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

569 i‡(
îr‹
) {

570 
	`do_îr‹
(

571 
	`_
("allocation ofÅheÑealtime bitmap failed,Érror = %d\n"),

572 
îr‹
);

574 
	`libxfs_å™s_commô
(
ç
);

575 
	`IRELE
(
ù
);

576 
	}
}

579 
	$fûl_rbmöo
(
xfs_mou¡_t
 *
mp
)

581 
xfs_buf_t
 *
bp
;

582 
xfs_å™s_t
 *
ç
;

583 
xfs_öode_t
 *
ù
;

584 
xfs_πw‹d_t
 *
bmp
;

585 
xfs_fsblock_t
 
fú°
;

586 
nm≠
;

587 
îr‹
;

588 
xfs_fûeoff_t
 
bno
;

589 
xfs_bmbt_úec_t
 
m≠
;

590 
xfs_å™s_ªs
 
åes
 = {0};

592 
bmp
 = 
btmcompuã
;

593 
bno
 = 0;

595 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
, 10, 0, 0, &
ç
);

596 i‡(
îr‹
)

597 
	`ªs_Áûed
(
îr‹
);

599 
îr‹
 = -
	`libxfs_å™s_igë
(
mp
, 
ç
, mp->
m_sb
.
sb_rbmöo
, 0, 0, &
ù
);

600 i‡(
îr‹
) {

601 
	`do_îr‹
(

602 
	`_
("couldn't igetÑealtime bitmap inode --Érror - %d\n"),

603 
îr‹
);

606 
fú°
 = 
NULLFSBLOCK
;

607 
bno
 < 
mp
->
m_sb
.
sb_rbmblocks
) {

611 
nm≠
 = 1;

612 
îr‹
 = -
	`libxfs_bm≠i_wrôe
(
ç
, 
ù
, 
bno
, 1, 0,

613 &
fú°
, 1, &
m≠
, &
nm≠
, 
NULL
);

614 i‡(
îr‹
 || 
nm≠
 != 1) {

615 
	`do_îr‹
(

616 
	`_
("couldn'àm≠Ñó…imêbôm≠ block %" 
PRIu64
 ",Érror = %d\n"),

617 
bno
, 
îr‹
);

620 
	`ASSERT
(
m≠
.
br_°¨tblock
 !
HOLESTARTBLOCK
);

622 
îr‹
 = -
	`libxfs_å™s_ªad_buf
(

623 
mp
, 
ç
, mp->
m_dev
,

624 
	`XFS_FSB_TO_DADDR
(
mp
, 
m≠
.
br_°¨tblock
),

625 
	`XFS_FSB_TO_BB
(
mp
, 1), 1, &
bp
, 
NULL
);

627 i‡(
îr‹
) {

628 
	`do_w¨n
(

629 
	`_
("ˇn'àac˚s†block %" 
PRIu64
 " (fsbno %" PRIu64 ") ofÑealtime bitmap inode %" PRIu64 "\n"),

630 
bno
, 
m≠
.
br_°¨tblock
, 
mp
->
m_sb
.
sb_rbmöo
);

634 
	`memmove
(
	`XFS_BUF_PTR
(
bp
), 
bmp
, 
mp
->
m_sb
.
sb_blocksize
);

636 
	`libxfs_å™s_log_buf
(
ç
, 
bp
, 0, 
mp
->
m_sb
.
sb_blocksize
 - 1);

638 
bmp
 = (
xfs_πw‹d_t
 *)((
öçå_t
Ëbm∞+ 
mp
->
m_sb
.
sb_blocksize
);

639 
bno
++;

642 
	`libxfs_å™s_commô
(
ç
);

643 
	`IRELE
(
ù
);

645 
	}
}

648 
	$fûl_rsumöo
(
xfs_mou¡_t
 *
mp
)

650 
xfs_buf_t
 *
bp
;

651 
xfs_å™s_t
 *
ç
;

652 
xfs_öode_t
 *
ù
;

653 
xfs_sumöfo_t
 *
smp
;

654 
xfs_fsblock_t
 
fú°
;

655 
nm≠
;

656 
îr‹
;

657 
xfs_fûeoff_t
 
bno
;

658 
xfs_fûeoff_t
 
íd_bno
;

659 
xfs_bmbt_úec_t
 
m≠
;

660 
xfs_å™s_ªs
 
åes
 = {0};

662 
smp
 = 
sumcompuã
;

663 
bno
 = 0;

664 
íd_bno
 = 
mp
->
m_rsumsize
 >> mp->
m_sb
.
sb_blocklog
;

666 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
, 10, 0, 0, &
ç
);

667 i‡(
îr‹
)

668 
	`ªs_Áûed
(
îr‹
);

670 
îr‹
 = -
	`libxfs_å™s_igë
(
mp
, 
ç
, mp->
m_sb
.
sb_rsumöo
, 0, 0, &
ù
);

671 i‡(
îr‹
) {

672 
	`do_îr‹
(

673 
	`_
("couldn't igetÑealtime summary inode --Érror - %d\n"),

674 
îr‹
);

677 
fú°
 = 
NULLFSBLOCK
;

678 
bno
 < 
íd_bno
) {

682 
nm≠
 = 1;

683 
îr‹
 = -
	`libxfs_bm≠i_wrôe
(
ç
, 
ù
, 
bno
, 1, 0,

684 &
fú°
, 1, &
m≠
, &
nm≠
, 
NULL
);

685 i‡(
îr‹
 || 
nm≠
 != 1) {

686 
	`do_îr‹
(

687 
	`_
("couldn'àm≠Ñó…imêsumm¨y inodêblock %" 
PRIu64
 ",Érror = %d\n"),

688 
bno
, 
îr‹
);

691 
	`ASSERT
(
m≠
.
br_°¨tblock
 !
HOLESTARTBLOCK
);

693 
îr‹
 = -
	`libxfs_å™s_ªad_buf
(

694 
mp
, 
ç
, mp->
m_dev
,

695 
	`XFS_FSB_TO_DADDR
(
mp
, 
m≠
.
br_°¨tblock
),

696 
	`XFS_FSB_TO_BB
(
mp
, 1), 1, &
bp
, 
NULL
);

698 i‡(
îr‹
) {

699 
	`do_w¨n
(

700 
	`_
("ˇn'àac˚s†block %" 
PRIu64
 " (fsbno %" PRIu64 ") ofÑealtime summary inode %" PRIu64 "\n"),

701 
bno
, 
m≠
.
br_°¨tblock
, 
mp
->
m_sb
.
sb_rsumöo
);

702 
	`IRELE
(
ù
);

706 
	`memmove
(
	`XFS_BUF_PTR
(
bp
), 
smp
, 
mp
->
m_sb
.
sb_blocksize
);

708 
	`libxfs_å™s_log_buf
(
ç
, 
bp
, 0, 
mp
->
m_sb
.
sb_blocksize
 - 1);

710 
smp
 = (
xfs_sumöfo_t
 *)((
öçå_t
)sm∞+ 
mp
->
m_sb
.
sb_blocksize
);

711 
bno
++;

714 
	`libxfs_å™s_commô
(
ç
);

715 
	`IRELE
(
ù
);

717 
	}
}

720 
	$mk_rsumöo
(
xfs_mou¡_t
 *
mp
)

722 
xfs_å™s_t
 *
ç
;

723 
xfs_öode_t
 *
ù
;

724 
xfs_bmbt_úec_t
 *
ï
;

725 
xfs_fsblock_t
 
fú°
;

726 
i
;

727 
nm≠
;

728 
îr‹
;

729 
nsumblocks
;

730 
xfs_de„r_›s
 
df›s
;

731 
xfs_fûeoff_t
 
bno
;

732 
xfs_bmbt_úec_t
 
m≠
[
XFS_BMAP_MAX_NMAP
];

733 
vîs
;

734 
times
;

735 
xfs_å™s_ªs
 
åes
 = {0};

740 
i
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_ich™ge
, 10, 0, 0, &
ç
);

741 i‡(
i
)

742 
	`ªs_Áûed
(
i
);

744 
îr‹
 = -
	`libxfs_å™s_igë
(
mp
, 
ç
, mp->
m_sb
.
sb_rsumöo
, 0, 0, &
ù
);

745 i‡(
îr‹
) {

746 
	`do_îr‹
(

747 
	`_
("couldn't igetÑealtime summary inode --Érror - %d\n"),

748 
îr‹
);

751 
vîs
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) ? 3 : 2;

752 
	`mem£t
(&
ù
->
i_d
, 0, (ip->i_d));

754 
	`VFS_I
(
ù
)->
i_mode
 = 
S_IFREG
;

755 
ù
->
i_d
.
di_vîsi⁄
 = 
vîs
;

756 
ù
->
i_d
.
di_f‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

757 
ù
->
i_d
.
di_af‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

759 
	`£t_∆ök
(
	`VFS_I
(
ù
), 1);

761 
times
 = 
XFS_ICHGTIME_CHG
 | 
XFS_ICHGTIME_MOD
;

762 i‡(
ù
->
i_d
.
di_vîsi⁄
 == 3) {

763 
	`VFS_I
(
ù
)->
i_vîsi⁄
 = 1;

764 
ù
->
i_d
.
di_Êags2
 = 0;

765 
times
 |
XFS_ICHGTIME_CREATE
;

767 
	`libxfs_å™s_ichgtime
(
ç
, 
ù
, 
times
);

772 
ù
->
i_df
.
if_Êags
 = 
XFS_IFEXTENTS
;

773 
ù
->
i_df
.
if_byãs
 = ip->i_df.
if_ªÆ_byãs
 = 0;

774 
ù
->
i_df
.
if_u1
.
if_exã¡s
 = 
NULL
;

776 
ù
->
i_d
.
di_size
 = 
mp
->
m_rsumsize
;

781 
	`libxfs_å™s_log_öode
(
ç
, 
ù
, 
XFS_ILOG_CORE
);

782 
	`libxfs_å™s_commô
(
ç
);

788 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

790 
nsumblocks
 = 
mp
->
m_rsumsize
 >> mp->
m_sb
.
sb_blocklog
;

791 
åes
.
å_logªs
 = 
	`BBTOB
(128);

792 
åes
.
å_logcou¡
 = 
XFS_DEFAULT_PERM_LOG_COUNT
;

793 
åes
.
å_logÊags
 = 
XFS_TRANS_PERM_LOG_RES
;

794 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
,

795 
mp
->
m_sb
.
sb_rbmblocks
 + (
	`XFS_BM_MAXLEVELS
(mp,
XFS_DATA_FORK
) - 1),

796 0, 0, &
ç
);

797 i‡(
îr‹
)

798 
	`ªs_Áûed
(
îr‹
);

800 
	`libxfs_å™s_ijoö
(
ç
, 
ù
, 0);

801 
bno
 = 0;

802 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

803 
bno
 < 
nsumblocks
) {

804 
nm≠
 = 
XFS_BMAP_MAX_NMAP
;

805 
îr‹
 = -
	`libxfs_bm≠i_wrôe
(
ç
, 
ù
, 
bno
,

806 (
xfs_exéí_t
)(
nsumblocks
 - 
bno
),

807 0, &
fú°
, 
nsumblocks
, 
m≠
, &
nm≠
, &
df›s
);

808 i‡(
îr‹
) {

809 
	`do_îr‹
(

810 
	`_
("couldn'tállocateÑealtime summary inode,Érror = %d\n"),

811 
îr‹
);

813 
i
 = 0, 
ï
 = 
m≠
; i < 
nm≠
; i++,Ép++) {

814 
	`libxfs_devi˚_zîo
(
mp
->
m_ddev_èrgp
,

815 
	`XFS_FSB_TO_DADDR
(
mp
, 
ï
->
br_°¨tblock
),

816 
	`XFS_FSB_TO_BB
(
mp
, 
ï
->
br_blockcou¡
));

817 
bno
 +
ï
->
br_blockcou¡
;

820 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

821 i‡(
îr‹
) {

822 
	`do_îr‹
(

823 
	`_
("allocation ofÅheÑealtime summary ino failed,Érror = %d\n"),

824 
îr‹
);

826 
	`libxfs_å™s_commô
(
ç
);

827 
	`IRELE
(
ù
);

828 
	}
}

834 
	$mk_roŸ_dú
(
xfs_mou¡_t
 *
mp
)

836 
xfs_å™s_t
 *
ç
;

837 
xfs_öode_t
 *
ù
;

838 
i
;

839 
îr‹
;

840 c⁄° 
mode_t
 
mode
 = 0755;

841 
öo_åì_node_t
 *
úec
;

842 
vîs
;

843 
times
;

845 
ù
 = 
NULL
;

846 
i
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_ich™ge
, 10, 0, 0, &
ç
);

847 i‡(
i
)

848 
	`ªs_Áûed
(
i
);

850 
îr‹
 = -
	`libxfs_å™s_igë
(
mp
, 
ç
, mp->
m_sb
.
sb_roŸöo
, 0, 0, &
ù
);

851 i‡(
îr‹
) {

852 
	`do_îr‹
(
	`_
("couldÇŸ igëÑoŸ inodê--Éº‹ - %d\n"), 
îr‹
);

858 
vîs
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) ? 3 : 2;

859 
	`mem£t
(&
ù
->
i_d
, 0, (ip->i_d));

861 
	`VFS_I
(
ù
)->
i_mode
 = 
mode
|
S_IFDIR
;

862 
ù
->
i_d
.
di_vîsi⁄
 = 
vîs
;

863 
ù
->
i_d
.
di_f‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

864 
ù
->
i_d
.
di_af‹m©
 = 
XFS_DINODE_FMT_EXTENTS
;

866 
	`£t_∆ök
(
	`VFS_I
(
ù
), 1);

868 
times
 = 
XFS_ICHGTIME_CHG
 | 
XFS_ICHGTIME_MOD
;

869 i‡(
ù
->
i_d
.
di_vîsi⁄
 == 3) {

870 
	`VFS_I
(
ù
)->
i_vîsi⁄
 = 1;

871 
ù
->
i_d
.
di_Êags2
 = 0;

872 
times
 |
XFS_ICHGTIME_CREATE
;

874 
	`libxfs_å™s_ichgtime
(
ç
, 
ù
, 
times
);

876 
	`libxfs_å™s_log_öode
(
ç
, 
ù
, 
XFS_ILOG_CORE
);

881 
ù
->
i_df
.
if_Êags
 = 
XFS_IFEXTENTS
;

882 
ù
->
i_df
.
if_byãs
 = ip->i_df.
if_ªÆ_byãs
 = 0;

883 
ù
->
i_df
.
if_u1
.
if_exã¡s
 = 
NULL
;

890 
ù
->
d_›s
 = 
mp
->
m_dú_öode_›s
;

891 
	`libxfs_dú_öô
(
ç
, 
ù
, ip);

893 
	`libxfs_å™s_commô
(
ç
);

894 
	`IRELE
(
ù
);

896 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp, mp->
m_sb
.
sb_roŸöo
),

897 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_roŸöo
));

898 
	`£t_öode_ißdú
(
úec
, 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_roŸöo
) -

899 
úec
->
öo_°¨äum
);

900 
	}
}

905 
xfs_öo_t


906 
	$mk_‹ph™age
(
xfs_mou¡_t
 *
mp
)

908 
xfs_öo_t
 
öo
;

909 
xfs_å™s_t
 *
ç
;

910 
xfs_öode_t
 *
ù
;

911 
xfs_öode_t
 *
pù
;

912 
xfs_fsblock_t
 
fú°
;

913 
öo_åì_node_t
 *
úec
;

914 
öo_off£t
 = 0;

915 
i
;

916 
îr‹
;

917 
xfs_de„r_›s
 
df›s
;

918 c⁄° 
mode
 = 0755;

919 
ƒes
;

920 
xfs_«me
 
x«me
;

928 i‡((
i
 = -
	`libxfs_igë
(
mp
, 
NULL
, mp->
m_sb
.
sb_roŸöo
, 0, &
pù
)))

929 
	`do_îr‹
(
	`_
("%d - couldn't igetÑoot inodeÅo obtain %s\n"),

930 
i
, 
ORPHANAGE
);

932 
x«me
.
«me
 = (*)
ORPHANAGE
;

933 
x«me
.
Àn
 = 
	`°æí
(
ORPHANAGE
);

934 
x«me
.
ty≥
 = 
XFS_DIR3_FT_DIR
;

936 i‡(
	`libxfs_dú_lookup
(
NULL
, 
pù
, &
x«me
, &
öo
, NULL) == 0)

937  
öo
;

942 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

943 
ƒes
 = 
	`XFS_MKDIR_SPACE_RES
(
mp
, 
x«me
.
Àn
);

944 
i
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_mkdú
, 
ƒes
, 0, 0, &
ç
);

945 i‡(
i
)

946 
	`ªs_Áûed
(
i
);

956 
îr‹
 = -
	`libxfs_öode_Æloc
(&
ç
, 
pù
, 
mode
|
S_IFDIR
,

957 1, 0, &
zîo¸
, &
zîofsx
, &
ù
);

958 i‡(
îr‹
) {

959 
	`do_îr‹
(
	`_
("%s inodeállocation failed %d\n"),

960 
ORPHANAGE
, 
îr‹
);

962 
	`öc_∆ök
(
	`VFS_I
(
ù
));

963 
öo
 = 
ù
->
i_öo
;

965 
úec
 = 
	`föd_öode_ªc
(
mp
,

966 
	`XFS_INO_TO_AGNO
(
mp
, 
öo
),

967 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
));

969 i‡(
úec
 =
NULL
) {

976 
úec
 = 
	`£t_öode_‰ì_Æloc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp, 
öo
),

977 
	`XFS_INO_TO_AGINO
(
mp
, 
öo
));

978 
	`Æloc_ex_d©a
(
úec
);

980 
i
 = 0; i < 
XFS_INODES_PER_CHUNK
; i++)

981 
	`£t_öode_‰ì
(
úec
, 
i
);

984 
öo_off£t
 = 
	`gë_öode_off£t
(
mp
, 
öo
, 
úec
);

990 
	`£t_öode_u£d
(
úec
, 
öo_off£t
);

991 
	`add_öode_ªf
(
úec
, 
öo_off£t
);

997 
	`libxfs_å™s_ijoö
(
ç
, 
pù
, 0);

1002 
îr‹
 = -
	`libxfs_dú_¸óã«me
(
ç
, 
pù
, &
x«me
, 
ù
->
i_öo
, &
fú°
,

1003 &
df›s
, 
ƒes
);

1004 i‡(
îr‹
)

1005 
	`do_îr‹
(

1006 
	`_
("can't make %s, createnameÉrror %d\n"),

1007 
ORPHANAGE
, 
îr‹
);

1013 
	`öc_∆ök
(
	`VFS_I
(
pù
));

1014 
	`add_öode_ªf
(
	`föd_öode_ªc
(
mp
,

1015 
	`XFS_INO_TO_AGNO
(
mp
, mp->
m_sb
.
sb_roŸöo
),

1016 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_roŸöo
)), 0);

1020 
	`libxfs_å™s_log_öode
(
ç
, 
pù
, 
XFS_ILOG_CORE
);

1021 
	`libxfs_dú_öô
(
ç
, 
ù
, 
pù
);

1022 
	`libxfs_å™s_log_öode
(
ç
, 
ù
, 
XFS_ILOG_CORE
);

1024 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

1025 i‡(
îr‹
) {

1026 
	`do_îr‹
(
	`_
("%s directory creation failed -- bmapfÉrror %d\n"),

1027 
ORPHANAGE
, 
îr‹
);

1031 
	`libxfs_å™s_commô
(
ç
);

1032 
	`IRELE
(
ù
);

1033 
	`IRELE
(
pù
);

1034 
	`add_öode_ªached
(
úec
,
öo_off£t
);

1036 (
öo
);

1037 
	}
}

1043 
	$mv_‹ph™age
(

1044 
xfs_mou¡_t
 *
mp
,

1045 
xfs_öo_t
 
öo
,

1046 
iß_dú
)

1048 
xfs_öode_t
 *
‹ph™age_ù
;

1049 
xfs_öo_t
 
íåy_öo_num
;

1050 
xfs_öode_t
 *
öo_p
;

1051 
xfs_å™s_t
 *
ç
;

1052 
xfs_fsblock_t
 
fú°
;

1053 
xfs_de„r_›s
 
df›s
;

1054 
îr
;

1055 
‚ame
[
MAXPATHLEN
 + 1];

1056 
ƒes
;

1057 
ö¸
;

1058 
öo_åì_node_t
 *
úec
;

1059 
öo_off£t
 = 0;

1060 
xfs_«me
 
x«me
;

1062 
x«me
.
«me
 = 
‚ame
;

1063 
x«me
.
Àn
 = 
	`¢¥ötf
((*)
‚ame
, (fname), "%llu",

1064 ()
öo
);

1066 
îr
 = -
	`libxfs_igë
(
mp
, 
NULL
, 
‹ph™age_öo
, 0, &
‹ph™age_ù
);

1067 i‡(
îr
)

1068 
	`do_îr‹
(
	`_
("%d - couldn'àigë oΩh™agêöode\n"), 
îr
);

1072 
ö¸
 = 0;

1073 
	`libxfs_dú_lookup
(
NULL
, 
‹ph™age_ù
, &
x«me
, &
íåy_öo_num
,

1074 
NULL
) == 0)

1075 
x«me
.
Àn
 = 
	`¢¥ötf
((*)
‚ame
, (fname), "%llu.%d",

1076 ()
öo
, ++
ö¸
);

1078 i‡((
îr
 = -
	`libxfs_igë
(
mp
, 
NULL
, 
öo
, 0, &
öo_p
)))

1079 
	`do_îr‹
(
	`_
("%d - couldn'àigë disc⁄√˘ed inode\n"), 
îr
);

1081 
x«me
.
ty≥
 = 
	`xfs_mode_to_·y≥
(
	`VFS_I
(
öo_p
)->
i_mode
);

1083 i‡(
iß_dú
) {

1084 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp, 
‹ph™age_öo
),

1085 
	`XFS_INO_TO_AGINO
(
mp
, 
‹ph™age_öo
));

1086 i‡(
úec
)

1087 
öo_off£t
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
‹ph™age_öo
) -

1088 
úec
->
öo_°¨äum
;

1089 
ƒes
 = 
	`XFS_DIRENTER_SPACE_RES
(
mp
, 
‚amñí
) +

1090 
	`XFS_DIRENTER_SPACE_RES
(
mp
, 2);

1091 
îr
 = -
	`libxfs_dú_lookup
(
NULL
, 
öo_p
, &
xfs_«me_dŸdŸ
,

1092 &
íåy_öo_num
, 
NULL
);

1093 i‡(
îr
) {

1094 
	`ASSERT
(
îr
 =
ENOENT
);

1096 
îr
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_ª«me
,

1097 
ƒes
, 0, 0, &
ç
);

1098 i‡(
îr
)

1099 
	`do_îr‹
(

1100 
	`_
("spaceÑeservation failed (%d), filesystem may be out of space\n"),

1101 
îr
);

1103 
	`libxfs_å™s_ijoö
(
ç
, 
‹ph™age_ù
, 0);

1104 
	`libxfs_å™s_ijoö
(
ç
, 
öo_p
, 0);

1106 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

1107 
îr
 = -
	`libxfs_dú_¸óã«me
(
ç
, 
‹ph™age_ù
, &
x«me
,

1108 
öo
, &
fú°
, &
df›s
, 
ƒes
);

1109 i‡(
îr
)

1110 
	`do_îr‹
(

1111 
	`_
("name create failed in %s (%d), filesystem may be out of space\n"),

1112 
ORPHANAGE
, 
îr
);

1114 i‡(
úec
)

1115 
	`add_öode_ªf
(
úec
, 
öo_off£t
);

1117 
	`öc_∆ök
(
	`VFS_I
(
‹ph™age_ù
));

1118 
	`libxfs_å™s_log_öode
(
ç
, 
‹ph™age_ù
, 
XFS_ILOG_CORE
);

1120 
îr
 = -
	`libxfs_dú_¸óã«me
(
ç
, 
öo_p
, &
xfs_«me_dŸdŸ
,

1121 
‹ph™age_öo
, &
fú°
, &
df›s
, 
ƒes
);

1122 i‡(
îr
)

1123 
	`do_îr‹
(

1124 
	`_
("creation of ..Éntry failed (%d), filesystem may be out of space\n"),

1125 
îr
);

1127 
	`öc_∆ök
(
	`VFS_I
(
öo_p
));

1128 
	`libxfs_å™s_log_öode
(
ç
, 
öo_p
, 
XFS_ILOG_CORE
);

1130 
îr
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
öo_p
);

1131 i‡(
îr
)

1132 
	`do_îr‹
(

1133 
	`_
("bmap finish failed (err - %d), filesystem may be out of space\n"),

1134 
îr
);

1136 
	`libxfs_å™s_commô
(
ç
);

1138 
îr
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_ª«me
,

1139 
ƒes
, 0, 0, &
ç
);

1140 i‡(
îr
)

1141 
	`do_îr‹
(

1142 
	`_
("spaceÑeservation failed (%d), filesystem may be out of space\n"),

1143 
îr
);

1145 
	`libxfs_å™s_ijoö
(
ç
, 
‹ph™age_ù
, 0);

1146 
	`libxfs_å™s_ijoö
(
ç
, 
öo_p
, 0);

1148 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

1150 
îr
 = -
	`libxfs_dú_¸óã«me
(
ç
, 
‹ph™age_ù
, &
x«me
,

1151 
öo
, &
fú°
, &
df›s
, 
ƒes
);

1152 i‡(
îr
)

1153 
	`do_îr‹
(

1154 
	`_
("name create failed in %s (%d), filesystem may be out of space\n"),

1155 
ORPHANAGE
, 
îr
);

1157 i‡(
úec
)

1158 
	`add_öode_ªf
(
úec
, 
öo_off£t
);

1160 
	`öc_∆ök
(
	`VFS_I
(
‹ph™age_ù
));

1161 
	`libxfs_å™s_log_öode
(
ç
, 
‹ph™age_ù
, 
XFS_ILOG_CORE
);

1167 i‡(
íåy_öo_num
 !
‹ph™age_öo
) {

1168 
îr
 = -
	`libxfs_dú_ª∂a˚
(
ç
, 
öo_p
,

1169 &
xfs_«me_dŸdŸ
, 
‹ph™age_öo
,

1170 &
fú°
, &
df›s
, 
ƒes
);

1171 i‡(
îr
)

1172 
	`do_îr‹
(

1173 
	`_
("nameÑeplace op failed (%d), filesystem may be out of space\n"),

1174 
îr
);

1177 
îr
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
öo_p
);

1178 i‡(
îr
)

1179 
	`do_îr‹
(

1180 
	`_
("bmap finish failed (%d), filesystem may be out of space\n"),

1181 
îr
);

1183 
	`libxfs_å™s_commô
(
ç
);

1193 
ƒes
 = 
	`XFS_DIRENTER_SPACE_RES
(
mp
, 
x«me
.
Àn
);

1194 
îr
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_ªmove
,

1195 
ƒes
, 0, 0, &
ç
);

1196 i‡(
îr
)

1197 
	`do_îr‹
(

1198 
	`_
("spaceÑeservation failed (%d), filesystem may be out of space\n"),

1199 
îr
);

1201 
	`libxfs_å™s_ijoö
(
ç
, 
‹ph™age_ù
, 0);

1202 
	`libxfs_å™s_ijoö
(
ç
, 
öo_p
, 0);

1204 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

1205 
îr
 = -
	`libxfs_dú_¸óã«me
(
ç
, 
‹ph™age_ù
, &
x«me
, 
öo
,

1206 &
fú°
, &
df›s
, 
ƒes
);

1207 i‡(
îr
)

1208 
	`do_îr‹
(

1209 
	`_
("name create failed in %s (%d), filesystem may be out of space\n"),

1210 
ORPHANAGE
, 
îr
);

1211 
	`ASSERT
(
îr
 == 0);

1213 
	`£t_∆ök
(
	`VFS_I
(
öo_p
), 1);

1214 
	`libxfs_å™s_log_öode
(
ç
, 
öo_p
, 
XFS_ILOG_CORE
);

1216 
îr
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
öo_p
);

1217 i‡(
îr
)

1218 
	`do_îr‹
(

1219 
	`_
("bmap finish failed (%d), filesystem may be out of space\n"),

1220 
îr
);

1222 
	`libxfs_å™s_commô
(
ç
);

1224 
	`IRELE
(
öo_p
);

1225 
	`IRELE
(
‹ph™age_ù
);

1226 
	}
}

1229 
	$íåy_junked
(

1230 c⁄° *
msg
,

1231 c⁄° *
öame
,

1232 
xfs_öo_t
 
öo1
,

1233 
xfs_öo_t
 
öo2
)

1235 
	`do_w¨n
(
msg
, 
öame
, 
öo1
, 
öo2
);

1236 i‡(!
no_modify
) {

1237 i‡(
vîbo£
)

1238 
	`do_w¨n
(
	`_
(", markingÉntryÅo be junked\n"));

1240 
	`do_w¨n
("\n");

1242 
	`do_w¨n
(
	`_
(", would junkÉntry\n"));

1243  !
no_modify
;

1244 
	}
}

1252 
	$l⁄gf‹m_dú2_ªbuûd
(

1253 
xfs_mou¡_t
 *
mp
,

1254 
xfs_öo_t
 
öo
,

1255 
xfs_öode_t
 *
ù
,

1256 
öo_åì_node_t
 *
úec
,

1257 
öo_off£t
,

1258 
dú_hash_èb_t
 *
hashèb
)

1260 
îr‹
;

1261 
ƒes
;

1262 
xfs_å™s_t
 *
ç
;

1263 
xfs_fûeoff_t
 
œ°block
;

1264 
xfs_fsblock_t
 
fú°block
;

1265 
xfs_de„r_›s
 
df›s
;

1266 
xfs_öode_t
 
pù
;

1267 
dú_hash_ít_t
 *
p
;

1268 
d⁄e
;

1275 
	`do_w¨n
(
	`_
("ªbuûdög dúe˘‹y inodê%" 
PRIu64
 "\n"), 
öo
);

1283 
pù
.
i_öo
 = 
	`gë_öode_∑ª¡
(
úec
, 
öo_off£t
);

1284 i‡(
pù
.
i_öo
 =
NULLFSINO
 ||

1285 
	`libxfs_dú_öo_vÆid©e
(
mp
, 
pù
.
i_öo
))

1286 
pù
.
i_öo
 = 
mp
->
m_sb
.
sb_roŸöo
;

1288 
	`libxfs_de„r_öô
(&
df›s
, &
fú°block
);

1290 
ƒes
 = 
	`XFS_REMOVE_SPACE_RES
(
mp
);

1291 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_ªmove
, 
ƒes
, 0, 0, &
ç
);

1292 i‡(
îr‹
)

1293 
	`ªs_Áûed
(
îr‹
);

1294 
	`libxfs_å™s_ijoö
(
ç
, 
ù
, 0);

1296 i‡((
îr‹
 = -
	`libxfs_bm≠_œ°_off£t
(
ù
, &
œ°block
, 
XFS_DATA_FORK
)))

1297 
	`do_îr‹
(
	`_
("xfs_bmap_last_offset failed --Érror - %d\n"),

1298 
îr‹
);

1301 
îr‹
 = -
	`libxfs_bunm≠i
(
ç
, 
ù
, 0, 
œ°block
, 
XFS_BMAPI_METADATA
, 0,

1302 &
fú°block
, &
df›s
, &
d⁄e
);

1303 i‡(
îr‹
) {

1304 
	`do_w¨n
(
	`_
("xfs_bunm≠òÁûed --Éº‹ - %d\n"), 
îr‹
);

1305 
out_bm≠_ˇn˚l
;

1308 
	`ASSERT
(
d⁄e
);

1310 
îr‹
 = -
	`libxfs_dú_öô
(
ç
, 
ù
, &
pù
);

1311 i‡(
îr‹
) {

1312 
	`do_w¨n
(
	`_
("xfs_dú_öô faûed --Éº‹ - %d\n"), 
îr‹
);

1313 
out_bm≠_ˇn˚l
;

1316 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

1318 
	`libxfs_å™s_commô
(
ç
);

1320 i‡(
öo
 =
mp
->
m_sb
.
sb_roŸöo
)

1321 
√ed_roŸ_dŸdŸ
 = 0;

1325 
p
 = 
hashèb
->
fú°
;Ö;Ö =Ö->
√xtby‹dî
) {

1327 i‡(
p
->
«me
.name[0] == '/' || (p->name.name[0] == '.' &&

1328 (
p
->
«me
.
Àn
 == 1 || (p->name.len == 2 &&

1329 
p
->
«me
.name[1] == '.'))))

1332 
ƒes
 = 
	`XFS_CREATE_SPACE_RES
(
mp
, 
p
->
«me
.
Àn
);

1333 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_¸óã
,

1334 
ƒes
, 0, 0, &
ç
);

1335 i‡(
îr‹
)

1336 
	`ªs_Áûed
(
îr‹
);

1338 
	`libxfs_å™s_ijoö
(
ç
, 
ù
, 0);

1340 
	`libxfs_de„r_öô
(&
df›s
, &
fú°block
);

1341 
îr‹
 = -
	`libxfs_dú_¸óã«me
(
ç
, 
ù
, &
p
->
«me
,Ö->
öum
,

1342 &
fú°block
, &
df›s
, 
ƒes
);

1343 i‡(
îr‹
) {

1344 
	`do_w¨n
(

1345 
	`_
("«mê¸óã faûed i¿öÿ%" 
PRIu64
 " (%d), filesystem may be out of space\n"),

1346 
öo
, 
îr‹
);

1347 
out_bm≠_ˇn˚l
;

1350 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

1351 i‡(
îr‹
) {

1352 
	`do_w¨n
(

1353 
	`_
("bmap finish failed (%d), filesystem may be out of space\n"),

1354 
îr‹
);

1355 
out_bm≠_ˇn˚l
;

1358 
	`libxfs_å™s_commô
(
ç
);

1363 
out_bm≠_ˇn˚l
:

1364 
	`libxfs_de„r_ˇn˚l
(&
df›s
);

1365 
	`libxfs_å™s_ˇn˚l
(
ç
);

1367 
	}
}

1375 
	$dú2_kûl_block
(

1376 
xfs_mou¡_t
 *
mp
,

1377 
xfs_öode_t
 *
ù
,

1378 
xfs_dablk_t
 
da_bno
,

1379 
xfs_buf
 *
bp
)

1381 
xfs_da_¨gs_t
 
¨gs
;

1382 
îr‹
;

1383 
xfs_fsblock_t
 
fú°block
;

1384 
xfs_de„r_›s
 
df›s
;

1385 
ƒes
;

1386 
xfs_å™s_t
 *
ç
;

1388 
ƒes
 = 
	`XFS_REMOVE_SPACE_RES
(
mp
);

1389 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_ªmove
, 
ƒes
, 0, 0, &
ç
);

1390 i‡(
îr‹
)

1391 
	`ªs_Áûed
(
îr‹
);

1392 
	`libxfs_å™s_ijoö
(
ç
, 
ù
, 0);

1393 
	`libxfs_å™s_bjoö
(
ç
, 
bp
);

1394 
	`mem£t
(&
¨gs
, 0, (args));

1395 
	`libxfs_de„r_öô
(&
df›s
, &
fú°block
);

1396 
¨gs
.
dp
 = 
ù
;

1397 
¨gs
.
å™s
 = 
ç
;

1398 
¨gs
.
fú°block
 = &firstblock;

1399 
¨gs
.
df›s
 = &dfops;

1400 
¨gs
.
whichf‹k
 = 
XFS_DATA_FORK
;

1401 
¨gs
.
geo
 = 
mp
->
m_dú_geo
;

1402 i‡(
da_bno
 >
mp
->
m_dú_geo
->
Àafblk
 && da_bnÿ< mp->m_dú_geo->
‰ìblk
)

1403 
îr‹
 = -
	`libxfs_da_shrök_öode
(&
¨gs
, 
da_bno
, 
bp
);

1405 
îr‹
 = -
	`libxfs_dú2_shrök_öode
(&
¨gs
,

1406 
	`xfs_dú2_da_to_db
(
mp
->
m_dú_geo
, 
da_bno
), 
bp
);

1407 i‡(
îr‹
)

1408 
	`do_îr‹
(
	`_
("shrök_öodêÁûed inodê%" 
PRIu64
 " block %u\n"),

1409 
ù
->
i_öo
, 
da_bno
);

1410 
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

1411 
	`libxfs_å™s_commô
(
ç
);

1412 
	}
}

1419 
	$l⁄gf‹m_dú2_íåy_check_d©a
(

1420 
xfs_mou¡_t
 *
mp
,

1421 
xfs_öode_t
 *
ù
,

1422 *
num_ûÀgÆ
,

1423 *
√ed_dŸ
,

1424 
öo_åì_node_t
 *
cuºít_úec
,

1425 
cuºít_öo_off£t
,

1426 
xfs_buf
 **
bµ
,

1427 
dú_hash_èb_t
 *
hashèb
,

1428 
‰ìèb_t
 **
‰ìèbp
,

1429 
xfs_dablk_t
 
da_bno
,

1430 
isblock
)

1432 
xfs_dú2_d©≠å_t
 
addr
;

1433 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

1434 
xfs_buf
 *
bp
;

1435 
xfs_dú2_block_èû_t
 *
bç
;

1436 
xfs_dú2_d©a_hdr
 *
d
;

1437 
xfs_dú2_db_t
 
db
;

1438 
xfs_dú2_d©a_íåy_t
 *
dï
;

1439 
xfs_dú2_d©a_unu£d_t
 *
dup
;

1440 
xfs_dú2_d©a_‰ì
 *
bf
;

1441 *
íd±r
;

1442 
îr‹
;

1443 
xfs_fsblock_t
 
fú°block
;

1444 
xfs_de„r_›s
 
df›s
;

1445 
‚ame
[
MAXNAMELEN
 + 1];

1446 
‰ìèb_t
 *
‰ìèb
;

1447 
i
;

1448 
öo_off£t
;

1449 
xfs_öo_t
 
öum
;

1450 
öo_åì_node_t
 *
úec
;

1451 
junkô
;

1452 
œ°‰ì
;

1453 
Àn
;

1454 
nbad
;

1455 
√edlog
;

1456 
√edsˇn
;

1457 
xfs_öo_t
 
∑ª¡
;

1458 *
±r
;

1459 
xfs_å™s_t
 *
ç
;

1460 
w™tmagic
;

1461 
xfs_da_¨gs
 
da
 = {

1462 .
dp
 = 
ù
,

1463 .
geo
 = 
mp
->
m_dú_geo
,

1467 
bp
 = *
bµ
;

1468 
d
 = 
bp
->
b_addr
;

1469 
±r
 = (*)
	`M_DIROPS
(
mp
)->
	`d©a_íåy_p
(
d
);

1470 
nbad
 = 0;

1471 
√edsˇn
 = 
√edlog
 = 0;

1472 
junkô
 = 0;

1473 
‰ìèb
 = *
‰ìèbp
;

1474 i‡(
isblock
) {

1475 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
d
);

1476 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

1477 
íd±r
 = (*)
bÕ
;

1478 i‡(
íd±r
 > (*)
bç
)

1479 
íd±r
 = (*)
bç
;

1480 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1481 
w™tmagic
 = 
XFS_DIR3_BLOCK_MAGIC
;

1483 
w™tmagic
 = 
XFS_DIR2_BLOCK_MAGIC
;

1485 
íd±r
 = (*)
d
 + 
mp
->
m_dú_geo
->
blksize
;

1486 i‡(
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

1487 
w™tmagic
 = 
XFS_DIR3_DATA_MAGIC
;

1489 
w™tmagic
 = 
XFS_DIR2_DATA_MAGIC
;

1491 
db
 = 
	`xfs_dú2_da_to_db
(
mp
->
m_dú_geo
, 
da_bno
);

1494 i‡(
‰ìèb
->
«íts
 <
db
) {

1495 
‰ìèb_ít
 
e
;

1497 *
‰ìèbp
 = 
‰ìèb
 = 
	`ªÆloc
(‰ìèb, 
	`FREETAB_SIZE
(
db
 + 1));

1498 i‡(!
‰ìèb
) {

1499 
	`do_îr‹
(
	`_
("realloc failed in %s (%zu bytes)\n"),

1500 
__func__
, 
	`FREETAB_SIZE
(
db
 + 1));

1502 
e
.
v
 = 
NULLDATAOFF
;

1503 
e
.
s
 = 0;

1504 
i
 = 
‰ìèb
->
«íts
; i < 
db
; i++)

1505 
‰ìèb
->
íts
[
i
] = 
e
;

1506 
‰ìèb
->
«íts
 = 
db
 + 1;

1510 
±r
 < 
íd±r
) {

1513 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

1514 i‡(
XFS_DIR2_DATA_FREE_TAG
 =
	`be16_to_˝u
(
dup
->
‰ìèg
)) {

1517 i‡(
±r
 + 
	`be16_to_˝u
(
dup
->
Àngth
Ë> 
íd±r
 ||

1518 
	`be16_to_˝u
(
dup
->
Àngth
) == 0 ||

1519 (
	`be16_to_˝u
(
dup
->
Àngth
) &

1520 (
XFS_DIR2_DATA_ALIGN
 - 1)))

1524 i‡(
	`be16_to_˝u
(*
	`xfs_dú2_d©a_unu£d_èg_p
(
dup
)) !=

1525 (*)
dup
 - (*)
d
)

1529 i‡((
±r
 =(*)
	`M_DIROPS
(
mp
)->
	`d©a_íåy_p
(
d
)) &&

1530 (
±r
 + 
	`be16_to_˝u
(
dup
->
Àngth
Ë>
íd±r
)) {

1531 
junkô
 = 1;

1532 *
num_ûÀgÆ
 += 1;

1537 
±r
 +
	`be16_to_˝u
(
dup
->
Àngth
);

1538 i‡(
±r
 >
íd±r
)

1543 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
±r
;

1544 i‡(
±r
 + 
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
Ë> 
íd±r
)

1546 i‡(
	`be16_to_˝u
(*
	`M_DIROPS
(
mp
)->
	`d©a_íåy_èg_p
(
dï
)) !=

1547 (*)
dï
 - (*)
d
)

1549 
±r
 +
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

1553 i‡(
±r
 !
íd±r
) {

1554 i‡(
junkô
) {

1555 
	`do_w¨n
(

1556 
	`_
("em±y d©®block %u i¿dúe˘‹y inodê%" 
PRIu64
 ": "),

1557 
da_bno
, 
ù
->
i_öo
);

1559 
	`do_w¨n
(
_


1560 ("c‹ru± block %u i¿dúe˘‹y inodê%" 
PRIu64
 ": "),

1561 
da_bno
, 
ù
->
i_öo
);

1563 i‡(!
no_modify
) {

1564 
	`do_w¨n
(
	`_
("junking block\n"));

1565 
	`dú2_kûl_block
(
mp
, 
ù
, 
da_bno
, 
bp
);

1567 
	`do_w¨n
(
	`_
("would junk block\n"));

1568 
	`libxfs_putbuf
(
bp
);

1570 
‰ìèb
->
íts
[
db
].
v
 = 
NULLDATAOFF
;

1571 *
bµ
 = 
NULL
;

1576 i‡(
‰ìèb
->
√¡s
 < 
db
 + 1)

1577 
‰ìèb
->
√¡s
 = 
db
 + 1;

1579 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_ªmove
, 0, 0, 0, &
ç
);

1580 i‡(
îr‹
)

1581 
	`ªs_Áûed
(
îr‹
);

1582 
da
.
å™s
 = 
ç
;

1583 
	`libxfs_å™s_ijoö
(
ç
, 
ù
, 0);

1584 
	`libxfs_å™s_bjoö
(
ç
, 
bp
);

1585 
	`libxfs_å™s_bhﬁd
(
ç
, 
bp
);

1586 
	`libxfs_de„r_öô
(&
df›s
, &
fú°block
);

1587 i‡(
	`be32_to_˝u
(
d
->
magic
Ë!
w™tmagic
) {

1588 
	`do_w¨n
(

1589 
	`_
("bad dúe˘‹y block magi¯# %#x f‹ dúe˘‹y inodê%" 
PRIu64
 " block %d: "),

1590 
	`be32_to_˝u
(
d
->
magic
), 
ù
->
i_öo
, 
da_bno
);

1591 i‡(!
no_modify
) {

1592 
	`do_w¨n
(
	`_
("fixög magi¯#Åÿ%#x\n"), 
w™tmagic
);

1593 
d
->
magic
 = 
	`˝u_to_be32
(
w™tmagic
);

1594 
√edlog
 = 1;

1596 
	`do_w¨n
(
	`_
("would fix magi¯#Åÿ%#x\n"), 
w™tmagic
);

1598 
œ°‰ì
 = 0;

1599 
±r
 = (*)
	`M_DIROPS
(
mp
)->
	`d©a_íåy_p
(
d
);

1612 
±r
 < 
íd±r
) {

1613 
dup
 = (
xfs_dú2_d©a_unu£d_t
 *)
±r
;

1614 i‡(
	`be16_to_˝u
(
dup
->
‰ìèg
Ë=
XFS_DIR2_DATA_FREE_TAG
) {

1615 i‡(
œ°‰ì
) {

1616 
	`do_w¨n
(

1617 
	`_
("dúe˘‹y inodê%" 
PRIu64
 " block %u has consecutive freeÉntries: "),

1618 
ù
->
i_öo
, 
da_bno
);

1619 i‡(!
no_modify
) {

1621 
	`do_w¨n
(
	`_
("joiningÅogether\n"));

1622 
Àn
 = 
	`be16_to_˝u
(
dup
->
Àngth
);

1623 
	`libxfs_dú2_d©a_u£_‰ì
(&
da
, 
bp
, 
dup
,

1624 
±r
 - (*)
d
, 
Àn
, &
√edlog
,

1625 &
√edsˇn
);

1626 
	`libxfs_dú2_d©a_make_‰ì
(&
da
, 
bp
,

1627 
±r
 - (*)
d
, 
Àn
, &
√edlog
,

1628 &
√edsˇn
);

1630 
	`do_w¨n
(
	`_
("would joinÅogether\n"));

1632 
±r
 +
	`be16_to_˝u
(
dup
->
Àngth
);

1633 
œ°‰ì
 = 1;

1636 
addr
 = 
	`xfs_dú2_db_off_to_d©≠å
(
mp
->
m_dú_geo
, 
db
,

1637 
±r
 - (*)
d
);

1638 
dï
 = (
xfs_dú2_d©a_íåy_t
 *)
±r
;

1639 
±r
 +
	`M_DIROPS
(
mp
)->
	`d©a_ítsize
(
dï
->
«mñí
);

1640 
öum
 = 
	`be64_to_˝u
(
dï
->
öumbî
);

1641 
œ°‰ì
 = 0;

1647 i‡(
dï
->
«me
[0] == '/') {

1648 
nbad
++;

1649 i‡(!
no_modify
)

1650 
	`libxfs_dú2_d©a_log_íåy
(&
da
, 
bp
, 
dï
);

1654 
	`memmove
(
‚ame
, 
dï
->
«me
, dï->
«mñí
);

1655 
‚ame
[
dï
->
«mñí
] = '\0';

1656 
	`ASSERT
(
öum
 !
NULLFSINO
);

1658 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp, 
öum
),

1659 
	`XFS_INO_TO_AGINO
(
mp
, 
öum
));

1660 i‡(
úec
 =
NULL
) {

1661 
nbad
++;

1662 i‡(
	`íåy_junked
(

1663 
	`_
("íåy \"%s\" i¿dúe˘‹y inodê%" 
PRIu64
 "ÖointsÅoÇon-existent inode %" PRIu64 ""),

1664 
‚ame
, 
ù
->
i_öo
, 
öum
)) {

1665 
dï
->
«me
[0] = '/';

1666 
	`libxfs_dú2_d©a_log_íåy
(&
da
, 
bp
, 
dï
);

1670 
öo_off£t
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
öum
Ë- 
úec
->
öo_°¨äum
;

1677 i‡(
	`is_öode_‰ì
(
úec
, 
öo_off£t
)) {

1678 
nbad
++;

1679 i‡(
	`íåy_junked
(

1680 
	`_
("íåy \"%s\" i¿dúe˘‹y inodê%" 
PRIu64
 "ÖointsÅo free inode %" PRIu64),

1681 
‚ame
, 
ù
->
i_öo
, 
öum
)) {

1682 
dï
->
«me
[0] = '/';

1683 
	`libxfs_dú2_d©a_log_íåy
(&
da
, 
bp
, 
dï
);

1691 i‡(
öum
 =
mp
->
m_sb
.
sb_roŸöo
 && 
	`°rcmp
(
‚ame
, 
ORPHANAGE
) == 0) {

1695 i‡(!
	`öode_ißdú
(
úec
, 
öo_off£t
)) {

1696 
nbad
++;

1697 i‡(
	`íåy_junked
(

1698 
	`_
("%†(öÿ%" 
PRIu64
 ") inÑoot (%" PRIu64 ") isÇotá directory"),

1699 
ORPHANAGE
, 
öum
, 
ù
->
i_öo
)) {

1700 
dï
->
«me
[0] = '/';

1701 
	`libxfs_dú2_d©a_log_íåy
(&
da
, 
bp
, 
dï
);

1709 i‡(!
‹ph™age_öo
)

1710 
‹ph™age_öo
 = 
öum
;

1716 i‡(!
	`dú_hash_add
(
mp
, 
hashèb
, 
addr
, 
öum
, 
dï
->
«mñí
,

1717 
dï
->
«me
, 
	`M_DIROPS
(
mp
)->
	`d©a_gë_·y≥
(dep))) {

1718 
nbad
++;

1719 i‡(
	`íåy_junked
(

1720 
	`_
("íåy \"%s\" (öÿ%" 
PRIu64
 ") in dir %" PRIu64 " isá duplicateÇame"),

1721 
‚ame
, 
öum
, 
ù
->
i_öo
)) {

1722 
dï
->
«me
[0] = '/';

1723 
	`libxfs_dú2_d©a_log_íåy
(&
da
, 
bp
, 
dï
);

1725 i‡(
öum
 =
‹ph™age_öo
)

1726 
‹ph™age_öo
 = 0;

1734 i‡(
dŸdŸ_upd©e
)

1745 i‡(
dï
->
«mñí
 =2 && dï->
«me
[0] == '.' &&

1746 
dï
->
«me
[1] == '.') {

1747 i‡(
da_bno
 != 0) {

1749 
nbad
++;

1750 i‡(
	`íåy_junked
(

1751 
	`_
("íåy \"%s\" (öÿ%" 
PRIu64
 "Ëö dú %" PRIu64 " i†nŸ i¿thêthêfú° block"), 
‚ame
,

1752 
öum
, 
ù
->
i_öo
)) {

1753 
dï
->
«me
[0] = '/';

1754 
	`libxfs_dú2_d©a_log_íåy
(&
da
, 
bp
, 
dï
);

1759 
	`ASSERT
(
no_modify
 || !
	`vîify_öum
(
mp
, 
öum
));

1769 i‡(
ù
->
i_öo
 =
öum
) {

1770 
	`ASSERT
(
dï
->
«me
[0] ='.' && dï->
«mñí
 == 1);

1771 
	`add_öode_ªf
(
cuºít_úec
, 
cuºít_öo_off£t
);

1772 i‡(
da_bno
 != 0 ||

1773 
dï
 !
	`M_DIROPS
(
mp
)->
	`d©a_íåy_p
(
d
)) {

1775 
nbad
++;

1776 i‡(
	`íåy_junked
(

1777 
	`_
("íåy \"%s\" i¿dú %" 
PRIu64
 " isÇotÅhe firstÉntry"),

1778 
‚ame
, 
öum
, 
ù
->
i_öo
)) {

1779 
dï
->
«me
[0] = '/';

1780 
	`libxfs_dú2_d©a_log_íåy
(&
da
, 
bp
, 
dï
);

1783 *
√ed_dŸ
 = 0;

1789 i‡(
no_modify
 && 
	`vîify_öum
(
mp
, 
öum
))

1793 i‡(
	`xfs_sb_vîsi⁄_has·y≥
(&
mp
->
m_sb
)) {

1794 
__uöt8_t
 
dú_·y≥
;

1795 
__uöt8_t
 
öo_·y≥
;

1797 
dú_·y≥
 = 
	`M_DIROPS
(
mp
)->
	`d©a_gë_·y≥
(
dï
);

1798 
öo_·y≥
 = 
	`gë_öode_·y≥
(
úec
, 
öo_off£t
);

1800 i‡(
dú_·y≥
 !
öo_·y≥
) {

1801 i‡(
no_modify
) {

1802 
	`do_w¨n
(

1803 
	`_
("would fix fty≥ mism©ch (%d/%dËö dúe˘‹y/chûd inodê%" 
PRIu64
 "/%" PRIu64 "\n"),

1804 
dú_·y≥
, 
öo_·y≥
,

1805 
ù
->
i_öo
, 
öum
);

1807 
	`do_w¨n
(

1808 
	`_
("fixög fty≥ mism©ch (%d/%dËö dúe˘‹y/chûd inodê%" 
PRIu64
 "/%" PRIu64 "\n"),

1809 
dú_·y≥
, 
öo_·y≥
,

1810 
ù
->
i_öo
, 
öum
);

1811 
	`M_DIROPS
(
mp
)->
	`d©a_put_·y≥
(
dï
,

1812 
öo_·y≥
);

1813 
	`libxfs_dú2_d©a_log_íåy
(&
da
, 
bp
, 
dï
);

1814 
	`dú_hash_upd©e_·y≥
(
hashèb
, 
addr
,

1815 
öo_·y≥
);

1824 i‡(!
	`öode_ißdú
(
úec
, 
öo_off£t
)) {

1825 
	`add_öode_ªached
(
úec
, 
öo_off£t
);

1828 
∑ª¡
 = 
	`gë_öode_∑ª¡
(
úec
, 
öo_off£t
);

1829 
	`ASSERT
(
∑ª¡
 != 0);

1830 
junkô
 = 0;

1838 i‡(
	`is_öode_ªached
(
úec
, 
öo_off£t
)) {

1839 
junkô
 = 1;

1840 
	`do_w¨n
(

1841 
	`_
("íåy \"%s\" i¿dú %" 
PRIu64
"ÖointsÅoánálready connected directory inode %" PRIu64 "\n"),

1842 
‚ame
, 
ù
->
i_öo
, 
öum
);

1843 } i‡(
∑ª¡
 =
ù
->
i_öo
) {

1844 
	`add_öode_ªached
(
úec
, 
öo_off£t
);

1845 
	`add_öode_ªf
(
cuºít_úec
, 
cuºít_öo_off£t
);

1846 } i‡(
∑ª¡
 =
NULLFSINO
) {

1849 
	`do_w¨n
(

1850 
	`_
("íåy \"%s\" i¿dú inÿ%" 
PRIu64
 " doesn't haveá ..Éntry, will set it in ino %" PRIu64 ".\n"),

1851 
‚ame
, 
ù
->
i_öo
, 
öum
);

1852 
	`£t_öode_∑ª¡
(
úec
, 
öo_off£t
, 
ù
->
i_öo
);

1853 
	`add_öode_ªached
(
úec
, 
öo_off£t
);

1854 
	`add_öode_ªf
(
cuºít_úec
, 
cuºít_öo_off£t
);

1855 
	`add_dŸdŸ_upd©e
(
	`XFS_INO_TO_AGNO
(
mp
, 
öum
), 
úec
,

1856 
öo_off£t
);

1858 
junkô
 = 1;

1859 
	`do_w¨n
(

1860 
	`_
("íåy \"%s\" i¿dú inodê%" 
PRIu64
 " inconsistent with .. value (%" PRIu64 ") in ino %" PRIu64 "\n"),

1861 
‚ame
, 
ù
->
i_öo
, 
∑ª¡
, 
öum
);

1863 i‡(
junkô
) {

1864 i‡(
öum
 =
‹ph™age_öo
)

1865 
‹ph™age_öo
 = 0;

1866 
nbad
++;

1867 i‡(!
no_modify
) {

1868 
dï
->
«me
[0] = '/';

1869 
	`libxfs_dú2_d©a_log_íåy
(&
da
, 
bp
, 
dï
);

1870 i‡(
vîbo£
)

1871 
	`do_w¨n
(

1872 
	`_
("\twill clearÉntry \"%s\"\n"),

1873 
‚ame
);

1875 
	`do_w¨n
(
	`_
("\twould clearÉntry \"%s\"\n"),

1876 
‚ame
);

1880 *
num_ûÀgÆ
 +
nbad
;

1881 i‡(
√edsˇn
)

1882 
	`libxfs_dú2_d©a_‰ìsˇn_öt
(
mp
->
m_dú_geo
, 
	`M_DIROPS
(mp),

1883 
d
, &
i
);

1884 i‡(
√edlog
)

1885 
	`libxfs_dú2_d©a_log_hódî
(&
da
, 
bp
);

1886 
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

1887 
	`libxfs_å™s_commô
(
ç
);

1890 
bf
 = 
	`M_DIROPS
(
mp
)->
	`d©a_be°‰ì_p
(
d
);

1891 
‰ìèb
->
íts
[
db
].
v
 = 
	`be16_to_˝u
(
bf
[0].
Àngth
);

1892 
‰ìèb
->
íts
[
db
].
s
 = 0;

1893 
	}
}

1897 
	$__check_dú3_hódî
(

1898 
xfs_mou¡
 *
mp
,

1899 
xfs_buf
 *
bp
,

1900 
xfs_öo_t
 
öo
,

1901 
__be64
 
ow√r
,

1902 
__be64
 
blkno
,

1903 
uuid_t
 *
uuid
)

1907 i‡(
	`be64_to_˝u
(
ow√r
Ë!
öo
) {

1908 
	`do_w¨n
(

1909 
	`_
("ex≥˘ed ow√∏öodê%" 
PRIu64
 ", got %llu, directory block %" PRIu64 "\n"),

1910 
öo
, 
	`be64_to_˝u
(
ow√r
), 
bp
->
b_bn
);

1914 i‡(
	`be64_to_˝u
(
blkno
Ë!
bp
->
b_bn
) {

1915 
	`do_w¨n
(

1916 
	`_
("ex≥˘ed block %" 
PRIu64
 ", got %llu, directory inode %" PRIu64 "\n"),

1917 
bp
->
b_bn
, 
	`be64_to_˝u
(
blkno
), 
öo
);

1921 i‡(
	`∂©f‹m_uuid_com∑ª
(
uuid
, &
mp
->
m_sb
.
sb_mëa_uuid
) != 0) {

1922 
	`do_w¨n
(

1923 
	`_
("wr⁄g FS UUID, dúe˘‹y inodê%" 
PRIu64
 " block %" PRIu64 "\n"),

1924 
öo
, 
bp
->
b_bn
);

1929 
	}
}

1932 
	$check_da3_hódî
(

1933 
xfs_mou¡
 *
mp
,

1934 
xfs_buf
 *
bp
,

1935 
xfs_öo_t
 
öo
)

1937 
xfs_da3_blköfo
 *
öfo
 = 
bp
->
b_addr
;

1939  
	`__check_dú3_hódî
(
mp
, 
bp
, 
öo
, 
öfo
->
ow√r
, info->
blkno
,

1940 &
öfo
->
uuid
);

1941 
	}
}

1944 
	$check_dú3_hódî
(

1945 
xfs_mou¡
 *
mp
,

1946 
xfs_buf
 *
bp
,

1947 
xfs_öo_t
 
öo
)

1949 
xfs_dú3_blk_hdr
 *
öfo
 = 
bp
->
b_addr
;

1951  
	`__check_dú3_hódî
(
mp
, 
bp
, 
öo
, 
öfo
->
ow√r
, info->
blkno
,

1952 &
öfo
->
uuid
);

1953 
	}
}

1959 
	$l⁄gf‹m_dú2_check_Àaf
(

1960 
xfs_mou¡_t
 *
mp
,

1961 
xfs_öode_t
 *
ù
,

1962 
dú_hash_èb_t
 *
hashèb
,

1963 
‰ìèb_t
 *
‰ìèb
)

1965 
badèû
;

1966 
__be16
 *
be°•
;

1967 
xfs_buf
 *
bp
;

1968 
xfs_dablk_t
 
da_bno
;

1969 
i
;

1970 
xfs_dú2_Àaf_t
 *
Àaf
;

1971 
xfs_dú2_Àaf_èû_t
 *
…p
;

1972 
£evÆ
;

1973 
xfs_dú2_Àaf_íåy
 *
íts
;

1974 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

1975 
îr‹
;

1976 
fixô
 = 0;

1978 
da_bno
 = 
mp
->
m_dú_geo
->
Àafblk
;

1979 
îr‹
 = 
	`dú_ªad_buf
(
ù
, 
da_bno
, -1, &
bp
, &
xfs_dú3_Àaf1_buf_›s
,

1980 &
fixô
);

1981 i‡(
îr‹
 =
EFSBADCRC
 ||Éº‹ =
EFSCORRUPTED
 || 
fixô
) {

1982 
	`do_w¨n
(

1983 
	`_
("Àa‡block %u f‹ dúe˘‹y inodê%" 
PRIu64
 " bad CRC\n"),

1984 
da_bno
, 
ù
->
i_öo
);

1986 } i‡(
îr‹
) {

1987 
	`do_îr‹
(

1988 
	`_
("ˇn'àªad block %u f‹ dúe˘‹y inodê%" 
PRIu64
 ",Érror %d\n"),

1989 
da_bno
, 
ù
->
i_öo
, 
îr‹
);

1993 
Àaf
 = 
bp
->
b_addr
;

1994 
	`M_DIROPS
(
mp
)->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

1995 
íts
 = 
	`M_DIROPS
(
mp
)->
	`Àaf_íts_p
(
Àaf
);

1996 
…p
 = 
	`xfs_dú2_Àaf_èû_p
(
mp
->
m_dú_geo
, 
Àaf
);

1997 
be°•
 = 
	`xfs_dú2_Àaf_be°s_p
(
…p
);

1998 i‡(!(
Àafhdr
.
magic
 =
XFS_DIR2_LEAF1_MAGIC
 ||

1999 
Àafhdr
.
magic
 =
XFS_DIR3_LEAF1_MAGIC
) ||

2000 
Àafhdr
.
f‹w
 ||Üófhdr.
back
 ||

2001 
Àafhdr
.
cou¡
 <Üófhdr.
°Æe
 ||

2002 
Àafhdr
.
cou¡
 >

2003 
	`M_DIROPS
(
mp
)->
	`Àaf_max_íts
(mp->
m_dú_geo
) ||

2004 (*)&
íts
[
Àafhdr
.
cou¡
] > (*)
be°•
) {

2005 
	`do_w¨n
(

2006 
	`_
("Àa‡block %u f‹ dúe˘‹y inodê%" 
PRIu64
 " bad header\n"),

2007 
da_bno
, 
ù
->
i_öo
);

2008 
	`libxfs_putbuf
(
bp
);

2012 i‡(
Àafhdr
.
magic
 =
XFS_DIR3_LEAF1_MAGIC
) {

2013 
îr‹
 = 
	`check_da3_hódî
(
mp
, 
bp
, 
ù
->
i_öo
);

2014 i‡(
îr‹
) {

2015 
	`libxfs_putbuf
(
bp
);

2016  
îr‹
;

2020 
£evÆ
 = 
	`dú_hash_£e_Æl
(
hashèb
, 
íts
, 
Àafhdr
.
cou¡
,Üófhdr.
°Æe
);

2021 i‡(
	`dú_hash_check
(
hashèb
, 
ù
, 
£evÆ
)) {

2022 
	`libxfs_putbuf
(
bp
);

2025 
badèû
 = 
‰ìèb
->
√¡s
 !
	`be32_to_˝u
(
…p
->
be°cou¡
);

2026 
i
 = 0; !
badèû
 && i < 
	`be32_to_˝u
(
…p
->
be°cou¡
); i++) {

2027 
‰ìèb
->
íts
[
i
].
s
 = 1;

2028 
badèû
 = 
‰ìèb
->
íts
[
i
].
v
 !
	`be16_to_˝u
(
be°•
[i]);

2030 i‡(
badèû
) {

2031 
	`do_w¨n
(

2032 
	`_
("Àa‡block %u f‹ dúe˘‹y inodê%" 
PRIu64
 " badÅail\n"),

2033 
da_bno
, 
ù
->
i_öo
);

2034 
	`libxfs_putbuf
(
bp
);

2037 
	`libxfs_putbuf
(
bp
);

2038  
fixô
;

2039 
	}
}

2046 
	$l⁄gf‹m_dú2_check_node
(

2047 
xfs_mou¡_t
 *
mp
,

2048 
xfs_öode_t
 *
ù
,

2049 
dú_hash_èb_t
 *
hashèb
,

2050 
‰ìèb_t
 *
‰ìèb
)

2052 
xfs_buf
 *
bp
;

2053 
xfs_dablk_t
 
da_bno
;

2054 
xfs_dú2_db_t
 
fdb
;

2055 
xfs_dú2_‰ì_t
 *
‰ì
;

2056 
i
;

2057 
xfs_dú2_Àaf_t
 *
Àaf
;

2058 
xfs_fûeoff_t
 
√xt_da_bno
;

2059 
£evÆ
 = 0;

2060 
u£d
;

2061 
xfs_dú2_Àaf_íåy
 *
íts
;

2062 
xfs_dú3_i˛óf_hdr
 
Àafhdr
;

2063 
xfs_dú3_ic‰ì_hdr
 
‰ìhdr
;

2064 
__be16
 *
be°s
;

2065 
îr‹
;

2066 
fixô
 = 0;

2068 
da_bno
 = 
mp
->
m_dú_geo
->
Àafblk
, 
√xt_da_bno
 = 0;

2069 
√xt_da_bno
 !
NULLFILEOFF
 && 
da_bno
 < 
mp
->
m_dú_geo
->
‰ìblk
;

2070 
da_bno
 = (
xfs_dablk_t
)
√xt_da_bno
) {

2071 
√xt_da_bno
 = 
da_bno
 + 
mp
->
m_dú_geo
->
fsbcou¡
 - 1;

2072 i‡(
	`bm≠_√xt_off£t
(
NULL
, 
ù
, &
√xt_da_bno
, 
XFS_DATA_FORK
))

2082 
îr‹
 = 
	`dú_ªad_buf
(
ù
, 
da_bno
, -1, &
bp
,

2083 &
xfs_da3_node_buf_›s
, &
fixô
);

2084 i‡(
îr‹
) {

2085 
	`do_w¨n
(

2086 
	`_
("ˇn'àªadÜó‡block %u f‹ dúe˘‹y inodê%" 
PRIu64
 ",Érror %d\n"),

2087 
da_bno
, 
ù
->
i_öo
, 
îr‹
);

2090 
Àaf
 = 
bp
->
b_addr
;

2091 
	`M_DIROPS
(
mp
)->
	`Àaf_hdr_‰om_disk
(&
Àafhdr
, 
Àaf
);

2092 
íts
 = 
	`M_DIROPS
(
mp
)->
	`Àaf_íts_p
(
Àaf
);

2093 i‡(!(
Àafhdr
.
magic
 =
XFS_DIR2_LEAFN_MAGIC
 ||

2094 
Àafhdr
.
magic
 =
XFS_DIR3_LEAFN_MAGIC
 ||

2095 
Àafhdr
.
magic
 =
XFS_DA_NODE_MAGIC
 ||

2096 
Àafhdr
.
magic
 =
XFS_DA3_NODE_MAGIC
)) {

2097 
	`do_w¨n
(

2098 
	`_
("unknow¿magi¯numbî %#x f‹ block %u i¿dúe˘‹y inodê%" 
PRIu64
 "\n"),

2099 
Àafhdr
.
magic
, 
da_bno
, 
ù
->
i_öo
);

2100 
	`libxfs_putbuf
(
bp
);

2105 i‡(
Àafhdr
.
magic
 =
XFS_DIR3_LEAFN_MAGIC
 ||

2106 
Àafhdr
.
magic
 =
XFS_DA3_NODE_MAGIC
) {

2107 
îr‹
 = 
	`check_da3_hódî
(
mp
, 
bp
, 
ù
->
i_öo
);

2108 i‡(
îr‹
) {

2109 
	`libxfs_putbuf
(
bp
);

2110  
îr‹
;

2115 i‡(
Àafhdr
.
magic
 =
XFS_DA_NODE_MAGIC
 ||

2116 
Àafhdr
.
magic
 =
XFS_DA3_NODE_MAGIC
) {

2117 
	`libxfs_putbuf
(
bp
);

2125 
bp
->
b_›s
 = &
xfs_dú3_Àa‚_buf_›s
;

2126 i‡(
Àafhdr
.
cou¡
 > 
	`M_DIROPS
(
mp
)->
	`Àaf_max_íts
(mp->
m_dú_geo
) ||

2127 
Àafhdr
.
cou¡
 <Üófhdr.
°Æe
) {

2128 
	`do_w¨n
(

2129 
	`_
("Àa‡block %u f‹ dúe˘‹y inodê%" 
PRIu64
 " bad header\n"),

2130 
da_bno
, 
ù
->
i_öo
);

2131 
	`libxfs_putbuf
(
bp
);

2134 
£evÆ
 = 
	`dú_hash_£e_Æl
(
hashèb
, 
íts
,

2135 
Àafhdr
.
cou¡
,Üófhdr.
°Æe
);

2136 
	`libxfs_putbuf
(
bp
);

2137 i‡(
£evÆ
 !
DIR_HASH_CK_OK
)

2140 i‡(
	`dú_hash_check
(
hashèb
, 
ù
, 
£evÆ
))

2143 
da_bno
 = 
mp
->
m_dú_geo
->
‰ìblk
, 
√xt_da_bno
 = 0;

2144 
√xt_da_bno
 !
NULLFILEOFF
;

2145 
da_bno
 = (
xfs_dablk_t
)
√xt_da_bno
) {

2146 
√xt_da_bno
 = 
da_bno
 + 
mp
->
m_dú_geo
->
fsbcou¡
 - 1;

2147 i‡(
	`bm≠_√xt_off£t
(
NULL
, 
ù
, &
√xt_da_bno
, 
XFS_DATA_FORK
))

2150 
îr‹
 = 
	`dú_ªad_buf
(
ù
, 
da_bno
, -1, &
bp
,

2151 &
xfs_dú3_‰ì_buf_›s
, &
fixô
);

2152 i‡(
îr‹
) {

2153 
	`do_w¨n
(

2154 
	`_
("ˇn'àªad fªe•a˚ block %u f‹ dúe˘‹y inodê%" 
PRIu64
 ",Érror %d\n"),

2155 
da_bno
, 
ù
->
i_öo
, 
îr‹
);

2158 
‰ì
 = 
bp
->
b_addr
;

2159 
	`M_DIROPS
(
mp
)->
	`‰ì_hdr_‰om_disk
(&
‰ìhdr
, 
‰ì
);

2160 
be°s
 = 
	`M_DIROPS
(
mp
)->
	`‰ì_be°s_p
(
‰ì
);

2161 
fdb
 = 
	`xfs_dú2_da_to_db
(
mp
->
m_dú_geo
, 
da_bno
);

2162 i‡(!(
‰ìhdr
.
magic
 =
XFS_DIR2_FREE_MAGIC
 ||

2163 
‰ìhdr
.
magic
 =
XFS_DIR3_FREE_MAGIC
) ||

2164 
‰ìhdr
.
fú°db
 !=

2165 (
fdb
 - 
	`xfs_dú2_byã_to_db
(
mp
->
m_dú_geo
, 
XFS_DIR2_FREE_OFFSET
)) *

2166 
	`M_DIROPS
(
mp
)->
	`‰ì_max_be°s
(mp->
m_dú_geo
) ||

2167 
‰ìhdr
.
nvÆid
 < fªehdr.
nu£d
) {

2168 
	`do_w¨n
(

2169 
	`_
("‰ì block %u f‹ dúe˘‹y inodê%" 
PRIu64
 " bad header\n"),

2170 
da_bno
, 
ù
->
i_öo
);

2171 
	`libxfs_putbuf
(
bp
);

2175 i‡(
‰ìhdr
.
magic
 =
XFS_DIR3_FREE_MAGIC
) {

2176 
îr‹
 = 
	`check_dú3_hódî
(
mp
, 
bp
, 
ù
->
i_öo
);

2177 i‡(
îr‹
) {

2178 
	`libxfs_putbuf
(
bp
);

2179  
îr‹
;

2182 
i
 = 
u£d
 = 0; i < 
‰ìhdr
.
nvÆid
; i++) {

2183 i‡(
i
 + 
‰ìhdr
.
fú°db
 >
‰ìèb
->
√¡s
 ||

2184 
‰ìèb
->
íts
[
i
 + 
‰ìhdr
.
fú°db
].
v
 !=

2185 
	`be16_to_˝u
(
be°s
[
i
])) {

2186 
	`do_w¨n
(

2187 
	`_
("‰ì block %uÉ¡ry %òf‹ dúe˘‹y inÿ%" 
PRIu64
 " bad\n"),

2188 
da_bno
, 
i
, 
ù
->
i_öo
);

2189 
	`libxfs_putbuf
(
bp
);

2192 
u£d
 +
	`be16_to_˝u
(
be°s
[
i
]Ë!
NULLDATAOFF
;

2193 
‰ìèb
->
íts
[
i
 + 
‰ìhdr
.
fú°db
].
s
 = 1;

2195 i‡(
u£d
 !
‰ìhdr
.
nu£d
) {

2196 
	`do_w¨n
(

2197 
	`_
("‰ì block %u f‹ dúe˘‹y inodê%" 
PRIu64
 " badÇused\n"),

2198 
da_bno
, 
ù
->
i_öo
);

2199 
	`libxfs_putbuf
(
bp
);

2202 
	`libxfs_putbuf
(
bp
);

2204 
i
 = 0; i < 
‰ìèb
->
√¡s
; i++) {

2205 i‡((
‰ìèb
->
íts
[
i
].
s
 == 0) &&

2206 (
‰ìèb
->
íts
[
i
].
v
 !
NULLDATAOFF
)) {

2207 
	`do_w¨n
(

2208 
	`_
("missög fªëabÉ¡ry %u f‹ dúe˘‹y inodê%" 
PRIu64
 "\n"),

2209 
i
, 
ù
->
i_öo
);

2213  
fixô
;

2214 
	}
}

2222 
	$l⁄gf‹m_dú2_íåy_check
(
xfs_mou¡_t
 *
mp
,

2223 
xfs_öo_t
 
öo
,

2224 
xfs_öode_t
 *
ù
,

2225 *
num_ûÀgÆ
,

2226 *
√ed_dŸ
,

2227 
öo_åì_node_t
 *
úec
,

2228 
öo_off£t
,

2229 
dú_hash_èb_t
 *
hashèb
)

2231 
xfs_buf
 **
b∂i°
;

2232 
xfs_dablk_t
 
da_bno
;

2233 
‰ìèb_t
 *
‰ìèb
;

2234 
num_bps
;

2235 
i
;

2236 
isblock
;

2237 
i¶óf
;

2238 
xfs_fûeoff_t
 
√xt_da_bno
;

2239 
£evÆ
;

2240 
fixô
 = 0;

2241 
xfs_dú2_db_t
 
db
;

2242 
xfs_da_¨gs
 
¨gs
;

2244 *
√ed_dŸ
 = 1;

2245 
‰ìèb
 = 
	`mÆloc
(
	`FREETAB_SIZE
(
ù
->
i_d
.
di_size
 / 
mp
->
m_dú_geo
->
blksize
));

2246 i‡(!
‰ìèb
) {

2247 
	`do_îr‹
(
	`_
("mÆlo¯Áûed i¿%†(%" 
PRId64
 " bytes)\n"),

2248 
__func__
,

2249 
	`FREETAB_SIZE
(
ù
->
i_d
.
di_size
 / 
mp
->
m_dú_geo
->
blksize
));

2250 
	`exô
(1);

2252 
‰ìèb
->
«íts
 = 
ù
->
i_d
.
di_size
 / 
mp
->
m_dú_geo
->
blksize
;

2253 
‰ìèb
->
√¡s
 = 0;

2254 
i
 = 0; i < 
‰ìèb
->
«íts
; i++) {

2255 
‰ìèb
->
íts
[
i
].
v
 = 
NULLDATAOFF
;

2256 
‰ìèb
->
íts
[
i
].
s
 = 0;

2258 
num_bps
 = 
‰ìèb
->
«íts
;

2259 
b∂i°
 = 
	`ˇŒoc
(
num_bps
, (
xfs_buf
*));

2260 i‡(!
b∂i°
)

2261 
	`do_îr‹
(
	`_
("calloc failed in %s (%zu bytes)\n"),

2262 
__func__
, 
num_bps
 * (
xfs_buf
*));

2265 
¨gs
.
dp
 = 
ù
;

2266 
¨gs
.
geo
 = 
mp
->
m_dú_geo
;

2267 
	`libxfs_dú2_isblock
(&
¨gs
, &
isblock
);

2268 
	`libxfs_dú2_i¶óf
(&
¨gs
, &
i¶óf
);

2271 
da_bno
 = 0, 
√xt_da_bno
 = 0;

2272 
√xt_da_bno
 !
NULLFILEOFF
 && 
da_bno
 < 
mp
->
m_dú_geo
->
Àafblk
;

2273 
da_bno
 = (
xfs_dablk_t
)
√xt_da_bno
) {

2274 c⁄° 
xfs_buf_›s
 *
›s
;

2275 
îr‹
;

2276 
xfs_dú2_d©a_hdr
 *
d
;

2278 
√xt_da_bno
 = 
da_bno
 + 
mp
->
m_dú_geo
->
fsbcou¡
 - 1;

2279 i‡(
	`bm≠_√xt_off£t
(
NULL
, 
ù
, &
√xt_da_bno
, 
XFS_DATA_FORK
)) {

2284 i‡(
da_bno
 == 0) {

2285 
fixô
++;

2286 
out_fix
;

2291 
db
 = 
	`xfs_dú2_da_to_db
(
mp
->
m_dú_geo
, 
da_bno
);

2292 i‡(
db
 >
num_bps
) {

2294 
num_bps
 = 
db
 + 1;

2295 
b∂i°
 = 
	`ªÆloc
(b∂i°, 
num_bps
 * (
xfs_buf
*));

2296 i‡(!
b∂i°
)

2297 
	`do_îr‹
(
	`_
("realloc failed in %s (%zu bytes)\n"),

2298 
__func__
,

2299 
num_bps
 * (
xfs_buf
*));

2302 i‡(
isblock
)

2303 
›s
 = &
xfs_dú3_block_buf_›s
;

2305 
›s
 = &
xfs_dú3_d©a_buf_›s
;

2307 
îr‹
 = 
	`dú_ªad_buf
(
ù
, 
da_bno
, -1, &
b∂i°
[
db
], 
›s
, &
fixô
);

2308 i‡(
îr‹
) {

2309 
	`do_w¨n
(

2310 
	`_
("ˇn'àªad d©®block %u f‹ dúe˘‹y inodê%" 
PRIu64
 "Érror %d\n"),

2311 
da_bno
, 
öo
, 
îr‹
);

2312 *
num_ûÀgÆ
 += 1;

2319 i‡(
isblock
) {

2320 
fixô
++;

2321 
out_fix
;

2327 
d
 = 
b∂i°
[
db
]->
b_addr
;

2328 i‡(
	`be32_to_˝u
(
d
->
magic
Ë=
XFS_DIR3_BLOCK_MAGIC
 ||

2329 
	`be32_to_˝u
(
d
->
magic
Ë=
XFS_DIR3_DATA_MAGIC
) {

2330 
xfs_buf
 *
bp
 = 
b∂i°
[
db
];

2332 
îr‹
 = 
	`check_dú3_hódî
(
mp
, 
bp
, 
öo
);

2333 i‡(
îr‹
) {

2334 
fixô
++;

2339 
	`l⁄gf‹m_dú2_íåy_check_d©a
(
mp
, 
ù
, 
num_ûÀgÆ
, 
√ed_dŸ
,

2340 
úec
, 
öo_off£t
, &
b∂i°
[
db
], 
hashèb
,

2341 &
‰ìèb
, 
da_bno
, 
isblock
);

2343 
fixô
 |(*
num_ûÀgÆ
 !0Ë|| 
	`dú2_is_badöo
(
öo
Ë|| *
√ed_dŸ
;

2345 i‡(!
dŸdŸ_upd©e
) {

2347 i‡(
isblock
) {

2348 
xfs_dú2_d©a_hdr
 *
block
;

2349 
xfs_dú2_block_èû_t
 *
bç
;

2350 
xfs_dú2_Àaf_íåy_t
 *
bÕ
;

2352 
block
 = 
b∂i°
[0]->
b_addr
;

2353 
bç
 = 
	`xfs_dú2_block_èû_p
(
mp
->
m_dú_geo
, 
block
);

2354 
bÕ
 = 
	`xfs_dú2_block_Àaf_p
(
bç
);

2355 
£evÆ
 = 
	`dú_hash_£e_Æl
(
hashèb
, 
bÕ
,

2356 
	`be32_to_˝u
(
bç
->
cou¡
),

2357 
	`be32_to_˝u
(
bç
->
°Æe
));

2358 i‡(
	`dú_hash_check
(
hashèb
, 
ù
, 
£evÆ
))

2359 
fixô
 |= 1;

2360 } i‡(
i¶óf
) {

2361 
fixô
 |
	`l⁄gf‹m_dú2_check_Àaf
(
mp
, 
ù
, 
hashèb
,

2362 
‰ìèb
);

2364 
fixô
 |
	`l⁄gf‹m_dú2_check_node
(
mp
, 
ù
, 
hashèb
,

2365 
‰ìèb
);

2368 
out_fix
:

2369 i‡(!
no_modify
 && (
fixô
 || 
dŸdŸ_upd©e
)) {

2370 
	`dú_hash_dup_«mes
(
hashèb
);

2371 
i
 = 0; i < 
num_bps
; i++)

2372 i‡(
b∂i°
[
i
])

2373 
	`libxfs_putbuf
(
b∂i°
[
i
]);

2374 
	`l⁄gf‹m_dú2_ªbuûd
(
mp
, 
öo
, 
ù
, 
úec
, 
öo_off£t
, 
hashèb
);

2375 *
num_ûÀgÆ
 = 0;

2376 *
√ed_dŸ
 = 0;

2378 
i
 = 0; i < 
num_bps
; i++)

2379 i‡(
b∂i°
[
i
])

2380 
	`libxfs_putbuf
(
b∂i°
[
i
]);

2383 
	`‰ì
(
b∂i°
);

2384 
	`‰ì
(
‰ìèb
);

2385 
	}
}

2391 
xfs_dú2_sf_íåy
 *

2392 
	$sh‹tf‹m_dú2_junk
(

2393 
xfs_mou¡
 *
mp
,

2394 
xfs_dú2_sf_hdr
 *
sÂ
,

2395 
xfs_dú2_sf_íåy
 *
s„p
,

2396 
xfs_öo_t
 
löo
,

2397 *
max_size
,

2398 *
ödex
,

2399 *
byãs_dñëed
,

2400 *
öo_dúty
)

2402 
xfs_dú2_sf_íåy
 *
√xt_s„p
;

2403 
√xt_Àn
;

2404 
√xt_ñí
;

2406 i‡(
löo
 =
‹ph™age_öo
)

2407 
‹ph™age_öo
 = 0;

2409 
√xt_ñí
 = 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 
s„p
->
«mñí
);

2410 
√xt_s„p
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
sÂ
, 
s„p
);

2416 i‡(
no_modify
) {

2417 
	`do_w¨n
(
	`_
("would junkÉntry\n"));

2418  
√xt_s„p
;

2425 
√xt_Àn
 = *
max_size
 - ((
öçå_t
)
√xt_s„p
 - (öçå_t)
sÂ
);

2426 *
max_size
 -
√xt_ñí
;

2427 *
byãs_dñëed
 +
√xt_ñí
;

2429 
	`memmove
(
s„p
, 
√xt_s„p
, 
√xt_Àn
);

2430 
	`mem£t
((*)((
öçå_t
)
s„p
 + 
√xt_Àn
), 0, 
√xt_ñí
);

2431 
sÂ
->
cou¡
 -= 1;

2432 *
öo_dúty
 = 1;

2438 (*
ödex
)--;

2440 i‡(
vîbo£
)

2441 
	`do_w¨n
(
	`_
("junkingÉntry\n"));

2443 
	`do_w¨n
("\n");

2444  
s„p
;

2445 
	}
}

2448 
	$sh‹tf‹m_dú2_íåy_check
(
xfs_mou¡_t
 *
mp
,

2449 
xfs_öo_t
 
öo
,

2450 
xfs_öode_t
 *
ù
,

2451 *
öo_dúty
,

2452 
öo_åì_node_t
 *
cuºít_úec
,

2453 
cuºít_öo_off£t
,

2454 
dú_hash_èb_t
 *
hashèb
)

2456 
xfs_öo_t
 
löo
;

2457 
xfs_öo_t
 
∑ª¡
;

2458 
xfs_dú2_sf_hdr
 *
sÂ
;

2459 
xfs_dú2_sf_íåy
 *
s„p
;

2460 
xfs_dú2_sf_íåy
 *
√xt_s„p
;

2461 
xfs_if‹k
 *
iÂ
;

2462 
öo_åì_node
 *
úec
;

2463 
max_size
;

2464 
öo_off£t
;

2465 
i
;

2466 
bad_s‚amñí
;

2467 
«mñí
;

2468 
byãs_dñëed
;

2469 
‚ame
[
MAXNAMELEN
 + 1];

2470 
i8
;

2472 
iÂ
 = &
ù
->
i_df
;

2473 
sÂ
 = (
xfs_dú2_sf_hdr
 *Ë
iÂ
->
if_u1
.
if_d©a
;

2474 *
öo_dúty
 = 0;

2475 
byãs_dñëed
 = 0;

2477 
max_size
 = 
iÂ
->
if_byãs
;

2478 
	`ASSERT
(
ù
->
i_d
.
di_size
 <
iÂ
->
if_byãs
);

2483 i‡(
dŸdŸ_upd©e
) {

2484 
∑ª¡
 = 
	`gë_öode_∑ª¡
(
cuºít_úec
, 
cuºít_öo_off£t
);

2485 i‡(
no_modify
) {

2486 
	`do_w¨n
(

2487 
	`_
("would së .. i¿s‡dú inodê%" 
PRIu64
 "Åo %" PRIu64 "\n"),

2488 
öo
, 
∑ª¡
);

2490 
	`do_w¨n
(

2491 
	`_
("£âög .. i¿s‡dú inodê%" 
PRIu64
 "Åo %" PRIu64 "\n"),

2492 
öo
, 
∑ª¡
);

2493 
	`M_DIROPS
(
mp
)->
	`sf_put_∑ª¡_öo
(
sÂ
, 
∑ª¡
);

2494 *
öo_dúty
 = 1;

2505 
	`add_öode_ªf
(
cuºít_úec
, 
cuºít_öo_off£t
);

2510 
i8
 = 
	`M_DIROPS
(
mp
)->
	`sf_gë_∑ª¡_öo
(
sÂ
Ë> 
XFS_DIR2_MAX_SHORT_INUM
;

2517 
s„p
 = 
√xt_s„p
 = 
	`xfs_dú2_sf_fú°íåy
(
sÂ
);

2519 
i
 = 0; i < 
sÂ
->
cou¡
 && 
max_size
 >

2520 (
öçå_t
)
√xt_s„p
 - (öçå_t)
sÂ
;

2521 
s„p
 = 
√xt_s„p
, 
i
++) {

2522 
bad_s‚amñí
 = 0;

2524 
löo
 = 
	`M_DIROPS
(
mp
)->
	`sf_gë_öo
(
sÂ
, 
s„p
);

2526 
«mñí
 = 
s„p
->namelen;

2528 
	`ASSERT
(
no_modify
 || 
«mñí
 > 0);

2530 i‡(
no_modify
 && 
«mñí
 == 0) {

2539 
bad_s‚amñí
 = 1;

2541 i‡(
i
 =
sÂ
->
cou¡
 - 1) {

2542 
«mñí
 = 
ù
->
i_d
.
di_size
 -

2543 ((
öçå_t
Ë&
s„p
->
«me
[0] -

2544 (
öçå_t
Ë
sÂ
);

2552 } i‡(
no_modify
 && (
öçå_t
Ë
s„p
 - (öçå_tË
sÂ
 +

2553 + 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 
s„p
->
«mñí
)

2554 > 
ù
->
i_d
.
di_size
) {

2555 
bad_s‚amñí
 = 1;

2557 i‡(
i
 =
sÂ
->
cou¡
 - 1) {

2558 
«mñí
 = 
ù
->
i_d
.
di_size
 -

2559 ((
öçå_t
Ë&
s„p
->
«me
[0] -

2560 (
öçå_t
Ë
sÂ
);

2570 
	`memmove
(
‚ame
, 
s„p
->
«me
, s„p->
«mñí
);

2571 
‚ame
[
s„p
->
«mñí
] = '\0';

2573 
	`ASSERT
(
no_modify
 || (
löo
 !
NULLFSINO
 &&Üino != 0));

2574 
	`ASSERT
(
no_modify
 || !
	`vîify_öum
(
mp
, 
löo
));

2581 i‡(
no_modify
 && 
	`vîify_öum
(
mp
, 
löo
)) {

2582 
√xt_s„p
 = 
	`M_DIROPS
(
mp
)->
	`sf_√xã¡ry
(
sÂ
, 
s„p
);

2586 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp, 
löo
),

2587 
	`XFS_INO_TO_AGINO
(
mp
, 
löo
));

2589 i‡(
úec
 =
NULL
) {

2590 
	`do_w¨n
(

2591 
	`_
("íåy \"%s\" i¿sh‹tf‹m dúe˘‹y %" 
PRIu64
 "ÑeferencesÇon-existent inode %" PRIu64 "\n"),

2592 
‚ame
, 
öo
, 
löo
);

2593 
√xt_s„p
 = 
	`sh‹tf‹m_dú2_junk
(
mp
, 
sÂ
, 
s„p
, 
löo
,

2594 &
max_size
, &
i
, &
byãs_dñëed
,

2595 
öo_dúty
);

2599 
öo_off£t
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
löo
Ë- 
úec
->
öo_°¨äum
;

2606 i‡(
	`is_öode_‰ì
(
úec
, 
öo_off£t
)) {

2607 
	`do_w¨n
(

2608 
	`_
("íåy \"%s\" i¿sh‹tf‹m dúe˘‹y inodê%" 
PRIu64
 "ÖointsÅo free inode %" PRIu64 "\n"),

2609 
‚ame
, 
öo
, 
löo
);

2610 
√xt_s„p
 = 
	`sh‹tf‹m_dú2_junk
(
mp
, 
sÂ
, 
s„p
, 
löo
,

2611 &
max_size
, &
i
, &
byãs_dñëed
,

2612 
öo_dúty
);

2618 i‡(
öo
 =
mp
->
m_sb
.
sb_roŸöo
 && 
	`°rcmp
(
‚ame
, 
ORPHANAGE
) == 0) {

2622 i‡(!
	`öode_ißdú
(
úec
, 
öo_off£t
)) {

2623 
	`do_w¨n
(

2624 
	`_
("%†(öÿ%" 
PRIu64
 ") inÑoot (%" PRIu64 ") isÇotá directory"),

2625 
ORPHANAGE
, 
löo
, 
öo
);

2626 
√xt_s„p
 = 
	`sh‹tf‹m_dú2_junk
(
mp
, 
sÂ
, 
s„p
,

2627 
löo
, &
max_size
, &
i
,

2628 &
byãs_dñëed
, 
öo_dúty
);

2635 i‡(!
‹ph™age_öo
)

2636 
‹ph™age_öo
 = 
löo
;

2641 i‡(!
	`dú_hash_add
(
mp
, 
hashèb
, (
xfs_dú2_d©≠å_t
)

2642 (
s„p
 - 
	`xfs_dú2_sf_fú°íåy
(
sÂ
)),

2643 
löo
, 
s„p
->
«mñí
, s„p->
«me
,

2644 
	`M_DIROPS
(
mp
)->
	`sf_gë_·y≥
(
s„p
))) {

2645 
	`do_w¨n
(

2646 
	`_
("íåy \"%s\" (öÿ%" 
PRIu64
 ") in dir %" PRIu64 " isá duplicateÇame"),

2647 
‚ame
, 
löo
, 
öo
);

2648 
√xt_s„p
 = 
	`sh‹tf‹m_dú2_junk
(
mp
, 
sÂ
, 
s„p
, 
löo
,

2649 &
max_size
, &
i
, &
byãs_dñëed
,

2650 
öo_dúty
);

2654 i‡(!
	`öode_ißdú
(
úec
, 
öo_off£t
)) {

2659 
	`add_öode_ªached
(
úec
, 
öo_off£t
);

2661 
∑ª¡
 = 
	`gë_öode_∑ª¡
(
úec
, 
öo_off£t
);

2668 i‡(
	`is_öode_ªached
(
úec
, 
öo_off£t
)) {

2669 
	`do_w¨n
(

2670 
	`_
("íåy \"%s\" i¿dúe˘‹y inodê%" 
PRIu64


2671 "Ñe„ªn˚†Æªady c⁄√˘ed inodê%" 
PRIu64
 ".\n"),

2672 
‚ame
, 
öo
, 
löo
);

2673 
√xt_s„p
 = 
	`sh‹tf‹m_dú2_junk
(
mp
, 
sÂ
, 
s„p
,

2674 
löo
, &
max_size
, &
i
,

2675 &
byãs_dñëed
, 
öo_dúty
);

2677 } i‡(
∑ª¡
 =
öo
) {

2678 
	`add_öode_ªached
(
úec
, 
öo_off£t
);

2679 
	`add_öode_ªf
(
cuºít_úec
, 
cuºít_öo_off£t
);

2680 } i‡(
∑ª¡
 =
NULLFSINO
) {

2683 
	`do_w¨n
(

2684 
	`_
("íåy \"%s\" i¿dú inÿ%" 
PRIu64
 " doesn't haveá ..Éntry, will set it in ino %" PRIu64 ".\n"),

2685 
‚ame
, 
öo
, 
löo
);

2686 
	`£t_öode_∑ª¡
(
úec
, 
öo_off£t
, 
öo
);

2687 
	`add_öode_ªached
(
úec
, 
öo_off£t
);

2688 
	`add_öode_ªf
(
cuºít_úec
, 
cuºít_öo_off£t
);

2689 
	`add_dŸdŸ_upd©e
(
	`XFS_INO_TO_AGNO
(
mp
, 
löo
),

2690 
úec
, 
öo_off£t
);

2692 
	`do_w¨n
(

2693 
	`_
("íåy \"%s\" i¿dúe˘‹y inodê%" 
PRIu64


2694 "ÇŸ c⁄si°íàwôh .. vÆuê(%" 
PRIu64


2695 "Ëö inodê%" 
PRIu64
 ",\n"),

2696 
‚ame
, 
öo
, 
∑ª¡
, 
löo
);

2697 
√xt_s„p
 = 
	`sh‹tf‹m_dú2_junk
(
mp
, 
sÂ
, 
s„p
,

2698 
löo
, &
max_size
, &
i
,

2699 &
byãs_dñëed
, 
öo_dúty
);

2705 i‡(
	`xfs_sb_vîsi⁄_has·y≥
(&
mp
->
m_sb
)) {

2706 
__uöt8_t
 
dú_·y≥
;

2707 
__uöt8_t
 
öo_·y≥
;

2709 
dú_·y≥
 = 
	`M_DIROPS
(
mp
)->
	`sf_gë_·y≥
(
s„p
);

2710 
öo_·y≥
 = 
	`gë_öode_·y≥
(
úec
, 
öo_off£t
);

2712 i‡(
dú_·y≥
 !
öo_·y≥
) {

2713 i‡(
no_modify
) {

2714 
	`do_w¨n
(

2715 
	`_
("would fix fty≥ mism©ch (%d/%dËö dúe˘‹y/chûd inodê%" 
PRIu64
 "/%" PRIu64 "\n"),

2716 
dú_·y≥
, 
öo_·y≥
,

2717 
öo
, 
löo
);

2719 
	`do_w¨n
(

2720 
	`_
("fixög fty≥ mism©ch (%d/%dËö dúe˘‹y/chûd inodê%" 
PRIu64
 "/%" PRIu64 "\n"),

2721 
dú_·y≥
, 
öo_·y≥
,

2722 
öo
, 
löo
);

2723 
	`M_DIROPS
(
mp
)->
	`sf_put_·y≥
(
s„p
,

2724 
öo_·y≥
);

2725 
	`dú_hash_upd©e_·y≥
(
hashèb
,

2726 (
xfs_dú2_d©≠å_t
)(
s„p
 - 
	`xfs_dú2_sf_fú°íåy
(
sÂ
)),

2727 
öo_·y≥
);

2728 *
öo_dúty
 = 1;

2733 i‡(
löo
 > 
XFS_DIR2_MAX_SHORT_INUM
)

2734 
i8
++;

2741 
	`ASSERT
(
no_modify
 || 
bad_s‚amñí
 == 0);

2742 
√xt_s„p
 = (
xfs_dú2_sf_íåy
 *)((
öçå_t
)
s„p
 +

2743 (
bad_s‚amñí


2744 ? 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 
«mñí
)

2745 : 
	`M_DIROPS
(
mp
)->
	`sf_ítsize
(
sÂ
, 
s„p
->
«mñí
)));

2748 i‡(
sÂ
->
i8cou¡
 !
i8
) {

2749 i‡(
no_modify
) {

2750 
	`do_w¨n
(
	`_
("would fix i8cou¡ i¿öodê%" 
PRIu64
 "\n"),

2751 
öo
);

2753 i‡(
i8
 == 0) {

2754 
xfs_dú2_sf_íåy
 *
tmp_s„p
;

2756 
tmp_s„p
 = 
√xt_s„p
;

2757 
	`¥o˚ss_sf_dú2_fixi8
(
mp
, 
sÂ
, &
tmp_s„p
);

2758 
byãs_dñëed
 +=

2759 (
öçå_t
)
√xt_s„p
 -

2760 (
öçå_t
)
tmp_s„p
;

2761 
√xt_s„p
 = 
tmp_s„p
;

2763 
sÂ
->
i8cou¡
 = 
i8
;

2764 *
öo_dúty
 = 1;

2765 
	`do_w¨n
(
	`_
("fixög i8cou¡ i¿öodê%" 
PRIu64
 "\n"),

2766 
öo
);

2773 i‡(*
öo_dúty
 && 
byãs_dñëed
 > 0) {

2774 
	`ASSERT
(!
no_modify
);

2775 
	`libxfs_id©a_ªÆloc
(
ù
, -
byãs_dñëed
, 
XFS_DATA_FORK
);

2776 
ù
->
i_d
.
di_size
 -
byãs_dñëed
;

2779 i‡(
ù
->
i_d
.
di_size
 !ù->
i_df
.
if_byãs
) {

2780 
	`ASSERT
(
ù
->
i_df
.
if_byãs
 =(
xfs_fsize_t
)

2781 ((
öçå_t
Ë
√xt_s„p
 - (öçå_tË
sÂ
));

2782 
ù
->
i_d
.
di_size
 = (
xfs_fsize_t
)

2783 ((
öçå_t
Ë
√xt_s„p
 - (öçå_tË
sÂ
);

2784 
	`do_w¨n
(

2785 
	`_
("£âög sizêtÿ%" 
PRId64
 " bytesÅoÑeflect junkedÉntries\n"),

2786 
ù
->
i_d
.
di_size
);

2787 *
öo_dúty
 = 1;

2789 
	}
}

2795 
	$¥o˚ss_dú_öode
(

2796 
xfs_mou¡_t
 *
mp
,

2797 
xfs_agnumbî_t
 
agno
,

2798 
öo_åì_node_t
 *
úec
,

2799 
öo_off£t
)

2801 
xfs_öo_t
 
öo
;

2802 
xfs_de„r_›s
 
df›s
;

2803 
xfs_fsblock_t
 
fú°
;

2804 
xfs_öode_t
 *
ù
;

2805 
xfs_å™s_t
 *
ç
;

2806 
dú_hash_èb_t
 *
hashèb
;

2807 
√ed_dŸ
;

2808 
dúty
, 
num_ûÀgÆ
, 
îr‹
, 
ƒes
;

2810 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
úec
->
öo_°¨äum
 + 
öo_off£t
);

2818 
	`ASSERT
(!
	`is_öode_ªfchecked
(
úec
, 
öo_off£t
Ë|| 
dŸdŸ_upd©e
);

2820 
îr‹
 = -
	`libxfs_igë
(
mp
, 
NULL
, 
öo
, 0, &
ù
);

2821 i‡(
îr‹
) {

2822 i‡(!
no_modify
)

2823 
	`do_îr‹
(

2824 
	`_
("couldn'àm≠ inodê%" 
PRIu64
 ",Érr = %d\n"),

2825 
öo
, 
îr‹
);

2827 
	`do_w¨n
(

2828 
	`_
("couldn'àm≠ inodê%" 
PRIu64
 ",Érr = %d\n"),

2829 
öo
, 
îr‹
);

2836 i‡(
mp
->
m_sb
.
sb_roŸöo
 =
öo
) {

2837 
	`add_öode_ªached
(
úec
, 0);

2838 
	`add_öode_ªf
(
úec
, 0);

2842 
	`add_öode_ªfchecked
(
úec
, 0);

2846 
√ed_dŸ
 = 
dúty
 = 
num_ûÀgÆ
 = 0;

2848 i‡(
mp
->
m_sb
.
sb_roŸöo
 =
öo
) {

2857 
	`add_öode_ªached
(
úec
, 
öo_off£t
);

2860 
	`add_öode_ªfchecked
(
úec
, 
öo_off£t
);

2862 
hashèb
 = 
	`dú_hash_öô
(
ù
->
i_d
.
di_size
);

2867 
ù
->
i_d
.
di_f‹m©
) {

2868 
XFS_DINODE_FMT_EXTENTS
:

2869 
XFS_DINODE_FMT_BTREE
:

2876 
	`l⁄gf‹m_dú2_íåy_check
(
mp
, 
öo
, 
ù
,

2877 &
num_ûÀgÆ
, &
√ed_dŸ
,

2878 
úec
, 
öo_off£t
,

2879 
hashèb
);

2882 
XFS_DINODE_FMT_LOCAL
:

2889 
ƒes
 = 
no_modify
 ? 0 : 
	`XFS_REMOVE_SPACE_RES
(
mp
);

2890 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_ªmove
,

2891 
ƒes
, 0, 0, &
ç
);

2892 i‡(
îr‹
)

2893 
	`ªs_Áûed
(
îr‹
);

2895 
	`libxfs_å™s_ijoö
(
ç
, 
ù
, 0);

2897 
	`sh‹tf‹m_dú2_íåy_check
(
mp
, 
öo
, 
ù
, &
dúty
,

2898 
úec
, 
öo_off£t
,

2899 
hashèb
);

2901 
	`ASSERT
(
dúty
 =0 || (dúty && !
no_modify
));

2902 i‡(
dúty
) {

2903 
	`libxfs_å™s_log_öode
(
ç
, 
ù
,

2904 
XFS_ILOG_CORE
 | 
XFS_ILOG_DDATA
);

2905 
	`libxfs_å™s_commô
(
ç
);

2907 
	`libxfs_å™s_ˇn˚l
(
ç
);

2914 
	`dú_hash_d⁄e
(
hashèb
);

2926 i‡(!
no_modify
 && 
√ed_roŸ_dŸdŸ
 && 
öo
 =
mp
->
m_sb
.
sb_roŸöo
) {

2927 
	`ASSERT
(
ù
->
i_d
.
di_f‹m©
 !
XFS_DINODE_FMT_LOCAL
);

2929 
	`do_w¨n
(
	`_
("recreatingÑoot directory ..Éntry\n"));

2931 
ƒes
 = 
	`XFS_MKDIR_SPACE_RES
(
mp
, 2);

2932 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_mkdú
,

2933 
ƒes
, 0, 0, &
ç
);

2934 i‡(
îr‹
)

2935 
	`ªs_Áûed
(
îr‹
);

2937 
	`libxfs_å™s_ijoö
(
ç
, 
ù
, 0);

2939 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

2941 
îr‹
 = -
	`libxfs_dú_¸óã«me
(
ç
, 
ù
, &
xfs_«me_dŸdŸ
,

2942 
ù
->
i_öo
, &
fú°
, &
df›s
, 
ƒes
);

2943 i‡(
îr‹
)

2944 
	`do_îr‹
(

2945 
	`_
("ˇn'àmakê\"..\"É¡ry i¿roŸ inodê%" 
PRIu64
 ", cª©íamêîr‹ %d\n"), 
öo
, 
îr‹
);

2947 
	`libxfs_å™s_log_öode
(
ç
, 
ù
, 
XFS_ILOG_CORE
);

2949 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

2950 
	`ASSERT
(
îr‹
 == 0);

2951 
	`libxfs_å™s_commô
(
ç
);

2953 
√ed_roŸ_dŸdŸ
 = 0;

2954 } i‡(
√ed_roŸ_dŸdŸ
 && 
öo
 =
mp
->
m_sb
.
sb_roŸöo
) {

2955 
	`do_w¨n
(
	`_
("wouldÑecreateÑoot directory ..Éntry\n"));

2965 i‡(
√ed_dŸ
) {

2975 
	`add_öode_ªf
(
úec
, 
öo_off£t
);

2977 i‡(
no_modify
) {

2978 
	`do_w¨n
(

2979 
	`_
("would cª©êmissög \".\"É¡ry i¿dú inÿ%" 
PRIu64
 "\n"),

2980 
öo
);

2981 } i‡(
ù
->
i_d
.
di_f‹m©
 !
XFS_DINODE_FMT_LOCAL
) {

2985 
	`do_w¨n
(

2986 
	`_
("¸ótög missög \".\"É¡ry i¿dú inÿ%" 
PRIu64
 "\n"), 
öo
);

2988 
ƒes
 = 
	`XFS_MKDIR_SPACE_RES
(
mp
, 1);

2989 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_mkdú
,

2990 
ƒes
, 0, 0, &
ç
);

2991 i‡(
îr‹
)

2992 
	`ªs_Áûed
(
îr‹
);

2994 
	`libxfs_å™s_ijoö
(
ç
, 
ù
, 0);

2996 
	`libxfs_de„r_öô
(&
df›s
, &
fú°
);

2998 
îr‹
 = -
	`libxfs_dú_¸óã«me
(
ç
, 
ù
, &
xfs_«me_dŸ
,

2999 
ù
->
i_öo
, &
fú°
, &
df›s
, 
ƒes
);

3000 i‡(
îr‹
)

3001 
	`do_îr‹
(

3002 
	`_
("ˇn'àmakê\".\"É¡ry i¿dú inÿ%" 
PRIu64
 ", createnameÉrror %d\n"),

3003 
öo
, 
îr‹
);

3005 
	`libxfs_å™s_log_öode
(
ç
, 
ù
, 
XFS_ILOG_CORE
);

3007 
îr‹
 = -
	`libxfs_de„r_föish
(&
ç
, &
df›s
, 
ù
);

3008 
	`ASSERT
(
îr‹
 == 0);

3009 
	`libxfs_å™s_commô
(
ç
);

3012 
	`IRELE
(
ù
);

3013 
	}
}

3020 
	$m¨k_°™dÆ⁄e_öodes
(
xfs_mou¡_t
 *
mp
)

3022 
öo_åì_node_t
 *
úec
;

3023 
off£t
;

3025 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp, mp->
m_sb
.
sb_rbmöo
),

3026 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_rbmöo
));

3028 
	`ASSERT
(
úec
 !
NULL
);

3030 
off£t
 = 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_rbmöo
) -

3031 
úec
->
öo_°¨äum
;

3033 
	`add_öode_ªached
(
úec
, 
off£t
);

3035 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp, mp->
m_sb
.
sb_rsumöo
),

3036 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_rsumöo
));

3038 
off£t
 = 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_rsumöo
) -

3039 
úec
->
öo_°¨äum
;

3041 
	`ASSERT
(
úec
 !
NULL
);

3043 
	`add_öode_ªached
(
úec
, 
off£t
);

3045 i‡(
fs_quŸas
) {

3046 i‡(
mp
->
m_sb
.
sb_uquŸöo


3047 && 
mp
->
m_sb
.
sb_uquŸöo
 !
NULLFSINO
) {

3048 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp,

3049 
mp
->
m_sb
.
sb_uquŸöo
),

3050 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_uquŸöo
));

3051 
off£t
 = 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_uquŸöo
)

3052 - 
úec
->
öo_°¨äum
;

3053 
	`add_öode_ªached
(
úec
, 
off£t
);

3055 i‡(
mp
->
m_sb
.
sb_gquŸöo


3056 && 
mp
->
m_sb
.
sb_gquŸöo
 !
NULLFSINO
) {

3057 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp,

3058 
mp
->
m_sb
.
sb_gquŸöo
),

3059 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_gquŸöo
));

3060 
off£t
 = 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_gquŸöo
)

3061 - 
úec
->
öo_°¨äum
;

3062 
	`add_öode_ªached
(
úec
, 
off£t
);

3064 i‡(
mp
->
m_sb
.
sb_pquŸöo


3065 && 
mp
->
m_sb
.
sb_pquŸöo
 !
NULLFSINO
) {

3066 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp,

3067 
mp
->
m_sb
.
sb_pquŸöo
),

3068 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_pquŸöo
));

3069 
off£t
 = 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_pquŸöo
)

3070 - 
úec
->
öo_°¨äum
;

3071 
	`add_öode_ªached
(
úec
, 
off£t
);

3074 
	}
}

3077 
	$check_f‹_‹ph™ed_öodes
(

3078 
xfs_mou¡_t
 *
mp
,

3079 
xfs_agnumbî_t
 
agno
,

3080 
öo_åì_node_t
 *
úec
)

3082 
i
;

3083 
xfs_öo_t
 
öo
;

3085 
i
 = 0; i < 
XFS_INODES_PER_CHUNK
; i++) {

3086 
	`ASSERT
(
	`is_öode_c⁄fúmed
(
úec
, 
i
));

3087 i‡(
	`is_öode_‰ì
(
úec
, 
i
))

3090 i‡(
	`is_öode_ªached
(
úec
, 
i
))

3093 
	`ASSERT
(
	`öode_ißdú
(
úec
, 
i
) ||

3094 
	`num_öode_ª„ªn˚s
(
úec
, 
i
) == 0);

3096 
öo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
i
 + 
úec
->
öo_°¨äum
);

3097 i‡(
	`öode_ißdú
(
úec
, 
i
))

3098 
	`do_w¨n
(
	`_
("disc⁄√˘ed dú inodê%" 
PRIu64
 ", "), 
öo
);

3100 
	`do_w¨n
(
	`_
("disc⁄√˘ed inodê%" 
PRIu64
 ", "), 
öo
);

3101 i‡(!
no_modify
) {

3102 i‡(!
‹ph™age_öo
)

3103 
‹ph™age_öo
 = 
	`mk_‹ph™age
(
mp
);

3104 
	`do_w¨n
(
	`_
("movögÅÿ%s\n"), 
ORPHANAGE
);

3105 
	`mv_‹ph™age
(
mp
, 
öo
, 
	`öode_ißdú
(
úec
, 
i
));

3107 
	`do_w¨n
(
	`_
("would movêtÿ%s\n"), 
ORPHANAGE
);

3114 
	`add_öode_ªached
(
úec
, 
i
);

3116 
	}
}

3119 
	$åavî£_fun˘i⁄
(

3120 
w‹k_queue_t
 *
wq
,

3121 
xfs_agnumbî_t
 
agno
,

3122 *
¨g
)

3124 
öo_åì_node_t
 *
úec
;

3125 
i
;

3126 
¥e„tch_¨gs_t
 *
pf_¨gs
 = 
¨g
;

3128 
	`waô_f‹_öode_¥e„tch
(
pf_¨gs
);

3130 i‡(
vîbo£
)

3131 
	`do_log
(
	`_
(" -ágnÿ%d\n"), 
agno
);

3133 
úec
 = 
	`födfú°_öode_ªc
(
agno
); iªc; iª¯
	`√xt_öo_ªc
(irec)) {

3134 i‡(
úec
->
öo_iß_dú
 == 0)

3137 i‡(
pf_¨gs
) {

3138 
	`£m_po°
(&
pf_¨gs
->
ø_cou¡
);

3139 #ifde‡
XR_PF_TRACE


3140 
	`£m_gëvÆue
(&
pf_¨gs
->
ø_cou¡
, &
i
);

3141 
	`p·ø˚
(

3143 
úec
, 
agno
, 
i
);

3147 
i
 = 0; i < 
XFS_INODES_PER_CHUNK
; i++) {

3148 i‡(
	`öode_ißdú
(
úec
, 
i
))

3149 
	`¥o˚ss_dú_öode
(
wq
->
mp
, 
agno
, 
úec
, 
i
);

3152 
	`˛ónup_öode_¥e„tch
(
pf_¨gs
);

3153 
	}
}

3156 
	$upd©e_missög_dŸdŸ_íåõs
(

3157 
xfs_mou¡_t
 *
mp
)

3159 
dŸdŸ_upd©e_t
 *
dú
;

3165 
dŸdŸ_upd©e
 = 1;

3166 !
	`li°_em±y
(&
dŸdŸ_upd©e_li°
)) {

3167 
dú
 = 
	`li°_íåy
(
dŸdŸ_upd©e_li°
.
¥ev
, 
dŸdŸ_upd©e
,

3168 
li°
);

3169 
	`li°_dñ
(&
dú
->
li°
);

3170 
	`¥o˚ss_dú_öode
(
mp
, 
dú
->
agno
, dú->
úec
, dú->
öo_off£t
);

3171 
	`‰ì
(
dú
);

3173 
	}
}

3176 
	$åavî£_ags
(

3177 
xfs_mou¡
 *
mp
)

3179 
	`do_öode_¥e„tch
(
mp
, 0, 
åavî£_fun˘i⁄
, 
Ál£
, 
åue
);

3180 
	}
}

3183 
	$pha£6
(
xfs_mou¡_t
 *
mp
)

3185 
öo_åì_node_t
 *
úec
;

3186 
i
;

3188 
	`mem£t
(&
zîo¸
, 0, (
¸ed
));

3189 
	`mem£t
(&
zîofsx
, 0, (
fsx©å
));

3190 
‹ph™age_öo
 = 0;

3192 
	`do_log
(
	`_
("Phase 6 - check inode connectivity...\n"));

3194 
	`öc‹e_ext_ã¨down
(
mp
);

3196 
	`add_öo_ex_d©a
(
mp
);

3204 i‡(
√ed_roŸ_öode
) {

3205 i‡(!
no_modify
) {

3206 
	`do_w¨n
(
	`_
("reinitializingÑoot directory\n"));

3207 
	`mk_roŸ_dú
(
mp
);

3208 
√ed_roŸ_öode
 = 0;

3209 
√ed_roŸ_dŸdŸ
 = 0;

3211 
	`do_w¨n
(
	`_
("wouldÑeinitializeÑoot directory\n"));

3215 i‡(
√ed_rbmöo
) {

3216 i‡(!
no_modify
) {

3217 
	`do_w¨n
(
	`_
("reinitializingÑealtime bitmap inode\n"));

3218 
	`mk_rbmöo
(
mp
);

3219 
√ed_rbmöo
 = 0;

3221 
	`do_w¨n
(
	`_
("wouldÑeinitializeÑealtime bitmap inode\n"));

3225 i‡(
√ed_rsumöo
) {

3226 i‡(!
no_modify
) {

3227 
	`do_w¨n
(
	`_
("reinitializingÑealtime summary inode\n"));

3228 
	`mk_rsumöo
(
mp
);

3229 
√ed_rsumöo
 = 0;

3231 
	`do_w¨n
(
	`_
("wouldÑeinitializeÑealtime summary inode\n"));

3235 i‡(!
no_modify
) {

3236 
	`do_log
(

3237 
	`_
(" -Ñesetting contents ofÑealtime bitmapánd summary inodes\n"));

3238 i‡(
	`fûl_rbmöo
(
mp
)) {

3239 
	`do_w¨n
(

3240 
	`_
("Warning:Ñealtime bitmap may be inconsistent\n"));

3243 i‡(
	`fûl_rsumöo
(
mp
)) {

3244 
	`do_w¨n
(

3245 
	`_
("Warning:Ñealtime bitmap may be inconsistent\n"));

3249 
	`m¨k_°™dÆ⁄e_öodes
(
mp
);

3251 
	`do_log
(
	`_
(" -Åraversing filesystem ...\n"));

3253 
úec
 = 
	`föd_öode_ªc
(
mp
, 
	`XFS_INO_TO_AGNO
(mp, mp->
m_sb
.
sb_roŸöo
),

3254 
	`XFS_INO_TO_AGINO
(
mp
, mp->
m_sb
.
sb_roŸöo
));

3260 i‡(
	`is_öode_‰ì
(
úec
, 0Ë|| !
	`öode_ißdú
(irec, 0)) {

3261 
√ed_roŸ_öode
 = 1;

3267 
	`åavî£_ags
(
mp
);

3272 
	`upd©e_missög_dŸdŸ_íåõs
(
mp
);

3274 
	`do_log
(
	`_
(" -Åraversal finished ...\n"));

3275 
	`do_log
(
	`_
(" - moving disconnected inodesÅo %s ...\n"),

3276 
ORPHANAGE
);

3281 
i
 = 0; i < 
glob_agcou¡
; i++) {

3282 
úec
 = 
	`födfú°_öode_ªc
(
i
);

3283 
úec
 !
NULL
) {

3284 
	`check_f‹_‹ph™ed_öodes
(
mp
, 
i
, 
úec
);

3285 
úec
 = 
	`√xt_öo_ªc
(irec);

3288 
	}
}

	@repair/phase7.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

21 
	~"globÆs.h
"

22 
	~"aghódî.h
"

23 
	~"öc‹e.h
"

24 
	~"¥Ÿos.h
"

25 
	~"îr_¥Ÿos.h
"

26 
	~"döode.h
"

27 
	~"vîsi⁄s.h
"

28 
	~"¥ogªss.h
"

29 
	~"thªads.h
"

32 
	$upd©e_öode_∆öks
(

33 
xfs_mou¡_t
 *
mp
,

34 
xfs_öo_t
 
öo
,

35 
__uöt32_t
 
∆öks
)

37 
xfs_å™s_t
 *
ç
;

38 
xfs_öode_t
 *
ù
;

39 
îr‹
;

40 
dúty
;

41 
ƒes
;

43 
ƒes
 = 
no_modify
 ? 0 : 10;

44 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
	`M_RES
(mp)->
å_ªmove
, 
ƒes
, 0, 0, &
ç
);

45 
	`ASSERT
(
îr‹
 == 0);

47 
îr‹
 = -
	`libxfs_å™s_igë
(
mp
, 
ç
, 
öo
, 0, 0, &
ù
);

49 i‡(
îr‹
) {

50 i‡(!
no_modify
)

51 
	`do_îr‹
(

52 
	`_
("couldn'àm≠ inodê%" 
PRIu64
 ",Érr = %d\n"),

53 
öo
, 
îr‹
);

55 
	`do_w¨n
(

56 
	`_
("couldn'àm≠ inodê%" 
PRIu64
 ",Érr = %d, can't compareÜink counts\n"),

57 
öo
, 
îr‹
);

62 
dúty
 = 0;

65 i‡(
	`VFS_I
(
ù
)->
i_∆ök
 !
∆öks
) {

66 i‡(!
no_modify
) {

67 
	`do_w¨n
(

68 
	`_
("ª£âög inodê%" 
PRIu64
 "Çlinks from %uÅo %u\n"),

69 
öo
, 
	`VFS_I
(
ù
)->
i_∆ök
, 
∆öks
);

70 
	`£t_∆ök
(
	`VFS_I
(
ù
), 
∆öks
);

71 
dúty
 = 1;

73 
	`do_w¨n
(

74 
	`_
("would havêª£àöodê%" 
PRIu64
 "Çlinks from %uÅo %u\n"),

75 
öo
, 
	`VFS_I
(
ù
)->
i_∆ök
, 
∆öks
);

79 i‡(!
dúty
) {

80 
	`libxfs_å™s_ˇn˚l
(
ç
);

82 
	`libxfs_å™s_log_öode
(
ç
, 
ù
, 
XFS_ILOG_CORE
);

87 
	`ASSERT
(
îr‹
 == 0);

88 
îr‹
 = -
	`libxfs_å™s_commô
(
ç
);

90 
	`ASSERT
(
îr‹
 == 0);

92 
	`IRELE
(
ù
);

93 
	}
}

100 
	$do_lök_upd©es
(

101 
w‹k_queue
 *
wq
,

102 
xfs_agnumbî_t
 
agno
,

103 *
¨g
)

105 
öo_åì_node_t
 *
úec
;

106 
j
;

107 
__uöt32_t
 
ƒefs
;

109 
úec
 = 
	`födfú°_öode_ªc
(
agno
); irec;

110 
úec
 = 
	`√xt_öo_ªc
(irec)) {

111 
j
 = 0; j < 
XFS_INODES_PER_CHUNK
; j++) {

112 
	`ASSERT
(
	`is_öode_c⁄fúmed
(
úec
, 
j
));

114 i‡(
	`is_öode_‰ì
(
úec
, 
j
))

117 
	`ASSERT
(
no_modify
 || 
	`is_öode_ªached
(
úec
, 
j
));

119 
ƒefs
 = 
	`num_öode_ª„ªn˚s
(
úec
, 
j
);

120 
	`ASSERT
(
no_modify
 || 
ƒefs
 > 0);

122 i‡(
	`gë_öode_disk_∆öks
(
úec
, 
j
Ë!
ƒefs
)

123 
	`upd©e_öode_∆öks
(
wq
->
mp
,

124 
	`XFS_AGINO_TO_INO
(
wq
->
mp
, 
agno
,

125 
úec
->
öo_°¨äum
 + 
j
),

126 
ƒefs
);

130 
	`PROG_RPT_INC
(
¥og_Ωt_d⁄e
[
agno
], 1);

131 
	}
}

134 
	$pha£7
(

135 
xfs_mou¡
 *
mp
,

136 
sˇn_thªads
)

138 
w‹k_queue
 
wq
;

139 
agno
;

141 i‡(!
no_modify
)

142 
	`do_log
(
	`_
("Phase 7 - verifyánd correctÜink counts...\n"));

144 
	`do_log
(
	`_
("Phase 7 - verifyÜink counts...\n"));

146 
	`£t_¥ogªss_msg
(
PROGRESS_FMT_CORR_LINK
, (
__uöt64_t
Ë
glob_agcou¡
);

148 
	`¸óã_w‹k_queue
(&
wq
, 
mp
, 
sˇn_thªads
);

150 
agno
 = 0;ágnÿ< 
mp
->
m_sb
.
sb_agcou¡
;ágno++)

151 
	`queue_w‹k
(&
wq
, 
do_lök_upd©es
, 
agno
, 
NULL
);

153 
	`de°roy_w‹k_queue
(&
wq
);

155 
	`¥öt_föÆ_Ωt
();

156 
	}
}

	@repair/prefetch.c

1 
	~"libxfs.h
"

2 
	~<±hªad.h
>

3 
	~"avl.h
"

4 
	~"båì.h
"

5 
	~"globÆs.h
"

6 
	~"aghódî.h
"

7 
	~"öc‹e.h
"

8 
	~"dú2.h
"

9 
	~"¥Ÿos.h
"

10 
	~"îr_¥Ÿos.h
"

11 
	~"döode.h
"

12 
	~"bm≠.h
"

13 
	~"vîsi⁄s.h
"

14 
	~"thªads.h
"

15 
	~"¥e„tch.h
"

16 
	~"¥ogªss.h
"

18 
	gdo_¥e„tch
 = 1;

27 
xfs_mou¡_t
 *
	gmp
;

28 
	gmp_fd
;

29 
	gpf_max_byãs
;

30 
	gpf_max_bbs
;

31 
	gpf_max_fsbs
;

32 
	gpf_b©ch_byãs
;

33 
	gpf_b©ch_fsbs
;

35 
pf_ªad_öode_dús
(
¥e„tch_¨gs_t
 *, 
xfs_buf_t
 *);

45 
	#B_DIR_BMAP
 
CACHE_PREFETCH_PRIORITY
 + 7

	)

47 
	#B_DIR_META_2
 
CACHE_PREFETCH_PRIORITY
 + 6

	)

49 
	#B_DIR_META_H
 
CACHE_PREFETCH_PRIORITY
 + 5

	)

51 
	#B_DIR_META_S
 
CACHE_PREFETCH_PRIORITY
 + 4

	)

53 
	#B_DIR_META
 
CACHE_PREFETCH_PRIORITY
 + 3

	)

55 
	#B_DIR_INODE
 
CACHE_PREFETCH_PRIORITY
 + 2

	)

57 
	#B_BMAP
 
CACHE_PREFETCH_PRIORITY
 + 1

	)

59 
	#B_INODE
 
CACHE_PREFETCH_PRIORITY


	)

65 
	#B_IS_INODE
(
f
Ë(((fË& 5Ë=0)

	)

67 
	#DEF_BATCH_BYTES
 0x10000

	)

69 
	#MAX_BUFS
 128

	)

71 
	#IO_THRESHOLD
 (
MAX_BUFS
 * 2)

	)

73 
	epf_which
 {

74 
	mPF_PRIMARY
,

75 
	mPF_SECONDARY
,

76 
	mPF_META_ONLY


77 } 
	tpf_which_t
;

80 
ölöe
 

81 
	$pf_°¨t_¥o˚ssög
(

82 
¥e„tch_¨gs_t
 *
¨gs
)

84 i‡(!
¨gs
->
ˇn_°¨t_¥o˚ssög
) {

85 
	`p·ø˚
("sig«ŒögÖro˚ssög f‹ AG %d", 
¨gs
->
agno
);

87 
¨gs
->
ˇn_°¨t_¥o˚ssög
 = 1;

88 
	`±hªad_c⁄d_sig«l
(&
¨gs
->
°¨t_¥o˚ssög
);

90 
	}
}

92 
ölöe
 

93 
	$pf_°¨t_io_w‹kîs
(

94 
¥e„tch_¨gs_t
 *
¨gs
)

96 i‡(!
¨gs
->
ˇn_°¨t_ªadög
) {

97 
	`p·ø˚
("sig«ŒögÑódög f‹ AG %d", 
¨gs
->
agno
);

99 
¨gs
->
ˇn_°¨t_ªadög
 = 1;

100 
	`±hªad_c⁄d_brﬂdˇ°
(&
¨gs
->
°¨t_ªadög
);

102 
	}
}

106 
	$pf_queue_io
(

107 
¥e„tch_¨gs_t
 *
¨gs
,

108 
xfs_buf_m≠
 *
m≠
,

109 
nm≠s
,

110 
Êag
)

112 
xfs_buf
 *
bp
;

113 
xfs_fsblock_t
 
fsbno
 = 
	`XFS_DADDR_TO_FSB
(
mp
, 
m≠
[0].
bm_bn
);

121 
bp
 = 
	`libxfs_gëbuf_m≠
(
mp
->
m_dev
, 
m≠
, 
nm≠s
, 
LIBXFS_GETBUF_TRYLOCK
);

122 i‡(!
bp
)

125 i‡(
bp
->
b_Êags
 & 
LIBXFS_B_UPTODATE
) {

126 i‡(
	`B_IS_INODE
(
Êag
))

127 
	`pf_ªad_öode_dús
(
¨gs
, 
bp
);

128 
	`XFS_BUF_SET_PRIORITY
(
bp
, 
	`XFS_BUF_PRIORITY
(bp) +

129 
CACHE_PREFETCH_PRIORITY
);

130 
	`libxfs_putbuf
(
bp
);

133 
	`XFS_BUF_SET_PRIORITY
(
bp
, 
Êag
);

135 
	`±hªad_muãx_lock
(&
¨gs
->
lock
);

137 
	`båì_ö£π
(
¨gs
->
io_queue
, 
fsbno
, 
bp
);

139 i‡(
fsbno
 > 
¨gs
->
œ°_bno_ªad
) {

140 i‡(
	`B_IS_INODE
(
Êag
)) {

141 
¨gs
->
öode_bufs_queued
++;

142 i‡(
¨gs
->
öode_bufs_queued
 =
IO_THRESHOLD
)

143 
	`pf_°¨t_io_w‹kîs
(
¨gs
);

146 
	`ASSERT
(!
	`B_IS_INODE
(
Êag
));

147 
	`XFS_BUF_SET_PRIORITY
(
bp
, 
B_DIR_META_2
);

150 
	`p·ø˚
("getbuf %c %p (%llu) in AG %d (fsbno = %lu)áddedÅo queue"

151 "(öode_bufs_queued = %d,Üa°_bnÿ%lu)", 
	`B_IS_INODE
(
Êag
) ?

152 'I' : 'M', 
bp
, ()
	`XFS_BUF_ADDR
(bp), 
¨gs
->
agno
, 
fsbno
,

153 
¨gs
->
öode_bufs_queued
,árgs->
œ°_bno_ªad
);

155 
	`pf_°¨t_¥o˚ssög
(
¨gs
);

157 
	`±hªad_muãx_u∆ock
(&
¨gs
->
lock
);

158 
	}
}

161 
	$pf_ªad_bmbt_ª˛i°
(

162 
¥e„tch_¨gs_t
 *
¨gs
,

163 
xfs_bmbt_ªc_t
 *
Ω
,

164 
numªcs
)

166 
i
;

167 
xfs_bmbt_úec_t
 
úec
;

168 
xfs_fûblks_t
 
˝
 = 0;

169 
xfs_fûeoff_t
 
›
 = 0;

170 
	#MAP_ARRAY_SZ
 4

	)

171 
xfs_buf_m≠
 
m≠_¨øy
[
MAP_ARRAY_SZ
];

172 
xfs_buf_m≠
 *
m≠
 = 
m≠_¨øy
;

173 
max_exã¡s
 = 
MAP_ARRAY_SZ
;

174 
nm≠s
 = 0;

175 
Àn
 = 0;

176 
ªt
 = 0;

179 
i
 = 0; i < 
numªcs
; i++) {

180 
	`libxfs_bmbt_disk_gë_Æl
(
Ω
 + 
i
, &
úec
);

182 i‡(((
i
 > 0Ë&& (
›
 + 
˝
 > 
úec
.
br_°¨toff
)) ||

183 (
úec
.
br_blockcou¡
 == 0) ||

184 (
úec
.
br_°¨toff
 >
fs_max_fûe_off£t
))

185 
out_‰ì
;

187 i‡(!
	`vîify_dfsbno
(
mp
, 
úec
.
br_°¨tblock
) || !verify_dfsbno(mp,

188 
úec
.
br_°¨tblock
 + iªc.
br_blockcou¡
 - 1))

189 
out_‰ì
;

191 i‡(!
¨gs
->
dús_⁄ly
 && ((
úec
.
br_°¨toff
 +

192 
úec
.
br_blockcou¡
Ë>
mp
->
m_dú_geo
->
‰ìblk
))

195 
›
 = 
úec
.
br_°¨toff
;

196 
˝
 = 
úec
.
br_blockcou¡
;

198 
úec
.
br_blockcou¡
) {

199 
bm_Àn
;

201 
	`p·ø˚
("queuög dúÉxã¡ i¿AG %d", 
¨gs
->
agno
);

203 i‡(
Àn
 + 
úec
.
br_blockcou¡
 >
mp
->
m_dú_geo
->
fsbcou¡
)

204 
bm_Àn
 = 
mp
->
m_dú_geo
->
fsbcou¡
 - 
Àn
;

206 
bm_Àn
 = 
úec
.
br_blockcou¡
;

207 
Àn
 +
bm_Àn
;

209 
m≠
[
nm≠s
].
bm_bn
 = 
	`XFS_FSB_TO_DADDR
(
mp
,

210 
úec
.
br_°¨tblock
);

211 
m≠
[
nm≠s
].
bm_Àn
 = 
	`XFS_FSB_TO_BB
(
mp
, bm_len);

212 
nm≠s
++;

214 i‡(
Àn
 =
mp
->
m_dú_geo
->
fsbcou¡
) {

215 
	`pf_queue_io
(
¨gs
, 
m≠
, 
nm≠s
, 
B_DIR_META
);

216 
Àn
 = 0;

217 
nm≠s
 = 0;

220 
úec
.
br_blockcou¡
 -
bm_Àn
;

221 
úec
.
br_°¨tblock
 +
bm_Àn
;

227 i‡(
nm≠s
 >
max_exã¡s
) {

228 
xfs_buf_m≠
 *
ﬁd_m≠
 = 
NULL
;

230 i‡(
m≠
 =
m≠_¨øy
) {

231 
ﬁd_m≠
 = 
m≠
;

232 
m≠
 = 
NULL
;

234 
max_exã¡s
 *= 2;

235 
m≠
 = 
	`ªÆloc
(m≠, 
max_exã¡s
 * (*map));

236 i‡(
m≠
 =
NULL
) {

237 
	`do_îr‹
(

238 
	`_
("couldn't malloc dir2 bufferÜist\n"));

239 
	`exô
(1);

241 i‡(
ﬁd_m≠
)

242 
	`mem˝y
(
m≠
, 
ﬁd_m≠
, (
m≠_¨øy
));

247 
ªt
 = 1;

248 
out_‰ì
:

249 i‡(
m≠
 !
m≠_¨øy
)

250 
	`‰ì
(
m≠
);

251  
ªt
;

252 
	}
}

259 
pf_sˇn_lbåì
(

260 
xfs_fsblock_t
 
dbno
,

261 
Àvñ
,

262 
ißdú
,

263 
¥e„tch_¨gs_t
 *
¨gs
,

264 (*
func
)(
xfs_båì_block
 *
block
,

265 
Àvñ
,

266 
ißdú
,

267 
¥e„tch_¨gs_t
 *
¨gs
))

269 
xfs_buf_t
 *
bp
;

270 
rc
;

272 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
	`XFS_FSB_TO_DADDR
(mp, 
dbno
),

273 
	`XFS_FSB_TO_BB
(
mp
, 1), 0, &
xfs_bmbt_buf_›s
);

274 i‡(!
bp
)

277 
	`XFS_BUF_SET_PRIORITY
(
bp
, 
ißdú
 ? 
B_DIR_BMAP
 : 
B_BMAP
);

285 i‡(
bp
->
b_îr‹
) {

286 
bp
->
b_Êags
 |
LIBXFS_B_UNCHECKED
;

287 
	`libxfs_putbuf
(
bp
);

291 
rc
 = (*
func
)(
	`XFS_BUF_TO_BLOCK
(
bp
), 
Àvñ
 - 1, 
ißdú
, 
¨gs
);

293 
	`libxfs_putbuf
(
bp
);

295  
rc
;

296 
	}
}

299 
	$pf_sˇnfunc_bm≠
(

300 
xfs_båì_block
 *
block
,

301 
Àvñ
,

302 
ißdú
,

303 
¥e„tch_¨gs_t
 *
¨gs
)

305 
xfs_bmbt_±r_t
 *
µ
;

306 
numªcs
;

307 
i
;

308 
xfs_fsblock_t
 
dbno
;

313 i‡((
block
->
bb_magic
 !
	`˝u_to_be32
(
XFS_BMAP_MAGIC
) &&

314 
block
->
bb_magic
 !
	`˝u_to_be32
(
XFS_BMAP_CRC_MAGIC
)) ||

315 (
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
))

318 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

320 i‡(
Àvñ
 == 0) {

321 i‡(
numªcs
 > 
mp
->
m_bm≠_dmxr
[0] || !
ißdú
)

323  
	`pf_ªad_bmbt_ª˛i°
(
¨gs
,

324 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1), 
numªcs
);

327 i‡(
numªcs
 > 
mp
->
m_bm≠_dmxr
[1])

330 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[1]);

332 
i
 = 0; i < 
numªcs
; i++) {

333 
dbno
 = 
	`gë_u«lig√d_be64
(&
µ
[
i
]);

334 i‡(!
	`vîify_dfsbno
(
mp
, 
dbno
))

336 i‡(!
	`pf_sˇn_lbåì
(
dbno
, 
Àvñ
, 
ißdú
, 
¨gs
, 
pf_sˇnfunc_bm≠
))

340 
	}
}

344 
	$pf_ªad_btöode
(

345 
¥e„tch_¨gs_t
 *
¨gs
,

346 
xfs_döode_t
 *
döo
,

347 
ißdú
)

349 
xfs_bmdr_block_t
 *
dib
;

350 
xfs_bmbt_±r_t
 *
µ
;

351 
i
;

352 
Àvñ
;

353 
numªcs
;

354 
dsize
;

355 
xfs_fsblock_t
 
dbno
;

357 
dib
 = (
xfs_bmdr_block_t
 *)
	`XFS_DFORK_DPTR
(
döo
);

359 
Àvñ
 = 
	`be16_to_˝u
(
dib
->
bb_Àvñ
);

360 
numªcs
 = 
	`be16_to_˝u
(
dib
->
bb_numªcs
);

362 i‡((
numªcs
 =0Ë|| (
Àvñ
 == 0) ||

363 (
Àvñ
 > 
	`XFS_BM_MAXLEVELS
(
mp
, 
XFS_DATA_FORK
)))

368 i‡(
	`XFS_BMDR_SPACE_CALC
(
numªcs
Ë> 
	`XFS_DFORK_DSIZE
(
döo
, 
mp
))

371 
dsize
 = 
	`XFS_DFORK_DSIZE
(
döo
, 
mp
);

372 
µ
 = 
	`XFS_BMDR_PTR_ADDR
(
dib
, 1, 
	`libxfs_bmdr_maxªcs
(
dsize
, 0));

374 
i
 = 0; i < 
numªcs
; i++) {

375 
dbno
 = 
	`gë_u«lig√d_be64
(&
µ
[
i
]);

376 i‡(!
	`vîify_dfsbno
(
mp
, 
dbno
))

378 i‡(!
	`pf_sˇn_lbåì
(
dbno
, 
Àvñ
, 
ißdú
, 
¨gs
, 
pf_sˇnfunc_bm≠
))

381 
	}
}

384 
	$pf_ªad_exöode
(

385 
¥e„tch_¨gs_t
 *
¨gs
,

386 
xfs_döode_t
 *
döo
)

388 
	`pf_ªad_bmbt_ª˛i°
(
¨gs
, (
xfs_bmbt_ªc_t
 *)
	`XFS_DFORK_DPTR
(
döo
),

389 
	`be32_to_˝u
(
döo
->
di_√xã¡s
));

390 
	}
}

393 
	$pf_ªad_öode_dús
(

394 
¥e„tch_¨gs_t
 *
¨gs
,

395 
xfs_buf_t
 *
bp
)

397 
xfs_döode_t
 *
döo
;

398 
i˙t
 = 0;

399 
hasdú
 = 0;

400 
ißdú
;

402 
	`libxfs_ªadbuf_vîify
(
bp
, &
xfs_öode_buf_›s
);

403 i‡(
bp
->
b_îr‹
)

406 
i˙t
 = 0; i˙à< (
	`XFS_BUF_COUNT
(
bp
Ë>> 
mp
->
m_sb
.
sb_öodñog
); icnt++) {

407 
döo
 = 
	`xfs_make_ùå
(
mp
, 
bp
, 
i˙t
);

413 
ißdú
 = (
	`be16_to_˝u
(
döo
->
di_mode
Ë& 
S_IFMT
Ë=
S_IFDIR
;

414 
hasdú
 |
ißdú
;

416 i‡(
döo
->
di_f‹m©
 <
XFS_DINODE_FMT_LOCAL
)

419 i‡(!
ißdú
 && (
döo
->
di_f‹m©
 =
XFS_DINODE_FMT_EXTENTS
 ||

420 
¨gs
->
dús_⁄ly
))

428 i‡(
döo
->
di_f‹m©
 > 
XFS_DINODE_FMT_BTREE
)

431 i‡(
	`be16_to_˝u
(
döo
->
di_magic
Ë!
XFS_DINODE_MAGIC
)

434 i‡(!
	`libxfs_döode_good_vîsi⁄
(
mp
, 
döo
->
di_vîsi⁄
))

437 i‡(
	`be64_to_˝u
(
döo
->
di_size
Ë<
	`XFS_DFORK_DSIZE
(döo, 
mp
))

440 i‡((
döo
->
di_f‹koff
 != 0) &&

441 (
döo
->
di_f‹koff
 >
	`XFS_LITINO
(
mp
, döo->
di_vîsi⁄
) >> 3))

444 
döo
->
di_f‹m©
) {

445 
XFS_DINODE_FMT_EXTENTS
:

446 
	`pf_ªad_exöode
(
¨gs
, 
döo
);

448 
XFS_DINODE_FMT_BTREE
:

449 
	`pf_ªad_btöode
(
¨gs
, 
döo
, 
ißdú
);

453 i‡(
hasdú
)

454 
	`XFS_BUF_SET_PRIORITY
(
bp
, 
B_DIR_INODE
);

455 
	}
}

461 
	$pf_b©ch_ªad
(

462 
¥e„tch_¨gs_t
 *
¨gs
,

463 
pf_which_t
 
which
,

464 *
buf
)

466 
xfs_buf_t
 *
b∂i°
[
MAX_BUFS
];

467 
num
;

468 
off64_t
 
fú°_off
, 
œ°_off
, 
√xt_off
;

469 
Àn
, 
size
;

470 
i
;

471 
öode_bufs
;

472 
fsbno
 = 0;

473 
max_fsbno
;

474 *
pbuf
;

477 
num
 = 0;

478 i‡(
which
 =
PF_SECONDARY
) {

479 
b∂i°
[0] = 
	`båì_föd
(
¨gs
->
io_queue
, 0, &
fsbno
);

480 
max_fsbno
 = 
	`MIN
(
fsbno
 + 
pf_max_fsbs
,

481 
¨gs
->
œ°_bno_ªad
);

483 
b∂i°
[0] = 
	`båì_föd
(
¨gs
->
io_queue
,

484 
¨gs
->
œ°_bno_ªad
, &
fsbno
);

485 
max_fsbno
 = 
fsbno
 + 
pf_max_fsbs
;

487 
b∂i°
[
num
] &&Çum < 
MAX_BUFS
 && 
fsbno
 < 
max_fsbno
) {

496 i‡((
b∂i°
[
num
]->
b_Êags
 & 
LIBXFS_B_DISCONTIG
)) {

497 
num
++;

501 i‡(
which
 !
PF_META_ONLY
 ||

502 !
	`B_IS_INODE
(
	`XFS_BUF_PRIORITY
(
b∂i°
[
num
])))

503 
num
++;

504 i‡(
num
 =
MAX_BUFS
)

506 
b∂i°
[
num
] = 
	`båì_lookup_√xt
(
¨gs
->
io_queue
, &
fsbno
);

508 i‡(!
num
)

516 
fú°_off
 = 
	`LIBXFS_BBTOOFF64
(
	`XFS_BUF_ADDR
(
b∂i°
[0]));

517 
œ°_off
 = 
	`LIBXFS_BBTOOFF64
(
	`XFS_BUF_ADDR
(
b∂i°
[
num
-1])) +

518 
	`XFS_BUF_SIZE
(
b∂i°
[
num
-1]);

519 
num
 > 1 && 
œ°_off
 - 
fú°_off
 > 
pf_max_byãs
) {

520 
num
--;

521 
œ°_off
 = 
	`LIBXFS_BBTOOFF64
(
	`XFS_BUF_ADDR
(
b∂i°
[
num
-1])) +

522 
	`XFS_BUF_SIZE
(
b∂i°
[
num
-1]);

524 i‡(
num
 < ((
œ°_off
 - 
fú°_off
Ë>> (
mp
->
m_sb
.
sb_blocklog
 + 3))) {

529 
œ°_off
 = 
fú°_off
 + 
	`XFS_BUF_SIZE
(
b∂i°
[0]);

530 
i
 = 1; i < 
num
; i++) {

531 
√xt_off
 = 
	`LIBXFS_BBTOOFF64
(
	`XFS_BUF_ADDR
(
b∂i°
[
i
])) +

532 
	`XFS_BUF_SIZE
(
b∂i°
[
i
]);

533 i‡(
√xt_off
 - 
œ°_off
 > 
pf_b©ch_byãs
)

535 
œ°_off
 = 
√xt_off
;

537 
num
 = 
i
;

540 
i
 = 0; i < 
num
; i++) {

541 i‡(
	`båì_dñëe
(
¨gs
->
io_queue
, 
	`XFS_DADDR_TO_FSB
(
mp
,

542 
	`XFS_BUF_ADDR
(
b∂i°
[
i
]))Ë=
NULL
)

543 
	`do_îr‹
(
	`_
("prefetch corruption\n"));

546 i‡(
which
 =
PF_PRIMARY
) {

547 
öode_bufs
 = 0, 
i
 = 0; i < 
num
; i++) {

548 i‡(
	`B_IS_INODE
(
	`XFS_BUF_PRIORITY
(
b∂i°
[
i
])))

549 
öode_bufs
++;

551 
¨gs
->
öode_bufs_queued
 -
öode_bufs
;

552 i‡(
öode_bufs
 && (
fú°_off
 >> 
mp
->
m_sb
.
sb_blocklog
) >

553 
pf_b©ch_fsbs
)

554 
¨gs
->
œ°_bno_ªad
 = (
fú°_off
 >> 
mp
->
m_sb
.
sb_blocklog
);

556 #ifde‡
XR_PF_TRACE


557 
	`p·ø˚
("reading bbs %lluÅo %llu (%d bufs) from %s queue in AG %d (last_bno = %lu, inode_bufs = %d)",

558 ()
	`XFS_BUF_ADDR
(
b∂i°
[0]),

559 ()
	`XFS_BUF_ADDR
(
b∂i°
[
num
-1]),Çum,

560 (
which
 !
PF_SECONDARY
Ë? "¥i" : "£c", 
¨gs
->
agno
,

561 
¨gs
->
œ°_bno_ªad
,árgs->
öode_bufs_queued
);

563 
	`±hªad_muãx_u∆ock
(&
¨gs
->
lock
);

568 
Àn
 = 
	`¥ód
(
mp_fd
, 
buf
, ()(
œ°_off
 - 
fú°_off
), first_off);

576 i‡((
b∂i°
[
num
 - 1]->
b_Êags
 & 
LIBXFS_B_DISCONTIG
)) {

577 
	`libxfs_ªadbu‰_m≠
(
mp
->
m_ddev_èrgp
, 
b∂i°
[
num
 - 1], 0);

578 
b∂i°
[
num
 - 1]->
b_Êags
 |
LIBXFS_B_UNCHECKED
;

579 
	`libxfs_putbuf
(
b∂i°
[
num
 - 1]);

580 
num
--;

583 i‡(
Àn
 > 0) {

588 
i
 = 0; i < 
num
; i++) {

590 
pbuf
 = ((*)
buf
Ë+ (
	`LIBXFS_BBTOOFF64
(
	`XFS_BUF_ADDR
(
b∂i°
[
i
])Ë- 
fú°_off
);

591 
size
 = 
	`XFS_BUF_SIZE
(
b∂i°
[
i
]);

592 i‡(
Àn
 < 
size
)

594 
	`mem˝y
(
	`XFS_BUF_PTR
(
b∂i°
[
i
]), 
pbuf
, 
size
);

595 
b∂i°
[
i
]->
b_Êags
 |(
LIBXFS_B_UPTODATE
 |

596 
LIBXFS_B_UNCHECKED
);

597 
Àn
 -
size
;

598 i‡(
	`B_IS_INODE
(
	`XFS_BUF_PRIORITY
(
b∂i°
[
i
])))

599 
	`pf_ªad_öode_dús
(
¨gs
, 
b∂i°
[
i
]);

600 i‡(
which
 =
PF_META_ONLY
)

601 
	`XFS_BUF_SET_PRIORITY
(
b∂i°
[
i
],

602 
B_DIR_META_H
);

603 i‡(
which
 =
PF_PRIMARY
 && 
num
 == 1)

604 
	`XFS_BUF_SET_PRIORITY
(
b∂i°
[
i
],

605 
B_DIR_META_S
);

608 
i
 = 0; i < 
num
; i++) {

609 
	`p·ø˚
("putbuf %c %p (%llu) in AG %d",

610 
	`B_IS_INODE
(
	`XFS_BUF_PRIORITY
(
b∂i°
[
i
])) ? 'I' : 'M',

611 
b∂i°
[
i
], ()
	`XFS_BUF_ADDR
(bplist[i]),

612 
¨gs
->
agno
);

613 
	`libxfs_putbuf
(
b∂i°
[
i
]);

615 
	`±hªad_muãx_lock
(&
¨gs
->
lock
);

616 i‡(
which
 !
PF_SECONDARY
) {

617 
	`p·ø˚
("öode_bufs_queued f‹ AG %d = %d", 
¨gs
->
agno
,

618 
¨gs
->
öode_bufs_queued
);

625 i‡(
which
 =
PF_PRIMARY
 && !
¨gs
->
queuög_d⁄e
 &&

626 
¨gs
->
öode_bufs_queued
 < 
IO_THRESHOLD
) {

627 
	`p·ø˚
("reading metadata bufs fromÖrimary queue for AG %d",

628 
¨gs
->
agno
);

630 
	`pf_b©ch_ªad
(
¨gs
, 
PF_META_ONLY
, 
buf
);

632 
	`p·ø˚
("reading bufs from secondary queue for AG %d",

633 
¨gs
->
agno
);

635 
	`pf_b©ch_ªad
(
¨gs
, 
PF_SECONDARY
, 
buf
);

639 
	}
}

642 
	$pf_io_w‹kî
(

643 *
∑øm
)

645 
¥e„tch_¨gs_t
 *
¨gs
 = 
∑øm
;

646 *
buf
 = 
	`memÆign
(
	`libxfs_devi˚_Æignmít
(),

647 
pf_max_byãs
);

649 i‡(
buf
 =
NULL
)

650  
NULL
;

652 
	`±hªad_muãx_lock
(&
¨gs
->
lock
);

653 !
¨gs
->
queuög_d⁄e
 || !
	`båì_is_em±y
◊rgs->
io_queue
)) {

654 
	`p·ø˚
("waôögÅÿ°¨à¥e„tch I/O f‹ AG %d", 
¨gs
->
agno
);

656 !
¨gs
->
ˇn_°¨t_ªadög
 && !¨gs->
queuög_d⁄e
)

657 
	`±hªad_c⁄d_waô
(&
¨gs
->
°¨t_ªadög
, &¨gs->
lock
);

659 
	`p·ø˚
("°¨tögÖª„tch I/O f‹ AG %d", 
¨gs
->
agno
);

661 
	`pf_b©ch_ªad
(
¨gs
, 
PF_PRIMARY
, 
buf
);

662 
	`pf_b©ch_ªad
(
¨gs
, 
PF_SECONDARY
, 
buf
);

664 
	`p·ø˚
("ø¿ouào‡buf†tÿ¥e„tch f‹ AG %d", 
¨gs
->
agno
);

666 i‡(!
¨gs
->
queuög_d⁄e
)

667 
¨gs
->
ˇn_°¨t_ªadög
 = 0;

669 
	`±hªad_muãx_u∆ock
(&
¨gs
->
lock
);

671 
	`‰ì
(
buf
);

673 
	`p·ø˚
("föishedÖª„tch I/O f‹ AG %d", 
¨gs
->
agno
);

675  
NULL
;

676 
	}
}

679 
pf_¸óã_¥e„tch_thªad
(

680 
¥e„tch_¨gs_t
 *
¨gs
);

683 
	$pf_queuög_w‹kî
(

684 *
∑øm
)

686 
¥e„tch_¨gs_t
 *
¨gs
 = 
∑øm
;

687 
num_öos
;

688 
öo_åì_node_t
 *
úec
;

689 
öo_åì_node_t
 *
cur_úec
;

690 
blks_≥r_˛u°î
;

691 
xfs_agblock_t
 
bno
;

692 
i
;

693 
îr
;

694 
uöt64_t
 
•¨£
;

696 
blks_≥r_˛u°î
 = 
mp
->
m_öode_˛u°î_size
 >> mp->
m_sb
.
sb_blocklog
;

697 i‡(
blks_≥r_˛u°î
 == 0)

698 
blks_≥r_˛u°î
 = 1;

700 
i
 = 0; i < 
PF_THREAD_COUNT
; i++) {

701 
îr
 = 
	`±hªad_¸óã
(&
¨gs
->
io_thªads
[
i
], 
NULL
,

702 
pf_io_w‹kî
, 
¨gs
);

703 i‡(
îr
 != 0) {

704 
	`do_w¨n
(
	`_
("failedÅo createÖrefetchÅhread: %s\n"),

705 
	`°ªº‹
(
îr
));

706 i‡(
i
 == 0) {

707 
	`pf_°¨t_¥o˚ssög
(
¨gs
);

708  
NULL
;

717 
	`p·ø˚
("°¨tögÖª„tch f‹ AG %d", 
¨gs
->
agno
);

719 
úec
 = 
	`födfú°_öode_ªc
(
¨gs
->
agno
); iª¯!
NULL
;

720 
úec
 = 
	`√xt_öo_ªc
(irec)) {

722 
cur_úec
 = 
úec
;

724 
num_öos
 = 
XFS_INODES_PER_CHUNK
;

725 
num_öos
 < 
mp
->
m_üŒoc_öos
 && 
úec
 !
NULL
) {

726 
úec
 = 
	`√xt_öo_ªc
(irec);

727 
num_öos
 +
XFS_INODES_PER_CHUNK
;

730 i‡(
¨gs
->
dús_⁄ly
 && 
cur_úec
->
öo_iß_dú
 == 0)

732 #ifde‡
XR_PF_TRACE


733 
	`£m_gëvÆue
(&
¨gs
->
ø_cou¡
, &
i
);

734 
	`p·ø˚
("queuing irec %p in AG %d, sem count = %d",

735 
úec
, 
¨gs
->
agno
, 
i
);

737 
îr
 = 
	`£m_åywaô
(&
¨gs
->
ø_cou¡
);

738 i‡(
îr
 < 0 && 
î∫o
 =
EAGAIN
) {

746 
	`pf_°¨t_io_w‹kîs
(
¨gs
);

747 
	`£m_waô
(&
¨gs
->
ø_cou¡
);

750 
num_öos
 = 0;

751 
bno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
cur_úec
->
öo_°¨äum
);

752 
•¨£
 = 
cur_úec
->
ú_•¨£
;

755 
xfs_buf_m≠
 
m≠
;

757 
m≠
.
bm_bn
 = 
	`XFS_AGB_TO_DADDR
(
mp
, 
¨gs
->
agno
, 
bno
);

758 
m≠
.
bm_Àn
 = 
	`XFS_FSB_TO_BB
(
mp
, 
blks_≥r_˛u°î
);

765 i‡((
•¨£
 & ((1ULL << 
öodes_≥r_˛u°î
) - 1)) == 0)

766 
	`pf_queue_io
(
¨gs
, &
m≠
, 1,

767 (
cur_úec
->
öo_iß_dú
 != 0) ?

768 
B_DIR_INODE
 : 
B_INODE
);

770 
bno
 +
blks_≥r_˛u°î
;

771 
num_öos
 +
öodes_≥r_˛u°î
;

772 
•¨£
 >>
öodes_≥r_˛u°î
;

773 } 
num_öos
 < 
mp
->
m_üŒoc_öos
);

776 
	`±hªad_muãx_lock
(&
¨gs
->
lock
);

778 
	`p·ø˚
("finished queuing inodes for AG %d (inode_bufs_queued = %d)",

779 
¨gs
->
agno
,árgs->
öode_bufs_queued
);

781 
¨gs
->
queuög_d⁄e
 = 1;

782 
	`pf_°¨t_io_w‹kîs
(
¨gs
);

783 
	`pf_°¨t_¥o˚ssög
(
¨gs
);

784 
	`±hªad_muãx_u∆ock
(&
¨gs
->
lock
);

787 
i
 = 0; i < 
PF_THREAD_COUNT
; i++)

788 i‡(
¨gs
->
io_thªads
[
i
])

789 
	`±hªad_joö
(
¨gs
->
io_thªads
[
i
], 
NULL
);

791 
	`p·ø˚
("¥e„tch f‹ AG %d föished", 
¨gs
->
agno
);

793 
	`±hªad_muãx_lock
(&
¨gs
->
lock
);

795 
	`ASSERT
(
	`båì_is_em±y
(
¨gs
->
io_queue
));

797 
¨gs
->
¥e„tch_d⁄e
 = 1;

798 i‡(
¨gs
->
√xt_¨gs
)

799 
	`pf_¸óã_¥e„tch_thªad
(
¨gs
->
√xt_¨gs
);

801 
	`±hªad_muãx_u∆ock
(&
¨gs
->
lock
);

803  
NULL
;

804 
	}
}

807 
	$pf_¸óã_¥e„tch_thªad
(

808 
¥e„tch_¨gs_t
 *
¨gs
)

810 
îr
;

812 
	`p·ø˚
("¸ótög queuêthªad f‹ AG %d", 
¨gs
->
agno
);

814 
îr
 = 
	`±hªad_¸óã
(&
¨gs
->
queuög_thªad
, 
NULL
,

815 
pf_queuög_w‹kî
, 
¨gs
);

816 i‡(
îr
 != 0) {

817 
	`do_w¨n
(
	`_
("failedÅo createÖrefetchÅhread: %s\n"),

818 
	`°ªº‹
(
îr
));

819 
	`˛ónup_öode_¥e„tch
(
¨gs
);

822  
îr
 == 0;

823 
	}
}

826 
	$öô_¥e„tch
(

827 
xfs_mou¡_t
 *
pmp
)

829 
mp
 = 
pmp
;

830 
mp_fd
 = 
	`libxfs_devi˚_to_fd
(
mp
->
m_ddev_èrgp
->
dev
);

831 
pf_max_byãs
 = 
	`sysc⁄f
(
_SC_PAGE_SIZE
) << 7;

832 
pf_max_bbs
 = 
pf_max_byãs
 >> 
BBSHIFT
;

833 
pf_max_fsbs
 = 
pf_max_byãs
 >> 
mp
->
m_sb
.
sb_blocklog
;

834 
pf_b©ch_byãs
 = 
DEF_BATCH_BYTES
;

835 
pf_b©ch_fsbs
 = 
DEF_BATCH_BYTES
 >> (
mp
->
m_sb
.
sb_blocklog
 + 1);

836 
	}
}

838 
¥e„tch_¨gs_t
 *

839 
	$°¨t_öode_¥e„tch
(

840 
xfs_agnumbî_t
 
agno
,

841 
dús_⁄ly
,

842 
¥e„tch_¨gs_t
 *
¥ev_¨gs
)

844 
¥e„tch_¨gs_t
 *
¨gs
;

845 
max_queue
;

847 i‡(!
do_¥e„tch
 || 
agno
 >
mp
->
m_sb
.
sb_agcou¡
)

848  
NULL
;

850 
¨gs
 = 
	`ˇŒoc
(1, (
¥e„tch_¨gs_t
));

852 
	`båì_öô
(&
¨gs
->
io_queue
);

853 i‡(
	`±hªad_muãx_öô
(&
¨gs
->
lock
, 
NULL
) != 0)

854 
	`do_îr‹
(
	`_
("failedÅo initializeÖrefetch mutex\n"));

855 i‡(
	`±hªad_c⁄d_öô
(&
¨gs
->
°¨t_ªadög
, 
NULL
) != 0)

856 
	`do_îr‹
(
	`_
("failedÅo initializeÖrefetch cond var\n"));

857 i‡(
	`±hªad_c⁄d_öô
(&
¨gs
->
°¨t_¥o˚ssög
, 
NULL
) != 0)

858 
	`do_îr‹
(
	`_
("failedÅo initializeÖrefetch cond var\n"));

859 
¨gs
->
agno
 =ágno;

860 
¨gs
->
dús_⁄ly
 = dirs_only;

867 
max_queue
 = 
libxfs_bˇche
->
c_maxcou¡
 / 
thªad_cou¡
 / 8;

868 i‡(
mp
->
m_öode_˛u°î_size
 > mp->
m_sb
.
sb_blocksize
)

869 
max_queue
 = max_queue *

870 (
mp
->
m_öode_˛u°î_size
 >> mp->
m_sb
.
sb_blocklog
) /

871 
mp
->
m_üŒoc_blks
;

873 
	`£m_öô
(&
¨gs
->
ø_cou¡
, 0, 
max_queue
);

875 i‡(!
¥ev_¨gs
) {

876 i‡(!
	`pf_¸óã_¥e„tch_thªad
(
¨gs
))

877  
NULL
;

879 
	`±hªad_muãx_lock
(&
¥ev_¨gs
->
lock
);

880 i‡(
¥ev_¨gs
->
¥e„tch_d⁄e
) {

881 i‡(!
	`pf_¸óã_¥e„tch_thªad
(
¨gs
))

882 
¨gs
 = 
NULL
;

884 
¥ev_¨gs
->
√xt_¨gs
 = 
¨gs
;

885 
	`±hªad_muãx_u∆ock
(&
¥ev_¨gs
->
lock
);

888  
¨gs
;

889 
	}
}

912 
¥e„tch_ag_ønge
(

913 
w‹k_queue
 *
w‹k
,

914 
xfs_agnumbî_t
 
°¨t_ag
,

915 
xfs_agnumbî_t
 
íd_ag
,

916 
boﬁ
 
dús_⁄ly
,

917 (*
func
)(
w‹k_queue
 *,

918 
xfs_agnumbî_t
, *))

920 
i
;

921 
¥e„tch_¨gs
 *
pf_¨gs
[2];

923 
pf_¨gs
[
°¨t_ag
 & 1] = 
	`°¨t_öode_¥e„tch
(°¨t_ag, 
dús_⁄ly
, 
NULL
);

924 
i
 = 
°¨t_ag
; i < 
íd_ag
; i++) {

926 i‡(
i
 + 1 < 
íd_ag
)

927 
pf_¨gs
[(~
i
Ë& 1] = 
	`°¨t_öode_¥e„tch
(i + 1,

928 
dús_⁄ly
, 
pf_¨gs
[
i
 & 1]);

929 
	`func
(
w‹k
, 
i
, 
pf_¨gs
[i & 1]);

931 
	}
}

933 
	spf_w‹k_¨gs
 {

934 
xfs_agnumbî_t
 
	m°¨t_ag
;

935 
xfs_agnumbî_t
 
	míd_ag
;

936 
boﬁ
 
	mdús_⁄ly
;

937 (*
	mfunc
)(
	mw‹k_queue
 *, 
	mxfs_agnumbî_t
, *);

941 
	$¥e„tch_ag_ønge_w‹k
(

942 
w‹k_queue
 *
w‹k
,

943 
xfs_agnumbî_t
 
unu£d
,

944 *
¨gs
)

946 
pf_w‹k_¨gs
 *
w¨gs
 = 
¨gs
;

948 
	`¥e„tch_ag_ønge
(
w‹k
, 
w¨gs
->
°¨t_ag
, w¨gs->
íd_ag
,

949 
w¨gs
->
dús_⁄ly
, w¨gs->
func
);

950 
	`‰ì
(
¨gs
);

951 
	}
}

958 
do_öode_¥e„tch
(

959 
xfs_mou¡
 *
mp
,

960 
°ride
,

961 (*
func
)(
w‹k_queue
 *,

962 
xfs_agnumbî_t
, *),

963 
boﬁ
 
check_ˇche
,

964 
boﬁ
 
dús_⁄ly
)

966 
i
;

967 
w‹k_queue
 
queue
;

968 
w‹k_queue
 *
queues
;

969 
queues_°¨ãd
 = 0;

977 i‡(
check_ˇche
 && !
	`libxfs_bˇche_ovîÊowed
()) {

978 
queue
.
mp
 = mp;

979 
	`¸óã_w‹k_queue
(&
queue
, 
mp
, 
	`libxfs_≈roc
());

980 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++)

981 
	`queue_w‹k
(&
queue
, 
func
, 
i
, 
NULL
);

982 
	`de°roy_w‹k_queue
(&
queue
);

990 i‡(!
°ride
) {

991 
queue
.
mp
 = mp;

992 
	`¥e„tch_ag_ønge
(&
queue
, 0, 
mp
->
m_sb
.
sb_agcou¡
,

993 
dús_⁄ly
, 
func
);

1000 
queues
 = 
	`mÆloc
(
thªad_cou¡
 * (
w‹k_queue_t
));

1001 
i
 = 0; i < 
thªad_cou¡
; i++) {

1002 
pf_w‹k_¨gs
 *
w¨gs
;

1004 
w¨gs
 = 
	`mÆloc
((
pf_w‹k_¨gs
));

1005 
w¨gs
->
°¨t_ag
 = 
i
 * 
°ride
;

1006 
w¨gs
->
íd_ag
 = 
	`mö
((
i
 + 1Ë* 
°ride
,

1007 
mp
->
m_sb
.
sb_agcou¡
);

1008 
w¨gs
->
dús_⁄ly
 = dirs_only;

1009 
w¨gs
->
func
 = func;

1011 
	`¸óã_w‹k_queue
(&
queues
[
i
], 
mp
, 1);

1012 
	`queue_w‹k
(&
queues
[
i
], 
¥e„tch_ag_ønge_w‹k
, 0, 
w¨gs
);

1013 
queues_°¨ãd
++;

1015 i‡(
w¨gs
->
íd_ag
 >
mp
->
m_sb
.
sb_agcou¡
)

1022 
i
 = 0; i < 
queues_°¨ãd
; i++)

1023 
	`de°roy_w‹k_queue
(&
queues
[
i
]);

1024 
	`‰ì
(
queues
);

1025 
	}
}

1028 
	$waô_f‹_öode_¥e„tch
(

1029 
¥e„tch_¨gs_t
 *
¨gs
)

1031 i‡(
¨gs
 =
NULL
)

1034 
	`±hªad_muãx_lock
(&
¨gs
->
lock
);

1036 !
¨gs
->
ˇn_°¨t_¥o˚ssög
) {

1037 
	`p·ø˚
("waôögÅÿ°¨à¥o˚ssög AG %d", 
¨gs
->
agno
);

1039 
	`±hªad_c⁄d_waô
(&
¨gs
->
°¨t_¥o˚ssög
, &¨gs->
lock
);

1041 
	`p·ø˚
("ˇ¿°¨à¥o˚ssög AG %d", 
¨gs
->
agno
);

1043 
	`±hªad_muãx_u∆ock
(&
¨gs
->
lock
);

1044 
	}
}

1047 
	$˛ónup_öode_¥e„tch
(

1048 
¥e„tch_¨gs_t
 *
¨gs
)

1050 i‡(
¨gs
 =
NULL
)

1053 
	`p·ø˚
("waôög AG %dÖª„tchÅÿföish", 
¨gs
->
agno
);

1055 i‡(
¨gs
->
queuög_thªad
)

1056 
	`±hªad_joö
(
¨gs
->
queuög_thªad
, 
NULL
);

1058 
	`p·ø˚
("AG %dÖª„tch d⁄e", 
¨gs
->
agno
);

1060 
	`±hªad_muãx_de°roy
(&
¨gs
->
lock
);

1061 
	`±hªad_c⁄d_de°roy
(&
¨gs
->
°¨t_ªadög
);

1062 
	`±hªad_c⁄d_de°roy
(&
¨gs
->
°¨t_¥o˚ssög
);

1063 
	`£m_de°roy
(&
¨gs
->
ø_cou¡
);

1064 
	`båì_de°roy
(
¨gs
->
io_queue
);

1066 
	`‰ì
(
¨gs
);

1067 
	}
}

1069 #ifde‡
XR_PF_TRACE


1071 
FILE
 *
	gpf_åa˚_fûe
;

1074 
	$p·ø˚_öô
()

1076 
pf_åa˚_fûe
 = 
	`f›í
("/tmp/xfs_repair_prefetch.trace", "w");

1077 
	`£tvbuf
(
pf_åa˚_fûe
, 
NULL
, 
_IOLBF
, 1024);

1078 
	}
}

1081 
	$p·ø˚_d⁄e
()

1083 
	`f˛o£
(
pf_åa˚_fûe
);

1084 
	}
}

1087 
	$_p·ø˚
(c⁄° *
func
, c⁄° *
msg
, ...)

1089 
buf
[200];

1090 
timevÆ
 
tv
;

1091 
va_li°
 
¨gs
;

1093 
	`gëtimeofday
(&
tv
, 
NULL
);

1095 
	`va_°¨t
(
¨gs
, 
msg
);

1096 
	`v¢¥ötf
(
buf
, (buf), 
msg
, 
¨gs
);

1097 
buf
[(buf)-1] = '\0';

1098 
	`va_íd
(
¨gs
);

1100 
	`Ârötf
(
pf_åa˚_fûe
, "%lu.%06lu %s: %s\n", 
tv
.
tv_£c
,Åv.
tv_u£c
,

1101 
func
, 
buf
);

1102 
	}
}

	@repair/prefetch.h

1 #i‚de‡
_XFS_REPAIR_PREFETCH_H


2 
	#_XFS_REPAIR_PREFETCH_H


	)

4 
	~<£m≠h‹e.h
>

5 
	~"öc‹e.h
"

7 
	gw‹k_queue
;

9 
do_¥e„tch
;

11 
	#PF_THREAD_COUNT
 4

	)

13 
	s¥e„tch_¨gs
 {

14 
±hªad_muãx_t
 
	mlock
;

15 
±hªad_t
 
	mqueuög_thªad
;

16 
±hªad_t
 
	mio_thªads
[
PF_THREAD_COUNT
];

17 
båì_roŸ
 *
	mio_queue
;

18 
±hªad_c⁄d_t
 
	m°¨t_ªadög
;

19 
±hªad_c⁄d_t
 
	m°¨t_¥o˚ssög
;

20 
	magno
;

21 
	mdús_⁄ly
;

22 vﬁ©ûê
	mˇn_°¨t_ªadög
;

23 vﬁ©ûê
	mˇn_°¨t_¥o˚ssög
;

24 vﬁ©ûê
	m¥e„tch_d⁄e
;

25 vﬁ©ûê
	mqueuög_d⁄e
;

26 vﬁ©ûê
	möode_bufs_queued
;

27 vﬁ©ûê
xfs_fsblock_t
 
	mœ°_bno_ªad
;

28 
£m_t
 
	mø_cou¡
;

29 
¥e„tch_¨gs
 *
	m√xt_¨gs
;

30 } 
	t¥e„tch_¨gs_t
;

35 
öô_¥e„tch
(

36 
xfs_mou¡_t
 *
pmp
);

38 
¥e„tch_¨gs_t
 *

39 
°¨t_öode_¥e„tch
(

40 
xfs_agnumbî_t
 
agno
,

41 
dús_⁄ly
,

42 
¥e„tch_¨gs_t
 *
¥ev_¨gs
);

45 
do_öode_¥e„tch
(

46 
xfs_mou¡
 *
mp
,

47 
°ride
,

48 (*
func
)(
w‹k_queue
 *,

49 
xfs_agnumbî_t
, *),

50 
boﬁ
 
check_ˇche
,

51 
boﬁ
 
dús_⁄ly
);

54 
	`waô_f‹_öode_¥e„tch
(

55 
¥e„tch_¨gs_t
 *
¨gs
);

58 
	`˛ónup_öode_¥e„tch
(

59 
¥e„tch_¨gs_t
 *
¨gs
);

62 #ifde‡
XR_PF_TRACE


63 
	`p·ø˚_öô
();

64 
	`p·ø˚_d⁄e
();

66 
	#p·ø˚
(
msg
...Ë
	`_p·ø˚
(
__FUNCTION__
, ## msg)

	)

67 
	`_p·ø˚
(const *, const *, ...);

69 
ölöe
 
	$p·ø˚_öô
(Ë{ 
	}
};

70 
ölöe
 
	$p·ø˚_d⁄e
(Ë{ 
	}
};

71 
ölöe
 
	$p·ø˚
(c⁄° *
msg
, ...Ë{ 
	}
};

	@repair/progress.c

2 
	~"libxfs.h
"

3 
	~"globÆs.h
"

4 
	~"¥ogªss.h
"

5 
	~"îr_¥Ÿos.h
"

6 
	~<sig«l.h
>

8 
	#ONEMINUTE
 60

	)

9 
	#ONEHOUR
 (60*
ONEMINUTE
)

	)

10 
	#ONEDAY
 (24*
ONEHOUR
)

	)

11 
	#ONEWEEK
 (7*
ONEDAY
)

	)

14 *
	gΩt_ty≥s
[] = {

15 
	#TYPE_INODE
 0

	)

16 
N_
("inodes"),

17 
	#TYPE_BLOCK
 1

	)

18 
N_
("blocks"),

19 
	#TYPE_DIR
 2

	)

20 
N_
("directories"),

21 
	#TYPE_AG
 3

	)

22 
N_
("allocation groups"),

23 
	#TYPE_AGI_BUCKET
 4

	)

24 
N_
("AGI unlinked buckets"),

25 
	#TYPE_EXTENTS
 5

	)

26 
N_
("extents"),

27 
	#TYPE_RTEXTENTS
 6

	)

28 
N_
("realtimeÉxtents"),

29 
	#TYPE_UNLINKED_LIST
 7

	)

30 
N_
("unlinkedÜists")

35 *
	gΩt_fmts
[] = {

36 
	#FMT1
 0

	)

37 
N_
(" - %02d:%02d:%02d: %s - %llu of %llu %s done\n"),

38 
	#FMT2
 1

	)

39 
N_
(" - %02d:%02d:%02d: %s - %llu %s done\n"),

42 
	s¥ogªss_Ωt_s
 {

43 
	mf‹m©
;

44 *
	mmsg
;

45 **
	mfmt
;

46 **
	mty≥
;

47 } 
	t¥ogªss_Ωt_t
;

50 
¥ogªss_Ωt_t
 
	g¥ogªss_Ωt_ªp‹ts
[] = {

51 {
FMT1
, 
N_
("scanning filesystem freespace"),

52 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_AG
]},

53 {
FMT1
, 
N_
("scanningági unlinkedÜists"),

54 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_AG
]},

55 {
FMT2
, 
N_
("check uncertain AG inodes"),

56 &
Ωt_fmts
[
FMT2
], &
Ωt_ty≥s
[
TYPE_AGI_BUCKET
]},

57 {
FMT1
, 
N_
("process known inodesánd inode discovery"),

58 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_INODE
]},

59 {
FMT1
, 
N_
("processÇewly discovered inodes"),

60 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_AG
]},

61 {
FMT1
, 
N_
("setting up duplicateÉxtentÜist"),

62 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_AG
]},

63 {
FMT1
, 
N_
("initializeÑealtime bitmap"),

64 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_BLOCK
]},

65 {
FMT1
, 
N_
("resetÑealtime bitmaps"),

66 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_AG
]},

67 {
FMT1
, 
N_
("check for inodes claiming duplicate blocks"),

68 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_INODE
]},

69 {
FMT1
, 
N_
("rebuild AG headersándÅrees"),

70 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_AG
]},

71 {
FMT1
, 
N_
("traversing filesystem"),

72 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_AG
]},

73 {
FMT2
, 
N_
("traversingáll unattached subtrees"),

74 &
Ωt_fmts
[
FMT2
], &
Ωt_ty≥s
[
TYPE_DIR
]},

75 {
FMT2
, 
N_
("moving disconnected inodesÅoÜost+found"),

76 &
Ωt_fmts
[
FMT2
], &
Ωt_ty≥s
[
TYPE_INODE
]},

77 {
FMT1
, 
N_
("verifyánd correctÜink counts"),

78 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_AG
]},

79 {
FMT1
, 
N_
("verifyÜink counts"),

80 &
Ωt_fmts
[
FMT1
], &
Ωt_ty≥s
[
TYPE_AG
]}

83 
±hªad_t
 
	gªp‹t_thªad
;

85 
	smsg_block_s
 {

86 
±hªad_muãx_t
 
	mmuãx
;

87 
¥ogªss_Ωt_t
 *
	mf‹m©
;

88 
__uöt64_t
 *
	md⁄e
;

89 
__uöt64_t
 *
	mtŸÆ
;

90 
	mcou¡
;

91 
	möãrvÆ
;

92 } 
	tmsg_block_t
;

93 
msg_block_t
 
	gglobÆ_msgs
;

95 
	spha£_times_s
 {

96 
time_t
 
	m°¨t
;

97 
time_t
 
	míd
;

98 
time_t
 
	mduøti⁄
;

99 
__uöt64_t
 
	môem_cou¡s
[4];

100 } 
	tpha£_times_t
;

101 
pha£_times_t
 
	gpha£_times
[8];

103 *
¥ogªss_Ωt_thªad
(*);

104 
	gcuºít_pha£
;

105 
	gru¬ög
;

106 
__uöt64_t
 
	g¥og_Ωt_tŸÆ
;

109 
	$öô_¥ogªss_Ωt
 ()

116 i‡((
¥og_Ωt_d⁄e
 = (
__uöt64_t
 *)

117 
	`mÆloc
((
__uöt64_t
)*
glob_agcou¡
)Ë=
NULL
 ) {

118 
	`do_îr‹
(
	`_
("cannot mallocÖointerÅo done vector\n"));

120 
	`bzîo
(
¥og_Ωt_d⁄e
, (
__uöt64_t
)*
glob_agcou¡
);

126 
	`±hªad_muãx_öô
(&
globÆ_msgs
.
muãx
, 
NULL
);

127 
globÆ_msgs
.
f‹m©
 = 
NULL
;

128 
globÆ_msgs
.
cou¡
 = 
glob_agcou¡
;

129 
globÆ_msgs
.
öãrvÆ
 = 
ªp‹t_öãrvÆ
;

130 
globÆ_msgs
.
d⁄e
 = 
¥og_Ωt_d⁄e
;

131 
globÆ_msgs
.
tŸÆ
 = &
¥og_Ωt_tŸÆ
;

133 i‡(
	`±hªad_¸óã
 (&
ªp‹t_thªad
, 
NULL
,

134 
¥ogªss_Ωt_thªad
, (*)&
globÆ_msgs
))

135 
	`do_îr‹
(
	`_
("unableÅo createÖrogressÑeportÅhread\n"));

138 
	}
}

141 
	$°›_¥ogªss_Ωt
()

149 
ru¬ög
 = 0;

150 
	`±hªad_kûl
 (
ªp‹t_thªad
, 
SIGHUP
);

151 
	`±hªad_joö
 (
ªp‹t_thªad
, 
NULL
);

152 
	`‰ì
(
¥og_Ωt_d⁄e
);

154 
	}
}

157 
	$¥ogªss_Ωt_thªad
 (*
p
)

160 
i
;

161 
ˇught
;

162 
sig£t_t
 
sigs_to_ˇtch
;

163 
tm
 *
tmp
;

164 
time_t
 
now
, 
ñ≠£d
;

165 
timî_t
 
timîid
;

166 
ôimî•ec
 
time•ec
;

167 *
msgbuf
;

168 
__uöt64_t
 *
d⁄ï
;

169 
__uöt64_t
 
sum
;

170 
msg_block_t
 *
msgp
 = (msg_block_à*)
p
;

171 
__uöt64_t
 
≥r˚¡
;

174 i‡(!
msgp
->
f‹m©
)

175  
NULL
;

177 i‡((
msgbuf
 = (*)
	`mÆloc
(
DURATION_BUF_SIZE
)Ë=
NULL
)

178 
	`do_îr‹
 (
	`_
("progress_rpt: cannot mallocÖrogress msg buffer\n"));

180 
ru¬ög
 = 1;

186 
	`mem£t
(&
time•ec
, 0, (timespec));

187 
time•ec
.
ô_vÆue
.
tv_£c
 = 
msgp
->
öãrvÆ
;

188 
time•ec
.
ô_öãrvÆ
.
tv_£c
 = 
msgp
->
öãrvÆ
;

190 i‡(
	`timî_¸óã
 (
CLOCK_REALTIME
, 
NULL
, &
timîid
))

191 
	`do_îr‹
(
	`_
("progress_rpt: cannot createÅimer\n"));

193 i‡(
	`timî_£âime
 (
timîid
, 0, &
time•ec
, 
NULL
))

194 
	`do_îr‹
(
	`_
("progress_rpt: cannot setÅimer\n"));

201 
	`sigem±y£t
 (&
sigs_to_ˇtch
);

202 
	`sigadd£t
 (&
sigs_to_ˇtch
, 
SIGALRM
);

203 
	`sigadd£t
 (&
sigs_to_ˇtch
, 
SIGHUP
);

204 
	`sigwaô
 (&
sigs_to_ˇtch
, &
ˇught
);

206 
ˇught
 !
SIGHUP
) {

217 i‡(
	`±hªad_muãx_lock
(&
msgp
->
muãx
)) {

218 
	`do_îr‹
(
	`_
("progress_rpt: cannotÜockÖrogress mutex\n"));

221 i‡(!
ru¬ög
)

224 
now
 = 
	`time
 (
NULL
);

225 
tmp
 = 
	`loˇ…ime
 ((c⁄° 
time_t
 *Ë&
now
);

231 
sum
 = 0;

232 
d⁄ï
 = 
msgp
->
d⁄e
;

233 
i
 = 0; i < 
msgp
->
cou¡
; i++) {

234 
sum
 +*
d⁄ï
++;

237 
≥r˚¡
 = 0;

238 
msgp
->
f‹m©
->format) {

239 
FMT1
:

240 i‡(*
msgp
->
tŸÆ
)

241 
≥r˚¡
 = (
sum
 * 100Ë/ ( *
msgp
->
tŸÆ
 );

242 
	`•rötf
 (
msgbuf
, *
msgp
->
f‹m©
->
fmt
,

243 
tmp
->
tm_hour
,Åmp->
tm_mö
,Åmp->
tm_£c
,

244 
msgp
->
f‹m©
->
msg
, 
sum
,

245 *
msgp
->
tŸÆ
, *msgp->
f‹m©
->
ty≥
);

247 
FMT2
:

248 
	`•rötf
 (
msgbuf
, *
msgp
->
f‹m©
->
fmt
,

249 
tmp
->
tm_hour
,Åmp->
tm_mö
,Åmp->
tm_£c
,

250 
msgp
->
f‹m©
->
msg
, 
sum
,

251 *
msgp
->
f‹m©
->
ty≥
);

255 
	`do_log
(
	`_
("%s"), 
msgbuf
);

256 
ñ≠£d
 = 
now
 - 
pha£_times
[
cuºít_pha£
].
°¨t
;

257 i‡((
msgp
->
f‹m©
->f‹m© =
FMT1
Ë&& 
sum
 && 
ñ≠£d
 &&

258 ((
cuºít_pha£
 == 3) ||

259 (
cuºít_pha£
 == 4) ||

260 (
cuºít_pha£
 == 7))) {

262 
	`do_log
(

263 
	`_
("\t- %02d:%02d:%02d: Phase %d:ÉlapsedÅime %s -Örocessed %d %sÖer minute\n"),

264 
tmp
->
tm_hour
,Åmp->
tm_mö
,Åmp->
tm_£c
,

265 
cuºít_pha£
, 
	`duøti⁄
(
ñ≠£d
, 
msgbuf
),

266 (Ë(60*
sum
/(
ñ≠£d
)), *
msgp
->
f‹m©
->
ty≥
);

267 
	`do_log
(

268 
	`_
("\t- %02d:%02d:%02d: Pha£ %d: %" 
PRIu64
 "%% done -ÉstimatedÑemainingÅime %s\n"),

269 
tmp
->
tm_hour
,Åmp->
tm_mö
,Åmp->
tm_£c
,

270 
cuºít_pha£
, 
≥r˚¡
,

271 
	`duøti⁄
((Ë((*
msgp
->
tŸÆ
 - 
sum
Ë* (
ñ≠£d
)/sum), 
msgbuf
));

274 i‡(
	`±hªad_muãx_u∆ock
(&
msgp
->
muãx
) != 0) {

275 
	`do_îr‹
(

276 
	`_
("progress_rpt:Érror unlock msg mutex\n"));

278 
	`sigwaô
 (&
sigs_to_ˇtch
, &
ˇught
);

281 i‡(
	`timî_dñëe
 (
timîid
))

282 
	`do_w¨n
(
	`_
("cannot deleteÅimer\n"));

284 
	`‰ì
 (
msgbuf
);

285  (
NULL
);

286 
	}
}

289 
	$£t_¥ogªss_msg
 (
ªp‹t
, 
__uöt64_t
 
tŸÆ
)

292 i‡(!
ag_°ride
)

295 i‡(
	`±hªad_muãx_lock
(&
globÆ_msgs
.
muãx
))

296 
	`do_îr‹
(
	`_
("set_progress_msg: cannotÜockÖrogress mutex\n"));

298 
¥og_Ωt_tŸÆ
 = 
tŸÆ
;

299 
globÆ_msgs
.
f‹m©
 = &
¥ogªss_Ωt_ªp‹ts
[
ªp‹t
];

302 i‡(
¥og_Ωt_d⁄e
)

303 
	`bzîo
(
¥og_Ωt_d⁄e
, (
__uöt64_t
)*
glob_agcou¡
);

305 i‡(
	`±hªad_muãx_u∆ock
(&
globÆ_msgs
.
muãx
))

306 
	`do_îr‹
(
	`_
("set_progress_msg: cannot unlockÖrogress mutex\n"));

309 
	}
}

311 
__uöt64_t


312 
	$¥öt_föÆ_Ωt
()

314 
i
;

315 
tm
 *
tmp
;

316 
time_t
 
now
;

317 
__uöt64_t
 *
d⁄ï
;

318 
__uöt64_t
 
sum
;

319 
msg_block_t
 *
msgp
 = &
globÆ_msgs
;

320 
msgbuf
[
DURATION_BUF_SIZE
];

322 i‡(!
ag_°ride
)

325 i‡(
	`±hªad_muãx_lock
(&
globÆ_msgs
.
muãx
))

326 
	`do_îr‹
(
	`_
("print_final_rpt: cannotÜockÖrogress mutex\n"));

328 
	`bzîo
(&
msgbuf
, (msgbuf));

330 
now
 = 
	`time
 (
NULL
);

331 
tmp
 = 
	`loˇ…ime
 ((c⁄° 
time_t
 *Ë&
now
);

337 
sum
 = 0;

338 
d⁄ï
 = 
msgp
->
d⁄e
;

339 
i
 = 0; i < 
msgp
->
cou¡
; i++) {

340 
sum
 +*
d⁄ï
++;

343 i‡(
ªp‹t_öãrvÆ
) {

344 
msgp
->
f‹m©
->format) {

345 
FMT1
:

346 
	`•rötf
 (
msgbuf
, 
	`_
(*
msgp
->
f‹m©
->
fmt
),

347 
tmp
->
tm_hour
,Åmp->
tm_mö
,Åmp->
tm_£c
,

348 
	`_
(
msgp
->
f‹m©
->
msg
), 
sum
,

349 *
msgp
->
tŸÆ
, 
	`_
(*msgp->
f‹m©
->
ty≥
));

351 
FMT2
:

352 
	`•rötf
 (
msgbuf
, 
	`_
(*
msgp
->
f‹m©
->
fmt
),

353 
tmp
->
tm_hour
,Åmp->
tm_mö
,Åmp->
tm_£c
,

354 
	`_
(
msgp
->
f‹m©
->
msg
), 
sum
,

355 
	`_
(*
msgp
->
f‹m©
->
ty≥
));

358 
	`do_log
(
	`_
("%s"), 
msgbuf
);

361 i‡(
	`±hªad_muãx_u∆ock
(&
globÆ_msgs
.
muãx
))

362 
	`do_îr‹
(
	`_
("print_final_rpt: cannot unlockÖrogress mutex\n"));

364 (
sum
);

365 
	}
}

368 
	$timediff
(
pha£
)

370 
pha£_times
[
pha£
].
duøti⁄
 =

371 
pha£_times
[
pha£
].
íd
 -Öha£_times[pha£].
°¨t
;

373 
	}
}

380 
	$time°amp
(
íd
, 
pha£
, *
buf
)

383 
time_t
 
now
;

384 
tm
 *
tmp
;

386 i‡(
vîbo£
 > 1)

387 
	`ˇche_ªp‹t
(
°dîr
, "libxfs_bˇche", 
libxfs_bˇche
);

389 
now
 = 
	`time
(
NULL
);

391 i‡(
íd
) {

392 
pha£_times
[
pha£
].
íd
 = 
now
;

393 
	`timediff
(
pha£
);

396 
pha£_times
[0].
íd
 = 
now
;

397 
	`timediff
(0);

399 i‡(
pha£
 < 7) {

400 
pha£_times
[
pha£
+1].
°¨t
 = 
now
;

401 
cuºít_pha£
 = 
pha£
 + 1;

405 
pha£_times
[
pha£
].
°¨t
 = 
now
;

406 
cuºít_pha£
 = 
pha£
;

409 i‡(
buf
) {

410 
tmp
 = 
	`loˇ…ime
((c⁄° 
time_t
 *)&
now
);

411 
	`•rötf
(
buf
, 
	`_
("%02d:%02d:%02d"), 
tmp
->
tm_hour
,Åmp->
tm_mö
,Åmp->
tm_£c
);

413 (
buf
);

414 
	}
}

417 
	$duøti⁄
(
Àngth
, *
buf
)

419 
sum
;

420 
wìks
;

421 
days
;

422 
hours
;

423 
möuãs
;

424 
£c⁄ds
;

425 
ãmp
[128];

427 *
buf
 = '\0';

428 
wìks
 = 
days
 = 
hours
 = 
möuãs
 = 
£c⁄ds
 = 
sum
 = 0;

429 i‡(
Àngth
 >
ONEWEEK
) {

430 
wìks
 = 
Àngth
 / 
ONEWEEK
;

431 
sum
 = (
wìks
 * 
ONEWEEK
);

432 i‡(
wìks
) {

433 
	`•rötf
(
buf
, 
	`_
("%d wìk"), 
wìks
);

434 i‡(
wìks
 > 1Ë
	`°rˇt
(
buf
, 
	`_
("s"));

435 i‡((
Àngth
-
sum
) == 0)

436 (
buf
);

439 i‡(
Àngth
 >
ONEDAY
) {

440 
days
 = (
Àngth
 - 
sum
Ë/ 
ONEDAY
;

441 
sum
 +(
days
 * 
ONEDAY
);

442 i‡(
days
) {

443 
	`•rötf
(
ãmp
, 
	`_
("%d day"), 
days
);

444 i‡(
days
 > 1Ë
	`°rˇt
(
ãmp
, 
	`_
("s"));

445 i‡(((
Àngth
-
sum
Ë=0Ë&& (!
wìks
)) {

446 
	`°r˝y
(
buf
, 
ãmp
);

447 (
buf
);

449 i‡(
wìks
) {

450 
	`°rˇt
(
buf
, 
	`_
(", "));

452 
	`°rˇt
(
buf
, 
ãmp
);

455 i‡(
Àngth
 >
ONEHOUR
) {

456 
hours
 = (
Àngth
 - 
sum
Ë/ 
ONEHOUR
;

457 
sum
 +(
hours
 * 
ONEHOUR
);

458 i‡(
hours
) {

459 
	`•rötf
(
ãmp
, 
	`_
("%d hour"), 
hours
);

460 i‡(
hours
 > 1Ë
	`°rˇt
(
ãmp
, 
	`_
("s"));

461 i‡(((
Àngth
-
sum
) == 0) &&

462 (!
wìks
Ë&& (!
days
)) {

463 
	`°r˝y
(
buf
, 
ãmp
);

464 (
buf
);

466 i‡((
wìks
Ë|| (
days
)) {

467 
	`°rˇt
(
buf
, 
	`_
(", "));

469 
	`°rˇt
(
buf
, 
ãmp
);

473 i‡(
Àngth
 >
ONEMINUTE
) {

474 
möuãs
 = (
Àngth
 - 
sum
Ë/ 
ONEMINUTE
;

475 
sum
 +(
möuãs
 * 
ONEMINUTE
);

476 i‡(
möuãs
) {

477 
	`•rötf
(
ãmp
, 
	`_
("%d möuã"), 
möuãs
);

478 i‡(
möuãs
 > 1Ë
	`°rˇt
(
ãmp
, 
	`_
("s"));

479 i‡(((
Àngth
-
sum
) == 0) &&

480 (!
wìks
Ë&& (!
days
Ë&& (!
hours
)) {

481 
	`°r˝y
(
buf
, 
ãmp
);

482 (
buf
);

484 i‡((
wìks
)||(
days
)||(
hours
)) {

485 
	`°rˇt
(
buf
, 
	`_
(", "));

487 
	`°rˇt
(
buf
, 
ãmp
);

490 
£c⁄ds
 = 
Àngth
 - 
sum
;

491 i‡(
£c⁄ds
) {

492 
	`•rötf
(
ãmp
, 
	`_
("%d sec⁄d"), 
£c⁄ds
);

493 i‡(
£c⁄ds
 > 1Ë
	`°rˇt
(
ãmp
, 
	`_
("s"));

494 i‡((
wìks
)||(
days
)||(
hours
)||(
möuãs
))

495 
	`°rˇt
(
buf
, 
	`_
(", "));

496 
	`°rˇt
(
buf
, 
ãmp
);

499 (
buf
);

500 
	}
}

503 
	$summ¨y_ªp‹t
()

505 
i
;

506 
time_t
 
now
;

507 
tm
 
íd
;

508 
tm
 
°¨t
;

509 
msgbuf
[
DURATION_BUF_SIZE
];

511 
now
 = 
	`time
(
NULL
);

513 
	`do_log
(
	`_
("\n XFS_REPAIR Summary %s\n"),

514 
	`˘ime
((c⁄° 
time_t
 *)&
now
));

515 
	`do_log
(
	`_
("Phase\t\tStart\t\tEnd\t\tDuration\n"));

516 
i
 = 1; i < 8; i++) {

517 
	`loˇ…ime_r
((c⁄° 
time_t
 *)&
pha£_times
[
i
].
°¨t
, &start);

518 
	`loˇ…ime_r
((c⁄° 
time_t
 *)&
pha£_times
[
i
].
íd
, &end);

519 i‡((
no_modify
Ë&& (
i
 == 5)) {

520 
	`do_log
(
	`_
("Pha£ %d:\tSkù≥d\n"), 
i
);

522 i‡((
bad_öo_båì
Ë&& ((
i
 == 6) || (i == 7))) {

523 
	`do_log
(
	`_
("Pha£ %d:\tSkù≥d\n"), 
i
);

526 
	`do_log
(

527 
	`_
("Pha£ %d:\t%02d/%02d %02d:%02d:%02d\t%02d/%02d %02d:%02d:%02d\t%s\n"), 
i
,

528 
°¨t
.
tm_m⁄
+1, sèπ.
tm_mday
, sèπ.
tm_hour
, sèπ.
tm_mö
, sèπ.
tm_£c
,

529 
íd
.
tm_m⁄
+1,Énd.
tm_mday
,Énd.
tm_hour
,Énd.
tm_mö
,Énd.
tm_£c
,

530 
	`duøti⁄
(
pha£_times
[
i
].
duøti⁄
, 
msgbuf
));

533 
	`do_log
(
	`_
("\nTŸÆÑu¿time: %s\n"), 
	`duøti⁄
(
pha£_times
[0].
duøti⁄
, 
msgbuf
));

534 
	}
}

	@repair/progress.h

1 #i‚def 
_XFS_REPAIR_PROGRESS_RPT_H_


2 
	#_XFS_REPAIR_PROGRESS_RPT_H_


	)

4 
	#PROG_RPT_DEFAULT
 (15*60Ë

	)

5 
	#PHASE_START
 0

	)

6 
	#PHASE_END
 1

	)

9 
	#PROG_FMT_SCAN_AG
 0

	)

11 
	#PROG_FMT_AGI_UNLINKED
 1

	)

12 
	#PROG_FMT_UNCERTAIN
 2

	)

13 
	#PROG_FMT_PROCESS_INO
 3

	)

14 
	#PROG_FMT_NEW_INODES
 4

	)

16 
	#PROG_FMT_DUP_EXTENT
 5

	)

17 
	#PROG_FMT_INIT_RTEXT
 6

	)

18 
	#PROG_FMT_RESET_RTBM
 7

	)

19 
	#PROG_FMT_DUP_BLOCKS
 8

	)

21 
	#PROG_FMT_REBUILD_AG
 9

	)

23 
	#PROG_FMT_TRAVERSAL
 10

	)

24 
	#PROG_FMT_TRAVERSSUB
 11

	)

25 
	#PROG_FMT_DISCONINODE
 12

	)

27 
	#PROGRESS_FMT_CORR_LINK
 13

	)

28 
	#PROGRESS_FMT_VRFY_LINK
 14

	)

30 
	#DURATION_BUF_SIZE
 512

	)

32 
öô_¥ogªss_Ωt
();

33 
°›_¥ogªss_Ωt
();

34 
summ¨y_ªp‹t
();

35 
£t_¥ogªss_msg
(
ªp‹t
, 
__uöt64_t
 
tŸÆ
);

36 
__uöt64_t
 
¥öt_föÆ_Ωt
();

37 *
time°amp
(
íd
, 
pha£
, *
buf
);

38 *
duøti⁄
(
vÆ
, *
buf
);

39 
do_∑øŒñ
;

41 
	#PROG_RPT_INC
(
a
,
b
Ëi‡(
ag_°ride
 && 
¥og_Ωt_d⁄e
Ë◊Ë+(b)

	)

	@repair/protos.h

19 
xfs_öô
(
libxfs_öô_t
 *
¨gs
);

21 
vîify_sb
(*
sb_buf
,

22 
xfs_sb_t
 *
sb
,

23 
is_¥im¨y_sb
);

24 
vîify_£t_¥im¨y_sb
(
xfs_sb_t
 *
roŸ_sb
,

25 
sb_ödex
,

26 *
sb_modifõd
);

27 
gë_sb
(
xfs_sb_t
 *
sbp
,

28 
xfs_off_t
 
off
,

29 
size
,

30 
xfs_agnumbî_t
 
agno
);

31 
wrôe_¥im¨y_sb
(
xfs_sb_t
 *
sbp
,

32 
size
);

34 
föd_£c⁄d¨y_sb
(
xfs_sb_t
 *
sb
);

36 
	gfs_geomëry
;

37 
gë_sb_geomëry
(
fs_geomëry
 *
geo
,

38 
xfs_sb_t
 *
sbp
);

40 *
Æloc_ag_buf
(
size
);

42 
¥öt_öode_li°
(
xfs_agnumbî_t
 
i
);

43 *
îr_°rög
(
îr_code
);

45 
thªad_öô
();

47 
pha£1
(
xfs_mou¡
 *);

48 
pha£2
(
xfs_mou¡
 *, );

49 
pha£3
(
xfs_mou¡
 *, );

50 
pha£4
(
xfs_mou¡
 *);

51 
pha£5
(
xfs_mou¡
 *);

52 
pha£6
(
xfs_mou¡
 *);

53 
pha£7
(
xfs_mou¡
 *, );

55 
vîify_£t_aghódî
(
xfs_mou¡
 *, 
xfs_buf
 *,

56 
xfs_sb
 *, 
xfs_agf
 *, 
xfs_agi
 *,

57 
xfs_agnumbî_t
);

	@repair/rmap.c

20 
	~<libxfs.h
>

21 
	~"båì.h
"

22 
	~"îr_¥Ÿos.h
"

23 
	~"libxlog.h
"

24 
	~"öc‹e.h
"

25 
	~"globÆs.h
"

26 
	~"döode.h
"

27 
	~"¶ab.h
"

28 
	~"rm≠.h
"

30 #unde‡
RMAP_DEBUG


32 #ifde‡
RMAP_DEBUG


33 
	#dbg_¥ötf
(
f
, 
a
...Ëdÿ{
	`¥ötf
(f, ##á); 
	`fÊush
(
°dout
); } 0)

	)

35 
	#dbg_¥ötf
(
f
, 
a
...)

	)

39 
	sxfs_ag_rm≠
 {

40 
xfs_¶ab
 *
	m¨_rm≠s
;

41 
xfs_¶ab
 *
	m¨_øw_rm≠s
;

42 
	m¨_Êcou¡
;

44 
xfs_rm≠_úec
 
	m¨_œ°_rm≠
;

45 
xfs_¶ab
 *
	m¨_ªfcou¡_ôems
;

48 
xfs_ag_rm≠
 *
	gag_rm≠s
;

49 
boﬁ
 
	grm≠bt_su•e˘
;

50 
boﬁ
 
	gªfcbt_su•e˘
;

56 
	$rm≠_com∑ª
(

57 c⁄° *
a
,

58 c⁄° *
b
)

60 c⁄° 
xfs_rm≠_úec
 *
∑
;

61 c⁄° 
xfs_rm≠_úec
 *
pb
;

62 
__u64
 
ﬂ
;

63 
__u64
 
ob
;

65 
∑
 = 
a
; 
pb
 = 
b
;

66 
ﬂ
 = 
	`libxfs_rm≠_úec_off£t_∑ck
(
∑
);

67 
ob
 = 
	`libxfs_rm≠_úec_off£t_∑ck
(
pb
);

69 i‡(
∑
->
rm_°¨tblock
 < 
pb
->rm_startblock)

71 i‡(
∑
->
rm_°¨tblock
 > 
pb
->rm_startblock)

73 i‡(
∑
->
rm_ow√r
 < 
pb
->rm_owner)

75 i‡(
∑
->
rm_ow√r
 > 
pb
->rm_owner)

77 i‡(
ﬂ
 < 
ob
)

79 i‡(
ﬂ
 > 
ob
)

83 
	}
}

89 
boﬁ


90 
	$rm≠_√eds_w‹k
(

91 
xfs_mou¡
 *
mp
)

93  
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
) ||

94 
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
);

95 
	}
}

101 
	$rm≠s_öô
(

102 
xfs_mou¡
 *
mp
)

104 
xfs_agnumbî_t
 
i
;

105 
îr‹
;

107 i‡(!
	`rm≠_√eds_w‹k
(
mp
))

110 
ag_rm≠s
 = 
	`ˇŒoc
(
mp
->
m_sb
.
sb_agcou¡
, (
xfs_ag_rm≠
));

111 i‡(!
ag_rm≠s
)

112 
	`do_îr‹
(
	`_
("couldn'tállocateÖer-AGÑeverse mapÑoots\n"));

114 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++) {

115 
îr‹
 = 
	`öô_¶ab
(&
ag_rm≠s
[
i
].
¨_rm≠s
,

116 (
xfs_rm≠_úec
));

117 i‡(
îr‹
)

118 
	`do_îr‹
(

119 
	`_
("Insufficient memory whileállocatingÑeverse mapping slabs."));

120 
îr‹
 = 
	`öô_¶ab
(&
ag_rm≠s
[
i
].
¨_øw_rm≠s
,

121 (
xfs_rm≠_úec
));

122 i‡(
îr‹
)

123 
	`do_îr‹
(

124 
	`_
("Insufficient memory whileállocatingÑaw metadataÑeverse mapping slabs."));

125 
ag_rm≠s
[
i
].
¨_œ°_rm≠
.
rm_ow√r
 = 
XFS_RMAP_OWN_UNKNOWN
;

126 
îr‹
 = 
	`öô_¶ab
(&
ag_rm≠s
[
i
].
¨_ªfcou¡_ôems
,

127 (
xfs_ªfcou¡_úec
));

128 i‡(
îr‹
)

129 
	`do_îr‹
(

130 
	`_
("Insufficient memory whileállocatingÑefcount item slabs."));

132 
	}
}

138 
	$rm≠s_‰ì
(

139 
xfs_mou¡
 *
mp
)

141 
xfs_agnumbî_t
 
i
;

143 i‡(!
	`rm≠_√eds_w‹k
(
mp
))

146 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++) {

147 
	`‰ì_¶ab
(&
ag_rm≠s
[
i
].
¨_rm≠s
);

148 
	`‰ì_¶ab
(&
ag_rm≠s
[
i
].
¨_øw_rm≠s
);

149 
	`‰ì_¶ab
(&
ag_rm≠s
[
i
].
¨_ªfcou¡_ôems
);

151 
	`‰ì
(
ag_rm≠s
);

152 
ag_rm≠s
 = 
NULL
;

153 
	}
}

158 
boﬁ


159 
	$rm≠s_¨e_mîgóbÀ
(

160 
xfs_rm≠_úec
 *
r1
,

161 
xfs_rm≠_úec
 *
r2
)

163 i‡(
r1
->
rm_ow√r
 !
r2
->rm_owner)

164  
Ál£
;

165 i‡(
r1
->
rm_°¨tblock
 +Ñ1->
rm_blockcou¡
 !
r2
->rm_startblock)

166  
Ál£
;

167 i‡(()
r1
->
rm_blockcou¡
 + 
r2
->rm_blockcount >

168 
XFS_RMAP_LEN_MAX
)

169  
Ál£
;

170 i‡(
	`XFS_RMAP_NON_INODE_OWNER
(
r2
->
rm_ow√r
))

171  
åue
;

173 i‡(
r1
->
rm_Êags
 !
r2
->rm_flags)

174  
Ál£
;

175 i‡(
r1
->
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
)

176  
åue
;

177  
r1
->
rm_off£t
 +Ñ1->
rm_blockcou¡
 =
r2
->rm_offset;

178 
	}
}

185 
	$rm≠_add_ªc
(

186 
xfs_mou¡
 *
mp
,

187 
xfs_öo_t
 
öo
,

188 
whichf‹k
,

189 
xfs_bmbt_úec
 *
úec
)

191 
xfs_rm≠_úec
 
rm≠
;

192 
xfs_agnumbî_t
 
agno
;

193 
xfs_agblock_t
 
agbno
;

194 
xfs_rm≠_úec
 *
œ°_rm≠
;

195 
îr‹
 = 0;

197 i‡(!
	`rm≠_√eds_w‹k
(
mp
))

200 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
úec
->
br_°¨tblock
);

201 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
úec
->
br_°¨tblock
);

202 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

203 
	`ASSERT
(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
);

204 
	`ASSERT
(
agbno
 + 
úec
->
br_blockcou¡
 <
mp
->
m_sb
.
sb_agblocks
);

205 
	`ASSERT
(
öo
 !
NULLFSINO
);

206 
	`ASSERT
(
whichf‹k
 =
XFS_DATA_FORK
 || whichf‹k =
XFS_ATTR_FORK
);

208 
rm≠
.
rm_ow√r
 = 
öo
;

209 
rm≠
.
rm_off£t
 = 
úec
->
br_°¨toff
;

210 
rm≠
.
rm_Êags
 = 0;

211 i‡(
whichf‹k
 =
XFS_ATTR_FORK
)

212 
rm≠
.
rm_Êags
 |
XFS_RMAP_ATTR_FORK
;

213 
rm≠
.
rm_°¨tblock
 = 
agbno
;

214 
rm≠
.
rm_blockcou¡
 = 
úec
->
br_blockcou¡
;

215 i‡(
úec
->
br_°©e
 =
XFS_EXT_UNWRITTEN
)

216 
rm≠
.
rm_Êags
 |
XFS_RMAP_UNWRITTEN
;

217 
œ°_rm≠
 = &
ag_rm≠s
[
agno
].
¨_œ°_rm≠
;

218 i‡(
œ°_rm≠
->
rm_ow√r
 =
XFS_RMAP_OWN_UNKNOWN
)

219 *
œ°_rm≠
 = 
rm≠
;

220 i‡(
	`rm≠s_¨e_mîgóbÀ
(
œ°_rm≠
, &
rm≠
))

221 
œ°_rm≠
->
rm_blockcou¡
 +
rm≠
.rm_blockcount;

223 
îr‹
 = 
	`¶ab_add
(
ag_rm≠s
[
agno
].
¨_rm≠s
, 
œ°_rm≠
);

224 i‡(
îr‹
)

225  
îr‹
;

226 *
œ°_rm≠
 = 
rm≠
;

229  
îr‹
;

230 
	}
}

234 
	$rm≠_föish_cﬁÀ˘ög_f‹k_ªcs
(

235 
xfs_mou¡
 *
mp
,

236 
xfs_agnumbî_t
 
agno
)

238 i‡(!
	`rm≠_√eds_w‹k
(
mp
) ||

239 
ag_rm≠s
[
agno
].
¨_œ°_rm≠
.
rm_ow√r
 =
XFS_RMAP_OWN_UNKNOWN
)

241  
	`¶ab_add
(
ag_rm≠s
[
agno
].
¨_rm≠s
, &ag_rm≠s[agno].
¨_œ°_rm≠
);

242 
	}
}

246 
	$__rm≠_add_øw_ªc
(

247 
xfs_mou¡
 *
mp
,

248 
xfs_agnumbî_t
 
agno
,

249 
xfs_agblock_t
 
agbno
,

250 
xfs_exéí_t
 
Àn
,

251 
uöt64_t
 
ow√r
,

252 
boﬁ
 
is_©å
,

253 
boﬁ
 
is_bmbt
)

255 
xfs_rm≠_úec
 
rm≠
;

257 
	`ASSERT
(
Àn
 != 0);

258 
rm≠
.
rm_ow√r
 = 
ow√r
;

259 
rm≠
.
rm_off£t
 = 0;

260 
rm≠
.
rm_Êags
 = 0;

261 i‡(
is_©å
)

262 
rm≠
.
rm_Êags
 |
XFS_RMAP_ATTR_FORK
;

263 i‡(
is_bmbt
)

264 
rm≠
.
rm_Êags
 |
XFS_RMAP_BMBT_BLOCK
;

265 
rm≠
.
rm_°¨tblock
 = 
agbno
;

266 
rm≠
.
rm_blockcou¡
 = 
Àn
;

267  
	`¶ab_add
(
ag_rm≠s
[
agno
].
¨_øw_rm≠s
, &
rm≠
);

268 
	}
}

274 
	$rm≠_add_bmbt_ªc
(

275 
xfs_mou¡
 *
mp
,

276 
xfs_öo_t
 
öo
,

277 
whichf‹k
,

278 
xfs_fsblock_t
 
fsbno
)

280 
xfs_agnumbî_t
 
agno
;

281 
xfs_agblock_t
 
agbno
;

283 i‡(!
	`rm≠_√eds_w‹k
(
mp
))

286 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
fsbno
);

287 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
fsbno
);

288 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

289 
	`ASSERT
(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
);

290 
	`ASSERT
(
agbno
 + 1 <
mp
->
m_sb
.
sb_agblocks
);

292  
	`__rm≠_add_øw_ªc
(
mp
, 
agno
, 
agbno
, 1, 
öo
,

293 
whichf‹k
 =
XFS_ATTR_FORK
, 
åue
);

294 
	}
}

300 
	$rm≠_add_ag_ªc
(

301 
xfs_mou¡
 *
mp
,

302 
xfs_agnumbî_t
 
agno
,

303 
xfs_agblock_t
 
agbno
,

304 
xfs_exéí_t
 
Àn
,

305 
uöt64_t
 
ow√r
)

307 i‡(!
	`rm≠_√eds_w‹k
(
mp
))

310 
	`ASSERT
(
agno
 !
NULLAGNUMBER
);

311 
	`ASSERT
(
agno
 < 
mp
->
m_sb
.
sb_agcou¡
);

312 
	`ASSERT
(
agbno
 + 
Àn
 <
mp
->
m_sb
.
sb_agblocks
);

314  
	`__rm≠_add_øw_ªc
(
mp
, 
agno
, 
agbno
, 
Àn
, 
ow√r
, 
Ál£
, false);

315 
	}
}

321 
	$rm≠_fﬁd_øw_ªcs
(

322 
xfs_mou¡
 *
mp
,

323 
xfs_agnumbî_t
 
agno
)

325 
xfs_¶ab_curs‹
 *
cur
 = 
NULL
;

326 
xfs_rm≠_úec
 *
¥ev
, *
ªc
;

327 
size_t
 
ﬁd_sz
;

328 
îr‹
 = 0;

330 
ﬁd_sz
 = 
	`¶ab_cou¡
(
ag_rm≠s
[
agno
].
¨_rm≠s
);

331 i‡(
	`¶ab_cou¡
(
ag_rm≠s
[
agno
].
¨_øw_rm≠s
) == 0)

332 
no_øw
;

333 
	`qs‹t_¶ab
(
ag_rm≠s
[
agno
].
¨_øw_rm≠s
, 
rm≠_com∑ª
);

334 
îr‹
 = 
	`öô_¶ab_curs‹
(
ag_rm≠s
[
agno
].
¨_øw_rm≠s
, 
rm≠_com∑ª
,

335 &
cur
);

336 i‡(
îr‹
)

337 
îr
;

339 
¥ev
 = 
	`p›_¶ab_curs‹
(
cur
);

340 
ªc
 = 
	`p›_¶ab_curs‹
(
cur
);

341 
¥ev
 && 
ªc
) {

342 i‡(
	`rm≠s_¨e_mîgóbÀ
(
¥ev
, 
ªc
)) {

343 
¥ev
->
rm_blockcou¡
 +
ªc
->rm_blockcount;

344 
ªc
 = 
	`p›_¶ab_curs‹
(
cur
);

347 
îr‹
 = 
	`¶ab_add
(
ag_rm≠s
[
agno
].
¨_rm≠s
, 
¥ev
);

348 i‡(
îr‹
)

349 
îr
;

350 
¥ev
 = 
ªc
;

351 
ªc
 = 
	`p›_¶ab_curs‹
(
cur
);

353 i‡(
¥ev
) {

354 
îr‹
 = 
	`¶ab_add
(
ag_rm≠s
[
agno
].
¨_rm≠s
, 
¥ev
);

355 i‡(
îr‹
)

356 
îr
;

358 
	`‰ì_¶ab
(&
ag_rm≠s
[
agno
].
¨_øw_rm≠s
);

359 
îr‹
 = 
	`öô_¶ab
(&
ag_rm≠s
[
agno
].
¨_øw_rm≠s
,

360 (
xfs_rm≠_úec
));

361 i‡(
îr‹
)

362 
	`do_îr‹
(

363 
	`_
("Insufficient memory whileállocatingÑaw metadataÑeverse mapping slabs."));

364 
no_øw
:

365 i‡(
ﬁd_sz
)

366 
	`qs‹t_¶ab
(
ag_rm≠s
[
agno
].
¨_rm≠s
, 
rm≠_com∑ª
);

367 
îr
:

368 
	`‰ì_¶ab_curs‹
(&
cur
);

369  
îr‹
;

370 
	}
}

373 
	$föd_fú°_zîo_bô
(

374 
__uöt64_t
 
mask
)

376 
n
;

377 
b
 = 0;

379 
n
 = 0;Ç < (
mask
Ë* 
NBBY
 && (mask & 1);Ç++, mask >>= 1)

380 
b
++;

382  
b
;

383 
	}
}

386 
	$p›˙t
(

387 
__uöt64_t
 
mask
)

389 
n
;

390 
b
 = 0;

392 i‡(
mask
 == 0)

395 
n
 = 0;Ç < (
mask
Ë* 
NBBY
;Ç++, mask >>= 1)

396 i‡(
mask
 & 1)

397 
b
++;

399  
b
;

400 
	}
}

407 
	$rm≠_add_fixed_ag_ªc
(

408 
xfs_mou¡
 *
mp
,

409 
xfs_agnumbî_t
 
agno
)

411 
xfs_fsblock_t
 
fsbno
;

412 
xfs_agblock_t
 
agbno
;

413 
öo_åì_node_t
 *
öo_ªc
;

414 
xfs_agöo_t
 
agöo
;

415 
îr‹
;

416 
°¨tidx
;

417 
ƒ
;

419 i‡(!
	`rm≠_√eds_w‹k
(
mp
))

423 
îr‹
 = 
	`rm≠_add_ag_ªc
(
mp
, 
agno
, 0, 
	`XFS_BNO_BLOCK
(mp),

424 
XFS_RMAP_OWN_FS
);

425 i‡(
îr‹
)

426 
out
;

429 
öo_ªc
 = 
	`födfú°_öode_ªc
(
agno
);

430 ; 
öo_ªc
 !
NULL
; ino_ª¯
	`√xt_öo_ªc
(ino_rec)) {

431 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
)) {

432 
°¨tidx
 = 
	`föd_fú°_zîo_bô
(
öo_ªc
->
ú_•¨£
);

433 
ƒ
 = 
XFS_INODES_PER_CHUNK
 - 
	`p›˙t
(
öo_ªc
->
ú_•¨£
);

435 
°¨tidx
 = 0;

436 
ƒ
 = 
XFS_INODES_PER_CHUNK
;

438 
ƒ
 /
mp
->
m_sb
.
sb_ö›block
;

439 i‡(
ƒ
 == 0)

440 
ƒ
 = 1;

441 
agöo
 = 
öo_ªc
->
öo_°¨äum
 + 
°¨tidx
;

442 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
agöo
);

443 i‡(
	`XFS_AGINO_TO_OFFSET
(
mp
, 
agöo
) == 0) {

444 
îr‹
 = 
	`rm≠_add_ag_ªc
(
mp
, 
agno
, 
agbno
, 
ƒ
,

445 
XFS_RMAP_OWN_INODES
);

446 i‡(
îr‹
)

447 
out
;

452 
fsbno
 = 
mp
->
m_sb
.
sb_log°¨t
;

453 i‡(
fsbno
 && 
	`XFS_FSB_TO_AGNO
(
mp
, fsbnoË=
agno
) {

454 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, mp->
m_sb
.
sb_log°¨t
);

455 
îr‹
 = 
	`rm≠_add_ag_ªc
(
mp
, 
agno
, 
agbno
, mp->
m_sb
.
sb_logblocks
,

456 
XFS_RMAP_OWN_LOG
);

457 i‡(
îr‹
)

458 
out
;

460 
out
:

461  
îr‹
;

462 
	}
}

485 
	$rm≠_°‹e_ag_båì_ªc
(

486 
xfs_mou¡
 *
mp
,

487 
xfs_agnumbî_t
 
agno
)

489 
xfs_¶ab_curs‹
 *
rm_cur
;

490 
xfs_rm≠_úec
 *
rm_ªc
 = 
NULL
;

491 
xfs_buf
 *
agbp
 = 
NULL
;

492 
xfs_buf
 *
agÊbp
 = 
NULL
;

493 
xfs_å™s
 *
ç
;

494 
xfs_å™s_ªs
 
åes
 = {0};

495 
__be32
 *
agÊ_bno
, *
b
;

496 
îr‹
 = 0;

497 
xfs_ow√r_öfo
 
oöfo
;

499 i‡(!
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

503 
	`‰ì_¶ab
(&
ag_rm≠s
[
agno
].
¨_rm≠s
);

504 
îr‹
 = 
	`öô_¶ab
(&
ag_rm≠s
[
agno
].
¨_rm≠s
,

505 (
xfs_rm≠_úec
));

506 i‡(
îr‹
)

507 
îr
;

510 
îr‹
 = -
	`libxfs_å™s_ªad_buf
(

511 
mp
, 
NULL
, mp->
m_ddev_èrgp
,

512 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGFL_DADDR
(mp)),

513 
	`XFS_FSS_TO_BB
(
mp
, 1), 0, &
agÊbp
, &
xfs_agÊ_buf_›s
);

514 i‡(
îr‹
)

515 
îr
;

526 
agÊ_bno
 = 
	`XFS_BUF_TO_AGFL_BNO
(
mp
, 
agÊbp
);

527 
b
 = 
agÊ_bno
 + 
ag_rm≠s
[
agno
].
¨_Êcou¡
;

528 *
b
 !
NULLAGBLOCK
 && b - 
agÊ_bno
 < 
	`XFS_AGFL_SIZE
(
mp
)) {

529 
îr‹
 = 
	`rm≠_add_ag_ªc
(
mp
, 
agno
, 
	`be32_to_˝u
(*
b
), 1,

530 
XFS_RMAP_OWN_AG
);

531 i‡(
îr‹
)

532 
îr
;

533 
b
++;

535 
	`libxfs_putbuf
(
agÊbp
);

536 
agÊbp
 = 
NULL
;

539 
îr‹
 = 
	`rm≠_fﬁd_øw_ªcs
(
mp
, 
agno
);

540 i‡(
îr‹
)

541 
îr
;

544 
îr‹
 = 
	`öô_¶ab_curs‹
(
ag_rm≠s
[
agno
].
¨_rm≠s
, 
rm≠_com∑ª
,

545 &
rm_cur
);

546 i‡(
îr‹
)

547 
îr
;

550 
rm_ªc
 = 
	`p›_¶ab_curs‹
(
rm_cur
);

551 
rm_ªc
) {

552 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
, 16, 0, 0, &
ç
);

553 i‡(
îr‹
)

554 
îr_¶ab
;

556 
îr‹
 = -
	`libxfs_Æloc_ªad_agf
(
mp
, 
ç
, 
agno
, 0, &
agbp
);

557 i‡(
îr‹
)

558 
îr_å™s
;

560 
	`ASSERT
(
	`XFS_RMAP_NON_INODE_OWNER
(
rm_ªc
->
rm_ow√r
));

561 
	`libxfs_rm≠_ag_ow√r
(&
oöfo
, 
rm_ªc
->
rm_ow√r
);

562 
îr‹
 = -
	`libxfs_rm≠_Æloc
(
ç
, 
agbp
, 
agno
, 
rm_ªc
->
rm_°¨tblock
,

563 
rm_ªc
->
rm_blockcou¡
, &
oöfo
);

564 i‡(
îr‹
)

565 
îr_å™s
;

567 
îr‹
 = -
	`libxfs_å™s_commô
(
ç
);

568 i‡(
îr‹
)

569 
îr_¶ab
;

571 
	`fix_‰ìli°
(
mp
, 
agno
, 
Ál£
);

573 
rm_ªc
 = 
	`p›_¶ab_curs‹
(
rm_cur
);

576 
	`‰ì_¶ab_curs‹
(&
rm_cur
);

579 
îr_å™s
:

580 
	`libxfs_å™s_ˇn˚l
(
ç
);

581 
îr_¶ab
:

582 
	`‰ì_¶ab_curs‹
(&
rm_cur
);

583 
îr
:

584 i‡(
agÊbp
)

585 
	`libxfs_putbuf
(
agÊbp
);

586  
îr‹
;

587 
	}
}

589 #ifde‡
RMAP_DEBUG


591 
	$rm≠_dump
(

592 c⁄° *
msg
,

593 
xfs_agnumbî_t
 
agno
,

594 
xfs_rm≠_úec
 *
rm≠
)

596 
	`¥ötf
("%s: %págno=%uÖblk=%llu own=%lldÜblk=%lluÜen=%u flags=0x%x\n",

597 
msg
, 
rm≠
,

598 ()
agno
,

599 ()
rm≠
->
rm_°¨tblock
,

600 ()
rm≠
->
rm_ow√r
,

601 ()
rm≠
->
rm_off£t
,

602 ()
rm≠
->
rm_blockcou¡
,

603 ()
rm≠
->
rm_Êags
);

604 
	}
}

606 
	#rm≠_dump
(
m
, 
a
, 
r
)

	)

681 
	$m¨k_öode_æ
(

682 
xfs_mou¡
 *
mp
,

683 
xfs_bag
 *
rm≠s
)

685 
xfs_agnumbî_t
 
ügno
;

686 
xfs_rm≠_úec
 *
rm≠
;

687 
öo_åì_node
 *
úec
;

688 
off
;

689 
size_t
 
idx
;

690 
xfs_agöo_t
 
öo
;

692 i‡(
	`bag_cou¡
(
rm≠s
) < 2)

696 
	`f‹óch_bag_±r
(
rm≠s
, 
idx
, 
rm≠
) {

697 
	`ASSERT
(!
	`XFS_RMAP_NON_INODE_OWNER
(
rm≠
->
rm_ow√r
));

698 
ügno
 = 
	`XFS_INO_TO_AGNO
(
mp
, 
rm≠
->
rm_ow√r
);

699 
öo
 = 
	`XFS_INO_TO_AGINO
(
mp
, 
rm≠
->
rm_ow√r
);

700 
	`±hªad_muãx_lock
(&
ag_locks
[
ügno
].
lock
);

701 
úec
 = 
	`föd_öode_ªc
(
mp
, 
ügno
, 
öo
);

702 
off
 = 
	`gë_öode_off£t
(
mp
, 
rm≠
->
rm_ow√r
, 
úec
);

704 
	`£t_öode_is_æ
(
úec
, 
off
);

705 
	`±hªad_muãx_u∆ock
(&
ag_locks
[
ügno
].
lock
);

707 
	}
}

712 
	#REFCOUNT_CLAMP
(
ƒ
Ë(“rË> 
MAXREFCOUNT
 ? MAXREFCOUNT : (ƒ))

	)

714 
	$ªfcou¡_emô
(

715 
xfs_mou¡
 *
mp
,

716 
xfs_agnumbî_t
 
agno
,

717 
xfs_agblock_t
 
agbno
,

718 
xfs_exéí_t
 
Àn
,

719 
size_t
 
ƒ_rm≠s
)

721 
xfs_ªfcou¡_úec
 
æªc
;

722 
îr‹
;

723 
xfs_¶ab
 *
æ¶ab
;

725 
æ¶ab
 = 
ag_rm≠s
[
agno
].
¨_ªfcou¡_ôems
;

726 
	`ASSERT
(
ƒ_rm≠s
 > 0);

728 
	`dbg_¥ötf
("REFL:ágno=%uÖblk=%u,Üen=%u ->Ñefcount=%zu\n",

729 
agno
, 
agbno
, 
Àn
, 
ƒ_rm≠s
);

730 
æªc
.
rc_°¨tblock
 = 
agbno
;

731 
æªc
.
rc_blockcou¡
 = 
Àn
;

732 
æªc
.
rc_ªfcou¡
 = 
	`REFCOUNT_CLAMP
(
ƒ_rm≠s
);

733 
îr‹
 = 
	`¶ab_add
(
æ¶ab
, &
æªc
);

734 i‡(
îr‹
)

735 
	`do_îr‹
(

736 
	`_
("Insufficient memory whileÑecreatingÑefcountÅree."));

737 
	}
}

738 #unde‡
REFCOUNT_CLAMP


744 
	#RMAP_END
(
r
Ë(‘)->
rm_°¨tblock
 + (r)->
rm_blockcou¡
)

	)

746 
	$compuã_ªfcou¡s
(

747 
xfs_mou¡
 *
mp
,

748 
xfs_agnumbî_t
 
agno
)

750 
xfs_bag
 *
°ack_t›
 = 
NULL
;

751 
xfs_¶ab
 *
rm≠s
;

752 
xfs_¶ab_curs‹
 *
rm≠s_cur
;

753 
xfs_rm≠_úec
 *
¨øy_cur
;

754 
xfs_rm≠_úec
 *
rm≠
;

755 
xfs_agblock_t
 
sbno
;

756 
xfs_agblock_t
 
cbno
;

757 
xfs_agblock_t
 
nbno
;

758 
size_t
 
n
, 
idx
;

759 
size_t
 
ﬁd_°ack_ƒ
;

760 
îr‹
;

762 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

765 
rm≠s
 = 
ag_rm≠s
[
agno
].
¨_rm≠s
;

767 
îr‹
 = 
	`öô_¶ab_curs‹
(
rm≠s
, 
rm≠_com∑ª
, &
rm≠s_cur
);

768 i‡(
îr‹
)

769  
îr‹
;

771 
îr‹
 = 
	`öô_bag
(&
°ack_t›
);

772 i‡(
îr‹
)

773 
îr
;

776 
n
 = 0;

777 
n
 < 
	`¶ab_cou¡
(
rm≠s
)) {

778 
¨øy_cur
 = 
	`≥ek_¶ab_curs‹
(
rm≠s_cur
);

779 
sbno
 = 
cbno
 = 
¨øy_cur
->
rm_°¨tblock
;

782 
¨øy_cur
 &&áºay_cur->
rm_°¨tblock
 =
sbno
;

783 
¨øy_cur
 = 
	`≥ek_¶ab_curs‹
(
rm≠s_cur
)) {

784 
	`adv™˚_¶ab_curs‹
(
rm≠s_cur
); 
n
++;

785 
	`rm≠_dump
("push0", 
agno
, 
¨øy_cur
);

786 
îr‹
 = 
	`bag_add
(
°ack_t›
, 
¨øy_cur
);

787 i‡(
îr‹
)

788 
îr
;

790 
	`m¨k_öode_æ
(
mp
, 
°ack_t›
);

793 i‡(
n
 < 
	`¶ab_cou¡
(
rm≠s
Ë&& 
¨øy_cur
)

794 
nbno
 = 
¨øy_cur
->
rm_°¨tblock
;

796 
nbno
 = 
NULLAGBLOCK
;

797 
	`f‹óch_bag_±r
(
°ack_t›
, 
idx
, 
rm≠
) {

798 
nbno
 = 
	`mö
“bno, 
	`RMAP_END
(
rm≠
));

802 
	`ASSERT
(
nbno
 > 
sbno
);

803 
ﬁd_°ack_ƒ
 = 
	`bag_cou¡
(
°ack_t›
);

806 
	`bag_cou¡
(
°ack_t›
)) {

808 
	`f‹óch_bag_±r_ªvî£
(
°ack_t›
, 
idx
, 
rm≠
) {

809 i‡(
	`RMAP_END
(
rm≠
Ë!
nbno
)

811 
	`rm≠_dump
("p›", 
agno
, 
rm≠
);

812 
îr‹
 = 
	`bag_ªmove
(
°ack_t›
, 
idx
);

813 i‡(
îr‹
)

814 
îr
;

819 
¨øy_cur
 &&áºay_cur->
rm_°¨tblock
 =
nbno
;

820 
¨øy_cur
 = 
	`≥ek_¶ab_curs‹
(
rm≠s_cur
)) {

821 
	`adv™˚_¶ab_curs‹
(
rm≠s_cur
); 
n
++;

822 
	`rm≠_dump
("push1", 
agno
, 
¨øy_cur
);

823 
îr‹
 = 
	`bag_add
(
°ack_t›
, 
¨øy_cur
);

824 i‡(
îr‹
)

825 
îr
;

827 
	`m¨k_öode_æ
(
mp
, 
°ack_t›
);

830 
	`ASSERT
(
nbno
 > 
cbno
);

831 i‡(
	`bag_cou¡
(
°ack_t›
Ë!
ﬁd_°ack_ƒ
) {

832 i‡(
ﬁd_°ack_ƒ
 > 1) {

833 
	`ªfcou¡_emô
(
mp
, 
agno
, 
cbno
,

834 
nbno
 - 
cbno
,

835 
ﬁd_°ack_ƒ
);

837 
cbno
 = 
nbno
;

841 i‡(
	`bag_cou¡
(
°ack_t›
) == 0)

843 
ﬁd_°ack_ƒ
 = 
	`bag_cou¡
(
°ack_t›
);

844 
sbno
 = 
nbno
;

847 i‡(
n
 < 
	`¶ab_cou¡
(
rm≠s
))

848 
nbno
 = 
¨øy_cur
->
rm_°¨tblock
;

850 
nbno
 = 
NULLAGBLOCK
;

851 
	`f‹óch_bag_±r
(
°ack_t›
, 
idx
, 
rm≠
) {

852 
nbno
 = 
	`mö
“bno, 
	`RMAP_END
(
rm≠
));

856 
	`ASSERT
(
nbno
 > 
sbno
);

859 
îr
:

860 
	`‰ì_bag
(&
°ack_t›
);

861 
	`‰ì_¶ab_curs‹
(&
rm≠s_cur
);

863  
îr‹
;

864 
	}
}

865 #unde‡
RMAP_END


870 
size_t


871 
	$rm≠_ªc‹d_cou¡
(

872 
xfs_mou¡
 *
mp
,

873 
xfs_agnumbî_t
 
agno
)

875  
	`¶ab_cou¡
(
ag_rm≠s
[
agno
].
¨_rm≠s
);

876 
	}
}

882 
	$rm≠_öô_curs‹
(

883 
xfs_agnumbî_t
 
agno
,

884 
xfs_¶ab_curs‹
 **
cur
)

886  
	`öô_¶ab_curs‹
(
ag_rm≠s
[
agno
].
¨_rm≠s
, 
rm≠_com∑ª
, 
cur
);

887 
	}
}

893 
	$rm≠_avoid_check
()

895 
rm≠bt_su•e˘
 = 
åue
;

896 
	}
}

900 
	$rm≠_lookup
(

901 
xfs_båì_cur
 *
bt_cur
,

902 
xfs_rm≠_úec
 *
rm_ªc
,

903 
xfs_rm≠_úec
 *
tmp
,

904 *
have
)

906 
îr‹
;

909 
îr‹
 = -
	`libxfs_rm≠_lookup_À
(
bt_cur
, 
rm_ªc
->
rm_°¨tblock
,

910 
rm_ªc
->
rm_blockcou¡
,

911 
rm_ªc
->
rm_ow√r
,Ñm_ªc->
rm_off£t
,

912 
rm_ªc
->
rm_Êags
, 
have
);

913 i‡(
îr‹
)

914  
îr‹
;

915 i‡(*
have
 == 0)

916  
îr‹
;

917  -
	`libxfs_rm≠_gë_ªc
(
bt_cur
, 
tmp
, 
have
);

918 
	}
}

922 
	$rm≠_lookup_ovîœµed
(

923 
xfs_båì_cur
 *
bt_cur
,

924 
xfs_rm≠_úec
 *
rm_ªc
,

925 
xfs_rm≠_úec
 *
tmp
,

926 *
have
)

929  -
	`libxfs_rm≠_lookup_À_ønge
(
bt_cur
, 
rm_ªc
->
rm_°¨tblock
,

930 
rm_ªc
->
rm_ow√r
,Ñm_ªc->
rm_off£t
,

931 
rm_ªc
->
rm_Êags
, 
tmp
, 
have
);

932 
	}
}

935 
	#NEXTP
(
x
Ë((x)->
rm_°¨tblock
 + (x)->
rm_blockcou¡
)

	)

936 
	#NEXTL
(
x
Ë((x)->
rm_off£t
 + (x)->
rm_blockcou¡
)

	)

937 
boﬁ


938 
	$rm≠_is_good
(

939 
xfs_rm≠_úec
 *
ob£rved
,

940 
xfs_rm≠_úec
 *
båì
)

943 i‡(
båì
->
rm_Êags
 !
ob£rved
->rm_flags ||

944 
båì
->
rm_ow√r
 !
ob£rved
->rm_owner)

945  
Ál£
;

951 i‡(
båì
->
rm_°¨tblock
 > 
ob£rved
->rm_startblock ||

952 
	`NEXTP
(
båì
Ë< NEXTP(
ob£rved
))

953  
Ál£
;

956 i‡(
	`XFS_RMAP_NON_INODE_OWNER
(
ob£rved
->
rm_ow√r
) ||

957 (
ob£rved
->
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
))

958  
åue
;

963 i‡(
båì
->
rm_off£t
 > 
ob£rved
->rm_offset ||

964 
	`NEXTL
(
båì
Ë< NEXTL(
ob£rved
))

965  
Ál£
;

967  
åue
;

968 
	}
}

969 #unde‡
NEXTP


970 #unde‡
NEXTL


976 
	$rm≠s_vîify_båì
(

977 
xfs_mou¡
 *
mp
,

978 
xfs_agnumbî_t
 
agno
)

980 
xfs_¶ab_curs‹
 *
rm_cur
;

981 
xfs_båì_cur
 *
bt_cur
 = 
NULL
;

982 
îr‹
;

983 
have
;

984 
xfs_buf
 *
agbp
 = 
NULL
;

985 
xfs_rm≠_úec
 *
rm_ªc
;

986 
xfs_rm≠_úec
 
tmp
;

987 
xfs_≥øg
 *
∑g
;

989 i‡(!
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
))

991 i‡(
rm≠bt_su•e˘
) {

992 i‡(
no_modify
 && 
agno
 == 0)

993 
	`do_w¨n
(
	`_
("wouldÑebuild corruptÑmap btrees.\n"));

998 
îr‹
 = 
	`rm≠_öô_curs‹
(
agno
, &
rm_cur
);

999 i‡(
îr‹
)

1000  
îr‹
;

1002 
îr‹
 = -
	`libxfs_Æloc_ªad_agf
(
mp
, 
NULL
, 
agno
, 0, &
agbp
);

1003 i‡(
îr‹
)

1004 
îr
;

1007 
∑g
 = 
	`libxfs_≥øg_gë
(
mp
, 
agno
);

1008 
∑g
->
∑gf_öô
 = 0;

1009 
	`libxfs_≥øg_put
(
∑g
);

1011 
bt_cur
 = 
	`libxfs_rm≠bt_öô_curs‹
(
mp
, 
NULL
, 
agbp
, 
agno
);

1012 i‡(!
bt_cur
) {

1013 
îr‹
 = -
ENOMEM
;

1014 
îr
;

1017 
rm_ªc
 = 
	`p›_¶ab_curs‹
(
rm_cur
);

1018 
rm_ªc
) {

1019 
îr‹
 = 
	`rm≠_lookup
(
bt_cur
, 
rm_ªc
, &
tmp
, &
have
);

1020 i‡(
îr‹
)

1021 
îr
;

1027 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
bt_cur
->
bc_mp
->
m_sb
) &&

1028 (!
have
 || !
	`rm≠_is_good
(
rm_ªc
, &
tmp
))) {

1029 
îr‹
 = 
	`rm≠_lookup_ovîœµed
(
bt_cur
, 
rm_ªc
,

1030 &
tmp
, &
have
);

1031 i‡(
îr‹
)

1032 
îr
;

1034 i‡(!
have
) {

1035 
	`do_w¨n
(

1036 
	`_
("MissögÑevî£-m≠pögÑec‹d f‹ (%u/%uË%¶í %u ow√∏%"
PRId64
" \
%s%sof‡%"
PRIu64
"\n"),

1038 
agno
, 
rm_ªc
->
rm_°¨tblock
,

1039 (
rm_ªc
->
rm_Êags
 & 
XFS_RMAP_UNWRITTEN
) ?

1040 
	`_
("unwritten ") : "",

1041 
rm_ªc
->
rm_blockcou¡
,

1042 
rm_ªc
->
rm_ow√r
,

1043 (
rm_ªc
->
rm_Êags
 & 
XFS_RMAP_ATTR_FORK
) ?

1044 
	`_
("attr ") : "",

1045 (
rm_ªc
->
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
) ?

1046 
	`_
("bmbt ") : "",

1047 
rm_ªc
->
rm_off£t
);

1048 
√xt_lo›
;

1052 i‡(!
	`rm≠_is_good
(
rm_ªc
, &
tmp
)) {

1053 
	`do_w¨n
(

1054 
	`_
("Inc‹ª˘Ñevî£-m≠pög: saw (%u/%uË%¶í %u ow√∏%"
PRId64
" %s%sof‡\
%"
PRIu64
"; should be (%u/%u) %slen %u owner %"PRId64" %s%soff %"PRIu64"\n"),

1056 
agno
, 
tmp
.
rm_°¨tblock
,

1057 (
tmp
.
rm_Êags
 & 
XFS_RMAP_UNWRITTEN
) ?

1058 
	`_
("unwritten ") : "",

1059 
tmp
.
rm_blockcou¡
,

1060 
tmp
.
rm_ow√r
,

1061 (
tmp
.
rm_Êags
 & 
XFS_RMAP_ATTR_FORK
) ?

1062 
	`_
("attr ") : "",

1063 (
tmp
.
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
) ?

1064 
	`_
("bmbt ") : "",

1065 
tmp
.
rm_off£t
,

1066 
agno
, 
rm_ªc
->
rm_°¨tblock
,

1067 (
rm_ªc
->
rm_Êags
 & 
XFS_RMAP_UNWRITTEN
) ?

1068 
	`_
("unwritten ") : "",

1069 
rm_ªc
->
rm_blockcou¡
,

1070 
rm_ªc
->
rm_ow√r
,

1071 (
rm_ªc
->
rm_Êags
 & 
XFS_RMAP_ATTR_FORK
) ?

1072 
	`_
("attr ") : "",

1073 (
rm_ªc
->
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
) ?

1074 
	`_
("bmbt ") : "",

1075 
rm_ªc
->
rm_off£t
);

1076 
√xt_lo›
;

1078 
√xt_lo›
:

1079 
rm_ªc
 = 
	`p›_¶ab_curs‹
(
rm_cur
);

1082 
îr
:

1083 i‡(
bt_cur
)

1084 
	`libxfs_båì_dñ_curs‹
(
bt_cur
, 
XFS_BTREE_NOERROR
);

1085 i‡(
agbp
)

1086 
	`libxfs_putbuf
(
agbp
);

1087 
	`‰ì_¶ab_curs‹
(&
rm_cur
);

1089 
	}
}

1095 
__öt64_t


1096 
	$rm≠_diffkeys
(

1097 
xfs_rm≠_úec
 *
kp1
,

1098 
xfs_rm≠_úec
 *
kp2
)

1100 
__u64
 
ﬂ
;

1101 
__u64
 
ob
;

1102 
__öt64_t
 
d
;

1103 
xfs_rm≠_úec
 
tmp
;

1105 
tmp
 = *
kp1
;

1106 
tmp
.
rm_Êags
 &~
XFS_RMAP_REC_FLAGS
;

1107 
ﬂ
 = 
	`libxfs_rm≠_úec_off£t_∑ck
(&
tmp
);

1108 
tmp
 = *
kp2
;

1109 
tmp
.
rm_Êags
 &~
XFS_RMAP_REC_FLAGS
;

1110 
ob
 = 
	`libxfs_rm≠_úec_off£t_∑ck
(&
tmp
);

1112 
d
 = (
__öt64_t
)
kp1
->
rm_°¨tblock
 - 
kp2
->rm_startblock;

1113 i‡(
d
)

1114  
d
;

1116 i‡(
kp1
->
rm_ow√r
 > 
kp2
->rm_owner)

1118 i‡(
kp2
->
rm_ow√r
 > 
kp1
->rm_owner)

1121 i‡(
ﬂ
 > 
ob
)

1123 i‡(
ob
 > 
ﬂ
)

1126 
	}
}

1130 
	$rm≠_high_key_‰om_ªc
(

1131 
xfs_rm≠_úec
 *
ªc
,

1132 
xfs_rm≠_úec
 *
key
)

1134 
adj
;

1136 
adj
 = 
ªc
->
rm_blockcou¡
 - 1;

1138 
key
->
rm_°¨tblock
 = 
ªc
->rm_°¨tblock + 
adj
;

1139 
key
->
rm_ow√r
 = 
ªc
->rm_owner;

1140 
key
->
rm_off£t
 = 
ªc
->rm_offset;

1141 
key
->
rm_Êags
 = 
ªc
->rm_Êag†& 
XFS_RMAP_KEY_FLAGS
;

1142 i‡(
	`XFS_RMAP_NON_INODE_OWNER
(
ªc
->
rm_ow√r
) ||

1143 (
ªc
->
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
))

1145 
key
->
rm_off£t
 +
adj
;

1146 
	}
}

1153 
	$ªc‹d_öode_ªÊök_Êag
(

1154 
xfs_mou¡
 *
mp
,

1155 
xfs_döode
 *
döo
,

1156 
xfs_agnumbî_t
 
agno
,

1157 
xfs_agöo_t
 
öo
,

1158 
xfs_öo_t
 
löo
)

1160 
öo_åì_node
 *
úec
;

1161 
off
;

1163 
	`ASSERT
(
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
Ë=
	`be64_to_˝u
(
döo
->
di_öo
));

1164 i‡(!(
	`be64_to_˝u
(
döo
->
di_Êags2
Ë& 
XFS_DIFLAG2_REFLINK
))

1166 
úec
 = 
	`föd_öode_ªc
(
mp
, 
agno
, 
öo
);

1167 
off
 = 
	`gë_öode_off£t
(
mp
, 
löo
, 
úec
);

1168 
	`ASSERT
(!
	`öode_was_æ
(
úec
, 
off
));

1169 
	`£t_öode_was_æ
(
úec
, 
off
);

1170 
	`dbg_¥ötf
("set was_rlÜino=%llu was=0x%llx\n",

1171 ()
löo
, ()
úec
->
öo_was_æ
);

1172 
	}
}

1178 
	$fix_öode_ªÊök_Êag
(

1179 
xfs_mou¡
 *
mp
,

1180 
xfs_agnumbî_t
 
agno
,

1181 
xfs_agöo_t
 
agöo
,

1182 
boﬁ
 
£t
)

1184 
xfs_döode
 *
döo
;

1185 
xfs_buf
 *
buf
;

1187 i‡(
£t
)

1188 
	`do_w¨n
(

1189 
	`_
("£âögÑeÊök fœg o¿öodê%"
PRIu64
"\n"),

1190 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
));

1191 i‡(!
no_modify
)

1192 
	`do_w¨n
(

1193 
	`_
("˛órögÑeÊök fœg o¿öodê%"
PRIu64
"\n"),

1194 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
));

1195 i‡(
no_modify
)

1198 
buf
 = 
	`gë_agöo_buf
(
mp
, 
agno
, 
agöo
, &
döo
);

1199 i‡(!
buf
)

1201 
	`ASSERT
(
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
Ë=
	`be64_to_˝u
(
döo
->
di_öo
));

1202 i‡(
£t
)

1203 
döo
->
di_Êags2
 |
	`˝u_to_be64
(
XFS_DIFLAG2_REFLINK
);

1205 
döo
->
di_Êags2
 &
	`˝u_to_be64
(~
XFS_DIFLAG2_REFLINK
);

1206 
	`libxfs_döode_ˇlc_¸c
(
mp
, 
döo
);

1207 
	`libxfs_wrôebuf
(
buf
, 0);

1210 
	}
}

1217 
	$fix_öode_ªÊök_Êags
(

1218 
xfs_mou¡
 *
mp
,

1219 
xfs_agnumbî_t
 
agno
)

1221 
öo_åì_node
 *
úec
;

1222 
bô
;

1223 
__uöt64_t
 
was
;

1224 
__uöt64_t
 
is
;

1225 
__uöt64_t
 
diff
;

1226 
__uöt64_t
 
mask
;

1227 
îr‹
 = 0;

1228 
xfs_agöo_t
 
agöo
;

1235 
úec
 = 
	`födfú°_öode_ªc
(
agno
);

1236 
úec
 !
NULL
;

1237 
úec
 = 
	`√xt_öo_ªc
(irec)) {

1238 
	`ASSERT
((
úec
->
öo_was_æ
 & iªc->
ú_‰ì
) == 0);

1239 
	`ASSERT
((
úec
->
öo_is_æ
 & iªc->
ú_‰ì
) == 0);

1240 
was
 = 
úec
->
öo_was_æ
;

1241 
is
 = 
úec
->
öo_is_æ
;

1242 i‡(
was
 =
is
)

1244 
diff
 = 
was
 ^ 
is
;

1245 
	`dbg_¥ötf
("mismatch ino=%llu was=0x%lx is=0x%lx dif=0x%lx\n",

1246 ()
	`XFS_AGINO_TO_INO
(
mp
, 
agno
,

1247 
úec
->
öo_°¨äum
),

1248 
was
, 
is
, 
diff
);

1250 
bô
 = 0, 
mask
 = 1; bit < 64; bit++, mask <<= 1) {

1251 
agöo
 = 
bô
 + 
úec
->
öo_°¨äum
;

1252 i‡(!(
diff
 & 
mask
))

1254 i‡(
was
 & 
mask
)

1255 
îr‹
 = 
	`fix_öode_ªÊök_Êag
(
mp
, 
agno
, 
agöo
,

1256 
Ál£
);

1257 i‡(
is
 & 
mask
)

1258 
îr‹
 = 
	`fix_öode_ªÊök_Êag
(
mp
, 
agno
, 
agöo
,

1259 
åue
);

1261 
	`ASSERT
(0);

1262 i‡(
îr‹
)

1263 
	`do_îr‹
(

1264 
	`_
("U«bÀÅÿfixÑeÊök fœg o¿öodê%"
PRIu64
".\n"),

1265 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
));

1269  
îr‹
;

1270 
	}
}

1275 
size_t


1276 
	$ªfcou¡_ªc‹d_cou¡
(

1277 
xfs_mou¡
 *
mp
,

1278 
xfs_agnumbî_t
 
agno
)

1280  
	`¶ab_cou¡
(
ag_rm≠s
[
agno
].
¨_ªfcou¡_ôems
);

1281 
	}
}

1287 
	$öô_ªfcou¡_curs‹
(

1288 
xfs_agnumbî_t
 
agno
,

1289 
xfs_¶ab_curs‹
 **
cur
)

1291  
	`öô_¶ab_curs‹
(
ag_rm≠s
[
agno
].
¨_ªfcou¡_ôems
, 
NULL
, 
cur
);

1292 
	}
}

1298 
	$ªfcou¡_avoid_check
()

1300 
ªfcbt_su•e˘
 = 
åue
;

1301 
	}
}

1307 
	$check_ªfcou¡s
(

1308 
xfs_mou¡
 *
mp
,

1309 
xfs_agnumbî_t
 
agno
)

1311 
xfs_¶ab_curs‹
 *
æ_cur
;

1312 
xfs_båì_cur
 *
bt_cur
 = 
NULL
;

1313 
îr‹
;

1314 
have
;

1315 
i
;

1316 
xfs_buf
 *
agbp
 = 
NULL
;

1317 
xfs_ªfcou¡_úec
 *
æ_ªc
;

1318 
xfs_ªfcou¡_úec
 
tmp
;

1319 
xfs_≥øg
 *
∑g
;

1321 i‡(!
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

1323 i‡(
ªfcbt_su•e˘
) {

1324 i‡(
no_modify
 && 
agno
 == 0)

1325 
	`do_w¨n
(
	`_
("wouldÑebuild corruptÑefcount btrees.\n"));

1330 
îr‹
 = 
	`öô_ªfcou¡_curs‹
(
agno
, &
æ_cur
);

1331 i‡(
îr‹
)

1332  
îr‹
;

1334 
îr‹
 = -
	`libxfs_Æloc_ªad_agf
(
mp
, 
NULL
, 
agno
, 0, &
agbp
);

1335 i‡(
îr‹
)

1336 
îr
;

1339 
∑g
 = 
	`libxfs_≥øg_gë
(
mp
, 
agno
);

1340 
∑g
->
∑gf_öô
 = 0;

1341 
	`libxfs_≥øg_put
(
∑g
);

1343 
bt_cur
 = 
	`libxfs_ªfcou¡bt_öô_curs‹
(
mp
, 
NULL
, 
agbp
, 
agno
, NULL);

1344 i‡(!
bt_cur
) {

1345 
îr‹
 = -
ENOMEM
;

1346 
îr
;

1349 
æ_ªc
 = 
	`p›_¶ab_curs‹
(
æ_cur
);

1350 
æ_ªc
) {

1352 
îr‹
 = -
	`libxfs_ªfcou¡_lookup_À
(
bt_cur
,

1353 
æ_ªc
->
rc_°¨tblock
, &
have
);

1354 i‡(
îr‹
)

1355 
îr
;

1356 i‡(!
have
) {

1357 
	`do_w¨n
(

1358 
	`_
("MissingÑeference countÑecord for (%u/%u)Üen %u count %u\n"),

1359 
agno
, 
æ_ªc
->
rc_°¨tblock
,

1360 
æ_ªc
->
rc_blockcou¡
,Ñl_ªc->
rc_ªfcou¡
);

1361 
√xt_lo›
;

1364 
îr‹
 = -
	`libxfs_ªfcou¡_gë_ªc
(
bt_cur
, &
tmp
, &
i
);

1365 i‡(
îr‹
)

1366 
îr
;

1367 i‡(!
i
) {

1368 
	`do_w¨n
(

1369 
	`_
("MissingÑeference countÑecord for (%u/%u)Üen %u count %u\n"),

1370 
agno
, 
æ_ªc
->
rc_°¨tblock
,

1371 
æ_ªc
->
rc_blockcou¡
,Ñl_ªc->
rc_ªfcou¡
);

1372 
√xt_lo›
;

1376 i‡(
tmp
.
rc_°¨tblock
 !
æ_ªc
->rc_startblock ||

1377 
tmp
.
rc_blockcou¡
 < 
æ_ªc
->rc_blockcount ||

1378 
tmp
.
rc_ªfcou¡
 < 
æ_ªc
->rc_refcount)

1379 
	`do_w¨n
(

1380 
	`_
("IncorrectÑeference count: saw (%u/%u)Üen %uÇlinks %u; should be (%u/%u)Üen %uÇlinks %u\n"),

1381 
agno
, 
tmp
.
rc_°¨tblock
,Åmp.
rc_blockcou¡
,

1382 
tmp
.
rc_ªfcou¡
, 
agno
, 
æ_ªc
->
rc_°¨tblock
,

1383 
æ_ªc
->
rc_blockcou¡
,Ñl_ªc->
rc_ªfcou¡
);

1384 
√xt_lo›
:

1385 
æ_ªc
 = 
	`p›_¶ab_curs‹
(
æ_cur
);

1388 
îr
:

1389 i‡(
bt_cur
)

1390 
	`libxfs_båì_dñ_curs‹
(
bt_cur
, 
XFS_BTREE_NOERROR
);

1391 i‡(
agbp
)

1392 
	`libxfs_putbuf
(
agbp
);

1393 
	`‰ì_¶ab_curs‹
(&
æ_cur
);

1395 
	}
}

1403 
	$fix_‰ìli°
(

1404 
xfs_mou¡
 *
mp
,

1405 
xfs_agnumbî_t
 
agno
,

1406 
boﬁ
 
skù_rm≠bt
)

1408 
xfs_Æloc_¨g_t
 
¨gs
;

1409 
xfs_å™s_t
 *
ç
;

1410 
xfs_å™s_ªs
 
åes
 = {0};

1411 
Êags
;

1412 
îr‹
;

1414 
	`mem£t
(&
¨gs
, 0, (args));

1415 
¨gs
.
mp
 = mp;

1416 
¨gs
.
agno
 =ágno;

1417 
¨gs
.
Æignmít
 = 1;

1418 
¨gs
.
∑g
 = 
	`libxfs_≥øg_gë
(
mp
, 
agno
);

1419 
îr‹
 = -
	`libxfs_å™s_Æloc
(
mp
, &
åes
,

1420 
	`libxfs_Æloc_mö_‰ìli°
(
mp
, 
¨gs
.
∑g
), 0, 0, &
ç
);

1421 i‡(
îr‹
)

1422 
	`do_îr‹
(
	`_
("failedÅo fix AGFL on AG %d,Érror %d\n"),

1423 
agno
, 
îr‹
);

1424 
¨gs
.
ç
 =Åp;

1447 
Êags
 = 
XFS_ALLOC_FLAG_NOSHRINK
;

1448 i‡(
skù_rm≠bt
)

1449 
Êags
 |
XFS_ALLOC_FLAG_NORMAP
;

1450 
îr‹
 = -
	`libxfs_Æloc_fix_‰ìli°
(&
¨gs
, 
Êags
);

1451 
	`libxfs_≥øg_put
(
¨gs
.
∑g
);

1452 i‡(
îr‹
) {

1453 
	`do_îr‹
(
	`_
("failedÅo fix AGFL on AG %d,Érror %d\n"),

1454 
agno
, 
îr‹
);

1456 
	`libxfs_å™s_commô
(
ç
);

1457 
	}
}

1464 
	$rm≠_°‹e_agÊcou¡
(

1465 
xfs_mou¡
 *
mp
,

1466 
xfs_agnumbî_t
 
agno
,

1467 
cou¡
)

1469 i‡(!
	`rm≠_√eds_w‹k
(
mp
))

1472 
ag_rm≠s
[
agno
].
¨_Êcou¡
 = 
cou¡
;

1473 
	}
}

	@repair/rmap.h

20 #i‚de‡
RMAP_H_


21 
	#RMAP_H_


	)

23 
boﬁ
 
cﬁÀ˘_rm≠s
;

25 
boﬁ
 
rm≠_√eds_w‹k
(
xfs_mou¡
 *);

27 
rm≠s_öô
(
xfs_mou¡
 *);

28 
rm≠s_‰ì
(
xfs_mou¡
 *);

30 
rm≠_add_ªc
(
xfs_mou¡
 *, 
xfs_öo_t
, , 
xfs_bmbt_úec
 *);

31 
rm≠_föish_cﬁÀ˘ög_f‹k_ªcs
(
xfs_mou¡
 *
mp
,

32 
xfs_agnumbî_t
 
agno
);

33 
rm≠_add_ag_ªc
(
xfs_mou¡
 *, 
xfs_agnumbî_t
 
agno
,

34 
xfs_agblock_t
 
agbno
, 
xfs_exéí_t
 
Àn
, 
uöt64_t
 
ow√r
);

35 
rm≠_add_bmbt_ªc
(
xfs_mou¡
 *, 
xfs_öo_t
, , 
xfs_fsblock_t
);

36 
rm≠_fﬁd_øw_ªcs
(
xfs_mou¡
 *
mp
, 
xfs_agnumbî_t
 
agno
);

37 
boﬁ
 
rm≠s_¨e_mîgóbÀ
(
xfs_rm≠_úec
 *
r1
, xfs_rm≠_úe¯*
r2
);

39 
rm≠_add_fixed_ag_ªc
(
xfs_mou¡
 *, 
xfs_agnumbî_t
);

40 
rm≠_°‹e_ag_båì_ªc
(
xfs_mou¡
 *, 
xfs_agnumbî_t
);

42 
size_t
 
rm≠_ªc‹d_cou¡
(
xfs_mou¡
 *, 
xfs_agnumbî_t
);

43 
rm≠_öô_curs‹
(
xfs_agnumbî_t
, 
xfs_¶ab_curs‹
 **);

44 
rm≠_avoid_check
();

45 
rm≠s_vîify_båì
(
xfs_mou¡
 *, 
xfs_agnumbî_t
);

47 
__öt64_t
 
rm≠_diffkeys
(
xfs_rm≠_úec
 *
kp1
,

48 
xfs_rm≠_úec
 *
kp2
);

49 
rm≠_high_key_‰om_ªc
(
xfs_rm≠_úec
 *
ªc
,

50 
xfs_rm≠_úec
 *
key
);

52 
compuã_ªfcou¡s
(
xfs_mou¡
 *, 
xfs_agnumbî_t
);

53 
size_t
 
ªfcou¡_ªc‹d_cou¡
(
xfs_mou¡
 *, 
xfs_agnumbî_t
);

54 
öô_ªfcou¡_curs‹
(
xfs_agnumbî_t
, 
xfs_¶ab_curs‹
 **);

55 
ªfcou¡_avoid_check
();

56 
check_ªfcou¡s
(
xfs_mou¡
 *, 
xfs_agnumbî_t
);

58 
ªc‹d_öode_ªÊök_Êag
(
xfs_mou¡
 *, 
xfs_döode
 *,

59 
xfs_agnumbî_t
, 
xfs_agöo_t
, 
xfs_öo_t
);

60 
fix_öode_ªÊök_Êags
(
xfs_mou¡
 *, 
xfs_agnumbî_t
);

62 
fix_‰ìli°
(
xfs_mou¡
 *, 
xfs_agnumbî_t
, 
boﬁ
);

63 
rm≠_°‹e_agÊcou¡
(
xfs_mou¡
 *, 
xfs_agnumbî_t
, );

	@repair/rt.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

21 
	~"globÆs.h
"

22 
	~"aghódî.h
"

23 
	~"öc‹e.h
"

24 
	~"döode.h
"

25 
	~"¥Ÿos.h
"

26 
	~"îr_¥Ÿos.h
"

27 
	~"π.h
"

29 
	#xfs_highbô64
 
libxfs_highbô64


	)

32 
	$πöô
(
xfs_mou¡_t
 *
mp
)

34 i‡(
mp
->
m_sb
.
sb_rblocks
 == 0)

44 i‡((
btmcompuã
 = 
	`ˇŒoc
(
mp
->
m_sb
.
sb_rbmblocks
 *

45 
mp
->
m_sb
.
sb_blocksize
, 1)Ë=
NULL
)

46 
	`do_îr‹
(

47 
	`_
("couldn'tállocate memory for incoreÑealtime bitmap.\n"));

49 i‡((
sumcompuã
 = 
	`ˇŒoc
(
mp
->
m_rsumsize
, 1)Ë=
NULL
)

50 
	`do_îr‹
(

51 
	`_
("couldn'tállocate memory for incoreÑealtime summary info.\n"));

52 
	}
}

59 
	$gíî©e_πöfo
(
xfs_mou¡_t
 *
mp
,

60 
xfs_πw‹d_t
 *
w‹ds
,

61 
xfs_sumöfo_t
 *
sumcompuã
)

63 
xfs_πblock_t
 
exäo
;

64 
xfs_πblock_t
 
°¨t_ext
;

65 
bô•îblock
;

66 
bmbno
;

67 
xfs_πw‹d_t
 
‰ìbô
;

68 
xfs_πw‹d_t
 
bôs
;

69 
°¨t_bmbno
;

70 
i
;

71 
offs
;

72 
log
;

73 
Àn
;

74 
ö_exã¡
;

76 
	`ASSERT
(
mp
->
m_rbmù
 =
NULL
);

78 
bô•îblock
 = 
mp
->
m_sb
.
sb_blocksize
 * 
NBBY
;

79 
exäo
 = 
°¨t_ext
 = 0;

80 
bmbno
 = 
ö_exã¡
 = 
°¨t_bmbno
 = 0;

88 
exäo
 < 
mp
->
m_sb
.
sb_ªxã¡s
) {

89 
‰ìbô
 = 1;

90 *
w‹ds
 = 0;

91 
bôs
 = 0;

92 
i
 = 0; i < (
xfs_πw‹d_t
Ë* 
NBBY
 &&

93 
exäo
 < 
mp
->
m_sb
.
sb_ªxã¡s
; 
i
++,Éxtno++) {

94 i‡(
	`gë_πbm≠
(
exäo
Ë=
XR_E_FREE
) {

95 
sb_‰exã¡s
++;

96 
bôs
 |
‰ìbô
;

98 i‡(
ö_exã¡
 == 0) {

99 
°¨t_ext
 = 
exäo
;

100 
°¨t_bmbno
 = 
bmbno
;

101 
ö_exã¡
 = 1;

103 } i‡(
ö_exã¡
 == 1) {

104 
Àn
 = (Ë(
exäo
 - 
°¨t_ext
);

105 
log
 = 
	`XFS_RTBLOCKLOG
(
Àn
);

106 
offs
 = 
	`XFS_SUMOFFS
(
mp
, 
log
, 
°¨t_bmbno
);

107 
sumcompuã
[
offs
]++;

108 
ö_exã¡
 = 0;

111 
‰ìbô
 <<= 1;

113 *
w‹ds
 = 
bôs
;

114 
w‹ds
++;

116 i‡(
exäo
 % 
bô•îblock
 == 0)

117 
bmbno
++;

119 i‡(
ö_exã¡
 == 1) {

120 
Àn
 = (Ë(
exäo
 - 
°¨t_ext
);

121 
log
 = 
	`XFS_RTBLOCKLOG
(
Àn
);

122 
offs
 = 
	`XFS_SUMOFFS
(
mp
, 
log
, 
°¨t_bmbno
);

123 
sumcompuã
[
offs
]++;

127 
	}
}

134 
	$check_summ¨y
(
xfs_mou¡_t
 *
mp
)

136 
xfs_rfsblock_t
 
bno
;

137 
xfs_sumöfo_t
 *
c•
;

138 
xfs_sumöfo_t
 *
f•
;

139 
log
;

140 
îr‹
 = 0;

142 
îr‹
 = 0;

143 
c•
 = 
sumcompuã
;

144 
f•
 = 
sumfûe
;

145 
log
 = 0;Üog < 
mp
->
m_rsumÀvñs
;Üog++) {

146 
bno
 = 0;

147 
bno
 < 
mp
->
m_sb
.
sb_rbmblocks
;

148 
bno
++, 
c•
++, 
f•
++) {

149 i‡(*
c•
 !*
f•
) {

150 
	`do_w¨n
(

151 
	`_
("rt summary mismatch, size %d block %llu, file: %d, computed: %d\n"),

152 
log
, 
bno
, *
f•
, *
c•
);

153 
îr‹
 = 1;

158 (
îr‹
);

159 
	}
}

168 
	$¥o˚ss_πbôm≠
(
xfs_mou¡_t
 *
mp
,

169 
xfs_döode_t
 *
döo
,

170 
blkm≠_t
 *
blkm≠
)

172 
îr‹
;

173 
bô
;

174 
bô•îblock
;

175 
bmbno
;

176 
íd_bmbno
;

177 
xfs_fsblock_t
 
bno
;

178 
xfs_buf_t
 *
bp
;

179 
xfs_πblock_t
 
exäo
;

180 
i
;

181 
Àn
;

182 
log
;

183 
offs
;

184 
¥evbô
;

185 
°¨t_bmbno
;

186 
°¨t_bô
;

187 
xfs_πw‹d_t
 *
w‹ds
;

189 
	`ASSERT
(
mp
->
m_rbmù
 =
NULL
);

191 
bô•îblock
 = 
mp
->
m_sb
.
sb_blocksize
 * 
NBBY
;

192 
¥evbô
 = 0;

193 
exäo
 = 0;

194 
îr‹
 = 0;

196 
íd_bmbno
 = 
	`howm™y
(
	`be64_to_˝u
(
döo
->
di_size
),

197 
mp
->
m_sb
.
sb_blocksize
);

199 
bmbno
 = 0; bmbnÿ< 
íd_bmbno
; bmbno++) {

200 
bno
 = 
	`blkm≠_gë
(
blkm≠
, 
bmbno
);

202 i‡(
bno
 =
NULLFSBLOCK
) {

203 
	`do_w¨n
(
	`_
("can't find block %d forÑtbitmap inode\n"),

204 
bmbno
);

205 
îr‹
 = 1;

208 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
	`XFS_FSB_TO_DADDR
(mp, 
bno
),

209 
	`XFS_FSB_TO_BB
(
mp
, 1), 
NULL
);

210 i‡(!
bp
) {

211 
	`do_w¨n
(
	`_
("can'tÑead block %d forÑtbitmap inode\n"),

212 
bmbno
);

213 
îr‹
 = 1;

216 
w‹ds
 = (
xfs_πw‹d_t
 *)
bp
->
b_un
.
b_addr
;

217 
bô
 = 0;

218 
bô
 < 
bô•îblock
 && 
exäo
 < 
mp
->
m_sb
.
sb_ªxã¡s
;

219 
bô
++, 
exäo
++) {

220 i‡(
	`xfs_is£t
(
w‹ds
, 
bô
)) {

221 
	`£t_πbm≠
(
exäo
, 
XR_E_FREE
);

222 
sb_‰exã¡s
++;

223 i‡(
¥evbô
 == 0) {

224 
°¨t_bmbno
 = 
bmbno
;

225 
°¨t_bô
 = 
bô
;

226 
¥evbô
 = 1;

228 } i‡(
¥evbô
 == 1) {

229 
Àn
 = (
bmbno
 - 
°¨t_bmbno
Ë* 
bô•îblock
 +

230 (
bô
 - 
°¨t_bô
);

231 
log
 = 
	`XFS_RTBLOCKLOG
(
Àn
);

232 
offs
 = 
	`XFS_SUMOFFS
(
mp
, 
log
, 
°¨t_bmbno
);

233 
sumcompuã
[
offs
]++;

234 
¥evbô
 = 0;

237 
	`libxfs_putbuf
(
bp
);

238 i‡(
exäo
 =
mp
->
m_sb
.
sb_ªxã¡s
)

241 i‡(
¥evbô
 == 1) {

242 
Àn
 = (
bmbno
 - 
°¨t_bmbno
Ë* 
bô•îblock
 + (
bô
 - 
°¨t_bô
);

243 
log
 = 
	`XFS_RTBLOCKLOG
(
Àn
);

244 
offs
 = 
	`XFS_SUMOFFS
(
mp
, 
log
, 
°¨t_bmbno
);

245 
sumcompuã
[
offs
]++;

247 
	}
}

253 
	$¥o˚ss_πsumm¨y
(
xfs_mou¡_t
 *
mp
,

254 
xfs_döode_t
 *
döo
,

255 
blkm≠_t
 *
blkm≠
)

257 
xfs_fsblock_t
 
bno
;

258 
xfs_buf_t
 *
bp
;

259 *
byãs
;

260 
sumbno
;

262 
sumbno
 = 0; sumbnÿ< 
blkm≠
->
cou¡
; sumbno++) {

263 
bno
 = 
	`blkm≠_gë
(
blkm≠
, 
sumbno
);

264 i‡(
bno
 =
NULLFSBLOCK
) {

265 
	`do_w¨n
(
	`_
("block %d forÑtsummary inode is missing\n"),

266 
sumbno
);

267 
îr‹
++;

270 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
	`XFS_FSB_TO_DADDR
(mp, 
bno
),

271 
	`XFS_FSB_TO_BB
(
mp
, 1), 
NULL
);

272 i‡(!
bp
) {

273 
	`do_w¨n
(
	`_
("can'tÑead block %d forÑtsummary inode\n"),

274 
sumbno
);

275 
îr‹
++;

278 
byãs
 = 
bp
->
b_un
.
b_addr
;

279 
	`memmove
((*)
sumfûe
 + 
sumbno
 * 
mp
->
m_sb
.
sb_blocksize
, 
byãs
,

280 
mp
->
m_sb
.
sb_blocksize
);

281 
	`libxfs_putbuf
(
bp
);

283 
	}
}

	@repair/rt.h

19 
	gblkm≠
;

22 
πöô
(
xfs_mou¡_t
 *
mp
);

25 
gíî©e_πöfo
(
xfs_mou¡_t
 *
mp
,

26 
xfs_πw‹d_t
 *
w‹ds
,

27 
xfs_sumöfo_t
 *
sumcompuã
);

32 
check_summ¨y
(
xfs_mou¡_t
 *
mp
);

35 
¥o˚ss_πbôm≠
(
xfs_mou¡_t
 *
mp
,

36 
xfs_döode_t
 *
döo
,

37 
blkm≠
 *blkmap);

40 
¥o˚ss_πsumm¨y
(
xfs_mou¡_t
 *
mp
,

41 
blkm≠
 *blkmap);

	@repair/sb.c

19 
	~"libxfs.h
"

20 
	~"libxcmd.h
"

21 
	~"libxlog.h
"

22 
	~"aghódî.h
"

23 
	~"globÆs.h
"

24 
	~"¥Ÿos.h
"

25 
	~"îr_¥Ÿos.h
"

26 
	~"xfs_mu…idisk.h
"

28 
	#BSIZE
 (1024 * 1024)

	)

35 
	$c›y_sb
(
xfs_sb_t
 *
sour˚
, xfs_sb_à*
de°
)

37 
xfs_öo_t
 
roŸöo
;

38 
xfs_öo_t
 
rbmöo
;

39 
xfs_öo_t
 
rsumöo
;

40 
xfs_öo_t
 
uquŸöo
;

41 
xfs_öo_t
 
gquŸöo
;

42 
xfs_öo_t
 
pquŸöo
;

43 
__uöt16_t
 
vîsi⁄num
;

45 
roŸöo
 = 
de°
->
sb_roŸöo
;

46 
rbmöo
 = 
de°
->
sb_rbmöo
;

47 
rsumöo
 = 
de°
->
sb_rsumöo
;

48 
uquŸöo
 = 
de°
->
sb_uquŸöo
;

49 
gquŸöo
 = 
de°
->
sb_gquŸöo
;

50 
pquŸöo
 = 
de°
->
sb_pquŸöo
;

52 
vîsi⁄num
 = 
de°
->
sb_vîsi⁄num
;

54 *
de°
 = *
sour˚
;

56 
de°
->
sb_roŸöo
 = 
roŸöo
;

57 
de°
->
sb_rbmöo
 = 
rbmöo
;

58 
de°
->
sb_rsumöo
 = 
rsumöo
;

59 
de°
->
sb_uquŸöo
 = 
uquŸöo
;

60 
de°
->
sb_gquŸöo
 = 
gquŸöo
;

61 
de°
->
sb_pquŸöo
 = 
pquŸöo
;

63 
de°
->
sb_vîsi⁄num
 = 
vîsi⁄num
;

70 i‡(
	`xfs_sb_vîsi⁄_hasdÆign
(
sour˚
))

71 
de°
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_DALIGNBIT
;

72 i‡(
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(
sour˚
))

73 
de°
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_EXTFLGBIT
;

78 
de°
->
sb_icou¡
 = 0;

79 
de°
->
sb_i‰ì
 = 0;

80 
de°
->
sb_fdblocks
 = 0;

81 
de°
->
sb_‰exã¡s
 = 0;

83 
	`mem£t
(
sour˚
->
sb_‚ame
, 0, 12);

84 
	}
}

87 
	$vîify_sb_blocksize
(
xfs_sb_t
 *
sb
)

90 i‡(
sb
->
sb_blocksize
 == 0)

91  
XR_BAD_BLOCKSIZE
;

92 i‡(
sb
->
sb_blocksize
 !(1 << sb->
sb_blocklog
))

93  
XR_BAD_BLOCKLOG
;

94 i‡(
sb
->
sb_blocklog
 < 
XFS_MIN_BLOCKSIZE_LOG
 ||

95 
sb
->
sb_blocklog
 > 
XFS_MAX_BLOCKSIZE_LOG
)

96  
XR_BAD_BLOCKLOG
;

99 
	}
}

107 
	$__föd_£c⁄d¨y_sb
(

108 
xfs_sb_t
 *
rsb
,

109 
__uöt64_t
 
°¨t
,

110 
__uöt64_t
 
skù
)

112 
xfs_off_t
 
off
;

113 
xfs_sb_t
 *
sb
;

114 
xfs_sb_t
 
bufsb
;

115 *
c_bufsb
;

116 
d⁄e
;

117 
i
;

118 
dúty
;

119 
ªtvÆ
;

120 
bsize
;

122 
sb
 = (
xfs_sb_t
 *)
	`memÆign
(
	`libxfs_devi˚_Æignmít
(), 
BSIZE
);

123 i‡(!
sb
) {

124 
	`do_îr‹
(

125 
	`_
("error finding secondary superblock -- failedÅo memalign buffer\n"));

126 
	`exô
(1);

129 
	`mem£t
(&
bufsb
, 0, (
xfs_sb_t
));

130 
ªtvÆ
 = 0;

131 
dúty
 = 0;

132 
bsize
 = 0;

137 
d⁄e
 = 0, 
off
 = 
°¨t
; !d⁄ê; of‡+
skù
) {

141 i‡(
	`l£ek
(
x
.
dfd
, 
off
, 
SEEK_SET
) != off) {

142 
d⁄e
 = 1;

145 i‡(!
d⁄e
 && (
bsize
 = 
	`ªad
(
x
.
dfd
, 
sb
, 
BSIZE
)) <= 0) {

146 
d⁄e
 = 1;

149 
	`do_w¨n
(".");

155 
i
 = 0; !
d⁄e
 && i < 
bsize
; i +
BBSIZE
) {

156 
c_bufsb
 = (*)
sb
 + 
i
;

157 
	`libxfs_sb_‰om_disk
(&
bufsb
, (
xfs_dsb_t
 *)
c_bufsb
);

159 i‡(
	`vîify_sb
(
c_bufsb
, &
bufsb
, 0Ë!
XR_OK
)

162 
	`do_w¨n
(
	`_
("found candidate secondary superblock...\n"));

168 
	`memmove
(
rsb
, &
bufsb
, (
xfs_sb_t
));

169 
rsb
->
sb_ö¥ogªss
 = 0;

170 
c›õd_sunô
 = 1;

172 i‡(
	`vîify_£t_¥im¨y_sb
(
rsb
, 0, &
dúty
Ë=
XR_OK
) {

173 
	`do_w¨n
(

174 
	`_
("verified secondary superblock...\n"));

175 
d⁄e
 = 1;

176 
ªtvÆ
 = 1;

178 
	`do_w¨n
(

179 
	`_
("unableÅo verify superblock, continuing...\n"));

184 
	`‰ì
(
sb
);

185  
ªtvÆ
;

186 
	}
}

189 
	$guess_deÁu…_geomëry
(

190 
__uöt64_t
 *
agsize
,

191 
__uöt64_t
 *
agcou¡
,

192 
libxfs_öô_t
 *
x
)

194 
fs_t›ﬁogy
 
·
;

195 
blocklog
;

196 
__uöt64_t
 
dblocks
;

197 
mu…idisk
;

199 
	`mem£t
(&
·
, 0, (ft));

200 
	`gë_t›ﬁogy
(
x
, &
·
, 1);

206 
blocklog
 = 12;

207 
mu…idisk
 = 
·
.
dswidth
 | ft.
dsunô
;

208 
dblocks
 = 
x
->
dsize
 >> (
blocklog
 - 
BBSHIFT
);

209 
	`ˇlc_deÁu…_ag_geomëry
(
blocklog
, 
dblocks
, 
mu…idisk
,

210 
agsize
, 
agcou¡
);

212  
blocklog
;

213 
	}
}

216 
	$föd_£c⁄d¨y_sb
(
xfs_sb_t
 *
rsb
)

218 
ªtvÆ
 = 0;

219 
__uöt64_t
 
agcou¡
;

220 
__uöt64_t
 
agsize
;

221 
__uöt64_t
 
skù
;

222 
blocklog
;

229 
	`do_w¨n
(
	`_
("\nattemptingÅo find secondary superblock...\n"));

231 i‡(
	`vîify_sb_blocksize
(
rsb
) == 0) {

232 
skù
 = (
__uöt64_t
)
rsb
->
sb_agblocks
 *Ñsb->
sb_blocksize
;

233 i‡(
skù
 >
XFS_AG_MIN_BYTES
 && skù <
XFS_AG_MAX_BYTES
)

234 
ªtvÆ
 = 
	`__föd_£c⁄d¨y_sb
(
rsb
, 
skù
, skip);

238 i‡(!
ªtvÆ
) {

239 
blocklog
 = 
	`guess_deÁu…_geomëry
(&
agsize
, &
agcou¡
, &
x
);

240 
skù
 = 
agsize
 << 
blocklog
;

241 
ªtvÆ
 = 
	`__föd_£c⁄d¨y_sb
(
rsb
, 
skù
, skip);

245 i‡(!
ªtvÆ
)

246 
ªtvÆ
 = 
	`__föd_£c⁄d¨y_sb
(
rsb
, 
XFS_AG_MIN_BYTES
, 
BSIZE
);

248  
ªtvÆ
;

249 
	}
}

262 
boﬁ


263 
	$sb_vÆid©e_öo_Æign
(
xfs_sb
 *
sb
)

265 
xfs_exéí_t
 
Æign
;

267 i‡(!
	`xfs_sb_vîsi⁄_haßlign
(
sb
))

268  
åue
;

271 
Æign
 = 
XFS_INODE_BIG_CLUSTER_SIZE
 >> 
sb
->
sb_blocklog
;

272 i‡(
Æign
 =
sb
->
sb_öﬂlignmt
)

273  
åue
;

276 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(
sb
))

277  
Ál£
;

279 
Æign
 = (
XFS_INODE_BIG_CLUSTER_SIZE
 *

280 
sb
->
sb_öodesize
 / 
XFS_DINODE_MIN_SIZE
Ë>> sb->
sb_blocklog
;

281 i‡(
Æign
 =
sb
->
sb_öﬂlignmt
)

282  
åue
;

288 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(
sb
)) {

289 i‡(
Æign
 !
sb
->
sb_•öo_Æign
)

290  
Ál£
;

292 
Æign
 = (
sb
->
sb_öodesize
 * 
XFS_INODES_PER_CHUNK
)

293 >> 
sb
->
sb_blocklog
;

294 i‡(
Æign
 =
sb
->
sb_öﬂlignmt
)

295  
åue
;

298  
Ál£
;

299 
	}
}

344 
	$vîify_sb
(*
sb_buf
, 
xfs_sb_t
 *
sb
, 
is_¥im¨y_sb
)

346 
__uöt32_t
 
bsize
;

347 
i
;

348 
ªt
;

352 i‡(
sb
->
sb_magi˙um
 !
XFS_SB_MAGIC
)

353 (
XR_BAD_MAGIC
);

355 i‡(!
	`xfs_sb_good_vîsi⁄
(
sb
))

356 (
XR_BAD_VERSION
);

360 i‡(
is_¥im¨y_sb
 && 
sb
->
sb_ö¥ogªss
 == 1)

361 (
XR_BAD_INPROGRESS
);

369 i‡(
sb
->
sb_£˘size
 == 0)

370 (
XR_BAD_SECT_SIZE_DATA
);

372 
bsize
 = 1;

373 
i
 = 0; 
bsize
 < 
sb
->
sb_£˘size
 &&

374 
i
 < (
sb
->
sb_£˘size
Ë* 
NBBY
; i++) {

375 
bsize
 <<= 1;

378 i‡(
i
 < 
XFS_MIN_SECTORSIZE_LOG
 || i > 
XFS_MAX_SECTORSIZE_LOG
)

379 (
XR_BAD_SECT_SIZE_DATA
);

382 i‡(
i
 !
sb
->
sb_£˘log
)

383 (
XR_BAD_SECT_SIZE_DATA
);

386 i‡(
	`xfs_sb_vîsi⁄_has¸c
(
sb
) &&

387 !
	`libxfs_vîify_cksum
(
sb_buf
, 
sb
->
sb_£˘size
, 
XFS_SB_CRC_OFF
))

388  
XR_BAD_CRC
;

391 
ªt
 = 
	`vîify_sb_blocksize
(
sb
);

392 i‡(
ªt
 != 0)

393  
ªt
;

397 i‡(
sb
->
sb_dblocks
 == 0 ||

398 
sb
->
sb_dblocks
 > 
	`XFS_MAX_DBLOCKS
(sb) ||

399 
sb
->
sb_dblocks
 < 
	`XFS_MIN_DBLOCKS
(sb))

400 (
XR_BAD_FS_SIZE_DATA
);

402 i‡(
sb
->
sb_agblklog
 !(
__uöt8_t
)
	`libxfs_log2_roundup
(sb->
sb_agblocks
))

403 (
XR_BAD_FS_SIZE_DATA
);

405 i‡(
sb
->
sb_öodesize
 < 
XFS_DINODE_MIN_SIZE
 ||

406 
sb
->
sb_öodesize
 > 
XFS_DINODE_MAX_SIZE
 ||

407 
sb
->
sb_öodñog
 < 
XFS_DINODE_MIN_LOG
 ||

408 
sb
->
sb_öodñog
 > 
XFS_DINODE_MAX_LOG
 ||

409 
sb
->
sb_öodesize
 !(1 << sb->
sb_öodñog
) ||

410 
sb
->
sb_logsunô
 > 
XLOG_MAX_RECORD_BSIZE
 ||

411 
sb
->
sb_ö›block
 !
	`howm™y
(sb->
sb_blocksize
, sb->
sb_öodesize
) ||

412 (
sb
->
sb_blocklog
 - sb->
sb_öodñog
 !sb->
sb_ö›blog
))

413  
XR_BAD_INO_SIZE_DATA
;

415 i‡(
	`xfs_sb_vîsi⁄_has£˘‹
(
sb
)) {

419 i‡(
sb
->
sb_log£˘size
 == 0)

420 (
XR_BAD_SECT_SIZE_DATA
);

422 
bsize
 = 1;

424 
i
 = 0; 
bsize
 < 
sb
->
sb_log£˘size
 &&

425 
i
 < (
sb
->
sb_log£˘size
Ë* 
NBBY
; i++) {

426 
bsize
 <<= 1;

429 i‡(
i
 < 
XFS_MIN_SECTORSIZE_LOG
 || i > 
XFS_MAX_SECTORSIZE_LOG
)

430 (
XR_BAD_SECT_SIZE_DATA
);

434 i‡(
i
 !
sb
->
sb_log£˘log
)

435 (
XR_BAD_SECT_SIZE_DATA
);

441 i‡(
sb
->
sb_ªxtsize
 * sb->
sb_blocksize
 > 
XFS_MAX_RTEXTSIZE
)

442 (
XR_BAD_RT_GEO_DATA
);

444 i‡(
sb
->
sb_ªxtsize
 * sb->
sb_blocksize
 < 
XFS_MIN_RTEXTSIZE
)

445 (
XR_BAD_RT_GEO_DATA
);

447 i‡(
sb
->
sb_rblocks
 == 0) {

448 i‡(
sb
->
sb_ªxã¡s
 != 0)

449 (
XR_BAD_RT_GEO_DATA
);

451 i‡(
sb
->
sb_rbmblocks
 != 0)

452 (
XR_BAD_RT_GEO_DATA
);

454 i‡(
sb
->
sb_ªxt¶og
 != 0)

455 (
XR_BAD_RT_GEO_DATA
);

457 i‡(
sb
->
sb_‰exã¡s
 != 0)

458 (
XR_BAD_RT_GEO_DATA
);

463 i‡(
sb
->
sb_rblocks
 / sb->
sb_ªxtsize
 !sb->
sb_ªxã¡s
)

464 (
XR_BAD_RT_GEO_DATA
);

466 i‡(
sb
->
sb_ªxt¶og
 !=

467 
	`libxfs_highbô32
(()
sb
->
sb_ªxã¡s
))

468 (
XR_BAD_RT_GEO_DATA
);

470 i‡(
sb
->
sb_rbmblocks
 !(
xfs_exéí_t
Ë
	`howm™y
(sb->
sb_ªxã¡s
,

471 
NBBY
 * 
sb
->
sb_blocksize
))

472 (
XR_BAD_RT_GEO_DATA
);

478 i‡(!
	`sb_vÆid©e_öo_Æign
(
sb
))

479 (
XR_BAD_INO_ALIGN
);

484 i‡(
sb
->
sb_imax_p˘
 > 100)

485 (
XR_BAD_INO_MAX_PCT
);

490 i‡(
	`xfs_sb_vîsi⁄_hasdÆign
(
sb
)) {

491 i‡((!
sb
->
sb_unô
 && sb->
sb_width
) ||

492 (
sb
->
sb_unô
 && sb->
sb_agblocks
 % sb->sb_unit))

493 (
XR_BAD_SB_UNIT
);

494 i‡((
sb
->
sb_unô
 && !sb->
sb_width
) ||

495 (
sb
->
sb_width
 && sb->
sb_unô
 && sb->sb_width % sb->sb_unit))

496 (
XR_BAD_SB_WIDTH
);

497 } i‡(
sb
->
sb_unô
 || sb->
sb_width
)

498  
XR_BAD_SB_WIDTH
;

501 i‡(
sb
->
sb_blocklog
 + sb->
sb_dúblklog
 > 
XFS_MAX_BLOCKSIZE_LOG
)

502  
XR_BAD_DIR_SIZE_DATA
;

504 (
XR_OK
);

505 
	}
}

508 
	$wrôe_¥im¨y_sb
(
xfs_sb_t
 *
sbp
, 
size
)

510 
xfs_dsb_t
 *
buf
;

512 i‡(
no_modify
)

515 
buf
 = 
	`memÆign
(
	`libxfs_devi˚_Æignmít
(), 
size
);

516 i‡(
buf
 =
NULL
) {

517 
	`do_îr‹
(
	`_
("failedÅo memalign superblock buffer\n"));

520 
	`mem£t
(
buf
, 0, 
size
);

522 i‡(
	`l£ek
(
x
.
dfd
, 0LL, 
SEEK_SET
) != 0LL) {

523 
	`‰ì
(
buf
);

524 
	`do_îr‹
(
	`_
("couldn't seekÅo offset 0 in filesystem\n"));

527 
	`libxfs_sb_to_disk
(
buf
, 
sbp
);

529 i‡(
	`xfs_sb_vîsi⁄_has¸c
(
sbp
))

530 
	`xfs_upd©e_cksum
((*)
buf
, 
size
, 
XFS_SB_CRC_OFF
);

532 i‡(
	`wrôe
(
x
.
dfd
, 
buf
, 
size
) != size) {

533 
	`‰ì
(
buf
);

534 
	`do_îr‹
(
	`_
("primary superblock write failed!\n"));

537 
	`‰ì
(
buf
);

538 
	}
}

544 
	$gë_sb
(
xfs_sb_t
 *
sbp
, 
xfs_off_t
 
off
, 
size
, 
xfs_agnumbî_t
 
agno
)

546 
îr‹
, 
rvÆ
;

547 
xfs_dsb_t
 *
buf
;

549 
buf
 = 
	`memÆign
(
	`libxfs_devi˚_Æignmít
(), 
size
);

550 i‡(
buf
 =
NULL
) {

551 
	`do_îr‹
(

552 
	`_
("errorÑeading superblock %u -- failedÅo memalign buffer\n"),

553 
agno
);

554 
	`exô
(1);

556 
	`mem£t
(
buf
, 0, 
size
);

557 
	`mem£t
(
sbp
, 0, (*sbp));

561 i‡(
	`l£ek
(
x
.
dfd
, 
off
, 
SEEK_SET
) != off) {

562 
	`do_w¨n
(

563 
	`_
("îr‹Ñódög su≥rblock %u -- sìkÅÿoff£à%" 
PRId64
 " failed\n"),

564 
agno
, 
off
);

565 
	`‰ì
(
buf
);

566 (
XR_EOF
);

569 i‡((
rvÆ
 = 
	`ªad
(
x
.
dfd
, 
buf
, 
size
)) != size) {

570 
îr‹
 = 
î∫o
;

571 
	`do_w¨n
(

572 
	`_
("su≥rblockÑód faûed, off£à%" 
PRId64
 ", size %d,ág %u,Ñval %d\n"),

573 
off
, 
size
, 
agno
, 
rvÆ
);

574 
	`do_îr‹
("%s\n", 
	`°ªº‹
(
îr‹
));

576 
	`libxfs_sb_‰om_disk
(
sbp
, 
buf
);

578 
rvÆ
 = 
	`vîify_sb
((*)
buf
, 
sbp
, 
agno
 == 0);

579 
	`‰ì
(
buf
);

580  
rvÆ
;

581 
	}
}

584 
fs_geo_li°_t
 *

585 
	$gë_be°_geo
(
fs_geo_li°_t
 *
li°
)

587 
˙t
 = 0;

588 
fs_geo_li°_t
 *
cuºít
, *
rvÆ
 = 
NULL
;

590 
cuºít
 = 
li°
;

592 
cuºít
 !
NULL
) {

593 i‡(
cuºít
->
ªfs
 > 
˙t
) {

594 
rvÆ
 = 
cuºít
;

595 
˙t
 = 
cuºít
->
ªfs
;

597 
cuºít
 = cuºít->
√xt
;

600 (
rvÆ
);

601 
	}
}

604 
fs_geo_li°_t
 *

605 
	$add_geo
(
fs_geo_li°_t
 *
li°
, 
fs_geomëry_t
 *
geo_p
, 
ödex
)

607 
fs_geo_li°_t
 *
cuºít
 = 
li°
;

609 
cuºít
 !
NULL
) {

610 i‡(
	`memcmp
(
geo_p
, &
cuºít
->
geo
, (
fs_geomëry_t
)) == 0) {

611 
cuºít
->
ªfs
++;

612 (
li°
);

615 
cuºít
 = cuºít->
√xt
;

618 i‡((
cuºít
 = 
	`mÆloc
((
fs_geo_li°_t
))Ë=
NULL
) {

619 
	`do_îr‹
(
	`_
("couldn't malloc geometry structure\n"));

620 
	`exô
(1);

623 
cuºít
->
geo
 = *
geo_p
;

624 
cuºít
->
ªfs
 = 1;

625 
cuºít
->
√xt
 = 
li°
;

626 
cuºít
->
ödex
 = index;

628 (
cuºít
);

629 
	}
}

632 
	$‰ì_geo
(
fs_geo_li°_t
 *
li°
)

634 
fs_geo_li°_t
 *
√xt
;

635 
fs_geo_li°_t
 *
cuºít
;

637 
cuºít
 = 
li°
; cuºíà!
NULL
; cuºíà
√xt
) {

638 
√xt
 = 
cuºít
->next;

639 
	`‰ì
(
cuºít
);

641 
	}
}

644 
	$gë_sb_geomëry
(
fs_geomëry_t
 *
geo
, 
xfs_sb_t
 *
sbp
)

646 
	`mem£t
(
geo
, 0, (
fs_geomëry_t
));

651 
geo
->
sb_blocksize
 = 
sbp
->sb_blocksize;

652 
geo
->
sb_dblocks
 = 
sbp
->sb_dblocks;

653 
geo
->
sb_rblocks
 = 
sbp
->sb_rblocks;

654 
geo
->
sb_ªxã¡s
 = 
sbp
->sb_rextents;

655 
geo
->
sb_log°¨t
 = 
sbp
->sb_logstart;

656 
geo
->
sb_ªxtsize
 = 
sbp
->sb_rextsize;

657 
geo
->
sb_agblocks
 = 
sbp
->sb_agblocks;

658 
geo
->
sb_agcou¡
 = 
sbp
->sb_agcount;

659 
geo
->
sb_rbmblocks
 = 
sbp
->sb_rbmblocks;

660 
geo
->
sb_logblocks
 = 
sbp
->sb_logblocks;

661 
geo
->
sb_£˘size
 = 
sbp
->sb_sectsize;

662 
geo
->
sb_öodesize
 = 
sbp
->sb_inodesize;

664 i‡(
	`xfs_sb_vîsi⁄_haßlign
(
sbp
))

665 
geo
->
sb_ülignbô
 = 1;

667 i‡(
	`xfs_sb_vîsi⁄_hasdÆign
(
sbp
))

668 
geo
->
sb_ßlignbô
 = 1;

670 i‡(
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(
sbp
))

671 
geo
->
sb_extÊgbô
 = 1;

673 
geo
->
sb_fuŒy_zî€d
 = 1;

674 
	}
}

685 
	$vîify_£t_¥im¨y_sb
(
xfs_sb_t
 *
rsb
,

686 
sb_ödex
,

687 *
sb_modifõd
)

689 
xfs_off_t
 
off
;

690 
fs_geomëry_t
 
geo
;

691 
xfs_sb_t
 *
sb
;

692 
fs_geo_li°_t
 *
li°
;

693 
fs_geo_li°_t
 *
cuºít
;

694 
xfs_agnumbî_t
 
agno
;

695 
num_sbs
;

696 
size
;

697 
num_ok
;

698 
ªtvÆ
;

706 
size
 = 
NUM_AGH_SECTS
 * (1 << (
XFS_MAX_SECTORSIZE_LOG
));

707 
li°
 = 
NULL
;

708 
num_ok
 = 0;

709 *
sb_modifõd
 = 0;

710 
num_sbs
 = 
rsb
->
sb_agcou¡
;

712 
sb
 = (
xfs_sb_t
 *Ë
	`Æloc_ag_buf
(
size
);

717 
	`gë_sb_geomëry
(&
geo
, 
rsb
);

718 
li°
 = 
	`add_geo
÷i°, &
geo
, 
sb_ödex
);

724 
agno
 = 1;ágnÿ< 
rsb
->
sb_agcou¡
;ágno++) {

725 
off
 = (
xfs_off_t
)
agno
 * 
rsb
->
sb_agblocks
 <<Ñsb->
sb_blocklog
;

727 
ªtvÆ
 = 
	`gë_sb
(
sb
, 
off
, 
size
, 
agno
);

728 i‡(
ªtvÆ
 =
XR_EOF
)

729 
out_‰ì_li°
;

731 i‡(
ªtvÆ
 =
XR_OK
) {

739 
	`gë_sb_geomëry
(&
geo
, 
sb
);

740 
li°
 = 
	`add_geo
÷i°, &
geo
, 
agno
);

741 
num_ok
++;

748 
ªtvÆ
 = 0;

749 i‡(
num_ok
 < 
num_sbs
 / 2) {

750 
ªtvÆ
 = 
XR_INSUFF_SEC_SB
;

751 
out_‰ì_li°
;

754 
cuºít
 = 
	`gë_be°_geo
(
li°
);

761 
num_sbs
) {

770 i‡(
cuºít
->
ªfs
 != 2) {

771 i‡(!
f‹˚_geo
) {

772 
	`do_w¨n
(

773 
	`_
("OnlyÅwo AGs detectedándÅhey doÇot match - "

776 
	`exô
(1);

779 
out_‰ì_li°
;

787 i‡(!
f‹˚_geo
) {

788 
	`do_w¨n
(

789 
	`_
("Only one AG detected - "

792 
	`exô
(1);

794 
out_‰ì_li°
;

802 i‡(
cuºít
->
ªfs
 < 
num_sbs
 / 2) {

803 
	`do_w¨n
(

804 
	`_
("NotÉnough matching superblocks - cannotÖroceed.\n"));

805 
	`exô
(1);

813 i‡(
cuºít
->
ödex
 !
sb_ödex
) {

814 *
sb_modifõd
 = 1;

815 
off
 = (
xfs_off_t
)
cuºít
->
ödex
 * cuºít->
geo
.
sb_agblocks


816 * 
cuºít
->
geo
.
sb_blocksize
;

817 i‡(
	`gë_sb
(
sb
, 
off
, 
cuºít
->
geo
.
sb_£˘size
,

818 
cuºít
->
ödex
Ë!
XR_OK
)

819 
	`do_îr‹
(
	`_
("couldÇotÑead superblock\n"));

821 
	`c›y_sb
(
sb
, 
rsb
);

828 
rsb
->
sb_ö¥ogªss
 = 0;

829 
sb_öﬂlignmt
 = 
sb
->sb_inoalignmt;

830 
sb_unô
 = 
sb
->sb_unit;

831 
sb_width
 = 
sb
->sb_width;

834 
out_‰ì_li°
:

835 
	`‰ì_geo
(
li°
);

836 
	`‰ì
(
sb
);

837  
ªtvÆ
;

838 
	}
}

	@repair/scan.c

19 
	~"libxfs.h
"

20 
	~"avl.h
"

21 
	~"globÆs.h
"

22 
	~"aghódî.h
"

23 
	~"öc‹e.h
"

24 
	~"¥Ÿos.h
"

25 
	~"îr_¥Ÿos.h
"

26 
	~"döode.h
"

27 
	~"sˇn.h
"

28 
	~"vîsi⁄s.h
"

29 
	~"bm≠.h
"

30 
	~"¥ogªss.h
"

31 
	~"thªads.h
"

32 
	~"¶ab.h
"

33 
	~"rm≠.h
"

35 
xfs_mou¡_t
 *
	gmp
 = 
NULL
;

41 
	saghdr_˙ts
 {

42 
xfs_agnumbî_t
 
	magno
;

43 
xfs_exéí_t
 
	magf‰ìblks
;

44 
xfs_exéí_t
 
	magÊ⁄ge°
;

45 
__uöt64_t
 
	magfbåìblks
;

46 
__uöt32_t
 
	magicou¡
;

47 
__uöt32_t
 
	magi‰ìcou¡
;

48 
__uöt64_t
 
	mfdblocks
;

49 
__uöt64_t
 
	mu£dblocks
;

50 
__uöt64_t
 
	mi‰ìcou¡
;

51 
__uöt32_t
 
	mfibt‰ìcou¡
;

55 
	$£t_mp
(
xfs_mou¡_t
 *
mµ
)

57 
	`libxfs_bˇche_purge
();

58 
mp
 = 
mµ
;

59 
	}
}

62 
sˇn_sbåì
(

63 
xfs_agblock_t
 
roŸ
,

64 
∆evñs
,

65 
xfs_agnumbî_t
 
agno
,

66 
su•e˘
,

67 (*
func
)(
xfs_båì_block
 *
block
,

68 
Àvñ
,

69 
xfs_agblock_t
 
bno
,

70 
xfs_agnumbî_t
 
agno
,

71 
su•e˘
,

72 
i§oŸ
,

73 
__uöt32_t
 
magic
,

74 *
¥iv
),

75 
i§oŸ
,

76 
__uöt32_t
 
magic
,

77 *
¥iv
,

78 c⁄° 
xfs_buf_›s
 *
›s
)

80 
xfs_buf_t
 *
bp
;

82 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
	`XFS_AGB_TO_DADDR
(mp, 
agno
, 
roŸ
),

83 
	`XFS_FSB_TO_BB
(
mp
, 1), 0, 
›s
);

84 i‡(!
bp
) {

85 
	`do_îr‹
(
	`_
("ˇn'àªad båì block %d/%d\n"), 
agno
, 
roŸ
);

88 i‡(
bp
->
b_îr‹
 =-
EFSBADCRC
 || bp->b_îr‹ =-
EFSCORRUPTED
) {

89 
	`do_w¨n
(
	`_
("btree block %d/%d is suspect,Érror %d\n"),

90 
agno
, 
roŸ
, 
bp
->
b_îr‹
);

91 
su•e˘
 = 1;

94 (*
func
)(
	`XFS_BUF_TO_BLOCK
(
bp
), 
∆evñs
 - 1, 
roŸ
, 
agno
, 
su•e˘
,

95 
i§oŸ
, 
magic
, 
¥iv
);

96 
	`libxfs_putbuf
(
bp
);

97 
	}
}

103 
sˇn_lbåì
(

104 
xfs_fsblock_t
 
roŸ
,

105 
∆evñs
,

106 (*
func
)(
xfs_båì_block
 *
block
,

107 
Àvñ
,

108 
ty≥
,

109 
whichf‹k
,

110 
xfs_fsblock_t
 
bno
,

111 
xfs_öo_t
 
öo
,

112 
xfs_rfsblock_t
 *
tŸ
,

113 
__uöt64_t
 *
√x
,

114 
blkm≠_t
 **
blkm≠p
,

115 
bm≠_curs‹_t
 *
bm_curs‹
,

116 
i§oŸ
,

117 
check_dups
,

118 *
dúty
,

119 
__uöt64_t
 
magic
),

120 
ty≥
,

121 
whichf‹k
,

122 
xfs_öo_t
 
öo
,

123 
xfs_rfsblock_t
 *
tŸ
,

124 
__uöt64_t
 *
√x
,

125 
blkm≠_t
 **
blkm≠p
,

126 
bm≠_curs‹_t
 *
bm_curs‹
,

127 
i§oŸ
,

128 
check_dups
,

129 
__uöt64_t
 
magic
,

130 c⁄° 
xfs_buf_›s
 *
›s
)

132 
xfs_buf_t
 *
bp
;

133 
îr
;

134 
dúty
 = 0;

135 
boﬁ
 
bad¸c
 = 
Ál£
;

137 
bp
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
	`XFS_FSB_TO_DADDR
(mp, 
roŸ
),

138 
	`XFS_FSB_TO_BB
(
mp
, 1), 0, 
›s
);

139 i‡(!
bp
) {

140 
	`do_îr‹
(
	`_
("can'tÑead btree block %d/%d\n"),

141 
	`XFS_FSB_TO_AGNO
(
mp
, 
roŸ
),

142 
	`XFS_FSB_TO_AGBNO
(
mp
, 
roŸ
));

151 i‡(
bp
->
b_îr‹
 =-
EFSBADCRC
) {

152 
	`do_w¨n
(
	`_
("btree block %d/%d is suspect,Érror %d\n"),

153 
	`XFS_FSB_TO_AGNO
(
mp
, 
roŸ
),

154 
	`XFS_FSB_TO_AGBNO
(
mp
, 
roŸ
), 
bp
->
b_îr‹
);

155 
bad¸c
 = 
åue
;

158 
îr
 = (*
func
)(
	`XFS_BUF_TO_BLOCK
(
bp
), 
∆evñs
 - 1,

159 
ty≥
, 
whichf‹k
, 
roŸ
, 
öo
, 
tŸ
, 
√x
, 
blkm≠p
,

160 
bm_curs‹
, 
i§oŸ
, 
check_dups
, &
dúty
,

161 
magic
);

163 
	`ASSERT
(
dúty
 =0 || (dúty && !
no_modify
));

165 i‡((
dúty
 || 
bad¸c
Ë&& !
no_modify
)

166 
	`libxfs_wrôebuf
(
bp
, 0);

168 
	`libxfs_putbuf
(
bp
);

170 (
îr
);

171 
	}
}

174 
	$sˇn_bm≠bt
(

175 
xfs_båì_block
 *
block
,

176 
Àvñ
,

177 
ty≥
,

178 
whichf‹k
,

179 
xfs_fsblock_t
 
bno
,

180 
xfs_öo_t
 
öo
,

181 
xfs_rfsblock_t
 *
tŸ
,

182 
__uöt64_t
 *
√x
,

183 
blkm≠_t
 **
blkm≠p
,

184 
bm≠_curs‹_t
 *
bm_curs‹
,

185 
i§oŸ
,

186 
check_dups
,

187 *
dúty
,

188 
__uöt64_t
 
magic
)

190 
i
;

191 
îr
;

192 
xfs_bmbt_±r_t
 *
µ
;

193 
xfs_bmbt_key_t
 *
pkey
;

194 
xfs_bmbt_ªc_t
 *
Ω
;

195 
xfs_fûeoff_t
 
fú°_key
;

196 
xfs_fûeoff_t
 
œ°_key
;

197 *
f‹k«me
 = 
	`gë_f‹k«me
(
whichf‹k
);

198 
numªcs
;

199 
xfs_agnumbî_t
 
agno
;

200 
xfs_agblock_t
 
agbno
;

201 
°©e
;

202 
îr‹
;

211 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
magic
) {

212 
	`do_w¨n
(

213 
	`_
("bad magi¯# %#x i¿öodê%" 
PRIu64
 " (%s fork) bmbt block %" PRIu64 "\n"),

214 
	`be32_to_˝u
(
block
->
bb_magic
), 
öo
, 
f‹k«me
, 
bno
);

217 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

218 
	`do_w¨n
(

219 
	`_
("ex≥˘edÜevñ %d gŸ %d i¿öodê%" 
PRIu64
 ", (%s fork) bmbt block %" PRIu64 "\n"),

220 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
),

221 
öo
, 
f‹k«me
, 
bno
);

225 i‡(
magic
 =
XFS_BMAP_CRC_MAGIC
) {

227 i‡(
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_ow√r
Ë!
öo
) {

228 
	`do_w¨n
(

229 
	`_
("ex≥˘ed ow√∏öodê%" 
PRIu64
 ", got %llu, bmbt block %" PRIu64 "\n"),

230 
öo
, 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_ow√r
), 
bno
);

234 i‡(
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_blkno
) !=

235 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
)) {

236 
	`do_w¨n
(

237 
	`_
("ex≥˘ed block %" 
PRIu64
 ", got %llu, bmbt block %" PRIu64 "\n"),

238 
	`XFS_FSB_TO_DADDR
(
mp
, 
bno
),

239 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_blkno
), 
bno
);

243 i‡(
	`∂©f‹m_uuid_com∑ª
(&
block
->
bb_u
.
l
.
bb_uuid
,

244 &
mp
->
m_sb
.
sb_mëa_uuid
) != 0) {

245 
	`do_w¨n
(

246 
	`_
("wr⁄g FS UUID, bmbàblock %" 
PRIu64
 "\n"),

247 
bno
);

252 i‡(
check_dups
 == 0) {

258 i‡(
bm_curs‹
->
Àvñ
[Àvñ].
fsbno
 !
NULLFSBLOCK
) {

264 i‡(
bno
 !
bm_curs‹
->
Àvñ
[Àvñ].
right_fsbno
) {

265 
	`do_w¨n
(

266 
	`_
("bad fwd (rightËsiblögÖoöã∏(ßw %" 
PRIu64
 "Öarent block says %" PRIu64 ")\n"

267 "\tö inodê%" 
PRIu64
 " (%s fork) bmap btree block %" PRIu64 "\n"),

268 
bm_curs‹
->
Àvñ
[Àvñ].
right_fsbno
,

269 
bno
, 
öo
, 
f‹k«me
,

270 
bm_curs‹
->
Àvñ
[Àvñ].
fsbno
);

273 i‡(
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_À·sib
) !=

274 
bm_curs‹
->
Àvñ
[Àvñ].
fsbno
) {

275 
	`do_w¨n
(

276 
	`_
("bad back (À·ËsiblögÖoöã∏(ßw %ŒuÖ¨íàblock say†%" 
PRIu64
 ")\n"

277 "\tö inodê%" 
PRIu64
 " (%s fork) bmap btree block %" PRIu64 "\n"),

279 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_À·sib
),

280 
bm_curs‹
->
Àvñ
[Àvñ].
fsbno
,

281 
öo
, 
f‹k«me
, 
bno
);

289 i‡(
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_À·sib
Ë!
NULLFSBLOCK
) {

290 
	`do_w¨n
(

291 
	`_
("bad back (left) siblingÖointer (saw %llu should be NULL (0))\n"

292 "\tö inodê%" 
PRIu64
 " (%s fork) bmap btree block %" PRIu64 "\n"),

294 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_À·sib
),

295 
öo
, 
f‹k«me
, 
bno
);

303 
bm_curs‹
->
Àvñ
[Àvñ].
fsbno
 = 
bno
;

304 
bm_curs‹
->
Àvñ
[Àvñ].
À·_fsbno
 =

305 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_À·sib
);

306 
bm_curs‹
->
Àvñ
[Àvñ].
right_fsbno
 =

307 
	`be64_to_˝u
(
block
->
bb_u
.
l
.
bb_rightsib
);

309 
agno
 = 
	`XFS_FSB_TO_AGNO
(
mp
, 
bno
);

310 
agbno
 = 
	`XFS_FSB_TO_AGBNO
(
mp
, 
bno
);

312 
	`±hªad_muãx_lock
(&
ag_locks
[
agno
].
lock
);

313 
°©e
 = 
	`gë_bm≠
(
agno
, 
agbno
);

314 
°©e
) {

315 
XR_E_INUSE1
:

322 
XR_E_UNKNOWN
:

323 
XR_E_FREE1
:

324 
XR_E_FREE
:

325 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_INUSE
);

327 
XR_E_FS_MAP
:

328 
XR_E_INUSE
:

337 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_MULT
);

338 
	`do_w¨n
(

339 
	`_
("öodê0x%" 
PRIx64
 "bmap block 0x%" PRIx64 " claimed, state is %d\n"),

340 
öo
, 
bno
, 
°©e
);

342 
XR_E_MULT
:

343 
XR_E_INUSE_FS
:

344 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_MULT
);

345 
	`do_w¨n
(

346 
	`_
("öodê0x%" 
PRIx64
 " bmap block 0x%" PRIx64 " claimed, state is %d\n"),

347 
öo
, 
bno
, 
°©e
);

358 
XR_E_BAD_STATE
:

360 
	`do_w¨n
(

361 
	`_
("bad sèã %d, inodê%" 
PRIu64
 " bm≠ block 0x%" 
PRIx64
 "\n"),

362 
°©e
, 
öo
, 
bno
);

365 
	`±hªad_muãx_u∆ock
(&
ag_locks
[
agno
].
lock
);

371 i‡(
ty≥
 !
XR_INO_RTDATA
 || 
whichf‹k
 !
XFS_DATA_FORK
) {

372 i‡(
	`£¨ch_dup_exã¡
(
	`XFS_FSB_TO_AGNO
(
mp
, 
bno
),

373 
	`XFS_FSB_TO_AGBNO
(
mp
, 
bno
),

374 
	`XFS_FSB_TO_AGBNO
(
mp
, 
bno
) + 1))

377 i‡(
	`£¨ch_π_dup_exã¡
(
mp
, 
bno
))

381 (*
tŸ
)++;

382 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

385 i‡(
check_dups
 && 
cﬁÀ˘_rm≠s
) {

386 
îr‹
 = 
	`rm≠_add_bmbt_ªc
(
mp
, 
öo
, 
whichf‹k
, 
bno
);

387 i‡(
îr‹
)

388 
	`do_îr‹
(

389 
	`_
("couldn'àadd inodê%"
PRIu64
" bmbt block %"PRIu64"Ñeverse-mapping data."),

390 
öo
, 
bno
);

393 i‡(
Àvñ
 == 0) {

394 i‡(
numªcs
 > 
mp
->
m_bm≠_dmxr
[0] || (
i§oŸ
 == 0 &&Çumrecs <

395 
mp
->
m_bm≠_dmƒ
[0])) {

396 
	`do_w¨n
(

397 
	`_
("öodê%" 
PRIu64
 " bad # of bmapÑecords (%u, min - %u, max - %u)\n"),

398 
öo
, 
numªcs
, 
mp
->
m_bm≠_dmƒ
[0],

399 
mp
->
m_bm≠_dmxr
[0]);

402 
Ω
 = 
	`XFS_BMBT_REC_ADDR
(
mp
, 
block
, 1);

403 *
√x
 +
numªcs
;

409 i‡(
check_dups
 == 0) {

410 
îr
 = 
	`¥o˚ss_bmbt_ª˛i°
(
mp
, 
Ω
, &
numªcs
, 
ty≥
, 
öo
,

411 
tŸ
, 
blkm≠p
, &
fú°_key
,

412 &
œ°_key
, 
whichf‹k
);

413 i‡(
îr
)

423 i‡(
fú°_key
 <
bm_curs‹
->
Àvñ
[Àvñ].
œ°_key
 &&

424 
bm_curs‹
->
Àvñ
[Àvñ].
œ°_key
 !=

425 
NULLFILEOFF
) {

426 
	`do_w¨n
(

427 
	`_
("out-of-‹dî bm≠ key (fûêoff£tËö inodê%" 
PRIu64
 ", %s fork, fsbno %" PRIu64 "\n"),

428 
öo
, 
f‹k«me
, 
bno
);

436 
bm_curs‹
->
Àvñ
[Àvñ].
fú°_key
 = first_key;

437 
bm_curs‹
->
Àvñ
[Àvñ].
œ°_key
 =Üast_key;

441  
	`sˇn_bmbt_ª˛i°
(
mp
, 
Ω
, &
numªcs
, 
ty≥
, 
öo
,

442 
tŸ
, 
whichf‹k
);

445 i‡(
numªcs
 > 
mp
->
m_bm≠_dmxr
[1] || (
i§oŸ
 == 0 &&Çumrecs <

446 
mp
->
m_bm≠_dmƒ
[1])) {

447 
	`do_w¨n
(

448 
	`_
("öodê%" 
PRIu64
 " bad # of bmapÑecords (%u, min - %u, max - %u)\n"),

449 
öo
, 
numªcs
, 
mp
->
m_bm≠_dmƒ
[1], mp->
m_bm≠_dmxr
[1]);

452 
µ
 = 
	`XFS_BMBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_bm≠_dmxr
[1]);

453 
pkey
 = 
	`XFS_BMBT_KEY_ADDR
(
mp
, 
block
, 1);

455 
œ°_key
 = 
NULLFILEOFF
;

457 
i
 = 0, 
îr
 = 0; i < 
numªcs
; i++) {

463 i‡(!
	`vîify_dfsbno
(
mp
, 
	`be64_to_˝u
(
µ
[
i
]))) {

464 
	`do_w¨n
(

465 
	`_
("bad bm≠ båìÖå 0x%Œx i¿öÿ%" 
PRIu64
 "\n"),

466 (Ë
	`be64_to_˝u
(
µ
[
i
]), 
öo
);

470 
îr
 = 
	`sˇn_lbåì
(
	`be64_to_˝u
(
µ
[
i
]), 
Àvñ
, 
sˇn_bm≠bt
,

471 
ty≥
, 
whichf‹k
, 
öo
, 
tŸ
, 
√x
, 
blkm≠p
,

472 
bm_curs‹
, 0, 
check_dups
, 
magic
,

473 &
xfs_bmbt_buf_›s
);

474 i‡(
îr
)

489 i‡(
check_dups
 =0 && 
	`be64_to_˝u
(
pkey
[
i
].
br_°¨toff
) !=

490 
bm_curs‹
->
Àvñ
[Àvñ-1].
fú°_key
) {

491 i‡(!
no_modify
) {

492 
	`do_w¨n
(

493 
	`_
("c‹ª˘ög bàkey (wa†%Œu,Çow %" 
PRIu64
 ") in inode %" PRIu64 "\n"

494 "\t\t%†f‹k, båì block %" 
PRIu64
 "\n"),

496 
	`be64_to_˝u
(
pkey
[
i
].
br_°¨toff
),

497 
bm_curs‹
->
Àvñ
[Àvñ-1].
fú°_key
,

498 
öo
,

499 
f‹k«me
, 
bno
);

500 *
dúty
 = 1;

501 
pkey
[
i
].
br_°¨toff
 = 
	`˝u_to_be64
(

502 
bm_curs‹
->
Àvñ
[Àvñ-1].
fú°_key
);

504 
	`do_w¨n
(

505 
	`_
("bad båì key (i†%Œu, should bê%" 
PRIu64
 ") in inode %" PRIu64 "\n"

506 "\t\t%†f‹k, båì block %" 
PRIu64
 "\n"),

508 
	`be64_to_˝u
(
pkey
[
i
].
br_°¨toff
),

509 
bm_curs‹
->
Àvñ
[Àvñ-1].
fú°_key
,

510 
öo
, 
f‹k«me
, 
bno
);

519 i‡(
check_dups
 == 0 &&

520 
bm_curs‹
->
Àvñ
[Àvñ].
right_fsbno
 =
NULLFSBLOCK
 &&

521 
bm_curs‹
->
Àvñ
[Àvñ - 1].
right_fsbno
 !
NULLFSBLOCK
) {

522 
	`do_w¨n
(

523 
	`_
("bad fwd (rightËsiblögÖoöã∏(ßw %" 
PRIu64
 " should be NULLFSBLOCK)\n"

524 "\tö inodê%" 
PRIu64
 " (%s fork) bmap btree block %" PRIu64 "\n"),

525 
bm_curs‹
->
Àvñ
[Àvñ - 1].
right_fsbno
,

526 
öo
, 
f‹k«me
, 
bm_curs‹
->
Àvñ
[Àvñ - 1].
fsbno
);

533 i‡(
check_dups
 == 0) {

534 
bm_curs‹
->
Àvñ
[Àvñ].
fú°_key
 =

535 
	`be64_to_˝u
(
pkey
[0].
br_°¨toff
);

536 
bm_curs‹
->
Àvñ
[Àvñ].
œ°_key
 =

537 
	`be64_to_˝u
(
pkey
[
numªcs
 - 1].
br_°¨toff
);

541 
	}
}

544 
	$sˇn_Ælocbt
(

545 
xfs_båì_block
 *
block
,

546 
Àvñ
,

547 
xfs_agblock_t
 
bno
,

548 
xfs_agnumbî_t
 
agno
,

549 
su•e˘
,

550 
i§oŸ
,

551 
__uöt32_t
 
magic
,

552 *
¥iv
)

554 
aghdr_˙ts
 *
ag˙ts
 = 
¥iv
;

555 c⁄° *
«me
;

556 
i
;

557 
xfs_Æloc_±r_t
 *
µ
;

558 
xfs_Æloc_ªc_t
 *
Ω
;

559 
hdr_îr‹s
 = 0;

560 
numªcs
;

561 
°©e
;

562 
xfs_exéí_t
 
œ°cou¡
 = 0;

563 
xfs_agblock_t
 
œ°block
 = 0;

565 
magic
) {

566 
XFS_ABTB_CRC_MAGIC
:

567 
XFS_ABTB_MAGIC
:

568 
«me
 = "bno";

570 
XFS_ABTC_CRC_MAGIC
:

571 
XFS_ABTC_MAGIC
:

572 
«me
 = "cnt";

575 
«me
 = "(unknown)";

576 
	`as£π
(0);

580 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
magic
) {

581 
	`do_w¨n
(
	`_
("bad magic # %#x in bt%s block %d/%d\n"),

582 
	`be32_to_˝u
(
block
->
bb_magic
), 
«me
, 
agno
, 
bno
);

583 
hdr_îr‹s
++;

584 i‡(
su•e˘
)

593 i‡(!
i§oŸ
) {

594 
ag˙ts
->
agfbåìblks
++;

595 
ag˙ts
->
fdblocks
++;

598 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

599 
	`do_w¨n
(
	`_
("expectedÜevel %d got %d in bt%s block %d/%d\n"),

600 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
«me
, 
agno
, 
bno
);

601 
hdr_îr‹s
++;

602 i‡(
su•e˘
)

609 
°©e
 = 
	`gë_bm≠
(
agno
, 
bno
);

610 i‡(
°©e
 !
XR_E_UNKNOWN
) {

611 
	`£t_bm≠
(
agno
, 
bno
, 
XR_E_MULT
);

612 
	`do_w¨n
(

613 
	`_
("%s freespace btree block claimed (state %d),ágno %d, bno %d, suspect %d\n"),

614 
«me
, 
°©e
, 
agno
, 
bno
, 
su•e˘
);

617 
	`£t_bm≠
(
agno
, 
bno
, 
XR_E_FS_MAP
);

619 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

621 i‡(
Àvñ
 == 0) {

622 i‡(
numªcs
 > 
mp
->
m_Æloc_mxr
[0]) {

623 
numªcs
 = 
mp
->
m_Æloc_mxr
[0];

624 
hdr_îr‹s
++;

626 i‡(
i§oŸ
 =0 && 
numªcs
 < 
mp
->
m_Æloc_mƒ
[0]) {

627 
numªcs
 = 
mp
->
m_Æloc_mƒ
[0];

628 
hdr_îr‹s
++;

631 i‡(
hdr_îr‹s
) {

632 
	`do_w¨n
(

633 
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in bt%s block %u/%u\n"),

634 
	`be16_to_˝u
(
block
->
bb_numªcs
),

635 
mp
->
m_Æloc_mƒ
[0], mp->
m_Æloc_mxr
[0],

636 
«me
, 
agno
, 
bno
);

637 
su•e˘
++;

640 
Ω
 = 
	`XFS_ALLOC_REC_ADDR
(
mp
, 
block
, 1);

641 
i
 = 0; i < 
numªcs
; i++) {

642 
xfs_agblock_t
 
b
, 
íd
;

643 
xfs_exéí_t
 
Àn
, 
bÀn
;

645 
b
 = 
	`be32_to_˝u
(
Ω
[
i
].
¨_°¨tblock
);

646 
Àn
 = 
	`be32_to_˝u
(
Ω
[
i
].
¨_blockcou¡
);

647 
íd
 = 
b
 + 
Àn
;

649 i‡(
b
 =0 || !
	`vîify_agbno
(
mp
, 
agno
, b)) {

650 
	`do_w¨n
(

651 
	`_
("invalid start block %u inÑecord %u of %s btree block %u/%u\n"),

652 
b
, 
i
, 
«me
, 
agno
, 
bno
);

655 i‡(
Àn
 =0 || !
	`vîify_agbno
(
mp
, 
agno
, 
íd
 - 1)) {

656 
	`do_w¨n
(

657 
	`_
("invalidÜength %u inÑecord %u of %s btree block %u/%u\n"),

658 
Àn
, 
i
, 
«me
, 
agno
, 
bno
);

662 i‡(
magic
 =
XFS_ABTB_MAGIC
 ||

663 
magic
 =
XFS_ABTB_CRC_MAGIC
) {

664 i‡(
b
 <
œ°block
) {

665 
	`do_w¨n
(
	`_
(

667 
i
, 
b
, 
Àn
, 
agno
, 
bno
);

669 
œ°block
 = 
b
;

672 
ag˙ts
->
fdblocks
 +
Àn
;

673 
ag˙ts
->
agf‰ìblks
 +
Àn
;

674 i‡(
Àn
 > 
ag˙ts
->
agÊ⁄ge°
)

675 
ag˙ts
->
agÊ⁄ge°
 = 
Àn
;

676 i‡(
Àn
 < 
œ°cou¡
) {

677 
	`do_w¨n
(
	`_
(

679 
i
, 
b
, 
Àn
, 
agno
, 
bno
);

681 
œ°cou¡
 = 
Àn
;

685  ; 
b
 < 
íd
; b +
bÀn
) {

686 
°©e
 = 
	`gë_bm≠_ext
(
agno
, 
b
, 
íd
, &
bÀn
);

687 
°©e
) {

688 
XR_E_UNKNOWN
:

689 
	`£t_bm≠
(
agno
, 
b
, 
XR_E_FREE1
);

691 
XR_E_FREE1
:

696 i‡(
magic
 =
XFS_ABTC_MAGIC
 ||

697 
magic
 =
XFS_ABTC_CRC_MAGIC
) {

698 
	`£t_bm≠_ext
(
agno
, 
b
, 
bÀn
,

699 
XR_E_FREE
);

703 
	`do_w¨n
(

704 
	`_
("block (%d,%d-%d) multiply claimed by %s spaceÅree, state - %d\n"),

705 
agno
, 
b
, b + 
bÀn
 - 1,

706 
«me
, 
°©e
);

717 
µ
 = 
	`XFS_ALLOC_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_Æloc_mxr
[1]);

719 i‡(
numªcs
 > 
mp
->
m_Æloc_mxr
[1]) {

720 
numªcs
 = 
mp
->
m_Æloc_mxr
[1];

721 
hdr_îr‹s
++;

723 i‡(
i§oŸ
 =0 && 
numªcs
 < 
mp
->
m_Æloc_mƒ
[1]) {

724 
numªcs
 = 
mp
->
m_Æloc_mƒ
[1];

725 
hdr_îr‹s
++;

732 i‡(
hdr_îr‹s
) {

733 
	`do_w¨n
(

734 
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in bt%s block %u/%u\n"),

735 
	`be16_to_˝u
(
block
->
bb_numªcs
),

736 
mp
->
m_Æloc_mƒ
[1], mp->
m_Æloc_mxr
[1],

737 
«me
, 
agno
, 
bno
);

738 i‡(
su•e˘
)

740 
su•e˘
++;

741 } i‡(
su•e˘
) {

742 
su•e˘
 = 0;

745 
i
 = 0; i < 
numªcs
; i++) {

746 
xfs_agblock_t
 
bno
 = 
	`be32_to_˝u
(
µ
[
i
]);

757 i‡(
bno
 !0 && 
	`vîify_agbno
(
mp
, 
agno
, bno)) {

758 
magic
) {

759 
XFS_ABTB_CRC_MAGIC
:

760 
XFS_ABTB_MAGIC
:

761 
	`sˇn_sbåì
(
bno
, 
Àvñ
, 
agno
, 
su•e˘
,

762 
sˇn_Ælocbt
, 0, 
magic
, 
¥iv
,

763 &
xfs_Ælocbt_buf_›s
);

765 
XFS_ABTC_CRC_MAGIC
:

766 
XFS_ABTC_MAGIC
:

767 
	`sˇn_sbåì
(
bno
, 
Àvñ
, 
agno
, 
su•e˘
,

768 
sˇn_Ælocbt
, 0, 
magic
, 
¥iv
,

769 &
xfs_Ælocbt_buf_›s
);

774 
	}
}

776 
boﬁ


777 
	$öo_is•¨£
(

778 
xfs_öobt_ªc
 *
Ω
,

779 
off£t
)

781 i‡(!
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

782  
Ál£
;

784  
	`xfs_öobt_is_•¨£_disk
(
Ω
, 
off£t
);

785 
	}
}

789 
	$¥o˚ss_rm≠_ªc
(

790 
xfs_mou¡
 *
mp
,

791 
xfs_agnumbî_t
 
agno
,

792 
xfs_agblock_t
 
b
,

793 
xfs_agblock_t
 
íd
,

794 
xfs_exéí_t
 
bÀn
,

795 
öt64_t
 
ow√r
,

796 
°©e
,

797 c⁄° *
«me
)

799 
°©e
) {

800 
XR_E_UNKNOWN
:

801 
ow√r
) {

802 
XFS_RMAP_OWN_FS
:

803 
XFS_RMAP_OWN_LOG
:

804 
	`£t_bm≠_ext
(
agno
, 
b
, 
bÀn
, 
XR_E_INUSE_FS1
);

806 
XFS_RMAP_OWN_AG
:

807 
XFS_RMAP_OWN_INOBT
:

808 
	`£t_bm≠_ext
(
agno
, 
b
, 
bÀn
, 
XR_E_FS_MAP1
);

810 
XFS_RMAP_OWN_INODES
:

811 
	`£t_bm≠_ext
(
agno
, 
b
, 
bÀn
, 
XR_E_INO1
);

813 
XFS_RMAP_OWN_REFC
:

814 
	`£t_bm≠_ext
(
agno
, 
b
, 
bÀn
, 
XR_E_REFC
);

816 
XFS_RMAP_OWN_COW
:

817 
	`£t_bm≠_ext
(
agno
, 
b
, 
bÀn
, 
XR_E_COW
);

819 
XFS_RMAP_OWN_NULL
:

824 
	`£t_bm≠_ext
(
agno
, 
b
, 
bÀn
, 
XR_E_INUSE1
);

828 
XR_E_INUSE_FS
:

829 i‡(
ow√r
 =
XFS_RMAP_OWN_FS
 ||

830 
ow√r
 =
XFS_RMAP_OWN_LOG
)

832 
	`do_w¨n
(

833 
	`_
("Sèti¯më®block (%d,%d-%dËmism©ch i¿%†åì, sèã - %d,%" 
PRIx64
 "\n"),

834 
agno
, 
b
, b + 
bÀn
 - 1,

835 
«me
, 
°©e
, 
ow√r
);

837 
XR_E_FS_MAP
:

838 i‡(
ow√r
 =
XFS_RMAP_OWN_AG
 ||

839 
ow√r
 =
XFS_RMAP_OWN_INOBT
)

841 
	`do_w¨n
(

842 
	`_
("AG më®block (%d,%d-%dËmism©ch i¿%†åì, sèã - %d,%" 
PRIx64
 "\n"),

843 
agno
, 
b
, b + 
bÀn
 - 1,

844 
«me
, 
°©e
, 
ow√r
);

846 
XR_E_INO
:

847 i‡(
ow√r
 =
XFS_RMAP_OWN_INODES
)

849 
	`do_w¨n
(

850 
	`_
("öodêblock (%d,%d-%dËmism©ch i¿%†åì, sèã - %d,%" 
PRIx64
 "\n"),

851 
agno
, 
b
, b + 
bÀn
 - 1,

852 
«me
, 
°©e
, 
ow√r
);

854 
XR_E_REFC
:

855 i‡(
ow√r
 =
XFS_RMAP_OWN_REFC
)

857 
	`do_w¨n
(

858 
	`_
("AGÑefcou¡ block (%d,%d-%dËmism©ch i¿%†åì, sèã - %d,%" 
PRIx64
 "\n"),

859 
agno
, 
b
, b + 
bÀn
 - 1,

860 
«me
, 
°©e
, 
ow√r
);

862 
XR_E_INUSE
:

863 i‡(
ow√r
 >= 0 &&

864 
ow√r
 < 
mp
->
m_sb
.
sb_dblocks
)

866 
	`do_w¨n
(

867 
	`_
("ö u£ block (%d,%d-%dËmism©ch i¿%†åì, sèã - %d,%" 
PRIx64
 "\n"),

868 
agno
, 
b
, b + 
bÀn
 - 1,

869 
«me
, 
°©e
, 
ow√r
);

871 
XR_E_FREE1
:

872 
XR_E_FREE
:

878 
XR_E_INUSE1
:

883 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
) &&

884 !
	`XFS_RMAP_NON_INODE_OWNER
(
ow√r
))

888 
	`do_w¨n
(

889 
	`_
("unknow¿block (%d,%d-%dËmism©ch o¿%†åì, sèã - %d,%" 
PRIx64
 "\n"),

890 
agno
, 
b
, b + 
bÀn
 - 1,

891 
«me
, 
°©e
, 
ow√r
);

894 
	}
}

896 
	srm≠_¥iv
 {

897 
aghdr_˙ts
 *
	mag˙ts
;

898 
xfs_rm≠_úec
 
	mhigh_key
;

899 
xfs_rm≠_úec
 
	mœ°_ªc
;

900 
xfs_agblock_t
 
	mƒ_blocks
;

903 
boﬁ


904 
	$rm≠_ö_‹dî
(

905 
xfs_agblock_t
 
b
,

906 
xfs_agblock_t
 
œ°block
,

907 
uöt64_t
 
ow√r
,

908 
uöt64_t
 
œ°ow√r
,

909 
uöt64_t
 
off£t
,

910 
uöt64_t
 
œ°off£t
)

912 i‡(
b
 > 
œ°block
)

913  
åue
;

914 i‡(
b
 < 
œ°block
)

915  
Ál£
;

917 i‡(
ow√r
 > 
œ°ow√r
)

918  
åue
;

919 i‡(
ow√r
 < 
œ°ow√r
)

920  
Ál£
;

922  
off£t
 > 
œ°off£t
;

923 
	}
}

926 
	$sˇn_rm≠bt
(

927 
xfs_båì_block
 *
block
,

928 
Àvñ
,

929 
xfs_agblock_t
 
bno
,

930 
xfs_agnumbî_t
 
agno
,

931 
su•e˘
,

932 
i§oŸ
,

933 
__uöt32_t
 
magic
,

934 *
¥iv
)

936 c⁄° *
«me
 = "rmap";

937 
i
;

938 
xfs_rm≠_±r_t
 *
µ
;

939 
xfs_rm≠_ªc
 *
Ω
;

940 
rm≠_¥iv
 *rm≠_¥iv = 
¥iv
;

941 
hdr_îr‹s
 = 0;

942 
numªcs
;

943 
°©e
;

944 
xfs_agblock_t
 
œ°block
 = 0;

945 
uöt64_t
 
œ°ow√r
 = 0;

946 
uöt64_t
 
œ°off£t
 = 0;

947 
xfs_rm≠_key
 *
kp
;

948 
xfs_rm≠_úec
 
key
 = {0};

950 i‡(
magic
 !
XFS_RMAP_CRC_MAGIC
) {

951 
«me
 = "(unknown)";

952 
hdr_îr‹s
++;

953 
su•e˘
++;

954 
out
;

957 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
magic
) {

958 
	`do_w¨n
(
	`_
("bad magic # %#x in bt%s block %d/%d\n"),

959 
	`be32_to_˝u
(
block
->
bb_magic
), 
«me
, 
agno
, 
bno
);

960 
hdr_îr‹s
++;

961 i‡(
su•e˘
)

962 
out
;

970 i‡(!
i§oŸ
) {

971 
rm≠_¥iv
->
ag˙ts
->
agfbåìblks
++;

972 
rm≠_¥iv
->
ag˙ts
->
fdblocks
++;

974 
rm≠_¥iv
->
ƒ_blocks
++;

976 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

977 
	`do_w¨n
(
	`_
("expectedÜevel %d got %d in bt%s block %d/%d\n"),

978 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
«me
, 
agno
, 
bno
);

979 
hdr_îr‹s
++;

980 i‡(
su•e˘
)

981 
out
;

985 
°©e
 = 
	`gë_bm≠
(
agno
, 
bno
);

986 i‡(!(
°©e
 =
XR_E_UNKNOWN
 || sèã =
XR_E_FS_MAP1
)) {

987 
	`£t_bm≠
(
agno
, 
bno
, 
XR_E_MULT
);

988 
	`do_w¨n
(

989 
	`_
("%sÑmap btree block claimed (state %d),ágno %d, bno %d, suspect %d\n"),

990 
«me
, 
°©e
, 
agno
, 
bno
, 
su•e˘
);

991 
out
;

993 
	`£t_bm≠
(
agno
, 
bno
, 
XR_E_FS_MAP
);

995 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

996 i‡(
Àvñ
 == 0) {

997 i‡(
numªcs
 > 
mp
->
m_rm≠_mxr
[0]) {

998 
numªcs
 = 
mp
->
m_rm≠_mxr
[0];

999 
hdr_îr‹s
++;

1001 i‡(
i§oŸ
 =0 && 
numªcs
 < 
mp
->
m_rm≠_mƒ
[0]) {

1002 
numªcs
 = 
mp
->
m_rm≠_mƒ
[0];

1003 
hdr_îr‹s
++;

1006 i‡(
hdr_îr‹s
) {

1007 
	`do_w¨n
(

1008 
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in bt%s block %u/%u\n"),

1009 
	`be16_to_˝u
(
block
->
bb_numªcs
),

1010 
mp
->
m_rm≠_mƒ
[0], mp->
m_rm≠_mxr
[0],

1011 
«me
, 
agno
, 
bno
);

1012 
su•e˘
++;

1015 
Ω
 = 
	`XFS_RMAP_REC_ADDR
(
block
, 1);

1016 
i
 = 0; i < 
numªcs
; i++) {

1017 
xfs_agblock_t
 
b
, 
íd
;

1018 
xfs_exéí_t
 
Àn
, 
bÀn
;

1019 
öt64_t
 
ow√r
, 
off£t
;

1021 
b
 = 
	`be32_to_˝u
(
Ω
[
i
].
rm_°¨tblock
);

1022 
Àn
 = 
	`be32_to_˝u
(
Ω
[
i
].
rm_blockcou¡
);

1023 
ow√r
 = 
	`be64_to_˝u
(
Ω
[
i
].
rm_ow√r
);

1024 
off£t
 = 
	`be64_to_˝u
(
Ω
[
i
].
rm_off£t
);

1026 
key
.
rm_Êags
 = 0;

1027 
key
.
rm_°¨tblock
 = 
b
;

1028 
key
.
rm_blockcou¡
 = 
Àn
;

1029 
key
.
rm_ow√r
 = 
ow√r
;

1030 i‡(
	`libxfs_rm≠_úec_off£t_u≈ack
(
off£t
, &
key
)) {

1032 
	`do_w¨n
(

1033 
	`_
("invalid flags inÑecord %u of %s btree block %u/%u\n"),

1034 
i
, 
«me
, 
agno
, 
bno
);

1038 
íd
 = 
key
.
rm_°¨tblock
 + key.
rm_blockcou¡
;

1041 i‡(!
	`vîify_agbno
(
mp
, 
agno
, 
b
)) {

1042 
	`do_w¨n
(

1043 
	`_
("invalid start block %u inÑecord %u of %s btree block %u/%u\n"),

1044 
b
, 
i
, 
«me
, 
agno
, 
bno
);

1047 i‡(
Àn
 =0 || !
	`vîify_agbno
(
mp
, 
agno
, 
íd
 - 1)) {

1048 
	`do_w¨n
(

1049 
	`_
("invalidÜength %u inÑecord %u of %s btree block %u/%u\n"),

1050 
Àn
, 
i
, 
«me
, 
agno
, 
bno
);

1055 i‡(!((
ow√r
 > 
XFS_RMAP_OWN_MIN
 &&

1056 
ow√r
 <
XFS_RMAP_OWN_FS
) ||

1057 (
	`XFS_INO_TO_AGNO
(
mp
, 
ow√r
Ë< mp->
m_sb
.
sb_agcou¡
 &&

1058 
	`XFS_AGINO_TO_AGBNO
(
mp
,

1059 
	`XFS_INO_TO_AGINO
(
mp
, 
ow√r
)) <

1060 
mp
->
m_sb
.
sb_agblocks
)))

1061 
	`do_w¨n
(

1062 
	`_
("övÆid ow√∏öÑm≠ båìÑec‹d %d (%"
PRId64
" %u) block %u/%u\n"),

1063 
i
, 
ow√r
, 
Àn
, 
agno
, 
bno
);

1066 i‡(
	`XFS_RMAP_NON_INODE_OWNER
(
key
.
rm_ow√r
)) {

1067 i‡(
key
.
rm_Êags
)

1068 
	`do_w¨n
(

1069 
	`_
("record %d of block (%u/%u) in %s btree cannot haveÇon-inode owner with flags\n"),

1070 
i
, 
agno
, 
bno
, 
«me
);

1071 i‡(
key
.
rm_off£t
)

1072 
	`do_w¨n
(

1073 
	`_
("record %d of block (%u/%u) in %s btree cannot haveÇon-inode owner with offset\n"),

1074 
i
, 
agno
, 
bno
, 
«me
);

1078 i‡(
i
 == 0) {

1079 
adv™˚
:

1080 
œ°block
 = 
b
;

1081 
œ°ow√r
 = 
ow√r
;

1082 
œ°off£t
 = 
off£t
;

1084 
boﬁ
 
bad
;

1086 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

1087 
bad
 = !
	`rm≠_ö_‹dî
(
b
, 
œ°block
,

1088 
ow√r
, 
œ°ow√r
,

1089 
off£t
, 
œ°off£t
);

1091 
bad
 = 
b
 <
œ°block
;

1092 i‡(
bad
)

1093 
	`do_w¨n
(

1094 
	`_
("out-of-‹dîÑm≠ båìÑec‹d %d (%u %"
PRId64
" %"
PRIx64
" %u) block %u/%u\n"),

1095 
i
, 
b
, 
ow√r
, 
off£t
, 
Àn
, 
agno
, 
bno
);

1097 
adv™˚
;

1101 i‡(
	`rm≠s_¨e_mîgóbÀ
(&
rm≠_¥iv
->
œ°_ªc
, &
key
)) {

1102 
	`do_w¨n
(

1103 
	`_
("record %d in block (%u/%u) of %sÅree should be merged withÖreviousÑecord\n"),

1104 
i
, 
agno
, 
bno
, 
«me
);

1105 
rm≠_¥iv
->
œ°_ªc
.
rm_blockcou¡
 +=

1106 
key
.
rm_blockcou¡
;

1108 
rm≠_¥iv
->
œ°_ªc
 = 
key
;

1111 
key
.
rm_°¨tblock
 +key.
rm_blockcou¡
 - 1;

1112 i‡(!
	`XFS_RMAP_NON_INODE_OWNER
(
key
.
rm_ow√r
) &&

1113 !(
key
.
rm_Êags
 & 
XFS_RMAP_BMBT_BLOCK
))

1114 
key
.
rm_off£t
 +key.
rm_blockcou¡
 - 1;

1115 
key
.
rm_blockcou¡
 = 0;

1116 i‡(
	`rm≠_diffkeys
(&
key
, &
rm≠_¥iv
->
high_key
) > 0) {

1117 
	`do_w¨n
(

1118 
	`_
("record %d greaterÅhan high key of block (%u/%u) in %sÅree\n"),

1119 
i
, 
agno
, 
bno
, 
«me
);

1123  ; 
b
 < 
íd
; b +
bÀn
) {

1124 
°©e
 = 
	`gë_bm≠_ext
(
agno
, 
b
, 
íd
, &
bÀn
);

1125 
	`¥o˚ss_rm≠_ªc
(
mp
, 
agno
, 
b
, 
íd
, 
bÀn
, 
ow√r
,

1126 
°©e
, 
«me
);

1129 
out
;

1135 
µ
 = 
	`XFS_RMAP_PTR_ADDR
(
block
, 1, 
mp
->
m_rm≠_mxr
[1]);

1137 i‡(
numªcs
 > 
mp
->
m_rm≠_mxr
[1]) {

1138 
numªcs
 = 
mp
->
m_rm≠_mxr
[1];

1139 
hdr_îr‹s
++;

1141 i‡(
i§oŸ
 =0 && 
numªcs
 < 
mp
->
m_rm≠_mƒ
[1]) {

1142 
numªcs
 = 
mp
->
m_rm≠_mƒ
[1];

1143 
hdr_îr‹s
++;

1150 i‡(
hdr_îr‹s
) {

1151 
	`do_w¨n
(

1152 
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in bt%s block %u/%u\n"),

1153 
	`be16_to_˝u
(
block
->
bb_numªcs
),

1154 
mp
->
m_rm≠_mƒ
[1], mp->
m_rm≠_mxr
[1],

1155 
«me
, 
agno
, 
bno
);

1156 i‡(
su•e˘
)

1157 
out
;

1158 
su•e˘
++;

1159 } i‡(
su•e˘
) {

1160 
su•e˘
 = 0;

1164 
i
 = 0; !
i§oŸ
 && i < 
numªcs
; i++) {

1165 
kp
 = 
	`XFS_RMAP_HIGH_KEY_ADDR
(
block
, 
i
 + 1);

1167 
key
.
rm_Êags
 = 0;

1168 
key
.
rm_°¨tblock
 = 
	`be32_to_˝u
(
kp
->rm_startblock);

1169 
key
.
rm_ow√r
 = 
	`be64_to_˝u
(
kp
->rm_owner);

1170 i‡(
	`libxfs_rm≠_úec_off£t_u≈ack
(
	`be64_to_˝u
(
kp
->
rm_off£t
),

1171 &
key
)) {

1173 
	`do_w¨n
(

1174 
	`_
("invalid flags in key %u of %s btree block %u/%u\n"),

1175 
i
, 
«me
, 
agno
, 
bno
);

1178 i‡(
	`rm≠_diffkeys
(&
key
, &
rm≠_¥iv
->
high_key
) > 0)

1179 
	`do_w¨n
(

1180 
	`_
("key %d greaterÅhan high key of block (%u/%u) in %sÅree\n"),

1181 
i
, 
agno
, 
bno
, 
«me
);

1184 
i
 = 0; i < 
numªcs
; i++) {

1185 
xfs_agblock_t
 
bno
 = 
	`be32_to_˝u
(
µ
[
i
]);

1196 
kp
 = 
	`XFS_RMAP_HIGH_KEY_ADDR
(
block
, 
i
 + 1);

1197 
rm≠_¥iv
->
high_key
.
rm_Êags
 = 0;

1198 
rm≠_¥iv
->
high_key
.
rm_°¨tblock
 =

1199 
	`be32_to_˝u
(
kp
->
rm_°¨tblock
);

1200 
rm≠_¥iv
->
high_key
.
rm_ow√r
 =

1201 
	`be64_to_˝u
(
kp
->
rm_ow√r
);

1202 i‡(
	`libxfs_rm≠_úec_off£t_u≈ack
(
	`be64_to_˝u
(
kp
->
rm_off£t
),

1203 &
rm≠_¥iv
->
high_key
)) {

1205 
	`do_w¨n
(

1206 
	`_
("invalid flags in high key %u of %s btree block %u/%u\n"),

1207 
i
, 
«me
, 
agno
, 
bno
);

1211 i‡(
bno
 !0 && 
	`vîify_agbno
(
mp
, 
agno
, bno)) {

1212 
	`sˇn_sbåì
(
bno
, 
Àvñ
, 
agno
, 
su•e˘
, 
sˇn_rm≠bt
, 0,

1213 
magic
, 
¥iv
, &
xfs_rm≠bt_buf_›s
);

1217 
out
:

1218 i‡(
su•e˘
)

1219 
	`rm≠_avoid_check
();

1220 
	}
}

1222 
	sªfc_¥iv
 {

1223 
xfs_ªfcou¡_úec
 
	mœ°_ªc
;

1224 
xfs_agblock_t
 
	mƒ_blocks
;

1229 
	$sˇn_ªfcbt
(

1230 
xfs_båì_block
 *
block
,

1231 
Àvñ
,

1232 
xfs_agblock_t
 
bno
,

1233 
xfs_agnumbî_t
 
agno
,

1234 
su•e˘
,

1235 
i§oŸ
,

1236 
__uöt32_t
 
magic
,

1237 *
¥iv
)

1239 c⁄° *
«me
 = "refcount";

1240 
i
;

1241 
xfs_ªfcou¡_±r_t
 *
µ
;

1242 
xfs_ªfcou¡_ªc
 *
Ω
;

1243 
hdr_îr‹s
 = 0;

1244 
numªcs
;

1245 
°©e
;

1246 
xfs_agblock_t
 
œ°block
 = 0;

1247 
ªfc_¥iv
 *ªfc_¥iv = 
¥iv
;

1249 i‡(
magic
 !
XFS_REFC_CRC_MAGIC
) {

1250 
«me
 = "(unknown)";

1251 
hdr_îr‹s
++;

1252 
su•e˘
++;

1253 
out
;

1256 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
magic
) {

1257 
	`do_w¨n
(
	`_
("bad magic # %#x in %s btree block %d/%d\n"),

1258 
	`be32_to_˝u
(
block
->
bb_magic
), 
«me
, 
agno
, 
bno
);

1259 
hdr_îr‹s
++;

1260 i‡(
su•e˘
)

1261 
out
;

1264 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

1265 
	`do_w¨n
(
	`_
("expectedÜevel %d got %d in %s btree block %d/%d\n"),

1266 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
«me
, 
agno
, 
bno
);

1267 
hdr_îr‹s
++;

1268 i‡(
su•e˘
)

1269 
out
;

1272 
ªfc_¥iv
->
ƒ_blocks
++;

1275 
°©e
 = 
	`gë_bm≠
(
agno
, 
bno
);

1276 i‡(!(
°©e
 =
XR_E_UNKNOWN
 || sèã =
XR_E_REFC
)) {

1277 
	`£t_bm≠
(
agno
, 
bno
, 
XR_E_MULT
);

1278 
	`do_w¨n
(

1279 
	`_
("%s btree block claimed (state %d),ágno %d, bno %d, suspect %d\n"),

1280 
«me
, 
°©e
, 
agno
, 
bno
, 
su•e˘
);

1281 
out
;

1283 
	`£t_bm≠
(
agno
, 
bno
, 
XR_E_FS_MAP
);

1285 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

1286 i‡(
Àvñ
 == 0) {

1287 i‡(
numªcs
 > 
mp
->
m_ªfc_mxr
[0]) {

1288 
numªcs
 = 
mp
->
m_ªfc_mxr
[0];

1289 
hdr_îr‹s
++;

1291 i‡(
i§oŸ
 =0 && 
numªcs
 < 
mp
->
m_ªfc_mƒ
[0]) {

1292 
numªcs
 = 
mp
->
m_ªfc_mƒ
[0];

1293 
hdr_îr‹s
++;

1296 i‡(
hdr_îr‹s
) {

1297 
	`do_w¨n
(

1298 
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in %s btree block %u/%u\n"),

1299 
	`be16_to_˝u
(
block
->
bb_numªcs
),

1300 
mp
->
m_ªfc_mƒ
[0], mp->
m_ªfc_mxr
[0],

1301 
«me
, 
agno
, 
bno
);

1302 
su•e˘
++;

1305 
Ω
 = 
	`XFS_REFCOUNT_REC_ADDR
(
block
, 1);

1306 
i
 = 0; i < 
numªcs
; i++) {

1307 
xfs_agblock_t
 
b
, 
agb
, 
íd
;

1308 
xfs_exéí_t
 
Àn
;

1309 
xfs_∆ök_t
 
ƒ
;

1311 
b
 = 
agb
 = 
	`be32_to_˝u
(
Ω
[
i
].
rc_°¨tblock
);

1312 
Àn
 = 
	`be32_to_˝u
(
Ω
[
i
].
rc_blockcou¡
);

1313 
ƒ
 = 
	`be32_to_˝u
(
Ω
[
i
].
rc_ªfcou¡
);

1314 i‡(
b
 >
XFS_REFC_COW_START
 && 
ƒ
 != 1)

1315 
	`do_w¨n
(

1316 
	`_
("leftover CoWÉxtent has incorrectÑefcount inÑecord %u of %s btree block %u/%u\n"),

1317 
i
, 
«me
, 
agno
, 
bno
);

1318 i‡(
ƒ
 == 1) {

1319 i‡(
agb
 < 
XFS_REFC_COW_START
)

1320 
	`do_w¨n
(

1321 
	`_
("leftover CoWÉxtent has invalid startblock inÑecord %u of %s btree block %u/%u\n"),

1322 
i
, 
«me
, 
agno
, 
bno
);

1323 
agb
 -
XFS_REFC_COW_START
;

1325 
íd
 = 
agb
 + 
Àn
;

1327 i‡(!
	`vîify_agbno
(
mp
, 
agno
, 
agb
)) {

1328 
	`do_w¨n
(

1329 
	`_
("invalid start block %u inÑecord %u of %s btree block %u/%u\n"),

1330 
b
, 
i
, 
«me
, 
agno
, 
bno
);

1333 i‡(
Àn
 =0 || !
	`vîify_agbno
(
mp
, 
agno
, 
íd
 - 1)) {

1334 
	`do_w¨n
(

1335 
	`_
("invalidÜength %u inÑecord %u of %s btree block %u/%u\n"),

1336 
Àn
, 
i
, 
«me
, 
agno
, 
bno
);

1340 i‡(
ƒ
 == 1) {

1341 
xfs_agblock_t
 
c
;

1342 
xfs_exéí_t
 
˙r
;

1344 
c
 = 
agb
; c < 
íd
; c +
˙r
) {

1345 
°©e
 = 
	`gë_bm≠_ext
(
agno
, 
c
, 
íd
, &
˙r
);

1346 
°©e
) {

1347 
XR_E_UNKNOWN
:

1348 
XR_E_COW
:

1349 
	`do_w¨n
(

1350 
	`_
("leftover CoWÉxtent (%u/%u)Üen %u\n"),

1351 
agno
, 
c
, 
˙r
);

1352 
	`£t_bm≠_ext
(
agno
, 
c
, 
˙r
, 
XR_E_FREE
);

1355 
	`do_w¨n
(

1356 
	`_
("extent (%u/%u)Üen %u claimed, state is %d\n"),

1357 
agno
, 
c
, 
˙r
, 
°©e
);

1361 } i‡(
ƒ
 < 2 ||Ç∏> 
MAXREFCOUNT
) {

1362 
	`do_w¨n
(

1363 
	`_
("invalidÑeference count %u inÑecord %u of %s btree block %u/%u\n"),

1364 
ƒ
, 
i
, 
«me
, 
agno
, 
bno
);

1368 i‡(
b
 && b <
œ°block
) {

1369 
	`do_w¨n
(
	`_
(

1371 
«me
, 
i
, 
b
, 
Àn
, 
agno
, 
bno
);

1373 
œ°block
 = 
b
;

1377 i‡(
ªfc_¥iv
->
œ°_ªc
.
rc_°¨tblock
 +

1378 
ªfc_¥iv
->
œ°_ªc
.
rc_blockcou¡
 =
b
 &&

1379 
ªfc_¥iv
->
œ°_ªc
.
rc_ªfcou¡
 =
ƒ
) {

1380 
	`do_w¨n
(

1381 
	`_
("record %d in block (%u/%u) of %sÅree should be merged withÖreviousÑecord\n"),

1382 
i
, 
agno
, 
bno
, 
«me
);

1383 
ªfc_¥iv
->
œ°_ªc
.
rc_blockcou¡
 +
Àn
;

1385 
ªfc_¥iv
->
œ°_ªc
.
rc_°¨tblock
 = 
b
;

1386 
ªfc_¥iv
->
œ°_ªc
.
rc_blockcou¡
 = 
Àn
;

1387 
ªfc_¥iv
->
œ°_ªc
.
rc_ªfcou¡
 = 
ƒ
;

1392 
out
;

1398 
µ
 = 
	`XFS_REFCOUNT_PTR_ADDR
(
block
, 1, 
mp
->
m_ªfc_mxr
[1]);

1400 i‡(
numªcs
 > 
mp
->
m_ªfc_mxr
[1]) {

1401 
numªcs
 = 
mp
->
m_ªfc_mxr
[1];

1402 
hdr_îr‹s
++;

1404 i‡(
i§oŸ
 =0 && 
numªcs
 < 
mp
->
m_ªfc_mƒ
[1]) {

1405 
numªcs
 = 
mp
->
m_ªfc_mƒ
[1];

1406 
hdr_îr‹s
++;

1413 i‡(
hdr_îr‹s
) {

1414 
	`do_w¨n
(

1415 
	`_
("bad btreeÇrecs (%u, min=%u, max=%u) in %s btree block %u/%u\n"),

1416 
	`be16_to_˝u
(
block
->
bb_numªcs
),

1417 
mp
->
m_ªfc_mƒ
[1], mp->
m_ªfc_mxr
[1],

1418 
«me
, 
agno
, 
bno
);

1419 i‡(
su•e˘
)

1420 
out
;

1421 
su•e˘
++;

1422 } i‡(
su•e˘
) {

1423 
su•e˘
 = 0;

1426 
i
 = 0; i < 
numªcs
; i++) {

1427 
xfs_agblock_t
 
bno
 = 
	`be32_to_˝u
(
µ
[
i
]);

1429 i‡(
bno
 !0 && 
	`vîify_agbno
(
mp
, 
agno
, bno)) {

1430 
	`sˇn_sbåì
(
bno
, 
Àvñ
, 
agno
, 
su•e˘
, 
sˇn_ªfcbt
, 0,

1431 
magic
, 
¥iv
, &
xfs_ªfcou¡bt_buf_›s
);

1434 
out
:

1435 i‡(
su•e˘
)

1436 
	`ªfcou¡_avoid_check
();

1438 
	}
}

1453 
	eöobt_ty≥
 {

1454 
	mINOBT
,

1455 
	mFINOBT


1457 c⁄° *
	göobt_«mes
[] = {

1463 
	$vîify_sögÀ_öo_chunk_Æign
(

1464 
xfs_agnumbî_t
 
agno
,

1465 
öobt_ty≥
 
ty≥
,

1466 
xfs_öobt_ªc
 *
Ω
,

1467 
su•e˘
,

1468 
boﬁ
 *
skù
)

1470 c⁄° *
öobt_«me
 = 
öobt_«mes
[
ty≥
];

1471 
xfs_öo_t
 
löo
;

1472 
xfs_agöo_t
 
öo
;

1473 
xfs_agblock_t
 
agbno
;

1474 
off
;

1476 *
skù
 = 
Ál£
;

1477 
öo
 = 
	`be32_to_˝u
(
Ω
->
ú_°¨töo
);

1478 
off
 = 
	`XFS_AGINO_TO_OFFSET
(
mp
, 
öo
);

1479 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
öo
);

1480 
löo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
);

1489 i‡(
öo
 == 0 ||

1490 (
öodes_≥r_block
 <
XFS_INODES_PER_CHUNK
 && 
off
 != 0) ||

1491 (
öodes_≥r_block
 > 
XFS_INODES_PER_CHUNK
 &&

1492 
off
 % 
XFS_INODES_PER_CHUNK
 != 0) ||

1493 (
fs_Æig√d_öodes
 && 
fs_öo_Æignmít
 &&

1494 
agbno
 % 
fs_öo_Æignmít
 != 0)) {

1495 
	`do_w¨n
(

1496 
	`_
("badlyálig√d %†ª¯(°¨tög inodê%" 
PRIu64
 ")\n"),

1497 
öobt_«me
, 
löo
);

1498 
su•e˘
++;

1508 i‡(
	`vîify_agöum
(
mp
, 
agno
, 
öo
)) {

1509 
	`do_w¨n
(

1510 
	`_
("bad sèπög inodê# (%" 
PRIu64
 " (0x%x 0x%x)) in %sÑec, skippingÑec\n"),

1511 
löo
, 
agno
, 
öo
, 
öobt_«me
);

1512 *
skù
 = 
åue
;

1513  ++
su•e˘
;

1516 i‡(
	`vîify_agöum
(
mp
, 
agno
,

1517 
öo
 + 
XFS_INODES_PER_CHUNK
 - 1)) {

1518 
	`do_w¨n
(

1519 
	`_
("badÉndög inodê# (%" 
PRIu64
 " (0x%x 0x%zx)) in %sÑec, skippingÑec\n"),

1520 
löo
 + 
XFS_INODES_PER_CHUNK
 - 1,

1521 
agno
,

1522 
öo
 + 
XFS_INODES_PER_CHUNK
 - 1,

1523 
öobt_«me
);

1524 *
skù
 = 
åue
;

1525  ++
su•e˘
;

1528  
su•e˘
;

1529 
	}
}

1538 
	$imp‹t_sögÀ_öo_chunk
(

1539 
xfs_agnumbî_t
 
agno
,

1540 
öobt_ty≥
 
ty≥
,

1541 
xfs_öobt_ªc
 *
Ω
,

1542 
su•e˘
,

1543 *
p_n‰ì
,

1544 *
p_nöodes
)

1546 
öo_åì_node
 *
öo_ªc
 = 
NULL
;

1547 c⁄° *
öobt_«me
 = 
öobt_«mes
[
ty≥
];

1548 
xfs_agöo_t
 
öo
;

1549 
j
;

1550 
n‰ì
;

1551 
nöodes
;

1553 
öo
 = 
	`be32_to_˝u
(
Ω
->
ú_°¨töo
);

1555 i‡(!
su•e˘
) {

1556 i‡(
	`XFS_INOBT_IS_FREE_DISK
(
Ω
, 0))

1557 
öo_ªc
 = 
	`£t_öode_‰ì_Æloc
(
mp
, 
agno
, 
öo
);

1559 
öo_ªc
 = 
	`£t_öode_u£d_Æloc
(
mp
, 
agno
, 
öo
);

1560 
j
 = 1; j < 
XFS_INODES_PER_CHUNK
; j++) {

1561 i‡(
	`XFS_INOBT_IS_FREE_DISK
(
Ω
, 
j
))

1562 
	`£t_öode_‰ì
(
öo_ªc
, 
j
);

1564 
	`£t_öode_u£d
(
öo_ªc
, 
j
);

1567 
j
 = 0; j < 
XFS_INODES_PER_CHUNK
; j++) {

1568 i‡(
	`XFS_INOBT_IS_FREE_DISK
(
Ω
, 
j
))

1569 
	`add_agöode_un˚πaö
(
mp
, 
agno
, 
öo
 + 
j
, 1);

1571 
	`add_agöode_un˚πaö
(
mp
, 
agno
, 
öo
 + 
j
, 0);

1579 
n‰ì
 = 
nöodes
 = 0;

1580 
j
 = 0; j < 
XFS_INODES_PER_CHUNK
; j++) {

1581 i‡(
	`öo_is•¨£
(
Ω
, 
j
)) {

1582 i‡(!
su•e˘
 && !
	`XFS_INOBT_IS_FREE_DISK
(
Ω
, 
j
)) {

1583 
	`do_w¨n
(

1584 
	`_
("ir_holemask/ir_free mismatch, %s chunk %d/%u, holemask 0x%x free 0x%llx\n"),

1585 
öobt_«me
, 
agno
, 
öo
,

1586 
	`be16_to_˝u
(
Ω
->
ú_u
.
•
.
ú_hﬁemask
),

1587 
	`be64_to_˝u
(
Ω
->
ú_‰ì
));

1588 
su•e˘
++;

1590 i‡(!
su•e˘
 && 
öo_ªc
)

1591 
	`£t_öode_•¨£
(
öo_ªc
, 
j
);

1594 i‡(
	`XFS_INOBT_IS_FREE_DISK
(
Ω
, 
j
))

1595 
n‰ì
++;

1596 
nöodes
++;

1600 *
p_n‰ì
 = 
n‰ì
;

1601 *
p_nöodes
 = 
nöodes
;

1603  
su•e˘
;

1604 
	}
}

1607 
	$sˇn_sögÀ_öo_chunk
(

1608 
xfs_agnumbî_t
 
agno
,

1609 
xfs_öobt_ªc_t
 *
Ω
,

1610 
su•e˘
)

1612 
xfs_öo_t
 
löo
;

1613 
xfs_agöo_t
 
öo
;

1614 
xfs_agblock_t
 
agbno
;

1615 
j
;

1616 
n‰ì
;

1617 
nöodes
;

1618 
off
;

1619 
°©e
;

1620 
öo_åì_node_t
 *
fú°_ªc
, *
œ°_ªc
;

1621 
‰ìcou¡
;

1622 
boﬁ
 
skù
 = 
Ál£
;

1624 
öo
 = 
	`be32_to_˝u
(
Ω
->
ú_°¨töo
);

1625 
off
 = 
	`XFS_AGINO_TO_OFFSET
(
mp
, 
öo
);

1626 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
öo
);

1627 
löo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
);

1628 
‰ìcou¡
 = 
	`ö‹ec_gë_‰ìcou¡
(
mp
, 
Ω
);

1633 
su•e˘
 = 
	`vîify_sögÀ_öo_chunk_Æign
(
agno
, 
INOBT
, 
Ω
, suspect,

1634 &
skù
);

1635 i‡(
skù
)

1636  
su•e˘
;

1641 i‡(
off
 =0 && !
su•e˘
) {

1642 
j
 = 0;

1643 
j
 < 
XFS_INODES_PER_CHUNK
;

1644 
j
 +
mp
->
m_sb
.
sb_ö›block
) {

1647 i‡(
	`öo_is•¨£
(
Ω
, 
j
))

1650 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
öo
 + 
j
);

1651 
°©e
 = 
	`gë_bm≠
(
agno
, 
agbno
);

1652 
°©e
) {

1653 
XR_E_INO
:

1655 
XR_E_UNKNOWN
:

1656 
XR_E_INO1
:

1657 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_INO
);

1659 
XR_E_INUSE_FS
:

1660 
XR_E_INUSE_FS1
:

1661 i‡(
agno
 == 0 &&

1662 
öo
 + 
j
 >
fú°_¥óŒoc_öo
 &&

1663 
öo
 + 
j
 < 
œ°_¥óŒoc_öo
) {

1664 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_INO
);

1670 
	`do_w¨n
(

1671 
	`_
("inode chunk claims used block, inobt block -ágno %d, bno %d, inopb %d\n"),

1672 
agno
, 
agbno
, 
mp
->
m_sb
.
sb_ö›block
);

1673  ++
su•e˘
;

1681 
	`föd_öode_ªc_ønge
(
mp
, 
agno
, 
öo
, inÿ+ 
XFS_INODES_PER_CHUNK
,

1682 &
fú°_ªc
, &
œ°_ªc
);

1683 i‡(
fú°_ªc
 !
NULL
) {

1688 
	`do_w¨n
(

1689 
	`_
("öodêª¯f‹ inÿ%" 
PRIu64
 " (%d/%d) overlapsÉxistingÑec (start %d/%d)\n"),

1690 
löo
, 
agno
, 
öo
,ágno, 
fú°_ªc
->
öo_°¨äum
);

1691 
su•e˘
++;

1698 i‡(
fú°_ªc
->
öo_°¨äum
 =
öo
)

1699  
su•e˘
;

1707 
n‰ì
 = 
nöodes
 = 0;

1708 
su•e˘
 = 
	`imp‹t_sögÀ_öo_chunk
(
agno
, 
INOBT
, 
Ω
, su•e˘, &
n‰ì
,

1709 &
nöodes
);

1711 i‡(
n‰ì
 !
‰ìcou¡
) {

1712 
	`do_w¨n
(

1713 
	`_
("ir_freecount/free mismatch, inode chunk %d/%u, freecount %dÇfree %d\n"),

1714 
agno
, 
öo
, 
‰ìcou¡
, 
n‰ì
);

1718 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
) &&

1719 
nöodes
 !
Ω
->
ú_u
.
•
.
ú_cou¡
) {

1720 
	`do_w¨n
(

1721 
	`_
("invalid inode count, inode chunk %d/%u, count %dÇinodes %d\n"),

1722 
agno
, 
öo
, 
Ω
->
ú_u
.
•
.
ú_cou¡
, 
nöodes
);

1725  
su•e˘
;

1726 
	}
}

1729 
	$sˇn_sögÀ_föobt_chunk
(

1730 
xfs_agnumbî_t
 
agno
,

1731 
xfs_öobt_ªc_t
 *
Ω
,

1732 
su•e˘
)

1734 
xfs_öo_t
 
löo
;

1735 
xfs_agöo_t
 
öo
;

1736 
xfs_agblock_t
 
agbno
;

1737 
j
;

1738 
n‰ì
;

1739 
nöodes
;

1740 
off
;

1741 
°©e
;

1742 
öo_åì_node_t
 *
fú°_ªc
, *
œ°_ªc
;

1743 
‰ìcou¡
;

1744 
boﬁ
 
skù
 = 
Ál£
;

1746 
öo
 = 
	`be32_to_˝u
(
Ω
->
ú_°¨töo
);

1747 
off
 = 
	`XFS_AGINO_TO_OFFSET
(
mp
, 
öo
);

1748 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
öo
);

1749 
löo
 = 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
öo
);

1750 
‰ìcou¡
 = 
	`ö‹ec_gë_‰ìcou¡
(
mp
, 
Ω
);

1755 
su•e˘
 = 
	`vîify_sögÀ_öo_chunk_Æign
(
agno
, 
FINOBT
, 
Ω
, suspect,

1756 &
skù
);

1757 i‡(
skù
)

1758  
su•e˘
;

1764 i‡(
off
 =0 && !
su•e˘
) {

1765 
j
 = 0;

1766 
j
 < 
XFS_INODES_PER_CHUNK
;

1767 
j
 +
mp
->
m_sb
.
sb_ö›block
) {

1768 
agbno
 = 
	`XFS_AGINO_TO_AGBNO
(
mp
, 
öo
 + 
j
);

1769 
°©e
 = 
	`gë_bm≠
(
agno
, 
agbno
);

1772 i‡(
	`öo_is•¨£
(
Ω
, 
j
)) {

1773 i‡(
°©e
 =
XR_E_INO
) {

1774 
	`do_w¨n
(

1775 
	`_
("sparse inode chunk claims inode block, finobt block -ágno %d, bno %d, inopb %d\n"),

1776 
agno
, 
agbno
, 
mp
->
m_sb
.
sb_ö›block
);

1777 
su•e˘
++;

1782 
°©e
) {

1783 
XR_E_INO
:

1785 
XR_E_INO1
:

1786 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_INO
);

1788 
XR_E_UNKNOWN
:

1789 
	`do_w¨n
(

1790 
	`_
("inode chunk claims untracked block, finobt block -ágno %d, bno %d, inopb %d\n"),

1791 
agno
, 
agbno
, 
mp
->
m_sb
.
sb_ö›block
);

1793 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_INO
);

1794 
su•e˘
++;

1796 
XR_E_INUSE_FS
:

1797 
XR_E_INUSE_FS1
:

1798 i‡(
agno
 == 0 &&

1799 
öo
 + 
j
 >
fú°_¥óŒoc_öo
 &&

1800 
öo
 + 
j
 < 
œ°_¥óŒoc_öo
) {

1801 
	`do_w¨n
(

1802 
	`_
("inode chunk claims untracked block, finobt block -ágno %d, bno %d, inopb %d\n"),

1803 
agno
, 
agbno
, 
mp
->
m_sb
.
sb_ö›block
);

1805 
	`£t_bm≠
(
agno
, 
agbno
, 
XR_E_INO
);

1806 
su•e˘
++;

1811 
	`do_w¨n
(

1812 
	`_
("inode chunk claims used block, finobt block -ágno %d, bno %d, inopb %d\n"),

1813 
agno
, 
agbno
, 
mp
->
m_sb
.
sb_ö›block
);

1814  ++
su•e˘
;

1822 
	`föd_öode_ªc_ønge
(
mp
, 
agno
, 
öo
, inÿ+ 
XFS_INODES_PER_CHUNK
,

1823 &
fú°_ªc
, &
œ°_ªc
);

1825 i‡(
fú°_ªc
) {

1826 i‡(
su•e˘
)

1827  
su•e˘
;

1832 i‡(
fú°_ªc
->
öo_°¨äum
 !
öo
) {

1833 
	`do_w¨n
(

1834 
	`_
("föobàª¯f‹ inÿ%" 
PRIu64
 " (%d/%u) doesÇot matchÉxistingÑec (%d/%d)\n"),

1835 
löo
, 
agno
, 
öo
,ágno, 
fú°_ªc
->
öo_°¨äum
);

1836  ++
su•e˘
;

1839 
n‰ì
 = 
nöodes
 = 0;

1840 
j
 = 0; j < 
XFS_INODES_PER_CHUNK
; j++) {

1841 
is‰ì
 = 
	`XFS_INOBT_IS_FREE_DISK
(
Ω
, 
j
);

1842 
is•¨£
 = 
	`öo_is•¨£
(
Ω
, 
j
);

1844 i‡(!
is•¨£
)

1845 
nöodes
++;

1846 i‡(
is‰ì
 && !
is•¨£
)

1847 
n‰ì
++;

1853 i‡(!
su•e˘
 &&

1854 
is‰ì
 !
	`is_öode_‰ì
(
fú°_ªc
, 
j
))

1855 
su•e˘
++;

1857 i‡(!
su•e˘
 &&

1858 
is•¨£
 !
	`is_öode_•¨£
(
fú°_ªc
, 
j
))

1859 
su•e˘
++;

1862 
check_‰ìcou¡
;

1876 
	`do_w¨n
(
	`_
("undiscovîed föobàªc‹d, inÿ%" 
PRIu64
 " (%d/%u)\n"),

1877 
löo
, 
agno
, 
öo
);

1879 
n‰ì
 = 
nöodes
 = 0;

1880 
su•e˘
 = 
	`imp‹t_sögÀ_öo_chunk
(
agno
, 
FINOBT
, 
Ω
, su•e˘, &
n‰ì
,

1881 &
nöodes
);

1883 
check_‰ìcou¡
:

1896 i‡(
n‰ì
 !
‰ìcou¡
) {

1897 
	`do_w¨n
(

1898 
	`_
("finobt ir_freecount/free mismatch, inode chunk %d/%u, freecount %dÇfree %d\n"),

1899 
agno
, 
öo
, 
‰ìcou¡
, 
n‰ì
);

1902 i‡(!
n‰ì
) {

1903 
	`do_w¨n
(

1904 
	`_
("föobàªc‹d wôhÇÿ‰ì inodes, inodêchunk %d/%u\n"), 
agno
, 
öo
);

1908 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
) &&

1909 
nöodes
 !
Ω
->
ú_u
.
•
.
ú_cou¡
) {

1910 
	`do_w¨n
(

1911 
	`_
("invalid inode count, inode chunk %d/%u, count %dÇinodes %d\n"),

1912 
agno
, 
öo
, 
Ω
->
ú_u
.
•
.
ú_cou¡
, 
nöodes
);

1915  
su•e˘
;

1916 
	}
}

1935 
	$sˇn_öobt
(

1936 
xfs_båì_block
 *
block
,

1937 
Àvñ
,

1938 
xfs_agblock_t
 
bno
,

1939 
xfs_agnumbî_t
 
agno
,

1940 
su•e˘
,

1941 
i§oŸ
,

1942 
__uöt32_t
 
magic
,

1943 *
¥iv
)

1945 
aghdr_˙ts
 *
ag˙ts
 = 
¥iv
;

1946 
i
;

1947 
numªcs
;

1948 
°©e
;

1949 
xfs_öobt_±r_t
 *
µ
;

1950 
xfs_öobt_ªc_t
 *
Ω
;

1951 
hdr_îr‹s
;

1952 
‰ìcou¡
;

1954 
hdr_îr‹s
 = 0;

1956 i‡(
	`be32_to_˝u
(
block
->
bb_magic
Ë!
magic
) {

1957 
	`do_w¨n
(
	`_
("bad magic # %#x in inobt block %d/%d\n"),

1958 
	`be32_to_˝u
(
block
->
bb_magic
), 
agno
, 
bno
);

1959 
hdr_îr‹s
++;

1960 
bad_öo_båì
 = 1;

1961 i‡(
su•e˘
)

1964 i‡(
	`be16_to_˝u
(
block
->
bb_Àvñ
Ë!
Àvñ
) {

1965 
	`do_w¨n
(
	`_
("expectedÜevel %d got %d in inobt block %d/%d\n"),

1966 
Àvñ
, 
	`be16_to_˝u
(
block
->
bb_Àvñ
), 
agno
, 
bno
);

1967 
hdr_îr‹s
++;

1968 
bad_öo_båì
 = 1;

1969 i‡(
su•e˘
)

1977 
°©e
 = 
	`gë_bm≠
(
agno
, 
bno
);

1978 
°©e
) {

1979 
XR_E_FS_MAP1
:

1980 
XR_E_UNKNOWN
:

1981 
XR_E_FREE1
:

1982 
XR_E_FREE
:

1983 
	`£t_bm≠
(
agno
, 
bno
, 
XR_E_FS_MAP
);

1986 
	`£t_bm≠
(
agno
, 
bno
, 
XR_E_MULT
);

1987 
	`do_w¨n
(

1988 
	`_
("inode btree block claimed (state %d),ágno %d, bno %d, suspect %d\n"),

1989 
°©e
, 
agno
, 
bno
, 
su•e˘
);

1992 
numªcs
 = 
	`be16_to_˝u
(
block
->
bb_numªcs
);

1997 i‡(
Àvñ
 == 0) {

2000 i‡(
numªcs
 > 
mp
->
m_öobt_mxr
[0]) {

2001 
numªcs
 = 
mp
->
m_öobt_mxr
[0];

2002 
hdr_îr‹s
++;

2004 i‡(
i§oŸ
 =0 && 
numªcs
 < 
mp
->
m_öobt_mƒ
[0]) {

2005 
numªcs
 = 
mp
->
m_öobt_mƒ
[0];

2006 
hdr_îr‹s
++;

2009 i‡(
hdr_îr‹s
) {

2010 
bad_öo_båì
 = 1;

2011 
	`do_w¨n
(
	`_
("dubious inode btree block header %d/%d\n"),

2012 
agno
, 
bno
);

2013 
su•e˘
++;

2016 
Ω
 = 
	`XFS_INOBT_REC_ADDR
(
mp
, 
block
, 1);

2026 
i
 = 0; i < 
numªcs
; i++) {

2027 
‰ìcou¡
 = 
	`ö‹ec_gë_‰ìcou¡
(
mp
, &
Ω
[
i
]);

2029 i‡(
magic
 =
XFS_IBT_MAGIC
 ||

2030 
magic
 =
XFS_IBT_CRC_MAGIC
) {

2031 
icou¡
 = 
XFS_INODES_PER_CHUNK
;

2037 i‡(
	`xfs_sb_vîsi⁄_has•¨£öodes
(&
mp
->
m_sb
))

2038 
icou¡
 = 
Ω
[
i
].
ú_u
.
•
.
ú_cou¡
;

2040 
ag˙ts
->
agicou¡
 +
icou¡
;

2041 
ag˙ts
->
agi‰ìcou¡
 +
‰ìcou¡
;

2042 
ag˙ts
->
i‰ìcou¡
 +
‰ìcou¡
;

2044 
su•e˘
 = 
	`sˇn_sögÀ_öo_chunk
(
agno
, &
Ω
[
i
],

2045 
su•e˘
);

2052 
ag˙ts
->
fibt‰ìcou¡
 +
‰ìcou¡
;

2054 
su•e˘
 = 
	`sˇn_sögÀ_föobt_chunk
(
agno
, &
Ω
[
i
],

2055 
su•e˘
);

2059 i‡(
su•e˘
)

2060 
bad_öo_båì
 = 1;

2068 i‡(
numªcs
 > 
mp
->
m_öobt_mxr
[1]) {

2069 
numªcs
 = 
mp
->
m_öobt_mxr
[1];

2070 
hdr_îr‹s
++;

2072 i‡(
i§oŸ
 =0 && 
numªcs
 < 
mp
->
m_öobt_mƒ
[1]) {

2073 
numªcs
 = 
mp
->
m_öobt_mƒ
[1];

2074 
hdr_îr‹s
++;

2077 
µ
 = 
	`XFS_INOBT_PTR_ADDR
(
mp
, 
block
, 1, mp->
m_öobt_mxr
[1]);

2084 i‡(
su•e˘
 && !
hdr_îr‹s
)

2085 
su•e˘
 = 0;

2087 i‡(
hdr_îr‹s
) {

2088 
bad_öo_båì
 = 1;

2089 i‡(
su•e˘
)

2091 
su•e˘
++;

2094 
i
 = 0; i < 
numªcs
; i++) {

2095 i‡(
	`be32_to_˝u
(
µ
[
i
]Ë!0 && 
	`vîify_agbno
(
mp
, 
agno
,

2096 
	`be32_to_˝u
(
µ
[
i
])))

2097 
	`sˇn_sbåì
(
	`be32_to_˝u
(
µ
[
i
]), 
Àvñ
, 
agno
,

2098 
su•e˘
, 
sˇn_öobt
, 0, 
magic
, 
¥iv
,

2099 &
xfs_öobt_buf_›s
);

2101 
	}
}

2104 
	$sˇn_‰ìli°
(

2105 
xfs_agf_t
 *
agf
,

2106 
aghdr_˙ts
 *
ag˙ts
)

2108 
xfs_buf_t
 *
agÊbuf
;

2109 
xfs_agnumbî_t
 
agno
;

2110 
xfs_agblock_t
 
bno
;

2111 
cou¡
;

2112 
i
;

2113 
__be32
 *
‰ìli°
;

2115 
agno
 = 
	`be32_to_˝u
(
agf
->
agf_£qno
);

2117 i‡(
	`XFS_SB_BLOCK
(
mp
Ë!
	`XFS_AGFL_BLOCK
(mp) &&

2118 
	`XFS_AGF_BLOCK
(
mp
Ë!
	`XFS_AGFL_BLOCK
(mp) &&

2119 
	`XFS_AGI_BLOCK
(
mp
Ë!
	`XFS_AGFL_BLOCK
(mp))

2120 
	`£t_bm≠
(
agno
, 
	`XFS_AGFL_BLOCK
(
mp
), 
XR_E_INUSE_FS
);

2122 i‡(
	`be32_to_˝u
(
agf
->
agf_Êcou¡
) == 0)

2125 
agÊbuf
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
,

2126 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGFL_DADDR
(mp)),

2127 
	`XFS_FSS_TO_BB
(
mp
, 1), 0, &
xfs_agÊ_buf_›s
);

2128 i‡(!
agÊbuf
) {

2129 
	`do_ab‹t
(
	`_
("ˇn'àªadágÊ block f‹ág %d\n"), 
agno
);

2132 i‡(
agÊbuf
->
b_îr‹
 =-
EFSBADCRC
)

2133 
	`do_w¨n
(
	`_
("agÊ ha†bad CRC f‹ág %d\n"), 
agno
);

2135 
‰ìli°
 = 
	`XFS_BUF_TO_AGFL_BNO
(
mp
, 
agÊbuf
);

2136 
i
 = 
	`be32_to_˝u
(
agf
->
agf_Êfú°
);

2138 i‡(
no_modify
) {

2140 i‡(
	`be32_to_˝u
(
agf
->
agf_Êfú°
Ë>
	`XFS_AGFL_SIZE
(
mp
) ||

2141 
	`be32_to_˝u
(
agf
->
agf_Êœ°
Ë>
	`XFS_AGFL_SIZE
(
mp
)) {

2142 
	`do_w¨n
(
	`_
("agf %d freelist blocks bad, skipping "

2143 "‰ìli° sˇn\n"), 
i
);

2148 
cou¡
 = 0;

2150 
bno
 = 
	`be32_to_˝u
(
‰ìli°
[
i
]);

2151 i‡(
	`vîify_agbno
(
mp
, 
agno
, 
bno
))

2152 
	`£t_bm≠
(
agno
, 
bno
, 
XR_E_FREE
);

2154 
	`do_w¨n
(
	`_
("badágbno %u inágfl,ágno %d\n"),

2155 
bno
, 
agno
);

2156 
cou¡
++;

2157 i‡(
i
 =
	`be32_to_˝u
(
agf
->
agf_Êœ°
))

2159 i‡(++
i
 =
	`XFS_AGFL_SIZE
(
mp
))

2160 
i
 = 0;

2162 i‡(
cou¡
 !
	`be32_to_˝u
(
agf
->
agf_Êcou¡
)) {

2163 
	`do_w¨n
(
	`_
("‰ìblk cou¡ %d !Êcou¡ %d i¿ag %d\n"), 
cou¡
,

2164 
	`be32_to_˝u
(
agf
->
agf_Êcou¡
), 
agno
);

2167 
ag˙ts
->
fdblocks
 +
cou¡
;

2169 
	`libxfs_putbuf
(
agÊbuf
);

2170 
	}
}

2173 
	$vÆid©e_agf
(

2174 
xfs_agf
 *
agf
,

2175 
xfs_agnumbî_t
 
agno
,

2176 
aghdr_˙ts
 *
ag˙ts
)

2178 
xfs_agblock_t
 
bno
;

2179 
__uöt32_t
 
magic
;

2181 
bno
 = 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_BNO
]);

2182 i‡(
bno
 !0 && 
	`vîify_agbno
(
mp
, 
agno
, bno)) {

2183 
magic
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
Ë? 
XFS_ABTB_CRC_MAGIC


2184 : 
XFS_ABTB_MAGIC
;

2185 
	`sˇn_sbåì
(
bno
, 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_BNO
]),

2186 
agno
, 0, 
sˇn_Ælocbt
, 1, 
magic
, 
ag˙ts
,

2187 &
xfs_Ælocbt_buf_›s
);

2189 
	`do_w¨n
(
	`_
("badágbno %u for btbnoÑoot,ágno %d\n"),

2190 
bno
, 
agno
);

2193 
bno
 = 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_CNT
]);

2194 i‡(
bno
 !0 && 
	`vîify_agbno
(
mp
, 
agno
, bno)) {

2195 
magic
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
Ë? 
XFS_ABTC_CRC_MAGIC


2196 : 
XFS_ABTC_MAGIC
;

2197 
	`sˇn_sbåì
(
bno
, 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_CNT
]),

2198 
agno
, 0, 
sˇn_Ælocbt
, 1, 
magic
, 
ag˙ts
,

2199 &
xfs_Ælocbt_buf_›s
);

2201 
	`do_w¨n
(
	`_
("badágbno %u for btbcntÑoot,ágno %d\n"),

2202 
bno
, 
agno
);

2205 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
)) {

2206 
rm≠_¥iv
 
¥iv
;

2208 
	`mem£t
(&
¥iv
.
high_key
, 0xFF, (priv.high_key));

2209 
¥iv
.
high_key
.
rm_blockcou¡
 = 0;

2210 
¥iv
.
ag˙ts
 =ágcnts;

2211 
¥iv
.
œ°_ªc
.
rm_ow√r
 = 
XFS_RMAP_OWN_UNKNOWN
;

2212 
¥iv
.
ƒ_blocks
 = 0;

2213 
bno
 = 
	`be32_to_˝u
(
agf
->
agf_roŸs
[
XFS_BTNUM_RMAP
]);

2214 i‡(
bno
 !0 && 
	`vîify_agbno
(
mp
, 
agno
, bno)) {

2215 
	`sˇn_sbåì
(
bno
,

2216 
	`be32_to_˝u
(
agf
->
agf_Àvñs
[
XFS_BTNUM_RMAP
]),

2217 
agno
, 0, 
sˇn_rm≠bt
, 1, 
XFS_RMAP_CRC_MAGIC
,

2218 &
¥iv
, &
xfs_rm≠bt_buf_›s
);

2219 i‡(
	`be32_to_˝u
(
agf
->
agf_rm≠_blocks
Ë!
¥iv
.
ƒ_blocks
)

2220 
	`do_w¨n
(
	`_
("badÑmapbt block count %u, saw %u\n"),

2221 
¥iv
.
ƒ_blocks
,

2222 
	`be32_to_˝u
(
agf
->
agf_rm≠_blocks
));

2224 
	`do_w¨n
(
	`_
("badágbno %u forÑmapbtÑoot,ágno %d\n"),

2225 
bno
, 
agno
);

2226 
	`rm≠_avoid_check
();

2230 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
)) {

2231 
bno
 = 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_roŸ
);

2232 i‡(
bno
 !0 && 
	`vîify_agbno
(
mp
, 
agno
, bno)) {

2233 
ªfc_¥iv
 
¥iv
;

2235 
	`mem£t
(&
¥iv
, 0, (priv));

2236 
	`sˇn_sbåì
(
bno
,

2237 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_Àvñ
),

2238 
agno
, 0, 
sˇn_ªfcbt
, 1, 
XFS_REFC_CRC_MAGIC
,

2239 &
¥iv
, &
xfs_ªfcou¡bt_buf_›s
);

2240 i‡(
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_blocks
Ë!
¥iv
.
ƒ_blocks
)

2241 
	`do_w¨n
(
	`_
("badÑefcountbt block count %u, saw %u\n"),

2242 
¥iv
.
ƒ_blocks
,

2243 
	`be32_to_˝u
(
agf
->
agf_ªfcou¡_blocks
));

2245 
	`do_w¨n
(
	`_
("badágbno %u forÑefcntbtÑoot,ágno %d\n"),

2246 
bno
, 
agno
);

2247 
	`ªfcou¡_avoid_check
();

2251 i‡(
	`be32_to_˝u
(
agf
->
agf_‰ìblks
Ë!
ag˙ts
->
agf‰ìblks
) {

2252 
	`do_w¨n
(
	`_
("agf_freeblks %u, counted %u inág %u\n"),

2253 
	`be32_to_˝u
(
agf
->
agf_‰ìblks
), 
ag˙ts
->
agf‰ìblks
, 
agno
);

2256 i‡(
	`be32_to_˝u
(
agf
->
agf_l⁄ge°
Ë!
ag˙ts
->
agÊ⁄ge°
) {

2257 
	`do_w¨n
(
	`_
("agf_longest %u, counted %u inág %u\n"),

2258 
	`be32_to_˝u
(
agf
->
agf_l⁄ge°
), 
ag˙ts
->
agÊ⁄ge°
, 
agno
);

2261 i‡(
	`xfs_sb_vîsi⁄_ha¶azysbcou¡
(&
mp
->
m_sb
) &&

2262 
	`be32_to_˝u
(
agf
->
agf_båìblks
Ë!
ag˙ts
->
agfbåìblks
) {

2263 
	`do_w¨n
(
	`_
("agf_båìblk†%u, cou¡ed %" 
PRIu64
 " inág %u\n"),

2264 
	`be32_to_˝u
(
agf
->
agf_båìblks
), 
ag˙ts
->
agfbåìblks
, 
agno
);

2267 
	}
}

2270 
	$vÆid©e_agi
(

2271 
xfs_agi
 *
agi
,

2272 
xfs_agnumbî_t
 
agno
,

2273 
aghdr_˙ts
 *
ag˙ts
)

2275 
xfs_agblock_t
 
bno
;

2276 
i
;

2277 
__uöt32_t
 
magic
;

2279 
bno
 = 
	`be32_to_˝u
(
agi
->
agi_roŸ
);

2280 i‡(
bno
 !0 && 
	`vîify_agbno
(
mp
, 
agno
, bno)) {

2281 
magic
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
Ë? 
XFS_IBT_CRC_MAGIC


2282 : 
XFS_IBT_MAGIC
;

2283 
	`sˇn_sbåì
(
bno
, 
	`be32_to_˝u
(
agi
->
agi_Àvñ
),

2284 
agno
, 0, 
sˇn_öobt
, 1, 
magic
, 
ag˙ts
,

2285 &
xfs_öobt_buf_›s
);

2287 
	`do_w¨n
(
	`_
("badágbno %u for inobtÑoot,ágno %d\n"),

2288 
	`be32_to_˝u
(
agi
->
agi_roŸ
), 
agno
);

2291 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
)) {

2292 
bno
 = 
	`be32_to_˝u
(
agi
->
agi_‰ì_roŸ
);

2293 i‡(
bno
 !0 && 
	`vîify_agbno
(
mp
, 
agno
, bno)) {

2294 
magic
 = 
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
) ?

2295 
XFS_FIBT_CRC_MAGIC
 : 
XFS_FIBT_MAGIC
;

2296 
	`sˇn_sbåì
(
bno
, 
	`be32_to_˝u
(
agi
->
agi_‰ì_Àvñ
),

2297 
agno
, 0, 
sˇn_öobt
, 1, 
magic
, 
ag˙ts
,

2298 &
xfs_öobt_buf_›s
);

2300 
	`do_w¨n
(
	`_
("badágbno %u for finobtÑoot,ágno %d\n"),

2301 
	`be32_to_˝u
(
agi
->
agi_‰ì_roŸ
), 
agno
);

2305 i‡(
	`be32_to_˝u
(
agi
->
agi_cou¡
Ë!
ag˙ts
->
agicou¡
) {

2306 
	`do_w¨n
(
	`_
("agi_count %u, counted %u inág %u\n"),

2307 
	`be32_to_˝u
(
agi
->
agi_cou¡
), 
ag˙ts
->
agicou¡
, 
agno
);

2310 i‡(
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
Ë!
ag˙ts
->
agi‰ìcou¡
) {

2311 
	`do_w¨n
(
	`_
("agi_freecount %u, counted %u inág %u\n"),

2312 
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
), 
ag˙ts
->
agi‰ìcou¡
, 
agno
);

2315 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
) &&

2316 
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
Ë!
ag˙ts
->
fibt‰ìcou¡
) {

2317 
	`do_w¨n
(
	`_
("agi_freecount %u, counted %u inág %u finobt\n"),

2318 
	`be32_to_˝u
(
agi
->
agi_‰ìcou¡
), 
ag˙ts
->
fibt‰ìcou¡
,

2319 
agno
);

2322 
i
 = 0; i < 
XFS_AGI_UNLINKED_BUCKETS
; i++) {

2323 
xfs_agöo_t
 
agöo
 = 
	`be32_to_˝u
(
agi
->
agi_u∆öked
[
i
]);

2325 i‡(
agöo
 !
NULLAGINO
) {

2326 
	`do_w¨n
(

2327 
	`_
("agòu∆öked buckë %d i†%u i¿ag %u (öode=%" 
PRIu64
 ")\n"),

2328 
i
, 
agöo
, 
agno
,

2329 
	`XFS_AGINO_TO_INO
(
mp
, 
agno
, 
agöo
));

2332 
	}
}

2338 
	$sˇn_ag
(

2339 
w‹k_queue_t
 *
wq
,

2340 
xfs_agnumbî_t
 
agno
,

2341 *
¨g
)

2343 
aghdr_˙ts
 *
ag˙ts
 = 
¨g
;

2344 
xfs_agf
 *
agf
;

2345 
xfs_buf
 *
agfbuf
 = 
NULL
;

2346 
agf_dúty
 = 0;

2347 
xfs_agi
 *
agi
;

2348 
xfs_buf
 *
agibuf
 = 
NULL
;

2349 
agi_dúty
 = 0;

2350 
xfs_sb
 *
sb
 = 
NULL
;

2351 
xfs_buf
 *
sbbuf
 = 
NULL
;

2352 
sb_dúty
 = 0;

2353 
°©us
;

2354 *
obj«me
 = 
NULL
;

2356 
sb
 = (
xfs_sb
 *)
	`ˇŒoc
(
	`BBTOB
(
	`XFS_FSS_TO_BB
(
mp
, 1)), 1);

2357 i‡(!
sb
) {

2358 
	`do_îr‹
(
	`_
("can'tállocate memory for superblock\n"));

2362 
sbbuf
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
, 
	`XFS_AG_DADDR
(mp, 
agno
, 
XFS_SB_DADDR
),

2363 
	`XFS_FSS_TO_BB
(
mp
, 1), 0, &
xfs_sb_buf_›s
);

2364 i‡(!
sbbuf
) {

2365 
obj«me
 = 
	`_
("root superblock");

2366 
out_‰ì_sb
;

2368 
	`libxfs_sb_‰om_disk
(
sb
, 
	`XFS_BUF_TO_SBP
(
sbbuf
));

2370 
agfbuf
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
,

2371 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGF_DADDR
(mp)),

2372 
	`XFS_FSS_TO_BB
(
mp
, 1), 0, &
xfs_agf_buf_›s
);

2373 i‡(!
agfbuf
) {

2374 
obj«me
 = 
	`_
("agf block");

2375 
out_‰ì_sbbuf
;

2377 
agf
 = 
	`XFS_BUF_TO_AGF
(
agfbuf
);

2379 
agibuf
 = 
	`libxfs_ªadbuf
(
mp
->
m_dev
,

2380 
	`XFS_AG_DADDR
(
mp
, 
agno
, 
	`XFS_AGI_DADDR
(mp)),

2381 
	`XFS_FSS_TO_BB
(
mp
, 1), 0, &
xfs_agi_buf_›s
);

2382 i‡(!
agibuf
) {

2383 
obj«me
 = 
	`_
("agi block");

2384 
out_‰ì_agfbuf
;

2386 
agi
 = 
	`XFS_BUF_TO_AGI
(
agibuf
);

2390 
°©us
 = 
	`vîify_£t_aghódî
(
mp
, 
sbbuf
, 
sb
, 
agf
, 
agi
, 
agno
);

2392 i‡(
°©us
 & 
XR_AG_SB_SEC
) {

2393 i‡(!
no_modify
)

2394 
sb_dúty
 = 1;

2400 
°©us
 &~
XR_AG_SB_SEC
;

2402 i‡(
°©us
 & 
XR_AG_SB
) {

2403 i‡(!
no_modify
) {

2404 
	`do_w¨n
(
	`_
("ª£àbad sb f‹ág %d\n"), 
agno
);

2405 
sb_dúty
 = 1;

2407 
	`do_w¨n
(
	`_
("wouldÑe£àbad sb f‹ág %d\n"), 
agno
);

2410 i‡(
°©us
 & 
XR_AG_AGF
) {

2411 i‡(!
no_modify
) {

2412 
	`do_w¨n
(
	`_
("ª£àbadág‡f‹ág %d\n"), 
agno
);

2413 
agf_dúty
 = 1;

2415 
	`do_w¨n
(
	`_
("wouldÑe£àbadág‡f‹ág %d\n"), 
agno
);

2418 i‡(
°©us
 & 
XR_AG_AGI
) {

2419 i‡(!
no_modify
) {

2420 
	`do_w¨n
(
	`_
("ª£àbadágòf‹ág %d\n"), 
agno
);

2421 
agi_dúty
 = 1;

2423 
	`do_w¨n
(
	`_
("wouldÑe£àbadágòf‹ág %d\n"), 
agno
);

2427 i‡(
°©us
 && 
no_modify
) {

2428 
	`do_w¨n
(
	`_
("bad uncorrectedágheader %d, skippingág...\n"),

2429 
agno
);

2430 
out_‰ì_agibuf
;

2433 
	`sˇn_‰ìli°
(
agf
, 
ag˙ts
);

2435 
	`vÆid©e_agf
(
agf
, 
agno
, 
ag˙ts
);

2436 
	`vÆid©e_agi
(
agi
, 
agno
, 
ag˙ts
);

2438 
	`ASSERT
(
agi_dúty
 =0 || (agi_dúty && !
no_modify
));

2439 
	`ASSERT
(
agf_dúty
 =0 || (agf_dúty && !
no_modify
));

2440 
	`ASSERT
(
sb_dúty
 =0 || (sb_dúty && !
no_modify
));

2450 i‡(!
no_modify
) {

2451 
agi_dúty
 +(
agibuf
->
b_îr‹
 =-
EFSBADCRC
);

2452 
agf_dúty
 +(
agfbuf
->
b_îr‹
 =-
EFSBADCRC
);

2453 
sb_dúty
 +(
sbbuf
->
b_îr‹
 =-
EFSBADCRC
);

2456 i‡(
agi_dúty
 && !
no_modify
)

2457 
	`libxfs_wrôebuf
(
agibuf
, 0);

2459 
	`libxfs_putbuf
(
agibuf
);

2461 i‡(
agf_dúty
 && !
no_modify
)

2462 
	`libxfs_wrôebuf
(
agfbuf
, 0);

2464 
	`libxfs_putbuf
(
agfbuf
);

2466 i‡(
sb_dúty
 && !
no_modify
) {

2467 i‡(
agno
 == 0)

2468 
	`mem˝y
(&
mp
->
m_sb
, 
sb
, (
xfs_sb_t
));

2469 
	`libxfs_sb_to_disk
(
	`XFS_BUF_TO_SBP
(
sbbuf
), 
sb
);

2470 
	`libxfs_wrôebuf
(
sbbuf
, 0);

2472 
	`libxfs_putbuf
(
sbbuf
);

2473 
	`‰ì
(
sb
);

2474 
	`PROG_RPT_INC
(
¥og_Ωt_d⁄e
[
agno
], 1);

2476 #ifde‡
XR_INODE_TRACE


2477 
	`¥öt_öode_li°
(
i
);

2481 
out_‰ì_agibuf
:

2482 
	`libxfs_putbuf
(
agibuf
);

2483 
out_‰ì_agfbuf
:

2484 
	`libxfs_putbuf
(
agfbuf
);

2485 
out_‰ì_sbbuf
:

2486 
	`libxfs_putbuf
(
sbbuf
);

2487 
out_‰ì_sb
:

2488 
	`‰ì
(
sb
);

2490 i‡(
obj«me
)

2491 
	`do_îr‹
(
	`_
("ˇn'àgë %†f‹ág %d\n"), 
obj«me
, 
agno
);

2492 
	}
}

2494 
	#SCAN_THREADS
 32

	)

2497 
	$sˇn_ags
(

2498 
xfs_mou¡
 *
mp
,

2499 
sˇn_thªads
)

2501 
aghdr_˙ts
 *
ag˙ts
;

2502 
__uöt64_t
 
fdblocks
 = 0;

2503 
__uöt64_t
 
icou¡
 = 0;

2504 
__uöt64_t
 
i‰ìcou¡
 = 0;

2505 
__uöt64_t
 
u£dblocks
 = 0;

2506 
xfs_agnumbî_t
 
i
;

2507 
w‹k_queue_t
 
wq
;

2509 
ag˙ts
 = 
	`mÆloc
(
mp
->
m_sb
.
sb_agcou¡
 * (*agcnts));

2510 i‡(!
ag˙ts
) {

2511 
	`do_ab‹t
(
	`_
("no memory forág header counts\n"));

2514 
	`mem£t
(
ag˙ts
, 0, 
mp
->
m_sb
.
sb_agcou¡
 * (*agcnts));

2516 
	`¸óã_w‹k_queue
(&
wq
, 
mp
, 
sˇn_thªads
);

2518 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++)

2519 
	`queue_w‹k
(&
wq
, 
sˇn_ag
, 
i
, &
ag˙ts
[i]);

2521 
	`de°roy_w‹k_queue
(&
wq
);

2524 
i
 = 0; i < 
mp
->
m_sb
.
sb_agcou¡
; i++) {

2525 
fdblocks
 +
ag˙ts
[
i
].fdblocks;

2526 
icou¡
 +
ag˙ts
[
i
].
agicou¡
;

2527 
i‰ìcou¡
 +
ag˙ts
[
i
].ifreecount;

2528 
u£dblocks
 +
ag˙ts
[
i
].usedblocks;

2531 
	`‰ì
(
ag˙ts
);

2536 i‡(
mp
->
m_sb
.
sb_icou¡
 !
icou¡
) {

2537 
	`do_w¨n
(
	`_
("sb_icou¡ %" 
PRIu64
 ", counted %" PRIu64 "\n"),

2538 
mp
->
m_sb
.
sb_icou¡
, 
icou¡
);

2541 i‡(
mp
->
m_sb
.
sb_i‰ì
 !
i‰ìcou¡
) {

2542 
	`do_w¨n
(
	`_
("sb_i‰ì %" 
PRIu64
 ", counted %" PRIu64 "\n"),

2543 
mp
->
m_sb
.
sb_i‰ì
, 
i‰ìcou¡
);

2546 i‡(
mp
->
m_sb
.
sb_fdblocks
 !
fdblocks
) {

2547 
	`do_w¨n
(
	`_
("sb_fdblock†%" 
PRIu64
 ", counted %" PRIu64 "\n"),

2548 
mp
->
m_sb
.
sb_fdblocks
, 
fdblocks
);

2551 i‡(
u£dblocks
 &&

2552 
u£dblocks
 !
mp
->
m_sb
.
sb_dblocks
 - 
fdblocks
) {

2553 
	`do_w¨n
(
	`_
("u£d block†%" 
PRIu64
 ", counted %" PRIu64 "\n"),

2554 
mp
->
m_sb
.
sb_dblocks
 - 
fdblocks
, 
u£dblocks
);

2556 
	}
}

	@repair/scan.h

18 #i‚de‡
_XR_SCAN_H


19 
	#_XR_SCAN_H


	)

21 
	gblkm≠
;

23 
sˇn_lbåì
(

24 
xfs_fsblock_t
 
roŸ
,

25 
∆evñs
,

26 (*
func
)(
xfs_båì_block
 *
block
,

27 
Àvñ
,

28 
ty≥
,

29 
whichf‹k
,

30 
xfs_fsblock_t
 
bno
,

31 
xfs_öo_t
 
öo
,

32 
xfs_rfsblock_t
 *
tŸ
,

33 
__uöt64_t
 *
√x
,

34 
blkm≠
 **
blkm≠p
,

35 
bm≠_curs‹_t
 *
bm_curs‹
,

36 
i§oŸ
,

37 
check_dups
,

38 *
dúty
,

39 
__uöt64_t
 
magic
),

40 
ty≥
,

41 
whichf‹k
,

42 
xfs_öo_t
 
öo
,

43 
xfs_rfsblock_t
 *
tŸ
,

44 
__uöt64_t
 *
√x
,

45 
blkm≠
 **
blkm≠p
,

46 
bm≠_curs‹_t
 *
bm_curs‹
,

47 
i§oŸ
,

48 
check_dups
,

49 
__uöt64_t
 
magic
,

50 c⁄° 
xfs_buf_›s
 *
›s
);

52 
	`sˇn_bm≠bt
(

53 
xfs_båì_block
 *
block
,

54 
Àvñ
,

55 
ty≥
,

56 
whichf‹k
,

57 
xfs_fsblock_t
 
bno
,

58 
xfs_öo_t
 
öo
,

59 
xfs_rfsblock_t
 *
tŸ
,

60 
__uöt64_t
 *
√x
,

61 
blkm≠
 **
blkm≠p
,

62 
bm≠_curs‹_t
 *
bm_curs‹
,

63 
i§oŸ
,

64 
check_dups
,

65 *
dúty
,

66 
__uöt64_t
 
magic
);

69 
	`sˇn_ags
(

70 
xfs_mou¡
 *
mp
,

71 
sˇn_thªads
);

	@repair/slab.c

20 
	~<libxfs.h
>

21 
	~"¶ab.h
"

23 #unde‡
SLAB_DEBUG


25 #ifde‡
SLAB_DEBUG


26 
	#dbg_¥ötf
(
f
, 
a
...Ëdÿ{
	`¥ötf
(f, ##á); 
	`fÊush
(
°dout
); } 0)

	)

28 
	#dbg_¥ötf
(
f
, 
a
...)

	)

54 
	#MIN_SLAB_NR
 4096

	)

56 
	#MAX_SLAB_SIZE
 (128 * 1048576)

	)

57 
	sxfs_¶ab_hdr
 {

58 
size_t
 
	msh_ƒ
;

59 
size_t
 
	msh_öu£
;

60 
xfs_¶ab_hdr
 *
	msh_√xt
;

64 
	sxfs_¶ab
 {

65 
size_t
 
	ms_ôem_sz
;

66 
size_t
 
	ms_ƒ_¶abs
;

67 
size_t
 
	ms_ƒ_ôems
;

68 
xfs_¶ab_hdr
 *
	ms_fú°
;

69 
xfs_¶ab_hdr
 *
	ms_œ°
;

79 
	sxfs_¶ab_hdr_curs‹
 {

80 
xfs_¶ab_hdr
 *
	mhdr
;

81 
size_t
 
	mloc
;

84 (*
	txfs_¶ab_com∑ª_‚
)(const *, const *);

86 
	sxfs_¶ab_curs‹
 {

87 
size_t
 
ƒ
;

88 
xfs_¶ab
 *
¶ab
;

89 
xfs_¶ab_hdr_curs‹
 *
œ°_hcur
;

90 
xfs_¶ab_com∑ª_‚
 
com∑ª_‚
;

91 
xfs_¶ab_hdr_curs‹
 
hcur
[0];

98 
	#MIN_BAG_SIZE
 4096

	)

99 
	sxfs_bag
 {

100 
size_t
 
bg_ƒ
;

101 
size_t
 
bg_öu£
;

102 **
bg_±rs
;

104 
	#BAG_SIZE
(
ƒ
Ë((
xfs_bag
Ë+ (“rË* (*)))

	)

105 
	#BAG_END
(
bag
Ë(&(bag)->
bg_±rs
[(bag)->
bg_ƒ
])

	)

111 
	$öô_¶ab
(

112 
xfs_¶ab
 **
¶ab
,

113 
size_t
 
ôem_size
)

115 
xfs_¶ab
 *
±r
;

117 
±r
 = 
	`ˇŒoc
(1, (
xfs_¶ab
));

118 i‡(!
±r
)

119  -
ENOMEM
;

120 
±r
->
s_ôem_sz
 = 
ôem_size
;

121 
±r
->
s_œ°
 = 
NULL
;

122 *
¶ab
 = 
±r
;

125 
	}
}

131 
	$‰ì_¶ab
(

132 
xfs_¶ab
 **
¶ab
)

134 
xfs_¶ab
 *
±r
;

135 
xfs_¶ab_hdr
 *
hdr
;

136 
xfs_¶ab_hdr
 *
nhdr
;

138 
±r
 = *
¶ab
;

139 i‡(!
±r
)

141 
hdr
 = 
±r
->
s_fú°
;

142 
hdr
) {

143 
nhdr
 = 
hdr
->
sh_√xt
;

144 
	`‰ì
(
hdr
);

145 
hdr
 = 
nhdr
;

147 
	`‰ì
(
±r
);

148 *
¶ab
 = 
NULL
;

149 
	}
}

152 
	$¶ab_±r
(

153 
xfs_¶ab
 *
¶ab
,

154 
xfs_¶ab_hdr
 *
hdr
,

155 
size_t
 
idx
)

157 *
p
;

159 
	`ASSERT
(
idx
 < 
hdr
->
sh_öu£
);

160 
p
 = (*)(
hdr
 + 1);

161 
p
 +
¶ab
->
s_ôem_sz
 * 
idx
;

162  
p
;

163 
	}
}

169 
	$¶ab_add
(

170 
xfs_¶ab
 *
¶ab
,

171 *
ôem
)

173 
xfs_¶ab_hdr
 *
hdr
;

174 *
p
;

176 
hdr
 = 
¶ab
->
s_œ°
;

177 i‡(!
hdr
 || hdr->
sh_öu£
 =hdr->
sh_ƒ
) {

178 
size_t
 
n
;

180 
n
 = (
hdr
 ? hdr->
sh_ƒ
 * 2 : 
MIN_SLAB_NR
);

181 i‡(
n
 * 
¶ab
->
s_ôem_sz
 > 
MAX_SLAB_SIZE
)

182 
n
 = 
MAX_SLAB_SIZE
 / 
¶ab
->
s_ôem_sz
;

183 
hdr
 = 
	`mÆloc
((
xfs_¶ab_hdr
Ë+ (
n
 * 
¶ab
->
s_ôem_sz
));

184 i‡(!
hdr
)

185  -
ENOMEM
;

186 
hdr
->
sh_ƒ
 = 
n
;

187 
hdr
->
sh_öu£
 = 0;

188 
hdr
->
sh_√xt
 = 
NULL
;

189 i‡(
¶ab
->
s_œ°
)

190 
¶ab
->
s_œ°
->
sh_√xt
 = 
hdr
;

191 i‡(!
¶ab
->
s_fú°
)

192 
¶ab
->
s_fú°
 = 
hdr
;

193 
¶ab
->
s_œ°
 = 
hdr
;

194 
¶ab
->
s_ƒ_¶abs
++;

196 
hdr
->
sh_öu£
++;

197 
p
 = 
	`¶ab_±r
(
¶ab
, 
hdr
, hdr->
sh_öu£
 - 1);

198 
	`mem˝y
(
p
, 
ôem
, 
¶ab
->
s_ôem_sz
);

199 
¶ab
->
s_ƒ_ôems
++;

202 
	}
}

204 
	~"thªads.h
"

206 
	sqs‹t_¶ab
 {

207 
xfs_¶ab
 *
	m¶ab
;

208 
xfs_¶ab_hdr
 *
	mhdr
;

209 (*
	mcom∑ª_‚
)(const *, const *);

213 
	$qs‹t_¶ab_hñ≥r
(

214 
w‹k_queue
 *
wq
,

215 
xfs_agnumbî_t
 
agno
,

216 *
¨g
)

218 
qs‹t_¶ab
 *
qs
 = 
¨g
;

220 
	`qs‹t
(
	`¶ab_±r
(
qs
->
¶ab
, qs->
hdr
, 0), qs->hdr->
sh_öu£
,

221 
qs
->
¶ab
->
s_ôem_sz
, qs->
com∑ª_‚
);

222 
	`‰ì
(
qs
);

223 
	}
}

230 
qs‹t_¶ab
(

231 
xfs_¶ab
 *
¶ab
,

232 (*
com∑ª_‚
)(const *, const *))

234 
w‹k_queue
 
wq
;

235 
xfs_¶ab_hdr
 *
hdr
;

236 
qs‹t_¶ab
 *
qs
;

242 i‡(
¶ab
->
s_ƒ_¶abs
 <= 4) {

243 
hdr
 = 
¶ab
->
s_fú°
;

244 
hdr
) {

245 
	`qs‹t
(
	`¶ab_±r
(
¶ab
, 
hdr
, 0), hdr->
sh_öu£
,

246 
¶ab
->
s_ôem_sz
, 
com∑ª_‚
);

247 
hdr
 = hdr->
sh_√xt
;

252 
	`¸óã_w‹k_queue
(&
wq
, 
NULL
, 
	`libxfs_≈roc
());

253 
hdr
 = 
¶ab
->
s_fú°
;

254 
hdr
) {

255 
qs
 = 
	`mÆloc
((
qs‹t_¶ab
));

256 
qs
->
¶ab
 = slab;

257 
qs
->
hdr
 = hdr;

258 
qs
->
com∑ª_‚
 = compare_fn;

259 
	`queue_w‹k
(&
wq
, 
qs‹t_¶ab_hñ≥r
, 0, 
qs
);

260 
hdr
 = hdr->
sh_√xt
;

262 
	`de°roy_w‹k_queue
(&
wq
);

263 
	}
}

273 
öô_¶ab_curs‹
(

274 
xfs_¶ab
 *
¶ab
,

275 (*
com∑ª_‚
)(const *, const *),

276 
xfs_¶ab_curs‹
 **
cur
)

278 
xfs_¶ab_curs‹
 *
c
;

279 
xfs_¶ab_hdr_curs‹
 *
hcur
;

280 
xfs_¶ab_hdr
 *
hdr
;

282 
c
 = 
	`mÆloc
((
xfs_¶ab_curs‹
) +

283 ((
xfs_¶ab_hdr_curs‹
Ë* 
¶ab
->
s_ƒ_¶abs
));

284 i‡(!
c
)

285  -
ENOMEM
;

286 
c
->
ƒ
 = 
¶ab
->
s_ƒ_¶abs
;

287 
c
->
¶ab
 = slab;

288 
c
->
com∑ª_‚
 = compare_fn;

289 
c
->
œ°_hcur
 = 
NULL
;

290 
hcur
 = (
xfs_¶ab_hdr_curs‹
 *)(
c
 + 1);

291 
hdr
 = 
¶ab
->
s_fú°
;

292 
hdr
) {

293 
hcur
->
hdr
 = hdr;

294 
hcur
->
loc
 = 0;

295 
hcur
++;

296 
hdr
 = hdr->
sh_√xt
;

298 *
cur
 = 
c
;

300 
	}
}

306 
	$‰ì_¶ab_curs‹
(

307 
xfs_¶ab_curs‹
 **
cur
)

309 i‡(!*
cur
)

311 
	`‰ì
(*
cur
);

312 *
cur
 = 
NULL
;

313 
	}
}

320 
	$≥ek_¶ab_curs‹
(

321 
xfs_¶ab_curs‹
 *
cur
)

323 
xfs_¶ab_hdr_curs‹
 *
hcur
;

324 *
p
 = 
NULL
;

325 *
q
;

326 
size_t
 
i
;

328 
cur
->
œ°_hcur
 = 
NULL
;

331 i‡(!
cur
->
com∑ª_‚
) {

332 i‡(!
cur
->
œ°_hcur
)

333 
cur
->
œ°_hcur
 = &cur->
hcur
[0];

334 
hcur
 = 
cur
->
œ°_hcur
;

335 
hcur
 < &
cur
->hcur[cur->
ƒ
] &&

336 
hcur
->
loc
 >hcur->
hdr
->
sh_öu£
)

337 
hcur
++;

338 i‡(
hcur
 =&
cur
->hcur[cur->
ƒ
])

339  
NULL
;

340 
p
 = 
	`¶ab_±r
(
cur
->
¶ab
, 
hcur
->
hdr
, hcur->
loc
);

341 
cur
->
œ°_hcur
 = 
hcur
;

342  
p
;

346 
i
 = 0, 
hcur
 = &
cur
->hcur[i]; i < cur->
ƒ
; i++, hcur++) {

347 i‡(
hcur
->
loc
 >hcur->
hdr
->
sh_öu£
)

349 
q
 = 
	`¶ab_±r
(
cur
->
¶ab
, 
hcur
->
hdr
, hcur->
loc
);

350 i‡(!
p
 || 
cur
->
	`com∑ª_‚
’, 
q
) > 0) {

351 
p
 = 
q
;

352 
cur
->
œ°_hcur
 = 
hcur
;

356  
p
;

357 
	}
}

363 
	$adv™˚_¶ab_curs‹
(

364 
xfs_¶ab_curs‹
 *
cur
)

366 
	`ASSERT
(
cur
->
œ°_hcur
);

367 
cur
->
œ°_hcur
->
loc
++;

368 
	}
}

374 
	$p›_¶ab_curs‹
(

375 
xfs_¶ab_curs‹
 *
cur
)

377 *
p
;

379 
p
 = 
	`≥ek_¶ab_curs‹
(
cur
);

380 i‡(
p
)

381 
	`adv™˚_¶ab_curs‹
(
cur
);

382  
p
;

383 
	}
}

388 
size_t


389 
	$¶ab_cou¡
(

390 
xfs_¶ab
 *
¶ab
)

392  
¶ab
->
s_ƒ_ôems
;

393 
	}
}

399 
	$öô_bag
(

400 
xfs_bag
 **
bag
)

402 
xfs_bag
 *
±r
;

404 
±r
 = 
	`ˇŒoc
(1, (
xfs_bag
));

405 i‡(!
±r
)

406  -
ENOMEM
;

407 
±r
->
bg_±rs
 = 
	`ˇŒoc
(
MIN_BAG_SIZE
, (*));

408 i‡(!
±r
->
bg_±rs
) {

409 
	`‰ì
(
±r
);

410  -
ENOMEM
;

412 
±r
->
bg_ƒ
 = 
MIN_BAG_SIZE
;

413 *
bag
 = 
±r
;

415 
	}
}

421 
	$‰ì_bag
(

422 
xfs_bag
 **
bag
)

424 
xfs_bag
 *
±r
;

426 
±r
 = *
bag
;

427 i‡(!
±r
)

429 
	`‰ì
(
±r
->
bg_±rs
);

430 
	`‰ì
(
±r
);

431 *
bag
 = 
NULL
;

432 
	}
}

438 
	$bag_add
(

439 
xfs_bag
 *
bag
,

440 *
±r
)

442 **
p
, **
x
;

444 
p
 = &
bag
->
bg_±rs
[bag->
bg_öu£
];

445 i‡(
p
 =
	`BAG_END
(
bag
)) {

447 
size_t
 
ƒ
;

449 
ƒ
 = 
bag
->
bg_ƒ
 * 2;

450 
x
 = 
	`ªÆloc
(
bag
->
bg_±rs
, 
ƒ
 * (*));

451 i‡(!
x
)

452  -
ENOMEM
;

453 
bag
->
bg_±rs
 = 
x
;

454 
	`mem£t
(
	`BAG_END
(
bag
), 0, bag->
bg_ƒ
 * (*));

455 
bag
->
bg_ƒ
 = 
ƒ
;

457 
bag
->
bg_±rs
[bag->
bg_öu£
] = 
±r
;

458 
bag
->
bg_öu£
++;

460 
	}
}

466 
	$bag_ªmove
(

467 
xfs_bag
 *
bag
,

468 
size_t
 
ƒ
)

470 
	`ASSERT
(
ƒ
 < 
bag
->
bg_öu£
);

471 
	`memmove
(&
bag
->
bg_±rs
[
ƒ
], &bag->bg_ptrs[nr + 1],

472 (
bag
->
bg_öu£
 - 
ƒ
) * (*));

473 
bag
->
bg_öu£
--;

475 
	}
}

480 
size_t


481 
	$bag_cou¡
(

482 
xfs_bag
 *
bag
)

484  
bag
->
bg_öu£
;

485 
	}
}

491 
	$bag_ôem
(

492 
xfs_bag
 *
bag
,

493 
size_t
 
ƒ
)

495 i‡(
ƒ
 >
bag
->
bg_öu£
)

496  
NULL
;

497  
bag
->
bg_±rs
[
ƒ
];

498 
	}
}

	@repair/slab.h

20 #i‚de‡
SLAB_H_


21 
	#SLAB_H_


	)

23 
	gxfs_¶ab
;

24 
	gxfs_¶ab_curs‹
;

26 
öô_¶ab
(
xfs_¶ab
 **, 
size_t
);

27 
‰ì_¶ab
(
xfs_¶ab
 **);

29 
¶ab_add
(
xfs_¶ab
 *, *);

30 
qs‹t_¶ab
(
xfs_¶ab
 *, (*)(const *, const *));

31 
size_t
 
	`¶ab_cou¡
(
xfs_¶ab
 *);

33 
	`öô_¶ab_curs‹
(
xfs_¶ab
 *,

34 (*)(c⁄° *, c⁄° *), 
xfs_¶ab_curs‹
 **);

35 
	`‰ì_¶ab_curs‹
(
xfs_¶ab_curs‹
 **);

37 *
	`≥ek_¶ab_curs‹
(
xfs_¶ab_curs‹
 *);

38 
	`adv™˚_¶ab_curs‹
(
xfs_¶ab_curs‹
 *);

39 *
	`p›_¶ab_curs‹
(
xfs_¶ab_curs‹
 *);

41 
xfs_bag
;

43 
	`öô_bag
(
xfs_bag
 **);

44 
	`‰ì_bag
(
xfs_bag
 **);

45 
	`bag_add
(
xfs_bag
 *, *);

46 
	`bag_ªmove
(
xfs_bag
 *, 
size_t
);

47 
size_t
 
	`bag_cou¡
(
xfs_bag
 *);

48 *
	`bag_ôem
(
xfs_bag
 *, 
size_t
);

50 
	#f‹óch_bag_±r
(
bag
, 
idx
, 
±r
) \

51 (
idx
Ë0, (
±r
Ë
	`bag_ôem
((
bag
), (idx)); \

52 (
idx
Ë< 
	`bag_cou¡
(
bag
); \

53 (
idx
)++, (
±r
Ë
	`bag_ôem
((
bag
), (idx)))

	)

55 
	#f‹óch_bag_±r_ªvî£
(
bag
, 
idx
, 
±r
) \

56 (
idx
Ë
	`bag_cou¡
(
bag
Ë- 1, (
±r
Ë
	`bag_ôem
((bag), (idx)); \

57 (
±r
Ë!
NULL
; \

58 (
idx
)--, (
±r
Ë
	`bag_ôem
((
bag
), (idx)))

	)

	@repair/threads.c

1 
	~"libxfs.h
"

2 
	~<±hªad.h
>

3 
	~<sig«l.h
>

4 
	~"thªads.h
"

5 
	~"îr_¥Ÿos.h
"

6 
	~"¥Ÿos.h
"

7 
	~"globÆs.h
"

10 
	$w‹kî_thªad
(*
¨g
)

12 
w‹k_queue_t
 *
wq
;

13 
w‹k_ôem_t
 *
wi
;

15 
wq
 = (
w‹k_queue_t
*)
¨g
;

22 
	`±hªad_muãx_lock
(&
wq
->
lock
);

27 
wq
->
√xt_ôem
 =
NULL
 && !wq->
ãrmö©e
) {

28 
	`ASSERT
(
wq
->
ôem_cou¡
 == 0);

29 
	`±hªad_c⁄d_waô
(&
wq
->
wakeup
, &wq->
lock
);

31 i‡(
wq
->
√xt_ôem
 =
NULL
 && wq->
ãrmö©e
) {

32 
	`±hªad_muãx_u∆ock
(&
wq
->
lock
);

39 
	`ASSERT
(
wq
->
ôem_cou¡
 > 0);

40 
wi
 = 
wq
->
√xt_ôem
;

41 
wq
->
√xt_ôem
 = 
wi
->
√xt
;

42 
wq
->
ôem_cou¡
--;

44 
	`±hªad_muãx_u∆ock
(&
wq
->
lock
);

46 (
wi
->
fun˘i⁄
)(wi->
queue
, wi->
agno
, wi->
¨g
);

47 
	`‰ì
(
wi
);

50  
NULL
;

51 
	}
}

54 
	$thªad_öô
()

56 
sig£t_t
 
blocked
;

61 
	`sigem±y£t
(&
blocked
);

62 
	`sigadd£t
(&
blocked
, 
SIGHUP
);

63 
	`sigadd£t
(&
blocked
, 
SIGALRM
);

64 
	`±hªad_sigmask
(
SIG_BLOCK
, &
blocked
, 
NULL
);

65 
	}
}

69 
	$¸óã_w‹k_queue
(

70 
w‹k_queue_t
 *
wq
,

71 
xfs_mou¡_t
 *
mp
,

72 
nw‹kîs
)

74 
îr
;

75 
i
;

77 
	`mem£t
(
wq
, 0, (
w‹k_queue_t
));

79 
	`±hªad_c⁄d_öô
(&
wq
->
wakeup
, 
NULL
);

80 
	`±hªad_muãx_öô
(&
wq
->
lock
, 
NULL
);

82 
wq
->
mp
 = mp;

83 
wq
->
thªad_cou¡
 = 
nw‹kîs
;

84 
wq
->
thªads
 = 
	`mÆloc
(
nw‹kîs
 * (
±hªad_t
));

85 
wq
->
ãrmö©e
 = 0;

87 
i
 = 0; i < 
nw‹kîs
; i++) {

88 
îr
 = 
	`±hªad_¸óã
(&
wq
->
thªads
[
i
], 
NULL
, 
w‹kî_thªad
, wq);

89 i‡(
îr
 != 0) {

90 
	`do_îr‹
(
	`_
("cannot create workerÅhreads,Érror = [%d] %s\n"),

91 
îr
, 
	`°ªº‹
(err));

95 
	}
}

98 
	$queue_w‹k
(

99 
w‹k_queue_t
 *
wq
,

100 
w‹k_func_t
 
func
,

101 
xfs_agnumbî_t
 
agno
,

102 *
¨g
)

104 
w‹k_ôem_t
 *
wi
;

106 
wi
 = (
w‹k_ôem_t
 *)
	`mÆloc
((work_item_t));

107 i‡(
wi
 =
NULL
)

108 
	`do_îr‹
(
	`_
("cannotállocate worker item,Érror = [%d] %s\n"),

109 
î∫o
, 
	`°ªº‹
(errno));

111 
wi
->
fun˘i⁄
 = 
func
;

112 
wi
->
agno
 =ágno;

113 
wi
->
¨g
 =árg;

114 
wi
->
queue
 = 
wq
;

115 
wi
->
√xt
 = 
NULL
;

120 
	`±hªad_muãx_lock
(&
wq
->
lock
);

121 i‡(
wq
->
√xt_ôem
 =
NULL
) {

122 
wq
->
√xt_ôem
 = 
wi
;

123 
	`ASSERT
(
wq
->
ôem_cou¡
 == 0);

124 
	`±hªad_c⁄d_sig«l
(&
wq
->
wakeup
);

126 
wq
->
œ°_ôem
->
√xt
 = 
wi
;

128 
wq
->
œ°_ôem
 = 
wi
;

129 
wq
->
ôem_cou¡
++;

130 
	`±hªad_muãx_u∆ock
(&
wq
->
lock
);

131 
	}
}

134 
	$de°roy_w‹k_queue
(

135 
w‹k_queue_t
 *
wq
)

137 
i
;

139 
	`±hªad_muãx_lock
(&
wq
->
lock
);

140 
wq
->
ãrmö©e
 = 1;

141 
	`±hªad_muãx_u∆ock
(&
wq
->
lock
);

143 
	`±hªad_c⁄d_brﬂdˇ°
(&
wq
->
wakeup
);

145 
i
 = 0; i < 
wq
->
thªad_cou¡
; i++)

146 
	`±hªad_joö
(
wq
->
thªads
[
i
], 
NULL
);

148 
	`‰ì
(
wq
->
thªads
);

149 
	`±hªad_muãx_de°roy
(&
wq
->
lock
);

150 
	`±hªad_c⁄d_de°roy
(&
wq
->
wakeup
);

151 
	}
}

	@repair/threads.h

1 #i‚def 
_XFS_REPAIR_THREADS_H_


2 
	#_XFS_REPAIR_THREADS_H_


	)

4 
thªad_öô
();

6 
	gw‹k_queue
;

8 
	tw‹k_func_t
(
	tw‹k_queue
 *, 
	txfs_agnumbî_t
, *);

10 
	sw‹k_ôem
 {

11 
w‹k_ôem
 *
	m√xt
;

12 
w‹k_func_t
 *
	mfun˘i⁄
;

13 
w‹k_queue
 *
	mqueue
;

14 
xfs_agnumbî_t
 
	magno
;

15 *
	m¨g
;

16 } 
	tw‹k_ôem_t
;

18 
	sw‹k_queue
 {

19 
w‹k_ôem_t
 *
	m√xt_ôem
;

20 
w‹k_ôem_t
 *
	mœ°_ôem
;

21 
	môem_cou¡
;

22 
	mthªad_cou¡
;

23 
±hªad_t
 *
	mthªads
;

24 
xfs_mou¡_t
 *
	mmp
;

25 
±hªad_muãx_t
 
	mlock
;

26 
±hªad_c⁄d_t
 
	mwakeup
;

27 
	mãrmö©e
;

28 } 
	tw‹k_queue_t
;

31 
¸óã_w‹k_queue
(

32 
w‹k_queue_t
 *
wq
,

33 
xfs_mou¡_t
 *
mp
,

34 
nw‹kîs
);

37 
queue_w‹k
(

38 
w‹k_queue_t
 *
wq
,

39 
w‹k_func_t
 
func
,

40 
xfs_agnumbî_t
 
agno
,

41 *
¨g
);

44 
de°roy_w‹k_queue
(

45 
w‹k_queue_t
 *
wq
);

	@repair/versions.c

19 
	~"libxfs.h
"

21 
	#EXTERN


	)

22 
	~"vîsi⁄s.h
"

23 #unde‡
EXTERN


24 
	~"îr_¥Ÿos.h
"

25 
	~"globÆs.h
"

28 
	$upd©e_sb_vîsi⁄
(
xfs_mou¡_t
 *
mp
)

30 
xfs_sb_t
 *
sb
;

32 
sb
 = &
mp
->
m_sb
;

34 i‡(
fs_©åibuãs
 && !
	`xfs_sb_vîsi⁄_haßâr
(
sb
)) {

35 
	`ASSERT
(
fs_©åibuãs_Ælowed
);

36 
	`xfs_sb_vîsi⁄_add©å
(
sb
);

39 i‡(
fs_©åibuãs2
 && !
	`xfs_sb_vîsi⁄_haßâr2
(
sb
)) {

40 
	`ASSERT
(
fs_©åibuãs2_Ælowed
);

41 
	`xfs_sb_vîsi⁄_add©å2
(
sb
);

45 i‡(!(
sb
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_NLINKBIT
))

46 
sb
->
sb_vîsi⁄num
 |
XFS_SB_VERSION_NLINKBIT
;

53 i‡(
fs_quŸas
) {

54 i‡(!
	`xfs_sb_vîsi⁄_hasquŸa
(
sb
)) {

55 
	`ASSERT
(
fs_quŸas_Ælowed
);

56 
	`xfs_sb_vîsi⁄_addquŸa
(
sb
);

62 i‡(
sb
->
sb_qÊags
 & ~
XFS_MOUNT_QUOTA_ALL
) {

68 
	`do_w¨n
(
	`_
("bogus quota flags 0x%x set in superblock"),

69 
sb
->
sb_qÊags
 & ~
XFS_MOUNT_QUOTA_ALL
);

71 
sb
->
sb_qÊags
 &
XFS_MOUNT_QUOTA_ALL
;

73 i‡(!
no_modify
)

74 
	`do_w¨n
(
	`_
(", bogus flags will be cleared\n"));

76 
	`do_w¨n
(
	`_
(", bogus flags would be cleared\n"));

79 
sb
->
sb_qÊags
 = 0;

81 i‡(
	`xfs_sb_vîsi⁄_hasquŸa
(
sb
)) {

82 
lo°_quŸas
 = 1;

83 
sb
->
sb_vîsi⁄num
 &~
XFS_SB_VERSION_QUOTABIT
;

87 i‡(!
fs_Æig√d_öodes
 && 
	`xfs_sb_vîsi⁄_haßlign
(
sb
))

88 
sb
->
sb_vîsi⁄num
 &~
XFS_SB_VERSION_ALIGNBIT
;

89 
	}
}

97 
	$∑r£_sb_vîsi⁄
(
xfs_sb_t
 *
sb
)

99 
issue_w¨nög
;

101 
fs_©åibuãs
 = 0;

102 
fs_©åibuãs2
 = 0;

103 
fs_öode_∆ök
 = 1;

104 
fs_quŸas
 = 0;

105 
fs_Æig√d_öodes
 = 0;

106 
fs_sb_„©uª_bôs
 = 0;

107 
fs_öo_Æignmít
 = 0;

108 
fs_has_extÊgbô
 = 0;

109 
have_uquŸöo
 = 0;

110 
have_gquŸöo
 = 0;

111 
have_pquŸöo
 = 0;

112 
issue_w¨nög
 = 0;

114 i‡(
sb
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_SHAREDBIT
) {

115 
	`do_w¨n
(
	`_
("Shared Version bit set. Not supported. Ever.\n"));

119 i‡(
sb
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_SHAREDBIT
) {

120 
	`do_w¨n
(
	`_
("Shared Version bit set. Not supported. Ever.\n"));

124 i‡(
sb
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_SHAREDBIT
) {

125 
	`do_w¨n
(
	`_
("Shared Version bit set. Not supported. Ever.\n"));

133 i‡(
	`xfs_sb_vîsi⁄_ha£xtÊgbô
(
sb
)) {

134 
fs_has_extÊgbô
 = 1;

135 i‡(!
fs_has_extÊgbô_Ælowed
) {

136 
issue_w¨nög
 = 1;

137 
	`do_w¨n
(

138 
	`_
("This filesystem has uninitializedÉxtent flags.\n"));

142 i‡(
issue_w¨nög
) {

143 
	`do_w¨n
(

144 
	`_
("This filesystem uses feature(s)Çot yet supported inÅhisÑelease.\n"

149 i‡(!
	`xfs_sb_good_vîsi⁄
(
sb
)) {

150 
	`do_w¨n
(
	`_
("WARNING: unknown superblock version %d\n"),

151 
	`XFS_SB_VERSION_NUM
(
sb
));

152 
	`do_w¨n
(

153 
	`_
("This filesystem contains featuresÇot understood byÅhisÖrogram.\n"));

157 i‡(
	`XFS_SB_VERSION_NUM
(
sb
Ë>
XFS_SB_VERSION_4
) {

158 i‡(!
fs_sb_„©uª_bôs_Ælowed
) {

159 i‡(!
no_modify
) {

160 
	`do_w¨n
(

161 
	`_
("WARNING: you have disallowed superblock-feature-bits-allowed\n"

165 
	`do_w¨n
(

166 
	`_
("WARNING: you have disallowed superblock-feature-bits-allowed\n"

172 
fs_sb_„©uª_bôs
 = 1;

177 i‡(
	`XFS_SB_VERSION_NUM
(
sb
Ë>
XFS_SB_VERSION_5
 &&

178 (
	`xfs_sb_has_com∑t_„©uª
(
sb
, 
XFS_SB_FEAT_COMPAT_UNKNOWN
) ||

179 
	`xfs_sb_has_ro_com∑t_„©uª
(
sb
, 
XFS_SB_FEAT_RO_COMPAT_UNKNOWN
) ||

180 
	`xfs_sb_has_öcom∑t_„©uª
(
sb
, 
XFS_SB_FEAT_INCOMPAT_UNKNOWN
))) {

181 
	`do_w¨n
(

182 
	`_
("Superblock has unknown compat/rocompat/incompat features (0x%x/0x%x/0x%x).\n"

184 
sb
->
sb_„©uªs_com∑t
 & 
XFS_SB_FEAT_COMPAT_UNKNOWN
,

185 
sb
->
sb_„©uªs_ro_com∑t
 & 
XFS_SB_FEAT_RO_COMPAT_UNKNOWN
,

186 
sb
->
sb_„©uªs_öcom∑t
 & 
XFS_SB_FEAT_INCOMPAT_UNKNOWN
);

190 i‡(
	`xfs_sb_vîsi⁄_haßâr
(
sb
)) {

191 i‡(!
fs_©åibuãs_Ælowed
) {

192 i‡(!
no_modify
) {

193 
	`do_w¨n
(

194 
	`_
("WARNING: you have disallowedáttributes butÅhis filesystem\n"

198 
	`do_w¨n
(

199 
	`_
("WARNING: you have disallowedáttributes butÅhis filesystem\n"

204 
fs_©åibuãs
 = 1;

208 i‡(
	`xfs_sb_vîsi⁄_haßâr2
(
sb
)) {

209 i‡(!
fs_©åibuãs2_Ælowed
) {

210 i‡(!
no_modify
) {

211 
	`do_w¨n
(

212 
	`_
("WARNING: you have disallowedáttr2áttributes butÅhis filesystem\n"

216 
	`do_w¨n
(

217 
	`_
("WARNING: you have disallowedáttr2áttributes butÅhis filesystem\n"

222 
fs_©åibuãs2
 = 1;

226 i‡(!(
sb
->
sb_vîsi⁄num
 & 
XFS_SB_VERSION_NLINKBIT
)) {

227 i‡(!
no_modify
) {

228 
	`do_w¨n
(

229 
	`_
("WARNING: you haveá V1 inode filesystem. It will be convertedÅoá\n"

233 
	`do_w¨n
(

234 
	`_
("WARNING: you haveá V1 inode filesystem. It would be convertedÅoá\n"

240 i‡(
	`xfs_sb_vîsi⁄_hasquŸa
(
sb
)) {

241 i‡(!
fs_quŸas_Ælowed
) {

242 i‡(!
no_modify
) {

243 
	`do_w¨n
(

244 
	`_
("WARNING: you have disallowed quotas butÅhis filesystem\n"

248 
	`do_w¨n
(

249 
	`_
("WARNING: you have disallowed quotas butÅhis filesystem\n"

254 
fs_quŸas
 = 1;

256 i‡(
sb
->
sb_uquŸöo
 != 0 &&

257 
sb
->
sb_uquŸöo
 !
NULLFSINO
)

258 
have_uquŸöo
 = 1;

260 i‡(
sb
->
sb_gquŸöo
 != 0 &&

261 
sb
->
sb_gquŸöo
 !
NULLFSINO
)

262 
have_gquŸöo
 = 1;

264 i‡(
sb
->
sb_pquŸöo
 != 0 &&

265 
sb
->
sb_pquŸöo
 !
NULLFSINO
)

266 
have_pquŸöo
 = 1;

270 i‡(
	`xfs_sb_vîsi⁄_haßlign
(
sb
)) {

271 i‡(
fs_Æig√d_öodes_Ælowed
) {

272 
fs_Æig√d_öodes
 = 1;

273 
fs_öo_Æignmít
 = 
sb
->
sb_öﬂlignmt
;

275 i‡(!
no_modify
) {

276 
	`do_w¨n
(

277 
	`_
("WARNING: you have disallowedáligned inodes butÅhis filesystem\n"

281 
	`do_w¨n
(

282 
	`_
("WARNING: you have disallowedáligned inodes butÅhis filesystem\n"

292 
fs_max_fûe_off£t
 = 0x7fffffffffffffffLL >> 
sb
->
sb_blocklog
;

295 
	}
}

	@repair/versions.h

19 #i‚de‡
_XR_VERSIONS_H


20 
	#_XR_VERSIONS_H


	)

22 #i‚de‡
EXTERN


23 
	#EXTERN
 

	)

43 
EXTERN
 
fs_©åibuãs_Ælowed
;

44 
EXTERN
 
	gfs_©åibuãs2_Ælowed
;

45 
EXTERN
 
	gfs_quŸas_Ælowed
;

46 
EXTERN
 
	gfs_Æig√d_öodes_Ælowed
;

47 
EXTERN
 
	gfs_sb_„©uª_bôs_Ælowed
;

48 
EXTERN
 
	gfs_has_extÊgbô_Ælowed
;

49 
EXTERN
 
	gfs_sh¨ed_Ælowed
;

56 
EXTERN
 
	gfs_©åibuãs
;

57 
EXTERN
 
	gfs_©åibuãs2
;

58 
EXTERN
 
	gfs_öode_∆ök
;

59 
EXTERN
 
	gfs_quŸas
;

60 
EXTERN
 
	gfs_Æig√d_öodes
;

61 
EXTERN
 
	gfs_sb_„©uª_bôs
;

62 
EXTERN
 
	gfs_has_extÊgbô
;

63 
EXTERN
 
	gfs_sh¨ed
;

69 
EXTERN
 
xfs_exéí_t
 
	gfs_öo_Æignmít
;

75 
upd©e_sb_vîsi⁄
(
xfs_mou¡_t
 *
mp
);

80 
∑r£_sb_vîsi⁄
(
xfs_sb_t
 *
sb
);

	@repair/xfs_repair.c

19 
	~"libxfs.h
"

20 
	~"libxlog.h
"

21 
	~<sys/ªsour˚.h
>

22 
	~"xfs_mu…idisk.h
"

23 
	~"avl.h
"

24 
	~"avl64.h
"

25 
	~"globÆs.h
"

26 
	~"vîsi⁄s.h
"

27 
	~"aghódî.h
"

28 
	~"¥Ÿos.h
"

29 
	~"öc‹e.h
"

30 
	~"îr_¥Ÿos.h
"

31 
	~"¥e„tch.h
"

32 
	~"thªads.h
"

33 
	~"¥ogªss.h
"

34 
	~"döode.h
"

35 
	~"¶ab.h
"

36 
	~"rm≠.h
"

38 
	#rounddown
(
x
, 
y
Ë(((x)/(y))*(y))

	)

40 
	#XR_MAX_SECT_SIZE
 (64 * 1024)

	)

49 *
	go_›ts
[] = {

50 
	#ASSUME_XFS
 0

	)

52 
	#PRE_65_BETA
 1

	)

54 
	#IHASH_SIZE
 2

	)

56 
	#BHASH_SIZE
 3

	)

58 
	#AG_STRIDE
 4

	)

60 
	#FORCE_GEO
 5

	)

62 
	#PHASE2_THREADS
 6

	)

64 
NULL


70 *
	gc_›ts
[] = {

71 
	#CONVERT_LAZY_COUNT
 0

	)

73 
NULL


77 
	gbhash_›ti⁄_u£d
;

78 
	gmax_mem_•ecifõd
;

79 
	gpha£2_thªads
 = 32;

82 
	$ußge
()

84 
	`do_w¨n
(
	`_
(

100 " -V Rï‹t†vîsi⁄ándÉxôs.\n"), 
¥og«me
);

101 
	`exô
(1);

102 
	}
}

105 
	$îr_°rög
(
îr_code
)

107 *
îr_mesßge
[
XR_BAD_ERR_CODE
];

108 
d⁄e
;

110 i‡(!
d⁄e
) {

111 
îr_mesßge
[
XR_OK
] = 
	`_
("noÉrror");

112 
îr_mesßge
[
XR_BAD_MAGIC
] = 
	`_
("bad magicÇumber");

113 
îr_mesßge
[
XR_BAD_BLOCKSIZE
] = 
	`_
("bad blocksize field");

114 
îr_mesßge
[
XR_BAD_BLOCKLOG
] = 
	`_
("bad blocksizeÜog field");

115 
îr_mesßge
[
XR_BAD_VERSION
] = 
	`_
("bad or unsupported version");

116 
îr_mesßge
[
XR_BAD_INPROGRESS
] =

117 
	`_
("filesystem mkfs-in-progress bit set");

118 
îr_mesßge
[
XR_BAD_FS_SIZE_DATA
] =

119 
	`_
("inconsistent filesystem geometry information");

120 
îr_mesßge
[
XR_BAD_INO_SIZE_DATA
] =

121 
	`_
("bad inode size or inconsistent withÇumber of inodes/block"),

122 
îr_mesßge
[
XR_BAD_SECT_SIZE_DATA
] = 
	`_
("bad sector size");

123 
îr_mesßge
[
XR_AGF_GEO_MISMATCH
] =

124 
	`_
("AGF geometry info conflicts with filesystem geometry");

125 
îr_mesßge
[
XR_AGI_GEO_MISMATCH
] =

126 
	`_
("AGI geometry info conflicts with filesystem geometry");

127 
îr_mesßge
[
XR_SB_GEO_MISMATCH
] =

128 
	`_
("AG superblock geometry info conflicts with filesystem geometry");

129 
îr_mesßge
[
XR_EOF
] = 
	`_
("attemptedÅoÖerform I/O beyond EOF");

130 
îr_mesßge
[
XR_BAD_RT_GEO_DATA
] =

131 
	`_
("inconsistent filesystem geometry inÑealtime filesystem component");

132 
îr_mesßge
[
XR_BAD_INO_MAX_PCT
] =

133 
	`_
("maximum indicatedÖercentage of inodes > 100%");

134 
îr_mesßge
[
XR_BAD_INO_ALIGN
] =

135 
	`_
("inconsistent inodeálignment value");

136 
îr_mesßge
[
XR_INSUFF_SEC_SB
] =

137 
	`_
("notÉnough secondary superblocks with matching geometry");

138 
îr_mesßge
[
XR_BAD_SB_UNIT
] =

139 
	`_
("bad stripe unit in superblock");

140 
îr_mesßge
[
XR_BAD_SB_WIDTH
] =

141 
	`_
("bad stripe width in superblock");

142 
îr_mesßge
[
XR_BAD_SVN
] =

143 
	`_
("bad shared versionÇumber in superblock");

144 
îr_mesßge
[
XR_BAD_CRC
] =

145 
	`_
("bad CRC in superblock");

146 
îr_mesßge
[
XR_BAD_DIR_SIZE_DATA
] =

147 
	`_
("inconsistent directory geometry information");

148 
d⁄e
 = 1;

151 i‡(
îr_code
 < 
XR_OK
 ||Éº_codê>
XR_BAD_ERR_CODE
)

152 
	`do_ab‹t
(
	`_
("badÉº‹ codê- %d\n"), 
îr_code
);

154 (
îr_mesßge
[
îr_code
]);

155 
	}
}

158 
	$novÆ
(
›t
, *
tbl
[], 
idx
)

160 
	`do_w¨n
(
	`_
("-%¯%†›ti⁄ c™nŸ havê®vÆue\n"), 
›t
, 
tbl
[
idx
]);

161 
	`ußge
();

162 
	}
}

165 
	$ª•ec
(
›t
, *
tbl
[], 
idx
)

167 
	`do_w¨n
("-%¯", 
›t
);

168 i‡(
tbl
)

169 
	`do_w¨n
("%†", 
tbl
[
idx
]);

170 
	`do_w¨n
(
	`_
("optionÑespecified\n"));

171 
	`ußge
();

172 
	}
}

175 
	$unknown
(
›t
, *
s
)

177 
	`do_w¨n
(
	`_
("unknow¿›ti⁄ -%¯%s\n"), 
›t
, 
s
);

178 
	`ußge
();

179 
	}
}

185 
	$¥o˚ss_¨gs
(
¨gc
, **
¨gv
)

187 *
p
;

188 
c
;

190 
log_•ec
 = 0;

191 
fs_is_dúty
 = 0;

192 
vîbo£
 = 0;

193 
no_modify
 = 0;

194 
d™gîou¶y
 = 0;

195 
iß_fûe
 = 0;

196 
z≠_log
 = 0;

197 
dumpc‹e
 = 0;

198 
fuŒ_öo_ex_d©a
 = 0;

199 
dñëe_©å_ok
 = 1;

200 
f‹˚_geo
 = 0;

201 
assume_xfs
 = 0;

202 
c›õd_sunô
 = 0;

203 
sb_öﬂlignmt
 = 0;

204 
sb_unô
 = 0;

205 
sb_width
 = 0;

206 
fs_©åibuãs_Ælowed
 = 1;

207 
fs_©åibuãs2_Ælowed
 = 1;

208 
fs_quŸas_Ælowed
 = 1;

209 
fs_Æig√d_öodes_Ælowed
 = 1;

210 
fs_sb_„©uª_bôs_Ælowed
 = 1;

211 
fs_has_extÊgbô_Ælowed
 = 1;

212 
¥e_65_bëa
 = 0;

213 
fs_sh¨ed_Ælowed
 = 1;

214 
ag_°ride
 = 0;

215 
thªad_cou¡
 = 1;

216 
ªp‹t_öãrvÆ
 = 
PROG_RPT_DEFAULT
;

222 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "c:o:Ê:m:r:LnDvVdPt:")Ë!
EOF
) {

223 
c
) {

225 
dumpc‹e
 = 1;

228 
p
 = 
›èrg
;

229 *
p
 != '\0') {

230 *
vÆ
;

232 
	`gësub›t
(&
p
, 
o_›ts
, &
vÆ
)) {

233 
ASSUME_XFS
:

234 i‡(
vÆ
)

235 
	`novÆ
('o', 
o_›ts
, 
ASSUME_XFS
);

236 i‡(
assume_xfs
)

237 
	`ª•ec
('o', 
o_›ts
, 
ASSUME_XFS
);

238 
assume_xfs
 = 1;

240 
PRE_65_BETA
:

241 i‡(
vÆ
)

242 
	`novÆ
('o', 
o_›ts
, 
PRE_65_BETA
);

243 i‡(
¥e_65_bëa
)

244 
	`ª•ec
('o', 
o_›ts
,

245 
PRE_65_BETA
);

246 
¥e_65_bëa
 = 1;

248 
IHASH_SIZE
:

249 
	`do_w¨n
(

250 
	`_
("-o ihash option has beenÑemovedánd will be ignored\n"));

252 
BHASH_SIZE
:

253 i‡(
max_mem_•ecifõd
)

254 
	`do_ab‹t
(

255 
	`_
("-o bhash option cannot be used with -m option\n"));

256 
libxfs_bhash_size
 = ()
	`°πﬁ
(
vÆ
, 
NULL
, 0);

257 
bhash_›ti⁄_u£d
 = 1;

259 
AG_STRIDE
:

260 
ag_°ride
 = ()
	`°πﬁ
(
vÆ
, 
NULL
, 0);

262 
FORCE_GEO
:

263 i‡(
vÆ
)

264 
	`novÆ
('o', 
o_›ts
, 
FORCE_GEO
);

265 i‡(
f‹˚_geo
)

266 
	`ª•ec
('o', 
o_›ts
, 
FORCE_GEO
);

267 
f‹˚_geo
 = 1;

269 
PHASE2_THREADS
:

270 
pha£2_thªads
 = ()
	`°πﬁ
(
vÆ
, 
NULL
, 0);

273 
	`unknown
('o', 
vÆ
);

279 
p
 = 
›èrg
;

280 *
p
) {

281 *
vÆ
;

283 
	`gësub›t
(&
p
, 
c_›ts
, &
vÆ
)) {

284 
CONVERT_LAZY_COUNT
:

285 
œzy_cou¡
 = ()
	`°πﬁ
(
vÆ
, 
NULL
, 0);

286 
c⁄vît_œzy_cou¡
 = 1;

289 
	`unknown
('c', 
vÆ
);

295 
log_«me
 = 
›èrg
;

296 
log_•ec
 = 1;

299 
π_«me
 = 
›èrg
;

300 
π_•ec
 = 1;

303 
iß_fûe
 = 1;

306 i‡(
bhash_›ti⁄_u£d
)

307 
	`do_ab‹t
(
	`_
("-m option cannot be used with "

309 
max_mem_•ecifõd
 = 
	`°πﬁ
(
›èrg
, 
NULL
, 0);

312 
z≠_log
 = 1;

315 
no_modify
 = 1;

318 
d™gîou¶y
 = 1;

321 
vîbo£
++;

324 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
¥og«me
, 
VERSION
);

325 
	`exô
(0);

327 
do_¥e„tch
 = 0;

330 
ªp‹t_öãrvÆ
 = ()
	`°πﬁ
(
›èrg
, 
NULL
, 0);

333 
	`ußge
();

337 i‡(
¨gc
 - 
›töd
 != 1)

338 
	`ußge
();

340 i‡((
fs_«me
 = 
¨gv
[
›töd
]Ë=
NULL
)

341 
	`ußge
();

342 
	}
}

344 
__©åibuã__
((
n‹ëu∫
))

345 
	$do_îr‹
(c⁄° *
msg
, ...)

347 
va_li°
 
¨gs
;

349 
	`Ârötf
(
°dîr
, 
	`_
("\nfatalÉrror -- "));

351 
	`va_°¨t
(
¨gs
, 
msg
);

352 
	`vÂrötf
(
°dîr
, 
msg
, 
¨gs
);

353 i‡(
dumpc‹e
)

354 
	`ab‹t
();

355 
	`exô
(1);

356 
	}
}

362 
__©åibuã__
((
n‹ëu∫
))

363 
	$do_ab‹t
(c⁄° *
msg
, ...)

365 
va_li°
 
¨gs
;

367 
	`va_°¨t
(
¨gs
, 
msg
);

368 
	`vÂrötf
(
°dîr
, 
msg
, 
¨gs
);

369 i‡(
dumpc‹e
)

370 
	`ab‹t
();

371 
	`exô
(1);

372 
	}
}

375 
	$do_w¨n
(c⁄° *
msg
, ...)

377 
va_li°
 
¨gs
;

379 
fs_is_dúty
 = 1;

381 
	`va_°¨t
(
¨gs
, 
msg
);

382 
	`vÂrötf
(
°dîr
, 
msg
, 
¨gs
);

383 
	`va_íd
(
¨gs
);

384 
	}
}

389 
	$do_log
(c⁄° *
msg
, ...)

391 
va_li°
 
¨gs
;

393 
	`va_°¨t
(
¨gs
, 
msg
);

394 
	`vÂrötf
(
°dîr
, 
msg
, 
¨gs
);

395 
	`va_íd
(
¨gs
);

396 
	}
}

399 
	$ˇlc_mkfs
(
xfs_mou¡_t
 *
mp
)

401 
xfs_agblock_t
 
föo_bno
;

402 
do_öﬂlign
;

404 
do_öﬂlign
 = 
mp
->
m_söﬂlign
;

418 
bnobt_roŸ
 = 
	`howm™y
(4 * 
mp
->
m_sb
.
sb_£˘size
, mp->m_sb.
sb_blocksize
);

419 
b˙tbt_roŸ
 = 
bnobt_roŸ
 + 1;

420 
öobt_roŸ
 = 
bnobt_roŸ
 + 2;

421 
föo_bno
 = 
öobt_roŸ
 + (2 * 
	`mö
(2, 
mp
->
m_ag_maxÀvñs
)) + 1;

422 i‡(
	`xfs_sb_vîsi⁄_hasföobt
(&
mp
->
m_sb
))

423 
föo_bno
++;

424 i‡(
	`xfs_sb_vîsi⁄_ha§m≠bt
(&
mp
->
m_sb
)) {

425 
föo_bno
 +
	`mö
(2, 
mp
->
m_rm≠_maxÀvñs
);

426 
föo_bno
++;

428 i‡(
	`xfs_sb_vîsi⁄_ha§eÊök
(&
mp
->
m_sb
))

429 
föo_bno
++;

439 i‡(
mp
->
m_sb
.
sb_log°¨t
 &&

440 
	`XFS_FSB_TO_AGNO
(
mp
, mp->
m_sb
.
sb_log°¨t
) == 0) {

445 
föo_bno
 +
mp
->
m_sb
.
sb_logblocks
;

451 i‡(
	`xfs_sb_vîsi⁄_hasdÆign
(&
mp
->
m_sb
Ë&& 
do_öﬂlign
) {

452 
fú°_¥óŒoc_öo
 = 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
	`roundup
(
föo_bno
,

453 
mp
->
m_sb
.
sb_unô
), 0);

454 } i‡(
	`xfs_sb_vîsi⁄_haßlign
(&
mp
->
m_sb
) &&

455 
mp
->
m_sb
.
sb_öﬂlignmt
 > 1) {

456 
fú°_¥óŒoc_öo
 = 
	`XFS_OFFBNO_TO_AGINO
(
mp
,

457 
	`roundup
(
föo_bno
,

458 
mp
->
m_sb
.
sb_öﬂlignmt
),

461 
fú°_¥óŒoc_öo
 = 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
föo_bno
, 0);

464 
	`ASSERT
(
mp
->
m_üŒoc_blks
 > 0);

466 i‡(
mp
->
m_üŒoc_blks
 > 1)

467 
œ°_¥óŒoc_öo
 = 
fú°_¥óŒoc_öo
 + 
XFS_INODES_PER_CHUNK
;

469 
œ°_¥óŒoc_öo
 = 
	`XFS_OFFBNO_TO_AGINO
(
mp
, 
föo_bno
 + 1, 0);

474 i‡(
mp
->
m_sb
.
sb_roŸöo
 !
fú°_¥óŒoc_öo
) {

475 
	`do_w¨n
(

476 
	`_
("sbÑoŸ inodêvÆuê%" 
PRIu64
 " %sinconsistent with calculated value %u\n"),

477 
mp
->
m_sb
.
sb_roŸöo
,

478 (
mp
->
m_sb
.
sb_roŸöo
 =
NULLFSINO
 ? "(NULLFSINO) ":""),

479 
fú°_¥óŒoc_öo
);

481 i‡(!
no_modify
)

482 
	`do_w¨n
(

483 
	`_
("resetting superblockÑoot inodeÖointerÅo %u\n"),

484 
fú°_¥óŒoc_öo
);

486 
	`do_w¨n
(

487 
	`_
("wouldÑeset superblockÑoot inodeÖointerÅo %u\n"),

488 
fú°_¥óŒoc_öo
);

494 
mp
->
m_sb
.
sb_roŸöo
 = 
fú°_¥óŒoc_öo
;

497 i‡(
mp
->
m_sb
.
sb_rbmöo
 !
fú°_¥óŒoc_öo
 + 1) {

498 
	`do_w¨n
(

499 
	`_
("sbÑó…imêbôm≠ inodê%" 
PRIu64
 " %sinconsistent with calculated value %u\n"),

500 
mp
->
m_sb
.
sb_rbmöo
,

501 (
mp
->
m_sb
.
sb_rbmöo
 =
NULLFSINO
 ? "(NULLFSINO) ":""),

502 
fú°_¥óŒoc_öo
 + 1);

504 i‡(!
no_modify
)

505 
	`do_w¨n
(

506 
	`_
("resetting superblockÑealtime bitmap inoÖointerÅo %u\n"),

507 
fú°_¥óŒoc_öo
 + 1);

509 
	`do_w¨n
(

510 
	`_
("wouldÑeset superblockÑealtime bitmap inoÖointerÅo %u\n"),

511 
fú°_¥óŒoc_öo
 + 1);

517 
mp
->
m_sb
.
sb_rbmöo
 = 
fú°_¥óŒoc_öo
 + 1;

520 i‡(
mp
->
m_sb
.
sb_rsumöo
 !
fú°_¥óŒoc_öo
 + 2) {

521 
	`do_w¨n
(

522 
	`_
("sbÑó…imêsumm¨y inodê%" 
PRIu64
 " %sinconsistent with calculated value %u\n"),

523 
mp
->
m_sb
.
sb_rsumöo
,

524 (
mp
->
m_sb
.
sb_rsumöo
 =
NULLFSINO
 ? "(NULLFSINO) ":""),

525 
fú°_¥óŒoc_öo
 + 2);

527 i‡(!
no_modify
)

528 
	`do_w¨n
(

529 
	`_
("resetting superblockÑealtime summary inoÖointerÅo %u\n"),

530 
fú°_¥óŒoc_öo
 + 2);

532 
	`do_w¨n
(

533 
	`_
("wouldÑeset superblockÑealtime summary inoÖointerÅo %u\n"),

534 
fú°_¥óŒoc_öo
 + 2);

540 
mp
->
m_sb
.
sb_rsumöo
 = 
fú°_¥óŒoc_öo
 + 2;

543 
	}
}

556 
	$f‹m©_log_max_l¢
(

557 
xfs_mou¡
 *
mp
)

559 
xlog
 *
log
 = 
mp
->
m_log
;

560 
max_cy˛e
;

561 
max_block
;

562 
√w_cy˛e
;

563 
xfs_daddr_t
 
log°¨t
;

564 
xfs_daddr_t
 
logblocks
;

565 
logvîsi⁄
;

567 i‡(!
	`xfs_sb_vîsi⁄_has¸c
(&
mp
->
m_sb
))

574 
max_cy˛e
 = 
	`CYCLE_LSN
(
libxfs_max_l¢
);

575 
max_block
 = 
	`BLOCK_LSN
(
libxfs_max_l¢
);

576 i‡(
max_cy˛e
 < 
log
->
l_cuº_cy˛e
 ||

577 (
max_cy˛e
 =
log
->
l_cuº_cy˛e
 && 
max_block
 <Üog->
l_cuº_block
))

584 
√w_cy˛e
 = 
max_cy˛e
 + 3;

585 
log°¨t
 = 
	`XFS_FSB_TO_DADDR
(
mp
, mp->
m_sb
.
sb_log°¨t
);

586 
logblocks
 = 
	`XFS_FSB_TO_BB
(
mp
, mp->
m_sb
.
sb_logblocks
);

587 
logvîsi⁄
 = 
	`xfs_sb_vîsi⁄_ha¶ogv2
(&
mp
->
m_sb
) ? 2 : 1;

589 
	`do_w¨n
(
	`_
("Maximum metadata LSN (%d:%d) isáhead ofÜog (%d:%d).\n"),

590 
max_cy˛e
, 
max_block
, 
log
->
l_cuº_cy˛e
,Üog->
l_cuº_block
);

592 i‡(
no_modify
) {

593 
	`do_w¨n
(
	`_
("Would f‹m©ÜogÅÿcy˛ê%d.\n"), 
√w_cy˛e
);

597 
	`do_w¨n
(
	`_
("F‹m©ÜogÅÿcy˛ê%d.\n"), 
√w_cy˛e
);

598 
	`libxfs_log_˛ór
(
log
->
l_dev
, 
NULL
, 
log°¨t
, 
logblocks
,

599 &
mp
->
m_sb
.
sb_uuid
, 
logvîsi⁄
, mp->m_sb.
sb_logsunô
,

600 
XLOG_FMT
, 
√w_cy˛e
, 
åue
);

601 
	}
}

609 
boﬁ


610 
	$is_mu…idisk_fûesy°em
(

611 
xfs_mou¡
 *
mp
)

613 
xfs_sb
 *
sbp
 = &
mp
->
m_sb
;

616 i‡(
sbp
->
sb_agcou¡
 >
XFS_MULTIDISK_AGCOUNT
)

617  
åue
;

623 i‡(!
sbp
->
sb_unô
)

624  
Ál£
;

626 
	`ASSERT
(
sbp
->
sb_width
);

627  
åue
;

628 
	}
}

631 
	$maö
(
¨gc
, **
¨gv
)

633 
xfs_mou¡_t
 *
ãmp_mp
;

634 
xfs_mou¡_t
 *
mp
;

635 
xfs_dsb_t
 *
dsb
;

636 
xfs_buf_t
 *
sbp
;

637 
xfs_mou¡_t
 
xfs_m
;

638 
xlog
 
log
 = {0};

639 *
msgbuf
;

640 
xfs_sb
 
psb
;

641 
rvÆ
;

643 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

644 
	`£éoˇÀ
(
LC_ALL
, "");

645 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

646 
	`ãxtdomaö
(
PACKAGE
);

647 
	`döode_bmbt_å™¶©i⁄_öô
();

649 
ãmp_mp
 = &
xfs_m
;

650 
	`£tbuf
(
°dout
, 
NULL
);

652 
	`¥o˚ss_¨gs
(
¨gc
, 
¨gv
);

653 
	`xfs_öô
(&
x
);

655 
msgbuf
 = 
	`mÆloc
(
DURATION_BUF_SIZE
);

657 
	`time°amp
(
PHASE_START
, 0, 
NULL
);

658 
	`time°amp
(
PHASE_END
, 0, 
NULL
);

661 
	`pha£1
(
ãmp_mp
);

662 
	`time°amp
(
PHASE_END
, 1, 
NULL
);

664 i‡(
no_modify
 && 
¥im¨y_sb_modifõd
) {

665 
	`do_w¨n
(
	`_
("Primary superblock would have been modified.\n"

668 
	`exô
(1);

671 
rvÆ
 = 
	`gë_sb
(&
psb
, 0, 
XFS_MAX_SECTORSIZE
, 0);

672 i‡(
rvÆ
 !
XR_OK
) {

673 
	`do_w¨n
(
	`_
("Primary superblock badáfterÖhase 1!\n"

675 
	`exô
(1);

679 i‡(!
iß_fûe
) {

680 
fd
 = 
	`libxfs_devi˚_to_fd
(
x
.
ddev
);

681 
°©
 
°©buf
;

683 i‡(
	`f°©
(
fd
, &
°©buf
) < 0)

684 
	`do_w¨n
(
	`_
("%s: couldn't stat \"%s\"\n"),

685 
¥og«me
, 
fs_«me
);

686 i‡(
	`S_ISREG
(
°©buf
.
°_mode
))

687 
iß_fûe
 = 1;

696 i‡(
iß_fûe
) {

697 
fd
 = 
	`libxfs_devi˚_to_fd
(
x
.
ddev
);

698 
xfs_fs›_geom_v1
 
geom
 = { 0 };

700 i‡(
	`io˘l
(
fd
, 
XFS_IOC_FSGEOMETRY_V1
, &
geom
) < 0) {

701 
	`do_log
(
	`_
("Cannot get host filesystem geometry.\n"

704 
geom
.
£˘size
 = 
BBSIZE
;

707 i‡(
psb
.
sb_£˘size
 < 
geom
.
£˘size
) {

708 
ﬁd_Êags
;

710 
ﬁd_Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0);

711 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
ﬁd_Êags
 & ~
O_DIRECT
) < 0) {

712 
	`do_w¨n
(
	`_
(

715 
	`exô
(1);

725 
	`mem£t
(&
xfs_m
, 0, (
xfs_mou¡_t
));

726 
mp
 = 
	`libxfs_mou¡
(&
xfs_m
, &
psb
, 
x
.
ddev
, x.
logdev
, x.
πdev
, 0);

728 i‡(!
mp
) {

729 
	`Ârötf
(
°dîr
,

730 
	`_
("%s: cannotÑepairÅhis filesystem. Sorry.\n"),

731 
¥og«me
);

732 
	`exô
(1);

734 
mp
->
m_log
 = &
log
;

737 i‡(
vîbo£
 > 2)

738 
mp
->
m_Êags
 |
LIBXFS_MOUNT_WANT_CORRUPTED
;

743 
glob_agcou¡
 = 
mp
->
m_sb
.
sb_agcou¡
;

745 
chunks_pblock
 = 
mp
->
m_sb
.
sb_ö›block
 / 
XFS_INODES_PER_CHUNK
;

746 
max_symlök_blocks
 = 
	`libxfs_symlök_blocks
(
mp
, 
MAXPATHLEN
);

747 
öodes_≥r_˛u°î
 = 
	`MAX
(
mp
->
m_sb
.
sb_ö›block
,

748 
mp
->
m_öode_˛u°î_size
 >> mp->
m_sb
.
sb_öodñog
);

776 i‡(!
ag_°ride
 && 
do_¥e„tch
 && 
	`is_mu…idisk_fûesy°em
(
mp
)) {

783 
ag_°ride
 = 
	`mö
(
glob_agcou¡
, 
XFS_MULTIDISK_AGCOUNT
 / 2) - 1;

786 i‡(
ag_°ride
) {

787 
max_thªads
 = 
	`∂©f‹m_≈roc
() * 8;

789 
thªad_cou¡
 = (
glob_agcou¡
 + 
ag_°ride
 - 1) /ág_stride;

790 
thªad_cou¡
 > 
max_thªads
) {

791 
ag_°ride
 *= 2;

792 
thªad_cou¡
 = (
glob_agcou¡
 + 
ag_°ride
 - 1) /

793 
ag_°ride
;

795 i‡(
thªad_cou¡
 > 0)

796 
	`thªad_öô
();

798 
thªad_cou¡
 = 1;

799 
ag_°ride
 = 0;

803 i‡(
ag_°ride
 && 
ªp‹t_öãrvÆ
) {

804 
	`öô_¥ogªss_Ωt
();

805 i‡(
msgbuf
) {

806 
	`do_log
(
	`_
(" -ÑeportingÖrogress in intervals of %s\n"),

807 
	`duøti⁄
(
ªp‹t_öãrvÆ
, 
msgbuf
));

826 i‡(!
bhash_›ti⁄_u£d
 || 
max_mem_•ecifõd
) {

827 
mem_u£d
;

828 
max_mem
;

829 
æimô
 
æim
;

831 
	`libxfs_bˇche_purge
();

832 
	`ˇche_de°roy
(
libxfs_bˇche
);

834 
mem_u£d
 = (
mp
->
m_sb
.
sb_icou¡
 >> (10 - 2)) +

835 (
mp
->
m_sb
.
sb_dblocks
 >> (10 + 1)) +

837 
max_mem
 = 
max_mem_•ecifõd
 ? max_mem_specified * 1024 :

838 
	`libxfs_physmem
() * 3 / 4;

840 i‡(
	`gëæimô
(
RLIMIT_AS
, &
æim
) != -1 &&

841 
æim
.
æim_cur
 !
RLIM_INFINITY
) {

842 
æim
.
æim_cur
 =Ñlim.
æim_max
;

843 
	`£ålimô
(
RLIMIT_AS
, &
æim
);

845 
max_mem
 = 
	`MIN
(max_mem, 
æim
.
æim_cur
 / 1280);

847 
max_mem
 = 
	`MIN
(max_mem, (
LONG_MAX
 >> 10) + 1);

849 i‡(
vîbo£
 > 1)

850 
	`do_log
(

851 
	`_
(" - max_mem = %lu, icou¡ = %" 
PRIu64
 ", imem = %" PRIu64 ", dblock = %" PRIu64 ", dmem = %" PRIu64 "\n"),

852 
max_mem
, 
mp
->
m_sb
.
sb_icou¡
,

853 
mp
->
m_sb
.
sb_icou¡
 >> (10 - 2),

854 
mp
->
m_sb
.
sb_dblocks
,

855 
mp
->
m_sb
.
sb_dblocks
 >> (10 + 1));

857 i‡(
max_mem
 <
mem_u£d
) {

858 i‡(
max_mem_•ecifõd
) {

859 
	`do_ab‹t
(

860 
	`_
("Required memory forÑepair is greaterÅhatÅhe maximum specified\n"

862 
mem_u£d
 / 1024);

864 
	`do_log
(

865 
	`_
("Memoryávailable forÑepair (%luMB) mayÇot be sufficient.\n"

868 
max_mem
 / 1024, 
mem_u£d
 / 1024);

869 i‡(
do_¥e„tch
)

870 
	`do_log
(

871 
	`_
("turnÖrefetching off (-P)ÅoÑeduceÅhe memory footprint.\n"));

873 
	`do_log
(

874 
	`_
("increase system RAMánd/or swap spaceÅoátÜeast %luMB.\n"),

875 
mem_u£d
 * 2 / 1024);

877 
max_mem
 = 
mem_u£d
;

880 
max_mem
 -
mem_u£d
;

881 i‡(
max_mem
 >= (1 << 30))

882 
max_mem
 = 1 << 30;

883 
libxfs_bhash_size
 = 
max_mem
 / (
HASH_CACHE_RATIO
 *

884 (
mp
->
m_öode_˛u°î_size
 >> 10));

885 i‡(
libxfs_bhash_size
 < 512)

886 
libxfs_bhash_size
 = 512;

888 i‡(
vîbo£
)

889 
	`do_log
(
	`_
(" - block cache size setÅo %dÉntries\n"),

890 
libxfs_bhash_size
 * 
HASH_CACHE_RATIO
);

892 
libxfs_bˇche
 = 
	`ˇche_öô
(0, 
libxfs_bhash_size
,

893 &
libxfs_bˇche_›î©i⁄s
);

899 
	`ˇlc_mkfs
(
mp
);

904 
	`öô_bm≠s
(
mp
);

905 
	`öc‹e_öo_öô
(
mp
);

906 
	`öc‹e_ext_öô
(
mp
);

907 
	`rm≠s_öô
(
mp
);

910 
öodes_≥r_block
 = 
mp
->
m_sb
.
sb_ö›block
;

912 i‡(
	`∑r£_sb_vîsi⁄
(&
mp
->
m_sb
)) {

913 
	`do_w¨n
(

914 
	`_
("Found unsupported filesystem features. ExitingÇow.\n"));

919 
	`pha£2
(
mp
, 
pha£2_thªads
);

920 
	`time°amp
(
PHASE_END
, 2, 
NULL
);

922 i‡(
do_¥e„tch
)

923 
	`öô_¥e„tch
(
mp
);

925 
	`pha£3
(
mp
, 
pha£2_thªads
);

926 
	`time°amp
(
PHASE_END
, 3, 
NULL
);

928 
	`pha£4
(
mp
);

929 
	`time°amp
(
PHASE_END
, 4, 
NULL
);

931 i‡(
no_modify
)

932 
	`¥ötf
(
	`_
("No modify flag set, skippingÖhase 5\n"));

934 
	`pha£5
(
mp
);

936 
	`time°amp
(
PHASE_END
, 5, 
NULL
);

941 
	`rm≠s_‰ì
(
mp
);

942 
	`‰ì_bm≠s
(
mp
);

944 i‡(!
bad_öo_båì
) {

945 
	`pha£6
(
mp
);

946 
	`time°amp
(
PHASE_END
, 6, 
NULL
);

948 
	`pha£7
(
mp
, 
pha£2_thªads
);

949 
	`time°amp
(
PHASE_END
, 7, 
NULL
);

951 
	`do_w¨n
(

952 
	`_
("Inodeállocation btreesáreÅoo corrupted, skippingÖhases 6ánd 7\n"));

955 i‡(
lo°_quŸas
 && !
have_uquŸöo
 && !
have_gquŸöo
 && !
have_pquŸöo
) {

956 i‡(!
no_modify
) {

957 
	`do_w¨n
(

958 
	`_
("Warning:Ço quota inodes were found. Quotas disabled.\n"));

960 
	`do_w¨n
(

961 
	`_
("Warning:Ço quota inodes were found. Quotas would be disabled.\n"));

963 } i‡(
lo°_quŸas
) {

964 i‡(!
no_modify
) {

965 
	`do_w¨n
(

966 
	`_
("Warning: quota inodes were cleared. Quotas disabled.\n"));

968 
	`do_w¨n
(

969 
	`_
("Warning: quota inodes would be cleared. Quotas would be disabled.\n"));

972 i‡(
lo°_uquŸöo
) {

973 i‡(!
no_modify
) {

974 
	`do_w¨n
(

975 
	`_
("Warning: user quota information was cleared.\n"

978 
	`do_w¨n
(

979 
	`_
("Warning: user quota information would be cleared.\n"

984 i‡(
lo°_gquŸöo
) {

985 i‡(!
no_modify
) {

986 
	`do_w¨n
(

987 
	`_
("Warning: group quota information was cleared.\n"

990 
	`do_w¨n
(

991 
	`_
("Warning: group quota information would be cleared.\n"

996 i‡(
lo°_pquŸöo
) {

997 i‡(!
no_modify
) {

998 
	`do_w¨n
(

999 
	`_
("Warning:Öroject quota information was cleared.\n"

1002 
	`do_w¨n
(

1003 
	`_
("Warning:Öroject quota information would be cleared.\n"

1009 i‡(
ag_°ride
 && 
ªp‹t_öãrvÆ
)

1010 
	`°›_¥ogªss_Ωt
();

1012 i‡(
no_modify
) {

1017 
	`f‹m©_log_max_l¢
(
mp
);

1019 
	`do_log
(

1020 
	`_
("No modify flag set, skipping filesystem flushándÉxiting.\n"));

1021 i‡(
vîbo£
)

1022 
	`summ¨y_ªp‹t
();

1023 i‡(
fs_is_dúty
)

1032 
sbp
 = 
	`libxfs_gësb
(
mp
, 0);

1033 i‡(!
sbp
)

1034 
	`do_îr‹
(
	`_
("couldn't get superblock\n"));

1036 
dsb
 = 
	`XFS_BUF_TO_SBP
(
sbp
);

1038 i‡(
	`be16_to_˝u
(
dsb
->
sb_qÊags
Ë& 
XFS_ALL_QUOTA_CHKD
) {

1039 
	`do_w¨n
(
	`_
("Note - quota info will beÑegenerated onÇext "

1041 
dsb
->
sb_qÊags
 &
	`˝u_to_be16
(~
XFS_ALL_QUOTA_CHKD
);

1044 i‡(
c›õd_sunô
) {

1045 
	`do_w¨n
(

1046 
	`_
("Note - stripe unit (%d)ánd width (%d) were copied fromá backup superblock.\n"

1048 
	`be32_to_˝u
(
dsb
->
sb_unô
), be32_to_˝u(dsb->
sb_width
));

1051 
	`libxfs_wrôebuf
(
sbp
, 0);

1058 
	`libxfs_bˇche_Êush
();

1059 
	`f‹m©_log_max_l¢
(
mp
);

1060 
	`libxfs_umou¡
(
mp
);

1062 i‡(
x
.
πdev
)

1063 
	`libxfs_devi˚_˛o£
(
x
.
πdev
);

1064 i‡(
x
.
logdev
 && x.logdev !x.
ddev
)

1065 
	`libxfs_devi˚_˛o£
(
x
.
logdev
);

1066 
	`libxfs_devi˚_˛o£
(
x
.
ddev
);

1068 i‡(
vîbo£
)

1069 
	`summ¨y_ªp‹t
();

1070 
	`do_log
(
	`_
("done\n"));

1072 i‡(
d™gîou¶y
 && !
no_modify
)

1073 
	`do_w¨n
(

1074 
	`_
("Repair ofÑeadonly mount complete. ImmediateÑebootÉncouraged.\n"));

1076 
	`p·ø˚_d⁄e
();

1078 
	`‰ì
(
msgbuf
);

1081 
	}
}

	@rtcp/xfs_rtcp.c

19 
	~"libxfs.h
"

21 
π˝
(*, *, );

22 
xf§ãxtsize
(*
∑th
);

24 
	gpÊag
;

25 *
	g¥og«me
;

28 
	$ußge
()

30 
	`Ârötf
(
°dîr
, 
	`_
("%†[-êextsize] [-p] [-V] sour˚Å¨gë\n"), 
¥og«me
);

31 
	`exô
(2);

32 
	}
}

35 
	$maö
(
¨gc
, **
¨gv
)

37 
c
, 
i
, 
r
, 
îrÊg
 = 0;

38 
°©
 
s2
;

39 
extsize
 = - 1;

41 
¥og«me
 = 
	`ba£«me
(
¨gv
[0]);

42 
	`£éoˇÀ
(
LC_ALL
, "");

43 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

44 
	`ãxtdomaö
(
PACKAGE
);

46 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, "≥:V")Ë!
EOF
) {

47 
c
) {

49 
extsize
 = 
	`©oi
(
›èrg
);

52 
pÊag
 = 1;

55 
	`¥ötf
(
	`_
("%†vîsi⁄ %s\n"), 
¥og«me
, 
VERSION
);

56 
	`exô
(0);

58 
îrÊg
++;

65 
¨gc
 -
›töd
;

66 
¨gv
 = &¨gv[
›töd
];

68 i‡(
¨gc
 < 2) {

69 
	`Ârötf
(
°dîr
, 
	`_
("%s: must specify filesÅo copy\n"),

70 
¥og«me
);

71 
îrÊg
++;

74 i‡(
îrÊg
)

75 
	`ußge
();

82 i‡(
¨gc
 > 2) {

83 i‡(
	`°©
(
¨gv
[
¨gc
-1], &
s2
) < 0) {

84 
	`Ârötf
(
°dîr
, 
	`_
("%s: stat of %s failed\n"),

85 
¥og«me
, 
¨gv
[
¨gc
-1]);

86 
	`exô
(2);

89 i‡(!
	`S_ISDIR
(
s2
.
°_mode
)) {

90 
	`Ârötf
(
°dîr
,

91 
	`_
("%s: finalárgument isÇot directory\n"),

92 
¥og«me
);

93 
	`ußge
();

101 
r
 = 0;

102 
i
 = 0; i < 
¨gc
-1; i++)

103 
r
 +
	`π˝
(
¨gv
[
i
],árgv[
¨gc
-1], 
extsize
);

108 
	`exô
(
r
?2:0);

109 
	}
}

112 
	$π˝
–*
sour˚
, *
èrgë
, 
„xtsize
)

114 
‰omfd
, 
tofd
, 
ªad˘
, 
wrôe˘
, 
iosz
, 
ª›í
;

115 
ªmove
 = 0, 
πextsize
;

116 *
•
, *
fbuf
, *
±r
;

117 
tbuf
[ 
PATH_MAX
 ];

118 
°©
 
s1
, 
s2
;

119 
fsx©å
 fsxattr;

120 
diﬂâr
 dioattr;

126 
•
 = 
sour˚
 + 
	`°æí
(source);

127 i‡(
•
) {

128 *--
•
 ='/' && s∞> 
sour˚
)

129 *
•
 = '\0';

131 
•
 = 
èrgë
 + 
	`°æí
(target);

132 i‡(
•
) {

133 *--
•
 ='/' && s∞> 
èrgë
)

134 *
•
 = '\0';

137 i‡–
	`°©
(
sour˚
, &
s1
) ) {

138 
	`Ârötf
(
°dîr
, 
	`_
("%s: failed stat on %s: %s\n"),

139 
¥og«me
, 
sour˚
, 
	`°ªº‹
(
î∫o
));

146 
	`¢¥ötf
(
tbuf
, —buf), "%s", 
èrgë
);

147 i‡–
	`°©
(
èrgë
, &
s2
) ) {

148 i‡(!
	`S_ISDIR
(
s2
.
°_mode
)) {

150 i‡((
±r
 = 
	`°ºchr
(
tbuf
, '/')Ë!
NULL
)

151 *
±r
 = '\0';

153 
	`¢¥ötf
(
tbuf
, (tbuf), ".");

157 i‡–(
πextsize
 = 
	`xf§ãxtsize
–
tbuf
 )) <= 0 ) {

158 
	`Ârötf
(
°dîr
,

159 
	`_
("%s: %s filesystem hasÇoÑealtimeÖartition\n"),

160 
¥og«me
, 
tbuf
);

167 
	`¢¥ötf
(
tbuf
, —buf), "%s", 
èrgë
);

168 i‡–!
	`°©
(
èrgë
, &
s2
) ) {

169 i‡(
	`S_ISDIR
(
s2
.
°_mode
)) {

170 
	`¢¥ötf
(
tbuf
, —buf), "%s/%s", 
èrgë
,

171 
	`ba£«me
(
sour˚
));

175 i‡–
	`°©
(
tbuf
, &
s2
) ) {

179 i‡–(
tofd
 = 
	`›í
(
tbuf
, 
O_RDWR
|
O_CREAT
|
O_DIRECT
, 0666)) < 0 ) {

180 
	`Ârötf
(
°dîr
, 
	`_
("%s: open of %s failed: %s\n"),

181 
¥og«me
, 
tbuf
, 
	`°ªº‹
(
î∫o
));

184 
ªmove
 = 1;

189 
fsx©å
.
fsx_xÊags
 = 
FS_XFLAG_REALTIME
;

190 i‡(
„xtsize
 != -1 )

191 
fsx©å
.
fsx_extsize
 = 
„xtsize
;

193 
fsx©å
.
fsx_extsize
 = 0;

195 i‡–
	`xfs˘l
(
tbuf
, 
tofd
, 
FS_IOC_FSSETXATTR
, &
fsx©å
) ) {

196 
	`Ârötf
(
°dîr
,

197 
	`_
("%s: setáttributes on %s failed: %s\n"),

198 
¥og«me
, 
tbuf
, 
	`°ªº‹
(
î∫o
));

199 
	`˛o£
–
tofd
 );

200 
	`u∆ök
–
tbuf
 );

207 i‡–(
tofd
 = 
	`›í
(
tbuf
, 
O_RDWR
|
O_DIRECT
)) < 0 ) {

208 
	`Ârötf
(
°dîr
, 
	`_
("%s: open of %s failed: %s\n"),

209 
¥og«me
, 
tbuf
, 
	`°ªº‹
(
î∫o
));

213 i‡–
	`xfs˘l
(
tbuf
, 
tofd
, 
FS_IOC_FSGETXATTR
, &
fsx©å
) ) {

214 
	`Ârötf
(
°dîr
,

215 
	`_
("%s: getáttributes of %s failed: %s\n"),

216 
¥og«me
, 
tbuf
, 
	`°ªº‹
(
î∫o
));

217 
	`˛o£
–
tofd
 );

224 i‡–!(
fsx©å
.
fsx_xÊags
 & 
FS_XFLAG_REALTIME
) ) {

225 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s isÇotáÑealtime file.\n"),

226 
¥og«me
, 
tbuf
);

227 
	`˛o£
–
tofd
 );

234 i‡–(
„xtsize
 !-1Ë&& (
fsx©å
.
fsx_extsize
 != fextsize) ) {

235 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s fileÉxtent size is %d, "

237 
¥og«me
, 
tbuf
, 
fsx©å
.
fsx_extsize
, 
„xtsize
);

238 
	`˛o£
–
tofd
 );

246 
ª›í
 = 0;

247 i‡–(
‰omfd
 = 
	`›í
(
sour˚
, 
O_RDONLY
|
O_DIRECT
)) < 0 ) {

248 
	`Ârötf
(
°dîr
, 
	`_
("%s: open of %s source failed: %s\n"),

249 
¥og«me
, 
sour˚
, 
	`°ªº‹
(
î∫o
));

250 
	`˛o£
–
tofd
 );

251 i‡(
ªmove
)

252 
	`u∆ök
–
tbuf
 );

256 
fsx©å
.
fsx_xÊags
 = 0;

257 
fsx©å
.
fsx_extsize
 = 0;

258 i‡–
	`xfs˘l
(
sour˚
, 
‰omfd
, 
FS_IOC_FSGETXATTR
, &
fsx©å
) ) {

259 
ª›í
 = 1;

261 i‡(! (
fsx©å
.
fsx_xÊags
 & 
FS_XFLAG_REALTIME
) ){

262 
	`Ârötf
(
°dîr
, 
	`_
("%s: %s isÇotáÑealtime file.\n"),

263 
¥og«me
, 
sour˚
);

264 
ª›í
 = 1;

268 i‡(
ª›í
) {

269 
	`˛o£
–
‰omfd
 );

270 i‡–(
‰omfd
 = 
	`›í
(
sour˚
, 
O_RDONLY
 )) < 0 ) {

271 
	`Ârötf
(
°dîr
, 
	`_
("%s: open of %s source failed: %s\n"),

272 
¥og«me
, 
sour˚
, 
	`°ªº‹
(
î∫o
));

273 
	`˛o£
–
tofd
 );

274 i‡(
ªmove
)

275 
	`u∆ök
–
tbuf
 );

283 i‡–
	`xfs˘l
(
tbuf
, 
tofd
, 
XFS_IOC_DIOINFO
, &
diﬂâr
) ) {

284 
	`Ârötf
(
°dîr
,

285 
	`_
("%s: couldn't get direct I/O information: %s\n"),

286 
¥og«me
, 
	`°ªº‹
(
î∫o
));

287 
	`˛o£
–
‰omfd
 );

288 
	`˛o£
–
tofd
 );

289 i‡–
ªmove
 )

290 
	`u∆ök
–
tbuf
 );

294 i‡–
πextsize
 % 
diﬂâr
.
d_möiosz
 ) {

295 
	`Ârötf
(
°dîr
, 
	`_
("%s:Éxtent size %dÇotá multiple of %d.\n"),

296 
¥og«me
, 
πextsize
, 
diﬂâr
.
d_möiosz
);

297 
	`˛o£
–
‰omfd
 );

298 
	`˛o£
–
tofd
 );

299 i‡–
ªmove
 )

300 
	`u∆ök
–
tbuf
 );

308 i‡–
s1
.
°_size
 % 
diﬂâr
.
d_möiosz
 ) {

309 
	`¥ötf
(
	`_
("The size of %s isÇotá multiple of %d.\n"),

310 
sour˚
, 
diﬂâr
.
d_möiosz
);

311 i‡–
pÊag
 ) {

312 
	`¥ötf
(
	`_
("%s will beÖaddedÅo %lld bytes.\n"),

313 
tbuf
, ()

314 (((
s1
.
°_size
 / 
diﬂâr
.
d_möiosz
) + 1) *

315 
diﬂâr
.
d_möiosz
) );

318 
	`¥ötf
(
	`_
("UseÅhe -p optionÅoÖad %sÅoá "

320 
tbuf
, 
diﬂâr
.
d_möiosz
);

321 
	`˛o£
–
‰omfd
 );

322 
	`˛o£
–
tofd
 );

323 i‡–
ªmove
 )

324 
	`u∆ök
–
tbuf
 );

329 
iosz
 = 
diﬂâr
.
d_möiosz
;

330 
fbuf
 = 
	`memÆign
–
diﬂâr
.
d_mem
, 
iosz
);

331 
	`mem£t
(
fbuf
, 0, 
iosz
);

336  ( 
ªad˘
 = 
	`ªad
–
‰omfd
, 
fbuf
, 
iosz
) ) != 0 ) {

340 i‡(
ªad˘
 < 0 ) {

347 i‡–
ªad˘
 !
iosz
 ) {

348 i‡–(
ªad˘
 % 
diﬂâr
.
d_möiosz
) != 0 ) {

349 
ªad˘
 = ( (ªad˘/
diﬂâr
.
d_möiosz
) + 1 ) *

350 
diﬂâr
.
d_möiosz
;

357 
wrôe˘
 = 
	`wrôe
–
tofd
, 
fbuf
, 
ªad˘
);

359 i‡–
wrôe˘
 !
ªad˘
 ) {

360 
	`Ârötf
(
°dîr
, 
	`_
("%s: writeÉrror: %s\n"),

361 
¥og«me
, 
	`°ªº‹
(
î∫o
));

362 
	`˛o£
(
‰omfd
);

363 
	`˛o£
(
tofd
);

364 
	`‰ì
–
fbuf
 );

368 
	`mem£t
–
fbuf
, 0, 
iosz
);

371 
	`˛o£
(
‰omfd
);

372 
	`˛o£
(
tofd
);

373 
	`‰ì
–
fbuf
 );

375 
	}
}

381 
	$xf§ãxtsize
–*
∑th
)

383 
fd
, 
rvÆ
, 
πextsize
;

384 
xfs_fs›_geom_v1_t
 
geo
;

386 
fd
 = 
	`›í
–
∑th
, 
O_RDONLY
 );

387 i‡–
fd
 < 0 ) {

388 
	`Ârötf
(
°dîr
, 
	`_
("%s: couldÇot open %s: %s\n"),

389 
¥og«me
, 
∑th
, 
	`°ªº‹
(
î∫o
));

392 
rvÆ
 = 
	`xfs˘l
–
∑th
, 
fd
, 
XFS_IOC_FSGEOMETRY_V1
, &
geo
 );

393 
	`˛o£
(
fd
);

394 i‡–
rvÆ
 < 0 )

397 
πextsize
 = 
geo
.πextsizê* geo.
blocksize
;

399  
πextsize
;

400 
	}
}

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 
__BEGIN_DECLS


67 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

68 
__löe
, c⁄° *
__fun˘i⁄
)

69 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

72 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

73 
__löe
, c⁄° *
__fun˘i⁄
)

74 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

79 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

80 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

83 
__END_DECLS


85 
	#as£π
(
ex¥
) \

86 ((
ex¥
) \

87 ? 
	`__ASSERT_VOID_CAST
 (0) \

88 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

90 #ifdef 
__USE_GNU


91 
	#as£π_≥º‹
(
î∫um
) \

92 (!(
î∫um
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

102 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

103 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

105 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

106 
	#__ASSERT_FUNCTION
 
__func__


	)

108 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

115 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


116 #unde‡
°©ic_as£π


117 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/blkid/blkid.h

23 #i‚de‡
_BLKID_BLKID_H


24 
	#_BLKID_BLKID_H


	)

26 
	~<°döt.h
>

27 
	~<sys/ty≥s.h
>

29 #ifde‡
__˝lu•lus


33 
	#BLKID_VERSION
 "2.28.2"

	)

34 
	#BLKID_DATE
 "07-Sï-2016"

	)

41 
blkid_°ru˘_dev
 *
	tblkid_dev
;

48 
blkid_°ru˘_ˇche
 *
	tblkid_ˇche
;

55 
blkid_°ru˘_¥obe
 *
	tblkid_¥obe
;

62 
blkid_°ru˘_t›ﬁogy
 *
	tblkid_t›ﬁogy
;

69 
blkid_°ru˘_∑πli°
 *
	tblkid_∑πli°
;

76 
blkid_°ru˘_∑πôi⁄
 *
	tblkid_∑πôi⁄
;

83 
blkid_°ru˘_∑πèbÀ
 *
	tblkid_∑πèbÀ
;

90 
öt64_t
 
	tblkid_loff_t
;

97 
blkid_°ru˘_èg_ôî©e
 *
	tblkid_èg_ôî©e
;

104 
blkid_°ru˘_dev_ôî©e
 *
	tblkid_dev_ôî©e
;

118 
	#BLKID_DEV_FIND
 0x0000

	)

119 
	#BLKID_DEV_CREATE
 0x0001

	)

120 
	#BLKID_DEV_VERIFY
 0x0002

	)

121 
	#BLKID_DEV_NORMAL
 (
BLKID_DEV_CREATE
 | 
BLKID_DEV_VERIFY
)

	)

124 #i‚de‡
__GNUC_PREREQ


125 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


126 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((majË<< 16Ë+ (mö))

	)

128 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

132 #i‚de‡
__ul_©åibuã__


133 #i‡
__GNUC_PREREQ
 (3, 4)

134 
	#__ul_©åibuã__
(
_a_
Ë
	`__©åibuã__
(_a_)

	)

136 
	#__ul_©åibuã__
(
_a_
)

	)

141 
blkid_öô_debug
(
mask
);

142 
blkid_put_ˇche
(
blkid_ˇche
 
ˇche
);

143 
blkid_gë_ˇche
(
blkid_ˇche
 *
ˇche
, c⁄° *
fûíame
);

144 
blkid_gc_ˇche
(
blkid_ˇche
 
ˇche
);

147 c⁄° *
blkid_dev_dev«me
(
blkid_dev
 
dev
)

148 
__ul_©åibuã__
((
w¨n_unu£d_ªsu…
));

150 
blkid_dev_ôî©e
 
blkid_dev_ôî©e_begö
(
blkid_ˇche
 
ˇche
);

151 
blkid_dev_£t_£¨ch
(
blkid_dev_ôî©e
 
ôî
,

152 *
£¨ch_ty≥
, *
£¨ch_vÆue
);

153 
blkid_dev_√xt
(
blkid_dev_ôî©e
 
ôî©e
, 
blkid_dev
 *
dev
);

154 
blkid_dev_ôî©e_íd
(
blkid_dev_ôî©e
 
ôî©e
);

157 *
blkid_devno_to_dev«me
(
dev_t
 
devno
)

158 
__ul_©åibuã__
((
w¨n_unu£d_ªsu…
));

159 
blkid_devno_to_whﬁedisk
(
dev_t
 
dev
, *
disk«me
,

160 
size_t
 
Àn
, 
dev_t
 *
diskdevno
)

161 
__ul_©åibuã__
((
w¨n_unu£d_ªsu…
));

164 
blkid_¥obe_Æl
(
blkid_ˇche
 
ˇche
);

165 
blkid_¥obe_Æl_√w
(
blkid_ˇche
 
ˇche
);

166 
blkid_¥obe_Æl_ªmovabÀ
(
blkid_ˇche
 
ˇche
);

168 
blkid_dev
 
blkid_gë_dev
(
blkid_ˇche
 
ˇche
, c⁄° *
dev«me
, 
Êags
);

171 
blkid_loff_t
 
blkid_gë_dev_size
(
fd
);

174 
blkid_dev
 
blkid_vîify
(
blkid_ˇche
 
ˇche
, blkid_dev 
dev
);

179 *
blkid_gë_èg_vÆue
(
blkid_ˇche
 
ˇche
, c⁄° *
èg«me
,

180 c⁄° *
dev«me
)

181 
__ul_©åibuã__
((
w¨n_unu£d_ªsu…
));

182 *
blkid_gë_dev«me
(
blkid_ˇche
 
ˇche
, c⁄° *
tokí
,

183 c⁄° *
vÆue
)

184 
__ul_©åibuã__
((
w¨n_unu£d_ªsu…
));

187 
blkid_èg_ôî©e
 
blkid_èg_ôî©e_begö
(
blkid_dev
 
dev
);

188 
blkid_èg_√xt
(
blkid_èg_ôî©e
 
ôî©e
,

189 c⁄° **
ty≥
, c⁄° **
vÆue
);

190 
blkid_èg_ôî©e_íd
(
blkid_èg_ôî©e
 
ôî©e
);

191 
blkid_dev_has_èg
(
blkid_dev
 
dev
, c⁄° *
ty≥
, c⁄° *
vÆue
);

193 
blkid_dev
 
blkid_föd_dev_wôh_èg
(
blkid_ˇche
 
ˇche
,

194 c⁄° *
ty≥
,

195 c⁄° *
vÆue
);

197 
blkid_∑r£_èg_°rög
(c⁄° *
tokí
, **
ªt_ty≥
, **
ªt_vÆ
);

200 
blkid_∑r£_vîsi⁄_°rög
(c⁄° *
vî_°rög
)

201 
__ul_©åibuã__
((
n⁄nuŒ
));

202 
blkid_gë_libøry_vîsi⁄
(c⁄° **
vî_°rög
,

203 c⁄° **
d©e_°rög
);

206 
blkid_ícode_°rög
(c⁄° *
°r
, *
°r_íc
, 
size_t
 
Àn
);

207 
blkid_ß„_°rög
(c⁄° *
°r
, *
°r_ß„
, 
size_t
 
Àn
);

210 
blkid_£nd_uevít
(c⁄° *
dev«me
, c⁄° *
a˘i⁄
);

211 *
blkid_evÆu©e_èg
(c⁄° *
tokí
, c⁄° *
vÆue
,

212 
blkid_ˇche
 *
ˇche
)

213 
__ul_©åibuã__
((
w¨n_unu£d_ªsu…
));

214 *
blkid_evÆu©e_•ec
(c⁄° *
•ec
, 
blkid_ˇche
 *
ˇche
)

215 
__ul_©åibuã__
((
w¨n_unu£d_ªsu…
));

218 
blkid_¥obe
 
blkid_√w_¥obe
()

219 
__ul_©åibuã__
((
w¨n_unu£d_ªsu…
));

220 
blkid_¥obe
 
blkid_√w_¥obe_‰om_fûíame
(c⁄° *
fûíame
)

221 
__ul_©åibuã__
((
w¨n_unu£d_ªsu…
));

222 
blkid_‰ì_¥obe
(
blkid_¥obe
 
¥
);

224 
blkid_ª£t_¥obe
(
blkid_¥obe
 
¥
);

226 
blkid_¥obe_£t_devi˚
(
blkid_¥obe
 
¥
, 
fd
,

227 
blkid_loff_t
 
off
, blkid_loff_à
size
);

229 
dev_t
 
blkid_¥obe_gë_devno
(
blkid_¥obe
 
¥
)

230 
__ul_©åibuã__
((
n⁄nuŒ
));

232 
dev_t
 
blkid_¥obe_gë_whﬁedisk_devno
(
blkid_¥obe
 
¥
)

233 
__ul_©åibuã__
((
n⁄nuŒ
));

235 
blkid_¥obe_is_whﬁedisk
(
blkid_¥obe
 
¥
)

236 
__ul_©åibuã__
((
n⁄nuŒ
));

238 
blkid_loff_t
 
blkid_¥obe_gë_size
(
blkid_¥obe
 
¥
);

239 
blkid_loff_t
 
blkid_¥obe_gë_off£t
(
blkid_¥obe
 
¥
);

240 
blkid_¥obe_gë_£˘‹size
(
blkid_¥obe
 
¥
);

241 
blkid_loff_t
 
blkid_¥obe_gë_£˘‹s
(
blkid_¥obe
 
¥
);

243 
blkid_¥obe_gë_fd
(
blkid_¥obe
 
¥
);

248 
blkid_known_f°y≥
(c⁄° *
f°y≥
);

250 
blkid_su≥rblocks_gë_«me
(
size_t
 
idx
, c⁄° **
«me
, *
ußge
);

252 
blkid_¥obe_íabÀ_su≥rblocks
(
blkid_¥obe
 
¥
, 
íabÀ
);

254 
	#BLKID_SUBLKS_LABEL
 (1 << 1Ë

	)

255 
	#BLKID_SUBLKS_LABELRAW
 (1 << 2Ë

	)

256 
	#BLKID_SUBLKS_UUID
 (1 << 3Ë

	)

257 
	#BLKID_SUBLKS_UUIDRAW
 (1 << 4Ë

	)

258 
	#BLKID_SUBLKS_TYPE
 (1 << 5Ë

	)

259 
	#BLKID_SUBLKS_SECTYPE
 (1 << 6Ë

	)

260 
	#BLKID_SUBLKS_USAGE
 (1 << 7Ë

	)

261 
	#BLKID_SUBLKS_VERSION
 (1 << 8Ë

	)

262 
	#BLKID_SUBLKS_MAGIC
 (1 << 9Ë

	)

263 
	#BLKID_SUBLKS_BADCSUM
 (1 << 10Ë

	)

265 
	#BLKID_SUBLKS_DEFAULT
 (
BLKID_SUBLKS_LABEL
 | 
BLKID_SUBLKS_UUID
 | \

266 
BLKID_SUBLKS_TYPE
 | 
BLKID_SUBLKS_SECTYPE
)

	)

268 
blkid_¥obe_£t_su≥rblocks_Êags
(
blkid_¥obe
 
¥
, 
Êags
);

269 
blkid_¥obe_ª£t_su≥rblocks_fûãr
(
blkid_¥obe
 
¥
);

270 
blkid_¥obe_övît_su≥rblocks_fûãr
(
blkid_¥obe
 
¥
);

275 
	#BLKID_FLTR_NOTIN
 1

	)

279 
	#BLKID_FLTR_ONLYIN
 2

	)

280 
blkid_¥obe_fûãr_su≥rblocks_ty≥
(
blkid_¥obe
 
¥
, 
Êag
, *
«mes
[]);

282 
	#BLKID_USAGE_FILESYSTEM
 (1 << 1)

	)

283 
	#BLKID_USAGE_RAID
 (1 << 2)

	)

284 
	#BLKID_USAGE_CRYPTO
 (1 << 3)

	)

285 
	#BLKID_USAGE_OTHER
 (1 << 4)

	)

286 
blkid_¥obe_fûãr_su≥rblocks_ußge
(
blkid_¥obe
 
¥
, 
Êag
, 
ußge
);

291 
blkid_¥obe_íabÀ_t›ﬁogy
(
blkid_¥obe
 
¥
, 
íabÀ
);

294 
blkid_t›ﬁogy
 
blkid_¥obe_gë_t›ﬁogy
(
blkid_¥obe
 
¥
);

296 
blkid_t›ﬁogy_gë_Æignmít_off£t
(
blkid_t›ﬁogy
 
ç
)

297 
__ul_©åibuã__
((
n⁄nuŒ
));

298 
blkid_t›ﬁogy_gë_möimum_io_size
(
blkid_t›ﬁogy
 
ç
)

299 
__ul_©åibuã__
((
n⁄nuŒ
));

300 
blkid_t›ﬁogy_gë_›timÆ_io_size
(
blkid_t›ﬁogy
 
ç
)

301 
__ul_©åibuã__
((
n⁄nuŒ
));

302 
blkid_t›ﬁogy_gë_logiˇl_£˘‹_size
(
blkid_t›ﬁogy
 
ç
)

303 
__ul_©åibuã__
((
n⁄nuŒ
));

304 
blkid_t›ﬁogy_gë_physiˇl_£˘‹_size
(
blkid_t›ﬁogy
 
ç
)

305 
__ul_©åibuã__
((
n⁄nuŒ
));

310 
blkid_known_±ty≥
(c⁄° *
±ty≥
);

312 
blkid_¥obe_íabÀ_∑πôi⁄s
(
blkid_¥obe
 
¥
, 
íabÀ
);

314 
blkid_¥obe_ª£t_∑πôi⁄s_fûãr
(
blkid_¥obe
 
¥
);

315 
blkid_¥obe_övît_∑πôi⁄s_fûãr
(
blkid_¥obe
 
¥
);

316 
blkid_¥obe_fûãr_∑πôi⁄s_ty≥
(
blkid_¥obe
 
¥
, 
Êag
, *
«mes
[]);

319 
	#BLKID_PARTS_FORCE_GPT
 (1 << 1)

	)

320 
	#BLKID_PARTS_ENTRY_DETAILS
 (1 << 2)

	)

321 
	#BLKID_PARTS_MAGIC
 (1 << 3)

	)

322 
blkid_¥obe_£t_∑πôi⁄s_Êags
(
blkid_¥obe
 
¥
, 
Êags
);

325 
blkid_∑πli°
 
blkid_¥obe_gë_∑πôi⁄s
(
blkid_¥obe
 
¥
);

327 
blkid_∑πli°_numof_∑πôi⁄s
(
blkid_∑πli°
 
ls
);

328 
blkid_∑πèbÀ
 
blkid_∑πli°_gë_èbÀ
(
blkid_∑πli°
 
ls
);

329 
blkid_∑πôi⁄
 
blkid_∑πli°_gë_∑πôi⁄
(
blkid_∑πli°
 
ls
, 
n
);

330 
blkid_∑πôi⁄
 
blkid_∑πli°_gë_∑πôi⁄_by_∑πno
(
blkid_∑πli°
 
ls
, 
n
);

331 
blkid_∑πôi⁄
 
blkid_∑πli°_devno_to_∑πôi⁄
(
blkid_∑πli°
 
ls
, 
dev_t
 
devno
);

332 
blkid_∑πèbÀ
 
blkid_∑πôi⁄_gë_èbÀ
(
blkid_∑πôi⁄
 
∑r
);

334 c⁄° *
blkid_∑πôi⁄_gë_«me
(
blkid_∑πôi⁄
 
∑r
);

335 c⁄° *
blkid_∑πôi⁄_gë_uuid
(
blkid_∑πôi⁄
 
∑r
);

336 
blkid_∑πôi⁄_gë_∑πno
(
blkid_∑πôi⁄
 
∑r
);

337 
blkid_loff_t
 
blkid_∑πôi⁄_gë_°¨t
(
blkid_∑πôi⁄
 
∑r
);

338 
blkid_loff_t
 
blkid_∑πôi⁄_gë_size
(
blkid_∑πôi⁄
 
∑r
);

340 
blkid_∑πôi⁄_gë_ty≥
(
blkid_∑πôi⁄
 
∑r
)

341 
__ul_©åibuã__
((
n⁄nuŒ
));

343 c⁄° *
blkid_∑πôi⁄_gë_ty≥_°rög
(
blkid_∑πôi⁄
 
∑r
);

345 
blkid_∑πôi⁄_gë_Êags
(
blkid_∑πôi⁄
 
∑r
)

346 
__ul_©åibuã__
((
n⁄nuŒ
));

348 
blkid_∑πôi⁄_is_logiˇl
(
blkid_∑πôi⁄
 
∑r
)

349 
__ul_©åibuã__
((
n⁄nuŒ
));

350 
blkid_∑πôi⁄_is_exãnded
(
blkid_∑πôi⁄
 
∑r
)

351 
__ul_©åibuã__
((
n⁄nuŒ
));

352 
blkid_∑πôi⁄_is_¥im¨y
(
blkid_∑πôi⁄
 
∑r
)

353 
__ul_©åibuã__
((
n⁄nuŒ
));

355 c⁄° *
blkid_∑πèbÀ_gë_ty≥
(
blkid_∑πèbÀ
 
èb
);

356 c⁄° *
blkid_∑πèbÀ_gë_id
(
blkid_∑πèbÀ
 
èb
);

358 
blkid_loff_t
 
blkid_∑πèbÀ_gë_off£t
(
blkid_∑πèbÀ
 
èb
);

359 
blkid_∑πôi⁄
 
blkid_∑πèbÀ_gë_∑ª¡
(
blkid_∑πèbÀ
 
èb
);

364 
blkid_do_¥obe
(
blkid_¥obe
 
¥
);

365 
blkid_do_ß„¥obe
(
blkid_¥obe
 
¥
);

366 
blkid_do_fuŒ¥obe
(
blkid_¥obe
 
¥
);

368 
blkid_¥obe_numof_vÆues
(
blkid_¥obe
 
¥
);

369 
blkid_¥obe_gë_vÆue
(
blkid_¥obe
 
¥
, 
num
, c⁄° **
«me
,

370 c⁄° **
d©a
, 
size_t
 *
Àn
);

371 
blkid_¥obe_lookup_vÆue
(
blkid_¥obe
 
¥
, c⁄° *
«me
,

372 c⁄° **
d©a
, 
size_t
 *
Àn
);

373 
blkid_¥obe_has_vÆue
(
blkid_¥obe
 
¥
, c⁄° *
«me
)

374 
__ul_©åibuã__
((
n⁄nuŒ
));

376 
blkid_do_wùe
(
blkid_¥obe
 
¥
, 
dryrun
);

377 
blkid_¥obe_°ï_back
(
blkid_¥obe
 
¥
);

382 #i‚de‡
BLKID_DISABLE_DEPRECATED


384 
	#BLKID_PROBREQ_LABEL
 
BLKID_SUBLKS_LABEL


	)

385 
	#BLKID_PROBREQ_LABELRAW
 
BLKID_SUBLKS_LABELRAW


	)

386 
	#BLKID_PROBREQ_UUID
 
BLKID_SUBLKS_UUID


	)

387 
	#BLKID_PROBREQ_UUIDRAW
 
BLKID_SUBLKS_UUIDRAW


	)

388 
	#BLKID_PROBREQ_TYPE
 
BLKID_SUBLKS_TYPE


	)

389 
	#BLKID_PROBREQ_SECTYPE
 
BLKID_SUBLKS_SECTYPE


	)

390 
	#BLKID_PROBREQ_USAGE
 
BLKID_SUBLKS_USAGE


	)

391 
	#BLKID_PROBREQ_VERSION
 
BLKID_SUBLKS_VERSION


	)

393 
blkid_¥obe_£t_ªque°
(
blkid_¥obe
 
¥
, 
Êags
)

394 
__ul_©åibuã__
((
dïªˇãd
));

396 
blkid_¥obe_fûãr_ußge
(
blkid_¥obe
 
¥
, 
Êag
, 
ußge
)

397 
__ul_©åibuã__
((
dïªˇãd
));

399 
blkid_¥obe_fûãr_ty≥s
(
blkid_¥obe
 
¥
, 
Êag
, *
«mes
[])

400 
__ul_©åibuã__
((
dïªˇãd
));

402 
blkid_¥obe_övît_fûãr
(
blkid_¥obe
 
¥
)

403 
__ul_©åibuã__
((
dïªˇãd
));

405 
blkid_¥obe_ª£t_fûãr
(
blkid_¥obe
 
¥
)

406 
__ul_©åibuã__
((
dïªˇãd
));

410 #ifde‡
__˝lu•lus


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
)

194 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #ifde‡
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #ifde‡
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

78 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


79 
	~<bôs/°©.h
>

81 
	#S_IFMT
 
__S_IFMT


	)

82 
	#S_IFDIR
 
__S_IFDIR


	)

83 
	#S_IFCHR
 
__S_IFCHR


	)

84 
	#S_IFBLK
 
__S_IFBLK


	)

85 
	#S_IFREG
 
__S_IFREG


	)

86 #ifde‡
__S_IFIFO


87 
	#S_IFIFO
 
__S_IFIFO


	)

89 #ifde‡
__S_IFLNK


90 
	#S_IFLNK
 
__S_IFLNK


	)

92 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


93 
	#S_IFSOCK
 
__S_IFSOCK


	)

98 
	#S_ISUID
 
__S_ISUID


	)

99 
	#S_ISGID
 
__S_ISGID


	)

101 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


103 
	#S_ISVTX
 
__S_ISVTX


	)

106 
	#S_IRUSR
 
__S_IREAD


	)

107 
	#S_IWUSR
 
__S_IWRITE


	)

108 
	#S_IXUSR
 
__S_IEXEC


	)

110 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

112 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

113 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

114 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

116 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

118 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

119 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

120 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

122 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

125 #ifdef 
__USE_MISC


126 #i‚de‡
R_OK


129 
	#R_OK
 4

	)

130 
	#W_OK
 2

	)

131 
	#X_OK
 1

	)

132 
	#F_OK
 0

	)

137 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


138 
	#SEEK_SET
 0

	)

139 
	#SEEK_CUR
 1

	)

140 
	#SEEK_END
 2

	)

149 #ifde‡
__USE_ATFILE


150 
	#AT_FDCWD
 -100

	)

153 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

154 
	#AT_REMOVEDIR
 0x200

	)

156 
	#AT_SYMLINK_FOLLOW
 0x400

	)

157 #ifde‡
__USE_GNU


158 
	#AT_NO_AUTOMOUNT
 0x800

	)

160 
	#AT_EMPTY_PATH
 0x1000

	)

162 
	#AT_EACCESS
 0x200

	)

171 
f˙é
 (
__fd
, 
__cmd
, ...);

180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

185 
	`__n⁄nuŒ
 ((1));

187 
	#›í
 
›í64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__USE_ATFILE


204 #i‚de‡
__USE_FILE_OFFSET64


205 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

206 
	`__n⁄nuŒ
 ((2));

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

210 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

212 
	#›í©
 
›í©64


	)

215 #ifde‡
__USE_LARGEFILE64


216 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

217 
	`__n⁄nuŒ
 ((2));

226 #i‚de‡
__USE_FILE_OFFSET64


227 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__REDIRECT


230 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

231 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

233 
	#¸ót
 
¸ót64


	)

236 #ifde‡
__USE_LARGEFILE64


237 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

240 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

241 && !
deföed
 
__USE_POSIX
))

250 
	#F_ULOCK
 0

	)

251 
	#F_LOCK
 1

	)

252 
	#F_TLOCK
 2

	)

253 
	#F_TEST
 3

	)

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

258 #ifde‡
__REDIRECT


259 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

261 
	#lockf
 
lockf64


	)

264 #ifde‡
__USE_LARGEFILE64


265 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

269 #ifde‡
__USE_XOPEN2K


272 #i‚de‡
__USE_FILE_OFFSET64


273 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

274 
__advi£
Ë
__THROW
;

276 #ifde‡
__REDIRECT_NTH


277 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

278 
__off64_t
 
__Àn
, 
__advi£
),

279 
posix_Ádvi£64
);

281 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

284 #ifde‡
__USE_LARGEFILE64


285 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

286 
__advi£
Ë
__THROW
;

294 #i‚de‡
__USE_FILE_OFFSET64


295 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

297 #ifde‡
__REDIRECT


298 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

299 
__off64_t
 
__Àn
),

300 
posix_ÁŒoˇã64
);

302 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

305 #ifde‡
__USE_LARGEFILE64


306 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

312 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

313 && 
deföed
 
__va_¨g_∑ck_Àn


314 
	~<bôs/f˙é2.h
>

317 
__END_DECLS


	@/usr/include/ftw.h

22 #i‚de‡
_FTW_H


23 
	#_FTW_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<sys/ty≥s.h
>

28 
	~<sys/°©.h
>

31 
__BEGIN_DECLS


37 
	mFTW_F
,

38 
	#FTW_F
 
FTW_F


	)

39 
	mFTW_D
,

40 
	#FTW_D
 
FTW_D


	)

41 
	mFTW_DNR
,

42 
	#FTW_DNR
 
FTW_DNR


	)

43 
	mFTW_NS
,

44 
	#FTW_NS
 
FTW_NS


	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


48 
	mFTW_SL
,

49 
	#FTW_SL
 
FTW_SL


	)

52 #ifde‡
__USE_XOPEN_EXTENDED


54 
	mFTW_DP
,

55 
	#FTW_DP
 
FTW_DP


	)

56 
	mFTW_SLN


57 
	#FTW_SLN
 
FTW_SLN


	)

63 #ifde‡
__USE_XOPEN_EXTENDED


67 
	mFTW_PHYS
 = 1,

68 
	#FTW_PHYS
 
FTW_PHYS


	)

69 
	mFTW_MOUNT
 = 2,

71 
	#FTW_MOUNT
 
FTW_MOUNT


	)

72 
	mFTW_CHDIR
 = 4,

73 
	#FTW_CHDIR
 
FTW_CHDIR


	)

74 
	mFTW_DEPTH
 = 8

75 
	#FTW_DEPTH
 
FTW_DEPTH


	)

76 #ifde‡
__USE_GNU


78 
	mFTW_ACTIONRETVAL
 = 16

80 
	#FTW_ACTIONRETVAL
 
FTW_ACTIONRETVAL


	)

84 #ifde‡
__USE_GNU


88 
	mFTW_CONTINUE
 = 0,

90 
	#FTW_CONTINUE
 
FTW_CONTINUE


	)

91 
	mFTW_STOP
 = 1,

93 
	#FTW_STOP
 
FTW_STOP


	)

94 
	mFTW_SKIP_SUBTREE
 = 2,

97 
	#FTW_SKIP_SUBTREE
 
FTW_SKIP_SUBTREE


	)

98 
	mFTW_SKIP_SIBLINGS
 = 3,

100 
	#FTW_SKIP_SIBLINGS
 
FTW_SKIP_SIBLINGS


	)

105 
	sFTW


107 
	mba£
;

108 
	mÀvñ
;

114 (*
	t__·w_func_t
Ë(c⁄° *
	t__fûíame
,

115 c⁄° 
	t°©
 *
	t__°©us
, 
	t__Êag
);

116 #ifde‡
__USE_LARGEFILE64


117 (*
	t__·w64_func_t
Ë(c⁄° *
	t__fûíame
,

118 c⁄° 
	t°©64
 *
	t__°©us
, 
	t__Êag
);

120 #ifde‡
__USE_XOPEN_EXTENDED


121 (*
	t__n·w_func_t
Ë(c⁄° *
	t__fûíame
,

122 c⁄° 
	t°©
 *
	t__°©us
, 
	t__Êag
,

123 
	tFTW
 *
	t__öfo
);

124 #ifde‡
__USE_LARGEFILE64


125 (*
	t__n·w64_func_t
Ë(c⁄° *
	t__fûíame
,

126 c⁄° 
	t°©64
 *
	t__°©us
,

127 
	t__Êag
, 
	tFTW
 *
	t__öfo
);

135 #i‚de‡
__USE_FILE_OFFSET64


136 
	$·w
 (c⁄° *
__dú
, 
__·w_func_t
 
__func
, 
__des¸ùt‹s
)

137 
	`__n⁄nuŒ
 ((1, 2));

139 #ifde‡
__REDIRECT


140 
	`__REDIRECT
 (
·w
, (c⁄° *
__dú
, 
__·w_func_t
 
__func
,

141 
__des¸ùt‹s
), 
·w64
Ë
	`__n⁄nuŒ
 ((1, 2));

143 
	#·w
 
·w64


	)

146 #ifde‡
__USE_LARGEFILE64


147 
	$·w64
 (c⁄° *
__dú
, 
__·w64_func_t
 
__func
,

148 
__des¸ùt‹s
Ë
	`__n⁄nuŒ
 ((1, 2));

151 #ifde‡
__USE_XOPEN_EXTENDED


157 #i‚de‡
__USE_FILE_OFFSET64


158 
	$n·w
 (c⁄° *
__dú
, 
__n·w_func_t
 
__func
, 
__des¸ùt‹s
,

159 
__Êag
Ë
	`__n⁄nuŒ
 ((1, 2));

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
n·w
, (c⁄° *
__dú
, 
__n·w_func_t
 
__func
,

163 
__des¸ùt‹s
, 
__Êag
), 
n·w64
)

164 
	`__n⁄nuŒ
 ((1, 2));

166 
	#n·w
 
n·w64


	)

169 #ifde‡
__USE_LARGEFILE64


170 
	$n·w64
 (c⁄° *
__dú
, 
__n·w64_func_t
 
__func
,

171 
__des¸ùt‹s
, 
__Êag
Ë
	`__n⁄nuŒ
 ((1, 2));

175 
__END_DECLS


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/grp.h

22 #i‚def 
_GRP_H


23 
	#_GRP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

36 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

42 
	sgroup


44 *
	mgr_«me
;

45 *
	mgr_∑sswd
;

46 
__gid_t
 
	mgr_gid
;

47 **
	mgr_mem
;

51 #ifde‡
__USE_MISC


52 
	#__√ed_FILE


	)

53 
	~<°dio.h
>

57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


62 
£tgª¡
 ();

68 
ídgª¡
 ();

74 
group
 *
gëgª¡
 ();

77 #ifdef 
__USE_MISC


84 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

87 #ifde‡
__USE_GNU


94 
putgª¡
 (c⁄° 
group
 *
__ª°ri˘
 
__p
,

95 
FILE
 *
__ª°ri˘
 
__f
);

102 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

108 
group
 *
gëg∫am
 (c⁄° *
__«me
);

110 #ifde‡
__USE_POSIX


112 #ifde‡
__USE_MISC


115 
	#NSS_BUFLEN_GROUP
 1024

	)

131 #ifde‡
__USE_GNU


132 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

133 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

134 
group
 **
__ª°ri˘
 
__ªsu…
);

141 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

142 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

143 
group
 **
__ª°ri˘
 
__ªsu…
);

149 
gëg∫am_r
 (c⁄° *
__ª°ri˘
 
__«me
,

150 
group
 *
__ª°ri˘
 
__ªsu…buf
,

151 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

152 
group
 **
__ª°ri˘
 
__ªsu…
);

154 #ifdef 
__USE_MISC


162 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

163 
group
 *
__ª°ri˘
 
__ªsu…buf
,

164 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

165 
group
 **
__ª°ri˘
 
__ªsu…
);

171 #ifdef 
__USE_MISC


173 
	#__√ed_size_t


	)

174 
	~<°ddef.h
>

177 
	$£tgroups
 (
size_t
 
__n
, c⁄° 
__gid_t
 *
__groups
Ë
__THROW
;

187 
	`gëgrou∂i°
 (c⁄° *
__u£r
, 
__gid_t
 
__group
,

188 
__gid_t
 *
__groups
, *
__ngroups
);

198 
	`öôgroups
 (c⁄° *
__u£r
, 
__gid_t
 
__group
);

202 
__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/falloc.h

1 #i‚de‡
_FALLOC_H_


2 
	#_FALLOC_H_


	)

4 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

5 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

6 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

28 
	#FALLOC_FL_COLLAPSE_RANGE
 0x08

	)

42 
	#FALLOC_FL_ZERO_RANGE
 0x10

	)

59 
	#FALLOC_FL_INSERT_RANGE
 0x20

	)

77 
	#FALLOC_FL_UNSHARE_RANGE
 0x40

	)

	@/usr/include/linux/fiemap.h

11 #i‚de‡
_LINUX_FIEMAP_H


12 
	#_LINUX_FIEMAP_H


	)

14 
	~<löux/ty≥s.h
>

16 
	sfõm≠_exã¡
 {

17 
__u64
 
	m„_logiˇl
;

19 
__u64
 
	m„_physiˇl
;

21 
__u64
 
	m„_Àngth
;

22 
__u64
 
	m„_ª£rved64
[2];

23 
__u32
 
	m„_Êags
;

24 
__u32
 
	m„_ª£rved
[3];

27 
	sfõm≠
 {

28 
__u64
 
	mfm_°¨t
;

30 
__u64
 
	mfm_Àngth
;

32 
__u32
 
	mfm_Êags
;

33 
__u32
 
	mfm_m≠≥d_exã¡s
;

34 
__u32
 
	mfm_exã¡_cou¡
;

35 
__u32
 
	mfm_ª£rved
;

36 
fõm≠_exã¡
 
	mfm_exã¡s
[0];

39 
	#FIEMAP_MAX_OFFSET
 (~0ULL)

	)

41 
	#FIEMAP_FLAG_SYNC
 0x00000001

	)

42 
	#FIEMAP_FLAG_XATTR
 0x00000002

	)

43 
	#FIEMAP_FLAG_CACHE
 0x00000004

	)

45 
	#FIEMAP_FLAGS_COMPAT
 (
FIEMAP_FLAG_SYNC
 | 
FIEMAP_FLAG_XATTR
)

	)

47 
	#FIEMAP_EXTENT_LAST
 0x00000001

	)

48 
	#FIEMAP_EXTENT_UNKNOWN
 0x00000002

	)

49 
	#FIEMAP_EXTENT_DELALLOC
 0x00000004

	)

51 
	#FIEMAP_EXTENT_ENCODED
 0x00000008

	)

53 
	#FIEMAP_EXTENT_DATA_ENCRYPTED
 0x00000080

	)

55 
	#FIEMAP_EXTENT_NOT_ALIGNED
 0x00000100

	)

57 
	#FIEMAP_EXTENT_DATA_INLINE
 0x00000200

	)

59 
	#FIEMAP_EXTENT_DATA_TAIL
 0x00000400

	)

61 
	#FIEMAP_EXTENT_UNWRITTEN
 0x00000800

	)

63 
	#FIEMAP_EXTENT_MERGED
 0x00001000

	)

66 
	#FIEMAP_EXTENT_SHARED
 0x00002000

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

12 
	~<löux/limôs.h
>

13 
	~<löux/io˘l.h
>

14 
	~<löux/ty≥s.h
>

27 #unde‡
NR_OPEN


28 
	#INR_OPEN_CUR
 1024

	)

29 
	#INR_OPEN_MAX
 4096

	)

31 
	#BLOCK_SIZE_BITS
 10

	)

32 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

34 
	#SEEK_SET
 0

	)

35 
	#SEEK_CUR
 1

	)

36 
	#SEEK_END
 2

	)

37 
	#SEEK_DATA
 3

	)

38 
	#SEEK_HOLE
 4

	)

39 
	#SEEK_MAX
 
SEEK_HOLE


	)

41 
	#RENAME_NOREPLACE
 (1 << 0Ë

	)

42 
	#RENAME_EXCHANGE
 (1 << 1Ë

	)

43 
	#RENAME_WHITEOUT
 (1 << 2Ë

	)

45 
	sfûe_˛⁄e_ønge
 {

46 
__s64
 
	m§c_fd
;

47 
__u64
 
	m§c_off£t
;

48 
__u64
 
	m§c_Àngth
;

49 
__u64
 
	mde°_off£t
;

52 
	sf°rim_ønge
 {

53 
__u64
 
	m°¨t
;

54 
__u64
 
	mÀn
;

55 
__u64
 
	mmöÀn
;

59 
	#FILE_DEDUPE_RANGE_SAME
 0

	)

60 
	#FILE_DEDUPE_RANGE_DIFFERS
 1

	)

63 
	sfûe_dedu≥_ønge_öfo
 {

64 
__s64
 
	mde°_fd
;

65 
__u64
 
	mde°_off£t
;

66 
__u64
 
	mbyãs_dedu≥d
;

73 
__s32
 
	m°©us
;

74 
__u32
 
	mª£rved
;

78 
	sfûe_dedu≥_ønge
 {

79 
__u64
 
	m§c_off£t
;

80 
__u64
 
	m§c_Àngth
;

81 
__u16
 
	mde°_cou¡
;

82 
__u16
 
	mª£rved1
;

83 
__u32
 
	mª£rved2
;

84 
fûe_dedu≥_ønge_öfo
 
	möfo
[0];

88 
	sfûes_°©_°ru˘
 {

89 
	mƒ_fûes
;

90 
	mƒ_‰ì_fûes
;

91 
	mmax_fûes
;

94 
	söodes_°©_t
 {

95 
	mƒ_öodes
;

96 
	mƒ_unu£d
;

97 
	mdummy
[5];

101 
	#NR_FILE
 8192

	)

107 
	#MS_RDONLY
 1

	)

108 
	#MS_NOSUID
 2

	)

109 
	#MS_NODEV
 4

	)

110 
	#MS_NOEXEC
 8

	)

111 
	#MS_SYNCHRONOUS
 16

	)

112 
	#MS_REMOUNT
 32

	)

113 
	#MS_MANDLOCK
 64

	)

114 
	#MS_DIRSYNC
 128

	)

115 
	#MS_NOATIME
 1024

	)

116 
	#MS_NODIRATIME
 2048

	)

117 
	#MS_BIND
 4096

	)

118 
	#MS_MOVE
 8192

	)

119 
	#MS_REC
 16384

	)

120 
	#MS_VERBOSE
 32768

	)

122 
	#MS_SILENT
 32768

	)

123 
	#MS_POSIXACL
 (1<<16Ë

	)

124 
	#MS_UNBINDABLE
 (1<<17Ë

	)

125 
	#MS_PRIVATE
 (1<<18Ë

	)

126 
	#MS_SLAVE
 (1<<19Ë

	)

127 
	#MS_SHARED
 (1<<20Ë

	)

128 
	#MS_RELATIME
 (1<<21Ë

	)

129 
	#MS_KERNMOUNT
 (1<<22Ë

	)

130 
	#MS_I_VERSION
 (1<<23Ë

	)

131 
	#MS_STRICTATIME
 (1<<24Ë

	)

132 
	#MS_LAZYTIME
 (1<<25Ë

	)

135 
	#MS_SUBMOUNT
 (1<<26)

	)

136 
	#MS_NOREMOTELOCK
 (1<<27)

	)

137 
	#MS_NOSEC
 (1<<28)

	)

138 
	#MS_BORN
 (1<<29)

	)

139 
	#MS_ACTIVE
 (1<<30)

	)

140 
	#MS_NOUSER
 (1<<31)

	)

145 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
|\

146 
MS_LAZYTIME
)

	)

151 
	#MS_MGC_VAL
 0xC0ED0000

	)

152 
	#MS_MGC_MSK
 0xffff0000

	)

157 
	sfsx©å
 {

158 
__u32
 
	mfsx_xÊags
;

159 
__u32
 
	mfsx_extsize
;

160 
__u32
 
	mfsx_√xã¡s
;

161 
__u32
 
	mfsx_¥ojid
;

162 
__u32
 
	mfsx_cowextsize
;

163 
	mfsx_∑d
[8];

169 
	#FS_XFLAG_REALTIME
 0x00000001

	)

170 
	#FS_XFLAG_PREALLOC
 0x00000002

	)

171 
	#FS_XFLAG_IMMUTABLE
 0x00000008

	)

172 
	#FS_XFLAG_APPEND
 0x00000010

	)

173 
	#FS_XFLAG_SYNC
 0x00000020

	)

174 
	#FS_XFLAG_NOATIME
 0x00000040

	)

175 
	#FS_XFLAG_NODUMP
 0x00000080

	)

176 
	#FS_XFLAG_RTINHERIT
 0x00000100

	)

177 
	#FS_XFLAG_PROJINHERIT
 0x00000200

	)

178 
	#FS_XFLAG_NOSYMLINKS
 0x00000400

	)

179 
	#FS_XFLAG_EXTSIZE
 0x00000800

	)

180 
	#FS_XFLAG_EXTSZINHERIT
 0x00001000

	)

181 
	#FS_XFLAG_NODEFRAG
 0x00002000

	)

182 
	#FS_XFLAG_FILESTREAM
 0x00004000

	)

183 
	#FS_XFLAG_DAX
 0x00008000

	)

184 
	#FS_XFLAG_COWEXTSIZE
 0x00010000

	)

185 
	#FS_XFLAG_HASATTR
 0x80000000

	)

190 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

191 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

192 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

193 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

194 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

195 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

196 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

197 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

198 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

199 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

200 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

201 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

203 
	#BLKPG
 
	`_IO
(0x12,105)

	)

207 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

208 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

213 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

214 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

215 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

216 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

217 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

218 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

219 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

220 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

221 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

222 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

223 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

224 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

225 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

226 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

227 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

228 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

234 
	#BMAP_IOCTL
 1

	)

235 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

236 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

237 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

238 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

239 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

240 
	#FICLONE
 
	`_IOW
(0x94, 9, )

	)

241 
	#FICLONERANGE
 
	`_IOW
(0x94, 13, 
fûe_˛⁄e_ønge
)

	)

242 
	#FIDEDUPERANGE
 
	`_IOWR
(0x94, 54, 
fûe_dedu≥_ønge
)

	)

244 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

245 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

246 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

247 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

248 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

249 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

250 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

251 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

252 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

253 
	#FS_IOC_FSGETXATTR
 
	`_IOR
 ('X', 31, 
fsx©å
)

	)

254 
	#FS_IOC_FSSETXATTR
 
	`_IOW
 ('X', 32, 
fsx©å
)

	)

260 
	#FS_KEY_DESCRIPTOR_SIZE
 8

	)

262 
	#FS_POLICY_FLAGS_PAD_4
 0x00

	)

263 
	#FS_POLICY_FLAGS_PAD_8
 0x01

	)

264 
	#FS_POLICY_FLAGS_PAD_16
 0x02

	)

265 
	#FS_POLICY_FLAGS_PAD_32
 0x03

	)

266 
	#FS_POLICY_FLAGS_PAD_MASK
 0x03

	)

267 
	#FS_POLICY_FLAGS_VALID
 0x03

	)

270 
	#FS_ENCRYPTION_MODE_INVALID
 0

	)

271 
	#FS_ENCRYPTION_MODE_AES_256_XTS
 1

	)

272 
	#FS_ENCRYPTION_MODE_AES_256_GCM
 2

	)

273 
	#FS_ENCRYPTION_MODE_AES_256_CBC
 3

	)

274 
	#FS_ENCRYPTION_MODE_AES_256_CTS
 4

	)

276 
	sfs¸y±_pﬁicy
 {

277 
__u8
 
	mvîsi⁄
;

278 
__u8
 
	mc⁄ã¡s_í¸y±i⁄_mode
;

279 
__u8
 
	mfûíames_í¸y±i⁄_mode
;

280 
__u8
 
	mÊags
;

281 
__u8
 
	mma°î_key_des¸ùt‹
[
FS_KEY_DESCRIPTOR_SIZE
];

282 } 
__©åibuã__
((
∑cked
));

284 
	#FS_IOC_SET_ENCRYPTION_POLICY
 
	`_IOR
('f', 19, 
fs¸y±_pﬁicy
)

	)

285 
	#FS_IOC_GET_ENCRYPTION_PWSALT
 
	`_IOW
('f', 20, 
__u8
[16])

	)

286 
	#FS_IOC_GET_ENCRYPTION_POLICY
 
	`_IOW
('f', 21, 
fs¸y±_pﬁicy
)

	)

308 
	#FS_SECRM_FL
 0x00000001

	)

309 
	#FS_UNRM_FL
 0x00000002

	)

310 
	#FS_COMPR_FL
 0x00000004

	)

311 
	#FS_SYNC_FL
 0x00000008

	)

312 
	#FS_IMMUTABLE_FL
 0x00000010

	)

313 
	#FS_APPEND_FL
 0x00000020

	)

314 
	#FS_NODUMP_FL
 0x00000040

	)

315 
	#FS_NOATIME_FL
 0x00000080

	)

317 
	#FS_DIRTY_FL
 0x00000100

	)

318 
	#FS_COMPRBLK_FL
 0x00000200

	)

319 
	#FS_NOCOMP_FL
 0x00000400

	)

321 
	#FS_ENCRYPT_FL
 0x00000800

	)

322 
	#FS_BTREE_FL
 0x00001000

	)

323 
	#FS_INDEX_FL
 0x00001000

	)

324 
	#FS_IMAGIC_FL
 0x00002000

	)

325 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

326 
	#FS_NOTAIL_FL
 0x00008000

	)

327 
	#FS_DIRSYNC_FL
 0x00010000

	)

328 
	#FS_TOPDIR_FL
 0x00020000

	)

329 
	#FS_HUGE_FILE_FL
 0x00040000

	)

330 
	#FS_EXTENT_FL
 0x00080000

	)

331 
	#FS_EA_INODE_FL
 0x00200000

	)

332 
	#FS_EOFBLOCKS_FL
 0x00400000

	)

333 
	#FS_NOCOW_FL
 0x00800000

	)

334 
	#FS_INLINE_DATA_FL
 0x10000000

	)

335 
	#FS_PROJINHERIT_FL
 0x20000000

	)

336 
	#FS_RESERVED_FL
 0x80000000

	)

338 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

339 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

342 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

343 
	#SYNC_FILE_RANGE_WRITE
 2

	)

344 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

347 
	#RWF_HIPRI
 0x00000001

	)

348 
	#RWF_DSYNC
 0x00000002

	)

349 
	#RWF_SYNC
 0x00000004

	)

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

145 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

147 
__MALLOC_DEPRECATED
;

148 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

150 
__MALLOC_DEPRECATED
;

151 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

152 
size_t
 
__size
,

154 
__MALLOC_DEPRECATED
;

155 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

156 
size_t
 
__size
,

158 
__MALLOC_DEPRECATED
;

159 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

162 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

165 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/mntent.h

19 #i‚def 
_MNTENT_H


20 
	#_MNTENT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_FILE


	)

24 
	~<°dio.h
>

25 
	~<∑ths.h
>

29 
	#MNTTAB
 
_PATH_MNTTAB


	)

32 
	#MOUNTED
 
_PATH_MOUNTED


	)

36 
	#MNTTYPE_IGNORE
 "ign‹e"

	)

37 
	#MNTTYPE_NFS
 "nfs"

	)

38 
	#MNTTYPE_SWAP
 "sw≠"

	)

42 
	#MNTOPT_DEFAULTS
 "deÁu…s"

	)

43 
	#MNTOPT_RO
 "ro"

	)

44 
	#MNTOPT_RW
 "rw"

	)

45 
	#MNTOPT_SUID
 "suid"

	)

46 
	#MNTOPT_NOSUID
 "nosuid"

	)

47 
	#MNTOPT_NOAUTO
 "nﬂuto"

	)

50 
__BEGIN_DECLS


53 
	sm¡ít


55 *
	mm¡_f¢ame
;

56 *
	mm¡_dú
;

57 *
	mm¡_ty≥
;

58 *
	mm¡_›ts
;

59 
	mm¡_‰eq
;

60 
	mm¡_∑s¢o
;

66 
FILE
 *
	$£tm¡ít
 (c⁄° *
__fûe
, c⁄° *
__mode
Ë
__THROW
;

71 
m¡ít
 *
	$gëm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

73 #ifde‡
__USE_MISC


75 
m¡ít
 *
	$gëm¡ít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

76 
m¡ít
 *
__ª°ri˘
 
__ªsu…
,

77 *
__ª°ri˘
 
__buf„r
,

78 
__bufsize
Ë
__THROW
;

83 
	$addm¡ít
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

84 c⁄° 
m¡ít
 *
__ª°ri˘
 
__m¡
Ë
__THROW
;

87 
	$ídm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

91 *
	$hasm¡›t
 (c⁄° 
m¡ít
 *
__m¡
,

92 c⁄° *
__›t
Ë
__THROW
;

95 
__END_DECLS


	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/db/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #ifde‡
__USE_MISC


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_MISC


94 
∑sswd
 *
	$fgëpwít
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

102 
	`puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
	`gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
	$gëpw«m
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

118 #ifde‡
__USE_POSIX


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #ifde‡
__USE_MISC


139 
	$gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

142 
	`__n⁄nuŒ
 ((1, 2, 4));

145 
	$gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

149 
	`__n⁄nuŒ
 ((2, 3, 5));

151 
	$gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

152 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

153 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

154 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

155 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

158 #ifdef 
__USE_MISC


166 
	$fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

167 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

168 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

169 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

170 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

175 #ifde‡
__USE_GNU


184 
	`gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

187 
__END_DECLS


	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

102 #ifde‡
__USE_XOPEN2K8


103 #i‚de‡
__ssize_t_deföed


104 
__ssize_t
 
	tssize_t
;

105 
	#__ssize_t_deföed


	)

110 
__BEGIN_NAMESPACE_STD


111 #i‚de‡
__USE_FILE_OFFSET64


112 
_G_Âos_t
 
	tÂos_t
;

114 
_G_Âos64_t
 
	tÂos_t
;

116 
__END_NAMESPACE_STD


117 #ifde‡
__USE_LARGEFILE64


118 
_G_Âos64_t
 
	tÂos64_t
;

122 
	#_IOFBF
 0

	)

123 
	#_IOLBF
 1

	)

124 
	#_IONBF
 2

	)

128 #i‚de‡
BUFSIZ


129 
	#BUFSIZ
 
_IO_BUFSIZ


	)

135 #i‚de‡
EOF


136 
	#EOF
 (-1)

	)

142 
	#SEEK_SET
 0

	)

143 
	#SEEK_CUR
 1

	)

144 
	#SEEK_END
 2

	)

145 #ifde‡
__USE_GNU


146 
	#SEEK_DATA
 3

	)

147 
	#SEEK_HOLE
 4

	)

151 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


153 
	#P_tmpdú
 "/tmp"

	)

166 
	~<bôs/°dio_lim.h
>

170 
_IO_FILE
 *
°dö
;

171 
_IO_FILE
 *
°dout
;

172 
_IO_FILE
 *
°dîr
;

174 
	#°dö
 
°dö


	)

175 
	#°dout
 
°dout


	)

176 
	#°dîr
 
°dîr


	)

178 
__BEGIN_NAMESPACE_STD


180 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

182 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

183 
__END_NAMESPACE_STD


185 #ifde‡
__USE_ATFILE


187 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

188 c⁄° *
__√w
Ë
__THROW
;

191 
__BEGIN_NAMESPACE_STD


196 #i‚de‡
__USE_FILE_OFFSET64


197 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

199 #ifde‡
__REDIRECT


200 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

202 
	#tmpfûe
 
tmpfûe64


	)

206 #ifde‡
__USE_LARGEFILE64


207 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

211 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


217 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

221 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


229 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

230 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

234 
__BEGIN_NAMESPACE_STD


239 
	`f˛o£
 (
FILE
 *
__°ªam
);

244 
	`fÊush
 (
FILE
 *
__°ªam
);

245 
__END_NAMESPACE_STD


247 #ifde‡
__USE_MISC


254 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

257 #ifde‡
__USE_GNU


264 
	`f˛o£Æl
 ();

268 
__BEGIN_NAMESPACE_STD


269 #i‚de‡
__USE_FILE_OFFSET64


274 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

275 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

280 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

281 c⁄° *
__ª°ri˘
 
__modes
,

282 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

284 #ifde‡
__REDIRECT


285 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

286 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

287 
__wur
;

288 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

289 c⁄° *
__ª°ri˘
 
__modes
,

290 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

291 
__wur
;

293 
	#f›í
 
f›í64


	)

294 
	#‰e›í
 
‰e›í64


	)

297 
__END_NAMESPACE_STD


298 #ifde‡
__USE_LARGEFILE64


299 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

301 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

302 c⁄° *
__ª°ri˘
 
__modes
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

306 #ifdef 
__USE_POSIX


308 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

311 #ifdef 
__USE_GNU


314 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

315 c⁄° *
__ª°ri˘
 
__modes
,

316 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

319 #ifde‡
__USE_XOPEN2K8


321 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

322 
__THROW
 
__wur
;

327 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

331 
__BEGIN_NAMESPACE_STD


334 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

338 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
__modes
, 
size_t
 
__n
Ë
__THROW
;

340 
__END_NAMESPACE_STD


342 #ifdef 
__USE_MISC


345 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

346 
size_t
 
__size
Ë
__THROW
;

349 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

353 
__BEGIN_NAMESPACE_STD


358 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

366 
	$•rötf
 (*
__ª°ri˘
 
__s
,

367 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

373 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
_G_va_li°
 
__¨g
);

379 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

381 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

382 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

383 
__END_NAMESPACE_STD


385 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


386 
__BEGIN_NAMESPACE_C99


388 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

389 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

390 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

392 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

393 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

394 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

395 
__END_NAMESPACE_C99


398 #ifde‡
__USE_GNU


401 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

402 
_G_va_li°
 
__¨g
)

403 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

404 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

405 c⁄° *
__ª°ri˘
 
__fmt
, ...)

406 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

408 c⁄° *
__ª°ri˘
 
__fmt
, ...)

409 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

412 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

436 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

451 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

458 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

486 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (c⁄° *
__ª°ri˘
 
__s
,

506 c⁄° *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

516 c⁄° *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #ifde‡
__USE_POSIX199506


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #ifde‡
__USE_POSIX199506


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

627 #i‡!
deföed
 
__USE_ISOC11
 \

628 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

640 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

642 
__END_NAMESPACE_STD


644 #ifde‡
__USE_GNU


651 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

652 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

656 #ifdef 
__USE_XOPEN2K8


667 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

668 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

669 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

670 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

671 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

672 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

680 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

681 
size_t
 *
__ª°ri˘
 
__n
,

682 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

686 
__BEGIN_NAMESPACE_STD


691 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

697 
	`puts
 (c⁄° *
__s
);

704 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

711 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

712 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

717 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

718 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

719 
__END_NAMESPACE_STD


721 #ifde‡
__USE_GNU


728 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

729 
FILE
 *
__ª°ri˘
 
__°ªam
);

732 #ifde‡
__USE_MISC


739 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

741 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

742 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

746 
__BEGIN_NAMESPACE_STD


751 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

756 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

761 
	`ªwöd
 (
FILE
 *
__°ªam
);

762 
__END_NAMESPACE_STD


769 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


770 #i‚de‡
__USE_FILE_OFFSET64


775 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

780 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

782 #ifde‡
__REDIRECT


783 
	`__REDIRECT
 (
f£eko
,

784 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

785 
f£eko64
);

786 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

788 
	#f£eko
 
f£eko64


	)

789 
	#·ñlo
 
·ñlo64


	)

794 
__BEGIN_NAMESPACE_STD


795 #i‚de‡
__USE_FILE_OFFSET64


800 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

805 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

807 #ifde‡
__REDIRECT


808 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

809 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

810 
	`__REDIRECT
 (
f£ços
,

811 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

813 
	#fgëpos
 
fgëpos64


	)

814 
	#f£ços
 
f£ços64


	)

817 
__END_NAMESPACE_STD


819 #ifde‡
__USE_LARGEFILE64


820 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

821 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

822 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

823 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

826 
__BEGIN_NAMESPACE_STD


828 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

830 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

832 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

833 
__END_NAMESPACE_STD


835 #ifde‡
__USE_MISC


837 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

838 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

839 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

843 
__BEGIN_NAMESPACE_STD


848 
	`≥º‹
 (c⁄° *
__s
);

849 
__END_NAMESPACE_STD


855 
	~<bôs/sys_îæi°.h
>

858 #ifdef 
__USE_POSIX


860 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

863 #ifde‡
__USE_MISC


865 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

869 #ifde‡
__USE_POSIX2


874 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

880 
	`p˛o£
 (
FILE
 *
__°ªam
);

884 #ifdef 
__USE_POSIX


886 *
	$˘îmid
 (*
__s
Ë
__THROW
;

890 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


892 *
	`cu£rid
 (*
__s
);

896 #ifdef 
__USE_GNU


897 
ob°ack
;

900 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

901 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

903 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

904 c⁄° *
__ª°ri˘
 
__f‹m©
,

905 
_G_va_li°
 
__¨gs
)

906 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

910 #ifde‡
__USE_POSIX199506


914 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

918 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

921 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

924 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


928 
	#__√ed_gë›t


	)

929 
	~<gë›t.h
>

934 #ifde‡
__USE_EXTERN_INLINES


935 
	~<bôs/°dio.h
>

937 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


938 
	~<bôs/°dio2.h
>

940 #ifde‡
__LDBL_COMPAT


941 
	~<bôs/°dio-ldbl.h
>

944 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

45 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

46 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

47 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

48 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

49 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

50 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

51 #ifde‡
__WIFCONTINUED


52 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
__BEGIN_NAMESPACE_STD


60 
	mquŸ
;

61 
	mªm
;

62 } 
	tdiv_t
;

65 #i‚de‡
__ldiv_t_deföed


68 
	mquŸ
;

69 
	mªm
;

70 } 
	tldiv_t
;

71 
	#__ldiv_t_deföed
 1

	)

73 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


76 
__BEGIN_NAMESPACE_C99


78 
__exãnsi⁄__
 struct

80 
	mquŸ
;

81 
	mªm
;

82 } 
	tŒdiv_t
;

83 
	#__Œdiv_t_deföed
 1

	)

84 
	g__END_NAMESPACE_C99


89 
	#RAND_MAX
 2147483647

	)

94 
	#EXIT_FAILURE
 1

	)

95 
	#EXIT_SUCCESS
 0

	)

99 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

100 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

103 
__BEGIN_NAMESPACE_STD


105 
	$©of
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©oi
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 
	$©ﬁ
 (c⁄° *
__≈å
)

112 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_ISOC99


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

119 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

120 
__END_NAMESPACE_C99


123 
__BEGIN_NAMESPACE_STD


125 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

126 **
__ª°ri˘
 
__íd±r
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1));

128 
__END_NAMESPACE_STD


130 #ifdef 
__USE_ISOC99


131 
__BEGIN_NAMESPACE_C99


133 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

134 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

136 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

137 **
__ª°ri˘
 
__íd±r
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1));

139 
__END_NAMESPACE_C99


142 
__BEGIN_NAMESPACE_STD


144 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

145 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

148 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

149 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1));

151 
__END_NAMESPACE_STD


153 #ifde‡
__USE_MISC


155 
__exãnsi⁄__


156 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

157 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

158 
__THROW
 
	`__n⁄nuŒ
 ((1));

160 
__exãnsi⁄__


161 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

162 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__exãnsi⁄__


170 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

171 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

172 
__THROW
 
	`__n⁄nuŒ
 ((1));

174 
__exãnsi⁄__


175 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


182 #ifde‡
__USE_GNU


196 
	~<xloˇÀ.h
>

200 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

202 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

204 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

205 **
__ª°ri˘
 
__íd±r
,

206 
__ba£
, 
__loˇÀ_t
 
__loc
)

207 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

209 
__exãnsi⁄__


210 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

212 
__loˇÀ_t
 
__loc
)

213 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

215 
__exãnsi⁄__


216 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

217 **
__ª°ri˘
 
__íd±r
,

218 
__ba£
, 
__loˇÀ_t
 
__loc
)

219 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

221 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

222 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

223 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

225 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

226 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

227 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

229 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

230 **
__ª°ri˘
 
__íd±r
,

231 
__loˇÀ_t
 
__loc
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

236 #ifde‡
__USE_EXTERN_INLINES


237 
__BEGIN_NAMESPACE_STD


238 
__exã∫_ölöe
 

239 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

241  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

242 
	}
}

243 
__exã∫_ölöe
 

244 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

246  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

247 
	}
}

248 
	g__END_NAMESPACE_STD


250 #ifde‡
__USE_ISOC99


251 
__BEGIN_NAMESPACE_C99


252 
__exãnsi⁄__
 
__exã∫_ölöe
 

253 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

255  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

256 
	}
}

257 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


266 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

269 
	$a64l
 (c⁄° *
__s
)

270 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

274 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


275 
	~<sys/ty≥s.h
>

282 
	$øndom
 (Ë
__THROW
;

285 
	$§™dom
 (
__£ed
Ë
__THROW
;

291 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

292 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

296 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 #ifde‡
__USE_MISC


304 
	søndom_d©a


306 
öt32_t
 *
Âå
;

307 
öt32_t
 *
Ωå
;

308 
öt32_t
 *
°©e
;

309 
ønd_ty≥
;

310 
ønd_deg
;

311 
ønd_£p
;

312 
öt32_t
 *
íd_±r
;

315 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

316 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

319 
__THROW
 
	`__n⁄nuŒ
 ((2));

321 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

322 
size_t
 
__°©ñí
,

323 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

324 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

326 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

327 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

333 
__BEGIN_NAMESPACE_STD


335 
	$ønd
 (Ë
__THROW
;

337 
	$§™d
 (
__£ed
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifde‡
__USE_POSIX199506


342 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

346 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


350 
	$dønd48
 (Ë
__THROW
;

351 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

354 
	$Ã™d48
 (Ë
__THROW
;

355 
	$ƒ™d48
 (
__xsubi
[3])

356 
__THROW
 
	`__n⁄nuŒ
 ((1));

359 
	$mønd48
 (Ë
__THROW
;

360 
	$jønd48
 (
__xsubi
[3])

361 
__THROW
 
	`__n⁄nuŒ
 ((1));

364 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

365 *
	$£ed48
 (
__£ed16v
[3])

366 
__THROW
 
	`__n⁄nuŒ
 ((1));

367 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

369 #ifde‡
__USE_MISC


373 
	sdønd48_d©a


375 
__x
[3];

376 
__ﬁd_x
[3];

377 
__c
;

378 
__öô
;

379 
__exãnsi⁄__
 
__a
;

384 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

385 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$î™d48_r
 (
__xsubi
[3],

387 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

388 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

392 *
__ª°ri˘
 
__ªsu…
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

394 
	$ƒ™d48_r
 (
__xsubi
[3],

395 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

396 *
__ª°ri˘
 
__ªsu…
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

401 *
__ª°ri˘
 
__ªsu…
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

403 
	$jønd48_r
 (
__xsubi
[3],

404 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

405 *
__ª°ri˘
 
__ªsu…
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

409 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

410 
__THROW
 
	`__n⁄nuŒ
 ((2));

412 
	$£ed48_r
 (
__£ed16v
[3],

413 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

415 
	$lc⁄g48_r
 (
__∑øm
[7],

416 
dønd48_d©a
 *
__buf„r
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

423 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


424 
	#__mÆloc_™d_ˇŒoc_deföed


	)

425 
__BEGIN_NAMESPACE_STD


427 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

429 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

430 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

431 
__END_NAMESPACE_STD


434 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


435 
__BEGIN_NAMESPACE_STD


441 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

442 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

444 
	$‰ì
 (*
__±r
Ë
__THROW
;

445 
__END_NAMESPACE_STD


447 #ifdef 
__USE_MISC


449 
	$c‰ì
 (*
__±r
Ë
__THROW
;

452 #ifde‡
__USE_MISC


453 
	~<Æloˇ.h
>

456 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

457 || 
deföed
 
__USE_MISC


459 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

462 #ifde‡
__USE_XOPEN2K


464 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

465 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

468 #ifde‡
__USE_ISOC11


470 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

471 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

474 
__BEGIN_NAMESPACE_STD


476 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

480 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

482 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


484 #ifde‡
__˝lu•lus


485 "C++" 
	`©_quick_exô
 ((*
__func
) ())

486 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

488 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

491 
__END_NAMESPACE_STD


493 #ifdef 
__USE_MISC


496 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

497 
__THROW
 
	`__n⁄nuŒ
 ((1));

500 
__BEGIN_NAMESPACE_STD


504 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

506 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


510 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

512 
__END_NAMESPACE_STD


514 #ifde‡
__USE_ISOC99


515 
__BEGIN_NAMESPACE_C99


518 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
__END_NAMESPACE_C99


523 
__BEGIN_NAMESPACE_STD


525 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

526 
__END_NAMESPACE_STD


528 #ifde‡
__USE_GNU


531 *
	$£cuª_gëív
 (c⁄° *
__«me
)

532 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

535 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


539 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

542 #ifde‡
__USE_XOPEN2K


545 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

546 
__THROW
 
	`__n⁄nuŒ
 ((2));

549 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

552 #ifdef 
__USE_MISC


556 
	$˛óªnv
 (Ë
__THROW
;

560 #i‡
deföed
 
__USE_MISC
 \

561 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

567 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

570 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


579 #i‚de‡
__USE_FILE_OFFSET64


580 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

582 #ifde‡
__REDIRECT


583 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

584 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

586 
	#mk°emp
 
mk°emp64


	)

589 #ifde‡
__USE_LARGEFILE64


590 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

594 #ifde‡
__USE_MISC


601 #i‚de‡
__USE_FILE_OFFSET64


602 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

604 #ifde‡
__REDIRECT


605 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

606 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

608 
	#mk°emps
 
mk°emps64


	)

611 #ifde‡
__USE_LARGEFILE64


612 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

613 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__USE_XOPEN2K8


623 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 #ifde‡
__USE_GNU


633 #i‚de‡
__USE_FILE_OFFSET64


634 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

636 #ifde‡
__REDIRECT


637 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

638 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

640 
	#mko°emp
 
mko°emp64


	)

643 #ifde‡
__USE_LARGEFILE64


644 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

653 #i‚de‡
__USE_FILE_OFFSET64


654 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

655 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #ifde‡
__REDIRECT


658 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

659 
__Êags
), 
mko°emps64
)

660 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

662 
	#mko°emps
 
mko°emps64


	)

665 #ifde‡
__USE_LARGEFILE64


666 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

667 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

672 
__BEGIN_NAMESPACE_STD


677 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

678 
__END_NAMESPACE_STD


681 #ifdef 
__USE_GNU


684 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

685 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


694 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

695 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

700 #i‚de‡
__COMPAR_FN_T


701 
	#__COMPAR_FN_T


	)

702 (*
	t__com∑r_‚_t
) (const *, const *);

704 #ifdef 
__USE_GNU


705 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

708 #ifde‡
__USE_GNU


709 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

712 
__BEGIN_NAMESPACE_STD


715 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

716 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

717 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

719 #ifde‡
__USE_EXTERN_INLINES


720 
	~<bôs/°dlib-b£¨ch.h
>

725 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

726 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

727 #ifde‡
__USE_GNU


728 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

729 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

730 
	`__n⁄nuŒ
 ((1, 4));

735 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

736 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

737 
__END_NAMESPACE_STD


739 #ifde‡
__USE_ISOC99


740 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

741 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

745 
__BEGIN_NAMESPACE_STD


749 
div_t
 
	$div
 (
__numî
, 
__díom
)

750 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

751 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

752 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

753 
__END_NAMESPACE_STD


755 #ifde‡
__USE_ISOC99


756 
__BEGIN_NAMESPACE_C99


757 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

758 
__díom
)

759 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

760 
__END_NAMESPACE_C99


764 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

765 || 
deföed
 
__USE_MISC


772 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

773 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

778 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

779 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

784 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

785 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

788 #ifde‡
__USE_MISC


790 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

791 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

792 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

793 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

794 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

795 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

796 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

797 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

802 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

804 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

805 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

806 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

807 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

809 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

810 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

811 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

812 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

813 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

814 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

815 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

816 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

820 
__BEGIN_NAMESPACE_STD


823 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

826 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

827 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

830 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

834 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

835 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

837 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

838 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

839 
__THROW
;

840 
__END_NAMESPACE_STD


843 #ifde‡
__USE_MISC


848 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

852 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


859 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

860 *c⁄° *
__ª°ri˘
 
__tokís
,

861 **
__ª°ri˘
 
__vÆuï
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

866 #ifde‡
__USE_XOPEN


868 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

874 #ifde‡
__USE_XOPEN2KXSI


876 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

879 #ifde‡
__USE_XOPEN_EXTENDED


884 
	$gø¡±
 (
__fd
Ë
__THROW
;

888 
	$u∆ock±
 (
__fd
Ë
__THROW
;

893 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

896 #ifde‡
__USE_GNU


900 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

901 
__THROW
 
	`__n⁄nuŒ
 ((2));

904 
	`gë±
 ();

907 #ifde‡
__USE_MISC


911 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

915 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


918 
	$ây¶Ÿ
 (Ë
__THROW
;

921 
	~<bôs/°dlib-Êﬂt.h
>

924 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


925 
	~<bôs/°dlib.h
>

927 #ifde‡
__LDBL_COMPAT


928 
	~<bôs/°dlib-ldbl.h
>

932 #unde‡
__√ed_mÆloc_™d_ˇŒoc


934 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
	`__GNUC_PREREQ
 (3,4)

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

644 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
__exã∫_Æways_ölöe
 *

647 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

648 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

650  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

651 
	}
}

656 
	g__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_MISC


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/mount.h

21 #i‚de‡
_SYS_MOUNT_H


22 
	#_SYS_MOUNT_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<sys/io˘l.h
>

27 
	#BLOCK_SIZE
 1024

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

35 
	mMS_RDONLY
 = 1,

36 
	#MS_RDONLY
 
MS_RDONLY


	)

37 
	mMS_NOSUID
 = 2,

38 
	#MS_NOSUID
 
MS_NOSUID


	)

39 
	mMS_NODEV
 = 4,

40 
	#MS_NODEV
 
MS_NODEV


	)

41 
	mMS_NOEXEC
 = 8,

42 
	#MS_NOEXEC
 
MS_NOEXEC


	)

43 
	mMS_SYNCHRONOUS
 = 16,

44 
	#MS_SYNCHRONOUS
 
MS_SYNCHRONOUS


	)

45 
	mMS_REMOUNT
 = 32,

46 
	#MS_REMOUNT
 
MS_REMOUNT


	)

47 
	mMS_MANDLOCK
 = 64,

48 
	#MS_MANDLOCK
 
MS_MANDLOCK


	)

49 
	mMS_DIRSYNC
 = 128,

50 
	#MS_DIRSYNC
 
MS_DIRSYNC


	)

51 
	mMS_NOATIME
 = 1024,

52 
	#MS_NOATIME
 
MS_NOATIME


	)

53 
	mMS_NODIRATIME
 = 2048,

54 
	#MS_NODIRATIME
 
MS_NODIRATIME


	)

55 
	mMS_BIND
 = 4096,

56 
	#MS_BIND
 
MS_BIND


	)

57 
	mMS_MOVE
 = 8192,

58 
	#MS_MOVE
 
MS_MOVE


	)

59 
	mMS_REC
 = 16384,

60 
	#MS_REC
 
MS_REC


	)

61 
	mMS_SILENT
 = 32768,

62 
	#MS_SILENT
 
MS_SILENT


	)

63 
	mMS_POSIXACL
 = 1 << 16,

64 
	#MS_POSIXACL
 
MS_POSIXACL


	)

65 
	mMS_UNBINDABLE
 = 1 << 17,

66 
	#MS_UNBINDABLE
 
MS_UNBINDABLE


	)

67 
	mMS_PRIVATE
 = 1 << 18,

68 
	#MS_PRIVATE
 
MS_PRIVATE


	)

69 
	mMS_SLAVE
 = 1 << 19,

70 
	#MS_SLAVE
 
MS_SLAVE


	)

71 
	mMS_SHARED
 = 1 << 20,

72 
	#MS_SHARED
 
MS_SHARED


	)

73 
	mMS_RELATIME
 = 1 << 21,

74 
	#MS_RELATIME
 
MS_RELATIME


	)

75 
	mMS_KERNMOUNT
 = 1 << 22,

76 
	#MS_KERNMOUNT
 
MS_KERNMOUNT


	)

77 
	mMS_I_VERSION
 = 1 << 23,

78 
	#MS_I_VERSION
 
MS_I_VERSION


	)

79 
	mMS_STRICTATIME
 = 1 << 24,

80 
	#MS_STRICTATIME
 
MS_STRICTATIME


	)

81 
	mMS_LAZYTIME
 = 1 << 25,

82 
	#MS_LAZYTIME
 
MS_LAZYTIME


	)

83 
	mMS_ACTIVE
 = 1 << 30,

84 
	#MS_ACTIVE
 
MS_ACTIVE


	)

85 
	mMS_NOUSER
 = 1 << 31

86 
	#MS_NOUSER
 
MS_NOUSER


	)

90 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
 \

91 |
MS_LAZYTIME
)

	)

96 
	#MS_MGC_VAL
 0xc0ed0000

	)

97 
	#MS_MGC_MSK
 0xffff0000

	)

104 
	#BLKROSET
 
	`_IO
(0x12, 93Ë

	)

105 
	#BLKROGET
 
	`_IO
(0x12, 94Ë

	)

106 
	#BLKRRPART
 
	`_IO
(0x12, 95Ë

	)

107 
	#BLKGETSIZE
 
	`_IO
(0x12, 96Ë

	)

108 
	#BLKFLSBUF
 
	`_IO
(0x12, 97Ë

	)

109 
	#BLKRASET
 
	`_IO
(0x12, 98Ë

	)

110 
	#BLKRAGET
 
	`_IO
(0x12, 99Ë

	)

111 
	#BLKFRASET
 
	`_IO
(0x12,100Ë

	)

112 
	#BLKFRAGET
 
	`_IO
(0x12,101Ë

	)

113 
	#BLKSECTSET
 
	`_IO
(0x12,102Ë

	)

114 
	#BLKSECTGET
 
	`_IO
(0x12,103Ë

	)

115 
	#BLKSSZGET
 
	`_IO
(0x12,104Ë

	)

116 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

117 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

118 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

124 
	mMNT_FORCE
 = 1,

125 
	#MNT_FORCE
 
MNT_FORCE


	)

126 
	mMNT_DETACH
 = 2,

127 
	#MNT_DETACH
 
MNT_DETACH


	)

128 
	mMNT_EXPIRE
 = 4,

129 
	#MNT_EXPIRE
 
MNT_EXPIRE


	)

130 
	mUMOUNT_NOFOLLOW
 = 8

131 
	#UMOUNT_NOFOLLOW
 
UMOUNT_NOFOLLOW


	)

135 
__BEGIN_DECLS


138 
	$mou¡
 (c⁄° *
__•ecül_fûe
, c⁄° *
__dú
,

139 c⁄° *
__f°y≥
, 
__rwÊag
,

140 c⁄° *
__d©a
Ë
__THROW
;

143 
	$umou¡
 (c⁄° *
__•ecül_fûe
Ë
__THROW
;

146 
	$umou¡2
 (c⁄° *
__•ecül_fûe
, 
__Êags
Ë
__THROW
;

148 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‡!
deföed
 
MAXHOSTNAMELEN
 && deföed 
HOST_NAME_MAX


54 
	#MAXHOSTNAMELEN
 
HOST_NAME_MAX


	)

56 #i‚de‡
NCARGS


57 #ifde‡
ARG_MAX


58 
	#NCARGS
 
ARG_MAX


	)

62 
	#NCARGS
 
INT_MAX


	)

68 #i‚de‡
NOGROUP


69 
	#NOGROUP
 65535

	)

71 #i‚de‡
NODEV


72 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

77 #i‚de‡
DEV_BSIZE


78 
	#DEV_BSIZE
 512

	)

83 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

84 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

85 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

86 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

89 #i‚de‡
howm™y


90 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

92 #ifde‡
__GNUC__


93 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

94 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

95 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

97 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

99 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

102 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

103 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/quota.h

35 #i‚de‡
_SYS_QUOTA_H


36 
	#_SYS_QUOTA_H
 1

	)

38 
	~<„©uªs.h
>

39 
	~<sys/ty≥s.h
>

45 #i‚de‡
_LINUX_QUOTA_VERSION


46 
	#_LINUX_QUOTA_VERSION
 2

	)

53 
	#dbtob
(
num
Ë(“umË<< 10)

	)

54 
	#btodb
(
num
Ë(“umË>> 10)

	)

60 
	#fs_to_dq_blocks
(
num
, 
blksize
Ë((“umË* (blksize)Ë/ 
BLOCK_SIZE
)

	)

71 
	#MAX_IQ_TIME
 604800

	)

72 
	#MAX_DQ_TIME
 604800

	)

74 
	#MAXQUOTAS
 2

	)

75 
	#USRQUOTA
 0

	)

76 
	#GRPQUOTA
 1

	)

81 
	#INITQFNAMES
 { \

85 };

	)

87 
	#QUOTAFILENAME
 "quŸa"

	)

88 
	#QUOTAGROUP
 "°aff"

	)

90 
	#NR_DQHASH
 43

	)

91 
	#NR_DQUOTS
 256

	)

99 
	#SUBCMDMASK
 0x00ff

	)

100 
	#SUBCMDSHIFT
 8

	)

101 
	#QCMD
(
cmd
, 
ty≥
Ë(((cmdË<< 
SUBCMDSHIFT
Ë| (—y≥Ë& 
SUBCMDMASK
))

	)

103 #i‡
_LINUX_QUOTA_VERSION
 < 2

104 
	#Q_QUOTAON
 0x0100

	)

105 
	#Q_QUOTAOFF
 0x0200

	)

106 
	#Q_GETQUOTA
 0x0300

	)

107 
	#Q_SETQUOTA
 0x0400

	)

108 
	#Q_SETUSE
 0x0500

	)

109 
	#Q_SYNC
 0x0600

	)

110 
	#Q_SETQLIM
 0x0700

	)

111 
	#Q_GETSTATS
 0x0800

	)

112 
	#Q_RSQUASH
 0x1000

	)

114 
	#Q_SYNC
 0x800001

	)

115 
	#Q_QUOTAON
 0x800002

	)

116 
	#Q_QUOTAOFF
 0x800003

	)

117 
	#Q_GETFMT
 0x800004

	)

118 
	#Q_GETINFO
 0x800005

	)

119 
	#Q_SETINFO
 0x800006

	)

120 
	#Q_GETQUOTA
 0x800007

	)

121 
	#Q_SETQUOTA
 0x800008

	)

122 
	#Q_GETNEXTQUOTA
 0x800009

	)

130 #i‡
_LINUX_QUOTA_VERSION
 < 2

131 
	sdqblk


133 
u_öt32_t
 
	mdqb_bh¨dlimô
;

134 
u_öt32_t
 
	mdqb_bso·limô
;

135 
u_öt32_t
 
	mdqb_curblocks
;

136 
u_öt32_t
 
	mdqb_ih¨dlimô
;

137 
u_öt32_t
 
	mdqb_iso·limô
;

138 
u_öt32_t
 
	mdqb_curöodes
;

139 
time_t
 
	mdqb_btime
;

140 
time_t
 
	mdqb_ôime
;

145 
	#QIF_BLIMITS
 1

	)

146 
	#QIF_SPACE
 2

	)

147 
	#QIF_ILIMITS
 4

	)

148 
	#QIF_INODES
 8

	)

149 
	#QIF_BTIME
 16

	)

150 
	#QIF_ITIME
 32

	)

151 
	#QIF_LIMITS
 (
QIF_BLIMITS
 | 
QIF_ILIMITS
)

	)

152 
	#QIF_USAGE
 (
QIF_SPACE
 | 
QIF_INODES
)

	)

153 
	#QIF_TIMES
 (
QIF_BTIME
 | 
QIF_ITIME
)

	)

154 
	#QIF_ALL
 (
QIF_LIMITS
 | 
QIF_USAGE
 | 
QIF_TIMES
)

	)

156 
	sdqblk


158 
u_öt64_t
 
	mdqb_bh¨dlimô
;

159 
u_öt64_t
 
	mdqb_bso·limô
;

160 
u_öt64_t
 
	mdqb_cur•a˚
;

161 
u_öt64_t
 
	mdqb_ih¨dlimô
;

162 
u_öt64_t
 
	mdqb_iso·limô
;

163 
u_öt64_t
 
	mdqb_curöodes
;

164 
u_öt64_t
 
	mdqb_btime
;

165 
u_öt64_t
 
	mdqb_ôime
;

166 
u_öt32_t
 
	mdqb_vÆid
;

173 
	#dq_bh¨dlimô
 
dq_dqb
.
dqb_bh¨dlimô


	)

174 
	#dq_bso·limô
 
dq_dqb
.
dqb_bso·limô


	)

175 #i‡
_LINUX_QUOTA_VERSION
 < 2

176 
	#dq_curblocks
 
dq_dqb
.
dqb_curblocks


	)

178 
	#dq_cur•a˚
 
dq_dqb
.
dqb_cur•a˚


	)

179 
	#dq_vÆid
 
dq_dqb
.
dqb_vÆid


	)

181 
	#dq_ih¨dlimô
 
dq_dqb
.
dqb_ih¨dlimô


	)

182 
	#dq_iso·limô
 
dq_dqb
.
dqb_iso·limô


	)

183 
	#dq_curöodes
 
dq_dqb
.
dqb_curöodes


	)

184 
	#dq_btime
 
dq_dqb
.
dqb_btime


	)

185 
	#dq_ôime
 
dq_dqb
.
dqb_ôime


	)

187 
	#dqoff
(
UID
Ë((
loff_t
)((UIDË*  (
dqblk
)))

	)

189 #i‡
_LINUX_QUOTA_VERSION
 < 2

190 
	sdq°©s


192 
u_öt32_t
 
	mlookups
;

193 
u_öt32_t
 
	mdr›s
;

194 
u_öt32_t
 
	mªads
;

195 
u_öt32_t
 
	mwrôes
;

196 
u_öt32_t
 
	mˇche_hôs
;

197 
u_öt32_t
 
	m∑ges_Æloˇãd
;

198 
u_öt32_t
 
	mÆloˇãd_dquŸs
;

199 
u_öt32_t
 
	m‰ì_dquŸs
;

200 
u_öt32_t
 
	msyncs
;

205 
	#IIF_BGRACE
 1

	)

206 
	#IIF_IGRACE
 2

	)

207 
	#IIF_FLAGS
 4

	)

208 
	#IIF_ALL
 (
IIF_BGRACE
 | 
IIF_IGRACE
 | 
IIF_FLAGS
)

	)

210 
	sdqöfo


212 
u_öt64_t
 
	mdqi_bgø˚
;

213 
u_öt64_t
 
	mdqi_igø˚
;

214 
u_öt32_t
 
	mdqi_Êags
;

215 
u_öt32_t
 
	mdqi_vÆid
;

219 
__BEGIN_DECLS


221 
	$quŸa˘l
 (
__cmd
, c⁄° *
__•ecül
, 
__id
,

222 
ˇddr_t
 
__addr
Ë
__THROW
;

224 
__END_DECLS


	@/usr/include/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
;

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
);

57 
	#gëæimô
 
gëæimô64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

62 
æimô64
 *
__æimôs
Ë
__THROW
;

68 #i‚de‡
__USE_FILE_OFFSET64


69 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

70 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
;

72 #ifde‡
__REDIRECT_NTH


73 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

74 c⁄° 
æimô
 *
__æimôs
),

75 
£ålimô64
);

77 
	#£ålimô
 
£ålimô64


	)

80 #ifde‡
__USE_LARGEFILE64


81 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

82 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW
;

87 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

93 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

97 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

98 
__THROW
;

100 
__END_DECLS


	@/usr/include/sys/sendfile.h

19 #i‚de‡
_SYS_SENDFILE_H


20 
	#_SYS_SENDFILE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


32 #i‚de‡
__USE_FILE_OFFSET64


33 
ssize_t
 
	$£ndfûe
 (
__out_fd
, 
__ö_fd
, 
off_t
 *
__off£t
,

34 
size_t
 
__cou¡
Ë
__THROW
;

36 #ifde‡
__REDIRECT_NTH


37 
ssize_t
 
	`__REDIRECT_NTH
 (
£ndfûe
,

38 (
__out_fd
, 
__ö_fd
, 
__off64_t
 *
__off£t
,

39 
size_t
 
__cou¡
), 
£ndfûe64
);

41 
	#£ndfûe
 
£ndfûe64


	)

44 #ifde‡
__USE_LARGEFILE64


45 
ssize_t
 
	$£ndfûe64
 (
__out_fd
, 
__ö_fd
, 
__off64_t
 *
__off£t
,

46 
size_t
 
__cou¡
Ë
__THROW
;

49 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_ATFILE


30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

33 #ifde‡
__USE_ATFILE


34 
	#__√ed_time•ec


	)

36 
	~<time.h
>

39 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


42 #i‚de‡
__dev_t_deföed


43 
__dev_t
 
	tdev_t
;

44 
	#__dev_t_deföed


	)

47 #i‚de‡
__gid_t_deföed


48 
__gid_t
 
	tgid_t
;

49 
	#__gid_t_deföed


	)

52 #i‚de‡
__öo_t_deföed


53 #i‚de‡
__USE_FILE_OFFSET64


54 
__öo_t
 
	töo_t
;

56 
__öo64_t
 
	töo_t
;

58 
	#__öo_t_deföed


	)

61 #i‚de‡
__mode_t_deföed


62 
__mode_t
 
	tmode_t
;

63 
	#__mode_t_deföed


	)

66 #i‚de‡
__∆ök_t_deföed


67 
__∆ök_t
 
	t∆ök_t
;

68 
	#__∆ök_t_deföed


	)

71 #i‚de‡
__off_t_deföed


72 #i‚de‡
__USE_FILE_OFFSET64


73 
__off_t
 
	toff_t
;

75 
__off64_t
 
	toff_t
;

77 
	#__off_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

86 #ifde‡
__USE_UNIX98


87 #i‚de‡
__blk˙t_t_deföed


88 #i‚de‡
__USE_FILE_OFFSET64


89 
__blk˙t_t
 
	tblk˙t_t
;

91 
__blk˙t64_t
 
	tblk˙t_t
;

93 
	#__blk˙t_t_deföed


	)

96 #i‚de‡
__blksize_t_deföed


97 
__blksize_t
 
	tblksize_t
;

98 
	#__blksize_t_deföed


	)

102 
	g__BEGIN_DECLS


104 
	~<bôs/°©.h
>

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


107 
	#S_IFMT
 
__S_IFMT


	)

108 
	#S_IFDIR
 
__S_IFDIR


	)

109 
	#S_IFCHR
 
__S_IFCHR


	)

110 
	#S_IFBLK
 
__S_IFBLK


	)

111 
	#S_IFREG
 
__S_IFREG


	)

112 #ifde‡
__S_IFIFO


113 
	#S_IFIFO
 
__S_IFIFO


	)

115 #ifde‡
__S_IFLNK


116 
	#S_IFLNK
 
__S_IFLNK


	)

118 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
) \

119 && 
deföed
 
	g__S_IFSOCK


120 
	#S_IFSOCK
 
__S_IFSOCK


	)

126 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

128 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

129 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

130 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

131 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

132 #ifde‡
__S_IFIFO


133 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

135 #ifde‡
__S_IFLNK


136 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

139 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


140 
	#S_ISLNK
(
mode
Ë0

	)

143 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K
) \

144 && 
deföed
 
	g__S_IFSOCK


145 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

146 #ñi‡
deföed
 
__USE_XOPEN2K


147 
	#S_ISSOCK
(
mode
Ë0

	)

154 #ifdef 
__USE_POSIX199309


155 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

156 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

157 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

163 
	#S_ISUID
 
__S_ISUID


	)

164 
	#S_ISGID
 
__S_ISGID


	)

166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
	#S_ISVTX
 
__S_ISVTX


	)

171 
	#S_IRUSR
 
__S_IREAD


	)

172 
	#S_IWUSR
 
__S_IWRITE


	)

173 
	#S_IXUSR
 
__S_IEXEC


	)

175 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

177 #ifde‡
__USE_MISC


178 
	#S_IREAD
 
S_IRUSR


	)

179 
	#S_IWRITE
 
S_IWUSR


	)

180 
	#S_IEXEC
 
S_IXUSR


	)

183 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

184 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

185 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

187 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

189 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

190 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

191 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

193 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

196 #ifdef 
__USE_MISC


198 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

199 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

200 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

202 
	#S_BLKSIZE
 512

	)

206 #i‚de‡
__USE_FILE_OFFSET64


208 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

209 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

213 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

215 #ifde‡
__REDIRECT_NTH


216 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

217 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

218 
	`__n⁄nuŒ
 ((1, 2));

219 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

220 
	`__n⁄nuŒ
 ((2));

222 
	#°©
 
°©64


	)

223 
	#f°©
 
f°©64


	)

226 #ifde‡
__USE_LARGEFILE64


227 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

228 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

229 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

232 #ifde‡
__USE_ATFILE


236 #i‚de‡
__USE_FILE_OFFSET64


237 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

238 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

239 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

243 
°©
 *
__ª°ri˘
 
__buf
,

244 
__Êag
),

245 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

247 
	#f°©©
 
f°©©64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

258 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


262 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

263 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

265 #ifde‡
__REDIRECT_NTH


266 
	`__REDIRECT_NTH
 (
l°©
,

267 (c⁄° *
__ª°ri˘
 
__fûe
,

268 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 
	#l°©
 
l°©64


	)

274 #ifde‡
__USE_LARGEFILE64


275 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

276 
°©64
 *
__ª°ri˘
 
__buf
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

283 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #ifde‡
__USE_MISC


290 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


296 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

299 #ifde‡
__USE_ATFILE


302 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

303 
__Êag
)

304 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

313 #ifdef 
__USE_GNU


316 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

320 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1));

323 #ifde‡
__USE_ATFILE


327 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

328 
__THROW
 
	`__n⁄nuŒ
 ((2));

334 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


335 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_ATFILE


342 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

343 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

352 #ifde‡
__USE_ATFILE


356 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 #ifde‡
__USE_ATFILE


363 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

364 c⁄° 
time•ec
 
__times
[2],

365 
__Êags
)

366 
__THROW
 
	`__n⁄nuŒ
 ((2));

369 #ifde‡
__USE_XOPEN2K8


371 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

389 #i‚de‡
_STAT_VER


390 
	#_STAT_VER
 0

	)

392 #i‚de‡
_MKNOD_VER


393 
	#_MKNOD_VER
 0

	)

397 #i‚de‡
__USE_FILE_OFFSET64


398 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

399 
__THROW
 
	`__n⁄nuŒ
 ((3));

400 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

401 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

402 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
, 
__Êag
)

406 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

410 
°©
 *
__°©_buf
), 
__fx°©64
)

411 
	`__n⁄nuŒ
 ((3));

412 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__x°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__lx°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

419 c⁄° *
__fûíame
,

420 
°©
 *
__°©_buf
, 
__Êag
),

421 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

424 
	#__fx°©
 
__fx°©64


	)

425 
	#__x°©
 
__x°©64


	)

426 
	#__lx°©
 
__lx°©64


	)

430 #ifde‡
__USE_LARGEFILE64


431 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

433 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

434 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

435 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
, 
__Êag
)

439 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

441 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

442 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

444 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

445 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

446 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

448 #ifde‡
__USE_EXTERN_INLINES


451 
__exã∫_ölöe
 

452 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

454  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

455 
	}
}

457 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


458 
__exã∫_ölöe
 

459 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

461  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

462 
	}
}

465 
__exã∫_ölöe
 

466 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

468  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

469 
	}
}

471 #ifde‡
__USE_ATFILE


472 
__exã∫_ölöe
 

473 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

474 
__Êag
))

476  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

477 
	}
}

480 #ifde‡
__USE_MISC


481 
__exã∫_ölöe
 

482 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

484  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

485 
	}
}

488 #ifde‡
__USE_ATFILE


489 
__exã∫_ölöe
 

490 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

491 
__dev_t
 
__dev
))

493  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

494 
	}
}

497 #i‡
deföed
 
__USE_LARGEFILE64
 \

498 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

499 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

500 
__exã∫_ölöe
 

501 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

503  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

504 
	}
}

506 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


507 
__exã∫_ölöe
 

508 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

510  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

511 
	}
}

514 
__exã∫_ölöe
 

515 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

517  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

518 
	}
}

520 #ifde‡
__USE_ATFILE


521 
__exã∫_ölöe
 

522 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

523 
__Êag
))

525  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

526 
	}
}

533 
	g__END_DECLS


	@/usr/include/sys/statvfs.h

19 #i‚def 
_SYS_STATVFS_H


20 
	#_SYS_STATVFS_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/°©vfs.h
>

27 #i‚de‡
__USE_FILE_OFFSET64


28 #i‚de‡
__fsblk˙t_t_deföed


29 
__fsblk˙t_t
 
	tfsblk˙t_t
;

30 
	#__fsblk˙t_t_deföed


	)

32 #i‚de‡
__fsfû˙t_t_deföed


33 
__fsfû˙t_t
 
	tfsfû˙t_t
;

34 
	#__fsfû˙t_t_deföed


	)

37 #i‚de‡
__fsblk˙t_t_deföed


38 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

39 
	#__fsblk˙t_t_deföed


	)

41 #i‚de‡
__fsfû˙t_t_deföed


42 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

43 
	#__fsfû˙t_t_deföed


	)

47 
	g__BEGIN_DECLS


50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$°©vfs
 (c⁄° *
__ª°ri˘
 
__fûe
,

52 
°©vfs
 *
__ª°ri˘
 
__buf
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

55 #ifde‡
__REDIRECT_NTH


56 
	`__REDIRECT_NTH
 (
°©vfs
,

57 (c⁄° *
__ª°ri˘
 
__fûe
,

58 
°©vfs
 *
__ª°ri˘
 
__buf
), 
°©vfs64
)

59 
	`__n⁄nuŒ
 ((1, 2));

61 
	#°©vfs
 
°©vfs64


	)

64 #ifde‡
__USE_LARGEFILE64


65 
	$°©vfs64
 (c⁄° *
__ª°ri˘
 
__fûe
,

66 
°©vfs64
 *
__ª°ri˘
 
__buf
)

67 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

72 #i‚de‡
__USE_FILE_OFFSET64


73 
	$f°©vfs
 (
__fûdes
, 
°©vfs
 *
__buf
)

74 
__THROW
 
	`__n⁄nuŒ
 ((2));

76 #ifde‡
__REDIRECT_NTH


77 
	`__REDIRECT_NTH
 (
f°©vfs
, (
__fûdes
, 
°©vfs
 *
__buf
),

78 
f°©vfs64
Ë
	`__n⁄nuŒ
 ((2));

80 
	#f°©vfs
 
f°©vfs64


	)

83 #ifde‡
__USE_LARGEFILE64


84 
	$f°©vfs64
 (
__fûdes
, 
°©vfs64
 *
__buf
)

85 
__THROW
 
	`__n⁄nuŒ
 ((2));

88 
__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

26 #i‚de‡
_LIBC


31 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/sysctl.h

18 #i‚def 
_SYS_SYSCTL_H


19 
	#_SYS_SYSCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

25 #i‚de‡
_LINUX_KERNEL_H


26 
	#_LINUX_KERNEL_H
 1

	)

27 
	#__undef_LINUX_KERNEL_H


	)

29 #i‚de‡
_LINUX_TYPES_H


30 
	#_LINUX_TYPES_H
 1

	)

31 
	#__undef_LINUX_TYPES_H


	)

33 #i‚de‡
_LINUX_LIST_H


34 
	#_LINUX_LIST_H
 1

	)

35 
	#__undef_LINUX_LIST_H


	)

37 #i‚de‡
__LINUX_COMPILER_H


38 
	#__LINUX_COMPILER_H
 1

	)

39 
	#__u£r


	)

40 
	#__undef__LINUX_COMPILER_H


	)

43 
	~<löux/sys˘l.h
>

45 #ifde‡
__undef_LINUX_KERNEL_H


46 #unde‡
_LINUX_KERNEL_H


47 #unde‡
__undef_LINUX_KERNEL_H


49 #ifde‡
__undef_LINUX_TYPES_H


50 #unde‡
_LINUX_TYPES_H


51 #unde‡
__undef_LINUX_TYPES_H


53 #ifde‡
__undef_LINUX_LIST_H


54 #unde‡
_LINUX_LIST_H


55 #unde‡
__undef_LINUX_LIST_H


57 #ifde‡
__undef__LINUX_COMPILER_H


58 #unde‡
__LINUX_COMPILER_H


59 #unde‡
__u£r


60 #unde‡
__undef__LINUX_COMPILER_H


63 
	~<bôs/sys˘l.h
>

65 
__BEGIN_DECLS


68 
	$sys˘l
 (*
__«me
, 
__∆í
, *
__ﬁdvÆ
,

69 
size_t
 *
__ﬁdÀ≈
, *
__√wvÆ
, size_à
__√wÀn
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/sys/sysinfo.h

18 #i‚de‡
_SYS_SYSINFO_H


19 
	#_SYS_SYSINFO_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<löux/kî√l.h
>

26 
__BEGIN_DECLS


29 
	$sysöfo
 (
sysöfo
 *
__öfo
Ë
__THROW
;

33 
	$gë_≈rocs_c⁄f
 (Ë
__THROW
;

36 
	$gë_≈rocs
 (Ë
__THROW
;

40 
	$gë_phys_∑ges
 (Ë
__THROW
;

43 
	$gë_avphys_∑ges
 (Ë
__THROW
;

45 
__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_MISC


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_MISC


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_MISC


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_MISC


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_MISC


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/sys/vfs.h

4 
	~<sys/°©fs.h
>

	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<sig«l.h
>

32 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

35 
	~<bôs/waôÊags.h
>

38 
	~<bôs/waô°©us.h
>

40 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

41 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

42 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

43 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

44 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

45 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

46 #ifde‡
__WIFCONTINUED


47 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

51 #ifdef 
__USE_MISC


52 
	#WCOREFLAG
 
__WCOREFLAG


	)

53 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (°©us)

	)

54 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

55 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


62 
	mP_ALL
,

63 
	mP_PID
,

64 
	mP_PGID


65 } 
	tidty≥_t
;

74 
__pid_t
 
waô
 (*
__°©_loc
);

76 #ifdef 
__USE_MISC


78 
	#WAIT_ANY
 (-1Ë

	)

79 
	#WAIT_MYPGRP
 0

	)

97 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 #i‚de‡
__id_t_deföed


101 
	~<bôs/ty≥s.h
>

102 
__id_t
 
	tid_t
;

103 
	#__id_t_deföed


	)

106 
	#__√ed_sigöfo_t


	)

107 
	~<bôs/sigöfo.h
>

120 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

121 
__›ti⁄s
);

124 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


127 
	grußge
;

134 
__pid_t
 
	$waô3
 (*
__°©_loc
, 
__›ti⁄s
,

135 
rußge
 * 
__ußge
Ë
__THROWNL
;

138 #ifde‡
__USE_MISC


140 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, *
__°©_loc
, 
__›ti⁄s
,

141 
rußge
 *
__ußge
Ë
__THROWNL
;

145 
__END_DECLS


	@/usr/include/sys/xattr.h

18 #i‚de‡
_SYS_XATTR_H


19 
	#_SYS_XATTR_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


29 #i‚de‡
__USE_KERNEL_XATTR_DEFS


32 
	mXATTR_CREATE
 = 1,

33 
	#XATTR_CREATE
 
XATTR_CREATE


	)

34 
	mXATTR_REPLACE
 = 2

35 
	#XATTR_REPLACE
 
XATTR_REPLACE


	)

41 
	$£tx©å
 (c⁄° *
__∑th
, c⁄° *
__«me
,

42 c⁄° *
__vÆue
, 
size_t
 
__size
, 
__Êags
)

43 
__THROW
;

48 
	$l£tx©å
 (c⁄° *
__∑th
, c⁄° *
__«me
,

49 c⁄° *
__vÆue
, 
size_t
 
__size
, 
__Êags
)

50 
__THROW
;

54 
	$f£tx©å
 (
__fd
, c⁄° *
__«me
, c⁄° *
__vÆue
,

55 
size_t
 
__size
, 
__Êags
Ë
__THROW
;

59 
ssize_t
 
	$gëx©å
 (c⁄° *
__∑th
, c⁄° *
__«me
,

60 *
__vÆue
, 
size_t
 
__size
Ë
__THROW
;

65 
ssize_t
 
	$lgëx©å
 (c⁄° *
__∑th
, c⁄° *
__«me
,

66 *
__vÆue
, 
size_t
 
__size
Ë
__THROW
;

70 
ssize_t
 
	$fgëx©å
 (
__fd
, c⁄° *
__«me
, *
__vÆue
,

71 
size_t
 
__size
Ë
__THROW
;

76 
ssize_t
 
	$li°x©å
 (c⁄° *
__∑th
, *
__li°
, 
size_t
 
__size
)

77 
__THROW
;

82 
ssize_t
 
	$Œi°x©å
 (c⁄° *
__∑th
, *
__li°
, 
size_t
 
__size
)

83 
__THROW
;

87 
ssize_t
 
	$Êi°x©å
 (
__fd
, *
__li°
, 
size_t
 
__size
)

88 
__THROW
;

92 
	$ªmovex©å
 (c⁄° *
__∑th
, c⁄° *
__«me
Ë
__THROW
;

97 
	$Ãemovex©å
 (c⁄° *
__∑th
, c⁄° *
__«me
Ë
__THROW
;

101 
	$‰emovex©å
 (
__fd
, c⁄° *
__«me
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #ifde‡
__USE_MISC


787 
	$ây¶Ÿ
 (Ë
__THROW
;

792 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

795 #ifde‡
__USE_ATFILE


798 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

799 c⁄° *
__to
, 
__Êags
)

800 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

803 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


805 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

811 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

812 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


818 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

822 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

823 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

824 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

828 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

830 #ifde‡
__USE_ATFILE


832 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

833 
__THROW
 
	`__n⁄nuŒ
 ((2));

837 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

844 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

851 *
	`gëlogö
 ();

852 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


859 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

862 #ifdef 
__USE_MISC


864 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

868 #ifdef 
__USE_POSIX2


872 
	#__√ed_gë›t


	)

873 
	~<gë›t.h
>

877 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


881 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #i‡
deföed
 
__USE_MISC


888 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

893 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

899 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

901 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

908 
	$vh™gup
 (Ë
__THROW
;

911 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

919 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

920 
size_t
 
__off£t
, 
__sˇÀ
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1));

927 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

931 *
	$gëu£rshñl
 (Ë
__THROW
;

932 
	$ídu£rshñl
 (Ë
__THROW
;

933 
	$£tu£rshñl
 (Ë
__THROW
;

939 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

943 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

946 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

958 
	`fsync
 (
__fd
);

961 #ifde‡
__USE_GNU


964 
	$syncfs
 (
__fd
Ë
__THROW
;

968 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


971 
	`gëho°id
 ();

974 
	$sync
 (Ë
__THROW
;

977 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


980 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

985 
	$gëdèbÀsize
 (Ë
__THROW
;

991 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


994 #i‚de‡
__USE_FILE_OFFSET64


995 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

996 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

998 #ifde‡
__REDIRECT_NTH


999 
	`__REDIRECT_NTH
 (
åunˇã
,

1000 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1001 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1003 
	#åunˇã
 
åunˇã64


	)

1006 #ifde‡
__USE_LARGEFILE64


1007 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1013 #i‡
deföed
 
__USE_POSIX199309
 \

1014 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1020 #ifde‡
__REDIRECT_NTH


1021 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1022 
·runˇã64
Ë
__wur
;

1024 
	#·runˇã
 
·runˇã64


	)

1027 #ifde‡
__USE_LARGEFILE64


1028 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1034 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1035 || 
deföed
 
__USE_MISC


1039 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1045 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1049 #ifde‡
__USE_MISC


1060 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1065 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1077 
	#F_ULOCK
 0

	)

1078 
	#F_LOCK
 1

	)

1079 
	#F_TLOCK
 2

	)

1080 
	#F_TEST
 3

	)

1082 #i‚de‡
__USE_FILE_OFFSET64


1083 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1085 #ifde‡
__REDIRECT


1086 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1087 
lockf64
Ë
__wur
;

1089 
	#lockf
 
lockf64


	)

1092 #ifde‡
__USE_LARGEFILE64


1093 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1098 #ifde‡
__USE_GNU


1103 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1104 (
__exãnsi⁄__
 \

1105 ({ 
__ªsu…
; \

1106 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1107 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1108 
__ªsu…
; 
	}
}))

	)

1111 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1114 
fd©async
 (
__fûdes
);

1120 #ifdef 
__USE_XOPEN


1122 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1123 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1127 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1128 
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1148 *
	`cu£rid
 (*
__s
);

1154 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1155 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1156 (*
__∑ª¡
) (),

1157 (*
__chûd
Ë()Ë
__THROW
;

1162 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1163 
	~<bôs/uni°d.h
>

1166 
__END_DECLS


	@/usr/include/utmp.h

18 #i‚def 
_UTMP_H


19 
	#_UTMP_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/utmp.h
>

32 
	#UTMP_FILE
 
_PATH_UTMP


	)

33 
	#UTMP_FILENAME
 
_PATH_UTMP


	)

34 
	#WTMP_FILE
 
_PATH_WTMP


	)

35 
	#WTMP_FILENAME
 
_PATH_WTMP


	)

41 
	$logö_ây
 (
__fd
Ë
__THROW
;

45 
	$logö
 (c⁄° 
utmp
 *
__íåy
Ë
__THROW
;

48 
	$logout
 (c⁄° *
__ut_löe
Ë
__THROW
;

51 
	$logwtmp
 (c⁄° *
__ut_löe
, c⁄° *
__ut_«me
,

52 c⁄° *
__ut_ho°
Ë
__THROW
;

55 
	$updwtmp
 (c⁄° *
__wtmp_fûe
, c⁄° 
utmp
 *
__utmp
)

56 
__THROW
;

59 
	$utm≤ame
 (c⁄° *
__fûe
Ë
__THROW
;

62 
utmp
 *
	$gëuã¡
 (Ë
__THROW
;

65 
	$£tuã¡
 (Ë
__THROW
;

68 
	$íduã¡
 (Ë
__THROW
;

72 
utmp
 *
	$gëutid
 (c⁄° 
utmp
 *
__id
Ë
__THROW
;

76 
utmp
 *
	$gëuéöe
 (c⁄° 
utmp
 *
__löe
Ë
__THROW
;

79 
utmp
 *
	$putuéöe
 (c⁄° 
utmp
 *
__utmp_±r
Ë
__THROW
;

82 #ifdef 
__USE_MISC


84 
	$gëuã¡_r
 (
utmp
 *
__buf„r
, utm∞**
__ªsu…
Ë
__THROW
;

86 
	$gëutid_r
 (c⁄° 
utmp
 *
__id
, utm∞*
__buf„r
,

87 
utmp
 **
__ªsu…
Ë
__THROW
;

89 
	$gëuéöe_r
 (c⁄° 
utmp
 *
__löe
,

90 
utmp
 *
__buf„r
, utm∞**
__ªsu…
Ë
__THROW
;

94 
__END_DECLS


	@/usr/include/uuid/uuid.h

35 #i‚de‡
_UUID_UUID_H


36 
	#_UUID_UUID_H


	)

38 
	~<sys/ty≥s.h
>

39 #i‚de‡
_WIN32


40 
	~<sys/time.h
>

42 
	~<time.h
>

44 
	tuuid_t
[16];

47 
	#UUID_VARIANT_NCS
 0

	)

48 
	#UUID_VARIANT_DCE
 1

	)

49 
	#UUID_VARIANT_MICROSOFT
 2

	)

50 
	#UUID_VARIANT_OTHER
 3

	)

53 
	#UUID_TYPE_DCE_TIME
 1

	)

54 
	#UUID_TYPE_DCE_RANDOM
 4

	)

57 #ifde‡
__GNUC__


58 
	#UUID_DEFINE
(
«me
,
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
) \

59 c⁄° 
uuid_t
 
«me
 
	`__©åibuã__
 ((
unu£d
)Ë{
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
}

	)

61 
	#UUID_DEFINE
(
«me
,
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
) \

62 c⁄° 
uuid_t
 
«me
 = {
u0
,
u1
,
u2
,
u3
,
u4
,
u5
,
u6
,
u7
,
u8
,
u9
,
u10
,
u11
,
u12
,
u13
,
u14
,
u15
}

	)

65 #ifde‡
__˝lu•lus


70 
uuid_˛ór
(
uuid_t
 
uu
);

73 
uuid_com∑ª
(c⁄° 
uuid_t
 
uu1
, c⁄° uuid_à
uu2
);

76 
uuid_c›y
(
uuid_t
 
d°
, c⁄° uuid_à
§c
);

79 
uuid_gíî©e
(
uuid_t
 
out
);

80 
uuid_gíî©e_øndom
(
uuid_t
 
out
);

81 
uuid_gíî©e_time
(
uuid_t
 
out
);

82 
uuid_gíî©e_time_ß„
(
uuid_t
 
out
);

85 
uuid_is_nuŒ
(c⁄° 
uuid_t
 
uu
);

88 
uuid_∑r£
(c⁄° *
ö
, 
uuid_t
 
uu
);

91 
uuid_u≈¨£
(c⁄° 
uuid_t
 
uu
, *
out
);

92 
uuid_u≈¨£_lowî
(c⁄° 
uuid_t
 
uu
, *
out
);

93 
uuid_u≈¨£_uµî
(c⁄° 
uuid_t
 
uu
, *
out
);

96 
time_t
 
uuid_time
(c⁄° 
uuid_t
 
uu
, 
timevÆ
 *
ªt_tv
);

97 
uuid_ty≥
(c⁄° 
uuid_t
 
uu
);

98 
uuid_v¨ü¡
(c⁄° 
uuid_t
 
uu
);

100 #ifde‡
__˝lu•lus


	@/usr/include/xfs/linux.h

17 #i‚de‡
__XFS_LINUX_H__


18 
	#__XFS_LINUX_H__


	)

20 
	~<uuid/uuid.h
>

21 
	~<sys/vfs.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/∑øm.h
>

24 
	~<sys/sysma¸os.h
>

25 
	~<sys/°©.h
>

26 
	~<öây≥s.h
>

27 
	~<mÆloc.h
>

28 
	~<gë›t.h
>

29 
	~<î∫o.h
>

30 
	~<ídün.h
>

31 
	~<°dboﬁ.h
>

32 
	~<°dio.h
>

33 
	~<asm/ty≥s.h
>

34 
	~<m¡ít.h
>

35 #ifde‡
OVERRIDE_SYSTEM_FSXATTR


36 
	#fsx©å
 
sys_fsx©å


	)

38 
	~<löux/fs.h
>

39 #ifde‡
OVERRIDE_SYSTEM_FSXATTR


40 #unde‡
fsx©å


43 
__ölöe__
 
	$xfs˘l
(c⁄° *
∑th
, 
fd
, 
cmd
, *
p
)

45  
	`io˘l
(
fd
, 
cmd
, 
p
);

46 
	}
}

54 
__ölöe__
 
	$∂©f‹m_ã°_xfs_fd
(
fd
)

56 
°©fs
 
°©fsbuf
;

57 
°©
 
°©buf
;

59 i‡(
	`f°©fs
(
fd
, &
°©fsbuf
) < 0)

61 i‡(
	`f°©
(
fd
, &
°©buf
) < 0)

63 i‡(!
	`S_ISREG
(
°©buf
.
°_mode
Ë&& !
	`S_ISDIR
(statbuf.st_mode))

65  (
°©fsbuf
.
f_ty≥
 == 0x58465342);

66 
	}
}

68 
__ölöe__
 
	$∂©f‹m_ã°_xfs_∑th
(c⁄° *
∑th
)

70 
°©fs
 
°©fsbuf
;

71 
°©
 
°©buf
;

73 i‡(
	`°©fs
(
∑th
, &
°©fsbuf
) < 0)

75 i‡(
	`°©
(
∑th
, &
°©buf
) < 0)

77 i‡(!
	`S_ISREG
(
°©buf
.
°_mode
Ë&& !
	`S_ISDIR
(statbuf.st_mode))

79  (
°©fsbuf
.
f_ty≥
 == 0x58465342);

80 
	}
}

82 
__ölöe__
 
	$∂©f‹m_f°©fs
(
fd
, 
°©fs
 *
buf
)

84  
	`f°©fs
(
fd
, 
buf
);

85 
	}
}

87 
__ölöe__
 
	$∂©f‹m_gë›åe£t
()

89 
›töd
;

90 
›töd
 = 0;

91 
	}
}

93 
__ölöe__
 
	$∂©f‹m_uuid_com∑ª
(
uuid_t
 *
uu1
, uuid_à*
uu2
)

95  
	`uuid_com∑ª
(*
uu1
, *
uu2
);

96 
	}
}

98 
__ölöe__
 
	$∂©f‹m_uuid_u≈¨£
(
uuid_t
 *
uu
, *
buf„r
)

100 
	`uuid_u≈¨£
(*
uu
, 
buf„r
);

101 
	}
}

103 
__ölöe__
 
	$∂©f‹m_uuid_∑r£
(*
buf„r
, 
uuid_t
 *
uu
)

105  
	`uuid_∑r£
(
buf„r
, *
uu
);

106 
	}
}

108 
__ölöe__
 
	$∂©f‹m_uuid_is_nuŒ
(
uuid_t
 *
uu
)

110  
	`uuid_is_nuŒ
(*
uu
);

111 
	}
}

113 
__ölöe__
 
	$∂©f‹m_uuid_gíî©e
(
uuid_t
 *
uu
)

115 
	`uuid_gíî©e
(*
uu
);

116 
	}
}

118 
__ölöe__
 
	$∂©f‹m_uuid_˛ór
(
uuid_t
 *
uu
)

120 
	`uuid_˛ór
(*
uu
);

121 
	}
}

123 
__ölöe__
 
	$∂©f‹m_uuid_c›y
(
uuid_t
 *
d°
, uuid_à*
§c
)

125 
	`uuid_c›y
(*
d°
, *
§c
);

126 
	}
}

128 #i‚de‡
BLKDISCARD


129 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

132 
__ölöe__
 

133 
	$∂©f‹m_disˇrd_blocks
(
fd
, 
uöt64_t
 
°¨t
, uöt64_à
Àn
)

135 
__uöt64_t
 
ønge
[2] = { 
°¨t
, 
Àn
 };

137 i‡(
	`io˘l
(
fd
, 
BLKDISCARD
, &
ønge
) < 0)

138  
î∫o
;

140 
	}
}

142 
	#ENOATTR
 
ENODATA


	)

143 
	#EFSCORRUPTED
 
EUCLEAN


	)

144 
	#EFSBADCRC
 
EBADMSG


	)

146 
off_t
 
	txfs_off_t
;

147 
__uöt64_t
 
	txfs_öo_t
;

148 
__uöt32_t
 
	txfs_dev_t
;

149 
__öt64_t
 
	txfs_daddr_t
;

150 
__u32
 
	txfs_∆ök_t
;

155 
	sm¡ít_curs‹
 {

156 
FILE
 *
	mmèbp
;

159 
ölöe
 
	$∂©f‹m_m¡ít_›í
(
m¡ít_curs‹
 * 
curs‹
, *
mèb
)

161 
curs‹
->
mèbp
 = 
	`£tm¡ít
(
mèb
, "r");

162 i‡(!
curs‹
->
mèbp
) {

163 
	`Ârötf
(
°dîr
, "Eº‹: c™nŸÑód %s\n", 
mèb
);

167 
	}
}

169 
ölöe
 
m¡ít
 * 
	$∂©f‹m_m¡ít_√xt
(
m¡ít_curs‹
 * 
curs‹
)

171  
	`gëm¡ít
(
curs‹
->
mèbp
);

172 
	}
}

174 
ölöe
 
	$∂©f‹m_m¡ít_˛o£
(
m¡ít_curs‹
 * 
curs‹
)

176 
	`ídm¡ít
(
curs‹
->
mèbp
);

177 
	}
}

184 #i‡!
deföed
 
FS_IOC_FSGETXATTR
 || deföed 
OVERRIDE_SYSTEM_FSXATTR


185 
	sfsx©å
 {

186 
__u32
 
	mfsx_xÊags
;

187 
__u32
 
	mfsx_extsize
;

188 
__u32
 
	mfsx_√xã¡s
;

189 
__u32
 
	mfsx_¥ojid
;

190 
__u32
 
	mfsx_cowextsize
;

191 
	mfsx_∑d
[8];

195 #i‚de‡
FS_IOC_FSGETXATTR


199 
	#FS_XFLAG_REALTIME
 0x00000001

	)

200 
	#FS_XFLAG_PREALLOC
 0x00000002

	)

201 
	#FS_XFLAG_IMMUTABLE
 0x00000008

	)

202 
	#FS_XFLAG_APPEND
 0x00000010

	)

203 
	#FS_XFLAG_SYNC
 0x00000020

	)

204 
	#FS_XFLAG_NOATIME
 0x00000040

	)

205 
	#FS_XFLAG_NODUMP
 0x00000080

	)

206 
	#FS_XFLAG_RTINHERIT
 0x00000100

	)

207 
	#FS_XFLAG_PROJINHERIT
 0x00000200

	)

208 
	#FS_XFLAG_NOSYMLINKS
 0x00000400

	)

209 
	#FS_XFLAG_EXTSIZE
 0x00000800

	)

210 
	#FS_XFLAG_EXTSZINHERIT
 0x00001000

	)

211 
	#FS_XFLAG_NODEFRAG
 0x00002000

	)

212 
	#FS_XFLAG_FILESTREAM
 0x00004000

	)

213 
	#FS_XFLAG_DAX
 0x00008000

	)

214 
	#FS_XFLAG_HASATTR
 0x80000000

	)

216 
	#FS_IOC_FSGETXATTR
 
	`_IOR
 ('X', 31, 
fsx©å
)

	)

217 
	#FS_IOC_FSSETXATTR
 
	`_IOW
 ('X', 32, 
fsx©å
)

	)

221 #i‚de‡
FS_XFLAG_COWEXTSIZE


222 
	#FS_XFLAG_COWEXTSIZE
 0x00010000

	)

	@/usr/include/xfs/xfs.h

33 #i‚de‡
__XFS_H__


34 
	#__XFS_H__


	)

36 #i‡
deföed
(
__löux__
)

37 
	~<xfs/löux.h
>

38 #ñi‡
deföed
(
__FªeBSD__
)

39 
	~<xfs/‰ìbsd.h
>

40 #ñi‡
deföed
(
__FªeBSD_kî√l__
)

41 
	~<xfs/gnuk‰ìbsd.h
>

42 #ñi‡
deföed
(
__APPLE__
)

43 
	~<xfs/d¨wö.h
>

44 #ñi‡
deföed
(
__sgi__
Ë|| deföed(
__sgi
)

45 
	~<xfs/úix.h
>

47 #îr‹ 
unknown
 
∂©f‹m
... 
have
 
fun
 
p‹tög
!

53 
xfs_as£π_œrgefûe
[(
off_t
)-8];

58 #i‚de‡
__u£r


59 
	#__u£r


	)

65 #i‚de‡
__∑cked


66 
	#__∑cked
 
	`__©åibuã__
((
∑cked
))

	)

69 
	~<xfs/xfs_ty≥s.h
>

70 
	~<xfs/xfs_fs.h
>

	@/usr/include/xfs/xfs_fs.h

18 #i‚de‡
__XFS_FS_H__


19 
	#__XFS_FS_H__


	)

30 #i‚de‡
HAVE_DIOATTR


31 
	sdiﬂâr
 {

32 
__u32
 
	md_mem
;

33 
__u32
 
	md_möiosz
;

34 
__u32
 
	md_maxiosz
;

43 
	#XFS_XFLAG_REALTIME
 
FS_XFLAG_REALTIME


	)

44 
	#XFS_XFLAG_PREALLOC
 
FS_XFLAG_PREALLOC


	)

45 
	#XFS_XFLAG_IMMUTABLE
 
FS_XFLAG_IMMUTABLE


	)

46 
	#XFS_XFLAG_APPEND
 
FS_XFLAG_APPEND


	)

47 
	#XFS_XFLAG_SYNC
 
FS_XFLAG_SYNC


	)

48 
	#XFS_XFLAG_NOATIME
 
FS_XFLAG_NOATIME


	)

49 
	#XFS_XFLAG_NODUMP
 
FS_XFLAG_NODUMP


	)

50 
	#XFS_XFLAG_RTINHERIT
 
FS_XFLAG_RTINHERIT


	)

51 
	#XFS_XFLAG_PROJINHERIT
 
FS_XFLAG_PROJINHERIT


	)

52 
	#XFS_XFLAG_NOSYMLINKS
 
FS_XFLAG_NOSYMLINKS


	)

53 
	#XFS_XFLAG_EXTSIZE
 
FS_XFLAG_EXTSIZE


	)

54 
	#XFS_XFLAG_EXTSZINHERIT
 
FS_XFLAG_EXTSZINHERIT


	)

55 
	#XFS_XFLAG_NODEFRAG
 
FS_XFLAG_NODEFRAG


	)

56 
	#XFS_XFLAG_FILESTREAM
 
FS_XFLAG_FILESTREAM


	)

57 
	#XFS_XFLAG_HASATTR
 
FS_XFLAG_HASATTR


	)

59 
	#XFS_IOC_FSGETXATTR
 
FS_IOC_FSGETXATTR


	)

60 
	#XFS_IOC_FSSETXATTR
 
FS_IOC_FSSETXATTR


	)

69 #i‚de‡
HAVE_GETBMAP


70 
	sgëbm≠
 {

71 
__s64
 
	mbmv_off£t
;

72 
__s64
 
	mbmv_block
;

73 
__s64
 
	mbmv_Àngth
;

74 
__s32
 
	mbmv_cou¡
;

75 
__s32
 
	mbmv_íåõs
;

88 #i‚de‡
HAVE_GETBMAPX


89 
	sgëbm≠x
 {

90 
__s64
 
	mbmv_off£t
;

91 
__s64
 
	mbmv_block
;

92 
__s64
 
	mbmv_Àngth
;

93 
__s32
 
	mbmv_cou¡
;

94 
__s32
 
	mbmv_íåõs
;

95 
__s32
 
	mbmv_iÊags
;

96 
__s32
 
	mbmv_oÊags
;

97 
__s32
 
	mbmv_unu£d1
;

98 
__s32
 
	mbmv_unu£d2
;

103 
	#BMV_IF_ATTRFORK
 0x1

	)

104 
	#BMV_IF_NO_DMAPI_READ
 0x2

	)

105 
	#BMV_IF_PREALLOC
 0x4

	)

106 
	#BMV_IF_DELALLOC
 0x8

	)

107 
	#BMV_IF_NO_HOLES
 0x10

	)

108 
	#BMV_IF_COWFORK
 0x20

	)

109 
	#BMV_IF_VALID
 \

110 (
BMV_IF_ATTRFORK
|
BMV_IF_NO_DMAPI_READ
|
BMV_IF_PREALLOC
| \

111 
BMV_IF_DELALLOC
|
BMV_IF_NO_HOLES
|
BMV_IF_COWFORK
)

	)

114 
	#BMV_OF_PREALLOC
 0x1

	)

115 
	#BMV_OF_DELALLOC
 0x2

	)

116 
	#BMV_OF_LAST
 0x4

	)

117 
	#BMV_OF_SHARED
 0x8

	)

126 #i‚de‡
HAVE_FSDMIDATA


127 
	sfsdmid©a
 {

128 
__u32
 
	mfsd_dmevmask
;

129 
__u16
 
	mfsd_∑ddög
;

130 
__u16
 
	mfsd_dm°©e
;

138 
	sxfs_Êock64
 {

139 
__s16
 
	ml_ty≥
;

140 
__s16
 
	ml_whí˚
;

141 
__s64
 
	ml_°¨t
;

142 
__s64
 
	ml_Àn
;

143 
__s32
 
	ml_sysid
;

144 
__u32
 
	ml_pid
;

145 
__s32
 
	ml_∑d
[4];

146 } 
	txfs_Êock64_t
;

151 
	sxfs_fs›_geom_v1
 {

152 
__u32
 
	mblocksize
;

153 
__u32
 
	mπextsize
;

154 
__u32
 
	magblocks
;

155 
__u32
 
	magcou¡
;

156 
__u32
 
	mlogblocks
;

157 
__u32
 
	m£˘size
;

158 
__u32
 
	möodesize
;

159 
__u32
 
	mimaxp˘
;

160 
__u64
 
	md©ablocks
;

161 
__u64
 
	mπblocks
;

162 
__u64
 
	mπexã¡s
;

163 
__u64
 
	mlog°¨t
;

164 
	muuid
[16];

165 
__u32
 
	msunô
;

166 
__u32
 
	mswidth
;

167 
__s32
 
	mvîsi⁄
;

168 
__u32
 
	mÊags
;

169 
__u32
 
	mlog£˘size
;

170 
__u32
 
	mπ£˘size
;

171 
__u32
 
	mdúblocksize
;

172 } 
	txfs_fs›_geom_v1_t
;

177 
	sxfs_fs›_geom
 {

178 
__u32
 
	mblocksize
;

179 
__u32
 
	mπextsize
;

180 
__u32
 
	magblocks
;

181 
__u32
 
	magcou¡
;

182 
__u32
 
	mlogblocks
;

183 
__u32
 
	m£˘size
;

184 
__u32
 
	möodesize
;

185 
__u32
 
	mimaxp˘
;

186 
__u64
 
	md©ablocks
;

187 
__u64
 
	mπblocks
;

188 
__u64
 
	mπexã¡s
;

189 
__u64
 
	mlog°¨t
;

190 
	muuid
[16];

191 
__u32
 
	msunô
;

192 
__u32
 
	mswidth
;

193 
__s32
 
	mvîsi⁄
;

194 
__u32
 
	mÊags
;

195 
__u32
 
	mlog£˘size
;

196 
__u32
 
	mπ£˘size
;

197 
__u32
 
	mdúblocksize
;

198 
__u32
 
	mlogsunô
;

199 } 
	txfs_fs›_geom_t
;

202 
	sxfs_fs›_cou¡s
 {

203 
__u64
 
	m‰ìd©a
;

204 
__u64
 
	m‰ìπx
;

205 
__u64
 
	m‰ìöo
;

206 
__u64
 
	mÆlocöo
;

207 } 
	txfs_fs›_cou¡s_t
;

210 
	sxfs_fs›_ªsblks
 {

211 
__u64
 
	mªsblks
;

212 
__u64
 
	mªsblks_avaû
;

213 } 
	txfs_fs›_ªsblks_t
;

215 
	#XFS_FSOP_GEOM_VERSION
 0

	)

217 
	#XFS_FSOP_GEOM_FLAGS_ATTR
 0x0001

	)

218 
	#XFS_FSOP_GEOM_FLAGS_NLINK
 0x0002

	)

219 
	#XFS_FSOP_GEOM_FLAGS_QUOTA
 0x0004

	)

220 
	#XFS_FSOP_GEOM_FLAGS_IALIGN
 0x0008

	)

221 
	#XFS_FSOP_GEOM_FLAGS_DALIGN
 0x0010

	)

222 
	#XFS_FSOP_GEOM_FLAGS_SHARED
 0x0020

	)

223 
	#XFS_FSOP_GEOM_FLAGS_EXTFLG
 0x0040

	)

224 
	#XFS_FSOP_GEOM_FLAGS_DIRV2
 0x0080

	)

225 
	#XFS_FSOP_GEOM_FLAGS_LOGV2
 0x0100

	)

226 
	#XFS_FSOP_GEOM_FLAGS_SECTOR
 0x0200

	)

227 
	#XFS_FSOP_GEOM_FLAGS_ATTR2
 0x0400

	)

228 
	#XFS_FSOP_GEOM_FLAGS_PROJID32
 0x0800

	)

229 
	#XFS_FSOP_GEOM_FLAGS_DIRV2CI
 0x1000

	)

230 
	#XFS_FSOP_GEOM_FLAGS_LAZYSB
 0x4000

	)

231 
	#XFS_FSOP_GEOM_FLAGS_V5SB
 0x8000

	)

232 
	#XFS_FSOP_GEOM_FLAGS_FTYPE
 0x10000

	)

233 
	#XFS_FSOP_GEOM_FLAGS_FINOBT
 0x20000

	)

234 
	#XFS_FSOP_GEOM_FLAGS_SPINODES
 0x40000

	)

235 
	#XFS_FSOP_GEOM_FLAGS_RMAPBT
 0x80000

	)

236 
	#XFS_FSOP_GEOM_FLAGS_REFLINK
 0x100000

	)

243 
	#XFS_MIN_AG_BLOCKS
 64

	)

244 
	#XFS_MIN_LOG_BLOCKS
 512ULL

	)

245 
	#XFS_MAX_LOG_BLOCKS
 (1024 * 1024ULL)

	)

246 
	#XFS_MIN_LOG_BYTES
 (10 * 1024 * 1024ULL)

	)

249 
	#XFS_MAX_LOG_BYTES
 \

250 ((2 * 1024 * 1024 * 1024ULLË- 
XFS_MIN_LOG_BYTES
)

	)

253 
	#XFS_MAX_DBLOCKS
(
s
Ë((
xfs_rfsblock_t
)(s)->
sb_agcou¡
 * (s)->
sb_agblocks
)

	)

254 
	#XFS_MIN_DBLOCKS
(
s
Ë((
xfs_rfsblock_t
)((s)->
sb_agcou¡
 - 1) * \

255 (
s
)->
sb_agblocks
 + 
XFS_MIN_AG_BLOCKS
)

	)

260 
	sxfs_growfs_d©a
 {

261 
__u64
 
	m√wblocks
;

262 
__u32
 
	mimaxp˘
;

263 } 
	txfs_growfs_d©a_t
;

265 
	sxfs_growfs_log
 {

266 
__u32
 
	m√wblocks
;

267 
__u32
 
	misöt
;

268 } 
	txfs_growfs_log_t
;

270 
	sxfs_growfs_π
 {

271 
__u64
 
	m√wblocks
;

272 
__u32
 
	mextsize
;

273 } 
	txfs_growfs_π_t
;

279 
	sxfs_b°ime
 {

280 
time_t
 
	mtv_£c
;

281 
__s32
 
	mtv_n£c
;

282 } 
	txfs_b°ime_t
;

284 
	sxfs_b°©
 {

285 
__u64
 
	mbs_öo
;

286 
__u16
 
	mbs_mode
;

287 
__u16
 
	mbs_∆ök
;

288 
__u32
 
	mbs_uid
;

289 
__u32
 
	mbs_gid
;

290 
__u32
 
	mbs_rdev
;

291 
__s32
 
	mbs_blksize
;

292 
__s64
 
	mbs_size
;

293 
xfs_b°ime_t
 
	mbs_©ime
;

294 
xfs_b°ime_t
 
	mbs_mtime
;

295 
xfs_b°ime_t
 
	mbs_˘ime
;

296 
öt64_t
 
	mbs_blocks
;

297 
__u32
 
	mbs_xÊags
;

298 
__s32
 
	mbs_extsize
;

299 
__s32
 
	mbs_exã¡s
;

300 
__u32
 
	mbs_gí
;

301 
__u16
 
	mbs_¥ojid_lo
;

302 
	#bs_¥ojid
 
bs_¥ojid_lo


	)

303 
__u16
 
	mbs_f‹koff
;

304 
__u16
 
	mbs_¥ojid_hi
;

305 
	mbs_∑d
[6];

306 
__u32
 
	mbs_cowextsize
;

307 
__u32
 
	mbs_dmevmask
;

308 
__u16
 
	mbs_dm°©e
;

309 
__u16
 
	mbs_´xã¡s
;

310 } 
	txfs_b°©_t
;

317 
ölöe
 
__uöt32_t


318 
	$b°©_gë_¥ojid
(
xfs_b°©
 *
bs
)

320  (
__uöt32_t
)
bs
->
bs_¥ojid_hi
 << 16 | bs->
bs_¥ojid_lo
;

321 
	}
}

326 
	sxfs_fs›_bulkªq
 {

327 
__u64
 
__u£r
 *
	mœ°ù
;

328 
__s32
 
	micou¡
;

329 
__u£r
 *
	mubuf„r
;

330 
__s32
 
__u£r
 *
	mocou¡
;

331 } 
	txfs_fs›_bulkªq_t
;

337 
	sxfs_öogΩ
 {

338 
__u64
 
	mxi_°¨töo
;

339 
__s32
 
	mxi_Æloccou¡
;

340 
__u64
 
	mxi_Ælocmask
;

341 } 
	txfs_öogΩ_t
;

347 
	sxfs_îr‹_öje˘i⁄
 {

348 
__s32
 
	mfd
;

349 
__s32
 
	mîπag
;

350 } 
	txfs_îr‹_öje˘i⁄_t
;

356 
	#XFS_EOFBLOCKS_VERSION
 1

	)

357 
	sxfs_fs_eofblocks
 {

358 
__u32
 
	meof_vîsi⁄
;

359 
__u32
 
	meof_Êags
;

360 
uid_t
 
	meof_uid
;

361 
gid_t
 
	meof_gid
;

362 
¥id_t
 
	meof_¥id
;

363 
__u32
 
	m∑d32
;

364 
__u64
 
	meof_mö_fûe_size
;

365 
__u64
 
	m∑d64
[12];

369 
	#XFS_EOF_FLAGS_SYNC
 (1 << 0Ë

	)

370 
	#XFS_EOF_FLAGS_UID
 (1 << 1Ë

	)

371 
	#XFS_EOF_FLAGS_GID
 (1 << 2Ë

	)

372 
	#XFS_EOF_FLAGS_PRID
 (1 << 3Ë

	)

373 
	#XFS_EOF_FLAGS_MINFILESIZE
 (1 << 4Ë

	)

374 
	#XFS_EOF_FLAGS_UNION
 (1 << 5Ë

	)

377 
	#XFS_EOF_FLAGS_VALID
 \

378 (
XFS_EOF_FLAGS_SYNC
 | \

379 
XFS_EOF_FLAGS_UID
 | \

380 
XFS_EOF_FLAGS_GID
 | \

381 
XFS_EOF_FLAGS_PRID
 | \

382 
XFS_EOF_FLAGS_MINFILESIZE
)

	)

388 
	sxfs_fs›_h™dÀªq
 {

389 
__u32
 
	mfd
;

390 
__u£r
 *
	m∑th
;

391 
__u32
 
	moÊags
;

392 
__u£r
 *
	mih™dÀ
;

393 
__u32
 
	mih™dÀn
;

394 
__u£r
 *
	moh™dÀ
;

395 
__u32
 
__u£r
 *
	moh™dÀn
;

396 } 
	txfs_fs›_h™dÀªq_t
;

405 
	sxfs_fs›_£tdm_h™dÀªq
 {

406 
xfs_fs›_h™dÀªq
 
	mhªq
;

407 
fsdmid©a
 
__u£r
 *
	md©a
;

408 } 
	txfs_fs›_£tdm_h™dÀªq_t
;

410 
	sxfs_©åli°_curs‹
 {

411 
__u32
 
	m›aque
[4];

412 } 
	txfs_©åli°_curs‹_t
;

414 
	sxfs_fs›_©åli°_h™dÀªq
 {

415 
xfs_fs›_h™dÀªq
 
	mhªq
;

416 
xfs_©åli°_curs‹
 
	mpos
;

417 
__u32
 
	mÊags
;

418 
__u32
 
	mbuÊí
;

419 
__u£r
 *
	mbuf„r
;

420 } 
	txfs_fs›_©åli°_h™dÀªq_t
;

422 
	sxfs_©å_mu…i›
 {

423 
__u32
 
	mam_›code
;

424 
	#ATTR_OP_GET
 1

	)

425 
	#ATTR_OP_SET
 2

	)

426 
	#ATTR_OP_REMOVE
 3

	)

427 
__s32
 
	mam_îr‹
;

428 
__u£r
 *
	mam_©å«me
;

429 
__u£r
 *
	mam_©åvÆue
;

430 
__u32
 
	mam_Àngth
;

431 
__u32
 
	mam_Êags
;

432 } 
	txfs_©å_mu…i›_t
;

434 
	sxfs_fs›_©åmu…i_h™dÀªq
 {

435 
xfs_fs›_h™dÀªq
 
	mhªq
;

436 
__u32
 
	m›cou¡
;

437 
xfs_©å_mu…i›
 
__u£r
 *
	m›s
;

438 } 
	txfs_fs›_©åmu…i_h™dÀªq_t
;

443 °ru˘ { 
__u32
 
	mvÆ
[2]; } 
	txfs_fsid_t
;

445 
	sxfs_fid
 {

446 
__u16
 
	mfid_Àn
;

447 
__u16
 
	mfid_∑d
;

448 
__u32
 
	mfid_gí
;

449 
__u64
 
	mfid_öo
;

450 } 
	txfs_fid_t
;

452 
	sxfs_h™dÀ
 {

454 
__s64
 
	mÆign
;

455 
xfs_fsid_t
 
	m_ha_fsid
;

456 } 
	mha_u
;

457 
xfs_fid_t
 
	mha_fid
;

458 } 
	txfs_h™dÀ_t
;

459 
	#ha_fsid
 
ha_u
.
_ha_fsid


	)

461 
	#XFS_HSIZE
(
h™dÀ
Ë(((*Ë&(h™dÀ).
ha_fid
.
fid_∑d
 \

462 - (*Ë&(
h™dÀ
)) \

463 + (
h™dÀ
).
ha_fid
.
fid_Àn
)

	)

468 
	sxfs_sw≠ext


470 
__öt64_t
 
	msx_vîsi⁄
;

471 
	#XFS_SX_VERSION
 0

	)

472 
__öt64_t
 
	msx_fdèrgë
;

473 
__öt64_t
 
	msx_fdtmp
;

474 
xfs_off_t
 
	msx_off£t
;

475 
xfs_off_t
 
	msx_Àngth
;

476 
	msx_∑d
[16];

477 
xfs_b°©_t
 
	msx_°©
;

478 } 
	txfs_sw≠ext_t
;

483 
	#XFS_FSOP_GOING_FLAGS_DEFAULT
 0x0

	)

484 
	#XFS_FSOP_GOING_FLAGS_LOGFLUSH
 0x1

	)

485 
	#XFS_FSOP_GOING_FLAGS_NOLOGFLUSH
 0x2

	)

490 #ifde‡
XATTR_LIST_MAX


491 
	#XFS_XATTR_LIST_MAX
 
XATTR_LIST_MAX


	)

493 
	#XFS_XATTR_LIST_MAX
 65536

	)

499 
	#XFS_IOC_GETXFLAGS
 
FS_IOC_GETFLAGS


	)

500 
	#XFS_IOC_SETXFLAGS
 
FS_IOC_SETFLAGS


	)

501 
	#XFS_IOC_GETVERSION
 
FS_IOC_GETVERSION


	)

508 
	#XFS_IOC_ALLOCSP
 
	`_IOW
 ('X', 10, 
xfs_Êock64
)

	)

509 
	#XFS_IOC_FREESP
 
	`_IOW
 ('X', 11, 
xfs_Êock64
)

	)

510 
	#XFS_IOC_DIOINFO
 
	`_IOR
 ('X', 30, 
diﬂâr
)

	)

511 
	#XFS_IOC_ALLOCSP64
 
	`_IOW
 ('X', 36, 
xfs_Êock64
)

	)

512 
	#XFS_IOC_FREESP64
 
	`_IOW
 ('X', 37, 
xfs_Êock64
)

	)

513 
	#XFS_IOC_GETBMAP
 
	`_IOWR
('X', 38, 
gëbm≠
)

	)

514 
	#XFS_IOC_FSSETDM
 
	`_IOW
 ('X', 39, 
fsdmid©a
)

	)

515 
	#XFS_IOC_RESVSP
 
	`_IOW
 ('X', 40, 
xfs_Êock64
)

	)

516 
	#XFS_IOC_UNRESVSP
 
	`_IOW
 ('X', 41, 
xfs_Êock64
)

	)

517 
	#XFS_IOC_RESVSP64
 
	`_IOW
 ('X', 42, 
xfs_Êock64
)

	)

518 
	#XFS_IOC_UNRESVSP64
 
	`_IOW
 ('X', 43, 
xfs_Êock64
)

	)

519 
	#XFS_IOC_GETBMAPA
 
	`_IOWR
('X', 44, 
gëbm≠
)

	)

520 
	#XFS_IOC_FSGETXATTRA
 
	`_IOR
 ('X', 45, 
fsx©å
)

	)

523 
	#XFS_IOC_GETBMAPX
 
	`_IOWR
('X', 56, 
gëbm≠
)

	)

524 
	#XFS_IOC_ZERO_RANGE
 
	`_IOW
 ('X', 57, 
xfs_Êock64
)

	)

525 
	#XFS_IOC_FREE_EOFBLOCKS
 
	`_IOR
 ('X', 58, 
xfs_fs_eofblocks
)

	)

530 
	#XFS_IOC_FSGEOMETRY_V1
 
	`_IOR
 ('X', 100, 
xfs_fs›_geom_v1
)

	)

531 
	#XFS_IOC_FSBULKSTAT
 
	`_IOWR
('X', 101, 
xfs_fs›_bulkªq
)

	)

532 
	#XFS_IOC_FSBULKSTAT_SINGLE
 
	`_IOWR
('X', 102, 
xfs_fs›_bulkªq
)

	)

533 
	#XFS_IOC_FSINUMBERS
 
	`_IOWR
('X', 103, 
xfs_fs›_bulkªq
)

	)

534 
	#XFS_IOC_PATH_TO_FSHANDLE
 
	`_IOWR
('X', 104, 
xfs_fs›_h™dÀªq
)

	)

535 
	#XFS_IOC_PATH_TO_HANDLE
 
	`_IOWR
('X', 105, 
xfs_fs›_h™dÀªq
)

	)

536 
	#XFS_IOC_FD_TO_HANDLE
 
	`_IOWR
('X', 106, 
xfs_fs›_h™dÀªq
)

	)

537 
	#XFS_IOC_OPEN_BY_HANDLE
 
	`_IOWR
('X', 107, 
xfs_fs›_h™dÀªq
)

	)

538 
	#XFS_IOC_READLINK_BY_HANDLE
 
	`_IOWR
('X', 108, 
xfs_fs›_h™dÀªq
)

	)

539 
	#XFS_IOC_SWAPEXT
 
	`_IOWR
('X', 109, 
xfs_sw≠ext
)

	)

540 
	#XFS_IOC_FSGROWFSDATA
 
	`_IOW
 ('X', 110, 
xfs_growfs_d©a
)

	)

541 
	#XFS_IOC_FSGROWFSLOG
 
	`_IOW
 ('X', 111, 
xfs_growfs_log
)

	)

542 
	#XFS_IOC_FSGROWFSRT
 
	`_IOW
 ('X', 112, 
xfs_growfs_π
)

	)

543 
	#XFS_IOC_FSCOUNTS
 
	`_IOR
 ('X', 113, 
xfs_fs›_cou¡s
)

	)

544 
	#XFS_IOC_SET_RESBLKS
 
	`_IOWR
('X', 114, 
xfs_fs›_ªsblks
)

	)

545 
	#XFS_IOC_GET_RESBLKS
 
	`_IOR
 ('X', 115, 
xfs_fs›_ªsblks
)

	)

546 
	#XFS_IOC_ERROR_INJECTION
 
	`_IOW
 ('X', 116, 
xfs_îr‹_öje˘i⁄
)

	)

547 
	#XFS_IOC_ERROR_CLEARALL
 
	`_IOW
 ('X', 117, 
xfs_îr‹_öje˘i⁄
)

	)

550 
	#XFS_IOC_FREEZE
 
	`_IOWR
('X', 119, Ë

	)

551 
	#XFS_IOC_THAW
 
	`_IOWR
('X', 120, Ë

	)

553 
	#XFS_IOC_FSSETDM_BY_HANDLE
 
	`_IOW
 ('X', 121, 
xfs_fs›_£tdm_h™dÀªq
)

	)

554 
	#XFS_IOC_ATTRLIST_BY_HANDLE
 
	`_IOW
 ('X', 122, 
xfs_fs›_©åli°_h™dÀªq
)

	)

555 
	#XFS_IOC_ATTRMULTI_BY_HANDLE
 
	`_IOW
 ('X', 123, 
xfs_fs›_©åmu…i_h™dÀªq
)

	)

556 
	#XFS_IOC_FSGEOMETRY
 
	`_IOR
 ('X', 124, 
xfs_fs›_geom
)

	)

557 
	#XFS_IOC_GOINGDOWN
 
	`_IOR
 ('X', 125, 
__uöt32_t
)

	)

562 
	sxfs_˛⁄e_¨gs
 {

563 
__s64
 
	m§c_fd
;

564 
__u64
 
	m§c_off£t
;

565 
__u64
 
	m§c_Àngth
;

566 
__u64
 
	mde°_off£t
;

570 
	#XFS_EXTENT_DATA_SAME
 0

	)

571 
	#XFS_EXTENT_DATA_DIFFERS
 1

	)

574 
	sxfs_exã¡_d©a_öfo
 {

575 
__s64
 
	mfd
;

576 
__u64
 
	mlogiˇl_off£t
;

577 
__u64
 
	mbyãs_dedu≥d
;

584 
__s32
 
	m°©us
;

585 
__u32
 
	mª£rved
;

589 
	sxfs_exã¡_d©a
 {

590 
__u64
 
	mlogiˇl_off£t
;

591 
__u64
 
	mÀngth
;

592 
__u16
 
	mde°_cou¡
;

593 
__u16
 
	mª£rved1
;

594 
__u32
 
	mª£rved2
;

595 
xfs_exã¡_d©a_öfo
 
	möfo
[0];

598 
	#XFS_IOC_CLONE
 
	`_IOW
 (0x94, 9, )

	)

599 
	#XFS_IOC_CLONE_RANGE
 
	`_IOW
 (0x94, 13, 
xfs_˛⁄e_¨gs
)

	)

600 
	#XFS_IOC_FILE_EXTENT_SAME
 
	`_IOWR
(0x94, 54, 
xfs_exã¡_d©a
)

	)

602 #i‚de‡
HAVE_BBMACROS


608 
	#BBSHIFT
 9

	)

609 
	#BBSIZE
 (1<<
BBSHIFT
)

	)

610 
	#BBMASK
 (
BBSIZE
-1)

	)

611 
	#BTOBB
(
byãs
Ë(((
__u64
)(byãsË+ 
BBSIZE
 - 1Ë>> 
BBSHIFT
)

	)

612 
	#BTOBBT
(
byãs
Ë((
__u64
)(byãsË>> 
BBSHIFT
)

	)

613 
	#BBTOB
(
bbs
Ë((bbsË<< 
BBSHIFT
)

	)

	@/usr/include/xfs/xfs_types.h

18 #i‚de‡
__XFS_TYPES_H__


19 
	#__XFS_TYPES_H__


	)

21 
__uöt32_t
 
	t¥id_t
;

23 
__uöt32_t
 
	txfs_agblock_t
;

24 
__uöt32_t
 
	txfs_agöo_t
;

25 
__uöt32_t
 
	txfs_exéí_t
;

26 
__uöt32_t
 
	txfs_agnumbî_t
;

27 
__öt32_t
 
	txfs_exäum_t
;

28 
__öt16_t
 
	txfs_´xäum_t
;

29 
__öt64_t
 
	txfs_fsize_t
;

30 
__uöt64_t
 
	txfs_ufsize_t
;

32 
__öt32_t
 
	txfs_sumöfo_t
;

33 
__öt32_t
 
	txfs_πw‹d_t
;

35 
__öt64_t
 
	txfs_l¢_t
;

36 
__öt32_t
 
	txfs_tid_t
;

38 
__uöt32_t
 
	txfs_dablk_t
;

39 
__uöt32_t
 
	txfs_dahash_t
;

41 
__uöt64_t
 
	txfs_fsblock_t
;

42 
__uöt64_t
 
	txfs_rfsblock_t
;

43 
__uöt64_t
 
	txfs_πblock_t
;

44 
__uöt64_t
 
	txfs_fûeoff_t
;

45 
__uöt64_t
 
	txfs_fûblks_t
;

47 
__öt64_t
 
	txfs_§tblock_t
;

48 
__öt64_t
 
	txfs_sfûoff_t
;

53 
	#NULLFSBLOCK
 ((
xfs_fsblock_t
)-1)

	)

54 
	#NULLRFSBLOCK
 ((
xfs_rfsblock_t
)-1)

	)

55 
	#NULLRTBLOCK
 ((
xfs_πblock_t
)-1)

	)

56 
	#NULLFILEOFF
 ((
xfs_fûeoff_t
)-1)

	)

58 
	#NULLAGBLOCK
 ((
xfs_agblock_t
)-1)

	)

59 
	#NULLAGNUMBER
 ((
xfs_agnumbî_t
)-1)

	)

60 
	#NULLEXTNUM
 ((
xfs_exäum_t
)-1)

	)

62 
	#NULLCOMMITLSN
 ((
xfs_l¢_t
)-1)

	)

64 
	#NULLFSINO
 ((
xfs_öo_t
)-1)

	)

65 
	#NULLAGINO
 ((
xfs_agöo_t
)-1)

	)

70 
	#MAXEXTLEN
 ((
xfs_exéí_t
)0x001fffffË

	)

71 
	#MAXEXTNUM
 ((
xfs_exäum_t
)0x7fffffffË

	)

72 
	#MAXAEXTNUM
 ((
xfs_´xäum_t
)0x7fffË

	)

81 
	#XFS_MIN_BLOCKSIZE_LOG
 9

	)

82 
	#XFS_MAX_BLOCKSIZE_LOG
 16

	)

83 
	#XFS_MIN_BLOCKSIZE
 (1 << 
XFS_MIN_BLOCKSIZE_LOG
)

	)

84 
	#XFS_MAX_BLOCKSIZE
 (1 << 
XFS_MAX_BLOCKSIZE_LOG
)

	)

85 
	#XFS_MIN_CRC_BLOCKSIZE
 (1 << (
XFS_MIN_BLOCKSIZE_LOG
 + 1))

	)

86 
	#XFS_MIN_SECTORSIZE_LOG
 9

	)

87 
	#XFS_MAX_SECTORSIZE_LOG
 15

	)

88 
	#XFS_MIN_SECTORSIZE
 (1 << 
XFS_MIN_SECTORSIZE_LOG
)

	)

89 
	#XFS_MAX_SECTORSIZE
 (1 << 
XFS_MAX_SECTORSIZE_LOG
)

	)

94 
	#XFS_DATA_FORK
 0

	)

95 
	#XFS_ATTR_FORK
 1

	)

96 
	#XFS_COW_FORK
 2

	)

101 
	#MINDBTPTRS
 3

	)

102 
	#MINABTPTRS
 2

	)

108 
	#MAXNAMELEN
 256

	)

111 
	mXFS_LOOKUP_EQi
, 
	mXFS_LOOKUP_LEi
, 
	mXFS_LOOKUP_GEi


112 } 
	txfs_lookup_t
;

115 
	mXFS_BTNUM_BNOi
, 
	mXFS_BTNUM_CNTi
, 
	mXFS_BTNUM_RMAPi
, 
	mXFS_BTNUM_BMAPi
,

116 
	mXFS_BTNUM_INOi
, 
	mXFS_BTNUM_FINOi
, 
	mXFS_BTNUM_REFCi
, 
	mXFS_BTNUM_MAX


117 } 
	txfs_bäum_t
;

119 
	sxfs_«me
 {

120 c⁄° *
	m«me
;

121 
	mÀn
;

122 
	mty≥
;

129 
__uöt32_t
 
	txfs_dqid_t
;

134 
	#XFS_NBBYLOG
 3

	)

135 
	#XFS_WORDLOG
 2

	)

136 
	#XFS_NBWORDLOG
 (
XFS_NBBYLOG
 + 
XFS_WORDLOG
)

	)

137 
	#XFS_NBWORD
 (1 << 
XFS_NBWORDLOG
)

	)

138 
	#XFS_WORDMASK
 ((1 << 
XFS_WORDLOG
Ë- 1)

	)

	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_X86_UNISTD_H


2 
	#_ASM_X86_UNISTD_H


	)

5 
	#__X32_SYSCALL_BIT
 0x40000000

	)

7 #ifde‡
__i386__


8 
	~<asm/uni°d_32.h
>

9 #ñi‡
deföed
(
__ILP32__
)

10 
	~<asm/uni°d_x32.h
>

12 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 #ifde‡
__USE_ISOC99


26 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

27 #ifde‡
__MATH_DECLARE_LDOUBLE


28 #ifde‡
__NO_LONG_DOUBLE_MATH


29 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

31 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

36 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


38 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

40 #ifde‡
__USE_ISOC99


41 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

42 #ifde‡
__MATH_DECLARE_LDOUBLE


43 #ifde‡
__NO_LONG_DOUBLE_MATH


44 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

46 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

52 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

53 #ifde‡
__USE_ISOC99


54 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

55 #ifde‡
__MATH_DECLARE_LDOUBLE


56 #ifde‡
__NO_LONG_DOUBLE_MATH


57 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

59 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

65 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

66 #ifde‡
__USE_ISOC99


67 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

68 #ifde‡
__MATH_DECLARE_LDOUBLE


69 #ifde‡
__NO_LONG_DOUBLE_MATH


70 
__REDIRECT_NTH
 (
©™2l
, (, ),

71 
__©™2_föôe
);

73 
__REDIRECT_NTH
 (
©™2l
, (, ),

74 
__©™2l_föôe
);

79 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


81 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

83 #ifde‡
__USE_ISOC99


84 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

85 #ifde‡
__MATH_DECLARE_LDOUBLE


86 #ifde‡
__NO_LONG_DOUBLE_MATH


87 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

89 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

95 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

96 #ifde‡
__USE_ISOC99


97 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

102 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

108 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

109 #ifde‡
__USE_ISOC99


110 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

111 #ifde‡
__MATH_DECLARE_LDOUBLE


112 #ifde‡
__NO_LONG_DOUBLE_MATH


113 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

115 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

120 #ifde‡
__USE_GNU


122 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

123 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

124 #ifde‡
__MATH_DECLARE_LDOUBLE


125 #ifde‡
__NO_LONG_DOUBLE_MATH


126 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

128 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

133 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

134 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

135 #ifde‡
__MATH_DECLARE_LDOUBLE


136 #ifde‡
__NO_LONG_DOUBLE_MATH


137 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

139 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

144 #ifde‡
__USE_ISOC99


146 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

147 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

148 #ifde‡
__MATH_DECLARE_LDOUBLE


149 #ifde‡
__NO_LONG_DOUBLE_MATH


150 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

152 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

158 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

159 #ifde‡
__USE_ISOC99


160 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

161 #ifde‡
__MATH_DECLARE_LDOUBLE


162 #ifde‡
__NO_LONG_DOUBLE_MATH


163 
__REDIRECT_NTH
 (
fmodl
, (, ),

164 
__fmod_föôe
);

166 
__REDIRECT_NTH
 (
fmodl
, (, ),

167 
__fmodl_föôe
);

172 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


174 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

176 #ifde‡
__USE_ISOC99


177 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

178 #ifde‡
__MATH_DECLARE_LDOUBLE


179 #ifde‡
__NO_LONG_DOUBLE_MATH


180 
__REDIRECT_NTH
 (
hypŸl
, (, ),

181 
__hypŸ_föôe
);

183 
__REDIRECT_NTH
 (
hypŸl
, (, ),

184 
__hypŸl_föôe
);

189 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


191 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

193 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


194 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

195 #ifde‡
__MATH_DECLARE_LDOUBLE


196 #ifde‡
__NO_LONG_DOUBLE_MATH


197 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

199 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

204 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


206 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

208 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


209 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

210 #ifde‡
__MATH_DECLARE_LDOUBLE


211 #ifde‡
__NO_LONG_DOUBLE_MATH


212 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

214 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


221 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

223 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


224 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

225 #ifde‡
__MATH_DECLARE_LDOUBLE


226 #ifde‡
__NO_LONG_DOUBLE_MATH


227 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

229 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


236 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

238 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


239 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

240 #ifde‡
__MATH_DECLARE_LDOUBLE


241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

244 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


251 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

253 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


254 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

255 #ifde‡
__MATH_DECLARE_LDOUBLE


256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

259 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

264 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


266 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

268 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


269 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

270 #ifde‡
__MATH_DECLARE_LDOUBLE


271 #ifde‡
__NO_LONG_DOUBLE_MATH


272 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

274 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

279 #ifde‡
__USE_MISC


281 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

282 #ifde‡
__USE_ISOC99


283 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

284 #ifde‡
__MATH_DECLARE_LDOUBLE


285 #ifde‡
__NO_LONG_DOUBLE_MATH


286 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

287 
__lgamma_r_föôe
);

289 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

290 
__lgammÆ_r_föôe
);

296 
__lgamma_r_föôe
 (, *);

297 
__lgammaf_r_föôe
 (, *);

298 #ifde‡
__NO_LONG_DOUBLE_MATH


299 
__REDIRECT_NTH
 (
__lgammÆ_r_föôe
, (, *),

300 
__lgamma_r_föôe
);

302 
__lgammÆ_r_föôe
 (, *);

305 #i‡((
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99
) \

306 && 
deföed
 
	g__exã∫_Æways_ölöe
)

308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

310 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


311  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

313 
__loˇl_signgam
 = 0;

314  
	`__lgamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

316 
	}
}

318 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


319 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

321 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


322  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

324 
__loˇl_signgam
 = 0;

325  
	`__lgammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

327 
	}
}

328 #ifde‡
__MATH_DECLARE_LDOUBLE


329 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

331 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


332  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

334 
__loˇl_signgam
 = 0;

335  
	`__lgammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

337 
	}
}

341 #i‡((
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)) \

342 && 
deföed
 
	g__exã∫_Æways_ölöe
)

344 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

346  
	`__lgamma_r_föôe
 (
__d
, &
signgam
);

347 
	}
}

348 #ifde‡
__USE_ISOC99


349 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

351  
	`__lgammaf_r_föôe
 (
__d
, &
signgam
);

352 
	}
}

353 #ifde‡
__MATH_DECLARE_LDOUBLE


354 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

356  
	`__lgammÆ_r_föôe
 (
__d
, &
signgam
);

357 
	}
}

363 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

364 #ifde‡
__USE_ISOC99


365 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

366 #ifde‡
__MATH_DECLARE_LDOUBLE


367 #ifde‡
__NO_LONG_DOUBLE_MATH


368 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

370 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

376 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

377 #ifde‡
__USE_ISOC99


378 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

379 #ifde‡
__MATH_DECLARE_LDOUBLE


380 #ifde‡
__NO_LONG_DOUBLE_MATH


381 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

383 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

388 #ifde‡
__USE_ISOC99


390 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

391 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

396 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

402 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

403 #ifde‡
__USE_ISOC99


404 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

405 #ifde‡
__MATH_DECLARE_LDOUBLE


406 #ifde‡
__NO_LONG_DOUBLE_MATH


407 
__REDIRECT_NTH
 (
powl
, (, ),

408 
__pow_föôe
);

410 
__REDIRECT_NTH
 (
powl
, (, ),

411 
__powl_föôe
);

416 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


418 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

420 #ifde‡
__USE_ISOC99


421 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

422 #ifde‡
__MATH_DECLARE_LDOUBLE


423 #ifde‡
__NO_LONG_DOUBLE_MATH


424 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

425 
__ªmaödî_föôe
);

427 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

428 
__ªmaödîl_föôe
);

433 #i‡(
deföed
 
__USE_MISC
 \

434 || (
deföed
 
	g__USE_XOPEN_EXTENDED
 && !deföed 
	g__USE_XOPEN2K8
))

436 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

438 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_ISOC99


439 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

440 #ifde‡
__MATH_DECLARE_LDOUBLE


441 #ifde‡
__NO_LONG_DOUBLE_MATH


442 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

443 
__sˇlb_föôe
);

445 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

446 
__sˇlbl_föôe
);

452 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

453 #ifde‡
__USE_ISOC99


454 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

455 #ifde‡
__MATH_DECLARE_LDOUBLE


456 #ifde‡
__NO_LONG_DOUBLE_MATH


457 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

459 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

465 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

466 #ifde‡
__USE_ISOC99


467 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

468 #ifde‡
__MATH_DECLARE_LDOUBLE


469 #ifde‡
__NO_LONG_DOUBLE_MATH


470 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

472 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

477 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__exã∫_Æways_ölöe


479 
__gamma_r_föôe
 (, *);

480 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

482 
__loˇl_signgam
 = 0;

483 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

484  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

485 
	}
}

486 
__gammaf_r_föôe
 (, *);

487 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

489 
__loˇl_signgam
 = 0;

490 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

491  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

492 
	}
}

493 #ifde‡
__MATH_DECLARE_LDOUBLE


494 
__gammÆ_r_föôe
 (, *);

495 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

497 
__loˇl_signgam
 = 0;

498 #ifde‡
__NO_LONG_DOUBLE_MATH


499 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

501 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

503  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

504 
	}
}

	@/usr/include/bits/math-vector.h

19 #i‚de‡
_MATH_H


25 
	~<bôs/libm-simd-de˛-°ubs.h
>

27 #i‡
deföed
 
__x86_64__
 && deföed 
__FAST_MATH__


28 #i‡
deföed
 
_OPENMP
 && _OPENMP >= 201307

30 
	#__DECL_SIMD_x86_64
 
	`_Pøgma
 ("om∞de˛¨êsimdÇŸöbønch")

	)

31 #ñi‡
__GNUC_PREREQ
 (6,0)

33 
	#__DECL_SIMD_x86_64
 
	`__©åibuã__
 ((
	`__simd__
 ("nŸöbønch")))

	)

36 #ifde‡
__DECL_SIMD_x86_64


37 #unde‡
__DECL_SIMD_cos


38 
	#__DECL_SIMD_cos
 
__DECL_SIMD_x86_64


	)

39 #unde‡
__DECL_SIMD_cosf


40 
	#__DECL_SIMD_cosf
 
__DECL_SIMD_x86_64


	)

41 #unde‡
__DECL_SIMD_sö


42 
	#__DECL_SIMD_sö
 
__DECL_SIMD_x86_64


	)

43 #unde‡
__DECL_SIMD_söf


44 
	#__DECL_SIMD_söf
 
__DECL_SIMD_x86_64


	)

45 #unde‡
__DECL_SIMD_söcos


46 
	#__DECL_SIMD_söcos
 
__DECL_SIMD_x86_64


	)

47 #unde‡
__DECL_SIMD_söcosf


48 
	#__DECL_SIMD_söcosf
 
__DECL_SIMD_x86_64


	)

49 #unde‡
__DECL_SIMD_log


50 
	#__DECL_SIMD_log
 
__DECL_SIMD_x86_64


	)

51 #unde‡
__DECL_SIMD_logf


52 
	#__DECL_SIMD_logf
 
__DECL_SIMD_x86_64


	)

53 #unde‡
__DECL_SIMD_exp


54 
	#__DECL_SIMD_exp
 
__DECL_SIMD_x86_64


	)

55 #unde‡
__DECL_SIMD_expf


56 
	#__DECL_SIMD_expf
 
__DECL_SIMD_x86_64


	)

57 #unde‡
__DECL_SIMD_pow


58 
	#__DECL_SIMD_pow
 
__DECL_SIMD_x86_64


	)

59 #unde‡
__DECL_SIMD_powf


60 
	#__DECL_SIMD_powf
 
__DECL_SIMD_x86_64


	)

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL_VEC
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL_VEC
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL_VEC
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL_VEC
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL_VEC
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL_VEC
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


199 #i‡(!
deföed
 
__˝lu•lus
 \

200 || 
	g__˝lu•lus
 < 201103L \

201 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

204 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

211 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

215 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

218 #ifde‡
__USE_ISOC99


219 
__BEGIN_NAMESPACE_C99


221 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

222 
	g__END_NAMESPACE_C99


225 #ifde‡
__USE_ISOC99


226 
__BEGIN_NAMESPACE_C99


228 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

229 
	g__END_NAMESPACE_C99


234 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

236 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

237 #i‡(!
deföed
 
__˝lu•lus
 \

238 || 
	g__˝lu•lus
 < 201103L \

239 || 
	g__MATH_DECLARING_DOUBLE
 == 0)

241 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

245 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && 
__MATH_DECLARING_DOUBLE
)

247 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

248 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

249 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

250 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

256 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

260 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

261 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

262 
	g__END_NAMESPACE_C99


265 #ifde‡
__USE_ISOC99


266 
__BEGIN_NAMESPACE_C99


268 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

269 
	g__END_NAMESPACE_C99


272 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

274 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

277 #ifde‡
__USE_MISC


281 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

285 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


286 
__BEGIN_NAMESPACE_C99


289 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

292 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

293 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


294 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

297 #ifde‡
__USE_GNU


299 
__MATHCALL
 (
√xtdown
,, (
_MdoubÀ_
 
__x
));

301 
__MATHCALL
 (
√xtup
,, (
_MdoubÀ_
 
__x
));

305 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

307 #ifde‡
__USE_ISOC99


309 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

313 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

316 #ifde‡
__USE_ISOC99


318 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

322 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

326 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

330 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

335 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

342 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

343 
__exãnsi⁄__


344 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

348 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

349 
__exãnsi⁄__


350 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

354 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

357 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

360 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

364 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

365 
__©åibuã__
 ((
__c⁄°__
));

368 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

369 
__©åibuã__
 ((
__c⁄°__
));

373 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

376 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


377 
	g__END_NAMESPACE_C99


380 #ifde‡
__USE_GNU


382 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

383 
__©åibuã__
 ((
__c⁄°__
));

386 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

387 && 
	g__MATH_DECLARING_DOUBLE
 \

388 && !
deföed
 
	g__USE_XOPEN2K8
)

390 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #ifde‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #ifde‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #ifde‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


390 #i‡!
deföed
 
__SSE2_MATH__
 && !deföed 
__x86_64__


391 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

392 && 
deföed
 
	g__OPTIMIZE__
)

396 #unde‡
m©h_îrh™dlög


405 #ifde‡
__USE_ISOC99


406 
	#__ölöe_m©h›
(
func
, 
›
) \

407 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

408 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

409 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

410 
	#__ölöe_m©h›NP
(
func
, 
›
) \

411 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

412 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

413 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

415 
	#__ölöe_m©h›
(
func
, 
›
) \

416 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

417 
	#__ölöe_m©h›NP
(
func
, 
›
) \

418 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

421 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

422 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

423 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

424 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

427 #ifde‡
__USE_ISOC99


428 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

429 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

430 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

432 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

433 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

434 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

435 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

437 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

438 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

439 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

440 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

443 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

444 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

445 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

447 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

448 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

450 
Êﬂt_ty≥
 
__ªsu…
; \

451 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

452  
__ªsu…
; \

453 }

	)

456 #ifde‡
__USE_ISOC99


457 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

458 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

460 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

461 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

462 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

463 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

464 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

465 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

466 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

469 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

470 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

471 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

472 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

473 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

474 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

477 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

478 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

479 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

480 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

482 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

483 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

484 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

485 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

486 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

487 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

488 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

489 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

490 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

491 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

492 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

493 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

496 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

497 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

498 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

500 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

501 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

503 
code
; \

504 }

	)

507 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

508 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

509 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

511 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

512 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

514 
code
; \

515 }

	)

517 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

518 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

519 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

521 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

522 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

523 
Êﬂt_ty≥
 
¨g3
)) \

525 
code
; \

526 }

	)

530 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


534 #ifde‡
__FAST_MATH__


535 #ifde‡
__USE_GNU


536 
	#__söcos_code
 \

537 
__co§
; \

538 
__sör
; \

539 
__swtmp
; \

540 
__asm
 
__vﬁ©ûe__
 \

555 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

556 *
__söx
 = 
__sör
; \

557 *
__cosx
 = 
__co§


	)

559 
__MATH_INLINE
 

560 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

562 
__söcos_code
;

563 
	}
}

565 
__MATH_INLINE
 

566 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

568 
__söcos_code
;

569 
	}
}

571 
__MATH_INLINE
 

572 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

574 
__söcos_code
;

575 
	}
}

582 #i‡
__GNUC_PREREQ
 (3, 5)

583 
	#__expm1_code
 \

584 
__ãmp
; \

585 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

586  
__ãmp
 ? __ãm∞: 
__x


	)

588 
	#__expm1_code
 \

589 
__vÆue
; \

590 
__exp⁄ít
; \

591 
__ãmp
; \

592 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

602 
__asm
 
__vﬁ©ûe__
 \

604 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

605 
__ãmp
 -= 1.0; \

606 
__ãmp
 +
__vÆue
; \

607  
__ãmp
 ? __ãm∞: 
__x


	)

609 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

611 #i‡
	`__GNUC_PREREQ
 (3, 4)

612 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

614 
	#__exp_code
 \

615 
__vÆue
; \

616 
__exp⁄ít
; \

617 
__asm
 
__vﬁ©ûe__
 \

625 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

626 
__vÆue
 += 1.0; \

627 
__asm
 
__vﬁ©ûe__
 \

629 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

630  
__vÆue


	)

631 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

632 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

636 #i‡!
	`__GNUC_PREREQ
 (3, 5)

637 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

638 
__vÆue
; \

639 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

640 
__asm
 
__vﬁ©ûe__
 \

642 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

643  
__vÆue
)

648 #i‡
	`__GNUC_PREREQ
 (3, 4)

649 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

650  
	$__buûtö_©™2l
 (
__y
, 
__x
))

652 
	#__©™2_code
 \

653 
__vÆue
; \

654 
__asm
 
__vﬁ©ûe__
 \

656 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

657  
__vÆue


	)

658 #ifde‡
__FAST_MATH__


659 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

661 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

665 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

666 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

667 
__vÆue
; \

668 
__asm
 
__vﬁ©ûe__
 \

673 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

674  
__vÆue
)

678 #ifde‡
__FAST_MATH__


679 #i‡!
	`__GNUC_PREREQ
 (3,3)

680 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

681 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

682 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

684 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

688 #i‡
	`__GNUC_PREREQ
 (2, 8)

689 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

690 #ifde‡
__USE_ISOC99


691 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

692 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

694 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

696 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

697 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

700 #ifde‡
__FAST_MATH__


701 #i‡!
	`__GNUC_PREREQ
 (3, 4)

703 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

705 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

707 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 #i‡!
	`__GNUC_PREREQ
 (3, 5)

711 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

713 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

714 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

717 #i‡!
	`__GNUC_PREREQ
 (3, 4)

718 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

722 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

723 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

724 { 
__xld
: 
__x
 
	}
}; \

725 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

726 
	g__n
.
	g__xi
[1] = 0x80000000; \

727 
	g__n
.
	g__xi
[0] = 0; \

728  
	g__n
.
	g__xld
)

731 #ifde‡
__FAST_MATH__


733 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

734 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

735  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

737 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

738 
__ex
 = 
	`__ex∂
 (
__x
); \

739  0.5 * (
__ex
 + 1.0 / __ex))

741 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

742 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

743  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

746 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

747 
__vÆue
; \

748 
__ign‹e
; \

749 
__cw
; \

750 
__cwtmp
; \

751 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

759 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

760 "=m" (
__cw
) \

761 : "0" (
__x
)); \

762  
__vÆue
)

764 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

765 
__vÆue
; \

766 
__ign‹e
; \

767 
__cw
; \

768 
__cwtmp
; \

769 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

777 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

778 "=m" (
__cw
) \

779 : "0" (
__x
)); \

780  
__vÆue
)

782 #ifde‡
__FAST_MATH__


783 
	#__ldexp_code
 \

784 
__vÆue
; \

785 
__asm
 
__vﬁ©ûe__
 \

787 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

788  
__vÆue


	)

790 
__MATH_INLINE
 

791 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

793 
__ldexp_code
;

794 
	}
}

799 #ifde‡
__USE_ISOC99


801 #ifde‡
__FAST_MATH__


802 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

806 
	#__M_SQRT2
 1.41421356237309504880L

	)

808 #i‡!
	`__GNUC_PREREQ
 (3, 5)

809 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

810 
__vÆue
; \

811 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

812 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

814 
__asm
 
__vﬁ©ûe__
 \

818 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

819  
__vÆue
)

824 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

825 
__y
 = 
	`__Áb¶
 (
__x
); \

826  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

827 * 
	$__sgn1l
 (
__x
)))

829 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

830  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

832 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

833 
__y
 = 
	`__Áb¶
 (
__x
); \

834  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

837 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

838  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

840 #i‡!
	`__GNUC_PREREQ
 (3, 5)

841 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

842 
__vÆue
; \

843 
__junk
; \

844 
__asm
 
__vﬁ©ûe__
 \

846 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

847  
__vÆue
)

853 #ifde‡
__USE_ISOC99


854 #ifde‡
__FAST_MATH__


856 #i‡!
	`__GNUC_PREREQ
 (3, 5)

857 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

860 
__MATH_INLINE
 

861 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

863 
__ldexp_code
;

864 
	}
}

866 
__MATH_INLINE
 

867 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

869 
__ldexp_code
;

870 
	}
}

872 
__ölöe_m©h›NP
 (
röt
, "frndint")

875 
	#__Ãöt_code
 \

876 
__Ãöåes
; \

877 
__asm__
 
__vﬁ©ûe__
 \

879 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

880  
__Ãöåes


	)

881 
__MATH_INLINE
 

882 
__NTH
 (
	$Ãötf
 (
__x
))

884 
__Ãöt_code
;

885 
	}
}

886 
__MATH_INLINE
 

887 
__NTH
 (
	$Ãöt
 (
__x
))

889 
__Ãöt_code
;

890 
	}
}

891 
__MATH_INLINE
 

892 
__NTH
 (
	$Ãöé
 (
__x
))

894 
__Ãöt_code
;

895 
	}
}

896 #unde‡
__Ãöt_code


898 
	#__Œröt_code
 \

899 
__Œröåes
; \

900 
__asm__
 
__vﬁ©ûe__
 \

902 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

903  
__Œröåes


	)

904 
__exãnsi⁄__


905 
__MATH_INLINE
 

906 
__NTH
 (
	$Œrötf
 (
__x
))

908 
__Œröt_code
;

909 
	}
}

910 
__exãnsi⁄__


911 
__MATH_INLINE
 

912 
__NTH
 (
	$Œröt
 (
__x
))

914 
__Œröt_code
;

915 
	}
}

916 
__exãnsi⁄__


917 
__MATH_INLINE
 

918 
__NTH
 (
	$Œröé
 (
__x
))

920 
__Œröt_code
;

921 
	}
}

922 #unde‡
__Œröt_code


927 #ifde‡
__USE_MISC


929 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

930 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

931 
__vÆue
; \

932 
__˛obbîed
; \

933 
__asm
 
__vﬁ©ûe__
 \

938 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

939  
__vÆue
)

944 
__MATH_INLINE
 

945 
__NTH
 (
	$__föôe
 (
__x
))

947  (
__exãnsi⁄__


948 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

950 
	}
}

955 #unde‡
__©™2_code


956 #ifde‡
__FAST_MATH__


957 #unde‡
__expm1_code


958 #unde‡
__exp_code


959 #unde‡
__söcos_code


966 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


967 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

968 
__ölöe_m©hcode2_
 (, 
__õì754_©™2l
, 
__y
, 
__x
,

969 
__vÆue
;

970 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

971 : "Ò" (
__vÆue
)

972 : "0" (
__x
), "u" (
__y
) : "st(1)");

973  
__vÆue
;)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

192 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	#__√ed_timevÆ


	)

179 
	~<bôs/time.h
>

187 
	srußge


190 
timevÆ
 
	mru_utime
;

192 
timevÆ
 
	mru_°ime
;

194 
__exãnsi⁄__
 union

196 
	mru_maxrss
;

197 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

202 
__exãnsi⁄__
 union

204 
	mru_ixrss
;

205 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

208 
__exãnsi⁄__
 union

210 
	mru_idrss
;

211 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

214 
__exãnsi⁄__
 union

216 
	mru_i§ss
;

217 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

221 
__exãnsi⁄__
 union

223 
	mru_möÊt
;

224 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

227 
__exãnsi⁄__
 union

229 
	mru_majÊt
;

230 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

233 
__exãnsi⁄__
 union

235 
	mru_nsw≠
;

236 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

240 
__exãnsi⁄__
 union

242 
	mru_öblock
;

243 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

246 
__exãnsi⁄__
 union

248 
	mru_oublock
;

249 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

252 
__exãnsi⁄__
 union

254 
	mru_msg¢d
;

255 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

258 
__exãnsi⁄__
 union

260 
	mru_msgrcv
;

261 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

264 
__exãnsi⁄__
 union

266 
	mru_nsig«ls
;

267 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

272 
__exãnsi⁄__
 union

274 
	mru_nvcsw
;

275 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

279 
__exãnsi⁄__
 union

281 
	mru_nivcsw
;

282 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

287 
	#PRIO_MIN
 -20

	)

288 
	#PRIO_MAX
 20

	)

292 
	e__¥i‹ôy_which


294 
	mPRIO_PROCESS
 = 0,

295 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

296 
	mPRIO_PGRP
 = 1,

297 
	#PRIO_PGRP
 
PRIO_PGRP


	)

298 
	mPRIO_USER
 = 2

299 
	#PRIO_USER
 
PRIO_USER


	)

303 
	g__BEGIN_DECLS


305 #ifde‡
__USE_GNU


307 #i‚de‡
__USE_FILE_OFFSET64


308 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

309 c⁄° 
æimô
 *
__√w_limô
,

310 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

312 #ifde‡
__REDIRECT_NTH


313 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

314 
__æimô_ªsour˚
 
__ªsour˚
,

315 c⁄° 
æimô
 *
__√w_limô
,

316 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

318 
	#¥limô
 
¥limô64


	)

321 #ifde‡
__USE_LARGEFILE64


322 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

323 c⁄° 
æimô64
 *
__√w_limô
,

324 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

33 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

38 
	m__size
[
__SIZEOF_SEM_T
];

39 
	m__Æign
;

40 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/statvfs.h

18 #i‚de‡
_SYS_STATVFS_H


22 
	~<bôs/ty≥s.h
>

24 #i‡(
__WORDSIZE
 == 32 \

25 && (!
deföed
 
	g__SYSCALL_WORDSIZE
 || __SYSCALL_WORDSIZE == 32))

26 
	#_STATVFSBUF_F_UNUSED


	)

29 
	s°©vfs


31 
f_bsize
;

32 
	mf_‰size
;

33 #i‚de‡
__USE_FILE_OFFSET64


34 
__fsblk˙t_t
 
	mf_blocks
;

35 
__fsblk˙t_t
 
	mf_b‰ì
;

36 
__fsblk˙t_t
 
	mf_bavaû
;

37 
__fsfû˙t_t
 
	mf_fûes
;

38 
__fsfû˙t_t
 
	mf_f‰ì
;

39 
__fsfû˙t_t
 
	mf_Ávaû
;

41 
__fsblk˙t64_t
 
	mf_blocks
;

42 
__fsblk˙t64_t
 
	mf_b‰ì
;

43 
__fsblk˙t64_t
 
	mf_bavaû
;

44 
__fsfû˙t64_t
 
	mf_fûes
;

45 
__fsfû˙t64_t
 
	mf_f‰ì
;

46 
__fsfû˙t64_t
 
	mf_Ávaû
;

48 
	mf_fsid
;

49 #ifde‡
_STATVFSBUF_F_UNUSED


50 
	m__f_unu£d
;

52 
	mf_Êag
;

53 
	mf_«memax
;

54 
	m__f_•¨e
[6];

57 #ifde‡
__USE_LARGEFILE64


58 
	s°©vfs64


60 
	mf_bsize
;

61 
	mf_‰size
;

62 
__fsblk˙t64_t
 
	mf_blocks
;

63 
__fsblk˙t64_t
 
	mf_b‰ì
;

64 
__fsblk˙t64_t
 
	mf_bavaû
;

65 
__fsfû˙t64_t
 
	mf_fûes
;

66 
__fsfû˙t64_t
 
	mf_f‰ì
;

67 
__fsfû˙t64_t
 
	mf_Ávaû
;

68 
	mf_fsid
;

69 #ifde‡
_STATVFSBUF_F_UNUSED


70 
	m__f_unu£d
;

72 
	mf_Êag
;

73 
	mf_«memax
;

74 
	m__f_•¨e
[6];

82 
	mST_RDONLY
 = 1,

83 
	#ST_RDONLY
 
ST_RDONLY


	)

84 
	mST_NOSUID
 = 2

85 
	#ST_NOSUID
 
ST_NOSUID


	)

86 #ifde‡
__USE_GNU


88 
	mST_NODEV
 = 4,

89 
	#ST_NODEV
 
ST_NODEV


	)

90 
	mST_NOEXEC
 = 8,

91 
	#ST_NOEXEC
 
ST_NOEXEC


	)

92 
	mST_SYNCHRONOUS
 = 16,

93 
	#ST_SYNCHRONOUS
 
ST_SYNCHRONOUS


	)

94 
	mST_MANDLOCK
 = 64,

95 
	#ST_MANDLOCK
 
ST_MANDLOCK


	)

96 
	mST_WRITE
 = 128,

97 
	#ST_WRITE
 
ST_WRITE


	)

98 
	mST_APPEND
 = 256,

99 
	#ST_APPEND
 
ST_APPEND


	)

100 
	mST_IMMUTABLE
 = 512,

101 
	#ST_IMMUTABLE
 
ST_IMMUTABLE


	)

102 
	mST_NOATIME
 = 1024,

103 
	#ST_NOATIME
 
ST_NOATIME


	)

104 
	mST_NODIRATIME
 = 2048,

105 
	#ST_NODIRATIME
 
ST_NODIRATIME


	)

106 
	mST_RELATIME
 = 4096

107 
	#ST_RELATIME
 
ST_RELATIME


	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

27 
	#_HAVE_STRING_ARCH_memp˝y
 1

	)

31 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

32 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

33 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

34 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

35 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

36 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

37 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

38 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

39 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

40 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

41 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

42 || 
deföed
 
	g__btvî2__
)

46 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

47 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #i‚de‡
__STRING_INLINE


50 #i‚de‡
__exã∫_ölöe


51 
	#__STRING_INLINE
 
ölöe


	)

53 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

58 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

59 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

60 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

62 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

63 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

64 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

65 | ((c⁄° *Ë(
§c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

70 
	#mem˝y
(
de°
, 
§c
, 
n
) \

71 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

72 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

73 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

74 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de°
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

81 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de°
;

91 
__asm__
 
__vﬁ©ûe__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

102  
__de°
;

103 
	}
}

105 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de°
;

113 
__asm__
 
__vﬁ©ûe__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

129  
__de°
;

130 
	}
}

132 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de°
;

139 
__asm__
 
__vﬁ©ûe__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

153 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

155  
__de°
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #i‚de‡
_FORCE_INLINES


162 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de°
;

172 i‡(
__de°
 < 
__§c
)

173 
__asm__
 
__vﬁ©ûe__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

178 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

179 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

181 
__asm__
 
__vﬁ©ûe__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

189 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

190 "2" (
__n
 + (*Ë
__tmp
),

191 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

192  
__de°
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #i‚de‡
_FORCE_INLINES


199 #i‚de‡
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__ªs
;

206 
__asm__
 
__vﬁ©ûe__


214 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

219  
__ªs
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

233 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

237 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

241 *((*Ë
__s
Ë(Ë(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

257 i‡((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (Ë
__c
; \

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (Ë
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (Ë
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (Ë
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_c˙_by2
 (
s
, \

327 ((Ë((Ë(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifde‡
__i686__


340 
__asm__
 
__vﬁ©ûe__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vﬁ©ûe__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifde‡
__i686__


371 
__asm__
 
__vﬁ©ûe__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vﬁ©ûe__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vﬁ©ûe__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vﬁ©ûe__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #i‚de‡
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifde‡
__i686__


459 
__d1
;

461 *
__ªs
;

462 i‡(
__n
 == 0)

463  
NULL
;

464 #ifde‡
__i686__


465 
__asm__
 
__vﬁ©ûe__


469 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vﬁ©ûe__


480 : "=D" (
__ªs
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

485  
__ªs
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #i‚de‡
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifde‡
__i686__


498 
__d1
;

500 *
__ªs
;

501 i‡(
__n
 == 0)

502  
NULL
;

503 #ifde‡
__i686__


504 
__asm__
 
__vﬁ©ûe__


510 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vﬁ©ûe__


522 : "=D" (
__ªs
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

527  
__ªs
;

528 
	}
}

529 #ifde‡
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

536 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

538 #i‚de‡
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

542 
__d0
;

543 *
__ªs
;

544 
__asm__
 
__vﬁ©ûe__


547 : "=D" (
__ªs
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

551  
__ªs
 - 1;

552 
	}
}

553 #ifde‡
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

557  
	`__øwmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_°æí
 1

	)

565 
	#°æí
(
°r
) \

566 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

567 ? 
	`__buûtö_°æí
 (
°r
) \

568 : 
	`__°æí_g
 (
°r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

571 
__STRING_INLINE
 
size_t


572 
	$__°æí_g
 (c⁄° *
__°r
)

574 
__dummy
;

575 c⁄° *
__tmp
 = 
__°r
;

576 
__asm__
 
__vﬁ©ûe__


582 : "Ù" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__°r
),

584 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

586  
__tmp
 - 
__°r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

592 
	#°r˝y
(
de°
, 
§c
) \

593 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

594 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

595 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

596 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

597 (c⁄° *Ë(
§c
), \

598 
	`°æí
 (
§c
) + 1)) \

599 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

601 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

602 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*Ë
__de°
; \

609 
§˛í
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

619 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

637 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

648 (*Ë
__de°
; }))

	)

650 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

652 
__STRING_INLINE
 *

653 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

655 *
__tmp
 = 
__de°
;

656 
__dummy
;

657 
__asm__
 
__vﬁ©ûe__


666 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

668 : "0" (
__§c
), "1" (
__tmp
),

669 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

671  
__de°
;

672 
	}
}

675 #ifde‡
__USE_GNU


676 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

678 
	#__°p˝y
(
de°
, 
§c
) \

679 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

680 ? (
	`°æí
 (
§c
) + 1 <= 8 \

681 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

682 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

683 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

684 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

685 ((
§˛í
) % 4 == 0 \

686 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

687 : ((
§˛í
) % 2 == 0 \

688 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

689 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

692 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

694 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

695 (
	`__exãnsi⁄__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*Ë(
de°
); \

701 
§˛í
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

708 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

717 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

726 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

728 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

732 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

739 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

741 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

744 (*Ë
__u
; }))

	)

746 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

747 
size_t
 
__§˛í
);

749 
__STRING_INLINE
 *

750 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

752 *
__tmp
 = 
__de°
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vﬁ©ûe__


762 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

769 
size_t
 
__§˛í
);

771 
__STRING_INLINE
 *

772 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

774 *
__tmp
 = 
__de°
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vﬁ©ûe__


789 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

790 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

791 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

792 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

798 
size_t
 
__§˛í
);

800 
__STRING_INLINE
 *

801 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de°
;

805 
__asm__
 
__vﬁ©ûe__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

818 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

819 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

826 
__STRING_INLINE
 *

827 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

829 *
__tmp
 = 
__de°
;

830 
__dummy
;

831 
__asm__
 
__vﬁ©ûe__


840 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

842 : "0" (
__§c
), "1" (
__tmp
),

843 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

852 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

853 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

854 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

855 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

856 (c⁄° *Ë(
§c
), 
n
) \

857 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

858 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

859 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

860 (((
§˛í
) % 4 == 0) \

861 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

862 : (((
§˛í
) % 2 == 0) \

863 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

864 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

866 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

867 
size_t
 
__§˛í
, size_à
__n
);

869 
__STRING_INLINE
 *

870 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

872 *
__tmp
 = 
__de°
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vﬁ©ûe__


882 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

883 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

884 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

885 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

887 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

888  
__de°
;

889 
	}
}

891 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

892 
size_t
 
__§˛í
, size_à
__n
);

894 
__STRING_INLINE
 *

895 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

897 *
__tmp
 = 
__de°
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vﬁ©ûe__


912 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

913 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

914 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

915 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

917 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

918  
__de°
;

919 
	}
}

921 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

922 
size_t
 
__§˛í
, size_à
__n
);

924 
__STRING_INLINE
 *

925 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de°
;

929 
__asm__
 
__vﬁ©ûe__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

942 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

943 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

945 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

946  
__de°
;

947 
	}
}

949 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de°
;

956 
__dummy
;

957 i‡(
__n
 > 0)

958 
__asm__
 
__vﬁ©ûe__


974 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

978  
__de°
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

984 
	#°rˇt
(
de°
, 
§c
) \

985 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

986 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

987 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

989 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

990 
size_t
 
__§˛í
);

992 
__STRING_INLINE
 *

993 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

995 #ifde‡
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vﬁ©ûe__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1002 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de°
;

1008 
__asm__
 
__vﬁ©ûe__


1014 : "Ù" (
__tmp
),

1015 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1016 : "0" (
__tmp
),

1017 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1020 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1021  
__de°
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1026 
__STRING_INLINE
 *

1027 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1029 *
__tmp
 = 
__de°
;

1030 
__dummy
;

1031 
__asm__
 
__vﬁ©ûe__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1045 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1046 : "1" (
__tmp
), "2" (
__§c
),

1047 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1049  
__de°
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1055 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1056 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1057 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1058 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1059 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1060 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1061 (c⁄° *Ë(
§c
), \

1062 (
n
)Ë0, 
__de°
)) \

1063 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de°
;

1072 
__dummy
;

1073 #ifde‡
__i686__


1074 
__asm__
 
__vﬁ©ûe__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1092 
__asm__
 
__vﬁ©ûe__


1109 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1110 : "1" ((Ë
__tmp
 - 1), "2" (
__§c
), "3" (
__n
)

1113  
__de°
;

1114 
	}
}

1118 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1119 
	#°rcmp
(
s1
, 
s2
) \

1120 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1121 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1122 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1123 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1124 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1125 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1126 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1127 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1128 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1129 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1130 (c⁄° *Ë(
s2
), \

1131 
	`°æí
 (
s1
)) \

1132 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1133 (c⁄° *Ë(
s2
), \

1134 
	`°æí
 (
s1
))) \

1135 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1136 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1137 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1138 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1139 (c⁄° *Ë(
s2
), \

1140 
	`°æí
 (
s2
)) \

1141 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1142 (c⁄° *Ë(
s2
), \

1143 
	`°æí
 (
s2
))) \

1144 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1146 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1147 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1148 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1150 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1151 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1153 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1154 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1155 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1158 
__ªsu…
; }))

	)

1160 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1161 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1162 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1163 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1165 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1166 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1168 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1169 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1170 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1173 
__ªsu…
; }))

	)

1175 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1176 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1177 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1178 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1180 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1181 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1183 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1184 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1185 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1188 
__ªsu…
; }))

	)

1190 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1192 
__STRING_INLINE
 

1193 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1195 
__ªs
;

1196 
__asm__
 
__vﬁ©ûe__


1212 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1213 : "1" (
__s1
), "2" (
__s2
),

1214 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1215 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1217  
__ªs
;

1218 
	}
}

1222 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1223 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1224 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1225 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1226 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1227 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1228 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1230 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1231 
size_t
 
__n
);

1233 
__STRING_INLINE
 

1234 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1236 
__ªs
;

1237 
__asm__
 
__vﬁ©ûe__


1256 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1257 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1258 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1259 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1261  
__ªs
;

1262 
	}
}

1266 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1267 
	#_USE_STRING_ARCH_°rchr
 1

	)

1268 
	#°rchr
(
s
, 
c
) \

1269 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1270 ? ((
c
) == '\0' \

1271 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1272 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1273 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1275 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1277 
__STRING_INLINE
 *

1278 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1280 
__d0
;

1281 *
__ªs
;

1282 
__asm__
 
__vﬁ©ûe__


1292 : "Ù" (
__ªs
), "=&a" (
__d0
)

1293 : "0" (
__s
), "1" (
__c
),

1294 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1296  
__ªs
;

1297 
	}
}

1299 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1301 
__STRING_INLINE
 *

1302 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1304 
__d0
;

1305 *
__ªs
;

1306 
__asm__
 
__vﬁ©ûe__


1317 : "Ù" (
__ªs
), "=&a" (
__d0
)

1318 : "0" (
__s
), "1" (
__c
),

1319 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1321  
__ªs
;

1322 
	}
}

1326 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1327 
	#__°rch∫ul
(
s
, 
c
) \

1328 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1329 ? ((
c
) == '\0' \

1330 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1331 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1332 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1334 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1336 
__STRING_INLINE
 *

1337 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1339 
__d0
;

1340 *
__ªs
;

1341 
__asm__
 
__vﬁ©ûe__


1351 : "Ù" (
__ªs
), "=&a" (
__d0
)

1352 : "0" (
__s
), "1" (
__c
),

1353 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1355  
__ªs
;

1356 
	}
}

1358 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1360 
__STRING_INLINE
 *

1361 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1363 
__d0
;

1364 *
__ªs
;

1365 
__asm__
 
__vﬁ©ûe__


1376 : "Ù" (
__ªs
), "=&a" (
__d0
)

1377 : "0" (
__s
), "1" (
__c
),

1378 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1380  
__ªs
;

1381 
	}
}

1382 #ifde‡
__USE_GNU


1383 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1387 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1389 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1390 
	#ödex
(
s
, 
c
) \

1391 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1392 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1393 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1398 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1399 
	#°ºchr
(
s
, 
c
) \

1400 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1401 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1402 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1404 #ifde‡
__i686__


1405 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1407 
__STRING_INLINE
 *

1408 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1410 
__d0
, 
__d1
;

1411 *
__ªs
;

1412 
__asm__
 
__vﬁ©ûe__


1420 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1421 : "0" (1), "1" (
__s
), "2" (
__c
),

1422 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1424  
__ªs
 - 1;

1425 
	}
}

1427 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1429 
__STRING_INLINE
 *

1430 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1432 
__d0
, 
__d1
;

1433 *
__ªs
;

1434 
__asm__
 
__vﬁ©ûe__


1443 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1444 : "0" (1), "1" (
__s
), "2" (
__c
),

1445 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1447  
__ªs
 - 1;

1448 
	}
}

1450 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1452 
__STRING_INLINE
 *

1453 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1455 
__d0
, 
__d1
;

1456 *
__ªs
;

1457 
__asm__
 
__vﬁ©ûe__


1467 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1468 : "0" (0), "1" (
__s
), "2" (
__c
),

1469 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1471  
__ªs
;

1472 
	}
}

1474 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1476 
__STRING_INLINE
 *

1477 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1479 
__d0
, 
__d1
;

1480 *
__ªs
;

1481 
__asm__
 
__vﬁ©ûe__


1492 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1493 : "0" (0), "1" (
__s
), "2" (
__c
),

1494 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1496  
__ªs
;

1497 
	}
}

1501 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1503 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1504 
	#rödex
(
s
, 
c
) \

1505 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1506 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1507 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1513 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1514 
	#°rc•n
(
s
, 
ªje˘
) \

1515 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1516 ? ((
ªje˘
)[0] == '\0' \

1517 ? 
	`°æí
 (
s
) \

1518 : ((
ªje˘
)[1] == '\0' \

1519 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1520 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1521 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1523 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1525 #i‚de‡
_FORCE_INLINES


1526 
__STRING_INLINE
 
size_t


1527 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1529 
__d0
;

1530 *
__ªs
;

1531 
__asm__
 
__vﬁ©ûe__


1540 : "Ù" (
__ªs
), "=&a" (
__d0
)

1541 : "0" (
__s
), "1" (
__ªje˘
),

1542 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1544  (
__ªs
 - 1Ë- 
__s
;

1545 
	}
}

1548 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1549 
size_t
 
__ªje˘_Àn
);

1551 
__STRING_INLINE
 
size_t


1552 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1554 
__d0
, 
__d1
, 
__d2
;

1555 c⁄° *
__ªs
;

1556 
__asm__
 
__vﬁ©ûe__


1567 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1568 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1570  (
__ªs
 - 1Ë- 
__s
;

1571 
	}
}

1573 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1574 #ifde‡
__PIC__


1576 
__STRING_INLINE
 
size_t


1577 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1579 
__d0
, 
__d1
, 
__d2
;

1580 c⁄° *
__ªs
;

1581 
__asm__
 
__vﬁ©ûe__


1598 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1599 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1601  (
__ªs
 - 1Ë- 
__s
;

1602 
	}
}

1604 
__STRING_INLINE
 
size_t


1605 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1607 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1608 c⁄° *
__ªs
;

1609 
__asm__
 
__vﬁ©ûe__


1623 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1624 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1627  (
__ªs
 - 1Ë- 
__s
;

1628 
	}
}

1634 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1635 
	#°r•n
(
s
, 
ac˚±
) \

1636 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1637 ? ((
ac˚±
)[0] == '\0' \

1638 ? ((Ë(
s
), 0) \

1639 : ((
ac˚±
)[1] == '\0' \

1640 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1641 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1642 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1644 #i‚de‡
_FORCE_INLINES


1645 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1647 
__STRING_INLINE
 
size_t


1648 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1650 
__d0
;

1651 *
__ªs
;

1653 
__asm__
 
__vﬁ©ûe__


1659 : "Ù" (
__ªs
), "=&q" (
__d0
)

1660 : "0" (
__s
), "1" (
__ac˚±
),

1661 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1663  (
__ªs
 - 1Ë- 
__s
;

1664 
	}
}

1667 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1668 
size_t
 
__ac˚±_Àn
);

1670 
__STRING_INLINE
 
size_t


1671 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1673 
__d0
, 
__d1
, 
__d2
;

1674 c⁄° *
__ªs
;

1675 
__asm__
 
__vﬁ©ûe__


1686 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1687 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1690 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1691 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1693  (
__ªs
 - 1Ë- 
__s
;

1694 
	}
}

1696 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1697 #ifde‡
__PIC__


1699 
__STRING_INLINE
 
size_t


1700 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1702 
__d0
, 
__d1
, 
__d2
;

1703 c⁄° *
__ªs
;

1704 
__asm__
 
__vﬁ©ûe__


1720 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1721 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1723  (
__ªs
 - 1Ë- 
__s
;

1724 
	}
}

1726 
__STRING_INLINE
 
size_t


1727 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1729 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1730 c⁄° *
__ªs
;

1731 
__asm__
 
__vﬁ©ûe__


1745 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1746 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1748  (
__ªs
 - 1Ë- 
__s
;

1749 
	}
}

1754 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1755 
	#°Ωbrk
(
s
, 
ac˚±
) \

1756 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1757 ? ((
ac˚±
)[0] == '\0' \

1758 ? ((Ë(
s
), (*) 0) \

1759 : ((
ac˚±
)[1] == '\0' \

1760 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1761 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1762 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1764 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1765 
size_t
 
__ac˚±_Àn
);

1767 
__STRING_INLINE
 *

1768 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1770 
__d0
, 
__d1
, 
__d2
;

1771 *
__ªs
;

1772 
__asm__
 
__vﬁ©ûe__


1787 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1788 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1790  
__ªs
;

1791 
	}
}

1793 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1794 #ifde‡
__PIC__


1796 
__STRING_INLINE
 *

1797 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1799 
__d0
, 
__d1
, 
__d2
;

1800 *
__ªs
;

1801 
__asm__
 
__vﬁ©ûe__


1822 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1823 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1825  
__ªs
;

1826 
	}
}

1828 
__STRING_INLINE
 *

1829 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1831 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1832 *
__ªs
;

1833 
__asm__
 
__vﬁ©ûe__


1852 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1853 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1855  
__ªs
;

1856 
	}
}

1861 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1862 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1863 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1864 ? ((
√edÀ
)[0] == '\0' \

1865 ? (
hay°ack
) \

1866 : ((
√edÀ
)[1] == '\0' \

1867 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1868 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1869 
	`°æí
 (
√edÀ
)))) \

1870 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1874 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1875 c⁄° 
__√edÀ
[],

1876 
size_t
 
__√edÀ_Àn
);

1878 
__STRING_INLINE
 *

1879 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1880 
size_t
 
__√edÀ_Àn
)

1882 
__d0
, 
__d1
, 
__d2
;

1883 *
__ªs
;

1884 
__asm__
 
__vﬁ©ûe__


1897 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1898 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1900  
__ªs
;

1901 
	}
}

1903 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1904 c⁄° *
__√edÀ
);

1905 #ifde‡
__PIC__


1907 
__STRING_INLINE
 *

1908 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1910 
__d0
, 
__d1
, 
__d2
;

1911 *
__ªs
;

1912 
__asm__
 
__vﬁ©ûe__


1931 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1932 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1933 "d" (
__√edÀ
)

1935  
__ªs
;

1936 
	}
}

1938 
__STRING_INLINE
 *

1939 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1941 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1942 *
__ªs
;

1943 
__asm__
 
__vﬁ©ûe__


1960 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1961 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1962 "b" (
__√edÀ
)

1964  
__ªs
;

1965 
	}
}

1971 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1972 #ifde‡
__i686__


1973 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1974 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1975 ? 
	`__buûtö_ffs
 (
w‹d
) \

1976 : ({ 
__˙t
, 
__tmp
; \

1977 
__asm__
 
__vﬁ©ûe__
 \

1980 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1981 : "rm" (
w‹d
), "1" (-1)); \

1982 
__˙t
 + 1; }))

	)

1984 #i‚de‡
ff¶


1985 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1990 #i‚de‡
_FORCE_INLINES


1991 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

52 
	#__°rög2_1b±r_p
(
__x
) \

53 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

56 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


57 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

61 #i‚de‡
_HAVE_STRING_ARCH_°rchr


62 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

63 
	#°rchr
(
s
, 
c
) \

64 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

65 && (
c
) == '\0' \

66 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

67 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

72 #ifde‡
__USE_GNU


73 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


74 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

77 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

83 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


84 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

89 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


90 #ifde‡
_USE_STRING_ARCH_°rchr


91 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

92 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

93 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

94 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

95 ? 
	`°rˇt
 (
__de°
, 
§c
) \

96 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

97 
§c
, 
n
)Ë'\0', 
__de°
)) \

98 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

100 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

106 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


107 
	#°rcmp
(
s1
, 
s2
) \

108 
__exãnsi⁄__
 \

109 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

110 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

111 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

112 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

113 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

114 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

115 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

116 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

118 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

119 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

120 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

121 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

122 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

123 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

124 : -
	`__°rcmp_cg
 (
s2
, 
s1
, 
__s2_Àn
)) \

125 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

127 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

128 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

129 (c⁄° *Ë(c⁄° *Ë(
s2
); \

130 
__ªsu…
 = \

131 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

132 - 
__s2
[0]); \

133 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

135 
__ªsu…
 = (((const *) \

136 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

137 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

139 
__ªsu…
 = (((const *) \

140 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

141 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

142 
__ªsu…
 = (((const *) \

143 (c⁄° *Ë(
s1
))[3] \

144 - 
__s2
[3]); \

147 
__ªsu…
; }))

	)

152 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


153 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

154 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

155 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

156 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

157 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

158 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

159 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

165 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


166 
	#°rc•n
(
s
, 
ªje˘
Ë
	`__buûtö_°rc•n
 (s,Ñeje˘)

	)

172 #i‚de‡
_HAVE_STRING_ARCH_°r•n


173 
	#°r•n
(
s
, 
ac˚±
Ë
	`__buûtö_°r•n
 (s,ác˚±)

	)

178 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


179 
	#°Ωbrk
(
s
, 
ac˚±
Ë
	`__buûtö_°Ωbrk
 (s,ác˚±)

	)

183 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


184 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


185 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

186 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

187 && ((c⁄° *Ë(
£p
))[0] != '\0' \

188 && ((c⁄° *Ë(
£p
))[1] == '\0' \

189 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

190 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

193 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

194 
__STRING_INLINE
 *

195 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

197 *
__ªsu…
;

198 i‡(
__s
 =
NULL
)

199 
__s
 = *
__√xç
;

200 *
__s
 =
__£p
)

201 ++
__s
;

202 
__ªsu…
 = 
NULL
;

203 i‡(*
__s
 != '\0')

205 
__ªsu…
 = 
__s
++;

206 *
__s
 != '\0')

207 i‡(*
__s
++ =
__£p
)

209 
__s
[-1] = '\0';

213 *
__√xç
 = 
__s
;

214  
__ªsu…
;

215 
	}
}

216 #ifde‡
__USE_POSIX


217 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

222 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


223 #i‚de‡
_HAVE_STRING_ARCH_°r£p


225 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

226 
	#__°r£p
(
s
, 
ªje˘
) \

227 
__exãnsi⁄__
 \

228 ({ 
__r0
, 
__r1
, 
__r2
; \

229 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

230 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

231 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

232 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

233 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

234 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

235 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

236 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

237 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

238 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

239 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

240 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

243 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

244 
__STRING_INLINE
 *

245 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

247 *
__ªtvÆ
 = *
__s
;

248 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

249 *(*
__s
)++ = '\0';

250  
__ªtvÆ
;

251 
	}
}

253 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

254 
__STRING_INLINE
 *

255 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

257 *
__ªtvÆ
 = *
__s
;

258 i‡(
__ªtvÆ
 !
NULL
)

260 *
__˝
 = 
__ªtvÆ
;

263 i‡(*
__˝
 == '\0')

265 
__˝
 = 
NULL
;

268 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

270 *
__˝
++ = '\0';

273 ++
__˝
;

275 *
__s
 = 
__˝
;

277  
__ªtvÆ
;

278 
	}
}

280 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

281 
__ªje˘3
);

282 
__STRING_INLINE
 *

283 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

285 *
__ªtvÆ
 = *
__s
;

286 i‡(
__ªtvÆ
 !
NULL
)

288 *
__˝
 = 
__ªtvÆ
;

291 i‡(*
__˝
 == '\0')

293 
__˝
 = 
NULL
;

296 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

298 *
__˝
++ = '\0';

301 ++
__˝
;

303 *
__s
 = 
__˝
;

305  
__ªtvÆ
;

306 
	}
}

307 #ifde‡
__USE_MISC


308 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

315 #ifde‡
__USE_MISC


317 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


318 
	#__√ed_mÆloc_™d_ˇŒoc


	)

319 
	~<°dlib.h
>

322 #i‚de‡
_HAVE_STRING_ARCH_°rdup


324 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

325 
	#__°rdup
(
s
) \

326 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

327 ? (((c⁄° *Ë(
s
))[0] == '\0' \

328 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

329 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

330 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

331 i‡(
__ªtvÆ
 !
NULL
) \

332 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

333 
__ªtvÆ
; 
	}
})) \

334 : 
	`__°rdup
 (
s
)))

	)

336 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


337 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

341 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


343 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

344 
__THROW
 
__©åibuã_mÆloc__
;

345 
	#__°∫dup
(
s
, 
n
) \

346 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

347 ? (((c⁄° *Ë(
s
))[0] == '\0' \

348 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

349 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

350 
size_t
 
__n
 = (
n
); \

351 *
__ªtvÆ
; \

352 i‡(
__n
 < 
__Àn
) \

353 
__Àn
 = 
__n
 + 1; \

354 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

355 i‡(
__ªtvÆ
 !
NULL
) \

357 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

358 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

359 
__Àn
 - 1); \

361 
__ªtvÆ
; 
	}
})) \

362 : 
	`__°∫dup
 (
s
, 
n
)))

	)

364 #ifde‡
__USE_XOPEN2K8


365 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

371 #i‚de‡
_FORCE_INLINES


372 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


8 #i‡!
deföed
 
__x86_64__


9 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

10 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

11 
	#SYS__sys˘l
 
__NR__sys˘l


	)

12 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

13 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

14 
	#SYS_ac˘
 
__NR_ac˘


	)

15 
	#SYS_add_key
 
__NR_add_key


	)

16 
	#SYS_adjtimex
 
__NR_adjtimex


	)

17 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

18 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

19 
	#SYS_bdÊush
 
__NR_bdÊush


	)

20 
	#SYS_böd
 
__NR_böd


	)

21 
	#SYS_bpf
 
__NR_bpf


	)

22 
	#SYS_bªak
 
__NR_bªak


	)

23 
	#SYS_brk
 
__NR_brk


	)

24 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

25 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

26 
	#SYS_chdú
 
__NR_chdú


	)

27 
	#SYS_chmod
 
__NR_chmod


	)

28 
	#SYS_chown
 
__NR_chown


	)

29 
	#SYS_chown32
 
__NR_chown32


	)

30 
	#SYS_chroŸ
 
__NR_chroŸ


	)

31 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

32 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

33 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

34 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

35 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

36 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

37 
	#SYS_˛o£
 
__NR_˛o£


	)

38 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

39 
	#SYS_c›y_fûe_ønge
 
__NR_c›y_fûe_ønge


	)

40 
	#SYS_¸ót
 
__NR_¸ót


	)

41 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

42 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

43 
	#SYS_dup
 
__NR_dup


	)

44 
	#SYS_dup2
 
__NR_dup2


	)

45 
	#SYS_dup3
 
__NR_dup3


	)

46 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

47 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

48 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

49 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

50 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

51 
	#SYS_evítfd
 
__NR_evítfd


	)

52 
	#SYS_evítfd2
 
__NR_evítfd2


	)

53 
	#SYS_execve
 
__NR_execve


	)

54 
	#SYS_execvót
 
__NR_execvót


	)

55 
	#SYS_exô
 
__NR_exô


	)

56 
	#SYS_exô_group
 
__NR_exô_group


	)

57 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

58 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

59 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

60 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

61 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

62 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

63 
	#SYS_fchdú
 
__NR_fchdú


	)

64 
	#SYS_fchmod
 
__NR_fchmod


	)

65 
	#SYS_fchmod©
 
__NR_fchmod©


	)

66 
	#SYS_fchown
 
__NR_fchown


	)

67 
	#SYS_fchown32
 
__NR_fchown32


	)

68 
	#SYS_fchow«t
 
__NR_fchow«t


	)

69 
	#SYS_f˙é
 
__NR_f˙é


	)

70 
	#SYS_f˙é64
 
__NR_f˙é64


	)

71 
	#SYS_fd©async
 
__NR_fd©async


	)

72 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

73 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

74 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

75 
	#SYS_Êock
 
__NR_Êock


	)

76 
	#SYS_f‹k
 
__NR_f‹k


	)

77 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

78 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

79 
	#SYS_f°©
 
__NR_f°©


	)

80 
	#SYS_f°©64
 
__NR_f°©64


	)

81 
	#SYS_f°©©64
 
__NR_f°©©64


	)

82 
	#SYS_f°©fs
 
__NR_f°©fs


	)

83 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

84 
	#SYS_fsync
 
__NR_fsync


	)

85 
	#SYS_·ime
 
__NR_·ime


	)

86 
	#SYS_·runˇã
 
__NR_·runˇã


	)

87 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

88 
	#SYS_fuãx
 
__NR_fuãx


	)

89 
	#SYS_futimeßt
 
__NR_futimeßt


	)

90 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

91 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

92 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

93 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

94 
	#SYS_gë˝u
 
__NR_gë˝u


	)

95 
	#SYS_gëcwd
 
__NR_gëcwd


	)

96 
	#SYS_gëdíts
 
__NR_gëdíts


	)

97 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

98 
	#SYS_gëegid
 
__NR_gëegid


	)

99 
	#SYS_gëegid32
 
__NR_gëegid32


	)

100 
	#SYS_gëeuid
 
__NR_gëeuid


	)

101 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

102 
	#SYS_gëgid
 
__NR_gëgid


	)

103 
	#SYS_gëgid32
 
__NR_gëgid32


	)

104 
	#SYS_gëgroups
 
__NR_gëgroups


	)

105 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

106 
	#SYS_gëôimî
 
__NR_gëôimî


	)

107 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

108 
	#SYS_gëpgid
 
__NR_gëpgid


	)

109 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

110 
	#SYS_gëpid
 
__NR_gëpid


	)

111 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

112 
	#SYS_gëµid
 
__NR_gëµid


	)

113 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

114 
	#SYS_gëøndom
 
__NR_gëøndom


	)

115 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

116 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

117 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

118 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

119 
	#SYS_gëæimô
 
__NR_gëæimô


	)

120 
	#SYS_gërußge
 
__NR_gërußge


	)

121 
	#SYS_gësid
 
__NR_gësid


	)

122 
	#SYS_gësock«me
 
__NR_gësock«me


	)

123 
	#SYS_gësock›t
 
__NR_gësock›t


	)

124 
	#SYS_gëtid
 
__NR_gëtid


	)

125 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

126 
	#SYS_gëuid
 
__NR_gëuid


	)

127 
	#SYS_gëuid32
 
__NR_gëuid32


	)

128 
	#SYS_gëx©å
 
__NR_gëx©å


	)

129 
	#SYS_gây
 
__NR_gây


	)

130 
	#SYS_idÀ
 
__NR_idÀ


	)

131 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

132 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

133 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

134 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

135 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

136 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

137 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

138 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

139 
	#SYS_io_£tup
 
__NR_io_£tup


	)

140 
	#SYS_io_submô
 
__NR_io_submô


	)

141 
	#SYS_io˘l
 
__NR_io˘l


	)

142 
	#SYS_i›îm
 
__NR_i›îm


	)

143 
	#SYS_i›l
 
__NR_i›l


	)

144 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

145 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

146 
	#SYS_ùc
 
__NR_ùc


	)

147 
	#SYS_kcmp
 
__NR_kcmp


	)

148 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

149 
	#SYS_key˘l
 
__NR_key˘l


	)

150 
	#SYS_kûl
 
__NR_kûl


	)

151 
	#SYS_lchown
 
__NR_lchown


	)

152 
	#SYS_lchown32
 
__NR_lchown32


	)

153 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

154 
	#SYS_lök
 
__NR_lök


	)

155 
	#SYS_lök©
 
__NR_lök©


	)

156 
	#SYS_li°í
 
__NR_li°í


	)

157 
	#SYS_li°x©å
 
__NR_li°x©å


	)

158 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

159 
	#SYS_lock
 
__NR_lock


	)

160 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

161 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

162 
	#SYS_l£ek
 
__NR_l£ek


	)

163 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

164 
	#SYS_l°©
 
__NR_l°©


	)

165 
	#SYS_l°©64
 
__NR_l°©64


	)

166 
	#SYS_madvi£
 
__NR_madvi£


	)

167 
	#SYS_mböd
 
__NR_mböd


	)

168 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

169 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

170 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

171 
	#SYS_möc‹e
 
__NR_möc‹e


	)

172 
	#SYS_mkdú
 
__NR_mkdú


	)

173 
	#SYS_mkdú©
 
__NR_mkdú©


	)

174 
	#SYS_mknod
 
__NR_mknod


	)

175 
	#SYS_mknod©
 
__NR_mknod©


	)

176 
	#SYS_mlock
 
__NR_mlock


	)

177 
	#SYS_mlock2
 
__NR_mlock2


	)

178 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

179 
	#SYS_mm≠
 
__NR_mm≠


	)

180 
	#SYS_mm≠2
 
__NR_mm≠2


	)

181 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

182 
	#SYS_mou¡
 
__NR_mou¡


	)

183 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

184 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

185 
	#SYS_mpx
 
__NR_mpx


	)

186 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

187 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

188 
	#SYS_mq_›í
 
__NR_mq_›í


	)

189 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

190 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

191 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

192 
	#SYS_mªm≠
 
__NR_mªm≠


	)

193 
	#SYS_msync
 
__NR_msync


	)

194 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

195 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

196 
	#SYS_munm≠
 
__NR_munm≠


	)

197 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

198 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

199 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

200 
	#SYS_ni˚
 
__NR_ni˚


	)

201 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

202 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

203 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

204 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

205 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

206 
	#SYS_›í
 
__NR_›í


	)

207 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

208 
	#SYS_›í©
 
__NR_›í©


	)

209 
	#SYS_∑u£
 
__NR_∑u£


	)

210 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

211 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

212 
	#SYS_pùe
 
__NR_pùe


	)

213 
	#SYS_pùe2
 
__NR_pùe2


	)

214 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

215 
	#SYS_pﬁl
 
__NR_pﬁl


	)

216 
	#SYS_µﬁl
 
__NR_µﬁl


	)

217 
	#SYS_¥˘l
 
__NR_¥˘l


	)

218 
	#SYS_¥ód64
 
__NR_¥ód64


	)

219 
	#SYS_¥ódv
 
__NR_¥ódv


	)

220 
	#SYS_¥ódv2
 
__NR_¥ódv2


	)

221 
	#SYS_¥limô64
 
__NR_¥limô64


	)

222 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

223 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

224 
	#SYS_¥of
 
__NR_¥of


	)

225 
	#SYS_¥ofû
 
__NR_¥ofû


	)

226 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

227 
	#SYS_±ø˚
 
__NR_±ø˚


	)

228 
	#SYS_puçmsg
 
__NR_puçmsg


	)

229 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

230 
	#SYS_pwrôev
 
__NR_pwrôev


	)

231 
	#SYS_pwrôev2
 
__NR_pwrôev2


	)

232 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

233 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

234 
	#SYS_ªad
 
__NR_ªad


	)

235 
	#SYS_ªadahód
 
__NR_ªadahód


	)

236 
	#SYS_ªaddú
 
__NR_ªaddú


	)

237 
	#SYS_ªadlök
 
__NR_ªadlök


	)

238 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

239 
	#SYS_ªadv
 
__NR_ªadv


	)

240 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

241 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

242 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

243 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

244 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

245 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

246 
	#SYS_ª«me
 
__NR_ª«me


	)

247 
	#SYS_ª«mót
 
__NR_ª«mót


	)

248 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

249 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

250 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

251 
	#SYS_rmdú
 
__NR_rmdú


	)

252 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

253 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

254 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

255 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

256 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

257 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

258 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

259 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

260 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

261 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

262 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

263 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

264 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

265 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

266 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

267 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

268 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

269 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

270 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

271 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

272 
	#SYS_£ccomp
 
__NR_£ccomp


	)

273 
	#SYS_£À˘
 
__NR_£À˘


	)

274 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

275 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

276 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

277 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

278 
	#SYS_£ndto
 
__NR_£ndto


	)

279 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

280 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

281 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

282 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

283 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

284 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

285 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

286 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

287 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

288 
	#SYS_£tgid
 
__NR_£tgid


	)

289 
	#SYS_£tgid32
 
__NR_£tgid32


	)

290 
	#SYS_£tgroups
 
__NR_£tgroups


	)

291 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

292 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

293 
	#SYS_£tôimî
 
__NR_£tôimî


	)

294 
	#SYS_£äs
 
__NR_£äs


	)

295 
	#SYS_£çgid
 
__NR_£çgid


	)

296 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

297 
	#SYS_£åegid
 
__NR_£åegid


	)

298 
	#SYS_£åegid32
 
__NR_£åegid32


	)

299 
	#SYS_£åesgid
 
__NR_£åesgid


	)

300 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

301 
	#SYS_£åesuid
 
__NR_£åesuid


	)

302 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

303 
	#SYS_£åeuid
 
__NR_£åeuid


	)

304 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

305 
	#SYS_£ålimô
 
__NR_£ålimô


	)

306 
	#SYS_£tsid
 
__NR_£tsid


	)

307 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

308 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

309 
	#SYS_£tuid
 
__NR_£tuid


	)

310 
	#SYS_£tuid32
 
__NR_£tuid32


	)

311 
	#SYS_£tx©å
 
__NR_£tx©å


	)

312 
	#SYS_sgëmask
 
__NR_sgëmask


	)

313 
	#SYS_shutdown
 
__NR_shutdown


	)

314 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

315 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

316 
	#SYS_sig«l
 
__NR_sig«l


	)

317 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

318 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

319 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

320 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

321 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

322 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

323 
	#SYS_sockë
 
__NR_sockë


	)

324 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

325 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

326 
	#SYS_•li˚
 
__NR_•li˚


	)

327 
	#SYS_s£tmask
 
__NR_s£tmask


	)

328 
	#SYS_°©
 
__NR_°©


	)

329 
	#SYS_°©64
 
__NR_°©64


	)

330 
	#SYS_°©fs
 
__NR_°©fs


	)

331 
	#SYS_°©fs64
 
__NR_°©fs64


	)

332 
	#SYS_°ime
 
__NR_°ime


	)

333 
	#SYS_°ty
 
__NR_°ty


	)

334 
	#SYS_sw≠off
 
__NR_sw≠off


	)

335 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

336 
	#SYS_symlök
 
__NR_symlök


	)

337 
	#SYS_symlök©
 
__NR_symlök©


	)

338 
	#SYS_sync
 
__NR_sync


	)

339 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

340 
	#SYS_syncfs
 
__NR_syncfs


	)

341 
	#SYS_sysfs
 
__NR_sysfs


	)

342 
	#SYS_sysöfo
 
__NR_sysöfo


	)

343 
	#SYS_sy¶og
 
__NR_sy¶og


	)

344 
	#SYS_ãe
 
__NR_ãe


	)

345 
	#SYS_tgkûl
 
__NR_tgkûl


	)

346 
	#SYS_time
 
__NR_time


	)

347 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

348 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

349 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

350 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

351 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

352 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

353 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

354 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

355 
	#SYS_times
 
__NR_times


	)

356 
	#SYS_tkûl
 
__NR_tkûl


	)

357 
	#SYS_åunˇã
 
__NR_åunˇã


	)

358 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

359 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

360 
	#SYS_ulimô
 
__NR_ulimô


	)

361 
	#SYS_umask
 
__NR_umask


	)

362 
	#SYS_umou¡
 
__NR_umou¡


	)

363 
	#SYS_umou¡2
 
__NR_umou¡2


	)

364 
	#SYS_u«me
 
__NR_u«me


	)

365 
	#SYS_u∆ök
 
__NR_u∆ök


	)

366 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

367 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

368 
	#SYS_u£lib
 
__NR_u£lib


	)

369 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

370 
	#SYS_u°©
 
__NR_u°©


	)

371 
	#SYS_utime
 
__NR_utime


	)

372 
	#SYS_utimíßt
 
__NR_utimíßt


	)

373 
	#SYS_utimes
 
__NR_utimes


	)

374 
	#SYS_vf‹k
 
__NR_vf‹k


	)

375 
	#SYS_vh™gup
 
__NR_vh™gup


	)

376 
	#SYS_vm86
 
__NR_vm86


	)

377 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

378 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

379 
	#SYS_v£rvî
 
__NR_v£rvî


	)

380 
	#SYS_waô4
 
__NR_waô4


	)

381 
	#SYS_waôid
 
__NR_waôid


	)

382 
	#SYS_waôpid
 
__NR_waôpid


	)

383 
	#SYS_wrôe
 
__NR_wrôe


	)

384 
	#SYS_wrôev
 
__NR_wrôev


	)

386 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


387 
	#SYS__sys˘l
 
__NR__sys˘l


	)

388 
	#SYS_ac˚±
 
__NR_ac˚±


	)

389 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

390 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

391 
	#SYS_ac˘
 
__NR_ac˘


	)

392 
	#SYS_add_key
 
__NR_add_key


	)

393 
	#SYS_adjtimex
 
__NR_adjtimex


	)

394 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

395 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

396 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

397 
	#SYS_böd
 
__NR_böd


	)

398 
	#SYS_bpf
 
__NR_bpf


	)

399 
	#SYS_brk
 
__NR_brk


	)

400 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

401 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

402 
	#SYS_chdú
 
__NR_chdú


	)

403 
	#SYS_chmod
 
__NR_chmod


	)

404 
	#SYS_chown
 
__NR_chown


	)

405 
	#SYS_chroŸ
 
__NR_chroŸ


	)

406 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

407 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

408 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

409 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

410 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

411 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

412 
	#SYS_˛o£
 
__NR_˛o£


	)

413 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

414 
	#SYS_c›y_fûe_ønge
 
__NR_c›y_fûe_ønge


	)

415 
	#SYS_¸ót
 
__NR_¸ót


	)

416 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

417 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

418 
	#SYS_dup
 
__NR_dup


	)

419 
	#SYS_dup2
 
__NR_dup2


	)

420 
	#SYS_dup3
 
__NR_dup3


	)

421 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

422 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

423 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

424 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

425 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

426 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

427 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

428 
	#SYS_evítfd
 
__NR_evítfd


	)

429 
	#SYS_evítfd2
 
__NR_evítfd2


	)

430 
	#SYS_execve
 
__NR_execve


	)

431 
	#SYS_execvót
 
__NR_execvót


	)

432 
	#SYS_exô
 
__NR_exô


	)

433 
	#SYS_exô_group
 
__NR_exô_group


	)

434 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

435 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

436 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

437 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

438 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

439 
	#SYS_fchdú
 
__NR_fchdú


	)

440 
	#SYS_fchmod
 
__NR_fchmod


	)

441 
	#SYS_fchmod©
 
__NR_fchmod©


	)

442 
	#SYS_fchown
 
__NR_fchown


	)

443 
	#SYS_fchow«t
 
__NR_fchow«t


	)

444 
	#SYS_f˙é
 
__NR_f˙é


	)

445 
	#SYS_fd©async
 
__NR_fd©async


	)

446 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

447 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

448 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

449 
	#SYS_Êock
 
__NR_Êock


	)

450 
	#SYS_f‹k
 
__NR_f‹k


	)

451 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

452 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

453 
	#SYS_f°©
 
__NR_f°©


	)

454 
	#SYS_f°©fs
 
__NR_f°©fs


	)

455 
	#SYS_fsync
 
__NR_fsync


	)

456 
	#SYS_·runˇã
 
__NR_·runˇã


	)

457 
	#SYS_fuãx
 
__NR_fuãx


	)

458 
	#SYS_futimeßt
 
__NR_futimeßt


	)

459 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

460 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

461 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

462 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

463 
	#SYS_gë˝u
 
__NR_gë˝u


	)

464 
	#SYS_gëcwd
 
__NR_gëcwd


	)

465 
	#SYS_gëdíts
 
__NR_gëdíts


	)

466 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

467 
	#SYS_gëegid
 
__NR_gëegid


	)

468 
	#SYS_gëeuid
 
__NR_gëeuid


	)

469 
	#SYS_gëgid
 
__NR_gëgid


	)

470 
	#SYS_gëgroups
 
__NR_gëgroups


	)

471 
	#SYS_gëôimî
 
__NR_gëôimî


	)

472 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

473 
	#SYS_gëpgid
 
__NR_gëpgid


	)

474 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

475 
	#SYS_gëpid
 
__NR_gëpid


	)

476 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

477 
	#SYS_gëµid
 
__NR_gëµid


	)

478 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

479 
	#SYS_gëøndom
 
__NR_gëøndom


	)

480 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

481 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

482 
	#SYS_gëæimô
 
__NR_gëæimô


	)

483 
	#SYS_gërußge
 
__NR_gërußge


	)

484 
	#SYS_gësid
 
__NR_gësid


	)

485 
	#SYS_gësock«me
 
__NR_gësock«me


	)

486 
	#SYS_gësock›t
 
__NR_gësock›t


	)

487 
	#SYS_gëtid
 
__NR_gëtid


	)

488 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

489 
	#SYS_gëuid
 
__NR_gëuid


	)

490 
	#SYS_gëx©å
 
__NR_gëx©å


	)

491 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

492 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

493 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

494 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

495 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

496 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

497 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

498 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

499 
	#SYS_io_£tup
 
__NR_io_£tup


	)

500 
	#SYS_io_submô
 
__NR_io_submô


	)

501 
	#SYS_io˘l
 
__NR_io˘l


	)

502 
	#SYS_i›îm
 
__NR_i›îm


	)

503 
	#SYS_i›l
 
__NR_i›l


	)

504 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

505 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

506 
	#SYS_kcmp
 
__NR_kcmp


	)

507 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

508 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

509 
	#SYS_key˘l
 
__NR_key˘l


	)

510 
	#SYS_kûl
 
__NR_kûl


	)

511 
	#SYS_lchown
 
__NR_lchown


	)

512 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

513 
	#SYS_lök
 
__NR_lök


	)

514 
	#SYS_lök©
 
__NR_lök©


	)

515 
	#SYS_li°í
 
__NR_li°í


	)

516 
	#SYS_li°x©å
 
__NR_li°x©å


	)

517 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

518 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

519 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

520 
	#SYS_l£ek
 
__NR_l£ek


	)

521 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

522 
	#SYS_l°©
 
__NR_l°©


	)

523 
	#SYS_madvi£
 
__NR_madvi£


	)

524 
	#SYS_mböd
 
__NR_mböd


	)

525 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

526 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

527 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

528 
	#SYS_möc‹e
 
__NR_möc‹e


	)

529 
	#SYS_mkdú
 
__NR_mkdú


	)

530 
	#SYS_mkdú©
 
__NR_mkdú©


	)

531 
	#SYS_mknod
 
__NR_mknod


	)

532 
	#SYS_mknod©
 
__NR_mknod©


	)

533 
	#SYS_mlock
 
__NR_mlock


	)

534 
	#SYS_mlock2
 
__NR_mlock2


	)

535 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

536 
	#SYS_mm≠
 
__NR_mm≠


	)

537 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

538 
	#SYS_mou¡
 
__NR_mou¡


	)

539 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

540 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

541 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

542 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

543 
	#SYS_mq_›í
 
__NR_mq_›í


	)

544 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

545 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

546 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

547 
	#SYS_mªm≠
 
__NR_mªm≠


	)

548 
	#SYS_msg˘l
 
__NR_msg˘l


	)

549 
	#SYS_msggë
 
__NR_msggë


	)

550 
	#SYS_msgrcv
 
__NR_msgrcv


	)

551 
	#SYS_msg¢d
 
__NR_msg¢d


	)

552 
	#SYS_msync
 
__NR_msync


	)

553 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

554 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

555 
	#SYS_munm≠
 
__NR_munm≠


	)

556 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

557 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

558 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

559 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

560 
	#SYS_›í
 
__NR_›í


	)

561 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

562 
	#SYS_›í©
 
__NR_›í©


	)

563 
	#SYS_∑u£
 
__NR_∑u£


	)

564 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

565 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

566 
	#SYS_pùe
 
__NR_pùe


	)

567 
	#SYS_pùe2
 
__NR_pùe2


	)

568 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

569 
	#SYS_pﬁl
 
__NR_pﬁl


	)

570 
	#SYS_µﬁl
 
__NR_µﬁl


	)

571 
	#SYS_¥˘l
 
__NR_¥˘l


	)

572 
	#SYS_¥ód64
 
__NR_¥ód64


	)

573 
	#SYS_¥ódv
 
__NR_¥ódv


	)

574 
	#SYS_¥ódv2
 
__NR_¥ódv2


	)

575 
	#SYS_¥limô64
 
__NR_¥limô64


	)

576 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

577 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

578 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

579 
	#SYS_±ø˚
 
__NR_±ø˚


	)

580 
	#SYS_puçmsg
 
__NR_puçmsg


	)

581 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

582 
	#SYS_pwrôev
 
__NR_pwrôev


	)

583 
	#SYS_pwrôev2
 
__NR_pwrôev2


	)

584 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

585 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

586 
	#SYS_ªad
 
__NR_ªad


	)

587 
	#SYS_ªadahód
 
__NR_ªadahód


	)

588 
	#SYS_ªadlök
 
__NR_ªadlök


	)

589 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

590 
	#SYS_ªadv
 
__NR_ªadv


	)

591 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

592 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

593 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

594 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

595 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

596 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

597 
	#SYS_ª«me
 
__NR_ª«me


	)

598 
	#SYS_ª«mót
 
__NR_ª«mót


	)

599 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

600 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

601 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

602 
	#SYS_rmdú
 
__NR_rmdú


	)

603 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

604 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

605 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

606 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

607 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

608 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

609 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

610 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

611 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

612 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

613 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

614 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

615 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

616 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

617 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

618 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

619 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

620 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

621 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

622 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

623 
	#SYS_£ccomp
 
__NR_£ccomp


	)

624 
	#SYS_£curôy
 
__NR_£curôy


	)

625 
	#SYS_£À˘
 
__NR_£À˘


	)

626 
	#SYS_£m˘l
 
__NR_£m˘l


	)

627 
	#SYS_£mgë
 
__NR_£mgë


	)

628 
	#SYS_£m›
 
__NR_£m›


	)

629 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

630 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

631 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

632 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

633 
	#SYS_£ndto
 
__NR_£ndto


	)

634 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

635 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

636 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

637 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

638 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

639 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

640 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

641 
	#SYS_£tgid
 
__NR_£tgid


	)

642 
	#SYS_£tgroups
 
__NR_£tgroups


	)

643 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

644 
	#SYS_£tôimî
 
__NR_£tôimî


	)

645 
	#SYS_£äs
 
__NR_£äs


	)

646 
	#SYS_£çgid
 
__NR_£çgid


	)

647 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

648 
	#SYS_£åegid
 
__NR_£åegid


	)

649 
	#SYS_£åesgid
 
__NR_£åesgid


	)

650 
	#SYS_£åesuid
 
__NR_£åesuid


	)

651 
	#SYS_£åeuid
 
__NR_£åeuid


	)

652 
	#SYS_£ålimô
 
__NR_£ålimô


	)

653 
	#SYS_£tsid
 
__NR_£tsid


	)

654 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

655 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

656 
	#SYS_£tuid
 
__NR_£tuid


	)

657 
	#SYS_£tx©å
 
__NR_£tx©å


	)

658 
	#SYS_shm©
 
__NR_shm©


	)

659 
	#SYS_shm˘l
 
__NR_shm˘l


	)

660 
	#SYS_shmdt
 
__NR_shmdt


	)

661 
	#SYS_shmgë
 
__NR_shmgë


	)

662 
	#SYS_shutdown
 
__NR_shutdown


	)

663 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

664 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

665 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

666 
	#SYS_sockë
 
__NR_sockë


	)

667 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

668 
	#SYS_•li˚
 
__NR_•li˚


	)

669 
	#SYS_°©
 
__NR_°©


	)

670 
	#SYS_°©fs
 
__NR_°©fs


	)

671 
	#SYS_sw≠off
 
__NR_sw≠off


	)

672 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

673 
	#SYS_symlök
 
__NR_symlök


	)

674 
	#SYS_symlök©
 
__NR_symlök©


	)

675 
	#SYS_sync
 
__NR_sync


	)

676 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

677 
	#SYS_syncfs
 
__NR_syncfs


	)

678 
	#SYS_sysfs
 
__NR_sysfs


	)

679 
	#SYS_sysöfo
 
__NR_sysöfo


	)

680 
	#SYS_sy¶og
 
__NR_sy¶og


	)

681 
	#SYS_ãe
 
__NR_ãe


	)

682 
	#SYS_tgkûl
 
__NR_tgkûl


	)

683 
	#SYS_time
 
__NR_time


	)

684 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

685 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

686 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

687 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

688 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

689 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

690 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

691 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

692 
	#SYS_times
 
__NR_times


	)

693 
	#SYS_tkûl
 
__NR_tkûl


	)

694 
	#SYS_åunˇã
 
__NR_åunˇã


	)

695 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

696 
	#SYS_umask
 
__NR_umask


	)

697 
	#SYS_umou¡2
 
__NR_umou¡2


	)

698 
	#SYS_u«me
 
__NR_u«me


	)

699 
	#SYS_u∆ök
 
__NR_u∆ök


	)

700 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

701 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

702 
	#SYS_u£lib
 
__NR_u£lib


	)

703 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

704 
	#SYS_u°©
 
__NR_u°©


	)

705 
	#SYS_utime
 
__NR_utime


	)

706 
	#SYS_utimíßt
 
__NR_utimíßt


	)

707 
	#SYS_utimes
 
__NR_utimes


	)

708 
	#SYS_vf‹k
 
__NR_vf‹k


	)

709 
	#SYS_vh™gup
 
__NR_vh™gup


	)

710 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

711 
	#SYS_v£rvî
 
__NR_v£rvî


	)

712 
	#SYS_waô4
 
__NR_waô4


	)

713 
	#SYS_waôid
 
__NR_waôid


	)

714 
	#SYS_wrôe
 
__NR_wrôe


	)

715 
	#SYS_wrôev
 
__NR_wrôev


	)

717 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


718 
	#SYS_ac˚±
 
__NR_ac˚±


	)

719 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

720 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

721 
	#SYS_ac˘
 
__NR_ac˘


	)

722 
	#SYS_add_key
 
__NR_add_key


	)

723 
	#SYS_adjtimex
 
__NR_adjtimex


	)

724 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

725 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

726 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

727 
	#SYS_böd
 
__NR_böd


	)

728 
	#SYS_bpf
 
__NR_bpf


	)

729 
	#SYS_brk
 
__NR_brk


	)

730 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

731 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

732 
	#SYS_chdú
 
__NR_chdú


	)

733 
	#SYS_chmod
 
__NR_chmod


	)

734 
	#SYS_chown
 
__NR_chown


	)

735 
	#SYS_chroŸ
 
__NR_chroŸ


	)

736 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

737 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

738 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

739 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

740 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

741 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

742 
	#SYS_˛o£
 
__NR_˛o£


	)

743 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

744 
	#SYS_c›y_fûe_ønge
 
__NR_c›y_fûe_ønge


	)

745 
	#SYS_¸ót
 
__NR_¸ót


	)

746 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

747 
	#SYS_dup
 
__NR_dup


	)

748 
	#SYS_dup2
 
__NR_dup2


	)

749 
	#SYS_dup3
 
__NR_dup3


	)

750 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

751 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

752 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

753 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

754 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

755 
	#SYS_evítfd
 
__NR_evítfd


	)

756 
	#SYS_evítfd2
 
__NR_evítfd2


	)

757 
	#SYS_execve
 
__NR_execve


	)

758 
	#SYS_execvót
 
__NR_execvót


	)

759 
	#SYS_exô
 
__NR_exô


	)

760 
	#SYS_exô_group
 
__NR_exô_group


	)

761 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

762 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

763 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

764 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

765 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

766 
	#SYS_fchdú
 
__NR_fchdú


	)

767 
	#SYS_fchmod
 
__NR_fchmod


	)

768 
	#SYS_fchmod©
 
__NR_fchmod©


	)

769 
	#SYS_fchown
 
__NR_fchown


	)

770 
	#SYS_fchow«t
 
__NR_fchow«t


	)

771 
	#SYS_f˙é
 
__NR_f˙é


	)

772 
	#SYS_fd©async
 
__NR_fd©async


	)

773 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

774 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

775 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

776 
	#SYS_Êock
 
__NR_Êock


	)

777 
	#SYS_f‹k
 
__NR_f‹k


	)

778 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

779 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

780 
	#SYS_f°©
 
__NR_f°©


	)

781 
	#SYS_f°©fs
 
__NR_f°©fs


	)

782 
	#SYS_fsync
 
__NR_fsync


	)

783 
	#SYS_·runˇã
 
__NR_·runˇã


	)

784 
	#SYS_fuãx
 
__NR_fuãx


	)

785 
	#SYS_futimeßt
 
__NR_futimeßt


	)

786 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

787 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

788 
	#SYS_gë˝u
 
__NR_gë˝u


	)

789 
	#SYS_gëcwd
 
__NR_gëcwd


	)

790 
	#SYS_gëdíts
 
__NR_gëdíts


	)

791 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

792 
	#SYS_gëegid
 
__NR_gëegid


	)

793 
	#SYS_gëeuid
 
__NR_gëeuid


	)

794 
	#SYS_gëgid
 
__NR_gëgid


	)

795 
	#SYS_gëgroups
 
__NR_gëgroups


	)

796 
	#SYS_gëôimî
 
__NR_gëôimî


	)

797 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

798 
	#SYS_gëpgid
 
__NR_gëpgid


	)

799 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

800 
	#SYS_gëpid
 
__NR_gëpid


	)

801 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

802 
	#SYS_gëµid
 
__NR_gëµid


	)

803 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

804 
	#SYS_gëøndom
 
__NR_gëøndom


	)

805 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

806 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

807 
	#SYS_gëæimô
 
__NR_gëæimô


	)

808 
	#SYS_gërußge
 
__NR_gërußge


	)

809 
	#SYS_gësid
 
__NR_gësid


	)

810 
	#SYS_gësock«me
 
__NR_gësock«me


	)

811 
	#SYS_gësock›t
 
__NR_gësock›t


	)

812 
	#SYS_gëtid
 
__NR_gëtid


	)

813 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

814 
	#SYS_gëuid
 
__NR_gëuid


	)

815 
	#SYS_gëx©å
 
__NR_gëx©å


	)

816 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

817 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

818 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

819 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

820 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

821 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

822 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

823 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

824 
	#SYS_io_£tup
 
__NR_io_£tup


	)

825 
	#SYS_io_submô
 
__NR_io_submô


	)

826 
	#SYS_io˘l
 
__NR_io˘l


	)

827 
	#SYS_i›îm
 
__NR_i›îm


	)

828 
	#SYS_i›l
 
__NR_i›l


	)

829 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

830 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

831 
	#SYS_kcmp
 
__NR_kcmp


	)

832 
	#SYS_kexec_fûe_lﬂd
 
__NR_kexec_fûe_lﬂd


	)

833 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

834 
	#SYS_key˘l
 
__NR_key˘l


	)

835 
	#SYS_kûl
 
__NR_kûl


	)

836 
	#SYS_lchown
 
__NR_lchown


	)

837 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

838 
	#SYS_lök
 
__NR_lök


	)

839 
	#SYS_lök©
 
__NR_lök©


	)

840 
	#SYS_li°í
 
__NR_li°í


	)

841 
	#SYS_li°x©å
 
__NR_li°x©å


	)

842 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

843 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

844 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

845 
	#SYS_l£ek
 
__NR_l£ek


	)

846 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

847 
	#SYS_l°©
 
__NR_l°©


	)

848 
	#SYS_madvi£
 
__NR_madvi£


	)

849 
	#SYS_mböd
 
__NR_mböd


	)

850 
	#SYS_memb¨rõr
 
__NR_memb¨rõr


	)

851 
	#SYS_memfd_¸óã
 
__NR_memfd_¸óã


	)

852 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

853 
	#SYS_möc‹e
 
__NR_möc‹e


	)

854 
	#SYS_mkdú
 
__NR_mkdú


	)

855 
	#SYS_mkdú©
 
__NR_mkdú©


	)

856 
	#SYS_mknod
 
__NR_mknod


	)

857 
	#SYS_mknod©
 
__NR_mknod©


	)

858 
	#SYS_mlock
 
__NR_mlock


	)

859 
	#SYS_mlock2
 
__NR_mlock2


	)

860 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

861 
	#SYS_mm≠
 
__NR_mm≠


	)

862 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

863 
	#SYS_mou¡
 
__NR_mou¡


	)

864 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

865 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

866 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

867 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

868 
	#SYS_mq_›í
 
__NR_mq_›í


	)

869 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

870 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

871 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

872 
	#SYS_mªm≠
 
__NR_mªm≠


	)

873 
	#SYS_msg˘l
 
__NR_msg˘l


	)

874 
	#SYS_msggë
 
__NR_msggë


	)

875 
	#SYS_msgrcv
 
__NR_msgrcv


	)

876 
	#SYS_msg¢d
 
__NR_msg¢d


	)

877 
	#SYS_msync
 
__NR_msync


	)

878 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

879 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

880 
	#SYS_munm≠
 
__NR_munm≠


	)

881 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

882 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

883 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

884 
	#SYS_›í
 
__NR_›í


	)

885 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

886 
	#SYS_›í©
 
__NR_›í©


	)

887 
	#SYS_∑u£
 
__NR_∑u£


	)

888 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

889 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

890 
	#SYS_pùe
 
__NR_pùe


	)

891 
	#SYS_pùe2
 
__NR_pùe2


	)

892 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

893 
	#SYS_pﬁl
 
__NR_pﬁl


	)

894 
	#SYS_µﬁl
 
__NR_µﬁl


	)

895 
	#SYS_¥˘l
 
__NR_¥˘l


	)

896 
	#SYS_¥ód64
 
__NR_¥ód64


	)

897 
	#SYS_¥ódv
 
__NR_¥ódv


	)

898 
	#SYS_¥ódv2
 
__NR_¥ódv2


	)

899 
	#SYS_¥limô64
 
__NR_¥limô64


	)

900 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

901 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

902 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

903 
	#SYS_±ø˚
 
__NR_±ø˚


	)

904 
	#SYS_puçmsg
 
__NR_puçmsg


	)

905 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

906 
	#SYS_pwrôev
 
__NR_pwrôev


	)

907 
	#SYS_pwrôev2
 
__NR_pwrôev2


	)

908 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

909 
	#SYS_ªad
 
__NR_ªad


	)

910 
	#SYS_ªadahód
 
__NR_ªadahód


	)

911 
	#SYS_ªadlök
 
__NR_ªadlök


	)

912 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

913 
	#SYS_ªadv
 
__NR_ªadv


	)

914 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

915 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

916 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

917 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

918 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

919 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

920 
	#SYS_ª«me
 
__NR_ª«me


	)

921 
	#SYS_ª«mót
 
__NR_ª«mót


	)

922 
	#SYS_ª«mót2
 
__NR_ª«mót2


	)

923 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

924 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

925 
	#SYS_rmdú
 
__NR_rmdú


	)

926 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

927 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

928 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

929 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

930 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

931 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

932 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

933 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

934 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

935 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

936 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

937 
	#SYS_sched_gë©å
 
__NR_sched_gë©å


	)

938 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

939 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

940 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

941 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

942 
	#SYS_sched_£èâr
 
__NR_sched_£èâr


	)

943 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

944 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

945 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

946 
	#SYS_£ccomp
 
__NR_£ccomp


	)

947 
	#SYS_£curôy
 
__NR_£curôy


	)

948 
	#SYS_£À˘
 
__NR_£À˘


	)

949 
	#SYS_£m˘l
 
__NR_£m˘l


	)

950 
	#SYS_£mgë
 
__NR_£mgë


	)

951 
	#SYS_£m›
 
__NR_£m›


	)

952 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

953 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

954 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

955 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

956 
	#SYS_£ndto
 
__NR_£ndto


	)

957 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

958 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

959 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

960 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

961 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

962 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

963 
	#SYS_£tgid
 
__NR_£tgid


	)

964 
	#SYS_£tgroups
 
__NR_£tgroups


	)

965 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

966 
	#SYS_£tôimî
 
__NR_£tôimî


	)

967 
	#SYS_£äs
 
__NR_£äs


	)

968 
	#SYS_£çgid
 
__NR_£çgid


	)

969 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

970 
	#SYS_£åegid
 
__NR_£åegid


	)

971 
	#SYS_£åesgid
 
__NR_£åesgid


	)

972 
	#SYS_£åesuid
 
__NR_£åesuid


	)

973 
	#SYS_£åeuid
 
__NR_£åeuid


	)

974 
	#SYS_£ålimô
 
__NR_£ålimô


	)

975 
	#SYS_£tsid
 
__NR_£tsid


	)

976 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

977 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

978 
	#SYS_£tuid
 
__NR_£tuid


	)

979 
	#SYS_£tx©å
 
__NR_£tx©å


	)

980 
	#SYS_shm©
 
__NR_shm©


	)

981 
	#SYS_shm˘l
 
__NR_shm˘l


	)

982 
	#SYS_shmdt
 
__NR_shmdt


	)

983 
	#SYS_shmgë
 
__NR_shmgë


	)

984 
	#SYS_shutdown
 
__NR_shutdown


	)

985 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

986 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

987 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

988 
	#SYS_sockë
 
__NR_sockë


	)

989 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

990 
	#SYS_•li˚
 
__NR_•li˚


	)

991 
	#SYS_°©
 
__NR_°©


	)

992 
	#SYS_°©fs
 
__NR_°©fs


	)

993 
	#SYS_sw≠off
 
__NR_sw≠off


	)

994 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

995 
	#SYS_symlök
 
__NR_symlök


	)

996 
	#SYS_symlök©
 
__NR_symlök©


	)

997 
	#SYS_sync
 
__NR_sync


	)

998 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

999 
	#SYS_syncfs
 
__NR_syncfs


	)

1000 
	#SYS_sysfs
 
__NR_sysfs


	)

1001 
	#SYS_sysöfo
 
__NR_sysöfo


	)

1002 
	#SYS_sy¶og
 
__NR_sy¶og


	)

1003 
	#SYS_ãe
 
__NR_ãe


	)

1004 
	#SYS_tgkûl
 
__NR_tgkûl


	)

1005 
	#SYS_time
 
__NR_time


	)

1006 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

1007 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

1008 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

1009 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

1010 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

1011 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

1012 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

1013 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

1014 
	#SYS_times
 
__NR_times


	)

1015 
	#SYS_tkûl
 
__NR_tkûl


	)

1016 
	#SYS_åunˇã
 
__NR_åunˇã


	)

1017 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

1018 
	#SYS_umask
 
__NR_umask


	)

1019 
	#SYS_umou¡2
 
__NR_umou¡2


	)

1020 
	#SYS_u«me
 
__NR_u«me


	)

1021 
	#SYS_u∆ök
 
__NR_u∆ök


	)

1022 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

1023 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

1024 
	#SYS_u£rÁu…fd
 
__NR_u£rÁu…fd


	)

1025 
	#SYS_u°©
 
__NR_u°©


	)

1026 
	#SYS_utime
 
__NR_utime


	)

1027 
	#SYS_utimíßt
 
__NR_utimíßt


	)

1028 
	#SYS_utimes
 
__NR_utimes


	)

1029 
	#SYS_vf‹k
 
__NR_vf‹k


	)

1030 
	#SYS_vh™gup
 
__NR_vh™gup


	)

1031 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

1032 
	#SYS_waô4
 
__NR_waô4


	)

1033 
	#SYS_waôid
 
__NR_waôid


	)

1034 
	#SYS_wrôe
 
__NR_wrôe


	)

1035 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/sysctl.h

18 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/utmp.h

19 #i‚de‡
_UTMP_H


23 
	~<∑ths.h
>

24 
	~<sys/time.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<bôs/w‹dsize.h
>

29 
	#UT_LINESIZE
 32

	)

30 
	#UT_NAMESIZE
 32

	)

31 
	#UT_HOSTSIZE
 256

	)

36 
	sœ°log


38 #ifde‡
__WORDSIZE_TIME64_COMPAT32


39 
öt32_t
 
	mŒ_time
;

41 
__time_t
 
	mŒ_time
;

43 
	mŒ_löe
[
UT_LINESIZE
];

44 
	mŒ_ho°
[
UT_HOSTSIZE
];

50 
	sexô_°©us


52 
	me_ãrmö©i⁄
;

53 
	me_exô
;

58 
	sutmp


60 
	mut_ty≥
;

61 
pid_t
 
	mut_pid
;

62 
	mut_löe
[
UT_LINESIZE
];

63 
	mut_id
[4];

64 
	mut_u£r
[
UT_NAMESIZE
];

65 
	mut_ho°
[
UT_HOSTSIZE
];

66 
exô_°©us
 
	mut_exô
;

71 #ifde‡
__WORDSIZE_TIME64_COMPAT32


72 
öt32_t
 
	mut_£ssi⁄
;

75 
öt32_t
 
	mtv_£c
;

76 
öt32_t
 
	mtv_u£c
;

77 } 
	mut_tv
;

79 
	mut_£ssi⁄
;

80 
timevÆ
 
	mut_tv
;

83 
öt32_t
 
	mut_addr_v6
[4];

84 
	m__glibc_ª£rved
[20];

88 
	#ut_«me
 
ut_u£r


	)

89 #i‚de‡
_NO_UT_TIME


92 
	#ut_time
 
ut_tv
.
tv_£c


	)

94 
	#ut_xtime
 
ut_tv
.
tv_£c


	)

95 
	#ut_addr
 
ut_addr_v6
[0]

	)

99 
	#EMPTY
 0

	)

101 
	#RUN_LVL
 1

	)

102 
	#BOOT_TIME
 2

	)

103 
	#NEW_TIME
 3

	)

104 
	#OLD_TIME
 4

	)

106 
	#INIT_PROCESS
 5

	)

107 
	#LOGIN_PROCESS
 6

	)

108 
	#USER_PROCESS
 7

	)

109 
	#DEAD_PROCESS
 8

	)

111 
	#ACCOUNTING
 9

	)

114 
	#UT_UNKNOWN
 
EMPTY


	)

119 
	#_HAVE_UT_TYPE
 1

	)

120 
	#_HAVE_UT_PID
 1

	)

121 
	#_HAVE_UT_ID
 1

	)

122 
	#_HAVE_UT_TV
 1

	)

123 
	#_HAVE_UT_HOST
 1

	)

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 #i‡
deföed
 
__USE_GNU
 || !deföed 
__USE_XOPEN2K8


81 
	#NL_NMAX
 
INT_MAX


	)

85 
	#NL_SETMAX
 
INT_MAX


	)

88 
	#NL_TEXTMAX
 
INT_MAX


	)

91 
	#NZERO
 20

	)

95 #ifde‡
INT_MAX


96 #i‡
INT_MAX
 == 32767

97 
	#WORD_BIT
 16

	)

99 #i‡
INT_MAX
 == 2147483647

100 
	#WORD_BIT
 32

	)

103 
	#WORD_BIT
 64

	)

106 #ñi‡
deföed
 
__INT_MAX__


107 #i‡
__INT_MAX__
 == 32767

108 
	#WORD_BIT
 16

	)

110 #i‡
__INT_MAX__
 == 2147483647

111 
	#WORD_BIT
 32

	)

114 
	#WORD_BIT
 64

	)

118 
	#WORD_BIT
 32

	)

122 #ifde‡
LONG_MAX


123 #i‡
LONG_MAX
 == 2147483647

124 
	#LONG_BIT
 32

	)

127 
	#LONG_BIT
 64

	)

129 #ñi‡
deföed
 
__LONG_MAX__


130 #i‡
__LONG_MAX__
 == 2147483647

131 
	#LONG_BIT
 32

	)

134 
	#LONG_BIT
 64

	)

137 
	~<bôs/w‹dsize.h
>

138 #i‡
__WORDSIZE
 == 64

139 
	#LONG_BIT
 64

	)

141 
	#LONG_BIT
 32

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

330 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

331 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

332 #ñi‡!
__GNUC_PREREQ
 (4, 1)

333 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


334 #ñi‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 #i‚de‡
__USE_FORTIFY_LEVEL


341 
	#__USE_FORTIFY_LEVEL
 0

	)

346 
	~<°dc-¥edef.h
>

354 #unde‡
__GNU_LIBRARY__


355 
	#__GNU_LIBRARY__
 6

	)

359 
	#__GLIBC__
 2

	)

360 
	#__GLIBC_MINOR__
 24

	)

362 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

363 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

366 #i‚de‡
__ASSEMBLER__


367 #i‚de‡
_SYS_CDEFS_H


368 
	~<sys/cdefs.h
>

373 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


374 
	#__USE_LARGEFILE
 1

	)

375 
	#__USE_LARGEFILE64
 1

	)

381 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

382 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

383 && 
deföed
 
	g__exã∫_ölöe


384 
	#__USE_EXTERN_INLINES
 1

	)

392 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

12 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	#CTL_MAXNAME
 10

	)

34 
	s__sys˘l_¨gs
 {

35 *
	m«me
;

36 
	m∆í
;

37 *
	mﬁdvÆ
;

38 
size_t
 *
	mﬁdÀ≈
;

39 *
	m√wvÆ
;

40 
size_t
 
	m√wÀn
;

41 
	m__unu£d
[4];

50 
	mCTL_KERN
=1,

51 
	mCTL_VM
=2,

52 
	mCTL_NET
=3,

53 
	mCTL_PROC
=4,

54 
	mCTL_FS
=5,

55 
	mCTL_DEBUG
=6,

56 
	mCTL_DEV
=7,

57 
	mCTL_BUS
=8,

58 
	mCTL_ABI
=9,

59 
	mCTL_CPU
=10,

60 
	mCTL_ARLAN
=254,

61 
	mCTL_S390DBF
=5677,

62 
	mCTL_SUNRPC
=7249,

63 
	mCTL_PM
=9899,

64 
	mCTL_FRV
=9898,

70 
	mCTL_BUS_ISA
=1

76 
	mINOTIFY_MAX_USER_INSTANCES
=1,

77 
	mINOTIFY_MAX_USER_WATCHES
=2,

78 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

84 
	mKERN_OSTYPE
=1,

85 
	mKERN_OSRELEASE
=2,

86 
	mKERN_OSREV
=3,

87 
	mKERN_VERSION
=4,

88 
	mKERN_SECUREMASK
=5,

89 
	mKERN_PROF
=6,

90 
	mKERN_NODENAME
=7,

91 
	mKERN_DOMAINNAME
=8,

93 
	mKERN_PANIC
=15,

94 
	mKERN_REALROOTDEV
=16,

96 
	mKERN_SPARC_REBOOT
=21,

97 
	mKERN_CTLALTDEL
=22,

98 
	mKERN_PRINTK
=23,

99 
	mKERN_NAMETRANS
=24,

100 
	mKERN_PPC_HTABRECLAIM
=25,

101 
	mKERN_PPC_ZEROPAGED
=26,

102 
	mKERN_PPC_POWERSAVE_NAP
=27,

103 
	mKERN_MODPROBE
=28,

104 
	mKERN_SG_BIG_BUFF
=29,

105 
	mKERN_ACCT
=30,

106 
	mKERN_PPC_L2CR
=31,

108 
	mKERN_RTSIGNR
=32,

109 
	mKERN_RTSIGMAX
=33,

111 
	mKERN_SHMMAX
=34,

112 
	mKERN_MSGMAX
=35,

113 
	mKERN_MSGMNB
=36,

114 
	mKERN_MSGPOOL
=37,

115 
	mKERN_SYSRQ
=38,

116 
	mKERN_MAX_THREADS
=39,

117 
	mKERN_RANDOM
=40,

118 
	mKERN_SHMALL
=41,

119 
	mKERN_MSGMNI
=42,

120 
	mKERN_SEM
=43,

121 
	mKERN_SPARC_STOP_A
=44,

122 
	mKERN_SHMMNI
=45,

123 
	mKERN_OVERFLOWUID
=46,

124 
	mKERN_OVERFLOWGID
=47,

125 
	mKERN_SHMPATH
=48,

126 
	mKERN_HOTPLUG
=49,

127 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

128 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

129 
	mKERN_CORE_USES_PID
=52,

130 
	mKERN_TAINTED
=53,

131 
	mKERN_CADPID
=54,

132 
	mKERN_PIDMAX
=55,

133 
	mKERN_CORE_PATTERN
=56,

134 
	mKERN_PANIC_ON_OOPS
=57,

135 
	mKERN_HPPA_PWRSW
=58,

136 
	mKERN_HPPA_UNALIGNED
=59,

137 
	mKERN_PRINTK_RATELIMIT
=60,

138 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

139 
	mKERN_PTY
=62,

140 
	mKERN_NGROUPS_MAX
=63,

141 
	mKERN_SPARC_SCONS_PWROFF
=64,

142 
	mKERN_HZ_TIMER
=65,

143 
	mKERN_UNKNOWN_NMI_PANIC
=66,

144 
	mKERN_BOOTLOADER_TYPE
=67,

145 
	mKERN_RANDOMIZE
=68,

146 
	mKERN_SETUID_DUMPABLE
=69,

147 
	mKERN_SPIN_RETRY
=70,

148 
	mKERN_ACPI_VIDEO_FLAGS
=71,

149 
	mKERN_IA64_UNALIGNED
=72,

150 
	mKERN_COMPAT_LOG
=73,

151 
	mKERN_MAX_LOCK_DEPTH
=74,

152 
	mKERN_NMI_WATCHDOG
=75,

153 
	mKERN_PANIC_ON_NMI
=76,

154 
	mKERN_PANIC_ON_WARN
=77,

162 
	mVM_UNUSED1
=1,

163 
	mVM_UNUSED2
=2,

164 
	mVM_UNUSED3
=3,

165 
	mVM_UNUSED4
=4,

166 
	mVM_OVERCOMMIT_MEMORY
=5,

167 
	mVM_UNUSED5
=6,

168 
	mVM_UNUSED7
=7,

169 
	mVM_UNUSED8
=8,

170 
	mVM_UNUSED9
=9,

171 
	mVM_PAGE_CLUSTER
=10,

172 
	mVM_DIRTY_BACKGROUND
=11,

173 
	mVM_DIRTY_RATIO
=12,

174 
	mVM_DIRTY_WB_CS
=13,

175 
	mVM_DIRTY_EXPIRE_CS
=14,

176 
	mVM_NR_PDFLUSH_THREADS
=15,

177 
	mVM_OVERCOMMIT_RATIO
=16,

178 
	mVM_PAGEBUF
=17,

179 
	mVM_HUGETLB_PAGES
=18,

180 
	mVM_SWAPPINESS
=19,

181 
	mVM_LOWMEM_RESERVE_RATIO
=20,

182 
	mVM_MIN_FREE_KBYTES
=21,

183 
	mVM_MAX_MAP_COUNT
=22,

184 
	mVM_LAPTOP_MODE
=23,

185 
	mVM_BLOCK_DUMP
=24,

186 
	mVM_HUGETLB_GROUP
=25,

187 
	mVM_VFS_CACHE_PRESSURE
=26,

188 
	mVM_LEGACY_VA_LAYOUT
=27,

189 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

190 
	mVM_DROP_PAGECACHE
=29,

191 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

192 
	mVM_ZONE_RECLAIM_MODE
=31,

193 
	mVM_MIN_UNMAPPED
=32,

194 
	mVM_PANIC_ON_OOM
=33,

195 
	mVM_VDSO_ENABLED
=34,

196 
	mVM_MIN_SLAB
=35,

203 
	mNET_CORE
=1,

204 
	mNET_ETHER
=2,

205 
	mNET_802
=3,

206 
	mNET_UNIX
=4,

207 
	mNET_IPV4
=5,

208 
	mNET_IPX
=6,

209 
	mNET_ATALK
=7,

210 
	mNET_NETROM
=8,

211 
	mNET_AX25
=9,

212 
	mNET_BRIDGE
=10,

213 
	mNET_ROSE
=11,

214 
	mNET_IPV6
=12,

215 
	mNET_X25
=13,

216 
	mNET_TR
=14,

217 
	mNET_DECNET
=15,

218 
	mNET_ECONET
=16,

219 
	mNET_SCTP
=17,

220 
	mNET_LLC
=18,

221 
	mNET_NETFILTER
=19,

222 
	mNET_DCCP
=20,

223 
	mNET_IRDA
=412,

229 
	mRANDOM_POOLSIZE
=1,

230 
	mRANDOM_ENTROPY_COUNT
=2,

231 
	mRANDOM_READ_THRESH
=3,

232 
	mRANDOM_WRITE_THRESH
=4,

233 
	mRANDOM_BOOT_ID
=5,

234 
	mRANDOM_UUID
=6

240 
	mPTY_MAX
=1,

241 
	mPTY_NR
=2

247 
	mBUS_ISA_MEM_BASE
=1,

248 
	mBUS_ISA_PORT_BASE
=2,

249 
	mBUS_ISA_PORT_SHIFT
=3

255 
	mNET_CORE_WMEM_MAX
=1,

256 
	mNET_CORE_RMEM_MAX
=2,

257 
	mNET_CORE_WMEM_DEFAULT
=3,

258 
	mNET_CORE_RMEM_DEFAULT
=4,

260 
	mNET_CORE_MAX_BACKLOG
=6,

261 
	mNET_CORE_FASTROUTE
=7,

262 
	mNET_CORE_MSG_COST
=8,

263 
	mNET_CORE_MSG_BURST
=9,

264 
	mNET_CORE_OPTMEM_MAX
=10,

265 
	mNET_CORE_HOT_LIST_LENGTH
=11,

266 
	mNET_CORE_DIVERT_VERSION
=12,

267 
	mNET_CORE_NO_CONG_THRESH
=13,

268 
	mNET_CORE_NO_CONG
=14,

269 
	mNET_CORE_LO_CONG
=15,

270 
	mNET_CORE_MOD_CONG
=16,

271 
	mNET_CORE_DEV_WEIGHT
=17,

272 
	mNET_CORE_SOMAXCONN
=18,

273 
	mNET_CORE_BUDGET
=19,

274 
	mNET_CORE_AEVENT_ETIME
=20,

275 
	mNET_CORE_AEVENT_RSEQTH
=21,

276 
	mNET_CORE_WARNINGS
=22,

287 
	mNET_UNIX_DESTROY_DELAY
=1,

288 
	mNET_UNIX_DELETE_DELAY
=2,

289 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

295 
	mNET_NF_CONNTRACK_MAX
=1,

296 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

297 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

304 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

305 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

306 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

307 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

308 
	mNET_NF_CONNTRACK_BUCKETS
=14,

309 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

310 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

311 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

312 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

313 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

314 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

315 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

321 
	mNET_NF_CONNTRACK_COUNT
=27,

322 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

323 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

324 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

325 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

326 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

333 
	mNET_IPV4_FORWARD
=8,

334 
	mNET_IPV4_DYNADDR
=9,

336 
	mNET_IPV4_CONF
=16,

337 
	mNET_IPV4_NEIGH
=17,

338 
	mNET_IPV4_ROUTE
=18,

339 
	mNET_IPV4_FIB_HASH
=19,

340 
	mNET_IPV4_NETFILTER
=20,

342 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

343 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

344 
	mNET_IPV4_TCP_SACK
=35,

345 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

346 
	mNET_IPV4_DEFAULT_TTL
=37,

347 
	mNET_IPV4_AUTOCONFIG
=38,

348 
	mNET_IPV4_NO_PMTU_DISC
=39,

349 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

350 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

351 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

352 
	mNET_IPV4_IPFRAG_TIME
=43,

353 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

354 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

355 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

356 
	mNET_IPV4_TCP_RETRIES1
=47,

357 
	mNET_IPV4_TCP_RETRIES2
=48,

358 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

359 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

360 
	mNET_TCP_SYNCOOKIES
=51,

361 
	mNET_TCP_STDURG
=52,

362 
	mNET_TCP_RFC1337
=53,

363 
	mNET_TCP_SYN_TAILDROP
=54,

364 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

365 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

366 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

367 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

368 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

369 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

370 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

371 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

372 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

373 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

374 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

375 
	mNET_TCP_TW_RECYCLE
=66,

376 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

377 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

378 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

379 
	mNET_IPV4_INET_PEER_MINTTL
=70,

380 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

381 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

382 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

383 
	mNET_TCP_ORPHAN_RETRIES
=74,

384 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

385 
	mNET_TCP_SYNACK_RETRIES
=76,

386 
	mNET_TCP_MAX_ORPHANS
=77,

387 
	mNET_TCP_MAX_TW_BUCKETS
=78,

388 
	mNET_TCP_FACK
=79,

389 
	mNET_TCP_REORDERING
=80,

390 
	mNET_TCP_ECN
=81,

391 
	mNET_TCP_DSACK
=82,

392 
	mNET_TCP_MEM
=83,

393 
	mNET_TCP_WMEM
=84,

394 
	mNET_TCP_RMEM
=85,

395 
	mNET_TCP_APP_WIN
=86,

396 
	mNET_TCP_ADV_WIN_SCALE
=87,

397 
	mNET_IPV4_NONLOCAL_BIND
=88,

398 
	mNET_IPV4_ICMP_RATELIMIT
=89,

399 
	mNET_IPV4_ICMP_RATEMASK
=90,

400 
	mNET_TCP_TW_REUSE
=91,

401 
	mNET_TCP_FRTO
=92,

402 
	mNET_TCP_LOW_LATENCY
=93,

403 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

404 
	mNET_IPV4_IGMP_MAX_MSF
=96,

405 
	mNET_TCP_NO_METRICS_SAVE
=97,

406 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

407 
	mNET_TCP_MODERATE_RCVBUF
=106,

408 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

409 
	mNET_TCP_BIC_BETA
=108,

410 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

411 
	mNET_TCP_CONG_CONTROL
=110,

412 
	mNET_TCP_ABC
=111,

413 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

414 
	mNET_TCP_MTU_PROBING
=113,

415 
	mNET_TCP_BASE_MSS
=114,

416 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

417 
	mNET_TCP_DMA_COPYBREAK
=116,

418 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

419 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

420 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

421 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

422 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

423 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

424 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

425 
	mNET_TCP_MAX_SSTHRESH
=124,

426 
	mNET_TCP_FRTO_RESPONSE
=125,

430 
	mNET_IPV4_ROUTE_FLUSH
=1,

431 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

432 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

433 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

434 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

435 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

436 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

437 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

438 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

439 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

440 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

441 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

442 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

443 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

444 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

445 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

446 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

447 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

448 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

453 
	mNET_PROTO_CONF_ALL
=-2,

454 
	mNET_PROTO_CONF_DEFAULT
=-3

461 
	mNET_IPV4_CONF_FORWARDING
=1,

462 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

463 
	mNET_IPV4_CONF_PROXY_ARP
=3,

464 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

465 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

466 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

467 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

468 
	mNET_IPV4_CONF_RP_FILTER
=8,

469 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

470 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

471 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

472 
	mNET_IPV4_CONF_TAG
=12,

473 
	mNET_IPV4_CONF_ARPFILTER
=13,

474 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

475 
	mNET_IPV4_CONF_NOXFRM
=15,

476 
	mNET_IPV4_CONF_NOPOLICY
=16,

477 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

478 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

479 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

480 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

481 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

482 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

488 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

489 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

490 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

497 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

498 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

499 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

500 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

501 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

502 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

503 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

504 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

507 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

508 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

514 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

515 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

520 
	mNET_IPV6_CONF
=16,

521 
	mNET_IPV6_NEIGH
=17,

522 
	mNET_IPV6_ROUTE
=18,

523 
	mNET_IPV6_ICMP
=19,

524 
	mNET_IPV6_BINDV6ONLY
=20,

525 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

526 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

527 
	mNET_IPV6_IP6FRAG_TIME
=23,

528 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

529 
	mNET_IPV6_MLD_MAX_MSF
=25,

533 
	mNET_IPV6_ROUTE_FLUSH
=1,

534 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

535 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

536 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

537 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

538 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

539 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

540 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

541 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

542 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

546 
	mNET_IPV6_FORWARDING
=1,

547 
	mNET_IPV6_HOP_LIMIT
=2,

548 
	mNET_IPV6_MTU
=3,

549 
	mNET_IPV6_ACCEPT_RA
=4,

550 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

551 
	mNET_IPV6_AUTOCONF
=6,

552 
	mNET_IPV6_DAD_TRANSMITS
=7,

553 
	mNET_IPV6_RTR_SOLICITS
=8,

554 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

555 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

556 
	mNET_IPV6_USE_TEMPADDR
=11,

557 
	mNET_IPV6_TEMP_VALID_LFT
=12,

558 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

559 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

560 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

561 
	mNET_IPV6_MAX_ADDRESSES
=16,

562 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

563 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

564 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

565 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

566 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

567 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

568 
	mNET_IPV6_PROXY_NDP
=23,

569 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

570 
	mNET_IPV6_ACCEPT_RA_FROM_LOCAL
=26,

571 
	m__NET_IPV6_MAX


576 
	mNET_IPV6_ICMP_RATELIMIT
=1

581 
	mNET_NEIGH_MCAST_SOLICIT
=1,

582 
	mNET_NEIGH_UCAST_SOLICIT
=2,

583 
	mNET_NEIGH_APP_SOLICIT
=3,

584 
	mNET_NEIGH_RETRANS_TIME
=4,

585 
	mNET_NEIGH_REACHABLE_TIME
=5,

586 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

587 
	mNET_NEIGH_GC_STALE_TIME
=7,

588 
	mNET_NEIGH_UNRES_QLEN
=8,

589 
	mNET_NEIGH_PROXY_QLEN
=9,

590 
	mNET_NEIGH_ANYCAST_DELAY
=10,

591 
	mNET_NEIGH_PROXY_DELAY
=11,

592 
	mNET_NEIGH_LOCKTIME
=12,

593 
	mNET_NEIGH_GC_INTERVAL
=13,

594 
	mNET_NEIGH_GC_THRESH1
=14,

595 
	mNET_NEIGH_GC_THRESH2
=15,

596 
	mNET_NEIGH_GC_THRESH3
=16,

597 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

598 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

603 
	mNET_DCCP_DEFAULT
=1,

608 
	mNET_IPX_PPROP_BROADCASTING
=1,

609 
	mNET_IPX_FORWARDING
=2

614 
	mNET_LLC2
=1,

615 
	mNET_LLC_STATION
=2,

620 
	mNET_LLC2_TIMEOUT
=1,

625 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

630 
	mNET_LLC2_ACK_TIMEOUT
=1,

631 
	mNET_LLC2_P_TIMEOUT
=2,

632 
	mNET_LLC2_REJ_TIMEOUT
=3,

633 
	mNET_LLC2_BUSY_TIMEOUT
=4,

638 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

639 
	mNET_ATALK_AARP_TICK_TIME
=2,

640 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

641 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

647 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

648 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

649 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

650 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

651 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

652 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

653 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

654 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

655 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

656 
	mNET_NETROM_ROUTING_CONTROL
=10,

657 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

658 
	mNET_NETROM_RESET
=12

663 
	mNET_AX25_IP_DEFAULT_MODE
=1,

664 
	mNET_AX25_DEFAULT_MODE
=2,

665 
	mNET_AX25_BACKOFF_TYPE
=3,

666 
	mNET_AX25_CONNECT_MODE
=4,

667 
	mNET_AX25_STANDARD_WINDOW
=5,

668 
	mNET_AX25_EXTENDED_WINDOW
=6,

669 
	mNET_AX25_T1_TIMEOUT
=7,

670 
	mNET_AX25_T2_TIMEOUT
=8,

671 
	mNET_AX25_T3_TIMEOUT
=9,

672 
	mNET_AX25_IDLE_TIMEOUT
=10,

673 
	mNET_AX25_N2
=11,

674 
	mNET_AX25_PACLEN
=12,

675 
	mNET_AX25_PROTOCOL
=13,

676 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

681 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

682 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

683 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

684 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

685 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

686 
	mNET_ROSE_ROUTING_CONTROL
=6,

687 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

688 
	mNET_ROSE_MAX_VCS
=8,

689 
	mNET_ROSE_WINDOW_SIZE
=9,

690 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

695 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

696 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

697 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

698 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

699 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

700 
	mNET_X25_FORWARD
=6

706 
	mNET_TR_RIF_TIMEOUT
=1

711 
	mNET_DECNET_NODE_TYPE
 = 1,

712 
	mNET_DECNET_NODE_ADDRESS
 = 2,

713 
	mNET_DECNET_NODE_NAME
 = 3,

714 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

715 
	mNET_DECNET_TIME_WAIT
 = 5,

716 
	mNET_DECNET_DN_COUNT
 = 6,

717 
	mNET_DECNET_DI_COUNT
 = 7,

718 
	mNET_DECNET_DR_COUNT
 = 8,

719 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

720 
	mNET_DECNET_CONF
 = 10,

721 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

722 
	mNET_DECNET_MEM
 = 12,

723 
	mNET_DECNET_RMEM
 = 13,

724 
	mNET_DECNET_WMEM
 = 14,

725 
	mNET_DECNET_DEBUG_LEVEL
 = 255

730 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

731 
	mNET_DECNET_CONF_DDCMP
 = -3,

732 
	mNET_DECNET_CONF_PPP
 = -4,

733 
	mNET_DECNET_CONF_X25
 = -5,

734 
	mNET_DECNET_CONF_GRE
 = -6,

735 
	mNET_DECNET_CONF_ETHER
 = -7

742 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

743 
	mNET_DECNET_CONF_DEV_T1
 = 2,

744 
	mNET_DECNET_CONF_DEV_T2
 = 3,

745 
	mNET_DECNET_CONF_DEV_T3
 = 4,

746 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

747 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

748 
	mNET_DECNET_CONF_DEV_STATE
 = 7

753 
	mNET_SCTP_RTO_INITIAL
 = 1,

754 
	mNET_SCTP_RTO_MIN
 = 2,

755 
	mNET_SCTP_RTO_MAX
 = 3,

756 
	mNET_SCTP_RTO_ALPHA
 = 4,

757 
	mNET_SCTP_RTO_BETA
 = 5,

758 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

759 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

760 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

761 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

762 
	mNET_SCTP_HB_INTERVAL
 = 10,

763 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

764 
	mNET_SCTP_MAX_BURST
 = 12,

765 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

766 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

767 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

768 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

769 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

774 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

775 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

776 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

777 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

778 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

783 
	mNET_IRDA_DISCOVERY
=1,

784 
	mNET_IRDA_DEVNAME
=2,

785 
	mNET_IRDA_DEBUG
=3,

786 
	mNET_IRDA_FAST_POLL
=4,

787 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

788 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

789 
	mNET_IRDA_SLOT_TIMEOUT
=7,

790 
	mNET_IRDA_MAX_BAUD_RATE
=8,

791 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

792 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

793 
	mNET_IRDA_MAX_TX_WINDOW
=11,

794 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

795 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

796 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

803 
	mFS_NRINODE
=1,

804 
	mFS_STATINODE
=2,

805 
	mFS_MAXINODE
=3,

806 
	mFS_NRDQUOT
=4,

807 
	mFS_MAXDQUOT
=5,

808 
	mFS_NRFILE
=6,

809 
	mFS_MAXFILE
=7,

810 
	mFS_DENTRY
=8,

811 
	mFS_NRSUPER
=9,

812 
	mFS_MAXSUPER
=10,

813 
	mFS_OVERFLOWUID
=11,

814 
	mFS_OVERFLOWGID
=12,

815 
	mFS_LEASES
=13,

816 
	mFS_DIR_NOTIFY
=14,

817 
	mFS_LEASE_TIME
=15,

818 
	mFS_DQSTATS
=16,

819 
	mFS_XFS
=17,

820 
	mFS_AIO_NR
=18,

821 
	mFS_AIO_MAX_NR
=19,

822 
	mFS_INOTIFY
=20,

823 
	mFS_OCFS2
=988,

828 
	mFS_DQ_LOOKUPS
 = 1,

829 
	mFS_DQ_DROPS
 = 2,

830 
	mFS_DQ_READS
 = 3,

831 
	mFS_DQ_WRITES
 = 4,

832 
	mFS_DQ_CACHE_HITS
 = 5,

833 
	mFS_DQ_ALLOCATED
 = 6,

834 
	mFS_DQ_FREE
 = 7,

835 
	mFS_DQ_SYNCS
 = 8,

836 
	mFS_DQ_WARNINGS
 = 9,

843 
	mDEV_CDROM
=1,

844 
	mDEV_HWMON
=2,

845 
	mDEV_PARPORT
=3,

846 
	mDEV_RAID
=4,

847 
	mDEV_MAC_HID
=5,

848 
	mDEV_SCSI
=6,

849 
	mDEV_IPMI
=7,

854 
	mDEV_CDROM_INFO
=1,

855 
	mDEV_CDROM_AUTOCLOSE
=2,

856 
	mDEV_CDROM_AUTOEJECT
=3,

857 
	mDEV_CDROM_DEBUG
=4,

858 
	mDEV_CDROM_LOCK
=5,

859 
	mDEV_CDROM_CHECK_MEDIA
=6

864 
	mDEV_PARPORT_DEFAULT
=-3

869 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

870 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

875 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

876 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

881 
	mDEV_PARPORT_SPINTIME
=1,

882 
	mDEV_PARPORT_BASE_ADDR
=2,

883 
	mDEV_PARPORT_IRQ
=3,

884 
	mDEV_PARPORT_DMA
=4,

885 
	mDEV_PARPORT_MODES
=5,

886 
	mDEV_PARPORT_DEVICES
=6,

887 
	mDEV_PARPORT_AUTOPROBE
=16

892 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

897 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

902 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

903 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

904 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

905 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

906 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

907 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

912 
	mDEV_SCSI_LOGGING_LEVEL
=1,

917 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

923 
	mABI_DEFHANDLER_COFF
=1,

924 
	mABI_DEFHANDLER_ELF
=2,

925 
	mABI_DEFHANDLER_LCALL7
=3,

926 
	mABI_DEFHANDLER_LIBCSO
=4,

927 
	mABI_TRACE
=5,

928 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 
	#__bôwi£
 
__bôwi£__


	)

23 
__u16
 
	t__bôwi£
 
	t__À16
;

24 
__u16
 
	t__bôwi£
 
	t__be16
;

25 
__u32
 
	t__bôwi£
 
	t__À32
;

26 
__u32
 
	t__bôwi£
 
	t__be32
;

27 
__u64
 
	t__bôwi£
 
	t__À64
;

28 
__u64
 
	t__bôwi£
 
	t__be64
;

30 
__u16
 
	t__bôwi£
 
	t__sum16
;

31 
__u32
 
	t__bôwi£
 
	t__wsum
;

42 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

43 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

44 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 #ifde‡
__USE_XOPEN2K


43 
	#__√ed_time•ec


	)

45 
	~<time.h
>

46 
	#__√ed_timevÆ


	)

47 
	~<bôs/time.h
>

49 #i‚de‡
__su£c⁄ds_t_deföed


50 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

51 
	#__su£c⁄ds_t_deföed


	)

56 
	t__fd_mask
;

59 #unde‡
__NFDBITS


61 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

62 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

63 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

70 #ifde‡
__USE_XOPEN


71 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

72 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

74 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

75 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

77 } 
	tfd_£t
;

80 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

82 #ifde‡
__USE_MISC


84 
__fd_mask
 
	tfd_mask
;

87 
	#NFDBITS
 
__NFDBITS


	)

92 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

93 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

94 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

95 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

98 
__BEGIN_DECLS


108 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

109 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

110 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

111 
timevÆ
 *
__ª°ri˘
 
__timeout
);

113 #ifde‡
__USE_XOPEN2K


120 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

121 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

122 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

123 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

124 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

129 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


130 
	~<bôs/£À˘2.h
>

133 
	g__END_DECLS


	@/usr/include/sys/statfs.h

19 #i‚def 
_SYS_STATFS_H


20 
	#_SYS_STATFS_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/°©fs.h
>

27 
	g__BEGIN_DECLS


30 #i‚de‡
__USE_FILE_OFFSET64


31 
	$°©fs
 (c⁄° *
__fûe
, 
°©fs
 *
__buf
)

32 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

34 #ifde‡
__REDIRECT_NTH


35 
	`__REDIRECT_NTH
 (
°©fs
,

36 (c⁄° *
__fûe
, 
°©fs
 *
__buf
),

37 
°©fs64
Ë
	`__n⁄nuŒ
 ((1, 2));

39 
	#°©fs
 
°©fs64


	)

42 #ifde‡
__USE_LARGEFILE64


43 
	$°©fs64
 (c⁄° *
__fûe
, 
°©fs64
 *
__buf
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$f°©fs
 (
__fûdes
, 
°©fs
 *
__buf
)

51 
__THROW
 
	`__n⁄nuŒ
 ((2));

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
f°©fs
, (
__fûdes
, 
°©fs
 *
__buf
),

55 
f°©fs64
Ë
	`__n⁄nuŒ
 ((2));

57 
	#f°©fs
 
f°©fs64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$f°©fs64
 (
__fûdes
, 
°©fs64
 *
__buf
)

62 
__THROW
 
	`__n⁄nuŒ
 ((2));

65 
__END_DECLS


	@/usr/include/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë((ÁcË| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
 << 3, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (c⁄° *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_MISC


200 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


207 
	~<bôs/sy¶og.h
>

209 #ifde‡
__LDBL_COMPAT


210 
	~<bôs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

351 
	#__NR_sched_£èâr
 351

	)

352 
	#__NR_sched_gë©å
 352

	)

353 
	#__NR_ª«mót2
 353

	)

354 
	#__NR_£ccomp
 354

	)

355 
	#__NR_gëøndom
 355

	)

356 
	#__NR_memfd_¸óã
 356

	)

357 
	#__NR_bpf
 357

	)

358 
	#__NR_execvót
 358

	)

359 
	#__NR_sockë
 359

	)

360 
	#__NR_sockë∑ú
 360

	)

361 
	#__NR_böd
 361

	)

362 
	#__NR_c⁄√˘
 362

	)

363 
	#__NR_li°í
 363

	)

364 
	#__NR_ac˚±4
 364

	)

365 
	#__NR_gësock›t
 365

	)

366 
	#__NR_£tsock›t
 366

	)

367 
	#__NR_gësock«me
 367

	)

368 
	#__NR_gë≥î«me
 368

	)

369 
	#__NR_£ndto
 369

	)

370 
	#__NR_£ndmsg
 370

	)

371 
	#__NR_ªcv‰om
 371

	)

372 
	#__NR_ªcvmsg
 372

	)

373 
	#__NR_shutdown
 373

	)

374 
	#__NR_u£rÁu…fd
 374

	)

375 
	#__NR_memb¨rõr
 375

	)

376 
	#__NR_mlock2
 376

	)

377 
	#__NR_c›y_fûe_ønge
 377

	)

378 
	#__NR_¥ódv2
 378

	)

379 
	#__NR_pwrôev2
 379

	)

380 
	#__NR_pkey_m¥Ÿe˘
 380

	)

381 
	#__NR_pkey_Æloc
 381

	)

382 
	#__NR_pkey_‰ì
 382

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

318 
	#__NR_sched_£èâr
 314

	)

319 
	#__NR_sched_gë©å
 315

	)

320 
	#__NR_ª«mót2
 316

	)

321 
	#__NR_£ccomp
 317

	)

322 
	#__NR_gëøndom
 318

	)

323 
	#__NR_memfd_¸óã
 319

	)

324 
	#__NR_kexec_fûe_lﬂd
 320

	)

325 
	#__NR_bpf
 321

	)

326 
	#__NR_execvót
 322

	)

327 
	#__NR_u£rÁu…fd
 323

	)

328 
	#__NR_memb¨rõr
 324

	)

329 
	#__NR_mlock2
 325

	)

330 
	#__NR_c›y_fûe_ønge
 326

	)

331 
	#__NR_¥ódv2
 327

	)

332 
	#__NR_pwrôev2
 328

	)

333 
	#__NR_pkey_m¥Ÿe˘
 329

	)

334 
	#__NR_pkey_Æloc
 330

	)

335 
	#__NR_pkey_‰ì
 331

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

188 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

189 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

190 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

191 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

192 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

193 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

194 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

195 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

196 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

197 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

198 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

199 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

200 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

201 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

202 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

203 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

204 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

205 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

206 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

207 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

208 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

209 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

210 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

211 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

212 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

213 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

214 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

215 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

216 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

217 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

218 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

219 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

220 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

221 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

222 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

223 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

224 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

225 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

226 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

227 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

228 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

229 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

230 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

231 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

232 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

233 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

234 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

235 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

236 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

237 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

238 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

239 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

240 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

241 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

242 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

243 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

244 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

245 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

246 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

247 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

248 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

249 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

250 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

251 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

252 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

253 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

254 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

255 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

256 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

257 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

258 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

259 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

260 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

261 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

262 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

263 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

264 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

265 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

266 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

267 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

268 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

269 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

270 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

271 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

272 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

273 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

274 
	#__NR_sched_£èâr
 (
__X32_SYSCALL_BIT
 + 314)

	)

275 
	#__NR_sched_gë©å
 (
__X32_SYSCALL_BIT
 + 315)

	)

276 
	#__NR_ª«mót2
 (
__X32_SYSCALL_BIT
 + 316)

	)

277 
	#__NR_£ccomp
 (
__X32_SYSCALL_BIT
 + 317)

	)

278 
	#__NR_gëøndom
 (
__X32_SYSCALL_BIT
 + 318)

	)

279 
	#__NR_memfd_¸óã
 (
__X32_SYSCALL_BIT
 + 319)

	)

280 
	#__NR_kexec_fûe_lﬂd
 (
__X32_SYSCALL_BIT
 + 320)

	)

281 
	#__NR_bpf
 (
__X32_SYSCALL_BIT
 + 321)

	)

282 
	#__NR_u£rÁu…fd
 (
__X32_SYSCALL_BIT
 + 323)

	)

283 
	#__NR_memb¨rõr
 (
__X32_SYSCALL_BIT
 + 324)

	)

284 
	#__NR_mlock2
 (
__X32_SYSCALL_BIT
 + 325)

	)

285 
	#__NR_c›y_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 326)

	)

286 
	#__NR_pkey_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 329)

	)

287 
	#__NR_pkey_Æloc
 (
__X32_SYSCALL_BIT
 + 330)

	)

288 
	#__NR_pkey_‰ì
 (
__X32_SYSCALL_BIT
 + 331)

	)

289 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

290 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

291 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

292 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

293 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

294 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

295 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

296 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

297 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

298 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

299 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

300 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

301 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

302 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

303 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

304 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

305 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

306 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

307 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

308 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

309 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

310 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

311 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

312 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

313 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

314 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

315 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

316 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

317 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

318 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

319 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

320 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 543)

	)

321 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 544)

	)

322 
	#__NR_execvót
 (
__X32_SYSCALL_BIT
 + 545)

	)

323 
	#__NR_¥ódv2
 (
__X32_SYSCALL_BIT
 + 546)

	)

324 
	#__NR_pwrôev2
 (
__X32_SYSCALL_BIT
 + 547)

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	#FALLOC_FL_KEEP_SIZE
 1

	)

324 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

325 
	#FALLOC_FL_COLLAPSE_RANGE
 8

	)

328 
	#FALLOC_FL_ZERO_RANGE
 16

	)

333 
	sfûe_h™dÀ


335 
	mh™dÀ_byãs
;

336 
	mh™dÀ_ty≥
;

338 
	mf_h™dÀ
[0];

342 
	#MAX_HANDLE_SZ
 128

	)

345 
	g__BEGIN_DECLS


347 #ifde‡
__USE_GNU


350 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

351 
__THROW
;

358 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

359 
__Êags
);

366 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

367 
size_t
 
__cou¡
, 
__Êags
);

373 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

374 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

375 
__Êags
);

381 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

382 
__Êags
);

388 #i‚de‡
__USE_FILE_OFFSET64


389 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

391 #ifde‡
__REDIRECT


392 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

393 
__off64_t
 
__Àn
),

394 
ÁŒoˇã64
);

396 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

399 #ifde‡
__USE_LARGEFILE64


400 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

401 
__off64_t
 
__Àn
);

406 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

407 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

408 
__Êags
Ë
__THROW
;

414 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

415 
__Êags
);

419 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/libm-simd-decl-stubs.h

19 #i‚de‡
_MATH_H


33 #i‚de‡
_BITS_LIBM_SIMD_DECL_STUBS_H


34 
	#_BITS_LIBM_SIMD_DECL_STUBS_H
 1

	)

36 
	#__DECL_SIMD_cos


	)

37 
	#__DECL_SIMD_cosf


	)

38 
	#__DECL_SIMD_co¶


	)

40 
	#__DECL_SIMD_sö


	)

41 
	#__DECL_SIMD_söf


	)

42 
	#__DECL_SIMD_söl


	)

44 
	#__DECL_SIMD_söcos


	)

45 
	#__DECL_SIMD_söcosf


	)

46 
	#__DECL_SIMD_söco¶


	)

48 
	#__DECL_SIMD_log


	)

49 
	#__DECL_SIMD_logf


	)

50 
	#__DECL_SIMD_logl


	)

52 
	#__DECL_SIMD_exp


	)

53 
	#__DECL_SIMD_expf


	)

54 
	#__DECL_SIMD_ex∂


	)

56 
	#__DECL_SIMD_pow


	)

57 
	#__DECL_SIMD_powf


	)

58 
	#__DECL_SIMD_powl


	)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


35 
	#PROT_READ
 0x1

	)

36 
	#PROT_WRITE
 0x2

	)

37 
	#PROT_EXEC
 0x4

	)

38 
	#PROT_NONE
 0x0

	)

39 
	#PROT_GROWSDOWN
 0x01000000

	)

41 
	#PROT_GROWSUP
 0x02000000

	)

45 
	#MAP_SHARED
 0x01

	)

46 
	#MAP_PRIVATE
 0x02

	)

47 #ifde‡
__USE_MISC


48 
	#MAP_TYPE
 0x0‡

	)

52 
	#MAP_FIXED
 0x10

	)

53 #ifde‡
__USE_MISC


54 
	#MAP_FILE
 0

	)

55 #ifde‡
__MAP_ANONYMOUS


56 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

58 
	#MAP_ANONYMOUS
 0x20

	)

60 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

62 
	#MAP_HUGE_SHIFT
 26

	)

63 
	#MAP_HUGE_MASK
 0x3f

	)

67 
	#MS_ASYNC
 1

	)

68 
	#MS_SYNC
 4

	)

69 
	#MS_INVALIDATE
 2

	)

72 #ifde‡
__USE_GNU


73 
	#MREMAP_MAYMOVE
 1

	)

74 
	#MREMAP_FIXED
 2

	)

78 #ifde‡
__USE_MISC


79 
	#MADV_NORMAL
 0

	)

80 
	#MADV_RANDOM
 1

	)

81 
	#MADV_SEQUENTIAL
 2

	)

82 
	#MADV_WILLNEED
 3

	)

83 
	#MADV_DONTNEED
 4

	)

84 
	#MADV_FREE
 8

	)

85 
	#MADV_REMOVE
 9

	)

86 
	#MADV_DONTFORK
 10

	)

87 
	#MADV_DOFORK
 11

	)

88 
	#MADV_MERGEABLE
 12

	)

89 
	#MADV_UNMERGEABLE
 13

	)

90 
	#MADV_HUGEPAGE
 14

	)

91 
	#MADV_NOHUGEPAGE
 15

	)

92 
	#MADV_DONTDUMP
 16

	)

94 
	#MADV_DODUMP
 17

	)

95 
	#MADV_HWPOISON
 100

	)

99 #ifde‡
__USE_XOPEN2K


100 
	#POSIX_MADV_NORMAL
 0

	)

101 
	#POSIX_MADV_RANDOM
 1

	)

102 
	#POSIX_MADV_SEQUENTIAL
 2

	)

103 
	#POSIX_MADV_WILLNEED
 3

	)

104 
	#POSIX_MADV_DONTNEED
 4

	)

108 #i‚de‡
MCL_CURRENT


109 
	#MCL_CURRENT
 1

	)

110 
	#MCL_FUTURE
 2

	)

112 
	#MCL_ONFAULT
 4

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWCGROUP
 0x02000000

	)

64 
	#CLONE_NEWUTS
 0x04000000

	)

65 
	#CLONE_NEWIPC
 0x08000000

	)

66 
	#CLONE_NEWUSER
 0x10000000

	)

67 
	#CLONE_NEWPID
 0x20000000

	)

68 
	#CLONE_NEWNET
 0x40000000

	)

69 
	#CLONE_IO
 0x80000000

	)

73 
	ssched_∑øm


75 
	m__sched_¥i‹ôy
;

78 
	g__BEGIN_DECLS


80 #ifde‡
__USE_GNU


82 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

83 
__Êags
, *
__¨g
, ...Ë
__THROW
;

86 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

89 
	$sched_gë˝u
 (Ë
__THROW
;

92 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

96 
__END_DECLS


100 #i‡!
deföed
 
__deföed_sched∑øm
 \

101 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

102 
	#__deföed_sched∑øm
 1

	)

104 
	s__sched_∑øm


106 
__sched_¥i‹ôy
;

108 #unde‡
__√ed_sched∑øm


112 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


113 
	#__˝u_£t_t_deföed


	)

115 
	#__CPU_SETSIZE
 1024

	)

116 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

119 
__CPU_MASK_TYPE
 
	t__˝u_mask
;

122 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

123 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

128 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

129 } 
	t˝u_£t_t
;

132 #i‡
	`__GNUC_PREREQ
 (2, 91)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

134 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

136 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

138 
size_t
 
__i
; \

139 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

140 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

141 
__i
 = 0; __ò< 
__imax
; ++__i) \

142 
__bôs
[
__i
] = 0; \

143 
	}
} 0)

	)

145 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

146 (
__exãnsi⁄__
 \

147 ({ 
size_t
 
__˝u
 = (
˝u
); \

148 
__˝u
 / 8 < (
£tsize
) \

149 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

150 |
	`__CPUMASK
 (
__˝u
)) \

151 : 0; }))

	)

152 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

153 (
__exãnsi⁄__
 \

154 ({ 
size_t
 
__˝u
 = (
˝u
); \

155 
__˝u
 / 8 < (
£tsize
) \

156 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

157 &~
	`__CPUMASK
 (
__˝u
)) \

158 : 0; }))

	)

159 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

160 (
__exãnsi⁄__
 \

161 ({ 
size_t
 
__˝u
 = (
˝u
); \

162 
__˝u
 / 8 < (
£tsize
) \

163 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

164 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

165 : 0; }))

	)

167 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

168 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

170 #i‡
__GNUC_PREREQ
 (2, 91)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

174 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

175 (
__exãnsi⁄__
 \

176 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

177 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

178 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

179 
size_t
 
__i
; \

180 
__i
 = 0; __ò< 
__imax
; ++__i) \

181 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

183 
__i
 =
__imax
; }))

	)

186 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

187 (
__exãnsi⁄__
 \

188 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

189 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

190 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

191 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

192 
size_t
 
__i
; \

193 
__i
 = 0; __ò< 
__imax
; ++__i) \

194 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

195 
__de°
; }))

	)

197 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

198 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

199 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

200 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

202 
__BEGIN_DECLS


204 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

205 
__THROW
;

206 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

207 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

209 
__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/statfs.h

18 #i‚de‡
_SYS_STATFS_H


22 
	~<bôs/ty≥s.h
>

24 
	s°©fs


26 
__fsw‹d_t
 
	mf_ty≥
;

27 
__fsw‹d_t
 
	mf_bsize
;

28 #i‚de‡
__USE_FILE_OFFSET64


29 
__fsblk˙t_t
 
	mf_blocks
;

30 
__fsblk˙t_t
 
	mf_b‰ì
;

31 
__fsblk˙t_t
 
	mf_bavaû
;

32 
__fsfû˙t_t
 
	mf_fûes
;

33 
__fsfû˙t_t
 
	mf_f‰ì
;

35 
__fsblk˙t64_t
 
	mf_blocks
;

36 
__fsblk˙t64_t
 
	mf_b‰ì
;

37 
__fsblk˙t64_t
 
	mf_bavaû
;

38 
__fsfû˙t64_t
 
	mf_fûes
;

39 
__fsfû˙t64_t
 
	mf_f‰ì
;

41 
__fsid_t
 
	mf_fsid
;

42 
__fsw‹d_t
 
	mf_«mñí
;

43 
__fsw‹d_t
 
	mf_‰size
;

44 
__fsw‹d_t
 
	mf_Êags
;

45 
__fsw‹d_t
 
	mf_•¨e
[4];

48 #ifde‡
__USE_LARGEFILE64


49 
	s°©fs64


51 
__fsw‹d_t
 
	mf_ty≥
;

52 
__fsw‹d_t
 
	mf_bsize
;

53 
__fsblk˙t64_t
 
	mf_blocks
;

54 
__fsblk˙t64_t
 
	mf_b‰ì
;

55 
__fsblk˙t64_t
 
	mf_bavaû
;

56 
__fsfû˙t64_t
 
	mf_fûes
;

57 
__fsfû˙t64_t
 
	mf_f‰ì
;

58 
__fsid_t
 
	mf_fsid
;

59 
__fsw‹d_t
 
	mf_«mñí
;

60 
__fsw‹d_t
 
	mf_‰size
;

61 
__fsw‹d_t
 
	mf_Êags
;

62 
__fsw‹d_t
 
	mf_•¨e
[4];

67 
	#_STATFS_F_NAMELEN


	)

68 
	#_STATFS_F_FRSIZE


	)

69 
	#_STATFS_F_FLAGS


	)

	@/usr/include/bits/syslog-ldbl.h

19 #i‚de‡
_SYS_SYSLOG_H


23 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

25 #ifde‡
__USE_MISC


26 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

29 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


30 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

32 #ifde‡
__USE_MISC


33 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

19 #i‚de‡
_SYS_SYSLOG_H


23 #i‚de‡
_BITS_SYSLOG_PATH_H


24 
	#_BITS_SYSLOG_PATH_H
 1

	)

26 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

19 #i‚de‡
_SYS_SYSLOG_H


24 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
, ...)

25 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

27 #ifde‡
__va_¨g_∑ck


28 
__f‹tify_fun˘i⁄
 

29 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

31 
	`__sy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

32 
	}
}

33 #ñi‡!
deföed
 
__˝lu•lus


34 
	#sy¶og
(
¥i
, ...) \

35 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

39 #ifde‡
__USE_MISC


40 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
,

41 
__gnuc_va_li°
 
__≠
)

42 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

44 
__f‹tify_fun˘i⁄
 

45 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

47 
	`__vsy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

48 
	}
}

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

57 
	#__STDC_ISO_10646__
 201605L

	)

60 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

310 #unde‡
__Æways_ölöe


311 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

313 #unde‡
__Æways_ölöe


314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡
__GNUC_PREREQ
 (4,3)

320 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

322 
	#__©åibuã_¨tificül__


	)

334 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

335 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

336 || 
deföed
 
__GNUC_GNU_INLINE__
)))

337 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


338 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

339 
	#__exã∫_Æways_ölöe
 \

340 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

342 
	#__exã∫_ölöe
 
__ölöe


	)

343 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

347 #ifde‡
__exã∫_Æways_ölöe


348 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

353 #i‡
__GNUC_PREREQ
 (4,3)

354 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

355 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

362 #i‡!
__GNUC_PREREQ
 (2,8)

363 
	#__exãnsi⁄__


	)

367 #i‡!
__GNUC_PREREQ
 (2,92)

368 
	#__ª°ri˘


	)

374 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


375 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

377 #ifde‡
__GNUC__


378 
	#__ª°ri˘_¨r


	)

380 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

381 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

384 
	#__ª°ri˘_¨r


	)

389 #i‡
__GNUC__
 >= 3

390 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

391 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

393 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

394 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

397 #i‡(!
deföed
 
_N‹ëu∫
 \

398 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

399 && !
	$__GNUC_PREREQ
 (4,7))

400 #i‡
	`__GNUC_PREREQ
 (2,8)

401 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

403 
	#_N‹ëu∫


	)

407 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

408 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

409 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

410 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

411 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

412 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

415 
	~<bôs/w‹dsize.h
>

417 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


418 
	#__LDBL_COMPAT
 1

	)

419 #ifde‡
__REDIRECT


420 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

421 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

422 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

423 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

424 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

425 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

426 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

427 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

428 
	#__LDBL_REDIR_DECL
(
«me
) \

429 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

430 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

431 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

432 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

433 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

436 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


437 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

438 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

439 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

440 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

441 
	#__LDBL_REDIR_DECL
(
«me
)

	)

442 #ifde‡
__REDIRECT


443 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

444 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

445 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
[0];

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/stddef.h

3 #i‚de‡
__Æways_ölöe


4 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

17 
	#ENOSYS
 38

	)

19 
	#ENOTEMPTY
 39

	)

20 
	#ELOOP
 40

	)

21 
	#EWOULDBLOCK
 
EAGAIN


	)

22 
	#ENOMSG
 42

	)

23 
	#EIDRM
 43

	)

24 
	#ECHRNG
 44

	)

25 
	#EL2NSYNC
 45

	)

26 
	#EL3HLT
 46

	)

27 
	#EL3RST
 47

	)

28 
	#ELNRNG
 48

	)

29 
	#EUNATCH
 49

	)

30 
	#ENOCSI
 50

	)

31 
	#EL2HLT
 51

	)

32 
	#EBADE
 52

	)

33 
	#EBADR
 53

	)

34 
	#EXFULL
 54

	)

35 
	#ENOANO
 55

	)

36 
	#EBADRQC
 56

	)

37 
	#EBADSLT
 57

	)

39 
	#EDEADLOCK
 
EDEADLK


	)

41 
	#EBFONT
 59

	)

42 
	#ENOSTR
 60

	)

43 
	#ENODATA
 61

	)

44 
	#ETIME
 62

	)

45 
	#ENOSR
 63

	)

46 
	#ENONET
 64

	)

47 
	#ENOPKG
 65

	)

48 
	#EREMOTE
 66

	)

49 
	#ENOLINK
 67

	)

50 
	#EADV
 68

	)

51 
	#ESRMNT
 69

	)

52 
	#ECOMM
 70

	)

53 
	#EPROTO
 71

	)

54 
	#EMULTIHOP
 72

	)

55 
	#EDOTDOT
 73

	)

56 
	#EBADMSG
 74

	)

57 
	#EOVERFLOW
 75

	)

58 
	#ENOTUNIQ
 76

	)

59 
	#EBADFD
 77

	)

60 
	#EREMCHG
 78

	)

61 
	#ELIBACC
 79

	)

62 
	#ELIBBAD
 80

	)

63 
	#ELIBSCN
 81

	)

64 
	#ELIBMAX
 82

	)

65 
	#ELIBEXEC
 83

	)

66 
	#EILSEQ
 84

	)

67 
	#ERESTART
 85

	)

68 
	#ESTRPIPE
 86

	)

69 
	#EUSERS
 87

	)

70 
	#ENOTSOCK
 88

	)

71 
	#EDESTADDRREQ
 89

	)

72 
	#EMSGSIZE
 90

	)

73 
	#EPROTOTYPE
 91

	)

74 
	#ENOPROTOOPT
 92

	)

75 
	#EPROTONOSUPPORT
 93

	)

76 
	#ESOCKTNOSUPPORT
 94

	)

77 
	#EOPNOTSUPP
 95

	)

78 
	#EPFNOSUPPORT
 96

	)

79 
	#EAFNOSUPPORT
 97

	)

80 
	#EADDRINUSE
 98

	)

81 
	#EADDRNOTAVAIL
 99

	)

82 
	#ENETDOWN
 100

	)

83 
	#ENETUNREACH
 101

	)

84 
	#ENETRESET
 102

	)

85 
	#ECONNABORTED
 103

	)

86 
	#ECONNRESET
 104

	)

87 
	#ENOBUFS
 105

	)

88 
	#EISCONN
 106

	)

89 
	#ENOTCONN
 107

	)

90 
	#ESHUTDOWN
 108

	)

91 
	#ETOOMANYREFS
 109

	)

92 
	#ETIMEDOUT
 110

	)

93 
	#ECONNREFUSED
 111

	)

94 
	#EHOSTDOWN
 112

	)

95 
	#EHOSTUNREACH
 113

	)

96 
	#EALREADY
 114

	)

97 
	#EINPROGRESS
 115

	)

98 
	#ESTALE
 116

	)

99 
	#EUCLEAN
 117

	)

100 
	#ENOTNAM
 118

	)

101 
	#ENAVAIL
 119

	)

102 
	#EISNAM
 120

	)

103 
	#EREMOTEIO
 121

	)

104 
	#EDQUOT
 122

	)

106 
	#ENOMEDIUM
 123

	)

107 
	#EMEDIUMTYPE
 124

	)

108 
	#ECANCELED
 125

	)

109 
	#ENOKEY
 126

	)

110 
	#EKEYEXPIRED
 127

	)

111 
	#EKEYREVOKED
 128

	)

112 
	#EKEYREJECTED
 129

	)

115 
	#EOWNERDEAD
 130

	)

116 
	#ENOTRECOVERABLE
 131

	)

118 
	#ERFKILL
 132

	)

120 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@
1
.
1
/usr/include
538
10655
copy/xfs_copy.c
copy/xfs_copy.h
db/addr.c
db/addr.h
db/agf.c
db/agf.h
db/agfl.c
db/agfl.h
db/agi.c
db/agi.h
db/attr.c
db/attr.h
db/attrset.c
db/attrset.h
db/attrshort.c
db/attrshort.h
db/bit.c
db/bit.h
db/block.c
db/block.h
db/bmap.c
db/bmap.h
db/bmroot.c
db/bmroot.h
db/btblock.c
db/btblock.h
db/check.c
db/check.h
db/command.c
db/command.h
db/convert.c
db/convert.h
db/crc.c
db/crc.h
db/debug.c
db/debug.h
db/dir2.c
db/dir2.h
db/dir2sf.c
db/dir2sf.h
db/dquot.c
db/dquot.h
db/echo.c
db/echo.h
db/faddr.c
db/faddr.h
db/field.c
db/field.h
db/flist.c
db/flist.h
db/fprint.c
db/fprint.h
db/frag.c
db/frag.h
db/freesp.c
db/freesp.h
db/fsmap.c
db/fsmap.h
db/hash.c
db/hash.h
db/help.c
db/help.h
db/init.c
db/init.h
db/inode.c
db/inode.h
db/input.c
db/input.h
db/io.c
db/io.h
db/logformat.c
db/logformat.h
db/malloc.c
db/malloc.h
db/metadump.c
db/metadump.h
db/output.c
db/output.h
db/print.c
db/print.h
db/quit.c
db/quit.h
db/sb.c
db/sb.h
db/sig.c
db/sig.h
db/strvec.c
db/strvec.h
db/symlink.c
db/symlink.h
db/text.c
db/text.h
db/type.c
db/type.h
db/write.c
db/write.h
estimate/xfs_estimate.c
fsr/xfs_fsr.c
growfs/xfs_growfs.c
include/atomic.h
include/bitops.h
include/cache.h
include/command.h
include/darwin.h
include/freebsd.h
include/gnukfreebsd.h
include/handle.h
include/hlist.h
include/input.h
include/jdm.h
include/kmem.h
include/libxcmd.h
include/libxfs.h
include/libxlog.h
include/linux.h
include/list.h
include/parent.h
include/path.h
include/platform_defs.h
include/project.h
include/radix-tree.h
include/xfs.h
include/xfs_arch.h
include/xfs_btree_trace.h
include/xfs_inode.h
include/xfs_log_recover.h
include/xfs_metadump.h
include/xfs_mount.h
include/xfs_multidisk.h
include/xfs_trace.h
include/xfs_trans.h
include/xqm.h
io/attr.c
io/bmap.c
io/copy_file_range.c
io/cowextsize.c
io/encrypt.c
io/fadvise.c
io/fiemap.c
io/file.c
io/freeze.c
io/fsync.c
io/getrusage.c
io/imap.c
io/init.c
io/init.h
io/inject.c
io/io.h
io/link.c
io/madvise.c
io/mincore.c
io/mmap.c
io/open.c
io/parent.c
io/pread.c
io/prealloc.c
io/pwrite.c
io/readdir.c
io/reflink.c
io/resblks.c
io/seek.c
io/sendfile.c
io/shutdown.c
io/sync.c
io/sync_file_range.c
io/truncate.c
io/utimes.c
libhandle/handle.c
libhandle/jdm.c
libxcmd/command.c
libxcmd/help.c
libxcmd/input.c
libxcmd/paths.c
libxcmd/projects.c
libxcmd/quit.c
libxcmd/topology.c
libxfs/cache.c
libxfs/crc32.c
libxfs/crc32defs.h
libxfs/crc32table.h
libxfs/darwin.c
libxfs/defer_item.c
libxfs/freebsd.c
libxfs/gen_crc32table.c
libxfs/init.c
libxfs/init.h
libxfs/irix.c
libxfs/kmem.c
libxfs/libxfs_api_defs.h
libxfs/libxfs_io.h
libxfs/libxfs_priv.h
libxfs/linux.c
libxfs/list_sort.c
libxfs/logitem.c
libxfs/radix-tree.c
libxfs/rdwr.c
libxfs/trans.c
libxfs/util.c
libxfs/xfs_ag_resv.c
libxfs/xfs_ag_resv.h
libxfs/xfs_alloc.c
libxfs/xfs_alloc.h
libxfs/xfs_alloc_btree.c
libxfs/xfs_alloc_btree.h
libxfs/xfs_attr.c
libxfs/xfs_attr_leaf.c
libxfs/xfs_attr_leaf.h
libxfs/xfs_attr_remote.c
libxfs/xfs_attr_remote.h
libxfs/xfs_attr_sf.h
libxfs/xfs_bit.c
libxfs/xfs_bit.h
libxfs/xfs_bmap.c
libxfs/xfs_bmap.h
libxfs/xfs_bmap_btree.c
libxfs/xfs_bmap_btree.h
libxfs/xfs_btree.c
libxfs/xfs_btree.h
libxfs/xfs_cksum.h
libxfs/xfs_da_btree.c
libxfs/xfs_da_btree.h
libxfs/xfs_da_format.c
libxfs/xfs_da_format.h
libxfs/xfs_defer.c
libxfs/xfs_defer.h
libxfs/xfs_dir2.c
libxfs/xfs_dir2.h
libxfs/xfs_dir2_block.c
libxfs/xfs_dir2_data.c
libxfs/xfs_dir2_leaf.c
libxfs/xfs_dir2_node.c
libxfs/xfs_dir2_priv.h
libxfs/xfs_dir2_sf.c
libxfs/xfs_dquot_buf.c
libxfs/xfs_format.h
libxfs/xfs_fs.h
libxfs/xfs_ialloc.c
libxfs/xfs_ialloc.h
libxfs/xfs_ialloc_btree.c
libxfs/xfs_ialloc_btree.h
libxfs/xfs_inode_buf.c
libxfs/xfs_inode_buf.h
libxfs/xfs_inode_fork.c
libxfs/xfs_inode_fork.h
libxfs/xfs_log_format.h
libxfs/xfs_log_rlimit.c
libxfs/xfs_quota_defs.h
libxfs/xfs_refcount.c
libxfs/xfs_refcount.h
libxfs/xfs_refcount_btree.c
libxfs/xfs_refcount_btree.h
libxfs/xfs_rmap.c
libxfs/xfs_rmap.h
libxfs/xfs_rmap_btree.c
libxfs/xfs_rmap_btree.h
libxfs/xfs_rtbitmap.c
libxfs/xfs_sb.c
libxfs/xfs_sb.h
libxfs/xfs_shared.h
libxfs/xfs_symlink_remote.c
libxfs/xfs_trans_resv.c
libxfs/xfs_trans_resv.h
libxfs/xfs_trans_space.h
libxfs/xfs_types.h
libxlog/util.c
libxlog/xfs_log_recover.c
logprint/log_copy.c
logprint/log_dump.c
logprint/log_misc.c
logprint/log_print_all.c
logprint/log_print_trans.c
logprint/log_redo.c
logprint/logprint.c
logprint/logprint.h
mdrestore/xfs_mdrestore.c
mkfs/maxtrres.c
mkfs/proto.c
mkfs/xfs_mkfs.c
quota/darwin.c
quota/edit.c
quota/free.c
quota/freebsd.c
quota/init.c
quota/init.h
quota/irix.c
quota/linux.c
quota/path.c
quota/project.c
quota/quot.c
quota/quota.c
quota/quota.h
quota/report.c
quota/state.c
quota/util.c
repair/agheader.c
repair/agheader.h
repair/attr_repair.c
repair/attr_repair.h
repair/avl.c
repair/avl.h
repair/avl64.c
repair/avl64.h
repair/bmap.c
repair/bmap.h
repair/btree.c
repair/btree.h
repair/da_util.c
repair/da_util.h
repair/dino_chunks.c
repair/dinode.c
repair/dinode.h
repair/dir2.c
repair/dir2.h
repair/err_protos.h
repair/globals.c
repair/globals.h
repair/incore.c
repair/incore.h
repair/incore_bmc.c
repair/incore_ext.c
repair/incore_ino.c
repair/init.c
repair/phase1.c
repair/phase2.c
repair/phase3.c
repair/phase4.c
repair/phase5.c
repair/phase6.c
repair/phase7.c
repair/prefetch.c
repair/prefetch.h
repair/progress.c
repair/progress.h
repair/protos.h
repair/rmap.c
repair/rmap.h
repair/rt.c
repair/rt.h
repair/sb.c
repair/scan.c
repair/scan.h
repair/slab.c
repair/slab.h
repair/threads.c
repair/threads.h
repair/versions.c
repair/versions.h
repair/xfs_repair.c
rtcp/xfs_rtcp.c
/usr/include/asm/types.h
/usr/include/assert.h
/usr/include/blkid/blkid.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/endian.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/ftw.h
/usr/include/getopt.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/libgen.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/linux/falloc.h
/usr/include/linux/fiemap.h
/usr/include/linux/fs.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/mntent.h
/usr/include/paths.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/mount.h
/usr/include/sys/param.h
/usr/include/sys/quota.h
/usr/include/sys/resource.h
/usr/include/sys/sendfile.h
/usr/include/sys/stat.h
/usr/include/sys/statvfs.h
/usr/include/sys/syscall.h
/usr/include/sys/sysctl.h
/usr/include/sys/sysinfo.h
/usr/include/sys/sysmacros.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/vfs.h
/usr/include/sys/wait.h
/usr/include/sys/xattr.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utmp.h
/usr/include/uuid/uuid.h
/usr/include/xfs/linux.h
/usr/include/xfs/xfs.h
/usr/include/xfs/xfs_fs.h
/usr/include/xfs/xfs_types.h
/usr/include/alloca.h
/usr/include/asm-generic/types.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/endian.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/locale.h
/usr/include/bits/math-finite.h
/usr/include/bits/math-vector.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/param.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/statvfs.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/sysctl.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/utmp.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/ioctl.h
/usr/include/linux/kernel.h
/usr/include/linux/limits.h
/usr/include/linux/sysctl.h
/usr/include/linux/types.h
/usr/include/sched.h
/usr/include/sys/select.h
/usr/include/sys/statfs.h
/usr/include/sys/syslog.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/libm-simd-decl-stubs.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/statfs.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/param.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysinfo.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/errno.h
/usr/include/asm/param.h
/usr/include/asm/posix_types.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/param.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/posix_types.h
